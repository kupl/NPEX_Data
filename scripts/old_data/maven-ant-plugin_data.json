[
    {
        "commit": "https://github.com/apache/maven-ant-plugin/commit/424d4634f68962099e0c40dd8b7123f72b3c8e0a",
        "repo": "maven-ant-plugin",
        "parent": "https://github.com/apache/maven-ant-plugin/commit/4bbe73206fce7e506224803e1c42e382cb6c9274",
        "message": "[MANT-52] NullPointerException when maven-javadoc-plugin configuration defines multiple group elements within a groups list element.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@788423 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "maven-ant-plugin_1",
        "file": [
            {
                "sha": "dc75ea9b9cd71b694c9ff68b7bd01a89796bcec7",
                "filename": "src/it/javadoc-it/pom.xml",
                "status": "modified",
                "additions": 10,
                "deletions": 0,
                "changes": 10,
                "blob_url": "https://github.com/apache/maven-ant-plugin/blob/424d4634f68962099e0c40dd8b7123f72b3c8e0a/src/it/javadoc-it/pom.xml",
                "raw_url": "https://github.com/apache/maven-ant-plugin/raw/424d4634f68962099e0c40dd8b7123f72b3c8e0a/src/it/javadoc-it/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/maven-ant-plugin/contents/src/it/javadoc-it/pom.xml?ref=424d4634f68962099e0c40dd8b7123f72b3c8e0a",
                "patch": "@@ -49,6 +49,16 @@\n               <head>Software Requirement:</head>\n             </tag>\n           </tags>\n+          <groups>\n+            <group>\n+              <title>Repository API</title>\n+              <packages>org.openrdf.repository*</packages>\n+            </group>\n+            <group>\n+              <title>RDF Model API</title>\n+              <packages>org.openrdf.model*</packages>\n+            </group>\n+          </groups>\n         </configuration>\n       </plugin>\n     </plugins>"
            },
            {
                "sha": "59a6caff720f2b6989c44e752e60df253a2deb5b",
                "filename": "src/main/java/org/apache/maven/plugin/ant/AntBuildWriterUtil.java",
                "status": "modified",
                "additions": 3,
                "deletions": 2,
                "changes": 5,
                "blob_url": "https://github.com/apache/maven-ant-plugin/blob/424d4634f68962099e0c40dd8b7123f72b3c8e0a/src/main/java/org/apache/maven/plugin/ant/AntBuildWriterUtil.java",
                "raw_url": "https://github.com/apache/maven-ant-plugin/raw/424d4634f68962099e0c40dd8b7123f72b3c8e0a/src/main/java/org/apache/maven/plugin/ant/AntBuildWriterUtil.java",
                "contents_url": "https://api.github.com/repos/apache/maven-ant-plugin/contents/src/main/java/org/apache/maven/plugin/ant/AntBuildWriterUtil.java?ref=424d4634f68962099e0c40dd8b7123f72b3c8e0a",
                "patch": "@@ -332,9 +332,10 @@ public static void writeJavadocTask( XMLWriter writer, MavenProject project, Art\n         {\n             for ( int i = 0; i < groups.length; i++ )\n             {\n+                Map group = (Map) groups[i].get( \"group\" );\n                 writer.startElement( \"group\" );\n-                writer.addAttribute( \"title\", (String) groups[i].get( \"title\" ) );\n-                addWrapAttribute( writer, \"javadoc\", \"package\", (String) groups[i].get( \"package\" ), 4 );\n+                writer.addAttribute( \"title\", (String) group.get( \"title\" ) );\n+                addWrapAttribute( writer, \"javadoc\", \"package\", (String) group.get( \"package\" ), 4 );\n                 writer.endElement(); // group\n             }\n         }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/maven-ant-plugin/commit/1f0df160be6962bb18260c3461d329da23ef130a",
        "repo": "maven-ant-plugin",
        "parent": "https://github.com/apache/maven-ant-plugin/commit/8a20d93ac726458151020aa8ab9f3c4664b0add7",
        "message": "[MANT-41] mvn ant:ant fails with NPE when maven-javadoc-plugin custom tag is specified in pom.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@663768 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "maven-ant-plugin_2",
        "file": [
            {
                "sha": "7996857286fa0c40b5a52ea4b69fbf75db9ea9ae",
                "filename": "src/it/javadoc-it/pom.xml",
                "status": "added",
                "additions": 61,
                "deletions": 0,
                "changes": 61,
                "blob_url": "https://github.com/apache/maven-ant-plugin/blob/1f0df160be6962bb18260c3461d329da23ef130a/src/it/javadoc-it/pom.xml",
                "raw_url": "https://github.com/apache/maven-ant-plugin/raw/1f0df160be6962bb18260c3461d329da23ef130a/src/it/javadoc-it/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/maven-ant-plugin/contents/src/it/javadoc-it/pom.xml?ref=1f0df160be6962bb18260c3461d329da23ef130a",
                "patch": "@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>org.apache.maven.plugins.maven-ant-plugin.it</groupId>\n+  <artifactId>javadoc-it</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+\n+  <build>\n+    <finalName>${project.artifactId}</finalName>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-ant-plugin</artifactId>\n+        <version>@pom.version@</version>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-clean-plugin</artifactId>\n+        <version>2.2</version>\n+        <configuration>\n+          <filesets>\n+            <fileset>\n+              <directory>${basedir}</directory>\n+              <includes>\n+                <include>build.xml</include>\n+                <include>maven-build.*</include>\n+              </includes>\n+            </fileset>\n+          </filesets>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+\n+  <reporting>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-javadoc-plugin</artifactId>\n+        <version>2.4</version>\n+        <configuration>\n+          <tags>\n+            <tag>\n+              <name>requirement</name>\n+              <placement>a</placement>\n+              <head>Software Requirement:</head>\n+            </tag>\n+          </tags>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </reporting>\n+\n+  <properties>\n+    <build.compiler>extJavac</build.compiler>\n+  </properties>\n+\n+</project>"
            },
            {
                "sha": "27ccb83201ed6ec40983a4e13432b1128718b805",
                "filename": "src/it/javadoc-it/src/main/java/Main.java",
                "status": "added",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/maven-ant-plugin/blob/1f0df160be6962bb18260c3461d329da23ef130a/src/it/javadoc-it/src/main/java/Main.java",
                "raw_url": "https://github.com/apache/maven-ant-plugin/raw/1f0df160be6962bb18260c3461d329da23ef130a/src/it/javadoc-it/src/main/java/Main.java",
                "contents_url": "https://api.github.com/repos/apache/maven-ant-plugin/contents/src/it/javadoc-it/src/main/java/Main.java?ref=1f0df160be6962bb18260c3461d329da23ef130a",
                "patch": "@@ -0,0 +1,3 @@\n+public class Main\n+{\n+}"
            },
            {
                "sha": "b0aa3c7f3773961f125de0ebbe0020a14a69461e",
                "filename": "src/main/java/org/apache/maven/plugin/ant/AntBuildWriterUtil.java",
                "status": "modified",
                "additions": 124,
                "deletions": 71,
                "changes": 195,
                "blob_url": "https://github.com/apache/maven-ant-plugin/blob/1f0df160be6962bb18260c3461d329da23ef130a/src/main/java/org/apache/maven/plugin/ant/AntBuildWriterUtil.java",
                "raw_url": "https://github.com/apache/maven-ant-plugin/raw/1f0df160be6962bb18260c3461d329da23ef130a/src/main/java/org/apache/maven/plugin/ant/AntBuildWriterUtil.java",
                "contents_url": "https://api.github.com/repos/apache/maven-ant-plugin/contents/src/main/java/org/apache/maven/plugin/ant/AntBuildWriterUtil.java?ref=1f0df160be6962bb18260c3461d329da23ef130a",
                "patch": "@@ -39,7 +39,6 @@\n import org.apache.maven.project.MavenProject;\n import org.apache.maven.wagon.PathUtils;\n import org.apache.xpath.XPathAPI;\n-import org.apache.xpath.objects.XObject;\n import org.codehaus.plexus.util.StringUtils;\n import org.codehaus.plexus.util.xml.XMLWriter;\n import org.codehaus.plexus.util.xml.Xpp3Dom;\n@@ -535,10 +534,11 @@ public static void writeJavadocTask( XMLWriter writer, MavenProject project, Art\n         {\n             for ( int i = 0; i < tags.length; i++ )\n             {\n+                Map props = (Map) tags[i].get( \"tag\" );\n                 writer.startElement( \"tag\" );\n-                writer.addAttribute( \"name\", (String) tags[i].get( \"name\" ) );\n-                addWrapAttribute( writer, \"javadoc\", \"scope\", (String) tags[i].get( \"placement\" ), 4 );\n-                addWrapAttribute( writer, \"javadoc\", \"description\", (String) tags[i].get( \"head\" ), 4 );\n+                writer.addAttribute( \"name\", (String) props.get( \"name\" ) );\n+                addWrapAttribute( writer, \"javadoc\", \"scope\", (String) props.get( \"placement\" ), 4 );\n+                addWrapAttribute( writer, \"javadoc\", \"description\", (String) props.get( \"head\" ), 4 );\n                 writer.endElement(); // tag\n             }\n         }\n@@ -1131,98 +1131,103 @@ private static Map getMavenPluginConfigurationsImpl( MavenProject project, Strin\n                 Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder()\n                     .parse( new ByteArrayInputStream( pluginConf.toString().getBytes( \"UTF-8\" ) ) );\n \n-                XObject obj = XPathAPI.eval( doc, \"//configuration/\" + optionName );\n-\n-                NodeList nodeList = obj.nodelist();\n-                if ( nodeList.getLength() > 0 && isList( nodeList.item( 0 ) ) )\n+                NodeList nodeList = XPathAPI.eval( doc, \"//configuration/\" + optionName ).nodelist();\n+                if ( nodeList.getLength() > 0 )\n                 {\n-                    /*\n-                     * <optionNames>\n-                     *   <optionName>\n-                     *    <param1>value1</param1>\n-                     *    <param2>value2</param2>\n-                     *   </optionName>\n-                     * </optionNames>\n-                     */\n-                    Map options = new HashMap();\n-\n-                    List optionNames = new ArrayList();\n-                    NodeList childs = nodeList.item( 0 ).getChildNodes();\n-                    for ( int i = 0; i < childs.getLength(); i++ )\n-                    {\n-                        if ( childs.item( i ).getNodeType() == Node.ELEMENT_NODE )\n-                        {\n-                            Map option = new HashMap();\n+                    Node optionNode = nodeList.item( 0 );\n \n-                            obj = XPathAPI.eval( doc, \"//configuration/\" + childs.item( i ).getNodeName() );\n+                    if ( isList( optionNode ) )\n+                    {\n+                        /*\n+                         * <optionNames>\n+                         *   <optionName>\n+                         *    <param1>value1</param1>\n+                         *    <param2>value2</param2>\n+                         *   </optionName>\n+                         * </optionNames>\n+                         */\n+                        Map options = new HashMap();\n \n-                            if ( StringUtils.isNotEmpty( obj.toString() ) )\n+                        List optionNames = new ArrayList();\n+                        NodeList childs = optionNode.getChildNodes();\n+                        for ( int i = 0; i < childs.getLength(); i++ )\n+                        {\n+                            Node child = childs.item( i );\n+                            if ( child.getNodeType() == Node.ELEMENT_NODE )\n                             {\n-                                Map properties = new HashMap();\n-                                NodeList childs2 = childs.item( i ).getChildNodes();\n-                                if ( childs2.getLength() > 0 )\n+                                Map option = new HashMap();\n+\n+                                if ( isElementContent( child ) )\n                                 {\n-                                    for ( int j = 0; j < childs2.getLength(); j++ )\n+                                    Map properties = new HashMap();\n+                                    NodeList childs2 = child.getChildNodes();\n+                                    if ( childs2.getLength() > 0 )\n                                     {\n-                                        if ( childs2.item( j ).getNodeType() == Node.ELEMENT_NODE )\n+                                        for ( int j = 0; j < childs2.getLength(); j++ )\n                                         {\n-                                            properties.put( childs2.item( j ).getNodeName(), childs2.item( j )\n-                                                .getFirstChild().getNodeValue() );\n+                                            Node child2 = childs2.item( j );\n+                                            if ( child2.getNodeType() == Node.ELEMENT_NODE )\n+                                            {\n+                                                properties.put( child2.getNodeName(), getTextContent( child2 ) );\n+                                            }\n                                         }\n+                                        option.put( child.getNodeName(), properties );\n                                     }\n-                                    option.put( childs.item( i ).getNodeName(), properties );\n                                 }\n-                            }\n-                            else\n-                            {\n-                                option.put( childs.item( i ).getNodeName(), childs.item( i ).getFirstChild()\n-                                    .getNodeValue() );\n-                            }\n+                                else\n+                                {\n+                                    option.put( child.getNodeName(), getTextContent( child ) );\n+                                }\n \n-                            optionNames.add( option );\n+                                optionNames.add( option );\n+                            }\n                         }\n-                    }\n-\n-                    options.put( optionName, optionNames.toArray( new Map[0] ) );\n \n-                    return options;\n-                }\n+                        options.put( optionName, optionNames.toArray( new Map[0] ) );\n \n-                /*\n-                 * <optionName>\n-                 *  <param1>value1</param1>\n-                 *  <param2>value2</param2>\n-                 * </optionName>\n-                 */\n-                if ( StringUtils.isNotEmpty( obj.toString() ) )\n-                {\n-                    Map option = new HashMap();\n+                        return options;\n+                    }\n \n-                    NodeList childs = nodeList.item( 0 ).getChildNodes();\n-                    if ( childs.getLength() > 1 )\n+                    if ( isElementContent( optionNode ) )\n                     {\n-                        Map parameters = new HashMap();\n+                        /*\n+                         * <optionName>\n+                         *  <param1>value1</param1>\n+                         *  <param2>value2</param2>\n+                         * </optionName>\n+                         */\n+                        Map option = new HashMap();\n \n-                        for ( int i = 0; i < childs.getLength(); i++ )\n+                        NodeList childs = optionNode.getChildNodes();\n+                        if ( childs.getLength() > 1 )\n                         {\n-                            if ( childs.item( i ).getNodeType() == Node.ELEMENT_NODE )\n+                            Map parameters = new HashMap();\n+\n+                            for ( int i = 0; i < childs.getLength(); i++ )\n                             {\n-                                parameters.put( childs.item( i ).getNodeName(), childs.item( i ).getFirstChild()\n-                                    .getNodeValue() );\n+                                Node child = childs.item( i );\n+                                if ( child.getNodeType() == Node.ELEMENT_NODE )\n+                                {\n+                                    parameters.put( child.getNodeName(), getTextContent( child ) );\n+                                }\n                             }\n+\n+                            option.put( optionName, parameters );\n                         }\n \n-                        option.put( optionName, parameters );\n+                        return option;\n                     }\n                     else\n                     {\n                         /*\n                          * <optionName>value1</optionName>\n                          */\n-                        option.put( optionName, obj.toString() );\n-                    }\n+                        Map option = new HashMap();\n+\n+                        option.put( optionName, getTextContent( optionNode ) );\n \n-                    return option;\n+                        return option;\n+                    }\n                 }\n             }\n             catch ( Exception e )\n@@ -1286,7 +1291,7 @@ private static void writeCopyLib( XMLWriter writer, MavenProject project, String\n      * &lt;/options&gt;\n      * </pre>\n      *\n-     * @param node a given node\n+     * @param node a given node, may be <code>null</code>.\n      * @return true if the node is a list, false otherwise.\n      */\n     private static boolean isList( Node node )\n@@ -1296,13 +1301,13 @@ private static boolean isList( Node node )\n             return false;\n         }\n \n-        NodeList childs = node.getChildNodes();\n+        NodeList children = node.getChildNodes();\n \n         boolean isList = false;\n         String lastNodeName = null;\n-        for ( int i = 0; i < childs.getLength(); i++ )\n+        for ( int i = 0; i < children.getLength(); i++ )\n         {\n-            Node child = childs.item( i );\n+            Node child = children.item( i );\n             if ( child.getNodeType() == Node.ELEMENT_NODE )\n             {\n                 isList = isList || ( child.getNodeName().equals( lastNodeName ) );\n@@ -1317,6 +1322,54 @@ private static boolean isList( Node node )\n         return isList;\n     }\n \n+    /**\n+     * Checks whether the specified node has element content or consists only of character data.\n+     * \n+     * @param node The node to test, may be <code>null</code>.\n+     * @return <code>true</code> if any child node is an element, <code>false</code> otherwise.\n+     */\n+    private static boolean isElementContent( Node node )\n+    {\n+        if ( node == null )\n+        {\n+            return false;\n+        }\n+        NodeList children = node.getChildNodes();\n+        for ( int i = 0; i < children.getLength(); i++ )\n+        {\n+            Node child = children.item( i );\n+            if ( child.getNodeType() == Node.ELEMENT_NODE )\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Gets the text content of the specified node.\n+     * \n+     * @param node The node whose text contents should be retrieved, may be <code>null</code>.\n+     * @return The text content of the node, can be empty but never <code>null</code>.\n+     */\n+    private static String getTextContent( Node node )\n+    {\n+        StringBuffer buffer = new StringBuffer();\n+        if ( node != null )\n+        {\n+            NodeList children = node.getChildNodes();\n+            for ( int i = 0; i < children.getLength(); i++ )\n+            {\n+                Node child = children.item( i );\n+                if ( child.getNodeType() == Node.TEXT_NODE || child.getNodeType() == Node.CDATA_SECTION_NODE )\n+                {\n+                    buffer.append( child.getNodeValue() );\n+                }\n+            }\n+        }\n+        return buffer.toString();\n+    }\n+\n     /**\n      * Gets the singular form of the specified (English) plural form. For example:\n      * "
            },
            {
                "sha": "e1b7cb70eec63a190688a2fe34e5078f8e79bc40",
                "filename": "src/test/java/org/apache/maven/plugin/ant/AntBuildWriterUtilTest.java",
                "status": "modified",
                "additions": 11,
                "deletions": 0,
                "changes": 11,
                "blob_url": "https://github.com/apache/maven-ant-plugin/blob/1f0df160be6962bb18260c3461d329da23ef130a/src/test/java/org/apache/maven/plugin/ant/AntBuildWriterUtilTest.java",
                "raw_url": "https://github.com/apache/maven-ant-plugin/raw/1f0df160be6962bb18260c3461d329da23ef130a/src/test/java/org/apache/maven/plugin/ant/AntBuildWriterUtilTest.java",
                "contents_url": "https://api.github.com/repos/apache/maven-ant-plugin/contents/src/test/java/org/apache/maven/plugin/ant/AntBuildWriterUtilTest.java?ref=1f0df160be6962bb18260c3461d329da23ef130a",
                "patch": "@@ -21,6 +21,7 @@\n \n import java.io.File;\n import java.io.StringWriter;\n+import java.util.Map;\n \n import org.apache.maven.embedder.MavenEmbedder;\n import org.apache.maven.embedder.MavenEmbedderConsoleLogger;\n@@ -164,6 +165,16 @@ public void testGetMavenJavadocPluginConfiguration()\n         assertNotNull( AntBuildWriterUtil.getMavenJavadocPluginOptions( project, \"docletArtifacts\", null ) );\n         assertEquals( AntBuildWriterUtil.getMavenJavadocPluginOptions( project, \"docletArtifacts\", null ).length, 2 );\n \n+        Map[] options = AntBuildWriterUtil.getMavenJavadocPluginOptions( project, \"tags\", null );\n+        assertNotNull( options );\n+        assertEquals( options.length, 1 );\n+        assertEquals( 1, options[0].size() );\n+        Map properties = (Map) options[0].get( \"tag\" );\n+        assertNotNull( properties );\n+        assertEquals( \"requirement\", properties.get( \"name\" ) );\n+        assertEquals( \"a\", properties.get( \"placement\" ) );\n+        assertEquals( \"Software Requirement:\", properties.get( \"head\" ) );\n+\n         maven.stop();\n     }\n "
            },
            {
                "sha": "17199d7121423db816d07574264904d05470504f",
                "filename": "src/test/resources/unit/ant-javadoc-test/pom.xml",
                "status": "modified",
                "additions": 7,
                "deletions": 1,
                "changes": 8,
                "blob_url": "https://github.com/apache/maven-ant-plugin/blob/1f0df160be6962bb18260c3461d329da23ef130a/src/test/resources/unit/ant-javadoc-test/pom.xml",
                "raw_url": "https://github.com/apache/maven-ant-plugin/raw/1f0df160be6962bb18260c3461d329da23ef130a/src/test/resources/unit/ant-javadoc-test/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/maven-ant-plugin/contents/src/test/resources/unit/ant-javadoc-test/pom.xml?ref=1f0df160be6962bb18260c3461d329da23ef130a",
                "patch": "@@ -111,7 +111,13 @@ under the License.\n               <version>4.5</version>\n             </docletArtifact>\n           </docletArtifacts>\n-\n+          <tags>\n+            <tag>\n+              <name>requirement</name>\n+              <placement>a</placement>\n+              <head>Software Requirement:</head>\n+            </tag>\n+          </tags>\n         </configuration>\n       </plugin>\n   </plugins>"
            }
        ]
    }
]
