[
    {
        "commit": "https://github.com/apache/sandesha/commit/4c326c1035db0571bc332e09af827c977ce12b15",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/73cdddbbfbb102a22ee1c5d6697d3b50c08b165a",
        "message": "Fix NullPointerException from SandeshaGlobalInHandler when duplicate response message is received\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@633404 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_1",
        "file": [
            {
                "sha": "030dd4a723836d15232b41e9d506a22cff2ced1b",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/util/SandeshaUtil.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/4c326c1035db0571bc332e09af827c977ce12b15/modules/core/src/main/java/org/apache/sandesha2/util/SandeshaUtil.java",
                "raw_url": "https://github.com/apache/sandesha/raw/4c326c1035db0571bc332e09af827c977ce12b15/modules/core/src/main/java/org/apache/sandesha2/util/SandeshaUtil.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/util/SandeshaUtil.java?ref=4c326c1035db0571bc332e09af827c977ce12b15",
                "patch": "@@ -1277,7 +1277,7 @@ public static EndpointReference rewriteEPR(RMSBean sourceBean, EndpointReference\n \tpublic static boolean isInOrder(MessageContext context) throws SandeshaException {\n \t\tif (log.isDebugEnabled()) log.debug(\"Enter: SandeshaUtil::isInOrder\");\n \t\t\n-\t\tSandeshaPolicyBean policy = getPropertyBean(context.getAxisOperation());\n+\t\tSandeshaPolicyBean policy = getPropertyBean(context.getConfigurationContext().getAxisConfiguration());\n \t\tboolean result = policy.isInOrder();\n \t\t\n \t\tif (log.isDebugEnabled()) log.debug(\"Enter: SandeshaUtil::isInOrder, \" + result);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/8e1871ffc01488a7f950c711dd29f08e14c6522c",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/16ce28b9e869d87b1f306b3bc093a1ad70ddb6b6",
        "message": "Solve a NullPointerException when looking for the SandeshaPolicyBean when processing an AckRequest\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@591558 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_2",
        "file": [
            {
                "sha": "44b9d96240d05b775326e65288c7d835f68bcda4",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/msgprocessors/AckRequestedProcessor.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/8e1871ffc01488a7f950c711dd29f08e14c6522c/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/AckRequestedProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/8e1871ffc01488a7f950c711dd29f08e14c6522c/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/AckRequestedProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/AckRequestedProcessor.java?ref=8e1871ffc01488a7f950c711dd29f08e14c6522c",
                "patch": "@@ -227,7 +227,7 @@ public boolean processAckRequestedHeader(RMMsgContext rmMsgCtx, OMElement soapHe\n \n \t\t\tackMsgCtx.setProperty(Sandesha2Constants.QUALIFIED_FOR_SENDING, Sandesha2Constants.VALUE_FALSE);\n \t\t\tackBean.setMessageType(Sandesha2Constants.MessageTypes.ACK);\n-\t\t\tSandeshaPolicyBean propertyBean = SandeshaUtil.getPropertyBean(msgContext.getAxisMessage());\n+\t\t\tSandeshaPolicyBean propertyBean = SandeshaUtil.getPropertyBean(msgContext.getAxisOperation());\n \n \t\t\tlong ackInterval = propertyBean.getAcknowledgementInterval();\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/1ab77d181d300fcff509ebcce088cbab5b27a077",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/9cb3b78c15c20402cfeb74d2ef40c181c93586b5",
        "message": "Fixed a bug that could cause NullPointerExceptions in the TerminateSequenceProcessor\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@418820 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_3",
        "file": [
            {
                "sha": "dfa74ba25883bc13fd49bcaecf658f3cc2ec42e6",
                "filename": "src/org/apache/sandesha2/msgprocessors/TerminateSeqMsgProcessor.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/sandesha/blob/1ab77d181d300fcff509ebcce088cbab5b27a077/src/org/apache/sandesha2/msgprocessors/TerminateSeqMsgProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/1ab77d181d300fcff509ebcce088cbab5b27a077/src/org/apache/sandesha2/msgprocessors/TerminateSeqMsgProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/msgprocessors/TerminateSeqMsgProcessor.java?ref=1ab77d181d300fcff509ebcce088cbab5b27a077",
                "patch": "@@ -189,15 +189,15 @@ private void setUpHighestMsgNumbers (ConfigurationContext configCtx, StorageMana\n \t\t\t\tMessageContext highestInMsg = storageManager.retrieveMessageContext(highestImMsgKey,configCtx);\r\n \t\t\t\t\r\n \t\t\t\t//TODO get the out message in a storage friendly manner.\r\n-\t\t\t\tMessageContext highestOutMessage = highestOutMessage = highestInMsg.getOperationContext().getMessageContext(OperationContextFactory.MESSAGE_LABEL_FAULT_VALUE);\r\n+\t\t\t\tMessageContext highestOutMessage = highestInMsg.getOperationContext().getMessageContext(OperationContextFactory.MESSAGE_LABEL_FAULT_VALUE);\r\n \t\t\t\t\r\n \t\t\t\tif (highestOutMessage==null || highestOutMessage.getEnvelope()==null)\r\n \t\t\t\t\thighestOutMessage = highestInMsg.getOperationContext().getMessageContext(OperationContextFactory.MESSAGE_LABEL_OUT_VALUE);\r\n \t\t\t\t\r\n-\t\t\t\tif (highestOutMessage.getEnvelope()==null)\r\n-\t\t\t\t\tthrow new SandeshaException (\"Out message does not have a envelope\");\r\n-\t\t\t\t\r\n \t\t\t\tif (highestOutMessage!=null) {\r\n+\t\t\t\t\tif (highestOutMessage.getEnvelope()==null)\r\n+\t\t\t\t\t\tthrow new SandeshaException (\"Out message does not have a envelope\");\r\n+\t\t\t\t\t\r\n \t\t\t\t\tRMMsgContext highestOutRMMsg = MsgInitializer.initializeMessage(highestOutMessage);\r\n \t\t\t\t\tSequence seqPartOfOutMsg = (Sequence) highestOutRMMsg.getMessagePart(Sandesha2Constants.MessageParts.SEQUENCE);\r\n \t\t\t\t\r"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/dcc4b5c0a2142bb80321424b83b0d5972561cda5",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/fc30c01c78df84aaaecf1e7cb198b6e470be6b7d",
        "message": "some refactoring and potential NPE protection\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@594502 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_4",
        "file": [
            {
                "sha": "77a5b890cf5b5af98f7e6e4fff7b321347c1de7c",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/msgprocessors/SequenceProcessor.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/dcc4b5c0a2142bb80321424b83b0d5972561cda5/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/SequenceProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/dcc4b5c0a2142bb80321424b83b0d5972561cda5/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/SequenceProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/SequenceProcessor.java?ref=dcc4b5c0a2142bb80321424b83b0d5972561cda5",
                "patch": "@@ -382,7 +382,7 @@ public InvocationResponse processReliableMessage(RMMsgContext rmMsgCtx, Transact\n \t\t// then we should hand the message over to the invoker thread. If not, we can invoke\n \t\t// it directly ourselves.\n \t\tInvokerWorker worker = null;\n-\t\tif (SandeshaUtil.isInOrder(msgCtx) || storageManager.hasUserTransaction(msgCtx)) {\n+\t\tif (SandeshaUtil.isInOrder(msgCtx)) {\n \t\t    \n \t\t\tInvokerBean invokerBean = new InvokerBean(key, msgNo, sequenceId);\n \t\t\tContextManager contextMgr = SandeshaUtil.getContextManager(configCtx);"
            },
            {
                "sha": "dda7e7014effa993dcf8ee444dd055f976ab374a",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/workers/InvokerWorker.java",
                "status": "modified",
                "additions": 27,
                "deletions": 13,
                "changes": 40,
                "blob_url": "https://github.com/apache/sandesha/blob/dcc4b5c0a2142bb80321424b83b0d5972561cda5/modules/core/src/main/java/org/apache/sandesha2/workers/InvokerWorker.java",
                "raw_url": "https://github.com/apache/sandesha/raw/dcc4b5c0a2142bb80321424b83b0d5972561cda5/modules/core/src/main/java/org/apache/sandesha2/workers/InvokerWorker.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/workers/InvokerWorker.java?ref=dcc4b5c0a2142bb80321424b83b0d5972561cda5",
                "patch": "@@ -59,6 +59,7 @@\n \tprivate String  messageContextKey;\n \tprivate boolean ignoreNextMsg;\n \tprivate boolean pooledThread;\n+\tboolean lastMessageInvoked;\n \t\n \tpublic InvokerWorker (ConfigurationContext configurationContext, InvokerBean bean) {\n \t\t// All invoker workers need to use the same lock, so we point to the static one here.\n@@ -99,22 +100,18 @@ private void initializeFromBean(InvokerBean bean) {\n \tpublic void run() {\n \t\tif(log.isDebugEnabled()) log.debug(\"Enter: InvokerWorker::run, message \" + messageNumber + \", sequence \" + sequence);\n \t\t\n-\t\t// If we are not the holder of the correct lock, then we have to stop\n-\t\tif(lock != null && !lock.ownsLock(workId, this)) {\n-\t\t\tif (log.isDebugEnabled()) log.debug(\"Exit: InvokerWorker::run, another worker holds the lock\");\n-\t\t\treturn;\n-\t\t}\n \t\t\n \t\tTransaction tran = null;\n \t\ttry {\n \t\t\tInvokerWorker nextWorker = null;\n \t\t\tRunnable nextRunnable = null;\n \n \t\t\t// Invoke the first message\n-\t\t\tinvokeMessage(null);\n+\t    \tlastMessageInvoked = invokeMessage(null);\n \n \t\t\t// Look for the next message, so long as we are still processing normally\n-\t\t\twhile(!ignoreNextMsg) {\n+\t\t\twhile(!ignoreNextMsg && lastMessageInvoked) {\n+\t\t\t\tif(log.isDebugEnabled()) log.debug(\"InvokerWorker:: looking for next msg to invoke\");\n \t\t\t\tInvokerBean finder = new InvokerBean();\n \t\t\t\tfinder.setSequenceID(sequence);\n \t\t\t\tfinder.setMsgNo(messageNumber + 1);\n@@ -127,11 +124,12 @@ public void run() {\n \n \t\t\t\tif(nextBean != null) {\n \t\t\t\t\tif(pooledThread) {\n+\t\t\t\t\t\tif(log.isDebugEnabled()) log.debug(\"InvokerWorker:: pooledThread\");\n \t\t\t\t\t\tinitializeFromBean(nextBean);\n \t\t\t\t\t\tfinal Transaction theTran = tran;\n \t\t\t\t\t\tRunnable work = new Runnable() {\n \t\t\t\t\t\t\tpublic void run() {\n-\t\t\t\t\t\t\t\tinvokeMessage(theTran);\n+\t\t\t\t\t\t\t\tlastMessageInvoked = invokeMessage(theTran);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t};\n \n@@ -146,6 +144,7 @@ public void run() {\n \n \t\t\t\t\t\ttran = null;\n \t\t\t\t\t} else {\n+\t\t\t\t\t\tif(log.isDebugEnabled()) log.debug(\"InvokerWorker:: not pooled thread\");\n \t\t\t\t\t\tnextWorker = new InvokerWorker(configurationContext, nextBean);\n \t\t\t\t\t\tnextWorker.setPooled();\n \t\t\t\t\t\tnextWorker.setWorkId(workId);\n@@ -169,7 +168,7 @@ public void run() {\n \t\t\t\t\t// break out of the loop\n \t\t\t\t\tbreak;\n \t\t\t\t}\n-\t\t\t}\n+\t\t\t}//end while\n \t\t\t\t\t\n \t\t\tif (workId !=null && lock!=null) {\n \t\t\t\tlock.removeWork(workId);\n@@ -202,11 +201,18 @@ public void run() {\n \t\tif(log.isDebugEnabled()) log.debug(\"Exit: InvokerWorker::run\");\n \t}\n \n-\tprivate void invokeMessage(Transaction tran) {\n+\tprivate boolean invokeMessage(Transaction tran) {\n \t\tif(log.isDebugEnabled()) log.debug(\"Enter: InvokerWorker::invokeMessage\");\n \n \t\tTransaction transaction = null;\n \t\tMessageContext msgToInvoke = null;\n+\t\tboolean messageInvoked = true;\n+\t\t\n+\t    // If we are not the holder of the correct lock, then we have to stop\n+\t    if(lock != null && (!lock.ownsLock(workId, this))) {\n+\t    \tif (log.isDebugEnabled()) log.debug(\"Exit: InvokerWorker::run, another worker holds the lock\");\n+\t    \treturn false;\n+\t    }\n \t\t\n \t\ttry {\n \t\t\t\n@@ -223,6 +229,11 @@ private void invokeMessage(Transaction tran) {\n \t\t\tInvokerBean invokerBean = invokerBeanMgr.retrieve(messageContextKey);\n \n \t\t\tmsgToInvoke = storageManager.retrieveMessageContext(messageContextKey, configurationContext);\n+\t\t\tif(msgToInvoke==null){\n+\t\t\t\t//return since there is nothing to do\n+\t\t\t\tif(log.isDebugEnabled()) log.debug(\"null msg\");\n+\t\t\t\treturn false;\n+\t\t\t}\n \n \t\t\t// ending the transaction before invocation.\n \t\t\tif(transaction != null) {\n@@ -288,6 +299,7 @@ private void invokeMessage(Transaction tran) {\n \n \t\t\t\tif (transaction != null && transaction.isActive())\n \t\t\t\t\ttransaction.rollback();\n+\t\t\t\tmessageInvoked = false;\n \t\t\t\t\n \t\t\t\thandleFault(rmMsg, e);\n \t\t\t}\n@@ -317,9 +329,9 @@ private void invokeMessage(Transaction tran) {\n \t\t\t\t\tTerminateManager.cleanReceivingSideAfterInvocation(invokerBean.getSequenceID(), storageManager);\n \t\t\t\t\t// exit from current iteration. (since an entry\n \t\t\t\t\t// was removed)\n-\t\t\t\t\tif(log.isDebugEnabled()) log.debug(\"Exit: InvokerWorker::invokeMessage Last message return\");\t\n \t\t\t\t\tif(transaction != null && transaction.isActive()) transaction.commit();\n-\t\t\t\t\treturn;\n+\t\t\t\t\tif(log.isDebugEnabled()) log.debug(\"Exit: InvokerWorker::invokeMessage Last message return \" + messageInvoked);\n+\t\t\t\t\treturn messageInvoked;\t\n \t\t\t\t}\n \t\t\t}\n \t\t\t\n@@ -344,6 +356,7 @@ private void invokeMessage(Transaction tran) {\n \t\t} catch (Exception e) {\n \t\t\tif (log.isErrorEnabled())\n \t\t\t\tlog.error(e.toString(), e);\n+\t\t\tmessageInvoked = false;\n \t\t} finally {\n \t\t\tif (transaction!=null && transaction.isActive()) {\n \t\t\t\ttry {\n@@ -355,7 +368,8 @@ private void invokeMessage(Transaction tran) {\n \t\t\t}\n \t\t}\n \t\t\n-\t\tif(log.isDebugEnabled()) log.debug(\"Exit: InvokerWorker::invokeMessage\");\n+\t\tif(log.isDebugEnabled()) log.debug(\"Exit: InvokerWorker::invokeMessage \" + messageInvoked);\n+\t\treturn messageInvoked;\n \t}\n \n \tprivate void makeMessageReadyForReinjection(MessageContext messageContext) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/9ca3355d5eedeb97ea9606ba2aa9cdaed753ad08",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/fb20f07d47d2b193b00e3400400a8d36dda4e767",
        "message": "fixing NPE in Axis2 due to error in Sandesha\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@578074 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_5",
        "file": [
            {
                "sha": "5ed153d6d1a0b094924c850ff9998b052475a044",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/workers/SenderWorker.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/sandesha/blob/9ca3355d5eedeb97ea9606ba2aa9cdaed753ad08/modules/core/src/main/java/org/apache/sandesha2/workers/SenderWorker.java",
                "raw_url": "https://github.com/apache/sandesha/raw/9ca3355d5eedeb97ea9606ba2aa9cdaed753ad08/modules/core/src/main/java/org/apache/sandesha2/workers/SenderWorker.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/workers/SenderWorker.java?ref=9ca3355d5eedeb97ea9606ba2aa9cdaed753ad08",
                "patch": "@@ -547,6 +547,10 @@ private void checkForSyncResponses(MessageContext msgCtx) {\n \t\t\t\tresponseMessageContext.setProperty(HTTPConstants.MTOM_RECEIVED_CONTENT_TYPE, requestMsgOpCtx\n \t\t\t\t\t\t\t\t.getProperty(HTTPConstants.MTOM_RECEIVED_CONTENT_TYPE));\n \n+ responseMessageContext.setOperationContext(requestMsgOpCtx);\n+                if ( !requestMsgOpCtx.isComplete()) {\n+                    requestMsgOpCtx.addMessageContext(responseMessageContext);\n+                }\n \t\t\t\t//If the response MsgCtx was not available Axis2 would hv put the transport info into a \n \t\t\t\t//HashMap, getting the data from it.\n \t\t\t\tHashMap transportInfoMap = (HashMap) msgCtx.getProperty(Constants.Configuration.TRANSPORT_INFO_MAP);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/2b487afc02962e65531f9807ebb8629429ed0985",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/150cd0c6ec2fe49d48dbf85f287008dfd91d2439",
        "message": "potential NPE in populateRMMsgContext\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@576399 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_6",
        "file": [
            {
                "sha": "404842aaa6a15b952d1447171180bc4c8a4656ba",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/workers/Invoker.java",
                "status": "modified",
                "additions": 9,
                "deletions": 5,
                "changes": 14,
                "blob_url": "https://github.com/apache/sandesha/blob/2b487afc02962e65531f9807ebb8629429ed0985/modules/core/src/main/java/org/apache/sandesha2/workers/Invoker.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2b487afc02962e65531f9807ebb8629429ed0985/modules/core/src/main/java/org/apache/sandesha2/workers/Invoker.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/workers/Invoker.java?ref=2b487afc02962e65531f9807ebb8629429ed0985",
                "patch": "@@ -120,11 +120,15 @@ public synchronized void forceInvokeOfAllMessagesCurrentlyOnSequence(Configurati\n \t\t\t\t\t\t\twork = contextMgr.wrapWithContext(work, invoker.getContext());\n \t\t\t\t\t\t}\n \t\t\t\t\t\t\n-\t\t\t\t\t\tthreadPool.execute(work);\n-\t\t\t\t\t\n-\t\t\t\t\t\t//adding the workId to the lock after assigning it to a thread makes sure \n-\t\t\t\t\t\t//that all the workIds in the Lock are handled by threads.\n-\t\t\t            getWorkerLock().addWork(workId, worker);\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Try and set the lock up before we start the thread, but roll it back\n+\t\t\t\t\t\t\t// if we hit any problems\n+\t\t\t\t\t\t\tif(worker.getLock().addWork(workId, worker)){\n+\t\t\t\t\t\t\t\tthreadPool.execute(work);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch(Exception e) {\n+\t\t\t\t\t\t\tworker.getLock().removeWork(workId);\n+\t\t\t\t\t\t}\n \n \t\t\t\t\t\tlong msgNumber = invoker.getMsgNo();\n \t\t\t\t\t\t//if necessary, update the \"next message number\" bean under this transaction"
            },
            {
                "sha": "93119413d20fba633871117485201d057b1014ba",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/workers/WorkerLock.java",
                "status": "modified",
                "additions": 3,
                "deletions": 2,
                "changes": 5,
                "blob_url": "https://github.com/apache/sandesha/blob/2b487afc02962e65531f9807ebb8629429ed0985/modules/core/src/main/java/org/apache/sandesha2/workers/WorkerLock.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2b487afc02962e65531f9807ebb8629429ed0985/modules/core/src/main/java/org/apache/sandesha2/workers/WorkerLock.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/workers/WorkerLock.java?ref=2b487afc02962e65531f9807ebb8629429ed0985",
                "patch": "@@ -26,9 +26,10 @@ public WorkerLock () {\n \n \t}\n \t\n-  public synchronized void addWork (String work, Object owner) {\n-    if(locks.containsKey(work)) return;\n+  public synchronized boolean addWork (String work, Object owner) {\n+    if(locks.containsKey(work)) return false;\n     locks.put(work, owner);\n+\treturn true;\n   }\n \t\n \tpublic synchronized void removeWork (String work) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/38a935e8b965c917834b5d9923b6e777450c6c6d",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/059d19faa5745914cb81d674204e365b60fb0560",
        "message": "Avoid NPE when unblocking the CreateSequence message transport\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@546095 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_7",
        "file": [
            {
                "sha": "5677f36472f8c0d3876c086fb95c531a99dcd708",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/workers/Sender.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/38a935e8b965c917834b5d9923b6e777450c6c6d/modules/core/src/main/java/org/apache/sandesha2/workers/Sender.java",
                "raw_url": "https://github.com/apache/sandesha/raw/38a935e8b965c917834b5d9923b6e777450c6c6d/modules/core/src/main/java/org/apache/sandesha2/workers/Sender.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/workers/Sender.java?ref=38a935e8b965c917834b5d9923b6e777450c6c6d",
                "patch": "@@ -397,7 +397,7 @@ private void unblockTransportThreads(StorageManager manager)\n \t\t\t\tif (inMsg != null)\r\n \t\t\t\t\tt = (RequestResponseTransport) inMsg.getProperty(RequestResponseTransport.TRANSPORT_CONTROL);\r\n \t\r\n-\t\t\t\tif((t != null || !t.getStatus().equals(RequestResponseTransportStatus.WAITING))) {\r\n+\t\t\t\tif((t != null && !RequestResponseTransportStatus.WAITING.equals(t.getStatus()))) {\r\n \t\t\t\t\tif(log.isWarnEnabled()) {\r\n \t\t\t\t\t\tString message = SandeshaMessageHelper.getMessage(SandeshaMessageKeys.freeingTransport);\r\n \t\t\t\t\t\tlog.warn(message);\r"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/772846fb1c126ed1efebd52d98c7bc08448e6a21",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/ba0a1105f747c2735338df9241fa7ca34e25ebe7",
        "message": "Fix NPE in SandeshaClient.cleanupTerminatedSequence\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@501853 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_8",
        "file": [
            {
                "sha": "45acffed83e54fc885820142f7efe284fade2368",
                "filename": "src/org/apache/sandesha2/client/SandeshaClient.java",
                "status": "modified",
                "additions": 4,
                "deletions": 3,
                "changes": 7,
                "blob_url": "https://github.com/apache/sandesha/blob/772846fb1c126ed1efebd52d98c7bc08448e6a21/src/org/apache/sandesha2/client/SandeshaClient.java",
                "raw_url": "https://github.com/apache/sandesha/raw/772846fb1c126ed1efebd52d98c7bc08448e6a21/src/org/apache/sandesha2/client/SandeshaClient.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/client/SandeshaClient.java?ref=772846fb1c126ed1efebd52d98c7bc08448e6a21",
                "patch": "@@ -403,13 +403,14 @@ private static final void cleanupTerminatedSequence(String to, String sequenceKe\n \t\t\t}\n \t\t\n \t\t} catch (SandeshaException e) {\n-\t\t\ttran.rollback();\n+\t\t\tif(tran!=null)\n+\t\t\t\ttran.rollback();\n \t\t\ttran = null;\n \t\t\t\n \t\t\tthrow e;\n \t\t} \n-\t\t\n-\t\ttran.commit();\n+\t\tif(tran!=null)\n+\t\t\ttran.commit();\n \t}\n \t\n \t/**"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/d0b60fc3caec10d87a40664df5d414aa1ce7efb0",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/4fe744e5cbbef2865a62a76057dfd49eb69a11d0",
        "message": "NPE in sendAckIfNeeded\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@501790 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_9",
        "file": [
            {
                "sha": "9302fdfc8446231660ddf4d81b81a8d956fe2559",
                "filename": "src/org/apache/sandesha2/msgprocessors/SequenceProcessor.java",
                "status": "modified",
                "additions": 41,
                "deletions": 38,
                "changes": 79,
                "blob_url": "https://github.com/apache/sandesha/blob/d0b60fc3caec10d87a40664df5d414aa1ce7efb0/src/org/apache/sandesha2/msgprocessors/SequenceProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/d0b60fc3caec10d87a40664df5d414aa1ce7efb0/src/org/apache/sandesha2/msgprocessors/SequenceProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/msgprocessors/SequenceProcessor.java?ref=d0b60fc3caec10d87a40664df5d414aa1ce7efb0",
                "patch": "@@ -374,47 +374,50 @@ public static void sendAckIfNeeded(RMMsgContext rmMsgCtx, StorageManager storage\n \t\t\n \t\tSequence sequence = (Sequence) rmMsgCtx\n \t\t\t\t.getMessagePart(Sandesha2Constants.MessageParts.SEQUENCE);\n-\t\tString sequenceId = sequence.getIdentifier().getIdentifier();\n-\t\tConfigurationContext configCtx = rmMsgCtx.getMessageContext()\n-\t\t\t\t.getConfigurationContext();\n-\t\tif (configCtx == null) {\n-\t\t\tString message = SandeshaMessageHelper\n-\t\t\t\t\t.getMessage(SandeshaMessageKeys.configContextNotSet);\n-\t\t\tif (log.isDebugEnabled())\n-\t\t\t\tlog.debug(message);\n-\t\t\tthrow new SandeshaException(message);\n-\t\t}\n-\n-\t\tRMMsgContext ackRMMsgCtx = AcknowledgementManager.generateAckMessage(\n-\t\t\t\trmMsgCtx , sequenceId, storageManager,\n-\t\t\t\tfalse, serverSide);\n-\t\tMessageContext ackMsgCtx = ackRMMsgCtx.getMessageContext();\n+\t\t\n+\t\tif(sequence!=null){\n+\t\t\tString sequenceId = sequence.getIdentifier().getIdentifier();\n+\t\t\tConfigurationContext configCtx = rmMsgCtx.getMessageContext()\n+\t\t\t\t\t.getConfigurationContext();\n+\t\t\tif (configCtx == null) {\n+\t\t\t\tString message = SandeshaMessageHelper\n+\t\t\t\t\t\t.getMessage(SandeshaMessageKeys.configContextNotSet);\n+\t\t\t\tif (log.isDebugEnabled())\n+\t\t\t\t\tlog.debug(message);\n+\t\t\t\tthrow new SandeshaException(message);\n+\t\t\t}\n \n-\t\tEndpointReference acksTo = ackRMMsgCtx.getTo();\n-\t\tEndpointReference replyTo = rmMsgCtx.getReplyTo();\n-\t\tboolean anonAck = (acksTo == null) || acksTo.hasAnonymousAddress();\n-\t\tboolean anonReply = (replyTo == null) || replyTo.hasAnonymousAddress();\n-\n-\t\t// Only use the backchannel for ack messages if we are sure that the\n-\t\t// application\n-\t\t// doesn't need it. A 1-way MEP should be complete by now.\n-\t\tboolean complete = ackMsgCtx.getOperationContext().isComplete();\n-\t\tif (anonAck && anonReply && !complete) {\n-\t\t\tif (log.isDebugEnabled())\n-\t\t\t\tlog\n-\t\t\t\t\t\t.debug(\"Exit: SequenceProcessor::sendAckIfNeeded, avoiding using backchannel\");\n-\t\t\treturn;\n-\t\t}\n+\t\t\tRMMsgContext ackRMMsgCtx = AcknowledgementManager.generateAckMessage(\n+\t\t\t\t\trmMsgCtx , sequenceId, storageManager,\n+\t\t\t\t\tfalse, serverSide);\n+\t\t\tMessageContext ackMsgCtx = ackRMMsgCtx.getMessageContext();\n+\n+\t\t\tEndpointReference acksTo = ackRMMsgCtx.getTo();\n+\t\t\tEndpointReference replyTo = rmMsgCtx.getReplyTo();\n+\t\t\tboolean anonAck = (acksTo == null) || acksTo.hasAnonymousAddress();\n+\t\t\tboolean anonReply = (replyTo == null) || replyTo.hasAnonymousAddress();\n+\n+\t\t\t// Only use the backchannel for ack messages if we are sure that the\n+\t\t\t// application\n+\t\t\t// doesn't need it. A 1-way MEP should be complete by now.\n+\t\t\tboolean complete = ackMsgCtx.getOperationContext().isComplete();\n+\t\t\tif (anonAck && anonReply && !complete) {\n+\t\t\t\tif (log.isDebugEnabled())\n+\t\t\t\t\tlog\n+\t\t\t\t\t\t\t.debug(\"Exit: SequenceProcessor::sendAckIfNeeded, avoiding using backchannel\");\n+\t\t\t\treturn;\n+\t\t\t}\n \n-\t\tlong ackInterval = SandeshaUtil.getPropertyBean(\n-\t\t\t\trmMsgCtx.getMessageContext().getAxisService())\n-\t\t\t\t.getAcknowledgementInterval();\n+\t\t\tlong ackInterval = SandeshaUtil.getPropertyBean(\n+\t\t\t\t\trmMsgCtx.getMessageContext().getAxisService())\n+\t\t\t\t\t.getAcknowledgementInterval();\n \n-\t\tlong timeToSend = System.currentTimeMillis() + ackInterval;\n-\t\tif (anonAck) {\n-\t\t\tAcknowledgementManager.sendAckNow(ackRMMsgCtx);\n-\t\t} else if (!anonAck) {\n-\t\t\tAcknowledgementManager.addAckBeanEntry(ackRMMsgCtx, sequenceId, timeToSend, storageManager);\n+\t\t\tlong timeToSend = System.currentTimeMillis() + ackInterval;\n+\t\t\tif (anonAck) {\n+\t\t\t\tAcknowledgementManager.sendAckNow(ackRMMsgCtx);\n+\t\t\t} else if (!anonAck) {\n+\t\t\t\tAcknowledgementManager.addAckBeanEntry(ackRMMsgCtx, sequenceId, timeToSend, storageManager);\n+\t\t\t}\t\t\t\n \t\t}\n \n \t\tif (log.isDebugEnabled())"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/beec068c2fc8b5152cf65a7951f6e22de5298f80",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/6692928bbe93012f9c748133500ae728dc0d09fc",
        "message": "Fix NPE in SandeshaGlobalInHandler where Sequence not found\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@499354 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_10",
        "file": [
            {
                "sha": "04111da52d5b5db50b757473ff7060f474b85be9",
                "filename": "src/org/apache/sandesha2/handlers/SandeshaGlobalInHandler.java",
                "status": "modified",
                "additions": 11,
                "deletions": 26,
                "changes": 37,
                "blob_url": "https://github.com/apache/sandesha/blob/beec068c2fc8b5152cf65a7951f6e22de5298f80/src/org/apache/sandesha2/handlers/SandeshaGlobalInHandler.java",
                "raw_url": "https://github.com/apache/sandesha/raw/beec068c2fc8b5152cf65a7951f6e22de5298f80/src/org/apache/sandesha2/handlers/SandeshaGlobalInHandler.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/handlers/SandeshaGlobalInHandler.java?ref=beec068c2fc8b5152cf65a7951f6e22de5298f80",
                "patch": "@@ -128,7 +128,7 @@ public InvocationResponse invoke(MessageContext msgContext) throws AxisFault {\n \n \t\t\t\treturnValue = InvocationResponse.ABORT; // the msg has been\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t// dropped\n-\t\t\t\tprocessDroppedMessage(rmMessageContext, storageManager);\n+\t\t\t\tSequenceProcessor.sendAckIfNeeded(rmMessageContext, storageManager,true);\n \t\t\t\tif (log.isDebugEnabled())\n \t\t\t\t\tlog.debug(\"Exit: SandeshaGlobalInHandler::invoke, dropped \"\n \t\t\t\t\t\t\t+ returnValue);\n@@ -142,6 +142,8 @@ public InvocationResponse invoke(MessageContext msgContext) throws AxisFault {\n \t\t\t}\n \n \t\t} catch (Exception e) {\n+\t\t\tif (log.isDebugEnabled())\n+\t\t\t\tlog.debug(\"Caught an exception\", e);\n \t\t\t// message should not be sent in a exception situation.\n \t\t\tmsgContext.pause();\n \t\t\treturnValue = InvocationResponse.SUSPEND;\n@@ -186,15 +188,15 @@ private boolean isDuplicateMessage (RMMsgContext rmMsgContext, StorageManager st\n \t\t\tSequence sequence = (Sequence) rmMsgContext.getMessagePart(Sandesha2Constants.MessageParts.SEQUENCE);\n \t\t\tlong msgNo = sequence.getMessageNumber().getMessageNumber();\n \t\t\t\n-\t\t\tRMDBean findBean = new RMDBean ();\n-\t\t\tfindBean.setSequenceID(sequence.getIdentifier().getIdentifier());\n-\t\t\t\n-\t\t\tRMDBean rmdBean = storageManager.getRMDBeanMgr().findUnique(findBean);\n-\t\t\t\n-\t\t\tRangeString serverCompletedMessages = rmdBean.getServerCompletedMessages();\n+\t\t\tRMDBean rmdBean = \n+\t\t\t\tSandeshaUtil.getRMDBeanFromSequenceId(storageManager, sequence.getIdentifier().getIdentifier());\n \n-\t\t\tif (serverCompletedMessages.isMessageNumberInRanges(msgNo))\n-\t\t\t\tduplicate = true;\n+\t\t\tif (rmdBean != null) {\n+\t\t\t\tRangeString serverCompletedMessages = rmdBean.getServerCompletedMessages();\n+\t\n+\t\t\t\tif (serverCompletedMessages.isMessageNumberInRanges(msgNo))\n+\t\t\t\t\tduplicate = true;\n+\t\t\t}\n \t\t\t\n \t\t}\n \t\t\n@@ -286,23 +288,6 @@ private boolean shouldMessageBeDropped(RMMsgContext rmMsgContext, StorageManager\n \t\treturn false;\n \t}\n \n-\tprivate void processDroppedMessage(RMMsgContext rmMsgContext, StorageManager storageManager)\n-\t\t\tthrows AxisFault {\n-\t\tif (log.isDebugEnabled())\n-\t\t\tlog.debug(\"Enter: SandeshaGlobalInHandler::processDroppedMessage\");\n-\n-\t\tif (rmMsgContext.getMessageType() == Sandesha2Constants.MessageTypes.APPLICATION) {\n-\n-\t\t\t// Even though the duplicate message is dropped, hv to send the ack\n-\t\t\t// if needed.\n-\t\t\tSequenceProcessor.sendAckIfNeeded(rmMsgContext, storageManager,true);\n-\n-\t\t}\n-\t\tif (log.isDebugEnabled())\n-\t\t\tlog.debug(\"Exit: SandeshaGlobalInHandler::processDroppedMessage\");\n-\t}\n-\n-\n \tprivate void doGlobalProcessing(RMMsgContext rmMsgCtx) throws SandeshaException {\n \t}\n "
            },
            {
                "sha": "4e07240a90c94c826c65d91e0494ca45954198a2",
                "filename": "src/org/apache/sandesha2/util/AcknowledgementManager.java",
                "status": "modified",
                "additions": 7,
                "deletions": 10,
                "changes": 17,
                "blob_url": "https://github.com/apache/sandesha/blob/beec068c2fc8b5152cf65a7951f6e22de5298f80/src/org/apache/sandesha2/util/AcknowledgementManager.java",
                "raw_url": "https://github.com/apache/sandesha/raw/beec068c2fc8b5152cf65a7951f6e22de5298f80/src/org/apache/sandesha2/util/AcknowledgementManager.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/util/AcknowledgementManager.java?ref=beec068c2fc8b5152cf65a7951f6e22de5298f80",
                "patch": "@@ -44,7 +44,6 @@\n import org.apache.sandesha2.i18n.SandeshaMessageHelper;\n import org.apache.sandesha2.i18n.SandeshaMessageKeys;\n import org.apache.sandesha2.storage.StorageManager;\n-import org.apache.sandesha2.storage.beanmanagers.RMDBeanMgr;\n import org.apache.sandesha2.storage.beanmanagers.SenderBeanMgr;\n import org.apache.sandesha2.storage.beans.RMDBean;\n import org.apache.sandesha2.storage.beans.RMSBean;\n@@ -230,15 +229,11 @@ public static RMMsgContext generateAckMessage(\n \n \t\tMessageContext referenceMsg = referenceRMMessage.getMessageContext();\n \n-\t\tRMDBeanMgr rmdBeanMgr = storageManager.getRMDBeanMgr();\n-\t\tRMDBean findBean = new RMDBean ();\n-\t\tfindBean.setSequenceID(sequenceId);\n-\t\tRMDBean rmdBean = rmdBeanMgr.findUnique(findBean);\n+\t\tRMDBean rmdBean = SandeshaUtil.getRMDBeanFromSequenceId(storageManager, sequenceId);\n \n \t\tEndpointReference acksTo = new EndpointReference(rmdBean.getAcksToEPR());\n-\t\tString acksToStr = acksTo.getAddress();\n \n-\t\tif (acksToStr == null)\n+\t\tif (acksTo.getAddress() == null)\n \t\t\tthrow new SandeshaException(SandeshaMessageHelper.getMessage(SandeshaMessageKeys.acksToStrNotSet));\n \n \t\tAxisOperation ackOperation = SpecSpecificConstants.getWSRMOperation(\n@@ -409,6 +404,8 @@ public static void addAckBeanEntry (\n \t}\n \t\n \tpublic static void sendAckNow (RMMsgContext ackRMMsgContext) throws AxisFault {\n+\t\tif (log.isDebugEnabled())\n+\t\t\tlog.debug(\"Enter: AcknowledgementManager::sendAckNow\");\n \n \t\tMessageContext ackMsgContext = ackRMMsgContext.getMessageContext();\n \t\tConfigurationContext configContext = ackMsgContext.getConfigurationContext();\n@@ -432,7 +429,7 @@ public static void sendAckNow (RMMsgContext ackRMMsgContext) throws AxisFault {\n \t\tAxisEngine engine = new AxisEngine(configContext);\n \t\tengine.send(ackMsgContext);\n \t\t\n-\t}\n-\n-\t\n+\t\tif (log.isDebugEnabled())\n+\t\t\tlog.debug(\"Exit: AcknowledgementManager::sendAckNow\");\t\t\n+\t}\t\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/99a7ec501e7dc898cf07e02c407a3658c1ef19c3",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/20a99a0be99e070e09f1c07f8a1313b6eb9a6d64",
        "message": "A bug fix to avoid a NPE.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@498952 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_11",
        "file": [
            {
                "sha": "b43966e1258fce41fa3a865a33f76aede366e734",
                "filename": "src/org/apache/sandesha2/msgprocessors/CreateSeqResponseMsgProcessor.java",
                "status": "modified",
                "additions": 15,
                "deletions": 1,
                "changes": 16,
                "blob_url": "https://github.com/apache/sandesha/blob/99a7ec501e7dc898cf07e02c407a3658c1ef19c3/src/org/apache/sandesha2/msgprocessors/CreateSeqResponseMsgProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/99a7ec501e7dc898cf07e02c407a3658c1ef19c3/src/org/apache/sandesha2/msgprocessors/CreateSeqResponseMsgProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/msgprocessors/CreateSeqResponseMsgProcessor.java?ref=99a7ec501e7dc898cf07e02c407a3658c1ef19c3",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.axis2.context.ConfigurationContext;\n import org.apache.axis2.context.MessageContext;\n import org.apache.axis2.context.OperationContext;\n+import org.apache.axis2.context.OperationContextFactory;\n import org.apache.axis2.wsdl.WSDLConstants;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -199,7 +200,20 @@ public boolean processInMessage(RMMsgContext createSeqResponseRMMsgCtx) throws A\n \t\t\tString rmSpecVersion = createSeqResponseRMMsgCtx.getRMSpecVersion();\n \t\t\trMDBean.setRMVersion(rmSpecVersion);\n \t\t\t\n-\t\t\trMDBean.setToAddress(createSeqResponseRMMsgCtx.getTo().getAddress());\n+\t\t\tEndpointReference toEPR = createSeqResponseRMMsgCtx.getTo();\n+\t\t\tif (toEPR==null) {\n+\t\t\t\t//Most probably this is a sync response message, using the replyTo of the request message\n+\t\t\t\tOperationContext operationContext = createSeqResponseRMMsgCtx.getMessageContext().getOperationContext();\n+\t\t\t\tif (operationContext!=null) {\n+\t\t\t\t\tMessageContext createSequnceMessage = operationContext.getMessageContext(OperationContextFactory.MESSAGE_LABEL_OUT_VALUE);\n+\t\t\t\t\tif (createSequnceMessage!=null)\n+\t\t\t\t\t\ttoEPR = createSequnceMessage.getReplyTo();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t\tif (toEPR!=null) \n+\t\t\t\trMDBean.setToAddress(toEPR.getAddress());\n+\t\t\t\n \t\t\trMDBean.setServerCompletedMessages(new RangeString());\n \t\t\tRMDBeanMgr rmdBeanMgr = storageManager.getRMDBeanMgr();\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/7ff06c5c3865d868d8e56b56c4c4590a43611936",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/1b9d87df6cc50e4613f8dd881f5df50bb74c7036",
        "message": "Applying NPE patch for SANDESHA2-59\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@482575 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_12",
        "file": [
            {
                "sha": "ba5ff5798cc23232ce00a96aa9141034144eb6e1",
                "filename": "src/org/apache/sandesha2/msgprocessors/AckRequestedProcessor.java",
                "status": "modified",
                "additions": 15,
                "deletions": 0,
                "changes": 15,
                "blob_url": "https://github.com/apache/sandesha/blob/7ff06c5c3865d868d8e56b56c4c4590a43611936/src/org/apache/sandesha2/msgprocessors/AckRequestedProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7ff06c5c3865d868d8e56b56c4c4590a43611936/src/org/apache/sandesha2/msgprocessors/AckRequestedProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/msgprocessors/AckRequestedProcessor.java?ref=7ff06c5c3865d868d8e56b56c4c4590a43611936",
                "patch": "@@ -53,6 +53,7 @@\n import org.apache.sandesha2.storage.beans.CreateSeqBean;\n import org.apache.sandesha2.storage.beans.SenderBean;\n import org.apache.sandesha2.storage.beans.SequencePropertyBean;\n+import org.apache.sandesha2.util.FaultManager;\n import org.apache.sandesha2.util.MsgInitializer;\n import org.apache.sandesha2.util.RMMsgCreator;\n import org.apache.sandesha2.util.SOAPAbstractFactory;\n@@ -134,6 +135,20 @@ public boolean processAckRequestedHeader(RMMsgContext rmMsgCtx, OMElement soapHe\n \t\t\tsecManager.checkProofOfPossession(token, soapHeader, msgContext);\n \t\t}\n \n+\t\t// Check that the sequence requested exists\n+\t\tFaultManager faultManager = new FaultManager();\n+\t\tSandeshaException fault = faultManager.checkForUnknownSequence(rmMsgCtx, sequenceId, storageManager);\n+\t\tif (fault != null) {\n+\t\t\tthrow fault;\n+\t\t}\n+\n+\t\t// Check that the sequence isn't closed\n+\t\t// throwing a fault if the sequence is closed.\n+\t\tfault = faultManager.checkForSequenceClosed(rmMsgCtx, sequenceId, storageManager);\n+\t\tif (fault != null) {\n+\t\t\tthrow fault;\n+\t\t}\n+\n \t\t// Setting the ack depending on AcksTo.\n \t\tSequencePropertyBean acksToBean = seqPropMgr.retrieve(sequencePropertyKey,\n \t\t\t\tSandesha2Constants.SequenceProperties.ACKS_TO_EPR);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/c67db7a2912128c0e6191081a1bbfa82cd08125f",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/9cf721891628082833fd91c0c49386f0a2263fc0",
        "message": "Move propertiesToCopyFromReferenceMessage in module.xml as it was stopping policy info from being loaded.  Also fix several NullPointerExceptions in Sender and PollingManager\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@516422 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_13",
        "file": [
            {
                "sha": "80ba6b662ca2737dd0a5fbf198df0f9f668ab1a4",
                "filename": "config/module.xml",
                "status": "modified",
                "additions": 6,
                "deletions": 5,
                "changes": 11,
                "blob_url": "https://github.com/apache/sandesha/blob/c67db7a2912128c0e6191081a1bbfa82cd08125f/config/module.xml",
                "raw_url": "https://github.com/apache/sandesha/raw/c67db7a2912128c0e6191081a1bbfa82cd08125f/config/module.xml",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/config/module.xml?ref=c67db7a2912128c0e6191081a1bbfa82cd08125f",
                "patch": "@@ -35,10 +35,6 @@\n             <order phase=\"RMPhase\"/>\n         </handler>   \n     </OutFaultFlow>\n-    \n-    <!-- Parameters that will be copied when creating related MessageContexts -->\n-    <parameter name=\"propertiesToCopyFromReferenceMessage\" locked=\"false\">TransportURL,WSAddressingVersion,disableAddressingForOutMessages,rampartPolicy,RECV_RESULTS,PROXY</parameter>\n-    <parameter name=\"propertiesToCopyFromReferenceRequestMessage\" locked=\"false\">WSAddressingVersion,RECV_RESULTS,rampartPolicy</parameter>\n \n     <operation name=\"RMInOnlyOperation\" mep=\"http://www.w3.org/2006/01/wsdl/in-only\">\n         <messageReceiver class=\"org.apache.sandesha2.msgreceivers.RMMessageReceiver\"/>\n@@ -137,5 +133,10 @@\n \t\t\t</wsp:Policy>\n \t\t</sandesha2:RMAssertion>\n \t</wsp:Policy>\n-\t\n+\n+\n+    <!-- Parameters that will be copied when creating related MessageContexts -->\n+    <parameter name=\"propertiesToCopyFromReferenceMessage\" locked=\"false\">TransportURL,WSAddressingVersion,disableAddressingForOutMessages,rampartPolicy,RECV_RESULTS,PROXY</parameter>\n+    <parameter name=\"propertiesToCopyFromReferenceRequestMessage\" locked=\"false\">WSAddressingVersion,RECV_RESULTS,rampartPolicy</parameter>\n+\n </module>"
            },
            {
                "sha": "19e892fbd8596ddfca2fa7ad20edb58ec95d11bd",
                "filename": "src/org/apache/sandesha2/polling/PollingManager.java",
                "status": "modified",
                "additions": 6,
                "deletions": 2,
                "changes": 8,
                "blob_url": "https://github.com/apache/sandesha/blob/c67db7a2912128c0e6191081a1bbfa82cd08125f/src/org/apache/sandesha2/polling/PollingManager.java",
                "raw_url": "https://github.com/apache/sandesha/raw/c67db7a2912128c0e6191081a1bbfa82cd08125f/src/org/apache/sandesha2/polling/PollingManager.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/polling/PollingManager.java?ref=c67db7a2912128c0e6191081a1bbfa82cd08125f",
                "patch": "@@ -135,11 +135,15 @@ private void pollRMSSide(SequenceEntry entry, boolean force) throws AxisFault {\n \t\t\t// This sequence must have been terminated, or deleted\n \t\t\tstopThreadForSequence(entry.getSequenceId(), true);\n \t\t} else {\n+      if (log.isDebugEnabled())\n+        log.debug(\"Polling rms \" + beanToPoll);\n \t\t\t// The sequence is there, but we still only poll if we are expecting reply messages,\n \t\t\t// or if we don't have clean ack state.\n-\t\t\tboolean cleanAcks = AcknowledgementManager.verifySequenceCompletion(beanToPoll.getClientCompletedMessages(), beanToPoll.getNextMessageNumber());\n+      boolean cleanAcks = false;\n+      if (beanToPoll.getNextMessageNumber() > -1)\n+      \tcleanAcks = AcknowledgementManager.verifySequenceCompletion(beanToPoll.getClientCompletedMessages(), beanToPoll.getNextMessageNumber());\n \t\t\tlong  repliesExpected = beanToPoll.getExpectedReplies();\n-\t\t\tif(force ||\t!cleanAcks || repliesExpected > 0)\n+\t\t\tif((force ||\t!cleanAcks || repliesExpected > 0) && beanToPoll.getReferenceMessageStoreKey() != null)\n \t\t\t\tpollForSequence(beanToPoll.getAnonymousUUID(), beanToPoll.getInternalSequenceID(), beanToPoll.getReferenceMessageStoreKey(), beanToPoll, entry);\n \t\t}\n "
            },
            {
                "sha": "8c61089b46cc33dd9b51bc6bcbb758a348988274",
                "filename": "src/org/apache/sandesha2/workers/Sender.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/c67db7a2912128c0e6191081a1bbfa82cd08125f/src/org/apache/sandesha2/workers/Sender.java",
                "raw_url": "https://github.com/apache/sandesha/raw/c67db7a2912128c0e6191081a1bbfa82cd08125f/src/org/apache/sandesha2/workers/Sender.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/workers/Sender.java?ref=c67db7a2912128c0e6191081a1bbfa82cd08125f",
                "patch": "@@ -103,7 +103,7 @@ protected boolean internalRun() {\n \t\t\t\tif(rms != null && !rms.isTerminated() && !rms.isTimedOut()) {\r\n \t\t\t\t\tsequenceId = rms.getSequenceID();\t\t\t\t\t\r\n \t\t\t\t\tif (SequenceManager.hasSequenceTimedOut(rms, sequenceId, storageManager))\t\t\t\t\t\r\n-\t\t\t\t\t\tSequenceManager.finalizeTimedOutSequence(sequenceId, null, storageManager);\r\n+\t\t\t\t\t\tSequenceManager.finalizeTimedOutSequence(rms.getInternalSequenceID(), null, storageManager);\r\n \t\t\t\t\telse\r\n \t\t\t\t\t\tfound = true;\r\n \t\t\t\t}\r"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/91f5fc1219cc3da51404d1d3cdf4766a0cb5b5c5",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/67c7ebf57ebd3b26fcca107c45f960eb2403c968",
        "message": "Fix NPE in test casued by earlier commit. oops, sorry\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@646829 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_14",
        "file": [
            {
                "sha": "3d3f8d50402736c6ce8c4c2234060f7b5179eb3d",
                "filename": "modules/tests/src/test/java/org/apache/sandesha2/faulttests/InvalidAcknowledgementTest.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/91f5fc1219cc3da51404d1d3cdf4766a0cb5b5c5/modules/tests/src/test/java/org/apache/sandesha2/faulttests/InvalidAcknowledgementTest.java",
                "raw_url": "https://github.com/apache/sandesha/raw/91f5fc1219cc3da51404d1d3cdf4766a0cb5b5c5/modules/tests/src/test/java/org/apache/sandesha2/faulttests/InvalidAcknowledgementTest.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/tests/src/test/java/org/apache/sandesha2/faulttests/InvalidAcknowledgementTest.java?ref=91f5fc1219cc3da51404d1d3cdf4766a0cb5b5c5",
                "patch": "@@ -269,7 +269,7 @@ private static SenderBean getSenderBean(String seqID, int sendCount, int message\n \t\tbean.setReSend(true);\n \t\tbean.setMessageType(Sandesha2Constants.MessageTypes.APPLICATION);\n \t\tbean.setMessageNumber(messageNo);\n-\t\t\n+\t\tbean.setMessageContextRefKey(\"fakeKey\");\n \t\treturn bean;\n \t}\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/2e791bafea8367239c594302f73069340f8981e3",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/6165347797b4acd28ec6a6b16817aae8db1e4c43",
        "message": "Remove unused imports, removed casts that aren't required and protected against some possible NPE's\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@599813 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_15",
        "file": [
            {
                "sha": "3c76b57f152bd35b13e92ce91e8fdd842242b72f",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/handlers/SandeshaGlobalInHandler.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/handlers/SandeshaGlobalInHandler.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/handlers/SandeshaGlobalInHandler.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/handlers/SandeshaGlobalInHandler.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -157,7 +157,7 @@ private static void processApplicationMessage(RMMsgContext rmMsgCtx) throws Axis\n     if (log.isDebugEnabled())\n       log.debug(\"Enter: SandeshaGlobalInHandler::processApplicationMessage\");\n     // Check if this is a duplicate message\n-    Sequence sequence = (Sequence) rmMsgCtx.getSequence();\n+    Sequence sequence = rmMsgCtx.getSequence();\n     String sequenceId = sequence.getIdentifier().getIdentifier();\n     long msgNo = sequence.getMessageNumber().getMessageNumber();\n "
            },
            {
                "sha": "8cddf244b846de81cc572a5e43efb311f004547c",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/msgprocessors/AckRequestedProcessor.java",
                "status": "modified",
                "additions": 0,
                "deletions": 2,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/AckRequestedProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/AckRequestedProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/AckRequestedProcessor.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -43,8 +43,6 @@\n import org.apache.sandesha2.i18n.SandeshaMessageHelper;\n import org.apache.sandesha2.i18n.SandeshaMessageKeys;\n import org.apache.sandesha2.policy.SandeshaPolicyBean;\n-import org.apache.sandesha2.security.SecurityManager;\n-import org.apache.sandesha2.security.SecurityToken;\n import org.apache.sandesha2.storage.StorageManager;\n import org.apache.sandesha2.storage.beanmanagers.SenderBeanMgr;\n import org.apache.sandesha2.storage.beans.RMDBean;"
            },
            {
                "sha": "88556b755a18839f7a22078c2a84e09d7a5f1cda",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/msgprocessors/AcknowledgementProcessor.java",
                "status": "modified",
                "additions": 0,
                "deletions": 2,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/AcknowledgementProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/AcknowledgementProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/AcknowledgementProcessor.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -36,8 +36,6 @@\n import org.apache.sandesha2.i18n.SandeshaMessageHelper;\n import org.apache.sandesha2.i18n.SandeshaMessageKeys;\n import org.apache.sandesha2.polling.PollingManager;\n-import org.apache.sandesha2.security.SecurityManager;\n-import org.apache.sandesha2.security.SecurityToken;\n import org.apache.sandesha2.storage.StorageManager;\n import org.apache.sandesha2.storage.beanmanagers.RMDBeanMgr;\n import org.apache.sandesha2.storage.beanmanagers.SenderBeanMgr;"
            },
            {
                "sha": "803d94bf6c1bf053ad3e7d0b598a49dec241be1c",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/msgprocessors/ApplicationMsgProcessor.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/ApplicationMsgProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/ApplicationMsgProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/ApplicationMsgProcessor.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -491,7 +491,7 @@ private RMSBean addCreateSequenceMessage(RMMsgContext applicationRMMsg, RMSBean\n \t\tRMMsgContext createSeqRMMessage = RMMsgCreator.createCreateSeqMsg(rmsBean, applicationRMMsg);\n \n \t\tcreateSeqRMMessage.setFlow(MessageContext.OUT_FLOW);\n-\t\tCreateSequence createSequencePart = (CreateSequence) createSeqRMMessage.getCreateSequence();\n+\t\tCreateSequence createSequencePart = createSeqRMMessage.getCreateSequence();\n \n \t\tSequenceOffer offer = createSequencePart.getSequenceOffer();\n \t\tif (offer != null) {"
            },
            {
                "sha": "93e255ad3b55abc0552e11d9018f5f79b5ac6fd5",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/msgprocessors/CloseSequenceProcessor.java",
                "status": "modified",
                "additions": 2,
                "deletions": 5,
                "changes": 7,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/CloseSequenceProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/CloseSequenceProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/CloseSequenceProcessor.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -21,7 +21,6 @@\n \n import java.util.Iterator;\n \n-import org.apache.axiom.om.OMElement;\n import org.apache.axis2.AxisFault;\n import org.apache.axis2.context.ConfigurationContext;\n import org.apache.axis2.context.MessageContext;\n@@ -36,8 +35,6 @@\n import org.apache.sandesha2.SandeshaException;\n import org.apache.sandesha2.i18n.SandeshaMessageHelper;\n import org.apache.sandesha2.i18n.SandeshaMessageKeys;\n-import org.apache.sandesha2.security.SecurityManager;\n-import org.apache.sandesha2.security.SecurityToken;\n import org.apache.sandesha2.storage.StorageManager;\n import org.apache.sandesha2.storage.Transaction;\n import org.apache.sandesha2.storage.beans.RMDBean;\n@@ -65,7 +62,7 @@ public boolean processInMessage(RMMsgContext rmMsgCtx, Transaction transaction)\n \t\t\tlog.debug(\"Enter: CloseSequenceProcessor::processInMessage\");\n \n \t\tConfigurationContext configCtx = rmMsgCtx.getMessageContext().getConfigurationContext();\n-\t\tCloseSequence closeSequence = (CloseSequence) rmMsgCtx.getCloseSequence();\n+\t\tCloseSequence closeSequence = rmMsgCtx.getCloseSequence();\n \n \t\tMessageContext msgCtx = rmMsgCtx.getMessageContext();\n \n@@ -159,7 +156,7 @@ public boolean processOutMessage(RMMsgContext rmMsgCtx, Transaction transaction)\n \t\tgetConfigurationContext().registerOperationContext(rmMsgCtx.getMessageId(),opcontext);\n \t\tgetMsgContext().setOperationContext(opcontext);\n \t\t\n-\t\tCloseSequence closeSequencePart = (CloseSequence) rmMsgCtx.getCloseSequence();\n+\t\tCloseSequence closeSequencePart = rmMsgCtx.getCloseSequence();\n \t\tIdentifier identifier = closeSequencePart.getIdentifier();\n \t\tif (identifier==null) {\n \t\t\tidentifier = new Identifier (closeSequencePart.getNamespaceValue());"
            },
            {
                "sha": "2556030741d8a013065d228d3e81e224d5716bf6",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/msgprocessors/CreateSeqMsgProcessor.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/CreateSeqMsgProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/CreateSeqMsgProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/CreateSeqMsgProcessor.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -74,7 +74,7 @@ public boolean processInMessage(RMMsgContext createSeqRMMsg, Transaction transac\n \n \t\ttry {\n \t\t\t\n-\t\t\tCreateSequence createSeqPart = (CreateSequence) createSeqRMMsg.getCreateSequence();\n+\t\t\tCreateSequence createSeqPart = createSeqRMMsg.getCreateSequence();\n \t\t\tif (createSeqPart == null) {\n \t\t\t\tif (log.isDebugEnabled())\n \t\t\t\t\tlog.debug(SandeshaMessageHelper.getMessage(SandeshaMessageKeys.noCreateSeqParts));\n@@ -152,7 +152,7 @@ public boolean processInMessage(RMMsgContext createSeqRMMsg, Transaction transac\n \t\t\t// for making sure that this won't be processed again\n \t\t\tcreateSeqResponse.setProperty(Sandesha2Constants.APPLICATION_PROCESSING_DONE, \"true\"); \n \t\t\t\n-\t\t\tCreateSequenceResponse createSeqResPart = (CreateSequenceResponse) createSeqResponse.getCreateSequenceResponse();\n+\t\t\tCreateSequenceResponse createSeqResPart = createSeqResponse.getCreateSequenceResponse();\n \t\n \t\t\t\t// OFFER PROCESSING\n \t\t\tSequenceOffer offer = createSeqPart.getSequenceOffer();"
            },
            {
                "sha": "971c1dc1d9ca6b60400b10cfd451e52127da6c1c",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/msgprocessors/CreateSeqResponseMsgProcessor.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/CreateSeqResponseMsgProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/CreateSeqResponseMsgProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/CreateSeqResponseMsgProcessor.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -69,7 +69,7 @@ public boolean processInMessage(RMMsgContext createSeqResponseRMMsgCtx, Transact\n \n \t\t// Processing the create sequence response.\n \n-\t\tCreateSequenceResponse createSeqResponsePart = (CreateSequenceResponse) createSeqResponseRMMsgCtx.getCreateSequenceResponse();\n+\t\tCreateSequenceResponse createSeqResponsePart = createSeqResponseRMMsgCtx.getCreateSequenceResponse();\n \t\tif (createSeqResponsePart == null) {\n \t\t\tString message = SandeshaMessageHelper.getMessage(SandeshaMessageKeys.noCreateSeqResponse);\n \t\t\tlog.debug(message);"
            },
            {
                "sha": "d997fc3dcecf6610d25123ebdae9ce3dc6a4eb78",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/msgprocessors/LastMessageProcessor.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/LastMessageProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/LastMessageProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/LastMessageProcessor.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -62,7 +62,7 @@ public static void processLastMessage(RMMsgContext rmMsgCtx) throws AxisFault {\n \t\tif (!Sandesha2Constants.SPEC_VERSIONS.v1_0.equals(rmMsgCtx.getRMSpecVersion()))\n \t\t\treturn;\n \t\t\n-\t\tSequence sequence = (Sequence) rmMsgCtx.getSequence();\n+\t\tSequence sequence = rmMsgCtx.getSequence();\n \t\tString sequenceId = sequence.getIdentifier().getIdentifier();\n \t\t\n \t\tConfigurationContext configurationContext = rmMsgCtx.getConfigurationContext();"
            },
            {
                "sha": "f6e5eb8da7f7949b222ca1e955b0ea8e7880238c",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/msgprocessors/MessagePendingProcessor.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/MessagePendingProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/MessagePendingProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/MessagePendingProcessor.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -40,7 +40,7 @@ public void processMessagePendingHeaders(RMMsgContext message) throws AxisFault\n \t\tif (log.isDebugEnabled())\n \t\t\tlog.debug(\"Enter: MessagePendingProcessor::processMessagePendingHeaders\");\n \n-\t\tMessagePending messagePending = (MessagePending) message.getMessagePending();\n+\t\tMessagePending messagePending = message.getMessagePending();\n \t\tif (messagePending!=null) {\n \t\t\tboolean pending = messagePending.isPending();\n \t\t\tif (pending) {"
            },
            {
                "sha": "b2a23ef04c52a1365503738216fc43fbcf40b84f",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/msgprocessors/SequenceProcessor.java",
                "status": "modified",
                "additions": 2,
                "deletions": 6,
                "changes": 8,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/SequenceProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/SequenceProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/SequenceProcessor.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -21,8 +21,6 @@\n \n import javax.xml.namespace.QName;\n \n-import org.apache.axiom.om.OMElement;\n-import org.apache.axiom.soap.SOAPEnvelope;\n import org.apache.axis2.AxisFault;\n import org.apache.axis2.addressing.EndpointReference;\n import org.apache.axis2.addressing.RelatesTo;\n@@ -44,8 +42,6 @@\n import org.apache.sandesha2.i18n.SandeshaMessageKeys;\n import org.apache.sandesha2.msgreceivers.RMMessageReceiver;\n import org.apache.sandesha2.policy.SandeshaPolicyBean;\n-import org.apache.sandesha2.security.SecurityManager;\n-import org.apache.sandesha2.security.SecurityToken;\n import org.apache.sandesha2.storage.StorageManager;\n import org.apache.sandesha2.storage.Transaction;\n import org.apache.sandesha2.storage.beanmanagers.RMDBeanMgr;\n@@ -77,7 +73,7 @@ public InvocationResponse processSequenceHeader(RMMsgContext rmMsgCtx, Transacti\n \t\t\tlog.debug(\"Enter: SequenceProcessor::processSequenceHeader\");\n \t\t\n \t\tInvocationResponse result = InvocationResponse.CONTINUE;\n-\t\tSequence sequence = (Sequence) rmMsgCtx.getSequence();\n+\t\tSequence sequence = rmMsgCtx.getSequence();\n \t\tif(sequence != null) {\n \t\t\t// This is a reliable message, so hand it on to the main routine\n \t\t\tresult = processReliableMessage(rmMsgCtx, transaction);\n@@ -103,7 +99,7 @@ public InvocationResponse processReliableMessage(RMMsgContext rmMsgCtx, Transact\n \n \t\tMessageContext msgCtx = rmMsgCtx.getMessageContext();\n \t\tStorageManager storageManager = SandeshaUtil.getSandeshaStorageManager(msgCtx.getConfigurationContext(),msgCtx.getConfigurationContext().getAxisConfiguration());\n-\t\tSequence sequence = (Sequence) rmMsgCtx.getSequence();\n+\t\tSequence sequence = rmMsgCtx.getSequence();\n \t\tString sequenceId = sequence.getIdentifier().getIdentifier();\n \t\tlong msgNo = sequence.getMessageNumber().getMessageNumber();\n \t\tboolean lastMessage = sequence.getLastMessage() != null;"
            },
            {
                "sha": "8850818a801b42b89e351c8fdc7a91188dde273e",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/msgprocessors/TerminateSeqMsgProcessor.java",
                "status": "modified",
                "additions": 2,
                "deletions": 5,
                "changes": 7,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/TerminateSeqMsgProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/TerminateSeqMsgProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/TerminateSeqMsgProcessor.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -21,7 +21,6 @@\n \n import java.util.Iterator;\n \n-import org.apache.axiom.om.OMElement;\n import org.apache.axis2.AxisFault;\n import org.apache.axis2.Constants;\n import org.apache.axis2.addressing.EndpointReference;\n@@ -39,8 +38,6 @@\n import org.apache.sandesha2.SandeshaException;\n import org.apache.sandesha2.i18n.SandeshaMessageHelper;\n import org.apache.sandesha2.i18n.SandeshaMessageKeys;\n-import org.apache.sandesha2.security.SecurityManager;\n-import org.apache.sandesha2.security.SecurityToken;\n import org.apache.sandesha2.storage.StorageManager;\n import org.apache.sandesha2.storage.Transaction;\n import org.apache.sandesha2.storage.beanmanagers.RMDBeanMgr;\n@@ -76,7 +73,7 @@ public boolean processInMessage(RMMsgContext terminateSeqRMMsg, Transaction tran\n \n \t\t// Processing the terminate message\n \t\t// TODO Add terminate sequence message logic.\n-\t\tTerminateSequence terminateSequence = (TerminateSequence) terminateSeqRMMsg.getTerminateSequence();\n+\t\tTerminateSequence terminateSequence = terminateSeqRMMsg.getTerminateSequence();\n \t\tif (terminateSequence == null) {\n \t\t\tString message = SandeshaMessageHelper.getMessage(SandeshaMessageKeys.noTerminateSeqPart);\n \t\t\tlog.debug(message);\n@@ -380,7 +377,7 @@ public boolean processOutMessage(RMMsgContext rmMsgCtx, Transaction transaction)\n \t\tgetMsgContext().setOperationContext(opcontext);\n \t\tgetMsgContext().setAxisOperation(terminateOp);\n \n-\t\tTerminateSequence terminateSequencePart = (TerminateSequence) rmMsgCtx.getTerminateSequence();\n+\t\tTerminateSequence terminateSequencePart = rmMsgCtx.getTerminateSequence();\n \t\tterminateSequencePart.getIdentifier().setIndentifer(getOutSequenceID());\n \n \t\trmMsgCtx.setWSAAction(SpecSpecificConstants.getTerminateSequenceAction(getRMVersion()));"
            },
            {
                "sha": "613ca7471655765460a88cae3f2b8b4751afc7aa",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/msgprocessors/TerminateSeqResponseMsgProcessor.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/TerminateSeqResponseMsgProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/TerminateSeqResponseMsgProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/TerminateSeqResponseMsgProcessor.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -52,8 +52,7 @@ public boolean processInMessage(RMMsgContext terminateResRMMsg, Transaction tran\n \t\t\n \t\tStorageManager storageManager = SandeshaUtil.getSandeshaStorageManager(context,context.getAxisConfiguration());\n \t\t\n-\t\tTerminateSequenceResponse tsResponse = (TerminateSequenceResponse)\n-\t\t  terminateResRMMsg.getTerminateSequenceResponse();\n+\t\tTerminateSequenceResponse tsResponse = terminateResRMMsg.getTerminateSequenceResponse();\n \t\t\n \t\tString sequenceId = tsResponse.getIdentifier().getIdentifier();\n \t\tRMSBean rmsBean = SandeshaUtil.getRMSBeanFromSequenceId(storageManager, sequenceId);"
            },
            {
                "sha": "83ab931192a1e431c8304f8c33ef20f5117c6aca",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/util/MsgInitializer.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/util/MsgInitializer.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/util/MsgInitializer.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/util/MsgInitializer.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -171,7 +171,7 @@ private static void populateRMMsgContext(MessageContext msgCtx, RMMsgContext rmM\n \t\t\tsequenceID = terminateSequenceResponse.getIdentifier().getIdentifier();\n \t\t} else if (sequence != null) {\n \t\t\t\n-\t\t\tSequence seq = (Sequence) rmMsgContext.getSequence();\n+\t\t\tSequence seq = rmMsgContext.getSequence();\n \t\t\tLastMessage lastMessage = seq.getLastMessage();\n \t\t\tSOAPEnvelope envelope = rmMsgContext.getSOAPEnvelope();\n \t\t\t"
            },
            {
                "sha": "d7e2ac1ace7a5199c549ffe860d00b1b76379053",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/util/SandeshaUtil.java",
                "status": "modified",
                "additions": 10,
                "deletions": 10,
                "changes": 20,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/util/SandeshaUtil.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/util/SandeshaUtil.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/util/SandeshaUtil.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -720,12 +720,12 @@ public static SandeshaPolicyBean getPropertyBean (AxisDescription axisDescriptio\n \t\treturn propertyBean;\n \t}\n \n-\tpublic static String getSequenceIDFromRMMessage(RMMsgContext rmMessageContext) throws SandeshaException {\n+\tpublic static String getSequenceIDFromRMMessage(RMMsgContext rmMessageContext) {\n \t\tint messageType = rmMessageContext.getMessageType();\n \n \t\tString sequenceID = null;\n \t\tif (messageType == Sandesha2Constants.MessageTypes.APPLICATION) {\n-\t\t\tSequence sequence = (Sequence) rmMessageContext.getSequence();\n+\t\t\tSequence sequence = rmMessageContext.getSequence();\n \t\t\tsequenceID = sequence.getIdentifier().getIdentifier();\n \t\t} else if (messageType == Sandesha2Constants.MessageTypes.ACK) {\n \t\t\tIterator sequenceAckIter = rmMessageContext\n@@ -747,12 +747,10 @@ public static String getSequenceIDFromRMMessage(RMMsgContext rmMessageContext) t\n \t\t\tAckRequested ackReq = (AckRequested) ackRequestIter.next();\n \t\t\tsequenceID = ackReq.getIdentifier().getIdentifier();\n \t\t} else if (messageType == Sandesha2Constants.MessageTypes.CLOSE_SEQUENCE) {\n-\t\t\tCloseSequence closeSequence = (CloseSequence) rmMessageContext\n-\t\t\t\t\t.getCloseSequence();\n+\t\t\tCloseSequence closeSequence = rmMessageContext.getCloseSequence();\n \t\t\tsequenceID = closeSequence.getIdentifier().getIdentifier();\n \t\t} else if (messageType == Sandesha2Constants.MessageTypes.CLOSE_SEQUENCE_RESPONSE) {\n-\t\t\tCloseSequenceResponse closeSequenceResponse = (CloseSequenceResponse) rmMessageContext\n-\t\t\t\t\t.getCloseSequenceResponse();;\n+\t\t\tCloseSequenceResponse closeSequenceResponse = rmMessageContext.getCloseSequenceResponse();;\n \t\t\tsequenceID = closeSequenceResponse.getIdentifier().getIdentifier();\n \t\t}\n \n@@ -930,8 +928,8 @@ private static ContextManager getContextManagerInstance(String className,Configu\n \tpublic static boolean isWSRMAnonymous(String address) {\n \t\tif (address!=null && address.startsWith(Sandesha2Constants.SPEC_2007_02.ANONYMOUS_URI_PREFIX))\n \t\t\treturn true;\n-\t\telse \n-\t\t\treturn false;\n+\t\t \n+\t\treturn false;\n \t}\n \t public static void executeAndStore (RMMsgContext rmMsgContext, String storageKey, StorageManager manager) throws AxisFault {\n \t\tif (log.isDebugEnabled())\n@@ -1223,7 +1221,8 @@ public static boolean isDuplicateInOnlyMessage(MessageContext msgContext)\n \t\tif(localName.equals(Sandesha2Constants.RM_DUPLICATE_IN_ONLY_OPERATION.getLocalPart())){\n \t\t\treturn true;\n \t\t}\n-\t\telse return false;\n+\t\t\n+\t\treturn false;\n \t}\n \t\n \tpublic static boolean isDuplicateInOutMessage(MessageContext msgContext)\n@@ -1233,7 +1232,8 @@ public static boolean isDuplicateInOutMessage(MessageContext msgContext)\n \t\tif(localName.equals(Sandesha2Constants.RM_DUPLICATE_IN_OUT_OPERATION.getLocalPart())){\n \t\t\treturn true;\n \t\t}\n-\t\telse return false;\n+\t\t\n+\t\treturn false;\n \t}\t\n \t \t  \n \tpublic static final String getStackTraceFromException(Exception e) {"
            },
            {
                "sha": "e91784fce04ce4ba9294e335bc728d3a930e164b",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/util/SequenceManager.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/util/SequenceManager.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/util/SequenceManager.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/util/SequenceManager.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -79,7 +79,7 @@ public static RMDBean setupNewSequence(RMMsgContext createSequenceMsg, StorageMa\n \n \t\tEndpointReference replyTo = createSequenceMsg.getReplyTo();\n \n-\t\tCreateSequence createSequence = (CreateSequence) createSequenceMsg.getCreateSequence();\n+\t\tCreateSequence createSequence = createSequenceMsg.getCreateSequence();\n \t\tif (createSequence == null) {\n \t\t\tString message = SandeshaMessageHelper.getMessage(SandeshaMessageKeys.createSeqEntryNotFound);\n \t\t\tlog.debug(message);"
            },
            {
                "sha": "db9a90fe20e0994b2d3c7a1191bd69452559d36c",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/workers/SenderWorker.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/workers/SenderWorker.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/workers/SenderWorker.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/workers/SenderWorker.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -383,7 +383,7 @@ public void run () {\n \t\t\t\t\t// terminate sending side if this is the WSRM 1.0 spec. \n \t\t\t\t\t// If the WSRM versoion is 1.1 termination will happen in the terminate sequence response message.\n \t\t\t\t\t\n-\t\t\t\t\tTerminateSequence terminateSequence = (TerminateSequence) rmMsgCtx.getTerminateSequence();\n+\t\t\t\t\tTerminateSequence terminateSequence = rmMsgCtx.getTerminateSequence();\n \t\t\t\t\tString sequenceID = terminateSequence.getIdentifier().getIdentifier();\n \t\n \t\t\t\t\tRMSBean rmsBean = SandeshaUtil.getRMSBeanFromSequenceId(storageManager, sequenceID);\n@@ -446,7 +446,7 @@ private SenderBean updateMessage(RMMsgContext rmMsgContext, SenderBean senderBea\n \t\t   messageType == Sandesha2Constants.MessageTypes.LAST_MESSAGE) {\n \t\t\t\n \t\t\tString namespace = SpecSpecificConstants.getRMNamespaceValue(rmVersion);\n-\t\t\tSequence sequence = (Sequence) rmMsgContext.getSequence();\n+\t\t\tSequence sequence = rmMsgContext.getSequence();\n \t\t\tif(sequence == null) {\n \t\t\t\tsequence = new Sequence(namespace);\n \t\t\t\t\n@@ -467,11 +467,11 @@ private SenderBean updateMessage(RMMsgContext rmMsgContext, SenderBean senderBea\n \t\t\t}\n \t\t\t\n \t\t} else if(messageType == Sandesha2Constants.MessageTypes.TERMINATE_SEQ) {\n-\t\t\tTerminateSequence terminate = (TerminateSequence) rmMsgContext.getTerminateSequence();\n+\t\t\tTerminateSequence terminate = rmMsgContext.getTerminateSequence();\n \t\t\tid = terminate.getIdentifier();\n \n \t\t} else if(messageType == Sandesha2Constants.MessageTypes.CLOSE_SEQUENCE) {\n-\t\t\tCloseSequence close = (CloseSequence) rmMsgContext.getCloseSequence();\n+\t\t\tCloseSequence close = rmMsgContext.getCloseSequence();\n \t\t\tid = close.getIdentifier();\n \t\t\n \t\t} else if(messageType == Sandesha2Constants.MessageTypes.ACK_REQUEST) {"
            },
            {
                "sha": "9c1adff29dee6831714ab8817f438dbe4e4f584d",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/wsrm/AckFinal.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/AckFinal.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/AckFinal.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/wsrm/AckFinal.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -52,8 +52,7 @@ public Object fromOMElement(OMElement finalPart) throws OMException {\n \t\t\n \t\tif (finalPart == null)\n \t\t\tthrow new OMException(SandeshaMessageHelper.getMessage(\n-\t\t\t\t\tSandeshaMessageKeys.noFinalPartInElement,\n-\t\t\t\t\tfinalPart.toString()));\n+\t\t\t\t\tSandeshaMessageKeys.noFinalPartInElement));\n \n \t\treturn this;\n \t}"
            },
            {
                "sha": "e6216a6e0e70dd8f41e6a1f2ab33e67f2371e798",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/wsrm/AckNone.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/AckNone.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/AckNone.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/wsrm/AckNone.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -52,8 +52,7 @@ public String getNamespaceValue(){\n \tpublic Object fromOMElement(OMElement nonePart) throws OMException {\n \t\tif (nonePart == null)\n \t\t\tthrow new OMException(SandeshaMessageHelper.getMessage(\n-\t\t\t\t\tSandeshaMessageKeys.noNonePartInElement,\n-\t\t\t\t\tnonePart.toString()));\n+\t\t\t\t\tSandeshaMessageKeys.noNonePartInElement));\n \n \t\treturn this;\n \t}"
            },
            {
                "sha": "899ed129a15cc451ab7130eee8580f85d9192a05",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/wsrm/CloseSequence.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/CloseSequence.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/CloseSequence.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/wsrm/CloseSequence.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -142,8 +142,8 @@ public boolean isNamespaceSupported (String namespaceName) {\n \tpublic boolean isLastMsgNumberRequired(String namespaceName){\n \t\tif (Sandesha2Constants.SPEC_2007_02.NS_URI.equals(namespaceName))\n \t\t\treturn true;\n-\t\telse \n-\t\t\treturn false;\t\t\n+\t\t \n+\t\treturn false;\t\t\n \t}\n \t\n \tpublic void setLastMessageNumber(LastMessageNumber number){"
            },
            {
                "sha": "a80bd5202f22554fa1077cba101f8362768687ac",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/wsrm/Identifier.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/Identifier.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/Identifier.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/wsrm/Identifier.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -55,7 +55,7 @@ public Object fromOMElement(OMElement identifierPart) throws OMException {\n \t\tif (identifierPart == null)\n \t\t\tthrow new OMException(SandeshaMessageHelper.getMessage(\n \t\t\t\t\tSandeshaMessageKeys.invalidIdentifier,\n-\t\t\t\t\tidentifierPart.toString()));\n+\t\t\t\t\tnull));\n \t\t\n \t\tString identifierText = identifierPart.getText();\n \t\tif (identifierText == null || identifierText == \"\")"
            },
            {
                "sha": "4d6c24faf5759fae7c5c4b203b23e55d113c9b54",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/wsrm/LastMessage.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/LastMessage.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/LastMessage.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/wsrm/LastMessage.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -52,8 +52,7 @@ public String getNamespaceValue () {\n \tpublic Object fromOMElement(OMElement lastMessagePart) throws OMException {\n \t\tif (lastMessagePart == null)\n \t\t\tthrow new OMException(SandeshaMessageHelper.getMessage(\n-\t\t\t\t\tSandeshaMessageKeys.noLastMessagePartInElement,\n-\t\t\t\t\tlastMessagePart.toString()));\n+\t\t\t\t\tSandeshaMessageKeys.noLastMessagePartInElement));\n \n \t\treturn this;\n \t}"
            },
            {
                "sha": "afecc2bd8226cd6d459ca987eaf5476a4f7d9f68",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/wsrm/LastMessageNumber.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/LastMessageNumber.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/LastMessageNumber.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/wsrm/LastMessageNumber.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -53,8 +53,7 @@ public void setMessageNumber(long messageNumber){\n \tpublic Object fromOMElement(OMElement msgNumberPart) throws OMException {\r\n \t\tif (msgNumberPart==null)\r\n \t\t\tthrow new OMException (SandeshaMessageHelper.getMessage(\r\n-\t\t\t\t\tSandeshaMessageKeys.noMessageNumberPartInElement,\r\n-\t\t\t\t\tmsgNumberPart.toString()));\r\n+\t\t\t\t\tSandeshaMessageKeys.noMessageNumberPartInElement));\r\n \t\t\r\n \t\tString msgNoStr = msgNumberPart.getText();\r\n \t\tmessageNumber = Long.parseLong(msgNoStr);\r"
            },
            {
                "sha": "824ce97bd7512c931cb5cd0d9dd5c0ee6befcc85",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/wsrm/MessageNumber.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/MessageNumber.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/MessageNumber.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/wsrm/MessageNumber.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -57,8 +57,7 @@ public void setMessageNumber(long messageNumber){\n \tpublic Object fromOMElement(OMElement msgNumberPart) throws OMException {\n \t\tif (msgNumberPart==null)\n \t\t\tthrow new OMException (SandeshaMessageHelper.getMessage(\n-\t\t\t\t\tSandeshaMessageKeys.noMessageNumberPartInElement,\n-\t\t\t\t\tmsgNumberPart.toString()));\n+\t\t\t\t\tSandeshaMessageKeys.noMessageNumberPartInElement));\n \t\t\n \t\tString msgNoStr = msgNumberPart.getText();\n \t\tmessageNumber = Long.parseLong(msgNoStr);"
            },
            {
                "sha": "e1170c99b723c5ebf2325000a8f53932c192471e",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/wsrm/Sequence.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/Sequence.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/Sequence.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/wsrm/Sequence.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -65,8 +65,7 @@ public Object fromOMElement(OMElement ome) throws OMException,SandeshaException\n \n \t\tif (shb == null)\n \t\t\tthrow new OMException(SandeshaMessageHelper.getMessage(\n-\t\t\t\t\tSandeshaMessageKeys.noSequencePartInElement,\n-\t\t\t\t\tshb.toString()));\n+\t\t\t\t\tSandeshaMessageKeys.noSequencePartInElement));\n \t\t\n \t\tOMElement identifierPart = null;\n \t\tOMElement msgNumberPart = null;"
            },
            {
                "sha": "8f016fe174a403a1448e1c0f7fbc4e478a276389",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/wsrm/TerminateSequence.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/TerminateSequence.java",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/java/org/apache/sandesha2/wsrm/TerminateSequence.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/wsrm/TerminateSequence.java?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -152,8 +152,8 @@ public static boolean isLastMsgNumberRequired(String namespaceName){\n \t\t\n \t\tif (Sandesha2Constants.SPEC_2007_02.NS_URI.equals(namespaceName))\n \t\t\treturn true;\n-\t\telse\n-\t\t\treturn false;\t\t\n+\t\t\n+\t\treturn false;\t\t\n \t}\n \t\n }"
            },
            {
                "sha": "76a4eefb5eeae2ab0bb17b64040a0ab67b0cb7af",
                "filename": "modules/core/src/main/resources/org/apache/sandesha2/i18n/resource.properties",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/sandesha/blob/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/resources/org/apache/sandesha2/i18n/resource.properties",
                "raw_url": "https://github.com/apache/sandesha/raw/2e791bafea8367239c594302f73069340f8981e3/modules/core/src/main/resources/org/apache/sandesha2/i18n/resource.properties",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/resources/org/apache/sandesha2/i18n/resource.properties?ref=2e791bafea8367239c594302f73069340f8981e3",
                "patch": "@@ -156,10 +156,10 @@ noTerminateSeqInElement=The passed element {0} does not contain a ''terminate se\n noTerminateSeqResponseInElement=The passed element {0} does not contain a ''terminate sequence response'' part.\n noAcceptPartInElement=The passed element {0} does not contain an ''Accept'' part.\n noUpperOrLowerAttributesInElement=The passed element {0} does not contain upper or lower attributes.\n-noSequencePartInElement=The passed element {0} does not contain a ''Sequence'' part.\n-noLastMessagePartInElement=The passed element {0} does not contain a ''Last Message'' part.\n-noFinalPartInElement=The passed element {0} does not contain a ''Final'' part. \n-noNonePartInElement=The passed element {0} does not contain a ''None'' part.\n+noSequencePartInElement=The passed element does not contain a ''Sequence'' part.\n+noLastMessagePartInElement=The passed element does not contain a ''Last Message'' part.\n+noFinalPartInElement=The passed element does not contain a ''Final'' part. \n+noNonePartInElement=The passed element does not contain a ''None'' part.\n noCloseSequencePartInElement=The passed element {0} does not contain a ''close sequence'' part.\n noMessageNumberPartInElement=The passed sequnce element {0} does not contain a ''message number'' part.\n noCloseSeqResponsePartInElement=The passed element {0} does not contain a ''close sequence response'' part."
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/1b95351cc3b3d410f59f79b18529ae287ae0e38a",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/d8100cd7dd2c645fc0868e5d4f7b2edcc4aaf000",
        "message": "Fix for build break in CreateSequenceRefusedInboundFaultTest. This was caused by a NPE in AddressingInFaultHandler line 92 - 'faultLocalName = code.getTextAsQName().getLocalPart();' \n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@564315 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_16",
        "file": [
            {
                "sha": "5025996497b4124d17ebb24262006dcd117fefad",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/util/SOAPFaultEnvelopeCreator.java",
                "status": "modified",
                "additions": 6,
                "deletions": 1,
                "changes": 7,
                "blob_url": "https://github.com/apache/sandesha/blob/1b95351cc3b3d410f59f79b18529ae287ae0e38a/modules/core/src/main/java/org/apache/sandesha2/util/SOAPFaultEnvelopeCreator.java",
                "raw_url": "https://github.com/apache/sandesha/raw/1b95351cc3b3d410f59f79b18529ae287ae0e38a/modules/core/src/main/java/org/apache/sandesha2/util/SOAPFaultEnvelopeCreator.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/util/SOAPFaultEnvelopeCreator.java?ref=1b95351cc3b3d410f59f79b18529ae287ae0e38a",
                "patch": "@@ -151,7 +151,12 @@ private static void doSOAP11Encoding(MessageContext faultMsgContext,\n \n \t\tSOAPFault fault = faultMsgEnvelope.getBody().getFault();\n \n-\t\tif (data.getExceptionString() != null)\n+        SOAPFaultCode code = fault.getCode();\n+        if (data.getCode()!=null) {\n+            code.setText(data.getCode());\n+        }\n+\n+        if (data.getExceptionString() != null)\n \t\t\tfault.getDetail().setText(data.getExceptionString());\n \t\t\n \t\t//SequenceFault header is added only for SOAP 1.1"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/bdd0c5021317cf59ef1a63307cf233a5e54db97a",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/62b7e97f1fd141b23c6bd227e97c8f19ec957ae7",
        "message": "Fixed: NPE is thrown when tries to serialize the policy from a partially built SandeshaPolicyBean.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@558683 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_17",
        "file": [
            {
                "sha": "0f9205e5a66f41979b6f347446794d42ddbdf359",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/policy/SandeshaPolicyBean.java",
                "status": "modified",
                "additions": 8,
                "deletions": 1,
                "changes": 9,
                "blob_url": "https://github.com/apache/sandesha/blob/bdd0c5021317cf59ef1a63307cf233a5e54db97a/modules/core/src/main/java/org/apache/sandesha2/policy/SandeshaPolicyBean.java",
                "raw_url": "https://github.com/apache/sandesha/raw/bdd0c5021317cf59ef1a63307cf233a5e54db97a/modules/core/src/main/java/org/apache/sandesha2/policy/SandeshaPolicyBean.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/policy/SandeshaPolicyBean.java?ref=bdd0c5021317cf59ef1a63307cf233a5e54db97a",
                "patch": "@@ -292,20 +292,27 @@ public void serialize(XMLStreamWriter writer) throws XMLStreamException {\n \t\t\twriter.writeCharacters(Long.toString(getInactivityTimeoutInterval()));\r\n \t\t\twriter.writeEndElement();\r\n \t\t\t\r\n+            \r\n+            // FIXME : Assign default values if inactivityTimeoutMeasure is set to null\r\n+            if (inactivityTimeoutMeasure != null && inactivityTimeoutMeasure.trim().length() > 0) {\r\n \t\t\t// <wsrm:InactivityTimeoutMeasure />\r\n \t\t\twriter.writeStartElement(prefix, Sandesha2Constants.Assertions.Q_ELEM_INACTIVITY_TIMEOUT_MEASURES.getLocalPart(), namespaceURI);\r\n \t\t\twriter.writeCharacters(inactivityTimeoutMeasure);\r\n \t\t\twriter.writeEndElement();\r\n+            }\r\n \r\n-\t\t\t// <wsrm:SequenceRemovalTimeout />\r\n+            // <wsrm:SequenceRemovalTimeout />\r\n \t\t\twriter.writeStartElement(prefix, Sandesha2Constants.Assertions.Q_ELEM_SEQUENCE_REMOVAL_TIMEOUT.getLocalPart(), namespaceURI);\r\n \t\t\twriter.writeCharacters(Long.toString(getSequenceRemovalTimeoutInterval()));\r\n \t\t\twriter.writeEndElement();\r\n \t\t\t\r\n \t\t\t// <wsrm:SequenceRemovalTimeoutMeasure />\r\n+            // FIXME : Assign default values if sequenceRemovalTimeoutMeasure is set to null\r\n+            if (sequenceRemovalTimeoutMeasure != null && sequenceRemovalTimeoutMeasure.trim().length() > 0) {\r\n \t\t\twriter.writeStartElement(prefix, Sandesha2Constants.Assertions.Q_ELEM_SEQUENCE_REMOVAL_TIMEOUT_MEASURES.getLocalPart(), namespaceURI);\r\n \t\t\twriter.writeCharacters(sequenceRemovalTimeoutMeasure);\r\n \t\t\twriter.writeEndElement();\r\n+            }\r\n \r\n \t\t\t// <wsrm:InvokeInOrder />\r\n \t\t\twriter.writeStartElement(prefix, Sandesha2Constants.Assertions.Q_ELEM_INVOKE_INORDER.getLocalPart(), namespaceURI);\r"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/bc08c684959bda940d1c99bfb2764d4ec4fde83e",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/76ed89b15a679b76768cf943f8483a78367883e0",
        "message": "Fix an NPE when the internal sequence id is not known\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@552844 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_18",
        "file": [
            {
                "sha": "eb4bcb18db5ed8ef3c35ae020c79cfa683cee777",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/workers/SenderWorker.java",
                "status": "modified",
                "additions": 19,
                "deletions": 17,
                "changes": 36,
                "blob_url": "https://github.com/apache/sandesha/blob/bc08c684959bda940d1c99bfb2764d4ec4fde83e/modules/core/src/main/java/org/apache/sandesha2/workers/SenderWorker.java",
                "raw_url": "https://github.com/apache/sandesha/raw/bc08c684959bda940d1c99bfb2764d4ec4fde83e/modules/core/src/main/java/org/apache/sandesha2/workers/SenderWorker.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/workers/SenderWorker.java?ref=bc08c684959bda940d1c99bfb2764d4ec4fde83e",
                "patch": "@@ -267,29 +267,31 @@ public void run () {\n \t\t\t\t\n \t\t\t\t// Store the Exception as a sequence property to enable the client to lookup the last \n \t\t\t\t// exception time and timestamp.\n-\t\t\t\t\n \t\t\t\ttry\n \t\t\t\t{\n-\t\t\t\t\t// Create a new Transaction\n-\t\t\t\t\ttransaction = storageManager.getTransaction();\n-\t\t\t\t\t\n \t\t\t\t\t// Get the internal sequence id from the context\n \t\t\t\t\tString internalSequenceId = (String)rmMsgCtx.getProperty(Sandesha2Constants.MessageContextProperties.INTERNAL_SEQUENCE_ID);\n+\t\t\t\t\tif(internalSequenceId == null) internalSequenceId = senderBean.getInternalSequenceID();\n \t\t\t\t\t\n-\t\t\t\t\tRMSBean bean = SandeshaUtil.getRMSBeanFromInternalSequenceId(storageManager, internalSequenceId);\n+\t\t\t\t\tif(internalSequenceId != null) {\n+\t\t\t\t\t\t// Create a new Transaction\n+\t\t\t\t\t\ttransaction = storageManager.getTransaction();\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tRMSBean bean = SandeshaUtil.getRMSBeanFromInternalSequenceId(storageManager, internalSequenceId);\n \t\t\t\t\t\n-\t\t\t\t\tif (bean != null) {\t\t\t\t\t\t\n-\t\t\t\t\t\tbean.setLastSendError(e);\n-\t\t\t\t\t\tbean.setLastSendErrorTimestamp(System.currentTimeMillis());\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\t// Update the RMSBean\n-\t\t\t\t\tstorageManager.getRMSBeanMgr().update(bean);\n-\t\t\t\t\t\n-\t\t\t\t\t// Commit the properties\n-\t\t\t\t\tif(transaction != null) {\n-\t\t\t\t\t\ttransaction.commit();\n-\t\t\t\t\t\ttransaction = null;\n+\t\t\t\t\t\tif (bean != null) {\t\t\t\t\t\t\n+\t\t\t\t\t\t\tbean.setLastSendError(e);\n+\t\t\t\t\t\t\tbean.setLastSendErrorTimestamp(System.currentTimeMillis());\n+\n+\t\t\t\t\t\t\t// Update the RMSBean\n+\t\t\t\t\t\t\tstorageManager.getRMSBeanMgr().update(bean);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t// Commit the properties\n+\t\t\t\t\t\tif(transaction != null) {\n+\t\t\t\t\t\t\ttransaction.commit();\n+\t\t\t\t\t\t\ttransaction = null;\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tcatch (Exception e1)"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/dd569525d084bb0741ff84d5b09b0bac5a7095f9",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/7137593d0fb8e29a9df6b7ba0123429219a5601d",
        "message": "Resolve NPE when looking for SenderBean and not finding it\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@506543 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_19",
        "file": [
            {
                "sha": "1f029e45af626f34524add2a00d03272231fce5d",
                "filename": "src/org/apache/sandesha2/workers/SenderWorker.java",
                "status": "modified",
                "additions": 5,
                "deletions": 4,
                "changes": 9,
                "blob_url": "https://github.com/apache/sandesha/blob/dd569525d084bb0741ff84d5b09b0bac5a7095f9/src/org/apache/sandesha2/workers/SenderWorker.java",
                "raw_url": "https://github.com/apache/sandesha/raw/dd569525d084bb0741ff84d5b09b0bac5a7095f9/src/org/apache/sandesha2/workers/SenderWorker.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/workers/SenderWorker.java?ref=dd569525d084bb0741ff84d5b09b0bac5a7095f9",
                "patch": "@@ -172,10 +172,11 @@ public void run () {\n \n \t\t\t// Although not actually sent yet, update the send count to indicate an attempt\n \t\t\tif (senderBean.isReSend()) {\n-\t\t\t\tSenderBean bean2 = senderBeanMgr\n-\t\t\t\t.retrieve(senderBean.getMessageID());\n-\t\t\t\tbean2.setSentCount(senderBean.getSentCount());\n-\t\t\t\tsenderBeanMgr.update(bean2);\n+\t\t\t\tSenderBean bean2 = senderBeanMgr.retrieve(senderBean.getMessageID());\n+\t\t\t\tif (bean2 != null) {\n+\t\t\t\t\tbean2.setSentCount(senderBean.getSentCount());\n+\t\t\t\t\tsenderBeanMgr.update(bean2);\n+\t\t\t\t}\n \t\t\t}\n \t\t\t\n \t\t\t// have to commit the transaction before sending. This may"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/bef7fc91df099ad9ab1a36e2ab152d0f32087fcb",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/90151f618a1c5a2943d5b57b748ca0389fba24ca",
        "message": "Avoid NPE from null body namespace, and remove unnecessary iterator\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@492579 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_20",
        "file": [
            {
                "sha": "76a99965813196d2a7459328656def6ba518cb42",
                "filename": "src/org/apache/sandesha2/wsrm/RMElements.java",
                "status": "modified",
                "additions": 10,
                "deletions": 7,
                "changes": 17,
                "blob_url": "https://github.com/apache/sandesha/blob/bef7fc91df099ad9ab1a36e2ab152d0f32087fcb/src/org/apache/sandesha2/wsrm/RMElements.java",
                "raw_url": "https://github.com/apache/sandesha/raw/bef7fc91df099ad9ab1a36e2ab152d0f32087fcb/src/org/apache/sandesha2/wsrm/RMElements.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/wsrm/RMElements.java?ref=bef7fc91df099ad9ab1a36e2ab152d0f32087fcb",
                "patch": "@@ -24,6 +24,7 @@\n \r\n import org.apache.axiom.om.OMElement;\r\n import org.apache.axiom.om.OMException;\r\n+import org.apache.axiom.om.OMNamespace;\r\n import org.apache.axiom.soap.SOAP11Constants;\r\n import org.apache.axiom.soap.SOAPBody;\r\n import org.apache.axiom.soap.SOAPEnvelope;\r\n@@ -344,13 +345,15 @@ private String getRMNamespaceValue (SOAPEnvelope envelope, String action) {\n \t\t// As a final resort check the body namespace\r\n \t\tSOAPBody body = envelope.getBody();\r\n \t\tif(body != null) {\r\n-\t\t\tIterator elements = body.getChildElements();\r\n-\t\t\tif(elements.hasNext()) {\r\n-\t\t\t\tOMElement firstBodyElement = (OMElement) elements.next();\r\n-\t\t\t\tString namespace = firstBodyElement.getNamespace().getNamespaceURI();\r\n-\t\t\t\tif(namespace.equals(Sandesha2Constants.SPEC_2005_02.NS_URI) ||\r\n-\t\t\t\t   namespace.equals(Sandesha2Constants.SPEC_2006_08.NS_URI)  ) {\r\n-\t\t\t\t\treturn namespace;\r\n+\t\t\tOMElement element = body.getFirstElement();\r\n+\t\t\tif(element != null) {\r\n+\t\t\t\tOMNamespace namespace = element.getNamespace();\r\n+\t\t\t\tif(namespace != null) {\r\n+\t\t\t\t\tString uri = namespace.getNamespaceURI();\r\n+\t\t\t\t\tif(Sandesha2Constants.SPEC_2005_02.NS_URI.equals(uri) ||\r\n+\t\t\t\t\t   Sandesha2Constants.SPEC_2006_08.NS_URI.equals(uri)  ) {\r\n+\t\t\t\t\t\treturn uri;\r\n+\t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/7872964c1207c7102ad790f4598ecff879d28c13",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/1c7f69d8677a81d4d3e7b61873bf99e44002ab60",
        "message": "Renamed the sequenceId property of the sequencePropertyBean manager to sequencePropertyKey.\nThis reflects its real functionality (since we can use sequenceId/internalSequenceId depending \non the RM endpoint).\n\nApplied the patch from Thomas solving a possible NPE.\n\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@442863 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_21",
        "file": [
            {
                "sha": "8a73eb3c19dc2399fafa06ed6810b6bea3f9dd40",
                "filename": "src/org/apache/sandesha2/RMMsgContext.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/RMMsgContext.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/RMMsgContext.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/RMMsgContext.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -138,6 +138,7 @@ public void setMessagePart(int partId, IOMRMPart part) {\n \t\t\t\tArrayList sequenceAckList = (ArrayList) rmMessageParts.get(new Integer (partId));\r\n \t\t\t\tif (sequenceAckList==null) {\r\n \t\t\t\t\tsequenceAckList = new ArrayList ();\r\n+\t\t\t\t\tsequenceAckList.add(part);\r\n \t\t\t\t\trmMessageParts.put(new Integer (partId),sequenceAckList);\r\n \t\t\t\t}\r\n \t\t\t} else {\r"
            },
            {
                "sha": "15d547d7774bb7c9552ead73e8bf0e00e293d355",
                "filename": "src/org/apache/sandesha2/client/SandeshaClient.java",
                "status": "modified",
                "additions": 6,
                "deletions": 6,
                "changes": 12,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/client/SandeshaClient.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/client/SandeshaClient.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/client/SandeshaClient.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -262,7 +262,7 @@ public static SandeshaReport getSandeshaReport(ConfigurationContext configuratio\n \t\t\tIterator iterator = collection.iterator();\r\n \t\t\twhile (iterator.hasNext()) {\r\n \t\t\t\tSequencePropertyBean bean = (SequencePropertyBean) iterator.next();\r\n-\t\t\t\tString sequenceID = bean.getSequenceID();\r\n+\t\t\t\tString sequenceID = bean.getSequencePropertyKey();\r\n \t\t\t\tsandeshaReport.addToOutgoingSequenceList(sequenceID);\r\n \t\t\t\tsandeshaReport.addToOutgoingInternalSequenceMap(sequenceID, bean.getValue());\r\n \r\n@@ -280,7 +280,7 @@ public static SandeshaReport getSandeshaReport(ConfigurationContext configuratio\n \t\t\tIterator iter = serverCompletedMsgsBeans.iterator();\r\n \t\t\twhile (iter.hasNext()) {\r\n \t\t\t\tSequencePropertyBean serverCompletedMsgsBean = (SequencePropertyBean) iter.next();\r\n-\t\t\t\tString sequenceID = serverCompletedMsgsBean.getSequenceID();\r\n+\t\t\t\tString sequenceID = serverCompletedMsgsBean.getSequencePropertyKey();\r\n \t\t\t\tsandeshaReport.addToIncomingSequenceList(sequenceID);\r\n \r\n \t\t\t\tSequenceReport sequenceReport = getIncomingSequenceReport(sequenceID, configurationContext);\r\n@@ -802,7 +802,7 @@ private static boolean isSequenceTerminated(String internalSequenceID, SequenceP\n \t\t\treturn false;\r\n \t\t}\r\n \r\n-\t\tString outSequenceID = internalSequenceBean.getSequenceID();\r\n+\t\tString outSequenceID = internalSequenceBean.getSequencePropertyKey();\r\n \r\n \t\tSequencePropertyBean sequenceTerminatedBean = seqPropMgr.retrieve(outSequenceID,\r\n \t\t\t\tSandesha2Constants.SequenceProperties.SEQUENCE_TERMINATED);\r\n@@ -828,7 +828,7 @@ private static boolean isSequenceTimedout(String internalSequenceID, SequencePro\n \t\t\treturn false;\r\n \t\t}\r\n \r\n-\t\tString outSequenceID = internalSequenceBean.getSequenceID();\r\n+\t\tString outSequenceID = internalSequenceBean.getSequencePropertyKey();\r\n \t\tSequencePropertyBean sequenceTerminatedBean = seqPropMgr.retrieve(outSequenceID,\r\n \t\t\t\tSandesha2Constants.SequenceProperties.SEQUENCE_TIMED_OUT);\r\n \t\tif (sequenceTerminatedBean != null && Sandesha2Constants.VALUE_TRUE.equals(sequenceTerminatedBean.getValue())) {\r\n@@ -855,7 +855,7 @@ private static void fillTerminatedOutgoingSequenceInfo(SequenceReport report, St\n \r\n \t\treport.setSequenceStatus(SequenceReport.SEQUENCE_STATUS_TERMINATED);\r\n \r\n-\t\tString outSequenceID = internalSequenceBean.getSequenceID();\r\n+\t\tString outSequenceID = internalSequenceBean.getSequencePropertyKey();\r\n \t\tfillOutgoingSequenceInfo(report, outSequenceID, seqPropMgr);\r\n \t}\r\n \r\n@@ -875,7 +875,7 @@ private static void fillTimedoutOutgoingSequenceInfo(SequenceReport report, Stri\n \t\t}\r\n \r\n \t\treport.setSequenceStatus(SequenceReport.SEQUENCE_STATUS_TIMED_OUT);\r\n-\t\tString outSequenceID = internalSequenceBean.getSequenceID();\r\n+\t\tString outSequenceID = internalSequenceBean.getSequencePropertyKey();\r\n \t\tfillOutgoingSequenceInfo(report, outSequenceID, seqPropMgr);\r\n \t}\r\n \r"
            },
            {
                "sha": "51c30ac9c43c6e287bce151560ca8eb764dd098b",
                "filename": "src/org/apache/sandesha2/handlers/SandeshaGlobalInHandler.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/handlers/SandeshaGlobalInHandler.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/handlers/SandeshaGlobalInHandler.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/handlers/SandeshaGlobalInHandler.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -236,7 +236,7 @@ private boolean dropIfDuplicate(RMMsgContext rmMsgContext, StorageManager storag\n \r\n \t\t\tlong msgNo = sequence.getMessageNumber().getMessageNumber();\r\n \t\t\t\r\n-\t\t\tString propertyKey = SandeshaUtil.getPropertyKey(rmMsgContext);\r\n+\t\t\tString propertyKey = SandeshaUtil.getSequencePropertyKey(rmMsgContext);\r\n \r\n \t\t\tif (propertyKey != null && msgNo > 0) {\r\n \t\t\t\tSequencePropertyBeanMgr seqPropMgr = storageManager.getSequencePropertyBeanMgr();\r"
            },
            {
                "sha": "8e7d57903c6a29325b3dd4a45026b07726d7d652",
                "filename": "src/org/apache/sandesha2/msgprocessors/AcknowledgementProcessor.java",
                "status": "modified",
                "additions": 14,
                "deletions": 21,
                "changes": 35,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/msgprocessors/AcknowledgementProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/msgprocessors/AcknowledgementProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/msgprocessors/AcknowledgementProcessor.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -112,6 +112,13 @@ private void processAckHeader(MessageContext msgCtx, SequenceAcknowledgement seq\n \t\t\tlog.debug(message);\r\n \t\t\tthrow new SandeshaException(message);\r\n \t\t}\r\n+\t\t\r\n+\t\tString internalSequenceId = SandeshaUtil.getSequenceProperty(outSequenceId,\r\n+\t\t\t\tSandesha2Constants.SequenceProperties.INTERNAL_SEQUENCE_ID, storageManager);\r\n+\r\n+\t\t//here we cannot get the property key using the usual SandeshaUtil.getSequencePropertyKey function,\r\n+\t\t//because this can be a applicationMessage, which piggybacks the acknowledgement.\r\n+\t\tString sequencePropertyKey = internalSequenceId;\r\n \r\n \t\t// Check that the sender of this Ack holds the correct token\r\n \t\tSequencePropertyBean tokenBean = seqPropMgr.retrieve(outSequenceId, Sandesha2Constants.SequenceProperties.SECURITY_TOKEN);\r\n@@ -150,22 +157,8 @@ private void processAckHeader(MessageContext msgCtx, SequenceAcknowledgement seq\n \t\t\treturn;\r\n \t\t}\r\n \r\n-\t\tString internalSequenceID = SandeshaUtil.getSequenceProperty(outSequenceId,\r\n-\t\t\t\tSandesha2Constants.SequenceProperties.INTERNAL_SEQUENCE_ID, storageManager);\r\n-\r\n \t\t// updating the last activated time of the sequence.\r\n-\t\tSequenceManager.updateLastActivatedTime(internalSequenceID, storageManager);\r\n-\r\n-\t\tSequencePropertyBean internalSequenceBean = seqPropMgr.retrieve(outSequenceId,\r\n-\t\t\t\tSandesha2Constants.SequenceProperties.INTERNAL_SEQUENCE_ID);\r\n-\r\n-\t\tif (internalSequenceBean == null || internalSequenceBean.getValue() == null) {\r\n-\t\t\tString message = SandeshaMessageHelper.getMessage(SandeshaMessageKeys.tempSeqIdNotSet);\r\n-\t\t\tlog.debug(message);\r\n-\t\t\tthrow new SandeshaException(message);\r\n-\t\t}\r\n-\r\n-\t\tString internalSequenceId = (String) internalSequenceBean.getValue();\r\n+\t\tSequenceManager.updateLastActivatedTime(sequencePropertyKey, storageManager);\r\n \r\n \t\tSenderBean input = new SenderBean();\r\n \t\tinput.setSend(true);\r\n@@ -202,14 +195,14 @@ private void processAckHeader(MessageContext msgCtx, SequenceAcknowledgement seq\n \t\t// setting acked message date.\r\n \t\t// TODO add details specific to each message.\r\n \t\tlong noOfMsgsAcked = getNoOfMessagesAcked(sequenceAck.getAcknowledgementRanges().iterator());\r\n-\t\tSequencePropertyBean noOfMsgsAckedBean = seqPropMgr.retrieve(outSequenceId,\r\n+\t\tSequencePropertyBean noOfMsgsAckedBean = seqPropMgr.retrieve(sequencePropertyKey,\r\n \t\t\t\tSandesha2Constants.SequenceProperties.NO_OF_OUTGOING_MSGS_ACKED);\r\n \t\tboolean added = false;\r\n \r\n \t\tif (noOfMsgsAckedBean == null) {\r\n \t\t\tadded = true;\r\n \t\t\tnoOfMsgsAckedBean = new SequencePropertyBean();\r\n-\t\t\tnoOfMsgsAckedBean.setSequenceID(outSequenceId);\r\n+\t\t\tnoOfMsgsAckedBean.setSequencePropertyKey(sequencePropertyKey);\r\n \t\t\tnoOfMsgsAckedBean.setName(Sandesha2Constants.SequenceProperties.NO_OF_OUTGOING_MSGS_ACKED);\r\n \t\t}\r\n \r\n@@ -222,11 +215,11 @@ private void processAckHeader(MessageContext msgCtx, SequenceAcknowledgement seq\n \r\n \t\t// setting the completed_messages list. This gives all the messages of\r\n \t\t// the sequence that were acked.\r\n-\t\tSequencePropertyBean allCompletedMsgsBean = seqPropMgr.retrieve(internalSequenceId,\r\n+\t\tSequencePropertyBean allCompletedMsgsBean = seqPropMgr.retrieve(sequencePropertyKey,\r\n \t\t\t\tSandesha2Constants.SequenceProperties.CLIENT_COMPLETED_MESSAGES);\r\n \t\tif (allCompletedMsgsBean == null) {\r\n \t\t\tallCompletedMsgsBean = new SequencePropertyBean();\r\n-\t\t\tallCompletedMsgsBean.setSequenceID(internalSequenceId);\r\n+\t\t\tallCompletedMsgsBean.setSequencePropertyKey(sequencePropertyKey);\r\n \t\t\tallCompletedMsgsBean.setName(Sandesha2Constants.SequenceProperties.CLIENT_COMPLETED_MESSAGES);\r\n \r\n \t\t\tseqPropMgr.insert(allCompletedMsgsBean);\r\n@@ -237,7 +230,7 @@ private void processAckHeader(MessageContext msgCtx, SequenceAcknowledgement seq\n \r\n \t\tseqPropMgr.update(allCompletedMsgsBean);\r\n \r\n-\t\tString lastOutMsgNoStr = SandeshaUtil.getSequenceProperty(internalSequenceId,\r\n+\t\tString lastOutMsgNoStr = SandeshaUtil.getSequenceProperty(sequencePropertyKey,\r\n \t\t\t\tSandesha2Constants.SequenceProperties.LAST_OUT_MESSAGE_NO, storageManager);\r\n \t\tif (lastOutMsgNoStr != null) {\r\n \t\t\tlong highestOutMsgNo = 0;\r\n@@ -250,7 +243,7 @@ private void processAckHeader(MessageContext msgCtx, SequenceAcknowledgement seq\n \t\t\t\t\t\t.getAcknowledgementRanges().iterator(), highestOutMsgNo);\r\n \r\n \t\t\t\tif (complete)\r\n-\t\t\t\t\tTerminateManager.addTerminateSequenceMessage(rmMsgCtx, outSequenceId, internalSequenceId,\r\n+\t\t\t\t\tTerminateManager.addTerminateSequenceMessage(rmMsgCtx, outSequenceId, sequencePropertyKey,\r\n \t\t\t\t\t\t\tstorageManager);\r\n \t\t\t}\r\n \t\t}\r"
            },
            {
                "sha": "aa76c17762be5c611eb589811daaf2d8ab69727b",
                "filename": "src/org/apache/sandesha2/msgprocessors/ApplicationMsgProcessor.java",
                "status": "modified",
                "additions": 14,
                "deletions": 12,
                "changes": 26,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/msgprocessors/ApplicationMsgProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/msgprocessors/ApplicationMsgProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/msgprocessors/ApplicationMsgProcessor.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -116,8 +116,10 @@ public void processInMessage(RMMsgContext rmMsgCtx) throws SandeshaException {\n \t\tSequence sequence = (Sequence) rmMsgCtx.getMessagePart(Sandesha2Constants.MessageParts.SEQUENCE);\r\n \t\tString sequenceId = sequence.getIdentifier().getIdentifier();\r\n \t\t\r\n+\t\tString propertyKey = SandeshaUtil.getSequencePropertyKey(rmMsgCtx);\r\n+\t\t\r\n \t\t// Check that both the Sequence header and message body have been secured properly\r\n-\t\tSequencePropertyBean tokenBean = seqPropMgr.retrieve(sequenceId, Sandesha2Constants.SequenceProperties.SECURITY_TOKEN);\r\n+\t\tSequencePropertyBean tokenBean = seqPropMgr.retrieve(propertyKey, Sandesha2Constants.SequenceProperties.SECURITY_TOKEN);\r\n \t\tif(tokenBean != null) {\r\n \t\t\tSecurityManager secManager = SandeshaUtil.getSecurityManager(msgCtx.getConfigurationContext());\r\n \t\t\tOMElement body = msgCtx.getEnvelope().getBody();\r\n@@ -198,9 +200,9 @@ public void processInMessage(RMMsgContext rmMsgCtx) throws SandeshaException {\n \t\t}\r\n \r\n \t\t// updating the last activated time of the sequence.\r\n-\t\tSequenceManager.updateLastActivatedTime(sequenceId, storageManager);\r\n+\t\tSequenceManager.updateLastActivatedTime(propertyKey, storageManager);\r\n \r\n-\t\tSequencePropertyBean msgsBean = seqPropMgr.retrieve(sequenceId,\r\n+\t\tSequencePropertyBean msgsBean = seqPropMgr.retrieve(propertyKey,\r\n \t\t\t\tSandesha2Constants.SequenceProperties.SERVER_COMPLETED_MESSAGES);\r\n \r\n \t\tlong msgNo = sequence.getMessageNumber().getMessageNumber();\r\n@@ -215,9 +217,9 @@ public void processInMessage(RMMsgContext rmMsgCtx) throws SandeshaException {\n \r\n \t\t// updating the Highest_In_Msg_No property which gives the highest\r\n \t\t// message number retrieved from this sequence.\r\n-\t\tString highetsInMsgNoStr = SandeshaUtil.getSequenceProperty(sequenceId,\r\n+\t\tString highetsInMsgNoStr = SandeshaUtil.getSequenceProperty(propertyKey,\r\n \t\t\t\tSandesha2Constants.SequenceProperties.HIGHEST_IN_MSG_NUMBER, storageManager);\r\n-\t\tString highetsInMsgKey = SandeshaUtil.getSequenceProperty(sequenceId,\r\n+\t\tString highetsInMsgKey = SandeshaUtil.getSequenceProperty(propertyKey,\r\n \t\t\t\tSandesha2Constants.SequenceProperties.HIGHEST_IN_MSG_KEY, storageManager);\r\n \t\tif (highetsInMsgKey == null)\r\n \t\t\thighetsInMsgKey = SandeshaUtil.getUUID();\r\n@@ -231,9 +233,9 @@ public void processInMessage(RMMsgContext rmMsgCtx) throws SandeshaException {\n \t\t\thighestInMsgNo = msgNo;\r\n \r\n \t\t\tString str = new Long(msgNo).toString();\r\n-\t\t\tSequencePropertyBean highestMsgNoBean = new SequencePropertyBean(sequenceId,\r\n+\t\t\tSequencePropertyBean highestMsgNoBean = new SequencePropertyBean(propertyKey,\r\n \t\t\t\t\tSandesha2Constants.SequenceProperties.HIGHEST_IN_MSG_NUMBER, str);\r\n-\t\t\tSequencePropertyBean highestMsgKeyBean = new SequencePropertyBean(sequenceId,\r\n+\t\t\tSequencePropertyBean highestMsgKeyBean = new SequencePropertyBean(propertyKey,\r\n \t\t\t\t\tSandesha2Constants.SequenceProperties.HIGHEST_IN_MSG_KEY, highetsInMsgKey);\r\n \r\n \t\t\t// storing the new message as the highest in message.\r\n@@ -254,7 +256,7 @@ public void processInMessage(RMMsgContext rmMsgCtx) throws SandeshaException {\n \t\t\tmessagesStr = (String) msgsBean.getValue();\r\n \t\telse {\r\n \t\t\tmsgsBean = new SequencePropertyBean();\r\n-\t\t\tmsgsBean.setSequenceID(sequenceId);\r\n+\t\t\tmsgsBean.setSequencePropertyKey(propertyKey);\r\n \t\t\tmsgsBean.setName(Sandesha2Constants.SequenceProperties.SERVER_COMPLETED_MESSAGES);\r\n \t\t\tmsgsBean.setValue(messagesStr);\r\n \t\t}\r\n@@ -303,7 +305,7 @@ public void processInMessage(RMMsgContext rmMsgCtx) throws SandeshaException {\n \t\t\tif (incomingSequenceListBean == null) {\r\n \t\t\t\tArrayList incomingSequenceList = new ArrayList();\r\n \t\t\t\tincomingSequenceListBean = new SequencePropertyBean();\r\n-\t\t\t\tincomingSequenceListBean.setSequenceID(Sandesha2Constants.SequenceProperties.ALL_SEQUENCES);\r\n+\t\t\t\tincomingSequenceListBean.setSequencePropertyKey(Sandesha2Constants.SequenceProperties.ALL_SEQUENCES);\r\n \t\t\t\tincomingSequenceListBean.setName(Sandesha2Constants.SequenceProperties.INCOMING_SEQUENCE_LIST);\r\n \t\t\t\tincomingSequenceListBean.setValue(incomingSequenceList.toString());\r\n \r\n@@ -504,7 +506,7 @@ public void processOutMessage(RMMsgContext rmMsgCtx) throws SandeshaException {\n \t\tif (internalSequenceId!=null)\r\n \t\t\trmMsgCtx.setProperty(Sandesha2Constants.MessageContextProperties.INTERNAL_SEQUENCE_ID,internalSequenceId);\r\n \r\n-\t\tString propertyKey = SandeshaUtil.getPropertyKey(rmMsgCtx);\r\n+\t\tString propertyKey = SandeshaUtil.getSequencePropertyKey(rmMsgCtx);\r\n \r\n \t\t/*\r\n \t\t * checking weather the user has given the messageNumber (most of the\r\n@@ -808,7 +810,7 @@ private void addCreateSequenceMessage(RMMsgContext applicationRMMsg, String inte\n \r\n \t\t\tSequencePropertyBean offeredSequenceBean = new SequencePropertyBean();\r\n \t\t\tofferedSequenceBean.setName(Sandesha2Constants.SequenceProperties.OFFERED_SEQUENCE);\r\n-\t\t\tofferedSequenceBean.setSequenceID(internalSequenceId);\r\n+\t\t\tofferedSequenceBean.setSequencePropertyKey(internalSequenceId);\r\n \t\t\tofferedSequenceBean.setValue(offeredSequenceId);\r\n \r\n \t\t\tseqPropMgr.insert(offeredSequenceBean);\r\n@@ -1134,7 +1136,7 @@ private void setNextMsgNo(ConfigurationContext context, String internalSequenceI\n \t\tif (nextMsgNoBean == null) {\r\n \t\t\tupdate = false;\r\n \t\t\tnextMsgNoBean = new SequencePropertyBean();\r\n-\t\t\tnextMsgNoBean.setSequenceID(internalSequenceId);\r\n+\t\t\tnextMsgNoBean.setSequencePropertyKey(internalSequenceId);\r\n \t\t\tnextMsgNoBean.setName(Sandesha2Constants.SequenceProperties.NEXT_MESSAGE_NUMBER);\r\n \t\t}\r\n \r"
            },
            {
                "sha": "77342a0665a39bc4e65feed960769c60a085cc30",
                "filename": "src/org/apache/sandesha2/msgprocessors/CloseSequenceProcessor.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/msgprocessors/CloseSequenceProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/msgprocessors/CloseSequenceProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/msgprocessors/CloseSequenceProcessor.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -97,7 +97,7 @@ public void processInMessage(RMMsgContext rmMsgCtx) throws SandeshaException {\n \t\t}\r\n \r\n \t\tSequencePropertyBean sequenceClosedBean = new SequencePropertyBean();\r\n-\t\tsequenceClosedBean.setSequenceID(sequenceID);\r\n+\t\tsequenceClosedBean.setSequencePropertyKey(sequenceID);\r\n \t\tsequenceClosedBean.setName(Sandesha2Constants.SequenceProperties.SEQUENCE_CLOSED);\r\n \t\tsequenceClosedBean.setValue(Sandesha2Constants.VALUE_TRUE);\r\n \r"
            },
            {
                "sha": "828b4b87bbf2329d8efc8e6cfce0d5dffdea2c17",
                "filename": "src/org/apache/sandesha2/msgprocessors/CreateSeqMsgProcessor.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/msgprocessors/CreateSeqMsgProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/msgprocessors/CreateSeqMsgProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/msgprocessors/CreateSeqMsgProcessor.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -183,13 +183,13 @@ public void processInMessage(RMMsgContext createSeqRMMsg) throws SandeshaExcepti\n \t\t\t\t\tSequencePropertyBean outSequenceBean = new SequencePropertyBean();\r\n \t\t\t\t\toutSequenceBean.setName(Sandesha2Constants.SequenceProperties.OUT_SEQUENCE_ID);\r\n \t\t\t\t\toutSequenceBean.setValue(offeredSequenceID);\r\n-\t\t\t\t\toutSequenceBean.setSequenceID(outgoingSideInternalSequenceID);\r\n+\t\t\t\t\toutSequenceBean.setSequencePropertyKey(outgoingSideInternalSequenceID);\r\n \t\t\t\t\tseqPropMgr.insert(outSequenceBean);\r\n \r\n \t\t\t\t\t// setting the internal_sequence_id\r\n \t\t\t\t\tSequencePropertyBean internalSequenceBean = new SequencePropertyBean();\r\n \t\t\t\t\tinternalSequenceBean.setName(Sandesha2Constants.SequenceProperties.INTERNAL_SEQUENCE_ID);\r\n-\t\t\t\t\tinternalSequenceBean.setSequenceID(offeredSequenceID);\r\n+\t\t\t\t\tinternalSequenceBean.setSequencePropertyKey(offeredSequenceID);\r\n \t\t\t\t\tinternalSequenceBean.setValue(outgoingSideInternalSequenceID);\r\n \t\t\t\t\tseqPropMgr.insert(internalSequenceBean);\r\n \t\t\t\t} else {\r"
            },
            {
                "sha": "30f5412b5b13eedd92170af858083e6566e563b3",
                "filename": "src/org/apache/sandesha2/msgprocessors/CreateSeqResponseMsgProcessor.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/msgprocessors/CreateSeqResponseMsgProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/msgprocessors/CreateSeqResponseMsgProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/msgprocessors/CreateSeqResponseMsgProcessor.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -179,7 +179,7 @@ public void processInMessage(RMMsgContext createSeqResponseRMMsgCtx) throws Sand\n \t\t\tEndpointReference acksToEPR = accept.getAcksTo().getAddress().getEpr();\r\n \t\t\tSequencePropertyBean acksToBean = new SequencePropertyBean();\r\n \t\t\tacksToBean.setName(Sandesha2Constants.SequenceProperties.ACKS_TO_EPR);\r\n-\t\t\tacksToBean.setSequenceID(offeredSequenceId);\r\n+\t\t\tacksToBean.setSequencePropertyKey(offeredSequenceId);\r\n \t\t\tacksToBean.setValue(acksToEPR.getAddress());\r\n \r\n \t\t\tsequencePropMgr.insert(acksToBean);\r\n@@ -202,7 +202,7 @@ public void processInMessage(RMMsgContext createSeqResponseRMMsgCtx) throws Sand\n \t\t\tsequencePropMgr.insert(receivedMsgBean);\r\n \r\n \t\t\tSequencePropertyBean msgsBean = new SequencePropertyBean();\r\n-\t\t\tmsgsBean.setSequenceID(offeredSequenceId);\r\n+\t\t\tmsgsBean.setSequencePropertyKey(offeredSequenceId);\r\n \t\t\tmsgsBean.setName(Sandesha2Constants.SequenceProperties.CLIENT_COMPLETED_MESSAGES);\r\n \t\t\tmsgsBean.setValue(\"\");\r\n \t\t\tsequencePropMgr.insert(msgsBean);\r"
            },
            {
                "sha": "e7f96c4b57fc5e7ea966e8238bd058f1dfadd4cb",
                "filename": "src/org/apache/sandesha2/msgprocessors/TerminateSeqMsgProcessor.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/msgprocessors/TerminateSeqMsgProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/msgprocessors/TerminateSeqMsgProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/msgprocessors/TerminateSeqMsgProcessor.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -129,7 +129,7 @@ public void processInMessage(RMMsgContext terminateSeqRMMsg) throws SandeshaExce\n \r\n \r\n \t\tSequencePropertyBean terminateReceivedBean = new SequencePropertyBean();\r\n-\t\tterminateReceivedBean.setSequenceID(sequenceId);\r\n+\t\tterminateReceivedBean.setSequencePropertyKey(sequenceId);\r\n \t\tterminateReceivedBean.setName(Sandesha2Constants.SequenceProperties.TERMINATE_RECEIVED);\r\n \t\tterminateReceivedBean.setValue(\"true\");\r\n \r\n@@ -436,7 +436,7 @@ public void processOutMessage(RMMsgContext rmMsgCtx) throws SandeshaException {\n \r\n \t\tSequencePropertyBean terminateAdded = new SequencePropertyBean();\r\n \t\tterminateAdded.setName(Sandesha2Constants.SequenceProperties.TERMINATE_ADDED);\r\n-\t\tterminateAdded.setSequenceID(outSequenceID);\r\n+\t\tterminateAdded.setSequencePropertyKey(outSequenceID);\r\n \t\tterminateAdded.setValue(\"true\");\r\n \r\n \t\tseqPropMgr.insert(terminateAdded);\r"
            },
            {
                "sha": "e97dff5b6f27b3d67774085c299cf293fa2e7cf0",
                "filename": "src/org/apache/sandesha2/storage/beans/SequencePropertyBean.java",
                "status": "modified",
                "additions": 12,
                "deletions": 8,
                "changes": 20,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/storage/beans/SequencePropertyBean.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/storage/beans/SequencePropertyBean.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/storage/beans/SequencePropertyBean.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -24,10 +24,14 @@\n public class SequencePropertyBean extends RMBean {\r\n \r\n \t/**\r\n-\t * Comment for <code>sequenceID</code>\r\n-\t * Sequence ID of the sequence this property belong to.\r\n+\t * Comment for <code>sequencePropertyKey</code>\r\n+\t * The key used to store properties of this sequence.\r\n+\t * The value depends on the endpoint as given below.\r\n+\t * \r\n+\t * RMS (sending side) - internalSequenceId\r\n+\t * RMD - sequenceId\r\n \t */\r\n-\tprivate String sequenceID;\r\n+\tprivate String sequencePropertyKey;\r\n \r\n \t/**\r\n \t * Comment for <code>name</code>\r\n@@ -42,7 +46,7 @@\n \tprivate String value;\r\n \r\n \tpublic SequencePropertyBean(String seqID, String propertyName, String value) {\r\n-\t\tthis.sequenceID = seqID;\r\n+\t\tthis.sequencePropertyKey = seqID;\r\n \t\tthis.name = propertyName;\r\n \t\tthis.value = value;\r\n \t}\r\n@@ -59,12 +63,12 @@ public void setName(String name) {\n \t\tthis.name = name;\r\n \t}\r\n \r\n-\tpublic String getSequenceID() {\r\n-\t\treturn sequenceID;\r\n+\tpublic String getSequencePropertyKey() {\r\n+\t\treturn sequencePropertyKey;\r\n \t}\r\n \r\n-\tpublic void setSequenceID(String sequenceID) {\r\n-\t\tthis.sequenceID = sequenceID;\r\n+\tpublic void setSequencePropertyKey(String sequencePropertyKey) {\r\n+\t\tthis.sequencePropertyKey = sequencePropertyKey;\r\n \t}\r\n \r\n \tpublic String getValue() {\r"
            },
            {
                "sha": "56084b0b602fe3dbef5a1c51f2600e94774a5251",
                "filename": "src/org/apache/sandesha2/storage/inmemory/InMemorySequencePropertyBeanMgr.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/storage/inmemory/InMemorySequencePropertyBeanMgr.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/storage/inmemory/InMemorySequencePropertyBeanMgr.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/storage/inmemory/InMemorySequencePropertyBeanMgr.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -60,7 +60,7 @@ public synchronized SequencePropertyBean retrieve(String sequenceId, String name\n \t}\r\n \r\n \tpublic synchronized boolean insert(SequencePropertyBean bean) {\r\n-\t\ttable.put(bean.getSequenceID() + \":\" + bean.getName(), bean);\r\n+\t\ttable.put(bean.getSequencePropertyKey() + \":\" + bean.getName(), bean);\r\n \t\treturn true;\r\n \t}\r\n \r\n@@ -83,8 +83,8 @@ public synchronized Collection find(SequencePropertyBean bean) {\n \r\n \t\t\tboolean equal = true;\r\n \r\n-\t\t\tif (bean.getSequenceID() != null\r\n-\t\t\t\t\t&& !bean.getSequenceID().equals(temp.getSequenceID()))\r\n+\t\t\tif (bean.getSequencePropertyKey() != null\r\n+\t\t\t\t\t&& !bean.getSequencePropertyKey().equals(temp.getSequencePropertyKey()))\r\n \t\t\t\tequal = false;\r\n \r\n \t\t\tif (bean.getName() != null\r\n@@ -121,7 +121,7 @@ public synchronized boolean updateOrInsert(SequencePropertyBean bean) {\n \t}\r\n \r\n \tprivate String getId(SequencePropertyBean bean) {\r\n-\t\treturn bean.getSequenceID() + \":\" + bean.getName();\r\n+\t\treturn bean.getSequencePropertyKey() + \":\" + bean.getName();\r\n \t}\r\n \t\r\n \tpublic synchronized SequencePropertyBean findUnique(SequencePropertyBean bean) throws SandeshaException {\r"
            },
            {
                "sha": "fc614a73f0d90f35e23b4913095813f4cc086d61",
                "filename": "src/org/apache/sandesha2/util/FaultManager.java",
                "status": "modified",
                "additions": 45,
                "deletions": 38,
                "changes": 83,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/util/FaultManager.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/util/FaultManager.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/util/FaultManager.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -288,50 +288,57 @@ public RMMsgContext checkForInvalidAcknowledgement(RMMsgContext ackRMMessageCont\n \n \t\tboolean invalidAck = false;\n \t\tString reason = null;\n-\t\tSequenceAcknowledgement sequenceAcknowledgement = (SequenceAcknowledgement) ackRMMessageContext\n-\t\t\t\t.getMessagePart(Sandesha2Constants.MessageParts.SEQ_ACKNOWLEDGEMENT);\n-\t\tList sequenceAckList = sequenceAcknowledgement.getAcknowledgementRanges();\n-\t\tIterator it = sequenceAckList.iterator();\n-\n-\t\twhile (it.hasNext()) {\n-\t\t\tAcknowledgementRange acknowledgementRange = (AcknowledgementRange) it.next();\n-\t\t\tlong upper = acknowledgementRange.getUpperValue();\n-\t\t\tlong lower = acknowledgementRange.getLowerValue();\n-\n-\t\t\tif (lower > upper) {\n-\t\t\t\tinvalidAck = true;\n-\t\t\t\treason = SandeshaMessageHelper.getMessage(SandeshaMessageKeys.ackInvalid, Long.toString(lower), Long\n-\t\t\t\t\t\t.toString(upper));\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (invalidAck) {\n-\t\t\tFaultData data = new FaultData();\n-\t\t\tint SOAPVersion = SandeshaUtil.getSOAPVersion(ackMessageContext.getEnvelope());\n-\t\t\tif (SOAPVersion == Sandesha2Constants.SOAPVersion.v1_1)\n-\t\t\t\tdata.setCode(SOAP11Constants.FAULT_CODE_SENDER);\n-\t\t\telse\n-\t\t\t\tdata.setCode(SOAP12Constants.FAULT_CODE_SENDER);\n-\n-\t\t\tdata.setSubcode(Sandesha2Constants.SOAPFaults.Subcodes.INVALID_ACKNOWLEDGEMENT);\n-\t\t\tdata.setReason(reason);\n-\n-\t\t\tSOAPFactory factory = SOAPAbstractFactory.getSOAPFactory(SOAPVersion);\n-\t\t\tOMElement dummyElement = factory.createOMElement(\"dummyElem\", null);\n-\t\t\tsequenceAcknowledgement.toOMElement(dummyElement);\n+\t\t\n+\t\tIterator sequenceAckIter = ackRMMessageContext.getMessageParts(\n+\t\t\t\tSandesha2Constants.MessageParts.SEQ_ACKNOWLEDGEMENT);\n+\t\t\n+\t\twhile (sequenceAckIter.hasNext()) {\n+\t\t\tSequenceAcknowledgement sequenceAcknowledgement = (SequenceAcknowledgement) sequenceAckIter.next();\n+\t\t\tList sequenceAckList = sequenceAcknowledgement.getAcknowledgementRanges();\n+\t\t\tIterator it = sequenceAckList.iterator();\n \n-\t\t\tOMElement sequenceAckElement = dummyElement.getFirstChildWithName(new QName(\n-\t\t\t\t\tSandesha2Constants.WSRM_COMMON.SEQUENCE_ACK));\n-\t\t\tdata.setDetail(sequenceAckElement);\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tAcknowledgementRange acknowledgementRange = (AcknowledgementRange) it.next();\n+\t\t\t\tlong upper = acknowledgementRange.getUpperValue();\n+\t\t\t\tlong lower = acknowledgementRange.getLowerValue();\n+\n+\t\t\t\tif (lower > upper) {\n+\t\t\t\t\tinvalidAck = true;\n+\t\t\t\t\treason = SandeshaMessageHelper.getMessage(SandeshaMessageKeys.ackInvalid, Long.toString(lower), Long\n+\t\t\t\t\t\t\t.toString(upper));\n+\t\t\t\t}\n+\t\t\t}\n \n-\t\t\tif (log.isDebugEnabled())\n-\t\t\t\tlog.debug(\"Exit: FaultManager::checkForInvalidAcknowledgement, invalid ACK\");\n-\t\t\treturn getFault(ackRMMessageContext, data, ackRMMessageContext.getAddressingNamespaceValue(),\n-\t\t\t\t\tstorageManager);\n+\t\t\tif (invalidAck) {\n+\t\t\t\tFaultData data = new FaultData();\n+\t\t\t\tint SOAPVersion = SandeshaUtil.getSOAPVersion(ackMessageContext.getEnvelope());\n+\t\t\t\tif (SOAPVersion == Sandesha2Constants.SOAPVersion.v1_1)\n+\t\t\t\t\tdata.setCode(SOAP11Constants.FAULT_CODE_SENDER);\n+\t\t\t\telse\n+\t\t\t\t\tdata.setCode(SOAP12Constants.FAULT_CODE_SENDER);\n+\n+\t\t\t\tdata.setSubcode(Sandesha2Constants.SOAPFaults.Subcodes.INVALID_ACKNOWLEDGEMENT);\n+\t\t\t\tdata.setReason(reason);\n+\n+\t\t\t\tSOAPFactory factory = SOAPAbstractFactory.getSOAPFactory(SOAPVersion);\n+\t\t\t\tOMElement dummyElement = factory.createOMElement(\"dummyElem\", null);\n+\t\t\t\tsequenceAcknowledgement.toOMElement(dummyElement);\n+\n+\t\t\t\tOMElement sequenceAckElement = dummyElement.getFirstChildWithName(new QName(\n+\t\t\t\t\t\tSandesha2Constants.WSRM_COMMON.SEQUENCE_ACK));\n+\t\t\t\tdata.setDetail(sequenceAckElement);\n+\n+\t\t\t\tif (log.isDebugEnabled())\n+\t\t\t\t\tlog.debug(\"Exit: FaultManager::checkForInvalidAcknowledgement, invalid ACK\");\n+\t\t\t\treturn getFault(ackRMMessageContext, data, ackRMMessageContext.getAddressingNamespaceValue(),\n+\t\t\t\t\t\tstorageManager);\n+\t\t\t}\n+\t\t\n \t\t}\n \n \t\tif (log.isDebugEnabled())\n \t\t\tlog.debug(\"Exit: FaultManager::checkForInvalidAcknowledgement\");\n+\t\t\n \t\treturn null;\n \t}\n "
            },
            {
                "sha": "eff63ce22173304c40fd9a8e8d01dad46e118701",
                "filename": "src/org/apache/sandesha2/util/MsgInitializer.java",
                "status": "modified",
                "additions": 6,
                "deletions": 25,
                "changes": 31,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/util/MsgInitializer.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/util/MsgInitializer.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/util/MsgInitializer.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -106,7 +106,9 @@ private static void populateRMMsgContext(MessageContext msgCtx, RMMsgContext rmM\n \t\t\trmNamespace = elements.getSequence().getNamespaceValue();\r\n \t\t}\r\n \r\n-\t\t\r\n+\t\t//In case of ack messages RM Namespace is decided based on the sequenceId of the first \r\n+\t\t//sequence Ack. In other words Sandesha2 does not expect to receive two SequenceAcknowledgements\r\n+\t\t//of different RM specifications in the same incoming message\r\n \t\tfor (Iterator iter = elements.getSequenceAcknowledgements();iter.hasNext();) {\r\n \t\t\tSequenceAcknowledgement sequenceAck = (SequenceAcknowledgement) iter.next();\r\n \t\t\trmMsgContext.setMessagePart(Sandesha2Constants.MessageParts.SEQ_ACKNOWLEDGEMENT, sequenceAck);\r\n@@ -219,8 +221,9 @@ private static boolean validateMessage(RMMsgContext rmMsgCtx) throws SandeshaExc\n \t\t\trmMsgCtx.setMessageType(Sandesha2Constants.MessageTypes.ACK);\r\n \t\t\tSequenceAcknowledgement sequenceAcknowledgement = (SequenceAcknowledgement) sequenceAcknowledgementsIter.next();\r\n \t\t\t\r\n-\t\t\t//picking the sequenceId of the first sequence ack.\r\n-\t\t\tsequenceID = sequenceAcknowledgement.getIdentifier().getIdentifier();\r\n+\t\t\t//if there is only on sequenceAck, sequenceId will be set. Otherwise it will not be.\r\n+\t\t\tif (!sequenceAcknowledgementsIter.hasNext())\r\n+\t\t\t\tsequenceID = sequenceAcknowledgement.getIdentifier().getIdentifier();\r\n \t\t} else if (ackRequest != null) {\r\n \t\t\trmMsgCtx.setMessageType(Sandesha2Constants.MessageTypes.ACK_REQUEST);\r\n \t\t\tsequenceID = ackRequest.getIdentifier().getIdentifier();\r\n@@ -247,28 +250,6 @@ private static boolean validateMessage(RMMsgContext rmMsgCtx) throws SandeshaExc\n \t\tif (sequenceID!=null)\r\n \t\t\trmMsgCtx.setProperty(Sandesha2Constants.MessageContextProperties.SEQUENCE_ID,sequenceID);\r\n \r\n-\t\tString propertyKey = SandeshaUtil.getPropertyKey(rmMsgCtx);\r\n-\r\n-\t\t//In case of ack messages RM Namespace is decided based on the sequenceId of the first \r\n-\t\t//sequence Ack. In other words Sandesha2 does not expect to receive two SequenceAcknowledgements\r\n-\t\t//of different RM specifications in the same incoming message.\r\n-\t\t\r\n-\t\tString rmNamespace = rmMsgCtx.getRMNamespaceValue();\r\n-\t\tif (sequenceID != null) {\r\n-\t\t\tString specVersion = SandeshaUtil.getRMVersion(propertyKey, storageManager);\r\n-\r\n-\t\t\tString sequenceRMNamespace = null;\r\n-\t\t\tif (specVersion != null)\r\n-\t\t\t\tsequenceRMNamespace = SpecSpecificConstants.getRMNamespaceValue(specVersion);\r\n-\t\t\tif (sequenceRMNamespace != null && rmNamespace != null) {\r\n-\t\t\t\tif (!sequenceRMNamespace.equals(rmNamespace)) {\r\n-\t\t\t\t\tthrow new SandeshaException(SandeshaMessageHelper.getMessage(\r\n-\t\t\t\t\t\t\tSandeshaMessageKeys.rmNamespaceNotMatchSequence, rmNamespace, sequenceRMNamespace,\r\n-\t\t\t\t\t\t\tsequenceID));\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t}\r\n-\r\n \t\treturn true;\r\n \t}\r\n \r"
            },
            {
                "sha": "56e6b9dad9764c97d3becc95edbb4a4b834a3912",
                "filename": "src/org/apache/sandesha2/util/RMMsgCreator.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/util/RMMsgCreator.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/util/RMMsgCreator.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/util/RMMsgCreator.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -348,7 +348,7 @@ public static RMMsgContext createCreateSeqMsg(RMMsgContext applicationRMMsg, Str\n \t * @throws SandeshaException\r\n \t */\r\n \tpublic static RMMsgContext createTerminateSequenceMessage(RMMsgContext referenceRMMessage, String sequenceId,\r\n-\t\t\tString internalSequenceID, StorageManager storageManager) throws SandeshaException {\r\n+\t\t\tString sequencePropertyKey, StorageManager storageManager) throws SandeshaException {\r\n \t\tMessageContext referenceMessage = referenceRMMessage.getMessageContext();\r\n \t\tif (referenceMessage == null)\r\n \t\t\tthrow new SandeshaException(SandeshaMessageHelper.getMessage(SandeshaMessageKeys.msgContextNotSet));\r\n@@ -389,7 +389,7 @@ public static RMMsgContext createTerminateSequenceMessage(RMMsgContext reference\n \t\t\tterminateMsgOperation.setRemainingPhasesInFlow(teferenceMsgOperation.getRemainingPhasesInFlow());\r\n \t\t}\r\n \r\n-\t\tString rmVersion = SandeshaUtil.getRMVersion(internalSequenceID, storageManager);\r\n+\t\tString rmVersion = SandeshaUtil.getRMVersion(sequencePropertyKey, storageManager);\r\n \t\tif (rmVersion == null)\r\n \t\t\tthrow new SandeshaException(SandeshaMessageHelper.getMessage(SandeshaMessageKeys.cannotDecideRMVersion));\r\n \r"
            },
            {
                "sha": "a90c269bb49ac5d9a2c444c54e524b4aefd14c94",
                "filename": "src/org/apache/sandesha2/util/SandeshaUtil.java",
                "status": "modified",
                "additions": 7,
                "deletions": 6,
                "changes": 13,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/util/SandeshaUtil.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/util/SandeshaUtil.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/util/SandeshaUtil.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -440,13 +440,14 @@ public static boolean isRMGlobalMessage(MessageContext msgCtx) {\n \t\t// TODO make this spec indipendent\r\n \r\n \t\tOMElement sequenceElem = null;\r\n-\t\tif (header != null)\r\n+\t\tif (header != null) {\r\n \t\t\tsequenceElem = header.getFirstChildWithName(new QName(Sandesha2Constants.SPEC_2005_02.NS_URI,\r\n-\t\t\t\t\tSandesha2Constants.WSRM_COMMON.SEQUENCE));\r\n+\t\t\t\t\t\tSandesha2Constants.WSRM_COMMON.SEQUENCE));\r\n \r\n-\t\tif (sequenceElem == null)\r\n-\t\t\tsequenceElem = header.getFirstChildWithName(new QName(Sandesha2Constants.SPEC_2006_08.NS_URI,\r\n-\t\t\t\t\tSandesha2Constants.WSRM_COMMON.SEQUENCE));\r\n+\t\t\tif (sequenceElem == null)\r\n+\t\t\t\tsequenceElem = header.getFirstChildWithName(new QName(Sandesha2Constants.SPEC_2006_08.NS_URI,\r\n+\t\t\t\t\t\tSandesha2Constants.WSRM_COMMON.SEQUENCE));\r\n+\t\t}\r\n \r\n \t\tif (sequenceElem != null)\r\n \t\t\trmGlobalMsg = true;\r\n@@ -961,7 +962,7 @@ private static SecurityManager getSecurityManagerInstance (String className,Conf\n \t * @return\r\n \t */\r\n \t\r\n-\tpublic static String getPropertyKey (RMMsgContext rmMsgContext) {\r\n+\tpublic static String getSequencePropertyKey (RMMsgContext rmMsgContext) {\r\n \t\tString sequenceId = (String) rmMsgContext.getProperty(Sandesha2Constants.MessageContextProperties.SEQUENCE_ID);\r\n \t\tString internalSequenceId = (String) rmMsgContext.getProperty(Sandesha2Constants.MessageContextProperties.INTERNAL_SEQUENCE_ID);\r\n \t\t\r"
            },
            {
                "sha": "8182524a5657add509475426b15c30563ee4a7b3",
                "filename": "src/org/apache/sandesha2/util/SequenceManager.java",
                "status": "modified",
                "additions": 8,
                "deletions": 30,
                "changes": 38,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/util/SequenceManager.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/util/SequenceManager.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/util/SequenceManager.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -139,7 +139,7 @@ public static String setupNewSequence(RMMsgContext createSequenceMsg, StorageMan\n \t\t}\r\n \r\n \t\tSequencePropertyBean specVerionBean = new SequencePropertyBean();\r\n-\t\tspecVerionBean.setSequenceID(sequenceId);\r\n+\t\tspecVerionBean.setSequencePropertyKey(sequenceId);\r\n \t\tspecVerionBean.setName(Sandesha2Constants.SequenceProperties.RM_SPEC_VERSION);\r\n \t\tspecVerionBean.setValue(specVersion);\r\n \r\n@@ -288,7 +288,7 @@ public static void setupNewClientSequence(MessageContext firstAplicationMsgCtx,\n \t\t}\r\n \r\n \t\tSequencePropertyBean msgsBean = new SequencePropertyBean();\r\n-\t\tmsgsBean.setSequenceID(internalSequenceId);\r\n+\t\tmsgsBean.setSequencePropertyKey(internalSequenceId);\r\n \t\tmsgsBean.setName(Sandesha2Constants.SequenceProperties.CLIENT_COMPLETED_MESSAGES);\r\n \t\tmsgsBean.setValue(\"\");\r\n \r\n@@ -304,7 +304,7 @@ public static void setupNewClientSequence(MessageContext firstAplicationMsgCtx,\n \t\tString transportTo = (String) firstAplicationMsgCtx.getProperty(MessageContextConstants.TRANSPORT_URL);\r\n \t\tif (transportTo != null) {\r\n \t\t\tSequencePropertyBean transportToBean = new SequencePropertyBean();\r\n-\t\t\ttransportToBean.setSequenceID(internalSequenceId);\r\n+\t\t\ttransportToBean.setSequencePropertyKey(internalSequenceId);\r\n \t\t\ttransportToBean.setName(Sandesha2Constants.SequenceProperties.TRANSPORT_TO);\r\n \t\t\ttransportToBean.setValue(transportTo);\r\n \r\n@@ -313,7 +313,7 @@ public static void setupNewClientSequence(MessageContext firstAplicationMsgCtx,\n \r\n \t\t// setting the spec version for the client side.\r\n \t\tSequencePropertyBean specVerionBean = new SequencePropertyBean();\r\n-\t\tspecVerionBean.setSequenceID(internalSequenceId);\r\n+\t\tspecVerionBean.setSequencePropertyKey(internalSequenceId);\r\n \t\tspecVerionBean.setName(Sandesha2Constants.SequenceProperties.RM_SPEC_VERSION);\r\n \t\tspecVerionBean.setValue(specVersion);\r\n \t\tseqPropMgr.insert(specVerionBean);\r\n@@ -420,7 +420,7 @@ public static void updateLastActivatedTime(String propertyKey, StorageManager st\n \t\tif (lastActivatedBean == null) {\r\n \t\t\tadded = true;\r\n \t\t\tlastActivatedBean = new SequencePropertyBean();\r\n-\t\t\tlastActivatedBean.setSequenceID(propertyKey);\r\n+\t\t\tlastActivatedBean.setSequencePropertyKey(propertyKey);\r\n \t\t\tlastActivatedBean.setName(Sandesha2Constants.SequenceProperties.LAST_ACTIVATED_TIME);\r\n \t\t}\r\n \r\n@@ -470,34 +470,12 @@ public static boolean hasSequenceTimedOut(String propertyKey, RMMsgContext rmMsg\n \t\treturn sequenceTimedOut;\r\n \t}\r\n \r\n-\tpublic static long getOutGoingSequenceAckedMessageCount(String internalSequenceID, StorageManager storageManager)\r\n+\tpublic static long getOutGoingSequenceAckedMessageCount(String sequencePropertyKey, StorageManager storageManager)\r\n \t\t\tthrows SandeshaException {\r\n \t\t// / Transaction transaction = storageManager.getTransaction();\r\n \t\tSequencePropertyBeanMgr seqPropBeanMgr = storageManager.getSequencePropertyBeanMgr();\r\n \r\n-\t\tSequencePropertyBean findSeqIDBean = new SequencePropertyBean();\r\n-\t\tfindSeqIDBean.setValue(internalSequenceID);\r\n-\t\tfindSeqIDBean.setName(Sandesha2Constants.SequenceProperties.INTERNAL_SEQUENCE_ID);\r\n-\t\tCollection seqIDBeans = seqPropBeanMgr.find(findSeqIDBean);\r\n-\r\n-\t\tif (seqIDBeans.size() == 0) {\r\n-\t\t\tString message = SandeshaMessageHelper.getMessage(SandeshaMessageKeys.noSequenceEstablished,\r\n-\t\t\t\t\tinternalSequenceID);\r\n-\t\t\tlog.debug(message);\r\n-\t\t\tthrow new SandeshaException(message);\r\n-\t\t}\r\n-\r\n-\t\tif (seqIDBeans.size() > 1) {\r\n-\t\t\tString message = SandeshaMessageHelper.getMessage(\r\n-\t\t\t\t\tSandeshaMessageKeys.cannotGenerateReportNonUniqueSequence, internalSequenceID);\r\n-\t\t\tlog.debug(message);\r\n-\t\t\tthrow new SandeshaException(message);\r\n-\t\t}\r\n-\r\n-\t\tSequencePropertyBean seqIDBean = (SequencePropertyBean) seqIDBeans.iterator().next();\r\n-\t\tString sequenceID = seqIDBean.getSequenceID();\r\n-\r\n-\t\tSequencePropertyBean ackedMsgBean = seqPropBeanMgr.retrieve(sequenceID,\r\n+\t\tSequencePropertyBean ackedMsgBean = seqPropBeanMgr.retrieve(sequencePropertyKey,\r\n \t\t\t\tSandesha2Constants.SequenceProperties.NO_OF_OUTGOING_MSGS_ACKED);\r\n \t\tif (ackedMsgBean == null)\r\n \t\t\treturn 0; // No acknowledgement has been received yet.\r\n@@ -532,7 +510,7 @@ public static boolean isOutGoingSequenceCompleted(String internalSequenceID, Sto\n \t\t}\r\n \r\n \t\tSequencePropertyBean seqIDBean = (SequencePropertyBean) seqIDBeans.iterator().next();\r\n-\t\tString sequenceID = seqIDBean.getSequenceID();\r\n+\t\tString sequenceID = seqIDBean.getSequencePropertyKey();\r\n \r\n \t\tSequencePropertyBean terminateAddedBean = seqPropBeanMgr.retrieve(sequenceID,\r\n \t\t\t\tSandesha2Constants.SequenceProperties.TERMINATE_ADDED);\r"
            },
            {
                "sha": "19de96fa96376087261736d7f192092761a934eb",
                "filename": "src/org/apache/sandesha2/util/TerminateManager.java",
                "status": "modified",
                "additions": 11,
                "deletions": 11,
                "changes": 22,
                "blob_url": "https://github.com/apache/sandesha/blob/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/util/TerminateManager.java",
                "raw_url": "https://github.com/apache/sandesha/raw/7872964c1207c7102ad790f4598ecff879d28c13/src/org/apache/sandesha2/util/TerminateManager.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/src/org/apache/sandesha2/util/TerminateManager.java?ref=7872964c1207c7102ad790f4598ecff879d28c13",
                "patch": "@@ -240,15 +240,15 @@ private static void doUpdatesIfNeeded(String sequenceID, SequencePropertyBean pr\n \t\t\t// so saving it with the sequenceID value being the out sequenceID.\r\n \r\n \t\t\tSequencePropertyBean newBean = new SequencePropertyBean();\r\n-\t\t\tnewBean.setSequenceID(sequenceID);\r\n+\t\t\tnewBean.setSequencePropertyKey(sequenceID);\r\n \t\t\tnewBean.setName(propertyBean.getName());\r\n \t\t\tnewBean.setValue(propertyBean.getValue());\r\n \r\n \t\t\tseqPropMgr.insert(newBean);\r\n \t\t\t// TODO amazingly this property does not seem to get deleted without\r\n \t\t\t// following - in the hibernate impl\r\n \t\t\t// (even though the lines efter current methodcall do this).\r\n-\t\t\tseqPropMgr.delete(propertyBean.getSequenceID(), propertyBean.getName());\r\n+\t\t\tseqPropMgr.delete(propertyBean.getSequencePropertyKey(), propertyBean.getName());\r\n \t\t}\r\n \t}\r\n \r\n@@ -341,7 +341,7 @@ private static void cleanSendingSideData(ConfigurationContext configContext, Str\n \r\n \t\t// removing sequence properties\r\n \t\tSequencePropertyBean findSequencePropertyBean1 = new SequencePropertyBean();\r\n-\t\tfindSequencePropertyBean1.setSequenceID(internalSequenceID);\r\n+\t\tfindSequencePropertyBean1.setSequencePropertyKey(internalSequenceID);\r\n \t\tcollection = sequencePropertyBeanMgr.find(findSequencePropertyBean1);\r\n \t\titerator = collection.iterator();\r\n \t\twhile (iterator.hasNext()) {\r\n@@ -351,13 +351,13 @@ private static void cleanSendingSideData(ConfigurationContext configContext, Str\n \t\t\t// TODO all properties which hv the temm:Seq:id as the key should be\r\n \t\t\t// deletable.\r\n \t\t\tif (isPropertyDeletable(sequencePropertyBean.getName())) {\r\n-\t\t\t\tsequencePropertyBeanMgr.delete(sequencePropertyBean.getSequenceID(), sequencePropertyBean.getName());\r\n+\t\t\t\tsequencePropertyBeanMgr.delete(sequencePropertyBean.getSequencePropertyKey(), sequencePropertyBean.getName());\r\n \t\t\t}\r\n \t\t}\r\n \t}\r\n \r\n \tpublic static void addTerminateSequenceMessage(RMMsgContext referenceMessage, String outSequenceId,\r\n-\t\t\tString internalSequenceId, StorageManager storageManager) throws SandeshaException {\r\n+\t\t\tString sequencePropertyKey, StorageManager storageManager) throws SandeshaException {\r\n \r\n \t\tConfigurationContext configurationContext = referenceMessage.getMessageContext().getConfigurationContext();\r\n \r\n@@ -375,11 +375,11 @@ public static void addTerminateSequenceMessage(RMMsgContext referenceMessage, St\n \t\t}\r\n \r\n \t\tRMMsgContext terminateRMMessage = RMMsgCreator.createTerminateSequenceMessage(referenceMessage, outSequenceId,\r\n-\t\t\t\tinternalSequenceId, storageManager);\r\n+\t\t\t\tsequencePropertyKey, storageManager);\r\n \t\tterminateRMMessage.setFlow(MessageContext.OUT_FLOW);\r\n \t\tterminateRMMessage.setProperty(Sandesha2Constants.APPLICATION_PROCESSING_DONE, \"true\");\r\n \r\n-\t\tSequencePropertyBean toBean = seqPropMgr.retrieve(internalSequenceId,\r\n+\t\tSequencePropertyBean toBean = seqPropMgr.retrieve(sequencePropertyKey,\r\n \t\t\t\tSandesha2Constants.SequenceProperties.TO_EPR);\r\n \r\n \t\tEndpointReference toEPR = new EndpointReference(toBean.getValue());\r\n@@ -390,17 +390,17 @@ public static void addTerminateSequenceMessage(RMMsgContext referenceMessage, St\n \r\n \t\tterminateRMMessage.setTo(new EndpointReference(toEPR.getAddress()));\r\n \r\n-\t\tString addressingNamespaceURI = SandeshaUtil.getSequenceProperty(internalSequenceId,\r\n+\t\tString addressingNamespaceURI = SandeshaUtil.getSequenceProperty(sequencePropertyKey,\r\n \t\t\t\tSandesha2Constants.SequenceProperties.ADDRESSING_NAMESPACE_VALUE, storageManager);\r\n \t\tString anonymousURI = SpecSpecificConstants.getAddressingAnonymousURI(addressingNamespaceURI);\r\n \r\n-\t\tString rmVersion = SandeshaUtil.getRMVersion(internalSequenceId, storageManager);\r\n+\t\tString rmVersion = SandeshaUtil.getRMVersion(sequencePropertyKey, storageManager);\r\n \t\tif (rmVersion == null)\r\n \t\t\tthrow new SandeshaException(SandeshaMessageHelper.getMessage(SandeshaMessageKeys.cannotDecideRMVersion));\r\n \t\tterminateRMMessage.setWSAAction(SpecSpecificConstants.getTerminateSequenceAction(rmVersion));\r\n \t\tterminateRMMessage.setSOAPAction(SpecSpecificConstants.getTerminateSequenceSOAPAction(rmVersion));\r\n \r\n-\t\tSequencePropertyBean transportToBean = seqPropMgr.retrieve(internalSequenceId,\r\n+\t\tSequencePropertyBean transportToBean = seqPropMgr.retrieve(sequencePropertyKey,\r\n \t\t\t\tSandesha2Constants.SequenceProperties.TRANSPORT_TO);\r\n \t\tif (transportToBean != null) {\r\n \t\t\tterminateRMMessage.setProperty(MessageContextConstants.TRANSPORT_URL, transportToBean.getValue());\r\n@@ -441,7 +441,7 @@ public static void addTerminateSequenceMessage(RMMsgContext referenceMessage, St\n \r\n \t\tSequencePropertyBean terminateAdded = new SequencePropertyBean();\r\n \t\tterminateAdded.setName(Sandesha2Constants.SequenceProperties.TERMINATE_ADDED);\r\n-\t\tterminateAdded.setSequenceID(outSequenceId);\r\n+\t\tterminateAdded.setSequencePropertyKey(outSequenceId);\r\n \t\tterminateAdded.setValue(\"true\");\r\n \r\n \t\tseqPropMgr.insert(terminateAdded);\r"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sandesha/commit/de3f3ed386cd9be9da445e56753fa4f3b9215dd3",
        "repo": "sandesha",
        "parent": "https://github.com/apache/sandesha/commit/bd82f29fac8cacd531712196517a6ae31d6de531",
        "message": "Fix to Sandesha as problem highlighted after move to recent Axis2 release.  The thread ABORT logic has changed slightly in Axis2 so was causing NPE's when an RM inorder response was being delivered to a client.  The fix is to use a thread SUSPEND for inorder Sync responses.\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/sandesha/trunk/java@899244 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sandesha_22",
        "file": [
            {
                "sha": "27d24a30d50d64dabe522579e840f986c22af649",
                "filename": "modules/core/src/main/java/org/apache/sandesha2/msgprocessors/SequenceProcessor.java",
                "status": "modified",
                "additions": 11,
                "deletions": 5,
                "changes": 16,
                "blob_url": "https://github.com/apache/sandesha/blob/de3f3ed386cd9be9da445e56753fa4f3b9215dd3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/SequenceProcessor.java",
                "raw_url": "https://github.com/apache/sandesha/raw/de3f3ed386cd9be9da445e56753fa4f3b9215dd3/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/SequenceProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/sandesha/contents/modules/core/src/main/java/org/apache/sandesha2/msgprocessors/SequenceProcessor.java?ref=de3f3ed386cd9be9da445e56753fa4f3b9215dd3",
                "patch": "@@ -244,7 +244,7 @@ public InvocationResponse processReliableMessage(RMMsgContext rmMsgCtx, Transact\n \t\t\t\n \t\t\tEndpointReference acksTo = bean.getAcksToEndpointReference();\n \t\t\t\n-\t\t\t// Send an Ack if needed.\n+\t\t\t//Send an Ack if needed.\n \t\t\t//We are not sending acks for duplicate messages in the anon InOut case.\n \t\t\t//If a standalone ack get sent before the actualy message (I.e. before the original msg get\n \t\t\t//replied), the client may take this as a InOnly message and may avoid looking for the application\n@@ -430,11 +430,17 @@ public InvocationResponse processReliableMessage(RMMsgContext rmMsgCtx, Transact\n \t\t\t}\n \n             // if the relates to is not null then this is at the client side\n-            // so it is receiving a response. always have to return the thread.\n-            if (msgCtx.getRelatesTo() != null) {\n+            // so it is receiving a response.  We have to abort the thread in the Async case as \n+\t\t\t// we don't want too many threads open e.g. many async responses coming in at once all waiting\n+\t\t\t// for an earlier response which hasn't arrived.  In the Sync case we need to suspend as aborting\n+\t\t\t// causes Axis to mark this msg as delivered and then when the invoker thread tries to deliver\n+\t\t\t// the msg Axis returns with a NullPointerException.\n+            if (msgCtx.getRelatesTo() != null && !msgCtx.getTo().hasAnonymousAddress()) {\n                 result = InvocationResponse.ABORT;\n-            }\n-\n+                if (log.isDebugEnabled())\n+    \t\t\t\tlog.debug(\"SequenceProcessor::processReliableMessage, Aborting the thread as this \" +\n+    \t\t\t\t\t\t\"is an async response requiring inorder delivery.  An invoker thread will process the delivery\"); \n+            } \n \t\t}\n \n \t\tif (transaction != null && transaction.isActive()) "
            }
        ]
    }
]
