[
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/5c754cfebdfbb4d2061ef7f3f1e72fa0c98cbdb9",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/4ad09fa0758ba482f216e5c3bf1a7a2d65fe0392",
        "message": "[CALCITE-2939] NPE when executeBatch array type (Bake)",
        "bug_id": "calcite-avatica_1",
        "file": [
            {
                "sha": "9b98d2abb2e1e6102f5b9443b9d50cbbf3897756",
                "filename": "core/src/main/java/org/apache/calcite/avatica/remote/TypedValue.java",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/5c754cfebdfbb4d2061ef7f3f1e72fa0c98cbdb9/core/src/main/java/org/apache/calcite/avatica/remote/TypedValue.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/5c754cfebdfbb4d2061ef7f3f1e72fa0c98cbdb9/core/src/main/java/org/apache/calcite/avatica/remote/TypedValue.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/avatica/remote/TypedValue.java?ref=5c754cfebdfbb4d2061ef7f3f1e72fa0c98cbdb9",
                "patch": "@@ -359,6 +359,12 @@ private static Object serialToJdbc(ColumnMetaData.Rep type, ColumnMetaData.Rep c\n           copy.add(serialToJdbc(componentRep, null, o, calendar));\n         }\n       }\n+      if (componentRep == null && list.size() > 0) {\n+        componentRep = ((TypedValue) list.get(0)).type;\n+        if (componentRep == null) {\n+          throw new RuntimeException(\"ComponentRep of element must not be null for ARRAYs\");\n+        }\n+      }\n       AvaticaType elementType = new AvaticaType(componentRep.typeId, componentRep.name(),\n           componentRep);\n       return new ArrayFactoryImpl(calendar.getTimeZone()).createArray(elementType, copy);"
            },
            {
                "sha": "d73648d4666c1914541b05c6e1adf7fc628b2591",
                "filename": "server/src/test/java/org/apache/calcite/avatica/remote/ArrayTypeTest.java",
                "status": "modified",
                "additions": 53,
                "deletions": 0,
                "changes": 53,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/5c754cfebdfbb4d2061ef7f3f1e72fa0c98cbdb9/server/src/test/java/org/apache/calcite/avatica/remote/ArrayTypeTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/5c754cfebdfbb4d2061ef7f3f1e72fa0c98cbdb9/server/src/test/java/org/apache/calcite/avatica/remote/ArrayTypeTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/server/src/test/java/org/apache/calcite/avatica/remote/ArrayTypeTest.java?ref=5c754cfebdfbb4d2061ef7f3f1e72fa0c98cbdb9",
                "patch": "@@ -474,6 +474,59 @@ public ArrayTypeTest(Serialization serialization, HttpServer server) {\n     }\n   }\n \n+  @Test public void testBatchInsert() throws Exception {\n+    try (Connection conn = DriverManager.getConnection(url)) {\n+      ScalarType component = ColumnMetaData.scalar(Types.VARCHAR, \"VARCHAR\", Rep.STRING);\n+      List<Array> arrays = new ArrayList<>();\n+      // Construct the data\n+      for (int i = 0; i < 5; i++) {\n+        List<String> elements = new ArrayList<>();\n+        for (int j = 0; j < 5; j++) {\n+          elements.add(i + \"_\" + j);\n+        }\n+        arrays.add(createArray(\"VARCHAR\", component, elements));\n+      }\n+\n+      String tableName = \"test_batch_insert\";\n+      // Drop and create the table\n+      try (Statement stmt = conn.createStatement()) {\n+        assertFalse(stmt.execute(Unsafe.formatLocalString(\"DROP TABLE IF EXISTS %s\", tableName)));\n+        String createTableSql = Unsafe.formatLocalString(\n+                \"CREATE TABLE %s (id integer, vals %s ARRAY)\", tableName, \"VARCHAR\");\n+        assertFalse(stmt.execute(createTableSql));\n+      }\n+\n+      // Insert records, each with an array\n+      final String dml = Unsafe.formatLocalString(\"INSERT INTO %s VALUES (?, ?)\", tableName);\n+      try (PreparedStatement stmt = conn.prepareStatement(dml)) {\n+        int i = 0;\n+        for (Array inputArray : arrays)  {\n+          stmt.setInt(1, i);\n+          stmt.setArray(2, inputArray);\n+          stmt.addBatch();\n+          i++;\n+        }\n+        assertEquals(i, stmt.executeBatch().length);\n+      }\n+\n+      // Read the records\n+      try (Statement stmt = conn.createStatement()) {\n+        ResultSet results = stmt.executeQuery(\n+                Unsafe.formatLocalString(\"SELECT * FROM %s\", tableName));\n+        assertNotNull(\"Expected a ResultSet\", results);\n+        int i = 0;\n+        for (Array expectedArray : arrays) {\n+          assertTrue(results.next());\n+          assertEquals(i++, results.getInt(1));\n+          Array actualArray = results.getArray(2);\n+\n+          PRIMITIVE_LIST_VALIDATOR.validate(expectedArray, actualArray);\n+        }\n+        assertFalse(\"Expected no more records\", results.next());\n+      }\n+    }\n+  }\n+\n   /**\n    * Creates a JDBC {@link Array} from a list of values.\n    *"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/cd92b77c476f7b095b330507402bfc6c3208e300",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/239babd8fc26bf35be96a77fbfbea379138f3a37",
        "message": "Fix NullPointerException in SqlJoin.toString",
        "bug_id": "calcite-avatica_2",
        "file": [
            {
                "sha": "12b1fb0a222416acc4b9db9c0810021a3130c578",
                "filename": "core/src/main/java/org/apache/calcite/sql/SqlJoin.java",
                "status": "modified",
                "additions": 8,
                "deletions": 6,
                "changes": 14,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/cd92b77c476f7b095b330507402bfc6c3208e300/core/src/main/java/org/apache/calcite/sql/SqlJoin.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/cd92b77c476f7b095b330507402bfc6c3208e300/core/src/main/java/org/apache/calcite/sql/SqlJoin.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/sql/SqlJoin.java?ref=cd92b77c476f7b095b330507402bfc6c3208e300",
                "patch": "@@ -21,6 +21,8 @@\n import org.apache.calcite.util.ImmutableNullableList;\n import org.apache.calcite.util.Util;\n \n+import com.google.common.base.Preconditions;\n+\n import java.util.List;\n \n /**\n@@ -58,18 +60,15 @@ public SqlJoin(SqlParserPos pos, SqlNode left, SqlLiteral natural,\n       SqlNode condition) {\n     super(pos);\n     this.left = left;\n-    this.natural = natural;\n-    this.joinType = joinType;\n+    this.natural = Preconditions.checkNotNull(natural);\n+    this.joinType = Preconditions.checkNotNull(joinType);\n     this.right = right;\n-    this.conditionType = conditionType;\n+    this.conditionType = Preconditions.checkNotNull(conditionType);\n     this.condition = condition;\n \n     assert natural.getTypeName() == SqlTypeName.BOOLEAN;\n-    assert conditionType != null;\n     assert conditionType.symbolValue() instanceof JoinConditionType;\n-    assert joinType != null;\n     assert joinType.symbolValue() instanceof JoinType;\n-\n   }\n \n   //~ Methods ----------------------------------------------------------------\n@@ -196,6 +195,8 @@ public SqlCall createCall(\n         int rightPrec) {\n       final SqlJoin join = (SqlJoin) call;\n \n+      final SqlWriter.Frame joinFrame =\n+          writer.startList(SqlWriter.FrameTypeEnum.JOIN);\n       join.left.unparse(\n           writer,\n           leftPrec,\n@@ -249,6 +250,7 @@ public SqlCall createCall(\n           throw Util.unexpected(join.getConditionType());\n         }\n       }\n+      writer.endList(joinFrame);\n     }\n   }\n }"
            },
            {
                "sha": "d45c831db9903dbbbff09033f9c18d528d387930",
                "filename": "core/src/main/java/org/apache/calcite/sql/SqlWriter.java",
                "status": "modified",
                "additions": 5,
                "deletions": 0,
                "changes": 5,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/cd92b77c476f7b095b330507402bfc6c3208e300/core/src/main/java/org/apache/calcite/sql/SqlWriter.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/cd92b77c476f7b095b330507402bfc6c3208e300/core/src/main/java/org/apache/calcite/sql/SqlWriter.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/sql/SqlWriter.java?ref=cd92b77c476f7b095b330507402bfc6c3208e300",
                "patch": "@@ -193,6 +193,11 @@\n      */\n     FROM_LIST,\n \n+    /**\n+     * Pair-wise join.\n+     */\n+    JOIN(false),\n+\n     /**\n      * WHERE clause.\n      */"
            },
            {
                "sha": "0d786561a70a3d60ddd02b5008a19946afe19f70",
                "filename": "core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java",
                "status": "modified",
                "additions": 21,
                "deletions": 29,
                "changes": 50,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/cd92b77c476f7b095b330507402bfc6c3208e300/core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/cd92b77c476f7b095b330507402bfc6c3208e300/core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java?ref=cd92b77c476f7b095b330507402bfc6c3208e300",
                "patch": "@@ -25,6 +25,8 @@\n import org.apache.calcite.util.Util;\n import org.apache.calcite.util.trace.CalciteLogger;\n \n+import com.google.common.base.Throwables;\n+\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.lang.reflect.InvocationTargetException;\n@@ -34,6 +36,7 @@\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Properties;\n import java.util.Set;\n import java.util.logging.Logger;\n@@ -306,11 +309,10 @@ public void describe(PrintWriter pw, boolean omitDefaults) {\n     final Bean properties = getBean();\n     final String[] propertyNames = properties.getPropertyNames();\n     int count = 0;\n-    for (int i = 0; i < propertyNames.length; i++) {\n-      String key = propertyNames[i];\n+    for (String key : propertyNames) {\n       final Object value = bean.get(key);\n       final Object defaultValue = DEFAULT_BEAN.get(key);\n-      if (com.google.common.base.Objects.equal(value, defaultValue)) {\n+      if (Objects.equals(value, defaultValue)) {\n         continue;\n       }\n       if (count++ > 0) {\n@@ -327,8 +329,7 @@ public void setSettings(Properties properties) {\n     resetSettings();\n     final Bean bean = getBean();\n     final String[] propertyNames = bean.getPropertyNames();\n-    for (int i = 0; i < propertyNames.length; i++) {\n-      String propertyName = propertyNames[i];\n+    for (String propertyName : propertyNames) {\n       final String value = properties.getProperty(propertyName);\n       if (value != null) {\n         bean.set(propertyName, value);\n@@ -662,6 +663,7 @@ protected void _before() {\n             false);\n \n       case FROM_LIST:\n+      case JOIN:\n         return new FrameImpl(\n             frameType,\n             keyword,\n@@ -849,7 +851,7 @@ private static boolean needWhitespaceAfter(String s) {\n \n   protected void whiteSpace() {\n     if (needWhitespace) {\n-      if (nextWhitespace == NL) {\n+      if (nextWhitespace.equals(NL)) {\n         newlineAndIndent();\n       } else {\n         pw.print(nextWhitespace);\n@@ -1044,15 +1046,15 @@ public void setFormatOptions(SqlFormatOptions options) {\n     /**\n      * Whether to print a newline before each separator.\n      */\n-    public boolean newlineBeforeSep;\n+    public final boolean newlineBeforeSep;\n \n     /**\n      * Whether to print a newline after each separator.\n      */\n-    public boolean newlineAfterSep;\n+    public final boolean newlineAfterSep;\n     private final boolean newlineBeforeClose;\n     private final boolean newlineAfterClose;\n-    private boolean newlineAfterOpen;\n+    private final boolean newlineAfterOpen;\n \n     FrameImpl(\n         FrameType frameType,\n@@ -1107,18 +1109,14 @@ protected void sep(boolean printFirst, String sep) {\n    */\n   private static class Bean {\n     private final SqlPrettyWriter o;\n-    private final Map<String, Method> getterMethods =\n-        new HashMap<String, Method>();\n-    private final Map<String, Method> setterMethods =\n-        new HashMap<String, Method>();\n+    private final Map<String, Method> getterMethods = new HashMap<>();\n+    private final Map<String, Method> setterMethods = new HashMap<>();\n \n     Bean(SqlPrettyWriter o) {\n       this.o = o;\n \n       // Figure out the getter/setter methods for each attribute.\n-      final Method[] methods = o.getClass().getMethods();\n-      for (int i = 0; i < methods.length; i++) {\n-        Method method = methods[i];\n+      for (Method method : o.getClass().getMethods()) {\n         if (method.getName().startsWith(\"set\")\n             && (method.getReturnType() == Void.class)\n             && (method.getParameterTypes().length == 1)) {\n@@ -1157,32 +1155,26 @@ private String stripPrefix(String name, int offset) {\n     public void set(String name, String value) {\n       final Method method = setterMethods.get(name);\n       try {\n-        method.invoke(\n-            o,\n-            value);\n-      } catch (IllegalAccessException e) {\n-        throw Util.newInternal(e);\n-      } catch (InvocationTargetException e) {\n-        throw Util.newInternal(e);\n+        method.invoke(o, value);\n+      } catch (IllegalAccessException | InvocationTargetException e) {\n+        throw Throwables.propagate(e);\n       }\n     }\n \n     public Object get(String name) {\n       final Method method = getterMethods.get(name);\n       try {\n         return method.invoke(o);\n-      } catch (IllegalAccessException e) {\n-        throw Util.newInternal(e);\n-      } catch (InvocationTargetException e) {\n-        throw Util.newInternal(e);\n+      } catch (IllegalAccessException | InvocationTargetException e) {\n+        throw Throwables.propagate(e);\n       }\n     }\n \n     public String[] getPropertyNames() {\n-      final Set<String> names = new HashSet<String>();\n+      final Set<String> names = new HashSet<>();\n       names.addAll(getterMethods.keySet());\n       names.addAll(setterMethods.keySet());\n-      return (String[]) names.toArray(new String[names.size()]);\n+      return names.toArray(new String[names.size()]);\n     }\n   }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/fbe19d83be71a0c3be315262d215a2d439b34511",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/0cb2e275d61a22b931212f834a7922266fa5d772",
        "message": "[CALCITE-843] AvaticaConnection.getAutoCommit throws NullPointerException",
        "bug_id": "calcite-avatica_3",
        "file": [
            {
                "sha": "1a7443c1f4e26b30ae42da831b88a2bf91f6c1fe",
                "filename": "avatica/src/main/java/org/apache/calcite/avatica/AvaticaConnection.java",
                "status": "modified",
                "additions": 19,
                "deletions": 5,
                "changes": 24,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/fbe19d83be71a0c3be315262d215a2d439b34511/avatica/src/main/java/org/apache/calcite/avatica/AvaticaConnection.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/fbe19d83be71a0c3be315262d215a2d439b34511/avatica/src/main/java/org/apache/calcite/avatica/AvaticaConnection.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/avatica/src/main/java/org/apache/calcite/avatica/AvaticaConnection.java?ref=fbe19d83be71a0c3be315262d215a2d439b34511",
                "patch": "@@ -134,7 +134,7 @@ public void setAutoCommit(boolean autoCommit) throws SQLException {\n   }\n \n   public boolean getAutoCommit() throws SQLException {\n-    return meta.connectionSync(handle, new ConnectionPropertiesImpl()).isAutoCommit();\n+    return unbox(sync().isAutoCommit(), true);\n   }\n \n   public void commit() throws SQLException {\n@@ -173,15 +173,15 @@ public void setReadOnly(boolean readOnly) throws SQLException {\n   }\n \n   public boolean isReadOnly() throws SQLException {\n-    return meta.connectionSync(handle, new ConnectionPropertiesImpl()).isReadOnly();\n+    return unbox(sync().isReadOnly(), true);\n   }\n \n   public void setCatalog(String catalog) throws SQLException {\n     meta.connectionSync(handle, new ConnectionPropertiesImpl().setCatalog(catalog));\n   }\n \n   public String getCatalog() {\n-    return meta.connectionSync(handle, new ConnectionPropertiesImpl()).getCatalog();\n+    return sync().getCatalog();\n   }\n \n   public void setTransactionIsolation(int level) throws SQLException {\n@@ -190,7 +190,7 @@ public void setTransactionIsolation(int level) throws SQLException {\n \n   public int getTransactionIsolation() throws SQLException {\n     //noinspection MagicConstant\n-    return meta.connectionSync(handle, new ConnectionPropertiesImpl()).getTransactionIsolation();\n+    return unbox(sync().getTransactionIsolation(), TRANSACTION_NONE);\n   }\n \n   public SQLWarning getWarnings() throws SQLException {\n@@ -358,7 +358,7 @@ public void setSchema(String schema) throws SQLException {\n   }\n \n   public String getSchema() {\n-    return meta.connectionSync(handle, new ConnectionPropertiesImpl()).getSchema();\n+    return sync().getSchema();\n   }\n \n   public void abort(Executor executor) throws SQLException {\n@@ -503,6 +503,20 @@ protected static Trojan createTrojan() {\n     return new Trojan();\n   }\n \n+  /** Converts a {@link Boolean} to a {@code boolean}, with a default value. */\n+  private boolean unbox(Boolean b, boolean defaultValue) {\n+    return b == null ? defaultValue : b;\n+  }\n+\n+  /** Converts an {@link Integer} to an {@code int}, with a default value. */\n+  private int unbox(Integer i, int defaultValue) {\n+    return i == null ? defaultValue : i;\n+  }\n+\n+  private Meta.ConnectionProperties sync() {\n+    return meta.connectionSync(handle, new ConnectionPropertiesImpl());\n+  }\n+\n   /** A way to call package-protected methods. But only a sub-class of\n    * connection can create one. */\n   public static class Trojan {"
            },
            {
                "sha": "f6047d07c75ec37cb6ddd397b1b8fc4c9a88c0d2",
                "filename": "avatica/src/main/java/org/apache/calcite/avatica/remote/RemoteMeta.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/fbe19d83be71a0c3be315262d215a2d439b34511/avatica/src/main/java/org/apache/calcite/avatica/remote/RemoteMeta.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/fbe19d83be71a0c3be315262d215a2d439b34511/avatica/src/main/java/org/apache/calcite/avatica/remote/RemoteMeta.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/avatica/src/main/java/org/apache/calcite/avatica/remote/RemoteMeta.java?ref=fbe19d83be71a0c3be315262d215a2d439b34511",
                "patch": "@@ -30,7 +30,8 @@\n import java.util.Map;\n \n /**\n- * Implementation of {@link Meta} for the remote driver.\n+ * Implementation of {@link org.apache.calcite.avatica.Meta} for the remote\n+ * driver.\n  */\n class RemoteMeta extends MetaImpl {\n   final Service service;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/d69f2c20c5a75977d50c182565d8e7b8e011515e",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/f98ed96f041b615dca1560b7014d112a40e43d6e",
        "message": "[CALCITE-865] Unknown table type causes NullPointerException in JdbcSchema",
        "bug_id": "calcite-avatica_4",
        "file": [
            {
                "sha": "fe61aafed3fc5d33a3f2bcc63cff76f0a156363d",
                "filename": "avatica/src/main/java/org/apache/calcite/avatica/Meta.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/d69f2c20c5a75977d50c182565d8e7b8e011515e/avatica/src/main/java/org/apache/calcite/avatica/Meta.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/d69f2c20c5a75977d50c182565d8e7b8e011515e/avatica/src/main/java/org/apache/calcite/avatica/Meta.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/avatica/src/main/java/org/apache/calcite/avatica/Meta.java?ref=d69f2c20c5a75977d50c182565d8e7b8e011515e",
                "patch": "@@ -260,6 +260,10 @@ private Pat(String s) {\n       this.s = s;\n     }\n \n+    @Override public String toString() {\n+      return \"Pat[\" + s + \"]\";\n+    }\n+\n     @JsonCreator\n     public static Pat of(@JsonProperty(\"s\") String name) {\n       return new Pat(name);"
            },
            {
                "sha": "b83c76c974fb774ba08cd5dab25c802d38fbf312",
                "filename": "core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/d69f2c20c5a75977d50c182565d8e7b8e011515e/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/d69f2c20c5a75977d50c182565d8e7b8e011515e/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java?ref=d69f2c20c5a75977d50c182565d8e7b8e011515e",
                "patch": "@@ -201,6 +201,7 @@ public Expression getExpression(SchemaPlus parentSchema, String name) {\n         // returned by Phoenix among others, maps to TableType.SYSTEM_TABLE.\n         // We know enum constants are upper-case without spaces, so we can't\n         // make things worse.\n+        //\n         // PostgreSQL returns tableTypeName==null for pg_toast* tables\n         // This can happen if you start JdbcSchema off a \"public\" PG schema\n         // The tables are not designed to be queried by users, however we do\n@@ -210,7 +211,10 @@ public Expression getExpression(SchemaPlus parentSchema, String name) {\n             ? null\n             : tableTypeName.toUpperCase().replace(' ', '_');\n         final TableType tableType =\n-            Util.enumVal(TableType.class, tableTypeName2);\n+            Util.enumVal(TableType.OTHER, tableTypeName2);\n+        if (tableType == TableType.OTHER  && tableTypeName2 != null) {\n+          System.out.println(\"Unknown table type: \" + tableTypeName2);\n+        }\n         final JdbcTable table =\n             new JdbcTable(this, catalogName, schemaName, tableName, tableType);\n         builder.put(tableName, table);"
            },
            {
                "sha": "f820c2819ce11c9fbb31d181da20c2f9163e094c",
                "filename": "core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/d69f2c20c5a75977d50c182565d8e7b8e011515e/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/d69f2c20c5a75977d50c182565d8e7b8e011515e/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java?ref=d69f2c20c5a75977d50c182565d8e7b8e011515e",
                "patch": "@@ -47,6 +47,7 @@\n import org.apache.calcite.util.Util;\n \n import com.google.common.base.Function;\n+import com.google.common.base.Preconditions;\n import com.google.common.collect.Lists;\n \n import java.sql.SQLException;\n@@ -80,7 +81,7 @@ public JdbcTable(JdbcSchema jdbcSchema, String jdbcCatalogName,\n     this.jdbcCatalogName = jdbcCatalogName;\n     this.jdbcSchemaName = jdbcSchemaName;\n     this.jdbcTableName = tableName;\n-    this.jdbcTableType = jdbcTableType;\n+    this.jdbcTableType = Preconditions.checkNotNull(jdbcTableType);\n   }\n \n   public String toString() {"
            },
            {
                "sha": "6745e21a01f8daf6824f798862f4ff4f5d8fc4fd",
                "filename": "core/src/main/java/org/apache/calcite/schema/Schema.java",
                "status": "modified",
                "additions": 87,
                "deletions": 18,
                "changes": 105,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/d69f2c20c5a75977d50c182565d8e7b8e011515e/core/src/main/java/org/apache/calcite/schema/Schema.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/d69f2c20c5a75977d50c182565d8e7b8e011515e/core/src/main/java/org/apache/calcite/schema/Schema.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/schema/Schema.java?ref=d69f2c20c5a75977d50c182565d8e7b8e011515e",
                "patch": "@@ -144,31 +144,30 @@\n \n   /** Table type. */\n   enum TableType {\n-    /** A regular table. */\n+    /** A regular table.\n+     *\n+     * <p>Used by PostgreSQL, MySQL and others. */\n     TABLE,\n \n     /** A relation whose contents are calculated by evaluating a SQL\n-     * expression. */\n+     * expression.\n+     *\n+     * <p>Used by PostgreSQL and others. */\n     VIEW,\n \n-    /** A table maintained by the system. Data dictionary tables, such as the\n-     * \"TABLES\" and \"COLUMNS\" table in the \"metamodel\" schema, examples of\n-     * system tables. */\n-    SYSTEM_TABLE,\n-\n-    /** A table that is only visible to one connection. */\n-    LOCAL_TEMPORARY,\n+    /** Foreign table.\n+     *\n+     * <p>Used by PostgreSQL. */\n+    FOREIGN_TABLE,\n \n-    /** A structure, similar to a view, that is the basis for auto-generated\n-     * materializations. It is either a single table or a collection of tables\n-     * that are joined via many-to-one relationships from a central hub table.\n-     * It is not available for queries, but is just used as an intermediate\n-     * structure during query planning. */\n-    STAR,\n+    /** Materialized view.\n+     *\n+     * <p>Used by PostgreSQL. */\n+    MATERIALIZED_VIEW,\n \n     /** Index table.\n      *\n-     * <p>Used by Apache Phoenix. */\n+     * <p>Used by Apache Phoenix, PostgreSQL. */\n     INDEX,\n \n     /** Join table.\n@@ -178,12 +177,82 @@\n \n     /** Sequence table.\n      *\n-     * <p>Used by Apache Phoenix, and others. Must have a single BIGINT column\n-     * called \"$seq\". */\n+     * <p>Used by Apache Phoenix, PostgreSQL and others.\n+     * In Phoenix, must have a single BIGINT column called \"$seq\". */\n     SEQUENCE,\n \n+    /** A structure, similar to a view, that is the basis for auto-generated\n+     * materializations. It is either a single table or a collection of tables\n+     * that are joined via many-to-one relationships from a central hub table.\n+     * It is not available for queries, but is just used as an intermediate\n+     * structure during query planning. */\n+    STAR,\n+\n     /** Stream. */\n     STREAM,\n+\n+    /** Type.\n+     *\n+     * <p>Used by PostgreSQL. */\n+    TYPE,\n+\n+    /** A table maintained by the system. Data dictionary tables, such as the\n+     * \"TABLES\" and \"COLUMNS\" table in the \"metamodel\" schema, examples of\n+     * system tables.\n+     *\n+     * <p>Used by PostgreSQL, MySQL and others. */\n+    SYSTEM_TABLE,\n+\n+    /** System view.\n+     *\n+     * <p>Used by PostgreSQL, MySQL. */\n+    SYSTEM_VIEW,\n+\n+    /** System index.\n+     *\n+     * <p>Used by PostgreSQL. */\n+    SYSTEM_INDEX,\n+\n+    /** System TOAST index.\n+     *\n+     * <p>Used by PostgreSQL. */\n+    SYSTEM_TOAST_INDEX,\n+\n+    /** System TOAST table.\n+     *\n+     * <p>Used by PostgreSQL. */\n+    SYSTEM_TOAST_TABLE,\n+\n+    /** Temporary index.\n+     *\n+     * <p>Used by PostgreSQL. */\n+    TEMPORARY_INDEX,\n+\n+    /** Temporary sequence.\n+     *\n+     * <p>Used by PostgreSQL. */\n+    TEMPORARY_SEQUENCE,\n+\n+    /** Temporary table.\n+     *\n+     * <p>Used by PostgreSQL. */\n+    TEMPORARY_TABLE,\n+\n+    /** Temporary view.\n+     *\n+     * <p>Used by PostgreSQL. */\n+    TEMPORARY_VIEW,\n+\n+    /** A table that is only visible to one connection.\n+     *\n+     * <p>Used by PostgreSQL, MySQL. */\n+    LOCAL_TEMPORARY,\n+\n+    /** Table type not known to Calcite.\n+     *\n+     * <p>If you get one of these, please fix the problem by adding an enum\n+     * value. */\n+    OTHER,\n   }\n }\n "
            },
            {
                "sha": "dbaf0a8b0383afa7406c1ef73985a674ed8f8ba2",
                "filename": "core/src/main/java/org/apache/calcite/util/Util.java",
                "status": "modified",
                "additions": 20,
                "deletions": 2,
                "changes": 22,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/d69f2c20c5a75977d50c182565d8e7b8e011515e/core/src/main/java/org/apache/calcite/util/Util.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/d69f2c20c5a75977d50c182565d8e7b8e011515e/core/src/main/java/org/apache/calcite/util/Util.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/util/Util.java?ref=d69f2c20c5a75977d50c182565d8e7b8e011515e",
                "patch": "@@ -1859,11 +1859,29 @@ public int size() {\n    * @param <T>   Enum class type\n    * @return Enum constant or null\n    */\n-  @SuppressWarnings({\"unchecked\" })\n   public static synchronized <T extends Enum<T>> T enumVal(\n       Class<T> clazz,\n       String name) {\n-    return (T) ENUM_CONSTANTS.getUnchecked(clazz).get(name);\n+    return clazz.cast(ENUM_CONSTANTS.getUnchecked(clazz).get(name));\n+  }\n+\n+  /**\n+   * Returns the value of an enumeration with a particular or default value if\n+   * not found.\n+   *\n+   * @param default_ Default value (not null)\n+   * @param name     Name of enum constant\n+   * @param <T>      Enum class type\n+   * @return         Enum constant, never null\n+   */\n+  public static synchronized <T extends Enum<T>> T enumVal(T default_,\n+      String name) {\n+    final Class<T> clazz = default_.getDeclaringClass();\n+    final T t = clazz.cast(ENUM_CONSTANTS.getUnchecked(clazz).get(name));\n+    if (t == null) {\n+      return default_;\n+    }\n+    return t;\n   }\n \n   /**"
            },
            {
                "sha": "cc7ec8ca12de1e55509be89cbfc23c37c8d9bccc",
                "filename": "core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java",
                "status": "modified",
                "additions": 35,
                "deletions": 0,
                "changes": 35,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/d69f2c20c5a75977d50c182565d8e7b8e011515e/core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/d69f2c20c5a75977d50c182565d8e7b8e011515e/core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java?ref=d69f2c20c5a75977d50c182565d8e7b8e011515e",
                "patch": "@@ -16,17 +16,25 @@\n  */\n package org.apache.calcite.test;\n \n+import org.apache.calcite.jdbc.CalciteConnection;\n+\n+import com.google.common.base.Function;\n+import com.google.common.base.Throwables;\n+\n import org.hsqldb.jdbcDriver;\n+\n import org.junit.Test;\n \n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.ResultSet;\n+import java.sql.SQLException;\n import java.sql.Statement;\n import java.util.Properties;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertThat;\n \n /**\n@@ -350,6 +358,33 @@\n         .explainContains(\"SINGLE_VALUE\")\n         .throws_(expected);\n   }\n+\n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-865\">[CALCITE-865]\n+   * Unknown table type causes NullPointerException in JdbcSchema</a>. The issue\n+   * occurred because of the \"SYSTEM_INDEX\" table type when run against\n+   * PostgreSQL. */\n+  @Test public void testMetadataTables() throws Exception {\n+    // The troublesome tables occur in PostgreSQL's system schema.\n+    final String model =\n+        JdbcTest.FOODMART_MODEL.replace(\"jdbcSchema: 'foodmart'\",\n+            \"jdbcSchema: null\");\n+    CalciteAssert.model(\n+        model)\n+        .doWithConnection(\n+            new Function<CalciteConnection, Void>() {\n+              public Void apply(CalciteConnection connection) {\n+                try {\n+                  final ResultSet resultSet =\n+                      connection.getMetaData().getTables(null, null, \"%\", null);\n+                  assertFalse(CalciteAssert.toString(resultSet).isEmpty());\n+                  return null;\n+                } catch (SQLException e) {\n+                  throw Throwables.propagate(e);\n+                }\n+              }\n+            });\n+  }\n }\n \n // End JdbcAdapterTest.java"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/b1d22c7ed929e586808f90b25df13fb86cb89546",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/d4b80bf93f28d8aac8b1997d0b8bee2da84fb99c",
        "message": "[CALCITE-509] RelMdColumnUniqueness uses ImmutableBitSet.Builder twice, gets NullPointerException",
        "bug_id": "calcite-avatica_5",
        "file": [
            {
                "sha": "146f420cd16898708fe61f1f5155d6e363f9e5f9",
                "filename": "core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java",
                "status": "modified",
                "additions": 6,
                "deletions": 8,
                "changes": 14,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/b1d22c7ed929e586808f90b25df13fb86cb89546/core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/b1d22c7ed929e586808f90b25df13fb86cb89546/core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java?ref=b1d22c7ed929e586808f90b25df13fb86cb89546",
                "patch": "@@ -171,24 +171,22 @@ public Expression record(\n    * See {@link org.apache.calcite.interpreter.Row}\n    */\n   ROW {\n-    @Override\n-    Type javaRowClass(JavaTypeFactory typeFactory, RelDataType type) {\n+    @Override Type javaRowClass(JavaTypeFactory typeFactory, RelDataType type) {\n       return Row.class;\n     }\n \n-    @Override\n-    Type javaFieldClass(JavaTypeFactory typeFactory, RelDataType type,\n+    @Override Type javaFieldClass(JavaTypeFactory typeFactory, RelDataType type,\n         int index) {\n       return Object.class;\n     }\n \n-    @Override\n-    public Expression record(Type javaRowClass, List<Expression> expressions) {\n+    @Override public Expression record(Type javaRowClass,\n+        List<Expression> expressions) {\n       return Expressions.call(BuiltInMethod.ROW_AS_COPY.method, expressions);\n     }\n \n-    @Override\n-    public Expression field(Expression expression, int field, Type fieldType) {\n+    @Override public Expression field(Expression expression, int field,\n+        Type fieldType) {\n       return RexToLixTranslator.convert(\n           Expressions.call(expression,\n               BuiltInMethod.ROW_VALUE.method,"
            },
            {
                "sha": "6a6fab663709fc23f2f538bd03d194e6a3599a62",
                "filename": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java",
                "status": "modified",
                "additions": 8,
                "deletions": 8,
                "changes": 16,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/b1d22c7ed929e586808f90b25df13fb86cb89546/core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/b1d22c7ed929e586808f90b25df13fb86cb89546/core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java?ref=b1d22c7ed929e586808f90b25df13fb86cb89546",
                "patch": "@@ -155,26 +155,26 @@ public Boolean areColumnsUnique(\n \n     // Divide up the input column mask into column masks for the left and\n     // right sides of the join\n-    ImmutableBitSet.Builder leftColumns = ImmutableBitSet.builder();\n-    ImmutableBitSet.Builder rightColumns = ImmutableBitSet.builder();\n+    ImmutableBitSet.Builder leftBuilder = ImmutableBitSet.builder();\n+    ImmutableBitSet.Builder rightBuilder = ImmutableBitSet.builder();\n     int nLeftColumns = left.getRowType().getFieldCount();\n     for (int bit : columns) {\n       if (bit < nLeftColumns) {\n-        leftColumns.set(bit);\n+        leftBuilder.set(bit);\n       } else {\n-        rightColumns.set(bit - nLeftColumns);\n+        rightBuilder.set(bit - nLeftColumns);\n       }\n     }\n \n     // If the original column mask contains columns from both the left and\n     // right hand side, then the columns are unique if and only if they're\n     // unique for their respective join inputs\n+    final ImmutableBitSet leftColumns = leftBuilder.build();\n     Boolean leftUnique =\n-        RelMetadataQuery.areColumnsUnique(left, leftColumns.build(),\n-            ignoreNulls);\n+        RelMetadataQuery.areColumnsUnique(left, leftColumns, ignoreNulls);\n+    final ImmutableBitSet rightColumns = rightBuilder.build();\n     Boolean rightUnique =\n-        RelMetadataQuery.areColumnsUnique(right, rightColumns.build(),\n-            ignoreNulls);\n+        RelMetadataQuery.areColumnsUnique(right, rightColumns, ignoreNulls);\n     if ((leftColumns.cardinality() > 0)\n         && (rightColumns.cardinality() > 0)) {\n       if ((leftUnique == null) || (rightUnique == null)) {"
            },
            {
                "sha": "c152bac1cd2981f4913330dd94c46384b0f8891d",
                "filename": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/b1d22c7ed929e586808f90b25df13fb86cb89546/core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/b1d22c7ed929e586808f90b25df13fb86cb89546/core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java?ref=b1d22c7ed929e586808f90b25df13fb86cb89546",
                "patch": "@@ -199,7 +199,7 @@ public static double computeSemiJoinSelectivity(\n       selectivity =\n           Math.pow(\n               0.1,\n-              dimKeyBuilder.cardinality());\n+              dimKeys.cardinality());\n     } else if (selectivity > 1.0) {\n       selectivity = 1.0;\n     }"
            },
            {
                "sha": "ab101b7ac953c508ff4cc298d8bc51711db07f81",
                "filename": "core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java",
                "status": "modified",
                "additions": 22,
                "deletions": 0,
                "changes": 22,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/b1d22c7ed929e586808f90b25df13fb86cb89546/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/b1d22c7ed929e586808f90b25df13fb86cb89546/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java?ref=b1d22c7ed929e586808f90b25df13fb86cb89546",
                "patch": "@@ -16,9 +16,13 @@\n  */\n package org.apache.calcite.util;\n \n+import org.apache.calcite.linq4j.Linq4j;\n import org.apache.calcite.runtime.Utilities;\n \n import com.google.common.base.Function;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n \n import java.io.Serializable;\n@@ -190,6 +194,21 @@ private static int wordIndex(int bitIndex) {\n     return bitIndex >> ADDRESS_BITS_PER_WORD;\n   }\n \n+  /** Computes the power set (set of all sets) of this bit set. */\n+  public Iterable<ImmutableBitSet> powerSet() {\n+    List<List<ImmutableBitSet>> singletons = Lists.newArrayList();\n+    for (Integer bit : this) {\n+      singletons.add(\n+          ImmutableList.of(ImmutableBitSet.of(), ImmutableBitSet.of(bit)));\n+    }\n+    return Iterables.transform(Linq4j.product(singletons),\n+        new Function<List<ImmutableBitSet>, ImmutableBitSet>() {\n+          public ImmutableBitSet apply(List<ImmutableBitSet> input) {\n+            return ImmutableBitSet.union(input);\n+          }\n+        });\n+  }\n+\n   /**\n    * Returns the value of the bit with the specified index. The value\n    * is {@code true} if the bit with the index {@code bitIndex}\n@@ -796,6 +815,9 @@ public boolean wouldEqual(ImmutableBitSet bitSet) {\n \n     /** Returns the number of set bits. */\n     public int cardinality() {\n+      if (words == null) {\n+        throw new IllegalArgumentException(\"can only use builder once\");\n+      }\n       return countBits(words);\n     }\n "
            },
            {
                "sha": "3782957d7597fa8c76179805fb9279eb9a3443bd",
                "filename": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java",
                "status": "modified",
                "additions": 22,
                "deletions": 0,
                "changes": 22,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/b1d22c7ed929e586808f90b25df13fb86cb89546/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/b1d22c7ed929e586808f90b25df13fb86cb89546/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java?ref=b1d22c7ed929e586808f90b25df13fb86cb89546",
                "patch": "@@ -484,6 +484,12 @@ private void checkFilterSelectivity(\n         DEFAULT_SELECTIVITY);\n   }\n \n+  @Test public void testSelectivityJoin() {\n+    checkFilterSelectivity(\n+        \"select * from emp join dept using (deptno) where ename = 'foo'\",\n+        DEFAULT_EQUAL_SELECTIVITY);\n+  }\n+\n   private void checkRelSelectivity(\n       RelNode rel,\n       double expected) {\n@@ -546,6 +552,22 @@ private void checkRelSelectivity(\n     assertTrue(result == null);\n   }\n \n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-509\">[CALCITE-509]\n+   * \"RelMdColumnUniqueness uses ImmutableBitSet.Builder twice, gets\n+   * NullPointerException\"</a>. */\n+  @Test public void testJoinUniqueKeys() {\n+    RelNode rel = convertSql(\"select * from emp join dept using (deptno)\");\n+    Set<ImmutableBitSet> result = RelMetadataQuery.getUniqueKeys(rel);\n+    assertThat(result.toString(), equalTo(\"[]\"));\n+    final ImmutableBitSet allCols =\n+        ImmutableBitSet.range(0, rel.getRowType().getFieldCount());\n+    for (ImmutableBitSet integers : allCols.powerSet()) {\n+      Boolean result2 = RelMetadataQuery.areColumnsUnique(rel, integers);\n+      assertTrue(result2 == null || !result2);\n+    }\n+  }\n+\n   @Test public void testCustomProvider() {\n     final List<String> buf = new ArrayList<String>();\n     ColTypeImpl.THREAD_LIST.set(buf);"
            },
            {
                "sha": "29b6aba4bba8fc1d0e26367dfc5d54b5fe7115d8",
                "filename": "core/src/test/java/org/apache/calcite/util/ImmutableBitSetTest.java",
                "status": "modified",
                "additions": 18,
                "deletions": 0,
                "changes": 18,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/b1d22c7ed929e586808f90b25df13fb86cb89546/core/src/test/java/org/apache/calcite/util/ImmutableBitSetTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/b1d22c7ed929e586808f90b25df13fb86cb89546/core/src/test/java/org/apache/calcite/util/ImmutableBitSetTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/util/ImmutableBitSetTest.java?ref=b1d22c7ed929e586808f90b25df13fb86cb89546",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.calcite.runtime.Utilities;\n \n+import com.google.common.collect.Iterables;\n import com.google.common.collect.Maps;\n \n import org.junit.Test;\n@@ -378,6 +379,23 @@ private void assertToIterBitSet(String expected, ImmutableBitSet bitSet) {\n             \"{0={3, 4, 12}, 1={}, 2={7}, 3={3, 4, 12}, 4={4, 12}, 5={}, 6={}, 7={7}, 8={}, 9={}, 10={}, 11={}, 12={4, 12}}\"));\n     assertThat(\"argument modified\", map.toString(), equalTo(original));\n   }\n+\n+  @Test public void testPowerSet() {\n+    final ImmutableBitSet empty = ImmutableBitSet.of();\n+    assertThat(Iterables.size(empty.powerSet()), equalTo(1));\n+    assertThat(empty.powerSet().toString(), equalTo(\"[{}]\"));\n+\n+    final ImmutableBitSet single = ImmutableBitSet.of(2);\n+    assertThat(Iterables.size(single.powerSet()), equalTo(2));\n+    assertThat(single.powerSet().toString(), equalTo(\"[{}, {2}]\"));\n+\n+    final ImmutableBitSet two = ImmutableBitSet.of(2, 10);\n+    assertThat(Iterables.size(two.powerSet()), equalTo(4));\n+    assertThat(two.powerSet().toString(), equalTo(\"[{}, {10}, {2}, {2, 10}]\"));\n+\n+    final ImmutableBitSet seventeen = ImmutableBitSet.range(3, 20);\n+    assertThat(Iterables.size(seventeen.powerSet()), equalTo(131072));\n+  }\n }\n \n // End ImmutableBitSetTest.java"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/de0bfaade674ec325c5b6a5458f2da8ac6fcd3de",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/539253562067dcea9609c766fa7b6f413e1ac001",
        "message": "[CALCITE-403] Enumerable gives NullPointerException with NOT on nullable expression",
        "bug_id": "calcite-avatica_6",
        "file": [
            {
                "sha": "b3166ec08d4b961ef6f8156502644d49c5a65600",
                "filename": "core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java",
                "status": "modified",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/de0bfaade674ec325c5b6a5458f2da8ac6fcd3de/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/de0bfaade674ec325c5b6a5458f2da8ac6fcd3de/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java?ref=de0bfaade674ec325c5b6a5458f2da8ac6fcd3de",
                "patch": "@@ -756,6 +756,18 @@ private static Expression implementNullSemantics(\n       }\n       list.add(implementCall(translator, call, implementor, nullAs));\n       return Expressions.foldAnd(list);\n+    case TRUE:\n+      // v0 == null || v1 == null || f(v0, v1)\n+      for (Ord<RexNode> operand : Ord.zip(call.getOperands())) {\n+        if (translator.isNullable(operand.e)) {\n+          list.add(\n+              translator.translate(\n+                  operand.e, NullAs.IS_NULL));\n+          translator = translator.setNullable(operand.e, false);\n+        }\n+      }\n+      list.add(implementCall(translator, call, implementor, nullAs));\n+      return Expressions.foldOr(list);\n     case NOT_POSSIBLE:\n       // Need to transmit to the implementor the fact that call cannot\n       // return null. In particular, it should return a primitive (e.g."
            },
            {
                "sha": "424bbe01f790ce373ee9d39b15d97c548a9af83a",
                "filename": "core/src/test/java/org/apache/calcite/test/JdbcTest.java",
                "status": "modified",
                "additions": 13,
                "deletions": 5,
                "changes": 18,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/de0bfaade674ec325c5b6a5458f2da8ac6fcd3de/core/src/test/java/org/apache/calcite/test/JdbcTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/de0bfaade674ec325c5b6a5458f2da8ac6fcd3de/core/src/test/java/org/apache/calcite/test/JdbcTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/JdbcTest.java?ref=de0bfaade674ec325c5b6a5458f2da8ac6fcd3de",
                "patch": "@@ -2977,23 +2977,31 @@ private void checkNullableTimestamp(CalciteAssert.Config config) {\n \n   /** Test case for\n    * <a href=\"https://issues.apache.org/jira/browse/CALCITE-403\">CALCITE-403</a>,\n-   * \"Enumerable gives NullPointerException with HAVING on nullable\n+   * \"Enumerable gives NullPointerException with NOT on nullable\n    * expression\". */\n-  @Ignore(\"CALCITE-403\")\n   @Test public void testHavingNot() throws IOException {\n     withFoodMartQuery(6597).runs();\n   }\n \n   /** Minimal case of {@link #testHavingNot()}. */\n-  @Ignore(\"CALCITE-403\")\n   @Test public void testHavingNot2() throws IOException {\n     CalciteAssert.that()\n         .with(CalciteAssert.Config.FOODMART_CLONE)\n         .query(\"select 1\\n\"\n             + \"from \\\"store\\\"\\n\"\n             + \"group by \\\"store\\\".\\\"store_street_address\\\"\\n\"\n-            + \"having NOT (sum(\\\"store\\\".\\\"grocery_sqft\\\") < 10000)\")\n-        .returnsCount(0);\n+            + \"having NOT (sum(\\\"store\\\".\\\"grocery_sqft\\\") < 20000)\")\n+        .returnsCount(10);\n+  }\n+\n+  @Test public void testWhereNot() throws IOException {\n+    CalciteAssert.that()\n+        .with(CalciteAssert.Config.FOODMART_CLONE)\n+        .query(\"select 1\\n\"\n+            + \"from \\\"store\\\"\\n\"\n+            + \"where NOT (\\\"store\\\".\\\"grocery_sqft\\\" < 22000)\\n\"\n+            + \"group by \\\"store\\\".\\\"store_street_address\\\"\\n\")\n+        .returnsCount(8);\n   }\n \n   /** Query that reads no columns from either underlying table. */"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/c57d80725766c84834a35e4f3b68feb38540b66c",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/23396f0637724205ae35a89972bb61bc60d3e946",
        "message": "[CALCITE-801] NullPointerException using USING on table alias with column aliases\n\nFix an issue numbering the fields in a RelCrossType",
        "bug_id": "calcite-avatica_7",
        "file": [
            {
                "sha": "ba2ac856877d9d0b207c8d2055ba06905061a34b",
                "filename": "core/src/main/java/org/apache/calcite/rel/type/RelCrossType.java",
                "status": "modified",
                "additions": 0,
                "deletions": 1,
                "changes": 1,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/c57d80725766c84834a35e4f3b68feb38540b66c/core/src/main/java/org/apache/calcite/rel/type/RelCrossType.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/c57d80725766c84834a35e4f3b68feb38540b66c/core/src/main/java/org/apache/calcite/rel/type/RelCrossType.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/rel/type/RelCrossType.java?ref=c57d80725766c84834a35e4f3b68feb38540b66c",
                "patch": "@@ -44,7 +44,6 @@ public RelCrossType(\n       List<RelDataTypeField> fields) {\n     super(fields);\n     this.types = ImmutableList.copyOf(types);\n-    assert types != null;\n     assert types.size() >= 1;\n     for (RelDataType type : types) {\n       assert !(type instanceof RelCrossType);"
            },
            {
                "sha": "46f8ba3d7871179f3c2b433cfe62f9dcb8b7cf96",
                "filename": "core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java",
                "status": "modified",
                "additions": 23,
                "deletions": 25,
                "changes": 48,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/c57d80725766c84834a35e4f3b68feb38540b66c/core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/c57d80725766c84834a35e4f3b68feb38540b66c/core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java?ref=c57d80725766c84834a35e4f3b68feb38540b66c",
                "patch": "@@ -126,12 +126,10 @@ public RelDataType createJavaType(Class clazz) {\n   public RelDataType createJoinType(RelDataType... types) {\n     assert types != null;\n     assert types.length >= 1;\n-    final List<RelDataType> flattenedTypes =\n-        getTypeArray(ImmutableList.copyOf(types));\n+    final List<RelDataType> flattenedTypes = new ArrayList<>();\n+    getTypeList(ImmutableList.copyOf(types), flattenedTypes);\n     return canonize(\n-        new RelCrossType(\n-            flattenedTypes,\n-            getFieldArray(flattenedTypes)));\n+        new RelCrossType(flattenedTypes, getFieldList(flattenedTypes)));\n   }\n \n   // implement RelDataTypeFactory\n@@ -359,44 +357,39 @@ protected RelDataType canonize(\n   }\n \n   /**\n-   * Returns an array of the fields in an array of types.\n+   * Returns a list of the fields in a list of types.\n    */\n-  private static List<RelDataTypeField> getFieldArray(List<RelDataType> types) {\n-    ArrayList<RelDataTypeField> fieldList =\n-        new ArrayList<RelDataTypeField>();\n+  private static List<RelDataTypeField> getFieldList(List<RelDataType> types) {\n+    final List<RelDataTypeField> fieldList = new ArrayList<>();\n     for (RelDataType type : types) {\n       addFields(type, fieldList);\n     }\n     return fieldList;\n   }\n \n   /**\n-   * Returns an array of all atomic types in an array.\n+   * Returns a list of all atomic types in a list.\n    */\n-  private static List<RelDataType> getTypeArray(List<RelDataType> types) {\n-    List<RelDataType> flatTypes = new ArrayList<RelDataType>();\n-    getTypeArray(types, flatTypes);\n-    return flatTypes;\n-  }\n-\n-  private static void getTypeArray(\n-      List<RelDataType> inTypes,\n+  private static void getTypeList(\n+      ImmutableList<RelDataType> inTypes,\n       List<RelDataType> flatTypes) {\n     for (RelDataType inType : inTypes) {\n       if (inType instanceof RelCrossType) {\n-        getTypeArray(((RelCrossType) inType).types, flatTypes);\n+        getTypeList(((RelCrossType) inType).types, flatTypes);\n       } else {\n         flatTypes.add(inType);\n       }\n     }\n   }\n \n   /**\n-   * Adds all fields in <code>type</code> to <code>fieldList</code>.\n+   * Adds all fields in <code>type</code> to <code>fieldList</code>,\n+   * renumbering the fields (if necessary) to ensure that their index\n+   * matches their position in the list.\n    */\n   private static void addFields(\n       RelDataType type,\n-      ArrayList<RelDataTypeField> fieldList) {\n+      List<RelDataTypeField> fieldList) {\n     if (type instanceof RelCrossType) {\n       final RelCrossType crossType = (RelCrossType) type;\n       for (RelDataType type1 : crossType.types) {\n@@ -405,6 +398,10 @@ private static void addFields(\n     } else {\n       List<RelDataTypeField> fields = type.getFieldList();\n       for (RelDataTypeField field : fields) {\n+        if (field.getIndex() != fieldList.size()) {\n+          field = new RelDataTypeFieldImpl(field.getName(), fieldList.size(),\n+              field.getType());\n+        }\n         fieldList.add(field);\n       }\n     }\n@@ -415,8 +412,7 @@ public static boolean isJavaType(RelDataType t) {\n   }\n \n   private List<RelDataTypeFieldImpl> fieldsOf(Class clazz) {\n-    final List<RelDataTypeFieldImpl> list =\n-        new ArrayList<RelDataTypeFieldImpl>();\n+    final List<RelDataTypeFieldImpl> list = new ArrayList<>();\n     for (Field field : clazz.getFields()) {\n       if (Modifier.isStatic(field.getModifiers())) {\n         continue;\n@@ -436,8 +432,10 @@ public static boolean isJavaType(RelDataType t) {\n   }\n \n   /**\n-   * implement RelDataTypeFactory with SQL 2003 compliant behavior. Let p1, s1\n-   * be the precision and scale of the first operand Let p2, s2 be the\n+   * {@inheritDoc}\n+   *\n+   * <p>Implement RelDataTypeFactory with SQL 2003 compliant behavior. Let p1,\n+   * s1 be the precision and scale of the first operand Let p2, s2 be the\n    * precision and scale of the second operand Let p, s be the precision and\n    * scale of the result, Then the result type is a decimal with:\n    *"
            },
            {
                "sha": "e733d137832fde6705c4b864885a3db1be99e2bd",
                "filename": "core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java",
                "status": "modified",
                "additions": 32,
                "deletions": 33,
                "changes": 65,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/c57d80725766c84834a35e4f3b68feb38540b66c/core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/c57d80725766c84834a35e4f3b68feb38540b66c/core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java?ref=c57d80725766c84834a35e4f3b68feb38540b66c",
                "patch": "@@ -562,8 +562,8 @@ protected boolean checkConvertedRowType(\n     RelDataType validatedRowType = validator.getValidatedNodeType(query);\n     validatedRowType = uniquifyFields(validatedRowType);\n \n-    return RelOptUtil.equal(\n-        \"validated row type\", validatedRowType, \"converted row type\", convertedRowType, false);\n+    return RelOptUtil.equal(\"validated row type\", validatedRowType,\n+        \"converted row type\", convertedRowType, false);\n   }\n \n   protected RelDataType uniquifyFields(RelDataType rowType) {\n@@ -1910,16 +1910,22 @@ protected void convertFrom(\n       RelNode rightRel = rightBlackboard.root;\n       JoinRelType convertedJoinType = convertJoinType(joinType);\n       RexNode conditionExp;\n+      final SqlValidatorNamespace leftNamespace = validator.getNamespace(left);\n+      final SqlValidatorNamespace rightNamespace = validator.getNamespace(right);\n       if (isNatural) {\n+        final RelDataType leftRowType = leftNamespace.getRowType();\n+        final RelDataType rightRowType = rightNamespace.getRowType();\n         final List<String> columnList =\n-            SqlValidatorUtil.deriveNaturalJoinColumnList(\n-                validator.getNamespace(left).getRowType(),\n-                validator.getNamespace(right).getRowType());\n-        conditionExp = convertUsing(leftRel, rightRel, columnList);\n+            SqlValidatorUtil.deriveNaturalJoinColumnList(leftRowType,\n+                rightRowType);\n+        conditionExp = convertUsing(leftNamespace, rightNamespace,\n+            columnList);\n       } else {\n         conditionExp =\n             convertJoinCondition(\n                 fromBlackboard,\n+                leftNamespace,\n+                rightNamespace,\n                 join.getCondition(),\n                 join.getConditionType(),\n                 leftRel,\n@@ -2253,8 +2259,9 @@ private boolean isSubQueryNonCorrelated(RelNode subq, Blackboard bb) {\n     return Collections.emptyList();\n   }\n \n-  private RexNode convertJoinCondition(\n-      Blackboard bb,\n+  private RexNode convertJoinCondition(Blackboard bb,\n+      SqlValidatorNamespace leftNamespace,\n+      SqlValidatorNamespace rightNamespace,\n       SqlNode condition,\n       JoinConditionType conditionType,\n       RelNode leftRel,\n@@ -2276,7 +2283,7 @@ private RexNode convertJoinCondition(\n         String name = id.getSimple();\n         nameList.add(name);\n       }\n-      return convertUsing(leftRel, rightRel, nameList);\n+      return convertUsing(leftNamespace, rightNamespace, nameList);\n     default:\n       throw Util.unexpected(conditionType);\n     }\n@@ -2287,37 +2294,29 @@ private RexNode convertJoinCondition(\n    * from NATURAL JOIN. \"a JOIN b USING (x, y)\" becomes \"a.x = b.x AND a.y =\n    * b.y\". Returns null if the column list is empty.\n    *\n-   * @param leftRel  Left input to the join\n-   * @param rightRel Right input to the join\n+   * @param leftNamespace Namespace of left input to join\n+   * @param rightNamespace Namespace of right input to join\n    * @param nameList List of column names to join on\n    * @return Expression to match columns from name list, or true if name list\n    * is empty\n    */\n-  private RexNode convertUsing(\n-      RelNode leftRel,\n-      RelNode rightRel,\n+  private RexNode convertUsing(SqlValidatorNamespace leftNamespace,\n+      SqlValidatorNamespace rightNamespace,\n       List<String> nameList) {\n     final List<RexNode> list = Lists.newArrayList();\n     for (String name : nameList) {\n-      final RelDataType leftRowType = leftRel.getRowType();\n-      RelDataTypeField leftField = catalogReader.field(leftRowType, name);\n-      RexNode left =\n-          rexBuilder.makeInputRef(\n-              leftField.getType(),\n-              leftField.getIndex());\n-      final RelDataType rightRowType = rightRel.getRowType();\n-      RelDataTypeField rightField =\n-          catalogReader.field(rightRowType, name);\n-      RexNode right =\n-          rexBuilder.makeInputRef(\n-              rightField.getType(),\n-              leftRowType.getFieldList().size() + rightField.getIndex());\n-      RexNode equalsCall =\n-          rexBuilder.makeCall(\n-              SqlStdOperatorTable.EQUALS,\n-              left,\n-              right);\n-      list.add(equalsCall);\n+      List<RexNode> operands = new ArrayList<>();\n+      int offset = 0;\n+      for (SqlValidatorNamespace n : ImmutableList.of(leftNamespace,\n+          rightNamespace)) {\n+        final RelDataType rowType = n.getRowType();\n+        final RelDataTypeField field = catalogReader.field(rowType, name);\n+        operands.add(\n+            rexBuilder.makeInputRef(field.getType(),\n+                offset + field.getIndex()));\n+        offset += rowType.getFieldList().size();\n+      }\n+      list.add(rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, operands));\n     }\n     return RexUtil.composeConjunction(rexBuilder, list, false);\n   }"
            },
            {
                "sha": "ee7f2c98947cb4906bfb21387cf6d6823c15b487",
                "filename": "core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java",
                "status": "modified",
                "additions": 26,
                "deletions": 13,
                "changes": 39,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/c57d80725766c84834a35e4f3b68feb38540b66c/core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/c57d80725766c84834a35e4f3b68feb38540b66c/core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java?ref=c57d80725766c84834a35e4f3b68feb38540b66c",
                "patch": "@@ -151,6 +151,19 @@ protected final void check(\n         \"${plan}\");\n   }\n \n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-801\">[CALCITE-801]\n+   * NullPointerException using USING on table alias with column\n+   * aliases</a>. */\n+  @Test public void testValuesUsing() {\n+    check(\"select d.deptno, min(e.empid) as empid\\n\"\n+            + \"from (values (100, 'Bill', 1)) as e(empid, name, deptno)\\n\"\n+            + \"join (values (1, 'LeaderShip')) as d(deptno, name)\\n\"\n+            + \"  using (deptno)\\n\"\n+            + \"group by d.deptno\",\n+        \"${plan}\");\n+  }\n+\n   @Test public void testJoinNatural() {\n     check(\n         \"SELECT * FROM emp NATURAL JOIN dept\",\n@@ -1198,7 +1211,7 @@ protected final void check(\n   @Test public void testSubqueryLimitOne() {\n     sql(\"select deptno\\n\"\n         + \"from EMP\\n\"\n-        + \"where deptno > (select deptno \\n\"\n+        + \"where deptno > (select deptno\\n\"\n         + \"from EMP order by deptno limit 1)\")\n         .convertsTo(\"${plan}\");\n   }\n@@ -1222,10 +1235,10 @@ protected final void check(\n    * Scan HAVING clause for sub-queries and IN-lists</a> relating to IN.\n    */\n   @Test public void testHavingAggrFunctionIn() {\n-    sql(\"select deptno \\n\"\n-        + \"from emp \\n\"\n-        + \"group by deptno \\n\"\n-        + \"having sum(case when deptno in (1, 2) then 0 else 1 end) + \\n\"\n+    sql(\"select deptno\\n\"\n+        + \"from emp\\n\"\n+        + \"group by deptno\\n\"\n+        + \"having sum(case when deptno in (1, 2) then 0 else 1 end) +\\n\"\n         + \"sum(case when deptno in (3, 4) then 0 else 1 end) > 10\")\n         .convertsTo(\"${plan}\");\n   }\n@@ -1237,14 +1250,14 @@ protected final void check(\n    * the HAVING clause.\n    */\n   @Test public void testHavingInSubqueryWithAggrFunction() {\n-    sql(\"select sal \\n\"\n-        + \"from emp \\n\"\n-        + \"group by sal \\n\"\n-        + \"having sal in \\n\"\n-            + \"(select deptno \\n\"\n-            + \"from dept \\n\"\n-            + \"group by deptno \\n\"\n-            + \"having sum(deptno) > 0)\")\n+    sql(\"select sal\\n\"\n+        + \"from emp\\n\"\n+        + \"group by sal\\n\"\n+        + \"having sal in (\\n\"\n+        + \"  select deptno\\n\"\n+        + \"  from dept\\n\"\n+        + \"  group by deptno\\n\"\n+        + \"  having sum(deptno) > 0)\")\n         .convertsTo(\"${plan}\");\n   }\n "
            },
            {
                "sha": "1130160e08c1a39714814b50f0086e0781d23add",
                "filename": "core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml",
                "status": "modified",
                "additions": 47,
                "deletions": 26,
                "changes": 73,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/c57d80725766c84834a35e4f3b68feb38540b66c/core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/c57d80725766c84834a35e4f3b68feb38540b66c/core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml?ref=c57d80725766c84834a35e4f3b68feb38540b66c",
                "patch": "@@ -2438,7 +2438,7 @@ LogicalAggregate(group=[{0}], EXPR$1=[SUM($1) FILTER $2], EXPR$2=[COUNT()])\n         <Resource name=\"sql\">\n             <![CDATA[select deptno\n from EMP\n-where deptno > (select min(deptno) * 2 + 10 from EMP]]>\n+where deptno > (select min(deptno) * 2 + 10 from EMP)]]>\n         </Resource>\n         <Resource name=\"plan\">\n             <![CDATA[\n@@ -2508,7 +2508,7 @@ LogicalProject(DEPTNO=[$7])\n from emp\n group by deptno\n having sum(case when deptno in (1, 2) then 0 else 1 end) +\n-sum(case when deptno in (3, 4) then 0 else 1 end) > 10)]]>\n+sum(case when deptno in (3, 4) then 0 else 1 end) > 10]]>\n         </Resource>\n         <Resource name=\"plan\">\n             <![CDATA[\n@@ -2525,11 +2525,11 @@ LogicalProject(DEPTNO=[$0])\n             <![CDATA[select sal\n from emp\n group by sal\n-having sal in\n-(select deptno\n-from dept\n-group by deptno\n-having sum(deptno) > 0)]]>\n+having sal in (\n+  select deptno\n+  from dept\n+  group by deptno\n+  having sum(deptno) > 0)]]>\n         </Resource>\n         <Resource name=\"plan\">\n             <![CDATA[\n@@ -2633,9 +2633,10 @@ LogicalTableModify(table=[[CATALOG, SALES, EMP]], operation=[INSERT], updateColu\n     </TestCase>\n     <TestCase name=\"testWindowAggWithGroupBy\">\n         <Resource name=\"sql\">\n-            <![CDATA[select min(deptno), rank() over (order by empno)\n-            max(empno) over (partition by deptno)\n-            from emp group by deptno, empno]]>\n+            <![CDATA[select min(deptno), rank() over (order by empno),\n+max(empno) over (partition by deptno)\n+from emp group by deptno, empno\n+]]>\n         </Resource>\n         <Resource name=\"plan\">\n             <![CDATA[\n@@ -2646,13 +2647,14 @@ LogicalProject(EXPR$0=[$2], EXPR$1=[RANK() OVER (ORDER BY $1 RANGE BETWEEN UNBOU\n ]]>\n         </Resource>\n     </TestCase>\n-        <TestCase name=\"testWindowAggWithGroupByAndJoin\">\n+    <TestCase name=\"testWindowAggWithGroupByAndJoin\">\n         <Resource name=\"sql\">\n             <![CDATA[select min(d.deptno), rank() over (order by e.empno),\n-            max(e.empno) over (partition by e.deptno)\n-            from emp e, dept d\n-            where e.deptno = d.deptno\n-            group by d.deptno, e.empno, e.deptno]]>\n+ max(e.empno) over (partition by e.deptno)\n+from emp e, dept d\n+where e.deptno = d.deptno\n+group by d.deptno, e.empno, e.deptno\n+]]>\n         </Resource>\n         <Resource name=\"plan\">\n             <![CDATA[\n@@ -2669,9 +2671,10 @@ LogicalProject(EXPR$0=[$3], EXPR$1=[RANK() OVER (ORDER BY $1 RANGE BETWEEN UNBOU\n     <TestCase name=\"testWindowAggWithGroupByAndHaving\">\n         <Resource name=\"sql\">\n             <![CDATA[select min(deptno), rank() over (order by empno),\n-            max(empno) over (partition by deptno)\n-            from emp group by deptno, empno\n-            having empno < 10 and min(deptno) < 20]]>\n+max(empno) over (partition by deptno)\n+from emp group by deptno, empno\n+having empno < 10 and min(deptno) < 20\n+]]>\n         </Resource>\n         <Resource name=\"plan\">\n             <![CDATA[\n@@ -2684,14 +2687,14 @@ LogicalProject(EXPR$0=[$2], EXPR$1=[RANK() OVER (ORDER BY $1 RANGE BETWEEN UNBOU\n         </Resource>\n     </TestCase>\n     <TestCase name=\"testWindowAggInSubqueryJoin\">\n-    <Resource name=\"sql\">\n-            <![CDATA[select T.x, T.y, T.z,\n-        emp.empno from (select min(deptno) as x,\n-        rank() over (order by empno) as y,\n-        max(empno) over (partition by deptno) as z\n-        from emp group by deptno, empno) as T\n-        inner join emp on T.x = emp.deptno\n-        and T.y = emp.empno]]>\n+        <Resource name=\"sql\">\n+            <![CDATA[select T.x, T.y, T.z, emp.empno from (select min(deptno) as x,\n+   rank() over (order by empno) as y,\n+   max(empno) over (partition by deptno) as z\n+   from emp group by deptno, empno) as T\n+ inner join emp on T.x = emp.deptno\n+ and T.y = emp.empno\n+]]>\n         </Resource>\n         <Resource name=\"plan\">\n             <![CDATA[\n@@ -2702,6 +2705,24 @@ LogicalProject(X=[$0], Y=[$1], Z=[$2], EMPNO=[$3])\n         LogicalProject(DEPTNO=[$7], EMPNO=[$0])\n           LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n     LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+]]>\n+        </Resource>\n+    </TestCase>\n+    <TestCase name=\"testValuesUsing\">\n+        <Resource name=\"sql\">\n+            <![CDATA[select d.deptno, min(e.empid) as empid\n+from (values (100, 'Bill', 1)) as e(empid, name, deptno)\n+join (values (1, 'LeaderShip')) as d(deptno, name)\n+  using (deptno)\n+group by d.deptno]]>\n+        </Resource>\n+        <Resource name=\"plan\">\n+            <![CDATA[\n+LogicalAggregate(group=[{0}], EMPID=[MIN($1)])\n+  LogicalProject(DEPTNO=[$3], EXPR$0=[$0])\n+    LogicalJoin(condition=[=($2, $3)], joinType=[inner])\n+      LogicalValues(tuples=[[{ 100, 'Bill', 1 }]])\n+      LogicalValues(tuples=[[{ 1, 'LeaderShip' }]])\n ]]>\n         </Resource>\n     </TestCase>"
            },
            {
                "sha": "83cfb7c78623e1e27c8f69ebeb9e308f993211ac",
                "filename": "core/src/test/resources/sql/join.oq",
                "status": "modified",
                "additions": 20,
                "deletions": 0,
                "changes": 20,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/c57d80725766c84834a35e4f3b68feb38540b66c/core/src/test/resources/sql/join.oq",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/c57d80725766c84834a35e4f3b68feb38540b66c/core/src/test/resources/sql/join.oq",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/resources/sql/join.oq?ref=c57d80725766c84834a35e4f3b68feb38540b66c",
                "patch": "@@ -235,4 +235,24 @@ EnumerableCalc(expr#0..3=[{inputs}], DEPTNO=[$t2], DEPTNO0=[$t0])\n       EnumerableTableScan(table=[[scott, EMP]])\n !plan\n \n+### [CALCITE-801] NullPointerException using USING on table alias with column aliases\n+select *\n+from (values (100, 'Bill', 1),\n+             (200, 'Eric', 1),\n+             (150, 'Sebastian', 3)) as e(empid, name, deptno)\n+join (values (1, 'LeaderShip'),\n+             (2, 'TestGroup'),\n+             (3, 'Development')) as d(deptno, name)\n+using (deptno);\n++-------+-----------+--------+---------+-------------+\n+| EMPID | NAME      | DEPTNO | DEPTNO0 | NAME0       |\n++-------+-----------+--------+---------+-------------+\n+|   100 | Bill      |      1 |       1 | LeaderShip  |\n+|   150 | Sebastian |      3 |       3 | Development |\n+|   200 | Eric      |      1 |       1 | LeaderShip  |\n++-------+-----------+--------+---------+-------------+\n+(3 rows)\n+\n+!ok\n+\n # End join.oq"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/a55e5eb4b3ca9f1afa6e9dbeef466fa78f66812f",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/bc40bc06a1331394c95673034bedbb46f908fb13",
        "message": "[CALCITE-1595] RelBuilder.call throws NullPointerException if argument types are invalid (Jess Balint)\n\nNow, both versions of RelBuilder.call() use the same type validation;\npreviously the Iterable variant bypassed validation.\n\nClose apache/calcite#363",
        "bug_id": "calcite-avatica_8",
        "file": [
            {
                "sha": "2b3a54588ff2715f7d2e36079248732d5379d896",
                "filename": "core/src/main/java/org/apache/calcite/tools/RelBuilder.java",
                "status": "modified",
                "additions": 6,
                "deletions": 3,
                "changes": 9,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/a55e5eb4b3ca9f1afa6e9dbeef466fa78f66812f/core/src/main/java/org/apache/calcite/tools/RelBuilder.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/a55e5eb4b3ca9f1afa6e9dbeef466fa78f66812f/core/src/main/java/org/apache/calcite/tools/RelBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/tools/RelBuilder.java?ref=a55e5eb4b3ca9f1afa6e9dbeef466fa78f66812f",
                "patch": "@@ -513,8 +513,12 @@ public RexNode dot(RexNode node, int fieldOrdinal) {\n \n   /** Creates a call to a scalar operator. */\n   public RexNode call(SqlOperator operator, RexNode... operands) {\n+    return call(operator, ImmutableList.copyOf(operands));\n+  }\n+\n+  /** Creates a call to a scalar operator. */\n+  private RexNode call(SqlOperator operator, List<RexNode> operandList) {\n     final RexBuilder builder = cluster.getRexBuilder();\n-    final List<RexNode> operandList = ImmutableList.copyOf(operands);\n     final RelDataType type = builder.deriveReturnType(operator, operandList);\n     if (type == null) {\n       throw new IllegalArgumentException(\"cannot derive type: \" + operator\n@@ -526,8 +530,7 @@ public RexNode call(SqlOperator operator, RexNode... operands) {\n   /** Creates a call to a scalar operator. */\n   public RexNode call(SqlOperator operator,\n       Iterable<? extends RexNode> operands) {\n-    return cluster.getRexBuilder().makeCall(operator,\n-        ImmutableList.copyOf(operands));\n+    return call(operator, ImmutableList.copyOf(operands));\n   }\n \n   /** Creates an AND. */"
            },
            {
                "sha": "cabbcdc1b82e5843525383beb358b492e412265e",
                "filename": "core/src/test/java/org/apache/calcite/test/RelBuilderTest.java",
                "status": "modified",
                "additions": 25,
                "deletions": 0,
                "changes": 25,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/a55e5eb4b3ca9f1afa6e9dbeef466fa78f66812f/core/src/test/java/org/apache/calcite/test/RelBuilderTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/a55e5eb4b3ca9f1afa6e9dbeef466fa78f66812f/core/src/test/java/org/apache/calcite/test/RelBuilderTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/RelBuilderTest.java?ref=a55e5eb4b3ca9f1afa6e9dbeef466fa78f66812f",
                "patch": "@@ -1613,6 +1613,31 @@ private String str(RelNode r) {\n       assertThat(s, is(result));\n     }\n   }\n+\n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-1595\">[CALCITE-1595]\n+   * RelBuilder.call throws NullPointerException if argument types are\n+   * invalid</a>. */\n+  @Test public void testTypeInferenceValidation() throws Exception {\n+    final RelBuilder builder = RelBuilder.create(config().build());\n+    // test for a) call(operator, Iterable<RexNode>)\n+    final RexNode arg0 = builder.literal(0);\n+    final RexNode arg1 = builder.literal(\"xyz\");\n+    try {\n+      builder.call(SqlStdOperatorTable.PLUS, Lists.newArrayList(arg0, arg1));\n+      fail(\"Invalid combination of parameter types\");\n+    } catch (IllegalArgumentException e) {\n+      assertThat(e.getMessage(), containsString(\"cannot derive type\"));\n+    }\n+\n+    // test for b) call(operator, RexNode...)\n+    try {\n+      builder.call(SqlStdOperatorTable.PLUS, arg0, arg1);\n+      fail(\"Invalid combination of parameter types\");\n+    } catch (IllegalArgumentException e) {\n+      assertThat(e.getMessage(), containsString(\"cannot derive type\"));\n+    }\n+  }\n }\n \n // End RelBuilderTest.java"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/e9d506021252e1da6c09cebad3f747cd0e627d90",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/9c86556ff397f2548bffe90e7e338774d329211d",
        "message": "[CALCITE-968] Stream-to-relation and stream-to-stream joins (Milinda Pathirage)\n\nRule to transform Delta(Scan(constant-table)) to Empty;\nfix NullPointerException in PruneEmptyRules.",
        "bug_id": "calcite-avatica_9",
        "file": [
            {
                "sha": "3fccdfadae839004ff0eff6d79958b71a7a185ff",
                "filename": "core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java?ref=e9d506021252e1da6c09cebad3f747cd0e627d90",
                "patch": "@@ -72,7 +72,8 @@\n         public void onMatch(RelOptRuleCall call) {\n           LogicalUnion union = call.rel(0);\n           final List<RelNode> childRels = call.getChildRels(union);\n-          final List<RelNode> newChildRels = new ArrayList<RelNode>();\n+          assert childRels != null;\n+          final List<RelNode> newChildRels = new ArrayList<>();\n           for (RelNode childRel : childRels) {\n             if (!isEmpty(childRel)) {\n               newChildRels.add(childRel);"
            },
            {
                "sha": "4e64dc5e2eb13ced167db53737d9e71a72656b59",
                "filename": "core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java",
                "status": "modified",
                "additions": 74,
                "deletions": 1,
                "changes": 75,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java?ref=e9d506021252e1da6c09cebad3f747cd0e627d90",
                "patch": "@@ -24,16 +24,19 @@\n import org.apache.calcite.rel.RelNode;\n import org.apache.calcite.rel.core.Aggregate;\n import org.apache.calcite.rel.core.Filter;\n+import org.apache.calcite.rel.core.Join;\n import org.apache.calcite.rel.core.Project;\n import org.apache.calcite.rel.core.Sort;\n import org.apache.calcite.rel.core.TableScan;\n import org.apache.calcite.rel.core.Union;\n import org.apache.calcite.rel.logical.LogicalAggregate;\n import org.apache.calcite.rel.logical.LogicalFilter;\n+import org.apache.calcite.rel.logical.LogicalJoin;\n import org.apache.calcite.rel.logical.LogicalProject;\n import org.apache.calcite.rel.logical.LogicalSort;\n import org.apache.calcite.rel.logical.LogicalTableScan;\n import org.apache.calcite.rel.logical.LogicalUnion;\n+import org.apache.calcite.rel.logical.LogicalValues;\n import org.apache.calcite.schema.StreamableTable;\n import org.apache.calcite.schema.Table;\n import org.apache.calcite.util.Util;\n@@ -56,7 +59,9 @@ private StreamRules() {}\n           new DeltaAggregateTransposeRule(),\n           new DeltaSortTransposeRule(),\n           new DeltaUnionTransposeRule(),\n-          new DeltaTableScanRule());\n+          new DeltaJoinTransposeRule(),\n+          new DeltaTableScanRule(),\n+          new DeltaTableScanToEmptyRule());\n \n   /** Planner rule that pushes a {@link Delta} through a {@link Project}. */\n   public static class DeltaProjectTransposeRule extends RelOptRule {\n@@ -193,6 +198,74 @@ private DeltaTableScanRule() {\n       }\n     }\n   }\n+\n+  /**\n+   * Planner rule that converts {@link Delta} over a {@link TableScan} of\n+   * a table other than {@link org.apache.calcite.schema.StreamableTable} to Empty.\n+   */\n+  public static class DeltaTableScanToEmptyRule extends RelOptRule {\n+    private DeltaTableScanToEmptyRule() {\n+      super(\n+          operand(Delta.class,\n+              operand(TableScan.class, none())));\n+    }\n+\n+    @Override public void onMatch(RelOptRuleCall call) {\n+      final Delta delta = call.rel(0);\n+      final TableScan scan = call.rel(1);\n+      final RelOptCluster cluster = delta.getCluster();\n+      final RelOptTable relOptTable = scan.getTable();\n+      final StreamableTable streamableTable =\n+          relOptTable.unwrap(StreamableTable.class);\n+      if (streamableTable == null) {\n+        call.transformTo(LogicalValues.createEmpty(cluster, delta.getRowType()));\n+      }\n+    }\n+  }\n+\n+\n+  /**\n+   * Planner rule that pushes a {@link Delta} through a {@link Join}.\n+   *\n+   * Product rule [1] is applied to implement the transpose:\n+   * stream(x join y)\" = \"x join stream(y) union all stream(x) join y\n+   *\n+   * [1] https://en.wikipedia.org/wiki/Product_rule\n+   */\n+  public static class DeltaJoinTransposeRule extends RelOptRule {\n+\n+    public DeltaJoinTransposeRule() {\n+      super(\n+          operand(Delta.class,\n+              operand(Join.class, any())));\n+    }\n+\n+    @Override\n+    public void onMatch(RelOptRuleCall call) {\n+      final Delta delta = call.rel(0);\n+      final Join join = call.rel(1);\n+      final RelOptCluster cluster = delta.getCluster();\n+      RelNode left = join.getLeft();\n+      RelNode right = join.getRight();\n+\n+      final LogicalDelta rightWithDelta = LogicalDelta.create(right);\n+      final LogicalJoin joinL = LogicalJoin.create(left, rightWithDelta, join.getCondition(),\n+          join.getJoinType(), join.getVariablesStopped(), join.isSemiJoinDone(),\n+          ImmutableList.copyOf(join.getSystemFieldList()));\n+\n+      final LogicalDelta leftWithDelta = LogicalDelta.create(left);\n+      final LogicalJoin joinR = LogicalJoin.create(leftWithDelta, right, join.getCondition(),\n+          join.getJoinType(), join.getVariablesStopped(), join.isSemiJoinDone(),\n+          ImmutableList.copyOf(join.getSystemFieldList()));\n+\n+      List<RelNode> inputsToUnion = Lists.newArrayList();\n+      inputsToUnion.add(joinL);\n+      inputsToUnion.add(joinR);\n+\n+      final LogicalUnion newNode = LogicalUnion.create(inputsToUnion, true);\n+      call.transformTo(newNode);\n+    }\n+  }\n }\n \n // End StreamRules.java"
            },
            {
                "sha": "c06f3c345a729ff15da6536bf72b4bcd0d1046f7",
                "filename": "core/src/main/java/org/apache/calcite/runtime/CalciteResource.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/main/java/org/apache/calcite/runtime/CalciteResource.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/main/java/org/apache/calcite/runtime/CalciteResource.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/runtime/CalciteResource.java?ref=e9d506021252e1da6c09cebad3f747cd0e627d90",
                "patch": "@@ -603,6 +603,9 @@\n \n   @BaseMessage(\"Table ''{0}'' not found\")\n   ExInst<CalciteException> tableNotFound(String tableName);\n+\n+  @BaseMessage(\"Cannot stream results of a query with no streaming inputs: ''{0}''. At least one input should be convertable to a stream.\")\n+  ExInst<SqlValidatorException> cannotStreamResultsForNonStreamingInputs(String inputs);\n }\n \n // End CalciteResource.java"
            },
            {
                "sha": "d430575a2dafb58fbe44cf0bd9c7112ad1dca53e",
                "filename": "core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java",
                "status": "modified",
                "additions": 38,
                "deletions": 7,
                "changes": 45,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java?ref=e9d506021252e1da6c09cebad3f747cd0e627d90",
                "patch": "@@ -82,6 +82,7 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Function;\n+import com.google.common.base.Joiner;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Lists;\n@@ -3016,17 +3017,47 @@ private SqlModality deduceModality(SqlNode query) {\n   public boolean validateModality(SqlSelect select, SqlModality modality,\n       boolean fail) {\n     final SelectScope scope = getRawSelectScope(select);\n-    for (Pair<String, SqlValidatorNamespace> namespace : scope.children) {\n-      if (!namespace.right.supportsModality(modality)) {\n-        switch (modality) {\n-        case STREAM:\n+\n+    switch (modality) {\n+    case STREAM:\n+      if (scope.children.size() == 1) {\n+        for (Pair<String, SqlValidatorNamespace> namespace : scope.children) {\n+          if (!namespace.right.supportsModality(modality)) {\n+            if (fail) {\n+              throw newValidationError(namespace.right.getNode(),\n+                  Static.RESOURCE.cannotConvertToStream(namespace.left));\n+            } else {\n+              return false;\n+            }\n+          }\n+        }\n+      } else {\n+        boolean atLeastOneSupportsModality = false;\n+        for (Pair<String, SqlValidatorNamespace> namespace : scope.children) {\n+          if (namespace.right.supportsModality(modality)) {\n+            atLeastOneSupportsModality = true;\n+          }\n+        }\n+\n+        if (!atLeastOneSupportsModality) {\n           if (fail) {\n-            throw newValidationError(namespace.right.getNode(),\n-                Static.RESOURCE.cannotConvertToStream(namespace.left));\n+            List<String> inputList = new ArrayList<String>();\n+            for (Pair<String, SqlValidatorNamespace> namespace : scope.children) {\n+              inputList.add(namespace.left);\n+            }\n+            String inputs = Joiner.on(\", \").join(inputList);\n+\n+            throw newValidationError(select,\n+                Static.RESOURCE.cannotStreamResultsForNonStreamingInputs(inputs));\n           } else {\n             return false;\n           }\n-        default:\n+        }\n+      }\n+      break;\n+    default:\n+      for (Pair<String, SqlValidatorNamespace> namespace : scope.children) {\n+        if (!namespace.right.supportsModality(modality)) {\n           if (fail) {\n             throw newValidationError(namespace.right.getNode(),\n                 Static.RESOURCE.cannotConvertToRelation(namespace.left));"
            },
            {
                "sha": "2eb494731dc95a123b6f6abd85fc8a78b4718b7f",
                "filename": "core/src/main/resources/org/apache/calcite/runtime/CalciteResource.properties",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/main/resources/org/apache/calcite/runtime/CalciteResource.properties",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/main/resources/org/apache/calcite/runtime/CalciteResource.properties",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/resources/org/apache/calcite/runtime/CalciteResource.properties?ref=e9d506021252e1da6c09cebad3f747cd0e627d90",
                "patch": "@@ -197,4 +197,5 @@ ModifiableViewMustBeBasedOnSingleTable=Modifiable view must be based on a single\n MoreThanOneMappedColumn=View is not modifiable. More than one expression maps to column ''{0}'' of base table ''{1}''\n NoValueSuppliedForViewColumn=View is not modifiable. No value is supplied for NOT NULL column ''{0}'' of base table ''{1}''\n TableNotFound=Table ''{0}'' not found\n+CannotStreamResultsForNonStreamingInputs=Cannot stream results of a query with no streaming inputs: ''{0}''. At least one input should be convertable to a stream.\n # End CalciteResource.properties"
            },
            {
                "sha": "50019e17d4e0f4a2590f5a57a9769fe609169890",
                "filename": "core/src/test/java/org/apache/calcite/sql/test/SqlAdvisorTest.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/test/java/org/apache/calcite/sql/test/SqlAdvisorTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/test/java/org/apache/calcite/sql/test/SqlAdvisorTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/sql/test/SqlAdvisorTest.java?ref=e9d506021252e1da6c09cebad3f747cd0e627d90",
                "patch": "@@ -72,7 +72,9 @@\n           \"TABLE(CATALOG.SALES.BONUS)\",\n           \"TABLE(CATALOG.SALES.ORDERS)\",\n           \"TABLE(CATALOG.SALES.SALGRADE)\",\n-          \"TABLE(CATALOG.SALES.SHIPMENTS)\");\n+          \"TABLE(CATALOG.SALES.SHIPMENTS)\",\n+          \"TABLE(CATALOG.SALES.PRODUCTS)\",\n+          \"TABLE(CATALOG.SALES.SUPPLIERS)\");\n \n   private static final List<String> SCHEMAS =\n       Arrays.asList("
            },
            {
                "sha": "b76b9084110c05f98d36c04a5e92b7b8e28d5b44",
                "filename": "core/src/test/java/org/apache/calcite/test/MockCatalogReader.java",
                "status": "modified",
                "additions": 16,
                "deletions": 0,
                "changes": 16,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/test/java/org/apache/calcite/test/MockCatalogReader.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/test/java/org/apache/calcite/test/MockCatalogReader.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/MockCatalogReader.java?ref=e9d506021252e1da6c09cebad3f747cd0e627d90",
                "patch": "@@ -250,6 +250,22 @@ public MockCatalogReader init() {\n     shipmentsStream.addColumn(\"ORDERID\", intType);\n     registerTable(shipmentsStream);\n \n+    // Register \"PRODUCTS\" table.\n+    MockTable productsTable = MockTable.create(this, salesSchema, \"PRODUCTS\",\n+        false);\n+    productsTable.addColumn(\"PRODUCTID\", intType);\n+    productsTable.addColumn(\"NAME\", varchar20Type);\n+    productsTable.addColumn(\"SUPPLIERID\", intType);\n+    registerTable(productsTable);\n+\n+    // Register \"SUPPLIERS\" table.\n+    MockTable suppliersTable = MockTable.create(this, salesSchema, \"SUPPLIERS\",\n+        false);\n+    suppliersTable.addColumn(\"SUPPLIERID\", intType);\n+    suppliersTable.addColumn(\"NAME\", varchar20Type);\n+    suppliersTable.addColumn(\"CITY\", intType);\n+    registerTable(suppliersTable);\n+\n     // Register \"EMP_20\" view.\n     // Same columns as \"EMP\",\n     // but \"DEPTNO\" not visible and set to 20 by default"
            },
            {
                "sha": "7ace229960f4860504fe7e113527293ab4b5a618",
                "filename": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java",
                "status": "modified",
                "additions": 15,
                "deletions": 0,
                "changes": 15,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java?ref=e9d506021252e1da6c09cebad3f747cd0e627d90",
                "patch": "@@ -132,6 +132,12 @@ private static String cannotConvertToRelation(String table) {\n     return \"Cannot convert stream '\" + table + \"' to relation\";\n   }\n \n+  private static String cannotStreamResultsForNonStreamingInputs(String inputs) {\n+    return \"Cannot stream results of a query with no streaming inputs: '\"\n+        + inputs\n+        + \"'. At least one input should be convertable to a stream.\";\n+  }\n+\n   @Test public void testMultipleSameAsPass() {\n     check(\"select 1 as again,2 as \\\"again\\\", 3 as AGAiN from (values (true))\");\n   }\n@@ -7415,6 +7421,15 @@ public void _testValuesWithAggFuncs() {\n         + \"order by floor(rowtime to hour), rowtime desc\").ok();\n   }\n \n+  @Test public void testStreamJoin() {\n+    sql(\"select stream \\n\"\n+        + \"orders.rowtime as rowtime, orders.orderId as orderId, products.supplierId as supplierId \\n\"\n+        + \"from orders join products on orders.productId = products.productId\").ok();\n+    sql(\"^select stream *\\n\"\n+        + \"from products join suppliers on products.supplierId = suppliers.supplierId^\")\n+        .fails(cannotStreamResultsForNonStreamingInputs(\"PRODUCTS, SUPPLIERS\"));\n+  }\n+\n   @Test public void testNew() {\n     // (To debug individual statements, paste them into this method.)\n     //            1         2         3         4         5         6"
            },
            {
                "sha": "90d67ddebda9e63250729f528394f6778c2f9981",
                "filename": "core/src/test/java/org/apache/calcite/test/StreamTest.java",
                "status": "modified",
                "additions": 108,
                "deletions": 0,
                "changes": 108,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/test/java/org/apache/calcite/test/StreamTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/e9d506021252e1da6c09cebad3f747cd0e627d90/core/src/test/java/org/apache/calcite/test/StreamTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/StreamTest.java?ref=e9d506021252e1da6c09cebad3f747cd0e627d90",
                "patch": "@@ -59,6 +59,7 @@\n public class StreamTest {\n   public static final String STREAM_SCHEMA_NAME = \"STREAMS\";\n   public static final String INFINITE_STREAM_SCHEMA_NAME = \"INFINITE_STREAMS\";\n+  public static final String STREAMJOINS_SCHEMA_NAME = \"STREAMJOINS\";\n \n   private static String schemaFor(String name, Class<? extends TableFactory> clazz) {\n     return \"     {\\n\"\n@@ -74,6 +75,27 @@ private static String schemaFor(String name, Class<? extends TableFactory> clazz\n       + \"     }\";\n   }\n \n+  private static final String STREAM_JOINS_MODEL = \"{\\n\"\n+      + \"  version: '1.0',\\n\"\n+      + \"  defaultSchema: 'STREAMJOINS',\\n\"\n+      + \"   schemas: [\\n\"\n+      + \"     {\\n\"\n+      + \"       name: 'STREAMJOINS',\\n\"\n+      + \"       tables: [ {\\n\"\n+      + \"         type: 'custom',\\n\"\n+      + \"         name: 'ORDERS',\\n\"\n+      + \"         stream: {\\n\"\n+      + \"           stream: true\\n\"\n+      + \"         },\\n\"\n+      + \"         factory: '\" + OrdersStreamTableFactory.class.getName() + \"'\\n\"\n+      + \"       }, \\n\"\n+      + \"       {\\n\"\n+      + \"         type: 'custom',\\n\"\n+      + \"         name: 'PRODUCTS',\\n\"\n+      + \"         factory: '\" + ProductsTableFactory.class.getName() + \"'\\n\"\n+      + \"       }]\\n\"\n+      + \"     }]}\";\n+\n   public static final String STREAM_MODEL = \"{\\n\"\n       + \"  version: '1.0',\\n\"\n       + \"  defaultSchema: 'foodmart',\\n\"\n@@ -212,6 +234,32 @@ private static String schemaFor(String name, Class<? extends TableFactory> clazz\n         .returnsCount(100);\n   }\n \n+  @Test public void testStreamToRelaitonJoin() {\n+    CalciteAssert.model(STREAM_JOINS_MODEL)\n+        .withDefaultSchema(STREAMJOINS_SCHEMA_NAME)\n+        .query(\"select stream \"\n+            + \"orders.rowtime as rowtime, orders.id as orderId, products.supplier as supplierId \"\n+            + \"from orders join products on orders.product = products.id\")\n+        .convertContains(\n+            \"LogicalDelta\\n\"\n+                + \"  LogicalProject(ROWTIME=[$0], ORDERID=[$1], SUPPLIERID=[$5])\\n\"\n+                + \"    LogicalProject(ROWTIME=[$0], ID=[$1], PRODUCT=[$2], UNITS=[$3], ID0=[$5], SUPPLIER=[$6])\\n\"\n+                + \"      LogicalJoin(condition=[=($4, $5)], joinType=[inner])\\n\"\n+                + \"        LogicalProject(ROWTIME=[$0], ID=[$1], PRODUCT=[$2], UNITS=[$3], PRODUCT4=[CAST($2):VARCHAR(32) CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\" NOT NULL])\\n\"\n+                + \"          LogicalTableScan(table=[[STREAMJOINS, ORDERS]])\\n\"\n+                + \"        LogicalTableScan(table=[[STREAMJOINS, PRODUCTS]])\\n\")\n+        .explainContains(\"\"\n+            + \"EnumerableJoin(condition=[=($4, $5)], joinType=[inner])\\n\"\n+            + \"    EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t2):VARCHAR(32) CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\" NOT NULL], proj#0..4=[{exprs}])\\n\"\n+            + \"      EnumerableInterpreter\\n\"\n+            + \"        BindableTableScan(table=[[]])\\n\"\n+            + \"    EnumerableInterpreter\\n\"\n+            + \"      BindableTableScan(table=[[STREAMJOINS, PRODUCTS]])\")\n+        .returns(startsWith(\"ROWTIME=2015-02-15 10:15:00; ORDERID=1; SUPPLIERID=1\",\n+            \"ROWTIME=2015-02-15 10:24:15; ORDERID=2; SUPPLIERID=0\",\n+            \"ROWTIME=2015-02-15 10:24:45; ORDERID=3; SUPPLIERID=1\"));\n+  }\n+\n   private Function<ResultSet, Void> startsWith(String... rows) {\n     final ImmutableList<String> rowList = ImmutableList.copyOf(rows);\n     return new Function<ResultSet, Void>() {\n@@ -362,6 +410,66 @@ public void remove() {\n       return this;\n     }\n   }\n+\n+  /**\n+   * Mocks simple relation to use for stream joining test.\n+   */\n+  public static class ProductsTableFactory implements TableFactory<Table> {\n+\n+    public ProductsTableFactory(){}\n+\n+    @Override\n+    public Table create(SchemaPlus schema, String name, Map<String, Object> operand,\n+                        RelDataType rowType) {\n+      final ImmutableList<Object[]> rows = ImmutableList.of(\n+        new Object[]{\"paint\", 1},\n+        new Object[]{\"paper\", 0},\n+        new Object[]{\"brush\", 1}\n+      );\n+      return new ProductsTable(rows);\n+    }\n+  }\n+\n+  /**\n+   * Table representing the PRODUCTS relation\n+   */\n+  public static class ProductsTable implements ScannableTable {\n+\n+    private final ImmutableList<Object[]> rows;\n+\n+    public ProductsTable(ImmutableList<Object[]> rows) {\n+      this.rows = rows;\n+    }\n+\n+    private final RelProtoDataType protoRowType = new RelProtoDataType() {\n+      public RelDataType apply(RelDataTypeFactory a0) {\n+        return a0.builder()\n+            .add(\"ID\", SqlTypeName.VARCHAR, 32)\n+            .add(\"SUPPLIER\", SqlTypeName.INTEGER)\n+            .build();\n+      }\n+    };\n+\n+    @Override\n+    public Enumerable<Object[]> scan(DataContext root) {\n+      return Linq4j.asEnumerable(rows);\n+    }\n+\n+    @Override\n+    public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n+      return protoRowType.apply(typeFactory);\n+    }\n+\n+    @Override\n+    public Statistic getStatistic() {\n+      return Statistics.of(200d, ImmutableList.<ImmutableBitSet>of());\n+    }\n+\n+    @Override\n+    public Schema.TableType getJdbcTableType() {\n+      return Schema.TableType.TABLE;\n+    }\n+  }\n }\n \n // End StreamTest.java"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/f98ed96f041b615dca1560b7014d112a40e43d6e",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/d19a9133f4941ef80195b8ef19fb7c21a1258abd",
        "message": "[CALCITE-862] JdbcSchema gives NullPointerException on non-standard column type (Marc Prud'hommeaux)\n\nSolution is for SqlTypeName.getNameForJdbcType to fall back to ANY.\n\nClose apache/incubator-calcite#125",
        "bug_id": "calcite-avatica_10",
        "file": [
            {
                "sha": "64955741621fea1e8b66856b205bd53b82cfd5bd",
                "filename": "core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/f98ed96f041b615dca1560b7014d112a40e43d6e/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/f98ed96f041b615dca1560b7014d112a40e43d6e/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java?ref=f98ed96f041b615dca1560b7014d112a40e43d6e",
                "patch": "@@ -287,7 +287,9 @@ RelProtoDataType getRelDataType(DatabaseMetaData metaData, String catalogName,\n \n   private RelDataType sqlType(RelDataTypeFactory typeFactory, int dataType,\n       int precision, int scale, String typeString) {\n-    SqlTypeName sqlTypeName = SqlTypeName.getNameForJdbcType(dataType);\n+    // Fall back to ANY if type is unknown\n+    final SqlTypeName sqlTypeName =\n+        Util.first(SqlTypeName.getNameForJdbcType(dataType), SqlTypeName.ANY);\n     switch (sqlTypeName) {\n     case ARRAY:\n       RelDataType component = null;"
            },
            {
                "sha": "7d0c590d6d5553578a79fb104c73dfe92f66d580",
                "filename": "core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/f98ed96f041b615dca1560b7014d112a40e43d6e/core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/f98ed96f041b615dca1560b7014d112a40e43d6e/core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java?ref=f98ed96f041b615dca1560b7014d112a40e43d6e",
                "patch": "@@ -326,7 +326,7 @@ public SqlTypeFamily getFamily() {\n    * Gets the SqlTypeName corresponding to a JDBC type.\n    *\n    * @param jdbcType the JDBC type of interest\n-   * @return corresponding SqlTypeName\n+   * @return corresponding SqlTypeName, or null if the type is not known\n    */\n   public static SqlTypeName getNameForJdbcType(int jdbcType) {\n     return JDBC_TYPE_TO_NAME.get(jdbcType);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/26fddf2a641aebf943f18b7da8f81397955f4e59",
        "message": "[CALCITE-1212] Fix NPE on some Cassandra projects",
        "bug_id": "calcite-avatica_11",
        "file": [
            {
                "sha": "c7d0973d3972f36cba683682eff39595c88c1004",
                "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraMethod.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraMethod.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraMethod.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraMethod.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf",
                "patch": "@@ -28,7 +28,7 @@\n  */\n public enum CassandraMethod {\n   CASSANDRA_QUERYABLE_QUERY(CassandraTable.CassandraQueryable.class, \"query\",\n-      List.class, List.class, List.class, String.class);\n+      List.class, List.class, List.class, List.class, String.class);\n \n   public final Method method;\n "
            },
            {
                "sha": "5e55e461ffb72b31bd1667eca95dd3e904da6e06",
                "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraProject.java",
                "status": "modified",
                "additions": 5,
                "deletions": 10,
                "changes": 15,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraProject.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraProject.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraProject.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf",
                "patch": "@@ -28,8 +28,9 @@\n import org.apache.calcite.rex.RexNode;\n import org.apache.calcite.util.Pair;\n \n-import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Implementation of {@link org.apache.calcite.rel.core.Project}\n@@ -60,17 +61,11 @@ public void implement(Implementor implementor) {\n         new CassandraRules.RexToCassandraTranslator(\n             (JavaTypeFactory) getCluster().getTypeFactory(),\n             CassandraRules.cassandraFieldNames(getInput().getRowType()));\n-    final List<String> fields = new ArrayList<String>();\n+    final Map<String, String> fields = new LinkedHashMap<String, String>();\n     for (Pair<RexNode, String> pair : getNamedProjects()) {\n       final String name = pair.right;\n-      final String expr = pair.left.accept(translator);\n-\n-      // Alias the field if necessary\n-      if (name.equals(expr)) {\n-        fields.add(name);\n-      } else {\n-        fields.add(name + \" AS \" + expr);\n-      }\n+      final String originalName = pair.left.accept(translator);\n+      fields.put(originalName, name);\n     }\n     implementor.add(fields, null);\n   }"
            },
            {
                "sha": "0191fd06b298efb14e4ee840df78ae6663e5071f",
                "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRel.java",
                "status": "modified",
                "additions": 5,
                "deletions": 3,
                "changes": 8,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRel.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRel.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRel.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf",
                "patch": "@@ -21,7 +21,9 @@\n import org.apache.calcite.rel.RelNode;\n \n import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Relational expression that uses Cassandra calling convention.\n@@ -35,7 +37,7 @@\n   /** Callback for the implementation process that converts a tree of\n    * {@link CassandraRel} nodes into a CQL query. */\n   class Implementor {\n-    final List<String> selectFields = new ArrayList<String>();\n+    final Map<String, String> selectFields = new LinkedHashMap<String, String>();\n     final List<String> whereClause = new ArrayList<String>();\n     String limitValue = null;\n     final List<String> order = new ArrayList<String>();\n@@ -48,9 +50,9 @@\n      * @param fields New fields to be projected from a query\n      * @param predicates New predicates to be applied to the query\n      */\n-    public void add(List<String> fields, List<String> predicates) {\n+    public void add(Map<String, String> fields, List<String> predicates) {\n       if (fields != null) {\n-        selectFields.addAll(fields);\n+        selectFields.putAll(fields);\n       }\n       if (predicates != null) {\n         whereClause.addAll(predicates);"
            },
            {
                "sha": "0e0bcb2438b93ec2be85fa3e264eccc29b249d5f",
                "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java",
                "status": "modified",
                "additions": 11,
                "deletions": 0,
                "changes": 11,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf",
                "patch": "@@ -249,6 +249,17 @@ private CassandraProjectRule() {\n       super(LogicalProject.class, \"CassandraProjectRule\");\n     }\n \n+    @Override public boolean matches(RelOptRuleCall call) {\n+      LogicalProject project = call.rel(0);\n+      for (RexNode e : project.getProjects()) {\n+        if (!(e instanceof RexInputRef)) {\n+          return false;\n+        }\n+      }\n+\n+      return true;\n+    }\n+\n     public RelNode convert(RelNode rel) {\n       final LogicalProject project = (LogicalProject) rel;\n       final RelTraitSet traitSet = project.getTraitSet().replace(out);"
            },
            {
                "sha": "c786dea45ecdcdde678ad76a07c2afef44f6fddf",
                "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java",
                "status": "modified",
                "additions": 48,
                "deletions": 15,
                "changes": 63,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.calcite.linq4j.Enumerator;\n import org.apache.calcite.linq4j.QueryProvider;\n import org.apache.calcite.linq4j.Queryable;\n+import org.apache.calcite.linq4j.function.Function1;\n import org.apache.calcite.plan.RelOptCluster;\n import org.apache.calcite.plan.RelOptTable;\n import org.apache.calcite.rel.RelFieldCollation;\n@@ -42,8 +43,8 @@\n import com.datastax.driver.core.ResultSet;\n import com.datastax.driver.core.Session;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n@@ -97,6 +98,7 @@ public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n \n   public Enumerable<Object> query(final Session session) {\n     return query(session, Collections.<Map.Entry<String, Class>>emptyList(),\n+        Collections.<Map.Entry<String, String>>emptyList(),\n         Collections.<String>emptyList(), Collections.<String>emptyList(), null);\n   }\n \n@@ -108,27 +110,56 @@ public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n    * @return Enumerator of results\n    */\n   public Enumerable<Object> query(final Session session, List<Map.Entry<String, Class>> fields,\n-        List<String> predicates, List<String> order, String limit) {\n+        final List<Map.Entry<String, String>> selectFields, List<String> predicates,\n+        List<String> order, String limit) {\n     // Build the type of the resulting row based on the provided fields\n     final RelDataTypeFactory typeFactory =\n         new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n     final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n     final RelDataType rowType = protoRowType.apply(typeFactory);\n-    List<String> fieldNames = new ArrayList<String>();\n-    for (Map.Entry<String, Class> field : fields) {\n-      String fieldName = field.getKey();\n-      fieldNames.add(fieldName);\n-      SqlTypeName typeName = rowType.getField(fieldName, true, false).getType().getSqlTypeName();\n-      fieldInfo.add(fieldName, typeFactory.createSqlType(typeName)).nullable(true);\n+\n+    Function1<String, Void> addField = new Function1<String, Void>() {\n+      public Void apply(String fieldName) {\n+        SqlTypeName typeName = rowType.getField(fieldName, true, false).getType().getSqlTypeName();\n+        fieldInfo.add(fieldName, typeFactory.createSqlType(typeName)).nullable(true);\n+        return null;\n+      }\n+    };\n+\n+    if (selectFields.isEmpty()) {\n+      for (Map.Entry<String, Class> field : fields) {\n+        addField.apply(field.getKey());\n+      }\n+    } else {\n+      for (Map.Entry<String, String> field : selectFields) {\n+        addField.apply(field.getKey());\n+      }\n     }\n+\n     final RelProtoDataType resultRowType = RelDataTypeImpl.proto(fieldInfo.build());\n \n     // Construct the list of fields to project\n-    final String selectFields;\n-    if (fields.isEmpty()) {\n-      selectFields = \"*\";\n+    final String selectString;\n+    if (selectFields.isEmpty()) {\n+      selectString = \"*\";\n     } else {\n-      selectFields = Util.toString(fieldNames, \"\", \", \", \"\");\n+      selectString = Util.toString(new Iterable<String>() {\n+        public Iterator<String> iterator() {\n+          final Iterator<Map.Entry<String, String>> selectIterator =\n+              selectFields.iterator();\n+\n+          return new Iterator<String>() {\n+            public boolean hasNext() {\n+              return selectIterator.hasNext();\n+            }\n+\n+            public String next() {\n+              Map.Entry<String, String> entry = selectIterator.next();\n+              return entry.getKey() + \" AS \" + entry.getValue();\n+            }\n+          };\n+        }\n+      }, \"\", \", \", \"\");\n     }\n \n     // Combine all predicates conjunctively\n@@ -140,7 +171,7 @@ public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n \n     // Build and issue the query and return an Enumerator over the results\n     StringBuilder queryBuilder = new StringBuilder(\"SELECT \");\n-    queryBuilder.append(selectFields);\n+    queryBuilder.append(selectString);\n     queryBuilder.append(\" FROM \\\"\" + columnFamily + \"\\\"\");\n     queryBuilder.append(whereClause);\n     if (!order.isEmpty()) {\n@@ -202,8 +233,10 @@ private Session getSession() {\n      */\n     @SuppressWarnings(\"UnusedDeclaration\")\n     public Enumerable<Object> query(List<Map.Entry<String, Class>> fields,\n-        List<String> predicates, List<String> order, String limit) {\n-      return getTable().query(getSession(), fields, predicates, order, limit);\n+        List<Map.Entry<String, String>> selectFields, List<String> predicates,\n+        List<String> order, String limit) {\n+      return getTable().query(getSession(), fields, selectFields, predicates,\n+          order, limit);\n     }\n   }\n }"
            },
            {
                "sha": "31bfdcc2913b92db80521fe97927a42f043a4bf9",
                "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java",
                "status": "modified",
                "additions": 11,
                "deletions": 1,
                "changes": 12,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf",
                "patch": "@@ -43,7 +43,9 @@\n import com.google.common.collect.Lists;\n \n import java.util.AbstractList;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Relational expression representing a scan of a table in a Cassandra data source.\n@@ -92,6 +94,14 @@ public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n                       }\n                     }),\n                 Pair.class));\n+    List<Map.Entry<String, String>> selectList = new ArrayList<Map.Entry<String, String>>();\n+    for (Map.Entry<String, String> entry\n+            : Pair.zip(cassandraImplementor.selectFields.keySet(),\n+                cassandraImplementor.selectFields.values())) {\n+      selectList.add(entry);\n+    }\n+    final Expression selectFields =\n+        list.append(\"selectFields\", constantArrayList(selectList, Pair.class));\n     final Expression table =\n         list.append(\"table\",\n             cassandraImplementor.table.getExpression(\n@@ -109,7 +119,7 @@ public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n         list.append(\"enumerable\",\n             Expressions.call(table,\n                 CassandraMethod.CASSANDRA_QUERYABLE_QUERY.method, fields,\n-                predicates, order, limit));\n+                selectFields, predicates, order, limit));\n     if (CalcitePrepareImpl.DEBUG) {\n       System.out.println(\"Cassandra: \" + predicates);\n     }"
            },
            {
                "sha": "e02e4974fb898f3fbef58a670f3b368ecdad13c3",
                "filename": "cassandra/src/test/java/org/apache/calcite/test/CassandraAdapterIT.java",
                "status": "modified",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/test/java/org/apache/calcite/test/CassandraAdapterIT.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/test/java/org/apache/calcite/test/CassandraAdapterIT.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/cassandra/src/test/java/org/apache/calcite/test/CassandraAdapterIT.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf",
                "patch": "@@ -111,6 +111,23 @@ protected boolean enabled() {\n                 + \"      CassandraFilter(condition=[=(CAST($0):VARCHAR(8) CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\", '!PUBLIC!')])\\n\");\n   }\n \n+  @Test public void testProjectAlias() {\n+    CalciteAssert.that()\n+        .enable(enabled())\n+        .with(TWISSANDRA)\n+        .query(\"select \\\"tweet_id\\\" as \\\"foo\\\" from \\\"userline\\\" \"\n+                + \"where \\\"username\\\" = '!PUBLIC!' limit 1\")\n+        .returns(\"foo=f3c329de-d05b-11e5-b58b-90e2ba530b12\\n\");\n+  }\n+\n+  @Test public void testProjectConstant() {\n+    CalciteAssert.that()\n+        .enable(enabled())\n+        .with(TWISSANDRA)\n+        .query(\"select 'foo' as \\\"bar\\\" from \\\"userline\\\" limit 1\")\n+        .returns(\"bar=foo\\n\");\n+  }\n+\n   @Test public void testLimit() {\n     CalciteAssert.that()\n         .enable(enabled())"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/4d8fb0901782ee9cf59af51b989e879ce586beee",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/ef2a54c8620751c56059dfb89e9b080ece516ef6",
        "message": "Fix a NPE.",
        "bug_id": "calcite-avatica_12",
        "file": [
            {
                "sha": "8096eaf640369c3d5d16b97c6d810f8c67f814c4",
                "filename": "core/src/main/java/org/eigenbase/sql/type/SqlTypeExplicitPrecedenceList.java",
                "status": "modified",
                "additions": 9,
                "deletions": 2,
                "changes": 11,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/4d8fb0901782ee9cf59af51b989e879ce586beee/core/src/main/java/org/eigenbase/sql/type/SqlTypeExplicitPrecedenceList.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/4d8fb0901782ee9cf59af51b989e879ce586beee/core/src/main/java/org/eigenbase/sql/type/SqlTypeExplicitPrecedenceList.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/eigenbase/sql/type/SqlTypeExplicitPrecedenceList.java?ref=4d8fb0901782ee9cf59af51b989e879ce586beee",
                "patch": "@@ -22,6 +22,8 @@\n import org.eigenbase.reltype.*;\n import org.eigenbase.util.Util;\n \n+import com.google.common.base.Predicates;\n+import com.google.common.collect.Iterables;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n \n@@ -53,6 +55,10 @@\n           SqlTypeName.FLOAT,\n           SqlTypeName.DOUBLE);\n \n+  private static final List<SqlTypeName> COMPACT_NUMERIC_TYPES =\n+      ImmutableList.copyOf(\n+          Iterables.filter(NUMERIC_TYPES, Predicates.notNull()));\n+\n   /**\n    * Map from SqlTypeName to corresponding precedence list.\n    *\n@@ -100,8 +106,9 @@ private static SqlTypeExplicitPrecedenceList list(SqlTypeName... array) {\n   }\n \n   private static SqlTypeExplicitPrecedenceList numeric(SqlTypeName typeName) {\n-    int i = getListPosition(typeName, NUMERIC_TYPES);\n-    return new SqlTypeExplicitPrecedenceList(Util.skip(NUMERIC_TYPES, i));\n+    int i = getListPosition(typeName, COMPACT_NUMERIC_TYPES);\n+    return new SqlTypeExplicitPrecedenceList(\n+        Util.skip(COMPACT_NUMERIC_TYPES, i));\n   }\n \n   // implement RelDataTypePrecedenceList"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/0ad58ed624dfad43bfcd26881588a9d3482397c1",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/3a54e54fadfcf383693555ac753e88edb8f3f5d6",
        "message": "Add test case for [DRILL-4407] GROUP BY subquery causes Java NPE",
        "bug_id": "calcite-avatica_13",
        "file": [
            {
                "sha": "d4f3a1009807b7d190dd78f250940cc76721945c",
                "filename": "core/src/test/resources/sql/subquery.iq",
                "status": "modified",
                "additions": 11,
                "deletions": 0,
                "changes": 11,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/0ad58ed624dfad43bfcd26881588a9d3482397c1/core/src/test/resources/sql/subquery.iq",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/0ad58ed624dfad43bfcd26881588a9d3482397c1/core/src/test/resources/sql/subquery.iq",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/resources/sql/subquery.iq?ref=0ad58ed624dfad43bfcd26881588a9d3482397c1",
                "patch": "@@ -274,6 +274,17 @@ GROUP BY emp.deptno;\n \n !ok\n \n+# [DRILL-4407] Group by subquery causes Java NPE\n+select count(*) as c\n+from \"scott\".emp\n+group by (select deptno from \"scott\".emp where empno = 10);\n+ C\n+----\n+ 14\n+(1 row)\n+\n+!ok\n+\n !if (fixed.calcite1045) {\n # Correlated IN sub-query in WHERE clause of JOIN\n select empno from \"scott\".emp as e"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/65774b056bcd277634e0fc6f678806f15ba05e83",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/e48c7627c162726f42e786a0e0b8c3042315491a",
        "message": "Fix traits in MongoDB adapter, and NPE in JdbcTest",
        "bug_id": "calcite-avatica_14",
        "file": [
            {
                "sha": "0f0e1627f9a4fecc4a4e4d3d999bb1d632efbf43",
                "filename": "core/src/test/java/org/apache/calcite/test/JdbcTest.java",
                "status": "modified",
                "additions": 8,
                "deletions": 4,
                "changes": 12,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/65774b056bcd277634e0fc6f678806f15ba05e83/core/src/test/java/org/apache/calcite/test/JdbcTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/65774b056bcd277634e0fc6f678806f15ba05e83/core/src/test/java/org/apache/calcite/test/JdbcTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/JdbcTest.java?ref=65774b056bcd277634e0fc6f678806f15ba05e83",
                "patch": "@@ -192,13 +192,17 @@\n       + \"   ]\\n\"\n       + \"}\";\n \n+  private static final ConnectionSpec SCOTT =\n+      Util.first(CalciteAssert.DB.scott,\n+          CalciteAssert.DatabaseInstance.HSQLDB.scott);\n+\n   public static final String SCOTT_SCHEMA = \"     {\\n\"\n       + \"       type: 'jdbc',\\n\"\n       + \"       name: 'SCOTT',\\n\"\n-      + \"       jdbcDriver: '\" + CalciteAssert.DB.scott.driver + \"',\\n\"\n-      + \"       jdbcUser: '\" + CalciteAssert.DB.scott.username + \"',\\n\"\n-      + \"       jdbcPassword: '\" + CalciteAssert.DB.scott.password + \"',\\n\"\n-      + \"       jdbcUrl: '\" + CalciteAssert.DB.scott.url + \"',\\n\"\n+      + \"       jdbcDriver: '\" + SCOTT.driver + \"',\\n\"\n+      + \"       jdbcUser: '\" + SCOTT.username + \"',\\n\"\n+      + \"       jdbcPassword: '\" + SCOTT.password + \"',\\n\"\n+      + \"       jdbcUrl: '\" + SCOTT.url + \"',\\n\"\n       + \"       jdbcCatalog: null,\\n\"\n       + \"       jdbcSchema: 'SCOTT'\\n\"\n       + \"     }\\n\";"
            },
            {
                "sha": "0249cce81aacf8a34a75a71d1bcf7d87578f3bb1",
                "filename": "mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/65774b056bcd277634e0fc6f678806f15ba05e83/mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/65774b056bcd277634e0fc6f678806f15ba05e83/mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java?ref=65774b056bcd277634e0fc6f678806f15ba05e83",
                "patch": "@@ -239,7 +239,7 @@ public RelNode convert(RelNode rel) {\n       return new MongoFilter(\n           rel.getCluster(),\n           traitSet,\n-          convert(filter.getInput(), traitSet),\n+          convert(filter.getInput(), out),\n           filter.getCondition());\n     }\n   }\n@@ -260,7 +260,7 @@ public RelNode convert(RelNode rel) {\n       final LogicalProject project = (LogicalProject) rel;\n       final RelTraitSet traitSet = project.getTraitSet().replace(out);\n       return new MongoProject(project.getCluster(), traitSet,\n-          convert(project.getInput(), traitSet), project.getProjects(),\n+          convert(project.getInput(), out), project.getProjects(),\n           project.getRowType());\n     }\n   }"
            },
            {
                "sha": "bc9a9dcbbac7bdd855cbebba8bfd8b1ac10baf8a",
                "filename": "mongodb/src/test/java/org/apache/calcite/test/MongoAdapterTest.java",
                "status": "modified",
                "additions": 14,
                "deletions": 5,
                "changes": 19,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/65774b056bcd277634e0fc6f678806f15ba05e83/mongodb/src/test/java/org/apache/calcite/test/MongoAdapterTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/65774b056bcd277634e0fc6f678806f15ba05e83/mongodb/src/test/java/org/apache/calcite/test/MongoAdapterTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/mongodb/src/test/java/org/apache/calcite/test/MongoAdapterTest.java?ref=65774b056bcd277634e0fc6f678806f15ba05e83",
                "patch": "@@ -530,8 +530,15 @@ public Void apply(ResultSet resultSet) {\n             + \" min(pop) as min_pop, max(pop) as max_pop, sum(pop) as sum_pop\\n\"\n             + \"from zips group by state\")\n         .limit(2)\n-        .returns(\"C=659; STATE=WV; MIN_POP=0; MAX_POP=70185; SUM_POP=1793477\\n\"\n-            + \"C=484; STATE=WA; MIN_POP=2; MAX_POP=50515; SUM_POP=4866692\\n\");\n+        .returns(\"C=195; STATE=AK; MIN_POP=0; MAX_POP=32383; SUM_POP=544698\\n\"\n+            + \"C=567; STATE=AL; MIN_POP=0; MAX_POP=44165; SUM_POP=4040587\\n\")\n+        .queryContains(\n+            mongoChecker(\n+                \"{$project: {STATE: '$state', POP: '$pop'}}\",\n+                \"{$group: {_id: '$STATE', C: {$sum: 1}, MIN_POP: {$min: '$POP'}, MAX_POP: {$max: '$POP'}, SUM_POP: {$sum: '$POP'}}}\",\n+                \"{$project: {STATE: '$_id', C: '$C', MIN_POP: '$MIN_POP', MAX_POP: '$MAX_POP', SUM_POP: '$SUM_POP'}}\",\n+                \"{$project: {C: 1, STATE: 1, MIN_POP: 1, MAX_POP: 1, SUM_POP: 1}}\",\n+                \"{$sort: {STATE: 1}}\"));\n   }\n \n   @Test public void testGroupComposite() {\n@@ -547,9 +554,9 @@ public Void apply(ResultSet resultSet) {\n                 \"{$project: {STATE: '$state', CITY: '$city'}}\",\n                 \"{$group: {_id: {STATE: '$STATE', CITY: '$CITY'}, C: {$sum: 1}}}\",\n                 \"{$project: {_id: 0, STATE: '$_id.STATE', CITY: '$_id.CITY', C: '$C'}}\",\n-                \"{$project: {C: 1, STATE: 1, CITY: 1}}\",\n                 \"{$sort: {C: -1}}\",\n-                \"{$limit: 2}\"));\n+                \"{$limit: 2}\",\n+                \"{$project: {C: 1, STATE: 1, CITY: 1}}\"));\n   }\n \n   @Test public void testDistinctCount() {\n@@ -615,7 +622,9 @@ public Void apply(ResultSet resultSet) {\n             + \"STATE=AL; CITY=ADAMSVILLE; ZERO=0\\n\")\n         .queryContains(\n             mongoChecker(\n-                \"{$project: {STATE: '$state', CITY: '$city', ZERO: {$ifNull: [null, 0]}}}\"));\n+                \"{$project: {CITY: '$city', STATE: '$state'}}\",\n+                \"{$sort: {STATE: 1, CITY: 1}}\",\n+                \"{$project: {STATE: 1, CITY: 1, ZERO: {$ifNull: [null, 0]}}}\"));\n   }\n \n   @Test public void testFilter() {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/ee0e824d1246bb3ac4da3bfd2757d390f8ca6583",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/a6f65dc97ac578c886544b961cb4db40e90bcccf",
        "message": "[CALCITE-929] Calls to AbstractRelNode may result in NPE\n\nClose apache/incubator-calcite#158",
        "bug_id": "calcite-avatica_15",
        "file": [
            {
                "sha": "0e7facdde8f4b91dcec8fd6a845aa2a711ca3554",
                "filename": "core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/ee0e824d1246bb3ac4da3bfd2757d390f8ca6583/core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/ee0e824d1246bb3ac4da3bfd2757d390f8ca6583/core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java?ref=ee0e824d1246bb3ac4da3bfd2757d390f8ca6583",
                "patch": "@@ -159,11 +159,11 @@ public String getCorrelVariable() {\n   }\n \n   public boolean isDistinct() {\n-    return RelMetadataQuery.areRowsUnique(this);\n+    return Boolean.TRUE.equals(RelMetadataQuery.areRowsUnique(this));\n   }\n \n   public boolean isKey(ImmutableBitSet columns) {\n-    return RelMetadataQuery.areColumnsUnique(this, columns);\n+    return Boolean.TRUE.equals(RelMetadataQuery.areColumnsUnique(this, columns));\n   }\n \n   public int getId() {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/241f77e256a1ee7df8c9bd5c73b025d45b7e6cb5",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/30ae0513c1c7e9cfb14a8a6b0e60cc37ec499ce7",
        "message": "[CALCITE-657] NullPointerException when executing JdbcAggregate implement method (Yuri Au Yong)\n\nAlso, use a pool for jdbc:hsqldb:mem connections, so that tests run in parallel don't use the same database. (Julian Hyde)",
        "bug_id": "calcite-avatica_16",
        "file": [
            {
                "sha": "d519029cf470ece2dd3f71013f33cb4fea7ba158",
                "filename": "core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/241f77e256a1ee7df8c9bd5c73b025d45b7e6cb5/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/241f77e256a1ee7df8c9bd5c73b025d45b7e6cb5/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java?ref=241f77e256a1ee7df8c9bd5c73b025d45b7e6cb5",
                "patch": "@@ -706,7 +706,7 @@ public JdbcAggregate(\n         groupByList.add(field);\n       }\n       for (AggregateCall aggCall : aggCalls) {\n-        addSelect(selectList, builder.context.toSql(aggCall), rowType);\n+        addSelect(selectList, builder.context.toSql(aggCall), getRowType());\n       }\n       builder.setSelect(new SqlNodeList(selectList, POS));\n       if (!groupByList.isEmpty() || aggCalls.isEmpty()) {"
            },
            {
                "sha": "e7faeef804a5b418f49bdf53c8bce29c4d40caf0",
                "filename": "core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java",
                "status": "modified",
                "additions": 57,
                "deletions": 0,
                "changes": 57,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/241f77e256a1ee7df8c9bd5c73b025d45b7e6cb5/core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/241f77e256a1ee7df8c9bd5c73b025d45b7e6cb5/core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java?ref=241f77e256a1ee7df8c9bd5c73b025d45b7e6cb5",
                "patch": "@@ -16,8 +16,19 @@\n  */\n package org.apache.calcite.test;\n \n+import org.hsqldb.jdbcDriver;\n import org.junit.Test;\n \n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n /**\n  * Tests for the {@code org.apache.calcite.adapter.jdbc} package.\n  */\n@@ -274,6 +285,52 @@\n             + \"FROM \\\"SCOTT\\\".\\\"EMP\\\"\\n\"\n             + \"WHERE CAST(\\\"DEPTNO\\\" AS INTEGER) = 20) AS \\\"t1\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t1\\\".\\\"DEPTNO\\\"\");\n   }\n+\n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-657\">[CALCITE-657]\n+   * NullPointerException when executing JdbcAggregate implement method</a>. */\n+  @Test public void testJdbcAggregate() throws Exception {\n+    final String url = MultiJdbcSchemaJoinTest.TempDb.INSTANCE.getUrl();\n+    Connection baseConnection = DriverManager.getConnection(url);\n+    Statement baseStmt = baseConnection.createStatement();\n+    baseStmt.execute(\"CREATE TABLE T2 (\\n\"\n+            + \"ID INTEGER,\\n\"\n+            + \"VALS INTEGER)\");\n+    baseStmt.execute(\"INSERT INTO T2 VALUES (1, 1)\");\n+    baseStmt.execute(\"INSERT INTO T2 VALUES (2, null)\");\n+    baseStmt.close();\n+    baseConnection.commit();\n+\n+    Properties info = new Properties();\n+    info.put(\"model\",\n+        \"inline:\"\n+            + \"{\\n\"\n+            + \"  version: '1.0',\\n\"\n+            + \"  defaultSchema: 'BASEJDBC',\\n\"\n+            + \"  schemas: [\\n\"\n+            + \"     {\\n\"\n+            + \"       type: 'jdbc',\\n\"\n+            + \"       name: 'BASEJDBC',\\n\"\n+            + \"       jdbcDriver: '\" + jdbcDriver.class.getName() + \"',\\n\"\n+            + \"       jdbcUrl: '\" + url + \"',\\n\"\n+            + \"       jdbcCatalog: null,\\n\"\n+            + \"       jdbcSchema: null\\n\"\n+            + \"     }\\n\"\n+            + \"  ]\\n\"\n+            + \"}\");\n+\n+    final Connection calciteConnection =\n+        DriverManager.getConnection(\"jdbc:calcite:\", info);\n+    ResultSet rs = calciteConnection\n+        .prepareStatement(\"select 10 * count(ID) from t2\").executeQuery();\n+\n+    assertThat(rs.next(), is(true));\n+    assertThat((Long) rs.getObject(1), equalTo(20L));\n+    assertThat(rs.next(), is(false));\n+\n+    rs.close();\n+    calciteConnection.close();\n+  }\n }\n \n // End JdbcAdapterTest.java"
            },
            {
                "sha": "730c672886b1efdf63c334cbeabb63a36ad7f697",
                "filename": "core/src/test/java/org/apache/calcite/test/JdbcTest.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/241f77e256a1ee7df8c9bd5c73b025d45b7e6cb5/core/src/test/java/org/apache/calcite/test/JdbcTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/241f77e256a1ee7df8c9bd5c73b025d45b7e6cb5/core/src/test/java/org/apache/calcite/test/JdbcTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/JdbcTest.java?ref=241f77e256a1ee7df8c9bd5c73b025d45b7e6cb5",
                "patch": "@@ -1845,8 +1845,8 @@ private static void checkJoinNWay(int n) {\n \n   /** Tests accessing a column in a JDBC source whose type is ARRAY. */\n   @Test public void testArray() throws Exception {\n-    String hsqldbMemUrl = \"jdbc:hsqldb:mem:.\";\n-    Connection baseConnection = DriverManager.getConnection(hsqldbMemUrl);\n+    final String url = MultiJdbcSchemaJoinTest.TempDb.INSTANCE.getUrl();\n+    Connection baseConnection = DriverManager.getConnection(url);\n     Statement baseStmt = baseConnection.createStatement();\n     baseStmt.execute(\"CREATE TABLE ARR_TABLE (\\n\"\n         + \"ID INTEGER,\\n\"\n@@ -1872,7 +1872,7 @@ private static void checkJoinNWay(int n) {\n             + \"       type: 'jdbc',\\n\"\n             + \"       name: 'BASEJDBC',\\n\"\n             + \"       jdbcDriver: '\" + jdbcDriver.class.getName() + \"',\\n\"\n-            + \"       jdbcUrl: '\" + hsqldbMemUrl + \"',\\n\"\n+            + \"       jdbcUrl: '\" + url + \"',\\n\"\n             + \"       jdbcCatalog: null,\\n\"\n             + \"       jdbcSchema: null\\n\"\n             + \"     }\\n\""
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/5a6b465b5b67cad20d309abe5d570e5311a03cbb",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/8b0a22ee178b5f96cd2982ba75e8b36a2eb2ed5f",
        "message": "Fix NPE in CachingRelMetadataProvider if arg is null.",
        "bug_id": "calcite-avatica_17",
        "file": [
            {
                "sha": "e3b8f23b8a2f1eaa194b9632af92694ca379322d",
                "filename": "core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java",
                "status": "modified",
                "additions": 11,
                "deletions": 1,
                "changes": 12,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java?ref=5a6b465b5b67cad20d309abe5d570e5311a03cbb",
                "patch": "@@ -39,6 +39,13 @@\n \n   private final RelOptPlanner planner;\n \n+  private static final Object NULL_SENTINEL = new Object() {\n+    @Override\n+    public String toString() {\n+      return \"{null}\";\n+    }\n+  };\n+\n   //~ Constructors -----------------------------------------------------------\n \n   public CachingRelMetadataProvider(\n@@ -93,7 +100,10 @@ public Object invoke(Object proxy, Method method, Object[] args)\n       builder.add(method);\n       builder.add(metadata.rel());\n       if (args != null) {\n-        builder.add(args);\n+        for (Object arg : args) {\n+          // Replace null values because ImmutableList does not allow them.\n+          builder.add(arg == null ? NULL_SENTINEL : arg);\n+        }\n       }\n       List<Object> key = builder.build();\n "
            },
            {
                "sha": "7b587fe1174b77eb63ac0db775843352bd628efc",
                "filename": "core/src/test/java/org/eigenbase/test/RelMetadataTest.java",
                "status": "modified",
                "additions": 23,
                "deletions": 1,
                "changes": 24,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/test/java/org/eigenbase/test/RelMetadataTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/test/java/org/eigenbase/test/RelMetadataTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/eigenbase/test/RelMetadataTest.java?ref=5a6b465b5b67cad20d309abe5d570e5311a03cbb",
                "patch": "@@ -27,6 +27,8 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Iterables;\n \n+import org.hamcrest.CoreMatchers;\n+import org.hamcrest.Matcher;\n import org.junit.Ignore;\n import org.junit.Test;\n \n@@ -62,6 +64,10 @@\n \n   //~ Methods ----------------------------------------------------------------\n \n+  private static Matcher<? super Number> nearTo(Number v, Number epsilon) {\n+    return CoreMatchers.equalTo(v); // TODO: use epsilon\n+  }\n+\n   // ----------------------------------------------------------------------\n   // Tests for getPercentageOriginalRows\n   // ----------------------------------------------------------------------\n@@ -476,7 +482,7 @@ private void checkRelSelectivity(\n     RelNode rel =\n         convertSql(\n             \"select * from (select * from emp union all select * from emp) \"\n-            + \"where deptno = 10\");\n+                + \"where deptno = 10\");\n     checkRelSelectivity(rel, DEFAULT_EQUAL_SELECTIVITY);\n   }\n \n@@ -490,6 +496,22 @@ private void checkRelSelectivity(\n         DEFAULT_COMP_SELECTIVITY * DEFAULT_EQUAL_SELECTIVITY);\n   }\n \n+  /** Checks that we can cache a metadata request that includes a null\n+   * argument. */\n+  @Test public void testSelectivityAggCached() {\n+    RelNode rel =\n+        convertSql(\n+            \"select deptno, count(*) from emp where deptno > 10 \"\n+            + \"group by deptno having count(*) = 0\");\n+    rel.getCluster().setMetadataProvider(\n+        new CachingRelMetadataProvider(\n+            rel.getCluster().getMetadataProvider(),\n+            rel.getCluster().getPlanner()));\n+    Double result = RelMetadataQuery.getSelectivity(rel, null);\n+    assertThat(result,\n+        nearTo(DEFAULT_COMP_SELECTIVITY * DEFAULT_EQUAL_SELECTIVITY, EPSILON));\n+  }\n+\n   @Test public void testDistinctRowCountTable() {\n     // no unique key information is available so return null\n     RelNode rel = convertSql(\"select * from emp where deptno = 10\");"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/1580bd0fec62d836c9870edc339b0ab99d909cad",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/2376ae4a876b421ee19c2b2a05a6bd1d306e442b",
        "message": "[CALCITE-821] Frameworks gives NPE when FrameworkConfig has no default schema",
        "bug_id": "calcite-avatica_18",
        "file": [
            {
                "sha": "f3ebe1212b0ed5517660f8ba4f71061157956668",
                "filename": "core/src/main/java/org/apache/calcite/tools/Frameworks.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/1580bd0fec62d836c9870edc339b0ab99d909cad/core/src/main/java/org/apache/calcite/tools/Frameworks.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/1580bd0fec62d836c9870edc339b0ab99d909cad/core/src/main/java/org/apache/calcite/tools/Frameworks.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/tools/Frameworks.java?ref=1580bd0fec62d836c9870edc339b0ab99d909cad",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.calcite.sql.parser.SqlParser;\n import org.apache.calcite.sql2rel.SqlRexConvertletTable;\n import org.apache.calcite.sql2rel.StandardConvertletTable;\n+import org.apache.calcite.util.Util;\n \n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n@@ -107,7 +108,8 @@ public abstract R apply(RelOptCluster cluster, RelOptSchema relOptSchema,\n           public R apply(RelOptCluster cluster, RelOptSchema relOptSchema,\n               SchemaPlus rootSchema, CalciteServerStatement statement) {\n             final CalciteSchema schema =\n-                CalciteSchema.from(config.getDefaultSchema());\n+                CalciteSchema.from(\n+                    Util.first(config.getDefaultSchema(), rootSchema));\n             return action.apply(cluster, relOptSchema, schema.root().plus());\n           }\n         });"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/88a6c5bdd2437eecabe05181c892957ff6b1ac5c",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/ca871d3776646e94e6b1a1d61692c6d80777952f",
        "message": "Test case and NPE patch for [CALCITE-661] Remote fetch in Calcite JDBC driver (Yeong Wei)",
        "bug_id": "calcite-avatica_19",
        "file": [
            {
                "sha": "455e55e21f7017a3b9ca21004807a0d60ab13de2",
                "filename": "core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java",
                "status": "modified",
                "additions": 3,
                "deletions": 2,
                "changes": 5,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/88a6c5bdd2437eecabe05181c892957ff6b1ac5c/core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/88a6c5bdd2437eecabe05181c892957ff6b1ac5c/core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java?ref=88a6c5bdd2437eecabe05181c892957ff6b1ac5c",
                "patch": "@@ -471,8 +471,9 @@ public MetaResultSet getTableTypes() {\n     final StatementHandle h = createStatement(ch);\n     final CalciteConnectionImpl calciteConnection = getConnection();\n     CalciteServerStatement statement = calciteConnection.server.getStatement(h);\n-    calciteConnection.parseQuery(sql, statement.createPrepareContext(),\n-        maxRowCount);\n+    h.signature =\n+        calciteConnection.parseQuery(sql, statement.createPrepareContext(),\n+            maxRowCount);\n     return h;\n   }\n "
            },
            {
                "sha": "c19216a48eeba9dfd65ec4603384a759f01d6320",
                "filename": "core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java",
                "status": "modified",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/88a6c5bdd2437eecabe05181c892957ff6b1ac5c/core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/88a6c5bdd2437eecabe05181c892957ff6b1ac5c/core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java?ref=88a6c5bdd2437eecabe05181c892957ff6b1ac5c",
                "patch": "@@ -408,6 +408,18 @@ public void testAvaticaStatementException() throws Exception {\n     remoteConnection.createStatement().getMoreResults();\n   }\n \n+  @Test public void testRemotePreparedStatement() throws Exception {\n+    final PreparedStatement preparedStatement =\n+        remoteConnection.prepareStatement(\"select * from \\\"hr\\\".\\\"emps\\\"\");\n+    ResultSet resultSet = preparedStatement.executeQuery();\n+    int count = 0;\n+    while (resultSet.next()) {\n+      count += 1;\n+    }\n+    // TODO: implement remote fetch\n+    //assertTrue(count > 0);\n+  }\n+\n   /** A bunch of sample values of various types. */\n   private static final List<Object> SAMPLE_VALUES =\n       ImmutableList.<Object>of(false, true,"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/4c47a15cd156ef6b6aadbda63a896b065b44498c",
        "message": "Fix NPE using TRIM function with JDBC.\n\nSymbols have a null family.",
        "bug_id": "calcite-avatica_20",
        "file": [
            {
                "sha": "b565a496a344e2fad30a98e1849cd764b0b2c2d5",
                "filename": "core/src/main/java/net/hydromatic/optiq/impl/jdbc/JdbcImplementor.java",
                "status": "modified",
                "additions": 5,
                "deletions": 0,
                "changes": 5,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c/core/src/main/java/net/hydromatic/optiq/impl/jdbc/JdbcImplementor.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c/core/src/main/java/net/hydromatic/optiq/impl/jdbc/JdbcImplementor.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/net/hydromatic/optiq/impl/jdbc/JdbcImplementor.java?ref=92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c",
                "patch": "@@ -30,6 +30,7 @@\n import org.eigenbase.sql.fun.SqlStdOperatorTable;\n import org.eigenbase.sql.parser.SqlParserPos;\n import org.eigenbase.sql.type.BasicSqlType;\n+import org.eigenbase.sql.type.SqlTypeName;\n import org.eigenbase.sql.validate.SqlValidatorUtil;\n import org.eigenbase.util.Pair;\n import org.eigenbase.util.Util;\n@@ -117,6 +118,10 @@ SqlNode toSql(RexProgram program, RexNode rex) {\n \n       case LITERAL:\n         final RexLiteral literal = (RexLiteral) rex;\n+        if (literal.getTypeName().equals(SqlTypeName.SYMBOL)) {\n+          return SqlLiteral\n+              .createSymbol((SqlLiteral.SqlSymbol) literal.getValue(), POS);\n+        }\n         switch (literal.getTypeName().getFamily()) {\n         case CHARACTER:\n           return SqlLiteral.createCharString((String) literal.getValue2(), POS);"
            },
            {
                "sha": "c117345b55f9eacb338ce118890dcd5cbd64578f",
                "filename": "core/src/test/java/net/hydromatic/optiq/test/JdbcTest.java",
                "status": "modified",
                "additions": 14,
                "deletions": 0,
                "changes": 14,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c/core/src/test/java/net/hydromatic/optiq/test/JdbcTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c/core/src/test/java/net/hydromatic/optiq/test/JdbcTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/net/hydromatic/optiq/test/JdbcTest.java?ref=92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c",
                "patch": "@@ -2183,6 +2183,20 @@ private void checkNullableTimestamp(OptiqAssert.Config config) {\n     predicate(\"\\\"name\\\" not in ('a', 'b', null) and \\\"name\\\" is not null\");\n   }\n \n+  @Test public void testTrim() {\n+    OptiqAssert.that()\n+        .withModel(FOODMART_MODEL)\n+        .query(\"select trim(\\\"lname\\\") as \\\"lname\\\" \"\n+            + \"from \\\"customer\\\" where \\\"lname\\\" = 'Nowmer'\")\n+        .returns(\"lname=Nowmer\\n\");\n+\n+    OptiqAssert.that()\n+        .withModel(FOODMART_MODEL)\n+        .query(\"select trim(leading 'N' from \\\"lname\\\") as \\\"lname\\\" \"\n+            + \"from \\\"customer\\\" where \\\"lname\\\" = 'Nowmer'\")\n+        .returns(\"lname=owmer\\n\");\n+  }\n+\n   private OptiqAssert.AssertQuery predicate(String foo) {\n     return OptiqAssert.that()\n         .with(OptiqAssert.Config.REGULAR)"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/387bee8b616623d91103751e8afe6d7c21842446",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/5b0e70c7457d23f7cf5ddb74c78395f5ad45476c",
        "message": "Fix bug where non-existent directory would give NPE. Instead print warning.",
        "bug_id": "calcite-avatica_21",
        "file": [
            {
                "sha": "8640228582add0586a43a4fb0edc66e94d4bd5a7",
                "filename": "src/main/java/net/hydromatic/optiq/impl/csv/CsvSchema.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/387bee8b616623d91103751e8afe6d7c21842446/src/main/java/net/hydromatic/optiq/impl/csv/CsvSchema.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/387bee8b616623d91103751e8afe6d7c21842446/src/main/java/net/hydromatic/optiq/impl/csv/CsvSchema.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/main/java/net/hydromatic/optiq/impl/csv/CsvSchema.java?ref=387bee8b616623d91103751e8afe6d7c21842446",
                "patch": "@@ -67,6 +67,10 @@ public boolean accept(File dir, String name) {\n             return name.endsWith(\".csv\");\n           }\n         });\n+    if (files == null) {\n+      System.out.println(\"directory \" + directoryFile + \" not found\");\n+      files = new File[0];\n+    }\n     for (File file : files) {\n       String tableName = file.getName();\n       if (tableName.endsWith(\".csv\")) {"
            },
            {
                "sha": "a7869091924d39c6afc615d3e36e89d7f396cdad",
                "filename": "src/test/java/net/hydromatic/optiq/test/CsvTest.java",
                "status": "modified",
                "additions": 29,
                "deletions": 0,
                "changes": 29,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/387bee8b616623d91103751e8afe6d7c21842446/src/test/java/net/hydromatic/optiq/test/CsvTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/387bee8b616623d91103751e8afe6d7c21842446/src/test/java/net/hydromatic/optiq/test/CsvTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/test/java/net/hydromatic/optiq/test/CsvTest.java?ref=387bee8b616623d91103751e8afe6d7c21842446",
                "patch": "@@ -71,6 +71,35 @@ private void close(Connection connection, Statement statement) {\n     connection.close();\n   }\n \n+  /** Tests an inline schema with a non-existent directory. */\n+  @Test public void testBadDirectory() throws SQLException {\n+    Properties info = new Properties();\n+    info.put(\"model\",\n+        \"inline:\"\n+        + \"{\\n\"\n+        + \"  version: '1.0',\\n\"\n+        + \"   schemas: [\\n\"\n+        + \"     {\\n\"\n+        + \"       type: 'custom',\\n\"\n+        + \"       name: 'bad',\\n\"\n+        + \"       factory: 'net.hydromatic.optiq.impl.csv.CsvSchemaFactory',\\n\"\n+        + \"       operand: {\\n\"\n+        + \"         directory: '/does/not/exist'\\n\"\n+        + \"       }\\n\"\n+        + \"     }\\n\"\n+        + \"   ]\\n\"\n+        + \"}\");\n+\n+    Connection connection =\n+        DriverManager.getConnection(\"jdbc:optiq:\", info);\n+    // must print \"directory ... not found\" to stdout, but not fail\n+    ResultSet tables =\n+        connection.getMetaData().getTables(null, null, null, null);\n+    tables.next();\n+    tables.close();\n+    connection.close();\n+  }\n+\n   /**\n    * Reads from a table.\n    */"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/fcdb825e892d39c7f2157e05a68add24bddc82db",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/6bf299263c39c353e600c4285f3291f4462d5236",
        "message": "Fix a type-cast issue in DatabaseMetaData.getColumns(), and an NPE handling a switched CASE expression.",
        "bug_id": "calcite-avatica_22",
        "file": [
            {
                "sha": "882a39f1b440373c6a7b02f8c96112e84a9161cc",
                "filename": "src/main/java/net/hydromatic/optiq/jdbc/Meta.java",
                "status": "modified",
                "additions": 30,
                "deletions": 2,
                "changes": 32,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/fcdb825e892d39c7f2157e05a68add24bddc82db/src/main/java/net/hydromatic/optiq/jdbc/Meta.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/fcdb825e892d39c7f2157e05a68add24bddc82db/src/main/java/net/hydromatic/optiq/jdbc/Meta.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/main/java/net/hydromatic/optiq/jdbc/Meta.java?ref=fcdb825e892d39c7f2157e05a68add24bddc82db",
                "patch": "@@ -24,12 +24,13 @@\n import net.hydromatic.optiq.*;\n import net.hydromatic.optiq.impl.TableInSchemaImpl;\n import net.hydromatic.optiq.impl.java.MapSchema;\n-\n import net.hydromatic.optiq.runtime.*;\n \n import org.eigenbase.reltype.*;\n import org.eigenbase.util.Pair;\n \n+import com.google.common.collect.ImmutableMap;\n+\n import java.lang.reflect.Field;\n import java.sql.*;\n import java.sql.Types;\n@@ -451,6 +452,28 @@ public String getName() {\n   }\n \n   private static class NamedFieldGetter {\n+    private static final Map<Class, Pair<Integer, String>> MAP =\n+        ImmutableMap.<Class, Pair<Integer, String>>builder()\n+            .put(boolean.class, Pair.of(Types.BOOLEAN, \"BOOLEAN\"))\n+            .put(Boolean.class, Pair.of(Types.BOOLEAN, \"BOOLEAN\"))\n+            .put(byte.class, Pair.of(Types.TINYINT, \"TINYINT\"))\n+            .put(Byte.class, Pair.of(Types.TINYINT, \"TINYINT\"))\n+            .put(short.class, Pair.of(Types.SMALLINT, \"SMALLINT\"))\n+            .put(Short.class, Pair.of(Types.SMALLINT, \"SMALLINT\"))\n+            .put(int.class, Pair.of(Types.INTEGER, \"INTEGER\"))\n+            .put(Integer.class, Pair.of(Types.INTEGER, \"INTEGER\"))\n+            .put(long.class, Pair.of(Types.BIGINT, \"BIGINT\"))\n+            .put(Long.class, Pair.of(Types.BIGINT, \"BIGINT\"))\n+            .put(float.class, Pair.of(Types.FLOAT, \"FLOAT\"))\n+            .put(Float.class, Pair.of(Types.FLOAT, \"FLOAT\"))\n+            .put(double.class, Pair.of(Types.DOUBLE, \"DOUBLE\"))\n+            .put(Double.class, Pair.of(Types.DOUBLE, \"DOUBLE\"))\n+            .put(String.class, Pair.of(Types.VARCHAR, \"VARCHAR\"))\n+            .put(java.sql.Date.class, Pair.of(Types.DATE, \"DATE\"))\n+            .put(Time.class, Pair.of(Types.TIME, \"TIME\"))\n+            .put(Timestamp.class, Pair.of(Types.TIMESTAMP, \"TIMESTAMP\"))\n+            .build();\n+\n     private final List<Field> fields = new ArrayList<Field>();\n     private final List<ColumnMetaData> columnNames =\n         new ArrayList<ColumnMetaData>();\n@@ -465,19 +488,24 @@ public NamedFieldGetter(Class clazz, String... names) {\n         } catch (NoSuchFieldException e) {\n           throw new RuntimeException(e);\n         }\n+        Pair<Integer, String> pair = lookupType(field.getType());\n         columnNames.add(\n             new ColumnMetaData(\n                 index, false, true, false, false,\n                 Primitive.is(field.getType())\n                     ? DatabaseMetaData.columnNullable\n                     : DatabaseMetaData.columnNoNulls,\n                 true, -1, name, name, null,\n-                0, 0, null, null, Types.VARCHAR, \"VARCHAR\", true,\n+                0, 0, null, null, pair.left, pair.right, true,\n                 false, false, null, field.getType()));\n         fields.add(field);\n       }\n     }\n \n+    private Pair<Integer, String> lookupType(Class<?> type) {\n+      return MAP.get(type);\n+    }\n+\n     private String uncamel(String name) {\n       StringBuilder buf = new StringBuilder();\n       int nextUpper = -1;"
            },
            {
                "sha": "47a79e1fd7cad23ed6d9cb8a24e37eb5a25bf610",
                "filename": "src/main/java/org/eigenbase/sql2rel/SqlToRelConverter.java",
                "status": "modified",
                "additions": 4,
                "deletions": 1,
                "changes": 5,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/fcdb825e892d39c7f2157e05a68add24bddc82db/src/main/java/org/eigenbase/sql2rel/SqlToRelConverter.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/fcdb825e892d39c7f2157e05a68add24bddc82db/src/main/java/org/eigenbase/sql2rel/SqlToRelConverter.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/main/java/org/eigenbase/sql2rel/SqlToRelConverter.java?ref=fcdb825e892d39c7f2157e05a68add24bddc82db",
                "patch": "@@ -4652,7 +4652,10 @@ public Void visit(SqlCall call)\n                 return null;\n             } else {\n                 for (SqlNode operand : call.operands) {\n-                    operand.accept(this);\n+                    // Operands are occasionally null, e.g. switched CASE arg 0.\n+                    if (operand != null) {\n+                        operand.accept(this);\n+                    }\n                 }\n             }\n             return null;"
            },
            {
                "sha": "9ea8ed5b163dd2687a1e3619387c99fed41c828c",
                "filename": "src/test/java/net/hydromatic/optiq/test/JdbcTest.java",
                "status": "modified",
                "additions": 28,
                "deletions": 0,
                "changes": 28,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/fcdb825e892d39c7f2157e05a68add24bddc82db/src/test/java/net/hydromatic/optiq/test/JdbcTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/fcdb825e892d39c7f2157e05a68add24bddc82db/src/test/java/net/hydromatic/optiq/test/JdbcTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/test/java/net/hydromatic/optiq/test/JdbcTest.java?ref=fcdb825e892d39c7f2157e05a68add24bddc82db",
                "patch": "@@ -435,6 +435,14 @@ public void onStatementClose(OptiqStatement statement) {\n     DatabaseMetaData metaData = connection.getMetaData();\n     ResultSet resultSet = metaData.getColumns(null, null, null, null);\n     assertTrue(resultSet.next()); // there's something\n+    String name = resultSet.getString(4);\n+    int type = resultSet.getInt(5);\n+    String typeName = resultSet.getString(6);\n+    int columnSize = resultSet.getInt(7);\n+    int decimalDigits = resultSet.getInt(9);\n+    int numPrecRadix = resultSet.getInt(10);\n+    int charOctetLength = resultSet.getInt(16);\n+    String isNullable = resultSet.getString(18);\n     resultSet.close();\n     connection.close();\n   }\n@@ -463,6 +471,16 @@ public void onStatementClose(OptiqStatement statement) {\n     connection.close();\n   }\n \n+  /** Tests some queries that have expedited processing because connection pools\n+   * like to use them to check whether the connection is alive.\n+   */\n+  @Test public void testSimple() {\n+    OptiqAssert.assertThat()\n+        .with(OptiqAssert.Config.FOODMART_CLONE)\n+        .query(\"SELECT 1\")\n+        .returns(\"EXPR$0=1\\n\");\n+  }\n+\n   @Test public void testCloneSchema()\n       throws ClassNotFoundException, SQLException {\n     final OptiqConnection connection = JdbcTest.getConnection(null, false);\n@@ -533,6 +551,16 @@ public void onStatementClose(OptiqStatement statement) {\n             + \"\\n\");\n   }\n \n+  @Test public void testOrderByCase() {\n+    OptiqAssert.assertThat()\n+        .with(OptiqAssert.Config.FOODMART_CLONE)\n+        .query(\n+            \"select \\\"time_by_day\\\".\\\"the_year\\\" as \\\"c0\\\" from \\\"time_by_day\\\" as \\\"time_by_day\\\" group by \\\"time_by_day\\\".\\\"the_year\\\" order by CASE WHEN \\\"time_by_day\\\".\\\"the_year\\\" IS NULL THEN 1 ELSE 0 END, \\\"time_by_day\\\".\\\"the_year\\\" ASC\")\n+        .returns(\n+            \"c0=1997\\n\"\n+            + \"c0=1998\\n\");\n+  }\n+\n   private static final String[] queries = {\n       \"select count(*) from (select 1 as \\\"c0\\\" from \\\"salary\\\" as \\\"salary\\\") as \\\"init\\\"\",\n       \"EXPR$0=21252\\n\","
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/86f5c4e2ff3ba239589cac9d9a961994eef3279b",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/160433c8eee622ce7e495b3d44537af60d9bc472",
        "message": "Fix NPE when executing a DatabaseMetaData method that returns the empty set (e.g. getPrimaryKeys).",
        "bug_id": "calcite-avatica_23",
        "file": [
            {
                "sha": "0d8359bff8b627fa1621f5df45bd25e30beca285",
                "filename": "src/main/java/net/hydromatic/optiq/jdbc/Meta.java",
                "status": "modified",
                "additions": 2,
                "deletions": 4,
                "changes": 6,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/Meta.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/Meta.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/main/java/net/hydromatic/optiq/jdbc/Meta.java?ref=86f5c4e2ff3ba239589cac9d9a961994eef3279b",
                "patch": "@@ -128,17 +128,15 @@ private ResultSet createResultSet(\n         final NamedFieldGetter columnGetter)\n     {\n         try {\n-            OptiqResultSet x = connection.driver.factory.newResultSet(\n+            return connection.driver.factory.newResultSet(\n                 connection.createStatement(),\n                 columnGetter.columnNames,\n                 new Function0<Cursor>() {\n                     public Cursor apply() {\n                         return columnGetter.cursor(\n                             ((Enumerable) enumerable).enumerator());\n                     }\n-                });\n-            x.execute();\n-            return x;\n+                }).execute();\n         } catch (SQLException e) {\n             throw new RuntimeException(e);\n         }"
            },
            {
                "sha": "72efc5311b07adbcbfeca14f1b06172acbc5f348",
                "filename": "src/main/java/net/hydromatic/optiq/jdbc/OptiqDatabaseMetaData.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/OptiqDatabaseMetaData.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/OptiqDatabaseMetaData.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/main/java/net/hydromatic/optiq/jdbc/OptiqDatabaseMetaData.java?ref=86f5c4e2ff3ba239589cac9d9a961994eef3279b",
                "patch": "@@ -882,7 +882,7 @@ public boolean next() {\n                             }\n                         };\n                     }\n-                });\n+                }).execute();\n         } catch (SQLException e) {\n             throw new RuntimeException(e);\n         }"
            },
            {
                "sha": "bbcc7efb6d96086ee512d0061d451419250cc36b",
                "filename": "src/main/java/net/hydromatic/optiq/jdbc/OptiqResultSet.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/OptiqResultSet.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/OptiqResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/main/java/net/hydromatic/optiq/jdbc/OptiqResultSet.java?ref=86f5c4e2ff3ba239589cac9d9a961994eef3279b",
                "patch": "@@ -130,7 +130,7 @@ void cancel() {\n      * constructor occurs while the statement is locked, to make sure that\n      * execute/cancel don't happen at the same time.</p>\n      */\n-    void execute() {\n+    OptiqResultSet execute() {\n         // Call driver's callback. It is permitted to throw a RuntimeException.\n         final boolean autoTemp =\n             ConnectionProperty.AUTO_TEMP.getBoolean(\n@@ -151,6 +151,7 @@ public void toBeCompleted() {\n         for (Map.Entry<String, Integer> entry : columnNameMap.entrySet()) {\n             accessorMap.put(entry.getKey(), accessorList.get(entry.getValue()));\n         }\n+        return this;\n     }\n \n     public boolean next() throws SQLException {"
            },
            {
                "sha": "7f5b94d21aef890f8643b4cb9fa9aab453ba8539",
                "filename": "src/test/java/net/hydromatic/optiq/test/JdbcFrontJdbcBackTest.java",
                "status": "modified",
                "additions": 23,
                "deletions": 0,
                "changes": 23,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/test/java/net/hydromatic/optiq/test/JdbcFrontJdbcBackTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/test/java/net/hydromatic/optiq/test/JdbcFrontJdbcBackTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/test/java/net/hydromatic/optiq/test/JdbcFrontJdbcBackTest.java?ref=86f5c4e2ff3ba239589cac9d9a961994eef3279b",
                "patch": "@@ -127,6 +127,29 @@ public Object apply(OptiqConnection a0) {\n             );\n     }\n \n+    /** Tests a JDBC method known to be not implemented (as it happens,\n+     * {@link java.sql.DatabaseMetaData#getPrimaryKeys}) that therefore uses\n+     * empty result set. */\n+    public void testEmpty() throws Exception {\n+        assertThat()\n+            .with(OptiqAssert.Config.JDBC_FOODMART2)\n+            .doWithConnection(\n+                new Function1<OptiqConnection, Object>() {\n+                    public Object apply(OptiqConnection a0) {\n+                        try {\n+                            ResultSet rset =\n+                                a0.getMetaData().getPrimaryKeys(\n+                                    null, null, \"sales_fact_1997\");\n+                            assertFalse(rset.next());\n+                        } catch (SQLException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                        return null;\n+                    }\n+                }\n+            );\n+    }\n+\n     public void testCase() {\n         assertThat()\n             .with(OptiqAssert.Config.JDBC_FOODMART2)"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/calcite-avatica/commit/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb",
        "repo": "calcite-avatica",
        "parent": "https://github.com/apache/calcite-avatica/commit/47e0e7c952aed22dd237529bb459a59580034f91",
        "message": "[CALCITE-980] Fix AND and OR implementation in Enumerable convention\n\nPreviously it could fail with NPE or return wrong result\n\nfixes #169",
        "bug_id": "calcite-avatica_24",
        "file": [
            {
                "sha": "32c043ca28e4d7c0d1f76f8114f8772d8ac25d8c",
                "filename": "core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java",
                "status": "modified",
                "additions": 55,
                "deletions": 36,
                "changes": 91,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java?ref=963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb",
                "patch": "@@ -55,10 +55,8 @@\n import org.apache.calcite.util.BuiltInMethod;\n import org.apache.calcite.util.Util;\n \n-import com.google.common.base.Function;\n import com.google.common.base.Supplier;\n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n \n import java.lang.reflect.Constructor;\n@@ -428,22 +426,38 @@ public Expression implement(\n       return new CallImplementor() {\n         public Expression implement(\n             RexToLixTranslator translator, RexCall call, NullAs nullAs) {\n+          assert call.getOperator() == AND\n+              : \"AND null semantics is supported only for AND operator. Actual operator is \"\n+              + String.valueOf(call.getOperator());\n           final RexCall call2 = call2(false, translator, call);\n-          final NullAs nullAs2 = nullAs == NullAs.TRUE ? NullAs.NULL : nullAs;\n-          final List<Expression> expressions =\n-              translator.translateList(call2.getOperands(), nullAs2);\n           switch (nullAs) {\n-          case NOT_POSSIBLE:\n+          case NOT_POSSIBLE: // Just foldAnd\n           case TRUE:\n+            // AND call should return false iff has FALSEs,\n+            // thus if we convert nulls to true then no harm is made\n+          case FALSE:\n+            // AND call should return false iff has FALSEs or has NULLs,\n+            // thus if we convert nulls to false, no harm is made\n+            final List<Expression> expressions =\n+                translator.translateList(call2.getOperands(), nullAs);\n             return Expressions.foldAnd(expressions);\n+          case NULL:\n+          case IS_NULL:\n+          case IS_NOT_NULL:\n+            final List<Expression> nullAsTrue =\n+                translator.translateList(call2.getOperands(), NullAs.TRUE);\n+            final List<Expression> nullAsIsNull =\n+                translator.translateList(call2.getOperands(), NullAs.IS_NULL);\n+            Expression hasFalse = Expressions.not(Expressions.foldAnd(nullAsTrue));\n+            Expression hasNull = Expressions.foldOr(nullAsIsNull);\n+            Expression result = nullAs.handle(\n+                Expressions.condition(hasFalse, BOXED_FALSE_EXPR,\n+                    Expressions.condition(hasNull, NULL_EXPR, BOXED_TRUE_EXPR)));\n+            return result;\n+          default:\n+            throw new IllegalArgumentException(\n+                \"Unknown nullAs when implementing AND: \" + nullAs);\n           }\n-          return Expressions.foldAnd(\n-              Lists.transform(expressions,\n-                  new Function<Expression, Expression>() {\n-                    public Expression apply(Expression e) {\n-                      return nullAs2.handle(e);\n-                    }\n-                  }));\n         }\n       };\n     case OR:\n@@ -456,34 +470,39 @@ public Expression apply(Expression e) {\n       //   : Boolean.TRUE;\n       return new CallImplementor() {\n         public Expression implement(\n-            RexToLixTranslator translator, RexCall call, NullAs nullAs) {\n+            RexToLixTranslator translator, RexCall call, final NullAs nullAs) {\n+          assert call.getOperator() == OR\n+              : \"OR null semantics is supported only for OR operator. Actual operator is \"\n+              + String.valueOf(call.getOperator());\n           final RexCall call2 = call2(harmonize, translator, call);\n-          final NullAs nullAs2 = nullAs == NullAs.TRUE ? NullAs.NULL : nullAs;\n-          final List<Expression> expressions =\n-              translator.translateList(call2.getOperands(), nullAs2);\n           switch (nullAs) {\n-          case NOT_POSSIBLE:\n+          case NOT_POSSIBLE: // Just foldOr\n+          case TRUE:\n+            // This should return false iff all arguments are FALSE,\n+            // thus we convert nulls to TRUE and foldOr\n           case FALSE:\n+            // This should return true iff has TRUE arguments,\n+            // thus we convert nulls to FALSE and foldOr\n+            final List<Expression> expressions =\n+                translator.translateList(call2.getOperands(), nullAs);\n             return Expressions.foldOr(expressions);\n+          case NULL:\n+          case IS_NULL:\n+          case IS_NOT_NULL:\n+            final List<Expression> nullAsFalse =\n+                translator.translateList(call2.getOperands(), NullAs.FALSE);\n+            final List<Expression> nullAsIsNull =\n+                translator.translateList(call2.getOperands(), NullAs.IS_NULL);\n+            Expression hasTrue = Expressions.foldOr(nullAsFalse);\n+            Expression hasNull = Expressions.foldOr(nullAsIsNull);\n+            Expression result = nullAs.handle(\n+                Expressions.condition(hasTrue, BOXED_TRUE_EXPR,\n+                    Expressions.condition(hasNull, NULL_EXPR, BOXED_FALSE_EXPR)));\n+            return result;\n+          default:\n+            throw new IllegalArgumentException(\n+                \"Unknown nullAs when implementing OR: \" + nullAs);\n           }\n-          final Expression t0 = expressions.get(0);\n-          final Expression t1 = expressions.get(1);\n-          if (!nullable(call2, 0) && !nullable(call2, 1)) {\n-            return Expressions.orElse(t0, t1);\n-          }\n-          return optimize(\n-              Expressions.condition(\n-                  Expressions.equal(t0, NULL_EXPR),\n-                  Expressions.condition(\n-                      Expressions.orElse(\n-                          Expressions.equal(t1, NULL_EXPR),\n-                          Expressions.not(t1)),\n-                      NULL_EXPR,\n-                      BOXED_TRUE_EXPR),\n-                  Expressions.condition(\n-                      Expressions.not(t0),\n-                      t1,\n-                      BOXED_TRUE_EXPR)));\n         }\n       };\n     case NOT:"
            },
            {
                "sha": "4c203d671674ae39c5eb46294a98efc5ad3fd725",
                "filename": "core/src/test/java/org/apache/calcite/test/JdbcTest.java",
                "status": "modified",
                "additions": 51,
                "deletions": 0,
                "changes": 51,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/java/org/apache/calcite/test/JdbcTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/java/org/apache/calcite/test/JdbcTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/JdbcTest.java?ref=963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb",
                "patch": "@@ -4277,6 +4277,57 @@ private void startOfGroupStep3(String startOfGroup) {\n             \"empid=100; deptno=10; name=Bill; salary=10000.0; commission=1000\\n\");\n   }\n \n+  /** Tests CALCITE-980: Not (C='a' or C='b') causes NPE */\n+  @Test public void testWhereOrAndNullable() {\n+    /* Generates the following code:\n+       public boolean moveNext() {\n+         while (inputEnumerator.moveNext()) {\n+           final Object[] current = (Object[]) inputEnumerator.current();\n+           final String inp0_ = current[0] == null ? (String) null : current[0].toString();\n+           final String inp1_ = current[1] == null ? (String) null : current[1].toString();\n+           if (inp0_ != null && org.apache.calcite.runtime.SqlFunctions.eq(inp0_, \"a\")\n+               && (inp1_ != null && org.apache.calcite.runtime.SqlFunctions.eq(inp1_, \"b\"))\n+               || inp0_ != null && org.apache.calcite.runtime.SqlFunctions.eq(inp0_, \"b\")\n+               && (inp1_ != null && org.apache.calcite.runtime.SqlFunctions.eq(inp1_, \"c\"))) {\n+             return true;\n+           }\n+         }\n+         return false;\n+       }\n+     */\n+    CalciteAssert.that()\n+        .with(CalciteAssert.Config.REGULAR)\n+        .query(\"with tst(c) as (values('a'),('b'),('c'),(cast(null as varchar)))\"\n+            + \" select u.c u, v.c v from tst u, tst v where ((u.c = 'a' and v.c = 'b') or (u.c = 'b' and v.c = 'c'))\")\n+        .returnsUnordered(\n+            \"U=a; V=b\",\n+            \"U=b; V=c\");\n+  }\n+\n+  /** Tests CALCITE-980: different flavors of boolean logic */\n+  @Test public void testBooleansInWhere() throws Exception {\n+    checkRun(\"sql/conditions.oq\");\n+  }\n+\n+  /** Tests CALCITE-980: different flavors of boolean logic */\n+  @Ignore(\"Fails with org.codehaus.commons.compiler.CompileException: Line 16, Column 112:\"\n+      + \" Cannot compare types \\\"int\\\" and \\\"java.lang.String\\\"\\n\")\n+  @Test public void testComparingIntAndString() throws Exception {\n+    // if (((...test.ReflectiveSchemaTest.IntAndString) inputEnumerator.current()).id == \"T\")\n+\n+    CalciteAssert.that()\n+        .withSchema(\"s\",\n+            new ReflectiveSchema(\n+                new ReflectiveSchemaTest.CatchallSchema()))\n+        .query(\"select a.\\\"value\\\", b.\\\"value\\\"\\n\"\n+            + \"  from \\\"bools\\\" a\\n\"\n+            + \"     , \\\"bools\\\" b\\n\"\n+            + \" where b.\\\"value\\\" = 'T'\\n\"\n+            + \" order by 1, 2\")\n+        .returnsUnordered(\n+            \"should fail with 'not a number' sql error while converting text to number\");\n+  }\n+\n   /** Tests the LIKE operator. */\n   @Test public void testLike() {\n     CalciteAssert.that()"
            },
            {
                "sha": "0ebd616ac5395fed40c4c3f1d9969ffa41a9bd94",
                "filename": "core/src/test/java/org/apache/calcite/test/ReflectiveSchemaTest.java",
                "status": "modified",
                "additions": 18,
                "deletions": 0,
                "changes": 18,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/java/org/apache/calcite/test/ReflectiveSchemaTest.java",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/java/org/apache/calcite/test/ReflectiveSchemaTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/ReflectiveSchemaTest.java?ref=963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb",
                "patch": "@@ -798,6 +798,17 @@ public boolean apply(Field v1) {\n     public final BitSet bitSet = new BitSet(0);\n   }\n \n+  /** Table that has integer and string fields */\n+  public static class IntAndString {\n+    public final int id;\n+    public final String value;\n+\n+    public IntAndString(int id, String value) {\n+      this.id = id;\n+      this.value = value;\n+    }\n+  }\n+\n   /** Object whose fields are relations. Called \"catch-all\" because it's OK\n    * if tests add new fields. */\n   public static class CatchallSchema {\n@@ -841,6 +852,13 @@ public boolean apply(Field v1) {\n \n     public final IntHolder[] primesCustomBoxed =\n         new IntHolder[]{new IntHolder(1), new IntHolder(3), new IntHolder(5)};\n+\n+    public final IntAndString[] nullables = new IntAndString[] {\n+      new IntAndString(1, \"A\"), new IntAndString(2, \"B\"), new IntAndString(2, \"C\"),\n+      new IntAndString(3, null)};\n+\n+    public final IntAndString[] bools = new IntAndString[] {\n+      new IntAndString(1, \"T\"), new IntAndString(2, \"F\"), new IntAndString(3, null)};\n   }\n \n   /**"
            },
            {
                "sha": "f7d7f51c7450c1f26d7423b6e9ec62cd9342ed50",
                "filename": "core/src/test/resources/sql/conditions.oq",
                "status": "added",
                "additions": 259,
                "deletions": 0,
                "changes": 259,
                "blob_url": "https://github.com/apache/calcite-avatica/blob/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/resources/sql/conditions.oq",
                "raw_url": "https://github.com/apache/calcite-avatica/raw/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/resources/sql/conditions.oq",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/resources/sql/conditions.oq?ref=963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb",
                "patch": "@@ -0,0 +1,259 @@\n+# conditions.oq - conditions\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to you under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+!use catchall\n+!set outputformat mysql\n+\n+# OR test\n+\n+with tmp(a, b) as (\n+  values (1, 1), (1, 0), (1, cast(null as int))\n+       , (0, 1), (0, 0), (0, cast(null as int))\n+       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))\n+select *\n+  from tmp\n+ where a = 1 or b = 1\n+ order by 1, 2;\n+\n++---+---+\n+| A | B |\n++---+---+\n+| 0 | 1 |\n+| 1 | 0 |\n+| 1 | 1 |\n+| 1 |   |\n+|   | 1 |\n++---+---+\n+(5 rows)\n+\n+!ok\n+\n+with tmp(a, b) as (\n+  values (1, 1), (1, 0), (1, cast(null as int))\n+       , (0, 1), (0, 0), (0, cast(null as int))\n+       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))\n+select *\n+  from tmp\n+ where not (a = 1 or b = 1)\n+ order by 1, 2;\n+\n++---+---+\n+| A | B |\n++---+---+\n+| 0 | 0 |\n++---+---+\n+(1 row)\n+\n+!ok\n+\n+# AND test\n+\n+with tmp(a, b) as (\n+  values (1, 1), (1, 0), (1, cast(null as int))\n+       , (0, 1), (0, 0), (0, cast(null as int))\n+       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))\n+select *\n+  from tmp\n+ where a = 1 AND b = 1\n+ order by 1, 2;\n+\n++---+---+\n+| A | B |\n++---+---+\n+| 1 | 1 |\n++---+---+\n+(1 row)\n+\n+!ok\n+\n+with tmp(a, b) as (\n+  values (1, 1), (1, 0), (1, cast(null as int))\n+       , (0, 1), (0, 0), (0, cast(null as int))\n+       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))\n+select *\n+  from tmp\n+ where not (a = 1 AND b = 1)\n+ order by 1, 2;\n+\n++---+---+\n+| A | B |\n++---+---+\n+| 0 | 0 |\n+| 0 | 1 |\n+| 0 |   |\n+| 1 | 0 |\n+|   | 0 |\n++---+---+\n+(5 rows)\n+\n+!ok\n+\n+# Test cases for CALCITE-980\n+\n+select \"value\" from \"nullables\" a where \"value\" = 'A' or \"value\" = 'B' order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| A     |\n+| B     |\n++-------+\n+(2 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where not (\"value\" = 'A' or \"value\" = 'B') order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| C     |\n++-------+\n+(1 row)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where not (not (\"value\" = 'A' or \"value\" = 'B')) order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| A     |\n+| B     |\n++-------+\n+(2 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where \"value\" = 'A' and \"value\" = 'B' order by 1;\n+\n++-------+\n+| value |\n++-------+\n++-------+\n+(0 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where not (\"value\" = 'A' and \"value\" = 'B') order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| A     |\n+| B     |\n+| C     |\n++-------+\n+(3 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where not (not (\"value\" = 'A' and \"value\" = 'B')) order by 1;\n+\n++-------+\n+| value |\n++-------+\n++-------+\n+(0 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where case when not (\"value\" = 'A' or \"value\" = 'B') then 1 else 0 end = 1\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| C     |\n++-------+\n+(1 row)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where\n+   case when not (\"value\"='A' or \"value\"='B')\n+     then\n+       case when (\"value\"='A' or \"value\"='B') then 1 else 2 end\n+     else 0\n+   end = 2\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| C     |\n++-------+\n+(1 row)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where\n+   case when not (\"value\"='A' or \"value\"='B')\n+     then\n+       case when not /* <--diff from above */ (\"value\"='A' or \"value\"='B') then 1 else 2 end\n+     else 0\n+   end = 1 /* <- diff from above*/\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| C     |\n++-------+\n+(1 row)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where\n+   case when not (\"value\"='A' or \"value\"='B')\n+     then\n+       case when not (\"value\"='A' or \"value\"='B') then 1 else 2 end\n+     else 0\n+   end = 0 /* <- diff from above*/\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| A     |\n+| B     |\n+|       |\n++-------+\n+(3 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where\n+   case when not (\"value\"='A' or \"value\"='B')\n+     then\n+       case when not (\"value\"='A' or \"value\"='B') then 1 else 2 end\n+     else 0\n+   end = 2 /* <- diff from above*/\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n++-------+\n+(0 rows)\n+\n+!ok"
            }
        ]
    }
]
