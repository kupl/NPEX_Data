[
    {
        "commit": "https://github.com/apache/sling-slingstart-maven-plugin/commit/cf606ced3b349ec0d91a329b411a564e0cbd13aa",
        "repo": "sling-slingstart-maven-plugin",
        "parent": "https://github.com/apache/sling-slingstart-maven-plugin/commit/63acc41dd73a185f5051bc4b63fef3191982daaf",
        "message": "SLING-4970 : Potential NPE with transitive models\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1698093 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sling-slingstart-maven-plugin_1",
        "file": [
            {
                "sha": "8a5198628a98aeb3b3c023a8b3561182a8b3a418",
                "filename": "src/main/java/org/apache/sling/maven/slingstart/DependencyLifecycleParticipant.java",
                "status": "modified",
                "additions": 13,
                "deletions": 3,
                "changes": 16,
                "blob_url": "https://github.com/apache/sling-slingstart-maven-plugin/blob/cf606ced3b349ec0d91a329b411a564e0cbd13aa/src/main/java/org/apache/sling/maven/slingstart/DependencyLifecycleParticipant.java",
                "raw_url": "https://github.com/apache/sling-slingstart-maven-plugin/raw/cf606ced3b349ec0d91a329b411a564e0cbd13aa/src/main/java/org/apache/sling/maven/slingstart/DependencyLifecycleParticipant.java",
                "contents_url": "https://api.github.com/repos/apache/sling-slingstart-maven-plugin/contents/src/main/java/org/apache/sling/maven/slingstart/DependencyLifecycleParticipant.java?ref=cf606ced3b349ec0d91a329b411a564e0cbd13aa",
                "patch": "@@ -166,7 +166,7 @@ private static Model addDependencies(final Environment env, final ProjectInfo in\n         // we have to create an effective model to add the dependencies\n         final Model effectiveModel = ModelUtility.getEffectiveModel(info.localModel, resolverOptions);\n \n-        final List<Model> dependencies = searchSlingstartDependencies(env, info, effectiveModel);\n+        final List<Model> dependencies = searchSlingstartDependencies(env, info, info.localModel, effectiveModel);\n         info.model = new Model();\n         for(final Model d : dependencies) {\n             ModelUtility.merge(info.model, d);\n@@ -255,6 +255,7 @@ private static void addDependenciesFromModel(\n     private static List<Model> searchSlingstartDependencies(\n             final Environment env,\n             final ProjectInfo info,\n+            final Model rawModel,\n             final Model effectiveModel)\n     throws MavenExecutionException {\n         // slingstart or slingfeature\n@@ -332,7 +333,16 @@ private static void addDependenciesFromModel(\n                     }\n                     for(final org.apache.sling.provisioning.model.Artifact r : removeList) {\n                         group.remove(r);\n-                        info.localModel.getFeature(feature.getName()).getRunMode(runMode.getNames()).getArtifactGroup(group.getStartLevel()).remove(r);\n+                        final Feature localModelFeature = rawModel.getFeature(feature.getName());\n+                        if ( localModelFeature != null ) {\n+                            final RunMode localRunMode = localModelFeature.getRunMode(runMode.getNames());\n+                            if ( localRunMode != null ) {\n+                                final ArtifactGroup localAG = localRunMode.getArtifactGroup(group.getStartLevel());\n+                                if ( localAG != null ) {\n+                                    localAG.remove(r);\n+                                }\n+                            }\n+                        }\n                     }\n                 }\n             }\n@@ -348,7 +358,7 @@ private static Model processSlingstartDependencies(final Environment env, final\n         // we have to create an effective model to add the dependencies\n         final Model effectiveModel = ModelUtility.getEffectiveModel(rawModel, new ResolverOptions());\n \n-        final List<Model> dependencies = searchSlingstartDependencies(env, info, effectiveModel);\n+        final List<Model> dependencies = searchSlingstartDependencies(env, info, rawModel, effectiveModel);\n         Model mergingModel = new Model();\n         for(final Model d : dependencies) {\n             ModelUtility.merge(mergingModel, d);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/sling-slingstart-maven-plugin/commit/7fa5392b35328b288d1fabd8772b69a070bab9ee",
        "repo": "sling-slingstart-maven-plugin",
        "parent": "https://github.com/apache/sling-slingstart-maven-plugin/commit/ac522ec9d4abf16a3b23768fa68b4c268b413e0d",
        "message": "SLING-4880 Fix potential NPEs when resolving artifacts\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1690839 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "sling-slingstart-maven-plugin_2",
        "file": [
            {
                "sha": "91840ae6c8feb26958e02a63d0f09a9731495c75",
                "filename": "src/main/java/org/apache/sling/maven/slingstart/DependencyLifecycleParticipant.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/sling-slingstart-maven-plugin/blob/7fa5392b35328b288d1fabd8772b69a070bab9ee/src/main/java/org/apache/sling/maven/slingstart/DependencyLifecycleParticipant.java",
                "raw_url": "https://github.com/apache/sling-slingstart-maven-plugin/raw/7fa5392b35328b288d1fabd8772b69a070bab9ee/src/main/java/org/apache/sling/maven/slingstart/DependencyLifecycleParticipant.java",
                "contents_url": "https://api.github.com/repos/apache/sling-slingstart-maven-plugin/contents/src/main/java/org/apache/sling/maven/slingstart/DependencyLifecycleParticipant.java?ref=7fa5392b35328b288d1fabd8772b69a070bab9ee",
                "patch": "@@ -148,10 +148,10 @@ private static Model addDependencies(final Environment env, final ProjectInfo in\n         \n         // prepare resolver options\n         ResolverOptions resolverOptions = new ResolverOptions();\n-        if (nodeBooleanValue(info.plugin, \"usePomVariables\", false)) {\n+        if (nodeBooleanValue(info.plugin, \"usePomVariables\", false) && info.project != null) {\n             resolverOptions.variableResolver(new PomVariableResolver(info.project));\n         }\n-        if (nodeBooleanValue(info.plugin, \"usePomDependencies\", false)) {\n+        if (nodeBooleanValue(info.plugin, \"usePomDependencies\", false) && info.project != null) {\n             resolverOptions.artifactVersionResolver(new PomArtifactVersionResolver(info.project));\n         }\n "
            },
            {
                "sha": "3c0a6d58a54a5e5f53038f7e96fc73fac5d30dd4",
                "filename": "src/main/java/org/apache/sling/maven/slingstart/PomArtifactVersionResolver.java",
                "status": "modified",
                "additions": 10,
                "deletions": 6,
                "changes": 16,
                "blob_url": "https://github.com/apache/sling-slingstart-maven-plugin/blob/7fa5392b35328b288d1fabd8772b69a070bab9ee/src/main/java/org/apache/sling/maven/slingstart/PomArtifactVersionResolver.java",
                "raw_url": "https://github.com/apache/sling-slingstart-maven-plugin/raw/7fa5392b35328b288d1fabd8772b69a070bab9ee/src/main/java/org/apache/sling/maven/slingstart/PomArtifactVersionResolver.java",
                "contents_url": "https://api.github.com/repos/apache/sling-slingstart-maven-plugin/contents/src/main/java/org/apache/sling/maven/slingstart/PomArtifactVersionResolver.java?ref=7fa5392b35328b288d1fabd8772b69a070bab9ee",
                "patch": "@@ -47,17 +47,21 @@ public String resolve(Artifact artifact) {\n         if (version != null) {\n             return version;\n         }\n-        version = findVersion(project.getDependencyManagement().getDependencies(), artifact);\n-        if (version != null) {\n-            return version;\n+        if (project.getDependencyManagement() != null) {\n+            version = findVersion(project.getDependencyManagement().getDependencies(), artifact);\n+            if (version != null) {\n+                return version;\n+            }\n         }\n         return null;\n     }\n     \n     private String findVersion(List<Dependency> dependencies, Artifact artifact) {\n-        for (Dependency dependency : project.getDependencyManagement().getDependencies()) {\n-            if (artifactEquals(dependency, artifact)) {\n-                return dependency.getVersion();\n+        if (dependencies != null) {\n+            for (Dependency dependency : dependencies) {\n+                if (artifactEquals(dependency, artifact)) {\n+                    return dependency.getVersion();\n+                }\n             }\n         }\n         return null;"
            }
        ]
    }
]
