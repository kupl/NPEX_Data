[
    {
        "commit": "https://github.com/apache/wookie/commit/b5075deffd5c0911176373cdee146409ac940366",
        "repo": "wookie",
        "parent": "https://github.com/apache/wookie/commit/f6d136c683fceffe3bdaca0cb98d6a6e58a5ca13",
        "message": "Ensure we don't get an NPE when getting the value of a preference\n\ngit-svn-id: https://svn.apache.org/repos/asf/wookie/trunk@1566367 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "wookie_1",
        "file": [
            {
                "sha": "76063af25f1c8f3f62c7275305ca5245a9b7e83a",
                "filename": "wookie-services/wookie-spi/src/main/java/org/apache/wookie/services/impl/DefaultPreferencesService.java",
                "status": "modified",
                "additions": 6,
                "deletions": 1,
                "changes": 7,
                "blob_url": "https://github.com/apache/wookie/blob/b5075deffd5c0911176373cdee146409ac940366/wookie-services/wookie-spi/src/main/java/org/apache/wookie/services/impl/DefaultPreferencesService.java",
                "raw_url": "https://github.com/apache/wookie/raw/b5075deffd5c0911176373cdee146409ac940366/wookie-services/wookie-spi/src/main/java/org/apache/wookie/services/impl/DefaultPreferencesService.java",
                "contents_url": "https://api.github.com/repos/apache/wookie/contents/wookie-services/wookie-spi/src/main/java/org/apache/wookie/services/impl/DefaultPreferencesService.java?ref=b5075deffd5c0911176373cdee146409ac940366",
                "patch": "@@ -41,7 +41,12 @@ public String getPreference(String token, String name) {\n \t\t\twidgetpreferences = new HashMap<String, IPreference>();\n \t\t\tthis.preferences.put(token, widgetpreferences);\n \t\t}\n-\t\treturn widgetpreferences.get(name).getValue();\n+\t\tIPreference pref = widgetpreferences.get(name);\n+\t\tif (pref != null){\n+\t\t\treturn widgetpreferences.get(name).getValue();\n+\t\t} else {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n \t@Override"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/wookie/commit/6c4b4b87ff6302d3e06bdd5bd21802f4591227c0",
        "repo": "wookie",
        "parent": "https://github.com/apache/wookie/commit/5e6bd1b288467b1f6ff6dbc96646fb2189476ec4",
        "message": "Fixed bug where there was a NPE when the keystore file could not be loaded for the DigSig processor\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wookie/trunk@1373413 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "wookie_2",
        "file": [
            {
                "sha": "243ec0f4f1660f837873f0fabc01043bd7171bd3",
                "filename": "src/org/apache/wookie/controller/WidgetsController.java",
                "status": "modified",
                "additions": 49,
                "deletions": 45,
                "changes": 94,
                "blob_url": "https://github.com/apache/wookie/blob/6c4b4b87ff6302d3e06bdd5bd21802f4591227c0/src/org/apache/wookie/controller/WidgetsController.java",
                "raw_url": "https://github.com/apache/wookie/raw/6c4b4b87ff6302d3e06bdd5bd21802f4591227c0/src/org/apache/wookie/controller/WidgetsController.java",
                "contents_url": "https://api.github.com/repos/apache/wookie/contents/src/org/apache/wookie/controller/WidgetsController.java?ref=6c4b4b87ff6302d3e06bdd5bd21802f4591227c0",
                "patch": "@@ -268,66 +268,70 @@ protected boolean create(String resourceId, HttpServletRequest request, HttpServ\n         fac.setFeatures(Features.getFeatureNames());\n         fac.setStartPageProcessor(new StartPageProcessor());\n         if (VERIFYSIGNATURE) {\n-        InputStream stream = getServletContext().getResourceAsStream(\n-            \"/WEB-INF/classes/\" + KEYSTORE);\n-        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n-        keyStore.load(stream, PASSWORD.toCharArray());\n-        stream.close();\n-        fac.setDigitalSignatureParser(new DigitalSignatureProcessor(keyStore,\n-            REJECTINVALID, REJECTUNTRUSTED));\n-      }\n-       W3CWidget widgetModel = fac.parse(zipFile);\n+            InputStream stream = getServletContext().getResourceAsStream(\n+                    \"/WEB-INF/classes/\" + KEYSTORE);\n+            if(stream != null){\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(stream, PASSWORD.toCharArray());\n+                stream.close();\n+                fac.setDigitalSignatureParser(new DigitalSignatureProcessor(keyStore,\n+                        REJECTINVALID, REJECTUNTRUSTED));\n+            }else{\n+                _logger.error(localizedMessages.getString(\"WidgetHotDeploy.4\") + \n+                        \" (/WEB-INF/classes/\" + KEYSTORE+\") \" + localizedMessages.getString(\"WidgetHotDeploy.5\"));\n+            }\n+        }\n+        W3CWidget widgetModel = fac.parse(zipFile);\n         new WidgetJavascriptSyntaxAnalyzer(fac.getUnzippedWidgetDirectory());\n-       // File f = new File();\n         //\n         // Check if the widget model corresponds to an existing installed widget\n         //\n         IPersistenceManager persistenceManager = PersistenceManagerFactory.getPersistenceManager();\n         if (persistenceManager.findWidgetByGuid(widgetModel.getIdentifier()) == null) {\n-          \n-          //\n-          // A new widget was created, so return 201\n-          //\n-          WidgetFactory.addNewWidget(widgetModel, zipFile,false);\n-          NewWidgetBroadcaster.broadcast(properties, widgetModel.getIdentifier());\n-          returnXml(WidgetImportHelper.createXMLWidgetDocument(widgetModel, new File(fac.getUnzippedWidgetDirectory(), \"config.xml\"), getWookieServerURL(request, \"\").toString(), true), response);\n-          return true;\n-          \n+\n+            //\n+            // A new widget was created, so return 201\n+            //\n+            WidgetFactory.addNewWidget(widgetModel, zipFile,false);\n+            NewWidgetBroadcaster.broadcast(properties, widgetModel.getIdentifier());\n+            returnXml(WidgetImportHelper.createXMLWidgetDocument(widgetModel, new File(fac.getUnzippedWidgetDirectory(), \"config.xml\"), getWookieServerURL(request, \"\").toString(), true), response);\n+            return true;\n+\n         } else {\n-          \n-          //\n-          // Widget already exists, so update the widget metadata and configuration details\n-          // and return 200\n-          //\n-          WidgetFactory.update(widgetModel,persistenceManager.findWidgetByGuid(widgetModel.getIdentifier()),false, zipFile);\n-          returnXml(WidgetImportHelper.createXMLWidgetDocument(widgetModel, new File(fac.getUnzippedWidgetDirectory(), \"config.xml\"), getWookieServerURL(request, \"\").toString(), true), response);\n-          return false;\n-          \n+\n+            //\n+            // Widget already exists, so update the widget metadata and configuration details\n+            // and return 200\n+            //\n+            WidgetFactory.update(widgetModel,persistenceManager.findWidgetByGuid(widgetModel.getIdentifier()),false, zipFile);\n+            returnXml(WidgetImportHelper.createXMLWidgetDocument(widgetModel, new File(fac.getUnzippedWidgetDirectory(), \"config.xml\"), getWookieServerURL(request, \"\").toString(), true), response);\n+            return false;\n+\n         }\n-        \n+\n         //\n         // Catch specific parsing and validation errors and throw exception with error message\n         //\n     } catch (InvalidStartFileException ex) {\n-      _logger.error(ex);\n-      throw new InvalidParametersException(\n-          localizedMessages.getString(\"widgets.no-start-file\") + \"\\n\" + ex.getMessage()); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$     \n+        _logger.error(ex);\n+        throw new InvalidParametersException(\n+                localizedMessages.getString(\"widgets.no-start-file\") + \"\\n\" + ex.getMessage()); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$     \n     } catch (BadManifestException ex) {\n-      _logger.error(ex);\n-      String message = ex.getMessage();\n-      if (ex.getMessage() == null || ex.getMessage().equals(\"\"))message = localizedMessages.getString(\"widgets.invalid-config-xml\"); //$NON-NLS-1$\n-      if (ex instanceof InvalidContentTypeException)\n-        message = localizedMessages.getString(\"widgets.unsupported-content-type\");//$NON-NLS-1$\n-      throw new InvalidParametersException(message);\n+        _logger.error(ex);\n+        String message = ex.getMessage();\n+        if (ex.getMessage() == null || ex.getMessage().equals(\"\"))message = localizedMessages.getString(\"widgets.invalid-config-xml\"); //$NON-NLS-1$\n+        if (ex instanceof InvalidContentTypeException)\n+            message = localizedMessages.getString(\"widgets.unsupported-content-type\");//$NON-NLS-1$\n+        throw new InvalidParametersException(message);\n     } catch (BadWidgetZipFileException ex) {\n-      _logger.error(ex);\n-      String message = ex.getMessage();\n-      if (ex.getMessage() == null || ex.getMessage().equals(\"\"))message = localizedMessages.getString(\"widgets.bad-zip-file\"); //$NON-NLS-1$\n-      throw new InvalidParametersException(message);\n+        _logger.error(ex);\n+        String message = ex.getMessage();\n+        if (ex.getMessage() == null || ex.getMessage().equals(\"\"))message = localizedMessages.getString(\"widgets.bad-zip-file\"); //$NON-NLS-1$\n+        throw new InvalidParametersException(message);\n     } catch (Exception ex) {\n-      _logger.error(ex);\n-      throw new InvalidParametersException(\n-          localizedMessages.getString(\"widgets.cant-parse-config-xml\") + \"\\n\" + ex.getMessage()); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n+        _logger.error(ex);\n+        throw new InvalidParametersException(\n+                localizedMessages.getString(\"widgets.cant-parse-config-xml\") + \"\\n\" + ex.getMessage()); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n     }\n \n   }"
            },
            {
                "sha": "01da8fe01246f64d50faf441f7c7bea3d6371c34",
                "filename": "src/org/apache/wookie/messages.properties",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/wookie/blob/6c4b4b87ff6302d3e06bdd5bd21802f4591227c0/src/org/apache/wookie/messages.properties",
                "raw_url": "https://github.com/apache/wookie/raw/6c4b4b87ff6302d3e06bdd5bd21802f4591227c0/src/org/apache/wookie/messages.properties",
                "contents_url": "https://api.github.com/repos/apache/wookie/contents/src/org/apache/wookie/messages.properties?ref=6c4b4b87ff6302d3e06bdd5bd21802f4591227c0",
                "patch": "@@ -41,6 +41,8 @@ WidgetHotDeploy.0=Hot deploy disabled\n WidgetHotDeploy.1=Hot deploy error: Unable to move dropped .wgt file to upload folder\n WidgetHotDeploy.2=Hot deploy error: file is not a valid widget package\n WidgetHotDeploy.3=Hot deploy error: widget has invalid manifest\n+WidgetHotDeploy.4=Unable to load specified key file.\n+WidgetHotDeploy.5=Digital Signature Verification is not enabled.\n \n WidgetServiceServlet.0=No valid requestid was found.\n WidgetServiceServlet.1=completed"
            },
            {
                "sha": "39a6a24593dd965f2db311bef4f8c91a717a3255",
                "filename": "src/org/apache/wookie/messages_nl.properties",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/wookie/blob/6c4b4b87ff6302d3e06bdd5bd21802f4591227c0/src/org/apache/wookie/messages_nl.properties",
                "raw_url": "https://github.com/apache/wookie/raw/6c4b4b87ff6302d3e06bdd5bd21802f4591227c0/src/org/apache/wookie/messages_nl.properties",
                "contents_url": "https://api.github.com/repos/apache/wookie/contents/src/org/apache/wookie/messages_nl.properties?ref=6c4b4b87ff6302d3e06bdd5bd21802f4591227c0",
                "patch": "@@ -41,6 +41,8 @@ WidgetHotDeploy.0=Hot deploy disabled (dutch)\n WidgetHotDeploy.1=Hot deploy error: Unable to move dropped .wgt file to upload folder (dutch)\n WidgetHotDeploy.2=Hot deploy error: file is not a valid widget package (dutch)\n WidgetHotDeploy.3=Hot deploy error: widget has invalid manifest (dutch)\n+WidgetHotDeploy.4=Unable to load specified key file.(dutch)\n+WidgetHotDeploy.5=Digital Signature Verification is not enabled.(dutch)\n \n WidgetServiceServlet.0=No valid requestid was found.(dutch)\n WidgetServiceServlet.1=completed(dutch)"
            },
            {
                "sha": "c298b645952a467a75e55888e042a13b999f1265",
                "filename": "src/org/apache/wookie/server/ContextListener.java",
                "status": "modified",
                "additions": 195,
                "deletions": 190,
                "changes": 385,
                "blob_url": "https://github.com/apache/wookie/blob/6c4b4b87ff6302d3e06bdd5bd21802f4591227c0/src/org/apache/wookie/server/ContextListener.java",
                "raw_url": "https://github.com/apache/wookie/raw/6c4b4b87ff6302d3e06bdd5bd21802f4591227c0/src/org/apache/wookie/server/ContextListener.java",
                "contents_url": "https://api.github.com/repos/apache/wookie/contents/src/org/apache/wookie/server/ContextListener.java?ref=6c4b4b87ff6302d3e06bdd5bd21802f4591227c0",
                "patch": "@@ -57,211 +57,216 @@\n  *\n  */\n public class ContextListener implements ServletContextListener {\n-\t/*\n-\t * In the case of the 'log4j.properties' file used within a server environment\n-\t * there is no need to explicitly load the file.  It will be automatically loaded as\n-\t * long as it is placed at the root of the source code. This way it eventually is found under...\n-\t * \n-\t * \t\t\t'/webappname/WEB-INF/classes'  ...at runtime.\n-\t */\n-\tstatic Logger _logger = Logger.getLogger(ContextListener.class.getName());\n-\tpublic static Boolean usePreferenceInstanceQueues;\n-\tpublic static Boolean useSharedDataInstanceQueues;\t\n-\t\n+    /*\n+     * In the case of the 'log4j.properties' file used within a server environment\n+     * there is no need to explicitly load the file.  It will be automatically loaded as\n+     * long as it is placed at the root of the source code. This way it eventually is found under...\n+     * \n+     * \t\t\t'/webappname/WEB-INF/classes'  ...at runtime.\n+     */\n+    static Logger _logger = Logger.getLogger(ContextListener.class.getName());\n+    public static Boolean usePreferenceInstanceQueues;\n+    public static Boolean useSharedDataInstanceQueues;\n+\n     public void contextInitialized(ServletContextEvent event) {\n-\t\ttry {\n-\t\t\tServletContext context = event.getServletContext();\n-\t\t\tWidgetRuntimeHelper.setWebContextPath(context.getContextPath());\n-\t\t\t/* \n-\t\t\t *  load the widgetserver.properties and local.widget.properties file\n-\t\t\t *  and put it into this context as an attribute 'properties' available to all resources\n-\t\t\t */\n-      File localPropsFile = new File(System.getProperty(\"user.dir\") + File.separator + \"local.widgetserver.properties\");\n-      PropertiesConfiguration localConfiguration = new PropertiesConfiguration(localPropsFile);\n-      CompositeConfiguration configuration = new CompositeConfiguration();\n-      configuration.addConfiguration(localConfiguration);\n-      configuration.addConfiguration(new PropertiesConfiguration(\"widgetserver.properties\"));\n-      \n-      context.setAttribute(\"properties\", (Configuration) configuration);\n-\t\t \t\n-\t\t \t// load these up now so we don't have to do it on every request(i.e. filter) in the future\n-\t\t \tusePreferenceInstanceQueues = configuration.getBoolean(WidgetRuntimeHelper.USE_PREFERENCE_INSTANCE_QUEUES);\t\n-\t\t\tuseSharedDataInstanceQueues = configuration.getBoolean(WidgetRuntimeHelper.USE_SHAREDDATA_INSTANCE_QUEUES);\t\t \t\n-\t\t \t\n-\t\t\t/*\n-\t\t \t * Merge in system properties overrides\n-\t\t \t */\n-\t\t \tIterator<Object> systemKeysIter = System.getProperties().keySet().iterator();\n-\t\t \twhile (systemKeysIter.hasNext()) {\n-\t\t \t    String key = systemKeysIter.next().toString();\n-\t\t \t    if (configuration.containsKey(key) || key.startsWith(\"widget.\")) {\n-\t\t \t        String setting = configuration.getString(key);\n-\t\t \t        String override = System.getProperty(key);\n-\t\t \t        if ((override != null) && (override.length() > 0) && !override.equals(setting)) {\n-\t\t \t            configuration.setProperty(key, override);\n-\t\t \t            if (setting != null) {\n-\t\t \t                _logger.info(\"Overridden server configuration property: \" + key + \"=\" +override);\n-\t\t \t            }\n-\t\t \t        }\n-\t\t \t    }\n-\t\t \t}\n-\t\t \t\n-\t\t \t/*\n-\t\t \t * Initialize persistence manager factory now, not on first request\n-\t\t \t */\n-\t\t \tPersistenceManagerFactory.initialize(configuration);\n-\t\t \t\n-\t\t \t/*\n-\t\t \t * Initialise the locale handler\n-\t\t \t */\n-\t\t \tLocaleHandler.getInstance().initialize(configuration);\n-\t\t\tfinal Locale locale = new Locale(configuration.getString(\"widget.default.locale\"));\n-\t\t\tfinal Messages localizedMessages = LocaleHandler.getInstance().getResourceBundle(locale);\n-\t\t \t\n-\t\t \t/* \n-\t\t\t *  load the opensocial.properties file and put it into this context\n-\t\t\t *  as an attribute 'opensocial' available to all resources\n-\t\t\t */\n-\t\t\tFile localOpenSocialPropsFile = new File(System.getProperty(\"user.dir\") + File.separator + \"local.opensocial.properties\");\n+        try {\n+            ServletContext context = event.getServletContext();\n+            WidgetRuntimeHelper.setWebContextPath(context.getContextPath());\n+            /* \n+             *  load the widgetserver.properties and local.widget.properties file\n+             *  and put it into this context as an attribute 'properties' available to all resources\n+             */\n+            File localPropsFile = new File(System.getProperty(\"user.dir\") + File.separator + \"local.widgetserver.properties\");\n+            PropertiesConfiguration localConfiguration = new PropertiesConfiguration(localPropsFile);\n+            CompositeConfiguration configuration = new CompositeConfiguration();\n+            configuration.addConfiguration(localConfiguration);\n+            configuration.addConfiguration(new PropertiesConfiguration(\"widgetserver.properties\"));\n+\n+            context.setAttribute(\"properties\", (Configuration) configuration);\n+\n+            // load these up now so we don't have to do it on every request(i.e. filter) in the future\n+            usePreferenceInstanceQueues = configuration.getBoolean(WidgetRuntimeHelper.USE_PREFERENCE_INSTANCE_QUEUES);\t\n+            useSharedDataInstanceQueues = configuration.getBoolean(WidgetRuntimeHelper.USE_SHAREDDATA_INSTANCE_QUEUES);\t\t \t\n+\n+            /*\n+             * Merge in system properties overrides\n+             */\n+            Iterator<Object> systemKeysIter = System.getProperties().keySet().iterator();\n+            while (systemKeysIter.hasNext()) {\n+                String key = systemKeysIter.next().toString();\n+                if (configuration.containsKey(key) || key.startsWith(\"widget.\")) {\n+                    String setting = configuration.getString(key);\n+                    String override = System.getProperty(key);\n+                    if ((override != null) && (override.length() > 0) && !override.equals(setting)) {\n+                        configuration.setProperty(key, override);\n+                        if (setting != null) {\n+                            _logger.info(\"Overridden server configuration property: \" + key + \"=\" +override);\n+                        }\n+                    }\n+                }\n+            }\n+\n+            /*\n+             * Initialize persistence manager factory now, not on first request\n+             */\n+            PersistenceManagerFactory.initialize(configuration);\n+\n+            /*\n+             * Initialise the locale handler\n+             */\n+            LocaleHandler.getInstance().initialize(configuration);\n+            final Locale locale = new Locale(configuration.getString(\"widget.default.locale\"));\n+            final Messages localizedMessages = LocaleHandler.getInstance().getResourceBundle(locale);\n+\n+            /* \n+             *  load the opensocial.properties file and put it into this context\n+             *  as an attribute 'opensocial' available to all resources\n+             */\n+            File localOpenSocialPropsFile = new File(System.getProperty(\"user.dir\") + File.separator + \"local.opensocial.properties\");\n             PropertiesConfiguration localOpenSocialConfiguration = new PropertiesConfiguration(localOpenSocialPropsFile);\n             CompositeConfiguration opensocialConfiguration = new CompositeConfiguration();\n             opensocialConfiguration.addConfiguration(localOpenSocialConfiguration);\n             opensocialConfiguration.addConfiguration(new PropertiesConfiguration(\"opensocial.properties\"));\n-\t\t\tcontext.setAttribute(\"opensocial\", (Configuration) opensocialConfiguration);\n-\t\t\t\n-\t\t\t/*\n-\t\t\t * Load installed features\n-\t\t\t */\n-\t\t\tFeatures.loadFeatures(context);\n-\t\t\t\n-\t\t\t/*\n-\t\t\t * Run diagnostics\n-\t\t\t */\n-\t\t\tDiagnostics.run(context, configuration);\n-\t\t\t\n-\t\t\t/*\n-\t\t\t * Start hot-deploy widget watcher\n-\t\t\t */\n-\t\t \tif (configuration.getBoolean(\"widget.hot_deploy\")) {\n-\t\t \t\tstartWatcher(context, configuration, localizedMessages);\n-\t\t \t} else {\n-\t\t \t\t_logger.info(localizedMessages.getString(\"WidgetHotDeploy.0\"));\n-\t\t \t}\n-\t\t} \n-\t\tcatch (ConfigurationException ex) {\n-\t\t\t_logger.error(\"ConfigurationException thrown: \"+ ex.toString());\n-\t\t}\t\t\t\t\t\n-\t}\n-\t\n-\t/**\n-\t * Starts a watcher thread for hot-deploy of new widgets dropped into the deploy folder\n-\t * this is controlled using the <code>widget.hot_deploy=true|false</code> property \n-\t * and configured to look in the folder specified by the <code>widget.deployfolder</code> property\n-\t * @param context the current servlet context\n-\t * @param configuration the configuration properties\n-\t */\n-\tprivate void startWatcher(final ServletContext context, final Configuration configuration, final Messages localizedMessages){\n-\t \t/*\n-\t \t * Start watching for widget deployment\n-\t \t */\n-\t \tfinal File deploy = new File(WidgetPackageUtils.convertPathToPlatform(context.getRealPath(configuration.getString(\"widget.deployfolder\"))));\n-\t\tfinal String UPLOADFOLDER = context.getRealPath(configuration.getString(\"widget.useruploadfolder\"));\n-\t\tfinal String WIDGETFOLDER = context.getRealPath(configuration.getString(\"widget.widgetfolder\"));\n-\t\tfinal String localWidgetFolderPath = configuration.getString(\"widget.widgetfolder\");\n-\t\tfinal String[] locales = configuration.getStringArray(\"widget.locales\");\n-\t\tfinal String contextPath = context.getContextPath();\n-\t\t// Digital signature settings\n-\t    final boolean VERIFYSIGNATURE = configuration.getBoolean(\"widget.deployment.verifysignature\");//$NON-NLS-1$\n-\t\tfinal boolean REJECTINVALID= configuration.getBoolean(\"widget.deployment.rejectinvalidsignatures\");\n-\t\tfinal boolean REJECTUNTRUSTED= configuration.getBoolean(\"widget.deployment.rejectuntrustedsignatures\");\n-\t\tfinal String PASSWORD = configuration.getString(\"widget.deployment.trustedkeystore.password\");\n-\t    final String KEYSTORE = configuration.getString(\"widget.deployment.trustedkeystore\");//$NON-NLS-1$\n+            context.setAttribute(\"opensocial\", (Configuration) opensocialConfiguration);\n+\n+            /*\n+             * Load installed features\n+             */\n+            Features.loadFeatures(context);\n \n+            /*\n+             * Run diagnostics\n+             */\n+            Diagnostics.run(context, configuration);\n \n-\t\tThread thr = new Thread(){\n-\t \t\tpublic void run() {\n-\t \t\t\tint interval = 5000;\n-\t \t\t\tWgtWatcher watcher = new WgtWatcher();\n-\t \t\t\twatcher.setWatchDir(deploy);\n-\t \t\t\twatcher.setListener(new WgtWatcher.FileChangeListener(){\n-\t \t\t\t\tpublic void fileModified(File f) {\n-\t \t\t\t        // get persistence manager for this thread\n+            /*\n+             * Start hot-deploy widget watcher\n+             */\n+            if (configuration.getBoolean(\"widget.hot_deploy\")) {\n+                startWatcher(context, configuration, localizedMessages);\n+            } else {\n+                _logger.info(localizedMessages.getString(\"WidgetHotDeploy.0\"));\n+            }\n+        } \n+        catch (ConfigurationException ex) {\n+            _logger.error(\"ConfigurationException thrown: \"+ ex.toString());\n+        }\n+    }\n+\n+    /**\n+     * Starts a watcher thread for hot-deploy of new widgets dropped into the deploy folder\n+     * this is controlled using the <code>widget.hot_deploy=true|false</code> property \n+     * and configured to look in the folder specified by the <code>widget.deployfolder</code> property\n+     * @param context the current servlet context\n+     * @param configuration the configuration properties\n+     */\n+    private void startWatcher(final ServletContext context, final Configuration configuration, final Messages localizedMessages){\n+        /*\n+         * Start watching for widget deployment\n+         */\n+        final File deploy = new File(WidgetPackageUtils.convertPathToPlatform(context.getRealPath(configuration.getString(\"widget.deployfolder\"))));\n+        final String UPLOADFOLDER = context.getRealPath(configuration.getString(\"widget.useruploadfolder\"));\n+        final String WIDGETFOLDER = context.getRealPath(configuration.getString(\"widget.widgetfolder\"));\n+        final String localWidgetFolderPath = configuration.getString(\"widget.widgetfolder\");\n+        final String[] locales = configuration.getStringArray(\"widget.locales\");\n+        final String contextPath = context.getContextPath();\n+        // Digital signature settings\n+        final boolean VERIFYSIGNATURE = configuration.getBoolean(\"widget.deployment.verifysignature\");//$NON-NLS-1$\n+        final boolean REJECTINVALID= configuration.getBoolean(\"widget.deployment.rejectinvalidsignatures\");\n+        final boolean REJECTUNTRUSTED= configuration.getBoolean(\"widget.deployment.rejectuntrustedsignatures\");\n+        final String PASSWORD = configuration.getString(\"widget.deployment.trustedkeystore.password\");\n+        final String KEYSTORE = configuration.getString(\"widget.deployment.trustedkeystore\");//$NON-NLS-1$\n+\n+\n+        Thread thr = new Thread(){\n+            public void run() {\n+                int interval = 5000;\n+                WgtWatcher watcher = new WgtWatcher();\n+                watcher.setWatchDir(deploy);\n+                watcher.setListener(new WgtWatcher.FileChangeListener(){\n+                    public void fileModified(File f) {\n+                        // get persistence manager for this thread\n                         IPersistenceManager persistenceManager = PersistenceManagerFactory.getPersistenceManager();\n-\t \t\t\t\t\ttry{\n-\t \t\t\t\t\t\tpersistenceManager.begin();\n-\t \t\t\t\t\t\tFile upload = WidgetFileUtils.dealWithDroppedFile(UPLOADFOLDER, f);\n-\t \t\t\t\t\t\tW3CWidgetFactory fac = new W3CWidgetFactory();\n-\t \t\t\t\t\t\tfac.setLocales(locales);\n-\t \t\t\t\t\t\tfac.setLocalPath(contextPath+localWidgetFolderPath);\n-\t \t\t\t\t\t\tfac.setOutputDirectory(WIDGETFOLDER);\n-\t \t\t\t\t\t\tfac.setFeatures(Features.getFeatureNames());\n-\t \t\t\t\t\t\tfac.setStartPageProcessor(new StartPageProcessor());\n-              if (VERIFYSIGNATURE) {\n-                InputStream stream = context\n-                    .getResourceAsStream(\"/WEB-INF/classes/\" + KEYSTORE);\n-                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n-                keyStore.load(stream, PASSWORD.toCharArray());\n-                stream.close();\n-                fac.setDigitalSignatureParser(new DigitalSignatureProcessor(\n-                    keyStore, REJECTINVALID, REJECTUNTRUSTED));\n-              }\n+                        try{\n+                            persistenceManager.begin();\n+                            File upload = WidgetFileUtils.dealWithDroppedFile(UPLOADFOLDER, f);\n+                            W3CWidgetFactory fac = new W3CWidgetFactory();\n+                            fac.setLocales(locales);\n+                            fac.setLocalPath(contextPath+localWidgetFolderPath);\n+                            fac.setOutputDirectory(WIDGETFOLDER);\n+                            fac.setFeatures(Features.getFeatureNames());\n+                            fac.setStartPageProcessor(new StartPageProcessor());\n+                            if (VERIFYSIGNATURE) {\n+                                InputStream stream = context\n+                                .getResourceAsStream(\"/WEB-INF/classes/\" + KEYSTORE);\n+                                if(stream != null){\n+                                    KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                                    keyStore.load(stream, PASSWORD.toCharArray());\n+                                    stream.close();\n+                                    fac.setDigitalSignatureParser(new DigitalSignatureProcessor(\n+                                            keyStore, REJECTINVALID, REJECTUNTRUSTED));\n+                                }else{\n+                                    _logger.error(localizedMessages.getString(\"WidgetHotDeploy.4\") + \n+                                            \" (/WEB-INF/classes/\" + KEYSTORE+\") \" + localizedMessages.getString(\"WidgetHotDeploy.5\"));\n+                                }\n+                            }\n \n-\t \t\t\t\t\t\tW3CWidget model = fac.parse(upload);\n-\t \t\t\t\t\t\tWidgetJavascriptSyntaxAnalyzer jsa = new WidgetJavascriptSyntaxAnalyzer(fac.getUnzippedWidgetDirectory());\n-\t \t\t\t\t\t\tif(persistenceManager.findWidgetByGuid(model.getIdentifier()) == null) {\n-\t \t\t\t\t\t\t\tWidgetFactory.addNewWidget(model, upload, true);\n-\t \t\t\t\t\t\t\tString message = model.getLocalName(\"en\") +\"' - \" + localizedMessages.getString(\"WidgetAdminServlet.19\");\n-\t \t\t\t\t\t\t\t_logger.info(message);\n-\t \t\t\t\t\t\t} else {\n-\t \t\t\t\t\t\t\tString message = model.getLocalName(\"en\") +\"' - \" + localizedMessages.getString(\"WidgetAdminServlet.20\");\n-\t \t\t\t\t\t\t\tWidgetFactory.update(model, persistenceManager.findWidgetByGuid(model.getIdentifier()), true, upload);\n-\t \t\t\t\t\t\t\t_logger.info(message);\n-\t \t\t\t\t\t\t}\n-\t \t\t\t\t\t\tpersistenceManager.commit();\n-\t \t\t\t\t\t\tNewWidgetBroadcaster.broadcast(configuration, model.getIdentifier());\n-\t \t\t\t\t\t} catch (IOException e) {\n+                            W3CWidget model = fac.parse(upload);\n+                            WidgetJavascriptSyntaxAnalyzer jsa = new WidgetJavascriptSyntaxAnalyzer(fac.getUnzippedWidgetDirectory());\n+                            if(persistenceManager.findWidgetByGuid(model.getIdentifier()) == null) {\n+                                WidgetFactory.addNewWidget(model, upload, true);\n+                                String message = model.getLocalName(\"en\") +\"' - \" + localizedMessages.getString(\"WidgetAdminServlet.19\");\n+                                _logger.info(message);\n+                            } else {\n+                                String message = model.getLocalName(\"en\") +\"' - \" + localizedMessages.getString(\"WidgetAdminServlet.20\");\n+                                WidgetFactory.update(model, persistenceManager.findWidgetByGuid(model.getIdentifier()), true, upload);\n+                                _logger.info(message);\n+                            }\n+                            persistenceManager.commit();\n+                            NewWidgetBroadcaster.broadcast(configuration, model.getIdentifier());\n+                        } catch (IOException e) {\n                             persistenceManager.rollback();\n-\t \t\t\t\t\t\tString error = f.getName()+\":\"+localizedMessages.getString(\"WidgetHotDeploy.1\") + \" - \" + e.getLocalizedMessage();\n-\t \t\t\t\t\t\t_logger.error(error, e);\n-\t \t\t\t\t\t} catch (BadWidgetZipFileException e) {\n+                            String error = f.getName()+\":\"+localizedMessages.getString(\"WidgetHotDeploy.1\") + \" - \" + e.getLocalizedMessage();\n+                            _logger.error(error, e);\n+                        } catch (BadWidgetZipFileException e) {\n                             persistenceManager.rollback();\n-\t \t\t\t\t\t\tString error = f.getName()+\":\"+localizedMessages.getString(\"WidgetHotDeploy.2\") + \" - \" + e.getLocalizedMessage();\n-\t \t\t\t\t\t\t_logger.error(error, e);\n-\t \t\t\t\t\t} catch (BadManifestException e) {\n+                            String error = f.getName()+\":\"+localizedMessages.getString(\"WidgetHotDeploy.2\") + \" - \" + e.getLocalizedMessage();\n+                            _logger.error(error, e);\n+                        } catch (BadManifestException e) {\n                             persistenceManager.rollback();\n-\t \t\t\t\t\t\tString error = f.getName()+\":\"+localizedMessages.getString(\"WidgetHotDeploy.3\") + \" - \" + e.getLocalizedMessage();\n-\t \t\t\t\t\t\t_logger.error(error, e);\n-\t \t\t\t\t\t} catch (Exception e) {\n+                            String error = f.getName()+\":\"+localizedMessages.getString(\"WidgetHotDeploy.3\") + \" - \" + e.getLocalizedMessage();\n+                            _logger.error(error, e);\n+                        } catch (Exception e) {\n                             persistenceManager.rollback();\n-\t \t\t\t\t\t\tString error = f.getName()+\":\"+e.getLocalizedMessage();\n-\t \t\t\t\t\t\t_logger.error(error, e);\n-\t\t\t\t\t\t} finally {\n-\t\t\t\t            // close thread persistence manager\n-\t\t\t\t            PersistenceManagerFactory.closePersistenceManager();\t\t\t\t\t\t    \n-\t\t\t\t\t\t}\n-\t \t\t\t\t}\n-\t \t\t\t\tpublic void fileRemoved(File f) {\n-\t \t\t\t\t\t// Not implemented - the .wgt files are removed as part of the deployment process\n-\t \t\t\t\t}\n-\t \t\t\t});\n-\t \t\t    try {\n-\t \t\t       while (true) {\n-\t \t\t         watcher.check();\n-\t \t\t         Thread.sleep(interval);\n-\t \t\t       }\n-\t \t\t     } catch (InterruptedException iex) {\n-\t \t\t     }\n-\t \t\t}\t\n-\t \t};\n-\t \t\n-\t \tthr.start();\n-\t\t\n-\t}\n+                            String error = f.getName()+\":\"+e.getLocalizedMessage();\n+                            _logger.error(error, e);\n+                        } finally {\n+                            // close thread persistence manager\n+                            PersistenceManagerFactory.closePersistenceManager();\t\t\t\t\t\t    \n+                        }\n+                    }\n+                    public void fileRemoved(File f) {\n+                        // Not implemented - the .wgt files are removed as part of the deployment process\n+                    }\n+                });\n+                try {\n+                    while (true) {\n+                        watcher.check();\n+                        Thread.sleep(interval);\n+                    }\n+                } catch (InterruptedException iex) {\n+                }\n+            }\t\n+        };\n+\n+        thr.start();\n+\n+    }\n \n-\tpublic void contextDestroyed(ServletContextEvent event){\n+    public void contextDestroyed(ServletContextEvent event){\n         /*\n          * Terminate persistence manager factory\n          */\n-\t    PersistenceManagerFactory.terminate();\t    \n-\t}\n+        PersistenceManagerFactory.terminate();\t    \n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/wookie/commit/b9b4aa90617f90d0e9fd93571a2c8eaad089b6e8",
        "repo": "wookie",
        "parent": "https://github.com/apache/wookie/commit/ed306df588d66f1f92d9c5aabd21524d8c9c9487",
        "message": "Minor bug fix - missing content-type header for a downloaded widget caused a NPE.  Now throws a more obvious exception message when content-type is not present.\n\ngit-svn-id: https://svn.apache.org/repos/asf/wookie/trunk@1433577 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "wookie_3",
        "file": [
            {
                "sha": "84e6152fce19fca807062484d0d3ebc2399e7ff0",
                "filename": "parser/java/src/org/apache/wookie/w3c/W3CWidgetFactory.java",
                "status": "modified",
                "additions": 4,
                "deletions": 1,
                "changes": 5,
                "blob_url": "https://github.com/apache/wookie/blob/b9b4aa90617f90d0e9fd93571a2c8eaad089b6e8/parser/java/src/org/apache/wookie/w3c/W3CWidgetFactory.java",
                "raw_url": "https://github.com/apache/wookie/raw/b9b4aa90617f90d0e9fd93571a2c8eaad089b6e8/parser/java/src/org/apache/wookie/w3c/W3CWidgetFactory.java",
                "contents_url": "https://api.github.com/repos/apache/wookie/contents/parser/java/src/org/apache/wookie/w3c/W3CWidgetFactory.java?ref=b9b4aa90617f90d0e9fd93571a2c8eaad089b6e8",
                "patch": "@@ -19,6 +19,7 @@\n import java.net.URL;\n \n import org.apache.commons.compress.archivers.zip.ZipFile;\n+import org.apache.commons.httpclient.Header;\n import org.apache.commons.httpclient.HttpClient;\n import org.apache.commons.httpclient.HttpException;\n import org.apache.commons.httpclient.methods.GetMethod;\n@@ -243,7 +244,9 @@ private File download(URL url, boolean ignoreContentType) throws InvalidContentT\n \t\tGetMethod method = new GetMethod(url.toString());\n \t\tclient.executeMethod(method);\n \t\tif (!ignoreContentType){\n-\t\t\tString type = method.getResponseHeader(\"Content-Type\").getValue();\n+\t\t    Header header = method.getResponseHeader(\"Content-Type\");\n+\t\t    if (header == null) throw new InvalidContentTypeException(\"Problem downloading widget: expected a content type of \"+WIDGET_CONTENT_TYPE+\" but received no content type description.\");\n+\t\t\tString type = header.getValue();\n \t\t\tif (!type.startsWith(WIDGET_CONTENT_TYPE)) throw new InvalidContentTypeException(\"Problem downloading widget: expected a content type of \"+WIDGET_CONTENT_TYPE+\" but received:\"+type);\n \t\t}\n \t\tFile file = File.createTempFile(\"wookie\", null);"
            }
        ]
    }
]
