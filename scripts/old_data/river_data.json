[
    {
        "commit": "https://github.com/apache/river/commit/13c4af1a4fb6f7f13ddef48e4effe0ee63df8160",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/b8a0a51ec0ea9cb621fd374b09e362d69a4c2f1e",
        "message": "Fixes to RIVER-253, RIVER-252, RIVER-233, RIVER-231, and RIVER-209.\n\n - minor clarifications in ComputeHttpmdCodebase and ComputeDigest with\n   respect to algorithms used.\n\n - avoid NullPointerExceptions in these classes when resource bundles \n   cannot be found.\n\n - fix NullPointerException in SslConnection.checkConnectPermission().\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/river/jtsk/trunk@636036 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_1",
        "file": [
            {
                "sha": "c55904b23dbceec646866d1d0ab0f236d08ce0c1",
                "filename": "src/com/sun/jini/tool/ComputeDigest.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/river/blob/13c4af1a4fb6f7f13ddef48e4effe0ee63df8160/src/com/sun/jini/tool/ComputeDigest.java",
                "raw_url": "https://github.com/apache/river/raw/13c4af1a4fb6f7f13ddef48e4effe0ee63df8160/src/com/sun/jini/tool/ComputeDigest.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/com/sun/jini/tool/ComputeDigest.java?ref=13c4af1a4fb6f7f13ddef48e4effe0ee63df8160",
                "patch": "@@ -36,13 +36,13 @@\n  * <pre>\n  * java -jar <var><b>install_dir</b></var>/lib/computedigest.jar\n  *      <var><b>install_dir</b></var>/lib/reggie.jar\n- *      sha1\n+ *      SHA-1\n  * </pre>\n  * </blockquote>\n  *\n  * where <var><b>install_dir</b></var> is the directory where the Apache River release\n  * is installed. This command prints out the message digest for the\n- * <code>reggie.jar</code> JAR file, using the <code>sha1</code> algorithm.\n+ * <code>reggie.jar</code> JAR file, using the <code>SHA-1</code> algorithm.\n  *\n  * @author Sun Microsystems, Inc.\n  * @since 2.0\n@@ -62,14 +62,14 @@ private ComputeDigest() { }\n      * The first argument specifies the URL, which is parsed in the context\n      * of a <code>file:</code> URL. The second argument, if present,\n      * specifies the message digest algorithm, which defaults to\n-     * <code>sha1</code>.\n+     * <code>SHA-1</code>.\n      */\n     public static void main(String[] args) {\n \tif (args.length < 1 || args.length > 2) {\n \t    print(\"computedigest.usage\", null);\n \t    System.exit(1);\n \t}\n-\tString algorithm = args.length > 1 ? args[1] : \"sha1\";\n+\tString algorithm = args.length > 1 ? args[1] : \"SHA-1\";\n \ttry {\n \t    URL url = new URL(new URL(\"file:\"), args[0]);\n \t    System.out.println(HttpmdUtil.computeDigest(url, algorithm));"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/b8a0a51ec0ea9cb621fd374b09e362d69a4c2f1e",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/8a404dc84dd971bfa9431e034190814fafefb74a",
        "message": "Fixes to RIVER-253, RIVER-252, RIVER-233, RIVER-231, and RIVER-209.\n\n - minor clarifications in ComputeHttpmdCodebase and ComputeDigest with\n   respect to algorithms used.\n\n - avoid NullPointerExceptions in these classes when resource bundles \n   cannot be found.\n\n - fix NullPointerException in SslConnection.checkConnectPermission().\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/river/jtsk/trunk@634771 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_2",
        "file": [
            {
                "sha": "6947f147868e12b16e3b5c291f12a5770380ba51",
                "filename": "src/com/sun/jini/tool/ComputeDigest.java",
                "status": "modified",
                "additions": 8,
                "deletions": 9,
                "changes": 17,
                "blob_url": "https://github.com/apache/river/blob/b8a0a51ec0ea9cb621fd374b09e362d69a4c2f1e/src/com/sun/jini/tool/ComputeDigest.java",
                "raw_url": "https://github.com/apache/river/raw/b8a0a51ec0ea9cb621fd374b09e362d69a4c2f1e/src/com/sun/jini/tool/ComputeDigest.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/com/sun/jini/tool/ComputeDigest.java?ref=b8a0a51ec0ea9cb621fd374b09e362d69a4c2f1e",
                "patch": "@@ -30,19 +30,19 @@\n  * Prints the message digest for the contents of a URL. This utility is run\n  * from the {@linkplain #main command line}. <p>\n  *\n- * An example command line usage is:\n+ * An example command line (shown with lines wrapped for readability) is:\n  *\n  * <blockquote>\n  * <pre>\n  * java -jar <var><b>install_dir</b></var>/lib/computedigest.jar\n  *      <var><b>install_dir</b></var>/lib/reggie.jar\n- *      sha\n+ *      sha1\n  * </pre>\n  * </blockquote>\n  *\n  * where <var><b>install_dir</b></var> is the directory where the Apache River release\n  * is installed. This command prints out the message digest for the\n- * <code>reggie.jar</code> JAR file, using the <code>sha</code> algorithm.\n+ * <code>reggie.jar</code> JAR file, using the <code>sha1</code> algorithm.\n  *\n  * @author Sun Microsystems, Inc.\n  * @since 2.0\n@@ -85,18 +85,17 @@ public static void main(String[] args) {\n     }\n \n     private static synchronized String getString(String key) {\n-\tif (!resinit) {\n-\t    try {\n+\ttry {\n+\t    if (!resinit) {\n \t\tresources = ResourceBundle.getBundle(\n \t\t\t\t \"com.sun.jini.tool.resources.computedigest\");\n \t\tresinit = true;\n-\t    } catch (MissingResourceException e) {\n-\t\te.printStackTrace();\n \t    }\n-\t}\n-\ttry {\n \t    return resources.getString(key);\n \t} catch (MissingResourceException e) {\n+\t    e.printStackTrace();\n+\t    System.err.println(\"Unable to find a required resource.\");\n+\t    System.exit(1);\n \t    return null;\n \t}\n     }"
            },
            {
                "sha": "ecfb010ac87d053f2288995f307c24b4f8a53728",
                "filename": "src/com/sun/jini/tool/ComputeHttpmdCodebase.java",
                "status": "modified",
                "additions": 11,
                "deletions": 8,
                "changes": 19,
                "blob_url": "https://github.com/apache/river/blob/b8a0a51ec0ea9cb621fd374b09e362d69a4c2f1e/src/com/sun/jini/tool/ComputeHttpmdCodebase.java",
                "raw_url": "https://github.com/apache/river/raw/b8a0a51ec0ea9cb621fd374b09e362d69a4c2f1e/src/com/sun/jini/tool/ComputeHttpmdCodebase.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/com/sun/jini/tool/ComputeHttpmdCodebase.java?ref=b8a0a51ec0ea9cb621fd374b09e362d69a4c2f1e",
                "patch": "@@ -31,8 +31,10 @@\n /**\n  * Computes the message digests for a codebase with HTTPMD URLs. This utility\n  * is run from the {@linkplain #main command line}. <p>\n+ * A description of HTTPMD URLs can be found in the {@link net.jini.url.httpmd}\n+ * package and its {@link net.jini.url.httpmd.Handler} class.<p>\n  *\n- * An example command line usage is:\n+ * An example command line (shown with lines wrapped for readability) is:\n  *\n  * <blockquote>\n  * <pre>\n@@ -48,7 +50,9 @@\n  * <var><b>http_port</b></var> is the port for that server. This command prints\n  * out the download codebase for use by a client that uses the {@link\n  * net.jini.lookup.ServiceDiscoveryManager}, using an HTTPMD URL to guarantee\n- * integrity for the classes in the <code>sdm-dl.jar</code> JAR file.\n+ * integrity for the classes in the <code>sdm-dl.jar</code> JAR file. The\n+ * message digest will be computed using the <code>md5</code> algorithm, and\n+ * the <code>0</code> will be replaced by the computed digest.\n  *\n  * @author Sun Microsystems, Inc.\n  * @since 2.0\n@@ -154,18 +158,17 @@ public static void main(String[] args) {\n     }\n \n     private static synchronized String getString(String key) {\n-\tif (!resinit) {\n-\t    try {\n+\ttry {\n+\t    if (!resinit) {\n \t\tresources = ResourceBundle.getBundle(\n \t\t\t       \"com.sun.jini.tool.resources.computecodebase\");\n \t\tresinit = true;\n-\t    } catch (MissingResourceException e) {\n-\t\te.printStackTrace();\n \t    }\n-\t}\n-\ttry {\n \t    return resources.getString(key);\n \t} catch (MissingResourceException e) {\n+\t    e.printStackTrace();\n+\t    System.err.println(\"Unable to find a required resource.\");\n+\t    System.exit(1);\n \t    return null;\n \t}\n     }"
            },
            {
                "sha": "f953203646636d992d977869062b425bcf0d2f01",
                "filename": "src/net/jini/jeri/ssl/SslConnection.java",
                "status": "modified",
                "additions": 17,
                "deletions": 3,
                "changes": 20,
                "blob_url": "https://github.com/apache/river/blob/b8a0a51ec0ea9cb621fd374b09e362d69a4c2f1e/src/net/jini/jeri/ssl/SslConnection.java",
                "raw_url": "https://github.com/apache/river/raw/b8a0a51ec0ea9cb621fd374b09e362d69a4c2f1e/src/net/jini/jeri/ssl/SslConnection.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/net/jini/jeri/ssl/SslConnection.java?ref=b8a0a51ec0ea9cb621fd374b09e362d69a4c2f1e",
                "patch": "@@ -657,11 +657,24 @@ protected String getProxyHost() {\n \treturn \"\";\n     }\n \n-    void checkConnectPermission() {\n+    /**\n+     * Determine whether the caller has \"connect\" SocketPermission for the\n+     * connection's underlying socket.\n+     *\n+     * @return true if there is an underlying socket and the caller has\n+     * permission to use it, or false if there is no underlying socket.\n+     *\n+     * @throws SecurityException if the underlying socket exists but\n+     * the caller does not have permission to use it.\n+     */\n+    boolean checkConnectPermission() {\n+\tSocket socket = sslSocket;\n+\tif (socket == null) {\n+\t    return false;\n+\t}\n+\n \tSecurityManager sm = System.getSecurityManager();\n \tif (sm != null) {\n-\t    Socket socket = sslSocket;\n-\n \t    // This depends on the SslSocket returning information about\n \t    // its underlying plain socket.\n \t    InetSocketAddress address =\n@@ -674,5 +687,6 @@ void checkConnectPermission() {\n \t\t\t\tsocket.getPort());\n \t    }\n \t}\n+\treturn true;\n     }\n }"
            },
            {
                "sha": "b5af320e8f7af4ceddc447f4fe0bfb26be0f1a99",
                "filename": "src/net/jini/jeri/ssl/SslEndpointImpl.java",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/river/blob/b8a0a51ec0ea9cb621fd374b09e362d69a4c2f1e/src/net/jini/jeri/ssl/SslEndpointImpl.java",
                "raw_url": "https://github.com/apache/river/raw/b8a0a51ec0ea9cb621fd374b09e362d69a4c2f1e/src/net/jini/jeri/ssl/SslEndpointImpl.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/net/jini/jeri/ssl/SslEndpointImpl.java?ref=b8a0a51ec0ea9cb621fd374b09e362d69a4c2f1e",
                "patch": "@@ -314,7 +314,7 @@ public Object run() {\n \tList contexts = new CopyOnRemoveList(\n \t    getConnectionContexts(constraints, clientPrincipals));\n \tif (constrainedServer) {\n-\t    /* Server prinicipals were named in constraints.  Remove from the\n+\t    /* Server principals were named in constraints.  Remove from the\n \t     * context list any ConnectionContexts for which there is no\n \t     * permission to authenticate the context's client principal with\n \t     * the context's server principal.\n@@ -905,7 +905,9 @@ public Connection connect(OutboundRequestHandle handle,\n \t\t\tcheckedResolvePermission = true;\n \t\t    }\n \t\t    try {\n-\t\t\tconnection.checkConnectPermission();\n+\t\t\tif (!connection.checkConnectPermission()) {\n+\t\t\t    continue;\n+\t\t\t}\n \t\t    } catch (SecurityException e) {\n \t\t\tif (logger.isLoggable(Levels.HANDLED)) {\n \t\t\t    LogUtil.logThrow(logger, Levels.HANDLED,"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/276b713be1af0bfa36ec1127ad38d3eec233d7f8",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/5389035809b20c937e05c32f43e8661686103b4b",
        "message": "Fix NPE that can occur during shutdown.  Note this NPE didn't cause a test failure, however I don't like NPE being thrown unless we're expecting it.  Also corrected synchronization comment.\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/skunk/qa-refactor-namespace/trunk@1716793 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_3",
        "file": [
            {
                "sha": "d2f72ac70509462c59309449d4f092734ff54fa1",
                "filename": "src/net/jini/discovery/AbstractLookupDiscovery.java",
                "status": "modified",
                "additions": 5,
                "deletions": 2,
                "changes": 7,
                "blob_url": "https://github.com/apache/river/blob/276b713be1af0bfa36ec1127ad38d3eec233d7f8/src/net/jini/discovery/AbstractLookupDiscovery.java",
                "raw_url": "https://github.com/apache/river/raw/276b713be1af0bfa36ec1127ad38d3eec233d7f8/src/net/jini/discovery/AbstractLookupDiscovery.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/net/jini/discovery/AbstractLookupDiscovery.java?ref=276b713be1af0bfa36ec1127ad38d3eec233d7f8",
                "patch": "@@ -156,7 +156,10 @@\n     /* WakeupManager to delay tasks. */\r\n     private final WakeupManager discoveryWakeupMgr;\r\n     private final boolean isDefaultWakeupMgr;\r\n-    /* Outstanding tickets - Access synchronized on pendingDiscoveries */\r\n+    /* Outstanding tickets - Access synchronized on \r\n+     * UnicastDiscoveryTask instance, then on tickets.\r\n+     * Access only synchronized on tickets from nukeThreads \r\n+     */\r\n     private final List<Ticket> tickets;\r\n     /** Thread that handles incoming multicast announcements. */\r\n     private final AnnouncementListener announceeThread;\r\n@@ -1010,7 +1013,7 @@ private void doRun() {\n                     // Since this is a valid announcement, update the\r\n                     // sequence number.\r\n                     AnnouncementInfo aInfo = regInfo.get(srvcID);\r\n-                    if (!regInfo.replace\r\n+                    if (aInfo != null && !regInfo.replace // Avoid null pointer exception\r\n                             (   srvcID, \r\n                                 aInfo, \r\n                                 new AnnouncementInfo( \r"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/7f79f531d8f0e4bec72f7e05ff55c8a2e1cd2d60",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/71a205854ee89c5752f344a03139775b19426fcb",
        "message": "Fix NullPointerException in LocatorsUtil\n\nIncrease logging\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/skunk/qa_refactor/trunk@1454770 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_4",
        "file": [
            {
                "sha": "702c379aa555f28f97c9dd8f3c434d0495151f35",
                "filename": "qa/src/com/sun/jini/test/resources/qa1.logging",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/river/blob/7f79f531d8f0e4bec72f7e05ff55c8a2e1cd2d60/qa/src/com/sun/jini/test/resources/qa1.logging",
                "raw_url": "https://github.com/apache/river/raw/7f79f531d8f0e4bec72f7e05ff55c8a2e1cd2d60/qa/src/com/sun/jini/test/resources/qa1.logging",
                "contents_url": "https://api.github.com/repos/apache/river/contents/qa/src/com/sun/jini/test/resources/qa1.logging?ref=7f79f531d8f0e4bec72f7e05ff55c8a2e1cd2d60",
                "patch": "@@ -104,10 +104,10 @@ java.util.logging.FileHandler.level = INFO\n #  FINEST (lowest value) \n \n # For Everything\n-sun.rmi.level = INFO\n-net.jini.level = INFO\n-org.apache.river.level = INFO\n-com.sun.jini.level = INFO\n+sun.rmi.level = FINE\n+net.jini.level = FINE\n+org.apache.river.level = FINE\n+com.sun.jini.level = FINE\n \n # For the LogManager\n com.sun.jini.logging.LogManager.level = INFO"
            },
            {
                "sha": "f606cff3edb868bf76838b454e95043f9d9f527f",
                "filename": "qa/src/com/sun/jini/test/share/LocatorsUtil.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/river/blob/7f79f531d8f0e4bec72f7e05ff55c8a2e1cd2d60/qa/src/com/sun/jini/test/share/LocatorsUtil.java",
                "raw_url": "https://github.com/apache/river/raw/7f79f531d8f0e4bec72f7e05ff55c8a2e1cd2d60/qa/src/com/sun/jini/test/share/LocatorsUtil.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/qa/src/com/sun/jini/test/share/LocatorsUtil.java?ref=7f79f531d8f0e4bec72f7e05ff55c8a2e1cd2d60",
                "patch": "@@ -204,7 +204,7 @@ public static boolean compareLocatorSets(LookupLocator[] locatorSet1,\n                         logger.log(level, \"locatorSet2[\"+j+\"] = \" +locator2);\n                         logger.log(level, \"\");\n                     }//endif\n-                    if( locator2.equals(locator1) ) {\n+                    if( locator2 != null && locator2.equals(locator1) ) {\n                         hashSet2.remove(locator2);\n                         break;\n                     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/52e488e576744e44862acabd3ba114e70e489104",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/e4e647ac23ec75008e1daa64aa2a23e97ab1a28f",
        "message": "Fix NullPointerException bug revealed by MS Windows\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/trunk@1406894 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_5",
        "file": [
            {
                "sha": "f569b4ef866cc9ebc8eb80c61270e7b7b8cf9387",
                "filename": "src/org/apache/river/impl/net/UriString.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/river/blob/52e488e576744e44862acabd3ba114e70e489104/src/org/apache/river/impl/net/UriString.java",
                "raw_url": "https://github.com/apache/river/raw/52e488e576744e44862acabd3ba114e70e489104/src/org/apache/river/impl/net/UriString.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/org/apache/river/impl/net/UriString.java?ref=52e488e576744e44862acabd3ba114e70e489104",
                "patch": "@@ -430,7 +430,7 @@ public static URI normalisation(URI uri) throws URISyntaxException {\n          */\n         String authority = uri.getAuthority();\n         String path = uri.getPath();\n-        if (path != null || !path.equals(\"\") ){\n+        if (path != null && !path.equals(\"\") ){\n             if (authority != null){\n                 if ( !path.startsWith(\"/\")) path = '/' + path;\n             } else {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/36228e37bd118a14dad7707508fee235a929f5eb",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/1bb48bedbee3ad318f987165c718c823c1577b25",
        "message": "Fix NullPointerException due to unsafe publication in DiscoveryProtocolSimulator on my Windows PC.\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/trunk@1409150 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_6",
        "file": [
            {
                "sha": "4b8514ede3851e3e25655ea26c818ab9832a8cff",
                "filename": "qa/src/com/sun/jini/test/share/DiscoveryProtocolSimulator.java",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/river/blob/36228e37bd118a14dad7707508fee235a929f5eb/qa/src/com/sun/jini/test/share/DiscoveryProtocolSimulator.java",
                "raw_url": "https://github.com/apache/river/raw/36228e37bd118a14dad7707508fee235a929f5eb/qa/src/com/sun/jini/test/share/DiscoveryProtocolSimulator.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/qa/src/com/sun/jini/test/share/DiscoveryProtocolSimulator.java?ref=36228e37bd118a14dad7707508fee235a929f5eb",
                "patch": "@@ -564,16 +564,17 @@ public void run() {\n     /** Unicast discovery request thread code. */\n     private class UnicastThread extends Thread {\n \t/** Server socket to accepts connections on. */\n-\tprivate ServerSocket listen;\n+\tprivate final ServerSocket listen;\n \t/** Listen port */\n-\tpublic int port;\n+\tpublic final int port;\n \n \t/**\n \t * Create a daemon thread.  Set up the socket now rather than in run,\n \t * so that we get any exception up front.\n \t */\n \tpublic UnicastThread(int port) throws IOException {\n \t    super(\"unicast request\");\n+            ServerSocket listen = null;\n \t    setDaemon(true);\n \t    if (port == 0) {\n \t\ttry {\n@@ -596,6 +597,7 @@ public UnicastThread(int port) throws IOException {\n                     }\n                 }\n \t    }\n+            this.listen = listen;\n \t    this.port = listen.getLocalPort();\n \t}\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/44ca7fd4e7e5ce5111e122dcb233ee984c670cf7",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/e981fea7df9430810f285ab980d5e31df699983b",
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/skunk/qa_refactor/trunk@1448054 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_7",
        "file": [
            {
                "sha": "0d5a9bdf49b4a72b0cc4c6e3ce74205f10f04e90",
                "filename": "qa/src/com/sun/jini/test/share/BaseQATest.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/river/blob/44ca7fd4e7e5ce5111e122dcb233ee984c670cf7/qa/src/com/sun/jini/test/share/BaseQATest.java",
                "raw_url": "https://github.com/apache/river/raw/44ca7fd4e7e5ce5111e122dcb233ee984c670cf7/qa/src/com/sun/jini/test/share/BaseQATest.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/qa/src/com/sun/jini/test/share/BaseQATest.java?ref=44ca7fd4e7e5ce5111e122dcb233ee984c670cf7",
                "patch": "@@ -1551,7 +1551,9 @@ protected void waitForDiscovery(LookupListener listener)\n                         String[] groups = (String[])pair.getValue();\n                         logger.log(Level.FINE,\n                                          \"   discoveredMap.locator = \"+loc);\n-                        if( groups.length <= 0 ) {\n+                        if (groups == null) {\n+                            logger.log(Level.FINE, \"     discoveredMap.groups is null\");\n+                        } else if( groups.length <= 0 ) {\n                             logger.log(Level.FINE,\n                                    \"     discoveredMap.groups == NO_GROUPS\");\n                         } else {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/0db2dad12135bc1cc69ced9b9cdfcddba9f16399",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/11d6950730a16c3e3dde17dacb177de2e2798f2d",
        "message": "Work around sun bug ID6536522 NPE thrown instead of MalformedURLException\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/trunk@1369541 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_8",
        "file": [
            {
                "sha": "7a89e8ec23fb2cdbe4814a3b8b03f03ac080da88",
                "filename": "src/net/jini/loader/pref/PreferredClassLoader.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/river/blob/0db2dad12135bc1cc69ced9b9cdfcddba9f16399/src/net/jini/loader/pref/PreferredClassLoader.java",
                "raw_url": "https://github.com/apache/river/raw/0db2dad12135bc1cc69ced9b9cdfcddba9f16399/src/net/jini/loader/pref/PreferredClassLoader.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/net/jini/loader/pref/PreferredClassLoader.java?ref=0db2dad12135bc1cc69ced9b9cdfcddba9f16399",
                "patch": "@@ -707,6 +707,9 @@ private URLConnection getPreferredConnection(URL url, boolean closeAfter)\n \t\t\thconn.getResponseMessage());\n \t\t}\n \t    }\n+        } catch (NullPointerException e){\n+            e.fillInStackTrace();\n+            throw new IOException(url.toString(), e);\n \t} finally {\n \t    if (closeAfter && (closeConn != null)) {\n \t\t/* clean up after... */"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/11d6950730a16c3e3dde17dacb177de2e2798f2d",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/5b8c71bcc12aeb8b3ec1196bb0cca8752632a3bc",
        "message": "Work around sun bug ID6536522 NPE thrown instead of MalformedURLException\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/trunk@1369539 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_9",
        "file": [
            {
                "sha": "6f857e17ac85f18e68b23269f67987c83f89d92b",
                "filename": "src/net/jini/loader/pref/PreferredClassLoader.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/river/blob/11d6950730a16c3e3dde17dacb177de2e2798f2d/src/net/jini/loader/pref/PreferredClassLoader.java",
                "raw_url": "https://github.com/apache/river/raw/11d6950730a16c3e3dde17dacb177de2e2798f2d/src/net/jini/loader/pref/PreferredClassLoader.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/net/jini/loader/pref/PreferredClassLoader.java?ref=11d6950730a16c3e3dde17dacb177de2e2798f2d",
                "patch": "@@ -1283,7 +1283,9 @@ static void addPermissionsForURLs(URL[] urls,\n \t\t * does, don't bother granting or requiring any permissions\n \t\t * for this URL.\n \t\t */\n-\t    }\n+\t    } catch (NullPointerException e){\n+                // Sun Bug ID: 6536522\n+            }\n \t}\n     }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/5b8c71bcc12aeb8b3ec1196bb0cca8752632a3bc",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/1d26cfbfe4713545fcb718516ede5ebf54cd3137",
        "message": "Work around sun bug ID6536522 NPE thrown instead of MalformedURLException\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/trunk@1369538 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_10",
        "file": [
            {
                "sha": "dbbb7c42aa222cb36bc4483515404ee8455fa8e6",
                "filename": "src/net/jini/loader/pref/PreferredClassLoader.java",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/river/blob/5b8c71bcc12aeb8b3ec1196bb0cca8752632a3bc/src/net/jini/loader/pref/PreferredClassLoader.java",
                "raw_url": "https://github.com/apache/river/raw/5b8c71bcc12aeb8b3ec1196bb0cca8752632a3bc/src/net/jini/loader/pref/PreferredClassLoader.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/net/jini/loader/pref/PreferredClassLoader.java?ref=5b8c71bcc12aeb8b3ec1196bb0cca8752632a3bc",
                "patch": "@@ -604,7 +604,7 @@ private boolean jarExists(URL firstURL) throws IOException {\n                 // NullPointerException is thrown instead of MalformedURLException\n                 // Case is the same as above, we have no definite answer on\n                 // whether the JAR file and therefore the PREFERRED.LIST exists.\n-                System.err.println(\"NPE thrown while trying to open connection:\" +\n+                System.err.println(\"NPE thrown while trying to open connection :\" +\n                         baseURL);\n                 e.printStackTrace(System.err);\n             }\n@@ -713,7 +713,9 @@ private URLConnection getPreferredConnection(URL url, boolean closeAfter)\n \t\ttry {\n \t\t    closeConn.getInputStream().close();\n \t\t} catch (IOException e) {\n-\t\t}\n+\t\t} catch (NullPointerException e){\n+                    // Sun Bug ID: 6536522\n+                }\n \t    }\n \t}\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/8dc6a399466f6e4e069c901ab258d790c0324c02",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/53ce3c40d4df42694754620a1ef3a37bcfe3537b",
        "message": "System property for Reggie, ensure it is actually visible to tests.  Also ensure that if property is not set that Reggie throws the correct Exception, BindException during construction and not NullPointerException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/skunk/qa_refactor/trunk@1571655 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_11",
        "file": [
            {
                "sha": "e0814011f3766cb668c4c432a35f2c8d518eeb48",
                "filename": "qa/src/com/sun/jini/qa/resources/qaDefaults.properties",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/river/blob/8dc6a399466f6e4e069c901ab258d790c0324c02/qa/src/com/sun/jini/qa/resources/qaDefaults.properties",
                "raw_url": "https://github.com/apache/river/raw/8dc6a399466f6e4e069c901ab258d790c0324c02/qa/src/com/sun/jini/qa/resources/qaDefaults.properties",
                "contents_url": "https://api.github.com/repos/apache/river/contents/qa/src/com/sun/jini/qa/resources/qaDefaults.properties?ref=8dc6a399466f6e4e069c901ab258d790c0324c02",
                "patch": "@@ -13,7 +13,6 @@ net.jini.core.lookup.ServiceRegistrar.policyfile=<url:harness/policy/defaultregg\n net.jini.core.lookup.ServiceRegistrar.log=reggie_log\n net.jini.core.lookup.ServiceRegistrar.membergroups=QATestDefaultGroup\n #net.jini.core.lookup.ServiceRegistrar.port=4160\n-net.jini.core.lookup.ServiceRegistrar.portAbitraryIfInUse=true\n net.jini.core.lookup.ServiceRegistrar.serviceConfiguration=<url:harness/configs/<config>/reggie/reggie.config>\n net.jini.core.lookup.ServiceRegistrar.starterConfiguration=<url:harness/configs/<config>/starter/starter.config>\n net.jini.core.lookup.ServiceRegistrar.preparername=test.reggiePreparer\n@@ -240,7 +239,8 @@ com.sun.jini.qa.harness.globalvmargs=\\\n -Djava.security.properties=${com.sun.jini.qa.harness.securityproperties},\\\n -Dcom.sun.jini.qa.harness.testhosts=${com.sun.jini.qa.harness.testhosts},\\\n -Djava.util.logging.config.file=${java.util.logging.config.file},\\\n--Djava.rmi.server.useCodebaseOnly=false\n+-Djava.rmi.server.useCodebaseOnly=false,\\\n+-Dnet.jini.core.lookup.ServiceRegistrar.portAbitraryIfInUse=true\n \n com.sun.jini.qa.harness.securityproperties=<url: harness/trust/dynamic-policy.properties>\n "
            },
            {
                "sha": "a5a1eb3726ef01ce3efeec00de771eaadb84cbd8",
                "filename": "src/com/sun/jini/reggie/RegistrarImpl.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/river/blob/8dc6a399466f6e4e069c901ab258d790c0324c02/src/com/sun/jini/reggie/RegistrarImpl.java",
                "raw_url": "https://github.com/apache/river/raw/8dc6a399466f6e4e069c901ab258d790c0324c02/src/com/sun/jini/reggie/RegistrarImpl.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/com/sun/jini/reggie/RegistrarImpl.java?ref=8dc6a399466f6e4e069c901ab258d790c0324c02",
                "patch": "@@ -2783,6 +2783,8 @@ public Unicast(RegistrarImpl reggie, int port) throws IOException {\n                     if (arbitraryPort){\n                         listen = reggie.serverSocketFactory.createServerSocket(0);\n                         ephemeral = true;\n+                    } else {\n+                        throw e;\n                     }\n                 }\n \t    }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/8121164d69b1fc95c7644624854548aee3b6ad6e",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/53075ac1c9a85f14123cf6eab3ec584464f117bc",
        "message": "River-420 Fixes for unsafe publication during construction.\n\nFixed NullPointerException caused by previous commit not calling export after removing it from constructor.\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/skunk/qa_refactor/trunk@1485607 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_12",
        "file": [
            {
                "sha": "861d09d5dcd99cc137288f24b7daa17c2c52f2b0",
                "filename": "qa/src/com/sun/jini/test/impl/norm/OneExpireOneNotTest.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/river/blob/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/impl/norm/OneExpireOneNotTest.java",
                "raw_url": "https://github.com/apache/river/raw/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/impl/norm/OneExpireOneNotTest.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/qa/src/com/sun/jini/test/impl/norm/OneExpireOneNotTest.java?ref=8121164d69b1fc95c7644624854548aee3b6ad6e",
                "patch": "@@ -123,6 +123,7 @@ public void run() throws Exception {\n             \"test.normLeasePreparer\", expsLease);\n \n \tfinal LeaseBackEndImpl backend = new LeaseBackEndImpl(leaseCount);\n+        backend.export();\n \n \tfor (int i=0; i<leaseCount; i+=2) {\n \t    long initExpiration = System.currentTimeMillis() + renewGrant;"
            },
            {
                "sha": "78cd6e933144041049044d8c777b5dc0e18fb385",
                "filename": "qa/src/com/sun/jini/test/share/LeaseBackEndImpl.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/river/blob/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/share/LeaseBackEndImpl.java",
                "raw_url": "https://github.com/apache/river/raw/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/share/LeaseBackEndImpl.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/qa/src/com/sun/jini/test/share/LeaseBackEndImpl.java?ref=8121164d69b1fc95c7644624854548aee3b6ad6e",
                "patch": "@@ -114,7 +114,7 @@ public LeaseBackEndImpl(int leaseCount, Class factoryClass)\n         this.factoryClass = factoryClass;\n     }\n     \n-    private synchronized void export() throws ExportException, RemoteException {\n+    public synchronized void export() throws ExportException, RemoteException {\n         LeaseBackEnd stub = \n \t    (LeaseBackEnd) exporter.export(this);\n "
            },
            {
                "sha": "e0552d2400d8f8c86271ed4e888926e06f6a9f37",
                "filename": "qa/src/com/sun/jini/test/share/TestLeaseProvider.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/river/blob/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/share/TestLeaseProvider.java",
                "raw_url": "https://github.com/apache/river/raw/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/share/TestLeaseProvider.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/qa/src/com/sun/jini/test/share/TestLeaseProvider.java?ref=8121164d69b1fc95c7644624854548aee3b6ad6e",
                "patch": "@@ -59,6 +59,7 @@\n      */\n     public TestLeaseProvider(int leaseCount) throws RemoteException {\n \tleaseBackEnd = new LeaseBackEndImpl(leaseCount);\n+        leaseBackEnd.export();\n     }\n \n     /**\n@@ -73,6 +74,7 @@ public TestLeaseProvider(int leaseCount) throws RemoteException {\n     public TestLeaseProvider(int leaseCount, Class factoryClass) \n \t       throws RemoteException {\n \tleaseBackEnd = new LeaseBackEndImpl(leaseCount, factoryClass);\n+        leaseBackEnd.export();\n     }\n \n     /**"
            },
            {
                "sha": "d3d340b971e514e958ecb82cd8cd9beea10a1c85",
                "filename": "qa/src/com/sun/jini/test/spec/discoveryservice/lease/LeaseExpiration.java",
                "status": "modified",
                "additions": 34,
                "deletions": 22,
                "changes": 56,
                "blob_url": "https://github.com/apache/river/blob/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/spec/discoveryservice/lease/LeaseExpiration.java",
                "raw_url": "https://github.com/apache/river/raw/8121164d69b1fc95c7644624854548aee3b6ad6e/qa/src/com/sun/jini/test/spec/discoveryservice/lease/LeaseExpiration.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/qa/src/com/sun/jini/test/spec/discoveryservice/lease/LeaseExpiration.java?ref=8121164d69b1fc95c7644624854548aee3b6ad6e",
                "patch": "@@ -68,6 +68,7 @@\n \n import com.sun.jini.proxy.BasicProxyTrustVerifier;\n import com.sun.jini.qa.harness.Test;\n+import java.rmi.server.ExportException;\n \n /**\n  * This class determines if, when a client's lease on a registration with the\n@@ -90,13 +91,16 @@\n     /** Convenience class for handling the events sent by the service\n      *  with which the client (the test) has registered\n      */\n-\n-    private Object proxy;\n+    \n+    \n \n     public class ServiceEventListener implements RemoteEventListener, \n \t\t\t\t\t\t ServerProxyTrust,\n \t\t\t\t\t\t Serializable \n     {\n+        private final Exporter exporter;\n+        private Object proxy;\n+        \n         public ServiceEventListener() throws RemoteException {\n             super();\n \t    Configuration c = getConfig().getConfiguration();\n@@ -110,14 +114,19 @@ public ServiceEventListener() throws RemoteException {\n \t\t    throw new RemoteException(\"Could not find listener exporter\", e);\n \t\t}\n \t    }\n+            this.exporter = exporter;\n+        }\n+        \n+        private synchronized void export() throws ExportException{\n             proxy = exporter.export(this);\n         }\n+        \n \n-\tpublic Object writeReplace() throws ObjectStreamException {\n+\tpublic synchronized Object writeReplace() throws ObjectStreamException {\n \t    return proxy;\n \t}\n \n-\tpublic TrustVerifier getProxyVerifier() {\n+\tpublic synchronized TrustVerifier getProxyVerifier() {\n \t    return new BasicProxyTrustVerifier(proxy);\n \t}\n \n@@ -175,14 +184,14 @@ public void notify(LeaseRenewalEvent ev) {\n     }//end class LRMListener\n \n     private ServiceRegistrar srvcReg = null;\n-    private ArrayList lookupList = new ArrayList();\n+    private final ArrayList lookupList = new ArrayList();\n     private String[] memberGroups = DiscoveryGroupManagement.NO_GROUPS;\n     private static final int N_CYCLES_WAIT_EXPIRATION = 10;\n     private static final long N_SECS = 30;\n-    private long duration = N_SECS*1000;\n+    private final long duration = N_SECS*1000;\n     private MarshalledObject handback = null;\n     private boolean eventReceived = false;\n-    private Object eventLock = new Object();\n+    private final Object eventLock = new Object();\n \n     /** Constructs and returns the duration values (in milliseconds) to \n      *  request on each renewal attempt (can be overridden by sub-classes)\n@@ -205,21 +214,23 @@ public Test construct(QAConfig config) throws Exception {\n         /* Start a lookup service */\n         logger.log(Level.FINE, \n                           \"starting a new lookup service\");\n-        synchronized(eventLock) {\n-            eventReceived = false;\n-            srvcReg = getManager().startLookupService(); // already prepared\n-            lookupList.add( srvcReg );\n+        synchronized (this){\n+            synchronized(eventLock) {\n+                eventReceived = false;\n+                srvcReg = getManager().startLookupService(); // already prepared\n+                lookupList.add( srvcReg );\n+            }\n+            DiscoveryAdmin admin = DiscoveryAdminUtil.getDiscoveryAdmin(srvcReg);\n+            memberGroups = admin.getMemberGroups();\n+            LocatorsUtil.displayLocator(QAConfig.getConstrainedLocator(srvcReg.getLocator()),\n+                                        \"  lookup locator\",Level.FINE);\n+            logger.log(Level.FINE, \n+                       \"  lookup MemberGroup(s) = \"\n+                       +GroupsUtil.toCommaSeparatedStr(memberGroups));\n+            handback = new MarshalledObject\n+                                  (GroupsUtil.toCommaSeparatedStr(memberGroups));\n+            return this;\n         }\n-        DiscoveryAdmin admin = DiscoveryAdminUtil.getDiscoveryAdmin(srvcReg);\n-        memberGroups = admin.getMemberGroups();\n-        LocatorsUtil.displayLocator(QAConfig.getConstrainedLocator(srvcReg.getLocator()),\n-                                    \"  lookup locator\",Level.FINE);\n-        logger.log(Level.FINE, \n-\t\t   \"  lookup MemberGroup(s) = \"\n-\t\t   +GroupsUtil.toCommaSeparatedStr(memberGroups));\n-\thandback = new MarshalledObject\n-                              (GroupsUtil.toCommaSeparatedStr(memberGroups));\n-        return this;\n     }//end construct\n \n     /** Executes the current test by doing the following:\n@@ -257,7 +268,7 @@ public Test construct(QAConfig config) throws Exception {\n      *  9. Verify that the lookup discovery service does not send anymore\n      *     discovery events to the registration's listener\n      */\n-    public void run() throws Exception {\n+    public synchronized void run() throws Exception {\n         logger.log(Level.FINE, \"run()\");\n         if(discoverySrvc == null) {\n             throw new TestException(\"could not successfully start the service \"\n@@ -270,6 +281,7 @@ public void run() throws Exception {\n         /* Request a registration with the lookup discovery service */\n         logger.log(Level.FINE, \"registering with the lookup discovery service\");\n \tServiceEventListener eventListener = new ServiceEventListener();\n+        eventListener.export();\n \tLookupDiscoveryRegistration reg = \n \t    DiscoveryServiceUtil.getRegistration\n \t                  (discoverySrvc,"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/70fa9af044b0f8c46de8bf706d14b6eb74aa3b9f",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/1e83bfed4f40b742953047d487eaa91339aa708f",
        "message": "Fix NullPointerException caused by attempt to start null threads - new code, caused com/sun/jini/test/impl/reggie/MultihomedClientTest.td\n     [java] Test Failed: Test Failed with an Unexpected Exception: java.lang.Exception: Test failed\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/skunk/qa_refactor/trunk@1481484 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_13",
        "file": [
            {
                "sha": "dfdcdd2a29737554da939cb4e4777ad351da11a9",
                "filename": "src/net/jini/discovery/AbstractLookupDiscovery.java",
                "status": "modified",
                "additions": 5,
                "deletions": 3,
                "changes": 8,
                "blob_url": "https://github.com/apache/river/blob/70fa9af044b0f8c46de8bf706d14b6eb74aa3b9f/src/net/jini/discovery/AbstractLookupDiscovery.java",
                "raw_url": "https://github.com/apache/river/raw/70fa9af044b0f8c46de8bf706d14b6eb74aa3b9f/src/net/jini/discovery/AbstractLookupDiscovery.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/net/jini/discovery/AbstractLookupDiscovery.java?ref=70fa9af044b0f8c46de8bf706d14b6eb74aa3b9f",
                "patch": "@@ -1623,9 +1623,11 @@ void start() throws IOException {\n             if (!all_groups || !this.groups.isEmpty()) {\r\n                 requestGroups(this.groups);\r\n             }//end if\r\n-            announceeThread.start();\r\n-            announcementTimerThread.start();\r\n-            notifierThread.start();\r\n+            if (nicsToUse != NICS_USE_NONE) {\r\n+                announceeThread.start();\r\n+                announcementTimerThread.start();\r\n+                notifierThread.start();\r\n+            }\r\n             started = true;\r\n         }\r\n     }\r"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/94f5b38872ff9ac4e4545e83f5e0d1e227a598a5",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/cee6b0732eef2ec5591789d0b3521084abca1e1a",
        "message": "changes for RIVER-216, RIVER-225, and RIVER-246\n\n-added shutdown hook to reggie to send final\nmulticast packet when reggie's VM is shutdown\n\n-fixed NullPointerException during reggie destroy\n\n-modified ConfigurationFile to throw ExceptionInInitializerError\nif prohibited methods resource cannot be read\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/river/jtsk/trunk@639353 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_14",
        "file": [
            {
                "sha": "675e9a7fb057ceaf52e8b5a208ceb900ac95e2c3",
                "filename": "src/com/sun/jini/reggie/RegistrarImpl.java",
                "status": "modified",
                "additions": 23,
                "deletions": 4,
                "changes": 27,
                "blob_url": "https://github.com/apache/river/blob/94f5b38872ff9ac4e4545e83f5e0d1e227a598a5/src/com/sun/jini/reggie/RegistrarImpl.java",
                "raw_url": "https://github.com/apache/river/raw/94f5b38872ff9ac4e4545e83f5e0d1e227a598a5/src/com/sun/jini/reggie/RegistrarImpl.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/com/sun/jini/reggie/RegistrarImpl.java?ref=94f5b38872ff9ac4e4545e83f5e0d1e227a598a5",
                "patch": "@@ -2396,11 +2396,10 @@ public void run() {\n \t    socket.close();\n \t}\n \n-\t/* This is a workaround for Thread.interrupt not working on\n-\t * MulticastSocket.receive on all platforms.\n-\t */\n \tpublic synchronized void interrupt() {\n-\t    socket.close();\n+\t    // close socket to interrupt MulticastSocket.receive operation\n+\t    if (socket != null)\n+\t        socket.close();\n \t    super.interrupt();\n \t}\n \n@@ -4665,6 +4664,26 @@ private void init(Configuration config,\n \tunicaster.start();\n \tmulticaster.start();\n \tannouncer.start();\n+        \n+        /* Shutdown hook so reggie sends a final announcement\n+         * packet if VM is terminated.  If reggie is terminated\n+         * through DestroyAdmin.destroy() this hook will have no effect.\n+         * A timeout on announcer.join() was considered but not deemed\n+         * necessary at this point in time.  \n+         */\n+\tRuntime.getRuntime().addShutdownHook(new Thread( new Runnable() {\n+\t    public void run() {\n+\t\ttry {\n+\t\t    announcer.interrupt();\n+\t\t    announcer.join();\n+\t\t} catch (Throwable t) {\n+                    logThrow(Level.FINEST, getClass().getName(), \n+                        \"run\", \"exception shutting announcer down\",\n+                        new Object[]{}, t);\n+\t\t}\n+\t    }\n+\t}));\n+        \n         snapshotter.start();\n \tif (logger.isLoggable(Level.INFO)) {\n \t    logger.log(Level.INFO, \"started Reggie: {0}, {1}, {2}\","
            },
            {
                "sha": "eb139e88ca320b726d66a8d97dd112181f3f8696",
                "filename": "src/net/jini/config/ConfigurationFile.java",
                "status": "modified",
                "additions": 11,
                "deletions": 3,
                "changes": 14,
                "blob_url": "https://github.com/apache/river/blob/94f5b38872ff9ac4e4545e83f5e0d1e227a598a5/src/net/jini/config/ConfigurationFile.java",
                "raw_url": "https://github.com/apache/river/raw/94f5b38872ff9ac4e4545e83f5e0d1e227a598a5/src/net/jini/config/ConfigurationFile.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/net/jini/config/ConfigurationFile.java?ref=94f5b38872ff9ac4e4545e83f5e0d1e227a598a5",
                "patch": "@@ -368,7 +368,7 @@\n  *\n  * <tr> <th scope=\"col\"> Level <th scope=\"col\"> Description\n  *\n- * <tr> <td> {@link Level#INFO INFO} <td> problems adding new prohibited\n+ * <tr> <td> {@link Level#SEVERE SEVERE} <td> problems adding new prohibited\n  *\tmethods\n  *\n  * <tr> <td> {@link Levels#FAILED FAILED} <td> problems getting entries,\n@@ -453,12 +453,20 @@\n \t\t    }\n \t\t    logger.log(Level.FINER, \"Adding prohibited method: {0}\",\n \t\t\t       line);\n-\t\t    prohibitedMethods.add(line);\n+                    if (validQualifiedIdentifier(line)) {\n+                        prohibitedMethods.add(line);\n+                    } else {\n+                        logger.log(Level.SEVERE, \n+                                \"Problem adding prohibited method: {0}\", line);\n+                        throw new ExceptionInInitializerError(\n+                                \"Problem adding prohibited method: \" + line);\n+                    }\n \t\t}\n \t    }\n \t} catch (IOException e) {\n \t    logger.log(\n-\t\tLevel.INFO, \"Problem reading prohibited methods resource\", e);\n+\t\tLevel.SEVERE, \"Problem reading prohibited methods resource\", e);\n+            throw new ExceptionInInitializerError(e);\n \t} finally {\n \t    if (in != null) {\n \t\ttry {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/21815d87d81b4efcad39ea8086e6ebf980208ea7",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/2ea19b2b1453f1339f9f62dd08924cc0430a2c5e",
        "message": "Work around sun bug ID 6536522 NPE thrown instead of MalformedURLException\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/trunk@1369578 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_15",
        "file": [
            {
                "sha": "4e89005e2100e7bab002b251c5e9971f006a49dc",
                "filename": "src/net/jini/loader/pref/PreferredClassLoader.java",
                "status": "modified",
                "additions": 7,
                "deletions": 4,
                "changes": 11,
                "blob_url": "https://github.com/apache/river/blob/21815d87d81b4efcad39ea8086e6ebf980208ea7/src/net/jini/loader/pref/PreferredClassLoader.java",
                "raw_url": "https://github.com/apache/river/raw/21815d87d81b4efcad39ea8086e6ebf980208ea7/src/net/jini/loader/pref/PreferredClassLoader.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/net/jini/loader/pref/PreferredClassLoader.java?ref=21815d87d81b4efcad39ea8086e6ebf980208ea7",
                "patch": "@@ -707,10 +707,13 @@ private URLConnection getPreferredConnection(URL url, boolean closeAfter)\n \t\t\thconn.getResponseMessage());\n \t\t}\n \t    }\n-        } catch (NullPointerException e){\n-            // Sun Bug ID: 6536522\n-            e.fillInStackTrace();\n-            throw new IOException(url.toString(), e);\n+        } catch (RuntimeException e){\n+            if ( e instanceof NullPointerException || e.getCause() instanceof NullPointerException) {\n+                // Sun Bug ID: 6536522\n+                throw new IOException(url.toString(), e);\n+            } else {\n+                throw e;\n+            }\n \t} finally {\n \t    if (closeAfter && (closeConn != null)) {\n \t\t/* clean up after... */"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/2ea19b2b1453f1339f9f62dd08924cc0430a2c5e",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/5c81dfbaa2b5db269b450d81f329333462b2b344",
        "message": "Work around sun bug ID 6536522 NPE thrown instead of MalformedURLException\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/trunk@1369573 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_16",
        "file": [
            {
                "sha": "c105008dc8ea305f8a912e2899c8ddf61eb1a426",
                "filename": "src/net/jini/loader/pref/PreferredClassLoader.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/river/blob/2ea19b2b1453f1339f9f62dd08924cc0430a2c5e/src/net/jini/loader/pref/PreferredClassLoader.java",
                "raw_url": "https://github.com/apache/river/raw/2ea19b2b1453f1339f9f62dd08924cc0430a2c5e/src/net/jini/loader/pref/PreferredClassLoader.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/net/jini/loader/pref/PreferredClassLoader.java?ref=2ea19b2b1453f1339f9f62dd08924cc0430a2c5e",
                "patch": "@@ -721,6 +721,7 @@ private URLConnection getPreferredConnection(URL url, boolean closeAfter)\n                     if ( e instanceof NullPointerException || e.getCause() instanceof NullPointerException) {\n                         // Sun Bug ID: 6536522\n                         // swallow\n+                        e.printStackTrace(System.err);\n                     } else {\n                         throw e;\n                     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/5c81dfbaa2b5db269b450d81f329333462b2b344",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/0db2dad12135bc1cc69ced9b9cdfcddba9f16399",
        "message": "Work around sun bug ID 6536522 NPE thrown instead of MalformedURLException\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/trunk@1369570 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_17",
        "file": [
            {
                "sha": "5c9e3f578761fd4574d708b3627fffff53b560b7",
                "filename": "src/net/jini/loader/pref/PreferredClassLoader.java",
                "status": "modified",
                "additions": 10,
                "deletions": 4,
                "changes": 14,
                "blob_url": "https://github.com/apache/river/blob/5c81dfbaa2b5db269b450d81f329333462b2b344/src/net/jini/loader/pref/PreferredClassLoader.java",
                "raw_url": "https://github.com/apache/river/raw/5c81dfbaa2b5db269b450d81f329333462b2b344/src/net/jini/loader/pref/PreferredClassLoader.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/net/jini/loader/pref/PreferredClassLoader.java?ref=5c81dfbaa2b5db269b450d81f329333462b2b344",
                "patch": "@@ -681,7 +681,7 @@ private URLConnection getPreferredConnection(URL url, boolean closeAfter)\n \t\tif (closeAfter) {\n \t\t    hconn.setRequestMethod(\"HEAD\");\n \t\t}\n-\t\tint responseCode = hconn.getResponseCode();\n+\t\tint responseCode = hconn.getResponseCode();//NPE\n \t\t\n \t\tswitch (responseCode) {\n \t\tcase HttpURLConnection.HTTP_OK:\n@@ -708,16 +708,22 @@ private URLConnection getPreferredConnection(URL url, boolean closeAfter)\n \t\t}\n \t    }\n         } catch (NullPointerException e){\n+            // Sun Bug ID: 6536522\n             e.fillInStackTrace();\n             throw new IOException(url.toString(), e);\n \t} finally {\n \t    if (closeAfter && (closeConn != null)) {\n \t\t/* clean up after... */\n \t\ttry {\n-\t\t    closeConn.getInputStream().close();\n+\t\t    closeConn.getInputStream().close();//RTE NPE\n \t\t} catch (IOException e) {\n-\t\t} catch (NullPointerException e){\n-                    // Sun Bug ID: 6536522\n+\t\t} catch (RuntimeException e){\n+                    if ( e instanceof NullPointerException || e.getCause() instanceof NullPointerException) {\n+                        // Sun Bug ID: 6536522\n+                        // swallow\n+                    } else {\n+                        throw e;\n+                    }\n                 }\n \t    }\n \t}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/1d26cfbfe4713545fcb718516ede5ebf54cd3137",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/ae67fa02e76f80e37d4f0574d836faf860bc723c",
        "message": "Investigate test failure on Solaris x86, BadLocatorDiscoveryListener.\n\nSun Bug ID:6536522 NPE thrown instead of MalformedURLException\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/trunk@1369533 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_18",
        "file": [
            {
                "sha": "870b778e0198f2bb5cfd79c19ae666cb1effe64a",
                "filename": "src/net/jini/loader/pref/PreferredClassLoader.java",
                "status": "modified",
                "additions": 11,
                "deletions": 4,
                "changes": 15,
                "blob_url": "https://github.com/apache/river/blob/1d26cfbfe4713545fcb718516ede5ebf54cd3137/src/net/jini/loader/pref/PreferredClassLoader.java",
                "raw_url": "https://github.com/apache/river/raw/1d26cfbfe4713545fcb718516ede5ebf54cd3137/src/net/jini/loader/pref/PreferredClassLoader.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/net/jini/loader/pref/PreferredClassLoader.java?ref=1d26cfbfe4713545fcb718516ede5ebf54cd3137",
                "patch": "@@ -592,15 +592,22 @@ private boolean jarExists(URL firstURL) throws IOException {\n \t     * available upon the attempt (elsewhere) to obtain the preferred\n \t     * list\n \t     */\n+            URL baseURL = getBaseJarURL(firstURL);\n \t    try {\n-\t\tURL baseURL = getBaseJarURL(firstURL);\n \t\t((JarURLConnection) baseURL.openConnection()).getManifest();\n \t\texists = true;\n-\t    }\n-\t    catch (IOException e) {\n+\t    } catch (IOException e) {\n \t\t// we still have no definite answer on whether the JAR file\n \t\t// and therefore the PREFERRED.LIST exists\n-\t    }\n+\t    } catch (NullPointerException e){\n+                // Sun Bug ID: 6536522\n+                // NullPointerException is thrown instead of MalformedURLException\n+                // Case is the same as above, we have no definite answer on\n+                // whether the JAR file and therefore the PREFERRED.LIST exists.\n+                System.err.println(\"NPE thrown while trying to open connection:\" +\n+                        baseURL);\n+                e.printStackTrace(System.err);\n+            }\n \n \t    if (!exists) {\n \t\texists = (getPreferredConnection(firstURL, true) != null);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/river/commit/ec42283c4e2dead490c8fe7614e724d458cabfc7",
        "repo": "river",
        "parent": "https://github.com/apache/river/commit/cbcfc07e4d29106958936a3c85285b17875e1a00",
        "message": "Minor refactor to BaseQATest.\n\nRemoved TaskManager from LookupDiscoveryLocator and replaced with ExecutorService, added configuration option for users.\n\nMade breaking changes to subclasses for some classes, by changing object fields from protected, to private final, to make these objects immutable.\n\nFix JvmLifeSupport case where assertion is ignored to avoid NullPointerException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/river/jtsk/skunk/qa_refactor/trunk@1444803 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "river_19",
        "file": [
            {
                "sha": "378c5cd9e86174618079bf8a06f88f4e57c4bd3c",
                "filename": "src/com/sun/jini/discovery/MulticastAnnouncement.java",
                "status": "modified",
                "additions": 7,
                "deletions": 7,
                "changes": 14,
                "blob_url": "https://github.com/apache/river/blob/ec42283c4e2dead490c8fe7614e724d458cabfc7/src/com/sun/jini/discovery/MulticastAnnouncement.java",
                "raw_url": "https://github.com/apache/river/raw/ec42283c4e2dead490c8fe7614e724d458cabfc7/src/com/sun/jini/discovery/MulticastAnnouncement.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/com/sun/jini/discovery/MulticastAnnouncement.java?ref=ec42283c4e2dead490c8fe7614e724d458cabfc7",
                "patch": "@@ -31,15 +31,15 @@\n public class MulticastAnnouncement {\n \n     /** The announcement sequence number. */\n-    protected long sequenceNumber;\n+    private final long sequenceNumber;\n     /** The lookup service host. */\n-    protected String host;\n+    private final String host;\n     /** The lookup service listen port. */\n-    protected int port;\n+    private final int port;\n     /** The lookup service member groups. */\n-    protected String[] groups;\n+    private final String[] groups;\n     /** The lookup service ID. */\n-    protected ServiceID serviceID;\n+    private final ServiceID serviceID;\n \n     /**\n      * Creates a new <code>MulticastAnnouncement</code> instance containing the\n@@ -62,7 +62,7 @@ public MulticastAnnouncement(long sequenceNumber,\n \t\t\t\t String[] groups,\n \t\t\t\t ServiceID serviceID)\n     {\n-\tgroups = (groups != null) ? (String[]) groups.clone() : new String[0];\n+\tgroups = (groups != null) ? groups.clone() : new String[0];\n \tif (host == null || \n \t    serviceID == null ||\n \t    Arrays.asList(groups).contains(null))\n@@ -112,7 +112,7 @@ public int getPort() {\n      * @return the member groups of the lookup service\n      */\n     public String[] getGroups() {\n-\treturn (String[]) groups.clone();\n+\treturn groups.clone();\n     }\n \n     /**"
            },
            {
                "sha": "7d5e0bfdebd56dfa38bab19719011470505a083f",
                "filename": "src/com/sun/jini/discovery/UnicastResponse.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/river/blob/ec42283c4e2dead490c8fe7614e724d458cabfc7/src/com/sun/jini/discovery/UnicastResponse.java",
                "raw_url": "https://github.com/apache/river/raw/ec42283c4e2dead490c8fe7614e724d458cabfc7/src/com/sun/jini/discovery/UnicastResponse.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/com/sun/jini/discovery/UnicastResponse.java?ref=ec42283c4e2dead490c8fe7614e724d458cabfc7",
                "patch": "@@ -30,13 +30,13 @@\n public class UnicastResponse {\n \n     /** The lookup service host. */\n-    protected String host;\n+    private final String host;\n     /** The lookup service listen port. */\n-    protected int port;\n+    private final int port;\n     /** The lookup service member groups. */\n-    protected String[] groups;\n+    private final String[] groups;\n     /** The lookup service proxy. */\n-    protected ServiceRegistrar registrar;\n+    private final ServiceRegistrar registrar;\n \n     /**\n      * Creates new <code>UnicastResponse</code> instance containing the given"
            },
            {
                "sha": "3fe886cb0f4bbb5b92a210fe52fa61826930f784",
                "filename": "src/com/sun/jini/jeri/internal/runtime/JvmLifeSupport.java",
                "status": "modified",
                "additions": 9,
                "deletions": 6,
                "changes": 15,
                "blob_url": "https://github.com/apache/river/blob/ec42283c4e2dead490c8fe7614e724d458cabfc7/src/com/sun/jini/jeri/internal/runtime/JvmLifeSupport.java",
                "raw_url": "https://github.com/apache/river/raw/ec42283c4e2dead490c8fe7614e724d458cabfc7/src/com/sun/jini/jeri/internal/runtime/JvmLifeSupport.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/com/sun/jini/jeri/internal/runtime/JvmLifeSupport.java?ref=ec42283c4e2dead490c8fe7614e724d458cabfc7",
                "patch": "@@ -111,12 +111,15 @@ private void check(){\n             int count = keepAliveCount.get();\n             if (count == 0){\n                 assert keeper != null;\n-                AccessController.doPrivileged(new PrivilegedAction() {\n-                    public Object run() {\n-                        keeper.interrupt();\n-                        return null;\n-                    }\n-                });\n+                Thread kept = keeper;\n+                if (kept != null){\n+                    AccessController.doPrivileged(new PrivilegedAction() {\n+                        public Object run() {\n+                            keeper.interrupt();\n+                            return null;\n+                        }\n+                    });\n+                }\n                 keeper = null;\n             } else if ( count > 0){\n                 if (keeper == null) {"
            },
            {
                "sha": "8d875febab6ee41f50c0776d316c7fa4d7bcc642",
                "filename": "src/com/sun/jini/thread/WakeupManager.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/river/blob/ec42283c4e2dead490c8fe7614e724d458cabfc7/src/com/sun/jini/thread/WakeupManager.java",
                "raw_url": "https://github.com/apache/river/raw/ec42283c4e2dead490c8fe7614e724d458cabfc7/src/com/sun/jini/thread/WakeupManager.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/com/sun/jini/thread/WakeupManager.java?ref=ec42283c4e2dead490c8fe7614e724d458cabfc7",
                "patch": "@@ -277,7 +277,7 @@ public String toString() {\n      * can be used by subclasses of <code>WakeupManager</code> to\n      * create new <code>Ticket</code> instances. \n      */\n-    public static class Ticket implements Comparable {\n+    public static class Ticket implements Comparable<Ticket> {\n \t/** When the task should occur. */\n \tpublic final long when;\n \t/** The task object to be executed */\n@@ -317,8 +317,8 @@ public int hashCode() {\n \t    return (int)breaker;\n \t}\n \n-\tpublic int compareTo(Object o) {\n-\t    final Ticket that = (Ticket)o;\t    \n+\tpublic int compareTo(Ticket o) {\n+\t    final Ticket that = o;\t    \n \t    \n \t    final long whenDiff = when - that.when;\n \t    if (whenDiff > 0)"
            },
            {
                "sha": "5652c598c76d6a31fde82adde45a8426065a434b",
                "filename": "src/net/jini/discovery/LookupDiscovery.java",
                "status": "modified",
                "additions": 104,
                "deletions": 93,
                "changes": 197,
                "blob_url": "https://github.com/apache/river/blob/ec42283c4e2dead490c8fe7614e724d458cabfc7/src/net/jini/discovery/LookupDiscovery.java",
                "raw_url": "https://github.com/apache/river/raw/ec42283c4e2dead490c8fe7614e724d458cabfc7/src/net/jini/discovery/LookupDiscovery.java",
                "contents_url": "https://api.github.com/repos/apache/river/contents/src/net/jini/discovery/LookupDiscovery.java?ref=ec42283c4e2dead490c8fe7614e724d458cabfc7",
                "patch": "@@ -28,7 +28,6 @@\n import com.sun.jini.discovery.internal.MultiIPDiscovery;\n import com.sun.jini.logging.Levels;\n import com.sun.jini.logging.LogUtil;\n-import com.sun.jini.thread.TaskManager;\n import com.sun.jini.thread.WakeupManager;\n import com.sun.jini.thread.WakeupManager.Ticket;\n import java.io.IOException;\n@@ -53,14 +52,20 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Deque;\n import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Queue;\n import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import java.util.logging.LogRecord;\n@@ -731,13 +736,13 @@\n     /** Flag indicating whether or not this class is still functional. */\n     private volatile boolean terminated = false;\n     /** Set of listeners to be sent discovered/discarded/changed events.  Access sync on registrars */\n-    private final ArrayList listeners = new ArrayList(1);\n+    private final ArrayList<DiscoveryListener> listeners = new ArrayList<DiscoveryListener>(1);\n     /** The groups to discover. Empty set -- NO_GROUPS, access synchronised on registrars */\n-    private final Set groups;\n+    private final Set<String> groups;\n     /** If groups passed to constructor are null -- ALL_GROUPS, writes synchronised on registrars */\n     private volatile boolean all_groups;\n     /** Map from ServiceID to UnicastResponse. */\n-    private final Map registrars = new HashMap(11);\n+    private final Map<ServiceID,UnicastResponse> registrars = new HashMap<ServiceID,UnicastResponse>(11);\n     /** \n      * Set that takes one of the following:\n      * <p><ul>\n@@ -756,16 +761,17 @@\n     /** Thread that handles pending notifications. */\n     private final Notifier notifierThread;\n     /** Notifications to be sent to listeners.  Synchronised access with lock notify */\n-    private final LinkedList pendingNotifies = new LinkedList();\n+    private final Deque<NotifyTask> pendingNotifies = new LinkedList<NotifyTask>();\n     /** Task manager for running UnicastDiscoveryTasks and\n      *  DecodeAnnouncementTasks.\n      */\n-    private final TaskManager taskManager;\n+    private final ExecutorService executor;\n+    \n     /* WakeupManager to delay tasks. */\n     private final WakeupManager discoveryWakeupMgr;\n     private final boolean isDefaultWakeupMgr;\n     /* Outstanding tickets - Access synchronized on pendingDiscoveries */\n-    private final List tickets;\n+    private final List<Ticket> tickets;\n     /** Thread that handles incoming multicast announcements. */\n     private final AnnouncementListener announceeThread;\n     /** Collection that contains instances of the Requestor Thread class,\n@@ -774,7 +780,7 @@\n      * \n      * Access synchronised.\n      */\n-    private final Collection requestors = new LinkedList();\n+    private final Collection<Thread> requestors = new LinkedList<Thread>();\n     /** Thread that manages incoming multicast responses. Runs only when\n      *  there are Requestor threads running.\n      * \n@@ -791,7 +797,7 @@\n      * \n      * Access synchronised on registrars.\n      */\n-    private final HashMap regInfo = new HashMap(11);\n+    private final HashMap<ServiceID,AnnouncementInfo> regInfo = new HashMap<ServiceID,AnnouncementInfo>(11);\n     /** Thread that monitors multicast announcements from already-discovered\n      *  lookup services and, upon determining that those announcements have\n      *  stopped, queues a reachability test with the UnicastDiscoveryTask\n@@ -878,12 +884,12 @@\n     /** Data structure containing task data processed by the Notifier Thread */\n     private static class NotifyTask {\n \t/** The set of listeners to notify */\n-\tpublic final ArrayList listeners;\n+\tpublic final List<DiscoveryListener> listeners;\n \t/** Map of discovered registrars-to-groups in which each is a member */\n-\tpublic final Map groupsMap;\n+\tpublic final Map<ServiceRegistrar,String[]> groupsMap;\n \t/** The type of event to send: DISCOVERED, DISCARDED, CHANGED */\n \tpublic final int eventType;\n-\tpublic NotifyTask(ArrayList listeners, Map groupsMap, int eventType) {\n+\tpublic NotifyTask(List<DiscoveryListener> listeners, Map<ServiceRegistrar,String[]> groupsMap, int eventType) {\n \t    this.listeners = listeners;\n \t    this.groupsMap = groupsMap;\n \t    this.eventType = eventType;\n@@ -916,7 +922,7 @@ public void run() {\n                             break;\n                         }\n \t\t    }//endif\n-\t\t    task = (NotifyTask)pendingNotifies.removeFirst();\n+\t\t    task = pendingNotifies.removeFirst();\n                     if (task == null) continue; // spurious wakeup.\n \t\t}//end sync\n                 /* The call to notify() on the registered listeners is\n@@ -964,8 +970,7 @@ public Object run() {\n                                                     \"discarded\",\n                                                     \"changed\"}[task.eventType];\n                                 ServiceRegistrar[] regs = e.getRegistrars();\n-                                logger.finest(eType+\" event  -- \"+regs.length\n-                                                                +\" lookup(s)\");\n+                                logger.log(Level.FINEST, \"{0} event  -- {1} lookup(s)\", new Object[]{eType, regs.length});\n                                 Map groupsMap = e.getGroups();\n                                 for(int i=0;i<regs.length;i++) {\n                                     LookupLocator loc = null;\n@@ -974,16 +979,13 @@ public Object run() {\n                                     } catch (Throwable ex) { /* ignore */ }\n                                     String[] groups = \n                                              (String[])groupsMap.get(regs[i]);\n-                                    logger.finest(\"    \"+eType+\" locator  = \"\n-                                                              +loc);\n+                                    logger.log(Level.FINEST, \"    {0} locator  = {1}\", new Object[]{eType, loc});\n                                     if(groups.length == 0) {\n-                                        logger.finest(\"    \"+eType+\" group    \"\n-                                                            +\"= NO_GROUPS\");\n+                                        logger.log(Level.FINEST,\"    {0}\"+\" group    \"\n+                                                            +\"= NO_GROUPS\", eType);\n                                     } else {\n                                         for(int j=0;j<groups.length;j++) {\n-                                            logger.finest(\"    \"+eType\n-                                                          +\" group[\"+j+\"] = \"\n-                                                          +groups[j]);\n+                                            logger.log(Level.FINEST, \"    {0} group[{1}] = {2}\", new Object[]{eType, j, groups[j]});\n                                         }//end loop\n                                     }//endif(groups.length)\n                                 }//end loop\n@@ -1037,7 +1039,7 @@ public Object run() {\n          * which encountered failure when setting the interface or joining\n          * the desired multicast group, and which will be retried periodically.\n          */\n-        private ArrayList retryNics = null;\n+        private ArrayList<NetworkInterface> retryNics = null;\n \n \t/** Create a daemon thread */\n \tpublic AnnouncementListener() throws IOException {\n@@ -1055,7 +1057,7 @@ public AnnouncementListener() throws IOException {\n                             sock.joinGroup(Constants.getAnnouncementAddress());\n                         } catch(IOException e) {\n                             if(retryNics == null) {\n-                                retryNics = new ArrayList(nics.length);\n+                                retryNics = new ArrayList<NetworkInterface>(nics.length);\n                             }//endif\n                             retryNics.add(nics[i]);\n                             if( logger.isLoggable(Levels.HANDLED) ) {\n@@ -1082,7 +1084,7 @@ public AnnouncementListener() throws IOException {\n                             sock.joinGroup(Constants.getAnnouncementAddress());\n                         } catch(IOException e) {\n                             if(retryNics == null) {\n-                                retryNics = new ArrayList(nics.length);\n+                                retryNics = new ArrayList<NetworkInterface>(nics.length);\n                             }//endif\n                             retryNics.add(nics[i]);\n                             if( logger.isLoggable(Level.SEVERE) ) {\n@@ -1107,7 +1109,7 @@ public AnnouncementListener() throws IOException {\n                     try {\n                         sock.joinGroup(Constants.getAnnouncementAddress());\n                     } catch(IOException e) {\n-                        retryNics = new ArrayList(0);\n+                        retryNics = new ArrayList<NetworkInterface>(0);\n                         if( logger.isLoggable(Level.SEVERE) ) {\n                             logger.log(Level.SEVERE, \"system default network \"\n                                        +\"interface is bad or not configured \"\n@@ -1145,10 +1147,11 @@ private void retryBadNics() {\n             if( !retryNics.isEmpty() ) {\n                 String recoveredStr = \"network interface has recovered \"\n                                       +\"from previous failure: {0}\";\n-                ArrayList tmpList = (ArrayList)retryNics.clone();\n+                @SuppressWarnings(\"unchecked\")\n+                ArrayList<NetworkInterface> tmpList = (ArrayList<NetworkInterface>) retryNics.clone();\n                 retryNics.clear();\n                 for(int i=0; i<tmpList.size(); i++) {\n-                    NetworkInterface nic =(NetworkInterface)tmpList.get(i);\n+                    NetworkInterface nic =tmpList.get(i);\n                     try {\n                         sock.setNetworkInterface(nic);\n                         sock.joinGroup(Constants.getAnnouncementAddress());\n@@ -1434,20 +1437,18 @@ public void run() {\n                         /* can't modify regInfo while iterating over it, \n                          * so clone it\n                          */\n-                        HashMap regInfoClone = (HashMap)(regInfo.clone());\n-                        Set eSet = regInfoClone.entrySet();\n-                        for(Iterator itr = eSet.iterator(); itr.hasNext(); ) {\n-                            Map.Entry pair   = (Map.Entry)itr.next();\n-                            ServiceID srvcID = (ServiceID)pair.getKey();\n-                            long tStamp = \n-\t\t\t\t((AnnouncementInfo)pair.getValue()).tStamp;\n+                        HashMap<ServiceID,AnnouncementInfo> regInfoClone = (HashMap<ServiceID,AnnouncementInfo>) regInfo.clone();\n+                        Set<Map.Entry<ServiceID,AnnouncementInfo>> eSet = regInfoClone.entrySet();\n+                        for(Iterator<Map.Entry<ServiceID,AnnouncementInfo>> itr = eSet.iterator(); itr.hasNext(); ) {\n+                            Map.Entry<ServiceID,AnnouncementInfo> pair   = itr.next();\n+                            ServiceID srvcID = pair.getKey();\n+                            long tStamp = pair.getValue().gettStamp();\n                             long deltaT = curTime - tStamp;\n                             if(deltaT > timeThreshold) {\n                                 /* announcements stopped, queue reachability\n                                  * test and potential discarded event\n                                  */\n-                                UnicastResponse resp =\n-\t\t\t\t    (UnicastResponse)registrars.get(srvcID);\n+                                UnicastResponse resp = registrars.get(srvcID);\n \t\t\t\tObject req = new CheckReachabilityMarker(resp);\n                                 synchronized (pendingDiscoveries) {\n                                     if(pendingDiscoveries.add(req)) {\n@@ -1519,7 +1520,7 @@ public boolean equals(Object obj) {\n      * signature verification, and would impede the packet receiving loop if it\n      * were performed inline.\n      */\n-    private class DecodeAnnouncementTask implements TaskManager.Task {\n+    private class DecodeAnnouncementTask implements Runnable {\n \n \tprivate final DatagramPacket datagram;\n \n@@ -1577,15 +1578,14 @@ private void doRun() {\n \t    Object pending = null;\n \t    ServiceID srvcID = ann.getServiceID();\n \t    synchronized (registrars) {\n-\t\tUnicastResponse resp =\n-\t\t    (UnicastResponse) registrars.get(srvcID);\n+\t\tUnicastResponse resp = registrars.get(srvcID);\n \t\tif (resp != null) {\n \t\t    // already in discovered set, timestamp announcement\n-\t\t    AnnouncementInfo aInfo = \n-\t\t\t(AnnouncementInfo) regInfo.get(srvcID);\n-\t\t    aInfo.tStamp = System.currentTimeMillis();\n+\t\t    AnnouncementInfo aInfo = regInfo.get(srvcID);\n+\t\t    aInfo = new AnnouncementInfo( System.currentTimeMillis(), aInfo.getSeqNum());\n+                    regInfo.put(srvcID, aInfo);\n \t\t    long currNum = ann.getSequenceNumber();\n-\t\t    if ((newSeqNum(currNum, aInfo.seqNum)) &&\n+\t\t    if ((newSeqNum(currNum, aInfo.getSeqNum())) &&\n \t\t\t(!groupSetsEqual(resp.getGroups(), ann.getGroups()))) {\n \t\t\t/* Check if the groups have changed. In the case of\n \t\t\t * split announcement messages, eventually, group difference\n@@ -1615,9 +1615,9 @@ private void doRun() {\n \t\t    synchronized(registrars) {\n \t\t\t// Since this is a valid announcement, update the\n \t\t\t// sequence number.\n-\t\t\tAnnouncementInfo aInfo = \n-\t\t\t    (AnnouncementInfo) regInfo.get(srvcID);\n-\t\t\taInfo.seqNum = ann.getSequenceNumber();\n+\t\t\tAnnouncementInfo aInfo = regInfo.get(srvcID);\n+\t\t\taInfo = new AnnouncementInfo( aInfo.gettStamp(), ann.getSequenceNumber());\n+                        regInfo.put(srvcID, aInfo);\n \t\t    }\n \t\t}\n \t\tboolean added;\n@@ -1663,10 +1663,6 @@ private boolean newSeqNum(long currentNum, long oldNum) {\n \t\treturn false;\n \t    }\n \t}\n-\t/** No ordering */\n-\tpublic boolean runAfter(List tasks, int size) {\n-\t    return false;\n-\t}\n     }\n \n     /** Task which retrieves elements from the set of pendingDiscoveries and\n@@ -1726,7 +1722,7 @@ public boolean runAfter(List tasks, int size) {\n      *  unicast discoveries) will be missed whenever a lookup service\n      *  disappears prior to the commencement of the unicast discovery stage.\n      */\n-    private class UnicastDiscoveryTask implements TaskManager.Task {\n+    private class UnicastDiscoveryTask implements Runnable {\n \tprivate final Object req;\n \tprivate Ticket ticket = null;\n \tprivate boolean delayRun = false;\n@@ -1815,7 +1811,7 @@ protected void singleResponseException(Exception e,\n \t\t    ServiceID srvcID = announcement.getServiceID();\n \t\t    UnicastResponse resp = null;\n \t\t    synchronized (registrars) {\n-\t\t\tresp = (UnicastResponse)registrars.get(srvcID);\n+\t\t\tresp = registrars.get(srvcID);\n \t\t    }\n \t\t    if(resp != null) {\n \t\t\tmaybeSendEvent(resp, announcement.getGroups());\n@@ -1884,9 +1880,6 @@ protected void singleResponseException(Exception e,\n          *  @param tasks the tasks to consider.\n          *  @param size  elements with index less than size are considered.\n          */\n-        public boolean runAfter(List tasks, int size) {\n-            return false;\n-        }//end runAfter\n     }//end class UnicastDiscoveryTask\n \n     /**\n@@ -2002,16 +1995,24 @@ public LookupDiscovery(String[] groups, Configuration config)\n \t    constraints.getConstraints(\n \t\tDiscoveryConstraints.unicastDiscoveryMethod);\n \n-        /* Task manager */\n-        TaskManager taskManager;\n+//        /* Task manager */\n+//        TaskManager taskManager;\n+//        try {\n+//            taskManager = (TaskManager)config.getEntry(COMPONENT_NAME,\n+//\t\t\t\t\t\t       \"taskManager\",\n+//\t\t\t\t\t\t       TaskManager.class);\n+//        } catch(NoSuchEntryException e) { /* use default */\n+//            taskManager = new TaskManager(MAX_N_TASKS,(15*1000),1.0f);\n+//        }\n+        \n+        /* ExecutorService */\n+        ExecutorService executorServ;\n         try {\n-            taskManager = (TaskManager)config.getEntry(COMPONENT_NAME,\n-\t\t\t\t\t\t       \"taskManager\",\n-\t\t\t\t\t\t       TaskManager.class);\n-        } catch(NoSuchEntryException e) { /* use default */\n-            taskManager = new TaskManager(MAX_N_TASKS,(15*1000),1.0f);\n+            executorServ = (ExecutorService) config.getEntry(COMPONENT_NAME, \"executorService\", ExecutorService.class);\n+        } catch (NoSuchEntryException e) { /* use default */\n+            executorServ = Executors.newFixedThreadPool(MAX_N_TASKS);\n         }\n-        this.taskManager = taskManager;\n+        this.executor = executorServ;\n \n         /* Multicast request-related configuration items */\n         multicastRequestMax\n@@ -2895,27 +2896,28 @@ public Object run() throws RemoteException {\n      *  members of any of the groups to discover, and discard those registrars\n      *  that are no longer members of any of those groups.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     private void maybeDiscardRegistrars() {\n \tsynchronized (registrars) {\n-            HashMap groupsMap = new HashMap(registrars.size());\n-\t    for(Iterator iter=registrars.values().iterator();iter.hasNext(); ){\n-\t\tUnicastResponse ent = (UnicastResponse)iter.next();\n+            Map<ServiceRegistrar,String[]> groupsMap = new HashMap<ServiceRegistrar,String[]>(registrars.size());\n+\t    for(Iterator<UnicastResponse> iter=registrars.values().iterator();iter.hasNext(); ){\n+\t\tUnicastResponse ent = iter.next();\n \t\tif(!groupsOverlap(ent.getGroups())) { // not interested anymore\n                     groupsMap.put(ent.getRegistrar(),ent.getGroups());\n                     regInfo.remove(ent.getRegistrar().getServiceID());\n \t\t    iter.remove(); // remove (srvcID,response) mapping\n \t\t}//endif\n \t    }//end loop\n             if( !groupsMap.isEmpty() && !listeners.isEmpty() ) {\n-\t\taddNotify((ArrayList)listeners.clone(), groupsMap, DISCARDED);\n+\t\taddNotify((ArrayList<DiscoveryListener>)listeners.clone(), groupsMap, DISCARDED);\n \t    }//endif\n \t}//end sync\n     }//end maybeDiscardRegistrars\n \n     /**\n      * Add a notification task to the pending queue, and wake up the Notifier.\n      */\n-    private void addNotify(ArrayList notifies, Map groupsMap, int eventType) {\n+    private void addNotify(List<DiscoveryListener> notifies, Map<ServiceRegistrar,String[]> groupsMap, int eventType) {\n \tsynchronized (pendingNotifies) {\n \t    pendingNotifies.addLast(new NotifyTask(notifies,\n                                                    groupsMap,\n@@ -2969,12 +2971,12 @@ public Object run() {\n      *  closes all associated sockets.\n      */ \n     private void terminateTaskMgr() {\n-        synchronized(taskManager) {\n-            /* Remove all pending tasks */\n-            ArrayList pendingTasks = taskManager.getPending();\n-            for(int i=0;i<pendingTasks.size();i++) {\n-                taskManager.remove((TaskManager.Task)pendingTasks.get(i));\n-            }//end loop\n+        executor.shutdownNow();\n+        try {\n+            executor.awaitTermination(10L, TimeUnit.SECONDS);\n+        } catch (InterruptedException ex) {\n+            Thread.currentThread().interrupt();\n+        }\n             /* Clear pendingDiscoveries and close all associated sockets */\n             synchronized (pendingDiscoveries) {\n                 for(Iterator iter = pendingDiscoveries.iterator();\n@@ -2989,9 +2991,6 @@ private void terminateTaskMgr() {\n                     }//endif\n                 }//end loop\n             }//end sync\n-            /* Interrupt active TaskThreads, prepare the taskManager for GC. */\n-            taskManager.terminate();\n-        }//end sync(taskManager)\n         synchronized(pendingNotifies) {\n             pendingNotifies.clear();\n         }//end sync\n@@ -3051,7 +3050,7 @@ private void maybeSendEvent(UnicastResponse response, String[] newGroups) {\n \t    // Other events may have occured to registrars while we were\n \t    // making our remote call.\n \t    UnicastResponse resp =\n-\t\t(UnicastResponse) registrars.get(reg.getServiceID());\n+\t\tregistrars.get(reg.getServiceID());\n \t    if (resp == null) {\n \t\t// The registrar was discarded in the meantime. Oh well.\n \t\treturn;\n@@ -3147,8 +3146,7 @@ private void sendDiscarded(ServiceRegistrar reg, String[] curGroups) {\n      */\n     private void sendChanged(ServiceRegistrar reg, String[] curGroups) {\n         /* replace old groups with new; prevents repeated changed events */\n-        UnicastResponse resp = \n-                   (UnicastResponse)registrars.get(reg.getServiceID());\n+        UnicastResponse resp = registrars.get(reg.getServiceID());\n \tregistrars.put(reg.getServiceID(),\n \t\t       new UnicastResponse(resp.getHost(),\n \t\t\t\t\t   resp.getPort(),\n@@ -3242,8 +3240,8 @@ private Map deepCopy(HashMap groupsMap) {\n      *   @return <code>Map</code> instance containing a single mapping from\n      *           a given registrar to its current member groups\n      */\n-    private Map mapRegToGroups(ServiceRegistrar reg, String[] curGroups) {\n-        HashMap groupsMap = new HashMap(1);\n+    private Map<ServiceRegistrar,String[]> mapRegToGroups(ServiceRegistrar reg, String[] curGroups) {\n+        Map<ServiceRegistrar,String[]> groupsMap = new HashMap<ServiceRegistrar,String[]>(1);\n         groupsMap.put(reg,curGroups);\n         return groupsMap;\n     }//end mapRegToGroups\n@@ -3363,11 +3361,11 @@ public Object run() {\n \t    new DatagramPacket[packets.size()]);\n     }\n     \n-    private void restoreContextAddTask(final TaskManager.Task t) {\n+    private void restoreContextAddTask(final Runnable t) {\n \tAccessController.doPrivileged(\n \t    securityContext.wrap(new PrivilegedAction() {\n \t\tpublic Object run() {\n-\t\t    taskManager.add(t);\n+                    executor.execute(t);\n \t\t    return null;\n \t\t    }\n \t\t}),\n@@ -3384,7 +3382,7 @@ public Object run() {\n \t\t\t    (long) (Math.random() * unicastDelayRange),\n \t\t\t    new Runnable() {\n \t\t\t\tpublic void run() {\n-\t\t\t\t    taskManager.add(t);\n+                                    executor.execute(t);\n \t\t\t\t}\n \t\t\t    }\n \t\t\t);\n@@ -3404,13 +3402,12 @@ public void run() {\n \tthrows IOException, ClassNotFoundException\n     {\n \ttry {\n-\t    return (UnicastResponse) AccessController.doPrivileged(\n-\t\tsecurityContext.wrap(new PrivilegedExceptionAction() {\n-\t\t    public Object run() throws Exception {\n+\t    return AccessController.doPrivileged(\n+\t\tsecurityContext.wrap(new PrivilegedExceptionAction<UnicastResponse>() {\n+\t\t    public UnicastResponse run() throws Exception {\n \t\t\treturn disco.doUnicastDiscovery(\n \t\t\t    socket, \n-\t\t\t    unicastDiscoveryConstraints.\n-\t\t\t\tgetUnfulfilledConstraints(),\n+\t\t\t    unicastDiscoveryConstraints.getUnfulfilledConstraints(),\n \t\t\t    null,\n \t\t\t    null,\n \t\t\t    null);\n@@ -3462,11 +3459,25 @@ private Discovery getDiscovery(int version)\n      * class as values.\n      */\n     private static class AnnouncementInfo {\n-\tprivate long tStamp;\n-\tprivate long seqNum;\n+\tprivate final long tStamp;\n+\tprivate final long seqNum;\n \tprivate AnnouncementInfo(long tStamp, long seqNum) {\n \t    this.tStamp = tStamp;\n \t    this.seqNum = seqNum;\n \t}\n+\n+        /**\n+         * @return the tStamp\n+         */\n+        long gettStamp() {\n+            return tStamp;\n+        }\n+\n+        /**\n+         * @return the seqNum\n+         */\n+        long getSeqNum() {\n+            return seqNum;\n+        }\n     }\n }//end class LookupDiscovery"
            }
        ]
    }
]
