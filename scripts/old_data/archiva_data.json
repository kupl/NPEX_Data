[
    {
        "commit": "https://github.com/apache/archiva/commit/6abccf351093647c55212e5412188683ed2c9832",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/a015600d48b6b64121bb5e857152ded797e1a2eb",
        "message": "avoid npe\n\nSigned-off-by: olivier lamy <olamy@apache.org>",
        "bug_id": "archiva_1",
        "file": [
            {
                "sha": "9d8a114b3ba1acb56b387a1a9fc5c73a0a1395b5",
                "filename": "archiva-modules/archiva-web/archiva-rest/archiva-rest-api/src/enunciate/archiva.fmt",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/archiva/blob/6abccf351093647c55212e5412188683ed2c9832/archiva-modules/archiva-web/archiva-rest/archiva-rest-api/src/enunciate/archiva.fmt",
                "raw_url": "https://github.com/apache/archiva/raw/6abccf351093647c55212e5412188683ed2c9832/archiva-modules/archiva-web/archiva-rest/archiva-rest-api/src/enunciate/archiva.fmt",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-rest/archiva-rest-api/src/enunciate/archiva.fmt?ref=6abccf351093647c55212e5412188683ed2c9832",
                "patch": "@@ -431,7 +431,7 @@ limitations under the License.\n       <ul>\n       [#list resourceGroup.resources?sort_by(\"path\") as resource]\n [#list resource.methods as method]\n-<li><a href=\"#${method.slug}\">${apiRelativePath}${resourceGroup.contextPath}${resource.path}</a></li>\n+        <li><a href=\"#${method.slug}\">${apiRelativePath}${resourceGroup.contextPath!\"\"}${resource.path}</a></li>\n [/#list]\n       [/#list]\n       </ul>\n@@ -452,7 +452,7 @@ limitations under the License.\n         [#list resource.methods as method]\n \n       <div id=\"${method.slug}\">\n-        <h2>${method.label} <small>${resource.path} <a href=\"${apiRelativePath}${resourceGroup.contextPath}${resource.path}\" class=\"glyphicon glyphicon-new-window\" target=\"_blank\"></a></small></h2>\n+        <h2>${method.label} <small>${resource.path} <a href=\"${apiRelativePath}${resourceGroup.contextPath!\"\"}${resource.path}\" class=\"glyphicon glyphicon-new-window\" target=\"_blank\"></a></small></h2>\n           [#if resourceGroup.deprecated?? || method.deprecated??]\n \n         <div class=\"alert alert-danger\">This method has been deprecated. [#if method.deprecated??] ${method.deprecated!\"\"}[#else] ${resource.deprecated!\"\"}[/#if]</div>\n@@ -934,4 +934,4 @@ limitations under the License.\n   [#else]\n ${metaValue}\n   [/#if]\n-[/#macro]\n\\ No newline at end of file\n+[/#macro]"
            },
            {
                "sha": "e1f2d8430441111b8c8dd1d5d6952907e2997af3",
                "filename": "archiva-modules/archiva-web/archiva-web-common/src/enunciate/archiva.fmt",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/archiva/blob/6abccf351093647c55212e5412188683ed2c9832/archiva-modules/archiva-web/archiva-web-common/src/enunciate/archiva.fmt",
                "raw_url": "https://github.com/apache/archiva/raw/6abccf351093647c55212e5412188683ed2c9832/archiva-modules/archiva-web/archiva-web-common/src/enunciate/archiva.fmt",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-web-common/src/enunciate/archiva.fmt?ref=6abccf351093647c55212e5412188683ed2c9832",
                "patch": "@@ -431,7 +431,7 @@ limitations under the License.\n       <ul>\n       [#list resourceGroup.resources?sort_by(\"path\") as resource]\n [#list resource.methods as method]\n-<li><a href=\"#${method.slug}\">${apiRelativePath}${resourceGroup.contextPath}${resource.path}</a></li>\n+<li><a href=\"#${method.slug}\">${apiRelativePath}${resourceGroup.contextPath!\"\"}${resource.path}</a></li>\n [/#list]\n       [/#list]\n       </ul>\n@@ -452,7 +452,7 @@ limitations under the License.\n         [#list resource.methods as method]\n \n       <div id=\"${method.slug}\">\n-        <h2>${method.label} <small>${resource.path} <a href=\"${apiRelativePath}${resourceGroup.contextPath}${resource.path}\" class=\"glyphicon glyphicon-new-window\" target=\"_blank\"></a></small></h2>\n+        <h2>${method.label} <small>${resource.path} <a href=\"${apiRelativePath}${resourceGroup.contextPath!\"\"}${resource.path}\" class=\"glyphicon glyphicon-new-window\" target=\"_blank\"></a></small></h2>\n           [#if resourceGroup.deprecated?? || method.deprecated??]\n \n         <div class=\"alert alert-danger\">This method has been deprecated. [#if method.deprecated??] ${method.deprecated!\"\"}[#else] ${resource.deprecated!\"\"}[/#if]</div>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/723cf8b2ee8302edc28e2ee8b5eead4750fd50e3",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/5bc8ad7de352acb025fefb2e39967abf94163b3b",
        "message": "simplify section null checking, and guard against NPEs",
        "bug_id": "archiva_2",
        "file": [
            {
                "sha": "f37171afa236d30c30c6693c6d2a9205b6001479",
                "filename": "archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/archiva/configuration/DefaultArchivaConfiguration.java",
                "status": "modified",
                "additions": 36,
                "deletions": 31,
                "changes": 67,
                "blob_url": "https://github.com/apache/archiva/blob/723cf8b2ee8302edc28e2ee8b5eead4750fd50e3/archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/archiva/configuration/DefaultArchivaConfiguration.java",
                "raw_url": "https://github.com/apache/archiva/raw/723cf8b2ee8302edc28e2ee8b5eead4750fd50e3/archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/archiva/configuration/DefaultArchivaConfiguration.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/archiva/configuration/DefaultArchivaConfiguration.java?ref=723cf8b2ee8302edc28e2ee8b5eead4750fd50e3",
                "patch": "@@ -489,45 +489,50 @@ else if ( baseSection != null )\n         escapeCronExpressions( configuration );\n \n         // [MRM-661] Due to a bug in the modello registry writer, we need to take these out by hand. They'll be put back by the writer.\n-        if ( configuration.getManagedRepositories().isEmpty() && section != null )\n-        {\n-            section.removeSubset( \"managedRepositories\" );\n-        }\n-        if ( configuration.getRemoteRepositories().isEmpty() && section != null )\n+        if ( section != null )\n         {\n-            section.removeSubset( \"remoteRepositories\" );\n+            if ( configuration.getManagedRepositories().isEmpty() )\n+            {\n+                section.removeSubset( \"managedRepositories\" );\n+            }\n+            if ( configuration.getRemoteRepositories().isEmpty() )\n+            {\n+                section.removeSubset( \"remoteRepositories\" );\n \n-        }\n-        if ( configuration.getProxyConnectors().isEmpty() && section != null )\n-        {\n-            section.removeSubset( \"proxyConnectors\" );\n-        }\n-        if ( configuration.getNetworkProxies().isEmpty() && section != null )\n-        {\n-            section.removeSubset( \"networkProxies\" );\n-        }\n-        if ( configuration.getLegacyArtifactPaths().isEmpty() && section != null )\n-        {\n-            section.removeSubset( \"legacyArtifactPaths\" );\n-        }\n-        if ( configuration.getRepositoryGroups().isEmpty() && section != null )\n-        {\n-            section.removeSubset( \"repositoryGroups\" );\n-        }\n-        if ( configuration.getRepositoryScanning() != null )\n-        {\n-            if ( configuration.getRepositoryScanning().getKnownContentConsumers().isEmpty() && section != null )\n+            }\n+            if ( configuration.getProxyConnectors().isEmpty() )\n+            {\n+                section.removeSubset( \"proxyConnectors\" );\n+            }\n+            if ( configuration.getNetworkProxies().isEmpty() )\n+            {\n+                section.removeSubset( \"networkProxies\" );\n+            }\n+            if ( configuration.getLegacyArtifactPaths().isEmpty() )\n+            {\n+                section.removeSubset( \"legacyArtifactPaths\" );\n+            }\n+            if ( configuration.getRepositoryGroups().isEmpty() )\n             {\n-                section.removeSubset( \"repositoryScanning.knownContentConsumers\" );\n+                section.removeSubset( \"repositoryGroups\" );\n             }\n-            if ( configuration.getRepositoryScanning().getInvalidContentConsumers().isEmpty() && section != null )\n+            if ( configuration.getRepositoryScanning() != null )\n             {\n-                section.removeSubset( \"repositoryScanning.invalidContentConsumers\" );\n+                if ( configuration.getRepositoryScanning().getKnownContentConsumers().isEmpty() )\n+                {\n+                    section.removeSubset( \"repositoryScanning.knownContentConsumers\" );\n+                }\n+                if ( configuration.getRepositoryScanning().getInvalidContentConsumers().isEmpty() )\n+                {\n+                    section.removeSubset( \"repositoryScanning.invalidContentConsumers\" );\n+                }\n             }\n+\n+            new ConfigurationRegistryWriter().write( configuration, section );\n+            section.save();\n         }\n \n-        new ConfigurationRegistryWriter().write( configuration, section );\n-        section.save();\n+\n \n         this.configuration = unescapeExpressions( configuration );\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/47b437abc9a13ce91d2ea0a0c15fe463938dfc88",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/15f58a9233564f799307364957d337aabca56b6d",
        "message": "MRM-1138 - Fix java.lang.NullPointerException: configuration can not be null on startup\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@753121 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_3",
        "file": [
            {
                "sha": "cb00de9a88694ab60c8cbb3442da60fed5e765dc",
                "filename": "archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultArchivaConfiguration.java",
                "status": "modified",
                "additions": 8,
                "deletions": 3,
                "changes": 11,
                "blob_url": "https://github.com/apache/archiva/blob/47b437abc9a13ce91d2ea0a0c15fe463938dfc88/archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultArchivaConfiguration.java",
                "raw_url": "https://github.com/apache/archiva/raw/47b437abc9a13ce91d2ea0a0c15fe463938dfc88/archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultArchivaConfiguration.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultArchivaConfiguration.java?ref=47b437abc9a13ce91d2ea0a0c15fe463938dfc88",
                "patch": "@@ -138,9 +138,14 @@\n      */\n     private boolean isConfigurationDefaulted = false;\n \n-    private static final String KEY = \"org.apache.maven.archiva\";   \n+    private static final String KEY = \"org.apache.maven.archiva\";\n \n-    public synchronized Configuration getConfiguration()\n+    public Configuration getConfiguration()\n+    {\n+        return loadConfiguration();\n+    }\n+\n+    private synchronized Configuration loadConfiguration()\n     {\n         if ( configuration == null )\n         {\n@@ -642,13 +647,13 @@ public void initialize()\n             expressionEvaluator.addExpressionSource( new SystemPropertyExpressionSource() );\n             userConfigFilename = expressionEvaluator.expand( userConfigFilename );\n             altConfigFilename = expressionEvaluator.expand( altConfigFilename );\n+            loadConfiguration();\n         }\n         catch ( EvaluatorException e )\n         {\n             throw new InitializationException( \"Unable to evaluate expressions found in \"\n                 + \"userConfigFilename or altConfigFilename.\" );\n         }\n-\n         registry.addChangeListener( this );\n     }\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/323cbb75583afb4b6b1cc2a56fac410e99632659",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/f4e86b1e914deee86d5187f520d2c8c0a418c987",
        "message": "MRM-1138 - Fix java.lang.NullPointerException: configuration can not be null on startup\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@753110 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_4",
        "file": [
            {
                "sha": "41e17868a2df0a3e7b8fc3387aa67a8313224294",
                "filename": "archiva-modules/archiva-web/archiva-webapp/pom.xml",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/323cbb75583afb4b6b1cc2a56fac410e99632659/archiva-modules/archiva-web/archiva-webapp/pom.xml",
                "raw_url": "https://github.com/apache/archiva/raw/323cbb75583afb4b6b1cc2a56fac410e99632659/archiva-modules/archiva-web/archiva-webapp/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/pom.xml?ref=323cbb75583afb4b6b1cc2a56fac410e99632659",
                "patch": "@@ -1,4 +1,4 @@\n-<xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!--\n   ~ Licensed to the Apache Software Foundation (ASF) under one\n   ~ or more contributor license agreements.  See the NOTICE file"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/f4e86b1e914deee86d5187f520d2c8c0a418c987",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/6b7f9f4ad8bf8f4277ce00ac565ae73c15f38647",
        "message": "MRM-1138 - Fix java.lang.NullPointerException: configuration can not be null on startup\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@753109 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_5",
        "file": [
            {
                "sha": "fba1faee7909c3bb481786a6cdd9949c7c0eaceb",
                "filename": "archiva-modules/archiva-web/archiva-webapp/pom.xml",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/f4e86b1e914deee86d5187f520d2c8c0a418c987/archiva-modules/archiva-web/archiva-webapp/pom.xml",
                "raw_url": "https://github.com/apache/archiva/raw/f4e86b1e914deee86d5187f520d2c8c0a418c987/archiva-modules/archiva-web/archiva-webapp/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/pom.xml?ref=f4e86b1e914deee86d5187f520d2c8c0a418c987",
                "patch": "@@ -1,4 +1,4 @@\n-xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!--\n   ~ Licensed to the Apache Software Foundation (ASF) under one\n   ~ or more contributor license agreements.  See the NOTICE file"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/6b7f9f4ad8bf8f4277ce00ac565ae73c15f38647",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/5bc40b61814ee987c4411f2cc16ea466085c5b0e",
        "message": "MRM-1138 - Fix java.lang.NullPointerException: configuration can not be null on startup\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@753108 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_6",
        "file": [
            {
                "sha": "9f650e114c3b3f3bfa9724570c4dab6020055f59",
                "filename": "archiva-modules/archiva-web/archiva-webapp/pom.xml",
                "status": "modified",
                "additions": 14,
                "deletions": 20,
                "changes": 34,
                "blob_url": "https://github.com/apache/archiva/blob/6b7f9f4ad8bf8f4277ce00ac565ae73c15f38647/archiva-modules/archiva-web/archiva-webapp/pom.xml",
                "raw_url": "https://github.com/apache/archiva/raw/6b7f9f4ad8bf8f4277ce00ac565ae73c15f38647/archiva-modules/archiva-web/archiva-webapp/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/pom.xml?ref=6b7f9f4ad8bf8f4277ce00ac565ae73c15f38647",
                "patch": "@@ -1,4 +1,4 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!--\n   ~ Licensed to the Apache Software Foundation (ASF) under one\n   ~ or more contributor license agreements.  See the NOTICE file\n@@ -356,6 +356,19 @@\n               </tasks>\n             </configuration>\n           </execution>\n+          <execution>\n+            <phase>generate-resources</phase>\n+            <goals>\n+              <goal>run</goal>\n+            </goals>\n+            <configuration>\n+              <tasks>\n+                <copy todir=\"${basedir}/appserver-base\">\n+                  <fileset dir=\"src/appserver-base\" />\n+                </copy>\n+              </tasks>\n+            </configuration>\n+          </execution>\n         </executions>\n       </plugin>\n       <plugin>\n@@ -459,25 +472,6 @@\n           </roleDefaults>\n         </configuration>\n       </plugin>\n-      <plugin>\n-        <artifactId>maven-antrun-plugin</artifactId>\n-        <version>1.1</version>\n-        <executions>\n-          <execution>\n-            <phase>generate-resources</phase>\n-            <goals>\n-              <goal>run</goal>\n-            </goals>\n-            <configuration>\n-              <tasks>\n-                <copy todir=\"${basedir}/appserver-base\">\n-                  <fileset dir=\"src/appserver-base\" />\n-                </copy>\n-              </tasks>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n     </plugins>\n   </build>\n   <profiles>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/c6afb274c0d0680c35e041531b130def0e2da998",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/ba1c2854a0d44df1cc45084b25b4630ce9641d63",
        "message": "add NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1580689 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_7",
        "file": [
            {
                "sha": "6eda35d5ef677f204ae098c0e4c7fb168c775cb1",
                "filename": "archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "status": "modified",
                "additions": 12,
                "deletions": 4,
                "changes": 16,
                "blob_url": "https://github.com/apache/archiva/blob/c6afb274c0d0680c35e041531b130def0e2da998/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "raw_url": "https://github.com/apache/archiva/raw/c6afb274c0d0680c35e041531b130def0e2da998/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java?ref=c6afb274c0d0680c35e041531b130def0e2da998",
                "patch": "@@ -844,11 +844,19 @@ public void updateProjectVersion( String repositoryId, String namespaceId, Strin\n             updater.setString( \"repositoryName\", repositoryId );\n             updater.setString( \"namespaceId\", namespaceId );\n             updater.setString( \"id\", versionMetadata.getVersion() );\n-            updater.setString( \"description\", versionMetadata.getDescription() );\n-            updater.setString( \"name\", versionMetadata.getName() );\n+            if ( StringUtils.isNotEmpty( versionMetadata.getDescription() ) )\n+            {\n+                updater.setString( \"description\", versionMetadata.getDescription() );\n+            }\n+            if ( StringUtils.isNotEmpty( versionMetadata.getName() ) )\n+            {\n+                updater.setString( \"name\", versionMetadata.getName() );\n+            }\n             updater.setString( \"incomplete\", Boolean.toString( versionMetadata.isIncomplete() ) );\n-            updater.setString( \"url\", versionMetadata.getUrl() );\n-\n+            if ( StringUtils.isNotEmpty( versionMetadata.getUrl() ) )\n+            {\n+                updater.setString( \"url\", versionMetadata.getUrl() );\n+            }\n             projectVersionMetadataModelTemplate.update( updater );\n \n         }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/86ad13939a5a2ec9b37ec3e278baaba9d28a8e4a",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/01b3328e2b8ce6de4ec017049143f6882372dec4",
        "message": "NPE check!\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1579885 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_8",
        "file": [
            {
                "sha": "a5c9e3c51a308868a30f4ad05f188469e4458fa6",
                "filename": "archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "status": "modified",
                "additions": 112,
                "deletions": 61,
                "changes": 173,
                "blob_url": "https://github.com/apache/archiva/blob/86ad13939a5a2ec9b37ec3e278baaba9d28a8e4a/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "raw_url": "https://github.com/apache/archiva/raw/86ad13939a5a2ec9b37ec3e278baaba9d28a8e4a/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java?ref=86ad13939a5a2ec9b37ec3e278baaba9d28a8e4a",
                "patch": "@@ -19,8 +19,6 @@\n  * under the License.\n  */\n \n-import me.prettyprint.cassandra.model.CqlQuery;\n-import me.prettyprint.cassandra.model.CqlRows;\n import me.prettyprint.cassandra.serializers.LongSerializer;\n import me.prettyprint.cassandra.serializers.StringSerializer;\n import me.prettyprint.cassandra.service.template.ColumnFamilyTemplate;\n@@ -33,7 +31,9 @@\n import me.prettyprint.hector.api.exceptions.HInvalidRequestException;\n import me.prettyprint.hector.api.factory.HFactory;\n import me.prettyprint.hector.api.mutation.MutationResult;\n+import me.prettyprint.hector.api.mutation.Mutator;\n import me.prettyprint.hector.api.query.QueryResult;\n+import me.prettyprint.hector.api.query.RangeSlicesQuery;\n import org.apache.archiva.configuration.ArchivaConfiguration;\n import org.apache.archiva.metadata.model.ArtifactMetadata;\n import org.apache.archiva.metadata.model.FacetedMetadata;\n@@ -839,34 +839,45 @@ public void updateProjectVersion( String repositoryId, String namespaceId, Strin\n         if ( creation )\n         {\n             String cf = cassandraArchivaManager.getProjectFamilyName();\n-            projectVersionMetadataModelTemplate.createMutator()\n+            Mutator<String> mutator = projectVersionMetadataModelTemplate.createMutator()\n                 //  values\n                 .addInsertion( key, //\n                                cf, //\n-                               CassandraUtils.column( \"projectId\", projectId ) ) //\n+                               column( \"projectId\", projectId ) ) //\n                 .addInsertion( key, //\n                                cf, //\n-                               CassandraUtils.column( \"repositoryName\", repositoryId ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"namespaceId\", namespaceId ) )//\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"id\", versionMetadata.getVersion() ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"description\", versionMetadata.getDescription() ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"name\", versionMetadata.getName() ) ) //\n+                               column( \"repositoryName\", repositoryId ) ) //\n                 .addInsertion( key, //\n                                cf, //\n-                               CassandraUtils.column( \"incomplete\", Boolean.toString( versionMetadata.isIncomplete() ) )\n-                ) //\n+                               column( \"namespaceId\", namespaceId ) )//\n                 .addInsertion( key, //\n                                cf, //\n-                               CassandraUtils.column( \"url\", versionMetadata.getUrl() ) ) //\n-                .execute();\n+                               column( \"id\", versionMetadata.getVersion() ) ); //\n+            if ( versionMetadata.getDescription() != null )\n+            {\n+                mutator = mutator.addInsertion( key, //\n+                                                cf, //\n+                                                column( \"description\", versionMetadata.getDescription() ) );\n+            }\n+\n+            if ( versionMetadata.getName() != null )\n+            {\n+                mutator = mutator.addInsertion( key, //\n+                                                cf, //\n+                                                column( \"name\", versionMetadata.getName() ) );\n+            }\n+            mutator = mutator.addInsertion( key, //\n+                                            cf, //\n+                                            column( \"incomplete\", Boolean.toString( versionMetadata.isIncomplete() ) )\n+            );\n+            if ( versionMetadata.getUrl() != null )\n+            {\n+                mutator = mutator.addInsertion( key, //\n+                                                cf, //\n+                                                column( \"url\", versionMetadata.getUrl() ) );\n+            }\n+\n+            mutator.execute();\n         }\n         else\n         {\n@@ -1518,59 +1529,57 @@ public void removeMetadataFacet( final String repositoryId, final String facetId\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n \n-        // FIXME cql query to filter in repositoryName column\n-        /*\n-        QueryResult<OrderedRows<String, String, Long>> result = HFactory //\n+        RangeSlicesQuery<String, String, Long> query = HFactory //\n             .createRangeSlicesQuery( keyspace, //\n                                      StringSerializer.get(), //\n                                      StringSerializer.get(), //\n                                      LongSerializer.get() ) //\n-\n             .setColumnFamily( cassandraArchivaManager.getArtifactMetadataModelFamilyName() ) //\n-            .setColumnNames( \"whenGathered\", \"repositoryName\" ) //\n-            .addGteExpression( \"whenGathered\", startTime.getTime() ) //\n-            .addLteExpression( \"whenGathered\", endTime.getTime() )\n-            .execute();\n-        */\n-        StringSerializer ss = StringSerializer.get();\n-        StringBuilder cqlQuery =\n-            new StringBuilder( \"select * from \" + cassandraArchivaManager.getArtifactMetadataModelFamilyName() );\n-        cqlQuery.append( \" where repositoryName = '\" + repositoryId + \"'\" );\n+            .setColumnNames( \"namespaceId\", \"size\", \"id\", \"fileLastModified\", \"md5\", \"project\", \"projectVersion\",\n+                             \"repositoryName\", \"version\", \"whenGathered\", \"sha1\" ); //\n+\n         if ( startTime != null )\n         {\n-            cqlQuery.append( \" and 'whenGathered' >= \" + startTime.getTime() );\n+            query = query.addGteExpression( \"whenGathered\", startTime.getTime() );\n         }\n-\n         if ( endTime != null )\n         {\n-            cqlQuery.append( \" and 'whenGathered' <= \" + endTime.getTime() );\n+            query = query.addLteExpression( \"whenGathered\", endTime.getTime() );\n         }\n-\n-        QueryResult<CqlRows<String, String, String>> result =\n-            new CqlQuery<String, String, String>( keyspace, ss, ss, ss ).setQuery( cqlQuery.toString() ).execute();\n+        QueryResult<OrderedRows<String, String, Long>> result = query.execute();\n \n         List<ArtifactMetadata> artifactMetadatas = new ArrayList<ArtifactMetadata>( result.get().getCount() );\n \n         LongSerializer ls = LongSerializer.get();\n+        StringSerializer ss = StringSerializer.get();\n \n-        for ( Row<String, String, String> row : result.get() )\n+        for ( Row<String, String, Long> row : result.get() )\n         {\n-            ColumnSlice<String, String> columnSlice = row.getColumnSlice();\n-            ArtifactMetadata artifactMetadata = new ArtifactMetadata();\n-            artifactMetadata.setNamespace( columnSlice.getColumnByName( \"namespaceId\" ).getValue() );\n-            artifactMetadata.setSize( ls.fromByteBuffer( columnSlice.getColumnByName( \"size\" ).getValueBytes() ) );\n-            artifactMetadata.setId( columnSlice.getColumnByName( \"id\" ).getValue() );\n-            artifactMetadata.setFileLastModified(\n-                ls.fromByteBuffer( columnSlice.getColumnByName( \"fileLastModified\" ).getValueBytes() ) );\n-            artifactMetadata.setMd5( columnSlice.getColumnByName( \"md5\" ).getValue() );\n-            artifactMetadata.setProject( columnSlice.getColumnByName( \"project\" ).getValue() );\n-            artifactMetadata.setProjectVersion( columnSlice.getColumnByName( \"projectVersion\" ).getValue() );\n-            artifactMetadata.setRepositoryId( columnSlice.getColumnByName( \"repositoryName\" ).getValue() );\n-            artifactMetadata.setSha1( columnSlice.getColumnByName( \"sha1\" ).getValue() );\n-            artifactMetadata.setVersion( columnSlice.getColumnByName( \"version\" ).getValue() );\n-            artifactMetadata.setWhenGathered(\n-                new Date( ls.fromByteBuffer( columnSlice.getColumnByName( \"whenGathered\" ).getValueBytes() ) ) );\n-            artifactMetadatas.add( artifactMetadata );\n+            ColumnSlice<String, Long> columnSlice = row.getColumnSlice();\n+            String repositoryName =\n+                ss.fromByteBuffer( columnSlice.getColumnByName( \"repositoryName\" ).getValueBytes() );\n+            if ( StringUtils.equals( repositoryName, repositoryId ) )\n+            {\n+                ArtifactMetadata artifactMetadata = new ArtifactMetadata();\n+                artifactMetadata.setNamespace(\n+                    ss.fromByteBuffer( columnSlice.getColumnByName( \"namespaceId\" ).getValueBytes() ) );\n+                artifactMetadata.setSize( ls.fromByteBuffer( columnSlice.getColumnByName( \"size\" ).getValueBytes() ) );\n+                artifactMetadata.setId( ss.fromByteBuffer( columnSlice.getColumnByName( \"id\" ).getValueBytes() ) );\n+                artifactMetadata.setFileLastModified(\n+                    ls.fromByteBuffer( columnSlice.getColumnByName( \"fileLastModified\" ).getValueBytes() ) );\n+                artifactMetadata.setMd5( ss.fromByteBuffer( columnSlice.getColumnByName( \"md5\" ).getValueBytes() ) );\n+                artifactMetadata.setProject(\n+                    ss.fromByteBuffer( columnSlice.getColumnByName( \"project\" ).getValueBytes() ) );\n+                artifactMetadata.setProjectVersion(\n+                    ss.fromByteBuffer( columnSlice.getColumnByName( \"projectVersion\" ).getValueBytes() ) );\n+                artifactMetadata.setRepositoryId( repositoryName );\n+                artifactMetadata.setSha1( ss.fromByteBuffer( columnSlice.getColumnByName( \"sha1\" ).getValueBytes() ) );\n+                artifactMetadata.setVersion(\n+                    ss.fromByteBuffer( columnSlice.getColumnByName( \"version\" ).getValueBytes() ) );\n+                artifactMetadata.setWhenGathered(\n+                    new Date( ls.fromByteBuffer( columnSlice.getColumnByName( \"whenGathered\" ).getValueBytes() ) ) );\n+                artifactMetadatas.add( artifactMetadata );\n+            }\n         }\n \n         return artifactMetadatas;\n@@ -1800,9 +1809,52 @@ public ProjectVersionMetadata getProjectVersion( final String repoId, final Stri\n                                                      final String projectId, final String projectVersion )\n         throws MetadataResolutionException\n     {\n-/*        String key = new ProjectVersionMetadataModel.KeyBuilder().withRepository( repoId ).withNamespace(\n+        String key = new ProjectVersionMetadataModel.KeyBuilder().withRepository( repoId ).withNamespace(\n             namespace ).withProjectId( projectId ).withId( projectVersion ).build();\n \n+        StringSerializer ss = StringSerializer.get();\n+\n+        QueryResult<OrderedRows<String, String, String>> result =\n+            HFactory.createRangeSlicesQuery( cassandraArchivaManager.getKeyspace(), ss, ss, ss ) //\n+                .setColumnFamily( cassandraArchivaManager.getProjectVersionMetadataModelFamilyName() ) //\n+                .setColumnNames( \"id\", \"description\", \"name\", \"namespaceId\", \"repositoryName\", \"incomplete\",\n+                                 \"projectId\", \"url\" ) //\n+                .addEqualsExpression( \"repositoryName\", repoId ) //\n+                .addEqualsExpression( \"namespaceId\", namespace ) //\n+                .addEqualsExpression( \"projectId\", projectId ) //\n+                .addEqualsExpression( \"id\", projectVersion ) //\n+                .execute();\n+        /*\n+        ColumnFamilyResult<String, String> columnFamilyResult =\n+            this.projectVersionMetadataModelTemplate.queryColumns( key, Arrays.asList( \"id\", \"description\", \"name\",\n+                                                                                       \"namespaceId\", \"repositoryName\",\n+                                                                                       \"incomplete\", \"projectId\",\n+                                                                                       \"url\" ) );\n+        if (!columnFamilyResult.hasResults())\n+        {\n+            return null;\n+        }*/\n+\n+        if (result.get().getCount() < 1)\n+        {\n+            return null;\n+        }\n+\n+        Row<String,String,String> row = result.get().getList().get( 0 );\n+\n+        ColumnSlice<String,String> columnSlice = row.getColumnSlice();\n+\n+        ProjectVersionMetadata projectVersionMetadata = new ProjectVersionMetadata();\n+        projectVersionMetadata.setId( columnSlice.getColumnByName( \"id\" ).getValue() );\n+        projectVersionMetadata.setDescription( columnSlice.getColumnByName( \"description\" ).getValue() );\n+        projectVersionMetadata.setName( columnSlice.getColumnByName( \"name\" ).getValue() );\n+\n+        projectVersionMetadata.setIncomplete( Boolean.parseBoolean( columnSlice.getColumnByName( \"incomplete\" ).getValue() ) );\n+\n+        projectVersionMetadata.setUrl( columnSlice.getColumnByName( \"url\" ).getValue() );\n+\n+        /*\n+\n         ProjectVersionMetadataModel projectVersionMetadataModel =\n             getProjectVersionMetadataModelEntityManager().get( key );\n \n@@ -1876,9 +1928,8 @@ public Boolean apply( MetadataFacetModel metadataFacetModel )\n                 }\n             }\n         }\n-\n-        return projectVersionMetadata;*/\n-        return null;\n+        */\n+        return projectVersionMetadata;\n     }\n \n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/66ed6cb4b0103fe9e9935f0ccd84fd833b2c09ec",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/52caa0198b6f95142300daa37122d6e5dbbf9399",
        "message": "prevent possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1551386 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_9",
        "file": [
            {
                "sha": "09008e2a72d5141e8811265f12d5803755c85955",
                "filename": "archiva-modules/archiva-base/archiva-filelock/src/main/java/org/apache/archiva/common/filelock/DefaultFileLockManager.java",
                "status": "modified",
                "additions": 8,
                "deletions": 3,
                "changes": 11,
                "blob_url": "https://github.com/apache/archiva/blob/66ed6cb4b0103fe9e9935f0ccd84fd833b2c09ec/archiva-modules/archiva-base/archiva-filelock/src/main/java/org/apache/archiva/common/filelock/DefaultFileLockManager.java",
                "raw_url": "https://github.com/apache/archiva/raw/66ed6cb4b0103fe9e9935f0ccd84fd833b2c09ec/archiva-modules/archiva-base/archiva-filelock/src/main/java/org/apache/archiva/common/filelock/DefaultFileLockManager.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-filelock/src/main/java/org/apache/archiva/common/filelock/DefaultFileLockManager.java?ref=66ed6cb4b0103fe9e9935f0ccd84fd833b2c09ec",
                "patch": "@@ -102,7 +102,10 @@ public Lock readFileLock( File file )\n             {\n                 // can happen if an other thread has deleted the file\n                 // close RandomAccessFile!!!\n-                closeQuietly( lock.getRandomAccessFile() );\n+                if ( lock != null )\n+                {\n+                    closeQuietly( lock.getRandomAccessFile() );\n+                }\n                 log.debug( \"read Lock skip: {} try to create file\", e.getMessage() );\n                 createNewFileQuietly( file );\n             }\n@@ -178,8 +181,10 @@ public Lock writeFileLock( File file )\n             {\n                 // can happen if an other thread has deleted the file\n                 // close RandomAccessFile!!!\n-                closeQuietly( lock.getRandomAccessFile() );\n-\n+                if ( lock != null )\n+                {\n+                    closeQuietly( lock.getRandomAccessFile() );\n+                }\n                 log.debug( \"write Lock skip: {} try to create file\", e.getMessage() );\n                 createNewFileQuietly( file );\n             }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/cd9cb8eb82c0891b426c16176312b711e9ec8c24",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/3d19a1d2d7efa535a670bcb8a6e1eae408feee90",
        "message": "prevent possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1446363 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_10",
        "file": [
            {
                "sha": "4a86bca09c076336e8b07d861cd0cf15a6c29d03",
                "filename": "archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-api/src/main/java/org/apache/archiva/admin/model/beans/PropertyEntry.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/archiva/blob/cd9cb8eb82c0891b426c16176312b711e9ec8c24/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-api/src/main/java/org/apache/archiva/admin/model/beans/PropertyEntry.java",
                "raw_url": "https://github.com/apache/archiva/raw/cd9cb8eb82c0891b426c16176312b711e9ec8c24/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-api/src/main/java/org/apache/archiva/admin/model/beans/PropertyEntry.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-api/src/main/java/org/apache/archiva/admin/model/beans/PropertyEntry.java?ref=cd9cb8eb82c0891b426c16176312b711e9ec8c24",
                "patch": "@@ -79,6 +79,10 @@ public String toString()\n \n     public int compareTo( PropertyEntry o )\n     {\n+        if (o == null || o.getKey() == null)\n+        {\n+            return 1;\n+        }\n         return this.key.compareTo( o.getKey() );\n     }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/e50dcce6e30779bcae08ab73a89d6255d6558abf",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/caa032403d08df69ee3faca32b7a8a945481820c",
        "message": "NPE free\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1436973 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_11",
        "file": [
            {
                "sha": "37a320a2fd36123d29b4d98a14b861b3291192b7",
                "filename": "archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/api/DefaultJavascriptLogger.java",
                "status": "modified",
                "additions": 25,
                "deletions": 2,
                "changes": 27,
                "blob_url": "https://github.com/apache/archiva/blob/e50dcce6e30779bcae08ab73a89d6255d6558abf/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/api/DefaultJavascriptLogger.java",
                "raw_url": "https://github.com/apache/archiva/raw/e50dcce6e30779bcae08ab73a89d6255d6558abf/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/api/DefaultJavascriptLogger.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/api/DefaultJavascriptLogger.java?ref=e50dcce6e30779bcae08ab73a89d6255d6558abf",
                "patch": "@@ -27,7 +27,7 @@\n  * @author Olivier Lamy\n  * @since 1.4-M4\n  */\n-@Service( \"javascriptLogger#default\" )\n+@Service(\"javascriptLogger#default\")\n public class DefaultJavascriptLogger\n     implements JavascriptLogger\n {\n@@ -37,7 +37,10 @@ public Boolean trace( JavascriptLog javascriptLog )\n     {\n         Logger toUse =\n             javascriptLog.getLoggerName() == null ? logger : LoggerFactory.getLogger( javascriptLog.getLoggerName() );\n-\n+        if ( javascriptLog.getMessage() == null )\n+        {\n+            return Boolean.TRUE;\n+        }\n         toUse.trace( javascriptLog.getMessage() );\n         return Boolean.TRUE;\n     }\n@@ -47,6 +50,11 @@ public Boolean debug( JavascriptLog javascriptLog )\n         Logger toUse =\n             javascriptLog.getLoggerName() == null ? logger : LoggerFactory.getLogger( javascriptLog.getLoggerName() );\n \n+        if ( javascriptLog.getMessage() == null )\n+        {\n+            return Boolean.TRUE;\n+        }\n+\n         toUse.debug( javascriptLog.getMessage() );\n         return Boolean.TRUE;\n     }\n@@ -56,6 +64,11 @@ public Boolean info( JavascriptLog javascriptLog )\n         Logger toUse =\n             javascriptLog.getLoggerName() == null ? logger : LoggerFactory.getLogger( javascriptLog.getLoggerName() );\n \n+        if ( javascriptLog.getMessage() == null )\n+        {\n+            return Boolean.TRUE;\n+        }\n+\n         toUse.info( javascriptLog.getMessage() );\n         return Boolean.TRUE;\n     }\n@@ -65,6 +78,11 @@ public Boolean warn( JavascriptLog javascriptLog )\n         Logger toUse =\n             javascriptLog.getLoggerName() == null ? logger : LoggerFactory.getLogger( javascriptLog.getLoggerName() );\n \n+        if ( javascriptLog.getMessage() == null )\n+        {\n+            return Boolean.TRUE;\n+        }\n+\n         toUse.warn( javascriptLog.getMessage() );\n         return Boolean.TRUE;\n     }\n@@ -74,6 +92,11 @@ public Boolean error( JavascriptLog javascriptLog )\n         Logger toUse =\n             javascriptLog.getLoggerName() == null ? logger : LoggerFactory.getLogger( javascriptLog.getLoggerName() );\n \n+        if ( javascriptLog.getMessage() == null )\n+        {\n+            return Boolean.TRUE;\n+        }\n+\n         toUse.error( javascriptLog.getMessage() );\n         return Boolean.TRUE;\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/ac4d4bb080af542f3da4bc2afb6ed5f2d3e064e6",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/93bca03337795dd8fc9fa1d86a42246ca9e72b0a",
        "message": "prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1425375 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_12",
        "file": [
            {
                "sha": "f8f83f3c4d206f2ed29abfb4ae16348dfbecc644",
                "filename": "archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/runtime/DefaultRedbackRuntimeConfigurationAdmin.java",
                "status": "modified",
                "additions": 9,
                "deletions": 0,
                "changes": 9,
                "blob_url": "https://github.com/apache/archiva/blob/ac4d4bb080af542f3da4bc2afb6ed5f2d3e064e6/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/runtime/DefaultRedbackRuntimeConfigurationAdmin.java",
                "raw_url": "https://github.com/apache/archiva/raw/ac4d4bb080af542f3da4bc2afb6ed5f2d3e064e6/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/runtime/DefaultRedbackRuntimeConfigurationAdmin.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/runtime/DefaultRedbackRuntimeConfigurationAdmin.java?ref=ac4d4bb080af542f3da4bc2afb6ed5f2d3e064e6",
                "patch": "@@ -226,10 +226,19 @@ private RedbackRuntimeConfiguration build(\n             new BeanReplicator().replicateBean( archivaRuntimeConfiguration,\n                                                 org.apache.archiva.configuration.RedbackRuntimeConfiguration.class );\n \n+        if ( archivaRuntimeConfiguration.getLdapConfiguration() == null )\n+        {\n+            archivaRuntimeConfiguration.setLdapConfiguration( new LdapConfiguration() );\n+        }\n         redbackRuntimeConfiguration.setLdapConfiguration(\n             new BeanReplicator().replicateBean( archivaRuntimeConfiguration.getLdapConfiguration(),\n                                                 org.apache.archiva.configuration.LdapConfiguration.class ) );\n \n+        if ( archivaRuntimeConfiguration.getUsersCacheConfiguration() == null )\n+        {\n+            archivaRuntimeConfiguration.setUsersCacheConfiguration( new CacheConfiguration() );\n+        }\n+\n         redbackRuntimeConfiguration.setUsersCacheConfiguration(\n             new BeanReplicator().replicateBean( archivaRuntimeConfiguration.getUsersCacheConfiguration(),\n                                                 org.apache.archiva.configuration.CacheConfiguration.class ) );"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/aaf625b9975985c150150f5f87e5ba53aea96bf6",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/1fa95137da3db790902f52edff1cb9282687612e",
        "message": "prevent npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1384832 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_13",
        "file": [
            {
                "sha": "93df992d6c4143017c56be89154f21e66a32e132",
                "filename": "archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/archiva/configuration/FileTypes.java",
                "status": "modified",
                "additions": 11,
                "deletions": 10,
                "changes": 21,
                "blob_url": "https://github.com/apache/archiva/blob/aaf625b9975985c150150f5f87e5ba53aea96bf6/archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/archiva/configuration/FileTypes.java",
                "raw_url": "https://github.com/apache/archiva/raw/aaf625b9975985c150150f5f87e5ba53aea96bf6/archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/archiva/configuration/FileTypes.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/archiva/configuration/FileTypes.java?ref=aaf625b9975985c150150f5f87e5ba53aea96bf6",
                "patch": "@@ -44,10 +44,8 @@\n \n /**\n  * FileTypes\n- *\n- *\n  */\n-@Service( \"fileTypes\" )\n+@Service (\"fileTypes\")\n public class FileTypes\n     implements RegistryListener\n {\n@@ -63,7 +61,7 @@\n      *\n      */\n     @Inject\n-    @Named( value = \"archivaConfiguration#default\" )\n+    @Named (value = \"archivaConfiguration#default\")\n     private ArchivaConfiguration archivaConfiguration;\n \n     /**\n@@ -108,14 +106,17 @@ public void setArchivaConfiguration( ArchivaConfiguration archivaConfiguration )\n     {\n         Configuration config = archivaConfiguration.getConfiguration();\n         Predicate selectedFiletype = new FiletypeSelectionPredicate( id );\n-        FileType filetype =\n-            (FileType) CollectionUtils.find( config.getRepositoryScanning().getFileTypes(), selectedFiletype );\n-\n-        if ( ( filetype != null ) && CollectionUtils.isNotEmpty( filetype.getPatterns() ) )\n+        RepositoryScanningConfiguration repositoryScanningConfiguration = config.getRepositoryScanning();\n+        if ( repositoryScanningConfiguration != null )\n         {\n-            return filetype.getPatterns();\n-        }\n+            FileType filetype =\n+                (FileType) CollectionUtils.find( config.getRepositoryScanning().getFileTypes(), selectedFiletype );\n \n+            if ( ( filetype != null ) && CollectionUtils.isNotEmpty( filetype.getPatterns() ) )\n+            {\n+                return filetype.getPatterns();\n+            }\n+        }\n         List<String> defaultPatterns = defaultTypeMap.get( id );\n \n         if ( CollectionUtils.isEmpty( defaultPatterns ) )"
            },
            {
                "sha": "4c5e3a56395c8ae3baade22ddf888aa23550affb",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/archiva/web/tags/DependencyTreeTest.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/aaf625b9975985c150150f5f87e5ba53aea96bf6/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/archiva/web/tags/DependencyTreeTest.java",
                "raw_url": "https://github.com/apache/archiva/raw/aaf625b9975985c150150f5f87e5ba53aea96bf6/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/archiva/web/tags/DependencyTreeTest.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/archiva/web/tags/DependencyTreeTest.java?ref=aaf625b9975985c150150f5f87e5ba53aea96bf6",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.archiva.configuration.ArchivaConfiguration;\n import org.apache.archiva.configuration.Configuration;\n import org.apache.archiva.configuration.ManagedRepositoryConfiguration;\n+import org.apache.archiva.configuration.RepositoryScanningConfiguration;\n import org.apache.archiva.metadata.model.ProjectVersionMetadata;\n import org.apache.archiva.metadata.repository.RepositorySession;\n import org.apache.archiva.test.utils.ArchivaSpringJUnit4ClassRunner;\n@@ -100,6 +101,7 @@ public void setUp()\n         configuration.addManagedRepository( repoConfig );\n \n         ArchivaConfiguration archivaConfiguration = applicationContext.getBean( ArchivaConfiguration.class );\n+        archivaConfiguration.getConfiguration().setRepositoryScanning( new RepositoryScanningConfiguration() );\n         archivaConfiguration.save( configuration );\n \n         TestMetadataResolver metadataResolver = applicationContext.getBean( TestMetadataResolver.class );"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/f31f36553560b16931149082b4ba724484877c0e",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/0af5a819d92981b42c6baba9324173c931bcf02d",
        "message": "prevent js npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1346613 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_14",
        "file": [
            {
                "sha": "13d048086349b597cc370043bdb64f297110080e",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/search.js",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/f31f36553560b16931149082b4ba724484877c0e/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/search.js",
                "raw_url": "https://github.com/apache/archiva/raw/f31f36553560b16931149082b4ba724484877c0e/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/search.js",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/search.js?ref=f31f36553560b16931149082b4ba724484877c0e",
                "patch": "@@ -895,7 +895,7 @@ define(\"search\",[\"jquery\",\"i18n\",\"jquery.tmpl\",\"choosen\",\"order!knockout\",\"knock\n       }\n       return projectVersionMetadata;\n     }\n-    return null;\n+    return new ProjectVersionMetadata();\n   }\n \n   MavenFacet=function(packaging,parent){"
            },
            {
                "sha": "35a0bf1ca9b5ff7f318ecacd526e78e9cb4f5cfe",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/search.html",
                "status": "modified",
                "additions": 16,
                "deletions": 10,
                "changes": 26,
                "blob_url": "https://github.com/apache/archiva/blob/f31f36553560b16931149082b4ba724484877c0e/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/search.html",
                "raw_url": "https://github.com/apache/archiva/raw/f31f36553560b16931149082b4ba724484877c0e/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/search.html",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/search.html?ref=f31f36553560b16931149082b4ba724484877c0e",
                "patch": "@@ -468,17 +468,23 @@ <h3>${$.i18n.prop('search.artifact.header')}</h3>\n                 </tr>\n                 <tr>\n                   <th>${$.i18n.prop('browse.artifact.packaging')}</th>\n-                  <td>${projectVersionMetadata.mavenFacet.packaging}</td>\n-                </tr>\n-                {{if projectVersionMetadata.mavenFacet.parent }}\n-                <tr>\n-                  <th>${$.i18n.prop('browse.artifact.parent')}</th>\n-                  <td>\n-                    <a href=\"#\" data-bind=\"click: displayParent\">\n-                    ${projectVersionMetadata.mavenFacet.parent.groupId}:${projectVersionMetadata.mavenFacet.parent.artifactId}:${projectVersionMetadata.mavenFacet.parent.version}\n-                    </a>\n-                  </td>\n+                  {{if projectVersionMetadata.mavenFacet}}\n+                    <td>${projectVersionMetadata.mavenFacet.packaging}</td>\n+                  {{else}}\n+                    <td></td>\n+                  {{/if}}\n                 </tr>\n+                {{if projectVersionMetadata.mavenFacet}}\n+                  {{if projectVersionMetadata.mavenFacet.parent }}\n+                  <tr>\n+                    <th>${$.i18n.prop('browse.artifact.parent')}</th>\n+                    <td>\n+                      <a href=\"#\" data-bind=\"click: displayParent\">\n+                      ${projectVersionMetadata.mavenFacet.parent.groupId}:${projectVersionMetadata.mavenFacet.parent.artifactId}:${projectVersionMetadata.mavenFacet.parent.version}\n+                      </a>\n+                    </td>\n+                  </tr>\n+                  {{/if}}\n                 {{/if}}\n               </tbody>\n             </table>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/096a4c0ed1d0d4e82c8ebf276554b2663d54cdec",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/1141aca7ec7a1d91616d03dcf4f94a35d62baeaf",
        "message": "prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1345396 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_15",
        "file": [
            {
                "sha": "0ad272528c3ec3212a24be39c8ae053095e8af13",
                "filename": "archiva-modules/plugins/metadata-store-jcr/src/main/java/org/apache/archiva/metadata/repository/jcr/JcrMetadataRepository.java",
                "status": "modified",
                "additions": 5,
                "deletions": 0,
                "changes": 5,
                "blob_url": "https://github.com/apache/archiva/blob/096a4c0ed1d0d4e82c8ebf276554b2663d54cdec/archiva-modules/plugins/metadata-store-jcr/src/main/java/org/apache/archiva/metadata/repository/jcr/JcrMetadataRepository.java",
                "raw_url": "https://github.com/apache/archiva/raw/096a4c0ed1d0d4e82c8ebf276554b2663d54cdec/archiva-modules/plugins/metadata-store-jcr/src/main/java/org/apache/archiva/metadata/repository/jcr/JcrMetadataRepository.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/plugins/metadata-store-jcr/src/main/java/org/apache/archiva/metadata/repository/jcr/JcrMetadataRepository.java?ref=096a4c0ed1d0d4e82c8ebf276554b2663d54cdec",
                "patch": "@@ -413,6 +413,11 @@ public MetadataFacet getMetadataFacet( String repositoryId, String facetId, Stri\n             Node root = getJcrSession().getRootNode();\n             Node node = root.getNode( getFacetPath( repositoryId, facetId, name ) );\n \n+            if ( metadataFacetFactories == null )\n+            {\n+                return metadataFacet;\n+            }\n+\n             MetadataFacetFactory metadataFacetFactory = metadataFacetFactories.get( facetId );\n             if ( metadataFacetFactory != null )\n             {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/2199b5c8c2dfd46c63466c9cbca05b6e65796b75",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/5de1d545e7d0da2b7353483d1e1de0c036964985",
        "message": "fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1244258 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_16",
        "file": [
            {
                "sha": "0f1c576b3db6cfb93a5aa719a0690e9802d34a41",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/DefaultRuntimeInfoService.java",
                "status": "modified",
                "additions": 0,
                "deletions": 1,
                "changes": 1,
                "blob_url": "https://github.com/apache/archiva/blob/2199b5c8c2dfd46c63466c9cbca05b6e65796b75/archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/DefaultRuntimeInfoService.java",
                "raw_url": "https://github.com/apache/archiva/raw/2199b5c8c2dfd46c63466c9cbca05b6e65796b75/archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/DefaultRuntimeInfoService.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/DefaultRuntimeInfoService.java?ref=2199b5c8c2dfd46c63466c9cbca05b6e65796b75",
                "patch": "@@ -49,7 +49,6 @@ public DefaultRuntimeInfoService( ArchivaRuntimeInfo archivaRuntimeInfo )\n         this.archivaRuntimeInfo = archivaRuntimeInfo;\n     }\n \n-    @Inject\n     public ApplicationRuntimeInfo getApplicationRuntimeInfo()\n     {\n         ApplicationRuntimeInfo applicationRuntimeInfo = new ApplicationRuntimeInfo();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/e96b05deb6d6d6110e319efbd3b50bbdfd15a4de",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/45038c7c568033c6b9caff3a277b0c022b395bf2",
        "message": "fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@506300 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_17",
        "file": [
            {
                "sha": "7c38f59cf99a3247000326a6f9d54fc0454c3cdc",
                "filename": "archiva-configuration/src/main/mdo/configuration.mdo",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/archiva/blob/e96b05deb6d6d6110e319efbd3b50bbdfd15a4de/archiva-configuration/src/main/mdo/configuration.mdo",
                "raw_url": "https://github.com/apache/archiva/raw/e96b05deb6d6d6110e319efbd3b50bbdfd15a4de/archiva-configuration/src/main/mdo/configuration.mdo",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-configuration/src/main/mdo/configuration.mdo?ref=e96b05deb6d6d6110e319efbd3b50bbdfd15a4de",
                "patch": "@@ -169,7 +169,7 @@\n         for ( java.util.Iterator i = getRepositories().iterator(); i.hasNext(); )\r\n         {\r\n             RepositoryConfiguration repository = (RepositoryConfiguration) i.next();\r\n-            if ( id.equals( repository.getId() ) )\r\n+            if ( id != null ? !id.equals( repository.getId() ) : repository.getId() != null )\r\n             {\r\n                 return repository;\r\n             }\r\n@@ -182,7 +182,7 @@\n         for ( java.util.Iterator i = getSyncedRepositories().iterator(); i.hasNext(); )\r\n         {\r\n             SyncedRepositoryConfiguration repository = (SyncedRepositoryConfiguration) i.next();\r\n-            if ( id.equals( repository.getId() ) )\r\n+            if ( id != null ? !id.equals( repository.getId() ) : repository.getId() != null )\r\n             {\r\n                 return repository;\r\n             }\r\n@@ -195,7 +195,7 @@\n         for ( java.util.Iterator i = getProxiedRepositories().iterator(); i.hasNext(); )\r\n         {\r\n             ProxiedRepositoryConfiguration repository = (ProxiedRepositoryConfiguration) i.next();\r\n-            if ( id.equals( repository.getId() ) )\r\n+            if ( id != null ? !id.equals( repository.getId() ) : repository.getId() != null )\r\n             {\r\n                 return repository;\r\n             }\r"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/45038c7c568033c6b9caff3a277b0c022b395bf2",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/3b6c681194134a87292c175e995f77c2c0c743a3",
        "message": "fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@506295 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_18",
        "file": [
            {
                "sha": "0372ce554d6e492141f736a51b7721cf563640ca",
                "filename": "archiva-configuration/src/main/mdo/configuration.mdo",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/45038c7c568033c6b9caff3a277b0c022b395bf2/archiva-configuration/src/main/mdo/configuration.mdo",
                "raw_url": "https://github.com/apache/archiva/raw/45038c7c568033c6b9caff3a277b0c022b395bf2/archiva-configuration/src/main/mdo/configuration.mdo",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-configuration/src/main/mdo/configuration.mdo?ref=45038c7c568033c6b9caff3a277b0c022b395bf2",
                "patch": "@@ -156,7 +156,7 @@\n         for ( java.util.Iterator i = getRepositories().iterator(); i.hasNext(); )\r\n         {\r\n             RepositoryConfiguration repository = (RepositoryConfiguration) i.next();\r\n-            if ( urlName.equals( repository.getUrlName() ) )\r\n+            if ( urlName != null ? !urlName.equals( repository.getUrlName() ) : repository.getUrlName() != null )\r\n             {\r\n                 return repository;\r\n             }\r"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/e1a18ba96ff546ebf8406e3e5db1718964c52c79",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/56384cdeab8ae8871e0d7efec1b0afff6a117eda",
        "message": "[MRM-467] 500 error when user requested the dependency tree for artifact.\nAdjusting to prevent NPE.\nRoot cause of NPE not addressed, see MRM-466 for details.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@565453 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_19",
        "file": [
            {
                "sha": "ede35a8f69ce6a0c0ec7544600d6dad42a7b5288",
                "filename": "archiva-scheduled/src/main/java/org/apache/maven/archiva/scheduled/DatabaseTaskJob.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/e1a18ba96ff546ebf8406e3e5db1718964c52c79/archiva-scheduled/src/main/java/org/apache/maven/archiva/scheduled/DatabaseTaskJob.java",
                "raw_url": "https://github.com/apache/archiva/raw/e1a18ba96ff546ebf8406e3e5db1718964c52c79/archiva-scheduled/src/main/java/org/apache/maven/archiva/scheduled/DatabaseTaskJob.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-scheduled/src/main/java/org/apache/maven/archiva/scheduled/DatabaseTaskJob.java?ref=e1a18ba96ff546ebf8406e3e5db1718964c52c79",
                "patch": "@@ -54,7 +54,7 @@ public void execute( JobExecutionContext context )\n         setJobDataMap( dataMap );\n \n         TaskQueue taskQueue = (TaskQueue) dataMap.get( TASK_QUEUE );\n-        String queuePolicy = dataMap.get( TASK_QUEUE_POLICY ).toString();\n+        String queuePolicy = (String) dataMap.get( TASK_QUEUE_POLICY );\n \n         ArchivaTask task = new DatabaseTask();\n         task.setName( context.getJobDetail().getName() );"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/ecbb16c6e28358024e46ec830552f796b034633a",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/df15038b49ac445ca5052a30e23e2aa4bab6e668",
        "message": "prevent NPE with testing first\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1487473 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_20",
        "file": [
            {
                "sha": "28b9b458f977d7ab396e6157b0a1b6cc89dc9855",
                "filename": "archiva-modules/metadata/metadata-repository-api/src/test/java/org/apache/archiva/metadata/repository/AbstractMetadataRepositoryTest.java",
                "status": "modified",
                "additions": 3,
                "deletions": 2,
                "changes": 5,
                "blob_url": "https://github.com/apache/archiva/blob/ecbb16c6e28358024e46ec830552f796b034633a/archiva-modules/metadata/metadata-repository-api/src/test/java/org/apache/archiva/metadata/repository/AbstractMetadataRepositoryTest.java",
                "raw_url": "https://github.com/apache/archiva/raw/ecbb16c6e28358024e46ec830552f796b034633a/archiva-modules/metadata/metadata-repository-api/src/test/java/org/apache/archiva/metadata/repository/AbstractMetadataRepositoryTest.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/metadata/metadata-repository-api/src/test/java/org/apache/archiva/metadata/repository/AbstractMetadataRepositoryTest.java?ref=ecbb16c6e28358024e46ec830552f796b034633a",
                "patch": "@@ -53,8 +53,8 @@\n import java.util.Map;\n import java.util.TimeZone;\n \n-@RunWith(ArchivaSpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath*:/META-INF/spring-context.xml\", \"classpath*:/spring-context.xml\" })\n+@RunWith( ArchivaSpringJUnit4ClassRunner.class )\n+@ContextConfiguration( locations = { \"classpath*:/META-INF/spring-context.xml\", \"classpath*:/spring-context.xml\" } )\n public abstract class AbstractMetadataRepositoryTest\n     extends TestCase\n {\n@@ -188,6 +188,7 @@ public void testGetProjectVersionOnly()\n         // test that namespace and project is also constructed\n         assertEquals( Collections.singletonList( TEST_NAMESPACE ), repository.getRootNamespaces( TEST_REPO_ID ) );\n         ProjectMetadata projectMetadata = repository.getProject( TEST_REPO_ID, TEST_NAMESPACE, TEST_PROJECT );\n+        assertNotNull( projectMetadata );\n         assertEquals( TEST_PROJECT, projectMetadata.getId() );\n         assertEquals( TEST_NAMESPACE, projectMetadata.getNamespace() );\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/3bba579fe447220c19be0dc4e8dc88c7168afe70",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/1c655131b0ee24ecc918233132e3f7a68f424cc5",
        "message": "fix possible javascript npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1469298 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_21",
        "file": [
            {
                "sha": "92fd0b3b80de3be39c916c1639f6489e1722b690",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/webapp/js/archiva/general-admin.js",
                "status": "modified",
                "additions": 6,
                "deletions": 1,
                "changes": 7,
                "blob_url": "https://github.com/apache/archiva/blob/3bba579fe447220c19be0dc4e8dc88c7168afe70/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/js/archiva/general-admin.js",
                "raw_url": "https://github.com/apache/archiva/raw/3bba579fe447220c19be0dc4e8dc88c7168afe70/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/js/archiva/general-admin.js",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/js/archiva/general-admin.js?ref=3bba579fe447220c19be0dc4e8dc88c7168afe70",
                "patch": "@@ -1906,6 +1906,8 @@ define(\"archiva.general-admin\",[\"jquery\",\"i18n\",\"utils\",\"jquery.tmpl\",\"knockout\"\n                     ||$.inArray(\"ldap\",redbackRuntimeConfiguration.rbacManagerImpls())>=0;\n             $.log(\"useLdap:\"+useLdap);\n             if(useLdap){\n+              $.log(\"in get ldap groups\");\n+\n               // load ldap roles\n               $.ajax(\"restServices/redbackServices/ldapGroupMappingService/ldapGroups\", {\n                 type: \"GET\",\n@@ -1939,6 +1941,7 @@ define(\"archiva.general-admin\",[\"jquery\",\"i18n\",\"utils\",\"jquery.tmpl\",\"knockout\"\n                 }\n               );\n             } else {\n+              $.log(\"before displayRuntimeConfigurationScreen\");\n               displayRuntimeConfigurationScreen(redbackRuntimeConfigurationViewModel,null,null);\n             }\n           }\n@@ -1955,7 +1958,8 @@ define(\"archiva.general-admin\",[\"jquery\",\"i18n\",\"utils\",\"jquery.tmpl\",\"knockout\"\n     });\n \n     redbackRuntimeConfigurationViewModel.allRoleNames=ko.observableArray(allRoleNames);\n-    if (redbackRuntimeConfigurationViewModel.redbackRuntimeConfiguration().ldapConfiguration().useRoleNameAsGroup()) {\n+\n+    if (redbackRuntimeConfigurationViewModel.redbackRuntimeConfiguration().ldapConfiguration().useRoleNameAsGroup()&&groups) {\n       // if using groups == roles add all as mapping except already mapped\n       $.each(groups,function(idx,item){\n         var exists=false;\n@@ -1971,6 +1975,7 @@ define(\"archiva.general-admin\",[\"jquery\",\"i18n\",\"utils\",\"jquery.tmpl\",\"knockout\"\n \n       });\n     }\n+\n     redbackRuntimeConfigurationViewModel.redbackRuntimeConfiguration().ldapGroupMappings=ko.observableArray(groupMappings?groupMappings:[]);\n     redbackRuntimeConfigurationViewModel.redbackRuntimeConfiguration().modified(false);\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/9ff7c3333284e8ae7c07209b0ac2f4685bdf3891",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/9c07475c30e847196670b3561e60f6e9cbcd6cff",
        "message": "fix possible NPE when restarting a tomcat with serialized session\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1443484 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_22",
        "file": [
            {
                "sha": "e0ffaad68f4ed37c76025a5cfb0debfc1a476fd8",
                "filename": "archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/util/TemporaryGroupIndexSessionCleaner.java",
                "status": "modified",
                "additions": 24,
                "deletions": 6,
                "changes": 30,
                "blob_url": "https://github.com/apache/archiva/blob/9ff7c3333284e8ae7c07209b0ac2f4685bdf3891/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/util/TemporaryGroupIndexSessionCleaner.java",
                "raw_url": "https://github.com/apache/archiva/raw/9ff7c3333284e8ae7c07209b0ac2f4685bdf3891/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/util/TemporaryGroupIndexSessionCleaner.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/util/TemporaryGroupIndexSessionCleaner.java?ref=9ff7c3333284e8ae7c07209b0ac2f4685bdf3891",
                "patch": "@@ -50,11 +50,18 @@\n     public void sessionCreated( HttpSessionEvent httpSessionEvent )\n     {\n         // ensure the map is here to avoid NPE\n-        httpSessionEvent.getSession().setAttribute( TEMPORARY_INDEX_SESSION_KEY,\n-                                                    new HashMap<String, TemporaryGroupIndex>() );\n-        WebApplicationContext webApplicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(\n-            httpSessionEvent.getSession().getServletContext() );\n-        indexMerger = webApplicationContext.getBean( IndexMerger.class );\n+        if ( httpSessionEvent.getSession().getAttribute( TEMPORARY_INDEX_SESSION_KEY ) == null )\n+        {\n+            httpSessionEvent.getSession().setAttribute( TEMPORARY_INDEX_SESSION_KEY,\n+                                                        new HashMap<String, TemporaryGroupIndex>() );\n+        }\n+\n+        if ( indexMerger == null )\n+        {\n+            WebApplicationContext webApplicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(\n+                httpSessionEvent.getSession().getServletContext() );\n+            indexMerger = webApplicationContext.getBean( IndexMerger.class );\n+        }\n     }\n \n     public void sessionDestroyed( HttpSessionEvent httpSessionEvent )\n@@ -67,8 +74,19 @@ public void sessionDestroyed( HttpSessionEvent httpSessionEvent )\n         {\n             log.info( \"cleanup temporaryGroupIndex {} directory {}\", temporaryGroupIndex.getIndexId(),\n                       temporaryGroupIndex.getDirectory().getAbsolutePath() );\n-            indexMerger.cleanTemporaryGroupIndex( temporaryGroupIndex );\n+            getIndexMerger( httpSessionEvent ).cleanTemporaryGroupIndex( temporaryGroupIndex );\n+        }\n+    }\n+\n+    private IndexMerger getIndexMerger( HttpSessionEvent httpSessionEvent )\n+    {\n+        if ( indexMerger == null )\n+        {\n+            WebApplicationContext webApplicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(\n+                httpSessionEvent.getSession().getServletContext() );\n+            indexMerger = webApplicationContext.getBean( IndexMerger.class );\n         }\n+        return indexMerger;\n     }\n }\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/7fcb02920d56959f4eb06ca715aa9615e5136bd1",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/7b7135cff787a0db33c0c6079911ebe75504aa89",
        "message": "NPE free and fix find user with only ldap\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1430639 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_23",
        "file": [
            {
                "sha": "9b0535572cfe3cf5680802a2147ff676ccc4fb91",
                "filename": "archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaAuthorizer.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/7fcb02920d56959f4eb06ca715aa9615e5136bd1/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaAuthorizer.java",
                "raw_url": "https://github.com/apache/archiva/raw/7fcb02920d56959f4eb06ca715aa9615e5136bd1/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaAuthorizer.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaAuthorizer.java?ref=7fcb02920d56959f4eb06ca715aa9615e5136bd1",
                "patch": "@@ -84,7 +84,7 @@ public AuthorizationResult isAuthorized( AuthorizationDataSource source )\n                     authorizationException = e;\n                 }\n \n-                if ( result.isAuthorized() )\n+                if ( result != null && result.isAuthorized() )\n                 {\n                     return result;\n                 }"
            },
            {
                "sha": "853b14d1529633e0d661d0f2a1d26c02b36aeac8",
                "filename": "archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaConfigurableUsersManager.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/7fcb02920d56959f4eb06ca715aa9615e5136bd1/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaConfigurableUsersManager.java",
                "raw_url": "https://github.com/apache/archiva/raw/7fcb02920d56959f4eb06ca715aa9615e5136bd1/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaConfigurableUsersManager.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaConfigurableUsersManager.java?ref=7fcb02920d56959f4eb06ca715aa9615e5136bd1",
                "patch": "@@ -449,7 +449,7 @@ public User createGuestUser()\n         throws UserManagerException\n     {\n         UserManager userManager = findFirstWritable();\n-        if ( userManager.isReadOnly() )\n+        if ( userManager == null )\n         {\n             log.warn( \"cannot find writable user manager implementation, skip guest user creation\" );\n             return null;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/f36695553dfe5cdb5ca154beb74ce40c213272f0",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/ad540803afcd1107ed186eac0d0c85a1dd11774d",
        "message": "fix some NPE if not writable userManager\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1421195 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_24",
        "file": [
            {
                "sha": "65e465b9d69c39de4e0b938bfe51a5bada6d2f78",
                "filename": "archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaConfigurableUsersManager.java",
                "status": "modified",
                "additions": 15,
                "deletions": 8,
                "changes": 23,
                "blob_url": "https://github.com/apache/archiva/blob/f36695553dfe5cdb5ca154beb74ce40c213272f0/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaConfigurableUsersManager.java",
                "raw_url": "https://github.com/apache/archiva/raw/f36695553dfe5cdb5ca154beb74ce40c213272f0/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaConfigurableUsersManager.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaConfigurableUsersManager.java?ref=f36695553dfe5cdb5ca154beb74ce40c213272f0",
                "patch": "@@ -111,17 +111,18 @@ public User createUser( String username, String fullName, String emailAddress )\n         throws UserManagerException\n     {\n         UserManager userManager = findFirstWritable();\n-        if ( userManager == null )\n+        if ( userManager.isReadOnly() )\n         {\n-            throw new RuntimeException( \"impossible to find a writable userManager\" );\n+            log.warn( \"cannot find writable user manager implementation, skip user creation\" );\n+            return null;\n         }\n         return userManager.createUser( username, fullName, emailAddress );\n     }\n \n     @Override\n     public UserQuery createUserQuery()\n     {\n-        return super.createUserQuery();    //To change body of overridden methods use File | Settings | File Templates.\n+        return super.createUserQuery();\n     }\n \n \n@@ -130,9 +131,10 @@ public void deleteUser( String username )\n         throws UserNotFoundException, UserManagerException\n     {\n         UserManager userManager = findFirstWritable();\n-        if ( userManager == null )\n+        if ( userManager.isReadOnly() )\n         {\n-            throw new RuntimeException( \"impossible to find a writable userManager\" );\n+            log.warn( \"cannot find writable user manager implementation, skip delete user\" );\n+            return;\n         }\n         userManager.deleteUser( username );\n     }\n@@ -325,8 +327,7 @@ public String getId()\n     @Override\n     public boolean isReadOnly()\n     {\n-        //olamy: must be it depends :-)\n-        return true;\n+        return findFirstWritable() != null;\n     }\n \n     @Override\n@@ -402,7 +403,13 @@ protected void fireUserManagerUserUpdated( User updatedUser )\n     public User createGuestUser()\n         throws UserManagerException\n     {\n-        return findFirstWritable().createGuestUser();\n+        UserManager userManager = findFirstWritable();\n+        if ( userManager.isReadOnly() )\n+        {\n+            log.warn( \"cannot find writable user manager implementation, skip guest user creation\" );\n+            return null;\n+        }\n+        return userManager.createGuestUser();\n     }\n \n     @Override"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/6341350134cc638989c31ac3176842a308c56b6a",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/6983e2d6903771a8e778a2491202e4b45edd17ef",
        "message": "prevent NPE when guest user not exists\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1420664 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_25",
        "file": [
            {
                "sha": "2f2c51a8d97e7e54d7cafb561678a332d9acd8f7",
                "filename": "archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaConfigurableUsersManager.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/6341350134cc638989c31ac3176842a308c56b6a/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaConfigurableUsersManager.java",
                "raw_url": "https://github.com/apache/archiva/raw/6341350134cc638989c31ac3176842a308c56b6a/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaConfigurableUsersManager.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-web-common/src/main/java/org/apache/archiva/web/security/ArchivaConfigurableUsersManager.java?ref=6341350134cc638989c31ac3176842a308c56b6a",
                "patch": "@@ -206,7 +206,7 @@ public User getGuestUser()\n             }\n         }\n \n-        if ( user == null )\n+        if ( user == null && lastException != null )\n         {\n             throw lastException;\n         }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/75f17a0d8b43c6c3813404f1a8ee144e2efeb640",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/2aa866124d04469c40cfc23e89a21c4cf1842e04",
        "message": "fix NPE and add alias\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1417978 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_26",
        "file": [
            {
                "sha": "2c55b71b62a63a63c380775b15c8fa4b935fb490",
                "filename": "archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/runtime/DefaultArchivaRuntimeConfigurationAdmin.java",
                "status": "modified",
                "additions": 276,
                "deletions": 37,
                "changes": 313,
                "blob_url": "https://github.com/apache/archiva/blob/75f17a0d8b43c6c3813404f1a8ee144e2efeb640/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/runtime/DefaultArchivaRuntimeConfigurationAdmin.java",
                "raw_url": "https://github.com/apache/archiva/raw/75f17a0d8b43c6c3813404f1a8ee144e2efeb640/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/runtime/DefaultArchivaRuntimeConfigurationAdmin.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/runtime/DefaultArchivaRuntimeConfigurationAdmin.java?ref=75f17a0d8b43c6c3813404f1a8ee144e2efeb640",
                "patch": "@@ -29,76 +29,86 @@\n import org.apache.archiva.configuration.RedbackRuntimeConfiguration;\n import org.apache.archiva.redback.components.registry.RegistryException;\n import org.apache.archiva.redback.configuration.UserConfiguration;\n+import org.apache.archiva.redback.configuration.UserConfigurationException;\n import org.apache.archiva.redback.configuration.UserConfigurationKeys;\n import org.apache.commons.lang.StringUtils;\n import org.springframework.stereotype.Service;\n \n import javax.annotation.PostConstruct;\n import javax.inject.Inject;\n import javax.inject.Named;\n+import java.util.List;\n \n /**\n  * @author Olivier Lamy\n  * @since 1.4-M4\n  */\n-@Service(\"archivaRuntimeConfigurationAdmin#default\")\n+@Service( \"userConfiguration#archiva\" )\n public class DefaultArchivaRuntimeConfigurationAdmin\n     extends AbstractRepositoryAdmin\n-    implements ArchivaRuntimeConfigurationAdmin\n+    implements ArchivaRuntimeConfigurationAdmin, UserConfiguration\n {\n \n     @Inject\n-    @Named(value = \"userConfiguration#redback\")\n+    @Named( value = \"userConfiguration#redback\" )\n     UserConfiguration userConfiguration;\n \n     @PostConstruct\n     public void initialize()\n-        throws RepositoryAdminException\n+        throws UserConfigurationException\n     {\n-\n-        ArchivaRuntimeConfiguration archivaRuntimeConfiguration = getArchivaRuntimeConfiguration();\n-        // migrate or not data from redback\n-        if ( !archivaRuntimeConfiguration.isMigratedFromRedbackConfiguration() )\n+        try\n         {\n-            // so migrate if available\n-            String userManagerImpl = userConfiguration.getString( UserConfigurationKeys.USER_MANAGER_IMPL );\n-            if ( StringUtils.isNotEmpty( userManagerImpl ) )\n+            ArchivaRuntimeConfiguration archivaRuntimeConfiguration = getArchivaRuntimeConfiguration();\n+            // migrate or not data from redback\n+            if ( !archivaRuntimeConfiguration.isMigratedFromRedbackConfiguration() )\n             {\n-                archivaRuntimeConfiguration.setUserManagerImpl( userManagerImpl );\n-            }\n+                // so migrate if available\n+                String userManagerImpl = userConfiguration.getString( UserConfigurationKeys.USER_MANAGER_IMPL );\n+                if ( StringUtils.isNotEmpty( userManagerImpl ) )\n+                {\n+                    archivaRuntimeConfiguration.setUserManagerImpl( userManagerImpl );\n+                }\n \n-            // now ldap\n+                // now ldap\n \n-            ArchivaLdapConfiguration archivaLdapConfiguration =\n-                archivaRuntimeConfiguration.getArchivaLdapConfiguration();\n-            if ( archivaLdapConfiguration == null )\n-            {\n-                archivaLdapConfiguration = new ArchivaLdapConfiguration();\n-                archivaRuntimeConfiguration.setArchivaLdapConfiguration( archivaLdapConfiguration );\n-            }\n+                ArchivaLdapConfiguration archivaLdapConfiguration =\n+                    archivaRuntimeConfiguration.getArchivaLdapConfiguration();\n+                if ( archivaLdapConfiguration == null )\n+                {\n+                    archivaLdapConfiguration = new ArchivaLdapConfiguration();\n+                    archivaRuntimeConfiguration.setArchivaLdapConfiguration( archivaLdapConfiguration );\n+                }\n \n-            archivaLdapConfiguration.setHostName(\n-                userConfiguration.getString( UserConfigurationKeys.LDAP_HOSTNAME, null ) );\n-            archivaLdapConfiguration.setPort( userConfiguration.getInt( UserConfigurationKeys.LDAP_PORT, -1 ) );\n-            archivaLdapConfiguration.setSsl( userConfiguration.getBoolean( UserConfigurationKeys.LDAP_SSL, false ) );\n-            archivaLdapConfiguration.setBaseDn( userConfiguration.getConcatenatedList( \"ldap.config.base.dn\", null ) );\n-            archivaLdapConfiguration.setContextFactory(\n-                userConfiguration.getString( UserConfigurationKeys.LDAP_CONTEX_FACTORY, null ) );\n-            archivaLdapConfiguration.setBindDn( userConfiguration.getConcatenatedList( \"ldap.config.bind.dn\", null ) );\n-            archivaLdapConfiguration.setPassword(\n-                userConfiguration.getString( UserConfigurationKeys.LDAP_PASSWORD, null ) );\n-            archivaLdapConfiguration.setAuthenticationMethod(\n-                userConfiguration.getString( UserConfigurationKeys.LDAP_AUTHENTICATION_METHOD, null ) );\n+                archivaLdapConfiguration.setHostName(\n+                    userConfiguration.getString( UserConfigurationKeys.LDAP_HOSTNAME, null ) );\n+                archivaLdapConfiguration.setPort( userConfiguration.getInt( UserConfigurationKeys.LDAP_PORT, -1 ) );\n+                archivaLdapConfiguration.setSsl(\n+                    userConfiguration.getBoolean( UserConfigurationKeys.LDAP_SSL, false ) );\n+                archivaLdapConfiguration.setBaseDn(\n+                    userConfiguration.getConcatenatedList( UserConfigurationKeys.LDAP_BASEDN, null ) );\n+                archivaLdapConfiguration.setContextFactory(\n+                    userConfiguration.getString( UserConfigurationKeys.LDAP_CONTEX_FACTORY, null ) );\n+                archivaLdapConfiguration.setBindDn(\n+                    userConfiguration.getConcatenatedList( UserConfigurationKeys.LDAP_BINDDN, null ) );\n+                archivaLdapConfiguration.setPassword(\n+                    userConfiguration.getString( UserConfigurationKeys.LDAP_PASSWORD, null ) );\n+                archivaLdapConfiguration.setAuthenticationMethod(\n+                    userConfiguration.getString( UserConfigurationKeys.LDAP_AUTHENTICATION_METHOD, null ) );\n \n-            archivaRuntimeConfiguration.setMigratedFromRedbackConfiguration( true );\n+                archivaRuntimeConfiguration.setMigratedFromRedbackConfiguration( true );\n \n-            updateArchivaRuntimeConfiguration( archivaRuntimeConfiguration );\n-        }\n+                updateArchivaRuntimeConfiguration( archivaRuntimeConfiguration );\n \n+            }\n+        }\n+        catch ( RepositoryAdminException e )\n+        {\n+            throw new UserConfigurationException( e.getMessage(), e );\n+        }\n     }\n \n     public ArchivaRuntimeConfiguration getArchivaRuntimeConfiguration()\n-        throws RepositoryAdminException\n     {\n         return build( getArchivaConfiguration().getConfiguration().getRedbackRuntimeConfiguration() );\n     }\n@@ -132,4 +142,233 @@ private RedbackRuntimeConfiguration build( ArchivaRuntimeConfiguration archivaRu\n     {\n         return new BeanReplicator().replicateBean( archivaRuntimeConfiguration, RedbackRuntimeConfiguration.class );\n     }\n+\n+    // wrapper for UserConfiguration to intercept values (and store it not yet migrated\n+\n+\n+    public String getString( String key )\n+    {\n+        if ( UserConfigurationKeys.USER_MANAGER_IMPL.equals( key ) )\n+        {\n+            return getArchivaRuntimeConfiguration().getUserManagerImpl();\n+        }\n+\n+        ArchivaRuntimeConfiguration conf = getArchivaRuntimeConfiguration();\n+\n+        if ( conf.getConfigurationProperties().containsKey( key ) )\n+        {\n+            return conf.getConfigurationProperties().get( key );\n+        }\n+\n+        String value = userConfiguration.getString( key );\n+        if ( value == null )\n+        {\n+            return null;\n+        }\n+        conf.getConfigurationProperties().put( key, value );\n+\n+        try\n+        {\n+            updateArchivaRuntimeConfiguration( conf );\n+        }\n+        catch ( RepositoryAdminException e )\n+        {\n+            log.error( \"fail to save ArchivaRuntimeConfiguration: {}\", e.getMessage(), e );\n+            throw new RuntimeException( e.getMessage(), e );\n+        }\n+\n+        return value;\n+    }\n+\n+    public String getString( String key, String defaultValue )\n+    {\n+        if ( UserConfigurationKeys.LDAP_HOSTNAME.equals( key ) )\n+        {\n+            return getArchivaRuntimeConfiguration().getArchivaLdapConfiguration().getHostName();\n+        }\n+        if ( UserConfigurationKeys.LDAP_CONTEX_FACTORY.equals( key ) )\n+        {\n+            return getArchivaRuntimeConfiguration().getArchivaLdapConfiguration().getContextFactory();\n+        }\n+        if ( UserConfigurationKeys.LDAP_PASSWORD.equals( key ) )\n+        {\n+            return getArchivaRuntimeConfiguration().getArchivaLdapConfiguration().getPassword();\n+        }\n+        if ( UserConfigurationKeys.LDAP_AUTHENTICATION_METHOD.equals( key ) )\n+        {\n+            return getArchivaRuntimeConfiguration().getArchivaLdapConfiguration().getAuthenticationMethod();\n+        }\n+\n+        ArchivaRuntimeConfiguration conf = getArchivaRuntimeConfiguration();\n+\n+        if ( conf.getConfigurationProperties().containsKey( key ) )\n+        {\n+            return conf.getConfigurationProperties().get( key );\n+        }\n+\n+        String value = userConfiguration.getString( key, defaultValue );\n+\n+        if ( value == null )\n+        {\n+            return null;\n+        }\n+\n+        conf.getConfigurationProperties().put( key, value );\n+        try\n+        {\n+            updateArchivaRuntimeConfiguration( conf );\n+        }\n+        catch ( RepositoryAdminException e )\n+        {\n+            log.error( \"fail to save ArchivaRuntimeConfiguration: {}\", e.getMessage(), e );\n+            throw new RuntimeException( e.getMessage(), e );\n+        }\n+\n+        return value;\n+    }\n+\n+    public int getInt( String key )\n+    {\n+        ArchivaRuntimeConfiguration conf = getArchivaRuntimeConfiguration();\n+\n+        if ( conf.getConfigurationProperties().containsKey( key ) )\n+        {\n+            return Integer.valueOf( conf.getConfigurationProperties().get( key ) );\n+        }\n+\n+        int value = userConfiguration.getInt( key );\n+\n+        conf.getConfigurationProperties().put( key, Integer.toString( value ) );\n+        try\n+        {\n+            updateArchivaRuntimeConfiguration( conf );\n+        }\n+        catch ( RepositoryAdminException e )\n+        {\n+            log.error( \"fail to save ArchivaRuntimeConfiguration: {}\", e.getMessage(), e );\n+            throw new RuntimeException( e.getMessage(), e );\n+        }\n+\n+        return value;\n+    }\n+\n+    public int getInt( String key, int defaultValue )\n+    {\n+        if ( UserConfigurationKeys.LDAP_PORT.equals( key ) )\n+        {\n+            return getArchivaRuntimeConfiguration().getArchivaLdapConfiguration().getPort();\n+        }\n+\n+\n+        ArchivaRuntimeConfiguration conf = getArchivaRuntimeConfiguration();\n+\n+        if ( conf.getConfigurationProperties().containsKey( key ) )\n+        {\n+            return Integer.valueOf( conf.getConfigurationProperties().get( key ) );\n+        }\n+\n+        int value = userConfiguration.getInt( key, defaultValue );\n+\n+        conf.getConfigurationProperties().put( key, Integer.toString( value ) );\n+        try\n+        {\n+            updateArchivaRuntimeConfiguration( conf );\n+        }\n+        catch ( RepositoryAdminException e )\n+        {\n+            log.error( \"fail to save ArchivaRuntimeConfiguration: {}\", e.getMessage(), e );\n+            throw new RuntimeException( e.getMessage(), e );\n+        }\n+\n+        return value;\n+    }\n+\n+    public boolean getBoolean( String key )\n+    {\n+        ArchivaRuntimeConfiguration conf = getArchivaRuntimeConfiguration();\n+\n+        if ( conf.getConfigurationProperties().containsKey( key ) )\n+        {\n+            return Boolean.valueOf( conf.getConfigurationProperties().get( key ) );\n+        }\n+\n+        boolean value = userConfiguration.getBoolean( key );\n+\n+        conf.getConfigurationProperties().put( key, Boolean.toString( value ) );\n+        try\n+        {\n+            updateArchivaRuntimeConfiguration( conf );\n+        }\n+        catch ( RepositoryAdminException e )\n+        {\n+            log.error( \"fail to save ArchivaRuntimeConfiguration: {}\", e.getMessage(), e );\n+            throw new RuntimeException( e.getMessage(), e );\n+        }\n+\n+        return value;\n+    }\n+\n+    public boolean getBoolean( String key, boolean defaultValue )\n+    {\n+        if ( UserConfigurationKeys.LDAP_SSL.equals( key ) )\n+        {\n+            return getArchivaRuntimeConfiguration().getArchivaLdapConfiguration().isSsl();\n+        }\n+\n+        ArchivaRuntimeConfiguration conf = getArchivaRuntimeConfiguration();\n+\n+        if ( conf.getConfigurationProperties().containsKey( key ) )\n+        {\n+            return Boolean.valueOf( conf.getConfigurationProperties().get( key ) );\n+        }\n+\n+        boolean value = userConfiguration.getBoolean( key );\n+\n+\n+        conf.getConfigurationProperties().put( key, Boolean.toString( value ) );\n+        try\n+        {\n+            updateArchivaRuntimeConfiguration( conf );\n+        }\n+        catch ( RepositoryAdminException e )\n+        {\n+            log.error( \"fail to save ArchivaRuntimeConfiguration: {}\", e.getMessage(), e );\n+            throw new RuntimeException( e.getMessage(), e );\n+        }\n+\n+        return value;\n+    }\n+\n+    public List<String> getList( String key )\n+    {\n+        List<String> value = userConfiguration.getList( key );\n+\n+        ArchivaRuntimeConfiguration conf = getArchivaRuntimeConfiguration();\n+        // TODO concat values\n+        conf.getConfigurationProperties().put( key, \"\" );\n+        try\n+        {\n+            updateArchivaRuntimeConfiguration( conf );\n+        }\n+        catch ( RepositoryAdminException e )\n+        {\n+            log.error( \"fail to save ArchivaRuntimeConfiguration: {}\", e.getMessage(), e );\n+            throw new RuntimeException( e.getMessage(), e );\n+        }\n+\n+        return value;\n+    }\n+\n+    public String getConcatenatedList( String key, String defaultValue )\n+    {\n+        if ( UserConfigurationKeys.LDAP_BASEDN.equals( key ) )\n+        {\n+            return getArchivaRuntimeConfiguration().getArchivaLdapConfiguration().getBaseDn();\n+        }\n+        if ( UserConfigurationKeys.LDAP_BINDDN.equals( key ) )\n+        {\n+            return getArchivaRuntimeConfiguration().getArchivaLdapConfiguration().getBindDn();\n+        }\n+        return userConfiguration.getConcatenatedList( key, defaultValue );\n+    }\n }"
            },
            {
                "sha": "b9a62bfe9e786135152bead631489c15ec4132e8",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/WEB-INF/applicationContext.xml",
                "status": "modified",
                "additions": 3,
                "deletions": 2,
                "changes": 5,
                "blob_url": "https://github.com/apache/archiva/blob/75f17a0d8b43c6c3813404f1a8ee144e2efeb640/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/WEB-INF/applicationContext.xml",
                "raw_url": "https://github.com/apache/archiva/raw/75f17a0d8b43c6c3813404f1a8ee144e2efeb640/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/WEB-INF/applicationContext.xml",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/WEB-INF/applicationContext.xml?ref=75f17a0d8b43c6c3813404f1a8ee144e2efeb640",
                "patch": "@@ -21,7 +21,6 @@\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n        xmlns:task=\"http://www.springframework.org/schema/task\"\n-       xmlns:util=\"http://www.springframework.org/schema/util\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n            http://www.springframework.org/schema/context\n@@ -31,6 +30,8 @@\n \n   <context:property-placeholder location=\"classpath:application.properties\"/>\n \n+  <alias name=\"userConfiguration#archiva\" alias=\"userConfiguration#default\" />\n+\n   <bean id=\"loggerManager\" class=\"org.codehaus.plexus.logging.slf4j.Slf4jLoggerManager\"\n         init-method=\"initialize\"/>\n \n@@ -139,7 +140,7 @@\n   <alias name=\"userManager#archiva\" alias=\"userManager#configurable\"/>\n \n   <bean name=\"ldapConnectionFactory\" class=\"org.apache.archiva.redback.common.ldap.connection.ConfigurableLdapConnectionFactory\">\n-    <property name=\"userConf\" ref=\"userConfiguration\"/>\n+    <property name=\"userConf\" ref=\"userConfiguration#default\"/>\n   </bean>\n     \n     <!-- <component>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/450f03a6a6c68ad02985cff93ff40daeebba0d70",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/cd03511cc9b094e37476de23ec3294577aa8d0ff",
        "message": "avoid npe when admin user has not been created\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1360435 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_27",
        "file": [
            {
                "sha": "99fc1a63c1dddae5913ab9d01979017b0b31bc49",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/pom.xml",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/archiva/blob/450f03a6a6c68ad02985cff93ff40daeebba0d70/archiva-modules/archiva-web/archiva-webapp-js/pom.xml",
                "raw_url": "https://github.com/apache/archiva/raw/450f03a6a6c68ad02985cff93ff40daeebba0d70/archiva-modules/archiva-web/archiva-webapp-js/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/pom.xml?ref=450f03a6a6c68ad02985cff93ff40daeebba0d70",
                "patch": "@@ -808,7 +808,8 @@\n             <appserver.base>${archivaAppServerBase}</appserver.base>\n             <appserver.home>${archivaAppServerBase}</appserver.home>\n             <derby.system.home>${archivaAppServerBase}/logs</derby.system.home>\n-            <redback.admin.creation.file>${basedir}/target/auto-admin-creation.properties</redback.admin.creation.file>\n+            <!-- remove admin auto creation that must be tested too -->\n+            <!--redback.admin.creation.file>${basedir}/target/auto-admin-creation.properties</redback.admin.creation.file-->\n             <java.io.tmpdir>${project.build.directory}</java.io.tmpdir>\n             <archiva.user.configFileName>${archivaAppServerBase}/conf/archiva.xml</archiva.user.configFileName>\n             <archiva.devMode>${archiva.devMode}</archiva.devMode>"
            },
            {
                "sha": "d1c1bf26f4f9ad6f9f83858458ba95d2c80f42b1",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/index.html",
                "status": "modified",
                "additions": 3,
                "deletions": 9,
                "changes": 12,
                "blob_url": "https://github.com/apache/archiva/blob/450f03a6a6c68ad02985cff93ff40daeebba0d70/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/index.html",
                "raw_url": "https://github.com/apache/archiva/raw/450f03a6a6c68ad02985cff93ff40daeebba0d70/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/index.html",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/index.html?ref=450f03a6a6c68ad02985cff93ff40daeebba0d70",
                "patch": "@@ -148,9 +148,6 @@\n                     }\n                 });\n \n-\n-\n-\n                 require(['jquery','i18n','sammy','startup','utils','domReady!'], function (domReady) {\n                     loadi18n(function () {\n                       $.ajax({\n@@ -162,13 +159,10 @@\n                               window.archivaRuntimeInfo=data;\n \n                               require(['sammy','archiva.main','domReady!'],function (domReady) {\n-                                      $.log(\"startArchivaApplication\");\n-                                      startArchivaApplication();\n-                                      $(\"#loadingDiv\").hide();\n+                                  $.log(\"startArchivaApplication\");\n+                                  startArchivaApplication();\n+                                  $(\"#loadingDiv\").hide();\n                               })\n-\n-\n-\n                           }\n                         })\n                     })"
            },
            {
                "sha": "4b7167314cf35e490511c76e8520bee8723c096c",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/main.js",
                "status": "modified",
                "additions": 11,
                "deletions": 6,
                "changes": 17,
                "blob_url": "https://github.com/apache/archiva/blob/450f03a6a6c68ad02985cff93ff40daeebba0d70/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/main.js",
                "raw_url": "https://github.com/apache/archiva/raw/450f03a6a6c68ad02985cff93ff40daeebba0d70/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/main.js",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/main.js?ref=450f03a6a6c68ad02985cff93ff40daeebba0d70",
                "patch": "@@ -269,38 +269,43 @@ function() {\n                 });\n                 this.get('#:folder', function () {\n                     self.activeMenuId(this.params.folder);\n-                    ko.utils.arrayFirst(self.artifactMenuItems.concat(self.usersMenuItems, self.administrationMenuItems), function(p) {\n+                    var baseItems = self.artifactMenuItems?self.artifactMenuItems:[];\n+                    ko.utils.arrayFirst(baseItems.concat(self.usersMenuItems, self.administrationMenuItems), function(p) {\n                         if ( p.href == \"#\"+self.activeMenuId()) {\n                           p.func();\n                           return;\n                         }\n                     });\n                     \n                 });\n+                this.get('#open-admin-create-box',function(){\n+                  $.log(\"#open-admin-create-box\");\n+                  adminCreateBox();\n+                });\n                 //this.get('', function () { this.app.runRoute('get', '#search') });\n           } );\n       sammyArchivaApplication.run();\n   }\n \n   startArchivaApplication=function(){\n+\n     $.log(\"startArchivaApplication\");\n     $('#topbar-menu-container').html($(\"#topbar_menu_tmpl\" ).tmpl());\n     $('#sidebar-content').html($(\"#main_menu_tmpl\").tmpl());\n \n     ko.bindingHandlers.redbackP = {\n-            init: function(element, valueAccessor) {\n-                $(element).attr(\"redback-permissions\",valueAccessor);\n-                }\n+      init: function(element, valueAccessor) {\n+          $(element).attr(\"redback-permissions\",valueAccessor);\n+          }\n     };\n+\n     ko.applyBindings(new MainMenuViewModel());\n \n     hideElementWithKarma();\n     checkSecurityLinks();\n     checkCreateAdminLink();\n     $('#footer-content').html($('#footer-tmpl').tmpl(window.archivaRuntimeInfo));\n \n-    \n-    \n     $( \"#quick-search-autocomplete\" ).autocomplete({\n       minLength: 3,\n       delay: 600,"
            },
            {
                "sha": "f77c8db58d1e1348481cb3049acd7af40b4bbeb5",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/menu.html",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/archiva/blob/450f03a6a6c68ad02985cff93ff40daeebba0d70/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/menu.html",
                "raw_url": "https://github.com/apache/archiva/raw/450f03a6a6c68ad02985cff93ff40daeebba0d70/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/menu.html",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/menu.html?ref=450f03a6a6c68ad02985cff93ff40daeebba0d70",
                "patch": "@@ -28,7 +28,6 @@\n           <a data-bind=\"text: text, attr: { id: id, href: href}\"></a>\n        </li>\n        <!-- /ko -->\n-\n     </ul>\n \n     <ul class=\"nav nav-list\" redback-permissions=\"{permissions: ['archiva-manage-configuration']}\" data-bind=\"foreach: administrationMenuItems\">\n@@ -65,7 +64,7 @@\n           <div id=\"organisation-logo\" class=\"pull-left\"></div>\n           <ul class=\"nav pull-right\">\n             <li id=\"create-admin-link\" style=\"display: none\">\n-              <a href=\"#\" onclick=\"adminCreateBox();\" id=\"create-admin-link-a\">\n+              <a href=\"#open-admin-create-box\" onclick=\"adminCreateBox();\" id=\"create-admin-link-a\">\n                 <span class=\"label label-important\">${$.i18n.prop('create.admin.page.link')}</span>\n               </a>\n             </li>"
            },
            {
                "sha": "4f7ce1d69b59f7fe34da3b45fe0f57bcb4f7ead6",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/test/tomcat/tomcat-context-archiva.xml",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/450f03a6a6c68ad02985cff93ff40daeebba0d70/archiva-modules/archiva-web/archiva-webapp-js/src/test/tomcat/tomcat-context-archiva.xml",
                "raw_url": "https://github.com/apache/archiva/raw/450f03a6a6c68ad02985cff93ff40daeebba0d70/archiva-modules/archiva-web/archiva-webapp-js/src/test/tomcat/tomcat-context-archiva.xml",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/test/tomcat/tomcat-context-archiva.xml?ref=450f03a6a6c68ad02985cff93ff40daeebba0d70",
                "patch": "@@ -22,7 +22,7 @@\n             username=\"sa\"\n             password=\"\"\n             driverClassName=\"org.apache.derby.jdbc.EmbeddedDriver\"\n-            url=\"jdbc:derby:${catalina.base}/target/database/users;create=true\"\n+            url=\"jdbc:derby:${appserver.base}/database/users;create=true\"\n   />\n   <Resource name=\"mail/Session\" auth=\"Container\"\n           type=\"javax.mail.Session\""
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/e30d7757609736f2b8fc306a715a7de59cb94b96",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/57014d6ab0e5884d542ec0df42ef5f8b12c2f8bc",
        "message": "prevent some js npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1360167 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_28",
        "file": [
            {
                "sha": "e5e2879dcfc6d983a6e78783d84f554111963fe7",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/search.js",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/archiva/blob/e30d7757609736f2b8fc306a715a7de59cb94b96/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/search.js",
                "raw_url": "https://github.com/apache/archiva/raw/e30d7757609736f2b8fc306a715a7de59cb94b96/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/search.js",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/search.js?ref=e30d7757609736f2b8fc306a715a7de59cb94b96",
                "patch": "@@ -830,6 +830,7 @@ define(\"archiva.search\",[\"jquery\",\"i18n\",\"jquery.tmpl\",\"choosen\",\"knockout\",\"kno\n   }\n \n   displayBrowseArtifactDetail=function(groupId, artifactId){\n+    $.log(\"displayBrowseArtifactDetail\");\n     window.sammyArchivaApplication.setLocation(\"#artifact/\"+groupId+\"/\"+artifactId);\n     //displayArtifactDetail(groupId,artifactId,null,null);\n   }"
            },
            {
                "sha": "118177a50791a5fe055f1e3243b0a237af990304",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/search.html",
                "status": "modified",
                "additions": 9,
                "deletions": 3,
                "changes": 12,
                "blob_url": "https://github.com/apache/archiva/blob/e30d7757609736f2b8fc306a715a7de59cb94b96/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/search.html",
                "raw_url": "https://github.com/apache/archiva/raw/e30d7757609736f2b8fc306a715a7de59cb94b96/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/search.html",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/search.html?ref=e30d7757609736f2b8fc306a715a7de59cb94b96",
                "patch": "@@ -111,21 +111,25 @@ <h4>${$.i18n.prop('browse.artifact.display.artifactInfo')}</h4>\n               <th>${$.i18n.prop('browse.artifact.artifactId')}</th>\n               <td>${artifactId}</td>\n             </tr>\n+            {{if projectVersionMetadata}}\n             <tr>\n               <th>${$.i18n.prop('browse.artifact.name')}</th>\n               <td>${projectVersionMetadata.name}</td>\n             </tr>\n+            {{/if}}\n+            {{if projectVersionMetadata}}\n             <tr>\n               <th>${$.i18n.prop('browse.artifact.description')}</th>\n               <td>${projectVersionMetadata.description}</td>\n             </tr>\n-            {{if projectVersionMetadata.mavenFacet}}\n+            {{/if}}\n+            {{if projectVersionMetadata && projectVersionMetadata.mavenFacet}}\n             <tr>\n               <th>${$.i18n.prop('browse.artifact.packaging')}</th>\n               <td>${projectVersionMetadata.mavenFacet.packaging}</td>\n             </tr>\n             {{/if}}\n-            {{if projectVersionMetadata.organization}}\n+            {{if projectVersionMetadata && projectVersionMetadata.organization}}\n             <tr>\n               <th>${$.i18n.prop('browse.artifact.organization.name')}</th>\n               {{if projectVersionMetadata.organization.url}}\n@@ -139,7 +143,7 @@ <h4>${$.i18n.prop('browse.artifact.display.artifactInfo')}</h4>\n               {{/if}}\n             </tr>\n             {{/if}}\n-            {{if projectVersionMetadata.issueManagement}}\n+            {{if projectVersionMetadata && projectVersionMetadata.issueManagement}}\n             <tr>\n               <th>${$.i18n.prop('browse.artifact.organization.issueManagement')}</th>\n               <td>\n@@ -448,6 +452,7 @@ <h3>${$.i18n.prop('search.artifact.header')}</h3>\n       </li>\n     </ul>\n     <div class=\"tab-content\">\n+      {{if projectVersionMetadata}}\n   \t  <div id=\"artifact-details-info-content\" class=\"tab-pane active\">\n         <blockquote>${projectVersionMetadata.description}</blockquote>\n         <div class=\"row-fluid\">\n@@ -593,6 +598,7 @@ <h4>${$.i18n.prop('browse.artifact.scm')}</h4>\n         </div>\n         {{/if}}\n   \t  </div>\n+      {{/if}}\n \n \n   \t  <div id=\"artifact-details-dependencies-content\" class=\"tab-pane\">"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/c0d576e45efdea412e7c07c16642d7d5de5895a6",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/f994014554c5b18e7553b3ed5c32e8bf30e33830",
        "message": "NPE check and start moving to a knockout model\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1307528 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_29",
        "file": [
            {
                "sha": "5f470c0b9b15c4e93dd174ee66c0746325ec2728",
                "filename": "README.txt",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/archiva/blob/c0d576e45efdea412e7c07c16642d7d5de5895a6/README.txt",
                "raw_url": "https://github.com/apache/archiva/raw/c0d576e45efdea412e7c07c16642d7d5de5895a6/README.txt",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/README.txt?ref=c0d576e45efdea412e7c07c16642d7d5de5895a6",
                "patch": "@@ -55,3 +55,7 @@ This file must contains:\n           mail.smtp.socketFactory.class=\"javax.net.ssl.SSLSocketFactory\"/>\n \n </Context>\n+\n+jrebel\n+generate files:  mvn org.zeroturnaround:jrebel-maven-plugin:1.1.3:generate -Pjs\n+"
            },
            {
                "sha": "cf8e23b87e80c80645a5f3bbddc80c5900a901d0",
                "filename": "archiva-modules/archiva-web/archiva-web-common/src/main/resources/org/apache/archiva/i18n/default.properties",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/archiva/blob/c0d576e45efdea412e7c07c16642d7d5de5895a6/archiva-modules/archiva-web/archiva-web-common/src/main/resources/org/apache/archiva/i18n/default.properties",
                "raw_url": "https://github.com/apache/archiva/raw/c0d576e45efdea412e7c07c16642d7d5de5895a6/archiva-modules/archiva-web/archiva-web-common/src/main/resources/org/apache/archiva/i18n/default.properties",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-web-common/src/main/resources/org/apache/archiva/i18n/default.properties?ref=c0d576e45efdea412e7c07c16642d7d5de5895a6",
                "patch": "@@ -397,5 +397,6 @@ fileupload.version=Version\n fileupload.packaging=Packaging\n fileupload.generatePom=Generate Maven POM\n fileupload.repositoryId=Repository Id\n+fileupload.save=Save Files\n \n "
            },
            {
                "sha": "9e114f0f30cb2fdf550fbad499f2eb0a1497168d",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/DefaultFileUploadService.java",
                "status": "modified",
                "additions": 11,
                "deletions": 4,
                "changes": 15,
                "blob_url": "https://github.com/apache/archiva/blob/c0d576e45efdea412e7c07c16642d7d5de5895a6/archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/DefaultFileUploadService.java",
                "raw_url": "https://github.com/apache/archiva/raw/c0d576e45efdea412e7c07c16642d7d5de5895a6/archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/DefaultFileUploadService.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/DefaultFileUploadService.java?ref=c0d576e45efdea412e7c07c16642d7d5de5895a6",
                "patch": "@@ -91,14 +91,21 @@ public FileMetadata post( MultipartBody multipartBody )\n             String repositoryId =\n                 IOUtils.toString( multipartBody.getAttachment( \"repositoryId\" ).getDataHandler().getInputStream() );\n \n-            boolean generatePom = BooleanUtils.toBoolean(\n-                IOUtils.toString( multipartBody.getAttachment( \"generatePom\" ).getDataHandler().getInputStream() ) );\n+            Attachment generatePomAttachment = multipartBody.getAttachment( \"generatePom\" );\n+            boolean generatePom = BooleanUtils.toBoolean( generatePomAttachment == null\n+                                                              ? Boolean.FALSE.toString()\n+                                                              : IOUtils.toString(\n+                                                                  generatePomAttachment.getDataHandler().getInputStream() ) );\n \n             String classifier =\n                 IOUtils.toString( multipartBody.getAttachment( \"classifier\" ).getDataHandler().getInputStream() );\n \n-            boolean pomFile = BooleanUtils.toBoolean(\n-                IOUtils.toString( multipartBody.getAttachment( \"pomFile\" ).getDataHandler().getInputStream() ) );\n+            Attachment pomFileAttachment = multipartBody.getAttachment( \"pomFile\" );\n+\n+            boolean pomFile = BooleanUtils.toBoolean( pomFileAttachment == null\n+                                                          ? Boolean.FALSE.toString()\n+                                                          : IOUtils.toString(\n+                                                              pomFileAttachment.getDataHandler().getInputStream() ) );\n \n             log.info( \"uploading file:\" + groupId + \":\" + artifactId + \":\" + version );\n             Attachment file = multipartBody.getAttachment( \"files[]\" );"
            },
            {
                "sha": "3fbffdad66c7a85a5c6ef04672effbff5c89cd04",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/artifacts-management.js",
                "status": "modified",
                "additions": 25,
                "deletions": 2,
                "changes": 27,
                "blob_url": "https://github.com/apache/archiva/blob/c0d576e45efdea412e7c07c16642d7d5de5895a6/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/artifacts-management.js",
                "raw_url": "https://github.com/apache/archiva/raw/c0d576e45efdea412e7c07c16642d7d5de5895a6/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/artifacts-management.js",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/artifacts-management.js?ref=c0d576e45efdea412e7c07c16642d7d5de5895a6",
                "patch": "@@ -19,6 +19,23 @@\n define(\"archiva.artifacts-management\",[\"jquery\",\"i18n\",\"order!utils\",\"order!jquery.tmpl\",\"order!knockout\",\n   \"order!knockout.simpleGrid\",\"jquery.validate\",\"bootstrap\",\"jquery.fileupload\",\"jquery.fileupload.ui\"]\n     , function() {\n+\n+  ArtifactUpload=function(classifier,pomFile){\n+    this.classifier=classifier;\n+    this.pomFile=pomFile;\n+  }\n+\n+  ArtifactUploadViewModel=function(managedRepositories){\n+    this.managedRepositories=ko.observableArray(managedRepositories);\n+    this.repositoryId=ko.observable();\n+    this.groupId=ko.observable();\n+    this.artifactId=ko.observable();\n+    this.version=ko.observable();\n+    this.packaging=ko.observable();\n+    this.generatePom=ko.observable();\n+\n+  }\n+\n   displayUploadArtifact=function(){\n     var mainContent=$(\"#main-content\");\n     mainContent.html(mediumSpinnerImg());\n@@ -27,11 +44,17 @@ define(\"archiva.artifacts-management\",[\"jquery\",\"i18n\",\"order!utils\",\"order!jque\n         dataType: 'json',\n         success: function(data) {\n           mainContent.html($(\"#file-upload-tmpl\" ).tmpl({managedRepositories: data}));\n+          var artifactUploadViewModel=new ArtifactUploadViewModel(data);\n+          ko.applyBindings(artifactUploadViewModel,mainContent.find(\"#file-upload-main\" ).get(0));\n+          mainContent.find(\"#fileupload-save-files\" ).on(\"click\",function(){\n+            $.log(\"fileupload-save-files click\");\n+          });\n+\n           $('#fileupload').fileupload({\n               add: function (e, data) {\n                 data.timeStamp = $.now();\n-                $.blueimpUI.fileupload.prototype\n-                    .options.add.call(this, e, data);\n+                $.log(\"fileupload add file\");\n+                $.blueimpUI.fileupload.prototype.options.add.call(this, e, data);\n               }\n             }\n           );"
            },
            {
                "sha": "7bff1cec1904ef995913ac316ada8adedaec2b0b",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/artifacts-management.html",
                "status": "modified",
                "additions": 20,
                "deletions": 10,
                "changes": 30,
                "blob_url": "https://github.com/apache/archiva/blob/c0d576e45efdea412e7c07c16642d7d5de5895a6/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/artifacts-management.html",
                "raw_url": "https://github.com/apache/archiva/raw/c0d576e45efdea412e7c07c16642d7d5de5895a6/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/artifacts-management.html",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/templates/archiva/artifacts-management.html?ref=c0d576e45efdea412e7c07c16642d7d5de5895a6",
                "patch": "@@ -1,3 +1,7 @@\n+<script id=\"file-upload-screen\" type=\"text/html\">\n+  <div id=\"file-upload-main\" ddata-bind='template:{name:\"file-upload-tmpl\"}'></div>\n+</script>\n+\n <script id=\"file-upload-tmpl\" type=\"text/html\">\n   <div class=\"page-header\">\n     <h3>${$.i18n.prop('fileupload.header')}</h3>\n@@ -9,45 +13,43 @@ <h3>${$.i18n.prop('fileupload.header')}</h3>\n       <div class=\"control-group\">\n         <label class=\"control-label\" for=\"repositoryId\">${$.i18n.prop('fileupload.repositoryId')}</label>\n         <div class=\"controls\">\n-          <select id=\"repositoryId\" name=\"repositoryId\">\n-            {{each(i,repository) managedRepositories}}\n-              <option value=\"${repository.id}\">${repository.name}</option>\n-            {{/each}}\n-          </select>\n+          <select id=\"repositoryId\"\n+                    data-bind=\"options: managedRepositories, optionsText: 'name',optionsValue:'id',\n+                     value: repositoryId\"></select>\n          </div>\n         </div>\n       <div class=\"control-group\">\n         <label class=\"control-label\" for=\"groupId\">${$.i18n.prop('fileupload.groupId')}</label>\n         <div class=\"controls\">\n-          <input type=\"text\" class=\"xlarge required\" id=\"groupId\" name=\"groupId\" size=\"10\" />\n+          <input type=\"text\" class=\"xlarge required\" data-bind=\"value: groupId\" id=\"groupId\" name=\"groupId\" size=\"10\" />\n           </div>\n         </div>\n       </div>\n       <div class=\"control-group\">\n         <label class=\"control-label\" for=\"artifactId\">${$.i18n.prop('fileupload.artifactId')}</label>\n         <div class=\"controls\">\n-          <input type=\"text\" class=\"xlarge required\" id=\"artifactId\" name=\"artifactId\" size=\"10\" />\n+          <input type=\"text\" class=\"xlarge required\" data-bind=\"value: artifactId\" id=\"artifactId\" name=\"artifactId\" size=\"10\" />\n           </div>\n         </div>\n       </div>\n       <div class=\"control-group\">\n         <label class=\"control-label\" for=\"artifactId\">${$.i18n.prop('fileupload.version')}</label>\n         <div class=\"controls\">\n-          <input type=\"text\" class=\"xlarge required\" id=\"version\" name=\"version\" size=\"10\" />\n+          <input type=\"text\" class=\"xlarge required\" data-bind=\"value: version\" id=\"version\" name=\"version\" size=\"10\" />\n           </div>\n         </div>\n       </div>\n       <div class=\"control-group\">\n         <label class=\"control-label\" for=\"artifactId\">${$.i18n.prop('fileupload.packaging')}</label>\n         <div class=\"controls\">\n-          <input type=\"text\" class=\"xlarge required\" id=\"packaging\" name=\"packaging\" size=\"10\" />\n+          <input type=\"text\" class=\"xlarge required\" data-bind=\"value: packaging\" id=\"packaging\" name=\"packaging\" size=\"10\" />\n           </div>\n         </div>\n       </div>\n       <div class=\"control-group\">\n         <label class=\"control-label\" for=\"generatePom\">${$.i18n.prop('fileupload.generatePom')}</label>\n         <div class=\"controls\">\n-          <input type=\"checkbox\" class=\"xlarge required\" id=\"generatePom\" name=\"generatePom\" />\n+          <input type=\"checkbox\" class=\"xlarge required\" data-bind=\"value: generatePom\" id=\"generatePom\" name=\"generatePom\" />\n           </div>\n         </div>\n       </div>\n@@ -80,6 +82,14 @@ <h3>${$.i18n.prop('fileupload.header')}</h3>\n         </div>\n       </div>\n     </div>\n+    <div>\n+      <a href=\"#\" id=\"fileupload-save-files\">\n+        <span class=\"btn btn-info\">\n+          <i class=\"icon-file icon-white\"></i>\n+          <span>${$.i18n.prop('fileupload.save')}</span>\n+        </span>\n+      </a>\n+    </div>\n     <div class=\"fileupload-loading\"></div>\n     <br>\n     <table class=\"table table-striped\">"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/28a7a9cee8f5c2904db0d5a8d78cff202c357cde",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/f5fff028591577b6db2e9d290f458607e8f07714",
        "message": "fix indexing call as could cause NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1233615 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_30",
        "file": [
            {
                "sha": "7c85aa08c23094f8f4d12e9d0d91a98f2a3ade73",
                "filename": "archiva-modules/archiva-web/archiva-rest/archiva-rest-services/src/main/java/org/apache/archiva/rest/services/DefaultRepositoriesService.java",
                "status": "modified",
                "additions": 3,
                "deletions": 2,
                "changes": 5,
                "blob_url": "https://github.com/apache/archiva/blob/28a7a9cee8f5c2904db0d5a8d78cff202c357cde/archiva-modules/archiva-web/archiva-rest/archiva-rest-services/src/main/java/org/apache/archiva/rest/services/DefaultRepositoriesService.java",
                "raw_url": "https://github.com/apache/archiva/raw/28a7a9cee8f5c2904db0d5a8d78cff202c357cde/archiva-modules/archiva-web/archiva-rest/archiva-rest-services/src/main/java/org/apache/archiva/rest/services/DefaultRepositoriesService.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-rest/archiva-rest-services/src/main/java/org/apache/archiva/rest/services/DefaultRepositoriesService.java?ref=28a7a9cee8f5c2904db0d5a8d78cff202c357cde",
                "patch": "@@ -199,11 +199,12 @@ public Boolean scanRepositoryNow( String repositoryId, boolean fullScan )\n             ManagedRepository repository = managedRepositoryAdmin.getManagedRepository( repositoryId );\n \n             IndexingContext context = managedRepositoryAdmin.createIndexContext( repository );\n+\n             ArtifactIndexingTask task =\n                 new ArtifactIndexingTask( repository, null, ArtifactIndexingTask.Action.FINISH, context );\n \n-            task.setExecuteOnEntireRepo( fullScan );\n-            task.setOnlyUpdate( false );\n+            task.setExecuteOnEntireRepo( true );\n+            task.setOnlyUpdate( !fullScan );\n \n             archivaIndexingTaskExecutor.executeTask( task );\n             return Boolean.TRUE;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/b15679f6a9e92581c44b8b54dbad582894da11d3",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/9cc9c4d3d6fe58ae8879a322b81b044b06c29447",
        "message": " prevent NPE on initial scan at repository creation\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1232213 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_31",
        "file": [
            {
                "sha": "9cbff9bd1f50626442a1ef71528f671c25aea916",
                "filename": "archiva-modules/archiva-base/archiva-consumers/archiva-lucene-consumers/src/main/java/org/apache/archiva/consumers/lucene/NexusIndexerConsumer.java",
                "status": "modified",
                "additions": 37,
                "deletions": 5,
                "changes": 42,
                "blob_url": "https://github.com/apache/archiva/blob/b15679f6a9e92581c44b8b54dbad582894da11d3/archiva-modules/archiva-base/archiva-consumers/archiva-lucene-consumers/src/main/java/org/apache/archiva/consumers/lucene/NexusIndexerConsumer.java",
                "raw_url": "https://github.com/apache/archiva/raw/b15679f6a9e92581c44b8b54dbad582894da11d3/archiva-modules/archiva-base/archiva-consumers/archiva-lucene-consumers/src/main/java/org/apache/archiva/consumers/lucene/NexusIndexerConsumer.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-consumers/archiva-lucene-consumers/src/main/java/org/apache/archiva/consumers/lucene/NexusIndexerConsumer.java?ref=b15679f6a9e92581c44b8b54dbad582894da11d3",
                "patch": "@@ -72,7 +72,7 @@\n \n     private ArchivaTaskScheduler<ArtifactIndexingTask> scheduler;\n \n-    private IndexingContext context;\n+    private IndexingContext indexingContext;\n \n     private NexusIndexer nexusIndexer;\n \n@@ -124,7 +124,7 @@ public void beginScan( ManagedRepository repository, Date whenGathered )\n         try\n         {\n             log.info( \"Creating indexing context for repo : {}\", repository.getId() );\n-            context = managedRepositoryAdmin.createIndexContext( repository );\n+            indexingContext = managedRepositoryAdmin.createIndexContext( repository );\n         }\n         catch ( RepositoryAdminException e )\n         {\n@@ -152,7 +152,7 @@ public void processFile( String path )\n         File artifactFile = new File( managedRepository, path );\n \n         ArtifactIndexingTask task =\n-            new ArtifactIndexingTask( repository, artifactFile, ArtifactIndexingTask.Action.ADD, context );\n+            new ArtifactIndexingTask( repository, artifactFile, ArtifactIndexingTask.Action.ADD, getIndexingContext() );\n         try\n         {\n             log.debug( \"Queueing indexing task '{}' to add or update the artifact in the index.\", task );\n@@ -177,7 +177,8 @@ public void processFile( String path, boolean executeOnEntireRepo )\n \n             // specify in indexing task that this is not a repo scan request!\n             ArtifactIndexingTask task =\n-                new ArtifactIndexingTask( repository, artifactFile, ArtifactIndexingTask.Action.ADD, context, false );\n+                new ArtifactIndexingTask( repository, artifactFile, ArtifactIndexingTask.Action.ADD,\n+                                          getIndexingContext(), false );\n             // only update index we don't need to scan the full repo here\n             task.setOnlyUpdate( true );\n             try\n@@ -194,6 +195,19 @@ public void processFile( String path, boolean executeOnEntireRepo )\n \n     public void completeScan()\n     {\n+        IndexingContext context = this.indexingContext;\n+        if ( context == null )\n+        {\n+            try\n+            {\n+                context = getIndexingContext();\n+            }\n+            catch ( ConsumerException e )\n+            {\n+                log.warn( \"failed to get an IndexingContext:{}\", e.getMessage() );\n+                return;\n+            }\n+        }\n         ArtifactIndexingTask task =\n             new ArtifactIndexingTask( repository, null, ArtifactIndexingTask.Action.FINISH, context );\n         try\n@@ -205,7 +219,6 @@ public void completeScan()\n         {\n             log.error( \"Error queueing task: \" + task + \": \" + e.getMessage(), e );\n         }\n-        context = null;\n     }\n \n     public void completeScan( boolean executeOnEntireRepo )\n@@ -260,4 +273,23 @@ public void initialize()\n     {\n         return includes;\n     }\n+\n+\n+    private IndexingContext getIndexingContext()\n+        throws ConsumerException\n+    {\n+\n+        if ( this.indexingContext == null )\n+        {\n+            try\n+            {\n+                indexingContext = managedRepositoryAdmin.createIndexContext( repository );\n+            }\n+            catch ( RepositoryAdminException e )\n+            {\n+                throw new ConsumerException( e.getMessage(), e );\n+            }\n+        }\n+        return indexingContext;\n+    }\n }"
            },
            {
                "sha": "d78d6413698a0a5e9011794c270ee9c68bf58c85",
                "filename": "archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/managed/DefaultManagedRepositoryAdmin.java",
                "status": "modified",
                "additions": 10,
                "deletions": 5,
                "changes": 15,
                "blob_url": "https://github.com/apache/archiva/blob/b15679f6a9e92581c44b8b54dbad582894da11d3/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/managed/DefaultManagedRepositoryAdmin.java",
                "raw_url": "https://github.com/apache/archiva/raw/b15679f6a9e92581c44b8b54dbad582894da11d3/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/managed/DefaultManagedRepositoryAdmin.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/managed/DefaultManagedRepositoryAdmin.java?ref=b15679f6a9e92581c44b8b54dbad582894da11d3",
                "patch": "@@ -576,12 +576,17 @@ public IndexingContext createIndexContext( ManagedRepository repository )\n                 indexDirectory.mkdirs();\n             }\n \n-            context =\n-                indexer.addIndexingContext( repository.getId(), repository.getId(), managedRepository, indexDirectory,\n-                                            managedRepository.toURI().toURL().toExternalForm(),\n-                                            indexDirectory.toURI().toURL().toString(), indexCreators );\n+            context = indexer.getIndexingContexts().get( repository.getId() );\n \n-            context.setSearchable( repository.isScanned() );\n+            if ( context == null )\n+            {\n+                context = indexer.addIndexingContext( repository.getId(), repository.getId(), managedRepository,\n+                                                      indexDirectory,\n+                                                      managedRepository.toURI().toURL().toExternalForm(),\n+                                                      indexDirectory.toURI().toURL().toString(), indexCreators );\n+\n+                context.setSearchable( repository.isScanned() );\n+            }\n             return context;\n         }\n         catch ( MalformedURLException e )"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/8f1ef26ead00f2449c857b6e47aeed826916c13e",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/dbc43a4e3cc7df19bc21c5248718965fb29d89a8",
        "message": "fix NPE when role doesn't have any users affected\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1227644 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_32",
        "file": [
            {
                "sha": "da7922d5994b1d5abaddef34eef4d8bfc8ea7f08",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/redback/roles.js",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/8f1ef26ead00f2449c857b6e47aeed826916c13e/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/redback/roles.js",
                "raw_url": "https://github.com/apache/archiva/raw/8f1ef26ead00f2449c857b6e47aeed826916c13e/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/redback/roles.js",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/redback/roles.js?ref=8f1ef26ead00f2449c857b6e47aeed826916c13e",
                "patch": "@@ -24,7 +24,7 @@ $(function() {\n     this.assignable = ko.observable(assignable);\n     this.childRoleNames = ko.observableArray(childRoleNames);//read only\n     this.parentRoleNames = ko.observableArray(parentRoleNames);//read only\n-    this.users = ko.observableArray(users);\n+    this.users = ko.observableArray(users?users:new Array());\n     this.parentsRolesUsers = ko.observableArray(parentsRolesUsers);//read only\n     this.permissions = ko.observableArray(permissions);//read only\n     // when editing a role other users not assign to this role are populated"
            },
            {
                "sha": "63dfdc29f07204c5842e50a61ea50ac80b2884d0",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/redback/templates/roles-tmpl.html",
                "status": "modified",
                "additions": 1,
                "deletions": 6,
                "changes": 7,
                "blob_url": "https://github.com/apache/archiva/blob/8f1ef26ead00f2449c857b6e47aeed826916c13e/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/redback/templates/roles-tmpl.html",
                "raw_url": "https://github.com/apache/archiva/raw/8f1ef26ead00f2449c857b6e47aeed826916c13e/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/redback/templates/roles-tmpl.html",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/redback/templates/roles-tmpl.html?ref=8f1ef26ead00f2449c857b6e47aeed826916c13e",
                "patch": "@@ -129,12 +129,9 @@ <h3>${$.i18n.prop('role.edit.users.defined.in.current.role')}</h3>\n     {{else}}\n       ${$.i18n.prop('role.edit.no.user.defined')}\n     {{/if}}\n-\n-    <input class=\"btn\" type=\"button\" id=\"role-list-users-update-mode\" data-bind=\"click: updateMode\" value=\"${$.i18n.prop('role.update.mode')}\"/>\n-\n   </div>\n \n-  <div id=\"role-edit-users\" class=\"clearfix ar-multiselect\" style=\"display:none\">\n+  <div id=\"role-edit-users\" class=\"clearfix ar-multiselect\">\n \n     <div class=\"ar-multiselect-column ar-multiselect-left\">\n     <select data-bind=\"options: otherUsers ,optionsText: 'username',selectedOptions:selectedOtherUsers\" multiple=\"true\" id=\"role-edit-available-users\"></select>\n@@ -149,8 +146,6 @@ <h3>${$.i18n.prop('role.edit.users.defined.in.current.role')}</h3>\n       <select data-bind=\"options: users ,optionsText: 'username',selectedOptions:selectedUsers\" multiple=\"true\" id=\"role-edit-affected-users\"></select>\n     </div>\n     <button class=\"btn\" id=\"role-edit-users-save\" data-bind=\"click: saveUsers\">${$.i18n.prop('save')}</button>\n-    <br/>\n-    <input class=\"btn\" id=\"role-edit-users-view-mode\" type=\"button\" data-bind=\"click: viewMode\" value=\"${$.i18n.prop('role.view.mode')}\"/>\n   </div>\n \n </script>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/546014d1946edb769bd6dceb7db53a6cd23a974e",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/c814b9b98136f9756bbf833aaff58a56034d014d",
        "message": "do not index directory in case of group: prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1196835 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_33",
        "file": [
            {
                "sha": "b99b2cf4d7cdb5ceeab072e7d70b22db28f22d23",
                "filename": "archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "status": "modified",
                "additions": 8,
                "deletions": 5,
                "changes": 13,
                "blob_url": "https://github.com/apache/archiva/blob/546014d1946edb769bd6dceb7db53a6cd23a974e/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "raw_url": "https://github.com/apache/archiva/raw/546014d1946edb769bd6dceb7db53a6cd23a974e/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java?ref=546014d1946edb769bd6dceb7db53a6cd23a974e",
                "patch": "@@ -951,12 +951,15 @@ private DavResource getResource( DavServletRequest request, List<String> reposit\n                 {\n                     // in case of group displaying index directory doesn't have sense !!\n                     String repoIndexDirectory = managedRepository.getRepository().getIndexDirectory();\n-                    if ( !new File( repoIndexDirectory ).isAbsolute() )\n+                    if ( StringUtils.isNotEmpty( repoIndexDirectory ) )\n                     {\n-                        repoIndexDirectory = new File( managedRepository.getRepository().getLocation(),\n-                                                       StringUtils.isEmpty( repoIndexDirectory )\n-                                                           ? \".indexer\"\n-                                                           : repoIndexDirectory ).getAbsolutePath();\n+                        if ( !new File( repoIndexDirectory ).isAbsolute() )\n+                        {\n+                            repoIndexDirectory = new File( managedRepository.getRepository().getLocation(),\n+                                                           StringUtils.isEmpty( repoIndexDirectory )\n+                                                               ? \".indexer\"\n+                                                               : repoIndexDirectory ).getAbsolutePath();\n+                        }\n                     }\n                     if ( StringUtils.isEmpty( repoIndexDirectory ) )\n                     {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/c98687154cd8fd6e255bd818cfb6c658ef0ce43e",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/403c5e5535b65bb7559e880485e272353aebb304",
        "message": "fix NPE in ArtifactLocator during scanning\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1179990 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_34",
        "file": [
            {
                "sha": "965aa49f48879d38925236f5df9b5b56ac989e07",
                "filename": "archiva-modules/archiva-base/archiva-indexer/src/main/java/org/apache/archiva/indexer/search/NexusRepositorySearch.java",
                "status": "modified",
                "additions": 6,
                "deletions": 1,
                "changes": 7,
                "blob_url": "https://github.com/apache/archiva/blob/c98687154cd8fd6e255bd818cfb6c658ef0ce43e/archiva-modules/archiva-base/archiva-indexer/src/main/java/org/apache/archiva/indexer/search/NexusRepositorySearch.java",
                "raw_url": "https://github.com/apache/archiva/raw/c98687154cd8fd6e255bd818cfb6c658ef0ce43e/archiva-modules/archiva-base/archiva-indexer/src/main/java/org/apache/archiva/indexer/search/NexusRepositorySearch.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-indexer/src/main/java/org/apache/archiva/indexer/search/NexusRepositorySearch.java?ref=c98687154cd8fd6e255bd818cfb6c658ef0ce43e",
                "patch": "@@ -34,6 +34,9 @@\n import org.apache.maven.index.ArtifactInfo;\n import org.apache.maven.index.FlatSearchRequest;\n import org.apache.maven.index.FlatSearchResponse;\n+import org.apache.maven.index.GroupedSearchRequest;\n+import org.apache.maven.index.Grouping;\n+import org.apache.maven.index.IteratorSearchRequest;\n import org.apache.maven.index.MAVEN;\n import org.apache.maven.index.NexusIndexer;\n import org.apache.maven.index.OSGI;\n@@ -235,8 +238,10 @@ private SearchResults search( SearchResultLimits limits, BooleanQuery q, List<St\n         {\n             FlatSearchRequest request = new FlatSearchRequest( q );\n             request.setContexts( getIndexingContexts( indexingContextIds ) );\n+\n             FlatSearchResponse response = indexer.searchFlat( request );\n \n+\n             if ( response == null || response.getTotalHits() == 0 )\n             {\n                 SearchResults results = new SearchResults();\n@@ -590,7 +595,7 @@ private boolean applyArtifactInfoFilters( ArtifactInfo artifactInfo,\n         return true;\n     }\n \n-    private SearchResults paginate( SearchResults results )\n+    protected SearchResults paginate( SearchResults results )\n     {\n         SearchResultLimits limits = results.getLimits();\n         SearchResults paginated = new SearchResults();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/031f607b735abf81e5415fbbdf6b55e01c2e368b",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/b719ecb81801d0ea69bcf5ece393d731cbe4d4f1",
        "message": "[MRM-1303] fixed npe in delete artifact + unit test\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1031518 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_35",
        "file": [
            {
                "sha": "83ff863b3352e309ef4470a7987fe4240229ce52",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/DeleteArtifactAction.java",
                "status": "modified",
                "additions": 16,
                "deletions": 1,
                "changes": 17,
                "blob_url": "https://github.com/apache/archiva/blob/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/DeleteArtifactAction.java",
                "raw_url": "https://github.com/apache/archiva/raw/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/DeleteArtifactAction.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/DeleteArtifactAction.java?ref=031f607b735abf81e5415fbbdf6b55e01c2e368b",
                "patch": "@@ -339,7 +339,7 @@ private void updateMetadata( ArchivaRepositoryMetadata metadata, File metadataFi\n \n         if ( !VersionUtil.isSnapshot( version ) )\n         {\n-            if ( metadata.getReleasedVersion().equals( version ) )\n+            if ( metadata.getReleasedVersion() != null && metadata.getReleasedVersion().equals( version ) )\n             {\n                 metadata.setReleasedVersion( latestVersion );\n             }\n@@ -404,4 +404,19 @@ public void validate()\n     {\n         return listeners;\n     }\n+\n+    public void setRepositoryFactory( RepositoryContentFactory repositoryFactory )\n+    {\n+        this.repositoryFactory = repositoryFactory;\n+    }\n+\n+    public void setConfiguration( ArchivaConfiguration configuration )\n+    {\n+        this.configuration = configuration;\n+    }\n+\n+    public void setMetadataRepository( MetadataRepository metadataRepository )\n+    {\n+        this.metadataRepository = metadataRepository;\n+    }\n }"
            },
            {
                "sha": "cc478358e562d90b99e8c8684054321bf896556e",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/action/DeleteArtifactActionTest.java",
                "status": "modified",
                "additions": 122,
                "deletions": 2,
                "changes": 124,
                "blob_url": "https://github.com/apache/archiva/blob/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/action/DeleteArtifactActionTest.java",
                "raw_url": "https://github.com/apache/archiva/raw/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/action/DeleteArtifactActionTest.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/action/DeleteArtifactActionTest.java?ref=031f607b735abf81e5415fbbdf6b55e01c2e368b",
                "patch": "@@ -20,17 +20,137 @@\n  */\n \n import com.opensymphony.xwork2.Action;\n+import org.apache.archiva.metadata.model.ArtifactMetadata;\n+import org.apache.archiva.metadata.repository.MetadataRepository;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.maven.archiva.configuration.ArchivaConfiguration;\n+import org.apache.maven.archiva.configuration.Configuration;\n+import org.apache.maven.archiva.configuration.ManagedRepositoryConfiguration;\n+import org.apache.maven.archiva.repository.ManagedRepositoryContent;\n+import org.apache.maven.archiva.repository.RepositoryContentFactory;\n+import org.apache.maven.archiva.repository.content.ManagedDefaultRepositoryContent;\n import org.codehaus.plexus.spring.PlexusInSpringTestCase;\n+import org.easymock.MockControl;\n+import org.easymock.classextension.MockClassControl;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collection;\n \n public class DeleteArtifactActionTest\n     extends PlexusInSpringTestCase\n {\n-    public void testGetListeners()\n+    private DeleteArtifactAction action;\n+\n+    private ArchivaConfiguration configuration;\n+\n+    private MockControl configurationControl;\n+\n+    private RepositoryContentFactory repositoryFactory;\n+\n+    private MockControl repositoryFactoryControl;\n+\n+    private MetadataRepository metadataRepository;\n+\n+    private MockControl metadataRepositoryControl;\n+\n+    private static final String REPOSITORY_ID = \"test-repo\";\n+\n+    private static final String GROUP_ID = \"org.apache.archiva\";\n+\n+    private static final String ARTIFACT_ID = \"npe-metadata\";\n+\n+    private static final String VERSION = \"1.0\";\n+\n+    private static final String REPO_LOCATION = getBasedir() + \"/target/test-classes/test-repo\";\n+\n+    @Override\n+    protected void setUp()\n         throws Exception\n     {\n-        DeleteArtifactAction action = (DeleteArtifactAction) lookup( Action.class.getName(), \"deleteArtifactAction\" );\n+        super.setUp();\n+\n+        action = (DeleteArtifactAction) lookup( Action.class.getName(), \"deleteArtifactAction\" );\n         assertNotNull( action );\n+\n+        configurationControl = MockControl.createControl( ArchivaConfiguration.class );\n+        configuration = ( ArchivaConfiguration ) configurationControl.getMock();\n+\n+        repositoryFactoryControl = MockClassControl.createControl( RepositoryContentFactory.class );\n+        repositoryFactory = ( RepositoryContentFactory ) repositoryFactoryControl.getMock();\n+\n+        metadataRepositoryControl = MockControl.createControl( MetadataRepository.class );\n+        metadataRepository = ( MetadataRepository ) metadataRepositoryControl.getMock();\n+\n+        action.setConfiguration( configuration );\n+        action.setRepositoryFactory( repositoryFactory );\n+        action.setMetadataRepository( metadataRepository );\n+    }\n+\n+    @Override\n+    protected void tearDown()\n+        throws Exception\n+    {\n+        action = null;\n+        \n+        super.tearDown();\n+    }\n+\n+    public void testGetListeners()\n+        throws Exception\n+    {\n         assertNotNull( action.getListeners() );\n         assertFalse( action.getListeners().isEmpty() );\n     }\n+\n+    public void testNPEInDeleteArtifact()\n+        throws Exception\n+    {\n+        action.setGroupId( GROUP_ID );\n+        action.setArtifactId( ARTIFACT_ID );\n+        action.setVersion( VERSION );\n+        action.setRepositoryId( REPOSITORY_ID );\n+\n+        Configuration config = createConfiguration();\n+\n+        ManagedRepositoryContent repoContent = new ManagedDefaultRepositoryContent();\n+        repoContent.setRepository( config.findManagedRepositoryById( REPOSITORY_ID ) );\n+\n+        configurationControl.expectAndReturn( configuration.getConfiguration(), config );\n+        repositoryFactoryControl.expectAndReturn( repositoryFactory.getManagedRepositoryContent( REPOSITORY_ID ), repoContent );\n+        metadataRepositoryControl.expectAndReturn( metadataRepository.getArtifacts( REPOSITORY_ID, GROUP_ID, ARTIFACT_ID, VERSION ),\n+                                                   new ArrayList<ArtifactMetadata>() );\n+\n+        configurationControl.replay();\n+        repositoryFactoryControl.replay();\n+        metadataRepositoryControl.replay();\n+\n+        action.doDelete();\n+\n+        String artifactPath = REPO_LOCATION + \"/\" + StringUtils.replace( GROUP_ID, \".\", \"/\" ) + \"/\" +\n+            StringUtils.replace( ARTIFACT_ID, \".\", \"/\" ) + \"/\" + VERSION + \"/\" + ARTIFACT_ID + \"-\" + VERSION;\n+\n+        assertFalse( new File( artifactPath + \".jar\" ).exists() );\n+        assertFalse( new File( artifactPath + \".jar.sha1\" ).exists() );\n+        assertFalse( new File( artifactPath + \".jar.md5\" ).exists() );\n+        \n+        assertFalse( new File( artifactPath + \".pom\" ).exists() );\n+        assertFalse( new File( artifactPath + \".pom.sha1\" ).exists() );\n+        assertFalse( new File( artifactPath + \".pom.md5\" ).exists() );\n+    }\n+\n+    private Configuration createConfiguration()\n+    {\n+        ManagedRepositoryConfiguration managedRepo = new ManagedRepositoryConfiguration();\n+        managedRepo.setId( REPOSITORY_ID );\n+        managedRepo.setName( \"Test Repository\" );\n+\n+        managedRepo.setLocation( REPO_LOCATION );\n+        managedRepo.setReleases( true );\n+\n+        Configuration config = new Configuration();\n+        config.addManagedRepository( managedRepo );\n+\n+        return config;\n+    }\n }"
            },
            {
                "sha": "0464407c2feb2d4cc9a6b6c19a137e9676908b74",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.jar",
                "status": "added",
                "additions": 0,
                "deletions": 0,
                "changes": 0,
                "blob_url": "https://github.com/apache/archiva/blob/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.jar",
                "raw_url": "https://github.com/apache/archiva/raw/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.jar",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.jar?ref=031f607b735abf81e5415fbbdf6b55e01c2e368b"
            },
            {
                "sha": "29ab7cbb5541d1ae18d1103f7848b60e4a0298e4",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.jar.md5",
                "status": "added",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/archiva/blob/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.jar.md5",
                "raw_url": "https://github.com/apache/archiva/raw/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.jar.md5",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.jar.md5?ref=031f607b735abf81e5415fbbdf6b55e01c2e368b",
                "patch": "@@ -0,0 +1 @@\n+5b0e72a002c047e2f200855f6d904a7e\n\\ No newline at end of file"
            },
            {
                "sha": "898bb7519cb990e099cedc41ab0c560bf7e562c9",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.jar.sha1",
                "status": "added",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/archiva/blob/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.jar.sha1",
                "raw_url": "https://github.com/apache/archiva/raw/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.jar.sha1",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.jar.sha1?ref=031f607b735abf81e5415fbbdf6b55e01c2e368b",
                "patch": "@@ -0,0 +1 @@\n+9b3ed9b1a8f1639bcc6a6986930d71a2996ba2fe\n\\ No newline at end of file"
            },
            {
                "sha": "143bd719d4cd8689990a1710235c5990050fcaa2",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.pom",
                "status": "added",
                "additions": 8,
                "deletions": 0,
                "changes": 8,
                "blob_url": "https://github.com/apache/archiva/blob/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.pom",
                "raw_url": "https://github.com/apache/archiva/raw/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.pom",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.pom?ref=031f607b735abf81e5415fbbdf6b55e01c2e368b",
                "patch": "@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>org.apache.archiva</groupId>\n+  <artifactId>npe-metadata</artifactId>\n+  <version>1.0</version>\n+</project>"
            },
            {
                "sha": "c835b0b7671fb118e97c02b4b3f7f6f66491d99f",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.pom.md5",
                "status": "added",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/archiva/blob/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.pom.md5",
                "raw_url": "https://github.com/apache/archiva/raw/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.pom.md5",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.pom.md5?ref=031f607b735abf81e5415fbbdf6b55e01c2e368b",
                "patch": "@@ -0,0 +1 @@\n+30124c5194a639f12a2fb01e7aa5a952\n\\ No newline at end of file"
            },
            {
                "sha": "274871d24ea697c8bfb3c537aad79f2b527c121a",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.pom.sha1",
                "status": "added",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/archiva/blob/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.pom.sha1",
                "raw_url": "https://github.com/apache/archiva/raw/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.pom.sha1",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/1.0/npe-metadata-1.0.pom.sha1?ref=031f607b735abf81e5415fbbdf6b55e01c2e368b",
                "patch": "@@ -0,0 +1 @@\n+83bee18c83a6f4964026587cc4ccffe653c45d0c\n\\ No newline at end of file"
            },
            {
                "sha": "c999862ffb718b2f82964fc2911247958d65f979",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/maven-metadata.xml",
                "status": "added",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/archiva/blob/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/maven-metadata.xml",
                "raw_url": "https://github.com/apache/archiva/raw/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/maven-metadata.xml",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/maven-metadata.xml?ref=031f607b735abf81e5415fbbdf6b55e01c2e368b",
                "patch": "@@ -0,0 +1,12 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<metadata>\n+  <groupId>org.apache.archiva</groupId>\n+  <artifactId>npe-metadata</artifactId>\n+  <version>1.0</version>\n+  <versioning>\n+    <versions>\n+      <version>1.0</version>\n+    </versions>\n+    <lastUpdated>20101105071933</lastUpdated>\n+  </versioning>\n+</metadata>"
            },
            {
                "sha": "c73f5bc105c7c867f256f59c61d1f5d29a9ad87b",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/maven-metadata.xml.md5",
                "status": "added",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/archiva/blob/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/maven-metadata.xml.md5",
                "raw_url": "https://github.com/apache/archiva/raw/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/maven-metadata.xml.md5",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/maven-metadata.xml.md5?ref=031f607b735abf81e5415fbbdf6b55e01c2e368b",
                "patch": "@@ -0,0 +1 @@\n+6b4a71798c8fcb45ee0411cc9cf68064\n\\ No newline at end of file"
            },
            {
                "sha": "76091f5fac1f101cb2bf6688cf09e459ad70333d",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/maven-metadata.xml.sha1",
                "status": "added",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/archiva/blob/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/maven-metadata.xml.sha1",
                "raw_url": "https://github.com/apache/archiva/raw/031f607b735abf81e5415fbbdf6b55e01c2e368b/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/maven-metadata.xml.sha1",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/resources/test-repo/org/apache/archiva/npe-metadata/maven-metadata.xml.sha1?ref=031f607b735abf81e5415fbbdf6b55e01c2e368b",
                "patch": "@@ -0,0 +1 @@\n+33c6dbdfdb263c394082d56e349d36e893ead06f\n\\ No newline at end of file"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/63555143b21f0de7fd3735d7a9e52e0ce3d2a450",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/a88253bafe407ce8ff6cc0a850f167fd35786711",
        "message": "guard against NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@630842 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_36",
        "file": [
            {
                "sha": "3c28cec2c110040370f87f4eb946d8f57822fc09",
                "filename": "archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ArtifactExtensionMapping.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/archiva/blob/63555143b21f0de7fd3735d7a9e52e0ce3d2a450/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ArtifactExtensionMapping.java",
                "raw_url": "https://github.com/apache/archiva/raw/63555143b21f0de7fd3735d7a9e52e0ce3d2a450/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ArtifactExtensionMapping.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ArtifactExtensionMapping.java?ref=63555143b21f0de7fd3735d7a9e52e0ce3d2a450",
                "patch": "@@ -93,15 +93,15 @@ else if ( \"javadoc\".equals( classifier ) )\n \n     public static String mapExtensionToType( String extension )\n     {\n-        if ( extension.equals( \"tar.gz\" ) )\n+        if ( \"tar.gz\".equals( extension ) )\n         {\n             return \"distribution-tgz\";\n         }\n-        else  if ( extension.equals( \"tar.bz2\" ) )\n+        else  if ( \"tar.bz2\".equals( extension ) )\n         {\n             return \"distribution-bzip\";\n         }\n-        else  if ( extension.equals( \"zip\" ) )\n+        else  if ( \"zip\".equals( extension ) )\n         {\n             return \"distribution-zip\";\n         }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/46c2f650b344d06f813d1370ca4e5d702a4c75ee",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/9aa41ce31bdb3161d0a60482e0a7148e57b74056",
        "message": "Fixing test case NPE wrt repo.location.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@583652 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_37",
        "file": [
            {
                "sha": "28856ef6f0a9a680abfb38969ecadd0ae856481b",
                "filename": "archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/46c2f650b344d06f813d1370ca4e5d702a4c75ee/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "raw_url": "https://github.com/apache/archiva/raw/46c2f650b344d06f813d1370ca4e5d702a4c75ee/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java?ref=46c2f650b344d06f813d1370ca4e5d702a4c75ee",
                "patch": "@@ -111,7 +111,7 @@ public synchronized ManagedRepositoryConfiguration getRepository( String prefix\n     {\n         if ( repositoryMap.isEmpty() )\n         {\n-            repositoryMap = configuration.getConfiguration().getManagedRepositoriesAsMap();\n+            repositoryMap.putAll( configuration.getConfiguration().getManagedRepositoriesAsMap() );\n         }\n         return repositoryMap.get( prefix );\n     }"
            },
            {
                "sha": "604e2b4323790d03a4e687f437c9321e8de1a9b2",
                "filename": "archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/repository/RepositoryServletTest.java",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/archiva/blob/46c2f650b344d06f813d1370ca4e5d702a4c75ee/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/repository/RepositoryServletTest.java",
                "raw_url": "https://github.com/apache/archiva/raw/46c2f650b344d06f813d1370ca4e5d702a4c75ee/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/repository/RepositoryServletTest.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/repository/RepositoryServletTest.java?ref=46c2f650b344d06f813d1370ca4e5d702a4c75ee",
                "patch": "@@ -124,6 +124,12 @@ public void testGetRepositoryAfterAdd()\n         ManagedRepositoryConfiguration repo = new ManagedRepositoryConfiguration();\n         repo.setId( NEW_REPOSITORY_ID );\n         repo.setName( NEW_REPOSITORY_NAME );\n+        File repoRoot = new File( getBasedir(), \"target/test-repository-root\" );\n+        if ( !repoRoot.exists() )\n+        {\n+            repoRoot.mkdirs();\n+        }\n+        repo.setLocation( repoRoot.getAbsolutePath() );\n         c.addManagedRepository( repo );\n         // TODO it would be better to use a mock configuration and \"save\" to more accurately reflect the calls made\n         servlet.configurationEvent( new ConfigurationEvent( ConfigurationEvent.SAVED) );"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/7de944c47c3603f0a1f7731cb0b6b4d64c2d30b1",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/db42cac59301d92dfb9d9401d5b9a0267bb87e6f",
        "message": "Fix NPE when file is a root file\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@497811 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_38",
        "file": [
            {
                "sha": "911f7eb87ad6ccb82b4f04cf8cb5123cadb90985",
                "filename": "archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultConfigurationStore.java",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "blob_url": "https://github.com/apache/archiva/blob/7de944c47c3603f0a1f7731cb0b6b4d64c2d30b1/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultConfigurationStore.java",
                "raw_url": "https://github.com/apache/archiva/raw/7de944c47c3603f0a1f7731cb0b6b4d64c2d30b1/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultConfigurationStore.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultConfigurationStore.java?ref=7de944c47c3603f0a1f7731cb0b6b4d64c2d30b1",
                "patch": "@@ -158,7 +158,11 @@ public void storeConfiguration( Configuration configuration )\n         FileWriter fileWriter = null;\n         try\n         {\n-            file.getParentFile().mkdirs();\n+            //does file directory exist ?\n+            if ( file.getParentFile() != null && !file.getParentFile().exists() )\n+            {\n+                file.getParentFile().mkdirs();\n+            }\n \n             fileWriter = new FileWriter( file );\n             writer.write( fileWriter, configuration );"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/7f606ec6571ac698dffcde8801300c44ac811134",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/bb5af95ff14d35d795c7055f843ea40fbb448993",
        "message": "Fix NPE when repository path contains spaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@454323 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_39",
        "file": [
            {
                "sha": "df1946ccb6a0ecf7c8c84ca5d5c400aa39b69cfa",
                "filename": "archiva-core/src/main/java/org/apache/maven/archiva/configuration/DefaultConfiguredRepositoryFactory.java",
                "status": "modified",
                "additions": 8,
                "deletions": 0,
                "changes": 8,
                "blob_url": "https://github.com/apache/archiva/blob/7f606ec6571ac698dffcde8801300c44ac811134/archiva-core/src/main/java/org/apache/maven/archiva/configuration/DefaultConfiguredRepositoryFactory.java",
                "raw_url": "https://github.com/apache/archiva/raw/7f606ec6571ac698dffcde8801300c44ac811134/archiva-core/src/main/java/org/apache/maven/archiva/configuration/DefaultConfiguredRepositoryFactory.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-core/src/main/java/org/apache/maven/archiva/configuration/DefaultConfiguredRepositoryFactory.java?ref=7f606ec6571ac698dffcde8801300c44ac811134",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.maven.artifact.repository.ArtifactRepositoryFactory;\n import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.codehaus.plexus.util.StringUtils;\n \n import java.io.File;\n import java.util.ArrayList;\n@@ -52,6 +53,13 @@ public ArtifactRepository createRepository( RepositoryConfiguration configuratio\n         File repositoryDirectory = new File( configuration.getDirectory() );\n         String repoDir = repositoryDirectory.toURI().toString();\n \n+        //workaround for spaces non converted by PathUtils in wagon\n+        //todo: remove it when PathUtils will be fixed\n+        if ( repoDir.indexOf( \"%20\" ) >= 0 )\n+        {\n+            repoDir = StringUtils.replace( repoDir, \"%20\", \" \" );\n+        }\n+\n         ArtifactRepositoryLayout layout = (ArtifactRepositoryLayout) repositoryLayouts.get( configuration.getLayout() );\n         return repoFactory.createArtifactRepository( configuration.getId(), repoDir, layout, null, null );\n     }"
            },
            {
                "sha": "10276a640e9b339f3e0ab8fa5e2a983dc2b897ce",
                "filename": "archiva-discoverer/src/main/java/org/apache/maven/archiva/discoverer/AbstractDiscoverer.java",
                "status": "modified",
                "additions": 2,
                "deletions": 10,
                "changes": 12,
                "blob_url": "https://github.com/apache/archiva/blob/7f606ec6571ac698dffcde8801300c44ac811134/archiva-discoverer/src/main/java/org/apache/maven/archiva/discoverer/AbstractDiscoverer.java",
                "raw_url": "https://github.com/apache/archiva/raw/7f606ec6571ac698dffcde8801300c44ac811134/archiva-discoverer/src/main/java/org/apache/maven/archiva/discoverer/AbstractDiscoverer.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-discoverer/src/main/java/org/apache/maven/archiva/discoverer/AbstractDiscoverer.java?ref=7f606ec6571ac698dffcde8801300c44ac811134",
                "patch": "@@ -104,16 +104,8 @@ protected List scanForArtifactPaths( File repositoryBase, List blacklistedPatter\n         }\n \n         DirectoryScanner scanner = new DirectoryScanner();\n-        try\n-        {\n-            //Fix FNFE when repositoryBase contain spaces\n-            //TODO: move this code in DirectoryScanner.setBasedir()\n-            scanner.setBasedir( repositoryBase.getCanonicalFile() );\n-        }\n-        catch( IOException e )\n-        {\n-            scanner.setBasedir( repositoryBase );\n-        }\n+\n+        scanner.setBasedir( repositoryBase );\n \n         if ( includes != null )\n         {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/ba1c2854a0d44df1cc45084b25b4630ce9641d63",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/63938bfb4774b0f4fa935990573e254cbf8593b2",
        "message": "use an utility methods to prevent npe when column values does not exist for a row\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1580688 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_40",
        "file": [
            {
                "sha": "e119116718b2ba6060e53981f8af95847daf65d7",
                "filename": "archiva-modules/metadata/metadata-repository-api/src/test/java/org/apache/archiva/metadata/repository/AbstractMetadataRepositoryTest.java",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/archiva/blob/ba1c2854a0d44df1cc45084b25b4630ce9641d63/archiva-modules/metadata/metadata-repository-api/src/test/java/org/apache/archiva/metadata/repository/AbstractMetadataRepositoryTest.java",
                "raw_url": "https://github.com/apache/archiva/raw/ba1c2854a0d44df1cc45084b25b4630ce9641d63/archiva-modules/metadata/metadata-repository-api/src/test/java/org/apache/archiva/metadata/repository/AbstractMetadataRepositoryTest.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/metadata/metadata-repository-api/src/test/java/org/apache/archiva/metadata/repository/AbstractMetadataRepositoryTest.java?ref=ba1c2854a0d44df1cc45084b25b4630ce9641d63",
                "patch": "@@ -424,14 +424,16 @@ public void testUpdateProjectVersionMetadataWithNoExistingFacets()\n         repository.updateProjectVersion( TEST_REPO_ID, TEST_NAMESPACE, TEST_PROJECT, metadata );\n \n         metadata = repository.getProjectVersion( TEST_REPO_ID, TEST_NAMESPACE, TEST_PROJECT, TEST_PROJECT_VERSION );\n-        assertEquals( Collections.<String>emptyList(), new ArrayList<String>( metadata.getFacetIds() ) );\n+\n+        Assertions.assertThat( metadata.getFacetIds() ).isNotNull().isEmpty();\n \n         metadata = new ProjectVersionMetadata();\n         metadata.setId( TEST_PROJECT_VERSION );\n         repository.updateProjectVersion( TEST_REPO_ID, TEST_NAMESPACE, TEST_PROJECT, metadata );\n \n         metadata = repository.getProjectVersion( TEST_REPO_ID, TEST_NAMESPACE, TEST_PROJECT, TEST_PROJECT_VERSION );\n-        assertEquals( Collections.<String>emptyList(), new ArrayList<String>( metadata.getFacetIds() ) );\n+        Assertions.assertThat( metadata.getFacetIds() ).isNotNull().isEmpty();\n+\n     }\n \n     @Test"
            },
            {
                "sha": "bf1ba51cdeb918f67d45b48242716eb87972f309",
                "filename": "archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "status": "modified",
                "additions": 104,
                "deletions": 179,
                "changes": 283,
                "blob_url": "https://github.com/apache/archiva/blob/ba1c2854a0d44df1cc45084b25b4630ce9641d63/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "raw_url": "https://github.com/apache/archiva/raw/ba1c2854a0d44df1cc45084b25b4630ce9641d63/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java?ref=ba1c2854a0d44df1cc45084b25b4630ce9641d63",
                "patch": "@@ -72,7 +72,7 @@\n import java.util.Map;\n import java.util.Set;\n \n-import static org.apache.archiva.metadata.repository.cassandra.CassandraUtils.column;\n+import static org.apache.archiva.metadata.repository.cassandra.CassandraUtils.*;\n \n /**\n  * @author Olivier Lamy\n@@ -161,8 +161,7 @@ public Repository getOrCreateRepository( String repositoryId )\n             try\n             {\n                 MutationResult mutationResult = HFactory.createMutator( keyspace, StringSerializer.get() ) //\n-                    .addInsertion( repositoryId, //\n-                                   cf, //\n+                    .addInsertion( repositoryId, cf,\n                                    CassandraUtils.column( \"repositoryName\", repository.getName() ) ) //\n                     .execute();\n                 return repository;\n@@ -220,12 +219,8 @@ public Namespace updateOrAddNamespace( String repositoryId, String namespaceId )\n                 namespace = new Namespace( namespaceId, repository );\n                 HFactory.createMutator( keyspace, StringSerializer.get() )\n                     //  values\n-                    .addInsertion( key, //\n-                                   cf, //\n-                                   CassandraUtils.column( \"name\", namespace.getName() ) ) //\n-                    .addInsertion( key, //\n-                                   cf, //\n-                                   CassandraUtils.column( \"repositoryName\", repository.getName() ) ) //\n+                    .addInsertion( key, cf, CassandraUtils.column( \"name\", namespace.getName() ) ) //\n+                    .addInsertion( key, cf, CassandraUtils.column( \"repositoryName\", repository.getName() ) ) //\n                     .execute();\n             }\n \n@@ -254,8 +249,8 @@ protected Namespace getNamespace( String repositoryId, String namespaceId )\n         if ( result.get().getCount() > 0 )\n         {\n             ColumnSlice<String, String> columnSlice = result.get().getList().get( 0 ).getColumnSlice();\n-            return new Namespace( columnSlice.getColumnByName( \"name\" ).getValue(), //\n-                                  new Repository( columnSlice.getColumnByName( \"repositoryName\" ).getValue() ) );\n+            return new Namespace( getStringValue( columnSlice, \"name\" ), //\n+                                  new Repository( getStringValue( columnSlice, \"repositoryName\" ) ) );\n \n         }\n         return null;\n@@ -441,7 +436,7 @@ public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )\n \n             for ( Row<String, String, String> row : cResult.get() )\n             {\n-                repoIds.add( row.getColumnSlice().getColumnByName( \"repositoryName\" ).getValue() );\n+                repoIds.add( getStringValue( row.getColumnSlice(), \"repositoryName\" ) );\n             }\n \n             return repoIds;\n@@ -458,12 +453,10 @@ public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )\n     public Collection<String> getRootNamespaces( final String repoId )\n         throws MetadataResolutionException\n     {\n+        StringSerializer ss = StringSerializer.get();\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getNamespaceFamilyName() ) //\n             .setColumnNames( \"name\" ) //\n             .addEqualsExpression( \"repositoryName\", repoId ) //\n@@ -473,8 +466,7 @@ public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )\n \n         for ( Row<String, String, String> row : result.get() )\n         {\n-            namespaces.add(\n-                StringUtils.substringBefore( row.getColumnSlice().getColumnByName( \"name\" ).getValue(), \".\" ) );\n+            namespaces.add( StringUtils.substringBefore( getStringValue( row.getColumnSlice(), \"name\" ), \".\" ) );\n         }\n \n         return namespaces;\n@@ -485,12 +477,10 @@ public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )\n     public Collection<String> getNamespaces( final String repoId, final String namespaceId )\n         throws MetadataResolutionException\n     {\n+        StringSerializer ss = StringSerializer.get();\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getNamespaceFamilyName() ) //\n             .setColumnNames( \"name\" ) //\n             .addEqualsExpression( \"repositoryName\", repoId ) //\n@@ -500,9 +490,9 @@ public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )\n \n         for ( Row<String, String, String> row : result.get() )\n         {\n-            String currentNamespace = row.getColumnSlice().getColumnByName( \"name\" ).getValue();\n-            if ( StringUtils.startsWith( currentNamespace, namespaceId ) && ( StringUtils.length( currentNamespace )\n-                > StringUtils.length( namespaceId ) ) )\n+            String currentNamespace = getStringValue( row.getColumnSlice(), \"name\" );\n+            if ( StringUtils.startsWith( currentNamespace, namespaceId ) //\n+                && ( StringUtils.length( currentNamespace ) > StringUtils.length( namespaceId ) ) )\n             {\n                 // store after namespaceId '.' but before next '.'\n                 // call org namespace org.apache.maven.shared -> stored apache\n@@ -524,12 +514,10 @@ public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )\n     public List<String> getNamespaces( final String repoId )\n         throws MetadataResolutionException\n     {\n+        StringSerializer ss = StringSerializer.get();\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getNamespaceFamilyName() ) //\n             .setColumnNames( \"name\" ) //\n             .addEqualsExpression( \"repositoryName\", repoId ) //\n@@ -539,7 +527,7 @@ public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )\n \n         for ( Row<String, String, String> row : result.get() )\n         {\n-            namespaces.add( row.getColumnSlice().getColumnByName( \"name\" ).getValue() );\n+            namespaces.add( getStringValue( row.getColumnSlice(), \"name\" ) );\n         }\n \n         return namespaces;\n@@ -551,12 +539,10 @@ public void updateProject( String repositoryId, ProjectMetadata projectMetadata\n         throws MetadataRepositoryException\n     {\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n+        StringSerializer ss = StringSerializer.get();\n \n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getProjectFamilyName() ) //\n             .setColumnNames( \"projectId\" ) //\n             .addEqualsExpression( \"repositoryName\", repositoryId ) //\n@@ -579,15 +565,9 @@ public void updateProject( String repositoryId, ProjectMetadata projectMetadata\n             String cf = cassandraArchivaManager.getProjectFamilyName();\n             projectTemplate.createMutator()\n                 //  values\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"projectId\", projectMetadata.getId() ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"repositoryName\", repositoryId ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"namespaceId\", projectMetadata.getNamespace() ) )//\n+                .addInsertion( key, cf, CassandraUtils.column( \"projectId\", projectMetadata.getId() ) ) //\n+                .addInsertion( key, cf, CassandraUtils.column( \"repositoryName\", repositoryId ) ) //\n+                .addInsertion( key, cf, CassandraUtils.column( \"namespaceId\", projectMetadata.getNamespace() ) )//\n                 .execute();\n         }\n     }\n@@ -598,12 +578,9 @@ public void updateProject( String repositoryId, ProjectMetadata projectMetadata\n     {\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getProjectFamilyName() ) //\n             .setColumnNames( \"projectId\" ) //\n             .addEqualsExpression( \"repositoryName\", repoId ) //\n@@ -614,7 +591,7 @@ public void updateProject( String repositoryId, ProjectMetadata projectMetadata\n \n         for ( Row<String, String, String> row : result.get() )\n         {\n-            projects.add( row.getColumnSlice().getColumnByName( \"projectId\" ).getValue() );\n+            projects.add( getStringValue( row.getColumnSlice(), \"projectId\" ) );\n         }\n \n         return projects;\n@@ -625,7 +602,7 @@ public void removeProject( final String repositoryId, final String namespaceId,\n         throws MetadataRepositoryException\n     {\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         String key = new Project.KeyBuilder() //\n             .withProjectId( projectId ) //\n             .withNamespace( new Namespace( namespaceId, new Repository( repositoryId ) ) ) //\n@@ -638,10 +615,7 @@ public void removeProject( final String repositoryId, final String namespaceId,\n         this.projectTemplate.deleteRow( key );\n \n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getProjectVersionMetadataModelFamilyName() ) //\n             .setColumnNames( \"id\" ) //\n             .addEqualsExpression( \"repositoryName\", repositoryId ) //\n@@ -688,12 +662,9 @@ public Boolean apply( ArtifactMetadataModel artifactMetadataModel )\n     {\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getProjectVersionMetadataModelFamilyName() ) //\n             .setColumnNames( \"id\" ) //\n             .addEqualsExpression( \"repositoryName\", repoId ) //\n@@ -712,7 +683,7 @@ public Boolean apply( ArtifactMetadataModel artifactMetadataModel )\n \n         for ( Row<String, String, String> orderedRows : result.get() )\n         {\n-            versions.add( orderedRows.getColumnSlice().getColumnByName( \"id\" ).getValue() );\n+            versions.add( getStringValue( orderedRows.getColumnSlice(), \"id\" ) );\n         }\n \n         return versions;\n@@ -725,12 +696,9 @@ public ProjectMetadata getProject( final String repoId, final String namespace,\n     {\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getProjectFamilyName() ) //\n             .setColumnNames( \"projectId\" ) //\n             .addEqualsExpression( \"repositoryName\", repoId ) //\n@@ -758,17 +726,18 @@ public ProjectMetadata getProject( final String repoId, final String namespace,\n     protected ProjectVersionMetadataModel map( ColumnSlice<String, String> columnSlice )\n     {\n         ProjectVersionMetadataModel projectVersionMetadataModel = new ProjectVersionMetadataModel();\n-        projectVersionMetadataModel.setId( columnSlice.getColumnByName( \"id\" ).getValue() );\n-        projectVersionMetadataModel.setDescription( columnSlice.getColumnByName( \"description\" ).getValue() );\n-        projectVersionMetadataModel.setName( columnSlice.getColumnByName( \"name\" ).getValue() );\n-        projectVersionMetadataModel.setNamespace(\n-            new Namespace( columnSlice.getColumnByName( \"namespaceId\" ).getValue(), //\n-                           new Repository( columnSlice.getColumnByName( \"repositoryName\" ).getValue() ) )\n+        projectVersionMetadataModel.setId( getStringValue( columnSlice, \"id\" ) );\n+        projectVersionMetadataModel.setDescription( getStringValue( columnSlice, \"description\" ) );\n+        projectVersionMetadataModel.setName( getStringValue( columnSlice, \"name\" ) );\n+        projectVersionMetadataModel.setNamespace( new Namespace( getStringValue( columnSlice, \"namespaceId\" ), //\n+                                                                 new Repository(\n+                                                                     getStringValue( columnSlice, \"repositoryName\" ) )\n+                                                  )\n         );\n         projectVersionMetadataModel.setIncomplete(\n-            Boolean.parseBoolean( columnSlice.getColumnByName( \"incomplete\" ).getValue() ) );\n-        projectVersionMetadataModel.setProjectId( columnSlice.getColumnByName( \"projectId\" ).getValue() );\n-        projectVersionMetadataModel.setUrl( columnSlice.getColumnByName( \"url\" ).getValue() );\n+            Boolean.parseBoolean( getStringValue( columnSlice, \"incomplete\" ) ) );\n+        projectVersionMetadataModel.setProjectId( getStringValue( columnSlice, \"projectId\" ) );\n+        projectVersionMetadataModel.setUrl( getStringValue( columnSlice, \"url\" ) );\n         return projectVersionMetadataModel;\n     }\n \n@@ -801,12 +770,11 @@ public void updateProjectVersion( String repositoryId, String namespaceId, Strin\n             throw new MetadataRepositoryException( e.getMessage(), e );\n         }\n \n+        StringSerializer ss = StringSerializer.get();\n+\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getProjectVersionMetadataModelFamilyName() ) //\n             .setColumnNames( \"id\" ) //\n             .addEqualsExpression( \"repositoryName\", repositoryId ) //\n@@ -847,40 +815,24 @@ public void updateProjectVersion( String repositoryId, String namespaceId, Strin\n             String cf = cassandraArchivaManager.getProjectVersionMetadataModelFamilyName();\n             Mutator<String> mutator = projectVersionMetadataModelTemplate.createMutator()\n                 //  values\n-                .addInsertion( key, //\n-                               cf, //\n-                               column( \"projectId\", projectId ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               column( \"repositoryName\", repositoryId ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               column( \"namespaceId\", namespaceId ) )//\n-                .addInsertion( key, //\n-                               cf, //\n-                               column( \"id\", versionMetadata.getVersion() ) ); //\n+                .addInsertion( key, cf, column( \"projectId\", projectId ) ) //\n+                .addInsertion( key, cf, column( \"repositoryName\", repositoryId ) ) //\n+                .addInsertion( key, cf, column( \"namespaceId\", namespaceId ) )//\n+                .addInsertion( key, cf, column( \"id\", versionMetadata.getVersion() ) ); //\n             if ( versionMetadata.getDescription() != null )\n             {\n-                mutator = mutator.addInsertion( key, //\n-                                                cf, //\n-                                                column( \"description\", versionMetadata.getDescription() ) );\n+                mutator = mutator.addInsertion( key, cf, column( \"description\", versionMetadata.getDescription() ) );\n             }\n \n             if ( versionMetadata.getName() != null )\n             {\n-                mutator = mutator.addInsertion( key, //\n-                                                cf, //\n-                                                column( \"name\", versionMetadata.getName() ) );\n+                mutator = mutator.addInsertion( key, cf, column( \"name\", versionMetadata.getName() ) );\n             }\n-            mutator = mutator.addInsertion( key, //\n-                                            cf, //\n-                                            column( \"incomplete\",\n-                                                    Boolean.toString( versionMetadata.isIncomplete() ) ) );\n+            mutator = mutator.addInsertion( key, cf, column( \"incomplete\",\n+                                                             Boolean.toString( versionMetadata.isIncomplete() ) ) );\n             if ( versionMetadata.getUrl() != null )\n             {\n-                mutator = mutator.addInsertion( key, //\n-                                                cf, //\n-                                                column( \"url\", versionMetadata.getUrl() ) );\n+                mutator = mutator.addInsertion( key, cf, column( \"url\", versionMetadata.getUrl() ) );\n             }\n \n             MutationResult mutationResult = mutator.execute();\n@@ -1310,12 +1262,9 @@ public void updateArtifact( String repositoryId, String namespaceId, String proj\n         throws MetadataResolutionException\n     {\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getArtifactMetadataModelFamilyName() ) //\n             .setColumnNames( \"version\" ) //\n             .addEqualsExpression( \"repositoryName\", repoId ) //\n@@ -1327,7 +1276,7 @@ public void updateArtifact( String repositoryId, String namespaceId, String proj\n \n         for ( Row<String, String, String> row : result.get() )\n         {\n-            versions.add( row.getColumnSlice().getColumnByName( \"version\" ).getValue() );\n+            versions.add( getStringValue( row.getColumnSlice(), \"version\" ) );\n         }\n \n         return versions;\n@@ -1471,12 +1420,9 @@ public Boolean apply( MetadataFacetModel metadataFacetModel )\n     {\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getMetadataFacetModelFamilyName() ) //\n             .setColumnNames( \"name\" ) //\n             .addEqualsExpression( \"repositoryName\", repositoryId ) //\n@@ -1487,7 +1433,7 @@ public Boolean apply( MetadataFacetModel metadataFacetModel )\n \n         for ( Row<String, String, String> row : result.get() )\n         {\n-            facets.add( row.getColumnSlice().getColumnByName( \"name\" ).getValue() );\n+            facets.add( getStringValue( row.getColumnSlice(), \"name\" ) );\n         }\n         return facets;\n     }\n@@ -1511,12 +1457,9 @@ public MetadataFacet getMetadataFacet( final String repositoryId, final String f\n         }\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getMetadataFacetModelFamilyName() ) //\n             .setColumnNames( \"key\", \"value\" ) //\n             .addEqualsExpression( \"repositoryName\", repositoryId ) //\n@@ -1529,8 +1472,7 @@ public MetadataFacet getMetadataFacet( final String repositoryId, final String f\n         for ( Row<String, String, String> row : result.get() )\n         {\n             ColumnSlice<String, String> columnSlice = row.getColumnSlice();\n-            map.put( columnSlice.getColumnByName( \"key\" ).getValue(),\n-                     columnSlice.getColumnByName( \"value\" ).getValue() );\n+            map.put( getStringValue( columnSlice, \"key\" ), getStringValue( columnSlice, \"value\" ) );\n         }\n         metadataFacet.fromProperties( map );\n         return metadataFacet;\n@@ -1658,12 +1600,9 @@ public void removeMetadataFacets( final String repositoryId, final String facetI\n         throws MetadataRepositoryException\n     {\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getMetadataFacetModelFamilyName() ) //\n             .setColumnNames( \"key\", \"value\" ) //\n             .addEqualsExpression( \"repositoryName\", repositoryId ) //\n@@ -1682,12 +1621,9 @@ public void removeMetadataFacet( final String repositoryId, final String facetId\n         throws MetadataRepositoryException\n     {\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getMetadataFacetModelFamilyName() ) //\n             .setColumnNames( \"key\", \"value\" ) //\n             .addEqualsExpression( \"repositoryName\", repositoryId ) //\n@@ -1708,12 +1644,10 @@ public void removeMetadataFacet( final String repositoryId, final String facetId\n     {\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n+        LongSerializer ls = LongSerializer.get();\n         RangeSlicesQuery<String, String, Long> query = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     LongSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ls ) //\n             .setColumnFamily( cassandraArchivaManager.getArtifactMetadataModelFamilyName() ) //\n             .setColumnNames( \"namespaceId\", \"size\", \"id\", \"fileLastModified\", \"md5\", \"project\", \"projectVersion\",\n                              \"repositoryName\", \"version\", \"whenGathered\", \"sha1\" ); //\n@@ -1730,9 +1664,6 @@ public void removeMetadataFacet( final String repositoryId, final String facetId\n \n         List<ArtifactMetadata> artifactMetadatas = new ArrayList<ArtifactMetadata>( result.get().getCount() );\n \n-        LongSerializer ls = LongSerializer.get();\n-        StringSerializer ss = StringSerializer.get();\n-\n         for ( Row<String, String, Long> row : result.get() )\n         {\n             ColumnSlice<String, Long> columnSlice = row.getColumnSlice();\n@@ -1741,23 +1672,21 @@ public void removeMetadataFacet( final String repositoryId, final String facetId\n             if ( StringUtils.equals( repositoryName, repositoryId ) )\n             {\n                 ArtifactMetadata artifactMetadata = new ArtifactMetadata();\n-                artifactMetadata.setNamespace(\n-                    ss.fromByteBuffer( columnSlice.getColumnByName( \"namespaceId\" ).getValueBytes() ) );\n-                artifactMetadata.setSize( ls.fromByteBuffer( columnSlice.getColumnByName( \"size\" ).getValueBytes() ) );\n-                artifactMetadata.setId( ss.fromByteBuffer( columnSlice.getColumnByName( \"id\" ).getValueBytes() ) );\n-                artifactMetadata.setFileLastModified(\n-                    ls.fromByteBuffer( columnSlice.getColumnByName( \"fileLastModified\" ).getValueBytes() ) );\n-                artifactMetadata.setMd5( ss.fromByteBuffer( columnSlice.getColumnByName( \"md5\" ).getValueBytes() ) );\n-                artifactMetadata.setProject(\n-                    ss.fromByteBuffer( columnSlice.getColumnByName( \"project\" ).getValueBytes() ) );\n-                artifactMetadata.setProjectVersion(\n-                    ss.fromByteBuffer( columnSlice.getColumnByName( \"projectVersion\" ).getValueBytes() ) );\n+                artifactMetadata.setNamespace( getAsStringValue( columnSlice, \"namespaceId\" ) );\n+                artifactMetadata.setSize( getLongValue( columnSlice, \"size\" ) );\n+                artifactMetadata.setId( getAsStringValue( columnSlice, \"id\" ) );\n+                artifactMetadata.setFileLastModified( getLongValue( columnSlice, \"fileLastModified\" ) );\n+                artifactMetadata.setMd5( getAsStringValue( columnSlice, \"md5\" ) );\n+                artifactMetadata.setProject( getAsStringValue( columnSlice, \"project\" ) );\n+                artifactMetadata.setProjectVersion( getAsStringValue( columnSlice, \"projectVersion\" ) );\n                 artifactMetadata.setRepositoryId( repositoryName );\n-                artifactMetadata.setSha1( ss.fromByteBuffer( columnSlice.getColumnByName( \"sha1\" ).getValueBytes() ) );\n-                artifactMetadata.setVersion(\n-                    ss.fromByteBuffer( columnSlice.getColumnByName( \"version\" ).getValueBytes() ) );\n-                artifactMetadata.setWhenGathered(\n-                    new Date( ls.fromByteBuffer( columnSlice.getColumnByName( \"whenGathered\" ).getValueBytes() ) ) );\n+                artifactMetadata.setSha1( getAsStringValue( columnSlice, \"sha1\" ) );\n+                artifactMetadata.setVersion( getAsStringValue( columnSlice, \"version\" ) );\n+                Long whenGathered = getLongValue( columnSlice, \"whenGathered\" );\n+                if ( whenGathered != null )\n+                {\n+                    artifactMetadata.setWhenGathered( new Date( whenGathered ) );\n+                }\n                 artifactMetadatas.add( artifactMetadata );\n             }\n         }\n@@ -2071,23 +2000,21 @@ public Boolean apply( ArtifactMetadataModel artifactMetadataModel )\n         {\n             ColumnSlice<String, String> columnSlice = row.getColumnSlice();\n             ArtifactMetadata artifactMetadata = new ArtifactMetadata();\n-            artifactMetadata.setNamespace(\n-                ss.fromByteBuffer( columnSlice.getColumnByName( \"namespaceId\" ).getValueBytes() ) );\n-            artifactMetadata.setSize( ls.fromByteBuffer( columnSlice.getColumnByName( \"size\" ).getValueBytes() ) );\n-            artifactMetadata.setId( ss.fromByteBuffer( columnSlice.getColumnByName( \"id\" ).getValueBytes() ) );\n-            artifactMetadata.setFileLastModified(\n-                ls.fromByteBuffer( columnSlice.getColumnByName( \"fileLastModified\" ).getValueBytes() ) );\n-            artifactMetadata.setMd5( ss.fromByteBuffer( columnSlice.getColumnByName( \"md5\" ).getValueBytes() ) );\n-            artifactMetadata.setProject(\n-                ss.fromByteBuffer( columnSlice.getColumnByName( \"project\" ).getValueBytes() ) );\n-            artifactMetadata.setProjectVersion(\n-                ss.fromByteBuffer( columnSlice.getColumnByName( \"projectVersion\" ).getValueBytes() ) );\n+            artifactMetadata.setNamespace( getStringValue( columnSlice, \"namespaceId\" ) );\n+            artifactMetadata.setSize( getAsLongValue( columnSlice, \"size\" ) );\n+            artifactMetadata.setId( getStringValue( columnSlice, \"id\" ) );\n+            artifactMetadata.setFileLastModified( getAsLongValue( columnSlice, \"fileLastModified\" ) );\n+            artifactMetadata.setMd5( getStringValue( columnSlice, \"md5\" ) );\n+            artifactMetadata.setProject( getStringValue( columnSlice, \"project\" ) );\n+            artifactMetadata.setProjectVersion( getStringValue( columnSlice, \"projectVersion\" ) );\n             artifactMetadata.setRepositoryId( repoId );\n-            artifactMetadata.setSha1( ss.fromByteBuffer( columnSlice.getColumnByName( \"sha1\" ).getValueBytes() ) );\n-            artifactMetadata.setVersion(\n-                ss.fromByteBuffer( columnSlice.getColumnByName( \"version\" ).getValueBytes() ) );\n-            artifactMetadata.setWhenGathered(\n-                new Date( ls.fromByteBuffer( columnSlice.getColumnByName( \"whenGathered\" ).getValueBytes() ) ) );\n+            artifactMetadata.setSha1( getStringValue( columnSlice, \"sha1\" ) );\n+            artifactMetadata.setVersion( getStringValue( columnSlice, \"version\" ) );\n+            Long whenGathered = getAsLongValue( columnSlice, \"whenGathered\" );\n+            if ( whenGathered != null )\n+            {\n+                artifactMetadata.setWhenGathered( new Date( whenGathered ) );\n+            }\n             artifactMetadatas.add( artifactMetadata );\n         }\n \n@@ -2113,13 +2040,11 @@ public Boolean apply( ArtifactMetadataModel artifactMetadataModel )\n         {\n             ColumnSlice<String, String> columnSlice = row.getColumnSlice();\n             MetadataFacetModel metadataFacetModel = new MetadataFacetModel();\n-            metadataFacetModel.setFacetId(\n-                ss.fromByteBuffer( columnSlice.getColumnByName( \"facetId\" ).getValueBytes() ) );\n-            metadataFacetModel.setName( ss.fromByteBuffer( columnSlice.getColumnByName( \"name\" ).getValueBytes() ) );\n-            metadataFacetModel.setValue( ss.fromByteBuffer( columnSlice.getColumnByName( \"value\" ).getValueBytes() ) );\n-            metadataFacetModel.setKey( ss.fromByteBuffer( columnSlice.getColumnByName( \"key\" ).getValueBytes() ) );\n-            metadataFacetModel.setProjectVersion(\n-                ss.fromByteBuffer( columnSlice.getColumnByName( \"projectVersion\" ).getValueBytes() ) );\n+            metadataFacetModel.setFacetId( getStringValue( columnSlice, \"facetId\" ) );\n+            metadataFacetModel.setName( getStringValue( columnSlice, \"name\" ) );\n+            metadataFacetModel.setValue( getStringValue( columnSlice, \"value\" ) );\n+            metadataFacetModel.setKey( getStringValue( columnSlice, \"key\" ) );\n+            metadataFacetModel.setProjectVersion( getStringValue( columnSlice, \"projectVersion\" ) );\n             metadataFacetModels.add( metadataFacetModel );\n         }\n "
            },
            {
                "sha": "3482f59942bbf91ee5262174a1ee5895c47cb482",
                "filename": "archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraUtils.java",
                "status": "modified",
                "additions": 50,
                "deletions": 0,
                "changes": 50,
                "blob_url": "https://github.com/apache/archiva/blob/ba1c2854a0d44df1cc45084b25b4630ce9641d63/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraUtils.java",
                "raw_url": "https://github.com/apache/archiva/raw/ba1c2854a0d44df1cc45084b25b4630ce9641d63/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraUtils.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraUtils.java?ref=ba1c2854a0d44df1cc45084b25b4630ce9641d63",
                "patch": "@@ -19,10 +19,14 @@\n  * under the License.\n  */\n \n+import me.prettyprint.cassandra.serializers.LongSerializer;\n import me.prettyprint.cassandra.serializers.SerializerTypeInferer;\n+import me.prettyprint.cassandra.serializers.StringSerializer;\n import me.prettyprint.hector.api.Serializer;\n+import me.prettyprint.hector.api.beans.ColumnSlice;\n import me.prettyprint.hector.api.beans.HColumn;\n import me.prettyprint.hector.api.factory.HFactory;\n+import org.apache.commons.lang.StringUtils;\n \n /**\n  * @author Olivier Lamy\n@@ -70,6 +74,52 @@ public static String generateKey( final String... bases )\n                                       (Serializer<B>) SerializerTypeInferer.getSerializer( value ) );\n     }\n \n+    public static String getStringValue( ColumnSlice<String, String> columnSlice, String columnName )\n+    {\n+        if ( StringUtils.isNotEmpty( columnName ) )\n+        {\n+            return null;\n+        }\n+\n+        HColumn<String, String> hColumn = columnSlice.getColumnByName( columnName );\n+        return hColumn == null ? null : hColumn.getValue();\n+    }\n+\n+    public static Long getLongValue( ColumnSlice<String, Long> columnSlice, String columnName )\n+    {\n+        if ( StringUtils.isNotEmpty( columnName ) )\n+        {\n+            return null;\n+        }\n+\n+        HColumn<String, Long> hColumn = columnSlice.getColumnByName( columnName );\n+        return hColumn == null ? null : hColumn.getValue();\n+    }\n+\n+    public static String getAsStringValue( ColumnSlice<String, Long> columnSlice, String columnName )\n+    {\n+        StringSerializer ss = StringSerializer.get();\n+        if ( StringUtils.isNotEmpty( columnName ) )\n+        {\n+            return null;\n+        }\n+\n+        HColumn<String, Long> hColumn = columnSlice.getColumnByName( columnName );\n+        return hColumn == null ? null : ss.fromByteBuffer( hColumn.getValueBytes() );\n+    }\n+\n+    public static Long getAsLongValue( ColumnSlice<String, String> columnSlice, String columnName )\n+    {\n+        LongSerializer ls = LongSerializer.get();\n+        if ( StringUtils.isNotEmpty( columnName ) )\n+        {\n+            return null;\n+        }\n+\n+        HColumn<String, String> hColumn = columnSlice.getColumnByName( columnName );\n+        return hColumn == null ? null : ls.fromByteBuffer( hColumn.getValueBytes() );\n+    }\n+\n     private CassandraUtils()\n     {\n         // no-op"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/b4f1eb21cfa75e692e86f04c9e68a94b54292d12",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/8d88a946f1afd7800b5c30b344055c2e5c0c87a3",
        "message": "[MRM-1804] IndexOutOfBoundsException when browsing a group with 0 or 1 repo\navoid npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1568621 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_41",
        "file": [
            {
                "sha": "425fd5270686df8acc5075fd560712b014fe4d33",
                "filename": "archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/group/DefaultRepositoryGroupAdmin.java",
                "status": "modified",
                "additions": 10,
                "deletions": 2,
                "changes": 12,
                "blob_url": "https://github.com/apache/archiva/blob/b4f1eb21cfa75e692e86f04c9e68a94b54292d12/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/group/DefaultRepositoryGroupAdmin.java",
                "raw_url": "https://github.com/apache/archiva/raw/b4f1eb21cfa75e692e86f04c9e68a94b54292d12/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/group/DefaultRepositoryGroupAdmin.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/group/DefaultRepositoryGroupAdmin.java?ref=b4f1eb21cfa75e692e86f04c9e68a94b54292d12",
                "patch": "@@ -81,7 +81,14 @@ public void initialize()\n         {\n             for ( RepositoryGroup repositoryGroup : getRepositoriesGroups() )\n             {\n-                mergedRemoteIndexesScheduler.schedule( repositoryGroup, getMergedIndexDirectory( repositoryGroup.getId() ) );\n+                mergedRemoteIndexesScheduler.schedule( repositoryGroup,\n+                                                       getMergedIndexDirectory( repositoryGroup.getId() ) );\n+                // create the directory for each group if not exists\n+                File groupPath = new File( groupsDirectory, repositoryGroup.getId() );\n+                if ( !groupPath.exists() )\n+                {\n+                    groupPath.mkdirs();\n+                }\n             }\n         }\n         catch ( RepositoryAdminException e )\n@@ -244,7 +251,8 @@ public Boolean deleteRepositoryFromGroup( String repositoryGroupId, String repos\n         {\n             throw new RepositoryAdminException(\n                 \"repositoryGroup with id \" + repositoryGroupId + \" doesn't not contains repository with id\"\n-                    + repositoryId );\n+                    + repositoryId\n+            );\n         }\n \n         repositoryGroup.removeRepository( repositoryId );"
            },
            {
                "sha": "260e4e4a32d6afb593339886fbeb0953773fbc9c",
                "filename": "archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "status": "modified",
                "additions": 31,
                "deletions": 13,
                "changes": 44,
                "blob_url": "https://github.com/apache/archiva/blob/b4f1eb21cfa75e692e86f04c9e68a94b54292d12/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "raw_url": "https://github.com/apache/archiva/raw/b4f1eb21cfa75e692e86f04c9e68a94b54292d12/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java?ref=b4f1eb21cfa75e692e86f04c9e68a94b54292d12",
                "patch": "@@ -309,7 +309,8 @@ public DavResource createResource( final DavResourceLocator locator, final DavSe\n             {\n                 resource = processRepository( request, archivaLocator, activePrincipal, managedRepositoryContent,\n                                               managedRepositoryAdmin.getManagedRepository(\n-                                                  archivaLocator.getRepositoryId() ) );\n+                                                  archivaLocator.getRepositoryId() )\n+                );\n \n                 String logicalResource = getLogicalResource( archivaLocator, null, false );\n                 resourcesInAbsolutePath.add(\n@@ -408,8 +409,8 @@ public DavResource createResource( final DavResourceLocator locator, final DavSe\n                         catch ( DigesterException de )\n                         {\n                             throw new DavException( HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n-                                                    \"Error occurred while generating checksum files.\"\n-                                                        + de.getMessage() );\n+                                                    \"Error occurred while generating checksum files.\" + de.getMessage()\n+                            );\n                         }\n                     }\n                 }\n@@ -925,7 +926,8 @@ protected boolean isAuthorized( DavServletRequest request, String repositoryId )\n             return servletAuth.isAuthenticated( request, result ) && servletAuth.isAuthorized( request, securitySession,\n                                                                                                repositoryId,\n                                                                                                WebdavMethodUtil.getMethodPermission(\n-                                                                                                   request.getMethod() ) );\n+                                                                                                   request.getMethod() )\n+            );\n         }\n         catch ( AuthenticationException e )\n         {\n@@ -972,11 +974,23 @@ private DavResource getResourceFromGroup( DavServletRequest request, List<String\n                                               RepositoryGroupConfiguration repositoryGroupConfiguration )\n         throws DavException, RepositoryAdminException\n     {\n+        if ( repositoryGroupConfiguration.getRepositories() == null\n+            || repositoryGroupConfiguration.getRepositories().isEmpty() )\n+        {\n+\n+            return new ArchivaVirtualDavResource( new ArrayList<File>(), //\n+                                                  new File( System.getProperty( \"appserver.base\" ) + \"/groups/\"\n+                                                                + repositoryGroupConfiguration.getId() ).getPath(),  //\n+                                                  mimeTypes, //\n+                                                  locator, //\n+                                                  this\n+            );\n+        }\n         List<File> mergedRepositoryContents = new ArrayList<File>();\n         // multiple repo types so we guess they are all the same type\n         // so use the first one\n         // FIXME add a method with group in the repository storage\n-        String firstRepoId = repositoryGroupConfiguration.getRepositories().get( 1 );\n+        String firstRepoId = repositoryGroupConfiguration.getRepositories().get( 0 );\n \n         String path = getLogicalResource( locator, managedRepositoryAdmin.getManagedRepository( firstRepoId ), false );\n         if ( path.startsWith( \"/\" ) )\n@@ -1012,7 +1026,8 @@ private DavResource getResourceFromGroup( DavServletRequest request, List<String\n                 {\n                     File tmpDirectory = new File( SystemUtils.getJavaIoTmpDir(),\n                                                   repositoryGroupConfiguration.getId() + \"/\"\n-                                                      + repositoryGroupConfiguration.getMergedIndexPath() );\n+                                                      + repositoryGroupConfiguration.getMergedIndexPath()\n+                    );\n                     if ( !tmpDirectory.exists() )\n                     {\n                         synchronized ( tmpDirectory.getAbsolutePath() )\n@@ -1056,7 +1071,8 @@ private DavResource getResourceFromGroup( DavServletRequest request, List<String\n                                 repoIndexDirectory = new File( managedRepository.getRepository().getLocation(),\n                                                                StringUtils.isEmpty( repoIndexDirectory )\n                                                                    ? \".indexer\"\n-                                                                   : repoIndexDirectory ).getAbsolutePath();\n+                                                                   : repoIndexDirectory\n+                                ).getAbsolutePath();\n                             }\n                         }\n                         if ( StringUtils.isEmpty( repoIndexDirectory ) )\n@@ -1096,7 +1112,8 @@ private DavResource getResourceFromGroup( DavServletRequest request, List<String\n                                 {\n                                     if ( servletAuth.isAuthorized( activePrincipal, repository,\n                                                                    WebdavMethodUtil.getMethodPermission(\n-                                                                       request.getMethod() ) ) )\n+                                                                       request.getMethod() )\n+                                    ) )\n                                     {\n                                         mergedRepositoryContents.add( resourceFile );\n                                         log.debug( \"Repository '{}' accessed by '{}'\", repository, activePrincipal );\n@@ -1312,13 +1329,14 @@ protected File buildMergedIndexDirectory( List<String> repositories, String acti\n             File tempRepoFile = Files.createTempDir();\n             tempRepoFile.deleteOnExit();\n \n-            IndexMergerRequest indexMergerRequest = new IndexMergerRequest( authzRepos, true, repositoryGroupConfiguration.getId(),\n-                                    repositoryGroupConfiguration.getMergedIndexPath(),\n-                                    repositoryGroupConfiguration.getMergedIndexTtl() ).mergedIndexDirectory( tempRepoFile )\n-                                    .temporary( true );\n+            IndexMergerRequest indexMergerRequest =\n+                new IndexMergerRequest( authzRepos, true, repositoryGroupConfiguration.getId(),\n+                                        repositoryGroupConfiguration.getMergedIndexPath(),\n+                                        repositoryGroupConfiguration.getMergedIndexTtl() ).mergedIndexDirectory(\n+                    tempRepoFile ).temporary( true );\n \n             MergedRemoteIndexesTaskRequest taskRequest =\n-                new MergedRemoteIndexesTaskRequest(indexMergerRequest, indexMerger);\n+                new MergedRemoteIndexesTaskRequest( indexMergerRequest, indexMerger );\n \n             MergedRemoteIndexesTask job = new MergedRemoteIndexesTask( taskRequest );\n "
            },
            {
                "sha": "d1a995ea66787f087a32e9bee2478c9409e6287c",
                "filename": "archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/util/IndexWriter.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/archiva/blob/b4f1eb21cfa75e692e86f04c9e68a94b54292d12/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/util/IndexWriter.java",
                "raw_url": "https://github.com/apache/archiva/raw/b4f1eb21cfa75e692e86f04c9e68a94b54292d12/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/util/IndexWriter.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/util/IndexWriter.java?ref=b4f1eb21cfa75e692e86f04c9e68a94b54292d12",
                "patch": "@@ -86,7 +86,7 @@ private void writeDocumentStart( PrintWriter writer )\n         writer.println( \"ul{list-style:none;}\" ); \n         \n         StringBuilder relative = new StringBuilder(\"../../\");\n-        if ( logicalResource.length() > 0 ) \n+        if ( logicalResource != null && logicalResource.length() > 0 )\n         {\n             String tmpRelative = StringUtils.replace( logicalResource, \"\\\\\", \"/\" );\n             for (int i=0;i<tmpRelative.split(\"/\").length;i++) \n@@ -109,7 +109,7 @@ private void writeDocumentStart( PrintWriter writer )\n         writer.println( \"<h3>Collection: /\" + logicalResource + \"</h3>\" );\n \n         //Check if not root\n-        if ( logicalResource.length() > 0 )\n+        if ( logicalResource != null && logicalResource.length() > 0 )\n         {\n             File file = new File( logicalResource );\n             String parentName = file.getParent() == null ? \"/\" : file.getParent();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/05149a2b15830be318a1a65a15d11500b456c0cb",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/f7f824b1b25823dc8041312b1b3d356b40968aa1",
        "message": "no need to continue the loop when we have found the enries and prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1359838 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_42",
        "file": [
            {
                "sha": "639edc1e216ad4fa9d4a4a5d666d64fafa75c965",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/main.js",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/archiva/blob/05149a2b15830be318a1a65a15d11500b456c0cb/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/main.js",
                "raw_url": "https://github.com/apache/archiva/raw/05149a2b15830be318a1a65a15d11500b456c0cb/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/main.js",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/main.js?ref=05149a2b15830be318a1a65a15d11500b456c0cb",
                "patch": "@@ -269,6 +269,7 @@ function() {\n                     ko.utils.arrayFirst(self.artifactMenuItems.concat(self.usersMenuItems, self.administrationMenuItems), function(p) {\n                         if ( p.href == \"#\"+self.activeMenuId()) {\n                           p.func();\n+                          return;\n                         }\n                     });\n                     "
            },
            {
                "sha": "98299440ac6ddb13c2ee09f9374d7723013de244",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/search.js",
                "status": "modified",
                "additions": 6,
                "deletions": 1,
                "changes": 7,
                "blob_url": "https://github.com/apache/archiva/blob/05149a2b15830be318a1a65a15d11500b456c0cb/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/search.js",
                "raw_url": "https://github.com/apache/archiva/raw/05149a2b15830be318a1a65a15d11500b456c0cb/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/search.js",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/search.js?ref=05149a2b15830be318a1a65a15d11500b456c0cb",
                "patch": "@@ -43,7 +43,9 @@ define(\"archiva.search\",[\"jquery\",\"i18n\",\"jquery.tmpl\",\"choosen\",\"knockout\",\"kno\n \n     breadCrumbEntries=function(){\n       // root level ?\n-      if (!self.parentBrowseViewModel) return [];\n+      if (!self.parentBrowseViewModel){\n+        return [];\n+      }\n       return calculateBreadCrumbEntries(self.groupId);\n     }\n \n@@ -69,6 +71,9 @@ define(\"archiva.search\",[\"jquery\",\"i18n\",\"jquery.tmpl\",\"choosen\",\"knockout\",\"kno\n   }\n \n   calculateBreadCrumbEntries=function(groupId){\n+    if (!groupId){\n+      return [];\n+    }\n     var splitted = groupId.split(\".\");\n     var breadCrumbEntries=[];\n     var curGroupId=\"\";"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/62a08312f9d4085167b052eaa0c043e449d4772c",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/dbe30a337d2b05d204e8a06bb3635a20def24ff5",
        "message": "take of NPE, add rest method to cleanup uploaded files in session\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1307830 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_43",
        "file": [
            {
                "sha": "49c9bdbb14c8719c7f9e13cf1f3ef3006fa181f9",
                "filename": "archiva-modules/archiva-web/archiva-rest/archiva-rest-services/src/main/java/org/apache/archiva/rest/services/AbstractRestService.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/62a08312f9d4085167b052eaa0c043e449d4772c/archiva-modules/archiva-web/archiva-rest/archiva-rest-services/src/main/java/org/apache/archiva/rest/services/AbstractRestService.java",
                "raw_url": "https://github.com/apache/archiva/raw/62a08312f9d4085167b052eaa0c043e449d4772c/archiva-modules/archiva-web/archiva-rest/archiva-rest-services/src/main/java/org/apache/archiva/rest/services/AbstractRestService.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-rest/archiva-rest-services/src/main/java/org/apache/archiva/rest/services/AbstractRestService.java?ref=62a08312f9d4085167b052eaa0c043e449d4772c",
                "patch": "@@ -147,7 +147,7 @@ protected String getBaseUrl( HttpServletRequest req )\n \n     protected void triggerAuditEvent( String repositoryId, String filePath, String action )\n     {\n-        AuditEvent auditEvent = new AuditEvent();\n+        AuditEvent auditEvent = new AuditEvent( action, repositoryId );\n         auditEvent.setAction( action );\n         auditEvent.setRepositoryId( repositoryId );\n         auditEvent.setResource( filePath );"
            },
            {
                "sha": "d485d22b5fe32bac3e92dbee33c3b5de27d2bbea",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/DefaultFileUploadService.java",
                "status": "modified",
                "additions": 11,
                "deletions": 0,
                "changes": 11,
                "blob_url": "https://github.com/apache/archiva/blob/62a08312f9d4085167b052eaa0c043e449d4772c/archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/DefaultFileUploadService.java",
                "raw_url": "https://github.com/apache/archiva/raw/62a08312f9d4085167b052eaa0c043e449d4772c/archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/DefaultFileUploadService.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/DefaultFileUploadService.java?ref=62a08312f9d4085167b052eaa0c043e449d4772c",
                "patch": "@@ -187,6 +187,17 @@ public Boolean deleteFile( String fileName )\n         return Boolean.FALSE;\n     }\n \n+    public Boolean clearUploadedFiles()\n+        throws ArchivaRestServiceException\n+    {\n+        List<FileMetadata> fileMetadatas = getSessionFileMetadatas();\n+        for ( FileMetadata fileMetadata : fileMetadatas )\n+        {\n+            deleteFile( fileMetadata.getServerFileName() );\n+        }\n+        return Boolean.TRUE;\n+    }\n+\n     public List<FileMetadata> getSessionFileMetadatas()\n         throws ArchivaRestServiceException\n     {"
            },
            {
                "sha": "61abd8883b1c1f13bc2acf57959bfad8957078a6",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/FileUploadService.java",
                "status": "modified",
                "additions": 8,
                "deletions": 0,
                "changes": 8,
                "blob_url": "https://github.com/apache/archiva/blob/62a08312f9d4085167b052eaa0c043e449d4772c/archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/FileUploadService.java",
                "raw_url": "https://github.com/apache/archiva/raw/62a08312f9d4085167b052eaa0c043e449d4772c/archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/FileUploadService.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/java/org/apache/archiva/webapp/ui/services/api/FileUploadService.java?ref=62a08312f9d4085167b052eaa0c043e449d4772c",
                "patch": "@@ -75,4 +75,12 @@ Boolean save( @PathParam( \"repositoryId\" ) String repositoryId, @PathParam( \"gro\n                   @PathParam( \"artifactId\" ) String artifactId, @QueryParam( \"generatePom\" ) boolean generatePom )\n         throws ArchivaRestServiceException;\n \n+\n+    @Path( \"clearUploadedFiles\" )\n+    @GET\n+    @Produces( { MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML } )\n+    @RedbackAuthorization( permissions = ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD )\n+    Boolean clearUploadedFiles()\n+        throws ArchivaRestServiceException;\n+\n }"
            },
            {
                "sha": "8e9a96ac644523aad5f7e77cd5e26f8ef5d1f125",
                "filename": "archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/artifacts-management.js",
                "status": "modified",
                "additions": 45,
                "deletions": 34,
                "changes": 79,
                "blob_url": "https://github.com/apache/archiva/blob/62a08312f9d4085167b052eaa0c043e449d4772c/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/artifacts-management.js",
                "raw_url": "https://github.com/apache/archiva/raw/62a08312f9d4085167b052eaa0c043e449d4772c/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/artifacts-management.js",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp-js/src/main/webapp/js/archiva/artifacts-management.js?ref=62a08312f9d4085167b052eaa0c043e449d4772c",
                "patch": "@@ -38,7 +38,7 @@ define(\"archiva.artifacts-management\",[\"jquery\",\"i18n\",\"order!utils\",\"order!jque\n     this.artifactUploads=[];\n \n     saveArtifacts=function(){\n-\n+      clearUserMessages();\n       if(!$(\"#main-content #fileupload\" ).valid()){\n         return;\n       }\n@@ -55,6 +55,10 @@ define(\"archiva.artifacts-management\",[\"jquery\",\"i18n\",\"order!utils\",\"order!jque\n           dataType: 'json',\n           success: function(data) {\n \n+          },\n+          error: function(data) {\n+            var res = $.parseJSON(data.responseText);\n+            displayRestError(res);\n           }\n         }\n       );\n@@ -66,46 +70,53 @@ define(\"archiva.artifacts-management\",[\"jquery\",\"i18n\",\"order!utils\",\"order!jque\n   displayUploadArtifact=function(){\n     var mainContent=$(\"#main-content\");\n     mainContent.html(mediumSpinnerImg());\n-    mainContent.html($(\"#file-upload-screen\" ).html());\n-    $.ajax(\"restServices/archivaServices/browseService/userRepositories\", {\n+\n+\n+    $.ajax(\"restServices/archivaUiServices/fileUploadService/clearUploadedFiles\", {\n         type: \"GET\",\n         dataType: 'json',\n         success: function(data) {\n-          var artifactUploadViewModel=new ArtifactUploadViewModel(data);\n-          ko.applyBindings(artifactUploadViewModel,mainContent.find(\"#file-upload-main\" ).get(0));\n-          var validator =  $(\"#main-content #fileupload\" ).validate({\n-            showErrors: function(validator, errorMap, errorList) {\n-             customShowError(\"#main-content #fileupload\",validator,errorMap,errorMap);\n-            }\n-          });\n-          $('#fileupload').fileupload({\n-              add: function (e, data) {\n-                data.formData = {\n-                  groupId: artifactUploadViewModel.groupId(),\n-                  artifactId: artifactUploadViewModel.artifactId(),\n-                  version: artifactUploadViewModel.version(),\n-                  packaging: artifactUploadViewModel.packaging()\n-                };\n-                $.blueimpUI.fileupload.prototype.options.add.call(this, e, data);\n-              },\n-              submit: function (e, data) {\n-                var $this = $(this);\n+          mainContent.html($(\"#file-upload-screen\" ).html());\n+          $.ajax(\"restServices/archivaServices/browseService/userRepositories\", {\n+              type: \"GET\",\n+              dataType: 'json',\n+              success: function(data) {\n+                var artifactUploadViewModel=new ArtifactUploadViewModel(data);\n+                ko.applyBindings(artifactUploadViewModel,mainContent.find(\"#file-upload-main\" ).get(0));\n+                var validator =  $(\"#main-content #fileupload\" ).validate({\n+                  showErrors: function(validator, errorMap, errorList) {\n+                   customShowError(\"#main-content #fileupload\",validator,errorMap,errorMap);\n+                  }\n+                });\n+                $('#fileupload').fileupload({\n+                    add: function (e, data) {\n+                      data.formData = {\n+                        groupId: artifactUploadViewModel.groupId(),\n+                        artifactId: artifactUploadViewModel.artifactId(),\n+                        version: artifactUploadViewModel.version(),\n+                        packaging: artifactUploadViewModel.packaging()\n+                      };\n+                      $.blueimpUI.fileupload.prototype.options.add.call(this, e, data);\n+                    },\n+                    submit: function (e, data) {\n+                      var $this = $(this);\n \n-                $this.fileupload('send', data);\n-                artifactUploadViewModel.artifactUploads.push(new ArtifactUpload(data.formData.classifier,data.formData.pomFile));\n-                return false;\n+                      $this.fileupload('send', data);\n+                      artifactUploadViewModel.artifactUploads.push(new ArtifactUpload(data.formData.classifier,data.formData.pomFile));\n+                      return false;\n+                    }\n+                  }\n+                );\n+                $('#fileupload').bind('fileuploadsubmit', function (e, data) {\n+                  var pomFile = data.context.find('#pomFile' ).attr(\"checked\");\n+                  var classifier = data.context.find('#classifier' ).val();\n+                  data.formData.pomFile = pomFile;\n+                  data.formData.classifier = classifier;\n+                });\n               }\n-            }\n-          );\n-          $('#fileupload').bind('fileuploadsubmit', function (e, data) {\n-            var pomFile = data.context.find('#pomFile' ).attr(\"checked\");\n-            var classifier = data.context.find('#classifier' ).val();\n-            data.formData.pomFile = pomFile;\n-            data.formData.classifier = classifier;\n           });\n-        }\n+      }\n     });\n-\n   }\n \n });\n\\ No newline at end of file"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/468d33012d65df0711eb88a343602b3fdbf7eada",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/94faa497aea1f08226d4eb0a2121596488ab89a3",
        "message": "as now RepositoryArchivaTaskScheduler is started this mock configuration must not failed with NPE or UOE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1159692 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_44",
        "file": [
            {
                "sha": "b618f7306a3dc65b9ad547d67dd5df7fae9cb9ea",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/archiva/configuration/TestConfiguration.java",
                "status": "modified",
                "additions": 8,
                "deletions": 3,
                "changes": 11,
                "blob_url": "https://github.com/apache/archiva/blob/468d33012d65df0711eb88a343602b3fdbf7eada/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/archiva/configuration/TestConfiguration.java",
                "raw_url": "https://github.com/apache/archiva/raw/468d33012d65df0711eb88a343602b3fdbf7eada/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/archiva/configuration/TestConfiguration.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/archiva/configuration/TestConfiguration.java?ref=468d33012d65df0711eb88a343602b3fdbf7eada",
                "patch": "@@ -26,10 +26,15 @@\n import org.codehaus.plexus.registry.RegistryException;\n import org.codehaus.plexus.registry.RegistryListener;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n public class TestConfiguration\n     implements ArchivaConfiguration\n {\n-    private Configuration configuration;\n+    private Configuration configuration = new Configuration();\n+\n+    private List<ConfigurationListener> configurationListeners = new ArrayList<ConfigurationListener>();\n \n     public Configuration getConfiguration()\n     {\n@@ -49,12 +54,12 @@ public boolean isDefaulted()\n \n     public void addListener( ConfigurationListener listener )\n     {\n-        throw new UnsupportedOperationException();\n+        configurationListeners.add( listener );\n     }\n \n     public void removeListener( ConfigurationListener listener )\n     {\n-        throw new UnsupportedOperationException();\n+        configurationListeners.remove( listener );\n     }\n \n     public void addChangeListener( RegistryListener listener )"
            },
            {
                "sha": "87fc5731f5c52595c4b15d458958bf1939493153",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/tags/DependencyTreeTest.java",
                "status": "modified",
                "additions": 0,
                "deletions": 8,
                "changes": 8,
                "blob_url": "https://github.com/apache/archiva/blob/468d33012d65df0711eb88a343602b3fdbf7eada/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/tags/DependencyTreeTest.java",
                "raw_url": "https://github.com/apache/archiva/raw/468d33012d65df0711eb88a343602b3fdbf7eada/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/tags/DependencyTreeTest.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/tags/DependencyTreeTest.java?ref=468d33012d65df0711eb88a343602b3fdbf7eada",
                "patch": "@@ -100,26 +100,18 @@ public void setUp()\n         repoConfig.setLocation( \"src/test/repositories/test\" );\n         configuration.addManagedRepository( repoConfig );\n \n-        //ArchivaConfiguration archivaConfiguration = (ArchivaConfiguration) lookup( ArchivaConfiguration.class );\n         ArchivaConfiguration archivaConfiguration = applicationContext.getBean( ArchivaConfiguration.class );\n         archivaConfiguration.save( configuration );\n \n-        //tree = (DependencyTree) lookup( DependencyTree.class );\n-\n-        //artifactFactory = (ArtifactFactory) lookup( ArtifactFactory.class );\n-\n         artifactFactory = plexusSisuBridge.lookup( ArtifactFactory.class );\n \n-        //TestMetadataResolver metadataResolver = (TestMetadataResolver) lookup( MetadataResolver.class );\n         TestMetadataResolver metadataResolver = applicationContext.getBean( TestMetadataResolver.class );\n         ProjectVersionMetadata metadata = new ProjectVersionMetadata();\n         metadata.setId( TEST_VERSION );\n         metadataResolver.setProjectVersion( TEST_REPO_ID, TEST_GROUP_ID, TEST_ARTIFACT_ID, metadata );\n \n         RepositorySession repositorySession = mock( RepositorySession.class );\n         when( repositorySession.getResolver() ).thenReturn( metadataResolver );\n-        //TestRepositorySessionFactory repositorySessionFactory = (TestRepositorySessionFactory) lookup(\n-        //    RepositorySessionFactory.class );\n         TestRepositorySessionFactory repositorySessionFactory =\n             applicationContext.getBean( TestRepositorySessionFactory.class );\n         repositorySessionFactory.setRepositorySession( repositorySession );"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/55d4b5c3af3f8cebd79abfc1bbe711e8c120e134",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/13609a81fe50ce2f3247087e73798b6c0db768da",
        "message": "[MRM-1451] NPE when merging through XMLRPC\n* applied patch\n\nPatch Submitted by: Maria Catherine Tan\n* passed metadataRepository instead of null during merge\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1064082 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_45",
        "file": [
            {
                "sha": "0dc4cc1271a65e07e0807781bf0b8b364ad275a1",
                "filename": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/archiva/blob/55d4b5c3af3f8cebd79abfc1bbe711e8c120e134/archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java",
                "raw_url": "https://github.com/apache/archiva/raw/55d4b5c3af3f8cebd79abfc1bbe711e8c120e134/archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java?ref=55d4b5c3af3f8cebd79abfc1bbe711e8c120e134",
                "patch": "@@ -529,12 +529,12 @@ public boolean merge( String repoId, boolean skipConflicts )\n                             sourceArtifacts.removeAll( conflicts );\n \n                             log.debug( \"Source artifacts size :: \" + sourceArtifacts.size() );\n-                            mergeWithOutSnapshots( sourceArtifacts, stagingId, repoId, null );\n+                            mergeWithOutSnapshots( sourceArtifacts, stagingId, repoId, metadataRepository );\n                         }\n                         else\n                         {\n                             log.debug( \"Source artifacts size :: \" + sourceArtifacts.size() );\n-                            mergeWithOutSnapshots( sourceArtifacts, stagingId, repoId, null );\n+                            mergeWithOutSnapshots( sourceArtifacts, stagingId, repoId, metadataRepository );\n                         }\n                     }\n                     else"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/76c66f5a834c6b8ce375e1a5d04d0d086aab486d",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/7c53e156143b05220f68ba242338ef56a77b9469",
        "message": "[MRM-1204] - org.apache.maven.archiva.repository.project.ProjectModelMerge.merge throws NPE\n- added unit test\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@806081 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_46",
        "file": [
            {
                "sha": "93716cea43170a74a5c607bcab5035e705fbb406",
                "filename": "archiva-modules/archiva-base/archiva-repository-layer/src/test/java/org/apache/maven/archiva/repository/project/ProjectModelMergeTest.java",
                "status": "added",
                "additions": 106,
                "deletions": 0,
                "changes": 106,
                "blob_url": "https://github.com/apache/archiva/blob/76c66f5a834c6b8ce375e1a5d04d0d086aab486d/archiva-modules/archiva-base/archiva-repository-layer/src/test/java/org/apache/maven/archiva/repository/project/ProjectModelMergeTest.java",
                "raw_url": "https://github.com/apache/archiva/raw/76c66f5a834c6b8ce375e1a5d04d0d086aab486d/archiva-modules/archiva-base/archiva-repository-layer/src/test/java/org/apache/maven/archiva/repository/project/ProjectModelMergeTest.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-repository-layer/src/test/java/org/apache/maven/archiva/repository/project/ProjectModelMergeTest.java?ref=76c66f5a834c6b8ce375e1a5d04d0d086aab486d",
                "patch": "@@ -0,0 +1,106 @@\n+package org.apache.maven.archiva.repository.project;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+ \n+import java.util.Enumeration;\n+import java.util.Properties;\n+\n+import org.apache.maven.archiva.repository.project.ProjectModelMerge;\n+import org.apache.maven.archiva.model.ArchivaProjectModel;\n+import org.apache.maven.archiva.model.VersionedReference;\n+import org.codehaus.plexus.spring.PlexusInSpringTestCase;\n+\n+/**\n+ * ProjectModelMergeTest\n+ * \n+ * @author jzurbano\n+ */\n+public class ProjectModelMergeTest\n+    extends PlexusInSpringTestCase\n+{\n+    private ProjectModelMerge modelMerge;\n+    \n+    private Enumeration<String> keys;\n+    \n+    @Override\n+    protected void setUp()\n+        throws Exception\n+    {\n+        super.setUp();\n+\n+        modelMerge = new ProjectModelMerge();\n+    }\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    public void testPropertiesMerge()\n+        throws Exception\n+    {\n+        ArchivaProjectModel mainProject = createMainProject();\n+        ArchivaProjectModel parentProject = createParentProject();\n+    \n+        assertNotNull( mainProject.getProperties() );\n+    \n+        Properties prop = parentProject.getProperties();\n+        assertNotNull( prop );\n+    \n+        keys = (Enumeration<String>) prop.propertyNames();\n+        assertTrue( keys.hasMoreElements() );\n+    \n+        modelMerge.merge( mainProject, parentProject );\n+    }\n+    \n+    private ArchivaProjectModel createMainProject()\n+    {\n+        ArchivaProjectModel mainProject = new ArchivaProjectModel();\n+    \n+        VersionedReference parent = new VersionedReference();\n+        parent.setGroupId( \"org.apache\" );\n+        parent.setArtifactId( \"apache\" );\n+        parent.setVersion( \"4\" );\n+    \n+        mainProject.setParentProject( parent );\n+        mainProject.setGroupId( \"org.apache.servicemix\" );\n+        mainProject.setArtifactId( \"servicemix-pom\" );\n+        mainProject.setVersion( \"2\" );\n+        mainProject.setPackaging( \"pom\" );\n+        mainProject.setName( \"ServiceMix POM\" );\n+        mainProject.setUrl( \"http://servicemix.apache.org/\" );\n+        mainProject.setDescription( \"This pom provides project information that is common to all ServiceMix branches.\" );\n+        mainProject.setProperties( new Properties() );\n+    \n+        return mainProject;\n+    }\n+    \n+    private ArchivaProjectModel createParentProject()\n+    {\n+        ArchivaProjectModel parentProject = new ArchivaProjectModel();\n+    \n+        parentProject.setGroupId( \"org.apache\" );\n+        parentProject.setArtifactId( \"apache\" );\n+        parentProject.setVersion( \"4\" );\n+        parentProject.setPackaging( \"pom\" );\n+    \n+        Properties prop = new Properties();\n+        prop.setProperty( \"test.key\", \"\" );\n+        parentProject.setProperties( prop );\n+    \n+        return parentProject;\n+    }\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/1c301353ac7b03562dc59524016d1f29ed4a6b27",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/11135fe668c7f439d23d4a215933db53a433eae3",
        "message": "[MRM-1204] - org.apache.maven.archiva.repository.project.ProjectModelMerge.merge throws NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@803840 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_47",
        "file": [
            {
                "sha": "a5b95987264c6942bb19323b9893ad6a9952e04d",
                "filename": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/project/ProjectModelMerge.java",
                "status": "modified",
                "additions": 6,
                "deletions": 1,
                "changes": 7,
                "blob_url": "https://github.com/apache/archiva/blob/1c301353ac7b03562dc59524016d1f29ed4a6b27/archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/project/ProjectModelMerge.java",
                "raw_url": "https://github.com/apache/archiva/raw/1c301353ac7b03562dc59524016d1f29ed4a6b27/archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/project/ProjectModelMerge.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/project/ProjectModelMerge.java?ref=1c301353ac7b03562dc59524016d1f29ed4a6b27",
                "patch": "@@ -337,7 +337,12 @@ private static Properties merge( Properties mainProperties, Properties parentPro\n         while ( keys.hasMoreElements() )\n         {\n             String key = (String) keys.nextElement();\n-            merged.put( key, merge( mainProperties.getProperty( key ), parentProperties.getProperty( key ) ) );\n+            String value = merge( mainProperties.getProperty( key ), parentProperties.getProperty( key ) );\n+            \n+            if ( value != null )\n+            {\n+                merged.put( key, value );\n+            }\n         }\n \n         return merged;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/adf0f01d13f602754d824843ce3b8b3d43b844c2",
        "message": "[MNG-1106] guard against NPE which can be generated by the LDAP user manager if misconfigured\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@750953 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_48",
        "file": [
            {
                "sha": "1b533d30fb0b4c01667241c9b92ea900a88d783c",
                "filename": "archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/ArchivaServletAuthenticator.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/archiva/blob/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/ArchivaServletAuthenticator.java",
                "raw_url": "https://github.com/apache/archiva/raw/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/ArchivaServletAuthenticator.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/ArchivaServletAuthenticator.java?ref=4b34d911eb606d05f4bdc9c4f73e8e6283565bf9",
                "patch": "@@ -105,6 +105,10 @@ public boolean isAuthorized( String principal, String repoId, boolean isWriteReq\n             }\n             \n             User user = securitySystem.getUserManager().findUser( principal );\n+            if ( user == null )\n+            {\n+                throw new UnauthorizedException( \"The security system had an internal error - please check your system logs\" );\n+            }\n             if ( user.isLocked() )\n             {\n                 throw new UnauthorizedException( \"User account is locked.\" );"
            },
            {
                "sha": "d99b089326f6ae481ce7bea7fd743049f32452ff",
                "filename": "archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "status": "modified",
                "additions": 8,
                "deletions": 0,
                "changes": 8,
                "blob_url": "https://github.com/apache/archiva/blob/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "raw_url": "https://github.com/apache/archiva/raw/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java?ref=4b34d911eb606d05f4bdc9c4f73e8e6283565bf9",
                "patch": "@@ -77,6 +77,10 @@\n         try\n         {\n             User user = securitySystem.getUserManager().findUser( principal );\n+            if ( user == null )\n+            {\n+                throw new ArchivaSecurityException( \"The security system had an internal error - please check your system logs\" );\n+            }\n \n             if ( user.isLocked() )\n             {\n@@ -145,6 +149,10 @@ public boolean isAuthorizedToUploadArtifacts( String principal, String repoId )\n         try\n         {\n             User user = securitySystem.getUserManager().findUser( principal );\n+            if ( user == null )\n+            {\n+                throw new ArchivaSecurityException( \"The security system had an internal error - please check your system logs\" );\n+            }\n \n             if ( user.isLocked() )\n             {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/14b464c1859e1b80668a7b193e298da1659c1de9",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/ebe7941ce08323fbd63e6d0d39c31e932b7a7e65",
        "message": "[MRM-1076]\no remove second invocation of complete scan in RepositoryContentConsumers which causes the NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@745393 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_49",
        "file": [
            {
                "sha": "1a22ab7869f6f4fc1afce702f5b19cfc7e81b0c6",
                "filename": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/scanner/RepositoryContentConsumers.java",
                "status": "modified",
                "additions": 0,
                "deletions": 1,
                "changes": 1,
                "blob_url": "https://github.com/apache/archiva/blob/14b464c1859e1b80668a7b193e298da1659c1de9/archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/scanner/RepositoryContentConsumers.java",
                "raw_url": "https://github.com/apache/archiva/raw/14b464c1859e1b80668a7b193e298da1659c1de9/archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/scanner/RepositoryContentConsumers.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/scanner/RepositoryContentConsumers.java?ref=14b464c1859e1b80668a7b193e298da1659c1de9",
                "patch": "@@ -261,7 +261,6 @@ public void executeConsumers( ManagedRepositoryConfiguration repository, File lo\n             TriggerScanCompletedClosure scanCompletedClosure = new TriggerScanCompletedClosure(repository);\n \n             CollectionUtils.forAllDo(selectedKnownConsumers, scanCompletedClosure);\n-            CollectionUtils.forAllDo(selectedKnownConsumers, scanCompletedClosure);\n         }\n         finally\n         {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/24f7d688a611d3f437584988c98915c8f3b298ed",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/092a8ce4f1cb8bba3782a6a2b40dd1bbdd671f7b",
        "message": "merge -r691892 (fix NPE when clicking next & previous icon of bytecode search results) from 1.1.x branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@691911 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_50",
        "file": [
            {
                "sha": "8d490bae975891c5e35cddd0f05143e9cb6dee64",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/results.jsp",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "blob_url": "https://github.com/apache/archiva/blob/24f7d688a611d3f437584988c98915c8f3b298ed/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/results.jsp",
                "raw_url": "https://github.com/apache/archiva/raw/24f7d688a611d3f437584988c98915c8f3b298ed/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/results.jsp",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/results.jsp?ref=24f7d688a611d3f437584988c98915c8f3b298ed",
                "patch": "@@ -69,13 +69,17 @@\n             <%-- Prev & Next icons --%>\n             <c:set var=\"prevPageUrl\">\n               <ww:url action=\"quickSearch\" namespace=\"/\">\n-                <ww:param name=\"q\" value=\"%{'${q}'}\"/>                \n+                <ww:param name=\"q\" value=\"%{'${q}'}\"/>\n+                <ww:param name=\"searchResultsOnly\" value=\"%{'${searchResultsOnly}'}\"/>\n+                <ww:param name=\"completeQueryString\" value=\"%{'${completeQueryString}'}\"/>                \n                 <ww:param name=\"currentPage\" value=\"%{'${currentPage - 1}'}\"/>\n               </ww:url>\n       \t    </c:set>\n       \t    <c:set var=\"nextPageUrl\">\n               <ww:url action=\"quickSearch\" namespace=\"/\">\n                 <ww:param name=\"q\" value=\"%{'${q}'}\"/>                \n+                <ww:param name=\"searchResultsOnly\" value=\"%{'${searchResultsOnly}'}\"/>\n+                <ww:param name=\"completeQueryString\" value=\"%{'${completeQueryString}'}\"/>\n                 <ww:param name=\"currentPage\" value=\"%{'${currentPage + 1}'}\"/>\n               </ww:url>\n       \t    </c:set>    "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/55b89530811c9fe593b26f861c850a7ce65497e6",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/d458b712077b36871e00b4c1405795ff69edc692",
        "message": "[MRM-470] Test failures in BytecodeIndexTest due to NPE in AbstractIndexCreationTestCase\nRe-enabled test cases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@578894 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_51",
        "file": [
            {
                "sha": "c9ede6843d55fab1b999716bcf1c1a322e239c34",
                "filename": "archiva-base/archiva-indexer/src/test/java/org/apache/maven/archiva/indexer/AbstractIndexCreationTestCase.java",
                "status": "modified",
                "additions": 0,
                "deletions": 2,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/55b89530811c9fe593b26f861c850a7ce65497e6/archiva-base/archiva-indexer/src/test/java/org/apache/maven/archiva/indexer/AbstractIndexCreationTestCase.java",
                "raw_url": "https://github.com/apache/archiva/raw/55b89530811c9fe593b26f861c850a7ce65497e6/archiva-base/archiva-indexer/src/test/java/org/apache/maven/archiva/indexer/AbstractIndexCreationTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-base/archiva-indexer/src/test/java/org/apache/maven/archiva/indexer/AbstractIndexCreationTestCase.java?ref=55b89530811c9fe593b26f861c850a7ce65497e6",
                "patch": "@@ -71,7 +71,6 @@ public void testIndexExists() throws Exception\n         }\n     }\n \n-    /*\n     public void testAddRecordNoIndex() throws IOException, RepositoryIndexException, ParseException\n     {\n         LuceneRepositoryContentRecord record = createSimpleRecord();\n@@ -158,7 +157,6 @@ public void testDeleteRecordInIndex() throws IOException, RepositoryIndexExcepti\n             reader.close();\n         }\n     }\n-    */\n \n     public void testDeleteRecordNotInIndex() throws IOException, RepositoryIndexException\n     {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/743213aaf3e9d087eff72a53dd7082bd437c888c",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/68721e8607c9cdb8a2694b21a4f8586969bd943d",
        "message": "[MRM-370] NPE when trying to proxy a request for a plugin\nPatch submitted by Jens M\u00fchlenhoff\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@547590 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_52",
        "file": [
            {
                "sha": "9cc6f368e0f18033e5be2c0bd862d7615766940f",
                "filename": "archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/layout/DefaultBidirectionalRepositoryLayout.java",
                "status": "modified",
                "additions": 4,
                "deletions": 1,
                "changes": 5,
                "blob_url": "https://github.com/apache/archiva/blob/743213aaf3e9d087eff72a53dd7082bd437c888c/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/layout/DefaultBidirectionalRepositoryLayout.java",
                "raw_url": "https://github.com/apache/archiva/raw/743213aaf3e9d087eff72a53dd7082bd437c888c/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/layout/DefaultBidirectionalRepositoryLayout.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/layout/DefaultBidirectionalRepositoryLayout.java?ref=743213aaf3e9d087eff72a53dd7082bd437c888c",
                "patch": "@@ -134,7 +134,10 @@ public String toPath( VersionedReference reference )\n \n         path.append( formatAsDirectory( reference.getGroupId() ) ).append( PATH_SEPARATOR );\n         path.append( reference.getArtifactId() ).append( PATH_SEPARATOR );\n-        path.append( VersionUtil.getBaseVersion( reference.getVersion() ) ).append( PATH_SEPARATOR );\n+        if( reference.getVersion() != null ) {\n+            // add the version only if it is present\n+            path.append( VersionUtil.getBaseVersion( reference.getVersion() ) ).append( PATH_SEPARATOR );\n+        }\n         path.append( MAVEN_METADATA );\n \n         return path.toString();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/09fff6ad6e15bc4d815d4814b28c5b392309f967",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/966e374f6cd73c34b6703e7e998544dcee5eef46",
        "message": "[MRM-336]: Repository Admin - \"Index Repository\" appears to not do anything. \n\"Get your filthy hands off my you damned dirty NPEs!\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@538405 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_53",
        "file": [
            {
                "sha": "0a0b316d7cc3df3b4bdce26ccacc89da0e20e2ef",
                "filename": "archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/archiva/blob/09fff6ad6e15bc4d815d4814b28c5b392309f967/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "raw_url": "https://github.com/apache/archiva/raw/09fff6ad6e15bc4d815d4814b28c5b392309f967/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java?ref=09fff6ad6e15bc4d815d4814b28c5b392309f967",
                "patch": "@@ -99,10 +99,10 @@ public void initComponents()\n         httpAuth = (HttpAuthenticator) lookup( HttpAuthenticator.ROLE, \"basic\" );\n         audit = (AuditLog) lookup( AuditLog.ROLE );\n \n-        updateRepositoryMap();\n-\n         configuration = (ArchivaConfiguration) lookup( ArchivaConfiguration.class.getName() );\n         configuration.addChangeListener( this );\n+        \n+        updateRepositoryMap();\n     }\n \n     public void initServers( ServletConfig servletConfig )"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/3d0bdb625516e5e3cfde56e7c489f470d184d2b4",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/3487a00459dede9c4c5dd20c95397d5dffff6009",
        "message": "* Fix NPE on webdav.\n* Fix authorization on webdav.\n* Fix http request context and path info for webdav.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@464672 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_54",
        "file": [
            {
                "sha": "1eade2b462adc19ed6e6a2caaf277ac4c8f8542c",
                "filename": "archiva-webapp/src/main/java/org/apache/maven/archiva/web/servlet/repository/RepositoryAccess.java",
                "status": "modified",
                "additions": 12,
                "deletions": 5,
                "changes": 17,
                "blob_url": "https://github.com/apache/archiva/blob/3d0bdb625516e5e3cfde56e7c489f470d184d2b4/archiva-webapp/src/main/java/org/apache/maven/archiva/web/servlet/repository/RepositoryAccess.java",
                "raw_url": "https://github.com/apache/archiva/raw/3d0bdb625516e5e3cfde56e7c489f470d184d2b4/archiva-webapp/src/main/java/org/apache/maven/archiva/web/servlet/repository/RepositoryAccess.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-webapp/src/main/java/org/apache/maven/archiva/web/servlet/repository/RepositoryAccess.java?ref=3d0bdb625516e5e3cfde56e7c489f470d184d2b4",
                "patch": "@@ -114,6 +114,7 @@ public void servletRequest( HttpServletRequest request, HttpServletResponse resp\n         catch ( ConfigurationStoreException e )\n         {\n             // TODO: should be a more pretty error to user. ;-)\n+            // TODO: can we determine if the incoming request is a real user, or just maven-wagon?\n \n             throw new ServletException( \"Unable to obtain configuration.\", e );\n         }\n@@ -179,8 +180,6 @@ public void servletRequest( HttpServletRequest request, HttpServletResponse resp\n                 permission = ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD;\n             }\n             \n-            permission += \"-\" + repoconfig.getId();\n-\n             boolean isAuthorized = securitySystem.isAuthorized( securitySession, permission, repoconfig.getId() );\n \n             if ( !isAuthorized )\n@@ -200,10 +199,18 @@ public void servletRequest( HttpServletRequest request, HttpServletResponse resp\n \n         RepositoryMapping repo = getRepositoryMapping( repoconfig );\n \n-        response.setHeader( \"Server\",\n-                            getServletContext().getServerInfo() + \" Archiva : \" + DAVUtilities.SERVLET_SIGNATURE );\n+        String serverInfo = \"\";\n+        if ( getServletContext() != null )\n+        {\n+            if ( StringUtils.isNotEmpty( getServletContext().getServerInfo() ) )\n+            {\n+                serverInfo = getServletContext().getServerInfo();\n+            }\n+        }\n+        \n+        response.setHeader( \"Server\", serverInfo + \" Archiva : \" + DAVUtilities.SERVLET_SIGNATURE );\n \n-        DAVTransaction transaction = new DAVTransaction( request, response );\n+        DAVTransaction transaction = new DAVTransaction( new RepositoryRequest( request, repoconfig.getId() ), response );\n         try\n         {\n             repo.getDavProcessor().process( transaction );"
            },
            {
                "sha": "587b88359b5ce487b577b6c39797e50f0ec4e18d",
                "filename": "archiva-webapp/src/main/java/org/apache/maven/archiva/web/servlet/repository/RepositoryMapping.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/3d0bdb625516e5e3cfde56e7c489f470d184d2b4/archiva-webapp/src/main/java/org/apache/maven/archiva/web/servlet/repository/RepositoryMapping.java",
                "raw_url": "https://github.com/apache/archiva/raw/3d0bdb625516e5e3cfde56e7c489f470d184d2b4/archiva-webapp/src/main/java/org/apache/maven/archiva/web/servlet/repository/RepositoryMapping.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-webapp/src/main/java/org/apache/maven/archiva/web/servlet/repository/RepositoryMapping.java?ref=3d0bdb625516e5e3cfde56e7c489f470d184d2b4",
                "patch": "@@ -45,7 +45,7 @@ public RepositoryMapping(RepositoryConfiguration repoConfig) throws IOException\n         this.repositoryConfiguration = repoConfig;\n         File repoDir = new File(repositoryConfiguration.getDirectory());\n         this.davRepository = new DAVRepository( repoDir );\n-        this.davProcessor = new DAVProcessor(this.davRepository);\n+        this.davProcessor = new DAVProcessor( this.davRepository );\n         this.davRepository.addListener(this);\n     }\n     "
            },
            {
                "sha": "b3677a29a077bdcc51088e66c07d04d38fa2c9ad",
                "filename": "archiva-webapp/src/main/java/org/apache/maven/archiva/web/servlet/repository/RepositoryRequest.java",
                "status": "added",
                "additions": 76,
                "deletions": 0,
                "changes": 76,
                "blob_url": "https://github.com/apache/archiva/blob/3d0bdb625516e5e3cfde56e7c489f470d184d2b4/archiva-webapp/src/main/java/org/apache/maven/archiva/web/servlet/repository/RepositoryRequest.java",
                "raw_url": "https://github.com/apache/archiva/raw/3d0bdb625516e5e3cfde56e7c489f470d184d2b4/archiva-webapp/src/main/java/org/apache/maven/archiva/web/servlet/repository/RepositoryRequest.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-webapp/src/main/java/org/apache/maven/archiva/web/servlet/repository/RepositoryRequest.java?ref=3d0bdb625516e5e3cfde56e7c489f470d184d2b4",
                "patch": "@@ -0,0 +1,76 @@\n+package org.apache.maven.archiva.web.servlet.repository;\n+\n+/*\n+ * Copyright 2001-2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import it.could.webdav.DAVTransaction;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+/**\n+ * RepositoryRequest \n+ *\n+ * @author <a href=\"mailto:joakim@erdfelt.com\">Joakim Erdfelt</a>\n+ * @version $Id$\n+ */\n+public class RepositoryRequest\n+    extends HttpServletRequestWrapper\n+{\n+    private String repoId;\n+\n+    public RepositoryRequest( HttpServletRequest request, String repoid )\n+    {\n+        super( request );\n+        this.repoId = \"\";\n+        \n+        if(repoid != null) {\n+            this.repoId = repoid;\n+        }\n+    }\n+\n+    /**\n+     * Adjust the path info value to remove reference to repoId.\n+     * This is done to satisfy the needs of {@link DAVTransaction}\n+     */\n+    public String getPathInfo()\n+    {\n+        String pathInfo = super.getPathInfo();\n+\n+        if ( pathInfo == null )\n+        {\n+            return \"\";\n+        }\n+\n+        if ( ( pathInfo.length() > 1 ) && ( pathInfo.charAt( 0 ) == '/' ) )\n+        {\n+            pathInfo = pathInfo.substring( 1 );\n+        }\n+\n+        if ( pathInfo.startsWith( repoId ) )\n+        {\n+            pathInfo = pathInfo.substring( repoId.length() );\n+        }\n+\n+        return pathInfo;\n+    }\n+\n+    public String getServletPath()\n+    {\n+        return super.getServletPath() + \"/\" + this.repoId;\n+    }\n+    \n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/c8617ac77e8f4fae9f9682feaa3a7c14edddd053",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/2c18ad97811b6ed6a1fa2fce82ffa409969ceeed",
        "message": "o fixed npe in dependency tree on artifact browse by adding the nodevar attribute dependencytree page\no removed PlexusTagUtil and lookup the dependency tree component in the tag using the webappcontext\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1137917 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_55",
        "file": [
            {
                "sha": "0c8c7aa749fd6ed1bac43fa98d6e35bba365a3d8",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/DependencyTree.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/c8617ac77e8f4fae9f9682feaa3a7c14edddd053/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/DependencyTree.java",
                "raw_url": "https://github.com/apache/archiva/raw/c8617ac77e8f4fae9f9682feaa3a7c14edddd053/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/DependencyTree.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/DependencyTree.java?ref=c8617ac77e8f4fae9f9682feaa3a7c14edddd053",
                "patch": "@@ -44,7 +44,7 @@\n  * @version $Id$\n  *          plexus.component role=\"org.apache.maven.archiva.web.tags.DependencyTree\"\n  */\n-@Service\n+@Service( \"dependencyTree\" )\n public class DependencyTree\n {\n     private Logger log = LoggerFactory.getLogger( DependencyTree.class );"
            },
            {
                "sha": "d60d3b5b5cf926cc353517b778b66ec01c685c6e",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/DependencyTreeTag.java",
                "status": "modified",
                "additions": 8,
                "deletions": 4,
                "changes": 12,
                "blob_url": "https://github.com/apache/archiva/blob/c8617ac77e8f4fae9f9682feaa3a7c14edddd053/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/DependencyTreeTag.java",
                "raw_url": "https://github.com/apache/archiva/raw/c8617ac77e8f4fae9f9682feaa3a7c14edddd053/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/DependencyTreeTag.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/DependencyTreeTag.java?ref=c8617ac77e8f4fae9f9682feaa3a7c14edddd053",
                "patch": "@@ -19,13 +19,14 @@\n  * under the License.\n  */\n \n-import org.apache.archiva.common.plexusbridge.PlexusSisuBridgeException;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.lang.StringUtils;\n import org.apache.maven.archiva.common.ArchivaException;\n import org.apache.maven.archiva.web.tags.DependencyTree.TreeEntry;\n-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;\n+import org.springframework.beans.BeansException;\n+import org.springframework.web.context.WebApplicationContext;\n+import org.springframework.web.context.support.WebApplicationContextUtils;\n \n import java.io.IOException;\n import java.io.PrintWriter;\n@@ -113,9 +114,12 @@ public int doStartTag()\n         DependencyTree deptree;\n         try\n         {\n-            deptree = (DependencyTree) PlexusTagUtil.lookup( pageContext, DependencyTree.class );\n+            WebApplicationContext webApplicationContext =\n+                WebApplicationContextUtils.getRequiredWebApplicationContext( pageContext.getServletContext() );\n+\n+            deptree = ( DependencyTree ) webApplicationContext.getBean( \"dependencyTree\" );\n         }\n-        catch ( PlexusSisuBridgeException e )\n+        catch ( BeansException e )\n         {\n             throw new JspException( \"Unable to lookup DependencyTree: \" + e.getMessage(), e );\n         }"
            },
            {
                "sha": "0eaf6b5dfc710dc7f721e6cf08b0194b571e961b",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/PlexusTagUtil.java",
                "status": "removed",
                "additions": 0,
                "deletions": 54,
                "changes": 54,
                "blob_url": "https://github.com/apache/archiva/blob/2c18ad97811b6ed6a1fa2fce82ffa409969ceeed/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/PlexusTagUtil.java",
                "raw_url": "https://github.com/apache/archiva/raw/2c18ad97811b6ed6a1fa2fce82ffa409969ceeed/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/PlexusTagUtil.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/PlexusTagUtil.java?ref=2c18ad97811b6ed6a1fa2fce82ffa409969ceeed",
                "patch": "@@ -1,54 +0,0 @@\n-package org.apache.maven.archiva.web.tags;\n-\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *  http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-import org.apache.archiva.common.plexusbridge.PlexusSisuBridge;\n-import org.apache.archiva.common.plexusbridge.PlexusSisuBridgeException;\n-import org.springframework.web.context.WebApplicationContext;\n-import org.springframework.web.context.support.WebApplicationContextUtils;\n-\n-import javax.servlet.ServletContext;\n-import javax.servlet.jsp.PageContext;\n-\n-/**\n- * PlexusTagUtil\n- *\n- * @version $Id$\n- */\n-public class PlexusTagUtil\n-{\n-    public static Object lookup( PageContext pageContext, Class<?> clazz )\n-        throws PlexusSisuBridgeException\n-    {\n-        return getContainer( pageContext ).lookup( clazz );\n-    }\n-\n-    private static PlexusSisuBridge getContainer( PageContext pageContext )\n-    {\n-        ServletContext servletContext = pageContext.getServletContext();\n-\n-        WebApplicationContext webApplicationContext =\n-            WebApplicationContextUtils.getRequiredWebApplicationContext( pageContext.getServletContext() );\n-\n-        return webApplicationContext.getBean( PlexusSisuBridge.class );\n-\n-\n-    }\n-}"
            },
            {
                "sha": "9e82dd5b43efd6c959a6aa3d71a560536428521f",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/include/dependencyTree.jspf",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/archiva/blob/c8617ac77e8f4fae9f9682feaa3a7c14edddd053/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/include/dependencyTree.jspf",
                "raw_url": "https://github.com/apache/archiva/raw/c8617ac77e8f4fae9f9682feaa3a7c14edddd053/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/include/dependencyTree.jspf",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/include/dependencyTree.jspf?ref=c8617ac77e8f4fae9f9682feaa3a7c14edddd053",
                "patch": "@@ -22,7 +22,7 @@\n <%@ taglib prefix=\"archiva\" uri=\"/WEB-INF/taglib.tld\" %>\n \n <archiva:dependency-tree groupId=\"${groupId}\" artifactId=\"${artifactId}\" version=\"${version}\"\n-                         modelVersion=\"${model.version}\">\n+                         modelVersion=\"${model.version}\" nodevar=\"node\">\n   <my:showArtifactLink groupId=\"${node.groupId}\" artifactId=\"${node.artifactId}\"\n                        version=\"${node.version}\"/>\n </archiva:dependency-tree>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/0ce636965d677a9b3664dbd7ab15ea3ac1f11bcd",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/d20cce3a52f5a983ced1ab9da36fa91999f8a6f5",
        "message": "[MRM-1238] - NPE when updating consumers of known content without setting any of the checkboxes (enabled)\n- added null checks\n- added unit tests\n\nSubmitted by: Gwen Harold Autencio\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@813473 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_56",
        "file": [
            {
                "sha": "38a7df399719730d2921dba4903c0ff13ed80dd0",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/admin/scanning/RepositoryScanningAction.java",
                "status": "modified",
                "additions": 36,
                "deletions": 4,
                "changes": 40,
                "blob_url": "https://github.com/apache/archiva/blob/0ce636965d677a9b3664dbd7ab15ea3ac1f11bcd/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/admin/scanning/RepositoryScanningAction.java",
                "raw_url": "https://github.com/apache/archiva/raw/0ce636965d677a9b3664dbd7ab15ea3ac1f11bcd/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/admin/scanning/RepositoryScanningAction.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/admin/scanning/RepositoryScanningAction.java?ref=0ce636965d677a9b3664dbd7ab15ea3ac1f11bcd",
                "patch": "@@ -251,8 +251,15 @@ public String updateInvalidConsumers()\n         archivaConfiguration.getConfiguration().getRepositoryScanning().setInvalidContentConsumers(\n             enabledInvalidContentConsumers );\n         \n-        filterAddedConsumers( oldConsumers, enabledInvalidContentConsumers );\n-        filterRemovedConsumers( oldConsumers, enabledInvalidContentConsumers );\n+        if ( enabledInvalidContentConsumers != null )\n+        {\n+            filterAddedConsumers( oldConsumers, enabledInvalidContentConsumers );\n+            filterRemovedConsumers( oldConsumers, enabledInvalidContentConsumers );    \n+        }\n+        else\n+        {\n+            disableAllEnabledConsumers( oldConsumers );\n+        }\n \n         return saveConfiguration();\n     }\n@@ -266,8 +273,15 @@ public String updateKnownConsumers()\n         archivaConfiguration.getConfiguration().getRepositoryScanning().setKnownContentConsumers(\n             enabledKnownContentConsumers );\n         \n-        filterAddedConsumers( oldConsumers, enabledKnownContentConsumers );\n-        filterRemovedConsumers( oldConsumers, enabledKnownContentConsumers );\n+        if ( enabledKnownContentConsumers != null )\n+        {\n+            filterAddedConsumers( oldConsumers, enabledKnownContentConsumers );\n+            filterRemovedConsumers( oldConsumers, enabledKnownContentConsumers );            \n+        }\n+        else\n+        {\n+            disableAllEnabledConsumers( oldConsumers );\n+        }\n \n         return saveConfiguration();\n     }\n@@ -335,6 +349,14 @@ private void filterRemovedConsumers( List<String> oldList, List<String> newList\n             }\n         }\n     }\n+    \n+    private void disableAllEnabledConsumers( List<String> consumers )\n+    {\n+        for ( String consumer : consumers )\n+        {\n+            triggerAuditEvent( AuditEvent.DISABLE_REPO_CONSUMER + \" \" + consumer );\n+        }\n+    }\n \n     public List<String> getEnabledInvalidContentConsumers()\n     {\n@@ -355,4 +377,14 @@ public void setEnabledKnownContentConsumers( List<String> enabledKnownContentCon\n     {\n         this.enabledKnownContentConsumers = enabledKnownContentConsumers;\n     }\n+    \n+    public ArchivaConfiguration getArchivaConfiguration()\n+    {\n+        return archivaConfiguration;\n+    }\n+    \n+    public void setArchivaConfiguration( ArchivaConfiguration archivaConfiguration )\n+    {\n+        this.archivaConfiguration = archivaConfiguration;\n+    }\n }"
            },
            {
                "sha": "e31759a8b8dc10eda7675230dd432f72bf452f00",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/action/admin/scanning/RepositoryScanningActionTest.java",
                "status": "added",
                "additions": 125,
                "deletions": 0,
                "changes": 125,
                "blob_url": "https://github.com/apache/archiva/blob/0ce636965d677a9b3664dbd7ab15ea3ac1f11bcd/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/action/admin/scanning/RepositoryScanningActionTest.java",
                "raw_url": "https://github.com/apache/archiva/raw/0ce636965d677a9b3664dbd7ab15ea3ac1f11bcd/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/action/admin/scanning/RepositoryScanningActionTest.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/action/admin/scanning/RepositoryScanningActionTest.java?ref=0ce636965d677a9b3664dbd7ab15ea3ac1f11bcd",
                "patch": "@@ -0,0 +1,125 @@\n+package org.apache.maven.archiva.web.action.admin.scanning;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.maven.archiva.configuration.ArchivaConfiguration;\n+import org.apache.maven.archiva.configuration.Configuration;\n+import org.apache.maven.archiva.configuration.DatabaseScanningConfiguration;\n+import org.apache.maven.archiva.configuration.RepositoryScanningConfiguration;\n+import org.apache.maven.archiva.web.action.admin.scanning.RepositoryScanningAction;\n+import org.codehaus.plexus.spring.PlexusInSpringTestCase;\n+import org.easymock.MockControl;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+public class RepositoryScanningActionTest\n+    extends PlexusInSpringTestCase\n+{\n+    private RepositoryScanningAction action;\n+    \n+    private MockControl archivaConfigControl;\n+    \n+    private ArchivaConfiguration archivaConfig;\n+    \n+    private Configuration config;\n+    \n+    protected void setUp() \n+    throws Exception\n+    {\n+        \n+        super.setUp();\n+    \n+        archivaConfigControl = MockControl.createControl( ArchivaConfiguration.class );\n+        archivaConfig = (ArchivaConfiguration) archivaConfigControl.getMock();\n+    \n+        action = new RepositoryScanningAction();\n+    \n+        config = new Configuration();\n+        \n+        RepositoryScanningConfiguration repositoryScanningConfig = new RepositoryScanningConfiguration( );\n+        \n+        repositoryScanningConfig.setKnownContentConsumers( createKnownContentConsumersList() );\n+        \n+        config.setRepositoryScanning( repositoryScanningConfig );\n+\n+        action.setArchivaConfiguration( archivaConfig );\n+    }\n+     \n+    public void testUpdateKnownConsumers()\n+        throws Exception\n+    {\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        \n+        archivaConfig.save( config );\n+        archivaConfigControl.replay();\n+        \n+        setEnabledKnownContentConsumers();\n+        \n+        String returnString = action.updateKnownConsumers();\n+        \n+        List<String> results = config.getRepositoryScanning().getKnownContentConsumers();\n+        \n+        assertEquals( action.SUCCESS, returnString );\n+        assertEquals( 8, results.size() );\n+    }\n+    \n+    public void testDisableAllKnownConsumers()\n+        throws Exception\n+    {\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        \n+        archivaConfig.save( config );\n+        archivaConfigControl.replay();\n+        \n+        action.setEnabledKnownContentConsumers( null );\n+        \n+        String returnString = action.updateKnownConsumers();\n+        \n+        List<String> results = config.getRepositoryScanning().getKnownContentConsumers();\n+        \n+        assertEquals( action.SUCCESS, returnString );\n+        assertEquals( 0, results.size() );\n+    }\n+    \n+    private void setEnabledKnownContentConsumers()\n+    {\n+        action.setEnabledKnownContentConsumers( createKnownContentConsumersList() );\n+    }\n+    \n+    private List<String> createKnownContentConsumersList( )\n+    {\n+        List<String> knownContentConsumers = new ArrayList<String>();\n+        knownContentConsumers.add( \"auto-remove\" );\n+        knownContentConsumers.add( \"auto-rename\" );\n+        knownContentConsumers.add( \"create-missing-checksums\" );\n+        knownContentConsumers.add( \"index-content\" );\n+        knownContentConsumers.add( \"metadata-updater\" );\n+        knownContentConsumers.add( \"repository-purge\" );\n+        knownContentConsumers.add( \"update-db-artifact\" );\n+        knownContentConsumers.add( \"validate-checksums\" );\n+        \n+        return knownContentConsumers;\n+    }\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/d20cce3a52f5a983ced1ab9da36fa91999f8a6f5",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/9471a08db3407bb12da9349911f527a5eddf70ed",
        "message": "[MRM-1240] - NPE when updating consumers (not setting any of the checkboxes) of Unprocessed Artifacts and Artifact Cleanup Scanning in Database\n- added null checks\n- added unit test for DatabaseAction\n\nSubmitted by: Gwen Harold Autencio\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@813439 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_57",
        "file": [
            {
                "sha": "7515fc2aa8efc94aecee89c5e8859260265b2477",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/admin/database/DatabaseAction.java",
                "status": "modified",
                "additions": 36,
                "deletions": 4,
                "changes": 40,
                "blob_url": "https://github.com/apache/archiva/blob/d20cce3a52f5a983ced1ab9da36fa91999f8a6f5/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/admin/database/DatabaseAction.java",
                "raw_url": "https://github.com/apache/archiva/raw/d20cce3a52f5a983ced1ab9da36fa91999f8a6f5/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/admin/database/DatabaseAction.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/admin/database/DatabaseAction.java?ref=d20cce3a52f5a983ced1ab9da36fa91999f8a6f5",
                "patch": "@@ -110,8 +110,15 @@ public String updateUnprocessedConsumers()\n         archivaConfiguration.getConfiguration().getDatabaseScanning().setUnprocessedConsumers(\n             enabledUnprocessedConsumers );\n         \n-        filterAddedConsumers( oldConsumers, enabledUnprocessedConsumers );\n-        filterRemovedConsumers( oldConsumers, enabledUnprocessedConsumers );\n+        if ( enabledUnprocessedConsumers != null )\n+        {\n+            filterAddedConsumers( oldConsumers, enabledUnprocessedConsumers );\n+            filterRemovedConsumers( oldConsumers, enabledUnprocessedConsumers );    \n+        }\n+        else\n+        {\n+            disableAllEnabledConsumers( oldConsumers );\n+        }\n \n         return saveConfiguration();\n     }\n@@ -122,8 +129,15 @@ public String updateCleanupConsumers()\n         \n         archivaConfiguration.getConfiguration().getDatabaseScanning().setCleanupConsumers( enabledCleanupConsumers );\n         \n-        filterAddedConsumers( oldConsumers, enabledCleanupConsumers );\n-        filterRemovedConsumers( oldConsumers, enabledCleanupConsumers );\n+        if ( enabledCleanupConsumers != null )\n+        {\n+            filterAddedConsumers( oldConsumers, enabledCleanupConsumers );\n+            filterRemovedConsumers( oldConsumers, enabledCleanupConsumers );    \n+        }\n+        else \n+        {\n+            disableAllEnabledConsumers( oldConsumers );\n+        }\n \n         return saveConfiguration();\n     }\n@@ -215,6 +229,16 @@ public void setEnabledCleanupConsumers( List<String> enabledCleanupConsumers )\n         this.enabledCleanupConsumers = enabledCleanupConsumers;\n     }\n     \n+    public ArchivaConfiguration getArchivaConfiguration()\n+    {\n+        return archivaConfiguration;\n+    }\n+\n+    public void setArchivaConfiguration( ArchivaConfiguration archivaConfiguration )\n+    {\n+        this.archivaConfiguration = archivaConfiguration;\n+    }\n+    \n     private void filterAddedConsumers( List<String> oldList, List<String> newList )\n     {\n         for ( String consumer : newList )\n@@ -236,4 +260,12 @@ private void filterRemovedConsumers( List<String> oldList, List<String> newList\n             }\n         }\n     }\n+    \n+    private void disableAllEnabledConsumers( List<String> enabledConsumers )\n+    {\n+        for( String consumer : enabledConsumers )\n+        {\n+            triggerAuditEvent( consumer, AuditEvent.DISABLE_DB_CONSUMER );\n+        }\n+    }\n }"
            },
            {
                "sha": "a47535ea50506baf960b5988cdcf8af4b2dec463",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/action/admin/database/DatabaseActionTest.java",
                "status": "added",
                "additions": 184,
                "deletions": 0,
                "changes": 184,
                "blob_url": "https://github.com/apache/archiva/blob/d20cce3a52f5a983ced1ab9da36fa91999f8a6f5/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/action/admin/database/DatabaseActionTest.java",
                "raw_url": "https://github.com/apache/archiva/raw/d20cce3a52f5a983ced1ab9da36fa91999f8a6f5/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/action/admin/database/DatabaseActionTest.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/action/admin/database/DatabaseActionTest.java?ref=d20cce3a52f5a983ced1ab9da36fa91999f8a6f5",
                "patch": "@@ -0,0 +1,184 @@\n+package org.apache.maven.archiva.web.action.admin.database;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.maven.archiva.configuration.ArchivaConfiguration;\n+import org.apache.maven.archiva.configuration.Configuration;\n+import org.apache.maven.archiva.configuration.DatabaseScanningConfiguration;\n+import org.codehaus.plexus.spring.PlexusInSpringTestCase;\n+import org.easymock.MockControl;\n+\n+/**\n+ * DatabaseActionTest\n+ */\n+public class DatabaseActionTest\n+    extends PlexusInSpringTestCase \n+{   \n+    private DatabaseAction action;\n+    \n+    private MockControl archivaConfigControl;\n+    \n+    private ArchivaConfiguration archivaConfig;\n+    \n+    private Configuration config;\n+    \n+    protected void setUp() \n+        throws Exception\n+    {\n+        super.setUp();\n+\n+        archivaConfigControl = MockControl.createControl( ArchivaConfiguration.class );\n+        archivaConfig = (ArchivaConfiguration) archivaConfigControl.getMock();\n+\n+        action = new DatabaseAction();\n+\n+        config = new Configuration();\n+        \n+        DatabaseScanningConfiguration databaseScanningConfig = new DatabaseScanningConfiguration();\n+        \n+        List<String> cleanUpConsumers = new ArrayList<String>();\n+        cleanUpConsumers.add( \"not-present-remove-db-artifact\" );\n+        cleanUpConsumers.add( \"not-present-remove-db-project\" );\n+        cleanUpConsumers.add( \"not-present-remove-indexed\" );\n+        \n+        List<String> unprocessedConsumers = new ArrayList<String>();\n+        unprocessedConsumers.add( \"update-db-bytecode-stats\" );\n+        unprocessedConsumers.add( \"update-db-project\" );\n+        unprocessedConsumers.add( \"validate-repository-metadata\" );\n+        \n+        databaseScanningConfig.setCleanupConsumers( cleanUpConsumers );\n+        databaseScanningConfig.setUnprocessedConsumers( unprocessedConsumers );\n+\n+        config.setDatabaseScanning( databaseScanningConfig );\n+        \n+        setUpEnabledUnproccessedConsumers();\n+        setUpEnabledCleanupConsumers();\n+        \n+        action.setArchivaConfiguration( archivaConfig );\n+    }\n+    \n+    protected void tearDown()\n+        throws Exception\n+    {\n+        super.tearDown();\n+    }\n+\n+    public void testUpdateUnprocessedConsumers()\n+    throws Exception\n+    {\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        \n+        archivaConfig.save( config );\n+        archivaConfigControl.replay();\n+        \n+        String returnString = action.updateUnprocessedConsumers();\n+        \n+        List<String> results = config.getDatabaseScanning().getUnprocessedConsumers();\n+        \n+        assertEquals( action.SUCCESS, returnString );\n+        assertEquals( 3, results.size() );\n+    }\n+    \n+    public void testUpdateCleanUpConsumers()\n+        throws Exception\n+    {\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        \n+        archivaConfig.save( config );\n+        archivaConfigControl.replay();\n+        \n+        String returnString = action.updateCleanupConsumers();\n+        \n+        List<String> results = config.getDatabaseScanning().getCleanupConsumers();\n+        \n+        assertEquals( action.SUCCESS, returnString );\n+        assertEquals( 3, results.size() );\n+    }\n+    \n+    public void testDisableAllUnprocessedConsumers( )\n+        throws Exception\n+    {\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        \n+        archivaConfig.save( config );\n+        archivaConfigControl.replay();\n+        \n+        action.setEnabledUnprocessedConsumers( null );\n+        \n+        String returnString = action.updateUnprocessedConsumers();\n+        \n+        List<String> results = config.getDatabaseScanning().getUnprocessedConsumers();\n+        \n+        assertEquals( action.SUCCESS, returnString );\n+        assertEquals( 0, results.size() );\n+    }\n+\n+    public void testDisableAllCleanupConsumers( )\n+        throws Exception\n+    {\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n+        \n+        archivaConfig.save( config );\n+        archivaConfigControl.replay();\n+        \n+        action.setEnabledCleanupConsumers( null );\n+        \n+        String returnString = action.updateCleanupConsumers();\n+        \n+        List<String> results = config.getDatabaseScanning().getCleanupConsumers();\n+        \n+        assertEquals( action.SUCCESS, returnString );\n+        assertEquals( 0, results.size() );\n+    }\n+    \n+    private void setUpEnabledUnproccessedConsumers( )\n+    {\n+        List<String> enabledUnprocessedConsumer = new ArrayList<String>();\n+        \n+        enabledUnprocessedConsumer.add( \"update-db-bytecode-stats\" );\n+        enabledUnprocessedConsumer.add( \"update-db-project\" );\n+        enabledUnprocessedConsumer.add( \"validate-repository-metadata\" );\n+        \n+        action.setEnabledUnprocessedConsumers( enabledUnprocessedConsumer );\n+    }\n+    \n+    private void setUpEnabledCleanupConsumers( )\n+    {\n+        List<String> enabledCleanupConsumers = new ArrayList<String>();\n+        \n+        enabledCleanupConsumers.add( \"not-present-remove-db-artifact\" );\n+        enabledCleanupConsumers.add( \"not-present-remove-db-project\" );\n+        enabledCleanupConsumers.add( \"not-present-remove-indexed\" );\n+        \n+        action.setEnabledCleanupConsumers( enabledCleanupConsumers );\n+    }\n+    \n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/5e125fc536d6dc7527d85c935449fb24ce650947",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/7103070bc2449208e278baf58e263dbe8670d7b1",
        "message": "Fix error 500 with NPE when user click the dependency link of the current artifact and this dependency isn't in the repo\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@512258 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_58",
        "file": [
            {
                "sha": "c84d33ab030331d3abdfcaeec6a5fc4c9c9b458f",
                "filename": "archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/DownloadArtifact.java",
                "status": "modified",
                "additions": 13,
                "deletions": 9,
                "changes": 22,
                "blob_url": "https://github.com/apache/archiva/blob/5e125fc536d6dc7527d85c935449fb24ce650947/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/DownloadArtifact.java",
                "raw_url": "https://github.com/apache/archiva/raw/5e125fc536d6dc7527d85c935449fb24ce650947/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/DownloadArtifact.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-webapp/src/main/java/org/apache/maven/archiva/web/tags/DownloadArtifact.java?ref=5e125fc536d6dc7527d85c935449fb24ce650947",
                "patch": "@@ -93,17 +93,21 @@ public boolean end( Writer writer, String body )\n         try\n         {\n             ManagedArtifact managedArtifact = managedRepositories.findArtifact( groupId, artifactId, version );\n-            RepositoryConfiguration repoConfig = managedRepositories.getRepositoryConfiguration( managedArtifact\n-                .getRepositoryId() );\n-            String prefix = req.getContextPath() + \"/repository/\" + repoConfig.getUrlName();\n \n-            if ( mini )\n+            if ( managedArtifact != null )\n             {\n-                appendMini( sb, prefix, managedArtifact );\n-            }\n-            else\n-            {\n-                appendNormal( sb, prefix, managedArtifact );\n+                RepositoryConfiguration repoConfig = managedRepositories.getRepositoryConfiguration( managedArtifact\n+                    .getRepositoryId() );\n+                String prefix = req.getContextPath() + \"/repository/\" + repoConfig.getUrlName();\n+\n+                if ( mini )\n+                {\n+                    appendMini( sb, prefix, managedArtifact );\n+                }\n+                else\n+                {\n+                    appendNormal( sb, prefix, managedArtifact );\n+                }\n             }\n         }\n         catch ( ProjectBuildingException e )"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/archiva/commit/0cecbab8be9eacccf01bb4dc096a643aaad45da5",
        "repo": "archiva",
        "parent": "https://github.com/apache/archiva/commit/48e96d554fa626f031aa0cc88dfb0b15270eeb08",
        "message": "[MRM-913]\nsubmitted by Jevica Arianne Zurbano\no patch does the following:\n  - deletes artifacts\n  - cleans up database\n  - executes scan to reflect changes when browsing repository\n  - updates metadata\n  - updates audit.log\n  - 'Delete Artifact' added in navigation and is displayed for users with repository manager role\n  - only allows manager of the repository to delete artifacts from it\n\no additional tweaks to the submitted patch:\n  - removed catch for NPE in DeleteArtifactAction\n  - migrated jsps & action class to struts 2\n  - moved invocation of cleanup consumers in DeleteArtifactAction to DatabaseConsumers (added new method for this in DatabaseConsumers)\n  - applied formatting\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@746183 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "archiva_59",
        "file": [
            {
                "sha": "e79e51b505fc64b771b33e6a0f194db0d8fb7fc2",
                "filename": "archiva-modules/archiva-database/src/main/java/org/apache/maven/archiva/database/updater/DatabaseConsumers.java",
                "status": "modified",
                "additions": 39,
                "deletions": 0,
                "changes": 39,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-database/src/main/java/org/apache/maven/archiva/database/updater/DatabaseConsumers.java",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-database/src/main/java/org/apache/maven/archiva/database/updater/DatabaseConsumers.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-database/src/main/java/org/apache/maven/archiva/database/updater/DatabaseConsumers.java?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "patch": "@@ -25,11 +25,15 @@\n import org.apache.maven.archiva.configuration.ArchivaConfiguration;\n import org.apache.maven.archiva.configuration.DatabaseScanningConfiguration;\n import org.apache.maven.archiva.consumers.functors.PermanentConsumerPredicate;\n+import org.apache.maven.archiva.model.ArchivaArtifact;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationContextAware;\n \n import java.util.ArrayList;\n+import java.util.Iterator;\n import java.util.List;\n \n /**\n@@ -40,6 +44,8 @@\n public class DatabaseConsumers\n     implements ApplicationContextAware\n {    \n+    private Logger log = LoggerFactory.getLogger( DatabaseConsumers.class );\n+    \n     private ArchivaConfiguration archivaConfiguration;\n \n     private Predicate selectedCleanupConsumers;\n@@ -149,4 +155,37 @@ public List getAvailableCleanupConsumers()\n     {\n         return new ArrayList( applicationContext.getBeansOfType( DatabaseCleanupConsumer.class ).values() );\n     }\n+    \n+    /**\n+     * Execute the cleanup consumers to cleanup the specified artifact from the database and index.\n+     * \n+     * @param artifact\n+     */\n+    public void executeCleanupConsumer( ArchivaArtifact artifact )\n+    {\n+        List consumers = getSelectedCleanupConsumers();\n+        Iterator it = consumers.iterator();\n+        while ( it.hasNext() )\n+        {\n+            ArchivaArtifactConsumer consumer = (ArchivaArtifactConsumer) it.next();\n+            consumer.beginScan();\n+        }\n+        \n+        if ( CollectionUtils.isEmpty( consumers ) )\n+        {\n+            log.warn( \"There are no selected consumers for artifact cleanup.\" );\n+            return;\n+        }\n+        \n+        ProcessArchivaArtifactClosure processArtifactClosure = new ProcessArchivaArtifactClosure();\n+        processArtifactClosure.setArtifact( artifact );\n+        \n+        CollectionUtils.forAllDo( consumers, processArtifactClosure );\n+        \n+        while ( it.hasNext() )\n+        {\n+            ArchivaArtifactConsumer consumer = (ArchivaArtifactConsumer) it.next();\n+            consumer.completeScan();\n+        }\n+    }\n }"
            },
            {
                "sha": "842a5e64766728934b82c86f6d8ab0e8bfef0e89",
                "filename": "archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "status": "modified",
                "additions": 49,
                "deletions": 0,
                "changes": 49,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "patch": "@@ -20,13 +20,19 @@\n  */\n \n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n import java.util.List;\n \n import org.apache.maven.archiva.configuration.ArchivaConfiguration;\n import org.apache.maven.archiva.configuration.ManagedRepositoryConfiguration;\n+import org.apache.maven.archiva.security.ArchivaRoleConstants;\n import org.codehaus.plexus.redback.authentication.AuthenticationResult;\n import org.codehaus.plexus.redback.authorization.AuthorizationException;\n import org.codehaus.plexus.redback.rbac.RBACManager;\n+import org.codehaus.plexus.redback.rbac.RbacObjectNotFoundException;\n+import org.codehaus.plexus.redback.rbac.RbacManagerException;\n+import org.codehaus.plexus.redback.rbac.Role;\n import org.codehaus.plexus.redback.role.RoleManager;\n import org.codehaus.plexus.redback.role.RoleManagerException;\n import org.codehaus.plexus.redback.system.DefaultSecuritySession;\n@@ -161,4 +167,47 @@ public boolean isAuthorizedToUploadArtifacts( String principal, String repoId )\n             throw new ArchivaSecurityException( e.getMessage() );\n         }\n     }\n+    \n+    public boolean isAuthorizedToDeleteArtifacts( String principal, String repoId )\n+        throws RbacManagerException, RbacObjectNotFoundException\n+    {\n+        boolean isAuthorized = false;\n+        String delimiter = \" - \";\n+        \n+        try\n+        {\n+            Collection roleList = rbacManager.getEffectivelyAssignedRoles( principal );\n+            \n+            Iterator it = roleList.iterator();\n+            \n+            while ( it.hasNext() )\n+            {\n+                Role role = (Role) it.next();\n+                \n+                String roleName = role.getName();\n+                \n+                if ( roleName.startsWith( ArchivaRoleConstants.REPOSITORY_MANAGER_ROLE_PREFIX ) )\n+                {\n+                    int delimiterIndex = roleName.indexOf( delimiter );\n+                    String resourceName = roleName.substring( delimiterIndex + delimiter.length() );\n+                    \n+                    if ( resourceName.equals( repoId ) )\n+                    {\n+                        isAuthorized = true;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+        catch ( RbacObjectNotFoundException e )\n+        {\n+            throw new RbacObjectNotFoundException( \"Unable to find user \" + principal + \"\" );\n+        }\n+        catch ( RbacManagerException e )\n+        {\n+            throw new RbacManagerException( \"Unable to get roles for user \" + principal + \"\" );\n+        }\n+        \n+        return isAuthorized;\n+    }\n }"
            },
            {
                "sha": "9b3840ac67156f5de09e8fc619263a98e28bdb7a",
                "filename": "archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/UserRepositories.java",
                "status": "modified",
                "additions": 15,
                "deletions": 0,
                "changes": 15,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/UserRepositories.java",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/UserRepositories.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/UserRepositories.java?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "patch": "@@ -19,6 +19,9 @@\n  * under the License.\n  */\n \n+import org.codehaus.plexus.redback.rbac.RbacObjectNotFoundException;\n+import org.codehaus.plexus.redback.rbac.RbacManagerException;\n+\n import java.util.List;\n \n /**\n@@ -60,5 +63,17 @@ public void createMissingRepositoryRoles( String repoId )\n      */\n     public boolean isAuthorizedToUploadArtifacts( String principal, String repoId)\n         throws PrincipalNotFoundException, ArchivaSecurityException;\n+     \n+    /**\n+     * Check if user is authorized to delete artifacts in the repository.\n+     * \n+     * @param principal\n+     * @param repoId\n+     * @return\n+     * @throws RbacManagerException\n+     * @throws RbacObjectNotFoundException\n+     */\n+    public boolean isAuthorizedToDeleteArtifacts( String principal, String repoId )\n+        throws RbacManagerException, RbacObjectNotFoundException;\n     \n }"
            },
            {
                "sha": "df72885d1c58138118be32209f8c5285e63d2e40",
                "filename": "archiva-modules/archiva-web/archiva-security/src/main/resources/META-INF/redback/redback.xml",
                "status": "modified",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-security/src/main/resources/META-INF/redback/redback.xml",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-security/src/main/resources/META-INF/redback/redback.xml",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-security/src/main/resources/META-INF/redback/redback.xml?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "patch": "@@ -24,6 +24,11 @@\n           <id>archiva-run-indexer</id>\n           <name>archiva-run-indexer</name>\n           <description>Run Archiva Indexer</description>\n+        </operation>\n+         <operation>\n+          <id>archiva-delete-artifact</id>\n+          <name>archiva-delete-artifact</name>\n+          <description>Delete Artifact</description>\n         </operation>\n         <operation>\n           <id>archiva-access-reports</id>\n@@ -180,6 +185,13 @@\n           <namePrefix>Repository Manager</namePrefix>\n           <assignable>true</assignable>\n           <permissions>\n+             <permission>\n+              <id>archiva-delete-artifact</id>\n+              <name>Delete Artifact</name>\n+              <operation>archiva-delete-artifact</operation>\n+              <resource>global</resource>\n+              <permanent>true</permanent>\n+            </permission>\n             <permission>\n               <id>archiva-edit-repository</id>\n               <name>Archiva Edit Repository</name>"
            },
            {
                "sha": "fa3101b89670d1c6f6081391df3b526e90f4101e",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/DeleteArtifactAction.java",
                "status": "added",
                "additions": 426,
                "deletions": 0,
                "changes": 426,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/DeleteArtifactAction.java",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/DeleteArtifactAction.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/DeleteArtifactAction.java?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "patch": "@@ -0,0 +1,426 @@\n+package org.apache.maven.archiva.web.action;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import org.apache.archiva.checksum.ChecksumAlgorithm;\n+import org.apache.archiva.checksum.ChecksummedFile;\n+import org.apache.maven.archiva.common.utils.VersionComparator;\n+import org.apache.maven.archiva.common.utils.VersionUtil;\n+import org.apache.maven.archiva.configuration.ArchivaConfiguration;\n+import org.apache.maven.archiva.configuration.ManagedRepositoryConfiguration;\n+import org.apache.maven.archiva.database.updater.DatabaseConsumers;\n+import org.apache.maven.archiva.database.ArchivaDatabaseException;\n+import org.apache.maven.archiva.database.ArtifactDAO;\n+import org.apache.maven.archiva.database.constraints.ArtifactVersionsConstraint;\n+import org.apache.maven.archiva.model.ArchivaArtifact;\n+import org.apache.maven.archiva.model.ArchivaRepositoryMetadata;\n+import org.apache.maven.archiva.model.VersionedReference;\n+import org.apache.maven.archiva.repository.audit.Auditable;\n+import org.apache.maven.archiva.repository.audit.AuditEvent;\n+import org.apache.maven.archiva.repository.audit.AuditListener;\n+import org.apache.maven.archiva.repository.metadata.MetadataTools;\n+import org.apache.maven.archiva.repository.metadata.RepositoryMetadataException;\n+import org.apache.maven.archiva.repository.metadata.RepositoryMetadataReader;\n+import org.apache.maven.archiva.repository.metadata.RepositoryMetadataWriter;\n+import org.apache.maven.archiva.repository.ContentNotFoundException;\n+import org.apache.maven.archiva.repository.RepositoryException;\n+import org.apache.maven.archiva.repository.RepositoryNotFoundException;\n+import org.apache.maven.archiva.repository.ManagedRepositoryContent;\n+import org.apache.maven.archiva.repository.RepositoryContentFactory;\n+import org.apache.maven.archiva.security.ArchivaXworkUser;\n+import org.apache.maven.archiva.security.UserRepositories;\n+import org.codehaus.plexus.redback.rbac.RbacManagerException;\n+\n+import org.apache.struts2.ServletActionContext;\n+import com.opensymphony.xwork2.ActionContext;\n+import com.opensymphony.xwork2.Preparable;\n+import com.opensymphony.xwork2.Validateable;\n+\n+/**\n+ * Delete an artifact. Metadata will be updated if one exists, otherwise it would be created.\n+ * \n+ * @plexus.component role=\"com.opensymphony.xwork2.Action\" role-hint=\"deleteArtifactAction\"\n+ */\n+public class DeleteArtifactAction\n+    extends PlexusActionSupport\n+    implements Validateable, Preparable, Auditable\n+{\n+    /**\n+     * @plexus.requirement\n+     */\n+    private ArchivaXworkUser archivaXworkUser;\n+\n+    /**\n+     * The groupId of the artifact to be deleted.\n+     */\n+    private String groupId;\n+\n+    /**\n+     * The artifactId of the artifact to be deleted.\n+     */\n+    private String artifactId;\n+\n+    /**\n+     * The version of the artifact to be deleted.\n+     */\n+    private String version;\n+\n+    /**\n+     * The repository where the artifact is to be deleted.\n+     */\n+    private String repositoryId;\n+\n+    /**\n+     * List of managed repositories to delete from.\n+     */\n+    private List<String> managedRepos;\n+\n+    /**\n+     * @plexus.requirement\n+     */\n+    private UserRepositories userRepositories;\n+\n+    /**\n+     * @plexus.requirement role-hint=\"default\"\n+     */\n+    private ArchivaConfiguration configuration;\n+\n+    /**\n+     * @plexus.requirement\n+     */\n+    private RepositoryContentFactory repositoryFactory;\n+\n+    /**\n+     * @plexus.requirement role-hint=\"jdo\"\n+     */\n+    private ArtifactDAO artifactDAO;\n+\n+    /**\n+     * @plexus.requirement \n+     */\n+    private DatabaseConsumers databaseConsumers;\n+\n+    /**\n+     * @plexus.requirement role=\"org.apache.maven.archiva.repository.audit.AuditListener\"\n+     */\n+    private List<AuditListener> auditListeners = new ArrayList<AuditListener>();\n+\n+    private ChecksumAlgorithm[] algorithms = new ChecksumAlgorithm[] { ChecksumAlgorithm.SHA1, ChecksumAlgorithm.MD5 };\n+\n+    public String getGroupId()\n+    {\n+        return groupId;\n+    }\n+\n+    public void setGroupId( String groupId )\n+    {\n+        this.groupId = groupId;\n+    }\n+\n+    public String getArtifactId()\n+    {\n+        return artifactId;\n+    }\n+\n+    public void setArtifactId( String artifactId )\n+    {\n+        this.artifactId = artifactId;\n+    }\n+\n+    public String getVersion()\n+    {\n+        return version;\n+    }\n+\n+    public void setVersion( String version )\n+    {\n+        this.version = version;\n+    }\n+\n+    public String getRepositoryId()\n+    {\n+        return repositoryId;\n+    }\n+\n+    public void setRepositoryId( String repositoryId )\n+    {\n+        this.repositoryId = repositoryId;\n+    }\n+\n+    public List<String> getManagedRepos()\n+    {\n+        return managedRepos;\n+    }\n+\n+    public void setManagedRepos( List<String> managedRepos )\n+    {\n+        this.managedRepos = managedRepos;\n+    }\n+\n+    public void prepare()\n+    {\n+        managedRepos = new ArrayList<String>( configuration.getConfiguration().getManagedRepositoriesAsMap().keySet() );\n+    }\n+\n+    public String input()\n+    {\n+        return INPUT;\n+    }\n+\n+    private void reset()\n+    {\n+        // reset the fields so the form is clear when \n+        // the action returns to the jsp page\n+        groupId = \"\";\n+        artifactId = \"\";\n+        version = \"\";\n+        repositoryId = \"\";\n+    }\n+\n+    public String doDelete()\n+    {\n+        try\n+        {\n+            Date lastUpdatedTimestamp = Calendar.getInstance().getTime();\n+\n+            TimeZone timezone = TimeZone.getTimeZone( \"UTC\" );\n+            DateFormat fmt = new SimpleDateFormat( \"yyyyMMdd.HHmmss\" );\n+            fmt.setTimeZone( timezone );\n+            String timestamp = fmt.format( lastUpdatedTimestamp );\n+\n+            ManagedRepositoryConfiguration repoConfig =\n+                configuration.getConfiguration().findManagedRepositoryById( repositoryId );\n+\n+            VersionedReference ref = new VersionedReference();\n+            ref.setArtifactId( artifactId );\n+            ref.setGroupId( groupId );\n+            ref.setVersion( version );\n+\n+            ManagedRepositoryContent repository = repositoryFactory.getManagedRepositoryContent( repositoryId );\n+\n+            String path = repository.toMetadataPath( ref );\n+            int index = path.lastIndexOf( '/' );\n+            File targetPath = new File( repoConfig.getLocation(), path.substring( 0, index ) );\n+\n+            if ( !targetPath.exists() )\n+            {\n+                throw new ContentNotFoundException( groupId + \":\" + artifactId + \":\" + version );\n+            }\n+\n+            // delete from file system\n+            repository.deleteVersion( ref );\n+\n+            File metadataFile = getMetadata( targetPath.getAbsolutePath() );\n+            ArchivaRepositoryMetadata metadata = getMetadata( metadataFile );\n+\n+            updateMetadata( metadata, metadataFile, lastUpdatedTimestamp );\n+\n+            ArtifactVersionsConstraint constraint =\n+                new ArtifactVersionsConstraint( repositoryId, groupId, artifactId, false );\n+            List<ArchivaArtifact> artifacts = null;\n+\n+            try\n+            {\n+                artifacts = artifactDAO.queryArtifacts( constraint );\n+\n+                if ( artifacts != null )\n+                {\n+                    for ( ArchivaArtifact artifact : artifacts )\n+                    {\n+                        if ( artifact.getVersion().equals( version ) )\n+                        {\n+                            databaseConsumers.executeCleanupConsumer( artifact );\n+                        }\n+                    }\n+                }\n+            }\n+            catch ( ArchivaDatabaseException e )\n+            {\n+                addActionError( \"Error occurred while cleaning up database: \" + e.getMessage() );\n+                return ERROR;\n+            }\n+\n+            String msg =\n+                \"Artifact \\'\" + groupId + \":\" + artifactId + \":\" + version +\n+                    \"\\' was successfully deleted from repository \\'\" + repositoryId + \"\\'\";\n+\n+            triggerAuditEvent( getPrincipal(), repositoryId, groupId + \":\" + artifactId + \":\" + version,\n+                               AuditEvent.REMOVE_FILE );\n+\n+            addActionMessage( msg );\n+\n+            reset();\n+            return SUCCESS;\n+        }\n+        catch ( ContentNotFoundException e )\n+        {\n+            addActionError( \"Artifact does not exist: \" + e.getMessage() );\n+            return ERROR;\n+        }\n+        catch ( RepositoryNotFoundException e )\n+        {\n+            addActionError( \"Target repository cannot be found: \" + e.getMessage() );\n+            return ERROR;\n+        }\n+        catch ( RepositoryException e )\n+        {\n+            addActionError( \"Repository exception: \" + e.getMessage() );\n+            return ERROR;\n+        }\n+    }\n+\n+    private String getPrincipal()\n+    {\n+        return archivaXworkUser.getActivePrincipal( ActionContext.getContext().getSession() );\n+    }\n+\n+    private File getMetadata( String targetPath )\n+    {\n+        String artifactPath = targetPath.substring( 0, targetPath.lastIndexOf( File.separatorChar ) );\n+\n+        return new File( artifactPath, MetadataTools.MAVEN_METADATA );\n+    }\n+\n+    private ArchivaRepositoryMetadata getMetadata( File metadataFile )\n+        throws RepositoryMetadataException\n+    {\n+        ArchivaRepositoryMetadata metadata = new ArchivaRepositoryMetadata();\n+        if ( metadataFile.exists() )\n+        {\n+            metadata = RepositoryMetadataReader.read( metadataFile );\n+        }\n+        return metadata;\n+    }\n+\n+    /**\n+     * Update artifact level metadata. Creates one if metadata does not exist after artifact deletion.\n+     * \n+     * @param metadata\n+     */\n+    private void updateMetadata( ArchivaRepositoryMetadata metadata, File metadataFile, Date lastUpdatedTimestamp )\n+        throws RepositoryMetadataException\n+    {\n+        List<String> availableVersions = new ArrayList<String>();\n+        String latestVersion = \"\";\n+\n+        if ( metadataFile.exists() )\n+        {\n+            if ( metadata.getAvailableVersions() != null )\n+            {\n+                availableVersions = metadata.getAvailableVersions();\n+\n+                if ( availableVersions.size() > 0 )\n+                {\n+                    Collections.sort( availableVersions, VersionComparator.getInstance() );\n+\n+                    if ( availableVersions.contains( version ) )\n+                    {\n+                        availableVersions.remove( availableVersions.indexOf( version ) );\n+                    }\n+                    if ( availableVersions.size() > 0 )\n+                    {\n+                        latestVersion = availableVersions.get( availableVersions.size() - 1 );\n+                    }\n+                }\n+            }\n+        }\n+\n+        if ( metadata.getGroupId() == null )\n+        {\n+            metadata.setGroupId( groupId );\n+        }\n+        if ( metadata.getArtifactId() == null )\n+        {\n+            metadata.setArtifactId( artifactId );\n+        }\n+\n+        if ( !VersionUtil.isSnapshot( version ) )\n+        {\n+            if ( metadata.getReleasedVersion().equals( version ) )\n+            {\n+                metadata.setReleasedVersion( latestVersion );\n+            }\n+        }\n+\n+        metadata.setLatestVersion( latestVersion );\n+        metadata.setLastUpdatedTimestamp( lastUpdatedTimestamp );\n+        metadata.setAvailableVersions( availableVersions );\n+\n+        RepositoryMetadataWriter.write( metadata, metadataFile );\n+        ChecksummedFile checksum = new ChecksummedFile( metadataFile );\n+        checksum.fixChecksums( algorithms );\n+    }\n+\n+    public void validate()\n+    {\n+        try\n+        {\n+            if ( !userRepositories.isAuthorizedToDeleteArtifacts( getPrincipal(), repositoryId ) )\n+            {\n+                addActionError( \"User is not authorized to delete artifacts in repository '\" + repositoryId + \"'.\" );\n+            }\n+\n+            if ( ( version.length() > 0 ) && ( !VersionUtil.isVersion( version ) ) )\n+            {\n+                addActionError( \"Invalid version.\" );\n+            }\n+        }\n+        catch ( RbacManagerException e )\n+        {\n+            addActionError( e.getMessage() );\n+        }\n+    }\n+\n+    public void addAuditListener( AuditListener listener )\n+    {\n+        this.auditListeners.add( listener );\n+    }\n+\n+    public void clearAuditListeners()\n+    {\n+        this.auditListeners.clear();\n+    }\n+\n+    public void removeAuditListener( AuditListener listener )\n+    {\n+        this.auditListeners.remove( listener );\n+    }\n+\n+    private void triggerAuditEvent( String user, String repositoryId, String resource, String action )\n+    {\n+        AuditEvent event = new AuditEvent( repositoryId, user, resource, action );\n+        event.setRemoteIP( ServletActionContext.getRequest().getRemoteAddr() );\n+\n+        for ( AuditListener listener : auditListeners )\n+        {\n+            listener.auditEvent( event );\n+        }\n+    }\n+}"
            },
            {
                "sha": "dcef342d032b89f95720d6a05586f766e9a79946",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/resources/org/apache/maven/archiva/web/action/DeleteArtifactAction-validation.xml",
                "status": "added",
                "additions": 40,
                "deletions": 0,
                "changes": 40,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/resources/org/apache/maven/archiva/web/action/DeleteArtifactAction-validation.xml",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/resources/org/apache/maven/archiva/web/action/DeleteArtifactAction-validation.xml",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/resources/org/apache/maven/archiva/web/action/DeleteArtifactAction-validation.xml?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "patch": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<!DOCTYPE validators PUBLIC \"-//OpenSymphony Group//XWork Validator 1.0.2//EN\"\n+    \"http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd\">\n+\n+<validators>\n+  <field name=\"groupId\">\n+    <field-validator type=\"requiredstring\">\n+      <message>You must enter a groupId.</message>\n+    </field-validator>\n+  </field>\n+  <field name=\"artifactId\">\n+    <field-validator type=\"requiredstring\">\n+      <message>You must enter an artifactId.</message>\n+    </field-validator>\n+  </field>\n+  <field name=\"version\">\n+    <field-validator type=\"requiredstring\">\n+      <message>You must enter a version.</message>\n+    </field-validator>\n+  </field>   \n+</validators>\n\\ No newline at end of file"
            },
            {
                "sha": "f52e3827b854c64b8c57afa45f1f10f111e6e504",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/resources/struts.xml",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/resources/struts.xml",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/resources/struts.xml",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/resources/struts.xml?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "patch": "@@ -170,6 +170,12 @@\n       <interceptor-ref name=\"fileUpload\"/>\n     </action>\n \n+\t<action name=\"deleteArtifact\" class=\"deleteArtifactAction\" method=\"input\">      \n+      <result name=\"input\">/WEB-INF/jsp/deleteArtifact.jsp</result>\n+      <result name=\"error\">/WEB-INF/jsp/deleteArtifact.jsp</result>\n+      <result name=\"success\">/WEB-INF/jsp/deleteArtifact.jsp</result>\n+    </action>\n+\n     <action name=\"checksumSearch\" class=\"searchAction\" method=\"findArtifact\">\n       <result name=\"input\">/WEB-INF/jsp/findArtifact.jsp</result>\n       <result name=\"results\">/WEB-INF/jsp/results.jsp</result>"
            },
            {
                "sha": "ebc3b263e8e023fc99a11aaa32d8f0c521c9b3b2",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/decorators/default.jsp",
                "status": "modified",
                "additions": 6,
                "deletions": 1,
                "changes": 7,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/decorators/default.jsp",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/decorators/default.jsp",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/decorators/default.jsp?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "patch": "@@ -80,7 +80,7 @@\n       </li>\n     </ul>\n \n-    <redback:ifAnyAuthorized permissions=\"archiva-manage-users,archiva-access-reports,archiva-manage-configuration\">\n+    <redback:ifAnyAuthorized permissions=\"archiva-delete-artifact,archiva-manage-users,archiva-access-reports,archiva-manage-configuration\">\n       <h5>Manage</h5>\n       <ul>\n         <redback:ifAuthorized permission=\"archiva-access-reports\">\n@@ -110,6 +110,11 @@\n           <li class=\"none\">\n             <my:currentWWUrl action=\"upload\" namespace=\"/\">Upload Artifact</my:currentWWUrl>\n           </li>\n+        </redback:ifAuthorized>\n+        <redback:ifAuthorized permission=\"archiva-delete-artifact\">\n+          <li class=\"none\">\n+            <my:currentWWUrl action=\"deleteArtifact\" namespace=\"/\">Delete Artifact</my:currentWWUrl>\n+          </li>\n         </redback:ifAuthorized>\n           <%-- TODO: future options here.\n              * Repository Statistics."
            },
            {
                "sha": "97dd025d7b55b977089c60ec9feac8ea65bbcef7",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/deleteArtifact.jsp",
                "status": "added",
                "additions": 43,
                "deletions": 0,
                "changes": 43,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/deleteArtifact.jsp",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/deleteArtifact.jsp",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/deleteArtifact.jsp?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "patch": "@@ -0,0 +1,43 @@\n+<%--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  --%>\n+\n+<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n+<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n+\n+<html>\n+<head>\n+  <title>Delete Artifact</title>\n+  <s:head/>\n+</head>\n+\n+<body>\n+<h1>Delete Artifact</h1>\n+\n+  <s:actionerror/>\n+  <s:actionmessage/>\n+\n+  <div id=\"contentArea\">\n+    <s:form action=\"deleteArtifact!doDelete\" namespace=\"/\" method=\"post\" validate=\"true\">    \n+      <%@ include file=\"/WEB-INF/jsp/include/deleteArtifactForm.jspf\" %>\n+      <s:submit/>\n+    </s:form>\n+  </div>\n+\n+</body>\n+</html>"
            },
            {
                "sha": "3eb5af7f51773282d9a88e043d97feed266e1ca5",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/include/deleteArtifactForm.jspf",
                "status": "added",
                "additions": 27,
                "deletions": 0,
                "changes": 27,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/include/deleteArtifactForm.jspf",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/include/deleteArtifactForm.jspf",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/include/deleteArtifactForm.jspf?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "patch": "@@ -0,0 +1,27 @@\n+<%--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  --%>\n+  \n+<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n+<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n+\n+<s:textfield name=\"groupId\" label=\"Group Id\" size=\"50\" required=\"true\"/>\n+<s:textfield name=\"artifactId\" label=\"Artifact Id\" size=\"50\" required=\"true\"/>\n+<s:textfield name=\"version\" label=\"Version\" size=\"50\" required=\"true\"/>\n+<s:select name=\"repositoryId\" list=\"managedRepos\" label=\"Repository Id\"/>\n+\t\n\\ No newline at end of file"
            },
            {
                "sha": "6682236cd3f8aa536122c2bb12dd03a5baa2b69a",
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/rss/UserRepositoriesStub.java",
                "status": "modified",
                "additions": 8,
                "deletions": 0,
                "changes": 8,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/rss/UserRepositoriesStub.java",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/rss/UserRepositoriesStub.java",
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/rss/UserRepositoriesStub.java?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "patch": "@@ -26,6 +26,8 @@\n import org.apache.maven.archiva.security.ArchivaSecurityException;\n import org.apache.maven.archiva.security.PrincipalNotFoundException;\n import org.apache.maven.archiva.security.UserRepositories;\n+import org.codehaus.plexus.redback.rbac.RbacObjectNotFoundException;\n+import org.codehaus.plexus.redback.rbac.RbacManagerException;\n \n /**\n  * UserRepositories stub used for testing. \n@@ -58,5 +60,11 @@ public boolean isAuthorizedToUploadArtifacts( String principal, String repoId )\n         // TODO Auto-generated method stub\n         return false;\n     }\n+    \n+    public boolean isAuthorizedToDeleteArtifacts( String principal, String repoId )\n+        throws RbacManagerException, RbacObjectNotFoundException\n+    {\n+        return false;\n+    }\n \n }"
            }
        ]
    }
]
