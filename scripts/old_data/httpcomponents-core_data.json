[
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/4df046258ebbb2da6a5a66c24e656f6229516710",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/dc6b3e5aa5520c7d70ba3a1db0f0f2262b87d4ec",
        "message": "Throw NullPointerException for null arguments in Args\n\nThe common approach for the past years have been to throw NPE if a null\nargument has been passed. This mimics the behavior of\nObjects#requireNonNull().",
        "bug_id": "httpcomponents-core_1",
        "file": [
            {
                "sha": "0ee17b6e650cb7da49a95dc3a58c7bef652f1341",
                "filename": "httpcore5/src/main/java/org/apache/hc/core5/util/Args.java",
                "status": "modified",
                "additions": 7,
                "deletions": 7,
                "changes": 14,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/main/java/org/apache/hc/core5/util/Args.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/main/java/org/apache/hc/core5/util/Args.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/main/java/org/apache/hc/core5/util/Args.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -79,7 +79,7 @@ public static long checkRange(final long value, final long lowInclusive, final l\n \n     public static <T extends CharSequence> T containsNoBlanks(final T argument, final String name) {\n         if (argument == null) {\n-            throw illegalArgumentExceptionNotNull(name);\n+            throw NullPointerException(name);\n         }\n         if (argument.length() == 0) {\n             throw illegalArgumentExceptionNotEmpty(name);\n@@ -98,13 +98,13 @@ private static IllegalArgumentException illegalArgumentExceptionNotEmpty(final S\n         return new IllegalArgumentException(name + \" must not be empty\");\n     }\n \n-    private static IllegalArgumentException illegalArgumentExceptionNotNull(final String name) {\n-        return new IllegalArgumentException(name + \" must not be null\");\n+    private static NullPointerException NullPointerException(final String name) {\n+        return new NullPointerException(name + \" must not be null\");\n     }\n \n     public static <T extends CharSequence> T notBlank(final T argument, final String name) {\n         if (argument == null) {\n-            throw illegalArgumentExceptionNotNull(name);\n+            throw NullPointerException(name);\n         }\n         if (TextUtils.isBlank(argument)) {\n             throw new IllegalArgumentException(name + \" must not be blank\");\n@@ -114,7 +114,7 @@ private static IllegalArgumentException illegalArgumentExceptionNotNull(final St\n \n     public static <T extends CharSequence> T notEmpty(final T argument, final String name) {\n         if (argument == null) {\n-            throw illegalArgumentExceptionNotNull(name);\n+            throw NullPointerException(name);\n         }\n         if (TextUtils.isEmpty(argument)) {\n             throw illegalArgumentExceptionNotEmpty(name);\n@@ -124,7 +124,7 @@ private static IllegalArgumentException illegalArgumentExceptionNotNull(final St\n \n     public static <E, T extends Collection<E>> T notEmpty(final T argument, final String name) {\n         if (argument == null) {\n-            throw illegalArgumentExceptionNotNull(name);\n+            throw NullPointerException(name);\n         }\n         if (argument.isEmpty()) {\n             throw illegalArgumentExceptionNotEmpty(name);\n@@ -148,7 +148,7 @@ public static long notNegative(final long n, final String name) {\n \n     public static <T> T notNull(final T argument, final String name) {\n         if (argument == null) {\n-            throw illegalArgumentExceptionNotNull(name);\n+            throw NullPointerException(name);\n         }\n         return argument;\n     }"
            },
            {
                "sha": "e1348d99580abba8cebadec88accaf54af9ddc69",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/TestContentType.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/TestContentType.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/TestContentType.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/TestContentType.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -83,8 +83,8 @@ public void testLowCaseText() throws Exception {\n     public void testCreateInvalidInput() throws Exception {\n         try {\n             ContentType.create(null, (String) null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {"
            },
            {
                "sha": "54019d1df94d5d63844564133bec8ef21be723b2",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -68,8 +68,8 @@ public void testConstructor() {\n         Assert.assertEquals(\"https\", host5.getSchemeName());\n         try {\n             new HttpHost(null, (String) null, -1);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             new HttpHost(null, \"   \", -1);\n@@ -78,8 +78,8 @@ public void testConstructor() {\n         }\n         try {\n             new HttpHost(null, (InetAddress) null, -1);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException expected) {\n         }\n     }\n "
            },
            {
                "sha": "9252f7bf74048f4b2536c47349e14daaabe26012",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/TestDefaultConnectionReuseStrategy.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/TestDefaultConnectionReuseStrategy.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/TestDefaultConnectionReuseStrategy.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/TestDefaultConnectionReuseStrategy.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -55,8 +55,8 @@ public void setUp() {\n         context = new BasicHttpContext(null);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n-    public void testIllegalResponseArg() throws Exception {\n+    @Test(expected=NullPointerException.class)\n+    public void testInvalidResponseArg() throws Exception {\n         reuseStrategy.keepAlive(null, null, this.context);\n     }\n "
            },
            {
                "sha": "4c15bef2ab4182e484e4cb2952eeaaf1404cc951",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpRequestExecutor.java",
                "status": "modified",
                "additions": 18,
                "deletions": 18,
                "changes": 36,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpRequestExecutor.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpRequestExecutor.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpRequestExecutor.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -61,58 +61,58 @@ public void testInvalidInput() throws Exception {\n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.execute(null, conn, context);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.execute(request, null, context);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.execute(request, conn, null);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n \n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.preProcess(null, httprocessor, context);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.preProcess(request, null, context);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.preProcess(request, httprocessor, null);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n \n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.postProcess(null, httprocessor, context);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.postProcess(response, null, context);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.postProcess(response, httprocessor, null);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n     }\n "
            },
            {
                "sha": "889efe7ceb847cbfa0015797d8349bac44d7880d",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpService.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpService.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpService.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpService.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -101,8 +101,8 @@ public void testInvalidInitialization() throws Exception {\n                     handlerResolver,\n                     connReuseStrategy,\n                     responseFactory);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n     }\n "
            },
            {
                "sha": "43a935a3cde116e0ee647cae1ae10215c9036933",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkDecoder.java",
                "status": "modified",
                "additions": 7,
                "deletions": 7,
                "changes": 14,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkDecoder.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkDecoder.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkDecoder.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -552,25 +552,25 @@ public void testInvalidConstructor() {\n         final SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, 0, StandardCharsets.US_ASCII);\n         try {\n             new ChunkDecoder(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new ChunkDecoder(channel, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new ChunkDecoder(channel, inbuf, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testInvalidInput() throws Exception {\n         final String s = \"10;key=\\\"value\\\"\\r\\n1234567890123456\\r\\n\" +\n                 \"5\\r\\n12345\\r\\n5\\r\\n12345\\r\\n0\\r\\nFooter1 abcde\\r\\n\\r\\n\";"
            },
            {
                "sha": "4427276e115a4084aa9f71d2927f63a32da0c1c4",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkEncoder.java",
                "status": "modified",
                "additions": 6,
                "deletions": 6,
                "changes": 12,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkEncoder.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkEncoder.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkEncoder.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -213,20 +213,20 @@ public void testInvalidConstructor() {\n \n         try {\n             new ChunkEncoder(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new ChunkEncoder(channel, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new ChunkEncoder(channel, outbuf, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n     }"
            },
            {
                "sha": "0df1f1d8a21c680782faac1d487e8fe4dc4e93ff",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityDecoder.java",
                "status": "modified",
                "additions": 8,
                "deletions": 8,
                "changes": 16,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityDecoder.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityDecoder.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityDecoder.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -353,20 +353,20 @@ public void testInvalidConstructor() {\n         final SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, 0, StandardCharsets.US_ASCII);\n         try {\n             new IdentityDecoder(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new IdentityDecoder(channel, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new IdentityDecoder(channel, inbuf, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n     }\n@@ -383,8 +383,8 @@ public void testInvalidInput() throws Exception {\n \n         try {\n             decoder.read(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "1c8c80b94f9dc703376179a72ded5b6449e916f6",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityEncoder.java",
                "status": "modified",
                "additions": 6,
                "deletions": 6,
                "changes": 12,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityEncoder.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityEncoder.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityEncoder.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -130,20 +130,20 @@ public void testInvalidConstructor() {\n \n         try {\n             new IdentityEncoder(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new IdentityEncoder(channel, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new IdentityEncoder(channel, outbuf, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n     }"
            },
            {
                "sha": "4ab31d4f65181fee80d85f731aed73efc2414e32",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedDecoder.java",
                "status": "modified",
                "additions": 8,
                "deletions": 8,
                "changes": 16,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedDecoder.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedDecoder.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedDecoder.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -499,20 +499,20 @@ public void testInvalidConstructor() {\n         final BasicHttpTransportMetrics metrics = new BasicHttpTransportMetrics();\n         try {\n             new LengthDelimitedDecoder(null, null, null, 10);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new LengthDelimitedDecoder(channel, null, null, 10);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new LengthDelimitedDecoder(channel, inbuf, null, 10);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n@@ -536,8 +536,8 @@ public void testInvalidInput() throws Exception {\n \n         try {\n             decoder.read(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "be9ff4bcd62bb3962cf24b920010e3f55d4ad594",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedEncoder.java",
                "status": "modified",
                "additions": 6,
                "deletions": 6,
                "changes": 12,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedEncoder.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedEncoder.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedEncoder.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -147,20 +147,20 @@ public void testInvalidConstructor() {\n \n         try {\n             new LengthDelimitedEncoder(null, null, null, 10);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new LengthDelimitedEncoder(channel, null, null, 10);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new LengthDelimitedEncoder(channel, outbuf, null, 10);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {"
            },
            {
                "sha": "88c1eaab82c2108dae6fcc4ca142b888e16fe4c9",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestBufferedHttpEntity.java",
                "status": "modified",
                "additions": 6,
                "deletions": 6,
                "changes": 12,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestBufferedHttpEntity.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestBufferedHttpEntity.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestBufferedHttpEntity.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -74,8 +74,8 @@ public void testWrappingEntity() throws Exception {\n     public void testIllegalConstructor() throws Exception {\n         try {\n             new BufferedHttpEntity(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -106,8 +106,8 @@ public void testWriteToBuffered() throws Exception {\n \n         try {\n             bufentity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -138,8 +138,8 @@ public void testWriteToWrapped() throws Exception {\n \n         try {\n             bufentity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "55fc39cc8b4780f77100971aa0a2d96bafa7110e",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteArrayEntity.java",
                "status": "modified",
                "additions": 5,
                "deletions": 5,
                "changes": 10,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteArrayEntity.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteArrayEntity.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteArrayEntity.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -61,7 +61,7 @@ public void testBasicOffLen() throws Exception {\n         Assert.assertFalse(entity.isStreaming());\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testIllegalConstructorNullByteArray() throws Exception {\n         new ByteArrayEntity(null, null);\n     }\n@@ -109,8 +109,8 @@ public void testWriteTo() throws Exception {\n \n         try {\n             entity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -142,8 +142,8 @@ public void testWriteToOffLen() throws Exception {\n \n         try {\n             entity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "2c64d60ae6d6ca80ab25c58f461e60efbac48cad",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteBufferEntity.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteBufferEntity.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteBufferEntity.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteBufferEntity.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -79,8 +79,8 @@ public void testWriteTo() throws Exception {\n \n         try {\n             httpentity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "a9bd58df3e4b1becdfc57cb2aed3c2cc2c80d4b7",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestEntityUtils.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestEntityUtils.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestEntityUtils.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestEntityUtils.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -49,7 +49,7 @@\n  */\n public class TestEntityUtils {\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public void testNullEntityToByteArray() throws Exception {\n         EntityUtils.toByteArray(null);\n     }\n@@ -90,8 +90,8 @@ public void testKnownLengthContentToByteArray() throws Exception {\n     public void testNullEntityToString() throws Exception {\n         try {\n             EntityUtils.toString(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "1f20135def33fdf74d58521f11272b75e5048002",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestFileEntity.java",
                "status": "modified",
                "additions": 5,
                "deletions": 5,
                "changes": 10,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestFileEntity.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestFileEntity.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestFileEntity.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -60,11 +60,11 @@ public void testBasics() throws Exception {\n     }\n \n     @Test\n-    public void testIllegalConstructor() throws Exception {\n+    public void testNullConstructor() throws Exception {\n         try {\n             new FileEntity(null, ContentType.TEXT_PLAIN);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -97,8 +97,8 @@ public void testWriteTo() throws Exception {\n \n         try {\n             httpentity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "ffafba3863a817064874d2d146f9c43ed597bebd",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestHttpEntityWrapper.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestHttpEntityWrapper.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestHttpEntityWrapper.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestHttpEntityWrapper.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -58,8 +58,8 @@ public void testBasics() throws Exception {\n     public void testIllegalConstructor() throws Exception {\n         try {\n             new HttpEntityWrapper(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -91,8 +91,8 @@ public void testWriteTo() throws Exception {\n \n         try {\n             wrapped.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "04f937b43628d5cf755b81b63965b763d31ee833",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestInputStreamEntity.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestInputStreamEntity.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestInputStreamEntity.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestInputStreamEntity.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -54,8 +54,8 @@ public void testBasics() throws Exception {\n         Assert.assertTrue(entity.isStreaming());\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testIllegalConstructor() throws Exception {\n+    @Test(expected = NullPointerException.class)\n+    public void testNullConstructor() throws Exception {\n         new InputStreamEntity(null, 0, null);\n     }\n \n@@ -119,7 +119,7 @@ public void testWriteToUnknownLength() throws Exception {\n         Assert.assertEquals(message, s);\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public void testWriteToNull() throws Exception {\n         final InputStreamEntity entity = new InputStreamEntity(EmptyInputStream.INSTANCE, 0, null);\n         entity.writeTo(null);"
            },
            {
                "sha": "ac72cb5820a92ec2e46d90ef50717beb1546fbaf",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestSerializableEntity.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestSerializableEntity.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestSerializableEntity.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestSerializableEntity.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -82,8 +82,8 @@ public void testWriteTo() throws Exception {\n \n         try {\n             httpentity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "c7694effe657058224346fb8c2e53b2aa6483aae",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestStringEntity.java",
                "status": "modified",
                "additions": 5,
                "deletions": 5,
                "changes": 10,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestStringEntity.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestStringEntity.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestStringEntity.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -53,11 +53,11 @@ public void testBasics() throws Exception {\n     }\n \n     @Test\n-    public void testIllegalConstructor() throws Exception {\n+    public void testNullConstructor() throws Exception {\n         try {\n             new StringEntity(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -126,8 +126,8 @@ public void testWriteTo() throws Exception {\n \n         try {\n             httpentity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "87fba77f55b174816544b01f5234316c5525fa0e",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeader.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeader.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeader.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeader.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -46,8 +46,8 @@ public void testConstructor() {\n     public void testInvalidName() {\n         try {\n             new BasicHeader(null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             //expected\n         }\n     }"
            },
            {
                "sha": "0c5700011076b8d6fc303023652caa425f53ab13",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderIterator.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderIterator.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderIterator.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderIterator.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -221,7 +221,7 @@ public void testInvalid() {\n         try {\n             hit = new BasicHeaderIterator(null, \"whatever\");\n             Assert.fail(\"null headers not detected\");\n-        } catch (final IllegalArgumentException iax) {\n+        } catch (final NullPointerException iax) {\n             // expected\n         }\n "
            },
            {
                "sha": "a3f7ed47e99af0d381d69a06921f295508434101",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueFormatter.java",
                "status": "modified",
                "additions": 16,
                "deletions": 16,
                "changes": 32,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueFormatter.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueFormatter.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueFormatter.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -171,51 +171,51 @@ public void testInvalidArguments() throws Exception {\n \n         try {\n             this.formatter.formatNameValuePair(null, param, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatNameValuePair(buf, null, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatParameters(null, params, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatParameters(buf, null, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n \n         try {\n             this.formatter.formatHeaderElement(null, element, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatHeaderElement(buf, null, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatElements(null, elements, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatElements(buf, null, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "9ce8f9c08942b8494b19d006a44f3aad14375ff4",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicLineFormatter.java",
                "status": "modified",
                "additions": 12,
                "deletions": 12,
                "changes": 24,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicLineFormatter.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicLineFormatter.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicLineFormatter.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -69,14 +69,14 @@ public void testRLFormattingInvalidInput() throws Exception {\n         final RequestLine requestline = new RequestLine(Method.GET.name(), \"/stuff\", HttpVersion.HTTP_1_1);\n         try {\n             this.formatter.formatRequestLine(null, requestline);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatRequestLine(buf, null);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -102,14 +102,14 @@ public void testSLFormattingInvalidInput() throws Exception {\n         final StatusLine statusline = new StatusLine(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, \"OK\");\n         try {\n             this.formatter.formatStatusLine(null, statusline);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatStatusLine(buf, null);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -133,14 +133,14 @@ public void testHeaderFormattingInvalidInput() throws Exception {\n         final Header header = new BasicHeader(\"name\", \"value\");\n         try {\n             this.formatter.formatHeader(null, header);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatHeader(buf, null);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "760bf8c812a6e798940d1a665d098290b32a4a5e",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -88,8 +88,8 @@ public void testDefaultRequestConstructors() {\n \n         try {\n             new BasicHttpRequest(Method.GET, (URI) null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "78ae150f4b59b5575d67b9ef87e84e216398394d",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -184,7 +184,7 @@ public void testWrongPublic() {\n         try {\n             new BasicTokenIterator(null);\n             Assert.fail(\"null argument not detected\");\n-        } catch (final IllegalArgumentException iax) {\n+        } catch (final NullPointerException iax) {\n             // expected\n         }\n "
            },
            {
                "sha": "db2ae7f307dd3a8830e447a47ad4da09ae09a84e",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeader.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeader.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeader.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeader.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -59,8 +59,8 @@ public void testBasicConstructorNullValue() {\n     public void testInvalidName() {\n         try {\n             new BasicHeader(null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             //expected\n         }\n     }"
            },
            {
                "sha": "2193870a97bb4cbc93de1cb47aa5dbb0844c3fae",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderElement.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderElement.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderElement.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderElement.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -65,8 +65,8 @@ public void testConstructor2() throws Exception {\n     public void testInvalidName() {\n         try {\n             new BasicHeaderElement(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             //expected\n         }\n     }\n@@ -83,8 +83,8 @@ public void testParamByName() throws Exception {\n         Assert.assertNull(element.getParameterByName(\"param3\"));\n         try {\n             element.getParameterByName(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             //expected\n         }\n     }"
            },
            {
                "sha": "1dcccca70c601d4fdb12e4b2d81c1e828e512f33",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestNameValuePair.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestNameValuePair.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestNameValuePair.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestNameValuePair.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -48,8 +48,8 @@ public void testConstructor() {\n     public void testInvalidName() {\n         try {\n             new BasicNameValuePair(null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             //expected\n         }\n     }"
            },
            {
                "sha": "58be10d31d9bcabc1f07cb52e3f7df93ecaf298b",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestHttpExecutionContext.java",
                "status": "modified",
                "additions": 6,
                "deletions": 6,
                "changes": 12,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestHttpExecutionContext.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestHttpExecutionContext.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestHttpExecutionContext.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -77,20 +77,20 @@ public void testContextInvalidInput() throws Exception {\n         final HttpContext currentContext = new BasicHttpContext(null);\n         try {\n             currentContext.setAttribute(null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             currentContext.getAttribute(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             currentContext.removeAttribute(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "8ed0f1e235eba6557aa95514248d544bfb5b948d",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestStandardInterceptors.java",
                "status": "modified",
                "additions": 24,
                "deletions": 24,
                "changes": 48,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestStandardInterceptors.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestStandardInterceptors.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestStandardInterceptors.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -103,8 +103,8 @@ public void testRequestConnControlInvalidInput() throws Exception {\n         final RequestConnControl interceptor = new RequestConnControl();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -252,8 +252,8 @@ public void testRequestContentInvalidInput() throws Exception {\n         final RequestContent interceptor = new RequestContent();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -360,8 +360,8 @@ public void testRequestExpectContinueInvalidInput() throws Exception {\n         final RequestExpectContinue interceptor = new RequestExpectContinue();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -429,14 +429,14 @@ public void testRequestTargetHostInvalidInput() throws Exception {\n         final RequestTargetHost interceptor = new RequestTargetHost();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             interceptor.process(new BasicClassicHttpRequest(Method.GET, \"/\"), null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -503,8 +503,8 @@ public void testRequestUserAgentInvalidInput() throws Exception {\n         final RequestUserAgent interceptor = new RequestUserAgent();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -699,15 +699,15 @@ public void testResponseConnControlHostInvalidInput() throws Exception {\n         final ResponseConnControl interceptor = new ResponseConnControl();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             final ClassicHttpResponse response = new BasicClassicHttpResponse(HttpStatus.SC_OK, \"OK\");\n             interceptor.process(response, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -835,8 +835,8 @@ public void testResponseContentInvalidInput() throws Exception {\n         final ResponseContent interceptor = new ResponseContent();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -929,8 +929,8 @@ public void testResponseDateInvalidInput() throws Exception {\n         final ResponseDate interceptor = new ResponseDate();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -966,8 +966,8 @@ public void testRequestDateInvalidInput() throws Exception {\n         final RequestDate interceptor = new RequestDate();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -1010,8 +1010,8 @@ public void testResponseServerInvalidInput() throws Exception {\n         final ResponseServer interceptor = new ResponseServer();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }"
            },
            {
                "sha": "ac77aeee91daf7284bdc362998dcdecf933f9adc",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternMatcher.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternMatcher.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternMatcher.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternMatcher.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -76,7 +76,7 @@ public void testRegisterUnregister() throws Exception {\n         Assert.assertNull(h);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testRegisterNull() throws Exception {\n         final LookupRegistry<Object> matcher = new UriPatternMatcher<>();\n         matcher.register(null, null);\n@@ -154,13 +154,13 @@ public void testSuffixPatternOverPrefixPatternMatch() throws Exception {\n         Assert.assertTrue(h1 == h);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testRegisterInvalidInput() throws Exception {\n         final LookupRegistry<Object> matcher = new UriPatternMatcher<>();\n         matcher.register(null, null);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testLookupInvalidInput() throws Exception {\n         final LookupRegistry<Object> matcher = new UriPatternMatcher<>();\n         matcher.lookup(null);"
            },
            {
                "sha": "f9b575a9a402a8ea05df570fb1ef8f6117bd67e7",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternOrderedMatcher.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternOrderedMatcher.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternOrderedMatcher.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternOrderedMatcher.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -76,7 +76,7 @@ public void testRegisterUnregister() throws Exception {\n         Assert.assertNull(h);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testRegisterNull() throws Exception {\n         final LookupRegistry<Object> matcher = new UriPatternOrderedMatcher<>();\n         matcher.register(null, null);\n@@ -154,13 +154,13 @@ public void testSuffixPatternOverPrefixPatternMatch() throws Exception {\n         Assert.assertTrue(h1 == h);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testRegisterInvalidInput() throws Exception {\n         final LookupRegistry<Object> matcher = new UriPatternOrderedMatcher<>();\n         matcher.register(null, null);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testLookupInvalidInput() throws Exception {\n         final LookupRegistry<Object> matcher = new UriPatternOrderedMatcher<>();\n         matcher.lookup(null);"
            },
            {
                "sha": "56ca167c7cb83c402b6e37b175425a22619af8de",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriRegexMatcher.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriRegexMatcher.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriRegexMatcher.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriRegexMatcher.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -60,7 +60,7 @@ public void testRegisterUnregister() throws Exception {\n         Assert.assertNull(h);\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public void testRegisterNull() throws Exception {\n         final LookupRegistry<Object> matcher = new UriRegexMatcher<>();\n         matcher.register(null, null);\n@@ -196,13 +196,13 @@ public void testSuffixPatternOverPrefixPatternMatch() throws Exception {\n         Assert.assertTrue(h1 == h);\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public void testRegisterInvalidInput() throws Exception {\n         final LookupRegistry<Object> matcher = new UriRegexMatcher<>();\n         matcher.register(null, null);\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public void testLookupInvalidInput() throws Exception {\n         final LookupRegistry<Object> matcher = new UriRegexMatcher<>();\n         matcher.lookup(null);"
            },
            {
                "sha": "23c58802fef78597ee4dc326f992b22524109f0d",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/net/TestHost.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/net/TestHost.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/net/TestHost.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/net/TestHost.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -52,8 +52,8 @@ public void testConstructor() {\n         Assert.assertEquals(0, host2.getPort());\n         try {\n             new Host(null, 0);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             new Host(\"blah\", -1);"
            },
            {
                "sha": "8547ff2e5d7e97fed982c97827185b394af9e816",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/pool/TestLaxConnPool.java",
                "status": "modified",
                "additions": 6,
                "deletions": 6,
                "changes": 12,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/pool/TestLaxConnPool.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/pool/TestLaxConnPool.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/pool/TestLaxConnPool.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -102,12 +102,12 @@ public void testLeaseRelease() throws Exception {\n     }\n \n     @Test\n-    public void testLeaseIllegal() throws Exception {\n+    public void testLeaseInvalid() throws Exception {\n         final LaxConnPool<String, HttpConnection> pool = new LaxConnPool<>(2);\n         try {\n             pool.lease(null, null, Timeout.ZERO_MILLISECONDS, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException expected) {\n         }\n     }\n \n@@ -372,7 +372,7 @@ public void testLeaseRequestCanceled() throws Exception {\n         Assert.assertEquals(0, totals.getLeased());\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testGetStatsInvalid() throws Exception {\n         final LaxConnPool<String, HttpConnection> pool = new LaxConnPool<>(2);\n         pool.getStats(null);\n@@ -383,8 +383,8 @@ public void testSetMaxInvalid() throws Exception {\n         final LaxConnPool<String, HttpConnection> pool = new LaxConnPool<>(2);\n         try {\n             pool.setMaxPerRoute(null, 1);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             pool.setDefaultMaxPerRoute(-1);"
            },
            {
                "sha": "97aafe688e10ad3b0d2970a56b7a9f8106312a8d",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/pool/TestPoolEntry.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/pool/TestPoolEntry.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/pool/TestPoolEntry.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/pool/TestPoolEntry.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -78,8 +78,8 @@ public void testBasics() throws Exception {\n         Assert.assertEquals(Deadline.MIN_VALUE, entry1.getExpiryDeadline());\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testInvalidConstruction() throws Exception {\n+    @Test(expected = NullPointerException.class)\n+    public void testNullConstructor() throws Exception {\n         new PoolEntry<String, HttpConnection>(null);\n     }\n \n@@ -114,7 +114,7 @@ public void testExpiry() throws Exception {\n         Assert.assertEquals(validityDeadline, entry2.getExpiryDeadline());\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testInvalidExpiry() throws Exception {\n         final PoolEntry<String, HttpConnection> entry = new PoolEntry<>(\n                 \"route1\", TimeValue.of(0L, TimeUnit.MILLISECONDS), currentTimeSupplier);"
            },
            {
                "sha": "a0484d2d18b65222101bed677e4668fa3faa5275",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/pool/TestStrictConnPool.java",
                "status": "modified",
                "additions": 7,
                "deletions": 7,
                "changes": 14,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/pool/TestStrictConnPool.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/pool/TestStrictConnPool.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/pool/TestStrictConnPool.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -112,17 +112,17 @@ public void testLeaseRelease() throws Exception {\n     }\n \n     @Test\n-    public void testLeaseIllegal() throws Exception {\n+    public void testLeaseInvalid() throws Exception {\n         final StrictConnPool<String, HttpConnection> pool = new StrictConnPool<>(2, 10);\n         try {\n             pool.lease(null, null, Timeout.ZERO_MILLISECONDS, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             pool.lease(\"somehost\", null, null, null);\n             Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+        } catch (final NullPointerException expected) {\n         }\n     }\n \n@@ -604,7 +604,7 @@ public void testLeaseRequestCanceled() throws Exception {\n         Assert.assertEquals(0, totals.getLeased());\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testGetStatsInvalid() throws Exception {\n         final StrictConnPool<String, HttpConnection> pool = new StrictConnPool<>(2, 2);\n         pool.getStats(null);\n@@ -620,8 +620,8 @@ public void testSetMaxInvalid() throws Exception {\n         }\n         try {\n             pool.setMaxPerRoute(null, 1);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             pool.setDefaultMaxPerRoute(-1);"
            },
            {
                "sha": "f82a8c9b39a8ecd56940d6d98892b1b2c467ed41",
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/util/TestArgs.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/util/TestArgs.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/util/TestArgs.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/util/TestArgs.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "patch": "@@ -55,7 +55,7 @@ public void testArgNotNullPass() {\n         Assert.assertSame(stuff, Args.notNull(stuff, \"Stuff\"));\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testArgNotNullFail() {\n         Args.notNull(null, \"Stuff\");\n     }\n@@ -66,7 +66,7 @@ public void testArgNotEmptyPass() {\n         Assert.assertSame(stuff, Args.notEmpty(stuff, \"Stuff\"));\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testArgNotEmptyFail1() {\n         Args.notEmpty((String) null, \"Stuff\");\n     }\n@@ -76,7 +76,7 @@ public void testArgNotEmptyFail2() {\n         Args.notEmpty(\"\", \"Stuff\");\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testArgNotBlankFail1() {\n         Args.notBlank((String) null, \"Stuff\");\n     }\n@@ -97,7 +97,7 @@ public void testArgCollectionNotEmptyPass() {\n         Assert.assertSame(list, Args.notEmpty(list, \"List\"));\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testArgCollectionNotEmptyFail1() {\n         Args.notEmpty((List<?>) null, \"List\");\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/547655dfcb618da138cdaffe337a7126715dc4a2",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/5d1ee4633d3f25de27b58a9ca5b9fdac87c42280",
        "message": "HTTPCORE-595: tolerate NPE thrown by com.android.org.conscrypt.NativeCrypto#SSL_get_shutdown in Android Conscript",
        "bug_id": "httpcomponents-core_2",
        "file": [
            {
                "sha": "708978b872502125ca9847fe4c542e864ab51cda",
                "filename": "httpcore5/src/main/java/org/apache/hc/core5/reactor/ssl/SSLIOSession.java",
                "status": "modified",
                "additions": 7,
                "deletions": 1,
                "changes": 8,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/547655dfcb618da138cdaffe337a7126715dc4a2/httpcore5/src/main/java/org/apache/hc/core5/reactor/ssl/SSLIOSession.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/547655dfcb618da138cdaffe337a7126715dc4a2/httpcore5/src/main/java/org/apache/hc/core5/reactor/ssl/SSLIOSession.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/main/java/org/apache/hc/core5/reactor/ssl/SSLIOSession.java?ref=547655dfcb618da138cdaffe337a7126715dc4a2",
                "patch": "@@ -683,9 +683,15 @@ public void close(final CloseMode closeMode) {\n                     this.session.setSocketTimeout(Timeout.ofMilliseconds(1000));\n                 }\n                 try {\n+                    // Catch all unchecked exceptions in case something goes wrong\n+                    // in the JSSE provider. For instance\n+                    // com.android.org.conscrypt.NativeCrypto#SSL_get_shutdown can\n+                    // throw NPE at this point\n                     updateEventMask();\n                 } catch (final CancelledKeyException ex) {\n-                    close(CloseMode.GRACEFUL);\n+                    this.session.close(CloseMode.GRACEFUL);\n+                } catch (final Exception ex) {\n+                    this.session.close(CloseMode.IMMEDIATE);\n                 }\n             } else {\n                 if (this.status == CLOSED) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/6e81a9e3250368dcc6f125bc5864495659a749b1",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/b2f31ec15160dfc7a31777876bb146627321d829",
        "message": "HTTPCORE-582: Fixed NPE in SingleCoreIOReactor#processEvents",
        "bug_id": "httpcomponents-core_3",
        "file": [
            {
                "sha": "17af207886eae6b39c2dc946fe69b14001afae6a",
                "filename": "httpcore5/src/main/java/org/apache/hc/core5/reactor/SingleCoreIOReactor.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/6e81a9e3250368dcc6f125bc5864495659a749b1/httpcore5/src/main/java/org/apache/hc/core5/reactor/SingleCoreIOReactor.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/6e81a9e3250368dcc6f125bc5864495659a749b1/httpcore5/src/main/java/org/apache/hc/core5/reactor/SingleCoreIOReactor.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/main/java/org/apache/hc/core5/reactor/SingleCoreIOReactor.java?ref=6e81a9e3250368dcc6f125bc5864495659a749b1",
                "patch": "@@ -169,7 +169,9 @@ private void validateActiveChannels() {\n     private void processEvents(final Set<SelectionKey> selectedKeys) {\n         for (final SelectionKey key : selectedKeys) {\n             final InternalChannel channel = (InternalChannel) key.attachment();\n-            channel.handleIOEvent(key.readyOps());\n+            if (channel != null) {\n+                channel.handleIOEvent(key.readyOps());\n+            }\n         }\n         selectedKeys.clear();\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/18a06ef81c12b01e896c46ce4b36831efda22dad",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/cabf540c8da0e340f1d05c163d662ecc1a648f99",
        "message": "Fixed NPE in async reverse proxy example",
        "bug_id": "httpcomponents-core_4",
        "file": [
            {
                "sha": "e3e896cdb16c142f153fd93c711cef71a2b9bee5",
                "filename": "httpcore5/src/examples/org/apache/hc/core5/http/examples/AsyncReverseProxyExample.java",
                "status": "modified",
                "additions": 4,
                "deletions": 1,
                "changes": 5,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/18a06ef81c12b01e896c46ce4b36831efda22dad/httpcore5/src/examples/org/apache/hc/core5/http/examples/AsyncReverseProxyExample.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/18a06ef81c12b01e896c46ce4b36831efda22dad/httpcore5/src/examples/org/apache/hc/core5/http/examples/AsyncReverseProxyExample.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/examples/org/apache/hc/core5/http/examples/AsyncReverseProxyExample.java?ref=18a06ef81c12b01e896c46ce4b36831efda22dad",
                "patch": "@@ -564,7 +564,10 @@ public void consumeResponse(\n                 exchangeState.outputEnd = entityDetails == null;\n \n                 final ResponseChannel responseChannel = exchangeState.responseMessageChannel;\n-                responseChannel.sendResponse(outgoingResponse, entityDetails, httpContext);\n+                if (responseChannel != null) {\n+                    // responseChannel can be null under load.\n+                    responseChannel.sendResponse(outgoingResponse, entityDetails, httpContext);\n+                }\n \n                 System.out.println(\"[client<-proxy] \" + exchangeState.id + \" status \" + outgoingResponse.getCode());\n                 if (entityDetails == null) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/161f92bafcfbcd6179983426436e615b36446d79",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/45f4ec7d5aff9e8c64cdd3c68603cb4f248852bb",
        "message": "Bugfix: fixed NPE caused by null timeout attribute of IOSessionRequest",
        "bug_id": "httpcomponents-core_5",
        "file": [
            {
                "sha": "acf929d44bf88871393ff29bfc049b32aa0ccc9f",
                "filename": "httpcore5/src/main/java/org/apache/hc/core5/reactor/InternalConnectChannel.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/161f92bafcfbcd6179983426436e615b36446d79/httpcore5/src/main/java/org/apache/hc/core5/reactor/InternalConnectChannel.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/161f92bafcfbcd6179983426436e615b36446d79/httpcore5/src/main/java/org/apache/hc/core5/reactor/InternalConnectChannel.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/main/java/org/apache/hc/core5/reactor/InternalConnectChannel.java?ref=161f92bafcfbcd6179983426436e615b36446d79",
                "patch": "@@ -33,6 +33,7 @@\n import java.nio.channels.SocketChannel;\n \n import org.apache.hc.core5.io.ShutdownType;\n+import org.apache.hc.core5.util.TimeValue;\n \n final class InternalConnectChannel extends InternalChannel {\n \n@@ -78,7 +79,7 @@ void onIOEvent(final int readyOps) throws IOException {\n \n     @Override\n     int getTimeout() {\n-        return sessionRequest.timeout.toMillisIntBound();\n+        return TimeValue.defaultsToZeroMillis(sessionRequest.timeout).toMillisIntBound();\n     }\n \n     @Override"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/4a69f19f5ed2e00124a5dcfdf5d3334ea4c32385",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/2353123afc252b10e5924546c69451b4a17e783d",
        "message": "Avoid potential NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1698012 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_6",
        "file": [
            {
                "sha": "f8413416efbbcd05da095d2294c4ac6a7e4eacd8",
                "filename": "httpcore/src/main/java/org/apache/http/entity/ContentType.java",
                "status": "modified",
                "additions": 12,
                "deletions": 10,
                "changes": 22,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4a69f19f5ed2e00124a5dcfdf5d3334ea4c32385/httpcore/src/main/java/org/apache/http/entity/ContentType.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4a69f19f5ed2e00124a5dcfdf5d3334ea4c32385/httpcore/src/main/java/org/apache/http/entity/ContentType.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore/src/main/java/org/apache/http/entity/ContentType.java?ref=4a69f19f5ed2e00124a5dcfdf5d3334ea4c32385",
                "patch": "@@ -217,19 +217,21 @@ private static ContentType create(final HeaderElement helem, final boolean stric\n \n     private static ContentType create(final String mimeType, final NameValuePair[] params, final boolean strict) {\n         Charset charset = null;\n-        for (final NameValuePair param: params) {\n-            if (param.getName().equalsIgnoreCase(\"charset\")) {\n-                final String s = param.getValue();\n-                if (!TextUtils.isBlank(s)) {\n-                    try {\n-                        charset =  Charset.forName(s);\n-                    } catch (UnsupportedCharsetException ex) {\n-                        if (strict) {\n-                            throw ex;\n+        if (params != null) {\n+            for (final NameValuePair param : params) {\n+                if (param.getName().equalsIgnoreCase(\"charset\")) {\n+                    final String s = param.getValue();\n+                    if (!TextUtils.isBlank(s)) {\n+                        try {\n+                            charset = Charset.forName(s);\n+                        } catch (UnsupportedCharsetException ex) {\n+                            if (strict) {\n+                                throw ex;\n+                            }\n                         }\n                     }\n+                    break;\n                 }\n-                break;\n             }\n         }\n         return new ContentType(mimeType, charset, params != null && params.length > 0 ? params : null);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/0118f656e894a175f9fffdf8959fb8e1ba391ec9",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/be18715cc8b77d7923acb195c3faf09e38006bf5",
        "message": "Fixed NPE caused by response without a Content-Type header\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1391910 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_7",
        "file": [
            {
                "sha": "45f4ac600f0d129efd5bd382385570daac188d68",
                "filename": "httpcore-ab/src/main/java/org/apache/http/benchmark/BenchmarkWorker.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/0118f656e894a175f9fffdf8959fb8e1ba391ec9/httpcore-ab/src/main/java/org/apache/http/benchmark/BenchmarkWorker.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/0118f656e894a175f9fffdf8959fb8e1ba391ec9/httpcore-ab/src/main/java/org/apache/http/benchmark/BenchmarkWorker.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-ab/src/main/java/org/apache/http/benchmark/BenchmarkWorker.java?ref=0118f656e894a175f9fffdf8959fb8e1ba391ec9",
                "patch": "@@ -181,7 +181,7 @@ public void run() {\n \n                 HttpEntity entity = response.getEntity();\n                 if (entity != null) {\n-                    ContentType ct = ContentType.get(entity);\n+                    ContentType ct = ContentType.getOrDefault(entity);\n                     Charset charset = ct.getCharset();\n                     if (charset == null) {\n                         charset = HTTP.DEF_CONTENT_CHARSET;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/6343e551933b6ec07dc8700786b7d392a6360cd8",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/05786c18daccd91c986acafc999c06da7bd1bf7d",
        "message": "Better info than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1172650 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_8",
        "file": [
            {
                "sha": "fbab2083514cbef05e557946c8cbd7e9edf81d4e",
                "filename": "httpcore-nio/src/test/java/org/apache/http/SSLTestContexts.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/6343e551933b6ec07dc8700786b7d392a6360cd8/httpcore-nio/src/test/java/org/apache/http/SSLTestContexts.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/6343e551933b6ec07dc8700786b7d392a6360cd8/httpcore-nio/src/test/java/org/apache/http/SSLTestContexts.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/test/java/org/apache/http/SSLTestContexts.java?ref=6343e551933b6ec07dc8700786b7d392a6360cd8",
                "patch": "@@ -37,6 +37,8 @@\n import javax.net.ssl.TrustManager;\n import javax.net.ssl.TrustManagerFactory;\n \n+import junit.framework.Assert;\n+\n public class SSLTestContexts {\n \n     private static KeyManagerFactory createKeyManagerFactory() throws NoSuchAlgorithmException {\n@@ -51,6 +53,7 @@ private static KeyManagerFactory createKeyManagerFactory() throws NoSuchAlgorith\n     public static SSLContext createServerSSLContext() throws Exception {\n         ClassLoader cl = SSLTestContexts.class.getClassLoader();\n         URL url = cl.getResource(\"test.keystore\");\n+        Assert.assertNotNull(\"Keystore URL should not be null\", url);\n         KeyStore keystore  = KeyStore.getInstance(\"jks\");\n         keystore.load(url.openStream(), \"nopassword\".toCharArray());\n         KeyManagerFactory kmfactory = createKeyManagerFactory();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/a82c75e61047d995b949bd3af7be2839e59ee105",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/69ee804cc5ff81fec1afed0d9e57b39cb42f80c8",
        "message": "HTTPCORE-261: fixed NPE in AbstractIOReactor#timeoutCheck\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1140183 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_9",
        "file": [
            {
                "sha": "d6f21e0f4711a281ec0007db26cff281be4df231",
                "filename": "httpcore-nio/src/main/java/org/apache/http/impl/nio/reactor/AbstractIOReactor.java",
                "status": "modified",
                "additions": 6,
                "deletions": 4,
                "changes": 10,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/a82c75e61047d995b949bd3af7be2839e59ee105/httpcore-nio/src/main/java/org/apache/http/impl/nio/reactor/AbstractIOReactor.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/a82c75e61047d995b949bd3af7be2839e59ee105/httpcore-nio/src/main/java/org/apache/http/impl/nio/reactor/AbstractIOReactor.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/main/java/org/apache/http/impl/nio/reactor/AbstractIOReactor.java?ref=a82c75e61047d995b949bd3af7be2839e59ee105",
                "patch": "@@ -485,10 +485,12 @@ private boolean queueInterestOps(final InterestOpEntry entry) {\n      */\n     protected void timeoutCheck(final SelectionKey key, long now) {\n         IOSessionImpl session = (IOSessionImpl) key.attachment();\n-        int timeout = session.getSocketTimeout();\n-        if (timeout > 0) {\n-            if (session.getLastAccessTime() + timeout < now) {\n-                sessionTimedOut(session);\n+        if (session != null) {\n+            int timeout = session.getSocketTimeout();\n+            if (timeout > 0) {\n+                if (session.getLastAccessTime() + timeout < now) {\n+                    sessionTimedOut(session);\n+                }\n             }\n         }\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/aa46f3b8d648575efbf7b08fc3e7e79bcd5efa64",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/57361e5f21c11f3e3f22a25cd2c09154a3b6e5f5",
        "message": "Suppress impossible NPE warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1100668 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_10",
        "file": [
            {
                "sha": "7bd39a8211a743930822c21b76e2f7bfd37f391f",
                "filename": "httpcore/src/test/java/org/apache/http/impl/io/TestRequestParser.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/aa46f3b8d648575efbf7b08fc3e7e79bcd5efa64/httpcore/src/test/java/org/apache/http/impl/io/TestRequestParser.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/aa46f3b8d648575efbf7b08fc3e7e79bcd5efa64/httpcore/src/test/java/org/apache/http/impl/io/TestRequestParser.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore/src/test/java/org/apache/http/impl/io/TestRequestParser.java?ref=aa46f3b8d648575efbf7b08fc3e7e79bcd5efa64",
                "patch": "@@ -164,6 +164,7 @@ public void testMessageParsingTimeout() throws Exception {\n         assertNotNull(httprequest);\n         assertEquals(5, timeoutCount);\n \n+        @SuppressWarnings(\"null\") // httprequest cannot be null here\n         RequestLine reqline = httprequest.getRequestLine();\n         assertNotNull(reqline);\n         assertEquals(\"GET\", reqline.getMethod());"
            },
            {
                "sha": "16bf2c34328f3b6c7a0a13ef0870f6ee19bca848",
                "filename": "httpcore/src/test/java/org/apache/http/impl/io/TestResponseParser.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/aa46f3b8d648575efbf7b08fc3e7e79bcd5efa64/httpcore/src/test/java/org/apache/http/impl/io/TestResponseParser.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/aa46f3b8d648575efbf7b08fc3e7e79bcd5efa64/httpcore/src/test/java/org/apache/http/impl/io/TestResponseParser.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore/src/test/java/org/apache/http/impl/io/TestResponseParser.java?ref=aa46f3b8d648575efbf7b08fc3e7e79bcd5efa64",
                "patch": "@@ -160,6 +160,7 @@ public void testMessageParsingTimeout() throws Exception {\n         assertNotNull(httpresponse);\n         assertEquals(5, timeoutCount);\n \n+        @SuppressWarnings(\"null\") // httpresponse cannot be null here\n         StatusLine statusline = httpresponse.getStatusLine();\n         assertNotNull(statusline);\n         assertEquals(200, statusline.getStatusCode());"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/500599af40e521774071c7ee6360ff58c57c010a",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/b36d2e5e9c94f2da365f81957bf9c2e4f23d4ea3",
        "message": "HTTPCORE-373: out of sequence HTTP response causes NPE in HttpAsyncRequestExecutor\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1567105 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_11",
        "file": [
            {
                "sha": "037076e43838cfd5a57adcf4e8c6624343c71cf2",
                "filename": "RELEASE_NOTES.txt",
                "status": "modified",
                "additions": 4,
                "deletions": 1,
                "changes": 5,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/500599af40e521774071c7ee6360ff58c57c010a/RELEASE_NOTES.txt",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/500599af40e521774071c7ee6360ff58c57c010a/RELEASE_NOTES.txt",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/RELEASE_NOTES.txt?ref=500599af40e521774071c7ee6360ff58c57c010a",
                "patch": "@@ -1,6 +1,9 @@\n Changes for release 4.4-alpha1\n -------------------\n \n+* [HTTPCORE-373] Out of sequence HTTP response causes NPE in HttpAsyncRequestExecutor.\n+  Contributed by Oleg Kalnichevski <olegk at apache.org>\n+\n * [HTTPCORE-372] Blocking and non-blocking chunk decoders to throw an I/O exception if data stream\n   is terminated without a closing chunk.\n   Contributed by Dmitry Potapov <potapov.d at gmail.com>\n@@ -13,7 +16,7 @@ Changes for release 4.4-alpha1\n \n * [HTTPCORE-370] Race condition if connection request succeeds and times out at the same time.\n   Contributed by Oleg Kalnichevski <olegk at apache.org>\n-    \n+\n * [HTTPCORE-357] Avoid DNS lookups in SSLIOSession.\n   Contributed by Oleg Kalnichevski <olegk at apache.org>\n "
            },
            {
                "sha": "c6070bd744ff1e3182e22651356b9abf3b40a82e",
                "filename": "httpcore-nio/src/main/java/org/apache/http/nio/protocol/HttpAsyncRequestExecutor.java",
                "status": "modified",
                "additions": 4,
                "deletions": 1,
                "changes": 5,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/500599af40e521774071c7ee6360ff58c57c010a/httpcore-nio/src/main/java/org/apache/http/nio/protocol/HttpAsyncRequestExecutor.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/500599af40e521774071c7ee6360ff58c57c010a/httpcore-nio/src/main/java/org/apache/http/nio/protocol/HttpAsyncRequestExecutor.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/main/java/org/apache/http/nio/protocol/HttpAsyncRequestExecutor.java?ref=500599af40e521774071c7ee6360ff58c57c010a",
                "patch": "@@ -191,9 +191,12 @@ public void outputReady(\n     public void responseReceived(\n             final NHttpClientConnection conn) throws HttpException, IOException {\n         final State state = ensureNotNull(getState(conn));\n+        final HttpRequest request = state.getRequest();\n+        if (request == null) {\n+            throw new HttpException(\"Out of sequence response\");\n+        }\n         final HttpAsyncClientExchangeHandler handler = ensureNotNull(getHandler(conn));\n         final HttpResponse response = conn.getHttpResponse();\n-        final HttpRequest request = state.getRequest();\n \n         final int statusCode = response.getStatusLine().getStatusCode();\n         if (statusCode < HttpStatus.SC_OK) {"
            },
            {
                "sha": "52edb5304e8f39523c551b158592130baa386379",
                "filename": "httpcore-nio/src/test/java/org/apache/http/nio/integration/TestClientOutOfSequenceResponse.java",
                "status": "added",
                "additions": 107,
                "deletions": 0,
                "changes": 107,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/500599af40e521774071c7ee6360ff58c57c010a/httpcore-nio/src/test/java/org/apache/http/nio/integration/TestClientOutOfSequenceResponse.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/500599af40e521774071c7ee6360ff58c57c010a/httpcore-nio/src/test/java/org/apache/http/nio/integration/TestClientOutOfSequenceResponse.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/test/java/org/apache/http/nio/integration/TestClientOutOfSequenceResponse.java?ref=500599af40e521774071c7ee6360ff58c57c010a",
                "patch": "@@ -0,0 +1,107 @@\n+/*\n+ * ====================================================================\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.http.nio.integration;\n+\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+\n+import org.apache.http.Consts;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpHost;\n+import org.apache.http.HttpRequest;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.config.ConnectionConfig;\n+import org.apache.http.impl.nio.pool.BasicNIOConnFactory;\n+import org.apache.http.message.BasicHttpRequest;\n+import org.apache.http.nio.testserver.HttpClientNio;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for handling out of sequence responses.\n+ */\n+public class TestClientOutOfSequenceResponse {\n+\n+    private ServerSocket server;\n+    private HttpClientNio client;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        server = new ServerSocket(0, 1);\n+        client = new HttpClientNio(new BasicNIOConnFactory(ConnectionConfig.DEFAULT));\n+    }\n+\n+    @After\n+    public void cleanup() throws Exception {\n+        if (client != null) {\n+            client.shutdown();\n+        }\n+        if (server != null) {\n+            server.close();\n+        }\n+    }\n+\n+    @Test\n+    public void testOutOfSequenceResponse() throws Exception {\n+        client.setMaxPerRoute(1);\n+        client.setMaxTotal(1);\n+\n+        client.start();\n+        final HttpHost target = new HttpHost(\"localhost\", server.getLocalPort());\n+        final HttpRequest get1 = new BasicHttpRequest(\"GET\", \"/\", HttpVersion.HTTP_1_1);\n+        final Future<HttpResponse> future1 = client.execute(target, get1);\n+        final HttpRequest get2 = new BasicHttpRequest(\"GET\", \"/\", HttpVersion.HTTP_1_1);\n+        final Future<HttpResponse> future2 = client.execute(target, get2);\n+\n+        final Socket socket = server.accept();\n+        Thread.sleep(100);\n+        for (int i = 0; i < 3; ++i) {\n+            socket.getOutputStream().write((\n+                    \"HTTP/1.1 200 OK\\r\\n\" +\n+                    \"Content-Length: 0\\r\\n\" +\n+                    \"Connection: keep-alive\\r\\n\\r\\n\").getBytes(Consts.UTF_8));\n+            socket.getOutputStream().flush();\n+        }\n+\n+        final HttpResponse response1 = future1.get();\n+        Assert.assertEquals(200, response1.getStatusLine().getStatusCode());\n+\n+        try {\n+            final HttpResponse response2 = future2.get();\n+            Assert.assertEquals(200, response2.getStatusLine().getStatusCode());\n+        } catch (ExecutionException ex) {\n+            Assert.assertTrue(ex.getCause() instanceof HttpException);\n+        }\n+    }\n+\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/efe9fa317934a7d49a221de0d2d18c996448ed96",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/54351a165a3c907e3509d6a724b7f879d8f692f6",
        "message": "Fixed NPE in StringEntity constructor thrown if ContentType#getCharset is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1334434 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_12",
        "file": [
            {
                "sha": "55c9ca235a8e588b8cf5cf7317e3f96334c671c3",
                "filename": "RELEASE_NOTES.txt",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/efe9fa317934a7d49a221de0d2d18c996448ed96/RELEASE_NOTES.txt",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/efe9fa317934a7d49a221de0d2d18c996448ed96/RELEASE_NOTES.txt",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/RELEASE_NOTES.txt?ref=efe9fa317934a7d49a221de0d2d18c996448ed96",
                "patch": "@@ -1,3 +1,9 @@\n+Changes since 4.2\n+-------------------\n+\n+* Fixed NPE in StringEntity constructor thrown if ContentType#getCharset is null.\n+  Contributed by Oleg Kalnichevski <olegk at apache.org>\n+\n Release 4.2\n -------------------\n "
            },
            {
                "sha": "a1f96c764013034a9a4cc6231b9070343ba12100",
                "filename": "httpcore/src/main/java/org/apache/http/entity/StringEntity.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/efe9fa317934a7d49a221de0d2d18c996448ed96/httpcore/src/main/java/org/apache/http/entity/StringEntity.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/efe9fa317934a7d49a221de0d2d18c996448ed96/httpcore/src/main/java/org/apache/http/entity/StringEntity.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore/src/main/java/org/apache/http/entity/StringEntity.java?ref=efe9fa317934a7d49a221de0d2d18c996448ed96",
                "patch": "@@ -66,6 +66,9 @@ public StringEntity(final String string, final ContentType contentType) {\n             throw new IllegalArgumentException(\"Source string may not be null\");\n         }\n         Charset charset = contentType != null ? contentType.getCharset() : null;\n+        if (charset == null) {\n+            charset = HTTP.DEF_CONTENT_CHARSET;\n+        }\n         try {\n             this.content = string.getBytes(charset.name());\n         } catch (UnsupportedEncodingException ex) {"
            },
            {
                "sha": "5c083bfe931783c75e673506fdf1141f885cb3a5",
                "filename": "httpcore/src/test/java/org/apache/http/entity/TestStringEntity.java",
                "status": "modified",
                "additions": 33,
                "deletions": 0,
                "changes": 33,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/efe9fa317934a7d49a221de0d2d18c996448ed96/httpcore/src/test/java/org/apache/http/entity/TestStringEntity.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/efe9fa317934a7d49a221de0d2d18c996448ed96/httpcore/src/test/java/org/apache/http/entity/TestStringEntity.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore/src/test/java/org/apache/http/entity/TestStringEntity.java?ref=efe9fa317934a7d49a221de0d2d18c996448ed96",
                "patch": "@@ -28,8 +28,10 @@\n package org.apache.http.entity;\n \n import java.io.ByteArrayOutputStream;\n+import java.nio.charset.Charset;\n \n import org.apache.http.Consts;\n+import org.apache.http.util.EntityUtils;\n import org.junit.Assert;\n import org.junit.Test;\n \n@@ -77,6 +79,37 @@ public void testDefaultContent() throws Exception {\n                 httpentity.getContentType().getValue());\n     }\n \n+    private static String constructString(int [] unicodeChars) {\n+        StringBuilder buffer = new StringBuilder();\n+        if (unicodeChars != null) {\n+            for (int i = 0; i < unicodeChars.length; i++) {\n+                buffer.append((char)unicodeChars[i]);\n+            }\n+        }\n+        return buffer.toString();\n+    }\n+\n+    static final int SWISS_GERMAN_HELLO [] = {\n+            0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4\n+        };\n+\n+    @Test\n+    public void testNullCharset() throws Exception {\n+        String s = constructString(SWISS_GERMAN_HELLO);\n+        StringEntity httpentity = new StringEntity(s, ContentType.create(\"text/plain\", (Charset) null));\n+        Assert.assertNotNull(httpentity.getContentType());\n+        Assert.assertEquals(\"text/plain\", httpentity.getContentType().getValue());\n+        Assert.assertEquals(s, EntityUtils.toString(httpentity));\n+        httpentity = new StringEntity(s, (Charset) null);\n+        Assert.assertNotNull(httpentity.getContentType());\n+        Assert.assertEquals(\"text/plain\", httpentity.getContentType().getValue());\n+        Assert.assertEquals(s, EntityUtils.toString(httpentity));\n+        httpentity = new StringEntity(s, (String) null);\n+        Assert.assertNotNull(httpentity.getContentType());\n+        Assert.assertEquals(\"text/plain\", httpentity.getContentType().getValue());\n+        Assert.assertEquals(s, EntityUtils.toString(httpentity));\n+    }\n+\n     @Test\n     public void testWriteTo() throws Exception {\n         String s = \"Message content\";"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/17a910b1004b618d2d8a1c8a44c85c4e4c23a596",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/0e483a3f3d6c3b5dd2ef742ac0ea79983ca48d79",
        "message": "fix possible NPE if the connection is closed - and the address is null\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1144472 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_13",
        "file": [
            {
                "sha": "423352bd3c5ec507b8f27fde1e8d2aceabe070f2",
                "filename": "httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpClientConnection.java",
                "status": "modified",
                "additions": 14,
                "deletions": 6,
                "changes": 20,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/17a910b1004b618d2d8a1c8a44c85c4e4c23a596/httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpClientConnection.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/17a910b1004b618d2d8a1c8a44c85c4e4c23a596/httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpClientConnection.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpClientConnection.java?ref=17a910b1004b618d2d8a1c8a44c85c4e4c23a596",
                "patch": "@@ -29,6 +29,7 @@\n \n import java.io.IOException;\n import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n \n import org.apache.http.HttpEntity;\n import org.apache.http.HttpEntityEnclosingRequest;\n@@ -261,11 +262,18 @@ public boolean isRequestSubmitted() {\n     public String toString() {\n         StringBuilder buf = new StringBuilder();\n \n-        if (this.session.getRemoteAddress() instanceof InetSocketAddress &&\n-            this.session.getLocalAddress()  instanceof InetSocketAddress) {\n+        final SocketAddress remoteAddress = this.session.getRemoteAddress();\n+        final SocketAddress localAddress = this.session.getLocalAddress();\n \n-            final InetSocketAddress remote = ((InetSocketAddress) this.session.getRemoteAddress());\n-            final InetSocketAddress local  = ((InetSocketAddress) this.session.getLocalAddress());\n+        if (remoteAddress == null || localAddress == null) {\n+            return \"[CLOSED]\";\n+        }\n+\n+        if (remoteAddress instanceof InetSocketAddress &&\n+            localAddress instanceof InetSocketAddress) {\n+\n+            final InetSocketAddress remote = ((InetSocketAddress) remoteAddress);\n+            final InetSocketAddress local  = ((InetSocketAddress) localAddress);\n \n             buf.append(local.getAddress() != null ? local.getAddress().getHostAddress() : local.getAddress())\n             .append(':')\n@@ -276,9 +284,9 @@ public String toString() {\n             .append(remote.getPort());\n \n         } else {\n-            buf.append(this.session.getLocalAddress())\n+            buf.append(localAddress)\n             .append(\"->\")\n-            .append(this.session.getRemoteAddress());\n+            .append(remoteAddress);\n         }\n \n         return buf.toString();"
            },
            {
                "sha": "b533cf5712c1729772caafca09c119c4e17ae397",
                "filename": "httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpServerConnection.java",
                "status": "modified",
                "additions": 14,
                "deletions": 6,
                "changes": 20,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/17a910b1004b618d2d8a1c8a44c85c4e4c23a596/httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpServerConnection.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/17a910b1004b618d2d8a1c8a44c85c4e4c23a596/httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpServerConnection.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpServerConnection.java?ref=17a910b1004b618d2d8a1c8a44c85c4e4c23a596",
                "patch": "@@ -29,6 +29,7 @@\n \n import java.io.IOException;\n import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n \n import org.apache.http.HttpEntity;\n import org.apache.http.HttpEntityEnclosingRequest;\n@@ -263,11 +264,18 @@ public boolean isResponseSubmitted() {\n     public String toString() {\n         StringBuilder buf = new StringBuilder();\n \n-        if (this.session.getRemoteAddress() instanceof InetSocketAddress &&\n-            this.session.getLocalAddress()  instanceof InetSocketAddress) {\n+        final SocketAddress remoteAddress = this.session.getRemoteAddress();\n+        final SocketAddress localAddress  = this.session.getLocalAddress();\n \n-            final InetSocketAddress remote = ((InetSocketAddress) this.session.getRemoteAddress());\n-            final InetSocketAddress local  = ((InetSocketAddress) this.session.getLocalAddress());\n+        if (remoteAddress == null || localAddress == null) {\n+            return \"[CLOSED]\";\n+        }\n+\n+        if (remoteAddress instanceof InetSocketAddress &&\n+            localAddress instanceof InetSocketAddress) {\n+\n+            final InetSocketAddress remote = ((InetSocketAddress) remoteAddress);\n+            final InetSocketAddress local  = ((InetSocketAddress) localAddress);\n \n             buf.append(remote.getAddress() != null ? remote.getAddress().getHostAddress() : remote.getAddress())\n             .append(':')\n@@ -278,9 +286,9 @@ public String toString() {\n             .append(local.getPort());\n \n         } else {\n-            buf.append(this.session.getRemoteAddress())\n+            buf.append(remoteAddress)\n             .append(\"->\")\n-            .append(this.session.getLocalAddress());\n+            .append(localAddress);\n         }\n \n         return buf.toString();"
            },
            {
                "sha": "eb1457f8a6db3368d0982e556646e0c2fab4bfc7",
                "filename": "httpcore-nio/src/main/java/org/apache/http/impl/nio/reactor/IOSessionImpl.java",
                "status": "modified",
                "additions": 23,
                "deletions": 18,
                "changes": 41,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/17a910b1004b618d2d8a1c8a44c85c4e4c23a596/httpcore-nio/src/main/java/org/apache/http/impl/nio/reactor/IOSessionImpl.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/17a910b1004b618d2d8a1c8a44c85c4e4c23a596/httpcore-nio/src/main/java/org/apache/http/impl/nio/reactor/IOSessionImpl.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/main/java/org/apache/http/impl/nio/reactor/IOSessionImpl.java?ref=17a910b1004b618d2d8a1c8a44c85c4e4c23a596",
                "patch": "@@ -312,24 +312,29 @@ private static void formatOps(final StringBuilder buffer, int ops) {\n     public synchronized String toString() {\n         StringBuilder buffer = new StringBuilder();\n \n-        if (getRemoteAddress() instanceof InetSocketAddress &&\n-            getLocalAddress()  instanceof InetSocketAddress) {\n-\n-            final InetSocketAddress remote = ((InetSocketAddress) getRemoteAddress());\n-            final InetSocketAddress local  = ((InetSocketAddress) getLocalAddress());\n-\n-            buffer.append(local.getAddress() != null ? local.getAddress().getHostAddress() : local.getAddress())\n-            .append(':')\n-            .append(local.getPort())\n-            .append(\"<->\")\n-            .append(remote.getAddress() != null ? remote.getAddress().getHostAddress() : remote.getAddress())\n-            .append(':')\n-            .append(remote.getPort());\n-\n-        } else {\n-            buffer.append(getLocalAddress())\n-            .append(\"<->\")\n-            .append(getRemoteAddress());\n+        final SocketAddress remoteAddress = getRemoteAddress();\n+        final SocketAddress localAddress = getLocalAddress();\n+\n+        if (remoteAddress != null && localAddress != null) {\n+            if (remoteAddress instanceof InetSocketAddress &&\n+                localAddress instanceof InetSocketAddress) {\n+\n+                final InetSocketAddress remote = ((InetSocketAddress) remoteAddress);\n+                final InetSocketAddress local  = ((InetSocketAddress) localAddress);\n+\n+                buffer.append(local.getAddress() != null ? local.getAddress().getHostAddress() : local.getAddress())\n+                .append(':')\n+                .append(local.getPort())\n+                .append(\"<->\")\n+                .append(remote.getAddress() != null ? remote.getAddress().getHostAddress() : remote.getAddress())\n+                .append(':')\n+                .append(remote.getPort());\n+\n+            } else {\n+                buffer.append(localAddress)\n+                .append(\"<->\")\n+                .append(remoteAddress);\n+            }\n         }\n \n         buffer.append(\"[\");"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/a5b1e48c1a4bea6d3596c3bc9bc4ecd4bfe7ef23",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/f5f7c9873e6107ddaca63ece5a04e892f06ce1c3",
        "message": "avoid NPE when address is unresolved and connection debugging is used\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1143790 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_14",
        "file": [
            {
                "sha": "ff85295741882c00da98ef279ec96d8b9394d962",
                "filename": "httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpClientConnection.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/a5b1e48c1a4bea6d3596c3bc9bc4ecd4bfe7ef23/httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpClientConnection.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/a5b1e48c1a4bea6d3596c3bc9bc4ecd4bfe7ef23/httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpClientConnection.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpClientConnection.java?ref=a5b1e48c1a4bea6d3596c3bc9bc4ecd4bfe7ef23",
                "patch": "@@ -267,11 +267,11 @@ public String toString() {\n             final InetSocketAddress remote = ((InetSocketAddress) this.session.getRemoteAddress());\n             final InetSocketAddress local  = ((InetSocketAddress) this.session.getLocalAddress());\n \n-            buf.append(local.getAddress().getHostAddress())\n+            buf.append(local.getAddress() != null ? local.getAddress().getHostAddress() : local.getAddress())\n             .append(':')\n             .append(local.getPort())\n             .append(\"->\")\n-            .append(remote.getAddress().getHostAddress())\n+            .append(remote.getAddress() != null ? remote.getAddress().getHostAddress() : remote.getAddress())\n             .append(':')\n             .append(remote.getPort());\n "
            },
            {
                "sha": "a2bbfbc8df17f1511a4e281357a62708aaa59402",
                "filename": "httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpServerConnection.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/a5b1e48c1a4bea6d3596c3bc9bc4ecd4bfe7ef23/httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpServerConnection.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/a5b1e48c1a4bea6d3596c3bc9bc4ecd4bfe7ef23/httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpServerConnection.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/main/java/org/apache/http/impl/nio/DefaultNHttpServerConnection.java?ref=a5b1e48c1a4bea6d3596c3bc9bc4ecd4bfe7ef23",
                "patch": "@@ -269,11 +269,11 @@ public String toString() {\n             final InetSocketAddress remote = ((InetSocketAddress) this.session.getRemoteAddress());\n             final InetSocketAddress local  = ((InetSocketAddress) this.session.getLocalAddress());\n \n-            buf.append(remote.getAddress().getHostAddress())\n+            buf.append(remote.getAddress() != null ? remote.getAddress().getHostAddress() : remote.getAddress())\n             .append(':')\n             .append(remote.getPort())\n             .append(\"->\")\n-            .append(local.getAddress().getHostAddress())\n+            .append(local.getAddress() != null ? local.getAddress().getHostAddress() : local.getAddress())\n             .append(':')\n             .append(local.getPort());\n "
            },
            {
                "sha": "11706c311a8d2748fca55995eddbd0a1ee49457b",
                "filename": "httpcore-nio/src/main/java/org/apache/http/impl/nio/reactor/IOSessionImpl.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/a5b1e48c1a4bea6d3596c3bc9bc4ecd4bfe7ef23/httpcore-nio/src/main/java/org/apache/http/impl/nio/reactor/IOSessionImpl.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/a5b1e48c1a4bea6d3596c3bc9bc4ecd4bfe7ef23/httpcore-nio/src/main/java/org/apache/http/impl/nio/reactor/IOSessionImpl.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/main/java/org/apache/http/impl/nio/reactor/IOSessionImpl.java?ref=a5b1e48c1a4bea6d3596c3bc9bc4ecd4bfe7ef23",
                "patch": "@@ -318,11 +318,11 @@ public synchronized String toString() {\n             final InetSocketAddress remote = ((InetSocketAddress) getRemoteAddress());\n             final InetSocketAddress local  = ((InetSocketAddress) getLocalAddress());\n \n-            buffer.append(local.getAddress().getHostAddress())\n+            buffer.append(local.getAddress() != null ? local.getAddress().getHostAddress() : local.getAddress())\n             .append(':')\n             .append(local.getPort())\n             .append(\"<->\")\n-            .append(remote.getAddress().getHostAddress())\n+            .append(remote.getAddress() != null ? remote.getAddress().getHostAddress() : remote.getAddress())\n             .append(':')\n             .append(remote.getPort());\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/5051d4455d96ddadd86dd544943904ead239001e",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/7352120b5f2d443f497862f2f386538b8a12023c",
        "message": "HTTPCORE-242: Fixed NPE in AsyncNHttpClientHandler caused by an early response to an entity enclosing request\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1037915 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_15",
        "file": [
            {
                "sha": "a562cdca952ba4063bfadbdfb1bb7fced7c9af01",
                "filename": "RELEASE_NOTES.txt",
                "status": "modified",
                "additions": 11,
                "deletions": 4,
                "changes": 15,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/5051d4455d96ddadd86dd544943904ead239001e/RELEASE_NOTES.txt",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/5051d4455d96ddadd86dd544943904ead239001e/RELEASE_NOTES.txt",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/RELEASE_NOTES.txt?ref=5051d4455d96ddadd86dd544943904ead239001e",
                "patch": "@@ -1,10 +1,17 @@\n+Changes since 4.1\n+\n+* [HTTPCORE-242]: Fixed NPE in AsyncNHttpClientHandler caused by an early response to an\n+  entity enclosing request.\n+  Contributed by Oleg Kalnichevski <olegk at apache.org>\n+\n+\n Release 4.1\n -------------------\n \n-This is the first stable (GA) release of HttpCore 4.1. This release provides a compatibility mode \n+This is the first stable (GA) release of HttpCore 4.1. This release provides a compatibility mode\n with JREs that have a naive (broken) implementation of SelectionKey API and also improves\n-compatibility with the Google Android platform. There has also been a number of performance \n-related improvements and bug fixes in both blocking and non-blocking components. \n+compatibility with the Google Android platform. There has also been a number of performance\n+related improvements and bug fixes in both blocking and non-blocking components.\n \n All upstream projects are encouraged to upgrade.\n \n@@ -19,7 +26,7 @@ simultaneous HTTP connections in a resource efficient manner.\n * [HTTPCORE-240]: DefaultConnectingIOReactor leaks a socket descriptor if the session request fails.\n   Contributed by Oleg Kalnichevski <olegk at apache.org>\n \n-* [HTTPCORE-239]: The ChunkEncoder could request for a negative buffer limit causing an \n+* [HTTPCORE-239]: The ChunkEncoder could request for a negative buffer limit causing an\n   IllegalArgumentException.\n   Contributed by Asankha Perera <asankha at apache.org>\n "
            },
            {
                "sha": "822567947b98baa5f9f5ddbea696a21388808e89",
                "filename": "httpcore-nio/src/main/java/org/apache/http/nio/protocol/AsyncNHttpClientHandler.java",
                "status": "modified",
                "additions": 27,
                "deletions": 4,
                "changes": 31,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/5051d4455d96ddadd86dd544943904ead239001e/httpcore-nio/src/main/java/org/apache/http/nio/protocol/AsyncNHttpClientHandler.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/5051d4455d96ddadd86dd544943904ead239001e/httpcore-nio/src/main/java/org/apache/http/nio/protocol/AsyncNHttpClientHandler.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/main/java/org/apache/http/nio/protocol/AsyncNHttpClientHandler.java?ref=5051d4455d96ddadd86dd544943904ead239001e",
                "patch": "@@ -212,6 +212,8 @@ public void requestReady(final NHttpClientConnection conn) {\n                         CoreProtocolPNames.WAIT_FOR_CONTINUE, 3000);\n                 conn.setSocketTimeout(timeout);\n                 connState.setOutputState(ClientConnState.EXPECT_CONTINUE);\n+            } else if (connState.getProducingEntity() != null) {\n+                connState.setOutputState(ClientConnState.REQUEST_BODY_STREAM);\n             }\n \n         } catch (IOException ex) {\n@@ -266,6 +268,9 @@ public void outputReady(final NHttpClientConnection conn, final ContentEncoder e\n             ProducingNHttpEntity entity = connState.getProducingEntity();\n \n             entity.produceContent(encoder, conn);\n+            if (encoder.isCompleted()) {\n+                connState.setOutputState(ClientConnState.REQUEST_BODY_DONE);\n+            }\n         } catch (IOException ex) {\n             shutdownConnection(conn, ex);\n             if (this.eventListener != null) {\n@@ -295,9 +300,13 @@ public void responseReceived(final NHttpClientConnection conn) {\n                 return;\n             } else {\n                 connState.setResponse(response);\n-\n                 if (connState.getOutputState() == ClientConnState.EXPECT_CONTINUE) {\n                     cancelRequest(conn, connState);\n+                } else if (connState.getOutputState() == ClientConnState.REQUEST_BODY_STREAM) {\n+                    // Early response\n+                    cancelRequest(conn, connState);\n+                    connState.invalidate();\n+                    conn.suspendOutput();\n                 }\n             }\n \n@@ -378,7 +387,7 @@ private void continueRequest(\n         conn.setSocketTimeout(timeout);\n \n         conn.requestOutput();\n-        connState.setOutputState(ClientConnState.REQUEST_SENT);\n+        connState.setOutputState(ClientConnState.REQUEST_BODY_STREAM);\n     }\n \n     private void cancelRequest(\n@@ -404,7 +413,7 @@ private void processResponse(\n \n         this.execHandler.handleResponse(response, context);\n \n-        if (!this.connStrategy.keepAlive(response, context)) {\n+        if (!connState.isValid() || !this.connStrategy.keepAlive(response, context)) {\n             conn.close();\n         } else {\n             // Ready for another request\n@@ -431,9 +440,14 @@ private void processResponse(\n         private HttpResponse response;\n         private ConsumingNHttpEntity consumingEntity;\n         private ProducingNHttpEntity producingEntity;\n-\n+        private boolean valid;\n         private int timeout;\n \n+        public ClientConnState() {\n+            super();\n+            this.valid = true;\n+        }\n+\n         public void setConsumingEntity(final ConsumingNHttpEntity consumingEntity) {\n             this.consumingEntity = consumingEntity;\n         }\n@@ -503,6 +517,15 @@ public void reset() throws IOException {\n             resetInput();\n             resetOutput();\n         }\n+\n+        public boolean isValid() {\n+            return this.valid;\n+        }\n+\n+        public void invalidate() {\n+            this.valid = false;\n+        }\n+\n     }\n \n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/30c2b1251da8c3315f591415090eeeb43c4d62eb",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/810283941c51ad412c526cbc19d536a049b6f6a1",
        "message": "HTTPCORE-228: Fixed NPE in AsyncNHttpServiceHandler caused by entity enclosing requests if no matching request handler can be found\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@959930 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_16",
        "file": [
            {
                "sha": "16f5c1f6b7100b70409b66c680542fd0b0dacaf9",
                "filename": "RELEASE_NOTES.txt",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/30c2b1251da8c3315f591415090eeeb43c4d62eb/RELEASE_NOTES.txt",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/30c2b1251da8c3315f591415090eeeb43c4d62eb/RELEASE_NOTES.txt",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/RELEASE_NOTES.txt?ref=30c2b1251da8c3315f591415090eeeb43c4d62eb",
                "patch": "@@ -1,5 +1,9 @@\n Changes since 4.1-BETA1 \n \n+* [HTTPCORE-228] Fixed NPE in AsyncNHttpServiceHandler caused by entity enclosing requests\n+  if no matching request handler can be found.  \n+  Contributed by Oleg Kalnichevski <olegk at apache.org>\n+\n * [HTTPCORE-227] Fixed incorrect request / response count by non-blocking connections.\n   Contributed by Harold Lee <harold at hotelling.net>\n "
            },
            {
                "sha": "c45c83d115450327d2650f4db1fec2d803b42567",
                "filename": "httpcore-nio/src/main/java/org/apache/http/nio/protocol/AsyncNHttpServiceHandler.java",
                "status": "modified",
                "additions": 11,
                "deletions": 11,
                "changes": 22,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/30c2b1251da8c3315f591415090eeeb43c4d62eb/httpcore-nio/src/main/java/org/apache/http/nio/protocol/AsyncNHttpServiceHandler.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/30c2b1251da8c3315f591415090eeeb43c4d62eb/httpcore-nio/src/main/java/org/apache/http/nio/protocol/AsyncNHttpServiceHandler.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/main/java/org/apache/http/nio/protocol/AsyncNHttpServiceHandler.java?ref=30c2b1251da8c3315f591415090eeeb43c4d62eb",
                "patch": "@@ -173,7 +173,8 @@ public void requestReceived(final NHttpServerConnection conn) {\n         try {\n \n             if (request instanceof HttpEntityEnclosingRequest) {\n-                if (((HttpEntityEnclosingRequest) request).expectContinue()) {\n+                HttpEntityEnclosingRequest entityRequest = (HttpEntityEnclosingRequest) request;\n+                if (entityRequest.expectContinue()) {\n                     response = this.responseFactory.newHttpResponse(\n                             ver, HttpStatus.SC_CONTINUE, context);\n                     response.setParams(\n@@ -203,20 +204,19 @@ public void requestReceived(final NHttpServerConnection conn) {\n                     }\n                 }\n                 // Request content is expected.\n-                HttpEntity entity = ((HttpEntityEnclosingRequest) request).getEntity();\n+                ConsumingNHttpEntity consumingEntity = null;\n \n                 // Lookup request handler for this request\n                 if (requestHandler != null) {\n-                    ConsumingNHttpEntity consumingEntity = requestHandler.entityRequest(\n-                            (HttpEntityEnclosingRequest) request, context);\n-                    if (consumingEntity == null) {\n-                        consumingEntity = new ConsumingNHttpEntityTemplate(\n-                                entity,\n-                                new SkipContentListener(this.allocator));\n-                    }\n-                    ((HttpEntityEnclosingRequest) request).setEntity(consumingEntity);\n-                    connState.setConsumingEntity(consumingEntity);\n+                    consumingEntity = requestHandler.entityRequest(entityRequest, context);\n+                }\n+                if (consumingEntity == null) {\n+                    consumingEntity = new ConsumingNHttpEntityTemplate(\n+                            entityRequest.getEntity(),\n+                            new SkipContentListener(this.allocator));\n                 }\n+                entityRequest.setEntity(consumingEntity);\n+                connState.setConsumingEntity(consumingEntity);\n \n             } else {\n                 // No request content is expected."
            },
            {
                "sha": "124436052eeeea6490460219a2414d42b5dc3d18",
                "filename": "httpcore-nio/src/test/java/org/apache/http/nio/protocol/TestAsyncNHttpHandlers.java",
                "status": "modified",
                "additions": 5,
                "deletions": 11,
                "changes": 16,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/30c2b1251da8c3315f591415090eeeb43c4d62eb/httpcore-nio/src/test/java/org/apache/http/nio/protocol/TestAsyncNHttpHandlers.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/30c2b1251da8c3315f591415090eeeb43c4d62eb/httpcore-nio/src/test/java/org/apache/http/nio/protocol/TestAsyncNHttpHandlers.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/test/java/org/apache/http/nio/protocol/TestAsyncNHttpHandlers.java?ref=30c2b1251da8c3315f591415090eeeb43c4d62eb",
                "patch": "@@ -1009,18 +1009,14 @@ protected HttpRequest generateRequest(Job testjob) {\n         }\n     }\n \n-    /**\n-     * This test case executes a series of simple (non-pipelined) POST requests\n-     * with zero-length entities on the client side.\n-     */\n-    public void testHttpPostWithZeroLengthEntities() throws Exception {\n+    public void testNoRequestHandler() throws Exception {\n         NHttpRequestExecutionHandler requestExecutionHandler = new RequestExecutionHandler() {\n \n             @Override\n             protected HttpRequest generateRequest(Job testjob) {\n                 String s = testjob.getPattern() + \"x\" + testjob.getCount();\n                 HttpEntityEnclosingRequest r = new BasicHttpEntityEnclosingRequest(\"POST\", s);\n-                NByteArrayEntity entity = new NByteArrayEntity(new byte[] {} );\n+                NByteArrayEntity entity = new NByteArrayEntity(new byte[] {1,2,3,4,5} );\n                 entity.setChunked(false);\n                 r.setEntity(entity);\n                 return r;\n@@ -1029,8 +1025,7 @@ protected HttpRequest generateRequest(Job testjob) {\n         };\n \n         int connNo = 3;\n-        int reqNo = 20;\n-        Job[] jobs = new Job[connNo * reqNo];\n+        Job[] jobs = new Job[connNo];\n         for (int i = 0; i < jobs.length; i++) {\n             jobs[i] = new Job();\n         }\n@@ -1053,7 +1048,7 @@ protected HttpRequest generateRequest(Job testjob) {\n                 this.server.getParams());\n \n         serviceHandler.setHandlerResolver(\n-                new SimpleNHttpRequestHandlerResolver(new RequestHandler()));\n+                new SimpleNHttpRequestHandlerResolver(null));\n         serviceHandler.setEventListener(\n                 new SimpleEventListener());\n \n@@ -1104,8 +1099,7 @@ protected HttpRequest generateRequest(Job testjob) {\n             Job testjob = jobs[i];\n             testjob.waitFor();\n             if (testjob.isSuccessful()) {\n-                assertEquals(HttpStatus.SC_OK, testjob.getStatusCode());\n-                assertEquals(\"\", testjob.getResult());\n+                assertEquals(HttpStatus.SC_NOT_IMPLEMENTED, testjob.getStatusCode());\n             } else {\n                 fail(testjob.getFailureMessage());\n             }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/06a4b97f2eeb67088d55fc7d8443b3fc4852c0ea",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/fdfa42e1ff338649643807aa3a0b14bfbcd631ce",
        "message": "Fixed NPE in the logging HTTP service and client handler decorators\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/httpcomponents/httpcore/trunk@546614 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_17",
        "file": [
            {
                "sha": "5e902f073676f1b26c9efab0bdd60e05582746f7",
                "filename": "contrib/src/main/java/org/apache/http/contrib/logging/LoggingNHttpClientHandler.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/06a4b97f2eeb67088d55fc7d8443b3fc4852c0ea/contrib/src/main/java/org/apache/http/contrib/logging/LoggingNHttpClientHandler.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/06a4b97f2eeb67088d55fc7d8443b3fc4852c0ea/contrib/src/main/java/org/apache/http/contrib/logging/LoggingNHttpClientHandler.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/contrib/src/main/java/org/apache/http/contrib/logging/LoggingNHttpClientHandler.java?ref=06a4b97f2eeb67088d55fc7d8443b3fc4852c0ea",
                "patch": "@@ -107,13 +107,12 @@ public void outputReady(final NHttpClientConnection conn, final ContentEncoder e\n     }\n \n     public void responseReceived(final NHttpClientConnection conn) {\n+        HttpResponse response = conn.getHttpResponse();\n         if (this.log.isDebugEnabled()) {\n-            HttpResponse response = conn.getHttpResponse();\n             this.log.debug(\"HTTP connection \" + conn + \": \" + response.getStatusLine());\n         }\n         this.handler.responseReceived(conn);\n         if (this.headerlog.isDebugEnabled()) {\n-            HttpResponse response = conn.getHttpResponse();\n             this.headerlog.debug(\"<< \" + response.getStatusLine().toString());\n             Header[] headers = response.getAllHeaders();\n             for (int i = 0; i < headers.length; i++) {"
            },
            {
                "sha": "0023e12b212716bb0fae6ae9cbe58784316f7dd1",
                "filename": "contrib/src/main/java/org/apache/http/contrib/logging/LoggingNHttpServiceHandler.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/06a4b97f2eeb67088d55fc7d8443b3fc4852c0ea/contrib/src/main/java/org/apache/http/contrib/logging/LoggingNHttpServiceHandler.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/06a4b97f2eeb67088d55fc7d8443b3fc4852c0ea/contrib/src/main/java/org/apache/http/contrib/logging/LoggingNHttpServiceHandler.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/contrib/src/main/java/org/apache/http/contrib/logging/LoggingNHttpServiceHandler.java?ref=06a4b97f2eeb67088d55fc7d8443b3fc4852c0ea",
                "patch": "@@ -90,13 +90,12 @@ public void exception(final NHttpServerConnection conn, final HttpException ex)\n     }\n \n     public void requestReceived(final NHttpServerConnection conn) {\n+        HttpRequest request = conn.getHttpRequest();\n         if (this.log.isDebugEnabled()) {\n-            HttpRequest request = conn.getHttpRequest();\n             this.log.debug(\"HTTP connection \" + conn + \": \" + request.getRequestLine());\n         }\n         this.handler.requestReceived(conn);\n         if (this.headerlog.isDebugEnabled()) {\n-            HttpRequest request = conn.getHttpRequest();\n             this.headerlog.debug(\">> \" + request.getRequestLine().toString());\n             Header[] headers = request.getAllHeaders();\n             for (int i = 0; i < headers.length; i++) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/2ddf4ec890d77eceede338e80fe0eb25fb8b2e35",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/165c7c1d479592e3a26cc4895668aae6f62b33bd",
        "message": "HTTPCORE-54: Fixed NPE in AbstractMultiworkerIOReactor#stopWorkers(). AbstractMultiworkerIOReactor can now be shut down even if partially initialized\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/httpcomponents/httpcore/trunk@515269 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_18",
        "file": [
            {
                "sha": "aab08be2f5197124ad3ea40ff6fb4393c456dcae",
                "filename": "module-nio/src/main/java/org/apache/http/impl/nio/reactor/AbstractMultiworkerIOReactor.java",
                "status": "modified",
                "additions": 23,
                "deletions": 3,
                "changes": 26,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/2ddf4ec890d77eceede338e80fe0eb25fb8b2e35/module-nio/src/main/java/org/apache/http/impl/nio/reactor/AbstractMultiworkerIOReactor.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/2ddf4ec890d77eceede338e80fe0eb25fb8b2e35/module-nio/src/main/java/org/apache/http/impl/nio/reactor/AbstractMultiworkerIOReactor.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/module-nio/src/main/java/org/apache/http/impl/nio/reactor/AbstractMultiworkerIOReactor.java?ref=2ddf4ec890d77eceede338e80fe0eb25fb8b2e35",
                "patch": "@@ -45,6 +45,8 @@\n     private final BaseIOReactor[] ioReactors;\n     private final Worker[] workers;\n     private final Thread[] threads;\n+\n+    private volatile boolean shutdown;\n     \n     private int currentWorker = 0;\n     \n@@ -77,18 +79,31 @@ protected void startWorkers(final IOEventDispatch eventDispatch) {\n             this.threads[i] = this.threadFactory.newThread(this.workers[i]);\n         }\n         for (int i = 0; i < this.workerCount; i++) {\n+            if (this.shutdown) {\n+                return;\n+            }\n             this.threads[i].start();\n         }\n     }\n \n     protected void stopWorkers(int millis) \n             throws InterruptedIOException, IOReactorException {\n+        if (this.shutdown) {\n+            return;\n+        }\n+        this.shutdown = true;\n         for (int i = 0; i < this.workerCount; i++) {\n-            this.ioReactors[i].shutdown();\n+            BaseIOReactor reactor = this.ioReactors[i];\n+            if (reactor != null) {\n+                reactor.shutdown();\n+            }\n         }\n         for (int i = 0; i < this.workerCount; i++) {\n             try {\n-                this.threads[i].join(millis);\n+                Thread t = this.threads[i];\n+                if (t != null) {\n+                    t.join(millis);\n+                }\n             } catch (InterruptedException ex) {\n                 throw new InterruptedIOException(ex.getMessage());\n             }\n@@ -97,6 +112,9 @@ protected void stopWorkers(int millis)\n     \n     protected void verifyWorkers() \n             throws InterruptedIOException, IOReactorException {\n+        if (this.shutdown) {\n+            return;\n+        }\n         for (int i = 0; i < this.workerCount; i++) {\n             Worker worker = this.workers[i];\n             Thread thread = this.threads[i];\n@@ -160,8 +178,10 @@ public InterruptedIOException getInterruptedException() {\n \n     static class DefaultThreadFactory implements ThreadFactory {\n \n+        private static int COUNT = 0;\n+        \n         public Thread newThread(final Runnable r) {\n-            return new Thread(r, \"I/O reactor worker thread\");\n+            return new Thread(r, \"I/O reactor worker thread \" + (++COUNT));\n         }\n         \n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/27b51d4a63a9eb37b6f3e6b01a63853e21f8c5b7",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/410668addb27246dc684c0d37371d32b49616707",
        "message": "HTTPCORE-44: Fixed NPE in BufferingHttpServiceHandler and ThrottlingHttpServiceHandler when request is invalid\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/httpcomponents/httpcore/trunk@506560 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_19",
        "file": [
            {
                "sha": "3825745613f897bd0f23c36a89752f2b3527e79d",
                "filename": "module-nio/src/main/java/org/apache/http/nio/protocol/BufferingHttpServiceHandler.java",
                "status": "modified",
                "additions": 9,
                "deletions": 4,
                "changes": 13,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/27b51d4a63a9eb37b6f3e6b01a63853e21f8c5b7/module-nio/src/main/java/org/apache/http/nio/protocol/BufferingHttpServiceHandler.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/27b51d4a63a9eb37b6f3e6b01a63853e21f8c5b7/module-nio/src/main/java/org/apache/http/nio/protocol/BufferingHttpServiceHandler.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/module-nio/src/main/java/org/apache/http/nio/protocol/BufferingHttpServiceHandler.java?ref=27b51d4a63a9eb37b6f3e6b01a63853e21f8c5b7",
                "patch": "@@ -291,9 +291,7 @@ private HttpResponse handleException(\n             final HttpException ex) {\n \n         HttpRequest request = conn.getHttpRequest();\n-        HttpVersion ver = request.getRequestLine().getHttpVersion();\n-        HttpResponse response =  this.responseFactory.newHttpResponse(\n-                ver, HttpStatus.SC_BAD_REQUEST, conn.getContext());\n+        HttpContext context = conn.getContext();\n \n         int code = HttpStatus.SC_INTERNAL_SERVER_ERROR;\n         if (ex instanceof MethodNotSupportedException) {\n@@ -304,7 +302,14 @@ private HttpResponse handleException(\n             code = HttpStatus.SC_BAD_REQUEST;\n         }\n         \n-        response.setStatusLine(HttpVersion.HTTP_1_0, code);\n+        HttpVersion ver;\n+        if (request != null) {\n+            ver = request.getRequestLine().getHttpVersion(); \n+        } else {\n+            ver = HttpVersion.HTTP_1_0;\n+        }\n+        HttpResponse response =  this.responseFactory.newHttpResponse(ver, code, context);\n+\n         byte[] msg = EncodingUtils.getAsciiBytes(ex.getMessage());\n         ByteArrayEntity entity = new ByteArrayEntity(msg);\n         entity.setContentType(\"text/plain; charset=US-ASCII\");"
            },
            {
                "sha": "4992ad142784072aa963b53667889f77ca581937",
                "filename": "module-nio/src/main/java/org/apache/http/nio/protocol/ThrottlingHttpServiceHandler.java",
                "status": "modified",
                "additions": 12,
                "deletions": 6,
                "changes": 18,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/27b51d4a63a9eb37b6f3e6b01a63853e21f8c5b7/module-nio/src/main/java/org/apache/http/nio/protocol/ThrottlingHttpServiceHandler.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/27b51d4a63a9eb37b6f3e6b01a63853e21f8c5b7/module-nio/src/main/java/org/apache/http/nio/protocol/ThrottlingHttpServiceHandler.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/module-nio/src/main/java/org/apache/http/nio/protocol/ThrottlingHttpServiceHandler.java?ref=27b51d4a63a9eb37b6f3e6b01a63853e21f8c5b7",
                "patch": "@@ -339,11 +339,10 @@ private void shutdownConnection(final NHttpConnection conn) {\n     private HttpResponse handleException(\n             final NHttpServerConnection conn,\n             final HttpException ex) {\n-        HttpRequest request = conn.getHttpRequest();\n-        HttpVersion ver = request.getRequestLine().getHttpVersion();\n-        HttpResponse response =  this.responseFactory.newHttpResponse(\n-                ver, HttpStatus.SC_BAD_REQUEST, conn.getContext());\n \n+        HttpRequest request = conn.getHttpRequest();\n+        HttpContext context = conn.getContext();\n+        \n         int code = HttpStatus.SC_INTERNAL_SERVER_ERROR;\n         if (ex instanceof MethodNotSupportedException) {\n             code = HttpStatus.SC_NOT_IMPLEMENTED;\n@@ -352,8 +351,15 @@ private HttpResponse handleException(\n         } else if (ex instanceof ProtocolException) {\n             code = HttpStatus.SC_BAD_REQUEST;\n         }\n-        \n-        response.setStatusLine(HttpVersion.HTTP_1_0, code);\n+\n+        HttpVersion ver;\n+        if (request != null) {\n+            ver = request.getRequestLine().getHttpVersion(); \n+        } else {\n+            ver = HttpVersion.HTTP_1_0;\n+        }\n+        HttpResponse response =  this.responseFactory.newHttpResponse(ver, code, context);\n+\n         byte[] msg = EncodingUtils.getAsciiBytes(ex.getMessage());\n         ByteArrayEntity entity = new ByteArrayEntity(msg);\n         entity.setContentType(\"text/plain; charset=US-ASCII\");"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/httpcomponents-core/commit/1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572",
        "repo": "httpcomponents-core",
        "parent": "https://github.com/apache/httpcomponents-core/commit/89d67a8796f1c998bd352044237043c31d6f9802",
        "message": "HTTPCORE-180: Fixed NPE in standard I/O event dispatchers when IOEventDispatch#disconnected fires before the session was fully initialized (IOEventDispatch#connected was not called)\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@735808 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "httpcomponents-core_20",
        "file": [
            {
                "sha": "ce2a7559218f5a7511b8f00767c2c4f3b6275ca5",
                "filename": "RELEASE_NOTES.txt",
                "status": "modified",
                "additions": 5,
                "deletions": 0,
                "changes": 5,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572/RELEASE_NOTES.txt",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572/RELEASE_NOTES.txt",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/RELEASE_NOTES.txt?ref=1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572",
                "patch": "@@ -1,6 +1,11 @@\n Changes since 4.0 Beta 3\n -------------------\n \n+* [HTTPCORE-180] Fixed NPE in standard I/O event dispatchers when \n+  IOEventDispatch#disconnected fires before the session was fully initialized \n+  (IOEventDispatch#connected was not called).\n+  Contributed by Oleg Kalnichevski <olegk at apache.org> \n+\n * [HTTPCORE-175] Chunk decoders no longer accept truncated chunks as valid input.\n   Contributed by Oleg Kalnichevski <olegk at apache.org> \n "
            },
            {
                "sha": "c6e958f96be96ce67292861a79630e8f82bc57b5",
                "filename": "module-nio/src/main/java/org/apache/http/impl/nio/DefaultClientIOEventDispatch.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572/module-nio/src/main/java/org/apache/http/impl/nio/DefaultClientIOEventDispatch.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572/module-nio/src/main/java/org/apache/http/impl/nio/DefaultClientIOEventDispatch.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/module-nio/src/main/java/org/apache/http/impl/nio/DefaultClientIOEventDispatch.java?ref=1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572",
                "patch": "@@ -90,7 +90,9 @@ public void connected(final IOSession session) {\n     public void disconnected(final IOSession session) {\n         NHttpClientIOTarget conn = \n             (NHttpClientIOTarget) session.getAttribute(NHTTP_CONN);\n-        this.handler.closed(conn);\n+        if (conn != null) {\n+            this.handler.closed(conn);\n+        }\n     }\n \n     public void inputReady(final IOSession session) {"
            },
            {
                "sha": "dbe6ba3879b96ca5a7d690eb819684bace7d5f2f",
                "filename": "module-nio/src/main/java/org/apache/http/impl/nio/DefaultServerIOEventDispatch.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572/module-nio/src/main/java/org/apache/http/impl/nio/DefaultServerIOEventDispatch.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572/module-nio/src/main/java/org/apache/http/impl/nio/DefaultServerIOEventDispatch.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/module-nio/src/main/java/org/apache/http/impl/nio/DefaultServerIOEventDispatch.java?ref=1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572",
                "patch": "@@ -89,7 +89,9 @@ public void connected(final IOSession session) {\n     public void disconnected(final IOSession session) {\n         NHttpServerIOTarget conn = \n             (NHttpServerIOTarget) session.getAttribute(NHTTP_CONN);\n-        this.handler.closed(conn);\n+        if (conn != null) {\n+            this.handler.closed(conn);\n+        }\n     }\n \n     public void inputReady(final IOSession session) {"
            },
            {
                "sha": "b55d55c171a6250e9f141e0f05c05662fea4670c",
                "filename": "module-nio/src/main/java/org/apache/http/impl/nio/SSLClientIOEventDispatch.java",
                "status": "modified",
                "additions": 3,
                "deletions": 2,
                "changes": 5,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572/module-nio/src/main/java/org/apache/http/impl/nio/SSLClientIOEventDispatch.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572/module-nio/src/main/java/org/apache/http/impl/nio/SSLClientIOEventDispatch.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/module-nio/src/main/java/org/apache/http/impl/nio/SSLClientIOEventDispatch.java?ref=1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572",
                "patch": "@@ -137,8 +137,9 @@ public void connected(final IOSession session) {\n     public void disconnected(final IOSession session) {\n         NHttpClientIOTarget conn = \n             (NHttpClientIOTarget) session.getAttribute(NHTTP_CONN);\n-        \n-        this.handler.closed(conn);\n+        if (conn != null) {\n+            this.handler.closed(conn);\n+        }\n     }\n \n     public void inputReady(final IOSession session) {"
            },
            {
                "sha": "c687cb7b3735156ab4c287e9944e66cec0f6aff0",
                "filename": "module-nio/src/main/java/org/apache/http/impl/nio/SSLServerIOEventDispatch.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572/module-nio/src/main/java/org/apache/http/impl/nio/SSLServerIOEventDispatch.java",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572/module-nio/src/main/java/org/apache/http/impl/nio/SSLServerIOEventDispatch.java",
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/module-nio/src/main/java/org/apache/http/impl/nio/SSLServerIOEventDispatch.java?ref=1c2ae894d2007e33ba9b1a9a91bfcc86c62b6572",
                "patch": "@@ -137,7 +137,9 @@ public void disconnected(final IOSession session) {\n         NHttpServerIOTarget conn = \n             (NHttpServerIOTarget) session.getAttribute(NHTTP_CONN);\n \n-        this.handler.closed(conn);\n+        if (conn != null) {\n+            this.handler.closed(conn);\n+        }\n     }\n \n     public void inputReady(final IOSession session) {"
            }
        ]
    }
]
