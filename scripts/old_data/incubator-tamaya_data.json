[
    {
        "commit": "https://github.com/apache/incubator-tamaya/commit/e977ab2e3add7d2eaae9923ee7339b65d47a8a3e",
        "repo": "incubator-tamaya",
        "parent": "https://github.com/apache/incubator-tamaya/commit/21391fe59fefd3bb07ad1a3fe808214539ac1821",
        "message": "EnumConverter works with null values\n\nPreviously, EnumConverter would throw an NPE if passed a null value, but\nonly because of an attempted .toUpperCase() which didn't get caught.\nThis commit now passes null values through instead of throwing NPE.",
        "bug_id": "incubator-tamaya_1",
        "file": [
            {
                "sha": "7d0a499134dd2039b47fe98c3053bdac3619bb7d",
                "filename": "code/spi-support/src/main/java/org/apache/tamaya/spisupport/EnumConverter.java",
                "status": "modified",
                "additions": 13,
                "deletions": 7,
                "changes": 20,
                "blob_url": "https://github.com/apache/incubator-tamaya/blob/e977ab2e3add7d2eaae9923ee7339b65d47a8a3e/code/spi-support/src/main/java/org/apache/tamaya/spisupport/EnumConverter.java",
                "raw_url": "https://github.com/apache/incubator-tamaya/raw/e977ab2e3add7d2eaae9923ee7339b65d47a8a3e/code/spi-support/src/main/java/org/apache/tamaya/spisupport/EnumConverter.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-tamaya/contents/code/spi-support/src/main/java/org/apache/tamaya/spisupport/EnumConverter.java?ref=e977ab2e3add7d2eaae9923ee7339b65d47a8a3e",
                "patch": "@@ -24,7 +24,6 @@\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n-import java.math.RoundingMode;\n import java.util.Locale;\n import java.util.Objects;\n import java.util.logging.Level;\n@@ -34,6 +33,7 @@\n  * Converter, converting from String to the given enum type.\n  */\n public class EnumConverter<T> implements PropertyConverter<T> {\n+\n     private final Logger LOG = Logger.getLogger(EnumConverter.class.getName());\n     private Class<T> enumType;\n     private Method factory;\n@@ -46,21 +46,23 @@ public EnumConverter(Class<T> enumType) {\n         try {\n             this.factory = enumType.getMethod(\"valueOf\", String.class);\n         } catch (NoSuchMethodException e) {\n-            throw new ConfigException(\"Uncovertible enum type without createValue method found, please provide a custom \" +\n-                    \"PropertyConverter for: \" + enumType.getName());\n+            throw new ConfigException(\"Uncovertible enum type without createValue method found, please provide a custom \"\n+                    + \"PropertyConverter for: \" + enumType.getName());\n         }\n     }\n \n     @Override\n     public T convert(String value, ConversionContext ctx) {\n-        ctx.addSupportedFormats(getClass(),\"<enumValue>\");\n+        ctx.addSupportedFormats(getClass(), \"<enumValue>\");\n         try {\n             return (T) factory.invoke(null, value);\n         } catch (InvocationTargetException | IllegalAccessException e) {\n             LOG.log(Level.FINEST, \"Invalid enum createValue '\" + value + \"' for \" + enumType.getName(), e);\n         }\n         try {\n-            return (T) factory.invoke(null, value.toUpperCase(Locale.ENGLISH));\n+            if (value != null) {\n+                return (T) factory.invoke(null, value.toUpperCase(Locale.ENGLISH));\n+            }\n         } catch (InvocationTargetException | IllegalAccessException e) {\n             LOG.log(Level.FINEST, \"Invalid enum createValue '\" + value + \"' for \" + enumType.getName(), e);\n         }\n@@ -69,8 +71,12 @@ public T convert(String value, ConversionContext ctx) {\n \n     @Override\n     public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (!(o instanceof EnumConverter)) return false;\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof EnumConverter)) {\n+            return false;\n+        }\n         EnumConverter<?> that = (EnumConverter<?>) o;\n         return Objects.equals(enumType, that.enumType);\n     }"
            },
            {
                "sha": "fe210706b1b57e4555584333f344c2e4dff86105",
                "filename": "code/spi-support/src/test/java/org/apache/tamaya/spisupport/EnumConverterTest.java",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-tamaya/blob/e977ab2e3add7d2eaae9923ee7339b65d47a8a3e/code/spi-support/src/test/java/org/apache/tamaya/spisupport/EnumConverterTest.java",
                "raw_url": "https://github.com/apache/incubator-tamaya/raw/e977ab2e3add7d2eaae9923ee7339b65d47a8a3e/code/spi-support/src/test/java/org/apache/tamaya/spisupport/EnumConverterTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-tamaya/contents/code/spi-support/src/test/java/org/apache/tamaya/spisupport/EnumConverterTest.java?ref=e977ab2e3add7d2eaae9923ee7339b65d47a8a3e",
                "patch": "@@ -55,6 +55,12 @@ public void testConvert_OtherValue() {\n         assertThat(testConverter.convert(\"fooBars\", ctx)).isNull();\n     }\n \n+    @Test\n+    public void testConvert_Nulls() {\n+        ConversionContext ctx = new ConversionContext.Builder(TypeLiteral.of(RoundingMode.class)).build();\n+        assertThat(testConverter.convert(null, ctx)).isNull();\n+    }\n+\n     @Test\n     public void callToConvertAddsMoreSupportedFormatsToTheContext() throws Exception {\n         ConversionContext context = new ConversionContext.Builder(\"someKey\", TypeLiteral.of(Enum.class)).build();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-tamaya/commit/e7163bd7638d0943b84dcba36cfb7b2823039fe4",
        "repo": "incubator-tamaya",
        "parent": "https://github.com/apache/incubator-tamaya/commit/fbd8304d8403fd4c1868dfdb6834a229fa903ac6",
        "message": "Fixed NPE.",
        "bug_id": "incubator-tamaya_2",
        "file": [
            {
                "sha": "ebe2f83fc0b57452ffc5eb553e5a55abd8a57802",
                "filename": "modules/mutable-config/src/main/java/org/apache/tamaya/mutableconfig/spi/MutableConfigurationBackendSpi.java",
                "status": "modified",
                "additions": 0,
                "deletions": 1,
                "changes": 1,
                "blob_url": "https://github.com/apache/incubator-tamaya/blob/e7163bd7638d0943b84dcba36cfb7b2823039fe4/modules/mutable-config/src/main/java/org/apache/tamaya/mutableconfig/spi/MutableConfigurationBackendSpi.java",
                "raw_url": "https://github.com/apache/incubator-tamaya/raw/e7163bd7638d0943b84dcba36cfb7b2823039fe4/modules/mutable-config/src/main/java/org/apache/tamaya/mutableconfig/spi/MutableConfigurationBackendSpi.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-tamaya/contents/modules/mutable-config/src/main/java/org/apache/tamaya/mutableconfig/spi/MutableConfigurationBackendSpi.java?ref=e7163bd7638d0943b84dcba36cfb7b2823039fe4",
                "patch": "@@ -19,7 +19,6 @@\n package org.apache.tamaya.mutableconfig.spi;\n \n import org.apache.tamaya.spi.PropertySource;\n-import org.apache.tamaya.spi.PropertyValue;\n \n import java.net.URI;\n import java.util.Collection;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-tamaya/commit/a03615f5c342e27e2eba3b82632e10b3561967b4",
        "repo": "incubator-tamaya",
        "parent": "https://github.com/apache/incubator-tamaya/commit/335d6f1d4341fea670c9aa355964d9a07b3df122",
        "message": "TAMAYA-145: Fixed NPE on cascaded filters and mappings.",
        "bug_id": "incubator-tamaya_3",
        "file": [
            {
                "sha": "6dd0427569508d59c5a2bf72d313fe5f38642fb1",
                "filename": "modules/functions/src/main/java/org/apache/tamaya/functions/ConfigurationFunctions.java",
                "status": "modified",
                "additions": 5,
                "deletions": 2,
                "changes": 7,
                "blob_url": "https://github.com/apache/incubator-tamaya/blob/a03615f5c342e27e2eba3b82632e10b3561967b4/modules/functions/src/main/java/org/apache/tamaya/functions/ConfigurationFunctions.java",
                "raw_url": "https://github.com/apache/incubator-tamaya/raw/a03615f5c342e27e2eba3b82632e10b3561967b4/modules/functions/src/main/java/org/apache/tamaya/functions/ConfigurationFunctions.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-tamaya/contents/modules/functions/src/main/java/org/apache/tamaya/functions/ConfigurationFunctions.java?ref=a03615f5c342e27e2eba3b82632e10b3561967b4",
                "patch": "@@ -232,7 +232,10 @@ public boolean test(String k, String v) {\n                     return new MappedConfiguration(filtered, new KeyMapper(){\n                         @Override\n                         public String mapKey(String key) {\n-                            return key.substring(areaKey.length());\n+                            if(key.startsWith(areaKey)) {\n+                                return key.substring(areaKey.length());\n+                            }\n+                            return null;\n                         }\n                     }, \"stripped\");\n                 }\n@@ -249,7 +252,7 @@ public String mapKey(String key) {\n      * @return true, if the entry is exact in this section\n      */\n     public static boolean isKeyInSection(String key, String sectionKey) {\n-        return sectionKey.isEmpty() || key.startsWith(sectionKey);\n+        return key.startsWith(sectionKey);\n     }\n \n     /**"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-tamaya/commit/bb06268543432ad73a9b9bb99402a7ebfa890848",
        "repo": "incubator-tamaya",
        "parent": "https://github.com/apache/incubator-tamaya/commit/4383a45112e7f66dc2709a2c35e3ed429dccb677",
        "message": "TAMAYA-114: Fixed potential NPE for getOrdinal().",
        "bug_id": "incubator-tamaya_4",
        "file": [
            {
                "sha": "ada292ae5e2884004aeda3388ba4b29b5f9c290c",
                "filename": "modules/spi-support/src/main/java/org/apache/tamaya/spisupport/MapPropertySource.java",
                "status": "modified",
                "additions": 4,
                "deletions": 1,
                "changes": 5,
                "blob_url": "https://github.com/apache/incubator-tamaya/blob/bb06268543432ad73a9b9bb99402a7ebfa890848/modules/spi-support/src/main/java/org/apache/tamaya/spisupport/MapPropertySource.java",
                "raw_url": "https://github.com/apache/incubator-tamaya/raw/bb06268543432ad73a9b9bb99402a7ebfa890848/modules/spi-support/src/main/java/org/apache/tamaya/spisupport/MapPropertySource.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-tamaya/contents/modules/spi-support/src/main/java/org/apache/tamaya/spisupport/MapPropertySource.java?ref=bb06268543432ad73a9b9bb99402a7ebfa890848",
                "patch": "@@ -129,7 +129,10 @@ public String getName() {\n \n     @Override\n     public int getOrdinal() {\n-        return priority;\n+        if(priority!=null) {\n+            return priority;\n+        }\n+        return super.getOrdinal();\n     }\n \n     @Override"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-tamaya/commit/022b15e76079b3a65232eeab3d013c5c1b2bab87",
        "repo": "incubator-tamaya",
        "parent": "https://github.com/apache/incubator-tamaya/commit/37725cd059e461b51cb1513bc985faf607ffecb4",
        "message": "TAMAYA-42 avoid NPE and add TODOs",
        "bug_id": "incubator-tamaya_5",
        "file": [
            {
                "sha": "86c8ebe1d095c9cea28dfa3fddb2b874821c9332",
                "filename": "core/src/main/java/org/apache/tamaya/core/internal/PropertyConverterManager.java",
                "status": "modified",
                "additions": 8,
                "deletions": 8,
                "changes": 16,
                "blob_url": "https://github.com/apache/incubator-tamaya/blob/022b15e76079b3a65232eeab3d013c5c1b2bab87/core/src/main/java/org/apache/tamaya/core/internal/PropertyConverterManager.java",
                "raw_url": "https://github.com/apache/incubator-tamaya/raw/022b15e76079b3a65232eeab3d013c5c1b2bab87/core/src/main/java/org/apache/tamaya/core/internal/PropertyConverterManager.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-tamaya/contents/core/src/main/java/org/apache/tamaya/core/internal/PropertyConverterManager.java?ref=022b15e76079b3a65232eeab3d013c5c1b2bab87",
                "patch": "@@ -65,25 +65,25 @@ public PropertyConverterManager() {\n      */\n     protected void initDefaultConverters() {\n         // Add default converters\n-        register(char.class, (s) -> s.charAt(0));\n+        register(char.class, (s) -> s != null ? s.charAt(0) : null);\n         register(byte.class, Byte::parseByte);\n         register(short.class, Short::parseShort);\n         register(int.class, Integer::parseInt);\n         register(long.class, Long::parseLong);\n         register(boolean.class, Boolean::parseBoolean);\n-        register(float.class, Float::parseFloat);\n-        register(double.class, Double::parseDouble);\n+        register(float.class, Float::parseFloat); //X TODO not good enough as this is Locale dependent!\n+        register(double.class, Double::parseDouble); //X TODO not good enough as this is Locale dependent!\n \n-        register(Character.class, (s) -> s.charAt(0));\n+        register(Character.class, (s) -> s != null ? s.charAt(0) : null );\n         register(Byte.class, Byte::valueOf);\n         register(Short.class, Short::valueOf);\n         register(Integer.class, Integer::valueOf);\n         register(Long.class, Long::valueOf);\n         register(Boolean.class, Boolean::valueOf);\n-        register(Float.class, Float::valueOf);\n-        register(Double.class, Double::valueOf);\n-        register(BigDecimal.class, BigDecimal::new);\n-        register(BigInteger.class, BigInteger::new);\n+        register(Float.class, Float::valueOf); //X TODO not good enough as this is Locale dependent!\n+        register(Double.class, Double::valueOf); //X TODO not good enough as this is Locale dependent!\n+        register(BigDecimal.class, BigDecimal::new); //X TODO not good enough as this is Locale dependent!\n+        register(BigInteger.class, BigInteger::new); //X TODO not good enough as this is Locale dependent!\n \n         register(Currency.class, Currency::getInstance);\n "
            },
            {
                "sha": "4ead5aba9d273312c9ebc884b021ada442195171",
                "filename": "core/src/main/java/org/apache/tamaya/core/propertysource/SystemPropertySource.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/incubator-tamaya/blob/022b15e76079b3a65232eeab3d013c5c1b2bab87/core/src/main/java/org/apache/tamaya/core/propertysource/SystemPropertySource.java",
                "raw_url": "https://github.com/apache/incubator-tamaya/raw/022b15e76079b3a65232eeab3d013c5c1b2bab87/core/src/main/java/org/apache/tamaya/core/propertysource/SystemPropertySource.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-tamaya/contents/core/src/main/java/org/apache/tamaya/core/propertysource/SystemPropertySource.java?ref=022b15e76079b3a65232eeab3d013c5c1b2bab87",
                "patch": "@@ -29,7 +29,7 @@\n public class SystemPropertySource extends BasePropertySource {\n \n     /**\n-     * cashed System.getProperties() filled in our Map\n+     * cached System.getProperties() filled in our Map\n      */\n     private Map<String, String> properties;\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-tamaya/commit/930eb1af6591a4494023eaa568886f080039ef47",
        "repo": "incubator-tamaya",
        "parent": "https://github.com/apache/incubator-tamaya/commit/69303bee2067b0102c18522006eaa4c515805ee6",
        "message": "Fix for NPE, when only one service instance is available in some cases.",
        "bug_id": "incubator-tamaya_6",
        "file": [
            {
                "sha": "30732321320760929678c55587b014f36af50943",
                "filename": "code/api/src/main/java/org/apache/tamaya/spi/ServiceContextManager.java",
                "status": "modified",
                "additions": 3,
                "deletions": 11,
                "changes": 14,
                "blob_url": "https://github.com/apache/incubator-tamaya/blob/930eb1af6591a4494023eaa568886f080039ef47/code/api/src/main/java/org/apache/tamaya/spi/ServiceContextManager.java",
                "raw_url": "https://github.com/apache/incubator-tamaya/raw/930eb1af6591a4494023eaa568886f080039ef47/code/api/src/main/java/org/apache/tamaya/spi/ServiceContextManager.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-tamaya/contents/code/api/src/main/java/org/apache/tamaya/spi/ServiceContextManager.java?ref=930eb1af6591a4494023eaa568886f080039ef47",
                "patch": "@@ -57,24 +57,16 @@ private static ServiceContext loadDefaultServiceProvider() {\n         try {\n             int highestOrdinal = 0;\n             for (ServiceContext serviceContext : ServiceLoader.load(ServiceContext.class)) {\n-                if (serviceContext.ordinal() > highestOrdinal) {\n+                if(highestServiceContext==null){\n+                    highestServiceContext = serviceContext;\n+                }else if (serviceContext.ordinal() > highestOrdinal) {\n                     highestServiceContext = serviceContext;\n                     highestOrdinal = serviceContext.ordinal();\n                 }\n             }\n         } catch (Exception e) {\n             throw new ConfigException(\"ServiceContext not loadable\", e);\n         }\n-//        if (highestServiceContext==null){\n-//            String serviceContext = System.getProperty(ServiceContext.class.getName());\n-//            if(serviceContext != null){\n-//                try{\n-//                    highestServiceContext = (ServiceContext)Class.forName(serviceContext).newInstance();\n-//                } catch (Exception e) {\n-//                    throw new ConfigException(\"Configured ServiceContext not loadable: \" + serviceContext, e);\n-//                }\n-//            }\n-//        }\n         if (highestServiceContext==null){\n             throw new ConfigException(\"No ServiceContext found\");\n         }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-tamaya/commit/88c99a10686da96aff5d101a2c2d99c0fafc8269",
        "repo": "incubator-tamaya",
        "parent": "https://github.com/apache/incubator-tamaya/commit/1e843618eaf7ab60588a04c0dcdada52b8d547ab",
        "message": "TAMAYA-116: Fixed NPE and test issues (using Weld by default, instead of OWB).",
        "bug_id": "incubator-tamaya_7",
        "file": [
            {
                "sha": "2ebcc6b9d566c2db64b282936f1c616a0d216add",
                "filename": "modules/integration/cdi/pom.xml",
                "status": "modified",
                "additions": 9,
                "deletions": 5,
                "changes": 14,
                "blob_url": "https://github.com/apache/incubator-tamaya/blob/88c99a10686da96aff5d101a2c2d99c0fafc8269/modules/integration/cdi/pom.xml",
                "raw_url": "https://github.com/apache/incubator-tamaya/raw/88c99a10686da96aff5d101a2c2d99c0fafc8269/modules/integration/cdi/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/incubator-tamaya/contents/modules/integration/cdi/pom.xml?ref=88c99a10686da96aff5d101a2c2d99c0fafc8269",
                "patch": "@@ -129,9 +129,9 @@ under the License.\n     <profiles>\n         <profile>\n             <id>OWB</id>\n-            <activation>\n-                <activeByDefault>true</activeByDefault>\n-            </activation>\n+            <!-- there is an issue with this profile:\n+                 java.lang.NoClassDefFoundError: org/apache/webbeans/event/EventMetadata\n+            -->\n             <dependencies>\n                 <!-- OWB specific dependencies-->\n                 <dependency>\n@@ -143,13 +143,13 @@ under the License.\n                     <groupId>org.apache.geronimo.specs</groupId>\n                     <artifactId>geronimo-interceptor_1.2_spec</artifactId>\n                     <version>${geronimo-interceptor-1.2-spec.version}</version>\n-                    <scope>provided</scope>\n+                    <scope>test</scope>\n                 </dependency>\n                 <dependency>\n                     <groupId>org.apache.geronimo.specs</groupId>\n                     <artifactId>geronimo-annotation_1.2_spec</artifactId>\n                     <version>1.0.MR2-SNAPSHOT</version>\n-                    <scope>provided</scope>\n+                    <scope>test</scope>\n                 </dependency>\n                 <dependency>\n                     <groupId>org.apache.geronimo.specs</groupId>\n@@ -189,11 +189,15 @@ under the License.\n         </profile>\n         <profile>\n             <id>Weld</id>\n+            <activation>\n+                <activeByDefault>true</activeByDefault>\n+            </activation>\n             <dependencies>\n                 <dependency>\n                     <groupId>org.jboss.weld.se</groupId>\n                     <artifactId>weld-se</artifactId>\n                     <version>${weld.version}</version>\n+                    <scope>test</scope>\n                 </dependency>\n                 <dependency>\n                     <groupId>org.apache.deltaspike.cdictrl</groupId>"
            },
            {
                "sha": "b421cbc83eff88051a4a622918a9bbded3072d7d",
                "filename": "modules/integration/cdi/src/main/java/org/apache/tamaya/integration/cdi/ConfigurationExtension.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/incubator-tamaya/blob/88c99a10686da96aff5d101a2c2d99c0fafc8269/modules/integration/cdi/src/main/java/org/apache/tamaya/integration/cdi/ConfigurationExtension.java",
                "raw_url": "https://github.com/apache/incubator-tamaya/raw/88c99a10686da96aff5d101a2c2d99c0fafc8269/modules/integration/cdi/src/main/java/org/apache/tamaya/integration/cdi/ConfigurationExtension.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-tamaya/contents/modules/integration/cdi/src/main/java/org/apache/tamaya/integration/cdi/ConfigurationExtension.java?ref=88c99a10686da96aff5d101a2c2d99c0fafc8269",
                "patch": "@@ -141,7 +141,9 @@ public void retrieveTypes(@Observes final ProcessBean<?> pb) {\n                 final ConfigProperty annotation = injectionPoint.getAnnotated().getAnnotation(ConfigProperty.class);\n                 final ConfigDefault defaultAnnot = injectionPoint.getAnnotated().getAnnotation(ConfigDefault.class);\n                 final ConfigDefaultSections typeAnnot = injectionPoint.getAnnotated().getAnnotation(ConfigDefaultSections.class);\n-                final List<String> keys = evaluateKeys(injectionPoint.getMember().getName(), annotation.value(), typeAnnot.value());\n+                final List<String> keys = evaluateKeys(injectionPoint.getMember().getName(),\n+                        annotation!=null?annotation.value():null,\n+                        typeAnnot!=null?typeAnnot.value():null);\n \n                 final WithConfigOperator withOperatorAnnot = injectionPoint.getAnnotated().getAnnotation(WithConfigOperator.class);\n                 if(withOperatorAnnot!=null){"
            },
            {
                "sha": "9e18a3a81aefdafa924906119506665e6bf795e9",
                "filename": "modules/integration/cdi/src/main/java/org/apache/tamaya/integration/cdi/ConfigurationProducer.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/incubator-tamaya/blob/88c99a10686da96aff5d101a2c2d99c0fafc8269/modules/integration/cdi/src/main/java/org/apache/tamaya/integration/cdi/ConfigurationProducer.java",
                "raw_url": "https://github.com/apache/incubator-tamaya/raw/88c99a10686da96aff5d101a2c2d99c0fafc8269/modules/integration/cdi/src/main/java/org/apache/tamaya/integration/cdi/ConfigurationProducer.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-tamaya/contents/modules/integration/cdi/src/main/java/org/apache/tamaya/integration/cdi/ConfigurationProducer.java?ref=88c99a10686da96aff5d101a2c2d99c0fafc8269",
                "patch": "@@ -45,7 +45,9 @@ public Object resolveAndConvert(final InjectionPoint injectionPoint) {\n         final ConfigProperty annotation = injectionPoint.getAnnotated().getAnnotation(ConfigProperty.class);\n         final ConfigDefault defaultAnnot = injectionPoint.getAnnotated().getAnnotation(ConfigDefault.class);\n         final ConfigDefaultSections typeAnnot = injectionPoint.getAnnotated().getAnnotation(ConfigDefaultSections.class);\n-        final List<String> keys = ConfigurationExtension.evaluateKeys(injectionPoint.getMember().getName(), annotation.value(), typeAnnot.value());\n+        final List<String> keys = ConfigurationExtension.evaluateKeys(injectionPoint.getMember().getName(),\n+                annotation!=null?annotation.value():null,\n+                typeAnnot!=null?typeAnnot.value():null);\n \n         final WithConfigOperator withOperatorAnnot = injectionPoint.getAnnotated().getAnnotation(WithConfigOperator.class);\n         ConfigOperator operator = null;"
            }
        ]
    }
]
