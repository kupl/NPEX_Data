[
    {
        "commit": "https://github.com/apache/derby/commit/fb57a7b21ea904cc7cf6057f95a2e9d193f2493d",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/59b3eae15b87db48a75165866dc069746d8bc41d",
        "message": "DERBY-23 Patch (DERBY-23-npe.diff) that addresses the NullPointerException messages from rawStoreDaemon threads we. Submitted by Knut Anders Hatlen\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@371506 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_1",
        "file": [
            {
                "sha": "adce078a2bec55558155deb3c4d11a5be23af330",
                "filename": "java/engine/org/apache/derby/iapi/services/context/ContextService.java",
                "status": "modified",
                "additions": 29,
                "deletions": 9,
                "changes": 38,
                "blob_url": "https://github.com/apache/derby/blob/fb57a7b21ea904cc7cf6057f95a2e9d193f2493d/java/engine/org/apache/derby/iapi/services/context/ContextService.java",
                "raw_url": "https://github.com/apache/derby/raw/fb57a7b21ea904cc7cf6057f95a2e9d193f2493d/java/engine/org/apache/derby/iapi/services/context/ContextService.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/services/context/ContextService.java?ref=fb57a7b21ea904cc7cf6057f95a2e9d193f2493d",
                "patch": "@@ -178,7 +178,13 @@ public ContextManager getCurrentContextManager() {\n \n \t\tThread me = Thread.currentThread();\n \n-\t\tObject list = threadContextList.get();\n+\t\tThreadLocal tcl = threadContextList;\n+\t\tif (tcl == null) {\n+\t\t\t// The context service is already stopped.\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tObject list = tcl.get();\n \n \t\tif (list instanceof ContextManager) {\n \t\t\t\n@@ -213,6 +219,13 @@ public ContextManager getCurrentContextManager() {\n */\t}\n \n \tpublic void resetCurrentContextManager(ContextManager cm) {\n+\t\tThreadLocal tcl = threadContextList;\n+\n+\t\tif (tcl == null) {\n+\t\t\t// The context service is already stopped.\n+\t\t\treturn;\n+\t\t}\n+\n \t\tif (SanityManager.DEBUG) {\n \n \t\t\tif (Thread.currentThread() != cm.activeThread) {\n@@ -232,8 +245,8 @@ public void resetCurrentContextManager(ContextManager cm) {\n \t\t\t}\n \n \t\t\tif (cm.activeCount > 0) {\n-\t\t\t\tif (threadContextList.get() != cm)\n-\t\t\t\t\tSanityManager.THROWASSERT(\"resetCurrentContextManager - invalid thread local \" + Thread.currentThread() + \" - object \" + threadContextList.get());\n+\t\t\t\tif (tcl.get() != cm)\n+\t\t\t\t\tSanityManager.THROWASSERT(\"resetCurrentContextManager - invalid thread local \" + Thread.currentThread() + \" - object \" + tcl.get());\n \n \t\t\t}\n \t\t}\n@@ -244,7 +257,7 @@ public void resetCurrentContextManager(ContextManager cm) {\n \t\t\treturn;\n \t\t}\n \n-\t\tjava.util.Stack stack = (java.util.Stack) threadContextList.get();\n+\t\tjava.util.Stack stack = (java.util.Stack) tcl.get();\n \n \t\tObject oldCM = stack.pop();\n \n@@ -272,20 +285,27 @@ public void resetCurrentContextManager(ContextManager cm) {\n \t\t\t// all the context managers on the stack\n \t\t\t// are the same so reduce to a simple count.\n \t\t\tnextCM.activeCount = stack.size();\n-\t\t\tthreadContextList.set(nextCM);\n+\t\t\ttcl.set(nextCM);\n \t\t}\n \t}\n \n \tprivate boolean addToThreadList(Thread me, ContextManager associateCM) {\n \n-\t\tObject list = threadContextList.get();\n+\t\tThreadLocal tcl = threadContextList;\n+\n+\t\tif (tcl == null) {\n+\t\t\t// The context service is already stopped.\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tObject list = tcl.get();\n \n \t\tif (associateCM == list)\n \t\t\treturn true;\n \n \t\tif (list == null)\n \t\t{\n-\t\t\tthreadContextList.set(associateCM);\n+\t\t\ttcl.set(associateCM);\n \t\t\treturn true;\n \t\t}\n \n@@ -295,11 +315,11 @@ private boolean addToThreadList(Thread me, ContextManager associateCM) {\n \t\t\tif (me == null)\n \t\t\t\tme = Thread.currentThread();\n \t\t\tif (threadsCM.activeThread != me) {\n-\t\t\t\tthreadContextList.set(associateCM);\n+\t\t\t\ttcl.set(associateCM);\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tstack = new java.util.Stack();\n-\t\t\tthreadContextList.set(stack);\n+\t\t\ttcl.set(stack);\n \n \t\t\tfor (int i = 0; i < threadsCM.activeCount; i++)\n \t\t\t{"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/d1ba0d0ccecf0bc622c38811a7c53b7dfb96397f",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/391d4a650ff511c28c1e282ed3089861d166fac9",
        "message": "DERBY-4973 NullPointerException in updatelocks.sql encryption tests on IBM 1.6\n\nChange Xact.getContextId() to just read xc value once to avoid possible NPE with lock table query.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1062096 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_2",
        "file": [
            {
                "sha": "a2387272ef086247982e00746ce8fdefe2a0b461",
                "filename": "java/engine/org/apache/derby/impl/store/raw/xact/Xact.java",
                "status": "modified",
                "additions": 11,
                "deletions": 8,
                "changes": 19,
                "blob_url": "https://github.com/apache/derby/blob/d1ba0d0ccecf0bc622c38811a7c53b7dfb96397f/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java",
                "raw_url": "https://github.com/apache/derby/raw/d1ba0d0ccecf0bc622c38811a7c53b7dfb96397f/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java?ref=d1ba0d0ccecf0bc622c38811a7c53b7dfb96397f",
                "patch": "@@ -624,14 +624,17 @@ protected final TransactionId getIdNoCheck()\n \t\treturn myId;\n \t}\n \n-\t/**\n-\t\tGet my transaction context Id\n-\t*/\n-\tpublic final String getContextId() \n-\t{\n-\t\treturn (xc == null) ? null : xc.getIdName();\n-\t}\n-\n+    /**\n+     * Get my transaction context Id\n+     */\n+    public final String getContextId() {\n+        //DERBY-4973. Make a copy of xc so we are working on a stable \n+        // copy, especially for the lock table VTI. If we don't, there may\n+        // be a chance for a NullPointerException if close() is called \n+        //by another thread after the check but before the dereference.\n+        XactContext tempxc = xc;\n+        return (tempxc == null) ? null : tempxc.getIdName();\n+    }\n \n \t/**\n \t\tGet the current default locking policy for all operations within this"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/387d1fb4395b3e09b4c46ca4c5d2e4633ad1133f",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/3b7ed34c6d76b2f92c2739393104c79d545d2e0e",
        "message": "DERBY-3260: NullPointerException caused by race condition in GenericActivationHolder\n\nHold the synchronization lock on the GenericPreparedStatement until\nthe activation class has been retrieved. This prevents other threads\nfrom setting the activation class to null before we have retrieved it,\nand thereby prevents the NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@613815 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_3",
        "file": [
            {
                "sha": "ebdcf778c0cbe5917c5f9de8f8c3aa3fdbbaa140",
                "filename": "java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java",
                "status": "modified",
                "additions": 13,
                "deletions": 4,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/387d1fb4395b3e09b4c46ca4c5d2e4633ad1133f/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java",
                "raw_url": "https://github.com/apache/derby/raw/387d1fb4395b3e09b4c46ca4c5d2e4633ad1133f/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java?ref=387d1fb4395b3e09b4c46ca4c5d2e4633ad1133f",
                "patch": "@@ -255,18 +255,27 @@ public ResultSet execute() throws StandardException\n \t\t\tif (gc != ps.getActivationClass())\n \t\t\t{\n \n+                GeneratedClass newGC;\n+\n \t\t\t\t// ensure the statement is valid by rePreparing it.\n-\t\t\t\tps.rePrepare(getLanguageConnectionContext());\n-\t\t\t\t\n+                // DERBY-3260: If someone else reprepares the statement at the\n+                // same time as we do, there's a window between the calls to\n+                // rePrepare() and getActivationClass() when the activation\n+                // class can be set to null, leading to NullPointerException\n+                // being thrown later. Therefore, synchronize on ps to close\n+                // the window.\n+                synchronized (ps) {\n+                    ps.rePrepare(getLanguageConnectionContext());\n+                    newGC = ps.getActivationClass();\n+                }\n+\n \t\t\t\t/*\n \t\t\t\t** If we get here, it means the PreparedStatement has been\n \t\t\t\t** recompiled.  Get a new Activation and check whether the\n \t\t\t\t** parameters are compatible.  If so, transfer the parameters\n \t\t\t\t** from the old Activation to the new one, and make that the\n \t\t\t\t** current Activation.  If not, throw an exception.\n \t\t\t\t*/\n-\t\t\t\tGeneratedClass\t\tnewGC = ps.getActivationClass();\n-\n \t\t\t\tBaseActivation\t\tnewAC = (BaseActivation) newGC.newInstance(lcc);\n \n \t\t\t\tDataTypeDescriptor[]\tnewParamTypes = ps.getParameterTypes();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/2302f2a55d00d7acd4eaf7800f5a1660ab3a7a1d",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/314a19ac8bb51ab665c4e72961950ebd69d8bcba",
        "message": "DERBY-6786(NullPointerException in INSERT INTO statement with multiple subselects)\n\nAdding test casee for DERBY-6786. One test case(zztestDerby6786InsertIntoSelectCase3) which will result into NPE has been disabled. Once DERBY-6786 is fixed, we should enable that test by removing the zz in front of the test name.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1651707 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_4",
        "file": [
            {
                "sha": "1bafeb43a65021c3fabdec0aeccb7864bce532c0",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "status": "modified",
                "additions": 101,
                "deletions": 0,
                "changes": 101,
                "blob_url": "https://github.com/apache/derby/blob/2302f2a55d00d7acd4eaf7800f5a1660ab3a7a1d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "raw_url": "https://github.com/apache/derby/raw/2302f2a55d00d7acd4eaf7800f5a1660ab3a7a1d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java?ref=2302f2a55d00d7acd4eaf7800f5a1660ab3a7a1d",
                "patch": "@@ -44,7 +44,108 @@ public InsertTest(String name) {\n     public static Test suite() {\n         return TestConfiguration.defaultSuite(InsertTest.class);\n     }\n+    \n+    public void testDerby6786Case1() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"CREATE TABLE K1 (K VARCHAR(64), S DECIMAL)\");\n+        s.execute(\"CREATE TABLE K2 (K VARCHAR(64), S DECIMAL)\");\n+        s.execute(\"CREATE TABLE T  (S DECIMAL)\");\n+        s.execute(\"INSERT INTO K1 VALUES ('110007', 224)\");\n+        s.execute(\"INSERT INTO K2 VALUES ('110007', 361)\");\n+        //Run just plain select\n+        derby6786QueriesToRun(s, \"\");\n+        //Run insert into ... select\n+        derby6786QueriesToRun(s, \"insert into t \");\n+        s.execute(\"DROP   TABLE K1\");\n+        s.execute(\"DROP   TABLE K2\");\n+        s.execute(\"DROP   TABLE T\");\n+    }\n+\n+    public void testDerby6786InsertIntoSelectCase2() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"CREATE TABLE K1 (K VARCHAR(64), S DECIMAL)\");\n+        s.execute(\"CREATE TABLE K2 (K VARCHAR(64), S DECIMAL)\");\n+        s.execute(\"CREATE TABLE T  (S DECIMAL)\");\n+        s.execute(\"INSERT INTO K1 VALUES ('110007', 224)\");\n+        s.execute(\"INSERT INTO K2 VALUES ('110007', null)\");\n+        //Run just plain select\n+        derby6786QueriesToRun(s, \"\");\n+        //Run insert into ... select\n+        derby6786QueriesToRun(s, \"insert into t \");\n+        s.execute(\"DROP   TABLE K1\");\n+        s.execute(\"DROP   TABLE K2\");\n+        s.execute(\"DROP   TABLE T\");\n+    }\n \n+    //DERBY-6786(NullPointerException in INSERT INTO statement with multiple subselects)\n+    //Following test case has zz against its name and hence it won't run. \n+    // This is because some queries in the test can cause NPE. Once \n+    // DERBY-6786 is fixed, following test should be enabled by removing\n+    // zz.\n+    public void zztestDerby6786InsertIntoSelectCase3() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"CREATE TABLE K1 (K VARCHAR(64), S DECIMAL)\");\n+        s.execute(\"CREATE TABLE K2 (K VARCHAR(64), S DECIMAL)\");\n+        s.execute(\"CREATE TABLE T  (S DECIMAL)\");\n+        s.execute(\"INSERT INTO K1 VALUES ('110007', 224)\");\n+        s.execute(\"INSERT INTO K2 VALUES ('110019', null)\");\n+        //Run just plain select\n+        derby6786QueriesToRun(s, \"\");\n+        //Run insert into ... select. Running insert will into can result into\n+        // NPE for some of the queries until DERBY-6786 is fixed.\n+        derby6786QueriesToRun(s, \"insert into t \");\n+        s.execute(\"DROP   TABLE K1\");\n+        s.execute(\"DROP   TABLE K2\");\n+        s.execute(\"DROP   TABLE T\");\n+    }\n+    \n+    private void derby6786QueriesToRun(Statement s, String insertInto) throws SQLException {\n+        //following left join works\n+        s.execute(insertInto +\n+            \"select erg.* from ( \" +\n+            \"select d1.s from (select k,s from k1) as d1 \" +\n+            \"left join \"+\n+            \"(select k,s from k2) as d2 on d1.k=d2.k\" +\n+            \") as erg \" +\n+            \"where s > 10\");\n+        //DERBY-6786 : following left join can fail if the right table  \n+        // does not have a matching row\n+        s.execute(insertInto +\n+                \"select erg.* from ( \" +\n+                \"select d2.s from (select k,s from k1) as d1 \" +\n+                \"left join \"+\n+                \"(select k,s from k2) as d2 on d1.k=d2.k\" +\n+                \") as erg \" +\n+                \"where s > 10\");\n+        //DERBY-6786 : following is another example of left join that can fail \n+        // if the right table does not have a matching row\n+        s.execute(insertInto +\n+                \"select erg.* from ( \" +\n+                \"select d2.s from k1 \" +\n+                \"left join \"+\n+                \"(select k,s from k2) as d2 on k1.k=d2.k\" +\n+                \") as erg \" +\n+                \"where s > 10\");\n+        //DERBY-6786 : following right join can fail if the left table  \n+        // does not have a matching row\n+        s.execute(insertInto +\n+            \"select erg.* from ( \" +\n+            \"select d1.s from (select k,s from k1) as d1 \" +\n+            \"right join \"+\n+            \"(select k,s from k2) as d2 on d1.k=d2.k\" +\n+            \") as erg \" +\n+            \"where s > 10\");\n+        //following right join works\n+        s.execute(insertInto +\n+                \"select erg.* from ( \" +\n+                \"select d2.s from (select k,s from k1) as d1 \" +\n+                \"right join \"+\n+                \"(select k,s from k2) as d2 on d1.k=d2.k\" +\n+                \") as erg \" +\n+                \"where s > 10\");\n+\n+    }\n+    \n     /**\n      * Regression test case for DERBY-4348 where an INSERT INTO .. SELECT FROM\n      * statement would result in a LONG VARCHAR column becoming populated with"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/e8fb6d6013e3a3cd8054bfb3ee8e689c8cb8f444",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/7b429a3186a9c705baa9d5172f3ad3e2cfcc446c",
        "message": "DERBY-3823 NullPointerException in stress.multi test\n\nThis patch fixes a race condition in\nEmbedPreparedStatement#getMetaData: if we are trying to retrieve the\nmetadata for a prepared statement while it is being recompiled there\nis a time window during which the activation class is null. The\nexisting code could therefore cause an NPE. The new code plugs the\nrace condition. This NPE led to intermittent errors in\nstressTestMulti.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1183192 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_5",
        "file": [
            {
                "sha": "39e819287b1f1cc006f01768c74a3012912700ef",
                "filename": "java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java",
                "status": "modified",
                "additions": 39,
                "deletions": 33,
                "changes": 72,
                "blob_url": "https://github.com/apache/derby/blob/e8fb6d6013e3a3cd8054bfb3ee8e689c8cb8f444/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java",
                "raw_url": "https://github.com/apache/derby/raw/e8fb6d6013e3a3cd8054bfb3ee8e689c8cb8f444/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java?ref=e8fb6d6013e3a3cd8054bfb3ee8e689c8cb8f444",
                "patch": "@@ -64,6 +64,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.iapi.jdbc.BrokeredConnectionControl;\n import org.apache.derby.iapi.jdbc.EngineParameterMetaData;\n import org.apache.derby.iapi.jdbc.EnginePreparedStatement;\n+import org.apache.derby.iapi.services.loader.GeneratedClass;\n import org.apache.derby.iapi.sql.dictionary.DataDictionary;\n import org.apache.derby.iapi.types.StringDataValue;\n import org.apache.derby.iapi.util.InterruptStatus;\n@@ -1077,43 +1078,48 @@ public void clearParameters() throws SQLException {\n \t\t\tsetupContextStack(); // make sure there's context\n \n \t\t\ttry {\n-\t\t\t\t//bug 4579 - if the statement is invalid, regenerate the metadata info\n-\t\t\t\tif (preparedStatement.isValid() == false)\n-\t\t\t\t{\n-\t\t\t\t\t//need to revalidate the statement here, otherwise getResultDescription would\n-\t\t\t\t\t//still have info from previous valid statement\n-\t\t\t\t\tpreparedStatement.rePrepare(lcc);\n-\t\t\t\t\trMetaData = null;\n-\t\t\t\t}\n \t\t\t\t//bug 4579 - gcDuringGetMetaData will be null if this is the first time\n \t\t\t\t//getMetaData call is made.\n \t\t\t\t//Second check - if the statement was revalidated since last getMetaData call,\n \t\t\t\t//then gcDuringGetMetaData wouldn't match with current generated class name\n-\t\t\t\tif (gcDuringGetMetaData == null || gcDuringGetMetaData.equals(execp.getActivationClass().getName()) == false)\n-\t\t\t\t{\n-\t\t\t\t\trMetaData = null;\n-\t\t\t\t\tgcDuringGetMetaData = execp.getActivationClass().getName();\n-\t\t\t\t}\n-\t\t\t\tif (rMetaData == null)\n-\t\t\t\t{\n-\t\t\t\t\tResultDescription resd = preparedStatement.getResultDescription();\n-\t\t\t\t\tif (resd != null)\n-\t\t\t\t\t{\n-\t\t\t\t\t\t// Internally, the result description has information\n-\t\t\t\t\t\t// which is used for insert, update and delete statements\n-\t\t\t\t\t\t// Externally, we decided that statements which don't\n-\t\t\t\t\t\t// produce result sets such as insert, update and delete\n-\t\t\t\t\t\t// should not return ResultSetMetaData.  This is enforced\n-\t\t\t\t\t\t// here\n-\t\t\t\t\t\tString statementType = resd.getStatementType();\n-\t\t\t\t\t\tif (statementType.equals(\"INSERT\") ||\n-\t\t\t\t\t\t\t\tstatementType.equals(\"UPDATE\") ||\n-\t\t\t\t\t\t\t\tstatementType.equals(\"DELETE\"))\n-\t\t\t\t\t\t\trMetaData = null;\n-\t\t\t\t\t\telse\n-\t\t\t\t    \t\trMetaData = newEmbedResultSetMetaData(resd);\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\n+                GeneratedClass currAc = null;\n+                ResultDescription resd = null;\n+\n+                synchronized(execp) {\n+                    // DERBY-3823 Some other thread may be repreparing\n+                    do {\n+                        while (!execp.upToDate()) {\n+                            execp.rePrepare(lcc);\n+                        }\n+\n+                        currAc = execp.getActivationClass();\n+                        resd = execp.getResultDescription();\n+                    } while (currAc == null);\n+                }\n+\n+                if (gcDuringGetMetaData == null ||\n+                        !gcDuringGetMetaData.equals(currAc.getName())) {\n+                    rMetaData = null;\n+                    gcDuringGetMetaData = currAc.getName();\n+                }\n+\n+                if (rMetaData == null && resd != null) {\n+                    // Internally, the result description has information\n+                    // which is used for insert, update and delete statements\n+                    // Externally, we decided that statements which don't\n+                    // produce result sets such as insert, update and delete\n+                    // should not return ResultSetMetaData.  This is enforced\n+                    // here\n+                    String statementType = resd.getStatementType();\n+                    if (statementType.equals(\"INSERT\") ||\n+                            statementType.equals(\"UPDATE\") ||\n+                            statementType.equals(\"DELETE\"))\n+                        rMetaData = null;\n+                    else\n+                        rMetaData = newEmbedResultSetMetaData(resd);\n+                }\n+\n                 InterruptStatus.restoreIntrFlagIfSeen(lcc);\n \t\t\t} catch (Throwable t) {\n \t\t\t\tthrow handleException(t);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/6d4d95d4142be4cdb94927093372d2b085034e21",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/4d044a3f7a7b8bc70860629bded778972f617ce1",
        "message": "DERBY-5894: NPE in OnlineBackupTest1 while backing up in stubFileToRemoveAfterCheckPoint\n\nStop using the shared run() method from RAFContainer.backupContainer(),\nas it is not safe to use without synchronization (which is why the\nNullPointerException happened).\n\nAlso, use doPrivileged() only to execute those parts of the code that\nneed to run with privileges, as most of the code called from\nbackupContainer() does not need privileges.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1422845 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_6",
        "file": [
            {
                "sha": "670237f17ac59ea928e651f22dc803297ce9ced7",
                "filename": "java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java",
                "status": "modified",
                "additions": 80,
                "deletions": 60,
                "changes": 140,
                "blob_url": "https://github.com/apache/derby/blob/6d4d95d4142be4cdb94927093372d2b085034e21/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java",
                "raw_url": "https://github.com/apache/derby/raw/6d4d95d4142be4cdb94927093372d2b085034e21/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java?ref=6d4d95d4142be4cdb94927093372d2b085034e21",
                "patch": "@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n import org.apache.derby.iapi.util.InterruptStatus;\n import org.apache.derby.iapi.util.InterruptDetectedException;\n+import org.apache.derby.iapi.util.ReuseFactory;\n \n import org.apache.derby.iapi.error.StandardException;\n \n@@ -44,6 +45,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.io.FileNotFoundException;\n import java.io.RandomAccessFile;\n import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.security.PrivilegedExceptionAction;\n import java.security.PrivilegedActionException;\n \n@@ -72,7 +74,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private static final int REMOVE_FILE_ACTION = 3;\n     private static final int OPEN_CONTAINER_ACTION = 4;\n     private static final int STUBBIFY_ACTION = 5;\n-\tprivate static final int BACKUP_CONTAINER_ACTION = 6;\n     private static final int GET_RANDOM_ACCESS_FILE_ACTION = 7;\n     private static final int REOPEN_CONTAINER_ACTION = 8;\n     private ContainerKey actionIdentity;\n@@ -81,8 +82,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private boolean actionTryAlternatePath;\n     private StorageFile actionFile;\n     private LogInstant actionInstant;\n-\tprivate String actionBackupLocation;\n-\tprivate BaseContainerHandle actionContainerHandle;\n \n \tprivate boolean inBackup = false;\n \tprivate boolean inRemove = false;\n@@ -815,6 +814,50 @@ synchronized void createContainer(ContainerKey newIdentity)\n         finally{ actionIdentity = null; }\n     } // end of createContainer\n \n+    /**\n+     * Copy the contents of a {@code StorageFile} to a {@code java.io.File}.\n+     *\n+     * @param from the file to copy from\n+     * @param to the file to copy to\n+     * @throws StandardException if the copying failed\n+     */\n+    private void copyFile(final StorageFile from, final File to)\n+            throws StandardException {\n+        Boolean success = (Boolean) AccessController.doPrivileged(\n+                new PrivilegedAction() {\n+                    public Object run() {\n+                        return ReuseFactory.getBoolean(FileUtil.copyFile(\n+                                dataFactory.getStorageFactory(), from, to));\n+                    }\n+                });\n+\n+        if (!success.booleanValue()) {\n+            throw StandardException.newException(\n+                    SQLState.RAWSTORE_ERROR_COPYING_FILE,\n+                    from, to);\n+        }\n+    }\n+\n+    /**\n+     * Remove a file.\n+     * @param file the file to remove\n+     * @throws StandardException if the file could not be removed\n+     */\n+    private void removeFile(final File file) throws StandardException {\n+        Boolean success = (Boolean) AccessController.doPrivileged(\n+            new PrivilegedAction() {\n+                public Object run() {\n+                    return ReuseFactory.getBoolean(\n+                            !file.exists() || file.delete());\n+                }\n+        });\n+\n+        if (!success.booleanValue()) {\n+            throw StandardException.newException(\n+                    SQLState.UNABLE_TO_DELETE_FILE, file);\n+        }\n+    }\n+\n \tsynchronized boolean removeFile(StorageFile file)\n         throws SecurityException, StandardException\n     {\n@@ -965,36 +1008,6 @@ private synchronized void stubbify(LogInstant instant)\n         }\n     }\n \n-\n-\n-\n-\t\t\n-    /**\n-     * Backup the  container.\n-     * \n-     * @param handle the container handle.\n-     * @param backupLocation location of the backup container. \n-     * @exception StandardException Standard Derby error policy \n-     */\n-\tprotected void backupContainer(BaseContainerHandle handle,\tString backupLocation)\n-\t    throws StandardException \n-\t{\n-\t\tactionContainerHandle = handle;\n-        actionBackupLocation = backupLocation;\n-        actionCode = BACKUP_CONTAINER_ACTION;\n-        try\n-        {\n-            AccessController.doPrivileged(this);\n-        }\n-        catch( PrivilegedActionException pae){ throw (StandardException) pae.getException();}\n-        finally\n-        {\n-            actionContainerHandle = null;\n-            actionBackupLocation = null;\n-        }\n-\t}\n-\n-\n     /**\n      * Backup the  container.\n      *\n@@ -1032,8 +1045,8 @@ protected void backupContainer(BaseContainerHandle handle,\tString backupLocation\n      * @exception StandardException Derby Standard error policy\n      *\n      */\n-    private void privBackupContainer(BaseContainerHandle handle,\t\n-                                     String backupLocation)\n+    protected void backupContainer(BaseContainerHandle handle,\n+                                   String backupLocation)\n         throws StandardException \n     {\n         boolean backupCompleted = false;\n@@ -1067,18 +1080,12 @@ private void privBackupContainer(BaseContainerHandle handle,\n                 // create container at the backup location.\n                 if (isStub) {\n                     // get the stub ( it is a committted drop table container )\n-                    StorageFile file = privGetFileName((ContainerKey)getIdentity(), \n+                    StorageFile file = getFileName((ContainerKey)getIdentity(),\n                                                        true, false, true);\n                     backupFile = new File(backupLocation, file.getName());\n \n \t\t\t\t\t// directly copy the stub to the backup \n-\t\t\t\t\tif(!FileUtil.copyFile(dataFactory.getStorageFactory(), \n-                                          file, backupFile))\n-                    {\n-                        throw StandardException.newException(\n-                                              SQLState.RAWSTORE_ERROR_COPYING_FILE,\n-                                              file, backupFile);\n-                    }\n+                    copyFile(file, backupFile);\n                 }else {\n                     // regular container file \n                     long lastPageNumber= getLastPageNumber(handle);\n@@ -1094,12 +1101,11 @@ private void privBackupContainer(BaseContainerHandle handle,\n                     }\n \n                     StorageFile file = \n-                        privGetFileName(\n+                        getFileName(\n                             (ContainerKey)getIdentity(), false, false, true);\n \n                     backupFile = new File(backupLocation , file.getName());\n-                    backupRaf  = new RandomAccessFile(backupFile,  \"rw\");\n-                    FileUtil.limitAccessToOwner(backupFile);\n+                    backupRaf  = getRandomAccessFile(backupFile);\n \n                     byte[] encryptionBuf = null;\n                     if (dataFactory.databaseEncrypted()) {\n@@ -1194,13 +1200,7 @@ private void privBackupContainer(BaseContainerHandle handle,\n                         }\n                     }\n \n-                    if(backupFile.exists()) \n-                    {\n-                        if (!backupFile.delete())\n-                            throw StandardException.newException(\n-                                                SQLState.UNABLE_TO_DELETE_FILE, \n-                                                backupFile);\n-                    }\n+                    removeFile(backupFile);\n                 } \n             }\n         }\n@@ -1239,7 +1239,7 @@ protected void encryptOrDecryptContainer(BaseContainerHandle handle,\n         try {\n             long lastPageNumber= getLastPageNumber(handle);\n  \n-            newRaf = privGetRandomAccessFile(newFile);\n+            newRaf = getRandomAccessFile(newFile);\n \n             byte[] encryptionBuf = null;\n             if (doEncrypt) {\n@@ -1305,8 +1305,33 @@ protected void encryptOrDecryptContainer(BaseContainerHandle handle,\n         }\n     }\n \n+    /**\n+     * Get a RandomAccessFile for accessing a file in read-write mode.\n+     * @param file the file to access\n+     * @return a RandomAccessFile\n+     * @throws FileNotFoundException if {@code file} cannot be opened in\n+     * read-write mode\n+     */\n+    private RandomAccessFile getRandomAccessFile(final File file)\n+            throws FileNotFoundException {\n+        try {\n+            return (RandomAccessFile) AccessController.doPrivileged(\n+                new PrivilegedExceptionAction() {\n+                    public Object run() throws FileNotFoundException {\n+                        boolean preExisting = file.exists();\n+                        RandomAccessFile raf = new RandomAccessFile(file, \"rw\");\n+                        if (!preExisting) {\n+                            FileUtil.limitAccessToOwner(file);\n+                        }\n+                        return raf;\n+                    }\n+                });\n+        } catch (PrivilegedActionException pae) {\n+            throw (FileNotFoundException) pae.getCause();\n+        }\n+    }\n \n-    synchronized StorageRandomAccessFile privGetRandomAccessFile(StorageFile file)\n+    synchronized StorageRandomAccessFile getRandomAccessFile(StorageFile file)\n         throws SecurityException, StandardException\n     {\n         actionCode = GET_RANDOM_ACCESS_FILE_ACTION;\n@@ -1664,11 +1689,6 @@ public Object run() throws StandardException\n              dataFactory.stubFileToRemoveAfterCheckPoint(stub,actionInstant, getIdentity());\n              return null;\n          } // end of case STUBBIFY_ACTION\n-\t\t \n-\t\t case BACKUP_CONTAINER_ACTION: {\n-\t\t\t privBackupContainer(actionContainerHandle, actionBackupLocation);\n-\t\t\t return null;\n-\t\t } // end of case BACKUP_CONTAINER_ACTION\n \n          case GET_RANDOM_ACCESS_FILE_ACTION: {\n              try"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/32439582d1039a00d7d1c578e6304d45688ca100",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/6d3942652ecf6025501fc08acb10d3e192a9662c",
        "message": "DERBY-6981: NullPointerException when re-executing PreparedStatement query.\n\nTableScanResultSet's past2FutureTbl is a hash table containing updated\nrows that are thrown into the future direction of the index scan, so\nthat the scan knows it's seen these rows already and should skip them\nsubsequently.\n\nWhen the TableScanResultSet.close() method was called, it was closing the\npast2FutureTbl, but not clearing the pointer, which caused the lazy\ninitialization of the past2FutureTbl to be incorrectly performed the\nnext time the same TableScanResultSet was opened and scanned, resulting\nin the NullPointerException in the underlying BackingStoreHashtable code\nin that second scan.\n\nThe fix is to clear the old instance and freshly initialize a new instance,\neach time the TableScanResultSet is closed and reopened.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1823037 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_7",
        "file": [
            {
                "sha": "23974f6e477802b72d2f844e76fd5539b2174b7d",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/32439582d1039a00d7d1c578e6304d45688ca100/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/32439582d1039a00d7d1c578e6304d45688ca100/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java?ref=32439582d1039a00d7d1c578e6304d45688ca100",
                "patch": "@@ -625,6 +625,7 @@ public void\tclose() throws StandardException\n             if (past2FutureTbl != null)\n             {\n                 past2FutureTbl.close();\n+                past2FutureTbl = null;\n             }\n \t    }\n \t\telse"
            },
            {
                "sha": "3d57560ca52a7a3312bd2cb2cd8c7966ddff58f2",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdatableResultSetTest.java",
                "status": "modified",
                "additions": 38,
                "deletions": 0,
                "changes": 38,
                "blob_url": "https://github.com/apache/derby/blob/32439582d1039a00d7d1c578e6304d45688ca100/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdatableResultSetTest.java",
                "raw_url": "https://github.com/apache/derby/raw/32439582d1039a00d7d1c578e6304d45688ca100/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdatableResultSetTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdatableResultSetTest.java?ref=32439582d1039a00d7d1c578e6304d45688ca100",
                "patch": "@@ -26,6 +26,8 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n+import java.sql.Timestamp;\n+import java.util.Date;\n import junit.framework.Test;\n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n import org.apache.derbyTesting.junit.TestConfiguration;\n@@ -717,4 +719,40 @@ private ResultSet fetch(String colName, int key)\n         return stmt.executeQuery(\"select \" + colName +\n                 \" from UpdateTestTableResultSet where sno = \" + key);\n     }\n+\n+    public void testDerby6981()\n+        throws SQLException\n+    {\n+        Statement stmt = createStatement();\n+        stmt.executeUpdate(\"CREATE TABLE TEST1 \" +\n+            \"(ID int PRIMARY KEY NOT NULL,LASTUPDATE timestamp)\");\n+        PreparedStatement ps = prepareStatement(\n+            \"SELECT id, LASTUPDATE FROM test1 WHERE id = ? \" +\n+                    \"FOR UPDATE OF id, LASTUPDATE \",\n+            ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);\n+\n+        long newDate = new Date().getTime();\n+\n+        for (int i = 0; i < 3; i++)\n+        {\n+            ps.setInt(1, 3);\n+            ResultSet rs = ps.executeQuery();\n+            if (!rs.next())\n+            {\n+                rs.moveToInsertRow();\n+                rs.updateInt(1, 3);\n+                rs.updateTimestamp(2, new Timestamp(newDate));\n+                rs.insertRow();\n+            }\n+            else\n+            {\n+                rs.updateInt(1, 3);\n+                rs.updateTimestamp(2, new Timestamp(newDate));\n+                rs.updateRow();\n+            }\n+            rs.close();\n+        }\n+        stmt.close();\n+        ps.close();\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/4ce6a9b488aff11cc705a26c1ca30d61091a3ca2",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/b565f41eb31d118c572770aaf69bd0c568538ff5",
        "message": "DERBY-6212: NullPointerException when calling a procedure with sub-query as argument\n\nRaise a syntax error instead of a NullPointerException if a sub-query\nis given as argument to a CALL statement.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1480909 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_8",
        "file": [
            {
                "sha": "18fdf17f91ae25b9e19aaadf4e5a4c48b9da62db",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java",
                "status": "modified",
                "additions": 10,
                "deletions": 1,
                "changes": 11,
                "blob_url": "https://github.com/apache/derby/blob/4ce6a9b488aff11cc705a26c1ca30d61091a3ca2/java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java",
                "raw_url": "https://github.com/apache/derby/raw/4ce6a9b488aff11cc705a26c1ca30d61091a3ca2/java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java?ref=4ce6a9b488aff11cc705a26c1ca30d61091a3ca2",
                "patch": "@@ -122,15 +122,24 @@ public void bindStatement() throws StandardException\n \t\tif (SanityManager.DEBUG)\n \t\t\tSanityManager.ASSERT((dd != null), \"Failed to get data dictionary\");\n \n+        SubqueryList subqueries = (SubqueryList) getNodeFactory().getNode(\n+                C_NodeTypes.SUBQUERY_LIST, getContextManager());\n+\n \t\tgetCompilerContext().pushCurrentPrivType(getPrivType());\n \t\tmethodCall = (JavaToSQLValueNode) methodCall.bindExpression(\n \t\t\t\t\t\t\t(FromList) getNodeFactory().getNode(\n \t\t\t\t\t\t\t\tC_NodeTypes.FROM_LIST,\n \t\t\t\t\t\t\t\tgetNodeFactory().doJoinOrderOptimization(),\n \t\t\t\t\t\t\t\tgetContextManager()), \n-\t\t\t\t\t\t\tnull,\n+                            subqueries,\n \t\t\t\t\t\t\tnull);\n \n+        // Don't allow sub-queries in CALL statements.\n+        if (subqueries.size() != 0) {\n+            throw StandardException.newException(\n+                    SQLState.LANG_INVALID_CALL_STATEMENT);\n+        }\n+\n \t\t// Disallow creation of BEFORE triggers which contain calls to \n \t\t// procedures that modify SQL data. \n   \t\tcheckReliability();"
            },
            {
                "sha": "9fbef5cf73979065bc1996fab8e5bf026da9b101",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java",
                "status": "modified",
                "additions": 5,
                "deletions": 0,
                "changes": 5,
                "blob_url": "https://github.com/apache/derby/blob/4ce6a9b488aff11cc705a26c1ca30d61091a3ca2/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java",
                "raw_url": "https://github.com/apache/derby/raw/4ce6a9b488aff11cc705a26c1ca30d61091a3ca2/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java?ref=4ce6a9b488aff11cc705a26c1ca30d61091a3ca2",
                "patch": "@@ -48,6 +48,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n public class LangProcedureTest extends BaseJDBCTestCase {\n \n     private final static String LANG_STRING_TRUNCATION = \"22001\";\n+    private final static String LANG_INVALID_CALL_STATEMENT = \"42X74\";\n     private final String thisClassName = getClass().getName();\n \n     public LangProcedureTest(String name) {\n@@ -202,6 +203,10 @@ public void testCreateRoutineErrors() throws SQLException {\n             \"42X15\", s,\n             \"call syscs_util.syscs_set_database_property(\\\"foo\\\", \\\"bar\\\")\");\n \n+        // Not so long ago (DERBY-6212) this caused a NullPointerException.\n+        assertCompileError(LANG_INVALID_CALL_STATEMENT,\n+          \"call syscs_util.syscs_set_database_property('foo', (values 'bar'))\");\n+\n         s.close();\n     }\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/18ab492a15ae0e50108e1b1dd0f1ae68d2266c8e",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/33605bd716f12b196e752cecc151e83bd66cc5c4",
        "message": "DERBY-5736: NullPointerException in GenericTriggerExecutor.executeSPS() caused by OutOfMemoryError\n\nGuard the cleanup with a null check to prevent masking the original\nerror with a NullPointerException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1335418 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_9",
        "file": [
            {
                "sha": "0b3457cdc3cc99ab6e41f9a83586d198d99dcfa2",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/18ab492a15ae0e50108e1b1dd0f1ae68d2266c8e/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java",
                "raw_url": "https://github.com/apache/derby/raw/18ab492a15ae0e50108e1b1dd0f1ae68d2266c8e/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java?ref=18ab492a15ae0e50108e1b1dd0f1ae68d2266c8e",
                "patch": "@@ -206,6 +206,10 @@ protected void executeSPS(SPSDescriptor sps) throws StandardException\n \t\t\t\t** trigger executor needs to ensure that the current active SC \n \t\t\t\t** is associated with the SPS, so that it is cleaning up the \n \t\t\t\t** right statement context in LCC. \n+                **\n+                ** It is also possible that the error has already been handled\n+                ** on a lower level, especially if the trigger re-enters the\n+                ** JDBC layer. In that case, the current SC will be null.\n \t\t\t\t**    \n \t\t\t\t** When the active SC is cleaned up, the TEC will be removed\n \t\t\t\t** from LCC and the SC object will be popped off from the LCC \n@@ -216,7 +220,7 @@ protected void executeSPS(SPSDescriptor sps) throws StandardException\n \t\t\t\tStatementContext sc = lcc.getStatementContext();\n \t\t\t\t\n \t\t\t\t/* make sure that the cleanup is on the new SC */\n-\t\t\t\tif (active_sc != sc) \n+\t\t\t\tif (sc != null && active_sc != sc)\n \t\t\t\t{\n \t\t\t\t\tsc.cleanupOnError(e);\n \t\t\t\t}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/7017a3517a29a37001afad516eff8fc1a52f269d",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/d95d0e7f5004d65bdabeba2228e8fdebcb76224d",
        "message": "DERBY-4342: SQLSTATE 38000 (NullPointerException) at inner self join and value(x1, x2...)\n\nOverride ValueNode.remapColumnReferencesToExpressions() in CoalesceFunctionNode\nso that its arguments are properly remapped. The lack of remapping made the\ngenerated code access the wrong result set, eventually causing the\nNullPointerException.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@819006 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_10",
        "file": [
            {
                "sha": "f8e98a50270ca6fae09b70beea06bde9857369d2",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "status": "modified",
                "additions": 18,
                "deletions": 0,
                "changes": 18,
                "blob_url": "https://github.com/apache/derby/blob/7017a3517a29a37001afad516eff8fc1a52f269d/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "raw_url": "https://github.com/apache/derby/raw/7017a3517a29a37001afad516eff8fc1a52f269d/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java?ref=7017a3517a29a37001afad516eff8fc1a52f269d",
                "patch": "@@ -427,4 +427,22 @@ public ValueNode preprocess(int numTables,\n \t\t}\n \t\treturn this;\n \t}\n+\n+    /**\n+     * Remap all the {@code ColumnReference}s in this tree to be clones of\n+     * the underlying expression.\n+     *\n+     * @return the remapped tree\n+     * @throws StandardException if an error occurs\n+     */\n+    public ValueNode remapColumnReferencesToExpressions()\n+            throws StandardException\n+    {\n+        for (int i = 0; i < argumentsList.size(); i++) {\n+            ValueNode vn = (ValueNode) argumentsList.elementAt(i);\n+            vn.remapColumnReferencesToExpressions();\n+        }\n+        return this;\n+    }\n+\n }"
            },
            {
                "sha": "6828a137904859e65171451cf5f066d5788ba315",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java",
                "status": "modified",
                "additions": 14,
                "deletions": 1,
                "changes": 15,
                "blob_url": "https://github.com/apache/derby/blob/7017a3517a29a37001afad516eff8fc1a52f269d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java",
                "raw_url": "https://github.com/apache/derby/raw/7017a3517a29a37001afad516eff8fc1a52f269d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java?ref=7017a3517a29a37001afad516eff8fc1a52f269d",
                "patch": "@@ -30,10 +30,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.io.UnsupportedEncodingException;\n \n import junit.framework.Test;\n-import junit.framework.TestSuite;\n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n import org.apache.derbyTesting.junit.TestConfiguration;\n import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;\n+import org.apache.derbyTesting.junit.JDBC;\n \n \n /**\n@@ -1170,6 +1170,19 @@ public void testAggregateDerby2016() throws SQLException\n                expectedValues[index++]);\n     }\n \n+    /**\n+     * Regression test for DERBY-4342. A self-join with COALESCE in the WHERE\n+     * clause used to fail with a NullPointerException because\n+     * CoalesceFunctionNode didn't remap column references correctly.\n+     */\n+    public void testColumnRemappingDerby4342() throws SQLException {\n+        JDBC.assertSingleValueResultSet(s.executeQuery(\n+                \"select t1.smallintcol from \" +\n+                \"AllDataTypesTable t1 join AllDataTypesTable t2 \" +\n+                \"on t1.smallintcol=t2.smallintcol where \" +\n+                \"coalesce(t1.smallintcol, t1.integercol) = 1\"),\n+                \"1\");\n+    }\n \n     /**************supporting methods *******************/\n     private void dumpRS(ResultSet rs, String expectedValue) throws SQLException"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/7e57d4bd64cbb119d980426d9b4913d6595dcf6c",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/a8c09662d5392a869a7db7e8cb239dd09087836c",
        "message": "DERBY-4148 - fixing NullPointerException in system.sttest\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@763743 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_11",
        "file": [
            {
                "sha": "9116f443ac137bc87726f5f9bdc5187c7f57eb1a",
                "filename": "java/testing/org/apache/derbyTesting/system/sttest/utils/Datatypes.java",
                "status": "modified",
                "additions": 5,
                "deletions": 3,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/7e57d4bd64cbb119d980426d9b4913d6595dcf6c/java/testing/org/apache/derbyTesting/system/sttest/utils/Datatypes.java",
                "raw_url": "https://github.com/apache/derby/raw/7e57d4bd64cbb119d980426d9b4913d6595dcf6c/java/testing/org/apache/derbyTesting/system/sttest/utils/Datatypes.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/system/sttest/utils/Datatypes.java?ref=7e57d4bd64cbb119d980426d9b4913d6595dcf6c",
                "patch": "@@ -609,8 +609,10 @@ public static synchronized void update_one_row(Connection conn,\n \t\t\tif (rows < 0)\n \t\t\t\tSystem.out.println(\"t\" + thread_id + \" update failed.\");\n \t\t}\n-\t\tstreamReader.close();\n-\t\tstreamIn.close();\n+\t\tif (streamReader != null)\n+\t\t\tstreamReader.close();\n+\t\tif (streamIn !=null)\n+\t\t\tstreamIn.close();\n \t\tif (ps2 != null)\n \t\t\ttry {\n \t\t\t\tps2.close();\n@@ -671,4 +673,4 @@ public static synchronized int get_table_count(Connection conn)\n \t\tlocked = true;\n \t\treturn (rows);\n \t}\n-}\n\\ No newline at end of file\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/7057c613095f922d16f6e3471f7c4e1632f7324a",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/5a2e494a1e02f3da8c1c57bb3ee510c9da30b6d0",
        "message": "DERBY-2164 (partial) Fixed NullPointerException when loading storeless engine\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@675918 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_12",
        "file": [
            {
                "sha": "616b191697368dc9890b3bf38fe38bfc14373365",
                "filename": "java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/7057c613095f922d16f6e3471f7c4e1632f7324a/java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java",
                "raw_url": "https://github.com/apache/derby/raw/7057c613095f922d16f6e3471f7c4e1632f7324a/java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java?ref=7057c613095f922d16f6e3471f7c4e1632f7324a",
                "patch": "@@ -101,7 +101,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n         this.normalizeToUpper = normalizeToUpper;\n \t\tthis.parent = parent;\n \t\tlf = (LockFactory) Monitor.getServiceModule(parent, Module.LockFactory);\n-\t\tcompat = lf.createCompatibilitySpace(this);\n+\t\tcompat = (lf != null) ? lf.createCompatibilitySpace(this) : null;\n \n \t\tif (verbose) {\n \t\t\tvs = Monitor.getStream();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/4fc5f9c837aab62a44f559e5bbb38abb2be3299a",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/8ad67d3b766b525b94eaf87a8abf24aad4f48b32",
        "message": "DERBY-6703: MERGE statement fails with NullPointerException if ON clause references non-existent column\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1618114 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_13",
        "file": [
            {
                "sha": "cdd9fa84882a9e32ef732fbf4e4127c75219fd9e",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java",
                "raw_url": "https://github.com/apache/derby/raw/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java?ref=4fc5f9c837aab62a44f559e5bbb38abb2be3299a",
                "patch": "@@ -387,7 +387,7 @@ void copyFields(ColumnReference oldCR)\n \t * @exception StandardException\t\tThrown on error\n \t */\n     @Override\n-    ValueNode bindExpression(FromList fromList,\n+    ColumnReference bindExpression(FromList fromList,\n                              SubqueryList subqueryList,\n                              List<AggregateNode> aggregates)\n             throws StandardException"
            },
            {
                "sha": "9ce9be52243148fdcbe411fbfc8e9e5c4bbe7b71",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "raw_url": "https://github.com/apache/derby/raw/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/FromList.java?ref=4fc5f9c837aab62a44f559e5bbb38abb2be3299a",
                "patch": "@@ -622,7 +622,8 @@ ResultColumnList expandAll(TableName allTableName)\n \t *\n \t * @param columnReference\tThe ColumnReference describing the column to bind\n \t *\n-\t * @return\tResultColumn\tThe matching ResultColumn\n+     * @return ResultColumn     The matching ResultColumn, or {@code null} if\n+     *                          there is no matching column\n \t *\n \t * @exception StandardException\t\tThrown on error\n \t */"
            },
            {
                "sha": "a48ce6cd673903cd107d17b965685428e7d1ca72",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/MergeNode.java",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/engine/org/apache/derby/impl/sql/compile/MergeNode.java",
                "raw_url": "https://github.com/apache/derby/raw/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/engine/org/apache/derby/impl/sql/compile/MergeNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/MergeNode.java?ref=4fc5f9c837aab62a44f559e5bbb38abb2be3299a",
                "patch": "@@ -942,9 +942,11 @@ private void    addTargetRowLocation( ResultColumnList selectList )\n     {\n         if ( cr.getTableName() == null )\n         {\n-            ResultColumn    rc = _leftJoinFromList.bindColumnReference( cr );\n+            cr = cr.bindExpression(\n+                    _leftJoinFromList,\n+                    new SubqueryList(getContextManager()),\n+                    new ArrayList<AggregateNode>());\n             TableName       tableName = cr.getQualifiedTableName();\n-            if ( tableName == null ) { tableName = new TableName( null, rc.getTableName(), getContextManager() ); }\n             cr = new ColumnReference( cr.getColumnName(), tableName, getContextManager() );\n         }\n "
            },
            {
                "sha": "38368e5dcfa197eb6dea351361f79bfb0b429d5d",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java",
                "status": "modified",
                "additions": 7,
                "deletions": 0,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java",
                "raw_url": "https://github.com/apache/derby/raw/4fc5f9c837aab62a44f559e5bbb38abb2be3299a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java?ref=4fc5f9c837aab62a44f559e5bbb38abb2be3299a",
                "patch": "@@ -324,6 +324,13 @@ public  void    test_001_badSyntax()\n               \"when matched then delete\\n\"\n               );\n \n+        // Variant of the above, where no table name is specified in the\n+        // column reference that is out of scope. Used to fail with a\n+        // NullPointerException (DERBY-6703).\n+        expectCompilationError(dboConnection, COLUMN_OUT_OF_SCOPE,\n+                \"merge into t1 using t2 on no_such_column \" +\n+                \"when matched then delete\");\n+\n         //\n         // The matching refinement clauses can only mention columns in the\n         // source and target tables."
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/6048528d42980e27c7774a3eb5c01a17086f3c5b",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/86db097119858feb0af610086ac473e6bafdc5cf",
        "message": "DERBY-5111 NullPointerException on unique constraint violation with unique index\n\nPatch derby-5111.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1579766 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_14",
        "file": [
            {
                "sha": "49d75c30bf83dac563069de9d86cf344622b133b",
                "filename": "java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java",
                "status": "modified",
                "additions": 2,
                "deletions": 15,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/6048528d42980e27c7774a3eb5c01a17086f3c5b/java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java",
                "raw_url": "https://github.com/apache/derby/raw/6048528d42980e27c7774a3eb5c01a17086f3c5b/java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java?ref=6048528d42980e27c7774a3eb5c01a17086f3c5b",
                "patch": "@@ -100,19 +100,6 @@ public\tIndexLister( TableDescriptor\ttableDescriptor )\n \t\treturn\tArrayUtil.copy( indexConglomerateNumbers );\n \t}\n \n-    /**\n-\t  *\tReturns an array of all the index names on a table.\n-\t  *\n-\t  *\t@return\tan array of index names\n-\t  *\n-\t  * @exception StandardException\t\tThrown on error\n-\t  */\n-    public\tString[]\t\tgetIndexNames()\tthrows StandardException\n-\t{\n-\t\tif ( indexNames == null ) { getAllIndexes(); }\n-\t\treturn\tArrayUtil.copy( indexNames );\n-\t}\n-\n     /**\n \t  *\tReturns an array of distinct index row generators on a table,\n \t  * erasing entries for duplicate indexes (which share same conglomerate).\n@@ -153,8 +140,8 @@ public\tIndexLister( TableDescriptor\ttableDescriptor )\n \t  */\n     public\tString[]\t\tgetDistinctIndexNames()\tthrows StandardException\n \t{\n-\t\tif ( indexNames == null ) { getAllIndexes(); }\n-\t\treturn\tArrayUtil.copy( indexNames );\n+\t\tif ( distinctIndexNames == null ) { getAllIndexes(); }\n+\t\treturn\tArrayUtil.copy( distinctIndexNames );\n \t}\n \n \t////////////////////////////////////////////////////////////////////////"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/cd5717c780b8b41031ed25c3efeb4aafcc410b3a",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/434e1655b2c2e96c37880c44e93c5bc94496a1f7",
        "message": "DERBY-6273: NullPointerException when using more than one parameter in COALESCE\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1496837 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_15",
        "file": [
            {
                "sha": "011774949ef4374799d42519a7a8a7d5449aad71",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "status": "modified",
                "additions": 0,
                "deletions": 1,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/cd5717c780b8b41031ed25c3efeb4aafcc410b3a/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "raw_url": "https://github.com/apache/derby/raw/cd5717c780b8b41031ed25c3efeb4aafcc410b3a/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java?ref=cd5717c780b8b41031ed25c3efeb4aafcc410b3a",
                "patch": "@@ -179,7 +179,6 @@ ValueNode bindExpression(FromList fromList, SubqueryList subqueryList, List<Aggr\n \t\t\tif (((ValueNode) argumentsList.elementAt(index)).requiresTypeFromContext())\n \t\t\t{\n \t\t\t\t((ValueNode)argumentsList.elementAt(index)).setType(getTypeServices());\n-\t\t\t\tbreak;\n \t\t\t}\n \t\t}\n \t\treturn this;"
            },
            {
                "sha": "2fafd79332896bafce3b4f64c5e5ba690cf7cb8f",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java",
                "status": "modified",
                "additions": 42,
                "deletions": 0,
                "changes": 42,
                "blob_url": "https://github.com/apache/derby/blob/cd5717c780b8b41031ed25c3efeb4aafcc410b3a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java",
                "raw_url": "https://github.com/apache/derby/raw/cd5717c780b8b41031ed25c3efeb4aafcc410b3a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java?ref=cd5717c780b8b41031ed25c3efeb4aafcc410b3a",
                "patch": "@@ -1067,6 +1067,48 @@ public void testPredicateCategorizationDerby4594() throws SQLException {\n                 \"where coalesce(a2, 0) <> 1\"));\n     }\n \n+    /**\n+     * If more than one of the arguments passed to COALESCE are untyped\n+     * parameter markers, compilation used to fail with a NullPointerException.\n+     * Fixed in DERBY-6273.\n+     */\n+    public void testMultipleUntypedParameters() throws SQLException {\n+        // All parameters cannot be untyped. This should still fail.\n+        assertCompileError(\"42610\", \"values coalesce(?,?,?)\");\n+\n+        // But as long as we know the type of one parameter, it should be\n+        // possible to have multiple parameters whose types are determined\n+        // from the context. These queries used to raise NullPointerException\n+        // before DERBY-6273.\n+        vetThreeArgCoalesce(\"values coalesce(cast(? as char(1)), ?, ?)\");\n+        vetThreeArgCoalesce(\"values coalesce(?, cast(? as char(1)), ?)\");\n+        vetThreeArgCoalesce(\"values coalesce(?, ?, cast(? as char(1)))\");\n+    }\n+\n+    private void vetThreeArgCoalesce(String sql) throws SQLException {\n+        // First three values in each row are arguments to COALESCE. The\n+        // last value is the expected return value.\n+        String[][] data = {\n+            {\"a\",  \"b\",  \"c\",  \"a\"},\n+            {null, \"b\",  \"c\",  \"b\"},\n+            {\"a\",  null, \"c\",  \"a\"},\n+            {\"a\",  \"b\",  null, \"a\"},\n+            {null, null, \"c\",  \"c\"},\n+            {\"a\",  null, null, \"a\"},\n+            {null, \"b\",  null, \"b\"},\n+            {null, null, null, null},\n+        };\n+\n+        PreparedStatement ps = prepareStatement(sql);\n+\n+        for (int i = 0; i < data.length; i++) {\n+            ps.setString(1, data[i][0]);\n+            ps.setString(2, data[i][1]);\n+            ps.setString(3, data[i][2]);\n+            JDBC.assertSingleValueResultSet(ps.executeQuery(), data[i][3]);\n+        }\n+    }\n+\n     /**************supporting methods *******************/\n     private void dumpRS(ResultSet rs, String expectedValue) throws SQLException\n     {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/caa8627c64f6db6769dcdf00dbc6073083111f98",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/78b8a9c8b2a30ea0f6e350ffca19df6237efc00a",
        "message": "DERBY-5614: NullPointerException with INSERT INTO [global temporary table] SELECT ... FROM [VTI]\n\nFixed string comparison with == in GTT test.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1294522 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_16",
        "file": [
            {
                "sha": "3c854d990b69232014daf86298c9ce16e3389072",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/caa8627c64f6db6769dcdf00dbc6073083111f98/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java",
                "raw_url": "https://github.com/apache/derby/raw/caa8627c64f6db6769dcdf00dbc6073083111f98/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java?ref=caa8627c64f6db6769dcdf00dbc6073083111f98",
                "patch": "@@ -1040,7 +1040,8 @@ public void testDatabaseMetadata() throws SQLException {\n         assertUpdateCount(s , 0 , \"CREATE TABLE SESSION.t3(c31 int, c32 int)\");\n         ResultSet rs1 = databaseMetaData.getTables(\"\", null, \"%\", null);\n         while (rs1.next()) {\n-            if ((\"T2\" == rs1.getString(3)) && (\"SESSION\" == rs1.getString(2)))\n+            if ((\"T2\".equals(rs1.getString(3))) &&\n+                    (\"SESSION\".equals(rs1.getString(2))))\n                 fail(\"Temporary table Found\");\n             count++;\n         }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/3d7c2eab93c0d51ab45bb2704052a71ff42bc1be",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/8ee7b83d09ef3f81b145a5cb033134d459ff46e5",
        "message": "DERBY-5421;  NullPointerException during system.nstest.utils.Dbutil.update_one_row\n\tmerging 1177446 from 10.8 to trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1177475 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_17",
        "file": [
            {
                "sha": "94e74bbb34c7d40ee7d141fcce4066016a12a29a",
                "filename": "java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java",
                "status": "modified",
                "additions": 70,
                "deletions": 68,
                "changes": 138,
                "blob_url": "https://github.com/apache/derby/blob/3d7c2eab93c0d51ab45bb2704052a71ff42bc1be/java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java",
                "raw_url": "https://github.com/apache/derby/raw/3d7c2eab93c0d51ab45bb2704052a71ff42bc1be/java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java?ref=3d7c2eab93c0d51ab45bb2704052a71ff42bc1be",
                "patch": "@@ -230,74 +230,76 @@ public int doSelectOperation(int numRowsToSelect) throws SQLException {\n \t\t\ts.close();\n \t\t}\n \n-\t\t// Now work over the returned ResultSet and keep track of number of rows\n-\t\t// returned\n-\t\t// We execute the getXXX methods on each of the selected columns so that\n-\t\t// data flow out\n-\t\t// from the network server is also tested.\n-\t\ttry {\n-\t\t\twhile (rSet.next()) {\n-\t\t\t\t// get value of column id\n-\t\t\t\tint id1 = rSet.getInt(1);\n-\n-\t\t\t\t// get value of column t_char\n-\t\t\t\tString str1 = rSet.getString(2);\n-\n-\t\t\t\t// get value of column t_date\n-\t\t\t\tDate dt = rSet.getDate(3);\n-\n-\t\t\t\t// get value of column t_decimal\n-\t\t\t\tdouble doub1 = rSet.getDouble(4);\n-\n-\t\t\t\t// get value of column t_decimal_nn\n-\t\t\t\tdouble doub2 = rSet.getDouble(5);\n-\n-\t\t\t\t// get value of column t_double\n-\t\t\t\tdouble doub3 = rSet.getDouble(6);\n-\n-\t\t\t\t// get value of column t_float\n-\t\t\t\tfloat flt1 = rSet.getFloat(7);\n-\n-\t\t\t\t// get value of column t_int\n-\t\t\t\tint id2 = rSet.getInt(8);\n-\n-\t\t\t\t// get value of column t_longint\n-\t\t\t\tlong lg1 = rSet.getLong(9);\n-\n-\t\t\t\t// get value of column t_numeric_large\n-\t\t\t\tdouble doub4 = rSet.getDouble(10);\n-\n-\t\t\t\t// get value of column t_real\n-\t\t\t\tfloat flt2 = rSet.getFloat(11);\n-\n-\t\t\t\t// get value of column t_smallint\n-\t\t\t\tint id3 = rSet.getInt(12);\n-\n-\t\t\t\t// get value of column t_time\n-\t\t\t\tTime tm = rSet.getTime(13);\n-\n-\t\t\t\t// get value of column t_timestamp\n-\t\t\t\tTimestamp tstmp = rSet.getTimestamp(14);\n-\n-\t\t\t\t// get value of column t_varchar\n-\t\t\t\tString str2 = rSet.getString(15);\n-\n-\t\t\t\t// get value of column serialkey\n-\t\t\t\tlong lg2 = rSet.getLong(16);\n-\n-\t\t\t\tnumRowsSelected++;\n-\t\t\t}\n-\t\t\tNsTest.addStats(NsTest.SELECT, 1);\n-\t\t\tSystem.out.println(this.thread_id + \" selected \" + numRowsSelected\n-\t\t\t\t\t+ \" rows\");\n-\t\t} catch (Exception e) {\n-\t\t\tSystem.out\n-\t\t\t.println(\"FAIL: doSelectOperation() had problems working over the ResultSet\");\n-\t\t\tNsTest.addStats(NsTest.FAILED_SELECT, 1);\n-\t\t\tprintException(\"processing ResultSet during row data retrieval\", e);\n-\t\t\trSet.close();\n-\t\t\ts.close();\n-\t\t\tSystem.out.println(\"Closed the select statement\");\n+\t\tif (rSet != null) {\n+\t\t    // Now work over the returned ResultSet and keep track of number of rows\n+\t\t    // returned\n+\t\t    // We execute the getXXX methods on each of the selected columns so that\n+\t\t    // data flow out\n+\t\t    // from the network server is also tested.\n+\t\t    try {\n+\t\t        while (rSet.next()) {\n+\t\t            // get value of column id\n+\t\t            int id1 = rSet.getInt(1);\n+\n+\t\t            // get value of column t_char\n+\t\t            String str1 = rSet.getString(2);\n+\n+\t\t            // get value of column t_date\n+\t\t            Date dt = rSet.getDate(3);\n+\n+\t\t            // get value of column t_decimal\n+\t\t            double doub1 = rSet.getDouble(4);\n+\n+\t\t            // get value of column t_decimal_nn\n+\t\t            double doub2 = rSet.getDouble(5);\n+\n+\t\t            // get value of column t_double\n+\t\t            double doub3 = rSet.getDouble(6);\n+\n+\t\t            // get value of column t_float\n+\t\t            float flt1 = rSet.getFloat(7);\n+\n+\t\t            // get value of column t_int\n+\t\t            int id2 = rSet.getInt(8);\n+\n+\t\t            // get value of column t_longint\n+\t\t            long lg1 = rSet.getLong(9);\n+\n+\t\t            // get value of column t_numeric_large\n+\t\t            double doub4 = rSet.getDouble(10);\n+\n+\t\t            // get value of column t_real\n+\t\t            float flt2 = rSet.getFloat(11);\n+\n+\t\t            // get value of column t_smallint\n+\t\t            int id3 = rSet.getInt(12);\n+\n+\t\t            // get value of column t_time\n+\t\t            Time tm = rSet.getTime(13);\n+\n+\t\t            // get value of column t_timestamp\n+\t\t            Timestamp tstmp = rSet.getTimestamp(14);\n+\n+\t\t            // get value of column t_varchar\n+\t\t            String str2 = rSet.getString(15);\n+\n+\t\t            // get value of column serialkey\n+\t\t            long lg2 = rSet.getLong(16);\n+\n+\t\t            numRowsSelected++;\n+\t\t        }\n+\t\t        NsTest.addStats(NsTest.SELECT, 1);\n+\t\t        System.out.println(this.thread_id + \" selected \" + numRowsSelected\n+\t\t                + \" rows\");\n+\t\t    } catch (Exception e) {\n+\t\t        System.out\n+\t\t        .println(\"FAIL: doSelectOperation() had problems working over the ResultSet\");\n+\t\t        NsTest.addStats(NsTest.FAILED_SELECT, 1);\n+\t\t        printException(\"processing ResultSet during row data retrieval\", e);\n+\t\t        rSet.close();\n+\t\t        s.close();\n+\t\t        System.out.println(\"Closed the select statement\");\n+\t\t    }\n \t\t}\n \n \t\t// close the ResultSet and statement and release it's resources."
            },
            {
                "sha": "db38fe9701068d95c5d4a9e9d035b965dc54422d",
                "filename": "java/testing/org/apache/derbyTesting/system/nstest/utils/DbUtil.java",
                "status": "modified",
                "additions": 4,
                "deletions": 51,
                "changes": 55,
                "blob_url": "https://github.com/apache/derby/blob/3d7c2eab93c0d51ab45bb2704052a71ff42bc1be/java/testing/org/apache/derbyTesting/system/nstest/utils/DbUtil.java",
                "raw_url": "https://github.com/apache/derby/raw/3d7c2eab93c0d51ab45bb2704052a71ff42bc1be/java/testing/org/apache/derbyTesting/system/nstest/utils/DbUtil.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/system/nstest/utils/DbUtil.java?ref=3d7c2eab93c0d51ab45bb2704052a71ff42bc1be",
                "patch": "@@ -226,16 +226,7 @@ public int add_one_row(Connection conn, String thread_id) throws Exception {\n \t\t\t// ps.close();\n \t\t}\n \t\t\n-\t\tif (ps != null) {\n-\t\t\ttry {\n-\t\t\t\tps.close();\n-\t\t\t\t\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tprintException(\n-\t\t\t\t\t\t\"closing insert stmt in dbUtil when there was a problem creating it\",\n-\t\t\t\t\t\te);\n-\t\t\t}\n-\t\t}\n+\t\n \t\treturn rowsAdded;\n \t}\n \t\n@@ -256,8 +247,6 @@ public int update_one_row(Connection conn, String thread_id)\n \t\tif (skey == 0) { // means we did not find a row\n \t\t\tSystem.out.println(thread_id\n \t\t\t\t\t+ \" could not find a row to update or there was an error.\");\n-\t\t\tif (ps2 != null)\n-\t\t\t\tps2.close();\n \t\t\treturn rowsUpdated;\n \t\t}\n \t\t\n@@ -272,7 +261,6 @@ public int update_one_row(Connection conn, String thread_id)\n \t\t\t\t\t+ \" = ? \" + \" where serialkey = \" + skey);\n \t\t\t\n \t\t} catch (Exception e) {\n-\t\t\tps2.close();\n \t\t\tprintException(\n \t\t\t\t\t\"closing update prepared stmt in dbUtil.update_one_row() \",\n \t\t\t\t\te);\n@@ -385,7 +373,6 @@ public int update_one_row(Connection conn, String thread_id)\n \t\t\t\t\t+ \" \" + sqe.getMessage());\n \t\t\tsqe.printStackTrace();\n \t\t} catch (Exception e) {\n-\t\t\tps2.close();\n \t\t\tprintException(\"Error in update_one_row()\", e);\n \t\t\te.printStackTrace();\n \t\t} finally {\n@@ -400,14 +387,7 @@ public int update_one_row(Connection conn, String thread_id)\n \t\t\tSystem.out\n \t\t\t.println(thread_id + \" update failed, no such row exists\");\n \t\t\n-\t\tif (ps2 != null) {\n-\t\t\ttry {\n-\t\t\t\tps2.close();\n-\t\t\t\t\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tprintException(\"closing update stmt after work is done\", e);\n-\t\t\t}\n-\t\t}\n+\t\n \t\treturn rowsUpdated;\n \t}\n \t\n@@ -432,8 +412,6 @@ public int delete_one_row(Connection conn, String thread_id)\n \t\t\tSystem.out\n \t\t\t.println(\"Unexpected error preparing the statement in delete_one()\");\n \t\t\tprintException(\"delete_one_row prepare \", e);\n-\t\t\tif (ps != null)\n-\t\t\t\tps.close();\n \t\t\treturn rowsDeleted;\n \t\t}\n \t\t\n@@ -443,7 +421,6 @@ public int delete_one_row(Connection conn, String thread_id)\n \t\tif (skey == 0) { // means we did not find a row\n \t\t\tSystem.out.println(thread_id\n \t\t\t\t\t+ \" could not find a row to delete or there was an error.\");\n-\t\t\tps.close();\n \t\t\treturn rowsDeleted;\n \t\t}\n \t\t\n@@ -453,7 +430,6 @@ public int delete_one_row(Connection conn, String thread_id)\n \t\t} catch (Exception e) {\n \t\t\tSystem.out\n \t\t\t.println(\"Error in delete_one(): either with setLong() or executeUpdate\");\n-\t\t\tps.close();\n \t\t\tprintException(\"failure to execute delete stmt\", e);\n \t\t} finally {\n \t\t\tconn\n@@ -468,16 +444,6 @@ public int delete_one_row(Connection conn, String thread_id)\n \t\t\tSystem.out.println(thread_id + \" delete for serialkey \" + skey\n \t\t\t\t\t+ \" failed, no such row exists.\");\n \t\t\n-\t\tif (ps != null) {\n-\t\t\ttry {\n-\t\t\t\tps.close();\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tSystem.out\n-\t\t\t\t.println(\"Error in closing prepared statement of delete_one()\");\n-\t\t\t\tprintException(\"failure to close delete stmt after work done\",\n-\t\t\t\t\t\te);\n-\t\t\t}\n-\t\t}\n \t\treturn rowsDeleted;\n \t}// end of method delete_one()\n \t\n@@ -499,8 +465,6 @@ public long pick_one(Connection conn, String thread_id) throws Exception {\n \t\t\tps = conn\n \t\t\t.prepareStatement(\"select max(serialkey) from nstesttab where serialkey > ?\");\n \t\t} catch (Exception e) {\n-\t\t\tif (ps != null)\n-\t\t\t\tps.close();\n \t\t\tSystem.out\n \t\t\t.println(\"Unexpected error creating the select prepared statement in pick_one()\");\n \t\t\tprintException(\"failure to prepare select stmt in pick_one()\", e);\n@@ -543,22 +507,11 @@ public long pick_one(Connection conn, String thread_id) throws Exception {\n \t\t\tsqe.printStackTrace();\n \t\t}\n \t\t\n-\t\tif (ps != null) {\n-\t\t\ttry {\n-\t\t\t\tps.close();\n-\t\t\t\t\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tSystem.out\n-\t\t\t\t.println(\"Error in closing prepared statement of pick_one()\");\n-\t\t\t\tprintException(\n-\t\t\t\t\t\t\"failure closing select stmt in pick_one after work is done\",\n-\t\t\t\t\t\te);\n-\t\t\t}\n-\t\t}\n+\t\n \t\t\n \t\treturn rowToReturn;\n \t\t\n-\t}// end of method pick_one(...)\n+\t}//of method pick_one(...)\n \t\n \t// ** This method abstracts exception message printing for all exception\n \t// messages. You may want to change"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/f9f83296a76f890dae83e69b35bce6852a0ef2f5",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/c0342dee1ff21e53439ebd4a6ffc43141b6f062c",
        "message": "DERBY-2498; fix NullPointerException in clientDataSource.getConnection and ClientConnectionPoolDataSource.getConnection when the databaseName is invalid.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@711266 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_18",
        "file": [
            {
                "sha": "52c76b11c1d511534a963420202244e536ae0f50",
                "filename": "java/build/org/apache/derbyBuild/splitmessages.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/build/org/apache/derbyBuild/splitmessages.java",
                "raw_url": "https://github.com/apache/derby/raw/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/build/org/apache/derbyBuild/splitmessages.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/build/org/apache/derbyBuild/splitmessages.java?ref=f9f83296a76f890dae83e69b35bce6852a0ef2f5",
                "patch": "@@ -118,6 +118,7 @@ static void initClientMessageIds()\n         clientMessageIds.add(SQLState.NET_VCM_VCS_LENGTHS_INVALID);\n         clientMessageIds.add(SQLState.LANG_STRING_TOO_LONG);\n         clientMessageIds.add(SQLState.INVALID_COLUMN_ARRAY_LENGTH);\n+        clientMessageIds.add(SQLState.PROPERTY_INVALID_VALUE);\n     }\n \n \tpublic static void main(String[] args) throws Exception {"
            },
            {
                "sha": "884548dd464d8a0ca877a036cf84457527d82d3e",
                "filename": "java/client/org/apache/derby/client/net/NetConnection.java",
                "status": "modified",
                "additions": 14,
                "deletions": 2,
                "changes": 16,
                "blob_url": "https://github.com/apache/derby/blob/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/client/org/apache/derby/client/net/NetConnection.java",
                "raw_url": "https://github.com/apache/derby/raw/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/client/org/apache/derby/client/net/NetConnection.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/net/NetConnection.java?ref=f9f83296a76f890dae83e69b35bce6852a0ef2f5",
                "patch": "@@ -33,6 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.shared.common.i18n.MessageUtil;\n import org.apache.derby.client.am.Statement;\n import org.apache.derby.client.am.Utils;\n+import org.apache.derby.iapi.reference.Attribute;\n import org.apache.derby.jdbc.ClientBaseDataSource;\n import org.apache.derby.jdbc.ClientDriver;\n import org.apache.derby.client.ClientPooledConnection;\n@@ -299,8 +300,19 @@ private void initialize(String password,\n         this.rmId_ = rmId;\n         this.isXAConnection_ = isXAConn;\n         flowConnect(password, securityMechanism_);\n-        completeConnect();\n-\n+        // it's possible that the internal Driver.connect() calls returned null,\n+        // thus, a null connection, e.g. when the databasename has a : in it\n+        // (which the InternalDriver assumes means there's a subsubprotocol)  \n+        // and it's not a subsubprotocol recognized by our drivers.\n+        // If so, bail out here.\n+        if(!isConnectionNull())\n+            completeConnect();\n+        else\n+        {\n+            agent_.accumulateChainBreakingReadExceptionAndThrow(new DisconnectException(agent_,\n+                    new ClientMessageId(SQLState.PROPERTY_INVALID_VALUE),\n+                    Attribute.DBNAME_ATTR,databaseName_));\n+        }\n     }\n \n     // preferably without password in the method signature."
            },
            {
                "sha": "29dc6ce87fc943bc8702c1b798a865584fd41564",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java",
                "status": "modified",
                "additions": 3,
                "deletions": 10,
                "changes": 13,
                "blob_url": "https://github.com/apache/derby/blob/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java",
                "raw_url": "https://github.com/apache/derby/raw/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java?ref=f9f83296a76f890dae83e69b35bce6852a0ef2f5",
                "patch": "@@ -103,6 +103,7 @@ private static Test baseSuite(String postfix) {\n         suite.addTest(new DataSourceTest(\"testBadConnectionAttributeSyntax\"));\n         suite.addTest(new DataSourceTest(\"testDescriptionProperty\"));\n         suite.addTest(new DataSourceTest(\"testAllDataSources\"));\n+        suite.addTest(new DataSourceTest(\"testJira95ds\"));\n         return suite;\n     }\n \n@@ -130,8 +131,6 @@ private static Test getClientSuite() {\n     private static Test getEmbeddedSuite(String postfix) {\n         TestSuite suite = new TestSuite(\"Embedded\" + postfix);\n         suite.addTest(new DataSourceTest(\"testDSRequestAuthentication\"));\n-        // when DERBY-2498 gets fixed, move this one to baseSuite\n-        suite.addTest(new DataSourceTest(\"testJira95ds\"));\n         return suite;\n     }\n     \n@@ -231,15 +230,9 @@ public void testJira95ds() throws SQLException {\n             ds.getConnection();\n             fail (\"expected an SQLException!\");\n         } catch (SQLException sqle) {\n-            // DERBY-2498: with client, getting a NullPointerException.\n-            // Note also: the NPE does not occur with XADataSource - see\n-            // testJira95xads().\n-            if (usingEmbedded())\n-                assertSQLState(\"XCY00\", sqle);\n+            assertSQLState(\"XCY00\", sqle);\n         } catch (Exception e) {\n-            // DERBY-2498, when fixed, remove 'if'\n-            if (usingEmbedded())\n-                fail (\"unexpected exception: \" + e.toString());\n+            fail (\"unexpected exception: \" + e.toString());\n         }\n     } \n "
            },
            {
                "sha": "adf6f11ae1e96857f133967994ab2554c1c07b94",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "status": "modified",
                "additions": 3,
                "deletions": 8,
                "changes": 11,
                "blob_url": "https://github.com/apache/derby/blob/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "raw_url": "https://github.com/apache/derby/raw/f9f83296a76f890dae83e69b35bce6852a0ef2f5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java?ref=f9f83296a76f890dae83e69b35bce6852a0ef2f5",
                "patch": "@@ -134,6 +134,7 @@ private static Test baseSuite(String postfix) {\n         TestSuite suite = new TestSuite(\"ClientAndEmbedded\" + postfix);\n         suite.addTest(new J2EEDataSourceTest(\"testGlobalLocalInterleaf\"));\n         suite.addTest(new J2EEDataSourceTest(\"testSetIsolationWithStatement\"));\n+        suite.addTest(new J2EEDataSourceTest(\"testJira95pds\"));\n         suite.addTest(new J2EEDataSourceTest(\"testJira95xads\"));\n         suite.addTest(new J2EEDataSourceTest(\"testBadConnectionAttributeSyntax\"));\n         suite.addTest(new J2EEDataSourceTest(\"testCloseActiveConnection_DS\"));\n@@ -183,8 +184,6 @@ private static Test getClientSuite() {\n     private static Test getEmbeddedSuite(String postfix) {\n         TestSuite suite = new TestSuite(\"Embedded\" + postfix);\n         suite.addTest(new J2EEDataSourceTest(\"testDSRequestAuthentication\"));\n-        // when DERBY-2498 gets fixed, move this one to baseSuite\n-        suite.addTest(new J2EEDataSourceTest(\"testJira95pds\"));\n         // Following cannot run with client because of DERBY-2533; it hangs\n         // when fixed, this can be moved to baseSuite.\n         suite.addTest(new J2EEDataSourceTest(\"testReuseAcrossGlobalLocal\"));\n@@ -2203,13 +2202,9 @@ public void testJira95pds() throws Exception {\n             pds.getPooledConnection();\n             fail (\"expected an SQLException!\");\n         } catch (SQLException sqle) {\n-            // DERBY-2498 - when fixed, remove if\n-            if (usingEmbedded())\n-                assertSQLState(\"XCY00\", sqle);\n+            assertSQLState(\"XCY00\", sqle);\n         } catch (Exception e) {\n-            // DERBY-2498 - when fixed, remove if\n-            if (usingEmbedded())\n-                throw e;\n+            throw e;\n         }\n     }\n     "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/7775fc76794422e94dbbb18dfb45ee1049260181",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/c283bcdc89766e8b7399394e009e5e2867873624",
        "message": "DERBY-3352: truncateTable crashed, Caused by: java.lang.NullPointerException\nPatch files: derby-3352.diff, test.diff (contributed by Knut Anders Hatlen)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@642996 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_19",
        "file": [
            {
                "sha": "447fe9a019e3758e47c8f682063d5c1f0c6e5a10",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/7775fc76794422e94dbbb18dfb45ee1049260181/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java",
                "raw_url": "https://github.com/apache/derby/raw/7775fc76794422e94dbbb18dfb45ee1049260181/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java?ref=7775fc76794422e94dbbb18dfb45ee1049260181",
                "patch": "@@ -1494,6 +1494,7 @@ private void truncateTable(Activation activation)\n \t\t{\n \t\t\tindexRows = new ExecIndexRow[numIndexes];\n \t\t\tordering  = new ColumnOrdering[numIndexes][];\n+\t\t\tcollation = new int[numIndexes][];\n \n \t\t\tfor (int index = 0; index < numIndexes; index++)\n \t\t\t{"
            },
            {
                "sha": "4c7e005eef09eb2cd329a4e05a2bb0b00acc93b9",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java",
                "status": "added",
                "additions": 72,
                "deletions": 0,
                "changes": 72,
                "blob_url": "https://github.com/apache/derby/blob/7775fc76794422e94dbbb18dfb45ee1049260181/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java",
                "raw_url": "https://github.com/apache/derby/raw/7775fc76794422e94dbbb18dfb45ee1049260181/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java?ref=7775fc76794422e94dbbb18dfb45ee1049260181",
                "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Class org.apache.derbyTesting.functionTests.tests.lang.TruncateTableTest\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.derbyTesting.functionTests.tests.lang;\n+\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import junit.framework.Test;\n+import org.apache.derby.iapi.services.sanity.SanityManager;\n+import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n+import org.apache.derbyTesting.junit.TestConfiguration;\n+\n+/**\n+ * Tests for TRUNCATE TABLE. Currently, Derby only supports TRUNCATE TABLE in\n+ * debug builds.\n+ */\n+public class TruncateTableTest extends BaseJDBCTestCase {\n+\n+    public TruncateTableTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        if (!SanityManager.DEBUG) {\n+            // Since Derby doesn't support TRUNCATE TABLE in non-debug builds,\n+            // only test that a \"not implemented\" exception is thrown.\n+            return new TruncateTableTest(\"unsupportedInInsaneBuilds\");\n+        }\n+        return TestConfiguration.defaultSuite(TruncateTableTest.class);\n+    }\n+\n+    /**\n+     * Test that a \"not implemented\" exception is thrown if TRUNCATE TABLE\n+     * is used in insane builds.\n+     */\n+    public void unsupportedInInsaneBuilds() throws SQLException {\n+        assertFalse(\"Not to be tested in sane builds\", SanityManager.DEBUG);\n+        assertStatementError(\"0A000\", createStatement(),\n+                             \"truncate table table_that_does_not_exist\");\n+    }\n+\n+    /**\n+     * Test that TRUNCATE TABLE works when there is an index on one of the\n+     * columns. (This code would throw a {@code NullPointerException} before\n+     * DERBY-3352 was fixed).\n+     */\n+    public void testTruncateWithIndex() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"create table t_with_index (x varchar(128) unique, y int)\");\n+        s.execute(\"insert into t_with_index values ('one', 1), ('two', 2)\");\n+        s.execute(\"truncate table t_with_index\");\n+        assertTableRowCount(\"T_WITH_INDEX\", 0);\n+    }\n+}"
            },
            {
                "sha": "5ca7561e422450fd71fc823e2275425069167dae",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/7775fc76794422e94dbbb18dfb45ee1049260181/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "raw_url": "https://github.com/apache/derby/raw/7775fc76794422e94dbbb18dfb45ee1049260181/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java?ref=7775fc76794422e94dbbb18dfb45ee1049260181",
                "patch": "@@ -77,6 +77,7 @@ public static Test suite() {\n         suite.addTest(StreamsTest.suite());\n         suite.addTest(TimeHandlingTest.suite());\n         suite.addTest(TriggerTest.suite());\n+        suite.addTest(TruncateTableTest.suite());\n         suite.addTest(VTITest.suite());\n         suite.addTest(SysDiagVTIMappingTest.suite());\n         suite.addTest(UpdatableResultSetTest.suite());"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/b69d62b9f95036cd39207c9b5297563ab81b28a8",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/db8dae7dbf09741622ed1040336ab91dd730aed9",
        "message": "DERBY-3424 Change getSystemModule() to return null if the monitor is not booted, rather than a NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@632398 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_20",
        "file": [
            {
                "sha": "6e5fb98361a2d92e7f4f47c51122c8e327fa71c3",
                "filename": "java/engine/org/apache/derby/iapi/services/monitor/Monitor.java",
                "status": "modified",
                "additions": 11,
                "deletions": 3,
                "changes": 14,
                "blob_url": "https://github.com/apache/derby/blob/b69d62b9f95036cd39207c9b5297563ab81b28a8/java/engine/org/apache/derby/iapi/services/monitor/Monitor.java",
                "raw_url": "https://github.com/apache/derby/raw/b69d62b9f95036cd39207c9b5297563ab81b28a8/java/engine/org/apache/derby/iapi/services/monitor/Monitor.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/services/monitor/Monitor.java?ref=b69d62b9f95036cd39207c9b5297563ab81b28a8",
                "patch": "@@ -387,9 +387,17 @@ public static Object findSystemModule(String factoryInterface) throws StandardEx\n \t\treturn module;\n \t}\n \n-\tpublic static Object getSystemModule(String factoryInterface)\n-\t{\n-\t\tObject module = getMonitor().findModule((Object) null,\n+    /**\n+     * Return a system module. If it cannot be found or the monitor is\n+     * not running then null is returned.\n+     */\n+    public static Object getSystemModule(String factoryInterface)\n+    {\n+        ModuleFactory monitor = getMonitor();\n+        if (monitor == null)\n+            return null;\n+        \n+\t\tObject module = monitor.findModule((Object) null,\n \t\t\t\t\t\t\t\t\t  factoryInterface, (String) null);\n \t\treturn module;\n \t}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/7106c74ec208cf43f1416166ff04bd8d5b870730",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/63e9d7484ab23f0e46c7921729a7128119640ac8",
        "message": "DERBY-2142 NullPointerException while using XAConnection/PooledConnection in a heavily contended multithreaded scenario\n\nUpdate code comments.\n \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@616575 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_21",
        "file": [
            {
                "sha": "64bcda61d618fe0aca8b2d6ffdedffc7f46b6f79",
                "filename": "java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java",
                "status": "modified",
                "additions": 11,
                "deletions": 2,
                "changes": 13,
                "blob_url": "https://github.com/apache/derby/blob/7106c74ec208cf43f1416166ff04bd8d5b870730/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java",
                "raw_url": "https://github.com/apache/derby/raw/7106c74ec208cf43f1416166ff04bd8d5b870730/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java?ref=7106c74ec208cf43f1416166ff04bd8d5b870730",
                "patch": "@@ -417,12 +417,21 @@ public void checkCommit() throws SQLException {\n \t\tClose called on BrokeredConnection. If this call\n \t\treturns true then getRealConnection().close() will be called.\n \t\t\n-\t\tNotify listners that connection is closed.\n+\t\n+\tNotify listners that connection is closed.\n \t\tDon't close the underlying real connection as\n \t\tit is pooled.\n \t*/\n \tpublic synchronized boolean closingConnection() throws SQLException {\t    \n-\t\t//DERBY-2142 - Null out the connection handle BEFORE notifying listeners.\n+\t\t//DERBY-2142-Null out the connection handle BEFORE notifying listeners.\n+\t\t//At time of the callback the PooledConnection must be \n+\t\t//disassociated from its previous logical connection.\n+\t\t//If not there is a risk that the Pooled\n+\t\t//Connection could be returned to the pool, ready for pickup by a \n+\t\t//new thread. This new thread then might obtain a java.sql.Connection \n+\t\t//whose reference might get assigned to the currentConnectionHandle \n+\t\t//field, meanwhile the previous thread completes the close making \n+\t\t//the newly assigned currentConnectionHandle null, resulting in an NPE.\n \t\tcurrentConnectionHandle = null;\n \t\t// tell my listeners I am closed \n \t\tif (eventListener != null && eventListener.size() > 0)"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/90daaabd50c47495285e31ef2a4e0a26895fc651",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/0ea0f3d839ac2838ab42648058699d66836024b1",
        "message": "DERBY-3215 Potential NullPointerException in CachedPage class\n\nPatch DERBY-3215b; code cleanup follow-up, no semantic change.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@597123 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_22",
        "file": [
            {
                "sha": "7af038564b5c1748bffa691b81b199b89532f37f",
                "filename": "java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java",
                "status": "modified",
                "additions": 54,
                "deletions": 61,
                "changes": 115,
                "blob_url": "https://github.com/apache/derby/blob/90daaabd50c47495285e31ef2a4e0a26895fc651/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java",
                "raw_url": "https://github.com/apache/derby/raw/90daaabd50c47495285e31ef2a4e0a26895fc651/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java?ref=90daaabd50c47495285e31ef2a4e0a26895fc651",
                "patch": "@@ -23,22 +23,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n import org.apache.derby.iapi.reference.SQLState;\n \n-import org.apache.derby.impl.store.raw.data.BasePage;\n-\n import org.apache.derby.iapi.store.raw.log.LogInstant;\n-import org.apache.derby.iapi.store.raw.ContainerHandle;\n import org.apache.derby.iapi.store.raw.PageKey;\n \n import org.apache.derby.iapi.services.cache.Cacheable;\n import org.apache.derby.iapi.services.cache.CacheManager;\n-import org.apache.derby.iapi.services.context.ContextService;\n \n import org.apache.derby.iapi.services.monitor.Monitor;\n \n import org.apache.derby.iapi.services.sanity.SanityManager;\n \n import org.apache.derby.iapi.services.io.FormatIdUtil;\n-import org.apache.derby.iapi.services.io.StoredFormatIds;\n \n import org.apache.derby.iapi.error.StandardException;\n import org.apache.derby.iapi.error.ExceptionSeverity;\n@@ -768,72 +763,70 @@ private void writePage(\n \t\tFileContainer myContainer = \n             (FileContainer) containerCache.find(identity.getContainerId());\n \n-\t\tif (myContainer != null) \n-        {\n-\t\t\ttry \n-            {\n-\t\t\t\tmyContainer.writePage(\n-                    identity.getPageNumber(), pageData, syncMe);\n+\t\tif (myContainer == null)\n+\t\t{\n+\t\t\tStandardException nested =\n+\t\t\t\tStandardException.newException(\n+\t\t\t\t\tSQLState.DATA_CONTAINER_VANISHED,\n+\t\t\t\t\tidentity.getContainerId());\n+\t\t\tthrow dataFactory.markCorrupt(\n+\t\t\t\tStandardException.newException(\n+\t\t\t\t\tSQLState.FILE_WRITE_PAGE_EXCEPTION, nested,\n+\t\t\t\t\tidentity));\n+\t\t}\n+\n+\t\ttry\n+\t\t{\n+\t\t\tmyContainer.writePage(\n+\t\t\t\tidentity.getPageNumber(), pageData, syncMe);\n+\n+\t\t\t//\n+\t\t\t// Do some in memory unlogged bookkeeping tasks while we have\n+\t\t\t// the container.\n+\t\t\t//\n+\n+\t\t\tif (!isOverflowPage() && isDirty())\n+\t\t\t{\n+\n+\t\t\t\t// let the container knows whether this page is a not\n+\t\t\t\t// filled, non-overflow page\n+\t\t\t\tmyContainer.trackUnfilledPage(\n+\t\t\t\t\tidentity.getPageNumber(), unfilled());\n \n+\t\t\t\t// if this is not an overflow page, see if the page's row\n+\t\t\t\t// count has changed since it come into the cache.\n \t\t\t\t//\n-\t\t\t\t// Do some in memory unlogged bookkeeping tasks while we have\n-\t\t\t\t// the container. \n+\t\t\t\t// if the page is not invalid, row count is 0.\tOtherwise,\n+\t\t\t\t// count non-deleted records on page.\n \t\t\t\t//\n+\t\t\t\t// Cannot call nonDeletedRecordCount because the page is\n+\t\t\t\t// unlatched now even though nobody is changing it\n+\t\t\t\tint currentRowCount = internalNonDeletedRecordCount();\n \n-\t\t\t\tif (!isOverflowPage() && isDirty())\n+\t\t\t\tif (currentRowCount != initialRowCount)\n \t\t\t\t{\n+\t\t\t\t\tmyContainer.updateEstimatedRowCount(\n+\t\t\t\t\t\tcurrentRowCount - initialRowCount);\n \n-\t\t\t\t\t// let the container knows whether this page is a not \n-                    // filled, non-overflow page\n-\t\t\t\t\tmyContainer.trackUnfilledPage(\n-                        identity.getPageNumber(), unfilled());\n-\n-\t\t\t\t\t// if this is not an overflow page, see if the page's row\n-\t\t\t\t\t// count has changed since it come into the cache.\n-\t\t\t\t\t//\n-\t\t\t\t\t// if the page is not invalid, row count is 0.  Otherwise,\n-\t\t\t\t\t// count non-deleted records on page.\n-\t\t\t\t\t//\n-\t\t\t\t\t// Cannot call nonDeletedRecordCount because the page is\n-\t\t\t\t\t// unlatched now even though nobody is changing it\n-\t\t\t\t\tint currentRowCount = internalNonDeletedRecordCount();\n-\n-\t\t\t\t\tif (currentRowCount != initialRowCount)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tmyContainer.updateEstimatedRowCount(\n-                            currentRowCount - initialRowCount);\n-\n-\t\t\t\t\t\tsetContainerRowCount(\n-                            myContainer.getEstimatedRowCount(0));\n+\t\t\t\t\tsetContainerRowCount(\n+\t\t\t\t\t\tmyContainer.getEstimatedRowCount(0));\n \n-\t\t\t\t\t\tinitialRowCount = currentRowCount;\n-\t\t\t\t\t}\n+\t\t\t\t\tinitialRowCount = currentRowCount;\n \t\t\t\t}\n-\n-\t\t\t} \n-            catch (IOException ioe) \n-            {\n-\t\t\t\t// page cannot be written\n-\t\t\t\tthrow StandardException.newException(\n-                    SQLState.FILE_WRITE_PAGE_EXCEPTION, \n-                    ioe, identity);\n \t\t\t}\n-\t\t\tfinally\n-\t\t\t{\n-\t\t\t\tcontainerCache.release(myContainer);\n-\t\t\t\tmyContainer = null;\n-\t\t\t}\n-\t\t} \n-\t\telse\n+\n+\t\t}\n+\t\tcatch (IOException ioe)\n \t\t{\n-\t\t\tStandardException nested = \n-                StandardException.newException(\n-                    SQLState.DATA_CONTAINER_VANISHED, \n-                    identity.getContainerId());\n-\t\t\tthrow dataFactory.markCorrupt(\n-                StandardException.newException(\n-                    SQLState.FILE_WRITE_PAGE_EXCEPTION, nested, \n-                    identity));\n+\t\t\t// page cannot be written\n+\t\t\tthrow StandardException.newException(\n+\t\t\t\tSQLState.FILE_WRITE_PAGE_EXCEPTION,\n+\t\t\t\tioe, identity);\n+\t\t}\n+\t\tfinally\n+\t\t{\n+\t\t\tcontainerCache.release(myContainer);\n+\t\t\tmyContainer = null;\n \t\t}\n \n \t\tsynchronized (this) "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/7dca0be5ec5feda2c61c0a814da83a649e973c55",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/cf530d5cf77383c6f181cfe0611b0acbd065b86c",
        "message": "DERBY-2733: prevent ij with J2ME from encountering a NullPointerException.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@547069 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_23",
        "file": [
            {
                "sha": "465db10f7c3d87f222907e3aaf934f5f1025c8b3",
                "filename": "java/tools/org/apache/derby/impl/tools/ij/util.java",
                "status": "modified",
                "additions": 5,
                "deletions": 0,
                "changes": 5,
                "blob_url": "https://github.com/apache/derby/blob/7dca0be5ec5feda2c61c0a814da83a649e973c55/java/tools/org/apache/derby/impl/tools/ij/util.java",
                "raw_url": "https://github.com/apache/derby/raw/7dca0be5ec5feda2c61c0a814da83a649e973c55/java/tools/org/apache/derby/impl/tools/ij/util.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/tools/org/apache/derby/impl/tools/ij/util.java?ref=7dca0be5ec5feda2c61c0a814da83a649e973c55",
                "patch": "@@ -511,6 +511,11 @@ static public Connection startJBMS(String defaultDriver, String defaultURL,\n \t    if (dsName == null)\n \t    \treturn null;\n \t    \n+\t    // if we have no URL at this point, we should not attempt to get a\n+\t    // connection. Just start ij without connection. \n+\t    if (databaseURL == null && defaultURL == null)\n+\t    \treturn null;\n+        \n \t    //First connection - pass firstTime=true, dbName=null. For database name, \n \t    //value in ij.dataSource.databaseName will be used. \n \t    con = getDataSourceConnection(dsName,user,password,null,true);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/5eee0018151ab7865c76e38d7ef2aca719adcf88",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/e9575468e5e0831cc387c33fa669a5117abaaba1",
        "message": "DERBY-2141 (partial) BlobClob4BlobTest.testPositionBlob() fails with NullPointerException\n\nPreserve original stack trace for exceptions in JDBC 4.0 driver.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@501392 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_24",
        "file": [
            {
                "sha": "9bee31321a20748e52aa86eabc3aad092981a057",
                "filename": "java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java",
                "status": "modified",
                "additions": 15,
                "deletions": 1,
                "changes": 16,
                "blob_url": "https://github.com/apache/derby/blob/5eee0018151ab7865c76e38d7ef2aca719adcf88/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java",
                "raw_url": "https://github.com/apache/derby/raw/5eee0018151ab7865c76e38d7ef2aca719adcf88/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java?ref=5eee0018151ab7865c76e38d7ef2aca719adcf88",
                "patch": "@@ -131,7 +131,21 @@ public\tSQLException\tgetArgumentFerry(SQLException se)\n \tprivate\tSQLException\twrapArgsForTransportAcrossDRDA\n \t( String message, String messageId, SQLException next, int severity, Throwable t, Object[] args )\n \t{\n-\t\treturn super.getSQLException( message, messageId, next, severity, t, args );\n+        // Generate an EmbedSQLException\n+        SQLException e =\n+            super.getSQLException(message, messageId, next, severity, t, args);\n+\n+        // We want to preserve the stack trace of the original\n+        // exception. EmbedSQLException overrides printStackTrace() to achieve\n+        // this, but that won't help us when the EmbedSQLException is not the\n+        // first exception in the chain. Ideally, we would use initCause(), but\n+        // a comment in EmbedSQLException indicates that the cause of the\n+        // exception is not supposed to be serialized.\n+        if (t != null) {\n+            e.setStackTrace(t.getStackTrace());\n+        }\n+\n+        return e;\n \t}\n \t\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/6f2391f7d543d642dc522ccdd356af43d3711637",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/e77851a9462bd67c42c921f2eb1da02f4fd75768",
        "message": "DERBY-939: NullPointerException at ResultSet.close() time for simple \nquery using UNION and INTERSECT.  Contributed by Yip Ng.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@427899 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_25",
        "file": [
            {
                "sha": "eedd7b644aba29b4db70f5fcf72bd854d81fd3e4",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/RealResultSetStatisticsFactory.java",
                "status": "modified",
                "additions": 26,
                "deletions": 1,
                "changes": 27,
                "blob_url": "https://github.com/apache/derby/blob/6f2391f7d543d642dc522ccdd356af43d3711637/java/engine/org/apache/derby/impl/sql/execute/RealResultSetStatisticsFactory.java",
                "raw_url": "https://github.com/apache/derby/raw/6f2391f7d543d642dc522ccdd356af43d3711637/java/engine/org/apache/derby/impl/sql/execute/RealResultSetStatisticsFactory.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/RealResultSetStatisticsFactory.java?ref=6f2391f7d543d642dc522ccdd356af43d3711637",
                "patch": "@@ -62,6 +62,7 @@\n import org.apache.derby.impl.sql.execute.RowResultSet;\n import org.apache.derby.impl.sql.execute.ScalarAggregateResultSet;\n import org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet;\n+import org.apache.derby.impl.sql.execute.SetOpResultSet;\n import org.apache.derby.impl.sql.execute.SortResultSet;\n import org.apache.derby.impl.sql.execute.TableScanResultSet;\n import org.apache.derby.impl.sql.execute.UnionResultSet;\n@@ -96,6 +97,7 @@\n import org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics;\n import org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics;\n import org.apache.derby.impl.sql.execute.rts.RealScrollInsensitiveResultSetStatistics;\n+import org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics;\n import org.apache.derby.impl.sql.execute.rts.RealSortStatistics;\n import org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics;\n import org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics;\n@@ -816,9 +818,32 @@ else if (rs instanceof RowResultSet)\n \t\t\t\t\t\t\t\t\t\t\trrs.optimizerEstimatedRowCount,\n \t\t\t\t\t\t\t\t\t\t\trrs.optimizerEstimatedCost);\n \t\t}\n+\t\telse if (rs instanceof SetOpResultSet)\n+\t\t{\n+\t\t\tSetOpResultSet srs = (SetOpResultSet) rs;\n+\n+\t\t\treturn new RealSetOpResultSetStatistics(\n+\t\t\t\t\t\t\t\t\t\t\tsrs.getOpType(),\n+\t\t\t\t\t\t\t\t\t\t\tsrs.numOpens,\n+\t\t\t\t\t\t\t\t\t\t\tsrs.rowsSeen,\n+\t\t\t\t\t\t\t\t\t\t\tsrs.rowsFiltered,\n+\t\t\t\t\t\t\t\t\t\t\tsrs.constructorTime,\n+\t\t\t\t\t\t\t\t\t\t\tsrs.openTime,\n+\t\t\t\t\t\t\t\t\t\t\tsrs.nextTime,\n+\t\t\t\t\t\t\t\t\t\t\tsrs.closeTime,\n+\t\t\t\t\t\t\t\t\t\t\tsrs.getResultSetNumber(),\n+\t\t\t\t\t\t\t\t\t\t\tsrs.getRowsSeenLeft(),\n+\t\t\t\t\t\t\t\t\t\t\tsrs.getRowsSeenRight(),\n+\t\t\t\t\t\t\t\t\t\t\tsrs.getRowsReturned(),\n+\t\t\t\t\t\t\t\t\t\t\tsrs.optimizerEstimatedRowCount,\n+\t\t\t\t\t\t\t\t\t\t\tsrs.optimizerEstimatedCost,\n+\t\t\t\t\t\t\t\t\t\t\tgetResultSetStatistics(srs.getLeftSourceInput()),\n+\t\t\t\t\t\t\t\t\t\t\tgetResultSetStatistics(srs.getRightSourceInput())\n+\t\t\t\t\t\t\t\t\t\t\t);\n+\t\t}\n \t\telse if (rs instanceof UnionResultSet)\n \t\t{\n-\t\t\tUnionResultSet urs = (UnionResultSet) rs;\n+\t\t\tUnionResultSet urs = (UnionResultSet)rs;\n \n \t\t\treturn new RealUnionResultSetStatistics(\n \t\t\t\t\t\t\t\t\t\t\turs.numOpens,"
            },
            {
                "sha": "003df3f717b6628039fee3369868fa9e9262042a",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java",
                "status": "modified",
                "additions": 122,
                "deletions": 11,
                "changes": 133,
                "blob_url": "https://github.com/apache/derby/blob/6f2391f7d543d642dc522ccdd356af43d3711637/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/6f2391f7d543d642dc522ccdd356af43d3711637/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java?ref=6f2391f7d543d642dc522ccdd356af43d3711637",
                "patch": "@@ -2,7 +2,7 @@\n \n    Derby - Class org.apache.derby.impl.sql.execute.SetOpResultSet\n \n-   Copyright 2004 The Apache Software Foundation or its licensors, as applicable.\n+   Copyright 2004, 2006 The Apache Software Foundation or its licensors, as applicable.\n \n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n@@ -64,6 +64,11 @@\n     private final int[] intermediateOrderByColumns;\n     private final int[] intermediateOrderByDirection;\n \n+    /* Run time statistics variables */\n+    private int rowsSeenLeft;\n+    private int rowsSeenRight;\n+    private int rowsReturned;\n+\n     SetOpResultSet( NoPutResultSet leftSource,\n                     NoPutResultSet rightSource,\n                     Activation activation, \n@@ -99,12 +104,17 @@ public void\topenCore() throws StandardException\n \t{\n \t\tbeginTime = getCurrentTimeMillis();\n \t\tif (SanityManager.DEBUG)\n-\t    \tSanityManager.ASSERT( ! isOpen, \"SetOpProjectRestrictResultSet already open\");\n+\t    \tSanityManager.ASSERT( ! isOpen, \"SetOpResultSet already open\");\n \n         isOpen = true;\n         leftSource.openCore();\n         rightSource.openCore();\n         rightInputRow = rightSource.getNextRowCore();\n+        if (rightInputRow != null)\n+        {\n+            rowsSeenRight++;\n+        }\n+\n \t\tnumOpens++;\n \n \t\topenTime += getElapsedMillis(beginTime);\n@@ -121,6 +131,8 @@ public ExecRow\tgetNextRowCore() throws StandardException\n         {\n             while( (leftInputRow = leftSource.getNextRowCore()) != null)\n             {\n+                rowsSeenLeft++;\n+\n                 DataValueDescriptor[] leftColumns = leftInputRow.getRowArray();\n                 if( !all)\n                 {\n@@ -130,9 +142,15 @@ public ExecRow\tgetNextRowCore() throws StandardException\n                 }\n                 int compare = 0;\n                 // Advance the right until there are no more right rows or leftRow <= rightRow\n-                while( rightInputRow != null && (compare = compare( leftColumns, rightInputRow.getRowArray())) > 0)\n+                while ( rightInputRow != null && (compare = compare(leftColumns, rightInputRow.getRowArray())) > 0)\n+                {\n                     rightInputRow = rightSource.getNextRowCore();\n-                \n+                    if (rightInputRow != null)\n+                    {\n+                        rowsSeenRight++;\n+                    }\n+                }\n+\n                 if( rightInputRow == null || compare < 0)\n                 {\n                     // The left row is not in the right source.\n@@ -145,10 +163,17 @@ public ExecRow\tgetNextRowCore() throws StandardException\n                     // The left and right rows are the same\n                     if( SanityManager.DEBUG)\n                         SanityManager.ASSERT( rightInputRow != null && compare == 0,\n-                                              \"Insert/Except execution has gotten confused.\");\n-                    if( all)\n+                                              \"Intersect/Except execution has gotten confused.\");\n+                    if ( all)\n+                    {\n                         // Just advance the right input by one row.\n                         rightInputRow = rightSource.getNextRowCore();\n+                        if (rightInputRow != null)\n+                        {\n+                            rowsSeenRight++;\n+                        }\n+                    }\n+\n                     // If !all then we will skip past duplicates on the left at the top of this loop,\n                     // which will then force us to skip past any right duplicates.\n                     if( opType == IntersectOrExceptNode.INTERSECT_OP)\n@@ -160,17 +185,26 @@ public ExecRow\tgetNextRowCore() throws StandardException\n             }\n         }\n         currentRow = leftInputRow;\n-        setCurrentRow( currentRow);\n+        setCurrentRow( currentRow );\n+\n+        if (currentRow != null) {\n+           rowsReturned++;\n+        }\n+\n         nextTime += getElapsedMillis(beginTime);\n         return currentRow;\n     } // end of getNextRowCore\n \n     private void advanceRightPastDuplicates( DataValueDescriptor[] leftColumns)\n         throws StandardException\n     {\n-        while((rightInputRow = rightSource.getNextRowCore()) != null\n-              && compare( leftColumns, rightInputRow.getRowArray()) == 0)\n-            ;\n+        while ((rightInputRow = rightSource.getNextRowCore()) != null)\n+        {\n+            rowsSeenRight++;\n+\n+            if (compare(leftColumns, rightInputRow.getRowArray()) == 0) \n+                continue;\n+        }\n     } // end of advanceRightPastDuplicates\n         \n     private int compare( DataValueDescriptor[] leftCols, DataValueDescriptor[] rightCols)\n@@ -237,7 +271,7 @@ public void\tclose() throws StandardException\n         }\n \t\telse\n \t\t\tif (SanityManager.DEBUG)\n-\t\t\t\tSanityManager.DEBUG(\"CloseRepeatInfo\",\"Close of UnionResultSet repeated\");\n+\t\t\t\tSanityManager.DEBUG(\"CloseRepeatInfo\",\"Close of SetOpResultSet repeated\");\n \n \t\tcloseTime += getElapsedMillis(beginTime);\n \t} // end of close\n@@ -284,4 +318,81 @@ public RowLocation getRowLocation() throws StandardException\n         // left side, the right side, or null?\n         return ((CursorResultSet)leftSource).getRowLocation();\n     }\n+\n+    /**\n+     * Return the set operation of this <code>SetOpResultSet</code>\n+     *\n+     * @return the set operation of this ResultSet, the value is either \n+     *         <code>IntersectOrExceptNode.INTERSECT_OP</code> for \n+     *         Intersect operation or <code>IntersectOrExceptNode.EXCEPT_OP\n+     *         </code> for Except operation\n+     *         \n+     * @see    org.apache.derby.impl.sql.compile.IntersectOrExceptNode\n+     */\n+    public int getOpType()\n+    {\n+        return opType;\n+    }\n+\n+    /**\n+     * Return the result set number\n+     *\n+     * @return the result set number\n+     */\n+    public int getResultSetNumber()\n+    {\n+        return resultSetNumber;\n+    }\n+\n+    /**\n+     * Return the left source input of this <code>SetOpResultSet</code>\n+     *\n+     * @return the left source input of this <code>SetOpResultSet</code>\n+     * @see org.apache.derby.iapi.sql.execute.NoPutResultSet\n+     */\n+    public NoPutResultSet getLeftSourceInput()\n+    {\n+        return leftSource;\n+    }\n+\n+    /**\n+     * Return the right source input of this <code>SetOpResultSet</code>\n+     *\n+     * @return the right source input of this <code>SetOpResultSet</code>\n+     * @see org.apache.derby.iapi.sql.execute.NoPutResultSet\n+     */\n+    public NoPutResultSet getRightSourceInput()\n+    {\n+        return rightSource;\n+    }\n+\n+    /**\n+     * Return the number of rows seen on the left source input\n+     *\n+     * @return the number of rows seen on the left source input\n+     */\n+    public int getRowsSeenLeft()\n+    {\n+        return rowsSeenLeft;\n+    }\n+\n+    /**\n+     * Return the number of rows seen on the right source input\n+     *\n+     * @return the number of rows seen on the right source input\n+     */\n+    public int getRowsSeenRight()\n+    {\n+        return rowsSeenRight;\n+    }\n+\n+    /**\n+     * Return the number of rows returned from the result set\n+     *\n+     * @return the number of rows returned from the result set\n+     */\n+    public int getRowsReturned()\n+    {\n+        return rowsReturned;\n+    }\n }"
            },
            {
                "sha": "7369e26fd02285ca2f6c95717934dd865b2efc9f",
                "filename": "java/engine/org/apache/derby/loc/messages_en.properties",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/6f2391f7d543d642dc522ccdd356af43d3711637/java/engine/org/apache/derby/loc/messages_en.properties",
                "raw_url": "https://github.com/apache/derby/raw/6f2391f7d543d642dc522ccdd356af43d3711637/java/engine/org/apache/derby/loc/messages_en.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/loc/messages_en.properties?ref=6f2391f7d543d642dc522ccdd356af43d3711637",
                "patch": "@@ -973,7 +973,11 @@ XSDG8.D=Unable to copy directory ''{0}'' to ''{1}'' during restore. Please make\n 43Y55.U=End Referential Action On Dependent Table Number\n 43Y56.U=User supplied optimizer overrides on {0} are {1}\n 43Y57.U=User supplied optimizer overrides for join are {0}\n-\n+43Y58.U=Intersect ResultSet\n+43Y59.U=Intersect\n+43Y60.U=Except ResultSet\n+43Y61.U=Except\n+\t\n 54004=SELECT statement has too many items in GROUP BY, ORDER BY or select list.\n 54008=The CREATE INDEX statement specifies too many columns (16 is the maximum).\n 54023=The limit for the number of parameters for a procedure has been exceeded. Limit is {0} and number of parameters for procedure {1} are {2}."
            },
            {
                "sha": "62cd366a6691b6beeddf344bd84faed719f58fce",
                "filename": "java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/6f2391f7d543d642dc522ccdd356af43d3711637/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "raw_url": "https://github.com/apache/derby/raw/6f2391f7d543d642dc522ccdd356af43d3711637/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/shared/org/apache/derby/shared/common/reference/SQLState.java?ref=6f2391f7d543d642dc522ccdd356af43d3711637",
                "patch": "@@ -1153,7 +1153,11 @@ The message identifier (ie. the value that matches a field in this class)\n \tString RTS_BEGIN_DEPENDENT_NUMBER\t\t\t\t\t\t\t\t   = \"43Y54.U\";\t\n \tString RTS_END_DEPENDENT_NUMBER\t\t\t\t\t\t\t\t\t   = \"43Y55.U\";\t\n \tString RTS_USER_SUPPLIED_OPTIMIZER_OVERRIDES_FOR_TABLE\t\t\t   = \"43Y56.U\";\t\n-\tString RTS_USER_SUPPLIED_OPTIMIZER_OVERRIDES_FOR_JOIN\t\t\t   = \"43Y57.U\";\t\n+\tString RTS_USER_SUPPLIED_OPTIMIZER_OVERRIDES_FOR_JOIN\t\t\t   = \"43Y57.U\";\n+\tString RTS_INTERSECT_RS                                            = \"43Y58.U\";\n+\tString RTS_INTERSECT                                               = \"43Y59.U\";\n+\tString RTS_EXCEPT_RS                                               = \"43Y60.U\";\n+\tString RTS_EXCEPT                                                  = \"43Y61.U\";\n \n \t// org.apache.derby.catalog.types\n \tString TI_SQL_TYPE_NAME\t\t\t= \"44X00.U\";"
            },
            {
                "sha": "f14eca99faae2e9b6afa04e5d50cf262bac55cac",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/6f2391f7d543d642dc522ccdd356af43d3711637/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java",
                "raw_url": "https://github.com/apache/derby/raw/6f2391f7d543d642dc522ccdd356af43d3711637/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java?ref=6f2391f7d543d642dc522ccdd356af43d3711637",
                "patch": "@@ -39,7 +39,8 @@\n \n public class Sed\n {\n-\tprivate\tstatic\tfinal\tString\tSQL_EXCEPTION_FILTERED_SUBSTITUTION = \"SQL Exception:\";\n+\tprivate\tstatic\tfinal\tString\tSQL_EXCEPTION_FILTERED_SUBSTITUTION = \n+        \"java.sql.SQLException:\";\n \n     public Sed()\n     {"
            },
            {
                "sha": "8ba04913bfcc94b31d4ae729f6b62ae27f4180f2",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/suites/derbylang.runall",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/6f2391f7d543d642dc522ccdd356af43d3711637/java/testing/org/apache/derbyTesting/functionTests/suites/derbylang.runall",
                "raw_url": "https://github.com/apache/derby/raw/6f2391f7d543d642dc522ccdd356af43d3711637/java/testing/org/apache/derbyTesting/functionTests/suites/derbylang.runall",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/suites/derbylang.runall?ref=6f2391f7d543d642dc522ccdd356af43d3711637",
                "patch": "@@ -117,6 +117,7 @@ lang/reopenScan.sql\n lang/repeat.java\n lang/schemas.sql\n lang/select.sql\n+lang/setOpPlan.sql\n lang/simpleThreadWrapper.java\n lang/specjPlans.sql\n lang/SpillHash.java"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/1c31b3a13123938cc060c4b9e440127253a90163",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/5d18b03d2564d69acd0949001cc25b0199f3d99d",
        "message": "DERBY-1296 Setting property derby.system.bootAll causes NullPointerException in BaseMonitor.bootProviderServices. Fix and test contributed by Fernanda Pizzorno\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@425388 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_26",
        "file": [
            {
                "sha": "8421f972de3ef5a1b504e6a8676ad97d2ce9b7dd",
                "filename": "java/engine/org/apache/derby/impl/io/DirStorageFactory4.java",
                "status": "modified",
                "additions": 7,
                "deletions": 2,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/1c31b3a13123938cc060c4b9e440127253a90163/java/engine/org/apache/derby/impl/io/DirStorageFactory4.java",
                "raw_url": "https://github.com/apache/derby/raw/1c31b3a13123938cc060c4b9e440127253a90163/java/engine/org/apache/derby/impl/io/DirStorageFactory4.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/io/DirStorageFactory4.java?ref=1c31b3a13123938cc060c4b9e440127253a90163",
                "patch": "@@ -52,9 +52,14 @@ public DirStorageFactory4()\n      */\n     StorageFile newPersistentFile( String path)\n     {\n+        String dir = dataDirectory;\n+        if (canonicalName != null && path != null && home != null && \n+                !path.startsWith(home)) {\n+            dir = canonicalName;\n+        }\n         if( path == null)\n-            return new DirFile4( dataDirectory, rwsOK);\n-        return new DirFile4(dataDirectory, path, rwsOK);\n+            return new DirFile4(dir, rwsOK);\n+        return new DirFile4(dir, path, rwsOK);\n     }\n \n     /**"
            },
            {
                "sha": "c13722858e0a056f226c33d319b6fcbd56fafb81",
                "filename": "java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/1c31b3a13123938cc060c4b9e440127253a90163/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java",
                "raw_url": "https://github.com/apache/derby/raw/1c31b3a13123938cc060c4b9e440127253a90163/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java?ref=1c31b3a13123938cc060c4b9e440127253a90163",
                "patch": "@@ -1436,8 +1436,8 @@ are active and calls bootPersistentServices(PersistentService)\n \t\tto boot all the services that that provider knows about.\n \t*/\n \tprotected void bootPersistentServices() {\n-\t\tfor (Enumeration e = new ProviderEnumeration( applicationProperties); ; ) {\n-\n+\t\tEnumeration e = new ProviderEnumeration( applicationProperties);\n+\t\twhile (e.hasMoreElements()) {\n \t\t\tPersistentService provider = (PersistentService) e.nextElement();\n \t\t\tbootProviderServices(provider);\n \t\t}"
            },
            {
                "sha": "ce1dc6dadcc87ec7a2a166d469eebcd0827dfa7f",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java",
                "raw_url": "https://github.com/apache/derby/raw/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java?ref=1c31b3a13123938cc060c4b9e440127253a90163",
                "patch": "@@ -164,6 +164,7 @@ public static void main(String[] args) throws Exception {\n \n         //Filter to suppress absould paths in error message for roll forward recovery tests \n         searchStrings.addElement(\"Directory.*.wombat.already.exists\");\n+        searchStrings.addElement(\"Directory.*.extinout/crwombatlog/log.*.exists\");\n \n         // Filter for \"DB2ConnectionCorrelator\" text that can be printed as\n         // part of some JCC error messages.\n@@ -233,6 +234,7 @@ public static void main(String[] args) throws Exception {\n             subStrings.addElement(\"-----\"); \n         }\n         subStrings.addElement(\"Directory DBLOCATION/wombat already exists\");\n+        subStrings.addElement(\"Directory 'extinout<sp>crwombatlog<sp>log' exists\");\n         // ignore the 'DB2ConnectionCorrelator' thing altogether.\n         subStrings.addElement(\"\");\n \t\t// Filter for SAX exception name diffs between jvms."
            },
            {
                "sha": "0d430a8aef598db472753d02fe69d990614d56b6",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/suites/storemore.runall",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/suites/storemore.runall",
                "raw_url": "https://github.com/apache/derby/raw/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/suites/storemore.runall",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/suites/storemore.runall?ref=1c31b3a13123938cc060c4b9e440127253a90163",
                "patch": "@@ -35,3 +35,4 @@ store/OnlineBackupTest3.java\n store/onlineBackupTest4.sql\n store/BackupPathTests.java\n store/LogDeviceTest.java\n+store/BootAllTest.junit"
            },
            {
                "sha": "9e7c5c25ec80ef335100c33d58659e35bfb9ad8c",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/BootAllTest.java",
                "status": "added",
                "additions": 144,
                "deletions": 0,
                "changes": 144,
                "blob_url": "https://github.com/apache/derby/blob/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootAllTest.java",
                "raw_url": "https://github.com/apache/derby/raw/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootAllTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootAllTest.java?ref=1c31b3a13123938cc060c4b9e440127253a90163",
                "patch": "@@ -0,0 +1,144 @@\n+/*\n+\n+   Derby - Class org.apache.derbyTesting.functionTests.tests.store.BootAllTest\n+\n+   Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+ */\n+\n+package org.apache.derbyTesting.functionTests.tests.store;\n+\n+import org.apache.derbyTesting.functionTests.util.BaseTestCase;\n+import org.apache.derbyTesting.functionTests.util.TestUtil;\n+\n+import junit.framework.*;\n+import java.sql.*;\n+import java.util.Properties;\n+import java.util.Arrays;\n+\n+/**\n+ * Tests for the system property \"derby.system.bootAll\"\n+ *\n+ * DERBY-1296 - Setting property derby.system.bootAll causes an Exception\n+ * \n+ */\n+public class BootAllTest  extends BaseTestCase {\n+\n+    /** JDBC Connection */\n+    private Connection con;\n+    private Driver driver;\n+    private String databases[] = new String[] {\"wombat1\", \"wombat2\", \"wombat3\"};\n+    \n+    final static String DATABASE_SHUT_DOWN = \"08006\";\n+    final static String ALL_DATABASES_SHUT_DOWN = \"XJ015\";\n+\n+    /**\n+     * Creates a new instance of BootAllTest\n+     */\n+    public BootAllTest(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Create the databases\n+     */\n+    public void setUp() throws Exception {\n+        for (int i = 0; i < databases.length; i++) {\n+            con = CONFIG.getConnection(databases[i]);\n+            con.close();\n+            try {\n+                con = CONFIG.\n+                        getConnection(databases[i] + \";shutdown=true\");\n+            } catch (SQLException se) {\n+                assertEquals(\"Expected exception on setUp \" + se.getSQLState(), \n+                        DATABASE_SHUT_DOWN, se.getSQLState());\n+            }\n+        }\n+        String url = CONFIG.getJDBCUrl(\"\");\n+        driver = DriverManager.getDriver(url);\n+        DriverManager.deregisterDriver(driver);\n+        try {\n+            driver.connect(url + \";shutdown=true\", null);\n+        } catch (SQLException se) {\n+            assertEquals(\"Expected exception on tearDown \" + se.getSQLState(), \n+                    ALL_DATABASES_SHUT_DOWN, se.getSQLState());\n+        }\n+        System.runFinalization();\n+        System.gc();\n+    }\n+\n+    /**\n+     * Shutdown all databases\n+     */\n+    public void tearDown() throws Exception {\n+        String driverName = CONFIG.getJDBCClient().getJDBCDriverName();\n+        Class.forName(driverName);\n+        println(\"Teardown of: \" + getName());\n+        try {\n+            con = CONFIG.\n+                    getConnection(\";shutdown=true\");\n+        } catch (SQLException se) {\n+            assertEquals(\"Expected exception on tearDown \" + se.getSQLState(), \n+                    ALL_DATABASES_SHUT_DOWN, se.getSQLState());\n+        }\n+    }\n+\n+    /**\n+     * DERBY-1296 - Setting property derby.system.bootAll causes an Exception\n+     *\n+     * Check that setting the system property \"derby.system.bootAll\" will not \n+     * cause an exception when used in combination with the system property\n+     * \"derby.system.home\".\n+     *\n+     * The property \"derby.system.home\" is set by default for all tests and does\n+     * not need to be explicitly set in this test.\n+     */\n+    public void testSettingBootAllPropertyWithHomePropertySet() \n+            throws Exception \n+    {\n+        String returnedDatabases[] = null;\n+\n+        setSystemProperty(\"derby.system.bootAll\", \"true\");\n+\n+        String driverName = CONFIG.getJDBCClient().getJDBCDriverName();\n+        String url = CONFIG.getJDBCUrl(\"\");\n+\n+        Class.forName(driverName).newInstance();\n+        DriverManager.registerDriver(driver);\n+\n+        Driver driver = DriverManager.getDriver(url);\n+\n+        DriverPropertyInfo[] attributes = driver.getPropertyInfo(url, null);\n+        for (int i = 0; i < attributes.length; i++) {\n+            if (attributes[i].name.equalsIgnoreCase(\"databaseName\")) {\n+                returnedDatabases = attributes[i].choices;\n+            }\n+        }\n+\n+        Arrays.sort(returnedDatabases);\n+\n+        assertEquals(\"The number of databases should be\", \n+                databases.length, \n+                returnedDatabases.length);\n+\n+        for (int i = 0; i < databases.length; i++) {\n+            assertEquals(\"Database names should be\", \n+                    databases[i], \n+                    returnedDatabases[i]);\n+        }\n+\n+    }\n+    \n+}"
            },
            {
                "sha": "9383a710ccdc6b98fddad1d1a8e3997f41526341",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/build.xml",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/tests/store/build.xml",
                "raw_url": "https://github.com/apache/derby/raw/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/tests/store/build.xml",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/build.xml?ref=1c31b3a13123938cc060c4b9e440127253a90163",
                "patch": "@@ -65,6 +65,7 @@\n       <classpath>\n         <!--pathelement location=\"${oro}\"/-->\n         <pathelement path=\"${compile.classpath}\"/>\n+        <pathelement path=\"${junit}\"/>\n       </classpath>\n       <include name=\"${this.dir}/*.java\"/>\n       <exclude name=\"${this.dir}/bootLock.java\"/>"
            },
            {
                "sha": "247fe514c966c26cbb3e1a9b3f2848d2aa099fcb",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java",
                "status": "modified",
                "additions": 42,
                "deletions": 7,
                "changes": 49,
                "blob_url": "https://github.com/apache/derby/blob/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java",
                "raw_url": "https://github.com/apache/derby/raw/1c31b3a13123938cc060c4b9e440127253a90163/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java?ref=1c31b3a13123938cc060c4b9e440127253a90163",
                "patch": "@@ -127,7 +127,7 @@ public Object run() {\n      */\n     private String createJDBCUrlWithDatabaseName(String name) {\n         if (jdbcClient == JDBCClient.EMBEDDED) {\n-            return jdbcClient.getUrlBase() + dbName;\n+            return jdbcClient.getUrlBase() + name;\n         } else {\n             return jdbcClient.getUrlBase() + hostName + \":\" + port + \"/\" + name;\n         }\n@@ -216,23 +216,40 @@ public int getPort() {\n      */\n     public Connection getDefaultConnection()\n         throws SQLException {\n+        return getConnection(getDatabaseName());\n+    }\n+    \n+    /**\n+     * Get connection to a database.\n+     * If the database does not exist, it will be created.\n+     * A default username and password will be used for the connection.\n+     *\n+     * @param databaseName database to connect to\n+     *\n+     * @return connection to default database.\n+     */\n+    public Connection getConnection (String databaseName) throws SQLException {\n         Connection con = null;\n         JDBCClient client =getJDBCClient();\n         if (HAVE_DRIVER) {            \n             loadJDBCDriver(client.getJDBCDriverName());\n             if (!isSingleLegXA()) {\n                 con = DriverManager.getConnection(\n-                        getJDBCUrl() + \";create=true\",\n+                        getJDBCUrl(databaseName) + \";create=true\",\n                         getUserName(),\n                         getUserPassword());\n             }\n             else {\n-                con = TestDataSourceFactory.getXADataSource().getXAConnection (getUserName(),\n-                            getUserPassword()).getConnection();                \n+                Properties attrs = \n+                        getDataSourcePropertiesForDatabase(databaseName);\n+                con = TestDataSourceFactory.getXADataSource(attrs).\n+                        getXAConnection (getUserName(), \n+                        getUserPassword()).getConnection();\n             }\n         } else {\n             //Use DataSource for JSR169\n-            con = TestDataSourceFactory.getDataSource().getConnection();\n+            Properties attrs = getDataSourcePropertiesForDatabase(databaseName);\n+            con = TestDataSourceFactory.getDataSource(attrs).getConnection();\n         }\n         return con;\n     }\n@@ -390,16 +407,34 @@ public boolean isSingleLegXA () {\n      * connect to the default database\n      */\n     public static Properties getDefaultDataSourceProperties() {\n+        return getDataSourcePropertiesForDatabase(\n+                DERBY_TEST_CONFIG.getDatabaseName());\n+    }\n+    \n+    /**\n+     * Generate properties which can be set on a\n+     * <code>DataSource</code> in order to connect to a given\n+     * database.\n+     *\n+     * @param databaseName database to connect to\n+     *\n+     * @return a <code>Properties</code> object containing server\n+     * name, port number, database name and other attributes needed to\n+     * connect to the database\n+     */\n+    public static Properties getDataSourcePropertiesForDatabase\n+            (String databaseName) \n+    {\n         Properties attrs = new Properties();\n         if (!(DERBY_TEST_CONFIG.getJDBCClient() == JDBCClient.EMBEDDED)) {\n             attrs.setProperty(\"serverName\", DERBY_TEST_CONFIG.getHostName());\n             attrs.setProperty(\"portNumber\", Integer.toString(DERBY_TEST_CONFIG.getPort()));\n         }\n-        attrs.setProperty(\"databaseName\", DERBY_TEST_CONFIG.getDatabaseName());\n+        attrs.setProperty(\"databaseName\", databaseName);\n         attrs.setProperty(\"connectionAttributes\", \"create=true\");\n         return attrs;\n     }\n-    \n+\n     /**\n      * Load the specified JDBC driver\n      *"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/cbd7b1573c0b88c2ae053c0561a01daca8b337c1",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/93e65c716601ea4cf1dd616c0c697724b0f1065c",
        "message": "DERBY-1174 NullPointerException in network server with LDAP authentication\nSubmitted by Anders Morken\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@395525 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_27",
        "file": [
            {
                "sha": "218ce9b2c79e25ea4b6202da9329b0c616a79bfa",
                "filename": "java/engine/org/apache/derby/impl/jdbc/authentication/JNDIAuthenticationSchemeBase.java",
                "status": "modified",
                "additions": 9,
                "deletions": 6,
                "changes": 15,
                "blob_url": "https://github.com/apache/derby/blob/cbd7b1573c0b88c2ae053c0561a01daca8b337c1/java/engine/org/apache/derby/impl/jdbc/authentication/JNDIAuthenticationSchemeBase.java",
                "raw_url": "https://github.com/apache/derby/raw/cbd7b1573c0b88c2ae053c0561a01daca8b337c1/java/engine/org/apache/derby/impl/jdbc/authentication/JNDIAuthenticationSchemeBase.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/jdbc/authentication/JNDIAuthenticationSchemeBase.java?ref=cbd7b1573c0b88c2ae053c0561a01daca8b337c1",
                "patch": "@@ -97,16 +97,19 @@ private void setInitDirContextEnv(Properties dbProps) {\n \n \t\t//\n \t\t// We retrieve JNDI properties set at the database level\t\n-\t\t// if any.\n+\t\t// if any. If dbProps == null, there are obviously no database\n+\t\t// properties to retrieve.\n \t\t//\n \t\tinitDirContextEnv = new Properties();\n+                \n+\t\tif(dbProps != null) {\n+\t\t\tfor (Enumeration keys = dbProps.propertyNames(); keys.hasMoreElements(); ) {\n \n-\t\tfor (Enumeration keys = dbProps.propertyNames(); keys.hasMoreElements(); ) {\n+\t\t\t\tString key = (String) keys.nextElement();\n \n-\t\t\tString key = (String) keys.nextElement();\n-\n-\t\t\tif (key.startsWith(\"java.naming.\")) {\n-\t\t\t\tinitDirContextEnv.put(key, dbProps.getProperty(key));\n+\t\t\t\tif (key.startsWith(\"java.naming.\")) {\n+\t\t\t\t\tinitDirContextEnv.put(key, dbProps.getProperty(key));\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/b2bb8cddf43743787d78bb7844d99625ad645c05",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/81ff69245caa6b8ca644cd9628d7008b7d10ca00",
        "message": " DERBY-1177 updateObject with null as argument causes network driver to fail with NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@392236 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_28",
        "file": [
            {
                "sha": "8defde90d51a21fdf256c39285a955d7b833b45b",
                "filename": "java/client/org/apache/derby/client/am/CrossConverters.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/client/org/apache/derby/client/am/CrossConverters.java",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/client/org/apache/derby/client/am/CrossConverters.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/CrossConverters.java?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "patch": "@@ -807,7 +807,9 @@ final Object setObject(int targetType, java.sql.Clob source) throws SqlException\n     // The Java compiler uses static binding, so we can't rely on the strongly\n     // typed setObject() methods above for each of the Java Object instance types.\n     final Object setObject(int targetType, Object source) throws SqlException {\n-        if (source instanceof Boolean) {\n+        if (source == null) {\n+            return null;\n+        } else if (source instanceof Boolean) {\n             return setObject(targetType, ((Boolean) source).booleanValue());\n         } else if (source instanceof Integer) {\n             return setObject(targetType, ((Integer) source).intValue());"
            },
            {
                "sha": "75a182aef9d92369d44e931a63d15ec7b39db643",
                "filename": "java/client/org/apache/derby/client/am/ResultSet.java",
                "status": "modified",
                "additions": 0,
                "deletions": 1,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/client/org/apache/derby/client/am/ResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/client/org/apache/derby/client/am/ResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/ResultSet.java?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "patch": "@@ -1413,7 +1413,6 @@ private boolean wasNonNullSensitiveUpdate(int column) {\n     // indicates column has been updated, then column is updated to null.\n     private boolean wasNullSensitiveUpdate(int column) {\n         return\n-                resultSetType_ == java.sql.ResultSet.TYPE_SCROLL_SENSITIVE &&\n                 updatedColumns_ != null &&\n                 updatedColumns_[column - 1] == null &&\n                 columnUpdated_[column - 1];"
            },
            {
                "sha": "3378a948041b1c05b1bb85697040bf07e19be70a",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/updatableResultSet.out",
                "status": "modified",
                "additions": 0,
                "deletions": 34,
                "changes": 34,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/updatableResultSet.out",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/updatableResultSet.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/updatableResultSet.out?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "patch": "@@ -2226,9 +2226,7 @@ Next datatype to test is SMALLINT\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is INTEGER\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2273,9 +2271,7 @@ Next datatype to test is INTEGER\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is BIGINT\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2320,9 +2316,7 @@ Next datatype to test is BIGINT\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DECIMAL(10,5)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2367,9 +2361,7 @@ Next datatype to test is DECIMAL(10,5)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is REAL\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2412,9 +2404,7 @@ Next datatype to test is REAL\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DOUBLE\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2457,9 +2447,7 @@ Next datatype to test is DOUBLE\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CHAR(60)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2494,9 +2482,7 @@ Next datatype to test is CHAR(60)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is VARCHAR(60)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2531,9 +2517,7 @@ Next datatype to test is VARCHAR(60)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is LONG VARCHAR\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2568,9 +2552,7 @@ Next datatype to test is LONG VARCHAR\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CHAR(2) FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BINARY'.\n@@ -2627,9 +2609,7 @@ Next datatype to test is CHAR(2) FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is VARCHAR(2) FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'VARBINARY'.\n@@ -2686,9 +2666,7 @@ Next datatype to test is VARCHAR(2) FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'VARBINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is LONG VARCHAR FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'LONGVARBINARY'.\n@@ -2743,9 +2721,7 @@ Next datatype to test is LONG VARCHAR FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'LONGVARBINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CLOB(1k)\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CLOB'.\n@@ -2800,9 +2776,7 @@ Next datatype to test is CLOB(1k)\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CLOB'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DATE\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'DATE'.\n@@ -2857,9 +2831,7 @@ Next datatype to test is DATE\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'DATE'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is TIME\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIME'.\n@@ -2914,9 +2886,7 @@ Next datatype to test is TIME\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIME'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is TIMESTAMP\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIMESTAMP'.\n@@ -2971,9 +2941,7 @@ Next datatype to test is TIMESTAMP\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIMESTAMP'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is BLOB(1k)\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BLOB'.\n@@ -3028,9 +2996,7 @@ Next datatype to test is BLOB(1k)\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BLOB'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Positive Test23 - Test cancelRowUpdates after updateXXX methods on all the supported sql datatypes\n   updateShort and then cancelRowUpdates\n   updateInt and then cancelRowUpdates"
            },
            {
                "sha": "0ec4ecc45a81aa24d182f269aca9726e853d109a",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk16/updatableResultSet.out",
                "status": "modified",
                "additions": 0,
                "deletions": 34,
                "changes": 34,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk16/updatableResultSet.out",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk16/updatableResultSet.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk16/updatableResultSet.out?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "patch": "@@ -2226,9 +2226,7 @@ Next datatype to test is SMALLINT\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is INTEGER\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2273,9 +2271,7 @@ Next datatype to test is INTEGER\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is BIGINT\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2320,9 +2316,7 @@ Next datatype to test is BIGINT\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DECIMAL(10,5)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2367,9 +2361,7 @@ Next datatype to test is DECIMAL(10,5)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is REAL\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2412,9 +2404,7 @@ Next datatype to test is REAL\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DOUBLE\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2457,9 +2447,7 @@ Next datatype to test is DOUBLE\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CHAR(60)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2494,9 +2482,7 @@ Next datatype to test is CHAR(60)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is VARCHAR(60)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2531,9 +2517,7 @@ Next datatype to test is VARCHAR(60)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is LONG VARCHAR\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2568,9 +2552,7 @@ Next datatype to test is LONG VARCHAR\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CHAR(2) FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BINARY'.\n@@ -2627,9 +2609,7 @@ Next datatype to test is CHAR(2) FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is VARCHAR(2) FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'VARBINARY'.\n@@ -2686,9 +2666,7 @@ Next datatype to test is VARCHAR(2) FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'VARBINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is LONG VARCHAR FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'LONGVARBINARY'.\n@@ -2743,9 +2721,7 @@ Next datatype to test is LONG VARCHAR FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'LONGVARBINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CLOB(1k)\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CLOB'.\n@@ -2800,9 +2776,7 @@ Next datatype to test is CLOB(1k)\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CLOB'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DATE\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'DATE'.\n@@ -2857,9 +2831,7 @@ Next datatype to test is DATE\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'DATE'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is TIME\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIME'.\n@@ -2914,9 +2886,7 @@ Next datatype to test is TIME\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIME'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is TIMESTAMP\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIMESTAMP'.\n@@ -2971,9 +2941,7 @@ Next datatype to test is TIMESTAMP\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIMESTAMP'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is BLOB(1k)\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BLOB'.\n@@ -3028,9 +2996,7 @@ Next datatype to test is BLOB(1k)\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BLOB'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Positive Test23 - Test cancelRowUpdates after updateXXX methods on all the supported sql datatypes\n   updateShort and then cancelRowUpdates\n   updateInt and then cancelRowUpdates"
            },
            {
                "sha": "d5aa86137e80d82c4e4f0f3754e8753dae056cb5",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/updatableResultSet.out",
                "status": "modified",
                "additions": 0,
                "deletions": 34,
                "changes": 34,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/updatableResultSet.out",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/updatableResultSet.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/updatableResultSet.out?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "patch": "@@ -2074,9 +2074,7 @@ Next datatype to test is SMALLINT\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is INTEGER\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2113,9 +2111,7 @@ Next datatype to test is INTEGER\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is BIGINT\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2152,9 +2148,7 @@ Next datatype to test is BIGINT\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DECIMAL(10,5)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2191,9 +2185,7 @@ Next datatype to test is DECIMAL(10,5)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is REAL\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2228,9 +2220,7 @@ Next datatype to test is REAL\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DOUBLE\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2265,9 +2255,7 @@ Next datatype to test is DOUBLE\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CHAR(60)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2296,9 +2284,7 @@ Next datatype to test is CHAR(60)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is VARCHAR(60)\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2327,9 +2313,7 @@ Next datatype to test is VARCHAR(60)\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is LONG VARCHAR\n   updateObject with column position & Short object as parameters\n   updateObject with column name & Short object as parameters\n@@ -2358,9 +2342,7 @@ Next datatype to test is LONG VARCHAR\n   updateObject with column position & Boolean object as parameters\n   updateObject with column name & Boolean object as parameters\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CHAR(2) FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BINARY'.\n@@ -2409,9 +2391,7 @@ Next datatype to test is CHAR(2) FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is VARCHAR(2) FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'VARBINARY'.\n@@ -2460,9 +2440,7 @@ Next datatype to test is VARCHAR(2) FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'VARBINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is LONG VARCHAR FOR BIT DATA\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'LONGVARBINARY'.\n@@ -2511,9 +2489,7 @@ Next datatype to test is LONG VARCHAR FOR BIT DATA\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'LONGVARBINARY'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is CLOB(1k)\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CLOB'.\n@@ -2562,9 +2538,7 @@ Next datatype to test is CLOB(1k)\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CLOB'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is DATE\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'DATE'.\n@@ -2611,9 +2585,7 @@ Next datatype to test is DATE\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'DATE'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is TIME\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIME'.\n@@ -2660,9 +2632,7 @@ Next datatype to test is TIME\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIME'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is TIMESTAMP\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIMESTAMP'.\n@@ -2709,9 +2679,7 @@ Next datatype to test is TIMESTAMP\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIMESTAMP'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Next datatype to test is BLOB(1k)\n   updateObject with column position & Short object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BLOB'.\n@@ -2760,9 +2728,7 @@ Next datatype to test is BLOB(1k)\n   updateObject with column name & Boolean object as parameters\n     Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BLOB'.\n   updateObject with column position & null as parameters\n-   Got expected exception:null\n   updateObject with column name & null as parameters\n-   Got expected exception:null\n Positive Test23 - Test cancelRowUpdates after updateXXX methods on all the supported sql datatypes\n   updateShort and then cancelRowUpdates\n   updateInt and then cancelRowUpdates"
            },
            {
                "sha": "5e43a64f0cef180edc7a2d51577569b06c16293e",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/suites/DerbyNet.exclude",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/suites/DerbyNet.exclude",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/suites/DerbyNet.exclude",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/suites/DerbyNet.exclude?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "patch": "@@ -35,10 +35,10 @@ jdbcapi/savepointJdbc30_XA.java\n # excluding jdbcapi/derbyStress.java - jcc runs out of memory with this test\n jdbcapi/derbyStress.java\n largedata/LobLimits.java\n-# These next four fail with an error saying that a null username is not \n-# supported. When fixing the username issue, they will fail since the\n+# These next five tests fail since the\n # db2 driver produces statements which Derby cannot compile in \n # ResultSet.updateRow()\n+jdbcapi/UpdateXXXTest.junit\n jdbcapi/SURQueryMixTest.junit\n jdbcapi/SURTest.junit\n jdbcapi/ConcurrencyTest.junit"
            },
            {
                "sha": "bfbe9738f7bd40aef5c03ec786effe72ca98f14a",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/suites/jdbcapi.runall",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/suites/jdbcapi.runall",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/suites/jdbcapi.runall",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/suites/jdbcapi.runall?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "patch": "@@ -21,5 +21,6 @@ jdbcapi/prepStmtNull.java\n jdbcapi/testRelative.java\n jdbcapi/rsgetXXXcolumnNames.java\n jdbcapi/Stream.java\n+jdbcapi/UpdateXXXTest.junit\n jdbcapi/SURQueryMixTest.junit\n jdbcapi/SURTest.junit"
            },
            {
                "sha": "79e33934a2cd8f9d5973c12e41d65adc4df98dd8",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdateXXXTest.java",
                "status": "added",
                "additions": 347,
                "deletions": 0,
                "changes": 347,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdateXXXTest.java",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdateXXXTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/UpdateXXXTest.java?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "patch": "@@ -0,0 +1,347 @@\n+/*\n+ *\n+ * Derby - Class UpdateXXXTest\n+ *\n+ * Copyright 2006 The Apache Software Foundation or its\n+ * licensors, as applicable.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\")\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied. See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ */\n+package org.apache.derbyTesting.functionTests.tests.jdbcapi;\n+\n+import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.PreparedStatement;\n+import java.sql.Statement;\n+import java.sql.Connection;\n+\n+import java.math.BigDecimal;\n+\n+\n+/**\n+ * Tests updateXXX() methods on updatable resultsets.\n+ * This is done by creating a table which has n columns with\n+ * different SQL types. Then there is one testcase for each\n+ * updateXXX method, which calls updateXXX on all columns.\n+ */\n+final public class UpdateXXXTest extends BaseJDBCTestCase\n+{\n+    /**\n+     * Constructor\n+     * @param name name of testcase. Should be the name of test method.\n+     */\n+    public UpdateXXXTest(final String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * The setup creates a Connection to the database, and also\n+     * creates a table with one row. Then it creates an updatable\n+     * ResultSet which is positioned on the row.\n+     * @exception Exception any exception will cause test to fail with error.\n+     */\n+    public void setUp()\n+        throws Exception\n+    {\n+        try {\n+            con = getConnection();\n+            con.setAutoCommit(false);\n+            \n+            Statement stmt = con.createStatement();\n+            String createTableString = \"CREATE TABLE \" + TABLE_NAME + \" (\" +\n+                \"F01 SMALLINT,\" + \n+                \"F02 INTEGER,\" +\n+                \"F03 BIGINT,\" + \n+                \"F04 REAL,\" +\n+                \"F05 FLOAT,\" +\n+                \"F06 DOUBLE,\" +\n+                \"F07 DECIMAL,\" +\n+                \"F08 NUMERIC,\" +\n+                \"F09 CHAR(100),\" +\n+                \"F10 VARCHAR(256) )\";\n+            println(createTableString);\n+            stmt.executeUpdate(createTableString);\n+            PreparedStatement ps = con.prepareStatement\n+                (\"insert into \" + TABLE_NAME + \" values(?,?,?,?,?,?,?,?,?,?)\");\n+            \n+            ps.setShort(1, (short) 1);\n+            ps.setInt(2, 1);\n+            ps.setLong(3, 1L);\n+            ps.setFloat(4, 1.0f);\n+            ps.setDouble(5, 1.0);\n+            ps.setDouble(6, 1.0);\n+            ps.setBigDecimal(7, BigDecimal.valueOf(1L));\n+            ps.setBigDecimal(8, BigDecimal.valueOf(1L));\n+            ps.setString(9, \"1\");\n+            ps.setString(10, \"1\");\n+            ps.executeUpdate();\n+            \n+            rs = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, \n+                                     ResultSet.CONCUR_UPDATABLE).\n+                executeQuery(SELECT_STMT);\n+            rs.next();\n+        } catch (SQLException e) {\n+            con.rollback();\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Teardown test.\n+     * Rollback connection and close it.\n+     * @exception Exceptions causes the test to fail with error\n+     */\n+    public void tearDown() \n+        throws Exception \n+    {\n+        try { \n+            con.rollback();\n+            con.close();\n+        } catch (SQLException e) {\n+            printStackTrace(e);\n+        }      \n+    }\n+        \n+    /**\n+     * Tests calling updateString on all columns of the row.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateString() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateString(i, \"2\");\n+            assertEquals(\"Expected rs.getDouble(\" + i + \n+                         \") to match updated value\", 2, (int) rs.getDouble(i));\n+        }\n+        rs.updateRow();\n+        checkColumnsAreUpdated();\n+        \n+    }\n+\n+    /**\n+     * Tests calling updateInt on all columns of the row.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateInt() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateInt(i, 2);\n+            assertEquals(\"Expected rs.getInt(\" + i + \n+                         \") to match updated value\", 2, rs.getInt(i));\n+        }\n+        rs.updateRow();\n+        checkColumnsAreUpdated();\n+    }\n+\n+    /**\n+     * Tests calling updateLong on all columns of the row.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateLong() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateLong(i, 2L);\n+            assertEquals(\"Expected rs.getLong(\" + i + \n+                         \") to match updated value\", 2L, rs.getLong(i));\n+        }\n+        rs.updateRow();\n+        checkColumnsAreUpdated();\n+    }\n+\n+    /**\n+     * Tests calling updateShort on all columns of the row.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateShort() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateShort(i, (short) 2);\n+            assertEquals(\"Expected rs.getShort(\" + i + \n+                         \") to match updated value\", 2, (int) rs.getShort(i));\n+        }\n+        rs.updateRow();\n+        checkColumnsAreUpdated();\n+    }\n+    \n+    /**\n+     * Tests calling updateFloat on all columns of the row.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateFloat() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateFloat(i, 2.0f);\n+            assertEquals(\"Expected rs.getFloat(\" + i + \n+                         \") to match updated value\", 2, (int) rs.getFloat(i));\n+        }\n+        rs.updateRow();\n+        checkColumnsAreUpdated();\n+    }\n+    \n+    /**\n+     * Tests calling updateDouble on all columns of the row.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateDouble() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateDouble(i, 2.0);\n+            assertEquals(\"Expected rs.getDouble(\" + i + \n+                         \") to match updated value\", 2, (int) rs.getDouble(i));\n+        }\n+        rs.updateRow();\n+        checkColumnsAreUpdated();\n+    }\n+\n+    /**\n+     * Tests calling update on all columns of the row.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateBigDecimal() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateBigDecimal(i, BigDecimal.valueOf(2L));\n+            assertEquals(\"Expected rs.getBigDecimal(\" + i + \n+                         \") to match updated value\", 2, \n+                         rs.getBigDecimal(i).intValue());\n+        }\n+        rs.updateRow();\n+        checkColumnsAreUpdated();\n+    }\n+    \n+    /**\n+     * Tests calling updateObject with a null value on all columns.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateObjectWithNull() \n+        throws SQLException\n+    {\n+        Object value = null;\n+        \n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateObject(i, value);\n+            assertNull(\"Expected rs.getObject(\" + i + \") to be null\", \n+                       rs.getObject(i));\n+            assertTrue(\"Expected rs.wasNull() to return true\",\n+                       rs.wasNull());\n+        }\n+        rs.updateRow();\n+        checkColumnsAreNull();\n+    }\n+\n+    /**\n+     * Tests calling setNull on all columns\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    public void testUpdateNull() \n+        throws SQLException\n+    {\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            rs.updateNull(i);\n+            assertNull(\"Expected rs.getObject(\" + i + \") to be null\", \n+                       rs.getObject(i));\n+            assertTrue(\"Expected rs.wasNull() to return true\",\n+                       rs.wasNull());\n+        }\n+        rs.updateRow();\n+        checkColumnsAreNull();\n+    }\n+\n+    /**\n+     * Checks that the columns in the row are all SQL null.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    private void checkColumnsAreNull() \n+        throws SQLException\n+    {\n+        rs.close();\n+        \n+        rs = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, \n+                                 ResultSet.CONCUR_READ_ONLY).\n+            executeQuery(SELECT_STMT);\n+        \n+        rs.next();\n+        \n+        for (int i = 1; i <= COLUMNS; i++) {\n+            assertNull(\"Expected column \" + i + \" to be null\", \n+                       rs.getObject(i));\n+            assertTrue(\"Expected wasNull() after reading column \" + i +\n+                       \" to be true when data is SQL Null on column\", \n+                       rs.wasNull());\n+        }\n+    }\n+\n+    /**\n+     * Checks that the columns in the row are updated in the database.\n+     * Using a new ResultSet to do this check.\n+     * @exception SQLException database access error. Causes test to \n+     *                         fail with an error.\n+     */\n+    private void checkColumnsAreUpdated() \n+        throws SQLException\n+    {\n+        rs.close();\n+        \n+        rs = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, \n+                                 ResultSet.CONCUR_READ_ONLY).\n+            executeQuery(SELECT_STMT);\n+        \n+        rs.next();\n+        for (int i = 1; i <= COLUMNS; i++) {\n+            int expectedVal = 2;\n+            \n+            // Since rs.getInt(i) on CHAR/VARCHAR columns with value 2.0 gives:\n+            // \"ERROR 22018: Invalid character string format for type int\"\n+            // we use getDouble(i). We cast it to int, because there is not\n+            // assertEquals(..) methods which takes double.\n+            int actualVal = (int) rs.getDouble(i); \n+            assertEquals(\"Unexpected value from rs.getDouble( + \" + i + \")\",\n+                         expectedVal, actualVal);\n+        }\n+    }\n+    \n+    /* Updatable ResultSet */\n+    private ResultSet rs = null;\n+    \n+    /* Connection */\n+    private Connection con = null;\n+    \n+    /* Table name */\n+    private static final String TABLE_NAME = \"MultiTypeTable\";\n+\n+    /* SQL String for the SELECT statement */\n+    private static final  String SELECT_STMT = \n+        \"SELECT * FROM \" + TABLE_NAME;\n+                             \n+    /* Number of columns in table */\n+    private static final int COLUMNS = 10;\n+}"
            },
            {
                "sha": "c18e0ef7337e42777a823dc46b0866c2882d6a83",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java",
                "status": "modified",
                "additions": 1,
                "deletions": 6,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/b2bb8cddf43743787d78bb7844d99625ad645c05/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java?ref=b2bb8cddf43743787d78bb7844d99625ad645c05",
                "patch": "@@ -1956,15 +1956,10 @@ else if (updateXXXName == 11){ //update column with updateBytes methods\n \t\t\t\t\t\t\t\t\trs.updateObject(sqlType, null);\n \t\t\t\t\t\t\t\telse //test by passing column name\n \t\t\t\t\t\t\t\t\trs.updateObject(ColumnNames[sqlType-1], null);\n-\t\t\t\t\t\t\t\t} catch (Throwable e) {\n-\t\t\t\t\t\t\t\tif (TestUtil.isNetFramework()) {\n-\t\t\t\t\t\t\t\t\tSystem.out.println(\"   Got expected exception:\" + e.getMessage());\n-\t\t\t\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t} catch (Throwable e) {\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\tSystem.out.println(\"   Got UNexpected exception:\" + e.getMessage());\n \t\t\t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t} else if (updateXXXName == 20 || updateXXXName == 21) //since Derby does not support Array, Ref datatype, this is a no-op\n \t\t\t\t\t\t\t\t\tcontinue;\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/b7cdec2dfed91195af60e1684a3a37ea73bf853d",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/688ccfab6df4a900d941a273159864cf53f6c72c",
        "message": "DERBY-707 providing RowLocation for deleted+purged row to GenericConglomerateController causes nullpointerexception, submitted by andreas.korneliussen@sun.com\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@345237 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_29",
        "file": [
            {
                "sha": "d6e045c44a7124a68f767aa00eb0d69512789692",
                "filename": "java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java",
                "status": "modified",
                "additions": 12,
                "deletions": 3,
                "changes": 15,
                "blob_url": "https://github.com/apache/derby/blob/b7cdec2dfed91195af60e1684a3a37ea73bf853d/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java",
                "raw_url": "https://github.com/apache/derby/raw/b7cdec2dfed91195af60e1684a3a37ea73bf853d/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java?ref=b7cdec2dfed91195af60e1684a3a37ea73bf853d",
                "patch": "@@ -180,7 +180,10 @@ public boolean delete(RowLocation loc)\n \n         getRowPositionFromRowLocation(loc, pos);\n \n-        open_conglom.latchPage(pos);\n+        if (!open_conglom.latchPage(pos)) \n+        {\n+            return false;\n+        }\n \n         open_conglom.lockPositionForWrite(pos, false /* not an insert */, true);\n \n@@ -362,7 +365,10 @@ public boolean fetch(\n \n         getRowPositionFromRowLocation(loc, pos);\n \n-        open_conglom.latchPage(pos);\n+        if (!open_conglom.latchPage(pos)) \n+        {\n+            return false;\n+        }\n \n         // Do not get U row lock - only get X or S.  There is not good point\n         // currently to convert the U lock to an S lock, we don't know when\n@@ -453,7 +459,10 @@ public boolean replace(\n \n         getRowPositionFromRowLocation(loc, pos);\n \n-        open_conglom.latchPage(pos);\n+        if (!open_conglom.latchPage(pos)) \n+        {\n+            return false;\n+        }\n \n         open_conglom.lockPositionForWrite(pos, false, true);\n "
            },
            {
                "sha": "ce7e81315b3c015deeb2bc4c5dee2a79de5d82b1",
                "filename": "java/testing/org/apache/derbyTesting/unitTests/store/T_AccessFactory.java",
                "status": "modified",
                "additions": 49,
                "deletions": 2,
                "changes": 51,
                "blob_url": "https://github.com/apache/derby/blob/b7cdec2dfed91195af60e1684a3a37ea73bf853d/java/testing/org/apache/derbyTesting/unitTests/store/T_AccessFactory.java",
                "raw_url": "https://github.com/apache/derby/raw/b7cdec2dfed91195af60e1684a3a37ea73bf853d/java/testing/org/apache/derbyTesting/unitTests/store/T_AccessFactory.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/unitTests/store/T_AccessFactory.java?ref=b7cdec2dfed91195af60e1684a3a37ea73bf853d",
                "patch": "@@ -3750,8 +3750,8 @@ protected boolean holdCursor(TransactionController tc)\n     /**\n      * Test critical cases for read uncommitted.\n      * <p>\n-     * test 1 - test heap fetch of row on page which does not exist.  \n-     * test 2 - test heap fetch of row on page where row does not exist.\n+     * test 1 - test heap fetch, delete and replace of row on page which does not exist.  \n+     * test 2 - test heap fetch, delete and replace of row on page where row does not exist.\n      *\n \t * @exception  StandardException  Standard exception policy.\n      **/\n@@ -3848,11 +3848,35 @@ protected boolean readUncommitted(TransactionController tc)\n                 TransactionController.MODE_RECORD,\n                 TransactionController.ISOLATION_READ_UNCOMMITTED);\n \n+        // Test heap fetch of row on page which does not exist.\n         if (cc.fetch(deleted_page_rowloc, big_row.getRowArray(), null))\n         {\n             throw T_Fail.testFailMsg(\n                 \"(readUncommitted) fetch should ret false for reclaimed page.\");\n         }\n+             \n+        // Test heap replace of row on page which does not exist.\n+        FormatableBitSet   update_desc = new FormatableBitSet(1);\n+        if (cc.replace(deleted_page_rowloc, big_row.getRowArray(), update_desc)) \n+        {\n+            throw T_Fail.testFailMsg(\n+                \"(readUncommitted) delete should ret false for reclaimed page.\");\n+        }\n+       \n+        // Test heap fetch (overloaded call) of row on page which does not exist.\n+        if (cc.fetch(deleted_page_rowloc, big_row.getRowArray(), null, true))\n+        {\n+            throw T_Fail.testFailMsg(\n+                \"(readUncommitted) fetch should ret false for reclaimed page.\");\n+        }\n+        \n+        // Test heap delete of row on page which does not exist.\n+        if (cc.delete(deleted_page_rowloc)) \n+        {\n+            throw T_Fail.testFailMsg(\n+                \"(readUncommitted) delete should ret false for reclaimed page.\");\n+        }\n+                \n         cc.close();\n \n         /*\n@@ -3943,11 +3967,34 @@ protected boolean readUncommitted(TransactionController tc)\n         // the following will be attempting to fetch a row which has been\n         // reclaimed by post commit, on an existing page.\n \n+        // test heap fetch of row on page where row does not exist.\n         if (cc.fetch(deleted_row_rowloc, big_row.getRowArray(), null))\n         {\n             throw T_Fail.testFailMsg(\n                 \"(readUncommitted) fetch should ret false for reclaimed row.\");\n         }\n+        \n+        // test heap replace of row on page where row does not exist.\n+        if (cc.replace(deleted_page_rowloc, big_row.getRowArray(), update_desc)) \n+        {\n+            throw T_Fail.testFailMsg(\n+                \"(readUncommitted) delete should ret false for reclaimed page.\");\n+        }\n+\n+        // test heap fetch (overloaded) of row on page where row does not exist.\n+        if (cc.fetch(deleted_page_rowloc, big_row.getRowArray(), null, true))\n+        {\n+            throw T_Fail.testFailMsg(\n+                \"(readUncommitted) fetch should ret false for reclaimed page.\");\n+        }\n+        \n+        // test heap delete of row on page where row does not exist.\n+        if (cc.delete(deleted_page_rowloc)) \n+        {\n+            throw T_Fail.testFailMsg(\n+                \"(readUncommitted) delete should ret false for reclaimed page.\");\n+        }\n+\n         cc.close();\n \n         /*"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/2c1c8c11802e7a097e49c9ae40275b948bea5e6e",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/dd932de74c54b25c9a82e803370c11278c05d7dd",
        "message": "Derby-318: Prevent network server from hitting NullPointerException.\n\nSubmitted by Tomohito Nakayama. (tomonaka@basil.ocn.ne.jp) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/derby/code/trunk@179674 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_30",
        "file": [
            {
                "sha": "c0108292c4f273006e8c7dff7302aa9f64e98ce3",
                "filename": "java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/2c1c8c11802e7a097e49c9ae40275b948bea5e6e/java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java",
                "raw_url": "https://github.com/apache/derby/raw/2c1c8c11802e7a097e49c9ae40275b948bea5e6e/java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java?ref=2c1c8c11802e7a097e49c9ae40275b948bea5e6e",
                "patch": "@@ -87,6 +87,9 @@ public String getDefaultText()\n \n \tpublic String\ttoString()\n \t{\n+\t\tif(isDefaultValueAutoinc()){\n+\t\t\treturn \"GENERATED_BY_DEFAULT\";\n+\t\t}\n \t\treturn defaultText;\n \t}\n "
            },
            {
                "sha": "5e6b329feef4805ef09932e44662d31949c70d81",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/syscat.out",
                "status": "added",
                "additions": 619,
                "deletions": 0,
                "changes": 619,
                "blob_url": "https://github.com/apache/derby/blob/2c1c8c11802e7a097e49c9ae40275b948bea5e6e/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/syscat.out",
                "raw_url": "https://github.com/apache/derby/raw/2c1c8c11802e7a097e49c9ae40275b948bea5e6e/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/syscat.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/syscat.out?ref=2c1c8c11802e7a097e49c9ae40275b948bea5e6e"
            },
            {
                "sha": "5e6b329feef4805ef09932e44662d31949c70d81",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/syscat.out",
                "status": "added",
                "additions": 619,
                "deletions": 0,
                "changes": 619,
                "blob_url": "https://github.com/apache/derby/blob/2c1c8c11802e7a097e49c9ae40275b948bea5e6e/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/syscat.out",
                "raw_url": "https://github.com/apache/derby/raw/2c1c8c11802e7a097e49c9ae40275b948bea5e6e/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/syscat.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/syscat.out?ref=2c1c8c11802e7a097e49c9ae40275b948bea5e6e"
            },
            {
                "sha": "ebc7f0fc90617ea07fc177f0aace723adf7632fc",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/syscat.out",
                "status": "modified",
                "additions": 9,
                "deletions": 0,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/2c1c8c11802e7a097e49c9ae40275b948bea5e6e/java/testing/org/apache/derbyTesting/functionTests/master/syscat.out",
                "raw_url": "https://github.com/apache/derby/raw/2c1c8c11802e7a097e49c9ae40275b948bea5e6e/java/testing/org/apache/derbyTesting/functionTests/master/syscat.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/syscat.out?ref=2c1c8c11802e7a097e49c9ae40275b948bea5e6e",
                "patch": "@@ -586,6 +586,13 @@ from sys.systriggers;\n TRIGGERNAME                                                                                                                     |REFERENCEDCOLU&\n ------------------------------------------------------------------------------------------------------------------------------------------------\n T1                                                                                                                              |NULL           \n+ij> --confirm for DERBY-318\n+create table defaultAutoinc(autoinccol int generated by default as identity);\n+0 rows inserted/updated/deleted\n+ij> select * from SYS.SYSCOLUMNS where COLUMNNAME = 'AUTOINCCOL';\n+REFERENCEID                         |COLUMNNAME                                                                                                                      |COLUMNNUMB&|COLUMNDATATYPE |COLUMNDEFAULT  |COLUMNDEFAULTID                     |AUTOINCREMENTVALUE  |AUTOINCREMENTSTART  |AUTOINCREMENTINC    \n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+xxxxFILTERED-UUIDxxxx|AUTOINCCOL                                                                                                                      |1          |INTEGER NOT NU&|GENERATED_BY_D&|xxxxFILTERED-UUIDxxxx|1                   |1                   |1                   \n ij> -- drop tables\n drop table t;\n 0 rows inserted/updated/deleted\n@@ -603,6 +610,8 @@ ij> drop table unnamed_uniquekey2;\n 0 rows inserted/updated/deleted\n ij> drop table uniquekey3;\n 0 rows inserted/updated/deleted\n+ij> drop table defaultAutoinc;\n+0 rows inserted/updated/deleted\n ij> -- verify the consistency of the indexes on the system catalogs\n select tablename, SYSCS_UTIL.SYSCS_CHECK_TABLE('SYS', tablename)\n from sys.systables where tabletype = 'S' and tablename != 'SYSDUMMY1';"
            },
            {
                "sha": "e2474e4f0280b57c2b0d0af42b5877984591c414",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/suites/derbynetmats.runall",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/2c1c8c11802e7a097e49c9ae40275b948bea5e6e/java/testing/org/apache/derbyTesting/functionTests/suites/derbynetmats.runall",
                "raw_url": "https://github.com/apache/derby/raw/2c1c8c11802e7a097e49c9ae40275b948bea5e6e/java/testing/org/apache/derbyTesting/functionTests/suites/derbynetmats.runall",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/suites/derbynetmats.runall?ref=2c1c8c11802e7a097e49c9ae40275b948bea5e6e",
                "patch": "@@ -36,6 +36,7 @@ lang/simpleScroll.sql\n lang/supersimple.sql\n lang/updatableResultSet.java\n lang/wisconsin.sql\n+lang/syscat.sql\n store/holdCursorExternalSortJDBC30.sql\n store/holdCursorJDBC30.sql\n tools/importExport.java"
            },
            {
                "sha": "45d62e5f500e7de135af07633d0b6c487dafddcb",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/syscat.sql",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/2c1c8c11802e7a097e49c9ae40275b948bea5e6e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/syscat.sql",
                "raw_url": "https://github.com/apache/derby/raw/2c1c8c11802e7a097e49c9ae40275b948bea5e6e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/syscat.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/syscat.sql?ref=2c1c8c11802e7a097e49c9ae40275b948bea5e6e",
                "patch": "@@ -155,6 +155,9 @@ create trigger t1 after update on decimal_tab for each row mode db2sql values 1;\n select triggername, referencedcolumns\n from sys.systriggers;\n \n+--confirm for DERBY-318\n+create table defaultAutoinc(autoinccol int generated by default as identity);\n+select * from SYS.SYSCOLUMNS where COLUMNNAME = 'AUTOINCCOL';\n \n -- drop tables\n drop table t;\n@@ -165,6 +168,7 @@ drop table primkey3;\n drop table uniquekey1;\n drop table unnamed_uniquekey2;\n drop table uniquekey3;\n+drop table defaultAutoinc;\n \n -- verify the consistency of the indexes on the system catalogs\n select tablename, SYSCS_UTIL.SYSCS_CHECK_TABLE('SYS', tablename)"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/66c825f4fe38f135611f32e604c541b6eddce331",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/491b0cb47f48c2ebce30f508895e44b4dcbea9ee",
        "message": "Derby-219: Address NullPointerException when INTERSECT is used in a view or subquerries.\n\nSubmitted by Jack Klabanoff(klebanoff-derby@sbcglobal.net)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/derby/code/trunk@162098 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_31",
        "file": [
            {
                "sha": "36c761864f36d18c70ff144a4e6effe83c14dfaa",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java",
                "status": "modified",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/66c825f4fe38f135611f32e604c541b6eddce331/java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java",
                "raw_url": "https://github.com/apache/derby/raw/66c825f4fe38f135611f32e604c541b6eddce331/java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java?ref=66c825f4fe38f135611f32e604c541b6eddce331",
                "patch": "@@ -224,6 +224,18 @@ public CostEstimate estimateCost( OptimizablePredicateList predList,\n                                       RowOrdering rowOrdering)\r\n                           throws StandardException\r\n     {\r\n+\t\tleftResultSet = optimizeSource(\r\n+\t\t\t\t\t\t\toptimizer,\r\n+\t\t\t\t\t\t\tleftResultSet,\r\n+\t\t\t\t\t\t\t(PredicateList) null,\r\n+\t\t\t\t\t\t\touterCost);\r\n+\r\n+\t\trightResultSet = optimizeSource(\r\n+\t\t\t\t\t\t\toptimizer,\r\n+\t\t\t\t\t\t\trightResultSet,\r\n+\t\t\t\t\t\t\t(PredicateList) null,\r\n+\t\t\t\t\t\t\touterCost);\r\n+\r\n \t\tCostEstimate costEstimate = getCostEstimate(optimizer);\r\n         CostEstimate leftCostEstimate = leftResultSet.getCostEstimate();\r\n         CostEstimate rightCostEstimate = rightResultSet.getCostEstimate();\r"
            },
            {
                "sha": "30d4c91cc9887e8f31c33035b338a5ee668aef52",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/intersect.out",
                "status": "modified",
                "additions": 40,
                "deletions": 0,
                "changes": 40,
                "blob_url": "https://github.com/apache/derby/blob/66c825f4fe38f135611f32e604c541b6eddce331/java/testing/org/apache/derbyTesting/functionTests/master/intersect.out",
                "raw_url": "https://github.com/apache/derby/raw/66c825f4fe38f135611f32e604c541b6eddce331/java/testing/org/apache/derbyTesting/functionTests/master/intersect.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/intersect.out?ref=66c825f4fe38f135611f32e604c541b6eddce331",
                "patch": "@@ -350,4 +350,44 @@ select id,i1,i2 from t1 intersect select id,i1,i2 from t2 order by t1.i1;\n ERROR 42877: A qualified column name 'T1.I1' is not allowed in the ORDER BY clause.\r\n ij> select id,i1,i2 from t1 except select id,i1,i2 from t2 order by t1.i1;\r\n ERROR 42877: A qualified column name 'T1.I1' is not allowed in the ORDER BY clause.\r\n+ij> -- views using intersect and except\r\n+create view view_intr_uniq as select id,i1,i2 from t1 intersect select id,i1,i2 from t2;\r\n+0 rows inserted/updated/deleted\r\n+ij> select * from view_intr_uniq order by 1 DESC,2,3;\r\n+ID         |I1         |I2         \r\n+-----------------------------------\r\n+5          |NULL       |NULL       \r\n+2          |1          |2          \r\n+1          |1          |1          \r\n+ij> create view view_intr_all as select id,i1,i2 from t1 intersect all select id,i1,i2 from t2;\r\n+0 rows inserted/updated/deleted\r\n+ij> select * from  view_intr_all order by 1,2,3;\r\n+ID         |I1         |I2         \r\n+-----------------------------------\r\n+1          |1          |1          \r\n+2          |1          |2          \r\n+5          |NULL       |NULL       \r\n+ij> create view view_ex_uniq as select id,i1,i2 from t1 except select id,i1,i2 from t2;\r\n+0 rows inserted/updated/deleted\r\n+ij> select * from view_ex_uniq order by 1,2,3;\r\n+ID         |I1         |I2         \r\n+-----------------------------------\r\n+3          |1          |3          \r\n+4          |1          |3          \r\n+6          |NULL       |NULL       \r\n+ij> create view view_ex_all as select id,i1,i2 from t1 except all select id,i1,i2 from t2;\r\n+0 rows inserted/updated/deleted\r\n+ij> select * from view_ex_all order by 1 DESC,2,3;\r\n+ID         |I1         |I2         \r\n+-----------------------------------\r\n+6          |NULL       |NULL       \r\n+4          |1          |3          \r\n+3          |1          |3          \r\n+ij> -- intersect joins\r\n+select t1.id,t1.i1,t2.i1 from t1 join t2 on t1.id = t2.id\r\n+intersect select t1.id,t1.i2,t2.i2 from t1 join t2 on t1.id = t2.id;\r\n+ID         |2          |3          \r\n+-----------------------------------\r\n+1          |1          |1          \r\n+5          |NULL       |NULL       \r\n ij> \r"
            },
            {
                "sha": "a76113c0a95deb5707cdaa4de6c112b2386e43ab",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/intersect.sql",
                "status": "modified",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/66c825f4fe38f135611f32e604c541b6eddce331/java/testing/org/apache/derbyTesting/functionTests/tests/lang/intersect.sql",
                "raw_url": "https://github.com/apache/derby/raw/66c825f4fe38f135611f32e604c541b6eddce331/java/testing/org/apache/derbyTesting/functionTests/tests/lang/intersect.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/intersect.sql?ref=66c825f4fe38f135611f32e604c541b6eddce331",
                "patch": "@@ -143,3 +143,20 @@ select ? from t1 except select i1 from t2;\n -- Invalid order by\r\n select id,i1,i2 from t1 intersect select id,i1,i2 from t2 order by t1.i1;\r\n select id,i1,i2 from t1 except select id,i1,i2 from t2 order by t1.i1;\r\n+\r\n+-- views using intersect and except\r\n+create view view_intr_uniq as select id,i1,i2 from t1 intersect select id,i1,i2 from t2;\r\n+select * from view_intr_uniq order by 1 DESC,2,3;\r\n+\r\n+create view view_intr_all as select id,i1,i2 from t1 intersect all select id,i1,i2 from t2;\r\n+select * from  view_intr_all order by 1,2,3;\r\n+\r\n+create view view_ex_uniq as select id,i1,i2 from t1 except select id,i1,i2 from t2;\r\n+select * from view_ex_uniq order by 1,2,3;\r\n+\r\n+create view view_ex_all as select id,i1,i2 from t1 except all select id,i1,i2 from t2;\r\n+select * from view_ex_all order by 1 DESC,2,3;\r\n+\r\n+-- intersect joins\r\n+select t1.id,t1.i1,t2.i1 from t1 join t2 on t1.id = t2.id\r\n+intersect select t1.id,t1.i2,t2.i2 from t1 join t2 on t1.id = t2.id;\r"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/9cc8ad0a5e3865308f42a7ba0be4d84abe295706",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/95a483de2e5c3aaed013def4e6867d56d0b6f3e6",
        "message": "DERBY-3890: Replication: NPE for startSlave of encrypted database\n\nRemoves NPE for replication of encrypted databases by setting\nRawStoreFactory in LogFactory before calling SlaveFactory#startSlave.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@708510 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_32",
        "file": [
            {
                "sha": "b960b6e9d6a633caa834946b9f20f7e9a1a7da14",
                "filename": "java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java",
                "status": "modified",
                "additions": 6,
                "deletions": 3,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/9cc8ad0a5e3865308f42a7ba0be4d84abe295706/java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java",
                "raw_url": "https://github.com/apache/derby/raw/9cc8ad0a5e3865308f42a7ba0be4d84abe295706/java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java?ref=9cc8ad0a5e3865308f42a7ba0be4d84abe295706",
                "patch": "@@ -62,20 +62,23 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n \tpublic Logger getLogger();\n \n+\t/**\n+\t\tMake log factory aware of which raw store factory it belongs to\n+\t*/\n+\tpublic void setRawStoreFactory(RawStoreFactory rsf);\n+\n \t/**\n \t\tRecover the database to a consistent state using the log. \n \t\tEach implementation of the log factory has its own recovery algorithm,\n \t\tplease see the implementation for a description of the specific\n \t\trecovery algorithm it uses.\n \n-\t\t@param rawStoreFactory - the raw store\n \t\t@param dataFactory - the data factory\n \t\t@param transactionFactory - the transaction factory\n \n \t\t@exception StandardException - encounter exception while recovering.\n \t */\n-\tpublic void recover(RawStoreFactory rawStoreFactory,\n-\t\t\t\t\t\tDataFactory dataFactory,\n+\tpublic void recover(DataFactory dataFactory,\n \t\t\t\t\t\tTransactionFactory transactionFactory)\n \t\t throws StandardException;\n "
            },
            {
                "sha": "b32bf698926e1cdc2c6bae67cd88c6c1fa76b4da",
                "filename": "java/engine/org/apache/derby/impl/store/raw/RawStore.java",
                "status": "modified",
                "additions": 6,
                "deletions": 1,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/9cc8ad0a5e3865308f42a7ba0be4d84abe295706/java/engine/org/apache/derby/impl/store/raw/RawStore.java",
                "raw_url": "https://github.com/apache/derby/raw/9cc8ad0a5e3865308f42a7ba0be4d84abe295706/java/engine/org/apache/derby/impl/store/raw/RawStore.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/RawStore.java?ref=9cc8ad0a5e3865308f42a7ba0be4d84abe295706",
                "patch": "@@ -314,6 +314,11 @@ public void\tboot(boolean create, Properties properties)\n             dataFactory.setDatabaseEncrypted();\n         }\n \n+        // RawStoreFactory is used by LogFactory.recover() and by\n+        // SlaveFactory.startSlave (for the SlaveFactory case, it is\n+        // only used if the database is encrypted)\n+        logFactory.setRawStoreFactory(this);\n+\n         // If SlaveFactory is to be booted, the boot has to happen\n         // before logFactory.recover since that method will be blocked\n         // when in replication slave mode.\n@@ -331,7 +336,7 @@ public void\tboot(boolean create, Properties properties)\n \t\t// no need to tell log factory which raw store factory it belongs to\n \t\t// since this is passed into the log factory for recovery\n \t\t// after the factories are loaded, recover the database\n-\t\tlogFactory.recover(this, dataFactory, xactFactory);\n+\t\tlogFactory.recover(dataFactory, xactFactory);\n \n         // if user requested to encrpty an unecrypted database or encrypt with\n         // new alogorithm then do that now.  "
            },
            {
                "sha": "7da6e58fa17a3dcc0ef728f902416234f50b9d0b",
                "filename": "java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java",
                "status": "modified",
                "additions": 12,
                "deletions": 8,
                "changes": 20,
                "blob_url": "https://github.com/apache/derby/blob/9cc8ad0a5e3865308f42a7ba0be4d84abe295706/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java",
                "raw_url": "https://github.com/apache/derby/raw/9cc8ad0a5e3865308f42a7ba0be4d84abe295706/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java?ref=9cc8ad0a5e3865308f42a7ba0be4d84abe295706",
                "patch": "@@ -409,7 +409,7 @@ public int getTypeFormatId() {\n \tprivate long logWrittenFromLastCheckPoint = 0;\n \t                            // keeps track of the amout of log written between checkpoints\n \tprivate RawStoreFactory rawStoreFactory; \n-\t\t\t\t\t\t\t\t// use this only after recovery is finished\n+\t// use this only when in slave mode or after recovery is finished\n \n \tprotected DataFactory dataFactory;\n \t\t\t\t\t\t\t\t// use this only after revocery is finished\n@@ -643,6 +643,13 @@ public Logger getLogger() {\n \t\t\treturn new FileLogger(this);\n \t}\n \n+\t/**\n+\t\tMake log factory aware of which raw store factory it belongs to\n+\t*/\n+\tpublic void setRawStoreFactory(RawStoreFactory rsf) {\n+\t\trawStoreFactory = rsf;\n+\t}\n+\n \t/**\n \t\tRecover the rawStore to a consistent state using the log.\n \n@@ -666,20 +673,17 @@ public Logger getLogger() {\n \t\t@exception StandardException Standard Derby error policy\n \t*/\n \tpublic void recover(\n-    RawStoreFactory     rsf, \n     DataFactory         df, \n     TransactionFactory  tf)\n \t\t throws StandardException\n \t{\n \t\tif (SanityManager.DEBUG)\n \t\t{\n-\t\t\tSanityManager.ASSERT(rsf != null, \"raw store factory == null\");\n \t\t\tSanityManager.ASSERT(df != null,  \"data factory == null\");\n \t\t}\n \n \t\tcheckCorrupt();\n \n-\t\trawStoreFactory = rsf;\n \t\tdataFactory     = df;\n \t\t\n \t\t// initialize the log writer only after the rawstorefactory is available, \n@@ -889,7 +893,7 @@ public void recover(\n \t\t\t\t// open a transaction that is used for redo and rollback\n \t\t\t\tRawTransaction recoveryTransaction =\n                     tf.startTransaction(\n-                        rsf,\n+                        rawStoreFactory,\n                         ContextService.getFactory().getCurrentContextManager(),\n                         AccessFactoryGlobals.USER_TRANS_NAME);\n \n@@ -1210,7 +1214,7 @@ public void recover(\n                                 \"In recovery undo, rollback inflight transactions\");\n \t\t\t\t\t}\n \n-\t\t\t\t\ttf.rollbackAllTransactions(recoveryTransaction, rsf);\n+\t\t\t\t\ttf.rollbackAllTransactions(recoveryTransaction, rawStoreFactory);\n \n \t\t\t\t\tif (SanityManager.DEBUG)\n \t\t\t\t\t{\n@@ -1249,7 +1253,7 @@ public void recover(\n                             tf.getTransactionTable());\n                 }\n \n-                tf.handlePreparedXacts(rsf);\n+                tf.handlePreparedXacts(rawStoreFactory);\n \n                 if (SanityManager.DEBUG)\n                 {\n@@ -1301,7 +1305,7 @@ public void recover(\n \t\t\t\t\t\t\tneedCheckpoint = false;\n \t\t\t\t\t}\n \n-\t\t\t\t\t\tif (needCheckpoint && !checkpoint(rsf, df, tf, false))\n+\t\t\t\t\t\tif (needCheckpoint && !checkpoint(rawStoreFactory, df, tf, false))\n \t\t\t\t\t\t\tflush(logFileNumber, endPosition);\n \t\t\t\t}\n "
            },
            {
                "sha": "8ee1ef9a5db8da37d210949a2a5d767a78a4c81b",
                "filename": "java/engine/org/apache/derby/impl/store/raw/log/ReadOnly.java",
                "status": "modified",
                "additions": 5,
                "deletions": 2,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/9cc8ad0a5e3865308f42a7ba0be4d84abe295706/java/engine/org/apache/derby/impl/store/raw/log/ReadOnly.java",
                "raw_url": "https://github.com/apache/derby/raw/9cc8ad0a5e3865308f42a7ba0be4d84abe295706/java/engine/org/apache/derby/impl/store/raw/log/ReadOnly.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/log/ReadOnly.java?ref=9cc8ad0a5e3865308f42a7ba0be4d84abe295706",
                "patch": "@@ -76,12 +76,15 @@ public Logger getLogger() {\n \t\treturn null;\n \t}\n \n+\t/** Not applicable in readonly databases */\n+\tpublic void setRawStoreFactory(RawStoreFactory rsf) {\n+\t}\n+\n \t/**\n \t  MT - not needed, no work is done\n \t  @exception StandardException Standard Derby Error Policy\n \t*/\n-\tpublic void recover(RawStoreFactory rawStoreFactory,\n-\t\t\t\t\t\tDataFactory dataFactory,\n+\tpublic void recover(DataFactory dataFactory,\n \t\t\t\t\t\tTransactionFactory transactionFactory)\n \t\t throws StandardException\n \t{"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/f201787c33bb5a0654176d376e92ac27a6594e40",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/63e167ec8d8a6ccc2ea728c2544e13b7ec4c26eb",
        "message": "DERBY-3508:Log receiver thread fails with NPE at failover when master has died\nThe NPE was caused by the log receiver thread trying to get the port from a closed down ReplicationMessageReceive.\nContributed by Jorgen Loland\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@636833 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_33",
        "file": [
            {
                "sha": "c2dee2d4d2fff48fc173c4e4ff07b629e677c8da",
                "filename": "java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/f201787c33bb5a0654176d376e92ac27a6594e40/java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java",
                "raw_url": "https://github.com/apache/derby/raw/f201787c33bb5a0654176d376e92ac27a6594e40/java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java?ref=f201787c33bb5a0654176d376e92ac27a6594e40",
                "patch": "@@ -224,6 +224,10 @@ public void startSlave(RawStoreFactory rawStore, LogFactory logFac)\n         // connection has been established or until we are no longer\n         // in replication slave mode\n         receiver = new ReplicationMessageReceive(slavehost, slaveport, dbname);\n+        // If slaveport was not specified when starting the slave, the\n+        // receiver will use the default port. Set slaveport to the port\n+        // actually used by the receiver\n+        slaveport = receiver.getPort();\n         while (!setupConnection()) {\n             if (!inReplicationSlaveMode) {\n                 // If we get here, another thread has called\n@@ -349,7 +353,7 @@ private boolean setupConnection() throws StandardException {\n             } else {\n                 throw StandardException.newException\n                     (SQLState.REPLICATION_CONNECTION_EXCEPTION, e,\n-                    dbname, slavehost, String.valueOf(receiver.getPort()));\n+                    dbname, slavehost, String.valueOf(slaveport));\n             }\n         }\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/2159c6a011a90ce1f72db0c362cebfcc8a0d5840",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/4e03030ea95eb29b8b78bf1184b16068bfeecd2a",
        "message": "DERBY-3326: Introduce a caching logical connection and logical prepared statement in the client driver.\nFixed an obvious NPE I overlooked, and also synchronized the close method in CachingLogicalConnection[40].\nPatch file: derby-3326-6b-npe_fix_synch_CLC.diff\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@631258 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_34",
        "file": [
            {
                "sha": "01001747f4e8462e7a793436bd8074d35b8bb9d1",
                "filename": "java/client/org/apache/derby/client/am/CachingLogicalConnection.java",
                "status": "modified",
                "additions": 7,
                "deletions": 5,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/2159c6a011a90ce1f72db0c362cebfcc8a0d5840/java/client/org/apache/derby/client/am/CachingLogicalConnection.java",
                "raw_url": "https://github.com/apache/derby/raw/2159c6a011a90ce1f72db0c362cebfcc8a0d5840/java/client/org/apache/derby/client/am/CachingLogicalConnection.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/CachingLogicalConnection.java?ref=2159c6a011a90ce1f72db0c362cebfcc8a0d5840",
                "patch": "@@ -64,12 +64,14 @@ public CachingLogicalConnection(Connection physicalConnection,\n                 new StatementCacheInteractor(stmtCache, physicalConnection);\n     }\n \n-    public void close()\n+    public synchronized void close()\n             throws SQLException {\n-        // Nullify reference to cache interactor to allow it to be GC'ed.\n-        // It should not be used again when the logical connection is closed.\n-        this.cacheInteractor = null;\n-        super.close();\n+        if (this.cacheInteractor != null) {\n+            // Nullify reference to cache interactor to allow it to be GC'ed.\n+            // It should not be used again when, logical connection is closed.\n+            this.cacheInteractor = null;\n+            super.close();\n+        }\n     }\n \n     public synchronized PreparedStatement prepareStatement(String sql)"
            },
            {
                "sha": "e2ad3b80723a477dc5e13248ca3fb8994d9e8093",
                "filename": "java/client/org/apache/derby/client/am/CachingLogicalConnection40.java",
                "status": "modified",
                "additions": 7,
                "deletions": 5,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/2159c6a011a90ce1f72db0c362cebfcc8a0d5840/java/client/org/apache/derby/client/am/CachingLogicalConnection40.java",
                "raw_url": "https://github.com/apache/derby/raw/2159c6a011a90ce1f72db0c362cebfcc8a0d5840/java/client/org/apache/derby/client/am/CachingLogicalConnection40.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/CachingLogicalConnection40.java?ref=2159c6a011a90ce1f72db0c362cebfcc8a0d5840",
                "patch": "@@ -59,12 +59,14 @@ public CachingLogicalConnection40(Connection physicalConnection,\n                 new StatementCacheInteractor(stmtCache, physicalConnection);\n     }\n \n-    public void close()\n+    public synchronized void close()\n             throws SQLException {\n-        // Nullify reference to cache interactor to allow it to be GC'ed.\n-        // It should not be used again when the logical connection is closed.\n-        this.cacheInteractor = null;\n-        super.close();\n+        if (this.cacheInteractor != null) {\n+            // Nullify reference to cache interactor to allow it to be GC'ed.\n+            // It should not be used again, the logical connection is closed.\n+            this.cacheInteractor = null;\n+            super.close();\n+        }\n     }\n \n     public synchronized PreparedStatement prepareStatement(String sql)"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/30293196100ee815e62e1b2cfc703c2d9b860577",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/d99a94772060cb1dc67dcb79d5c1a924d0672e80",
        "message": "DERBY-128 Network Server Gives NPE if SQLException has null SQLState\n\nRemoved dereferencing of sqlstate which was causing the NPE\n\t\t\tContributed by Dyre Tjeldvoll\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/derby/code/trunk@179927 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_35",
        "file": [
            {
                "sha": "4963846f6d5702b686765bc8d0c544b633a51dcb",
                "filename": "java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/30293196100ee815e62e1b2cfc703c2d9b860577/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "raw_url": "https://github.com/apache/derby/raw/30293196100ee815e62e1b2cfc703c2d9b860577/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java?ref=30293196100ee815e62e1b2cfc703c2d9b860577",
                "patch": "@@ -5141,7 +5141,7 @@ private void writeSQLCAGRP(SQLException e, int sqlcode, int updateCount,\n \t\t\t\t\t// arguments are variable part of a message\n \t\t\t\t\tObject[] args = ce.getArguments();\n \t\t\t\t\tfor (int i = 0; args != null &&  i < args.length; i++)\n-\t\t\t\t\t\tsqlerrmc += args[i].toString() + separator;\n+\t\t\t\t\t\tsqlerrmc += args[i] + separator;\n \t\t\t\t\t\n \t\t\t\t\t// Severe exceptions need to be logged in the error log\n \t\t\t\t\t// also log location and non-localized message will be"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/75134de43d4205ae216bf39c6cc42e0b7229c4f4",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/6a9299ae34e09ced1f511fe27f0958c455a94350",
        "message": "Backing out change 796316 for DERBY-4304 until I can figure out the cause of NPE in DerbyNetAutoStart\nStarting test case 1. \njava.lang.NullPointerException \nat org.apache.derby.impl.services.jmx.JMXManagementService.unregisterMBean(JMXManagementService.java:286) \nat org.apache.derby.impl.services.jmx.JMXManagementService.unregisterMBean(JMXManagementService.java:277) \nat org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(NetworkServerControlImpl.java:892) \nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) \nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) \nat java.lang.reflect.Method.invoke(Method.java:599) \nat org.apache.derby.iapi.jdbc.DRDAServerStarter.run(DRDAServerStarter.java:236) \nat java.lang.Thread.run(Thread.java:735) \nStarting test case 2. \njava.lang.NullPointerException \nat org.apache.derby.impl.services.jmx.JMXManagementService.unregisterMBean(JMXManagementService.java:286) \nat org.apache.derby.impl.services.jmx.JMXManagementService.unregisterMBean(JMXManagementService.java:277) \nat org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(NetworkServerControlImpl.java:892) \nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) \nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) \nat java.lang.reflect.Method.invoke(Method.java:599) \nat org.apache.derby.iapi.jdbc.DRDAServerStarter.run(DRDAServerStarter.java:236) \nat java.lang.Thread.run(Thread.java:735) \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@796372 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_36",
        "file": [
            {
                "sha": "ed676e426a5ac728cc15d82a5aba75e8bd2486b3",
                "filename": "java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java",
                "status": "modified",
                "additions": 7,
                "deletions": 7,
                "changes": 14,
                "blob_url": "https://github.com/apache/derby/blob/75134de43d4205ae216bf39c6cc42e0b7229c4f4/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java",
                "raw_url": "https://github.com/apache/derby/raw/75134de43d4205ae216bf39c6cc42e0b7229c4f4/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java?ref=75134de43d4205ae216bf39c6cc42e0b7229c4f4",
                "patch": "@@ -819,9 +819,9 @@ public Object run()  {\n                        }\n                     });\n         } catch (Exception exception) {\n-            consoleExceptionPrintTrace(exception);\n             consolePropertyMessage(\"DRDA_UnexpectedException.S\",\t\t\t\n                 exception.getMessage());\n+            consoleExceptionPrintTrace(exception);\n         }\n \t\t\n  \t\t// Close out the sessions\n@@ -832,9 +832,9 @@ public Object run()  {\n  \t\t\t\ttry {\n  \t\t\t\t\tsession.close();\n  \t\t\t\t} catch (Exception exception) {\n- \t\t\t\t\tconsoleExceptionPrintTrace(exception);\n  \t\t\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\",\t\t\t\n  \t\t\t\t\t\t\texception.getMessage());\n+ \t\t\t\t\tconsoleExceptionPrintTrace(exception);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n@@ -856,9 +856,9 @@ public Object run() {\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t});\n  \t\t\t\t} catch (Exception exception) {\n- \t\t\t\t\tconsoleExceptionPrintTrace(exception);\n  \t\t\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\",\t\t\t\n  \t\t\t\t\t\t\texception.getMessage());\n+ \t\t\t\t\tconsoleExceptionPrintTrace(exception);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\tthreadList.clear();\n@@ -870,9 +870,9 @@ public Object run() {\n \t    }catch(IOException e){\n \t\t\tconsolePropertyMessage(\"DRDA_ListenerClose.S\", true);\n \t    } catch (Exception exception) {\n-\t\t\tconsoleExceptionPrintTrace(exception);\n \t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\",\t\t\t\n \t\t\t\t\texception.getMessage());\n+\t\t\tconsoleExceptionPrintTrace(exception);\n \t    }\n \n \t\t// Wake up those waiting on sessions, so\n@@ -882,19 +882,19 @@ public Object run() {\n \t\t\t\trunQueue.notifyAll();\n \t\t\t}\t\n \t    } catch (Exception exception) {\n-\t\t\tconsoleExceptionPrintTrace(exception);\n \t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\",\t\t\t\n \t\t\t\t\texception.getMessage());\n+\t\t\tconsoleExceptionPrintTrace(exception);\n \t    }\n         \n         // And now unregister any MBeans.\n \t    try {\n \t        mgmtService.unregisterMBean(versionMBean);\n \t        mgmtService.unregisterMBean(networkServerMBean);\n \t    } catch (Exception exception) {\n-\t\t\tconsoleExceptionPrintTrace(exception);\n \t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\",\t\t\t\n \t\t\t\t\texception.getMessage());\n+\t\t\tconsoleExceptionPrintTrace(exception);\n \t    }\n \n \t\tif (shutdownDatabasesOnShutdown) {\n@@ -925,9 +925,9 @@ public Object run() {\n \t\t\t\t\t\t\t\t\t\t   sqle.getMessage());\n \t\t\t\t}\n \t\t\t} catch (Exception exception) {\n-\t\t\t\tconsoleExceptionPrintTrace(exception);\n \t\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\",\t\t\t\n \t\t\t\t\t\texception.getMessage());\n+\t\t\t\tconsoleExceptionPrintTrace(exception);\n \t\t\t}\n \t\t}\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/36dd3e2035ffd195f054abf6755ce38388410166",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/e94357aad8f6ac748d1a969dc928d0fbe1b3ca17",
        "message": "DERBY-6788(Wrong value inserted by INSERT INTO with multiple subselects)\n\nAdding a junit test case for DERBY-6788. This bug might be related to DERBY-6786(NullPointerException in INSERT INTO statement with  multiple subselects)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1653986 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_37",
        "file": [
            {
                "sha": "82a016720d13877982dcab5581d3413d30a077b8",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "status": "modified",
                "additions": 45,
                "deletions": 0,
                "changes": 45,
                "blob_url": "https://github.com/apache/derby/blob/36dd3e2035ffd195f054abf6755ce38388410166/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "raw_url": "https://github.com/apache/derby/raw/36dd3e2035ffd195f054abf6755ce38388410166/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java?ref=36dd3e2035ffd195f054abf6755ce38388410166",
                "patch": "@@ -44,6 +44,51 @@ public InsertTest(String name) {\n     public static Test suite() {\n         return TestConfiguration.defaultSuite(InsertTest.class);\n     }\n+\n+    //DERBY-6788(Wrong value inserted by INSERT INTO with multiple subselects)\n+    //Following test case has zz against its name and hence it won't run. \n+    // This is because one INSERT with JOIN in the test can cause data .  \n+    // corruption. Once DERBY-6788 is fixed, following test should be enabled \n+    // by removing zz. This bug might be related to \n+    // DERBY-6786(NullPointerException in INSERT INTO statement with multiple \n+    //  subselects)\n+    public void zztestDerby6788() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"CREATE TABLE M1 (K varchar(64), S decimal)\");\n+        s.execute(\"CREATE TABLE M2 (K varchar(64), S decimal)\");\n+        s.execute(\"CREATE TABLE V  (S DECIMAL)\");\n+        s.execute(\"INSERT INTO M1 VALUES ('Bug', 2015)\");\n+        s.execute(\"INSERT INTO M2 VALUES ('Bug', 1957)\");\n+        JDBC.assertFullResultSet(\n+            s.executeQuery(\n+            \"SELECT res.* FROM (SELECT d2.s FROM m1 \"+\n+            \"LEFT JOIN \" +\n+            \"(SELECT k,s FROM m2) AS d2 ON m1.k=d2.k) AS res\"),\n+            new String[][]{{\"1957\"}});\n+        //The INSERT below will insert incorrect value into V because of\n+        // DERBY-6788. This bug might be related to \n+        // DERBY-6786(NullPointerException in INSERT INTO statement with  \n+        //  multiple subselects)\n+        s.execute(\"INSERT INTO V \"+\n+                \"(SELECT res.* FROM (SELECT d2.s FROM m1 \" +\n+        \t\t\"LEFT JOIN \" +\n+                \"(SELECT k,s FROM m2) AS d2 ON m1.k=d2.k) AS res)\");\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\n+                \"SELECT * FROM V\"),\n+                new String[][]{{\"1957\"}});\n+        s.execute(\"INSERT INTO V \"+\n+                \"(SELECT res.* FROM (SELECT d2.s*1 FROM m1 \" +\n+        \t\t\"LEFT JOIN \" +\n+                \"(SELECT k,s FROM m2) AS d2 ON m1.k=d2.k) AS res)\");\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\n+                \"SELECT * FROM V\"),\n+                new String[][]{{\"1957\"},{\"1957\"}});\n+        s.execute(\"DROP   TABLE M1\");\n+        s.execute(\"DROP   TABLE M2\");\n+        s.execute(\"DROP   TABLE V\");\n+    }\n     \n     public void testDerby6786Case1() throws SQLException {\n         Statement s = createStatement();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/60d10e68b0bc0f0f8fa5cd852f7b0c867a78b2a7",
        "message": "DERBY-4330 NullPointerException or assert failure when re-executing PreparedStatement after lock timeout\n\nPatch derby-4330c fixes this issue. The problem is that when a timeout\nhappens (or a deadlock), the result set tree for prepared statements\nfor some queries is partically in a closed, partially in an open\nstate. (The issue was reported for a join query, but exists for others\nqueries as well). This causes problems when the result set tree is\nbeing reused, i.e. when the prpared statement is attempted re-executed\nafter the timeout, since the tree is expected to be fully closed at\nthat time, cuasing the assert or NPE.\n\nThe fix ensures that the tree is left in a fully closed state in such\ncases.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@804271 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_38",
        "file": [
            {
                "sha": "c3654452447c6d7c150bc41bd4c23f185a31f171",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java",
                "status": "modified",
                "additions": 14,
                "deletions": 4,
                "changes": 18,
                "blob_url": "https://github.com/apache/derby/blob/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java?ref=0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
                "patch": "@@ -138,10 +138,20 @@ public void\topenCore() throws StandardException\n \n         source.openCore();\n \n-\t\t/*\n-\t\t** Load up the sorter because we have something to sort.\n-\t\t*/\n-\t\tscanController = loadSorter();\n+\t\ttry {\n+\t\t\t/*\n+\t\t\t** Load up the sorter because we have something to sort.\n+\t\t\t*/\n+\t\t\tscanController = loadSorter();\n+\t\t} catch (StandardException e) {\n+\t\t\t// DERBY-4330 Result set tree must be atomically open or\n+\t\t\t// closed for reuse to work (after DERBY-827).\n+\n+\t\t\tisOpen = true; // to make close do its thing:\n+\t\t\ttry { close(); } catch (StandardException ee) {}\n+\t\t\tthrow e;\n+\t\t}\n+\n \t\tsorted = true;\n \n \t    isOpen = true;"
            },
            {
                "sha": "51ef42513718e58d09c62d8504c07c894a15dfb1",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java",
                "status": "modified",
                "additions": 27,
                "deletions": 18,
                "changes": 45,
                "blob_url": "https://github.com/apache/derby/blob/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java?ref=0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
                "patch": "@@ -158,26 +158,35 @@ public void\topenCore() throws StandardException\n \n         source.openCore();\n \n-\t\t/* If this is an in-order group by then we do not need the sorter.\n-\t\t * (We can do the aggregation ourselves.)\n-\t\t * We save a clone of the first row so that subsequent next()s\n-\t\t * do not overwrite the saved row.\n-\t\t */\n-\t\tif (isInSortedOrder)\n-\t\t{\n-\t\t\tcurrSortedRow = getNextRowFromRS();\n-\t\t\tif (currSortedRow != null)\n+\t\ttry {\n+\t\t\t/* If this is an in-order group by then we do not need the sorter.\n+\t\t\t * (We can do the aggregation ourselves.)\n+\t\t\t * We save a clone of the first row so that subsequent next()s\n+\t\t\t * do not overwrite the saved row.\n+\t\t\t */\n+\t\t\tif (isInSortedOrder)\n \t\t\t{\n-\t\t\t\tcurrSortedRow = (ExecIndexRow) currSortedRow.getClone();\n-\t\t\t\tinitializeVectorAggregation(currSortedRow);\n+\t\t\t\tcurrSortedRow = getNextRowFromRS();\n+\t\t\t\tif (currSortedRow != null)\n+\t\t\t\t{\n+\t\t\t\t\tcurrSortedRow = (ExecIndexRow) currSortedRow.getClone();\n+\t\t\t\t\tinitializeVectorAggregation(currSortedRow);\n+\t\t\t\t}\n \t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\t/*\n-\t\t\t** Load up the sorter\n-\t\t\t*/\n-\t\t\tscanController = loadSorter();\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\t/*\n+\t\t\t\t** Load up the sorter\n+\t\t\t\t*/\n+\t\t\t\tscanController = loadSorter();\n+\t\t\t}\n+\t\t} catch (StandardException e) {\n+\t\t\t// DERBY-4330 Result set tree must be atomically open or\n+\t\t\t// closed for reuse to work (after DERBY-827).\n+\n+\t\t\tisOpen = true; // to make close do its thing:\n+\t\t\ttry { close(); } catch (StandardException ee) {}\n+\t\t\tthrow e;\n \t\t}\n \n \t    isOpen = true;"
            },
            {
                "sha": "faa050bd883b0b1572add01d08e30cf2ff3b108f",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java",
                "status": "modified",
                "additions": 17,
                "deletions": 6,
                "changes": 23,
                "blob_url": "https://github.com/apache/derby/blob/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java?ref=0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
                "patch": "@@ -143,14 +143,25 @@ public void\topenCore() throws StandardException\n \t\tif (SanityManager.DEBUG)\n \t    \tSanityManager.ASSERT( ! isOpen, \"JoinResultSet already open\");\n \n-\t    isOpen = true;\n \t\tleftResultSet.openCore();\n-\t\tleftRow = leftResultSet.getNextRowCore();\n-\t\tif (leftRow != null)\n-\t\t{\n-\t\t\topenRight();\n-\t\t\trowsSeenLeft++;\n+\n+\t\ttry {\n+\t\t\tleftRow = leftResultSet.getNextRowCore();\n+\t\t\tif (leftRow != null)\n+\t\t\t{\n+\t\t\t\topenRight();\n+\t\t\t\trowsSeenLeft++;\n+\t\t\t}\n+\t\t} catch (StandardException e) {\n+\t\t\t// DERBY-4330 Result set tree must be atomically open or\n+\t\t\t// closed for reuse to work (after DERBY-827).\n+\n+\t\t\tisOpen = true; // to make close work:\n+\t\t\ttry { close(); } catch (StandardException ee) {}\n+\t\t\tthrow e;\n \t\t}\n+\n+\t    isOpen = true;\n \t\tnumOpens++;\n \n \t\topenTime += getElapsedMillis(beginTime);"
            },
            {
                "sha": "45c47eb18cde3d20cf4440def3aa0187f7db936f",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java",
                "status": "modified",
                "additions": 13,
                "deletions": 3,
                "changes": 16,
                "blob_url": "https://github.com/apache/derby/blob/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java?ref=0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
                "patch": "@@ -108,15 +108,25 @@ public void\topenCore() throws StandardException\n \t\tif (SanityManager.DEBUG)\n \t    \tSanityManager.ASSERT( ! isOpen, \"SetOpResultSet already open\");\n \n-        isOpen = true;\n         leftSource.openCore();\n-        rightSource.openCore();\n-        rightInputRow = rightSource.getNextRowCore();\n+\n+        try {\n+            rightSource.openCore();\n+            rightInputRow = rightSource.getNextRowCore();\n+        } catch (StandardException e) {\n+            // DERBY-4330 Result set tree must be atomically open or\n+            // closed for reuse to work (after DERBY-827).\n+            isOpen = true; // to make close work:\n+            try { close(); } catch (StandardException ee) {}\n+            throw e;\n+        }\n+\n         if (rightInputRow != null)\n         {\n             rowsSeenRight++;\n         }\n \n+        isOpen = true;\n \t\tnumOpens++;\n \n \t\topenTime += getElapsedMillis(beginTime);"
            },
            {
                "sha": "da7857a774a4ef65a957c73723982742031c7961",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java",
                "status": "modified",
                "additions": 27,
                "deletions": 18,
                "changes": 45,
                "blob_url": "https://github.com/apache/derby/blob/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java?ref=0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
                "patch": "@@ -247,26 +247,35 @@ public void\topenCore() throws StandardException\n \n         source.openCore();\n \n-\t\t/* If this is an in-order distinct then we do not need the sorter.\n-\t\t * (We filter out the duplicate rows ourselves.)\n-\t\t * We save a clone of the first row so that subsequent next()s\n-\t\t * do not overwrite the saved row.\n-\t\t */\n-\t\tif (isInSortedOrder && distinct)\n-\t\t{\n-\t\t\tcurrSortedRow = getNextRowFromRS();\n-\t\t\tif (currSortedRow != null)\n+\t\ttry {\n+\t\t\t/* If this is an in-order distinct then we do not need the sorter.\n+\t\t\t * (We filter out the duplicate rows ourselves.)  We save a clone\n+\t\t\t * of the first row so that subsequent next()s do not overwrite the\n+\t\t\t * saved row.\n+\t\t\t */\n+\t\t\tif (isInSortedOrder && distinct)\n+\t\t\t{\n+\t\t\t\tcurrSortedRow = getNextRowFromRS();\n+\n+\t\t\t\tif (currSortedRow != null)\n+\t\t\t\t{\n+\t\t\t\t\tcurrSortedRow = (ExecRow) currSortedRow.getClone();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse\n \t\t\t{\n-\t\t\t\tcurrSortedRow = (ExecRow) currSortedRow.getClone();\n+\t\t\t\t/*\n+\t\t\t\t** Load up the sorter.\n+\t\t\t\t*/\n+\t\t\t\tscanController = loadSorter();\n+\t\t\t\tsorted = true;\n \t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\t/*\n-\t\t\t** Load up the sorter.\n-\t\t\t*/\n-\t\t\tscanController = loadSorter();\n-\t\t\tsorted = true;\n+\t\t} catch (StandardException e) {\n+\t\t\t// DERBY-4330 Result set tree must be atomically open or\n+\t\t\t// closed for reuse to work (after DERBY-827).\n+\t\t\tisOpen = true; // to make close do its thing:\n+\t\t\ttry { close(); } catch (StandardException ee) {}\n+\t\t\tthrow e;\n \t\t}\n \n \t    isOpen = true;"
            },
            {
                "sha": "4ed519d0f15636756c4537ca365985b88981c0e6",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java?ref=0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
                "patch": "@@ -99,8 +99,8 @@ public void\topenCore() throws StandardException\n \t\tif (SanityManager.DEBUG)\n \t    \tSanityManager.ASSERT( ! isOpen, \"UnionResultSet already open\");\n \n-        isOpen = true;\n         source1.openCore();\n+        isOpen = true;\n \t\tnumOpens++;\n \n \t\topenTime += getElapsedMillis(beginTime);"
            },
            {
                "sha": "4c07a8fd081d1a4623bcb0bb82bfd065f66577f9",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java",
                "status": "modified",
                "additions": 389,
                "deletions": 0,
                "changes": 389,
                "blob_url": "https://github.com/apache/derby/blob/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java",
                "raw_url": "https://github.com/apache/derby/raw/0a6a8464ef48ebdbabb92da0dd0902836ae5d2af/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java?ref=0a6a8464ef48ebdbabb92da0dd0902836ae5d2af",
                "patch": "@@ -169,6 +169,10 @@ public static String ref(String table) {\n     /** Secondary connection. Used if something needs to be executed in a\n      * separate transaction. */\n     private Connection c2;\n+    private Connection c3;\n+\n+\n+    private static final long DERBY_DEFAULT_TIMEOUT = 60;\n \n     /**\n      * Creates a String containing an insert statement for the\n@@ -454,6 +458,31 @@ protected void tearDown() throws Exception {\n         try { s.executeUpdate(\"drop table emp\"); } catch (SQLException e) {}\n         try { s.executeUpdate(\"drop table emp2\"); } catch (SQLException e) {}\n         try { s.executeUpdate(\"drop table dept\"); } catch (SQLException e) {}\n+\n+        // DERBY-4330 tables:\n+        try {\n+            if (c3 != null && !c3.isClosed()) {\n+                c3.rollback();\n+                c3.close();\n+            }\n+        } catch (SQLException e) {\n+        }\n+\n+        try { s.executeUpdate(\n+                \"drop table APP.FILECHANGES\"); } catch (SQLException e) {}\n+        try { s.executeUpdate(\n+                \"drop table APP.CHANGESETS\"); } catch (SQLException e) {}\n+        try { s.executeUpdate(\n+                \"drop table APP.AUTHORS\"); } catch (SQLException e) {}\n+        try { s.executeUpdate(\n+                \"drop table APP.FILES\"); } catch (SQLException e) {}\n+        try { s.executeUpdate(\n+                \"drop table APP.REPOSITORIES\"); } catch (SQLException e) {}\n+        try { s.executeUpdate(\n+                \"drop table APP.FILECHANGES_2\"); } catch (SQLException e) {}\n+\n+        try { setTimeout(DERBY_DEFAULT_TIMEOUT); } catch (SQLException e) {}\n+\n         s.close();\n         commit();\n \n@@ -2244,4 +2273,364 @@ public void testRuntimeStatisticsForCall() throws SQLException {\n                 null); // XPLAIN doesn't work for CALL statements currently.\n     }\n \n+\n+    public void testDerby4330_JoinResultSet()  throws SQLException {\n+        setTimeout(1);\n+        setSchema(\"APP\");\n+        createDerby4330_join_tables();\n+\n+        PreparedStatement ps = prepareStatement(\n+            \"SELECT CS.REVISION, A.NAME, CS.TIME, CS.MESSAGE, F.PATH \" +\n+            \"FROM \" +\n+            \"CHANGESETS CS, FILECHANGES FC, \" +\n+            \"           REPOSITORIES R, FILES F, AUTHORS A \" +\n+            \"WHERE \" +\n+            \"F.REPOSITORY = R.ID AND A.REPOSITORY = R.ID AND \" +\n+            \"CS.REPOSITORY = R.ID AND CS.ID = FC.CHANGESET AND \" +\n+            \"F.ID = FC.FILE AND A.ID = CS.AUTHOR AND \" +\n+            \"EXISTS ( \" +\n+            \"SELECT 1 \" +\n+            \"FROM FILES F2 \" +\n+            \"WHERE \" +\n+            \"F2.ID = FC.FILE AND F2.REPOSITORY = R.ID) \" +\n+            \"ORDER BY CS.ID DESC\");\n+\n+        c3 = openDefaultConnection();\n+        c3.setAutoCommit(false);\n+        Statement stm2 = c3.createStatement();\n+        stm2.execute(\"LOCK TABLE FILECHANGES IN EXCLUSIVE MODE\");\n+        stm2.close();\n+\n+        try {\n+            ps.executeQuery();\n+            fail();\n+        } catch (SQLException e) {\n+            assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+        }\n+\n+        c3.rollback();\n+        c3.close();\n+\n+        ResultSet rs = ps.executeQuery();\n+        assertTrue(rs.next());\n+        assertEquals(rs.getString(2), \"xyz\"); // name\n+        assertFalse(rs.next());\n+        ps.close();\n+\n+    }\n+\n+\n+    public void testDerby4330_UnionResultSet()  throws SQLException {\n+        setTimeout(1);\n+        setSchema(\"APP\");\n+        createDerby4330_union_tables();\n+\n+        PreparedStatement ps = prepareStatement(\n+            \"SELECT * FROM (\" +\n+            \"SELECT * FROM FILECHANGES_2  UNION \" +\n+            \"SELECT * FROM FILECHANGES) X\"); // locked file last\n+\n+        PreparedStatement ps_inverse = prepareStatement(\n+            \"SELECT * FROM (\" +\n+            \"SELECT * FROM FILECHANGES  UNION \" + // locked file first\n+            \"SELECT * FROM FILECHANGES_2) X\");\n+\n+        c3 = openDefaultConnection();\n+        c3.setAutoCommit(false);\n+        Statement stm2 = c3.createStatement();\n+        stm2.execute(\"LOCK TABLE FILECHANGES IN EXCLUSIVE MODE\");\n+        stm2.close();\n+\n+        try {\n+            ps.executeQuery();\n+            fail();\n+        } catch (SQLException e) {\n+            assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+        }\n+\n+        try {\n+            ps_inverse.executeQuery();\n+            fail();\n+        } catch (SQLException e) {\n+            assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+        }\n+\n+        c3.rollback();\n+        c3.close();\n+\n+        ResultSet rs = ps.executeQuery();\n+        JDBC.assertFullResultSet(rs, new String[][]{{\"1\", \"1\", \"1\"}});\n+\n+        rs = ps_inverse.executeQuery();\n+        JDBC.assertFullResultSet(rs, new String[][]{{\"1\", \"1\", \"1\"}});\n+\n+        ps.close();\n+        ps_inverse.close();\n+\n+    }\n+\n+\n+    public void testDerby4330_SetOpResultSet()  throws SQLException {\n+        setTimeout(1);\n+        setSchema(\"APP\");\n+        createDerby4330_union_tables();\n+\n+        String[] ops = {\"EXCEPT\", \"INTERSECT\"};\n+        String[][][] opExpectedRs = {null, {{\"1\", \"1\", \"1\"}}};\n+\n+        for (int i=0; i < 2; i++) {\n+            PreparedStatement ps = prepareStatement(\n+                \"SELECT * FROM (\" +\n+                \"SELECT * FROM FILECHANGES_2 \" + ops[i] + \" \" +\n+                // locked file last\n+                \"SELECT * FROM FILECHANGES) X ORDER BY ID\");\n+\n+            PreparedStatement ps_inverse = prepareStatement(\n+                \"SELECT * FROM (\" +\n+                 // locked file first:\n+                \"SELECT * FROM FILECHANGES \" + ops[i] + \" \" +\n+                \"SELECT * FROM FILECHANGES_2) X ORDER BY ID\");\n+\n+            c3 = openDefaultConnection();\n+            c3.setAutoCommit(false);\n+            Statement stm2 = c3.createStatement();\n+            stm2.execute(\"LOCK TABLE FILECHANGES IN EXCLUSIVE MODE\");\n+            stm2.close();\n+\n+            try {\n+                ps.executeQuery();\n+                fail();\n+            } catch (SQLException e) {\n+                assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+            }\n+\n+            try {\n+                ps_inverse.executeQuery();\n+                fail();\n+            } catch (SQLException e) {\n+                assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+            }\n+\n+            c3.rollback();\n+            c3.close();\n+\n+            ResultSet rs = ps.executeQuery();\n+\n+            if (opExpectedRs[i] != null) {\n+                JDBC.assertFullResultSet(rs, opExpectedRs[i]);\n+            } else {\n+                JDBC.assertEmpty(rs);\n+            }\n+\n+            rs = ps_inverse.executeQuery();\n+\n+            if (opExpectedRs[i] != null) {\n+                JDBC.assertFullResultSet(rs, opExpectedRs[i]);\n+            } else {\n+                JDBC.assertEmpty(rs);\n+            }\n+\n+            ps.close();\n+            ps_inverse.close();\n+\n+        }\n+\n+    }\n+\n+\n+    public void testDerby4330_GroupedAggregateResultSet()  throws SQLException {\n+        setTimeout(1);\n+        setSchema(\"APP\");\n+        createDerby4330_union_tables();\n+\n+        PreparedStatement ps = prepareStatement(\n+            \"SELECT SUM(CHANGESET) from FILECHANGES GROUP BY FILE\");\n+\n+        c3 = openDefaultConnection();\n+        c3.setAutoCommit(false);\n+        Statement stm2 = c3.createStatement();\n+        // Next statement gives an exclusive write lock on a row in FILECHANGES:\n+        stm2.execute(\"INSERT INTO FILECHANGES(FILE,CHANGESET) VALUES (2,2)\");\n+        stm2.close();\n+\n+        try {\n+            ps.executeQuery();\n+            fail();\n+        } catch (SQLException e) {\n+            assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+        }\n+\n+        c3.rollback();\n+        c3.close();\n+\n+        ResultSet rs = ps.executeQuery();\n+        JDBC.assertFullResultSet(rs, new String[][]{{\"1\"}});\n+\n+        ps.close();\n+    }\n+\n+\n+    public void testDerby4330_DistinctGroupedAggregateResultSet()\n+            throws SQLException\n+    {\n+        setTimeout(1);\n+        setSchema(\"APP\");\n+        createDerby4330_union_tables();\n+\n+        PreparedStatement ps = prepareStatement(\n+            \"SELECT SUM(DISTINCT CHANGESET) from FILECHANGES GROUP BY FILE\");\n+\n+        c3 = openDefaultConnection();\n+        c3.setAutoCommit(false);\n+        Statement stm2 = c3.createStatement();\n+        // Next statement gives an exclusive write lock on a row in FILECHANGES:\n+        stm2.execute(\"INSERT INTO FILECHANGES(FILE,CHANGESET) VALUES (2,2)\");\n+        stm2.close();\n+\n+        try {\n+            ps.executeQuery();\n+            fail();\n+        } catch (SQLException e) {\n+            assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+        }\n+\n+        c3.rollback();\n+        c3.close();\n+\n+        ResultSet rs = ps.executeQuery();\n+        JDBC.assertFullResultSet(rs, new String[][]{{\"1\"}});\n+\n+        ps.close();\n+    }\n+\n+\n+    public void testDerby4330_DistinctScalarAggregateResultSet()\n+            throws SQLException\n+    {\n+        setTimeout(1);\n+        setSchema(\"APP\");\n+        createDerby4330_union_tables();\n+\n+        PreparedStatement ps = prepareStatement(\n+            \"SELECT SUM(DISTINCT CHANGESET) from FILECHANGES\");\n+\n+        c3 = openDefaultConnection();\n+        c3.setAutoCommit(false);\n+        Statement stm2 = c3.createStatement();\n+        // Next statement gives an exclusive write lock on a row in FILECHANGES:\n+        stm2.execute(\"INSERT INTO FILECHANGES(FILE,CHANGESET) VALUES (2,2)\");\n+        stm2.close();\n+\n+        try {\n+            ps.executeQuery();\n+            fail();\n+        } catch (SQLException e) {\n+            assertSQLState(\"Expected timeout\", \"40XL1\", e);\n+        }\n+\n+        c3.rollback();\n+        c3.close();\n+\n+        ResultSet rs = ps.executeQuery();\n+        JDBC.assertFullResultSet(rs, new String[][]{{\"1\"}});\n+\n+        ps.close();\n+    }\n+\n+\n+    private void setTimeout(long t) throws SQLException {\n+        Statement stm = createStatement();\n+        stm.execute(\"call syscs_util.syscs_set_database_property(\" +\n+                    \"'derby.locks.waitTimeout', '\" + t + \"')\");\n+        stm.close();\n+    }\n+\n+\n+    private void createDerby4330_join_tables()  throws SQLException {\n+        Statement stm = createStatement();\n+        stm.execute(\n+            \"CREATE TABLE REPOSITORIES (\" +\n+            \"ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\" +\n+            \"PATH VARCHAR(32672) UNIQUE NOT NULL)\");\n+\n+        stm.execute(\n+            \"INSERT INTO REPOSITORIES(PATH) VALUES ('r')\");\n+\n+        stm.execute(\n+            \"CREATE TABLE FILES (\" +\n+            \"ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\" +\n+            \"PATH VARCHAR(32672) NOT NULL,\" +\n+            \"REPOSITORY INT NOT NULL REFERENCES REPOSITORIES\" +\n+            \"    ON DELETE CASCADE,\" +\n+            \"UNIQUE (REPOSITORY, PATH))\");\n+\n+        stm.execute(\n+            \"INSERT INTO FILES(PATH, REPOSITORY) VALUES ('/adsf',1)\");\n+\n+        stm.execute(\n+            \"CREATE TABLE AUTHORS (\" +\n+            \"ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\" +\n+            \"REPOSITORY INT NOT NULL REFERENCES REPOSITORIES \" +\n+            \"           ON DELETE CASCADE,\" +\n+            \"NAME VARCHAR(32672) NOT NULL,\" +\n+            \"UNIQUE (REPOSITORY, NAME))\");\n+\n+        stm.execute(\n+            \"INSERT INTO AUTHORS(REPOSITORY, NAME) VALUES (1, 'xyz')\");\n+\n+        stm.execute(\n+            \"CREATE TABLE CHANGESETS (\" +\n+            \"ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\" +\n+            \"REPOSITORY INT NOT NULL REFERENCES REPOSITORIES \" +\n+            \"           ON DELETE CASCADE,\" +\n+            \"REVISION VARCHAR(1024) NOT NULL,\" +\n+            \"AUTHOR INT NOT NULL REFERENCES AUTHORS ON DELETE CASCADE,\" +\n+            \"TIME TIMESTAMP NOT NULL,\" +\n+            \"MESSAGE VARCHAR(32672) NOT NULL,\" +\n+            \"UNIQUE (REPOSITORY, REVISION))\");\n+\n+        stm.execute(\n+            \"INSERT INTO CHANGESETS(REPOSITORY, REVISION, \" +\n+            \"                       AUTHOR, TIME, MESSAGE)\" +\n+            \" VALUES (1,'',1,CURRENT_TIMESTAMP,'')\");\n+\n+        stm.execute(\n+            \"CREATE TABLE FILECHANGES (\" +\n+            \"ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\" +\n+            \"FILE INT NOT NULL REFERENCES FILES ON DELETE CASCADE,\" +\n+            \"CHANGESET INT NOT NULL REFERENCES CHANGESETS ON DELETE CASCADE,\" +\n+            \"UNIQUE (FILE, CHANGESET))\");\n+\n+        stm.execute(\"INSERT INTO FILECHANGES(FILE,CHANGESET) VALUES (1,1)\");\n+        stm.close();\n+        commit();\n+    }\n+\n+\n+    private void createDerby4330_union_tables()  throws SQLException {\n+        Statement stm = createStatement();\n+        stm.execute(\"CREATE TABLE FILECHANGES (\" +\n+                    \"ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\" +\n+                    \"FILE INT NOT NULL,\" +\n+                    \"CHANGESET INT NOT NULL,\" +\n+                    \"UNIQUE (FILE, CHANGESET))\");\n+\n+        stm.execute(\"CREATE TABLE FILECHANGES_2 (\" +\n+                    \"ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\" +\n+                    \"FILE INT NOT NULL,\" +\n+                    \"CHANGESET INT NOT NULL,\" +\n+                    \"UNIQUE (FILE, CHANGESET))\");\n+\n+        stm.execute(\"INSERT INTO FILECHANGES(FILE,CHANGESET) VALUES (1,1)\");\n+        stm.execute(\"INSERT INTO FILECHANGES_2(FILE,CHANGESET) VALUES (1,1)\");\n+        stm.close();\n+        commit();\n+    }\n+\n+\n+    private void setSchema(String schema) throws SQLException {\n+        Statement stm = createStatement();\n+        stm.execute(\"SET SCHEMA \" + schema);\n+        stm.close();\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/1d4b49f7545176a9063a2f193ca4a88888b51091",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/d3965ed0cc60591a0b467f41eaf4cbf1bcc82dc5",
        "message": "DERBY-2014: NullPointerException with NULLIF in GROUP BY clause\n\nThis change was contributed by Yip Ng (yipng168@gmail.com)\n\nThe NPE happens in isEquivalent() method where it does not handle\nvalue is null. (same symptom as DERBY-2008) and the patch addresses\nthis + additonal testcases.\n\nThe isEquivalent() method is used to compare the select column\nagainst the group by with expression. Note that it is comparing\nthe structural form of the two expressions for equivalence at bind phase\nand not comparing the actual row values at runtime to produce a result.\n\nThis patch converts all the tests in the previous patch into junit.\nAlso the javadoc for ValueNode.isEquivalent() method has been updated.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@471459 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_39",
        "file": [
            {
                "sha": "7dc5577561e70dfe6b33fcdb02bad5aa991042d2",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/1d4b49f7545176a9063a2f193ca4a88888b51091/java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java",
                "raw_url": "https://github.com/apache/derby/raw/1d4b49f7545176a9063a2f193ca4a88888b51091/java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java?ref=1d4b49f7545176a9063a2f193ca4a88888b51091",
                "patch": "@@ -282,7 +282,11 @@ protected boolean isEquivalent(ValueNode o) throws StandardException\n \t{\n \t\tif (isSameNodeType(o)) {\n \t\t\tConstantNode other = (ConstantNode)o;\n-\t\t\treturn other.getValue().compare(getValue()) == 0;\n+\t\t\t\n+\t\t\t// value can be null which represents a SQL NULL value.\n+\t\t\treturn ( (other.getValue() == null && getValue() == null) || \n+\t\t\t\t\t (other.getValue() != null && \n+\t\t\t\t\t\t\t other.getValue().compare(getValue()) == 0) );\n \t\t}\n \t\treturn false;\n \t}"
            },
            {
                "sha": "859038242252626a79896df325bf6e4e1a751539",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ValueNode.java",
                "status": "modified",
                "additions": 38,
                "deletions": 0,
                "changes": 38,
                "blob_url": "https://github.com/apache/derby/blob/1d4b49f7545176a9063a2f193ca4a88888b51091/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java",
                "raw_url": "https://github.com/apache/derby/raw/1d4b49f7545176a9063a2f193ca4a88888b51091/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java?ref=1d4b49f7545176a9063a2f193ca4a88888b51091",
                "patch": "@@ -1334,7 +1334,45 @@ public boolean isParameterNode()\n \t * Tests if this node is equivalent to the specified ValueNode. Two \n \t * ValueNodes are considered equivalent if they will evaluate to the same\n \t * value during query execution. \n+\t * <p> \n+\t * This method provides basic expression matching facility for the derived \n+\t * class of ValueNode and it is used by the language layer to compare the \n+\t * node structural form of the two expressions for equivalence at bind \n+\t * phase.  \n+\t *  <p>\n+\t * Note that it is not comparing the actual row values at runtime to produce \n+\t * a result; hence, when comparing SQL NULLs, they are considered to be \n+\t * equivalent and not unknown.  \n+\t *  <p>\n+\t * One usage case of this method in this context is to compare the select \n+\t * column expression against the group by expression to check if they are \n+\t * equivalent.  e.g.:\n+\t *  <p>\n+\t * SELECT c1+c2 FROM t1 GROUP BY c1+c2   \n+\t *  <p>\n+\t * In general, node equivalence is determined by the derived class of \n+\t * ValueNode.  But they generally abide to the rules below:\n+\t *  <ul>\n+\t * <li>The two ValueNodes must be of the same node type to be considered \n+\t *   equivalent.  e.g.:  CastNode vs. CastNode - equivalent (if their args \n+\t *   also match), ColumnReference vs CastNode - not equivalent.\n+\t *   \n+\t * <li>If node P contains other ValueNode(s) and so on, those node(s) must \n+\t *   also be of the same node type to be considered equivalent.\n+\t *   \n+\t * <li>If node P takes a parameter list, then the number of arguments and its \n+\t *   arguments for the two nodes must also match to be considered \n+\t *   equivalent.  e.g.:  CAST(c1 as INTEGER) vs CAST(c1 as SMALLINT), they \n+\t *   are not equivalent.\n+\t *   \n+\t * <li>When comparing SQL NULLs in this context, they are considered to be \n+\t *   equivalent.\n \t * \n+\t * <li>If this does not apply or it is determined that the two nodes are not \n+\t *   equivalent then the derived class of this method should return false; \n+\t *   otherwise, return true.\n+\t * </ul>   \n+\t *   \n \t * @param other the node to compare this ValueNode against.\n \t * @return <code>true</code> if the two nodes are equivalent, \n \t * <code>false</code> otherwise."
            },
            {
                "sha": "3ce5985985c73ded262fc0e47459e4c6fd9293b4",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/groupBy.out",
                "status": "modified",
                "additions": 0,
                "deletions": 24,
                "changes": 24,
                "blob_url": "https://github.com/apache/derby/blob/1d4b49f7545176a9063a2f193ca4a88888b51091/java/testing/org/apache/derbyTesting/functionTests/master/groupBy.out",
                "raw_url": "https://github.com/apache/derby/raw/1d4b49f7545176a9063a2f193ca4a88888b51091/java/testing/org/apache/derbyTesting/functionTests/master/groupBy.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/groupBy.out?ref=1d4b49f7545176a9063a2f193ca4a88888b51091",
                "patch": "@@ -636,28 +636,4 @@ select 10,avg(c) from t having 1 < 2;\n 10         |2          \n ij> drop table t;\n 0 rows inserted/updated/deleted\n-ij> -- DERBY-2008\n--- test SUBSTR with 2 args with GROUP BY expression\n-create table dt (vc varchar(30));\n-0 rows inserted/updated/deleted\n-ij> insert into dt values ('1928-09-21'), ('1903-12-08');\n-2 rows inserted/updated/deleted\n-ij> -- ok\n-select substr(vc, 3) from dt group by substr(vc, 3);\n-1                             \n-------------------------------\n-03-12-08                      \n-28-09-21                      \n-ij> select substr(vc, 3, 4) from dt group by substr(vc, 3, 4);\n-1   \n-----\n-03-1\n-28-0\n-ij> -- expect errors\n-select substr(vc, 3, 4) from dt group by substr(vc, 3);\n-ERROR 42Y30: The SELECT list of a grouped query contains at least one invalid expression. If a SELECT list has a GROUP BY, the list may only contain valid grouping expressions and valid aggregate expressions.  \n-ij> select substr(vc, 3) from dt group by substr(vc, 3, 4);\n-ERROR 42Y30: The SELECT list of a grouped query contains at least one invalid expression. If a SELECT list has a GROUP BY, the list may only contain valid grouping expressions and valid aggregate expressions.  \n-ij> drop table dt;\n-0 rows inserted/updated/deleted\n ij> "
            },
            {
                "sha": "abb8eb1318638d4f106a75e7740cbdddcc86a6cc",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java",
                "status": "modified",
                "additions": 115,
                "deletions": 3,
                "changes": 118,
                "blob_url": "https://github.com/apache/derby/blob/1d4b49f7545176a9063a2f193ca4a88888b51091/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java",
                "raw_url": "https://github.com/apache/derby/raw/1d4b49f7545176a9063a2f193ca4a88888b51091/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java?ref=1d4b49f7545176a9063a2f193ca4a88888b51091",
                "patch": "@@ -36,7 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n public class GroupByExpressionTest extends BaseJDBCTestCase\n {\n \n-    private static String[][] TABLES = { \n+\tprivate static String[][] TABLES = { \n         {\"test\", \"create table test (c1 int, c2 int, c3 int, c4 int)\"},\n         {\"coal\", \"create table coal (vc1 varchar(2), vc2 varchar(2))\"},\n         {\"alltypes\", \n@@ -45,7 +45,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n             \" d double precision, r real, \" + \n             \" dt date, t time, ts timestamp, \" +\n             \" b char(2) for bit data, bv varchar(8) for bit data, \" +\n-            \" lbv long varchar for bit data, dc decimal(5,2))\"}};\n+            \" lbv long varchar for bit data, dc decimal(5,2))\"},\n+        {\"t1\", \"create table t1 (c1 varchar(30))\"},\n+        {\"t2\", \"create table t2 (c1 varchar(10))\"},\n+        {\"t3\", \"create table t3 (c1 int, c2 int)\"}\n+    };\n+\n     private static String[][] FUNCTIONS = {\n         {\"r\", \"create function r() returns double external name \" +\n             \"'java.lang.Math.random' language java parameter style java\"}};\n@@ -182,6 +187,81 @@ public void testMiscExpressions() throws Exception\n                         {\"dupl\", new Integer(14)},\n                         {\"good\", new Integer(1)}});\n \n+        // DERBY-2008 \n+        // substr (2-args)\n+        verifyQueryResults(\n+                \"substr-Q1\",\n+                \"select substr(c1, 3) from t1 group by substr(c1, 3)\",\n+                new String[][] { {\"03-12-08\"},\n+                                 {\"28-09-21\"} });\n+        // substr (3-args)\n+        verifyQueryResults(\n+                \"substr-Q2\",\n+                \"select substr(c1, 3, 4) from t1 group by substr(c1, 3, 4)\",\n+                new String[][] { {\"03-1\"},\n+                                 {\"28-0\"} });\n+\n+        // ltrim\n+        verifyQueryResults(\n+                \"ltrim\",\n+                \"select ltrim(c1) from t2 group by ltrim(c1)\",\n+                new String[][] { {\"123 \"},\n+                                 {\"abc \"} });\n+\n+        // rtrim\n+        verifyQueryResults(\n+                \"rtrim\",\n+                \"select rtrim(c1) from t2 group by rtrim(c1)\",\n+                new String[][] { {\"123\"},\n+                                 {\"abc\"} });\n+\n+        // locate (2-args)\n+        verifyQueryResults(\n+                \"locate-Q1\",\n+                \"select locate(c1, 'abc') from t2 group by locate(c1, 'abc')\",\n+                new int[][] { { 0 }, \n+                              { 1 } });\n+\n+        // locate (3-args)\n+        verifyQueryResults(\n+                \"locate-Q2\",\n+                \"select locate(c1, 'abc', 1) from t2 group by locate(c1, 'abc',1)\",\n+                new int[][] { { 0 }, \n+                              { 1 } });\n+        \n+        // cast with NULL\n+        verifyQueryResults(\n+                \"cast-Q2\",\n+                \"select (cast (NULL as INTEGER)) from t2 group by (cast (NULL as INTEGER))\",\n+                new Object[][] { { null } } );\n+\n+        // DERBY-2014\n+        // nullif\n+        verifyQueryResults(\n+                \"nullif-Q1\",\n+                \"select nullif(c1,c1) from t3 group by nullif(c1,c1)\",\n+                new Object[][] { { null } } );\n+\n+        verifyQueryResults(\n+                \"nullif-Q2\",\n+                \"select nullif(c1,c2) from t3 group by nullif(c1,c2)\",\n+                new Object[][] { { new Integer(5) }, \n+                                 { null } });\n+\n+        verifyQueryResults(\n+                \"nullif-Q3\",\n+                \"select nullif(c1,10) from t3 group by nullif(c1,10)\",\n+                new Object[][] { { new Integer(1) },\n+                                 { new Integer(2) },\n+                                 { new Integer(3) },\n+                                 { new Integer(5) },\n+                                 { null } });\n+\n+        verifyQueryResults(\n+                \"nullif-Q4\",\n+                \"select nullif(1,c1) from t3 group by nullif(1,c1)\",\n+                new Object[][] { { new Integer(1) }, \n+                                 { null } });\n     }\n     \n     public void testExtractOperator() throws Exception\n@@ -263,6 +343,34 @@ public void testNegative()\n         assertCompileError(\n                 \"42Y30\",\n                 \"select substr(c, 3, 4) from alltypes group by substr(v, 3, 4)\");\n+\n+        // DERBY-2008\n+        // invalid grouping expression \n+        assertCompileError(\n+                \"42Y30\",\n+                \"select substr(c1, 3, 4) from t1 group by substr(c1, 3)\");\n+        assertCompileError(\n+                \"42Y30\",\n+                \"select substr(c1, 3) from t1 group by substr(c1, 3, 4)\");\n+        assertCompileError(\n+                \"42Y30\",\n+                \"select locate(c1, 'abc') from t2 group by locate(c1, 'abc',3)\");\n+        assertCompileError(\n+                \"42Y30\",\n+                \"select locate(c1, 'abc',2) from t2 group by locate(c1, 'abc')\");\n+        assertCompileError(\n+                \"42Y30\",\n+                \"select locate(c1, 'abc',2) from t2 group by locate(c1, 'abc',3)\");\n+\n+        // DERBY-2014\n+        // invalid grouping expression\n+        assertCompileError(\n+                \"42Y30\",\n+                \"select nullif(c1,c2) from t3 group by nullif(c2,c1)\");\n+        assertCompileError(\n+                \"42Y30\",\n+                \"select nullif(c1,100) from t3 group by nullif(c1,200)\");\n+\n         // aggregates in group by list.\n         assertCompileError(\n                 \"42Y26\",\n@@ -463,7 +571,11 @@ public void setUp() throws Exception\n                     \" date('1992-03-04'), time('12:30:42'), \" + \n                     \" timestamp('1992-03-04 12:30:42'), \" +\n                     \" X'12af', X'1111111111111111', X'1234', 111.11) \" );\n-                \n+\n+                s.execute(\"insert into t1 values ('1928-09-21'), ('1903-12-08')\");\n+                s.execute(\"insert into t2 values '123 ', 'abc ', '123', 'abc'\") ;\n+                s.execute(\"insert into t3 values (1,1), (2,2), (2,2), (3,3), (null, null), (5,100)\");\n+\n                 s.close();\n                 c.commit();\n                 c.close();"
            },
            {
                "sha": "a3b734f25d1fdccb1ebbbbdacf7194610c84fc8c",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/groupBy.sql",
                "status": "modified",
                "additions": 0,
                "deletions": 12,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/1d4b49f7545176a9063a2f193ca4a88888b51091/java/testing/org/apache/derbyTesting/functionTests/tests/lang/groupBy.sql",
                "raw_url": "https://github.com/apache/derby/raw/1d4b49f7545176a9063a2f193ca4a88888b51091/java/testing/org/apache/derbyTesting/functionTests/tests/lang/groupBy.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/groupBy.sql?ref=1d4b49f7545176a9063a2f193ca4a88888b51091",
                "patch": "@@ -360,15 +360,3 @@ select 10 from t having 1 < 2;\n -- ok, gives one row\n select 10,avg(c) from t having 1 < 2;\n drop table t;\n-\n--- DERBY-2008\n--- test SUBSTR with 2 args with GROUP BY expression\n-create table dt (vc varchar(30));\n-insert into dt values ('1928-09-21'), ('1903-12-08');\n--- ok\n-select substr(vc, 3) from dt group by substr(vc, 3); \n-select substr(vc, 3, 4) from dt group by substr(vc, 3, 4); \n--- expect errors\n-select substr(vc, 3, 4) from dt group by substr(vc, 3); \n-select substr(vc, 3) from dt group by substr(vc, 3, 4);\n-drop table dt;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/d3fbd72700c8839e8eafb5d4c45049e0a9661549",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/fa6bcd6bd16dc632f764a5570f01157f01f7d36f",
        "message": "DERBY-6373: NPE in Statement.getWarnings()\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1534523 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_40",
        "file": [
            {
                "sha": "94349d4d4f87958ba9cfa3a1fa4a6eb808fc2dc1",
                "filename": "java/client/org/apache/derby/client/am/SqlWarning.java",
                "status": "modified",
                "additions": 2,
                "deletions": 10,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/d3fbd72700c8839e8eafb5d4c45049e0a9661549/java/client/org/apache/derby/client/am/SqlWarning.java",
                "raw_url": "https://github.com/apache/derby/raw/d3fbd72700c8839e8eafb5d4c45049e0a9661549/java/client/org/apache/derby/client/am/SqlWarning.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/SqlWarning.java?ref=d3fbd72700c8839e8eafb5d4c45049e0a9661549",
                "patch": "@@ -71,17 +71,9 @@ public SQLWarning getSQLWarning()\n         // Set up the nextException chain\n         if ( nextWarning_ != null )\n         {\n-            // The exception chain gets constructed automatically through \n+            // The warning chain gets constructed automatically through\n             // the beautiful power of recursion\n-            //\n-            // We have to use the right method to convert the next exception\n-            // depending upon its type.  Luckily with all the other subclasses\n-            // of SQLException we don't have to make our own matching \n-            // subclasses because \n-            sqlw.setNextException(\n-                nextException_ instanceof SqlWarning ?\n-                    ((SqlWarning)nextException_).getSQLWarning() :\n-                    nextException_.getSQLException());\n+            sqlw.setNextWarning(nextWarning_.getSQLWarning());\n         }\n         \n         return sqlw;"
            },
            {
                "sha": "98c218a1d9702aebabdfdbbed1d358ce3f327b95",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java",
                "status": "modified",
                "additions": 33,
                "deletions": 0,
                "changes": 33,
                "blob_url": "https://github.com/apache/derby/blob/d3fbd72700c8839e8eafb5d4c45049e0a9661549/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java",
                "raw_url": "https://github.com/apache/derby/raw/d3fbd72700c8839e8eafb5d4c45049e0a9661549/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java?ref=d3fbd72700c8839e8eafb5d4c45049e0a9661549",
                "patch": "@@ -32,6 +32,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.sql.SQLWarning;\n import java.sql.Statement;\n import java.sql.Time;\n import java.sql.Timestamp;\n@@ -359,6 +360,38 @@ public void testMultipleStatementsBatch() throws SQLException {\n         commit();\n     }\n \n+    /**\n+     * Regression test case for DERBY-6373.\n+     */\n+    public void testMultipleStatementsBatchWithWarnings() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"insert into t1 values 1\");\n+\n+        // Execute a batch of three deletes. All of them should get a warning\n+        // because no rows matched the WHERE clause.\n+        s.addBatch(\"delete from t1 where c1 in (select 0 from t1)\");\n+        s.addBatch(\"delete from t1 where c1 in (select 0 from t1)\");\n+        s.addBatch(\"delete from t1 where c1 in (select 0 from t1)\");\n+        s.executeBatch();\n+\n+        // Used to fail with NullPointerException on the client.\n+        SQLWarning w = s.getWarnings();\n+\n+        // Expect one warning per delete on the client. Embedded gives only\n+        // a single warning.\n+        assertSQLState(\"02000\", w);\n+        w = w.getNextWarning();\n+        if (usingEmbedded()) {\n+            assertNull(w);\n+        } else {\n+            assertSQLState(\"02000\", w);\n+            w = w.getNextWarning();\n+            assertSQLState(\"02000\", w);\n+            w = w.getNextWarning();\n+            assertNull(w);\n+        }\n+    }\n+\n     // try executing a batch with 1000 statements in it.\n     public void test1000StatementsBatch() throws SQLException {\n         int updateCount[];"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/4f1dcde01543d1e64d04e66ee020ec2542d9d31e",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/c0f956b48966bcf9abd230e78939b684cb3886b0",
        "message": "DERBY-6714: RuntimeInfoTest failed with insufficient data from server\n\nTighten up checks for sessions being closed while reading runtime info from\nthem, in order to protect against NullPointerExceptions on the server.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1620608 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_41",
        "file": [
            {
                "sha": "e458680e7242830eb2531a485faea1bda5cc1ea0",
                "filename": "java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "status": "modified",
                "additions": 5,
                "deletions": 2,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/4f1dcde01543d1e64d04e66ee020ec2542d9d31e/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "raw_url": "https://github.com/apache/derby/raw/4f1dcde01543d1e64d04e66ee020ec2542d9d31e/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java?ref=4f1dcde01543d1e64d04e66ee020ec2542d9d31e",
                "patch": "@@ -9180,10 +9180,13 @@ long getBytesWritten() {\n \n     protected String buildRuntimeInfo(String indent, LocalizedResource localLangUtil )\n     {\n-        if (!hasSession()) {\n+        // DERBY-6714: session can be null if the session gets closed just\n+        // as we try to read its runtime info.\n+        Session s = session;\n+        if (s == null) {\n             return \"\";\n         } else {\n-            return session.buildRuntimeInfo(\"\", localLangUtil) + \"\\n\";\n+            return s.buildRuntimeInfo(\"\", localLangUtil) + \"\\n\";\n         }\n     }\n "
            },
            {
                "sha": "605e295e68be0d0b06b1cd767741f29d7d68bc93",
                "filename": "java/drda/org/apache/derby/impl/drda/Database.java",
                "status": "modified",
                "additions": 11,
                "deletions": 3,
                "changes": 14,
                "blob_url": "https://github.com/apache/derby/blob/4f1dcde01543d1e64d04e66ee020ec2542d9d31e/java/drda/org/apache/derby/impl/drda/Database.java",
                "raw_url": "https://github.com/apache/derby/raw/4f1dcde01543d1e64d04e66ee020ec2542d9d31e/java/drda/org/apache/derby/impl/drda/Database.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/Database.java?ref=4f1dcde01543d1e64d04e66ee020ec2542d9d31e",
                "patch": "@@ -407,20 +407,28 @@ final int getPrepareIsolation() throws SQLException\n \n     protected String buildRuntimeInfo(String indent, LocalizedResource localLangUtil)\n     {\n-      \n+        // DERBY-6714: stmtTable can be null if the session gets closed\n+        // while we are constructing the runtime info. Create a local copy\n+        // and check for null before accessing it.\n+        Hashtable<Object, DRDAStatement> statements = stmtTable;\n+\n         String s = indent + \n         localLangUtil.getTextMessage(\"DRDA_RuntimeInfoDatabase.I\") +\n             dbName + \"\\n\" +  \n         localLangUtil.getTextMessage(\"DRDA_RuntimeInfoUser.I\")  +\n             userId +  \"\\n\" +\n         localLangUtil.getTextMessage(\"DRDA_RuntimeInfoNumStatements.I\") +\n-            stmtTable.size() + \"\\n\";\n+            (statements == null ? 0 : statements.size()) + \"\\n\";\n         s += localLangUtil.getTextMessage(\"DRDA_RuntimeInfoPreparedStatementHeader.I\");\n-        for (Enumeration e = stmtTable.elements() ; e.hasMoreElements() ;) \n+\n+        if (statements != null) {\n+            for (Enumeration e = statements.elements(); e.hasMoreElements(); )\n                 {\n                     s += ((DRDAStatement) e.nextElement()).toDebugString(indent\n                                                                          +\"\\t\") +\"\\n\";\n                 }\n+        }\n+\n         return s;\n     }\n     "
            },
            {
                "sha": "c5df9dadeab643805a05420629cde4aa0890ffa0",
                "filename": "java/drda/org/apache/derby/impl/drda/Session.java",
                "status": "modified",
                "additions": 9,
                "deletions": 4,
                "changes": 13,
                "blob_url": "https://github.com/apache/derby/blob/4f1dcde01543d1e64d04e66ee020ec2542d9d31e/java/drda/org/apache/derby/impl/drda/Session.java",
                "raw_url": "https://github.com/apache/derby/raw/4f1dcde01543d1e64d04e66ee020ec2542d9d31e/java/drda/org/apache/derby/impl/drda/Session.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/Session.java?ref=4f1dcde01543d1e64d04e66ee020ec2542d9d31e",
                "patch": "@@ -286,10 +286,15 @@ protected  String buildRuntimeInfo(String indent, LocalizedResource localLangUti\n         String s = \"\";\n         s += indent +  localLangUtil.getTextMessage(\"DRDA_RuntimeInfoSessionNumber.I\")\n             + connNum + \"\\n\";\n-        if (database == null)\n-            return s;\n-        s += database.buildRuntimeInfo(indent,localLangUtil);\n-        s += \"\\n\";\n+\n+        // DERBY-6714: database can be null if the session gets closed\n+        // while we construct the runtime info.\n+        Database db = database;\n+        if (db != null) {\n+            s += db.buildRuntimeInfo(indent, localLangUtil);\n+            s += \"\\n\";\n+        }\n+\n         return s;\n     }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/591ff9f9781e2b2dc2964366dc118d14ad3adff4",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/4637dbf55d56c8fbd649ec3270efda783639031a",
        "message": "DERBY-6565 ROW_NUMBER function throws NullPointerException in UPDATE statement\n\nPatch *derby-6565-forbid.diff* which makes it illegal to use window\nfunctions in the update source. Adds a new test for this error\ncondition. Also cleans up some Javadocs and modernizes some loops.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1615982 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_42",
        "file": [
            {
                "sha": "28c137b19a5261bea2e6ad61f31c7f1e0f40c36f",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "status": "modified",
                "additions": 5,
                "deletions": 4,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/591ff9f9781e2b2dc2964366dc118d14ad3adff4/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "raw_url": "https://github.com/apache/derby/raw/591ff9f9781e2b2dc2964366dc118d14ad3adff4/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java?ref=591ff9f9781e2b2dc2964366dc118d14ad3adff4",
                "patch": "@@ -35,30 +35,28 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.iapi.services.compiler.MethodBuilder;\n import org.apache.derby.iapi.services.context.ContextManager;\n import org.apache.derby.iapi.services.io.FormatableBitSet;\n-import org.apache.derby.shared.common.sanity.SanityManager;\n import org.apache.derby.iapi.sql.StatementType;\n import org.apache.derby.iapi.sql.compile.CompilerContext;\n import org.apache.derby.iapi.sql.compile.TagFilter;\n import org.apache.derby.iapi.sql.conn.Authorizer;\n import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;\n-import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;\n import org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor;\n import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;\n import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;\n import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;\n import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;\n import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;\n import org.apache.derby.iapi.sql.dictionary.DataDictionary;\n-import org.apache.derby.iapi.sql.dictionary.TriggerDescriptorList;\n import org.apache.derby.iapi.sql.dictionary.TableDescriptor;\n import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;\n+import org.apache.derby.iapi.sql.dictionary.TriggerDescriptorList;\n import org.apache.derby.iapi.sql.execute.ConstantAction;\n import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;\n import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;\n import org.apache.derby.iapi.store.access.TransactionController;\n-import org.apache.derby.iapi.types.DataTypeDescriptor;\n import org.apache.derby.iapi.types.TypeId;\n import org.apache.derby.iapi.util.ReuseFactory;\n+import org.apache.derby.shared.common.sanity.SanityManager;\n import org.apache.derby.vti.DeferModification;\n \n /**\n@@ -549,6 +547,9 @@ else if (cursorTargetTableName != null)\n         //\n         if ( inMatchingClause() ) { associateAddedColumns(); }\n \n+        // SQL 2011, section 6.10, SR 4b.\n+        SelectNode.checkNoWindowFunctions(resultSet, \"<update source>\");\n+\n \t\t/* Bind the expressions */\n \t\tsuper.bindExpressions();\n "
            },
            {
                "sha": "7ac709dcf1067852379ecbb3302f447af0a4fc76",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/WindowResultSetNode.java",
                "status": "modified",
                "additions": 13,
                "deletions": 13,
                "changes": 26,
                "blob_url": "https://github.com/apache/derby/blob/591ff9f9781e2b2dc2964366dc118d14ad3adff4/java/engine/org/apache/derby/impl/sql/compile/WindowResultSetNode.java",
                "raw_url": "https://github.com/apache/derby/raw/591ff9f9781e2b2dc2964366dc118d14ad3adff4/java/engine/org/apache/derby/impl/sql/compile/WindowResultSetNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/WindowResultSetNode.java?ref=591ff9f9781e2b2dc2964366dc118d14ad3adff4",
                "patch": "@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n package org.apache.derby.impl.sql.compile;\n \n import java.util.ArrayList;\n+import java.util.Iterator;\n import java.util.List;\n import org.apache.derby.iapi.error.StandardException;\n import org.apache.derby.iapi.reference.ClassName;\n@@ -58,6 +59,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n      *\n      * @exception StandardException     Thrown on error\n      */\n+    @SuppressWarnings(\"LeakingThisInConstructor\")\n     WindowResultSetNode(ResultSetNode            bottomPR,\n                         WindowDefinitionNode     windowDef,\n                         List<WindowFunctionNode> windowFuncCalls,\n@@ -82,7 +84,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n         setResultColumns( childResult.getResultColumns() );\n         childResult.setResultColumns(newBottomRCL);\n \n-        // Wrao purselved int a project/restrict as per convention.\n+        // Wrap ourselves in a project/restrict as per convention.\n         addNewPRNode();\n \n         // Add the extra result columns required\n@@ -92,7 +94,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     /**\n      * Add a new PR node.  Put the new PR under any sort.\n      *\n-     * @exception standard exception\n+     * @throws StandardException standard error policy\n      */\n     private void addNewPRNode()\n         throws StandardException\n@@ -167,9 +169,7 @@ private void addNewPRNode()\n         ResultColumnList bottomRCL  = childResult.getResultColumns();\n         ResultColumnList windowingRCL = getResultColumns();\n \n-        for (int i= 0; i< uniqueCols.size(); i++) {\n-            ValueNode crOrVcn = uniqueCols.get(i);\n-\n+        for (ValueNode crOrVcn : uniqueCols) {\n             ResultColumn newRC = new ResultColumn(\n                     \"##UnWindowingColumn\",\n                     crOrVcn,\n@@ -209,15 +209,18 @@ private void addNewPRNode()\n \n \n     /**\n+     * @param uniqueColRefs list of unique column references\n+     * @param cand the candidate to check is present in list\n      * @return {@code true} if an equivalent column reference to {@code cand}\n      *         is already present in {@code uniqueColRefs}\n+     * @throws StandardException standard error policy\n      */\n     private boolean colRefAlreadySeen(List<ValueNode> uniqueColRefs,\n                                       ColumnReference cand)\n             throws StandardException {\n \n-        for (int i= 0; i< uniqueColRefs.size(); i++) {\n-            ColumnReference cr = (ColumnReference)uniqueColRefs.get(i);\n+        for (ValueNode uniqueColRef : uniqueColRefs) {\n+            ColumnReference cr = (ColumnReference) uniqueColRef;\n \n             if (cr.isEquivalent(cand)) {\n                 return true;\n@@ -229,6 +232,8 @@ private boolean colRefAlreadySeen(List<ValueNode> uniqueColRefs,\n     /**\n      * Substitute new result columns for window function calls and add the\n      * result columns to childResult's list of columns.\n+     *\n+     * @throws StandardException standard error policy\n      */\n     private void addNewColumns() throws StandardException {\n         /*\n@@ -246,8 +251,7 @@ private void addNewColumns() throws StandardException {\n                 ResultSetNode.class);\n         parent.getResultColumns().accept(replaceCallsVisitor);\n \n-        for (int i=0; i < windowFuncCalls.size(); i++) {\n-            WindowFunctionNode winFunc = windowFuncCalls.get(i);\n+        for (WindowFunctionNode winFunc : windowFuncCalls) {\n \n             if (SanityManager.DEBUG) {\n                 SanityManager.ASSERT(\n@@ -307,10 +311,6 @@ private void addNewColumns() throws StandardException {\n     }\n \n \n-    /**\n-     * override\n-     * @see QueryTreeNode#generate\n-     */\n     @Override\n     void generate(ActivationClassBuilder acb, MethodBuilder mb)\n             throws StandardException"
            },
            {
                "sha": "34a61e52d106e312782d6c147dde25860c3c77cc",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/591ff9f9781e2b2dc2964366dc118d14ad3adff4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "raw_url": "https://github.com/apache/derby/raw/591ff9f9781e2b2dc2964366dc118d14ad3adff4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java?ref=591ff9f9781e2b2dc2964366dc118d14ad3adff4",
                "patch": "@@ -587,6 +587,12 @@ public void testBasicOperations()\n             s,\n             \"select * from t4 t_1 join t4 t_2 on \" +\n             \"                     t_1.a = row_number() over () + t_2.a\");\n+\n+        // DERBY-6565\n+        assertStatementError(\n+                LANG_WINDOW_FUNCTION_CONTEXT_ERROR,\n+                s,\n+                \"update t3 set y = y - row_number() over ()\");\n     }\n \n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/54a46498119e425108bc72deeb43e8ef4e1bbdbe",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/126f27bc3e379a8c76c1b72ac7faf0dcd3f755f7",
        "message": "DERBY-6189: Fix NPE involving rollback of temporary table.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1469802 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_43",
        "file": [
            {
                "sha": "cef45ec84bbefa10d67aa488b68ccda2359770da",
                "filename": "java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java",
                "status": "modified",
                "additions": 12,
                "deletions": 4,
                "changes": 16,
                "blob_url": "https://github.com/apache/derby/blob/54a46498119e425108bc72deeb43e8ef4e1bbdbe/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java",
                "raw_url": "https://github.com/apache/derby/raw/54a46498119e425108bc72deeb43e8ef4e1bbdbe/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java?ref=54a46498119e425108bc72deeb43e8ef4e1bbdbe",
                "patch": "@@ -951,6 +951,7 @@ private void tempTablesAndRollback()\n                     // conglomerate associated with it\n \n                     TableDescriptor td = tempTableInfo.getTableDescriptor();\n+                    invalidateCleanupDroppedTable( td );\n \n                     //remove the conglomerate created for this temp table\n                     tran.dropConglomerate(td.getHeapConglomerateId()); \n@@ -1004,18 +1005,25 @@ else if (tempTableInfo.getModifiedInSavepointLevel() >=\n                 tempTableInfo.setModifiedInSavepointLevel(-1);\n                 TableDescriptor td = tempTableInfo.getTableDescriptor();\n \n-                getDataDictionary().getDependencyManager().invalidateFor(\n-                        td, DependencyManager.DROP_TABLE, this);\n-\n-                cleanupTempTableOnCommitOrRollback(td, true);\n+                invalidateCleanupDroppedTable( td );\n             } \n             // there is no else here because there is no special processing \n             // required for temp tables declares in earlier work of \n             // unit/transaction and not modified\n         }\n     \n         if (allDeclaredGlobalTempTables.size() == 0)\n+        {\n             allDeclaredGlobalTempTables = null;\n+        }\n+    }\n+\n+    /** Invalidate a dropped temp table */\n+    private void    invalidateCleanupDroppedTable( TableDescriptor td )\n+        throws StandardException\n+    {\n+        getDataDictionary().getDependencyManager().invalidateFor( td, DependencyManager.DROP_TABLE, this );\n+        cleanupTempTableOnCommitOrRollback( td, true );\n     }\n \n     /**"
            },
            {
                "sha": "54d6005cb5d201e1f4adcf60389fae56bb26c997",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaJDBC30Test.java",
                "status": "modified",
                "additions": 29,
                "deletions": 1,
                "changes": 30,
                "blob_url": "https://github.com/apache/derby/blob/54a46498119e425108bc72deeb43e8ef4e1bbdbe/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaJDBC30Test.java",
                "raw_url": "https://github.com/apache/derby/raw/54a46498119e425108bc72deeb43e8ef4e1bbdbe/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaJDBC30Test.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaJDBC30Test.java?ref=54a46498119e425108bc72deeb43e8ef4e1bbdbe",
                "patch": "@@ -927,5 +927,33 @@ public void testPooledConnectionClosed() throws SQLException {\n         JDBC.assertSingleValueResultSet(s.executeQuery(\n                 \"select count(*) from SESSION.tx\") , \"3\");\n         s.executeUpdate(\"drop table SESSION.tx\");\n-    }\t\n+    }\n+\n+    /**\n+     * Test that we don't get an NPE when re-using a PreparedStatement\n+     * on a temp table declared and then rolled back. See DERBY-6189.\n+     */\n+    public  void    test_derby_6189() throws Exception\n+    {\n+        Connection  conn = getConnection();\n+\n+        conn.prepareStatement\n+            ( \"DECLARE GLOBAL TEMPORARY TABLE SESSION.t6189( c21 int, c22 int) not logged on commit preserve rows\" )\n+            .execute();        \n+        PreparedStatement pStmtInsert = conn.prepareStatement( \"insert into SESSION.t6189 values (23, 1)\" );\n+\n+        pStmtInsert.execute();\n+\n+        conn.rollback();\n+\n+        try {\n+            pStmtInsert.execute();\n+            fail( \"Should fail!\" );\n+        }\n+        catch ( SQLException se)\n+        {\n+            assertEquals( \"42X05\", se.getSQLState() );\n+        }\n+    }\n+    \n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/6964bdc5df6ba26644cd80a5637915ee065d52ae",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/fd6aa02034d422e5fe97388fad8216e01459c1df",
        "message": "DERBY-6108: Fix NPE in small device tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1456111 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_44",
        "file": [
            {
                "sha": "19fa5830f4b25d1786e1aeab1475d48de01b3914",
                "filename": "java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java",
                "status": "modified",
                "additions": 6,
                "deletions": 2,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/6964bdc5df6ba26644cd80a5637915ee065d52ae/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java",
                "raw_url": "https://github.com/apache/derby/raw/6964bdc5df6ba26644cd80a5637915ee065d52ae/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java?ref=6964bdc5df6ba26644cd80a5637915ee065d52ae",
                "patch": "@@ -180,11 +180,15 @@ public Object run()  {\n                 setBeanProperty(ds, property, value);\n             }\n \n-            ds.setLoginTimeout( TestConfiguration.getCurrent().getLoginTimeout() );\n+            if ( !BaseTestCase.isJ9Platform() && !BaseTestCase.isCVM() )\n+            {\n+                ds.setLoginTimeout( TestConfiguration.getCurrent().getLoginTimeout() );\n+            }\n             \n             return ds;\n         } catch (Exception e) {\n-            BaseTestCase.fail(\"unexpected error\", e);\n+            BaseTestCase.printStackTrace( e );\n+            BaseTestCase.fail(\"unexpected error: \" + e.getMessage(), e);\n             return null;\n         }\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/75227075f76b4222d3b346b7662e39b1d84767eb",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/0f43aec711b158ad9a142d688f7940caba4bd84c",
        "message": "DERBY-5111 NullPointerException on unique constraint violation with unique index\n\nPatch derby-5111-test, which adds the repro for this issue as a new test case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1582819 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_45",
        "file": [
            {
                "sha": "db00c33339d8a9565697c237bb6eef3ad0b507f8",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/PrimaryKeyTest.java",
                "status": "modified",
                "additions": 24,
                "deletions": 6,
                "changes": 30,
                "blob_url": "https://github.com/apache/derby/blob/75227075f76b4222d3b346b7662e39b1d84767eb/java/testing/org/apache/derbyTesting/functionTests/tests/lang/PrimaryKeyTest.java",
                "raw_url": "https://github.com/apache/derby/raw/75227075f76b4222d3b346b7662e39b1d84767eb/java/testing/org/apache/derbyTesting/functionTests/tests/lang/PrimaryKeyTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/PrimaryKeyTest.java?ref=75227075f76b4222d3b346b7662e39b1d84767eb",
                "patch": "@@ -25,13 +25,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.sql.ResultSetMetaData;\n import java.sql.SQLException;\n import java.sql.Statement;\n-\n import junit.framework.Test;\n import junit.framework.TestSuite;\n-\n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n import org.apache.derbyTesting.junit.JDBC;\n-import org.apache.derbyTesting.junit.Utilities;\n \n public class PrimaryKeyTest extends BaseJDBCTestCase\n {\t\n@@ -41,13 +38,12 @@ public PrimaryKeyTest(String name)      {\n \tpublic static Test suite() {\n \t\treturn new TestSuite(PrimaryKeyTest.class);\n \t}\n+\n+    @Override\n \tprotected void setUp() throws Exception {\n \t\tsuper.setUp();\n \t\tgetConnection().setAutoCommit(false);\n \t}\n-\tprotected void tearDown() throws Exception {\n-\t\tsuper.tearDown();\n-\t}\n \n \t\t\t\t\t/************ NEGATIVE TESTS ************/\t\n \t/**\n@@ -278,5 +274,27 @@ public void testBug5420() throws SQLException\n \t\tassertUpdateCount(s , 0 , \"drop table B5420_5.t5\");\n \t\tassertUpdateCount(s , 0 , \"drop table B5420_6.t6\");\n \t}\n+\n+    public void testDerby5111() throws SQLException {\n+        final Statement s = createStatement();\n+        s.executeUpdate(\"create table t1 (t1_id integer not null, \" +\n+                \"t0_id integer not null, value varchar(75) not null)\");\n+\n+        try {\n+            s.executeUpdate(\"create unique index ui1 on t1 (t1_id)\");\n+            s.executeUpdate(\"alter table t1 add constraint pk1 \" +\n+                    \"                       primary key (t1_id)\");\n+            s.executeUpdate(\"create unique index ui2 on t1 (t0_id, value)\");\n+\n+            s.executeUpdate(\"insert into t1 values(0, 0, 'Test')\");\n+\n+            // The next statement tries to insert a duplicate.  It used to\n+            // throw an NPE before the fix.\n+            assertStatementError(\n+                    \"23505\", s, \"insert into t1 values(1, 0, 'Test')\");\n+        } finally {\n+            try { s.executeUpdate(\"drop table t1\"); } catch (SQLException e){}\n+        }\n+    }\n }\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/3e293c2435ff52a91169f8ec8f555c0b83fbec2c",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/15e94e0d3b31c9d0bb28841f7e591536832a30b1",
        "message": "DERBY-4403: Disallow subqueries in the GROUP BY list\n\nQueries that were grouped by subqueries used to fail with a\nNullPointerException or an assert failure. Make them fail with a\nproper syntax error instead.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1575226 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_46",
        "file": [
            {
                "sha": "3b8ac1d03c73050bc0e08580ad6b544255758469",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/GroupByList.java",
                "status": "modified",
                "additions": 4,
                "deletions": 5,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/engine/org/apache/derby/impl/sql/compile/GroupByList.java",
                "raw_url": "https://github.com/apache/derby/raw/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/engine/org/apache/derby/impl/sql/compile/GroupByList.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/GroupByList.java?ref=3e293c2435ff52a91169f8ec8f555c0b83fbec2c",
                "patch": "@@ -213,11 +213,10 @@ void bindGroupByColumns(SelectNode select, List<AggregateNode> aggregates)\n \t\t}\n \n \t\t/* Verify that no subqueries got added to the dummy list */\n-\t\tif (SanityManager.DEBUG)\n-\t\t{\n-\t\t\tSanityManager.ASSERT(dummySubqueryList.size() == 0,\n-\t\t\t\t\"dummySubqueryList.size() is expected to be 0\");\n-\t\t}\n+        if (dummySubqueryList.size() != 0) {\n+            throw StandardException.newException(\n+                    SQLState.LANG_SUBQUERY_IN_GROUPBY_LIST);\n+        }\n \n \t\tnumGroupingColsAdded+= numColsAddedHere;\n \t}"
            },
            {
                "sha": "9fbada604d26fc53f8e22106ccf916ca79308328",
                "filename": "java/engine/org/apache/derby/loc/messages.xml",
                "status": "modified",
                "additions": 6,
                "deletions": 1,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/engine/org/apache/derby/loc/messages.xml",
                "raw_url": "https://github.com/apache/derby/raw/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/engine/org/apache/derby/loc/messages.xml",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/loc/messages.xml?ref=3e293c2435ff52a91169f8ec8f555c0b83fbec2c",
                "patch": "@@ -2432,10 +2432,15 @@ Guide.\n             </msg>\n \n             <msg>\n-                <name>42Y26</name>\n+                <name>42Y26.S.0</name>\n                 <text>Aggregates are not allowed in the GROUP BY list.</text>\n             </msg>\n \n+            <msg>\n+                <name>42Y26.S.1</name>\n+                <text>Subqueries are not allowed in the GROUP BY list.</text>\n+            </msg>\n+\n             <msg>\n                 <name>42Y27</name>\n                 <text>Parameters are not allowed in the trigger action.</text>"
            },
            {
                "sha": "df1c62c42a0f4e71506e63b74a8070b9ddbba3a8",
                "filename": "java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "raw_url": "https://github.com/apache/derby/raw/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/shared/org/apache/derby/shared/common/reference/SQLState.java?ref=3e293c2435ff52a91169f8ec8f555c0b83fbec2c",
                "patch": "@@ -982,7 +982,8 @@ The message identifier (ie. the value that matches a field in this class)\n \tString LANG_BAD_J_D_B_C_TYPE_INFO                                  = \"42Y23\";\n \tString LANG_VIEW_NOT_UPDATEABLE                                    = \"42Y24\";\n \tString LANG_UPDATE_SYSTEM_TABLE_ATTEMPTED                          = \"42Y25\";\n-    \tString LANG_AGGREGATE_IN_GROUPBY_LIST                              = \"42Y26\";\n+    String LANG_AGGREGATE_IN_GROUPBY_LIST                              = \"42Y26.S.0\";\n+    String LANG_SUBQUERY_IN_GROUPBY_LIST                               = \"42Y26.S.1\";\n \tString LANG_NO_PARAMS_IN_TRIGGER_ACTION                            = \"42Y27\";\n \t// String LANG_NO_TRIGGER_ON_SYSTEM_TABLE                             = \"42Y28\"; -- replaced by 42X62\n \tString LANG_INVALID_NON_GROUPED_SELECT_LIST                        = \"42Y29\";"
            },
            {
                "sha": "f594a72fac06951ac18e04b9733e5c4ab04841b3",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "status": "modified",
                "additions": 7,
                "deletions": 1,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "raw_url": "https://github.com/apache/derby/raw/3e293c2435ff52a91169f8ec8f555c0b83fbec2c/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java?ref=3e293c2435ff52a91169f8ec8f555c0b83fbec2c",
                "patch": "@@ -370,7 +370,13 @@ public void testGroupByErrors()\n         \n         assertStatementError(\"X0X67\", st,\n             \" select c1, max(1) from unmapped group by c1\");\n-\t\tst.close();\n+\n+        // group by on aggregate\n+        assertCompileError(\"42Y26\", \"select sum(a) from t1 group by sum(a)\");\n+\n+        // group by on subquery (DERBY-4403)\n+        assertCompileError(\"42Y26\",\n+                \"select sum(a) from t1 group by (select a from t1)\");\n \t}\n \n \t/**"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/5dcbe31ee0f7bc09e0e48a6e36b81beeffc70e26",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/b8339336a78a17a790f51898dd58ec8b04f7eb95",
        "message": "DERBY-5452: Possible NPE in NsTest.printException()\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1180858 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_47",
        "file": [
            {
                "sha": "ff89494d7c42c8b7ed35404e1e47a06b63e2a60f",
                "filename": "java/testing/org/apache/derbyTesting/system/nstest/NsTest.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/5dcbe31ee0f7bc09e0e48a6e36b81beeffc70e26/java/testing/org/apache/derbyTesting/system/nstest/NsTest.java",
                "raw_url": "https://github.com/apache/derby/raw/5dcbe31ee0f7bc09e0e48a6e36b81beeffc70e26/java/testing/org/apache/derbyTesting/system/nstest/NsTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/system/nstest/NsTest.java?ref=5dcbe31ee0f7bc09e0e48a6e36b81beeffc70e26",
                "patch": "@@ -606,7 +606,7 @@ public static synchronized void printException(String where, Exception e) {\n \t\t\t\t\t\t+ \" SQLSTATE: \" + m);\n \t\t\t}\n \t\t}\n-\t\tif (e.getMessage().equals(null)) {\n+\t\tif (e.getMessage() == null) {\n \t\t\tSystem.out.println(\"NULL error message detected\");\n \t\t\tSystem.out.println(\"Here is the NULL exection - \" + e.toString());\n \t\t\tSystem.out.println(\"Stack trace of the NULL exception - \");"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/d32b042dd2b5ad4403988d21310f28d9c0ac2a77",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/1061fd2082258262eccb55c3194a79c28b3bc8cf",
        "message": "DERBY-6396: NullPointerException in DirFile\n\nCheck that the array returned by File.list() is non-null before\nattempting to iterate through it. Null is a valid return value.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1537394 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_48",
        "file": [
            {
                "sha": "a261c636009a9382d10bf05b92021d6a9c6a53f1",
                "filename": "java/engine/org/apache/derby/impl/io/DirFile.java",
                "status": "modified",
                "additions": 16,
                "deletions": 3,
                "changes": 19,
                "blob_url": "https://github.com/apache/derby/blob/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/engine/org/apache/derby/impl/io/DirFile.java",
                "raw_url": "https://github.com/apache/derby/raw/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/engine/org/apache/derby/impl/io/DirFile.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/io/DirFile.java?ref=d32b042dd2b5ad4403988d21310f28d9c0ac2a77",
                "patch": "@@ -402,11 +402,21 @@ public boolean renameTo( StorageFile newName)\n      */\n     public boolean deleteAll()\n     {\n-        if( !exists())\n+        // Nothing to do if the file doesn't exist.\n+        if (!exists()) {\n             return false;\n-        if( isDirectory())\n+        }\n+\n+        // If the file is a directory, delete its contents recursively.\n+        // File.list() will return null if it is not a directory, or if the\n+        // contents of the directory cannot be read. Skip the recursive step\n+        // in both of those cases. If it turns out that the file in fact is a\n+        // directory, and we couldn't delete its contents, the delete() call\n+        // at the end of this method will return false to notify the caller\n+        // that the directory could not be deleted.\n+        String[] childList = super.list();\n+        if (childList != null)\n         {\n-            String[] childList = super.list();\n             String parentName = getPath();\n             for( int i = 0; i < childList.length; i++)\n             {\n@@ -417,6 +427,9 @@ public boolean deleteAll()\n                     return false;\n             }\n         }\n+\n+        // Finally, attempt to delete the file (or directory) and return\n+        // whether or not we succeeded.\n         return delete();\n     } // end of deleteAll\n "
            },
            {
                "sha": "80748bbecc29cb25afe81503b10c2aa42a84bcfc",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/engine/Derby6396Test.java",
                "status": "added",
                "additions": 77,
                "deletions": 0,
                "changes": 77,
                "blob_url": "https://github.com/apache/derby/blob/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/testing/org/apache/derbyTesting/functionTests/tests/engine/Derby6396Test.java",
                "raw_url": "https://github.com/apache/derby/raw/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/testing/org/apache/derbyTesting/functionTests/tests/engine/Derby6396Test.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/engine/Derby6396Test.java?ref=d32b042dd2b5ad4403988d21310f28d9c0ac2a77",
                "patch": "@@ -0,0 +1,77 @@\n+/*\n+  Class org.apache.derbyTesting.functionTests.tests.engine.Derby6396Test\n+\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to you under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+\n+*/\n+\n+package org.apache.derbyTesting.functionTests.tests.engine;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+import junit.framework.Test;\n+import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;\n+import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n+import org.apache.derbyTesting.junit.TestConfiguration;\n+\n+/**\n+ * Regression test case for DERBY-6396. Verify that booting the database\n+ * does not fail with a NullPointerException if the user lacks read access\n+ * on the temporary directory.\n+ */\n+public class Derby6396Test extends BaseJDBCTestCase {\n+    private File tmpDir;\n+\n+    public Derby6396Test(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        // Use a separate database for this test to reduce the risk of\n+        // interfering with other tests when changing file permissions.\n+        return TestConfiguration.singleUseDatabaseDecorator(\n+                TestConfiguration.embeddedSuite(Derby6396Test.class));\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        if (tmpDir != null) {\n+            // Reset the permission of the temporary directory so that we\n+            // don't run into problems when dropping the database.\n+            PrivilegedFileOpsForTests.setReadable(tmpDir, true, true);\n+            tmpDir = null;\n+        }\n+        super.tearDown();\n+    }\n+\n+    public void testTempNotReadable() throws SQLException {\n+        final TestConfiguration config = TestConfiguration.getCurrent();\n+\n+        // First make sure the database exists and is not booted.\n+        getConnection().close();\n+        config.shutdownDatabase();\n+\n+        // Now make sure the database has a tmp directory that cannot be read.\n+        tmpDir = new File(\n+            config.getDatabasePath(config.getDefaultDatabaseName()), \"tmp\");\n+        assertTrue(PrivilegedFileOpsForTests.mkdir(tmpDir));\n+        PrivilegedFileOpsForTests.setReadable(tmpDir, false, true);\n+\n+        // Booting the database used to fail with a NullPointerException.\n+        // Should succeed now.\n+        getConnection().close();\n+    }\n+}"
            },
            {
                "sha": "6d3e29fb6c3d98b547f94521a66e2fbcc3a81b99",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java",
                "raw_url": "https://github.com/apache/derby/raw/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java?ref=d32b042dd2b5ad4403988d21310f28d9c0ac2a77",
                "patch": "@@ -54,6 +54,7 @@ public static Test suite() throws Exception {\n         suite.addTest(ModuleLoadingTest.suite());\n         suite.addTest(ReadMeFilesTest.suite());\n         suite.addTest(ShutdownWithoutDeregisterPermissionTest.suite());\n+        suite.addTest(Derby6396Test.suite());\n \n         return suite;\n     }"
            },
            {
                "sha": "f22f4ca27e273df6b270ab617ae24d323ac17b0d",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java",
                "status": "modified",
                "additions": 31,
                "deletions": 1,
                "changes": 32,
                "blob_url": "https://github.com/apache/derby/blob/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java",
                "raw_url": "https://github.com/apache/derby/raw/d32b042dd2b5ad4403988d21310f28d9c0ac2a77/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java?ref=d32b042dd2b5ad4403988d21310f28d9c0ac2a77",
                "patch": "@@ -161,6 +161,37 @@ public Boolean run() {\n                     });\n     }\n \n+    /**\n+     * Create a directory.\n+     * @param dir the directory to create\n+     * @return {@code true} if and only if the directory was created\n+     */\n+    public static boolean mkdir(final File dir) {\n+        return AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n+            public Boolean run() {\n+                return dir.mkdir();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Set the read permission for a file.\n+     * @param file      the file to set the read permission for\n+     * @param readable  {@code true} to allow read, {@code false} to deny it\n+     * @param ownerOnly {@code true} if it should be set for the owner only,\n+     *                  {@code false} if it should be set for everyone\n+     * @return {@code true} if the operation succeeded, {@code false} otherwise\n+     */\n+    public static boolean setReadable(final File file,\n+                                      final boolean readable,\n+                                      final boolean ownerOnly) {\n+        return AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n+            public Boolean run() {\n+                return file.setReadable(readable, ownerOnly);\n+            }\n+        });\n+    }\n+\n     /**\n      * Obtains a reader for the specified file.\n      *\n@@ -193,7 +224,6 @@ public FileReader run()\n      *\n      * @param file the file to obtain a writer for\n      * @return An writer for the specified file.\n-     * @throws IOException \n      * @throws IOException if the file cannot be opened\n      * @throws SecurityException if the required permissions to write to the file,\n      *      or the path it is in, are missing"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/576d3b75bab93c1eb9b73074d6e753f3da7d3985",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/f9596d49421ef01dac027363f1154c63aaa510d0",
        "message": "DERBY-6006: NullPointerException in INSERT INTO ... SELECT FROM ... ORDER BY\n\nA NormalizeResultSet should not expose generated ORDER BY columns to\nits parent.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1417991 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_49",
        "file": [
            {
                "sha": "28bdf7a9598484010bef2214558f8f6c0ce268e5",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/NormalizeResultSetNode.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/576d3b75bab93c1eb9b73074d6e753f3da7d3985/java/engine/org/apache/derby/impl/sql/compile/NormalizeResultSetNode.java",
                "raw_url": "https://github.com/apache/derby/raw/576d3b75bab93c1eb9b73074d6e753f3da7d3985/java/engine/org/apache/derby/impl/sql/compile/NormalizeResultSetNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/NormalizeResultSetNode.java?ref=576d3b75bab93c1eb9b73074d6e753f3da7d3985",
                "patch": "@@ -605,6 +605,8 @@ public void init(\n \t\trsn.setResultColumns(rcl.copyListAndObjects());\n \t\t// Remove any columns that were generated.\n \t\tprRCList.removeGeneratedGroupingColumns();\n+        // And also columns that were added for ORDER BY (DERBY-6006).\n+        prRCList.removeOrderByColumns();\n \n \t\t/* Replace ResultColumn.expression with new VirtualColumnNodes\n \t\t * in the NormalizeResultSetNode's ResultColumnList.  (VirtualColumnNodes include"
            },
            {
                "sha": "8fbe1d51000576af10974afc633214066676c899",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java",
                "status": "modified",
                "additions": 15,
                "deletions": 0,
                "changes": 15,
                "blob_url": "https://github.com/apache/derby/blob/576d3b75bab93c1eb9b73074d6e753f3da7d3985/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java",
                "raw_url": "https://github.com/apache/derby/raw/576d3b75bab93c1eb9b73074d6e753f3da7d3985/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java?ref=576d3b75bab93c1eb9b73074d6e753f3da7d3985",
                "patch": "@@ -309,6 +309,21 @@ public void testInsertSelectOrderBy() throws SQLException {\n             s.executeQuery(\"select * from t4496\"),\n             new String[][]{{\"Y\"}});\n \n+        // DERBY-6006. INSERT INTO ... SELECT FROM could fail with a\n+        // NullPointerException in insane builds, or XSCH5 or assert in sane\n+        // builds, if the SELECT had an ORDER BY column that was not referenced\n+        // in the select list, and if normalization was required because the\n+        // types in the select list didn't exactly match the types in the\n+        // target table.\n+        //\n+        // In the test case below, the select list has an INT (the literal 1),\n+        // whereas the target type is DOUBLE. Also, the ORDER BY column (X) is\n+        // not in the select list.\n+        s.execute(\"create table t6006(x double)\");\n+        assertUpdateCount(s, 6, \"insert into t6006 values 1,2,3,4,5,6\");\n+        assertUpdateCount(s, 6,\n+                \"insert into t6006 select 1 from t6006 order by x\");\n+\n         rollback();\n     }\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/9f8442735d3d1d33a0ec0c7d007003702b9ed99b",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/0a8f8408a5e4070ec8a88f786601e601c30d3da0",
        "message": "DERBY-5916 (java.lang.NullPointerException org.apache.derby.impl.store.raw.data.BaseDataFileFactory.stop() connecting to network server)\n\nCheck for the nullability of storageFactory before using it in shutdown code\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1394883 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_50",
        "file": [
            {
                "sha": "7122fa25eca0f2e929a3ed07833fd879cfe065d4",
                "filename": "java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java",
                "status": "modified",
                "additions": 12,
                "deletions": 8,
                "changes": 20,
                "blob_url": "https://github.com/apache/derby/blob/9f8442735d3d1d33a0ec0c7d007003702b9ed99b/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java",
                "raw_url": "https://github.com/apache/derby/raw/9f8442735d3d1d33a0ec0c7d007003702b9ed99b/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java?ref=9f8442735d3d1d33a0ec0c7d007003702b9ed99b",
                "patch": "@@ -526,7 +526,8 @@ public void\tstop()\n \n \t\tif (isReadOnly())\t\t// do enough to close all files, then return \n         {\n-            storageFactory.shutdown();\n+\t\t\tif (storageFactory != null)\n+\t\t\t\tstorageFactory.shutdown();\n \t\t\treturn;\n         }\n \n@@ -1583,15 +1584,18 @@ public StorageFile getAlternateContainerPath(\n \t*/\n \tprivate synchronized void removeStubs()\n \t{\n-        actionCode = REMOVE_STUBS_ACTION;\n-        try\n+        if( storageFactory != null) \n         {\n-            AccessController.doPrivileged( this);\n+            actionCode = REMOVE_STUBS_ACTION;\n+            try\n+            {\n+                AccessController.doPrivileged( this);\n+            }\n+            catch (PrivilegedActionException pae)\n+            {\n+                // removeStubs does not throw an exception\n+            } \n         }\n-        catch (PrivilegedActionException pae)\n-        {\n-            // removeStubs does not throw an exception\n-        } \n \t}\n \n \t/**"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/3982b7db9711e228fbd1cc30304e335959e53062",
        "message": "Derby-265: In Network Server retrieving BLOB values with autocommit off causes NullPointerException in INSANE build / AssertFailure in  BaseContainerHandle.getTransaction in SANE Build\n\nFix submitted by Sunitha Kambhampati (ksunithaghm@gmail.com)\n\nThe problem\n-- Basically, in autocommit mode, when getBlob is called on a resultset after the transaction in which it was created is committed throws an NPE. Per the jdbc api and spec, getBlob is valid only for the duration of the transaction in which it was created.  So it is incorrect to call getBlob as in this repro for derby-265.\n-- On a getBlob for overflow columns,  we initiliaze the stream by reopening the container. In here, the transaction of the containerhandle ends up being null and an NPE is thrown.\n-- The problem is not specific to network server as such, but is reproducible in embedded mode also.\n\n\nFix includes\n--    Adds check in  OverflowInputStream.initStream  to see if transaction of the container handle is null and throws a StandardException with SQLState.DATA_CONTAINER_CLOSED\n--    And at  the jdbc layer, this exception is wrapped with a user exception with an existing  SQLState XJ073             (SQLState.BLOB_ACCESSED_AFTER_COMMIT) for both getBlob and getClob.\nThe error message corresponding to this sqlstate is  \"The data in this Blob or Clob is no longer available. Possible reasons are that its transaction committed, or its  connection closed.\"\n--   Removed the ASSERT in BaseContainerHandle.getTransaction() \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/derby/code/trunk@178803 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_51",
        "file": [
            {
                "sha": "eb56c1208e2faa193c9a2b79c66f89449a0271ee",
                "filename": "java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java",
                "status": "modified",
                "additions": 10,
                "deletions": 2,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java",
                "raw_url": "https://github.com/apache/derby/raw/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java?ref=b44abbf2a3b0bab1fe6f415ad771771017fcf3bc",
                "patch": "@@ -125,8 +125,16 @@ implementing the getStream() method for dvd.getStream(), does not\n             if (SanityManager.DEBUG)\n                 SanityManager.ASSERT(myStream instanceof Resetable);\n \n-            ((Resetable)myStream).initStream();\n-            // set up the buffer for trashing the bytes to set the position of the\n+            try {\n+                ((Resetable) myStream).initStream();\n+            } catch (StandardException se) {\n+                if (se.getMessageId().equals(SQLState.DATA_CONTAINER_CLOSED)) {\n+                    throw StandardException\n+                            .newException(SQLState.BLOB_ACCESSED_AFTER_COMMIT);\n+                }\n+            }\n+            // set up the buffer for trashing the bytes to set the position of\n+            // the\n             // stream, only need a buffer when we have a long column\n             buf = new byte[BLOB_BUF_SIZE];\n         }"
            },
            {
                "sha": "5ec0fa0458605a71ae961fd38688860940d035ce",
                "filename": "java/engine/org/apache/derby/impl/jdbc/EmbedClob.java",
                "status": "modified",
                "additions": 8,
                "deletions": 2,
                "changes": 10,
                "blob_url": "https://github.com/apache/derby/blob/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java",
                "raw_url": "https://github.com/apache/derby/raw/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java?ref=b44abbf2a3b0bab1fe6f415ad771771017fcf3bc",
                "patch": "@@ -113,8 +113,14 @@ the class implementing the getStream() method for dvd.getStream(),\n             if (SanityManager.DEBUG)\n                 SanityManager.ASSERT(myStream instanceof Resetable);\n \n-            ((Resetable)myStream).initStream();\n-\n+            try {\n+                ((Resetable) myStream).initStream();\n+            } catch (StandardException se) {\n+                if (se.getMessageId().equals(SQLState.DATA_CONTAINER_CLOSED)) {\n+                    throw StandardException\n+                            .newException(SQLState.BLOB_ACCESSED_AFTER_COMMIT);\n+                }\n+            }\n         }\n     }\n "
            },
            {
                "sha": "1e354da1ea8035c53438c838e16f79625c59454e",
                "filename": "java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java",
                "status": "modified",
                "additions": 0,
                "deletions": 6,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java",
                "raw_url": "https://github.com/apache/derby/raw/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java?ref=b44abbf2a3b0bab1fe6f415ad771771017fcf3bc",
                "patch": "@@ -848,12 +848,6 @@ else if ((mode & MODE_TRUNCATE_ON_ROLLBACK) ==\n \t*/\n \tpublic final RawTransaction getTransaction() \n     {\n-\n-\t\tif (SanityManager.DEBUG) \n-        {\n-\t\t\tSanityManager.ASSERT(xact != null);\n-\t\t}\n-\n \t\treturn xact;\n \t}\n "
            },
            {
                "sha": "1b77f124ec8ac634edb87130d9ffaa18bfae0cfe",
                "filename": "java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java",
                "status": "modified",
                "additions": 7,
                "deletions": 0,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java",
                "raw_url": "https://github.com/apache/derby/raw/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java?ref=b44abbf2a3b0bab1fe6f415ad771771017fcf3bc",
                "patch": "@@ -21,6 +21,7 @@\n package org.apache.derby.impl.store.raw.data;\n \n import org.apache.derby.iapi.error.StandardException;\n+import org.apache.derby.iapi.reference.SQLState;\n \n import org.apache.derby.iapi.store.raw.RecordHandle;\n \n@@ -138,6 +139,12 @@ the end of the transaction (or until the enclosing blob/clob object is\n     */\n     public void initStream() throws StandardException\n     {\n+        // it is possible that the transaction in which the stream was \n+        // created is committed and no longer valid\n+        // dont want to get NPE but instead throw error that\n+        // container was not opened\n+        if (owner.getTransaction() == null)\n+            throw StandardException.newException(SQLState.DATA_CONTAINER_CLOSED);\n         /*\n         We might want to use the mode and isolation level of the container.\n         This would have the advantage that, if the isolation level"
            },
            {
                "sha": "7623cf5360ff89d124829284ed52f4c8d0f8bfab",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/blobclob4BLOB.out",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/blobclob4BLOB.out",
                "raw_url": "https://github.com/apache/derby/raw/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/blobclob4BLOB.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/blobclob4BLOB.out?ref=b44abbf2a3b0bab1fe6f415ad771771017fcf3bc",
                "patch": "@@ -717,5 +717,9 @@ After drop\n Expect to get an IOException, container has been closed\n 10000 total bytes read\n clobTestSelfDestructive2 finished\n+-----\n+Expected Exception The data in this Blob or Clob is no longer available. Possible reasons are that its transaction committed, or its connection closed.\n+-----\n+Expected Exception The data in this Blob or Clob is no longer available. Possible reasons are that its transaction committed, or its connection closed.\n FINISHED TEST blobclob :-)\n Test blobclob finished"
            },
            {
                "sha": "7623cf5360ff89d124829284ed52f4c8d0f8bfab",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/blobclob4BLOB.out",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/blobclob4BLOB.out",
                "raw_url": "https://github.com/apache/derby/raw/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/blobclob4BLOB.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/blobclob4BLOB.out?ref=b44abbf2a3b0bab1fe6f415ad771771017fcf3bc",
                "patch": "@@ -717,5 +717,9 @@ After drop\n Expect to get an IOException, container has been closed\n 10000 total bytes read\n clobTestSelfDestructive2 finished\n+-----\n+Expected Exception The data in this Blob or Clob is no longer available. Possible reasons are that its transaction committed, or its connection closed.\n+-----\n+Expected Exception The data in this Blob or Clob is no longer available. Possible reasons are that its transaction committed, or its connection closed.\n FINISHED TEST blobclob :-)\n Test blobclob finished"
            },
            {
                "sha": "dc0b5101053add30f9c4bca2edfd22c770503b3e",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/blobclob4BLOB.out",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/testing/org/apache/derbyTesting/functionTests/master/blobclob4BLOB.out",
                "raw_url": "https://github.com/apache/derby/raw/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/testing/org/apache/derbyTesting/functionTests/master/blobclob4BLOB.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/blobclob4BLOB.out?ref=b44abbf2a3b0bab1fe6f415ad771771017fcf3bc",
                "patch": "@@ -784,5 +784,9 @@ length of clob chosen is 10000\n After drop\n Expect to get an IOException, container has been closed\n EXPECTED IO Exception:ERROR 40XD0: Container has been closed\n+-----------------------------\n+Expected Exception The data in this Blob or Clob is no longer available. Possible reasons are that its transaction committed, or its connection closed.\n+-----------------------------\n+Expected Exception The data in this Blob or Clob is no longer available. Possible reasons are that its transaction committed, or its connection closed.\n FINISHED TEST blobclob :-)\n Test blobclob finished"
            },
            {
                "sha": "59a2151d3de13c4e9c06b542a21ac93a4e3b91c0",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java",
                "status": "modified",
                "additions": 140,
                "deletions": 0,
                "changes": 140,
                "blob_url": "https://github.com/apache/derby/blob/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java",
                "raw_url": "https://github.com/apache/derby/raw/b44abbf2a3b0bab1fe6f415ad771771017fcf3bc/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java?ref=b44abbf2a3b0bab1fe6f415ad771771017fcf3bc",
                "patch": "@@ -167,6 +167,8 @@ public static void main(String[] args)\n             clobTestSelfDestructive2(conn);\n \n             conn.commit();\n+            clobNegativeTest_Derby265(conn);\n+            blobNegativeTest_Derby265(conn);\n             conn.close();\n             System.out.println(\"FINISHED TEST blobclob :-)\");\n \n@@ -3785,6 +3787,144 @@ private static void blobTest96(Connection conn)\n \t\t}\n     }\n \n+    \n+    \n+    /**\n+     * Test fix for derby-265.\n+     * Test that if getBlob is called after the transaction \n+     * in which it was created is committed, a proper user error\n+     * is thrown instead of an NPE. \n+     * Basically per the spec, getBlob is valid only for the duration of \n+     * the transaction in it was created in\n+     * @param conn\n+     * @throws SQLException\n+     * @throws FileNotFoundException\n+     * @throws IOException\n+     */\n+    private static void blobNegativeTest_Derby265(Connection conn)\n+            throws SQLException, FileNotFoundException,IOException {\n+        // basically setup the tables for clob and blob\n+        Statement s = conn.createStatement();\n+        s.execute(\"create table \\\"MAPS_BLOB\\\"(MAP_ID int, MAP_NAME varchar(20),REGION varchar(20),AREA varchar(20), PHOTO_FORMAT varchar(20),PICTURE blob(2G))\");\n+        conn.setAutoCommit(false);\n+        PreparedStatement ps = conn.prepareStatement(\"insert into \\\"MAPS_BLOB\\\" values(?,?,?,?,?,?)\");\n+        \n+        for (int i = 0; i < 3; i++) {\n+            FileInputStream fis = new FileInputStream(fileName[4]);\n+            ps.setInt(1, i);\n+            ps.setString(2, \"x\" + i);\n+            ps.setString(3, \"abc\");\n+            ps.setString(4, \"abc\");\n+            ps.setString(5, \"abc\");\n+            ps.setBinaryStream(6, new java.io.BufferedInputStream(fis), 300000);\n+            ps.executeUpdate();\n+            fis.close();\n+        }\n+        conn.commit();\n+\n+        conn.setAutoCommit(true);\n+        System.out.println(\"-----------------------------\");\n+\n+        s = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,\n+                ResultSet.CONCUR_READ_ONLY);\n+        s.execute(\"SELECT \\\"MAP_ID\\\", \\\"MAP_NAME\\\", \\\"REGION\\\", \\\"AREA\\\", \\\"PHOTO_FORMAT\\\", \\\"PICTURE\\\" FROM \\\"MAPS_BLOB\\\"\");\n+        ResultSet rs1 = s.getResultSet();\n+        Statement s2 = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,\n+                ResultSet.CONCUR_READ_ONLY);\n+        s2.executeQuery(\"SELECT \\\"MAP_ID\\\", \\\"MAP_NAME\\\", \\\"REGION\\\", \\\"AREA\\\", \\\"PHOTO_FORMAT\\\", \\\"PICTURE\\\" FROM \\\"MAPS_BLOB\\\"\");\n+        ResultSet rs2 = s2.getResultSet();\n+        rs2.next();\n+\n+        Blob b2 = rs2.getBlob(6);\n+        rs1.next();\n+        Blob b1 = rs1.getBlob(6);\n+        try {\n+            rs1.close();\n+            rs2.next();\n+            rs2.getBlob(6);\n+        } catch (SQLException sqle) {\n+            if (\"XJ073\".equals(sqle.getSQLState()))\n+                System.out.println(\"Expected Exception \" + sqle.getMessage());\n+            else\n+                System.out.println(\"FAIL -- unexpected exception:\"\n+                        + sqle.toString());\n+        }\n+        finally {\n+            rs2.close();\n+            s2.close();\n+            s.close();\n+            ps.close();\n+        }\n+\n+    }\n+\n+    /**\n+     * Test fix for derby-265.\n+     * Test that if getClob is called after the transaction \n+     * in which it was created is committed, a proper user error\n+     * is thrown instead of an NPE. \n+     * Basically per the spec, getClob is valid only for the duration of \n+     * the transaction in it was created in\n+     * @param conn\n+     * @throws SQLException\n+     * @throws FileNotFoundException\n+     * @throws IOException\n+     */\n+    private static void clobNegativeTest_Derby265(Connection conn)\n+            throws SQLException, FileNotFoundException,IOException {\n+\n+        // basically setup the tables for clob \n+        Statement s = conn.createStatement();\n+        s.execute(\"create table \\\"MAPS\\\"(MAP_ID int, MAP_NAME varchar(20),REGION varchar(20),AREA varchar(20), PHOTO_FORMAT varchar(20),PICTURE clob(2G))\");\n+        conn.setAutoCommit(false);\n+        PreparedStatement ps = conn.prepareStatement(\"insert into \\\"MAPS\\\" values(?,?,?,?,?,?)\");\n+        for (int i = 0; i < 3; i++) {\n+            FileReader fr = new FileReader(fileName[4]);\n+            ps.setInt(1, i);\n+            ps.setString(2, \"x\" + i);\n+            ps.setString(3, \"abc\");\n+            ps.setString(4, \"abc\");\n+            ps.setString(5, \"abc\");\n+            ps.setCharacterStream(6, new java.io.BufferedReader(fr),300000);\n+            ps.executeUpdate();\n+            fr.close();\n+        }\n+        conn.commit();\n+\n+        conn.setAutoCommit(true);\n+        System.out.println(\"-----------------------------\");\n+        s = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,\n+                ResultSet.CONCUR_READ_ONLY);\n+        s.execute(\"SELECT \\\"MAP_ID\\\", \\\"MAP_NAME\\\", \\\"REGION\\\", \\\"AREA\\\", \\\"PHOTO_FORMAT\\\", \\\"PICTURE\\\" FROM \\\"MAPS\\\"\");\n+        ResultSet rs1 = s.getResultSet();\n+        Statement s2 = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,\n+                ResultSet.CONCUR_READ_ONLY);\n+        s2.executeQuery(\"SELECT \\\"MAP_ID\\\", \\\"MAP_NAME\\\", \\\"REGION\\\", \\\"AREA\\\", \\\"PHOTO_FORMAT\\\", \\\"PICTURE\\\" FROM \\\"MAPS\\\"\");\n+        ResultSet rs2 = s2.getResultSet();\n+        rs2.next();\n+\n+        Clob b2 = rs2.getClob(6); // should be fine\n+        rs1.next();\n+        Clob b1 = rs1.getClob(6);\n+        try {\n+            rs1.close(); // this commits the transaction\n+            rs2.next();\n+            rs2.getClob(6); // no longer valid\n+        } catch (SQLException sqle) {\n+            if (\"XJ073\".equals(sqle.getSQLState()))\n+                System.out.println(\"Expected Exception \" + sqle.getMessage());\n+            else\n+                System.out.println(\"FAIL -- unexpected exception:\"\n+                        + sqle.toString());\n+        }\n+        finally {\n+            rs2.close();\n+            s2.close();\n+            s.close();\n+            ps.close();\n+        }\n+\n+    }\n     static void printInterval(Clob clob, long pos, int length,\n         int testNum, int iteration, int clobLength)\n     {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/0af1f882a8d733446656542a4f55aba7785828a3",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/5948150058fce0b2df3f1f13a9aa0384acc222bc",
        "message": "DERBY-5954 NPE in SELECT involving subselects and windows functions\n\nPatch \"derby-5954-with-test-2\" makes the code only look for in-lined\nwindow specification in simply contained select lists. Adds a new test\ncase to OLAPTest which would fail with an NPE before this patch,\ncf. original JIRA problem.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1406240 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_52",
        "file": [
            {
                "sha": "1b6aa2f4d8f264fef2c253724b7a1315f8c7396d",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "status": "modified",
                "additions": 5,
                "deletions": 3,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/0af1f882a8d733446656542a4f55aba7785828a3/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "raw_url": "https://github.com/apache/derby/raw/0af1f882a8d733446656542a4f55aba7785828a3/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java?ref=0af1f882a8d733446656542a4f55aba7785828a3",
                "patch": "@@ -176,11 +176,13 @@ public void init(Object selectList,\n \n \t\tif (resultColumns != null) {\n \n-\t\t\t// Collect window functions used in result columns, and check them\n-\t\t\t// for any <in-line window specification>s.\n+            // Collect simply contained window functions (note: *not*\n+            // any inside nested SELECTs) used in result columns, and\n+            // check them for any <in-line window specification>s.\n \n \t\t\tCollectNodesVisitor cnvw =\n-\t\t\t\tnew CollectNodesVisitor(WindowFunctionNode.class);\n+                new CollectNodesVisitor(WindowFunctionNode.class,\n+                                        SelectNode.class);\n \t\t\tresultColumns.accept(cnvw);\n \t\t\twindowFuncCalls = cnvw.getList();\n "
            },
            {
                "sha": "98fa01c3fe240430a0d60ceef3623c297a0bdf11",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "status": "modified",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/0af1f882a8d733446656542a4f55aba7785828a3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "raw_url": "https://github.com/apache/derby/raw/0af1f882a8d733446656542a4f55aba7785828a3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java?ref=0af1f882a8d733446656542a4f55aba7785828a3",
                "patch": "@@ -305,6 +305,23 @@ public void testBasicOperations()\n \t\t\t\t\t\t\t\t\t  {\"4\", \"4\"}};\n \t\tJDBC.assertFullResultSet(rs, expectedRows);\n \n+        // Subquery in SELECT list. DERBY-5954\n+        rs = s.executeQuery(\n+            \"SELECT rn_t1, (\" +\n+            \"     SELECT rn_t2 FROM (\" +\n+            \"         SELECT row_number() over() as rn_t2 FROM t2) \" +\n+            \"         as T_2\" +\n+            \"         where T_2.rn_t2 = T_1.rn_t1 + 1  ) \" +\n+            \"     as rn_outer\" +\n+            \"     FROM (SELECT row_number() over() as rn_t1 from t2) as T_1\");\n+\n+        expectedRows = new String[][]{{\"1\", \"2\"},\n+                                      {\"2\", \"3\"},\n+                                      {\"3\", \"4\"},\n+                                      {\"4\", \"5\"},\n+                                      {\"5\", null}};\n+        JDBC.assertFullResultSet(rs, expectedRows);\n+\n \n \t\t/*\n \t\t * Group by and having"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/510d4fbf3d4686fa9e40d0774eb35c62ac0d7ab4",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/9495437c8b640d689c8a67563097b86cb0cd6fca",
        "message": "DERBY-5558; NullPointerException in store.RecoveryTest launchRecoveryInsert and failure in testBasicRecovery with weme 6.2\n  working around this issue by tacking on emma.active value for this jvm forking.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1227016 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_53",
        "file": [
            {
                "sha": "9733b780973b4b186f2e1fc6f1a52e522a30c20c",
                "filename": "java/testing/org/apache/derbyTesting/junit/BaseTestCase.java",
                "status": "modified",
                "additions": 7,
                "deletions": 0,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/510d4fbf3d4686fa9e40d0774eb35c62ac0d7ab4/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java",
                "raw_url": "https://github.com/apache/derby/raw/510d4fbf3d4686fa9e40d0774eb35c62ac0d7ab4/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java?ref=510d4fbf3d4686fa9e40d0774eb35c62ac0d7ab4",
                "patch": "@@ -544,7 +544,14 @@ public static Process execJavaCmd(String[] cmd) throws IOException {\n \t    ArrayList cmdlist = new ArrayList();\n \t    cmdlist.add(getJavaExecutableName());\n \t    if (isJ9Platform())\n+\t    {\n \t        cmdlist.add(\"-jcl:foun11\");\n+            // also add the setting for emma.active so any tests\n+            // that fork will work correctly. See DERBY-5558.\n+            String emmaactive=getSystemProperty(\"emma.active\");\n+            if (emmaactive != null)\n+                cmdlist.add(\"-Demma.active=\" + emmaactive);            \n+\t    }\n \t    cmdlist.add(\"-classpath\");\n \t    cmdlist.add(getSystemProperty(\"java.class.path\"));\n \t    for (int i =0; i < cmd.length;i++) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/c4cfed4f5b6d4a0862846efb021a698a6b041bbf",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/c5a71001e2d3bcba1ab131c71d29d4d8f5191723",
        "message": "DERBY-4275: Query executions fail when compressing a table using SYSCS_UTIL.SYSCS_COMPRESS_TABLE\n\nFail in a controlled fashion (StandardException) if the conglomerate\ndisappears while binding the FromBaseTable. This used to cause a\nNullPointerException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1160597 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_54",
        "file": [
            {
                "sha": "19db953c81067078ca3928952ff7fcfdc9e1fb32",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java",
                "status": "modified",
                "additions": 8,
                "deletions": 0,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/c4cfed4f5b6d4a0862846efb021a698a6b041bbf/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java",
                "raw_url": "https://github.com/apache/derby/raw/c4cfed4f5b6d4a0862846efb021a698a6b041bbf/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java?ref=c4cfed4f5b6d4a0862846efb021a698a6b041bbf",
                "patch": "@@ -2346,6 +2346,14 @@ public ResultSetNode bindNonVTITables(DataDictionary dataDictionary,\n \t\t\t\t\ttableDescriptor.getHeapConglomerateId()\n \t\t\t\t\t);\n \n+            // Bail out if the descriptor couldn't be found. The conglomerate\n+            // probably doesn't exist anymore.\n+            if (baseConglomerateDescriptor == null) {\n+                throw StandardException.newException(\n+                        SQLState.STORE_CONGLOMERATE_DOES_NOT_EXIST,\n+                        new Long(tableDescriptor.getHeapConglomerateId()));\n+            }\n+\n \t\t\t/* Build the 0-based array of base column names. */\n \t\t\tcolumnNames = resultColumns.getColumnNames();\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/c0091b3ff54eebbff592d3c9cf75d58c84031d56",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/b1043a6ab10c58057ca3678f26536b7674fa13f9",
        "message": "DERBY-5291: test failure: NullPointerException with J2ME (weme 6.2) in testDerby4137_TransactionTimeoutSpecifiedNotExceeded(org.apache.derbyTesting.functionTests.tests.memory.XAMemTest)\n\nDisabled test case for DERBY-4137 on platforms that don't support XADataSource.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1138341 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_55",
        "file": [
            {
                "sha": "0af63a2db30474e374f000feeb7621e6e26d26ef",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/memory/XAMemTest.java",
                "status": "modified",
                "additions": 7,
                "deletions": 1,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/c0091b3ff54eebbff592d3c9cf75d58c84031d56/java/testing/org/apache/derbyTesting/functionTests/tests/memory/XAMemTest.java",
                "raw_url": "https://github.com/apache/derby/raw/c0091b3ff54eebbff592d3c9cf75d58c84031d56/java/testing/org/apache/derbyTesting/functionTests/tests/memory/XAMemTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/memory/XAMemTest.java?ref=c0091b3ff54eebbff592d3c9cf75d58c84031d56",
                "patch": "@@ -30,9 +30,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import javax.transaction.xa.Xid;\n \n import junit.framework.Test;\n+import junit.framework.TestSuite;\n \n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n import org.apache.derbyTesting.junit.J2EEDataSource;\n+import org.apache.derbyTesting.junit.JDBC;\n import org.apache.derbyTesting.junit.TestConfiguration;\n import org.apache.derbyTesting.junit.XATestUtil;\n \n@@ -86,6 +88,10 @@ public void testDerby4137_TransactionTimeoutSpecifiedNotExceeded()\n     }\n \n     public static Test suite() {\n-        return TestConfiguration.defaultSuite(XAMemTest.class);\n+        if (JDBC.vmSupportsJDBC3()) {\n+            return TestConfiguration.defaultSuite(XAMemTest.class);\n+        }\n+\n+        return new TestSuite(\"XAMemTest skipped - XADataSource not available\");\n     }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/8d26b674cfd832cc4fc1e6ec5d9b8565965d5a49",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/472a1aad86401e309c86b7711b16ffab6604088d",
        "message": "DERBY-5249 A table created with 10.0.2.1 with constraints cannot be dropped with 10.5 due to NullPointerException with insane build or ASSERT FAILED Failed to find sharable conglomerate descriptor for index conglomerate with sane build\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1131272 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_56",
        "file": [
            {
                "sha": "78155c38c4eb5520ece77c4a0fcffb15a9ee89b7",
                "filename": "java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java",
                "status": "modified",
                "additions": 8,
                "deletions": 1,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/8d26b674cfd832cc4fc1e6ec5d9b8565965d5a49/java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java",
                "raw_url": "https://github.com/apache/derby/raw/8d26b674cfd832cc4fc1e6ec5d9b8565965d5a49/java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java?ref=8d26b674cfd832cc4fc1e6ec5d9b8565965d5a49",
                "patch": "@@ -598,8 +598,15 @@ public ConglomerateDescriptor describeSharedConglomerate(\n \t\t\t}\n \n \t\t\t// Skip if ignoreThis is true and it describes \"this\".\n+\t\t\t// DERBY-5249. We need to check both the UUID and the\n+\t\t\t// conglomerateName to see if this is a match, because\n+\t\t\t// databases prior to the DERBY-655 fix may have a \n+\t\t\t// duplicate conglomerateID\n \t\t\tif (ignoreThis &&\n-\t\t\t\tgetUUID().equals(descriptors[i].getUUID()))\n+\t\t\t\tgetUUID().equals(descriptors[i].getUUID()) &&\n+\t\t\t\tgetConglomerateName().equals(descriptors[i].\n+\t\t\t\t\t\t\tgetConglomerateName())\n+\t\t\t\t)\n \t\t\t{\n \t\t\t\tcontinue;\n \t\t\t}"
            },
            {
                "sha": "fad212bdf100b8e282b58541ac0f2df52caf67b7",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java",
                "status": "modified",
                "additions": 10,
                "deletions": 8,
                "changes": 18,
                "blob_url": "https://github.com/apache/derby/blob/8d26b674cfd832cc4fc1e6ec5d9b8565965d5a49/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java",
                "raw_url": "https://github.com/apache/derby/raw/8d26b674cfd832cc4fc1e6ec5d9b8565965d5a49/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java?ref=8d26b674cfd832cc4fc1e6ec5d9b8565965d5a49",
                "patch": "@@ -268,7 +268,7 @@ public void noConnectionAfterHardUpgrade()\n      * test once the bug is fixed.\n      * \n      */\n-    public void xtestDropTableAfterUpgradeWithConstraint() throws SQLException {\n+    public void testDropTableAfterUpgradeWithConstraint() throws SQLException {\n         final int phase = getPhase();\n \n         Statement s = createStatement();\n@@ -291,18 +291,20 @@ public void xtestDropTableAfterUpgradeWithConstraint() throws SQLException {\n             /*\n              * With 10.0 and early 10.1 releases a duplicate conglomerate entry\n              * shows in sys.sysconglomerates for the primary key PK_RS. It can\n-             * be seen with this query.Utilities.showResultSet(s.executeQuery(\n-             * \"select c.constraintname, c.constraintid,  cong.conglomerateid, cong.conglomeratename  from sys.sysconglomerates cong, sys.syskeys k, sys.sysconstraints c where c.constraintname = 'PK_RS' and c.constraintid =k.constraintid and k.conglomerateid = cong.conglomerateid \"\n-             * ));\n-             */\n+             * be seen with this query.\n+             \n+                Utilities.showResultSet(s.executeQuery(\n+                        \"select c.constraintname, c.constraintid,  cong.conglomerateid, cong.conglomeratename  from sys.sysconglomerates cong, sys.syskeys k, sys.sysconstraints c where c.constraintname = 'PK_RS' and c.constraintid =k.constraintid and k.conglomerateid = cong.conglomerateid \"\n+              ));\n+            */\n             break;\n         case PH_SOFT_UPGRADE:\n             s.executeUpdate(\"ALTER TABLE S.RS DROP CONSTRAINT FK_RS_TYPEID\");\n-            s.executeUpdate(\"ALTER TABLE S.R_TYPE_ID ADD CONSTRAINT \"\n-                    + \"PK_R_TYPE_ID PRIMARY KEY (R_TYPE_ID)\");\n+            s.executeUpdate(\"ALTER TABLE S.R_TYPE_ID DROP CONSTRAINT \"\n+                    + \"PK_R_TYPE_ID\");\n             s.executeUpdate(\"ALTER TABLE S.RS DROP CONSTRAINT PK_RS\");\n             s.executeUpdate(\"DROP TABLE S.RS\");\n-            s.executeUpdate(\"DROP TABLE S.R_TYPE\");\n+            s.executeUpdate(\"DROP TABLE S.R_TYPE_ID\");\n             s.executeUpdate(\"DROP SCHEMA S RESTRICT\");\n             break;\n         case PH_POST_SOFT_UPGRADE:"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/c6065853666f813b41ec4e19746701c33546cfa8",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/45e3ef088c80d954668e246b461e10ae2f49c4a7",
        "message": "DERBY-4873: NullPointerException in testBoundaries with ibm jvm 1.6\n\nUse a helper method that initializes istream if necessary before\ncalling println().\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1028633 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_57",
        "file": [
            {
                "sha": "b0b18e0400e3fe60b7bb86f9b8c5dfb518e1f5dc",
                "filename": "java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/c6065853666f813b41ec4e19746701c33546cfa8/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java",
                "raw_url": "https://github.com/apache/derby/raw/c6065853666f813b41ec4e19746701c33546cfa8/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java?ref=c6065853666f813b41ec4e19746701c33546cfa8",
                "patch": "@@ -468,7 +468,7 @@ public void\tstop()\n \t\t}\n \n \t\tboolean logBootTrace = PropertyUtil.getSystemBoolean(Property.LOG_BOOT_TRACE);\n-\t\tistream.println(LINE);\n+\t\tlogMsg(LINE);\n \t\tlogMsg(\"\\n\" + new Date() +\n                 MessageService.getTextMessage(\n                     MessageId.STORE_SHUTDOWN_MSG,"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/571f201a7ce93ee524e4a20777e0394fd4237a9a",
        "message": "DERBY-4676: NullPointerException on SELECT on INNER JOIN\n\nCheck whether the page is latched after waiting for a lock, and assume\nthat the row has been deleted if it is not latched.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@952138 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_58",
        "file": [
            {
                "sha": "e1a8ac4396b72ddbe73add28fc3fb98c004e7916",
                "filename": "java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java",
                "status": "modified",
                "additions": 16,
                "deletions": 0,
                "changes": 16,
                "blob_url": "https://github.com/apache/derby/blob/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java",
                "raw_url": "https://github.com/apache/derby/raw/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java?ref=4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401",
                "patch": "@@ -284,6 +284,14 @@ public boolean fetch(\n                 pos, (RowPosition) null, false, true);\n         }\n \n+        if (pos.current_page == null)\n+        {\n+            // The page is not latched after locking the row. This happens if\n+            // the row was deleted while we were waiting for the lock. Return\n+            // false to indicate that the row is no longer valid. (DERBY-4676)\n+            return false;\n+        }\n+\n         // Fetch the row.\n         // RESOLVE (STO061) - don't know whether the fetch is for update or not.\n         //\n@@ -381,6 +389,14 @@ public boolean fetch(\n                 pos, (RowPosition) null, false, waitForLock);\n         }\n \n+        if (pos.current_page == null)\n+        {\n+            // The page is not latched after locking the row. This happens if\n+            // the row was deleted while we were waiting for the lock. Return\n+            // false to indicate that the row is no longer valid. (DERBY-4676)\n+            return false;\n+        }\n+\n         // Fetch the row.\n         // RESOLVE (STO061) - don't know whether the fetch is for update or not.\n         //"
            },
            {
                "sha": "0d174b0a09ab032b5bce59ce1bbbd3eba31e2515",
                "filename": "java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerate.java",
                "status": "modified",
                "additions": 51,
                "deletions": 2,
                "changes": 53,
                "blob_url": "https://github.com/apache/derby/blob/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerate.java",
                "raw_url": "https://github.com/apache/derby/raw/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerate.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerate.java?ref=4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401",
                "patch": "@@ -276,11 +276,25 @@ else if (pos.current_pageno != ContainerHandle.INVALID_PAGE_NUMBER)\n     }\n \n     /**\n+     * <p>\n      * Latch the page containing the current RowPosition.\n+     * </p>\n+     *\n      * <p>\n      * This implementation also automatically updates the RowPosition to\n      * point at the slot containing the current RowPosition.  This slot \n      * value is only valid while the latch is held.\n+     * </p>\n+     *\n+     * <p>\n+     * If the row pointed to by {@code pos} does not exist (including the\n+     * case where the page itself does not exist), the page will not be\n+     * latched, and {@code pos.current_page} will be set to {@code null}.\n+     * </p>\n+     *\n+     * @param pos the position to a row on the page that should be latched\n+     * @return {@code true} if the page was successfully latched, or\n+     * {@code false} otherwise\n      *\n \t * @exception  StandardException  Standard exception policy.\n      **/\n@@ -329,13 +343,18 @@ public boolean latchPage(RowPosition pos)\n \n \n     /**\n+     * <p>\n      * Lock row at given row position for read.\n+     * </p>\n+     *\n      * <p>\n      * This routine requests a row lock NOWAIT on the row located at the given\n      * RowPosition.  If the lock is granted NOWAIT the \n      * routine will return true.  If the lock cannot be granted NOWAIT, then \n      * the routine will release the latch on \"page\" and then it will request \n      * a WAIT lock on the row.  \n+     * </p>\n+     *\n      * <p>\n      * This implementation:\n      * Assumes latch held on current_page.\n@@ -344,20 +363,31 @@ public boolean latchPage(RowPosition pos)\n      * If the current_rh field of RowPosition is null, it is assumed the we\n      * want to lock the indicated current_slot.  Upon return current_rh will\n      * point to the record handle associated with current_slot.\n+     * </p>\n+     *\n      * <p>\n      * After waiting and getting the lock on the row, this routine will fix up\n      * RowPosition to point at the row locked.  This means it will get the\n      * page latch again, and it will fix the current_slot to point at the \n      * waited for record handle - it may have moved while waiting on the lock.\n+     * </p>\n+     *\n+     * <p>\n+     * When this method returns, the page holding the row pointed to by the\n+     * {@code RowLocation} is latched. This is however not the case if\n+     * {@code moveForwardIfRowDisappears} is {@code false} and the row has\n+     * disappeared. Then the latch will be released before the method returns,\n+     * and {@code pos.current_page} will be set to {@code null}.\n+     * </p>\n      *\n      * @param pos       Position to lock.\n      * @param aux_pos   If you have to give up latch to get lock, then also \n      *                  unlock this position if it is non-null.\n      * @param moveForwardIfRowDisappears\n      *                  If true, then this routine must handle the case where\n      *                  the row id we are waiting on disappears when the latch\n-     *                  is released.  If false an exception will be thrown if\n-     *                  the row disappears.\n+     *                  is released.  If false, and the row disappears, the\n+     *                  latch will be released again and false is returned.\n      * @param waitForLock\n      *                  if true wait for lock, if lock can't be granted NOWAIT,\n      *                  else if false, throw a lock timeout exception if the\n@@ -470,6 +500,25 @@ public boolean lockPositionForRead(\n         return(lock_granted_with_latch_held);\n     }\n \n+    /**\n+     * <p>\n+     * Lock the row at the given position for write.\n+     * </p>\n+     *\n+     * <p>\n+     * The page pointed to by the {@code RowPosition} is assumed to be latched\n+     * when this method is called. If the lock cannot be obtained without\n+     * waiting, the latch will be released and re-obtained when the lock has\n+     * been acquired.\n+     * </p>\n+     *\n+     * <p>\n+     * If the latch was released while waiting for the lock, and the row does\n+     * not exist after the lock is obtained, the latch will be released again\n+     * before the method returns, and {@code pos.current_page} will be set to\n+     * {@code null}.\n+     * </p>\n+     */\n     public boolean lockPositionForWrite(\n     RowPosition pos,\n     boolean     forInsert,"
            },
            {
                "sha": "c226c44e570295626830401cc482b1331a4df5a5",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby4676Test.java",
                "status": "added",
                "additions": 153,
                "deletions": 0,
                "changes": 153,
                "blob_url": "https://github.com/apache/derby/blob/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby4676Test.java",
                "raw_url": "https://github.com/apache/derby/raw/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby4676Test.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby4676Test.java?ref=4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401",
                "patch": "@@ -0,0 +1,153 @@\n+/*\n+  Class org.apache.derbyTesting.functionTests.tests.store.Derby4676Test\n+\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to you under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+\n+*/\n+\n+package org.apache.derbyTesting.functionTests.tests.store;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n+import junit.framework.Test;\n+import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n+import org.apache.derbyTesting.junit.JDBC;\n+import org.apache.derbyTesting.junit.TestConfiguration;\n+\n+/**\n+ * Regression test for DERBY-4676.\n+ */\n+public class Derby4676Test extends BaseJDBCTestCase {\n+    /** List of {@code HelperThread}s used in the test. */\n+    private List threads;\n+\n+    public Derby4676Test(String name) {\n+        super(name);\n+    }\n+\n+    /** Create a suite of tests. */\n+    public static Test suite() {\n+        return TestConfiguration.defaultSuite(Derby4676Test.class);\n+    }\n+\n+    /** Set up the test environment. */\n+    protected void setUp() {\n+        threads = new ArrayList();\n+    }\n+\n+    /** Tear down the test environment. */\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+\n+        List localThreads = threads;\n+        threads = null;\n+\n+        // First, wait for all threads to terminate and close all connections.\n+        for (int i = 0; i < localThreads.size(); i++) {\n+            HelperThread t = (HelperThread) localThreads.get(i);\n+            t.join();\n+            Connection c = t.conn;\n+            if (c != null && !c.isClosed()) {\n+                c.rollback();\n+                c.close();\n+            }\n+        }\n+\n+        // Then check if any of the helper threads failed.\n+        for (int i = 0; i < localThreads.size(); i++) {\n+            HelperThread t = (HelperThread) localThreads.get(i);\n+            if (t.exception != null) {\n+                fail(\"Helper thread failed\", t.exception);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>\n+     * Regression test case for DERBY-4676. Before the fix, fetching a row by\n+     * its row location would sometimes fail with a NullPointerException if\n+     * the row was deleted while the fetch operation was waiting for a lock.\n+     * </p>\n+     */\n+    public void testConcurrentFetchAndDelete() throws Exception {\n+        // Create a table to use in the test. Note that we need to have a\n+        // non-covering index on the table so that the row location is fetched\n+        // from the index and used to look up the row in the heap. If the\n+        // index covers all the columns, we won't fetch the row location from\n+        // it and the bug won't be reproduced.\n+        Statement s = createStatement();\n+        s.execute(\"create table t(x int, y int)\");\n+        s.execute(\"create index idx on t(x)\");\n+\n+        // Create a thread that repeatedly inserts and deletes a row.\n+        HelperThread thread = new HelperThread() {\n+            void body(Connection conn) throws Exception {\n+                Thread.sleep(1000); // Wait for the select loop to start so\n+                                    // that the insert/delete loop doesn't\n+                                    // complete before it has started.\n+                Statement s = conn.createStatement();\n+                for (int i = 0; i < 1000; i++) {\n+                    s.execute(\"insert into t values (1,2)\");\n+                    s.execute(\"delete from t\");\n+                }\n+                s.close();\n+            }\n+        };\n+\n+        startThread(thread);\n+\n+        // As long as the insert/delete thread is running, try to read the\n+        // rows of the table using the index. This used to cause intermittent\n+        // NullPointerExceptions.\n+        while (thread.isAlive()) {\n+            JDBC.assertDrainResults(s.executeQuery(\n+                \"select * from t --derby-properties index=idx\"));\n+        }\n+    }\n+\n+    /**\n+     * Helper class for running database operations in a separate thread and\n+     * in a separate transaction.\n+     */\n+    private abstract class HelperThread extends Thread {\n+        Exception exception;\n+        Connection conn;\n+\n+        public void run() {\n+            try {\n+                conn = openDefaultConnection();\n+                body(conn);\n+            } catch (Exception ex) {\n+                exception = ex;\n+            }\n+        }\n+\n+        abstract void body(Connection conn) throws Exception;\n+    }\n+\n+    /**\n+     * Start a helper thread and register it for automatic clean-up in\n+     * {@link #tearDown()}.\n+     *\n+     * @param thread the helper thread to start\n+     */\n+    private void startThread(HelperThread thread) {\n+        thread.start();\n+        threads.add(thread);\n+    }\n+}"
            },
            {
                "sha": "e0268295ed2040d753942e1ca1258dde4cb72ef1",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java",
                "raw_url": "https://github.com/apache/derby/raw/4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java?ref=4f7da81c8876b5a8d02b4e2fbb3bcbca9fc90401",
                "patch": "@@ -57,6 +57,7 @@ public static Test suite() {\n         suite.addTest(StreamingColumnTest.suite());\n         suite.addTest(Derby3625Test.suite());\n         suite.addTest(Derby151Test.suite());\n+        suite.addTest(Derby4676Test.suite());\n         suite.addTest(BootLockTest.suite());\n         suite.addTest(PositionedStoreStreamTest.suite());\n         suite.addTest(OSReadOnlyTest.suite());"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/40a9fb59ee6af32ea474ceae3d82443af1d6f668",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/da4e4830e4e74aee09c7f03df2394c2878a4b93b",
        "message": "DERBY-4671: Embedded driver does not work with jbossCache\n\nSet the type of the dynamic parameters in statements like\n\n  INSERT INTO T SELECT ? FROM T\n\nto prevent a NullPointerException and to revert to the pre-10.6\nbehaviour.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@948045 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_59",
        "file": [
            {
                "sha": "ff9a71d1f3c041c7bd9c623fa0c9ebf5ade878f0",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "status": "modified",
                "additions": 13,
                "deletions": 9,
                "changes": 22,
                "blob_url": "https://github.com/apache/derby/blob/40a9fb59ee6af32ea474ceae3d82443af1d6f668/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "raw_url": "https://github.com/apache/derby/raw/40a9fb59ee6af32ea474ceae3d82443af1d6f668/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java?ref=40a9fb59ee6af32ea474ceae3d82443af1d6f668",
                "patch": "@@ -304,12 +304,8 @@ public void bindTargetExpressions(FromList fromListParam)\n \t}\n \n \t/**\n-\t * Set the type of each parameter in the result column list if this node\n-\t * represents a table constructor (aka VALUES clause). Table constructors\n-\t * are represented either by a {@code RowResultSetNode} or by a\n-\t * {@code UnionNode} with multiple {@code RowResultSetNode} children and\n-\t * whose {@code tableConstructor()} method returns {@code true}. For all\n-\t * other nodes, this method should be a no-op.\n+\t * Set the type of each parameter in the result column list for this\n+\t * table constructor.\n \t *\n \t * @param typeColumns\tThe ResultColumnList containing the desired result\n \t *\t\t\t\t\t\ttypes.\n@@ -319,9 +315,17 @@ public void bindTargetExpressions(FromList fromListParam)\n \tvoid setTableConstructorTypes(ResultColumnList typeColumns)\n \t\t\tthrows StandardException\n \t{\n-\t\t// Nothing to be done unless this node represents a VALUES clause, in\n-\t\t// which case the overrides in RowResultSetNode or UnionNode will do\n-\t\t// the necessary work.\n+        // VALUES clause needs special handling that's taken care of in a\n+        // sub-class. For all other nodes, just go through the result columns\n+        // and set the type for dynamic parameters.\n+        for (int i = 0; i < resultColumns.size(); i++) {\n+            ResultColumn rc = (ResultColumn) resultColumns.elementAt(i);\n+            ValueNode re = rc.getExpression();\n+            if (re != null && re.requiresTypeFromContext()) {\n+                ResultColumn typeCol = (ResultColumn) typeColumns.elementAt(i);\n+                re.setType(typeCol.getTypeServices());\n+            }\n+        }\n \t}\n \n \t/**"
            },
            {
                "sha": "fe250b539056139980044fe5e6daa4693e82be84",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "status": "modified",
                "additions": 53,
                "deletions": 0,
                "changes": 53,
                "blob_url": "https://github.com/apache/derby/blob/40a9fb59ee6af32ea474ceae3d82443af1d6f668/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "raw_url": "https://github.com/apache/derby/raw/40a9fb59ee6af32ea474ceae3d82443af1d6f668/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java?ref=40a9fb59ee6af32ea474ceae3d82443af1d6f668",
                "patch": "@@ -34,6 +34,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n  */\n public class InsertTest extends BaseJDBCTestCase {\n \n+    private static final String PARAMETER_IN_SELECT_LIST = \"42X34\";\n+\n     public InsertTest(String name) {\n         super(name);\n     }\n@@ -134,4 +136,55 @@ public void testInsertFromExceptOrIntersect() throws SQLException {\n                 \"1\");\n         s.execute(\"delete from t3\");\n     }\n+\n+    /**\n+     * Regression test for DERBY-4671. Verify that dynamic parameters can be\n+     * used in the select list in an INSERT INTO ... SELECT FROM statement.\n+     * This used to work, but the fix for DERBY-4420 made it throw a\n+     * NullPointerException.\n+     */\n+    public void testInsertFromSelectWithParameters() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"create table derby4671(x int)\");\n+        s.execute(\"insert into derby4671 values (1), (2)\");\n+\n+        // This call failed with a NullPointerException\n+        PreparedStatement ins1 = prepareStatement(\n+                \"insert into derby4671 select ? from derby4671\");\n+\n+        ins1.setInt(1, 7);\n+        assertUpdateCount(ins1, 2);\n+\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"select * from derby4671 order by x\"),\n+                new String[][] {{\"1\"}, {\"2\"}, {\"7\"}, {\"7\"}});\n+\n+        // Also verify that it works when the ? is in an expression\n+        PreparedStatement ins2 = prepareStatement(\n+                \"insert into derby4671 select (x+?)*10 from derby4671\");\n+\n+        ins2.setInt(1, 77);\n+        assertUpdateCount(ins2, 4);\n+\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"select * from derby4671 order by x\"),\n+                new String[][] {\n+                    {\"1\"}, {\"2\"}, {\"7\"}, {\"7\"},\n+                    {\"780\"}, {\"790\"}, {\"840\"}, {\"840\"}});\n+\n+        // We only accept ? in the top level select list, so these should\n+        // still fail\n+        assertCompileError(\n+                PARAMETER_IN_SELECT_LIST,\n+                \"insert into derby4671 select ? from derby4671 \"\n+                + \"union select ? from derby4671\");\n+        assertCompileError(\n+                PARAMETER_IN_SELECT_LIST,\n+                \"insert into derby4671 select ? from derby4671 \"\n+                + \"except select ? from derby4671\");\n+        assertCompileError(\n+                PARAMETER_IN_SELECT_LIST,\n+                \"insert into derby4671 select ? from derby4671 \"\n+                + \"intersect select ? from derby4671\");\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/bd2baddc9f6e4aa5ac67d52600897503638185c2",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/0bd328032ec1f98dbe790c42e056d8fce1063c63",
        "message": "DERBY-4585: IndexChanger.doDelete throws NullPointerException\n\nMake sure the cached index scan is not cleared too early by a result\nset that doesn't use it.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@931076 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_60",
        "file": [
            {
                "sha": "e3e514321c797d2bf25e7c0de6fb5469c67f168f",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java",
                "status": "modified",
                "additions": 9,
                "deletions": 1,
                "changes": 10,
                "blob_url": "https://github.com/apache/derby/blob/bd2baddc9f6e4aa5ac67d52600897503638185c2/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/bd2baddc9f6e4aa5ac67d52600897503638185c2/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java?ref=bd2baddc9f6e4aa5ac67d52600897503638185c2",
                "patch": "@@ -682,7 +682,15 @@ public void\tclose() throws StandardException\n \t\t\t\t}\n \t        \tscanController.close();\n \t\t\t\tscanController = null; // should not access after close\n-\t\t\t\tactivation.clearIndexScanInfo();\n+\n+                // Updatable index scans are cached in the activation for\n+                // easy access from IndexChanger. Remember to clear the cached\n+                // info here, but only if this is the result set that cached\n+                // it in the first place (DERBY-4585).\n+                if (forUpdate && isKeyed) {\n+                    activation.clearIndexScanInfo();\n+                }\n+\n \t\t\t}\n \t\t\tscanControllerOpened = false;\n \t\t\tstartPosition = null;"
            },
            {
                "sha": "3507c524d8ea03739f1d434ddb88ec878f7a6c21",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/delete.out",
                "status": "modified",
                "additions": 49,
                "deletions": 0,
                "changes": 49,
                "blob_url": "https://github.com/apache/derby/blob/bd2baddc9f6e4aa5ac67d52600897503638185c2/java/testing/org/apache/derbyTesting/functionTests/master/delete.out",
                "raw_url": "https://github.com/apache/derby/raw/bd2baddc9f6e4aa5ac67d52600897503638185c2/java/testing/org/apache/derbyTesting/functionTests/master/delete.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/delete.out?ref=bd2baddc9f6e4aa5ac67d52600897503638185c2",
                "patch": "@@ -314,4 +314,53 @@ drop table bug171_employee;\n 0 rows inserted/updated/deleted\n ij> drop table bug171_bonuses;\n 0 rows inserted/updated/deleted\n+ij> --\n+-- Test case for DERBY-4585\n+--\n+create table d4585_t1 (id int primary key, a int);\n+0 rows inserted/updated/deleted\n+ij> create table d4585_t2 (id int primary key, b int,\n+                       constraint fk_t2 foreign key (b) references d4585_t1);\n+0 rows inserted/updated/deleted\n+ij> create table d4585_t3 (id int primary key, c int);\n+0 rows inserted/updated/deleted\n+ij> create table d4585_t4 (d int references d4585_t2);\n+0 rows inserted/updated/deleted\n+ij> insert into d4585_t1 values (16,51),(30,12),(39,24),(48,1),(53,46),(61,9);\n+6 rows inserted/updated/deleted\n+ij> insert into d4585_t2 values\n+    (2,16),(3,61),(4,16),(6,30),(7,16),(10,48),(13,30),(15,48),(17,61),\n+    (18,30),(21,48),(22,53),(23,61),(25,48),(26,30),(27,48),(29,16),(31,39),\n+    (33,30),(35,61),(37,30),(40,53),(42,53),(45,16),(49,30),(54,53),(57,53),\n+    (58,61),(60,30),(63,61),(64,30);\n+31 rows inserted/updated/deleted\n+ij> insert into d4585_t3 values\n+    (1,50),(5,50),(8,50),(9,50),(11,36),(12,50),(14,50),(19,50),(20,50),\n+    (24,36),(28,50),(32,50),(34,50),(38,50),(41,50),(43,50),(46,36),(47,36),\n+    (51,36),(52,50),(55,36),(56,44),(59,36),(62,36);\n+24 rows inserted/updated/deleted\n+ij> insert into d4585_t4 values (7), (33), (57);\n+3 rows inserted/updated/deleted\n+ij> -- The query below resulted in a NullPointerException if a certain query plan\n+-- was chosen. Use an optimizer override to force that plan.\n+delete from d4585_t4 where d in\n+  (select id from d4585_t2 --derby-properties constraint=fk_t2\n+    where b in (select t1.id\n+                       from d4585_t1 t1, d4585_t3 t3\n+                       where t1.a=t3.id and t3.c=36));\n+2 rows inserted/updated/deleted\n+ij> -- Verify that the correct rows were deleted.\n+select * from d4585_t4;\n+D          \n+-----------\n+33         \n+ij> -- Clean up\n+drop table d4585_t4;\n+0 rows inserted/updated/deleted\n+ij> drop table d4585_t3;\n+0 rows inserted/updated/deleted\n+ij> drop table d4585_t2;\n+0 rows inserted/updated/deleted\n+ij> drop table d4585_t1;\n+0 rows inserted/updated/deleted\n ij> "
            },
            {
                "sha": "922ab7502221d73ac759c0950a77b201e13c1eb1",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/delete.sql",
                "status": "modified",
                "additions": 41,
                "deletions": 0,
                "changes": 41,
                "blob_url": "https://github.com/apache/derby/blob/bd2baddc9f6e4aa5ac67d52600897503638185c2/java/testing/org/apache/derbyTesting/functionTests/tests/lang/delete.sql",
                "raw_url": "https://github.com/apache/derby/raw/bd2baddc9f6e4aa5ac67d52600897503638185c2/java/testing/org/apache/derbyTesting/functionTests/tests/lang/delete.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/delete.sql?ref=bd2baddc9f6e4aa5ac67d52600897503638185c2",
                "patch": "@@ -230,3 +230,44 @@ autocommit on;\n \n drop table bug171_employee;\n drop table bug171_bonuses;\n+\n+--\n+-- Test case for DERBY-4585\n+--\n+create table d4585_t1 (id int primary key, a int);\n+create table d4585_t2 (id int primary key, b int,\n+                       constraint fk_t2 foreign key (b) references d4585_t1);\n+create table d4585_t3 (id int primary key, c int);\n+create table d4585_t4 (d int references d4585_t2);\n+\n+insert into d4585_t1 values (16,51),(30,12),(39,24),(48,1),(53,46),(61,9);\n+\n+insert into d4585_t2 values\n+    (2,16),(3,61),(4,16),(6,30),(7,16),(10,48),(13,30),(15,48),(17,61),\n+    (18,30),(21,48),(22,53),(23,61),(25,48),(26,30),(27,48),(29,16),(31,39),\n+    (33,30),(35,61),(37,30),(40,53),(42,53),(45,16),(49,30),(54,53),(57,53),\n+    (58,61),(60,30),(63,61),(64,30);\n+\n+insert into d4585_t3 values\n+    (1,50),(5,50),(8,50),(9,50),(11,36),(12,50),(14,50),(19,50),(20,50),\n+    (24,36),(28,50),(32,50),(34,50),(38,50),(41,50),(43,50),(46,36),(47,36),\n+    (51,36),(52,50),(55,36),(56,44),(59,36),(62,36);\n+\n+insert into d4585_t4 values (7), (33), (57);\n+\n+-- The query below resulted in a NullPointerException if a certain query plan\n+-- was chosen. Use an optimizer override to force that plan.\n+delete from d4585_t4 where d in\n+  (select id from d4585_t2 --derby-properties constraint=fk_t2\n+    where b in (select t1.id\n+                       from d4585_t1 t1, d4585_t3 t3\n+                       where t1.a=t3.id and t3.c=36));\n+\n+-- Verify that the correct rows were deleted.\n+select * from d4585_t4;\n+\n+-- Clean up\n+drop table d4585_t4;\n+drop table d4585_t3;\n+drop table d4585_t2;\n+drop table d4585_t1;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/fd6e2d96102073637306251b911e660040a22896",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/a9ce08817be091aba7d5d542b60f291927303c8b",
        "message": "DERBY-4414: NullPointerException with JOIN...USING and invalid table name in select list\n\nFail gracefully if the table name in an asterisked identifier chain\ndoesn't match any of the joined tables.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@829041 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_61",
        "file": [
            {
                "sha": "06f54694aca7ad146f3a5f6e6fcd6e4d9490a310",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "status": "modified",
                "additions": 9,
                "deletions": 0,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/fd6e2d96102073637306251b911e660040a22896/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "raw_url": "https://github.com/apache/derby/raw/fd6e2d96102073637306251b911e660040a22896/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java?ref=fd6e2d96102073637306251b911e660040a22896",
                "patch": "@@ -428,11 +428,20 @@ public ResultColumnList getAllResultColumns(TableName allTableName)\n \t\t */\n \t\tif (leftRCL == null)\n \t\t{\n+\t\t\tif (rightRCL == null)\n+\t\t\t{\n+\t\t\t\t// Both sides are null. This only happens if allTableName is\n+\t\t\t\t// non-null and doesn't match the table name of any of the\n+\t\t\t\t// join tables (DERBY-4414).\n+\t\t\t\treturn null;\n+\t\t\t}\n \t\t\trightRCL.resetVirtualColumnIds();\n \t\t\treturn rightRCL;\n \t\t}\n \t\telse if (rightRCL == null)\n \t\t{\n+\t\t\t// leftRCL is non-null, otherwise the previous leg of the if\n+\t\t\t// statement would have been chosen.\n \t\t\tleftRCL.resetVirtualColumnIds();\n \t\t\treturn leftRCL;\n \t\t}"
            },
            {
                "sha": "d7958d7d99c38cc9a3df2bbd10484777b83f5c3e",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/fd6e2d96102073637306251b911e660040a22896/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "raw_url": "https://github.com/apache/derby/raw/fd6e2d96102073637306251b911e660040a22896/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java?ref=fd6e2d96102073637306251b911e660040a22896",
                "patch": "@@ -484,7 +484,9 @@ public void verifySelectStarSubquery(FromList outerFromList, int subqueryType)\n \t *\n \t * @param allTableName\t\tThe qualifier on the \"*\"\n \t *\n-\t * @return ResultColumnList The expanded list\n+\t * @return ResultColumnList The expanded list, or {@code null} if\n+\t * {@code allTableName} is non-null and doesn't match a table name in\n+\t * this result set\n \t *\n \t * @exception StandardException\t\tThrown on error\n \t */"
            },
            {
                "sha": "23aaf8c9f1e508ea75644009b6a6544908dac6be",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java",
                "status": "modified",
                "additions": 7,
                "deletions": 0,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/fd6e2d96102073637306251b911e660040a22896/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java",
                "raw_url": "https://github.com/apache/derby/raw/fd6e2d96102073637306251b911e660040a22896/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java?ref=fd6e2d96102073637306251b911e660040a22896",
                "patch": "@@ -39,6 +39,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private static final String COLUMN_NOT_IN_SCOPE = \"42X04\";\n     private static final String NON_COMPARABLE = \"42818\";\n     private static final String NO_COLUMNS = \"42X81\";\n+    private static final String TABLE_NAME_NOT_IN_SCOPE = \"42X10\";\n \n     public JoinTest(String name) {\n         super(name);\n@@ -658,5 +659,11 @@ public void testUsingClause() throws SQLException {\n         // resulted in a NullPointerException.\n         assertStatementError(NO_COLUMNS, s,\n                 \"select x.*, y.* from t1 x inner join t1 y using (a, b, c)\");\n+\n+        // DERBY-4414: If the table name in an asterisked identifier chain does\n+        // not match the table names of either side in the join, the query\n+        // should fail gracefully and not throw a NullPointerException.\n+        assertStatementError(TABLE_NAME_NOT_IN_SCOPE, s,\n+                \"select xyz.* from t1 join t2 using (b)\");\n     }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/a74c428318411b3f7090e284ddc69362807307ff",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/6832893471add91f90ac539cd962b880c142a421",
        "message": "DERBY-4391: NullPointerException when comparing indexed column with result from a set operation\n\nPrevent PredicateList.markReferencedColumns() from walking down to the\nsource of a ColumnReference if it is null.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@824694 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_62",
        "file": [
            {
                "sha": "0c6d65a6852f77e274a9b6457e23f169b664dfb5",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/PredicateList.java",
                "status": "modified",
                "additions": 10,
                "deletions": 1,
                "changes": 11,
                "blob_url": "https://github.com/apache/derby/blob/a74c428318411b3f7090e284ddc69362807307ff/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java",
                "raw_url": "https://github.com/apache/derby/raw/a74c428318411b3f7090e284ddc69362807307ff/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java?ref=a74c428318411b3f7090e284ddc69362807307ff",
                "patch": "@@ -1638,7 +1638,16 @@ void markReferencedColumns()\n \t\tfor (Enumeration e = colRefs.elements(); e.hasMoreElements(); )\n \t\t{\n \t\t\tColumnReference ref = (ColumnReference)e.nextElement();\n-\t\t\tref.getSource().markAllRCsInChainReferenced();\n+\t\t\tResultColumn source = ref.getSource();\n+\n+            // DERBY-4391: Don't try to call markAllRCsInChainReferenced() if\n+            // source is null. This can happen if the ColumnReference is\n+            // pointing to a column that is not from a base table. For instance\n+            // if we have a VALUES clause like (VALUES (1, 2), (3, 4)) V1(I, J)\n+            // then a column reference to V1.I won't have a source.\n+\t\t\tif (source != null) {\n+\t\t\t\tsource.markAllRCsInChainReferenced();\n+\t\t\t}\n \t\t}\n \t}\n "
            },
            {
                "sha": "3afa0cf7fcbadcafe0fd1f3aea1ce70463a9c19e",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/union.out",
                "status": "modified",
                "additions": 34,
                "deletions": 0,
                "changes": 34,
                "blob_url": "https://github.com/apache/derby/blob/a74c428318411b3f7090e284ddc69362807307ff/java/testing/org/apache/derbyTesting/functionTests/master/union.out",
                "raw_url": "https://github.com/apache/derby/raw/a74c428318411b3f7090e284ddc69362807307ff/java/testing/org/apache/derbyTesting/functionTests/master/union.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/union.out?ref=a74c428318411b3f7090e284ddc69362807307ff",
                "patch": "@@ -1217,4 +1217,38 @@ drop table t1;\n 0 rows inserted/updated/deleted\n ij> drop table t2;\n 0 rows inserted/updated/deleted\n+ij> -- Regression test for DERBY-4391. These UNION queries used to throw a\n+-- NullPointerException during compilation. Now all of them should compile\n+-- successfully, but some of them fail during execution if their subqueries\n+-- return more than one row.\n+create table d4391(a int not null primary key, b int);\n+0 rows inserted/updated/deleted\n+ij> insert into d4391 values (0, 4), (1, 3), (2, 2), (3, 1), (4, 0);\n+5 rows inserted/updated/deleted\n+ij> select * from d4391 where a < (values 2 union values 2);\n+A          |B          \n+-----------------------\n+0          |4          \n+1          |3          \n+ij> select * from d4391 where a < (select 4 from d4391 union select b from d4391);\n+ERROR 21000: Scalar subquery is only allowed to return a single row.\n+ij> select * from d4391 where a < (select a+b from d4391 union select 4 from d4391);\n+A          |B          \n+-----------------------\n+0          |4          \n+1          |3          \n+2          |2          \n+3          |1          \n+ij> select * from d4391 where a < (select a+b from d4391 union select a from d4391);\n+ERROR 21000: Scalar subquery is only allowed to return a single row.\n+ij> select * from d4391 where a < (select sum(a) from d4391 union select sum(b) from d4391);\n+A          |B          \n+-----------------------\n+0          |4          \n+1          |3          \n+2          |2          \n+3          |1          \n+4          |0          \n+ij> drop table d4391;\n+0 rows inserted/updated/deleted\n ij> \n\\ No newline at end of file"
            },
            {
                "sha": "1ecaaee475e29f823a982d423db1ec4aa5fcef9f",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/union.sql",
                "status": "modified",
                "additions": 13,
                "deletions": 0,
                "changes": 13,
                "blob_url": "https://github.com/apache/derby/blob/a74c428318411b3f7090e284ddc69362807307ff/java/testing/org/apache/derbyTesting/functionTests/tests/lang/union.sql",
                "raw_url": "https://github.com/apache/derby/raw/a74c428318411b3f7090e284ddc69362807307ff/java/testing/org/apache/derbyTesting/functionTests/tests/lang/union.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/union.sql?ref=a74c428318411b3f7090e284ddc69362807307ff",
                "patch": "@@ -489,3 +489,16 @@ select * from\n -- cleanup.\n drop table t1;\n drop table t2;\n+\n+-- Regression test for DERBY-4391. These UNION queries used to throw a\n+-- NullPointerException during compilation. Now all of them should compile\n+-- successfully, but some of them fail during execution if their subqueries\n+-- return more than one row.\n+create table d4391(a int not null primary key, b int);\n+insert into d4391 values (0, 4), (1, 3), (2, 2), (3, 1), (4, 0);\n+select * from d4391 where a < (values 2 union values 2);\n+select * from d4391 where a < (select 4 from d4391 union select b from d4391);\n+select * from d4391 where a < (select a+b from d4391 union select 4 from d4391);\n+select * from d4391 where a < (select a+b from d4391 union select a from d4391);\n+select * from d4391 where a < (select sum(a) from d4391 union select sum(b) from d4391);\n+drop table d4391;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/f8d48a3ce3cc2fb95b92cbfa7da4d98d39d4a271",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/58355bbddb4c06fa936fe966eaeedb25e177efaf",
        "message": "DERBY-4388: NullPointerException in RIGHT JOIN with NOT BETWEEN\n\nClone the left operand when performing not-elimination in\nBetweenOperatorNode to prevent ColumnReferences from being shared, as\nthey can be remapped during optimization.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@822289 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_63",
        "file": [
            {
                "sha": "e502904b6f8d5d75f20f6253b3828403b214ff39",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java",
                "status": "modified",
                "additions": 7,
                "deletions": 1,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/f8d48a3ce3cc2fb95b92cbfa7da4d98d39d4a271/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java",
                "raw_url": "https://github.com/apache/derby/raw/f8d48a3ce3cc2fb95b92cbfa7da4d98d39d4a271/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java?ref=f8d48a3ce3cc2fb95b92cbfa7da4d98d39d4a271",
                "patch": "@@ -127,11 +127,17 @@ ValueNode eliminateNots(boolean underNotNode)\n \t\t/* Set type info for the operator node */\n \t\tleftBCO.bindComparisonOperator();\n \n+        // DERBY-4388: If leftOperand is a ColumnReference, it may be remapped\n+        // during optimization, and that requires the less-than node and the\n+        // greater-than node to have separate objects.\n+        ValueNode leftClone = (leftOperand instanceof ColumnReference) ?\n+            leftOperand.getClone() : leftOperand;\n+\n \t\t/* leftO > rightOList.elementAt(1) */\n \t\trightBCO = (BinaryComparisonOperatorNode) \n \t\t\t\t\tnodeFactory.getNode(\n \t\t\t\t\t\t\t\tC_NodeTypes.BINARY_GREATER_THAN_OPERATOR_NODE,\n-\t\t\t\t\t\t\t\tleftOperand, \n+\t\t\t\t\t\t\t\tleftClone,\n \t\t\t\t\t\t\t\trightOperandList.elementAt(1),\n \t\t\t\t\t\t\t\tcm);\n \t\t/* Set type info for the operator node */"
            },
            {
                "sha": "814ddd35b48ac823f09b53fcfb52b72b87bdc84e",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/InbetweenTest.java",
                "status": "modified",
                "additions": 23,
                "deletions": 0,
                "changes": 23,
                "blob_url": "https://github.com/apache/derby/blob/f8d48a3ce3cc2fb95b92cbfa7da4d98d39d4a271/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InbetweenTest.java",
                "raw_url": "https://github.com/apache/derby/raw/f8d48a3ce3cc2fb95b92cbfa7da4d98d39d4a271/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InbetweenTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InbetweenTest.java?ref=f8d48a3ce3cc2fb95b92cbfa7da4d98d39d4a271",
                "patch": "@@ -4501,4 +4501,27 @@ public void testReproductionBeetle5135() throws SQLException{\n         conn.rollback();\n         st.close();\n     }\n+\n+    /**\n+     * Regression test cases for DERBY-4388, where the not elimination in\n+     * BetweenOperatorNode could make column references point to the wrong\n+     * result sets after optimization, causing NullPointerExceptions.\n+     */\n+    public void testDerby4388NotElimination() throws SQLException {\n+        setAutoCommit(false); // for easy cleanup with rollback() in tearDown()\n+        Statement s = createStatement();\n+        s.execute(\"create table d4388_t1(a int)\");\n+        s.execute(\"create table d4388_t2(b int)\");\n+        s.execute(\"insert into d4388_t1 values 0,1,2,3,4,5,6\");\n+        s.execute(\"insert into d4388_t2 values 0,1,2,3\");\n+        // The queries below used to cause NullPointerException.\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"select * from d4388_t1 left join d4388_t2 \" +\n+                               \"on a=b where b not between 1 and 5\"),\n+                new String[][]{{\"0\", \"0\"}});\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"select * from d4388_t2 right join d4388_t1 \" +\n+                               \"on a=b where b not between 1 and 5\"),\n+                new String[][]{{\"0\", \"0\"}});\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/877a43d446d95e4c05a658ca8c735cabf11d2986",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/03e89c8c1bd49236ac3057e5bea55b693e8f1245",
        "message": "DERBY-2074: NullPointerException when two threads load sort factory concurrently\n\nAdded a flag in ModuleInstance that tells whether the module is fully\nbooted. This flag is checked when we go through the list of modules,\nso that we can avoid using partly booted instances.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@788670 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_64",
        "file": [
            {
                "sha": "73b6a851c5184df9ee61f571f267c0afc8b4c20c",
                "filename": "java/engine/org/apache/derby/impl/services/monitor/ModuleInstance.java",
                "status": "modified",
                "additions": 19,
                "deletions": 0,
                "changes": 19,
                "blob_url": "https://github.com/apache/derby/blob/877a43d446d95e4c05a658ca8c735cabf11d2986/java/engine/org/apache/derby/impl/services/monitor/ModuleInstance.java",
                "raw_url": "https://github.com/apache/derby/raw/877a43d446d95e4c05a658ca8c735cabf11d2986/java/engine/org/apache/derby/impl/services/monitor/ModuleInstance.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/services/monitor/ModuleInstance.java?ref=877a43d446d95e4c05a658ca8c735cabf11d2986",
                "patch": "@@ -56,6 +56,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \t*/\n \tprotected Object\tservice;\n \n+    /** Flag that tells whether booting of the module has completed. */\n+    private boolean booted;\n+\n \t/*\n \t** Constructor\n \t*/\n@@ -111,4 +114,20 @@ protected Object getTopLevelService() {\n \tprotected Object getInstance() {\n \t\treturn instance;\n \t}\n+\n+    /**\n+     * Set a flag that indicates that booting of the module has completed.\n+     */\n+    synchronized void setBooted() {\n+        booted = true;\n+    }\n+\n+    /**\n+     * Check whether booting of the module has completed.\n+     * @return {@code true} if the module has been booted, or {@code false}\n+     * otherwise\n+     */\n+    synchronized boolean isBooted() {\n+        return booted;\n+    }\n }"
            },
            {
                "sha": "6b4b489df3b65577e086d7e74daeca91fa038511",
                "filename": "java/engine/org/apache/derby/impl/services/monitor/TopService.java",
                "status": "modified",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/877a43d446d95e4c05a658ca8c735cabf11d2986/java/engine/org/apache/derby/impl/services/monitor/TopService.java",
                "raw_url": "https://github.com/apache/derby/raw/877a43d446d95e4c05a658ca8c735cabf11d2986/java/engine/org/apache/derby/impl/services/monitor/TopService.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/services/monitor/TopService.java?ref=877a43d446d95e4c05a658ca8c735cabf11d2986",
                "patch": "@@ -255,6 +255,16 @@ Object bootModule(boolean create, Object service, ProtocolKey key, Properties pr\n \t\t\tfor (int i = 0; i < moduleInstances.size(); i++) {\n \t\t\t\tModuleInstance module = (ModuleInstance) moduleInstances.elementAt(i);\n \n+                // DERBY-2074: The module has not been properly booted, so we\n+                // cannot yet determine whether or not this is a module we can\n+                // use. Assume that we cannot use it and continue looking. We\n+                // may end up booting the module twice if the assumption\n+                // doesn't hold, but we'll detect and resolve that later when\n+                // we call addToProtocol().\n+                if (!module.isBooted()) {\n+                    continue;\n+                }\n+\n \t\t\t\tif (!module.isTypeAndName((PersistentService) null, key.getFactoryInterface(), key.getIdentifier()))\n \t\t\t\t\tcontinue;\n \n@@ -294,6 +304,8 @@ Object bootModule(boolean create, Object service, ProtocolKey key, Properties pr\n \t\t\tthrow se;\n \t\t}\n \n+        module.setBooted();\n+\n \t\tsynchronized (this) {\n \n "
            },
            {
                "sha": "6b5641e0739e8e33b2566e14d1857389b8fce867",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/engine/ModuleLoadingTest.java",
                "status": "added",
                "additions": 138,
                "deletions": 0,
                "changes": 138,
                "blob_url": "https://github.com/apache/derby/blob/877a43d446d95e4c05a658ca8c735cabf11d2986/java/testing/org/apache/derbyTesting/functionTests/tests/engine/ModuleLoadingTest.java",
                "raw_url": "https://github.com/apache/derby/raw/877a43d446d95e4c05a658ca8c735cabf11d2986/java/testing/org/apache/derbyTesting/functionTests/tests/engine/ModuleLoadingTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/engine/ModuleLoadingTest.java?ref=877a43d446d95e4c05a658ca8c735cabf11d2986",
                "patch": "@@ -0,0 +1,138 @@\n+/*\n+ * Derby - Class org.apache.derbyTesting.functionTests.tests.engine.ModuleLoadingTest\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.derbyTesting.functionTests.tests.engine;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.util.ArrayList;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n+import org.apache.derbyTesting.junit.JDBC;\n+import org.apache.derbyTesting.junit.TestConfiguration;\n+\n+/**\n+ * This class contains tests for correct loading (booting) of modules\n+ * and factories.\n+ */\n+public class ModuleLoadingTest extends BaseJDBCTestCase {\n+    public ModuleLoadingTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite ts = new TestSuite();\n+\n+        // Run concurrentLoadingOfSortFactory in a separate database so that\n+        // the sort factory isn't already loaded.\n+        ts.addTest(TestConfiguration.singleUseDatabaseDecorator(\n+                new ModuleLoadingTest(\"concurrentLoadingOfSortFactory\")));\n+\n+        return ts;\n+    }\n+\n+    /**\n+     * Test case for DERBY-2074. When multiple threads tried to load\n+     * ExternalSortFactory concurrently, we sometimes got a\n+     * NullPointerException.\n+     */\n+    public void concurrentLoadingOfSortFactory() throws Throwable {\n+        // number of concurrent threads\n+        final int numThreads = 10;\n+\n+        // Helper object to make it easier to refer to ModuleLoadingTest.this\n+        // from within the nested Runnable class. Used for synchronization\n+        // between the threads.\n+        final Object me = this;\n+\n+        // Flag that tells the threads whether they're allowed to start.\n+        final boolean[] go = new boolean[1];\n+        // Active threads count.\n+        final int[] activeThreads = new int[1];\n+        // List of exceptions/throwables thrown by the forked threads.\n+        final ArrayList exceptions = new ArrayList();\n+\n+        Thread[] threads = new Thread[numThreads];\n+\n+        // Start the threads.\n+        for (int i = 0; i < numThreads; i++) {\n+            final Connection c = openDefaultConnection();\n+            // Prepare a statement that ends up calling\n+            // DistinctScalarAggregateResultSet.loadSorter().\n+            final PreparedStatement ps = c.prepareStatement(\n+                    \"select count(distinct tablename) from sys.systables\");\n+            threads[i] = new Thread(new Runnable() {\n+                public void run() {\n+                    try {\n+                        _run();\n+                    } catch (Throwable t) {\n+                        synchronized (me) {\n+                            exceptions.add(t);\n+                        }\n+                    }\n+                }\n+                private void _run() throws Exception {\n+                    synchronized (me) {\n+                        // Notify the main thread that we're ready to execute.\n+                        activeThreads[0]++;\n+                        me.notifyAll();\n+\n+                        // Wait for the main thread to notify us that we\n+                        // should go ahead.\n+                        while (!go[0]) {\n+                            me.wait();\n+                        }\n+                    }\n+                    // executeQuery() below used to get occational NPEs before\n+                    // DERBY-2074.\n+                    JDBC.assertDrainResults(ps.executeQuery());\n+                    ps.close();\n+                    c.close();\n+                }\n+            });\n+            threads[i].start();\n+        }\n+\n+        // We want all threads to execute the statement at the same time,\n+        // so wait for all threads to be ready before giving them the GO\n+        // signal.\n+        synchronized (me) {\n+            while (activeThreads[0] < numThreads && exceptions.isEmpty()) {\n+                me.wait();\n+            }\n+\n+            // All threads are active, or at least one of the threads have\n+            // failed, so tell the threads to stop waiting.\n+            go[0] = true;\n+            me.notifyAll();\n+        }\n+\n+        // The threads have been started, now wait for them to finish.\n+        for (int i = 0; i < numThreads; i++) {\n+            threads[i].join();\n+        }\n+\n+        // At least one of the threads failed. Re-throw the first error\n+        // reported.\n+        if (!exceptions.isEmpty()) {\n+            throw (Throwable) exceptions.get(0);\n+        }\n+    }\n+}"
            },
            {
                "sha": "c3ab5b17df57200cbc864bb112ee5bfe7fa97b1c",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/877a43d446d95e4c05a658ca8c735cabf11d2986/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java",
                "raw_url": "https://github.com/apache/derby/raw/877a43d446d95e4c05a658ca8c735cabf11d2986/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java?ref=877a43d446d95e4c05a658ca8c735cabf11d2986",
                "patch": "@@ -47,6 +47,7 @@ public static Test suite() {\n         TestSuite suite = new TestSuite(\"engine\");\n \n         suite.addTest(ErrorStreamTest.suite());\n+        suite.addTest(ModuleLoadingTest.suite());\n \n         return suite;\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/51ef6db8abbd980b391ad9ce3d18d521134d8038",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/780767dda3837db9177e070c8acacafcf05fbcf1",
        "message": "DERBY-3799: NullPointerException when accessing a clob through a pooled connection.\nVerify that the LOB stored procedure statements are open (not only non-null).\nPatch file: derby-3799-1a-checkIfClosed.diff\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@681694 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_65",
        "file": [
            {
                "sha": "440d1321c05cb366a919d88754e57674a9ac058e",
                "filename": "java/client/org/apache/derby/client/am/CallableLocatorProcedures.java",
                "status": "modified",
                "additions": 25,
                "deletions": 16,
                "changes": 41,
                "blob_url": "https://github.com/apache/derby/blob/51ef6db8abbd980b391ad9ce3d18d521134d8038/java/client/org/apache/derby/client/am/CallableLocatorProcedures.java",
                "raw_url": "https://github.com/apache/derby/raw/51ef6db8abbd980b391ad9ce3d18d521134d8038/java/client/org/apache/derby/client/am/CallableLocatorProcedures.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/CallableLocatorProcedures.java?ref=51ef6db8abbd980b391ad9ce3d18d521134d8038",
                "patch": "@@ -113,7 +113,8 @@ int blobCreateLocator() throws SqlException\n         }\n         \n         try {\n-            if (blobCreateLocatorCall == null) {\n+            if (blobCreateLocatorCall == null ||\n+                    !blobCreateLocatorCall.openOnClient_) {\n                 blobCreateLocatorCall = connection.prepareCallX\n                         (\"? = CALL SYSIBM.BLOBCREATELOCATOR()\",\n                         java.sql.ResultSet.TYPE_FORWARD_ONLY,\n@@ -164,7 +165,8 @@ int blobCreateLocator() throws SqlException\n      */\n     void blobReleaseLocator(int locator) throws SqlException\n     {\n-        if (blobReleaseLocatorCall == null) {\n+        if (blobReleaseLocatorCall == null ||\n+                !blobReleaseLocatorCall.openOnClient_) {\n             blobReleaseLocatorCall = connection.prepareCallX\n                 (\"CALL SYSIBM.BLOBRELEASELOCATOR(?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -200,7 +202,8 @@ long blobGetPositionFromLocator(int locator,\n                                     int searchLocator, \n                                     long fromPosition) throws SqlException\n     {\n-        if (blobGetPositionFromLocatorCall == null) {\n+        if (blobGetPositionFromLocatorCall == null ||\n+                !blobGetPositionFromLocatorCall.openOnClient_) {\n             blobGetPositionFromLocatorCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.BLOBGETPOSITIONFROMLOCATOR(?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -327,7 +330,8 @@ private long blobGetPositionFromBytes(int locator,\n                                           int offset,\n                                           int length) throws SqlException\n     {\n-        if (blobGetPositionFromBytesCall == null) {\n+        if (blobGetPositionFromBytesCall == null ||\n+                !blobGetPositionFromBytesCall.openOnClient_) {\n             blobGetPositionFromBytesCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.BLOBGETPOSITIONFROMBYTES(?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -371,7 +375,7 @@ private long blobGetPositionFromBytes(int locator,\n      */\n     long blobGetLength(int sourceLocator) throws SqlException\n     {\n-        if (blobGetLengthCall == null) {\n+        if (blobGetLengthCall == null || !blobGetLengthCall.openOnClient_) {\n             blobGetLengthCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.BLOBGETLENGTH(?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -421,7 +425,7 @@ long blobGetLength(int sourceLocator) throws SqlException\n     {\n         if (forLength == 0) return new byte[0];\n         \n-        if (blobGetBytesCall == null) {\n+        if (blobGetBytesCall == null || !blobGetBytesCall.openOnClient_) {\n             blobGetBytesCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.BLOBGETBYTES(?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -495,7 +499,7 @@ void blobSetBytes(int sourceLocator,\n                       int forLength, \n                       byte[] bytes) throws SqlException\n     {\n-        if (blobSetBytesCall == null) {\n+        if (blobSetBytesCall == null || !blobSetBytesCall.openOnClient_) {\n             blobSetBytesCall = connection.prepareCallX\n                 (\"CALL SYSIBM.BLOBSETBYTES(?, ?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -551,7 +555,7 @@ void blobSetBytes(int sourceLocator,\n      */\n     void blobTruncate(int sourceLocator, long length) throws SqlException\n     {\n-        if (blobTruncateCall == null) {\n+        if (blobTruncateCall == null || !blobTruncateCall.openOnClient_) {\n             blobTruncateCall = connection.prepareCallX\n                 (\"CALL SYSIBM.BLOBTRUNCATE(?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -590,7 +594,8 @@ int clobCreateLocator() throws SqlException\n         }\n         \n         try {\n-            if (clobCreateLocatorCall == null) {\n+            if (clobCreateLocatorCall == null ||\n+                    !clobCreateLocatorCall.openOnClient_) {\n                 clobCreateLocatorCall = connection.prepareCallX\n                         (\"? = CALL SYSIBM.CLOBCREATELOCATOR()\",\n                         java.sql.ResultSet.TYPE_FORWARD_ONLY,\n@@ -641,7 +646,8 @@ int clobCreateLocator() throws SqlException\n      */\n     void clobReleaseLocator(int locator) throws SqlException\n     {\n-        if (clobReleaseLocatorCall == null) {\n+        if (clobReleaseLocatorCall == null ||\n+                !clobReleaseLocatorCall.openOnClient_) {\n             clobReleaseLocatorCall = connection.prepareCallX\n                 (\"CALL SYSIBM.CLOBRELEASELOCATOR(?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -760,7 +766,8 @@ private long clobGetPositionFromString(int locator,\n                                            int offset,\n                                            int length) throws SqlException\n     {\n-        if (clobGetPositionFromStringCall == null) {\n+        if (clobGetPositionFromStringCall == null ||\n+                !clobGetPositionFromStringCall.openOnClient_) {\n             clobGetPositionFromStringCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.CLOBGETPOSITIONFROMSTRING(?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -809,7 +816,8 @@ long clobGetPositionFromLocator(int locator,\n                                     int searchLocator, \n                                     long fromPosition) throws SqlException\n     {\n-        if (clobGetPositionFromLocatorCall == null) {\n+        if (clobGetPositionFromLocatorCall == null ||\n+                !clobGetPositionFromLocatorCall.openOnClient_) {\n             clobGetPositionFromLocatorCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.CLOBGETPOSITIONFROMLOCATOR(?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -843,7 +851,7 @@ long clobGetPositionFromLocator(int locator,\n      */\n     long clobGetLength(int sourceLocator) throws SqlException\n     {\n-        if (clobGetLengthCall == null) {\n+        if (clobGetLengthCall == null || !clobGetLengthCall.openOnClient_) {\n             clobGetLengthCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.CLOBGETLENGTH(?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -893,7 +901,8 @@ String clobGetSubString(int sourceLocator, long fromPosition, int forLength)\n     {\n         if (forLength == 0) return \"\";\n \n-        if (clobGetSubStringCall == null) {\n+        if (clobGetSubStringCall == null ||\n+                !clobGetSubStringCall.openOnClient_) {\n             clobGetSubStringCall = connection.prepareCallX\n                 (\"? = CALL SYSIBM.CLOBGETSUBSTRING(?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -969,7 +978,7 @@ void clobSetString(int sourceLocator,\n                        int forLength, \n                        String string) throws SqlException\n     {\n-        if (clobSetStringCall == null) {\n+        if (clobSetStringCall == null || !clobSetStringCall.openOnClient_) {\n             clobSetStringCall = connection.prepareCallX\n                 (\"CALL SYSIBM.CLOBSETSTRING(?, ?, ?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, \n@@ -1021,7 +1030,7 @@ void clobSetString(int sourceLocator,\n      */\n     void clobTruncate(int sourceLocator, long length) throws SqlException\n     {\n-        if (clobTruncateCall == null) {\n+        if (clobTruncateCall == null || !clobTruncateCall.openOnClient_) {\n             clobTruncateCall = connection.prepareCallX\n                 (\"CALL SYSIBM.CLOBTRUNCATE(?, ?)\",\n                  java.sql.ResultSet.TYPE_FORWARD_ONLY, "
            },
            {
                "sha": "c857113a7fecded3fb7850dcd49f0468a71a24b7",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "status": "modified",
                "additions": 32,
                "deletions": 0,
                "changes": 32,
                "blob_url": "https://github.com/apache/derby/blob/51ef6db8abbd980b391ad9ce3d18d521134d8038/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "raw_url": "https://github.com/apache/derby/raw/51ef6db8abbd980b391ad9ce3d18d521134d8038/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java?ref=51ef6db8abbd980b391ad9ce3d18d521134d8038",
                "patch": "@@ -155,6 +155,7 @@ private static Test baseSuite(String postfix) {\n         suite.addTest(new J2EEDataSourceTest(\"testPooledReuseOnClose\"));\n         suite.addTest(new J2EEDataSourceTest(\"testSchemaIsReset\"));\n         suite.addTest(new J2EEDataSourceTest(\"testSchemaIsResetWhenDeleted\"));\n+        suite.addTest(new J2EEDataSourceTest(\"testDerby3799\"));\n         return suite;\n     }\n \n@@ -243,6 +244,9 @@ protected void decorateSQL(Statement s) throws SQLException {\n                             \"'org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.\" +\n                             getNestedMethodName() +\n                     \"'\");\n+                    s.execute(\"create table derby3799 (dClob clob)\");\n+                    s.executeUpdate(\"insert into derby3799 values (\" +\n+                            \"'myLittleTestClob')\");\n                 }\n             };\n         }\n@@ -3048,6 +3052,34 @@ public void testConnectionLeakInDatabaseMetaData()\n         }\n     }\n \n+    /**\n+     * Regression test for a NullPointerException when trying to use the LOB\n+     * stored procedures after closing and then getting a new logical\n+     * connection. The problem was that the LOB stored procedure objects on the\n+     * server side were closed and not reprepared.\n+     * See Jira issue DERBY-3799.\n+     */\n+    public void testDerby3799() throws SQLException {\n+        ConnectionPoolDataSource cpDs =\n+                J2EEDataSource.getConnectionPoolDataSource();\n+        PooledConnection pc = cpDs.getPooledConnection();\n+        // Get first logical connection.\n+        Connection con1 = pc.getConnection();\n+        Statement stmt = con1.createStatement();\n+        ResultSet rs = stmt.executeQuery(\"select dClob from derby3799\");\n+        assertTrue(rs.next());\n+        rs.getString(1);\n+        rs.close();\n+        con1.close();\n+        // Get second logical connection.\n+        Connection con2 = pc.getConnection();\n+        stmt = con2.createStatement();\n+        rs = stmt.executeQuery(\"select dClob from derby3799\");\n+        assertTrue(rs.next());\n+        rs.getString(1); // NPE happened here.\n+        con2.close();\n+    }\n+\n     /**\n      * Tests for DERBY-1144\n      * "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/8a4e363f3d59ea8cbe135ef9f77445f65ad915f2",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/a840fa504d9984b8a79ba99c41a3dd09023975f3",
        "message": "DERBY-3695: NullPointerException when invoking statement event listeners if one of the listeners is null\n\nMade addStatementEventListener(null) a no-op on the client to match embedded.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@661292 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_66",
        "file": [
            {
                "sha": "a3fd041d98317d30b8da08b2c92d106d1dc56e3c",
                "filename": "java/client/org/apache/derby/client/ClientPooledConnection40.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/8a4e363f3d59ea8cbe135ef9f77445f65ad915f2/java/client/org/apache/derby/client/ClientPooledConnection40.java",
                "raw_url": "https://github.com/apache/derby/raw/8a4e363f3d59ea8cbe135ef9f77445f65ad915f2/java/client/org/apache/derby/client/ClientPooledConnection40.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/ClientPooledConnection40.java?ref=8a4e363f3d59ea8cbe135ef9f77445f65ad915f2",
                "patch": "@@ -81,7 +81,9 @@ public void addStatementEventListener(StatementEventListener listener) {\n         if (logWriter_ != null) {\n             logWriter_.traceEntry(this, \"addStatementEventListener\", listener);\n         }\n-        statementEventListeners.add(listener);\n+        if (listener != null) {\n+            statementEventListeners.add(listener);\n+        }\n     }\n     \n     /**"
            },
            {
                "sha": "1c73ffade10bb26bc1550a80df41abbe4caba7e5",
                "filename": "java/client/org/apache/derby/client/ClientXAConnection40.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/8a4e363f3d59ea8cbe135ef9f77445f65ad915f2/java/client/org/apache/derby/client/ClientXAConnection40.java",
                "raw_url": "https://github.com/apache/derby/raw/8a4e363f3d59ea8cbe135ef9f77445f65ad915f2/java/client/org/apache/derby/client/ClientXAConnection40.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/ClientXAConnection40.java?ref=8a4e363f3d59ea8cbe135ef9f77445f65ad915f2",
                "patch": "@@ -91,7 +91,9 @@ public void addStatementEventListener(StatementEventListener listener) {\n         if (logWriter_ != null) {\n             logWriter_.traceEntry(this, \"addStatementEventListener\", listener);\n         }\n-        statementEventListeners.add(listener);\n+        if (listener != null) {\n+            statementEventListeners.add(listener);\n+        }\n     }\n     \n     /**"
            },
            {
                "sha": "946a256dd22fae9477584ad3e59b4b6655aebbb3",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java",
                "status": "modified",
                "additions": 29,
                "deletions": 0,
                "changes": 29,
                "blob_url": "https://github.com/apache/derby/blob/8a4e363f3d59ea8cbe135ef9f77445f65ad915f2/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java",
                "raw_url": "https://github.com/apache/derby/raw/8a4e363f3d59ea8cbe135ef9f77445f65ad915f2/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java?ref=8a4e363f3d59ea8cbe135ef9f77445f65ad915f2",
                "patch": "@@ -231,6 +231,35 @@ public void testCloseEvent() throws SQLException {\n         assertEquals(\"Incorrect close count.\", 1, closedCount);\n     }\n \n+    /**\n+     * Test that you don't get a NullPointerException when the listeners are\n+     * triggered and one of them is null. DERBY-3695\n+     */\n+    public void testAddNullEvent() throws SQLException {\n+        pooledConnection.addStatementEventListener(null);\n+        PreparedStatement ps = prepare(\"VALUES (1)\");\n+        ps.close(); // trigger close event\n+        assertEquals(1, closedCount);\n+        assertEquals(0, errorCount);\n+        ps = prepare(\"VALUES (1)\");\n+        connection.close();\n+        try {\n+            ps.execute();\n+            fail(\"Execute should fail on closed connection\");\n+        } catch (SQLNonTransientConnectionException e) {\n+            assertSQLState(\"08003\", e);\n+        }\n+        assertEquals(1, errorCount);\n+    }\n+\n+    /**\n+     * Test that you can call {@code removeStatementEventListener()} with a\n+     * {@code null} argument.\n+     */\n+    public void testRemoveNullEvent() throws SQLException {\n+        pooledConnection.removeStatementEventListener(null);\n+    }\n+\n     /**\n      * Test whether a close event is raised when a connection is\n      * closed. (Client should raise a close event since the connection calls"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/ad15102afe0541a4b1a95f51a60833a2a1dea880",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/58500429d531b30d0f7e5927500ee948deb738ca",
        "message": "DERBY-3685: weme 6.1 Base connection pooling suitejunit.framework.AssertionFailedError: java.lang.NullPointerException.\nThe test causing the failures will no longer be run in a JavaME environment.\nPatch file: derby-3685-1a-disable_test_javame.diff\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@659166 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_67",
        "file": [
            {
                "sha": "84913b1cb58510b41521ac34ed32ffb2f079919b",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java",
                "status": "modified",
                "additions": 5,
                "deletions": 0,
                "changes": 5,
                "blob_url": "https://github.com/apache/derby/blob/ad15102afe0541a4b1a95f51a60833a2a1dea880/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java",
                "raw_url": "https://github.com/apache/derby/raw/ad15102afe0541a4b1a95f51a60833a2a1dea880/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java?ref=ad15102afe0541a4b1a95f51a60833a2a1dea880",
                "patch": "@@ -223,6 +223,11 @@ public static Test suite() {\n      * @return A suite of tests.\n      */\n     private static Test connectionPoolingSuite(String jdbcClient) {\n+        // Return an empty suite if running in JavaME environment.\n+        if (JDBC.vmSupportsJSR169()) {\n+            return new TestSuite(\"Base connection pooling suite:DISABLED\");\n+        }\n+\n         TestSuite baseCpSuite = new TestSuite(\"Base connection pooling suite\");\n         // Add the tests here.\n         baseCpSuite.addTest(new DatabaseMetaDataTest(\"testConnectionSpecific\"));"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/16164d57a7a25381b85671379a516fee80b845ac",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/c3df437ba649c5427e68beaebae51499f6fa201d",
        "message": "DERBY-3321: NullPointerException for 'NOT EXISTS' with nested subquery\nChecks fromList for a FromSubquery using a CollectNodesVistior.\nThe value of bindTargetListOnly is based on the contents of the visitor. \nPatch contributed by Thomas Nielsen\nPatch file: d3321.diff\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@634316 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_68",
        "file": [
            {
                "sha": "30fd57a1a6a27534b9e076de6c7b71d5210e9f37",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "status": "modified",
                "additions": 12,
                "deletions": 1,
                "changes": 13,
                "blob_url": "https://github.com/apache/derby/blob/16164d57a7a25381b85671379a516fee80b845ac/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "raw_url": "https://github.com/apache/derby/raw/16164d57a7a25381b85671379a516fee80b845ac/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java?ref=16164d57a7a25381b85671379a516fee80b845ac",
                "patch": "@@ -591,7 +591,18 @@ public void bindExpressionsWithTables(FromList fromListParam)\n \tpublic void bindTargetExpressions(FromList fromListParam)\n \t\t\t\t\tthrows StandardException\n \t{\n-\t\tbindTargetListOnly = true;\n+\t\t/*\n+\t\t * With a FromSubquery in the FromList we cannot bind target expressions \n+\t\t * at this level (DERBY-3321)\n+\t\t */\n+\t\tCollectNodesVisitor cnv = new CollectNodesVisitor(FromSubquery.class, \n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FromSubquery.class);\n+\t\tfromList.accept(cnv);\n+\t\tif (!cnv.getList().isEmpty()){\t\t\n+\t\t\tbindTargetListOnly = false;\n+\t\t} else {\n+\t\t\tbindTargetListOnly = true;\t\t\t\t\n+\t\t}\t\t\n \t\tbindExpressions(fromListParam);\n \t\tbindTargetListOnly = false;\n \t}"
            },
            {
                "sha": "987d85b03dd53d7e47daadce648a7fda06fa2571",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java",
                "status": "modified",
                "additions": 30,
                "deletions": 0,
                "changes": 30,
                "blob_url": "https://github.com/apache/derby/blob/16164d57a7a25381b85671379a516fee80b845ac/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java",
                "raw_url": "https://github.com/apache/derby/raw/16164d57a7a25381b85671379a516fee80b845ac/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java?ref=16164d57a7a25381b85671379a516fee80b845ac",
                "patch": "@@ -355,6 +355,33 @@ public void testBasicOperations()\n \t\t/* Expected rows are as above */\n \t\tJDBC.assertUnorderedResultSet(rs, expectedRows);\n \t\t\n+\t\t/*\n+\t\t * DERBY-3321 revealed an NPE with a subquery in the [NOT] EXIST subuery FromList.\n+\t\t */\n+\t\ts.executeUpdate(\"create table a (aa int, bb int)\");\n+\t\ts.executeUpdate(\"create table b (bb int)\");\n+\t\ts.executeUpdate(\"insert into a values (1,1),(1,2),(2,2)\");\n+\t\ts.executeUpdate(\"insert into b values (1)\");\n+\t\t\n+\t\t/* NOT EXISTS */\n+\t\tsb = new StringBuffer();\n+\t\tsb.append(\"select * from a \");\n+\t\tsb.append(\"where not exists \");\n+\t\tsb.append(\"(select bb from (select bb from b) p where a.bb=p.bb)\");\n+\t\trs = s.executeQuery(sb.toString());\n+\t\texpectedRows = new String [][] {{\"1\",\"2\"},\t\t\n+\t\t\t\t\t\t\t\t\t\t{\"2\",\"2\"}};\n+\t\tJDBC.assertUnorderedResultSet(rs, expectedRows);\t\t\n+\t\t\n+\t\t/* EXISTS */\n+\t\tsb = new StringBuffer();\n+\t\tsb.append(\"select * from a \");\n+\t\tsb.append(\"where exists \");\n+\t\tsb.append(\"(select bb from (select bb from b) p where a.bb=p.bb)\");\n+\t\trs = s.executeQuery(sb.toString());\n+\t\texpectedRows = new String [][] {{\"1\",\"1\"}};\t\t\t\t\t\t\t\t\t\t\n+\t\tJDBC.assertUnorderedResultSet(rs, expectedRows);\t\n+\t\t\n \t\t/*\n \t\t * Clean up the tables used.\n \t\t */\t\t\t\t\n@@ -363,6 +390,9 @@ public void testBasicOperations()\n \t\ts.executeUpdate(\"drop table employees\");\n \t\ts.executeUpdate(\"drop table departments\");\t\t\t\n \t\t\n+\t\ts.executeUpdate(\"drop table a\");\t\n+\t\ts.executeUpdate(\"drop table b\");\t\n+\t\t\n \t\ts.close();\n \t}\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/e57849fb3a397b27948bf535cc157bcf7a263474",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/20bd3c03d9d5d3e1b255a057e924439f155d886d",
        "message": "DERBY-2142 NullPointerException while using XAConnection/PooledConnection in a heavily contended multithreaded scenario\n\ncore fix contributed by Asif Shahid with further suggestions from Dan Debrunner \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@616141 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_69",
        "file": [
            {
                "sha": "806886cd96c739137c39ec4590b166d3d4576420",
                "filename": "java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java",
                "status": "modified",
                "additions": 19,
                "deletions": 19,
                "changes": 38,
                "blob_url": "https://github.com/apache/derby/blob/e57849fb3a397b27948bf535cc157bcf7a263474/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java",
                "raw_url": "https://github.com/apache/derby/raw/e57849fb3a397b27948bf535cc157bcf7a263474/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java?ref=e57849fb3a397b27948bf535cc157bcf7a263474",
                "patch": "@@ -337,23 +337,8 @@ public synchronized void notifyError(SQLException exception)\n \t\t}\n \t}\n \n-\t// my conneciton handle is being closed\n-\tpublic synchronized void notifyClose()\n-\t{\n-\t\t// tell my listeners I am closed \n-\t\tif (eventListener != null && eventListener.size() > 0)\n-\t\t{\n-\t\t\tConnectionEvent closeEvent = new ConnectionEvent(this);\n \n-\t\t\tfor (Enumeration e = eventListener.elements();\n-\t\t\t\t e.hasMoreElements(); )\n-\t\t\t{\n-\t\t\t\tConnectionEventListener l =\n-\t\t\t\t\t(ConnectionEventListener)e.nextElement();\n-\t\t\t\tl.connectionClosed(closeEvent);\n-\t\t\t}\n-\t\t}\n-\t}\n+       \n \n \tfinal void checkActive() throws SQLException {\n \t\tif (!isActive)\n@@ -431,13 +416,28 @@ public void checkCommit() throws SQLException {\n \t/**\n \t\tClose called on BrokeredConnection. If this call\n \t\treturns true then getRealConnection().close() will be called.\n-\n+\t\t\n+\t\tNotify listners that connection is closed.\n \t\tDon't close the underlying real connection as\n \t\tit is pooled.\n \t*/\n-\tpublic boolean closingConnection() throws SQLException {\n-\t\tnotifyClose();\n+\tpublic synchronized boolean closingConnection() throws SQLException {\t    \n+\t\t//DERBY-2142 - Null out the connection handle BEFORE notifying listeners.\n \t\tcurrentConnectionHandle = null;\n+\t\t// tell my listeners I am closed \n+\t\tif (eventListener != null && eventListener.size() > 0)\n+\t\t{\n+\t\t\tConnectionEvent closeEvent = new ConnectionEvent(this);\n+\n+\t\t\tfor (Enumeration e = eventListener.elements();\n+\t\t\t\t e.hasMoreElements(); )\n+\t\t\t{\n+\t\t\t\tConnectionEventListener l =\n+\t\t\t\t\t(ConnectionEventListener)e.nextElement();\n+\t\t\t\tl.connectionClosed(closeEvent);\n+\t\t\t}\n+\t\t}\n+\n \t\treturn false;\n \t}\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/ba778a7d940931c83ef8b26d8230399c8d992a05",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/ddeb0005d5bd624ed0762029933706b101698447",
        "message": "DERBY-3215 Potential NullPointerException in CachedPage class\n\nPatch DERBY-3215.diff. Fixes two erroneous usages of \nStandardException.newException(SQLState.FILE_WRITE_PAGE_EXCEPTION,..)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@596853 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_70",
        "file": [
            {
                "sha": "b35261f787e70ef369f4ce301b3aa8a838dfcd2c",
                "filename": "java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/ba778a7d940931c83ef8b26d8230399c8d992a05/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java",
                "raw_url": "https://github.com/apache/derby/raw/ba778a7d940931c83ef8b26d8230399c8d992a05/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java?ref=ba778a7d940931c83ef8b26d8230399c8d992a05",
                "patch": "@@ -816,7 +816,7 @@ private void writePage(\n \t\t\t\t// page cannot be written\n \t\t\t\tthrow StandardException.newException(\n                     SQLState.FILE_WRITE_PAGE_EXCEPTION, \n-                    ioe, identity, new Integer(myContainer.getPageSize()));\n+                    ioe, identity);\n \t\t\t}\n \t\t\tfinally\n \t\t\t{\n@@ -833,7 +833,7 @@ private void writePage(\n \t\t\tthrow dataFactory.markCorrupt(\n                 StandardException.newException(\n                     SQLState.FILE_WRITE_PAGE_EXCEPTION, nested, \n-                    identity, new Integer(myContainer.getPageSize())));\n+                    identity));\n \t\t}\n \n \t\tsynchronized (this) "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/c85f934018cc406383281d302c2780db467f3deb",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/4d73a7a266a7edaca003310a35c6685d13cf5838",
        "message": "DERBY-2018: NullPointerException in CREATE VIEW ... VALUES NULL\n\nThis patch was contributed by Yip Ng (yipng168@gmail.com)\n\nThis fix catches untyped null in CreateViewNode at bind phase (same logic\nas CursorNode) and throws the exception. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@473603 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_71",
        "file": [
            {
                "sha": "2c949d6857b83279024ff1eb86567b40800ca3b3",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/c85f934018cc406383281d302c2780db467f3deb/java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java",
                "raw_url": "https://github.com/apache/derby/raw/c85f934018cc406383281d302c2780db467f3deb/java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java?ref=c85f934018cc406383281d302c2780db467f3deb",
                "patch": "@@ -276,6 +276,10 @@ public QueryTreeNode bind() throws StandardException\n \n \t\t\t// bind the query expression\n \t\t\tqueryExpr.bindResultColumns(fromList);\n+\t\t\t\n+\t\t\t// rejects any untyped nulls in the RCL\n+\t\t\t// e.g.:  CREATE VIEW v1 AS VALUES NULL\n+\t\t\tqueryExpr.bindUntypedNullsToResultColumns(null);\n \t\t}\n \t\tfinally\n \t\t{"
            },
            {
                "sha": "098cde599eecf491f596a4d8f8e01a3960b8ef27",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/views.out",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/c85f934018cc406383281d302c2780db467f3deb/java/testing/org/apache/derbyTesting/functionTests/master/views.out",
                "raw_url": "https://github.com/apache/derby/raw/c85f934018cc406383281d302c2780db467f3deb/java/testing/org/apache/derbyTesting/functionTests/master/views.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/views.out?ref=c85f934018cc406383281d302c2780db467f3deb",
                "patch": "@@ -386,4 +386,8 @@ ij> DROP TABLE TEST_SCHEMA.T1;\n 0 rows inserted/updated/deleted\n ij> DROP SCHEMA TEST_SCHEMA RESTRICT;\n 0 rows inserted/updated/deleted\n+ij> -- DERBY-2018\n+-- expect error\n+CREATE VIEW v1(c1) AS VALUES NULL;\n+ERROR 42X07: Null is only allowed in a VALUES clause within an INSERT statement.\n ij> \n\\ No newline at end of file"
            },
            {
                "sha": "95a8b598eed276ff850d46bdd508be8029afb304",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/views.sql",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/c85f934018cc406383281d302c2780db467f3deb/java/testing/org/apache/derbyTesting/functionTests/tests/lang/views.sql",
                "raw_url": "https://github.com/apache/derby/raw/c85f934018cc406383281d302c2780db467f3deb/java/testing/org/apache/derbyTesting/functionTests/tests/lang/views.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/views.sql?ref=c85f934018cc406383281d302c2780db467f3deb",
                "patch": "@@ -199,3 +199,7 @@ CREATE VIEW TEST_SCHEMA.V1 AS SELECT TABLE_COLUMN AS VIEW_COLUMN FROM TEST_SCHEM\n DROP VIEW TEST_SCHEMA.V1; \n DROP TABLE TEST_SCHEMA.T1;\n DROP SCHEMA TEST_SCHEMA RESTRICT; \n+\n+-- DERBY-2018\n+-- expect error\n+CREATE VIEW v1(c1) AS VALUES NULL;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/a0f840505f3e0d8fc5e547a34ce014f8b06d3b9a",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/0b466fe4bd5a5093c72771869f200d667024499e",
        "message": "DERBY-1743: derbynet/testSecMec.java fails with NullPointerException\n(intermittent failure)\n\nMake sure the logWriter is not null before printing the stack trace.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@434018 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_72",
        "file": [
            {
                "sha": "6fa1f4a8dd0c23fbfa32c4c91a90a434cf7dd3e7",
                "filename": "java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/a0f840505f3e0d8fc5e547a34ce014f8b06d3b9a/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java",
                "raw_url": "https://github.com/apache/derby/raw/a0f840505f3e0d8fc5e547a34ce014f8b06d3b9a/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java?ref=a0f840505f3e0d8fc5e547a34ce014f8b06d3b9a",
                "patch": "@@ -294,8 +294,7 @@ else if (msgid.equals(DRDA_Proto_RDBNFNRM))\n \t\t\t\t\t\t\t\t   agent.getSession().drdaID, \n \t\t\t\t\t\t\t\t   msg);\n \t\t\tNetworkServerControlImpl s = agent.getServer();\n-\t\t\ts.consoleMessage(msg);\n-\t\t\tthis.printStackTrace(s.logWriter);\n+\t\t\ts.consoleExceptionPrintTrace(this);\n \t\t}\n \t}\n \t"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/16f1998896cf141b6dbbaf994c3a254881fdbbf8",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/e1d51e30d03fd2381aec3c02ecd6399b4cef5df0",
        "message": "DERBY-1356: Positioned update/delete when positioned after last or\nbefore first causes NullPointerException\n\nPatch contributed by Fernanda Pizzorno <Fernanda.Pizzorno@Sun.COM>.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@411428 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_73",
        "file": [
            {
                "sha": "d462fe9b065ed3ca58dd448e5df10b784e1f5fb0",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java",
                "status": "modified",
                "additions": 14,
                "deletions": 8,
                "changes": 22,
                "blob_url": "https://github.com/apache/derby/blob/16f1998896cf141b6dbbaf994c3a254881fdbbf8/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/16f1998896cf141b6dbbaf994c3a254881fdbbf8/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java?ref=16f1998896cf141b6dbbaf994c3a254881fdbbf8",
                "patch": "@@ -1124,10 +1124,13 @@ public void markRowAsDeleted() throws StandardException  {\n \t * @exception StandardException on error\n \t */\n \tpublic boolean isDeleted() throws StandardException  {\n-\t\tpositionInHashTable.setValue(currentPosition);\n-\t\tDataValueDescriptor[] hashRowArray = (DataValueDescriptor[]) \n-\t\t\t\tht.get(positionInHashTable);\n-\t\treturn hashRowArray[POS_ROWDELETED].getBoolean();\n+\t\tif (currentPosition <= positionInSource && currentPosition > 0) {\n+\t\t\tpositionInHashTable.setValue(currentPosition);\n+\t\t\tDataValueDescriptor[] hashRowArray = (DataValueDescriptor[]) \n+\t\t\t\t\tht.get(positionInHashTable);\n+\t\t\treturn hashRowArray[POS_ROWDELETED].getBoolean();\n+\t\t}\n+\t\treturn false;\n \t}\n \n \t/**\n@@ -1139,10 +1142,13 @@ public boolean isDeleted() throws StandardException  {\n \t * @exception StandardException on error\n \t */\n \tpublic boolean isUpdated() throws StandardException {\n-\t\tpositionInHashTable.setValue(currentPosition);\n-\t\tDataValueDescriptor[] hashRowArray = (DataValueDescriptor[]) \n-\t\t\t\tht.get(positionInHashTable);\n-\t\treturn hashRowArray[POS_ROWUPDATED].getBoolean();\t\t\t\n+\t\tif (currentPosition <= positionInSource && currentPosition > 0) {\n+\t\t\tpositionInHashTable.setValue(currentPosition);\n+\t\t\tDataValueDescriptor[] hashRowArray = (DataValueDescriptor[]) \n+\t\t\t\t\tht.get(positionInHashTable);\n+\t\t\treturn hashRowArray[POS_ROWUPDATED].getBoolean();\n+\t\t}\n+\t\treturn false;\n \t}\n \n \tpublic boolean isForUpdate() {"
            },
            {
                "sha": "f336e809192565a9378cdf9ff3910895d90a6649",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/SURTest_ij.out",
                "status": "added",
                "additions": 161,
                "deletions": 0,
                "changes": 161,
                "blob_url": "https://github.com/apache/derby/blob/16f1998896cf141b6dbbaf994c3a254881fdbbf8/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/SURTest_ij.out",
                "raw_url": "https://github.com/apache/derby/raw/16f1998896cf141b6dbbaf994c3a254881fdbbf8/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/SURTest_ij.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/SURTest_ij.out?ref=16f1998896cf141b6dbbaf994c3a254881fdbbf8",
                "patch": "@@ -0,0 +1,161 @@\n+CONNECTION0* - \tjdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/SURTest;create=true\n+* = current connection\n+ij> connect 'SURTest;create=true;';\n+ij(CONNECTION1)> autocommit off;\n+ij(CONNECTION1)> create table t1 (c1 int primary key, c2 int);\n+0 rows inserted/updated/deleted\n+ij(CONNECTION1)> insert into t1 values \n+    (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), \n+    (6, 6), (7, 7), (8, 8), (9, 9), (10, 10);\n+10 rows inserted/updated/deleted\n+ij(CONNECTION1)> get scroll insensitive cursor sc1 as 'SELECT * FROM t1 FOR UPDATE';\n+ij(CONNECTION1)> next sc1;\n+C1 |C2         \n+-----\n+1 |1          \n+ij(CONNECTION1)> next sc1;\n+C1 |C2         \n+-----\n+2 |2          \n+ij(CONNECTION1)> -- update row nr. 2 after positioning with next\n+update t1 set c2 = c1 + 20 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> absolute 5 sc1;\n+C1 |C2         \n+-----\n+5 |5          \n+ij(CONNECTION1)> -- update row nr. 5 after positioning with absolute\n+update t1 set c2 = c1 + 20 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> relative 2 sc1;\n+C1 |C2         \n+-----\n+7 |7          \n+ij(CONNECTION1)> -- update row nr. 7 after positioning with relative\n+update t1 set c2 = c1 + 20 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> previous sc1;\n+C1 |C2         \n+-----\n+6 |6          \n+ij(CONNECTION1)> -- update row nr. 6 after positioning with previous\n+update t1 set c2 = c1 + 20 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> relative -1 sc1;\n+C1 |C2         \n+-----\n+5 |25         \n+ij(CONNECTION1)> last sc1;\n+C1 |C2         \n+-----\n+10 |10         \n+ij(CONNECTION1)> -- update row nr. 10 after positioning with last\n+update t1 set c2 = c1 + 20 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> after last sc1;\n+No current row\n+ij(CONNECTION1)> -- update when positioned after last should cause an error\n+update t1 set c2 = c1 + 20 where current of sc1;\n+ERROR XCL08: Cursor 'SQL_CURLH000C1' is not on a row.\n+ij(CONNECTION1)> first sc1;\n+C1 |C2         \n+-----\n+1 |1          \n+ij(CONNECTION1)> -- update row nr. 1 after positioning with first\n+update t1 set c2 = c1 + 20 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> before first sc1;\n+No current row\n+ij(CONNECTION1)> -- update when positioned before first should cause an error\n+update t1 set c2 = c1 + 20 where current of sc1;\n+ERROR XCL08: Cursor 'SQL_CURLH000C1' is not on a row.\n+ij(CONNECTION1)> close sc1;\n+ij(CONNECTION1)> commit;\n+ij(CONNECTION1)> -- check that row where correctly updated\n+select * from t1;\n+C1 |C2         \n+-----\n+1 |21         \n+2 |22         \n+3 |3          \n+4 |4          \n+5 |25         \n+6 |26         \n+7 |27         \n+8 |8          \n+9 |9          \n+10 |30         \n+10 rows selected\n+ij(CONNECTION1)> get scroll insensitive cursor sc1 as 'SELECT * FROM t1 FOR UPDATE';\n+ij(CONNECTION1)> next sc1;\n+C1 |C2         \n+-----\n+1 |21         \n+ij(CONNECTION1)> next sc1;\n+C1 |C2         \n+-----\n+2 |22         \n+ij(CONNECTION1)> -- delete row nr. 2 after positioning with next\n+delete from t1 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> absolute 5 sc1;\n+C1 |C2         \n+-----\n+5 |25         \n+ij(CONNECTION1)> -- delete row nr. 5 after positioning with absolute\n+delete from t1 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> relative 2 sc1;\n+C1 |C2         \n+-----\n+7 |27         \n+ij(CONNECTION1)> -- delete row nr. 7 after positioning with relative\n+delete from t1 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> previous sc1;\n+C1 |C2         \n+-----\n+6 |26         \n+ij(CONNECTION1)> -- delete row nr. 6 after positioning with previous\n+delete from t1 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> relative -1 sc1;\n+C1 |C2         \n+-----\n+NULL |NULL       \n+ij(CONNECTION1)> last sc1;\n+C1 |C2         \n+-----\n+10 |30         \n+ij(CONNECTION1)> -- delete row nr. 10 after positioning with last\n+delete from t1 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> after last sc1;\n+No current row\n+ij(CONNECTION1)> -- delete when positioned after last should cause an error\n+delete from t1 where current of sc1;\n+ERROR XCL08: Cursor 'SQL_CURLH000C1' is not on a row.\n+ij(CONNECTION1)> first sc1;\n+C1 |C2         \n+-----\n+1 |21         \n+ij(CONNECTION1)> -- delete row nr. 1 after positioning with first\n+delete from t1 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> before first sc1;\n+No current row\n+ij(CONNECTION1)> -- delete when positioned before first should cause an error\n+delete from t1 where current of sc1;\n+ERROR XCL08: Cursor 'SQL_CURLH000C1' is not on a row.\n+ij(CONNECTION1)> close sc1;\n+ij(CONNECTION1)> commit;\n+ij(CONNECTION1)> -- check that row where correctly updated\n+select * from t1;\n+C1 |C2         \n+-----\n+3 |3          \n+4 |4          \n+8 |8          \n+9 |9          \n+4 rows selected\n+ij(CONNECTION1)> "
            },
            {
                "sha": "22d00414933eedb07d1f00d44908523d762af56b",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/SURTest_ij.out",
                "status": "added",
                "additions": 162,
                "deletions": 0,
                "changes": 162,
                "blob_url": "https://github.com/apache/derby/blob/16f1998896cf141b6dbbaf994c3a254881fdbbf8/java/testing/org/apache/derbyTesting/functionTests/master/SURTest_ij.out",
                "raw_url": "https://github.com/apache/derby/raw/16f1998896cf141b6dbbaf994c3a254881fdbbf8/java/testing/org/apache/derbyTesting/functionTests/master/SURTest_ij.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/SURTest_ij.out?ref=16f1998896cf141b6dbbaf994c3a254881fdbbf8",
                "patch": "@@ -0,0 +1,162 @@\n+CONNECTION0* - \tjdbc:derby:SURTest\n+* = current connection\n+ij> connect 'SURTest;create=true;';\n+WARNING 01J01: Database 'SURTest' not created, connection made to existing database instead.\n+ij(CONNECTION1)> autocommit off;\n+ij(CONNECTION1)> create table t1 (c1 int primary key, c2 int);\n+0 rows inserted/updated/deleted\n+ij(CONNECTION1)> insert into t1 values \n+    (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), \n+    (6, 6), (7, 7), (8, 8), (9, 9), (10, 10);\n+10 rows inserted/updated/deleted\n+ij(CONNECTION1)> get scroll insensitive cursor sc1 as 'SELECT * FROM t1 FOR UPDATE';\n+ij(CONNECTION1)> next sc1;\n+C1         |C2         \n+-----------------------\n+1          |1          \n+ij(CONNECTION1)> next sc1;\n+C1         |C2         \n+-----------------------\n+2          |2          \n+ij(CONNECTION1)> -- update row nr. 2 after positioning with next\n+update t1 set c2 = c1 + 20 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> absolute 5 sc1;\n+C1         |C2         \n+-----------------------\n+5          |5          \n+ij(CONNECTION1)> -- update row nr. 5 after positioning with absolute\n+update t1 set c2 = c1 + 20 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> relative 2 sc1;\n+C1         |C2         \n+-----------------------\n+7          |7          \n+ij(CONNECTION1)> -- update row nr. 7 after positioning with relative\n+update t1 set c2 = c1 + 20 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> previous sc1;\n+C1         |C2         \n+-----------------------\n+6          |6          \n+ij(CONNECTION1)> -- update row nr. 6 after positioning with previous\n+update t1 set c2 = c1 + 20 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> relative -1 sc1;\n+C1         |C2         \n+-----------------------\n+5          |25         \n+ij(CONNECTION1)> last sc1;\n+C1         |C2         \n+-----------------------\n+10         |10         \n+ij(CONNECTION1)> -- update row nr. 10 after positioning with last\n+update t1 set c2 = c1 + 20 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> after last sc1;\n+No current row\n+ij(CONNECTION1)> -- update when positioned after last should cause an error\n+update t1 set c2 = c1 + 20 where current of sc1;\n+ERROR XCL08: Cursor 'SC1' is not on a row.\n+ij(CONNECTION1)> first sc1;\n+C1         |C2         \n+-----------------------\n+1          |1          \n+ij(CONNECTION1)> -- update row nr. 1 after positioning with first\n+update t1 set c2 = c1 + 20 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> before first sc1;\n+No current row\n+ij(CONNECTION1)> -- update when positioned before first should cause an error\n+update t1 set c2 = c1 + 20 where current of sc1;\n+ERROR XCL08: Cursor 'SC1' is not on a row.\n+ij(CONNECTION1)> close sc1;\n+ij(CONNECTION1)> commit;\n+ij(CONNECTION1)> -- check that row where correctly updated\n+select * from t1;\n+C1         |C2         \n+-----------------------\n+1          |21         \n+2          |22         \n+3          |3          \n+4          |4          \n+5          |25         \n+6          |26         \n+7          |27         \n+8          |8          \n+9          |9          \n+10         |30         \n+10 rows selected\n+ij(CONNECTION1)> get scroll insensitive cursor sc1 as 'SELECT * FROM t1 FOR UPDATE';\n+ij(CONNECTION1)> next sc1;\n+C1         |C2         \n+-----------------------\n+1          |21         \n+ij(CONNECTION1)> next sc1;\n+C1         |C2         \n+-----------------------\n+2          |22         \n+ij(CONNECTION1)> -- delete row nr. 2 after positioning with next\n+delete from t1 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> absolute 5 sc1;\n+C1         |C2         \n+-----------------------\n+5          |25         \n+ij(CONNECTION1)> -- delete row nr. 5 after positioning with absolute\n+delete from t1 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> relative 2 sc1;\n+C1         |C2         \n+-----------------------\n+7          |27         \n+ij(CONNECTION1)> -- delete row nr. 7 after positioning with relative\n+delete from t1 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> previous sc1;\n+C1         |C2         \n+-----------------------\n+6          |26         \n+ij(CONNECTION1)> -- delete row nr. 6 after positioning with previous\n+delete from t1 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> relative -1 sc1;\n+C1         |C2         \n+-----------------------\n+NULL       |NULL       \n+ij(CONNECTION1)> last sc1;\n+C1         |C2         \n+-----------------------\n+10         |30         \n+ij(CONNECTION1)> -- delete row nr. 10 after positioning with last\n+delete from t1 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> after last sc1;\n+No current row\n+ij(CONNECTION1)> -- delete when positioned after last should cause an error\n+delete from t1 where current of sc1;\n+ERROR XCL08: Cursor 'SC1' is not on a row.\n+ij(CONNECTION1)> first sc1;\n+C1         |C2         \n+-----------------------\n+1          |21         \n+ij(CONNECTION1)> -- delete row nr. 1 after positioning with first\n+delete from t1 where current of sc1;\n+1 row inserted/updated/deleted\n+ij(CONNECTION1)> before first sc1;\n+No current row\n+ij(CONNECTION1)> -- delete when positioned before first should cause an error\n+delete from t1 where current of sc1;\n+ERROR XCL08: Cursor 'SC1' is not on a row.\n+ij(CONNECTION1)> close sc1;\n+ij(CONNECTION1)> commit;\n+ij(CONNECTION1)> -- check that row where correctly updated\n+select * from t1;\n+C1         |C2         \n+-----------------------\n+3          |3          \n+4          |4          \n+8          |8          \n+9          |9          \n+4 rows selected\n+ij(CONNECTION1)> "
            },
            {
                "sha": "81354d21e54330e2f55c27285df05950ab10b458",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/suites/DerbyNet.exclude",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/16f1998896cf141b6dbbaf994c3a254881fdbbf8/java/testing/org/apache/derbyTesting/functionTests/suites/DerbyNet.exclude",
                "raw_url": "https://github.com/apache/derby/raw/16f1998896cf141b6dbbaf994c3a254881fdbbf8/java/testing/org/apache/derbyTesting/functionTests/suites/DerbyNet.exclude",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/suites/DerbyNet.exclude?ref=16f1998896cf141b6dbbaf994c3a254881fdbbf8",
                "patch": "@@ -46,3 +46,4 @@ jdbcapi/HoldabilityTest.junit\n # Excluding checkDataSource and checkDataSource30 because JCC has no XA\n jdbcapi/checkDataSource30.java\n jdbcapi/checkDataSource.java\n+jdbcapi/SURTest_ij.sql"
            },
            {
                "sha": "02b9911b0be0c7e78bc9d0966a48b9353717536f",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/suites/jdbcapi.runall",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/16f1998896cf141b6dbbaf994c3a254881fdbbf8/java/testing/org/apache/derbyTesting/functionTests/suites/jdbcapi.runall",
                "raw_url": "https://github.com/apache/derby/raw/16f1998896cf141b6dbbaf994c3a254881fdbbf8/java/testing/org/apache/derbyTesting/functionTests/suites/jdbcapi.runall",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/suites/jdbcapi.runall?ref=16f1998896cf141b6dbbaf994c3a254881fdbbf8",
                "patch": "@@ -25,3 +25,4 @@ jdbcapi/UpdateXXXTest.junit\n jdbcapi/SURQueryMixTest.junit\n jdbcapi/SURTest.junit\n jdbcapi/URCoveringIndexTest.junit\n+jdbcapi/SURTest_ij.sql"
            },
            {
                "sha": "2b6a079c4de11ef7c6ae2eb5794b415255f9669e",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest_ij.sql",
                "status": "added",
                "additions": 68,
                "deletions": 0,
                "changes": 68,
                "blob_url": "https://github.com/apache/derby/blob/16f1998896cf141b6dbbaf994c3a254881fdbbf8/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest_ij.sql",
                "raw_url": "https://github.com/apache/derby/raw/16f1998896cf141b6dbbaf994c3a254881fdbbf8/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest_ij.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest_ij.sql?ref=16f1998896cf141b6dbbaf994c3a254881fdbbf8",
                "patch": "@@ -0,0 +1,68 @@\n+connect 'SURTest;create=true;';\n+autocommit off;\n+create table t1 (c1 int primary key, c2 int);\n+insert into t1 values \n+    (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), \n+    (6, 6), (7, 7), (8, 8), (9, 9), (10, 10);\n+get scroll insensitive cursor sc1 as 'SELECT * FROM t1 FOR UPDATE';\n+next sc1;\n+next sc1;\n+-- update row nr. 2 after positioning with next\n+update t1 set c2 = c1 + 20 where current of sc1;\n+absolute 5 sc1;\n+-- update row nr. 5 after positioning with absolute\n+update t1 set c2 = c1 + 20 where current of sc1;\n+relative 2 sc1;\n+-- update row nr. 7 after positioning with relative\n+update t1 set c2 = c1 + 20 where current of sc1;\n+previous sc1;\n+-- update row nr. 6 after positioning with previous\n+update t1 set c2 = c1 + 20 where current of sc1;\n+relative -1 sc1;\n+last sc1;\n+-- update row nr. 10 after positioning with last\n+update t1 set c2 = c1 + 20 where current of sc1;\n+after last sc1;\n+-- update when positioned after last should cause an error\n+update t1 set c2 = c1 + 20 where current of sc1;\n+first sc1;\n+-- update row nr. 1 after positioning with first\n+update t1 set c2 = c1 + 20 where current of sc1;\n+before first sc1;\n+-- update when positioned before first should cause an error\n+update t1 set c2 = c1 + 20 where current of sc1;\n+close sc1;\n+commit;\n+-- check that row where correctly updated\n+select * from t1;\n+get scroll insensitive cursor sc1 as 'SELECT * FROM t1 FOR UPDATE';\n+next sc1;\n+next sc1;\n+-- delete row nr. 2 after positioning with next\n+delete from t1 where current of sc1;\n+absolute 5 sc1;\n+-- delete row nr. 5 after positioning with absolute\n+delete from t1 where current of sc1;\n+relative 2 sc1;\n+-- delete row nr. 7 after positioning with relative\n+delete from t1 where current of sc1;\n+previous sc1;\n+-- delete row nr. 6 after positioning with previous\n+delete from t1 where current of sc1;\n+relative -1 sc1;\n+last sc1;\n+-- delete row nr. 10 after positioning with last\n+delete from t1 where current of sc1;\n+after last sc1;\n+-- delete when positioned after last should cause an error\n+delete from t1 where current of sc1;\n+first sc1;\n+-- delete row nr. 1 after positioning with first\n+delete from t1 where current of sc1;\n+before first sc1;\n+-- delete when positioned before first should cause an error\n+delete from t1 where current of sc1;\n+close sc1;\n+commit;\n+-- check that row where correctly updated\n+select * from t1;"
            },
            {
                "sha": "5e0907a966283a3021f69009a08c0a7c118aa910",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest_ij_app.properties",
                "status": "added",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/16f1998896cf141b6dbbaf994c3a254881fdbbf8/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest_ij_app.properties",
                "raw_url": "https://github.com/apache/derby/raw/16f1998896cf141b6dbbaf994c3a254881fdbbf8/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest_ij_app.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest_ij_app.properties?ref=16f1998896cf141b6dbbaf994c3a254881fdbbf8",
                "patch": "@@ -0,0 +1,2 @@\n+ij.protocol=jdbc:derby:\n+ij.database=SURTest;create=true;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/91151e5d3e78589485bb811b0d164c03084ac7a3",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/3d650b1cb0e7096b3c8b3a076a5ded716f7e1c4a",
        "message": "DERBY-1085: Fix NullPointerException in SQLBinary.java that causes exception for all FOR BIT DATA types while getting length for NULL values.\n\nSubmitted by Satheesh Bandaram (satheesh@sourcery.org)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@390838 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_74",
        "file": [
            {
                "sha": "0b33a81380406f7ec48debdf43ae2fb2752791ae",
                "filename": "java/engine/org/apache/derby/iapi/types/SQLBinary.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/91151e5d3e78589485bb811b0d164c03084ac7a3/java/engine/org/apache/derby/iapi/types/SQLBinary.java",
                "raw_url": "https://github.com/apache/derby/raw/91151e5d3e78589485bb811b0d164c03084ac7a3/java/engine/org/apache/derby/iapi/types/SQLBinary.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/SQLBinary.java?ref=91151e5d3e78589485bb811b0d164c03084ac7a3",
                "patch": "@@ -227,8 +227,7 @@ public final int\tgetLength() throws StandardException\n \t\t\t\treturn streamLength;\n \t\t}\n \n-\t\treturn getBytes().length;\n-\n+\t\treturn (getBytes() == null) ? 0 : getBytes().length;\n \t}\n \n \t/*"
            },
            {
                "sha": "46456a6c948bdeae9c4f9f5978effe76576f1824",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/bit.out",
                "status": "modified",
                "additions": 28,
                "deletions": 0,
                "changes": 28,
                "blob_url": "https://github.com/apache/derby/blob/91151e5d3e78589485bb811b0d164c03084ac7a3/java/testing/org/apache/derbyTesting/functionTests/master/bit.out",
                "raw_url": "https://github.com/apache/derby/raw/91151e5d3e78589485bb811b0d164c03084ac7a3/java/testing/org/apache/derbyTesting/functionTests/master/bit.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/bit.out?ref=91151e5d3e78589485bb811b0d164c03084ac7a3",
                "patch": "@@ -807,4 +807,32 @@ C1        |C2        |C3\n ------------------------------------------------------------------------------------------------------------------------------------------------------\n ij> values cast(X'00680069' as char(30)), cast(X'00680069' as varchar(30)), cast(X'00680069' as long varchar);\n ERROR 42846: Cannot convert types 'CHAR () FOR BIT DATA' to 'CHAR'.\n+ij> -- DERBY-1085\n+create table npetest1 (col1 varchar(36) for bit data not null, constraint pknpe1 primary key (col1));\n+0 rows inserted/updated/deleted\n+ij> create table npetest2 (col2 varchar(36) for bit data, constraint fknpe1 foreign key (col2) references npetest1(col1) on delete cascade);\n+0 rows inserted/updated/deleted\n+ij> insert into npetest1 (col1) values (X'0000000001');\n+1 row inserted/updated/deleted\n+ij> insert into npetest1 (col1) values (X'0000000002');\n+1 row inserted/updated/deleted\n+ij> insert into npetest1 (col1) values (X'0000000003');\n+1 row inserted/updated/deleted\n+ij> insert into npetest2 (col2) values (X'0000000001');\n+1 row inserted/updated/deleted\n+ij> insert into npetest2 (col2) values (NULL);\n+1 row inserted/updated/deleted\n+ij> insert into npetest2 (col2) values (X'0000000002');\n+1 row inserted/updated/deleted\n+ij> select col1 from npetest1 where col1 not in (select col2 from npetest2);\n+COL1                                                                    \n+------------------------------------------------------------------------\n+ij> select col1 from npetest1 where col1 not in (select col2 from npetest2 where col2 is not null);\n+COL1                                                                    \n+------------------------------------------------------------------------\n+0000000003                                                              \n+ij> drop table npetest2;\n+0 rows inserted/updated/deleted\n+ij> drop table npetest1;\n+0 rows inserted/updated/deleted\n ij> "
            },
            {
                "sha": "080be49112e60ae2a53bce92a056e0103071e908",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/bit.sql",
                "status": "modified",
                "additions": 16,
                "deletions": 0,
                "changes": 16,
                "blob_url": "https://github.com/apache/derby/blob/91151e5d3e78589485bb811b0d164c03084ac7a3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/bit.sql",
                "raw_url": "https://github.com/apache/derby/raw/91151e5d3e78589485bb811b0d164c03084ac7a3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/bit.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/bit.sql?ref=91151e5d3e78589485bb811b0d164c03084ac7a3",
                "patch": "@@ -413,3 +413,19 @@ create table t5612 (c1 char(10), c2 varchar(10), c3 long  varchar);\n insert into t5612 values (X'00680069', X'00680069', X'00680069');\n select * from t5612;\n values cast(X'00680069' as char(30)), cast(X'00680069' as varchar(30)), cast(X'00680069' as long varchar);\n+\n+-- DERBY-1085\n+\n+create table npetest1 (col1 varchar(36) for bit data not null, constraint pknpe1 primary key (col1));\n+create table npetest2 (col2 varchar(36) for bit data, constraint fknpe1 foreign key (col2) references npetest1(col1) on delete cascade);\n+insert into npetest1 (col1) values (X'0000000001');\n+insert into npetest1 (col1) values (X'0000000002');\n+insert into npetest1 (col1) values (X'0000000003');\n+insert into npetest2 (col2) values (X'0000000001');\n+insert into npetest2 (col2) values (NULL);\n+insert into npetest2 (col2) values (X'0000000002');\n+select col1 from npetest1 where col1 not in (select col2 from npetest2);\n+select col1 from npetest1 where col1 not in (select col2 from npetest2 where col2 is not null);\n+\n+drop table npetest2;\n+drop table npetest1;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/b973d2c38bee7dc7a8f2452868e81f6f8662aae1",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/4a95eeb45dd4ca5fd2db9c55031d4d8a0296a29c",
        "message": "DERBY-1119: Address NullPointerException while creating a schema when DumpParseTree is set and in SANITY mode.\n\nSubmitted by Satheesh Bandaram (satheesh@sourcery.org)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@386247 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_75",
        "file": [
            {
                "sha": "f02c15a9b4b996918e73980d2e06fd9f26ca8519",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/b973d2c38bee7dc7a8f2452868e81f6f8662aae1/java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java",
                "raw_url": "https://github.com/apache/derby/raw/b973d2c38bee7dc7a8f2452868e81f6f8662aae1/java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java?ref=b973d2c38bee7dc7a8f2452868e81f6f8662aae1",
                "patch": "@@ -146,7 +146,7 @@ public String toString()\n \t{\n \t\tif (SanityManager.DEBUG)\n \t\t{\n-\t\t\treturn objectName.toString() + super.toString();\n+\t\t\treturn ((objectName==null)?\"\":objectName.toString()) + super.toString();\n \t\t}\n \t\telse\n \t\t{"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/94f95a4c0221e2348e8aa89227ec8ea8edd4812a",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/c1df6c96ab3f33bbb86b6c2e01fbc63726140858",
        "message": "DERBY-85: Address NullPointerException when creating a trigger on a table and default schema doesn't exist.\n\nSubmitted by Dyre Tjeldvoll (Dyre.Tjeldvoll@sun.com)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@378109 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_76",
        "file": [
            {
                "sha": "d5f682a36214daaaf4587f15e229077a7ca7f49d",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java",
                "status": "modified",
                "additions": 15,
                "deletions": 0,
                "changes": 15,
                "blob_url": "https://github.com/apache/derby/blob/94f95a4c0221e2348e8aa89227ec8ea8edd4812a/java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java",
                "raw_url": "https://github.com/apache/derby/raw/94f95a4c0221e2348e8aa89227ec8ea8edd4812a/java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java?ref=94f95a4c0221e2348e8aa89227ec8ea8edd4812a",
                "patch": "@@ -191,6 +191,21 @@ public void\texecuteConstantAction(Activation activation)\n \n \t\tSchemaDescriptor triggerSd = getSchemaDescriptorForCreate(dd, activation, triggerSchemaName);\n \n+\t\tif (spsCompSchemaId == null) {\n+\t\t\tSchemaDescriptor def = lcc.getDefaultSchema();\n+\t\t\tif (def.getUUID() == null) {\n+\t\t\t\t// Descriptor for default schema is stale,\n+\t\t\t\t// look it up in the dictionary\n+\t\t\t\tdef = dd.getSchemaDescriptor(def.getDescriptorName(), tc, \n+\t\t\t\t\t\t\t\t\t\t\t false);\n+\t\t\t}\n+\t\t\tspsCompSchemaId = def.getUUID();\n+\t\t}\n+\t\tif (SanityManager.DEBUG) { \n+\t\t\tSanityManager.ASSERT(spsCompSchemaId != null,\n+\t\t\t\t\t\t\t\t \"spsCompSchemaId is null\"); \n+\t\t}\n+\n \t\tString tabName;\n \t\tif (triggerTable != null)\n \t\t{"
            },
            {
                "sha": "ea7f070d36aeb425e5279e5a42f7c5058437441a",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/triggerGeneral.out",
                "status": "modified",
                "additions": 13,
                "deletions": 1,
                "changes": 14,
                "blob_url": "https://github.com/apache/derby/blob/94f95a4c0221e2348e8aa89227ec8ea8edd4812a/java/testing/org/apache/derbyTesting/functionTests/master/triggerGeneral.out",
                "raw_url": "https://github.com/apache/derby/raw/94f95a4c0221e2348e8aa89227ec8ea8edd4812a/java/testing/org/apache/derbyTesting/functionTests/master/triggerGeneral.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/triggerGeneral.out?ref=94f95a4c0221e2348e8aa89227ec8ea8edd4812a",
                "patch": "@@ -1239,4 +1239,16 @@ call d388();\n Running DERBY-388 Test.\n DERBY-388 Test Passed.\n 0 rows inserted/updated/deleted\n-ij> \n+ij> -- Derby-85: It turns out that if a table t1 exists in a non-default schema \n+-- and the default schema (e.g., \"SOMEUSER\") doesn't exist yet (because no \n+-- objects have been created in that schema), then attempts to create a \n+-- trigger on t1 using its qualified name will lead to a null pointer \n+-- exception in the Derby engine. \n+connect 'wombat;user=someuser';\n+ij(CONNECTION1)> autocommit off;\n+ij(CONNECTION1)> create table myschema.mytable (i int);\n+0 rows inserted/updated/deleted\n+ij(CONNECTION1)> create trigger mytrigger after update on myschema.mytable for each row mode db2sql select * from sys.systables;\n+0 rows inserted/updated/deleted\n+ij(CONNECTION1)> rollback;\n+ij(CONNECTION1)> "
            },
            {
                "sha": "ec0b927f380ac1b6bcf189d4b7eaeeb2c3a85fd2",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/triggerGeneral.sql",
                "status": "modified",
                "additions": 11,
                "deletions": 0,
                "changes": 11,
                "blob_url": "https://github.com/apache/derby/blob/94f95a4c0221e2348e8aa89227ec8ea8edd4812a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/triggerGeneral.sql",
                "raw_url": "https://github.com/apache/derby/raw/94f95a4c0221e2348e8aa89227ec8ea8edd4812a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/triggerGeneral.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/triggerGeneral.sql?ref=94f95a4c0221e2348e8aa89227ec8ea8edd4812a",
                "patch": "@@ -591,3 +591,14 @@ create procedure d388 () language java parameter style java modifies sql data\n -- Just call the procedure; it will do the rest.\n call d388();\n \n+-- Derby-85: It turns out that if a table t1 exists in a non-default schema \n+-- and the default schema (e.g., \"SOMEUSER\") doesn't exist yet (because no \n+-- objects have been created in that schema), then attempts to create a \n+-- trigger on t1 using its qualified name will lead to a null pointer \n+-- exception in the Derby engine. \n+connect 'wombat;user=someuser';\n+autocommit off;\n+create table myschema.mytable (i int);\n+create trigger mytrigger after update on myschema.mytable for each row mode db2sql select * from sys.systables;\n+rollback;\n+"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/14d31f942e8146fa512ceab2c0297b52e90c1723",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/8e896c5f0bafb6df137861df90cd940d3730a3af",
        "message": "DERBY-798 Fix NullPointerException when Derby is loaded by the bootstrap\nclass loader in a jvm which returns null on Class.getClassLoader().\nFix suggested by Timothy Luksha (RIT Student).\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@366226 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_77",
        "file": [
            {
                "sha": "2e152160e773f01c9666d28773942e9ee6d4ead0",
                "filename": "java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/14d31f942e8146fa512ceab2c0297b52e90c1723/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java",
                "raw_url": "https://github.com/apache/derby/raw/14d31f942e8146fa512ceab2c0297b52e90c1723/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java?ref=14d31f942e8146fa512ceab2c0297b52e90c1723",
                "patch": "@@ -1275,8 +1275,10 @@ Properties getDefaultModuleProperties()\n \n         ClassLoader cl = getClass().getClassLoader();\n         try {\n-            for( Enumeration e = cl.getResources(\"org/apache/derby/modules.properties\");\n-                 e.hasMoreElements() ;) {\n+        \tEnumeration e = cl == null ?\n+        \t\tClassLoader.getSystemResources(\"org/apache/derby/modules.properties\") :\n+        \t\tcl.getResources(\"org/apache/derby/modules.properties\");\n+            while (e.hasMoreElements()) {\n                 URL modulesPropertiesURL = (URL) e.nextElement();\n                 InputStream is = null;\n                 try {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/5a95e6baa245457cf2b2f3bbed0e6799a9825afc",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/95e79b594c0c4ce90817c95e243354d7506312f8",
        "message": "DERBY-714 DERBY-571\nVerify target table for UPDATE and DELETE for all table types, previously\nVTI's were incorrectly excluded. This lead to invalid VTI table expressions\nbeing accepted for VTIs leading to NullPointerExceptions.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@345577 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_78",
        "file": [
            {
                "sha": "338234c07a893f63e6df8279f686592d432e898a",
                "filename": "java/engine/org/apache/derby/diag/LockTable.java",
                "status": "modified",
                "additions": 1,
                "deletions": 3,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/5a95e6baa245457cf2b2f3bbed0e6799a9825afc/java/engine/org/apache/derby/diag/LockTable.java",
                "raw_url": "https://github.com/apache/derby/raw/5a95e6baa245457cf2b2f3bbed0e6799a9825afc/java/engine/org/apache/derby/diag/LockTable.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/diag/LockTable.java?ref=5a95e6baa245457cf2b2f3bbed0e6799a9825afc",
                "patch": "@@ -53,9 +53,7 @@\n \tthe database.\n \t\n \tThis virtual table can be invoked by calling it directly\n-\t<PRE> select * from new org.apache.derby.diag.LockTable() t; </PRE>\n-\tor through the system alias LOCKTABLE\n-\t<PRE> select * from new LOCKTABLE() t; </PRE> \n+\t<PRE> select * from SYSCS_DIAG.LOCK_TABLE </PRE>\n \t\n \t<P>The LockTable virtual table takes a snap shot of the lock table while\n \tthe system is in flux, so it is possible that some locks may be in"
            },
            {
                "sha": "ee32fa73df7460c97764e105b37f8d55077fe315",
                "filename": "java/engine/org/apache/derby/diag/TransactionTable.java",
                "status": "modified",
                "additions": 1,
                "deletions": 3,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/5a95e6baa245457cf2b2f3bbed0e6799a9825afc/java/engine/org/apache/derby/diag/TransactionTable.java",
                "raw_url": "https://github.com/apache/derby/raw/5a95e6baa245457cf2b2f3bbed0e6799a9825afc/java/engine/org/apache/derby/diag/TransactionTable.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/diag/TransactionTable.java?ref=5a95e6baa245457cf2b2f3bbed0e6799a9825afc",
                "patch": "@@ -50,9 +50,7 @@\n \t\n \tThis virtual table can be invoked by calling it\n \tdirectly\n-\t<PRE> select * from new org.apache.derby.diag.TransactionTable() t; </PRE>\n-\tor through the system alias TransactionTable\n-\t<PRE> select * from new TRANSACTIONTABLE() t; </PRE> \n+\t<PRE> select * from SYSCS_DIAG.TRANSACTION_TABLE </PRE>\n \n \t<P>The TransactionTable virtual table takes a snap shot of the \n \ttransaction table while the system is in flux, so it is possible that some"
            },
            {
                "sha": "1aed20689ab4105a8bdb8b083732e72f006dd59c",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java",
                "status": "modified",
                "additions": 5,
                "deletions": 6,
                "changes": 11,
                "blob_url": "https://github.com/apache/derby/blob/5a95e6baa245457cf2b2f3bbed0e6799a9825afc/java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java",
                "raw_url": "https://github.com/apache/derby/raw/5a95e6baa245457cf2b2f3bbed0e6799a9825afc/java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java?ref=5a95e6baa245457cf2b2f3bbed0e6799a9825afc",
                "patch": "@@ -154,7 +154,7 @@ public QueryTreeNode bind() throws StandardException\n \t\tCurrentRowLocationNode\t\trowLocationNode;\n \t\tTableName\t\t\t\t\tcursorTargetTableName = null;\n \t\tCurrentOfNode       \t\tcurrentOfNode = null;\n-\n+\t\t\n                 DataDictionary dataDictionary = getDataDictionary();\n \t\tsuper.bindTables(dataDictionary);\n \n@@ -211,12 +211,11 @@ else if (cursorTargetTableName != null)\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\t/* descriptor must exist, tables already bound.\n-\t\t\t * No need to do this for VTI as VTI was bound in\n-\t\t\t * super.bindTables() above.\n-\t\t\t */\n-\t\t\tverifyTargetTable();\n+\n \t\t}\n+\t\t\n+\t\t// descriptor must exist, tables already bound.\n+\t\tverifyTargetTable();\n \n \t\t/* Generate a select list for the ResultSetNode - CurrentRowLocation(). */\n \t\tif (SanityManager.DEBUG)"
            },
            {
                "sha": "1533fe1795bb95d3beceac93ab0fbc064eee9afd",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "status": "modified",
                "additions": 6,
                "deletions": 7,
                "changes": 13,
                "blob_url": "https://github.com/apache/derby/blob/5a95e6baa245457cf2b2f3bbed0e6799a9825afc/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "raw_url": "https://github.com/apache/derby/raw/5a95e6baa245457cf2b2f3bbed0e6799a9825afc/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java?ref=5a95e6baa245457cf2b2f3bbed0e6799a9825afc",
                "patch": "@@ -269,14 +269,13 @@ else if (cursorTargetTableName != null)\n \t\t\t\t\t\tcurrentOfNode.getCursorName());\n \t\t\t\t}\n \t\t\t}\n-\n-\t\t\t// because we verified that the tables match\n-\t\t\t// and we already bound the cursor or the select,\n-\t\t\t// the table descriptor should always be found.\n-\t\t\tverifyTargetTable();\n \t\t}\n-\n-\n+\t\t\n+\t\t// because we verified that the tables match\n+\t\t// and we already bound the cursor or the select,\n+\t\t// the table descriptor should always be found.\n+\t\tverifyTargetTable();\n+\t\t\n \t\t/* OVERVIEW - We generate a new ResultColumn, CurrentRowLocation(), and\n \t\t * prepend it to the beginning of the source ResultColumnList.  This\n \t\t * will tell us which row(s) to update at execution time.  However,"
            },
            {
                "sha": "a3bb975e245a3b374d61dc0c6d9165d8b7410f22",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/TransactionTable.out",
                "status": "modified",
                "additions": 19,
                "deletions": 0,
                "changes": 19,
                "blob_url": "https://github.com/apache/derby/blob/5a95e6baa245457cf2b2f3bbed0e6799a9825afc/java/testing/org/apache/derbyTesting/functionTests/master/TransactionTable.out",
                "raw_url": "https://github.com/apache/derby/raw/5a95e6baa245457cf2b2f3bbed0e6799a9825afc/java/testing/org/apache/derbyTesting/functionTests/master/TransactionTable.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/TransactionTable.out?ref=5a95e6baa245457cf2b2f3bbed0e6799a9825afc",
                "patch": "@@ -231,5 +231,24 @@ order by lockname, mode, cnt, state;\n TYPE |CNT  |MODE|TABLENAME                                                                                                                       |LOCKNAME            |STATE\n ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n ij(C1)> commit;\n+ij(C1)> -- ensure the system vti can not be modified.\n+drop table syscs_diag.transaction_table;\n+ERROR X0Y56: 'DROP TABLE' is not allowed on the System table 'SYSCS_DIAG.TRANSACTION_TABLE'.\n+ij(C1)> alter table syscs_diag.transaction_table add column x int;\n+ERROR 42X62: 'ALTER TABLE' is not allowed in the 'SYSCS_DIAG' schema.\n+ij(C1)> update syscs_diag.transaction_table set xid = NULL;\n+ERROR 42Y25: 'SYSCS_DIAG.TRANSACTION_TABLE' is a system table.  Users are not allowed to modify the contents of this table.\n+ij(C1)> delete from syscs_diag.transaction_table where 1 = 1;\n+ERROR 42Y25: 'SYSCS_DIAG.TRANSACTION_TABLE' is a system table.  Users are not allowed to modify the contents of this table.\n+ij(C1)> insert into syscs_diag.transaction_table(xid) values('bad');\n+ERROR 42Y25: 'SYSCS_DIAG.TRANSACTION_TABLE' is a system table.  Users are not allowed to modify the contents of this table.\n+ij(C1)> -- ensure the old syntax still works until it is deprecated\n+select xid from new org.apache.derby.diag.TransactionTable() AS t where 1 = 0;\n+XID            \n+---------------\n+ij(C1)> update new org.apache.derby.diag.TransactionTable() set xid = NULL;\n+ERROR 42X08: The constructor for class 'org.apache.derby.diag.TransactionTable' cannot be used as an external virtual table because the class does not implement 'java.sql.PreparedStatement'. \n+ij(C1)> delete from new org.apache.derby.diag.TransactionTable() where 1 = 0;\n+ERROR 42X08: The constructor for class 'org.apache.derby.diag.TransactionTable' cannot be used as an external virtual table because the class does not implement 'java.sql.PreparedStatement'. \n ij(C1)> disconnect;\n ij> "
            },
            {
                "sha": "d42292df4c0162f394e3ec429a1f38f59ed57fce",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/TransactionTable.sql",
                "status": "modified",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/5a95e6baa245457cf2b2f3bbed0e6799a9825afc/java/testing/org/apache/derbyTesting/functionTests/tests/store/TransactionTable.sql",
                "raw_url": "https://github.com/apache/derby/raw/5a95e6baa245457cf2b2f3bbed0e6799a9825afc/java/testing/org/apache/derbyTesting/functionTests/tests/store/TransactionTable.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/TransactionTable.sql?ref=5a95e6baa245457cf2b2f3bbed0e6799a9825afc",
                "patch": "@@ -137,6 +137,18 @@ from   syscs_diag.lock_table l right outer join syscs_diag.transaction_table t\n order by lockname, mode, cnt, state;\n \n commit;\n+-- ensure the system vti can not be modified.\n+drop table syscs_diag.transaction_table;\n+alter table syscs_diag.transaction_table add column x int;\n+update syscs_diag.transaction_table set xid = NULL;\n+delete from syscs_diag.transaction_table where 1 = 1;\n+insert into syscs_diag.transaction_table(xid) values('bad');\n+\n+-- ensure the old syntax still works until it is deprecated\n+select xid from new org.apache.derby.diag.TransactionTable() AS t where 1 = 0;\n+update new org.apache.derby.diag.TransactionTable() set xid = NULL;\n+delete from new org.apache.derby.diag.TransactionTable() where 1 = 0;\n+\n disconnect;\n \n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/299b9e7b79f4eca7ae63a3f1ace3b3337a1a5e11",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/1bee891c8220918cfbc1b36709904d1df54beb32",
        "message": "DERBY-5087: NPE in istat daemon when encountering critical exception during shutdown\n\nDon't null out the index stats refresher reference in the data dictionary when\nstopping the module.\nRemoved unnecessary variable 'daemonStopped', used existing 'daemonDisabled'\ninstead.\n\nPatch file: derby-5087-1a-npe_on_shutdown.diff\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1076445 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_79",
        "file": [
            {
                "sha": "f123f7b52c17062383716ef4ef7963a44dffb177",
                "filename": "java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java",
                "status": "modified",
                "additions": 8,
                "deletions": 7,
                "changes": 15,
                "blob_url": "https://github.com/apache/derby/blob/299b9e7b79f4eca7ae63a3f1ace3b3337a1a5e11/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java",
                "raw_url": "https://github.com/apache/derby/raw/299b9e7b79f4eca7ae63a3f1ace3b3337a1a5e11/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java?ref=299b9e7b79f4eca7ae63a3f1ace3b3337a1a5e11",
                "patch": "@@ -131,8 +131,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     /** Tells if the daemon has been disabled. */\n     // @GuardedBy(\"queue\")\n     private boolean daemonDisabled;\n-    /** Tells if the daemon has been stopped. */\n-    private volatile boolean daemonStopped;\n     /** The context manager for the worker thread. */\n     private final ContextManager ctxMgr;\n     /** The language connection context for the worker thread. */\n@@ -388,8 +386,12 @@ private void tryToGatherStats(LanguageConnectionContext lcc,\n     /** Return true if we are being shutdown */\n     private boolean isShuttingDown( LanguageConnectionContext lcc )\n     {\n-        if ( daemonStopped ) { return true; }\n-        else { return !lcc.getDatabase().isActive(); }\n+        synchronized (queue) {\n+            if (daemonDisabled ){\n+                return true;\n+            }\n+        }\n+        return !lcc.getDatabase().isActive();\n     }\n     \n     /**\n@@ -849,9 +851,8 @@ public void runExplicitly(LanguageConnectionContext lcc,\n      * first time the method is invoked.\n      */\n     public void stop() {\n-        if (!daemonStopped) {\n-            daemonStopped = true;\n-            synchronized (queue) {\n+        synchronized (queue) {\n+            if (!daemonDisabled) {\n                 StringBuffer sb = new StringBuffer(100);\n                 sb.append(\"stopping daemon, active=\").\n                         append(runningThread != null)."
            },
            {
                "sha": "e99fb88a3753881dd8ed1993699b86e8acc58ef2",
                "filename": "java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/299b9e7b79f4eca7ae63a3f1ace3b3337a1a5e11/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java",
                "raw_url": "https://github.com/apache/derby/raw/299b9e7b79f4eca7ae63a3f1ace3b3337a1a5e11/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java?ref=299b9e7b79f4eca7ae63a3f1ace3b3337a1a5e11",
                "patch": "@@ -970,9 +970,10 @@ public DependencyManager getDependencyManager()\n     public void stop() {\n         // Shut down the index statistics refresher, mostly to make it print\n         // processing stats\n+        // Not sure if the reference can be null here, but it may be possible\n+        // if multiple threads are competing to boot and shut down the db.\n         if (indexRefresher != null) {\n             indexRefresher.stop();\n-            indexRefresher = null;\n         }\n     }\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/9ea9234106fa86b71137d7988eb563b997639bf1",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/b73c2a37546c8f7c6cfc6e84ee68f63a3d8830ef",
        "message": "DERBY-2008: NPE with 2-arg SUBSTR call in GROUP BY clause\n\nThis patch was contributed by Yip Ng (yipng168@gmail.com)\n\nFor SUBSTR function, there can be 2 or 3 arguments, and in the\ncase of 2-args, the rightOperand of the TernaryOperatorNode will\nbe null. In its isEquivalent() method, it did not take care of\nthis case; thus, the NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@468696 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_80",
        "file": [
            {
                "sha": "b7667559ed943f0be24b9770597b036d8b5cab1c",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java",
                "status": "modified",
                "additions": 9,
                "deletions": 1,
                "changes": 10,
                "blob_url": "https://github.com/apache/derby/blob/9ea9234106fa86b71137d7988eb563b997639bf1/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java",
                "raw_url": "https://github.com/apache/derby/raw/9ea9234106fa86b71137d7988eb563b997639bf1/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java?ref=9ea9234106fa86b71137d7988eb563b997639bf1",
                "patch": "@@ -921,10 +921,18 @@ protected boolean isEquivalent(ValueNode o) throws StandardException\n     \tif (isSameNodeType(o)) \n \t{\n \t\tTernaryOperatorNode other = (TernaryOperatorNode)o;\n+\t\t\n+\t\t\t/*\n+\t\t\t * SUBSTR function can either have 2 or 3 arguments.  In the \n+\t\t\t * 2-args case, rightOperand will be null and thus needs \n+\t\t\t * additional handling in the equivalence check.\n+\t\t\t */\n     \t\treturn (other.methodName.equals(methodName)\n \t\t\t\t&& other.receiver.isEquivalent(receiver)\n     \t\t\t\t&& other.leftOperand.isEquivalent(leftOperand)\n-    \t\t\t\t&& other.rightOperand.isEquivalent(rightOperand));\n+    \t\t\t\t&& ( (rightOperand == null && other.rightOperand == null) || \n+    \t\t\t\t     (other.rightOperand != null && \n+    \t\t\t\t    \tother.rightOperand.isEquivalent(rightOperand)) ) );\n         }\n     \treturn false;\n     }"
            },
            {
                "sha": "0bfa90a8964ecc4734544f37c66a9a0671a2e061",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/groupBy.out",
                "status": "modified",
                "additions": 24,
                "deletions": 0,
                "changes": 24,
                "blob_url": "https://github.com/apache/derby/blob/9ea9234106fa86b71137d7988eb563b997639bf1/java/testing/org/apache/derbyTesting/functionTests/master/groupBy.out",
                "raw_url": "https://github.com/apache/derby/raw/9ea9234106fa86b71137d7988eb563b997639bf1/java/testing/org/apache/derbyTesting/functionTests/master/groupBy.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/groupBy.out?ref=9ea9234106fa86b71137d7988eb563b997639bf1",
                "patch": "@@ -636,4 +636,28 @@ select 10,avg(c) from t having 1 < 2;\n 10         |2          \n ij> drop table t;\n 0 rows inserted/updated/deleted\n+ij> -- DERBY-2008\n+-- test SUBSTR with 2 args with GROUP BY expression\n+create table dt (vc varchar(30));\n+0 rows inserted/updated/deleted\n+ij> insert into dt values ('1928-09-21'), ('1903-12-08');\n+2 rows inserted/updated/deleted\n+ij> -- ok\n+select substr(vc, 3) from dt group by substr(vc, 3);\n+1                             \n+------------------------------\n+03-12-08                      \n+28-09-21                      \n+ij> select substr(vc, 3, 4) from dt group by substr(vc, 3, 4);\n+1   \n+----\n+03-1\n+28-0\n+ij> -- expect errors\n+select substr(vc, 3, 4) from dt group by substr(vc, 3);\n+ERROR 42Y30: The SELECT list of a grouped query contains at least one invalid expression. If a SELECT list has a GROUP BY, the list may only contain valid grouping expressions and valid aggregate expressions.  \n+ij> select substr(vc, 3) from dt group by substr(vc, 3, 4);\n+ERROR 42Y30: The SELECT list of a grouped query contains at least one invalid expression. If a SELECT list has a GROUP BY, the list may only contain valid grouping expressions and valid aggregate expressions.  \n+ij> drop table dt;\n+0 rows inserted/updated/deleted\n ij> "
            },
            {
                "sha": "e14fa147ef8f9373851fa1e67c6e7043533ace7a",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/groupBy.sql",
                "status": "modified",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/9ea9234106fa86b71137d7988eb563b997639bf1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/groupBy.sql",
                "raw_url": "https://github.com/apache/derby/raw/9ea9234106fa86b71137d7988eb563b997639bf1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/groupBy.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/groupBy.sql?ref=9ea9234106fa86b71137d7988eb563b997639bf1",
                "patch": "@@ -360,3 +360,15 @@ select 10 from t having 1 < 2;\n -- ok, gives one row\n select 10,avg(c) from t having 1 < 2;\n drop table t;\n+\n+-- DERBY-2008\n+-- test SUBSTR with 2 args with GROUP BY expression\n+create table dt (vc varchar(30));\n+insert into dt values ('1928-09-21'), ('1903-12-08');\n+-- ok\n+select substr(vc, 3) from dt group by substr(vc, 3); \n+select substr(vc, 3, 4) from dt group by substr(vc, 3, 4); \n+-- expect errors\n+select substr(vc, 3, 4) from dt group by substr(vc, 3); \n+select substr(vc, 3) from dt group by substr(vc, 3, 4);\n+drop table dt;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/0c997ed8e2cf7d46f3bebc0131cbd684bf0d518d",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/396a5cda91b7d83f8032d6ebc5fab85bfe3a6a9b",
        "message": "DERBY-6533: Plug another NPE in NsTest; commit derby-6533-aa-anotherNPE.diff.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1588289 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_81",
        "file": [
            {
                "sha": "ec6f2a7e1ad5cd0c7ca2cba7ae8b4da6412ade9b",
                "filename": "java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java",
                "status": "modified",
                "additions": 15,
                "deletions": 0,
                "changes": 15,
                "blob_url": "https://github.com/apache/derby/blob/0c997ed8e2cf7d46f3bebc0131cbd684bf0d518d/java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java",
                "raw_url": "https://github.com/apache/derby/raw/0c997ed8e2cf7d46f3bebc0131cbd684bf0d518d/java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java?ref=0c997ed8e2cf7d46f3bebc0131cbd684bf0d518d",
                "patch": "@@ -96,6 +96,19 @@ public Connection getConnection() {\n \t\treturn conn; // null if there was a problem, else a valid connection\n \t}\n \n+    /** Get a new connection and raise an error if this can't be done */\n+    public  Connection  getNewConnection()\n+    {\n+        Connection  conn = getConnection();\n+\n+        if ( conn == null )\n+        {\n+            throw new RuntimeException( \"Could not get a connection!\" );\n+        }\n+\n+        return conn;\n+    }\n+\n \t// *******************************************************************************\n \t//\n \t// Sets the isolation level to that indicated.\n@@ -142,6 +155,8 @@ public void doIUDOperation() {\n \t\t// decide Insert, Update or Delete\n \t\tint decider = (int) (Math.random() * 100) % 3;\n \n+        if ( connex == null ) { connex = getNewConnection(); }\n+\n \t\tswitch (decider) {\n \n \t\tcase 0: // do an Insert"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/63ecb285f23d6087e4bf314e7e3f02dc2bc8d555",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/02fcca3729ed28a4be5900f965da3f8413b4026e",
        "message": "DERBY-6496: Fix NPE in loading of the optimizer tracing tool; tests passed cleanly on derby-6496-02-aa-optimizerTracer.diff.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1574927 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_82",
        "file": [
            {
                "sha": "f9d2c3a1eb93bd638d834951adc225786caf79a8",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/63ecb285f23d6087e4bf314e7e3f02dc2bc8d555/java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java",
                "raw_url": "https://github.com/apache/derby/raw/63ecb285f23d6087e4bf314e7e3f02dc2bc8d555/java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java?ref=63ecb285f23d6087e4bf314e7e3f02dc2bc8d555",
                "patch": "@@ -31,7 +31,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.iapi.services.context.ContextService;\n import org.apache.derby.iapi.services.i18n.MessageService;\n import org.apache.derby.iapi.services.loader.ClassFactory;\n-import org.apache.derby.iapi.sql.compile.CompilerContext;\n+import org.apache.derby.iapi.services.loader.ClassFactoryContext;\n import org.apache.derby.iapi.sql.compile.OptTrace;\n import org.apache.derby.iapi.sql.dictionary.OptionalTool;\n \n@@ -107,8 +107,8 @@ else if ( \"custom\".equals( configurationParameters[ 0 ] ) )\n             String  customOptTraceName = configurationParameters[ 1 ];\n \n             try {\n-                CompilerContext cc = (CompilerContext) ContextService.getContext( CompilerContext.CONTEXT_ID );\n-                ClassFactory    classFactory = cc.getClassFactory();\n+                ClassFactoryContext cfc = (ClassFactoryContext) ContextService.getContext( ClassFactoryContext.CONTEXT_ID );\n+                ClassFactory    classFactory = cfc.getClassFactory();\n \n                 tracer = (OptTrace) classFactory.loadApplicationClass( customOptTraceName ).newInstance();\n             }"
            },
            {
                "sha": "fd9744fbac56ee2bf598cc823a6ae995fda48fd1",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java",
                "status": "modified",
                "additions": 46,
                "deletions": 26,
                "changes": 72,
                "blob_url": "https://github.com/apache/derby/blob/63ecb285f23d6087e4bf314e7e3f02dc2bc8d555/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java",
                "raw_url": "https://github.com/apache/derby/raw/63ecb285f23d6087e4bf314e7e3f02dc2bc8d555/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java?ref=63ecb285f23d6087e4bf314e7e3f02dc2bc8d555",
                "patch": "@@ -21,24 +21,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n package org.apache.derbyTesting.functionTests.tests.lang;\n \n-import java.sql.SQLException;\n-import java.sql.SQLWarning;\n import java.sql.Connection;\n-import java.sql.Statement;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.DriverManager;\n-import java.util.ArrayList;\n import junit.framework.Test;\n import junit.framework.TestSuite;\n-import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n-import org.apache.derbyTesting.junit.JDBC;\n-import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;\n-import org.apache.derbyTesting.junit.JDBC;\n-import org.apache.derbyTesting.junit.SecurityManagerSetup;\n import org.apache.derbyTesting.junit.TestConfiguration;\n-import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;\n-import org.apache.derbyTesting.junit.JDBC;\n \n /**\n  * <p>\n@@ -56,8 +42,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n     private static  final   String      TEST_DBO = \"TEST_DBO\";\n \n-    private static  final   String      LOAD_TOOL = \"call syscs_util.syscs_register_tool( 'databaseMetaData', true )\";\n-    private static  final   String      UNLOAD_TOOL = \"call syscs_util.syscs_register_tool( 'databaseMetaData', false )\";\n+    private static  final   String      LOAD_METADATA_TOOL = \"call syscs_util.syscs_register_tool( 'databaseMetaData', true )\";\n+    private static  final   String      UNLOAD_METADATA_TOOL = \"call syscs_util.syscs_register_tool( 'databaseMetaData', false )\";\n+\n+    private static  final   String      LOAD_OPTIMIZER_TOOL = \"call syscs_util.syscs_register_tool('optimizerTracing', true, 'custom', 'org.apache.derbyTesting.functionTests.tests.lang.DummyOptTrace')\";\n+    private static  final   String      UNLOAD_OPTIMIZER_TOOL = \"call syscs_util.syscs_register_tool('optimizerTracing', false)\";\n \n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n@@ -105,30 +94,54 @@ public static Test suite()\n \n     /**\n      * <p>\n-     * Test baseline permissions where no grants are made.\n+     * Test that we can load the metadata tool twice without popping an NPE.\n      * </p>\n      */\n-    public  void    test_001()\n+    public  void    test_001_metadata()\n         throws Exception\n     {\n-        Connection  dboConnection = openUserConnection( TEST_DBO );\n+        metadataTester();\n+    }\n \n-        goodStatement( dboConnection, LOAD_TOOL );\n-        goodStatement( dboConnection, UNLOAD_TOOL );\n+    /**\n+     * <p>\n+     * Test that we can load the metadata tool twice without popping an NPE.\n+     * </p>\n+     */\n+    public  void    test_002_metadata()\n+        throws Exception\n+    {\n+        metadataTester();\n+    }\n+    private void    metadataTester() throws Exception\n+    {\n+        toolTester( LOAD_METADATA_TOOL, UNLOAD_METADATA_TOOL );\n     }\n \n     /**\n      * <p>\n-     * Test that a user can grant access to her indexes.\n+     * Test that we can load the optimizer tool twice without popping an NPE.\n      * </p>\n      */\n-    public  void    test_002()\n+    public  void    test_003_optimizer()\n         throws Exception\n     {\n-        Connection  dboConnection = openUserConnection( TEST_DBO );\n+        optimizerTester();\n+    }\n \n-        goodStatement( dboConnection, LOAD_TOOL );\n-        goodStatement( dboConnection, UNLOAD_TOOL );\n+    /**\n+     * <p>\n+     * Test that we can load the optimizer tool twice without popping an NPE.\n+     * </p>\n+     */\n+    public  void    test_004_optimizer()\n+        throws Exception\n+    {\n+        optimizerTester();\n+    }\n+    private void    optimizerTester() throws Exception\n+    {\n+        toolTester( LOAD_OPTIMIZER_TOOL, UNLOAD_OPTIMIZER_TOOL );\n     }\n \n     ///////////////////////////////////////////////////////////////////////////////////\n@@ -137,4 +150,11 @@ public  void    test_002()\n     //\n     ///////////////////////////////////////////////////////////////////////////////////\n \n+    private void    toolTester( String loadTool, String unloadTool ) throws Exception\n+    {\n+        Connection  dboConnection = openUserConnection( TEST_DBO );\n+\n+        goodStatement( dboConnection, loadTool );\n+        goodStatement( dboConnection, unloadTool );\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/02fcca3729ed28a4be5900f965da3f8413b4026e",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/b1c9bd27989d7163ac4ad9c7286e38a170757958",
        "message": "DERBY-6496: Fix NPE while loading optional tools; tests passed cleanly on derby-6496-01-ab-useClassFactoryContext.diff.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1574752 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_83",
        "file": [
            {
                "sha": "30d26daf2b56f578c9cf2ea577759a87789911d1",
                "filename": "java/engine/org/apache/derby/catalog/Java5SystemProcedures.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/02fcca3729ed28a4be5900f965da3f8413b4026e/java/engine/org/apache/derby/catalog/Java5SystemProcedures.java",
                "raw_url": "https://github.com/apache/derby/raw/02fcca3729ed28a4be5900f965da3f8413b4026e/java/engine/org/apache/derby/catalog/Java5SystemProcedures.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/catalog/Java5SystemProcedures.java?ref=02fcca3729ed28a4be5900f965da3f8413b4026e",
                "patch": "@@ -23,14 +23,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n import java.sql.SQLException;\n \n-import org.apache.derby.iapi.sql.compile.CompilerContext;\n import org.apache.derby.iapi.sql.conn.ConnectionUtil;\n import org.apache.derby.iapi.sql.dictionary.OptionalTool;\n import org.apache.derby.iapi.error.PublicAPI;\n import org.apache.derby.iapi.error.StandardException;\n import org.apache.derby.iapi.reference.SQLState;\n import org.apache.derby.iapi.services.context.ContextService;\n import org.apache.derby.iapi.services.loader.ClassFactory;\n+import org.apache.derby.iapi.services.loader.ClassFactoryContext;\n import org.apache.derby.shared.common.sanity.SanityManager;\n \n /**\n@@ -94,8 +94,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n         throws SQLException\n     {\n         try {\n-\t\t\tCompilerContext cc = (CompilerContext) ContextService.getContext( CompilerContext.CONTEXT_ID );\n-            ClassFactory    classFactory = cc.getClassFactory();\n+\t\t\tClassFactoryContext cfc = (ClassFactoryContext) ContextService.getContext( ClassFactoryContext.CONTEXT_ID );\n+            ClassFactory    classFactory = cfc.getClassFactory();\n \n             String              toolClassName = findToolClassName( toolName, optionalArgs );            \n             OptionalTool    tool = null;"
            },
            {
                "sha": "c650548c3aec90d679654c68d65ed11838abc5d4",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java",
                "status": "added",
                "additions": 140,
                "deletions": 0,
                "changes": 140,
                "blob_url": "https://github.com/apache/derby/blob/02fcca3729ed28a4be5900f965da3f8413b4026e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java",
                "raw_url": "https://github.com/apache/derby/raw/02fcca3729ed28a4be5900f965da3f8413b4026e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Test_6496.java?ref=02fcca3729ed28a4be5900f965da3f8413b4026e",
                "patch": "@@ -0,0 +1,140 @@\n+/*\n+\n+   Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Test_6496\n+\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to you under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+ */\n+\n+package org.apache.derbyTesting.functionTests.tests.lang;\n+\n+import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.DriverManager;\n+import java.util.ArrayList;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n+import org.apache.derbyTesting.junit.JDBC;\n+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;\n+import org.apache.derbyTesting.junit.JDBC;\n+import org.apache.derbyTesting.junit.SecurityManagerSetup;\n+import org.apache.derbyTesting.junit.TestConfiguration;\n+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;\n+import org.apache.derbyTesting.junit.JDBC;\n+\n+/**\n+ * <p>\n+ * Test the loading of optional tools when the CompilerContext is not available\n+ * at execution time. See DERBY-6496.\n+ * </p>\n+ */\n+public class Test_6496 extends GeneratedColumnsHelper\n+{\n+    ///////////////////////////////////////////////////////////////////////////////////\n+    //\n+    // CONSTANTS\n+    //\n+    ///////////////////////////////////////////////////////////////////////////////////\n+\n+    private static  final   String      TEST_DBO = \"TEST_DBO\";\n+\n+    private static  final   String      LOAD_TOOL = \"call syscs_util.syscs_register_tool( 'databaseMetaData', true )\";\n+    private static  final   String      UNLOAD_TOOL = \"call syscs_util.syscs_register_tool( 'databaseMetaData', false )\";\n+\n+    ///////////////////////////////////////////////////////////////////////////////////\n+    //\n+    // STATE\n+    //\n+    ///////////////////////////////////////////////////////////////////////////////////\n+\n+    ///////////////////////////////////////////////////////////////////////////////////\n+    //\n+    // CONSTRUCTOR\n+    //\n+    ///////////////////////////////////////////////////////////////////////////////////\n+\n+    /**\n+     * Create a new instance.\n+     */\n+\n+    public Test_6496(String name)\n+    {\n+        super(name);\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////\n+    //\n+    // JUnit BEHAVIOR\n+    //\n+    ///////////////////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Construct top level suite in this JUnit test\n+     */\n+    public static Test suite()\n+    {\n+        TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(Test_6496.class);\n+\n+        return suite;\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////\n+    //\n+    // TESTS\n+    //\n+    ///////////////////////////////////////////////////////////////////////////////////\n+\n+    /**\n+     * <p>\n+     * Test baseline permissions where no grants are made.\n+     * </p>\n+     */\n+    public  void    test_001()\n+        throws Exception\n+    {\n+        Connection  dboConnection = openUserConnection( TEST_DBO );\n+\n+        goodStatement( dboConnection, LOAD_TOOL );\n+        goodStatement( dboConnection, UNLOAD_TOOL );\n+    }\n+\n+    /**\n+     * <p>\n+     * Test that a user can grant access to her indexes.\n+     * </p>\n+     */\n+    public  void    test_002()\n+        throws Exception\n+    {\n+        Connection  dboConnection = openUserConnection( TEST_DBO );\n+\n+        goodStatement( dboConnection, LOAD_TOOL );\n+        goodStatement( dboConnection, UNLOAD_TOOL );\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////\n+    //\n+    // MINIONS\n+    //\n+    ///////////////////////////////////////////////////////////////////////////////////\n+\n+}"
            },
            {
                "sha": "62ca445cb534a05ff14cf0547a5d382aa7262ab8",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/02fcca3729ed28a4be5900f965da3f8413b4026e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "raw_url": "https://github.com/apache/derby/raw/02fcca3729ed28a4be5900f965da3f8413b4026e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java?ref=02fcca3729ed28a4be5900f965da3f8413b4026e",
                "patch": "@@ -243,6 +243,7 @@ public static Test suite() {\n         suite.addTest(NewOptimizerOverridesTest.suite());\n         suite.addTest(XMLOptimizerTraceTest.suite());\n         suite.addTest(MergeStatementTest.suite());\n+        suite.addTest(Test_6496.suite());\n         suite.addTest(ConstraintCharacteristicsTest.suite());\n         suite.addTest(DB2IsolationLevelsTest.suite());\n         suite.addTest(Derby5866TriggerOrderTest.suite());"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/fe9655204590626d480bfbb7c616446fb82cfd27",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/a7d99c10fbf80045f8b594661488bdb249bd0477",
        "message": "DERBY-6354 DatabaseMetaDataTest.testGetColumnsReadOnly fails with NPE when releasing page\n\nDiagnostics patch; to be removed when issue is fixed.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1549983 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_84",
        "file": [
            {
                "sha": "3f5002c70545b734cb812bc2ae9170379764b10a",
                "filename": "java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/fe9655204590626d480bfbb7c616446fb82cfd27/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java",
                "raw_url": "https://github.com/apache/derby/raw/fe9655204590626d480bfbb7c616446fb82cfd27/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java?ref=fe9655204590626d480bfbb7c616446fb82cfd27",
                "patch": "@@ -307,6 +307,10 @@ private void readPage(long pageNumber, byte[] pageData, long offset)\n         if (SanityManager.DEBUG) {\n             // getEmbryonicPage only\n             if (pageNumber == -1) {\n+                if (!holdsThis) {\n+                    // Remove when DERBY-6354 is closed:\n+                    new Throwable().printStackTrace(SanityManager.GET_DEBUG_STREAM());\n+                }\n                 SanityManager.ASSERT(holdsThis);\n             }\n             if (holdsThis) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/75fbb86586cf9fdaefbb883e6daff51410818fb1",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/b79920cce88f7cb842025b52967da820c237bd57",
        "message": "DERBY-534: Add a disabled test case for NPE with subquery in WHEN clause\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1525819 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_85",
        "file": [
            {
                "sha": "bf397d944e7e64749ddb17e2d227653ada19802b",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "status": "modified",
                "additions": 23,
                "deletions": 0,
                "changes": 23,
                "blob_url": "https://github.com/apache/derby/blob/75fbb86586cf9fdaefbb883e6daff51410818fb1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "raw_url": "https://github.com/apache/derby/raw/75fbb86586cf9fdaefbb883e6daff51410818fb1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java?ref=75fbb86586cf9fdaefbb883e6daff51410818fb1",
                "patch": "@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n package org.apache.derbyTesting.functionTests.tests.lang;\n \n+import java.sql.Connection;\n import java.sql.SQLException;\n import java.sql.Statement;\n import junit.framework.Test;\n@@ -41,6 +42,13 @@ public static Test suite() {\n         return TestConfiguration.defaultSuite(TriggerWhenClauseTest.class);\n     }\n \n+    @Override\n+    protected void initializeConnection(Connection conn) throws SQLException {\n+        // Run the test cases with auto-commit off so that all changes to\n+        // the database can be rolled back in tearDown().\n+        conn.setAutoCommit(false);\n+    }\n+\n     public void testBasicSyntax() throws SQLException {\n         Statement s = createStatement();\n         s.execute(\"create table t1(x int)\");\n@@ -91,4 +99,19 @@ public void testBasicSyntax() throws SQLException {\n             });\n     }\n \n+    /**\n+     * A row trigger whose WHEN clause contains a subquery, could cause a\n+     * NullPointerException. This test case is disabled until the bug is fixed.\n+     */\n+    public void xtestSubqueryInWhenClauseNPE() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"create table t1(x int)\");\n+        s.execute(\"create table t2(x int)\");\n+        s.execute(\"create trigger tr1 after insert on t1 for each row \"\n+                + \"when ((values true)) insert into t2 values 1\");\n+\n+        // This statement results in a NullPointerException.\n+        s.execute(\"insert into t1 values 1,2,3\");\n+    }\n+\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/866d96b3987f63b3dbcbc0c9065955ddccb2bccf",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/9bf29d2d2007bfa19d22f494e22fd05a9150a7c6",
        "message": "DERBY-6211: Fix NPE in xml-based optimizer tracing; committing derby-6211-08-aa-fixNPE.diff.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1497537 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_86",
        "file": [
            {
                "sha": "6b456dd2e7bb5db7a866aa37c9ff67223ab9e3ef",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java",
                "status": "modified",
                "additions": 5,
                "deletions": 7,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/866d96b3987f63b3dbcbc0c9065955ddccb2bccf/java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java",
                "raw_url": "https://github.com/apache/derby/raw/866d96b3987f63b3dbcbc0c9065955ddccb2bccf/java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java?ref=866d96b3987f63b3dbcbc0c9065955ddccb2bccf",
                "patch": "@@ -489,25 +489,23 @@ private Optimizable getOptimizable( int tableNumber )\n     /** Get the name of an optimizable */\n     private TableName    getOptimizableName( Optimizable optimizable )\n     {\n+        ContextManager  cm = ((QueryTreeNode) optimizable).getContextManager();\n+        \n         try {\n             if ( isBaseTable( optimizable ) )\n             {\n                 ProjectRestrictNode prn = (ProjectRestrictNode) optimizable;\n                 TableDescriptor td = \n                     ((FromBaseTable) prn.getChildResult()).getTableDescriptor();\n-                return makeTableName( td.getSchemaName(),\n-                                      td.getName(),\n-                                      prn.getContextManager() );\n+                return makeTableName( td.getSchemaName(), td.getName(), cm );\n             }\n             else if ( isTableFunction( optimizable ) )\n             {\n                 ProjectRestrictNode prn = (ProjectRestrictNode) optimizable;\n                 AliasDescriptor ad =\n                     ((StaticMethodCallNode) ((FromVTI) prn.getChildResult()).\n                         getMethodCall() ).ad;\n-                return makeTableName( ad.getSchemaName(), \n-                                      ad.getName(),\n-                                      prn.getContextManager() );\n+                return makeTableName( ad.getSchemaName(), ad.getName(), cm );\n             }\n             else if ( isFromTable( optimizable ) )\n             {\n@@ -525,7 +523,7 @@ else if ( isFromTable( optimizable ) )\n         String  nodeClass = optimizable.getClass().getName();\n         String  unqualifiedName = nodeClass.substring( nodeClass.lastIndexOf( \".\" ) + 1 );\n \n-        return makeTableName( null, unqualifiedName, null );\n+        return makeTableName( null, unqualifiedName, cm );\n     }\n \n     /** Return true if the optimizable is a base table */"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/e25c098c0cf4415bbd2e4baba370b27ae240994b",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/f33fbafeb66f5e908ab069736ccd6be855165887",
        "message": "DERBY-6081: JDBC 4.2 setObject() and updateObject() methods throw NPE when type is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1448278 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_87",
        "file": [
            {
                "sha": "e39a017242fd694bccd537b0deac3b375303230f",
                "filename": "java/client/org/apache/derby/client/am/Utils42.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/e25c098c0cf4415bbd2e4baba370b27ae240994b/java/client/org/apache/derby/client/am/Utils42.java",
                "raw_url": "https://github.com/apache/derby/raw/e25c098c0cf4415bbd2e4baba370b27ae240994b/java/client/org/apache/derby/client/am/Utils42.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/Utils42.java?ref=e25c098c0cf4415bbd2e4baba370b27ae240994b",
                "patch": "@@ -52,7 +52,7 @@ public  static  int getTypeAsInt( Agent agent, SQLType sqlType )\n             (\n              agent.logWriter_,\n              new ClientMessageId(SQLState.DATA_TYPE_NOT_SUPPORTED),\n-             sqlType.toString()\n+             sqlType\n              ).getSQLException();\n     }\n "
            },
            {
                "sha": "f957b69c6f1421ade743e2a506d8cfb4985059b8",
                "filename": "java/engine/org/apache/derby/impl/jdbc/Util42.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/e25c098c0cf4415bbd2e4baba370b27ae240994b/java/engine/org/apache/derby/impl/jdbc/Util42.java",
                "raw_url": "https://github.com/apache/derby/raw/e25c098c0cf4415bbd2e4baba370b27ae240994b/java/engine/org/apache/derby/impl/jdbc/Util42.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/jdbc/Util42.java?ref=e25c098c0cf4415bbd2e4baba370b27ae240994b",
                "patch": "@@ -54,7 +54,7 @@ public  static  int getTypeAsInt( ConnectionChild connChild, SQLType sqlType )\n         }\n \n         throw connChild.newSQLException\n-            ( SQLState.DATA_TYPE_NOT_SUPPORTED, sqlType.toString() );\n+            ( SQLState.DATA_TYPE_NOT_SUPPORTED, sqlType );\n     }\n     \n }    "
            },
            {
                "sha": "6ba5cf4f61c2dd1f81939ef14f5a6cae313b554f",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java",
                "status": "modified",
                "additions": 71,
                "deletions": 2,
                "changes": 73,
                "blob_url": "https://github.com/apache/derby/blob/e25c098c0cf4415bbd2e4baba370b27ae240994b/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java",
                "raw_url": "https://github.com/apache/derby/raw/e25c098c0cf4415bbd2e4baba370b27ae240994b/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java?ref=e25c098c0cf4415bbd2e4baba370b27ae240994b",
                "patch": "@@ -21,7 +21,6 @@\n package org.apache.derbyTesting.functionTests.tests.jdbc4;\n \n import java.math.BigDecimal;\n-import java.io.Serializable;\n import java.sql.Blob;\n import java.sql.CallableStatement;\n import java.sql.Clob;\n@@ -31,6 +30,8 @@\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.Statement;\n import java.sql.Time;\n import java.sql.Timestamp;\n \n@@ -42,6 +43,7 @@\n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n import org.apache.derbyTesting.junit.TestConfiguration;\n import org.apache.derbyTesting.functionTests.tests.lang.Price;\n+import org.apache.derbyTesting.junit.JDBC;\n \n /**\n  * Tests for new methods added for PreparedStatement in JDBC 4.2.\n@@ -231,7 +233,7 @@ private void    populateTable( Connection conn ) throws Exception\n             }\n             catch (SQLException se)\n             {\n-                assertSQLState( \"0A000\", se );\n+                assertSQLState( UNIMPLEMENTED_FEATURE, se );\n             }\n         }\n \n@@ -638,6 +640,73 @@ private static void    vetSetObjectProc( Connection conn ) throws Exception\n         }\n     }\n \n+    /**\n+     * DERBY-6081: Verify that an SQLException is raised if the supplied\n+     * SQLType argument is null. It used to fail with a NullPointerException.\n+     */\n+    public void test_04_targetTypeIsNull() throws SQLException {\n+        setAutoCommit(false);\n+\n+        // Test PreparedStatement.setObject() with targetType == null.\n+\n+        PreparedStatement ps = prepareStatement(\"values cast(? as int)\");\n+\n+        try {\n+            ps.setObject(1, 1, null);\n+            fail(\"setObject should fail when type is null\");\n+        } catch (SQLFeatureNotSupportedException se) {\n+            assertSQLState(UNIMPLEMENTED_FEATURE, se);\n+        }\n+\n+        try {\n+            ps.setObject(1, 1, null, 1);\n+            fail(\"setObject should fail when type is null\");\n+        } catch (SQLFeatureNotSupportedException se) {\n+            assertSQLState(UNIMPLEMENTED_FEATURE, se);\n+        }\n+\n+        // Test ResultSet.updateObject() with targetType == null.\n+\n+        Statement s = createStatement(\n+                ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);\n+        s.execute(\"create table t(x int)\");\n+        s.execute(\"insert into t values 1\");\n+\n+        ResultSet rs = s.executeQuery(\"select * from t\");\n+        assertTrue(rs.next());\n+\n+        try {\n+            rs.updateObject(\"x\", 1, null);\n+            fail(\"updateObject should fail when type is null\");\n+        } catch (SQLFeatureNotSupportedException se) {\n+            assertSQLState(UNIMPLEMENTED_FEATURE, se);\n+        }\n+\n+        try {\n+            rs.updateObject(1, 1, null);\n+            fail(\"updateObject should fail when type is null\");\n+        } catch (SQLFeatureNotSupportedException se) {\n+            assertSQLState(UNIMPLEMENTED_FEATURE, se);\n+        }\n+\n+        try {\n+            rs.updateObject(\"x\", 1, null, 1);\n+            fail(\"updateObject should fail when type is null\");\n+        } catch (SQLFeatureNotSupportedException se) {\n+            assertSQLState(UNIMPLEMENTED_FEATURE, se);\n+        }\n+\n+        try {\n+            rs.updateObject(1, 1, null, 1);\n+            fail(\"updateObject should fail when type is null\");\n+        } catch (SQLFeatureNotSupportedException se) {\n+            assertSQLState(UNIMPLEMENTED_FEATURE, se);\n+        }\n+\n+        // There should be no more rows.\n+        JDBC.assertEmpty(rs);\n+    }\n+\n     //////////////////////////////////////////////////////////\n     //\n     // SQL ROUTINES"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/38b200a310aedb5635b8802f1abdb4fb262607ee",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/fef325352f1037751d142b21d4f0cd5eaa91f5cd",
        "message": "DERBY-6000: Fix NPE in embedded implemention of new ResultSet.updateObject() overloads added by JDBC 4.2.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1446562 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_88",
        "file": [
            {
                "sha": "118fabbef5c18df6f8d22b8393f0a0b9499ff42b",
                "filename": "java/engine/org/apache/derby/impl/jdbc/EmbedResultSet42.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/38b200a310aedb5635b8802f1abdb4fb262607ee/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet42.java",
                "raw_url": "https://github.com/apache/derby/raw/38b200a310aedb5635b8802f1abdb4fb262607ee/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet42.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet42.java?ref=38b200a310aedb5635b8802f1abdb4fb262607ee",
                "patch": "@@ -50,13 +50,15 @@ public EmbedResultSet42(org.apache.derby.impl.jdbc.EmbedConnection conn,\n         ( int columnIndex, Object x, SQLType targetSqlType )\n         throws SQLException\n     {\n+        checkIfClosed(\"updateObject\");\n         updateObject( columnIndex, x, Util42.getTypeAsInt( this, targetSqlType ) );\n     }\n \n     public void updateObject\n         ( int columnIndex, Object x, SQLType targetSqlType, int scaleOrLength )\n         throws SQLException\n     {\n+        checkIfClosed(\"updateObject\");\n         updateObject( columnIndex, x, Util42.getTypeAsInt( this, targetSqlType ) );\n         adjustScale( columnIndex, scaleOrLength );\n     }\n@@ -65,13 +67,15 @@ public EmbedResultSet42(org.apache.derby.impl.jdbc.EmbedConnection conn,\n         ( String columnName, Object x, SQLType targetSqlType )\n         throws SQLException\n     {\n+        checkIfClosed(\"updateObject\");\n         updateObject( columnName, x, Util42.getTypeAsInt( this, targetSqlType ) );\n     }\n \n     public void updateObject\n         ( String columnName, Object x, SQLType targetSqlType, int scaleOrLength )\n         throws SQLException\n     {\n+        checkIfClosed(\"updateObject\");\n         updateObject( findColumnName( columnName ), x, targetSqlType, scaleOrLength );\n     }\n     "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/615cb37cc1e569b5ff5838722d102dc17dcf6d14",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/05e6355ebbad040a67f515a63e2a2db60e3eafe2",
        "message": "DERBY-6047: Fix NPE in routine resolution introduced by work on DERBY-3069.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1435267 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_89",
        "file": [
            {
                "sha": "895b041b081076271e30098aeecae8bb693619e4",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java",
                "status": "modified",
                "additions": 12,
                "deletions": 9,
                "changes": 21,
                "blob_url": "https://github.com/apache/derby/blob/615cb37cc1e569b5ff5838722d102dc17dcf6d14/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java",
                "raw_url": "https://github.com/apache/derby/raw/615cb37cc1e569b5ff5838722d102dc17dcf6d14/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java?ref=615cb37cc1e569b5ff5838722d102dc17dcf6d14",
                "patch": "@@ -512,9 +512,9 @@ private void resolveRoutine(FromList fromList, SubqueryList subqueryList, Vector\n \n \t\t\tAliasDescriptor proc = (AliasDescriptor) list.get(i);\n \n-\t\t\tRoutineAliasInfo routineInfo = (RoutineAliasInfo) proc.getAliasInfo();\n-\t\t\tint parameterCount = routineInfo.getParameterCount();\n-            boolean hasVarargs = routineInfo.hasVarargs();\n+\t\t\tRoutineAliasInfo rai = (RoutineAliasInfo) proc.getAliasInfo();\n+\t\t\tint parameterCount = rai.getParameterCount();\n+            boolean hasVarargs = rai.hasVarargs();\n \n             if ( hasVarargs )\n             {\n@@ -528,10 +528,10 @@ else if (parameterCount != methodParms.length)\n \t\t\t// pre-form the method signature. If it is a dynamic result set procedure\n \t\t\t// then we need to add in the ResultSet array\n \n-\t\t\tTypeDescriptor[] parameterTypes = routineInfo.getParameterTypes();\n+\t\t\tTypeDescriptor[] parameterTypes = rai.getParameterTypes();\n \n \t\t\tint sigParameterCount = parameterCount;\n-\t\t\tif (routineInfo.getMaxDynamicResultSets() > 0)\n+\t\t\tif (rai.getMaxDynamicResultSets() > 0)\n             { sigParameterCount++; }\n \n \t\t\tsignature = new JSQLType[sigParameterCount];\n@@ -547,7 +547,7 @@ else if (parameterCount != methodParms.length)\n \n \n \t\t\t\t// if it's an OUT or INOUT parameter we need an array.\n-\t\t\t\tint parameterMode = routineInfo.getParameterModes()[ getRoutineArgIdx( routineInfo, p ) ];\n+\t\t\t\tint parameterMode = rai.getParameterModes()[ getRoutineArgIdx( rai, p ) ];\n \n \t\t\t\tif (parameterMode != JDBC30Translation.PARAMETER_MODE_IN) {\n \n@@ -609,6 +609,7 @@ else if (parameterCount != methodParms.length)\n                         coerceMethodParameter\n                             (\n                              fromList, subqueryList, aggregateVector,\n+                             rai,\n                              methodParms.length,\n                              paramdtd, parameterTypeId, parameterMode,\n                              idx\n@@ -620,6 +621,7 @@ else if (parameterCount != methodParms.length)\n                     coerceMethodParameter\n                         (\n                          fromList, subqueryList, aggregateVector,\n+                         rai,\n                          methodParms.length,\n                          paramdtd, parameterTypeId, parameterMode,\n                          p\n@@ -641,7 +643,7 @@ else if (parameterCount != methodParms.length)\n \n \t\t\t}\n \n-\t\t\tthis.routineInfo = routineInfo;\n+\t\t\tthis.routineInfo = rai;\n \t\t\tad = proc;\n \n \t\t\t// If a procedure is in the system schema and defined as executing\n@@ -675,7 +677,8 @@ else if (parameterCount != methodParms.length)\n         (\n          FromList fromList,\n          SubqueryList subqueryList,\n-         Vector aggregateVector, \n+         Vector aggregateVector,\n+         RoutineAliasInfo rai,\n          int    parameterCount, // number of declared routine args\n          DataTypeDescriptor paramdtd,   // declared type of routine arg\n          TypeId parameterTypeId,    // declared type id of routine arg\n@@ -703,7 +706,7 @@ else if (parameterCount != methodParms.length)\n                     (\n                      SQLState.LANG_DB2_PARAMETER_NEEDS_MARKER,\n                      RoutineAliasInfo.parameterMode(parameterMode),\n-                     routineInfo.getParameterNames()[p]\n+                     rai.getParameterNames()[p]\n                      );\n             }\n             isParameterMarker = false;"
            },
            {
                "sha": "dbaaf342e3ed18fca52f108d0a9ee4160809c804",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/VarargsTest.java",
                "status": "modified",
                "additions": 23,
                "deletions": 0,
                "changes": 23,
                "blob_url": "https://github.com/apache/derby/blob/615cb37cc1e569b5ff5838722d102dc17dcf6d14/java/testing/org/apache/derbyTesting/functionTests/tests/lang/VarargsTest.java",
                "raw_url": "https://github.com/apache/derby/raw/615cb37cc1e569b5ff5838722d102dc17dcf6d14/java/testing/org/apache/derbyTesting/functionTests/tests/lang/VarargsTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/VarargsTest.java?ref=615cb37cc1e569b5ff5838722d102dc17dcf6d14",
                "patch": "@@ -54,6 +54,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private static  final   String  BAD_TIME_FORMAT = \"22007\";\n     private static  final   String  BAD_BOOLEAN_FORMAT = \"22018\";\n     private static  final   String  NEEDS_DJRS_STYLE = \"42ZB2\";\n+    private static  final   String  NEEDS_PARAMETER_MARKER = \"42886\";\n \n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n@@ -1157,6 +1158,28 @@ public void test_06_tableFunctions() throws Exception\n \n     }\n \n+    /**\n+     * <p>\n+     * Test for NPE reported on DERBY-6047.\n+     * </p>\n+     */\n+    public void test_07_6047() throws Exception\n+    {\n+        Connection conn = getConnection();\n+\n+        goodStatement\n+            ( conn,\n+              \"create procedure PROC_6047( inout x int )\\n\" +\n+              \"parameter style java modifies sql data language java\\n\" +\n+              \"external name 'DUMMY.PROC_6047'\\n\"\n+              );\n+\n+        expectCompilationError\n+            ( NEEDS_PARAMETER_MARKER,\n+              \"call PROC_6047(1)\"\n+              );\n+    }\n+    \n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n     // MINIONS"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/fbf52ee492c624169e72cd35cc918b452a370e20",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/6a23c3b00ec5b57a5979fd39e0e708ce15286a85",
        "message": "DERBY-6022: Fix NPE when resolving a function/aggregate name in a schema which hasn't been created yet.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1434363 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_90",
        "file": [
            {
                "sha": "6f2882e45b78720b210210b304a7206d6f93bb2d",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/fbf52ee492c624169e72cd35cc918b452a370e20/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "raw_url": "https://github.com/apache/derby/raw/fbf52ee492c624169e72cd35cc918b452a370e20/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java?ref=fbf52ee492c624169e72cd35cc918b452a370e20",
                "patch": "@@ -454,6 +454,10 @@ public ValueNode bindExpression(\n         ( DataDictionary dd, SchemaDescriptor sd, String rawName )\n         throws StandardException\n     {\n+        // if the schema has a null UUID, that means the schema has not\n+        // been created yet. in that case, it doesn't have any aggregates in it.\n+        if ( sd.getUUID() == null ) { return null; }\n+        \n \t\tjava.util.List list = dd.getRoutineList\n             ( sd.getUUID().toString(), rawName, AliasInfo.ALIAS_NAME_SPACE_AGGREGATE_AS_CHAR );\n "
            },
            {
                "sha": "7e27cec9c5034b169fb7bee28905d38ab91eb33f",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDAPermsTest.java",
                "status": "modified",
                "additions": 18,
                "deletions": 1,
                "changes": 19,
                "blob_url": "https://github.com/apache/derby/blob/fbf52ee492c624169e72cd35cc918b452a370e20/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDAPermsTest.java",
                "raw_url": "https://github.com/apache/derby/raw/fbf52ee492c624169e72cd35cc918b452a370e20/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDAPermsTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDAPermsTest.java?ref=fbf52ee492c624169e72cd35cc918b452a370e20",
                "patch": "@@ -60,7 +60,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private static  final   String      RUTH = \"RUTH\";\n     private static  final   String      ALICE = \"ALICE\";\n     private static  final   String      FRANK = \"FRANK\";\n-    private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH, FRANK  };\n+    private static  final   String      TONY = \"TONY\";\n+    private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH, FRANK, TONY  };\n+\n+    private static  final   String      MISSING_ROUTINE = \"42Y03\";\n \n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n@@ -439,4 +442,18 @@ public  void    test_003_typePrivs()\n              );\n     }\n     \n+   /**\n+     * <p>\n+     * Test that we fixed an NPE in resolving function names when the\n+     * schema hasn't been created yet.\n+     * </p>\n+     */\n+    public  void    test_004_emptySchema()\n+        throws Exception\n+    {\n+        Connection  tonyConnection = openUserConnection( TONY );\n+\n+        expectCompilationError( tonyConnection, MISSING_ROUTINE, \"values toString( 100 )\" );\n+    }\n+\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/300e268c33b999c2e3b92c3b7a729df05f0eec88",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/946f53dc7e3c8ebe3b6882311239f2cd2378428c",
        "message": "DERBY-6027 ORDER BY a cast expression gives NPE\n\nPatch derby-6027b, plugging this hole and adding accompanying tests.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1430150 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_91",
        "file": [
            {
                "sha": "a9b214ffd06beb3182d4e585447695bb93d87da4",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java",
                "status": "modified",
                "additions": 2,
                "deletions": 5,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/300e268c33b999c2e3b92c3b7a729df05f0eec88/java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java",
                "raw_url": "https://github.com/apache/derby/raw/300e268c33b999c2e3b92c3b7a729df05f0eec88/java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java?ref=300e268c33b999c2e3b92c3b7a729df05f0eec88",
                "patch": "@@ -461,11 +461,8 @@ void remapColumnReferencesToExpressions() throws StandardException\n \tprivate static boolean isReferedColByNum(ValueNode expression) \n \tthrows StandardException{\n \t\t\n-\t\tif(!expression.isConstantExpression()){\n-\t\t\treturn false;\n-\t\t}\n-\t\t\n-\t\treturn expression.getConstantValueAsObject() instanceof Integer;\n+       return expression instanceof NumericConstantNode &&\n+               expression.getConstantValueAsObject() instanceof Integer;\n \t}\n \n \t"
            },
            {
                "sha": "48cc293d2a9d3607abc87e01b1b4633ba890a97c",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/orderby.out",
                "status": "modified",
                "additions": 26,
                "deletions": 0,
                "changes": 26,
                "blob_url": "https://github.com/apache/derby/blob/300e268c33b999c2e3b92c3b7a729df05f0eec88/java/testing/org/apache/derbyTesting/functionTests/master/orderby.out",
                "raw_url": "https://github.com/apache/derby/raw/300e268c33b999c2e3b92c3b7a729df05f0eec88/java/testing/org/apache/derbyTesting/functionTests/master/orderby.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/orderby.out?ref=300e268c33b999c2e3b92c3b7a729df05f0eec88",
                "patch": "@@ -2346,4 +2346,30 @@ ij> values (1,-1),(3,-3),(2,-2) order by 2;\n 3          |-3         \n 2          |-2         \n 1          |-1         \n+ij> -- DERBY-6027: ORDER BY a cast expression gives NPE \n+values 1 order by int(1);\n+ERROR 4287B: In this context, the ORDER BY clause may only specify a column number.\n+ij> -- expect error\n+values 1 order by 1;\n+1          \n+-----------\n+1          \n+ij> -- ok, order by column #\n+\n+-- check that int(1) doesn't do sorting with SELECT, it's just a constant expression\n+create table d6027(i int);\n+0 rows inserted/updated/deleted\n+ij> insert into d6027 values (2,1,3);\n+ERROR 42802: The number of values assigned is not the same as the number of specified or implied columns.\n+ij> select i from d6027 order by 1;\n+I          \n+-----------\n+ij> -- OK, sort\n+select i from d6027 order by int(1);\n+I          \n+-----------\n+ij> -- OK, don't sort\n+\n+drop table d6027;\n+0 rows inserted/updated/deleted\n ij> "
            },
            {
                "sha": "a28ba2ce726519c7dd3e670860ecd9cc37239cc6",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/orderby.sql",
                "status": "modified",
                "additions": 11,
                "deletions": 0,
                "changes": 11,
                "blob_url": "https://github.com/apache/derby/blob/300e268c33b999c2e3b92c3b7a729df05f0eec88/java/testing/org/apache/derbyTesting/functionTests/tests/lang/orderby.sql",
                "raw_url": "https://github.com/apache/derby/raw/300e268c33b999c2e3b92c3b7a729df05f0eec88/java/testing/org/apache/derbyTesting/functionTests/tests/lang/orderby.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/orderby.sql?ref=300e268c33b999c2e3b92c3b7a729df05f0eec88",
                "patch": "@@ -914,3 +914,14 @@ values 1,2 order by 1+0;\n values (1,-1),(3,-3),(2,-2) order by 1;\n values (1,-1),(3,-3),(2,-2) order by 2;\n \n+-- DERBY-6027: ORDER BY a cast expression gives NPE \n+values 1 order by int(1); -- expect error\n+values 1 order by 1;      -- ok, order by column #\n+\n+-- check that int(1) doesn't do sorting with SELECT, it's just a constant expression\n+create table d6027(i int);\n+insert into d6027 values (2,1,3);\n+select i from d6027 order by 1;      -- OK, sort\n+select i from d6027 order by int(1); -- OK, don't sort\n+\n+drop table d6027;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/601e027b04418d0d7c37ef12a66fac944396ff77",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/063dd554d30bb6ef19425e10b91b86cf973cbd0d",
        "message": "DERBY-866: Cleanup an NPE in NATIVE authentication and add some defensive code to frustrate blackhats.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1295189 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_92",
        "file": [
            {
                "sha": "a8bd7dbc0bc2e8002d2c33583fc252f04123d862",
                "filename": "java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java",
                "status": "modified",
                "additions": 18,
                "deletions": 4,
                "changes": 22,
                "blob_url": "https://github.com/apache/derby/blob/601e027b04418d0d7c37ef12a66fac944396ff77/java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java",
                "raw_url": "https://github.com/apache/derby/raw/601e027b04418d0d7c37ef12a66fac944396ff77/java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java?ref=601e027b04418d0d7c37ef12a66fac944396ff77",
                "patch": "@@ -284,6 +284,7 @@ public void boot(boolean create, Properties properties)\n         try {\n             // No \"guest\" user\n             if ( userName == null ) { return false; }\n+            if ( userPassword == null ) { return false; }\n \n             //\n             // We must handle these cases:\n@@ -405,7 +406,7 @@ private String  getCanonicalServiceName( String rawName )\n         }\n         \n         SQLWarning  warnings = null;\n-        \n+\n         try {\n             Properties  properties = new Properties();\n             properties.setProperty( Attribute.USERNAME_ATTR, userName );\n@@ -496,7 +497,20 @@ private void callDataSourceSetter( DataSource ds, String methodName, String valu\n         DataDictionary      dd = (DataDictionary) Monitor.getServiceModule( this, DataDictionary.MODULE );        \n         UserDescriptor      userDescriptor = dd.getUser( userName );\n         \n-        if ( userDescriptor == null )   { return false; }\n+        if ( userDescriptor == null )\n+        {\n+            //\n+            // Before returning, we pretend to evaluate the password.\n+            // This helps prevent blackhats from discovering legal usernames\n+            // by measuring how long password evaluation takes. For more context,\n+            // see the 2012-02-22 comment on DERBY-5539.\n+            //\n+            PasswordHasher          hasher = dd.makePasswordHasher( getDatabaseProperties() );\n+            \n+            hasher.hashPasswordIntoString( userName, userPassword ).toCharArray();\n+\n+            return false;\n+        }\n         \n         PasswordHasher      hasher = new PasswordHasher( userDescriptor.getHashingScheme() );\n         char[]                     candidatePassword = hasher.hashPasswordIntoString( userName, userPassword ).toCharArray();\n@@ -512,8 +526,8 @@ private void callDataSourceSetter( DataSource ds, String methodName, String valu\n             }\n         } finally\n         {\n-            Arrays.fill( candidatePassword, (char) 0 );\n-            Arrays.fill( actualPassword, (char) 0 );\n+            if ( candidatePassword != null ) { Arrays.fill( candidatePassword, (char) 0 ); }\n+            if ( actualPassword != null ) { Arrays.fill( actualPassword, (char) 0 ); }\n         }\n \n         //"
            },
            {
                "sha": "978e4918e0800aa975b4515cfbf5409b64fcbbe1",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java",
                "status": "modified",
                "additions": 15,
                "deletions": 2,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/601e027b04418d0d7c37ef12a66fac944396ff77/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java",
                "raw_url": "https://github.com/apache/derby/raw/601e027b04418d0d7c37ef12a66fac944396ff77/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java?ref=601e027b04418d0d7c37ef12a66fac944396ff77",
                "patch": "@@ -659,6 +659,9 @@ private void    vetCoreBehavior()   throws Exception\n         // create the credentials database\n         Connection  sysadminConn = openConnection( CREDENTIALS_DB, DBO, true, null );\n \n+        // null password should not generate NPE\n+        getConnection( _nativeAuthentication, true, CREDENTIALS_DB, DBO, null, INVALID_AUTHENTICATION );\n+\n         // add another legal user\n         addUser( sysadminConn, APPLE_USER );\n         addUser( sysadminConn, BANANA_USER );\n@@ -1239,13 +1242,19 @@ private void    vetSQLAuthorizationOn() throws Exception\n     private Connection  getConnection\n         ( boolean shouldFail, boolean isLogicalName, String dbName, String user, String expectedSQLState )\n         throws Exception\n+    {\n+        return getConnection( shouldFail, isLogicalName, dbName, user, getPassword( user ), expectedSQLState );\n+    }\n+    private Connection  getConnection\n+        ( boolean shouldFail, boolean isLogicalName, String dbName, String user, String password, String expectedSQLState )\n+        throws Exception\n     {\n         Connection  conn = null;\n \n         reportConnectionAttempt( dbName, user, isLogicalName );\n \n         try {\n-            conn = openConnection( dbName, user, isLogicalName, null );\n+            conn = openConnection( dbName, user, password, isLogicalName, null );\n \n             if ( shouldFail )   { fail( tagError( \"Connection to \" + dbName + \" should have failed.\" ) ); }\n         }\n@@ -1350,7 +1359,11 @@ private void  vetStatement( boolean shouldFail, Connection conn, String command,\n     private Connection  openConnection( String dbName, String user, boolean isLogicalName, Properties props )\n         throws SQLException\n     {\n-        String  password = getPassword( user );\n+        return openConnection( dbName, user, getPassword( user ), isLogicalName, props );\n+    }\n+    private Connection  openConnection( String dbName, String user, String password, boolean isLogicalName, Properties props )\n+        throws SQLException\n+    {\n         if ( isLogicalName )\n         {\n             return getTestConfiguration().openConnection( dbName, user, password );"
            },
            {
                "sha": "7fc8c1a4b8cb1f77cddc425896ee6f2ff6dd1f47",
                "filename": "java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/601e027b04418d0d7c37ef12a66fac944396ff77/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java",
                "raw_url": "https://github.com/apache/derby/raw/601e027b04418d0d7c37ef12a66fac944396ff77/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java?ref=601e027b04418d0d7c37ef12a66fac944396ff77",
                "patch": "@@ -91,8 +91,8 @@ public Connection openConnection(String databaseName, String user, String passwo\n \n         Properties connectionAttributes =\n                 new Properties(config.getConnectionAttributes());\n-        connectionAttributes.setProperty(\"user\", user);\n-        connectionAttributes.setProperty(\"password\", password);\n+        if ( user != null ) { connectionAttributes.setProperty(\"user\", user); }\n+        if ( password  != null ) { connectionAttributes.setProperty(\"password\", password); }\n \n         if ( connectionProperties != null ) { connectionAttributes.putAll( connectionProperties ); }\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/96748ad12e1da41f237504adef5e9ae0ef15d2b1",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/fd4430da1dcb0f86a939115742a1987c0296d773",
        "message": "DERBY-5488: Eliminate some NPEs in ParameterMappingTest when run on OJEC.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1199392 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_93",
        "file": [
            {
                "sha": "2ecbee58fc67f688aad65d06c301fabf89aa0aa6",
                "filename": "java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java",
                "status": "modified",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java",
                "raw_url": "https://github.com/apache/derby/raw/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java?ref=96748ad12e1da41f237504adef5e9ae0ef15d2b1",
                "patch": "@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n package org.apache.derby.iapi.types;\n \n+import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.sql.Types;\n \n@@ -195,6 +196,12 @@ public void setValue(String theValue) throws StandardException\n \t}\n \t\n \t\n+\tpublic Object\tgetObject() throws StandardException\n+\t{\n+\t\tif ( isNull() ) { return null; }\n+        else { return new BigDecimal( getString() ); }\n+\t}\n+\n \t/* (non-Javadoc)\n \t * @see org.apache.derby.iapi.types.DataValueDescriptor#getString()\n \t */\n@@ -526,6 +533,16 @@ private static BigInteger rescale(BigInteger bi, int deltaScale) {\n \t\t}\n \t\treturn bi;\n \t}\n+    \n+\tpublic void setBigDecimal(Number theValue) throws StandardException\n+\t{\n+        if ( theValue == null ) { setToNull(); }\n+\t\telse\n+        {\n+            setValue( theValue.toString() );\n+        }\n+\t}\n+    \n \t/*\n \t * String display of value\n \t */"
            },
            {
                "sha": "49d8aa2a115bca4ef1dfb1ba2073b6259a793087",
                "filename": "java/engine/org/apache/derby/iapi/types/J2SEDataValueFactory.java",
                "status": "modified",
                "additions": 0,
                "deletions": 3,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/J2SEDataValueFactory.java",
                "raw_url": "https://github.com/apache/derby/raw/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/J2SEDataValueFactory.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/J2SEDataValueFactory.java?ref=96748ad12e1da41f237504adef5e9ae0ef15d2b1",
                "patch": "@@ -39,9 +39,6 @@ public J2SEDataValueFactory() {\n \n    \tpublic void boot(boolean create, Properties properties) throws StandardException {\n    \t\t\n-   \t\tNumberDataType.MINLONG_MINUS_ONE = SQLDecimal.MINLONG_MINUS_ONE;\n-   \t\tNumberDataType.MAXLONG_PLUS_ONE = SQLDecimal.MAXLONG_PLUS_ONE;\n-\n     \tsuper.boot(create, properties);\n    \t}\n \t"
            },
            {
                "sha": "59043a8a63cf22a5bd51bdc49b45c8d7054fa7fa",
                "filename": "java/engine/org/apache/derby/iapi/types/NumberDataType.java",
                "status": "modified",
                "additions": 6,
                "deletions": 8,
                "changes": 14,
                "blob_url": "https://github.com/apache/derby/blob/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/NumberDataType.java",
                "raw_url": "https://github.com/apache/derby/raw/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/NumberDataType.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/NumberDataType.java?ref=96748ad12e1da41f237504adef5e9ae0ef15d2b1",
                "patch": "@@ -21,6 +21,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n package org.apache.derby.iapi.types;\n \n+import java.math.BigDecimal;\n+\n import org.apache.derby.iapi.error.StandardException;\n import org.apache.derby.iapi.types.NumberDataValue;\n import org.apache.derby.iapi.services.sanity.SanityManager;\n@@ -48,14 +50,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \t */\n \tstatic DataValueDescriptor ZERO_DECIMAL;\n \t\n-\t/**\n-\t * Set by the booting DataValueFactory implementation.\n-\t */\n-\tstatic Comparable MINLONG_MINUS_ONE;\n-\t/**\n-\t * Set by the booting DataValueFactory implementation.\n-\t */\n-\tstatic Comparable MAXLONG_PLUS_ONE;\n+\tstatic final BigDecimal ZERO = BigDecimal.valueOf(0L);\n+\tstatic final BigDecimal ONE = BigDecimal.valueOf(1L);\n+\tstatic final BigDecimal MAXLONG_PLUS_ONE = BigDecimal.valueOf(Long.MAX_VALUE).add(ONE);\n+\tstatic final BigDecimal MINLONG_MINUS_ONE = BigDecimal.valueOf(Long.MIN_VALUE).subtract(ONE);\n \n     /**\n      * Numbers check for isNegative first and negate it if negative."
            },
            {
                "sha": "0404e849692b1e0c954f6f46a2470a9184e45233",
                "filename": "java/engine/org/apache/derby/iapi/types/SQLDecimal.java",
                "status": "modified",
                "additions": 2,
                "deletions": 9,
                "changes": 11,
                "blob_url": "https://github.com/apache/derby/blob/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/SQLDecimal.java",
                "raw_url": "https://github.com/apache/derby/raw/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/engine/org/apache/derby/iapi/types/SQLDecimal.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/SQLDecimal.java?ref=96748ad12e1da41f237504adef5e9ae0ef15d2b1",
                "patch": "@@ -67,13 +67,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n  */\n public final class SQLDecimal extends NumberDataType implements VariableSizeDataValue\n {\n-\tprivate static final BigDecimal ZERO = BigDecimal.valueOf(0L);\n-\tprivate static final BigDecimal ONE = BigDecimal.valueOf(1L);\n-\tstatic final BigDecimal MAXLONG_PLUS_ONE = BigDecimal.valueOf(Long.MAX_VALUE).add(ONE);\n-\tstatic final BigDecimal MINLONG_MINUS_ONE = BigDecimal.valueOf(Long.MIN_VALUE).subtract(ONE);\n-\n-\n-\n \t/**\n \t * object state.  Note that scale and precision are \n \t * always determined dynamically from value when\n@@ -236,8 +229,8 @@ public long\tgetLong() throws StandardException\n \t\t// e.g. 9223372036854775807.1  converts to 9223372036854775807\n \t\t// this matches DB2 UDB behaviour\n \n-\t\tif (   (localValue.compareTo(SQLDecimal.MINLONG_MINUS_ONE) == 1)\n-\t\t\t&& (localValue.compareTo(SQLDecimal.MAXLONG_PLUS_ONE) == -1)) {\n+\t\tif (   (localValue.compareTo(MINLONG_MINUS_ONE) == 1)\n+\t\t\t&& (localValue.compareTo(MAXLONG_PLUS_ONE) == -1)) {\n \n \t\t\treturn localValue.longValue();\n \t\t}"
            },
            {
                "sha": "60be1ac4c0c711abeba968058afc8f9c257a73bb",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java",
                "status": "modified",
                "additions": 4,
                "deletions": 7,
                "changes": 11,
                "blob_url": "https://github.com/apache/derby/blob/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java",
                "raw_url": "https://github.com/apache/derby/raw/96748ad12e1da41f237504adef5e9ae0ef15d2b1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java?ref=96748ad12e1da41f237504adef5e9ae0ef15d2b1",
                "patch": "@@ -563,7 +563,7 @@ public void testParameterMapping() throws Exception {\n             try {\n                 if (!HAVE_BIG_DECIMAL && SQLTypes[type].equals(\"DECIMAL(10,5)\"))\n                     continue;\n-                //System.out.println(procSQL);\n+                println(procSQL);\n                 s.execute(procSQL);\n             } catch (SQLException sqle) {\n                 // may get error that column is not allowed\n@@ -1090,7 +1090,8 @@ public  void    testBigInteger() throws  Exception\n         }\n         catch (SQLException se )\n         {\n-            assertEquals( errorState, se.getSQLState() );\n+            assertEquals\n+                ( \"Expecting failure for seed = \" + seed + \" and insertText = '\" + insertText + \"'\" , errorState, se.getSQLState() );\n         }\n     }\n \n@@ -4292,11 +4293,7 @@ private static String showFirstTwo(byte[] data) {\n     \n     public static Test suite() {\n         \n-        // Don't run for JSR169 until DERBY-2403 is resolved.\n-        if (JDBC.vmSupportsJDBC3())\n-            return TestConfiguration.defaultSuite(ParameterMappingTest.class);\n-        else\n-            return  new TestSuite(\"ParameterMapping\");\n+        return TestConfiguration.defaultSuite(ParameterMappingTest.class);\n     }\n         /*\n         ** Procedures for parameter mapping testing."
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/d9a720b296eba5fdea4c37ff5d2b15287663b2bd",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/0f64b702033f94ed87d2edb01ed898e3b247d0b6",
        "message": "DERBY-4779: Commit patch contributed by Siddharth Srivastava which eliminates an NPE caused by the interaction of generated columns and triggers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1140222 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_94",
        "file": [
            {
                "sha": "045f190de141e2dfa9499ffbcfb994549aa39ee0",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java",
                "status": "modified",
                "additions": 22,
                "deletions": 18,
                "changes": 40,
                "blob_url": "https://github.com/apache/derby/blob/d9a720b296eba5fdea4c37ff5d2b15287663b2bd/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/d9a720b296eba5fdea4c37ff5d2b15287663b2bd/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java?ref=d9a720b296eba5fdea4c37ff5d2b15287663b2bd",
                "patch": "@@ -150,26 +150,30 @@ private void objectifyStreams(ExecRow row) throws StandardException\n \t\t\t\t\theapIx :\n \t\t\t\t\tbaseRowReadMap[heapIx];\n \n-                \n \t\t\t\tDataValueDescriptor col = row.getColumn(readIx+1);\n-\t\t\t\tInputStream stream = ((StreamStorable)col).returnStream();\n-\t\t\t\t((StreamStorable)col).loadStream();\n-\t\t\t\t// DERBY-3238 \n-\t\t\t\t// fix up any duplicate streams, for instance in the case of an update with a trigger,\n-\t\t\t\t// all the columns are read as update columns even if they are not updated, so \n-\t\t\t\t// the update column will still have a reference to the original stream.\n-\t\t\t\t// If we knew from this context that this was an update and we knew the number\n-\t\t\t\t// of columns in the base table we would be able to calculate exactly the offset to \n-\t\t\t\t// check, but we don't have that information from this context.\n-\t\t\t\t// If DERBY-1482 is fixed, perhaps this code can be removed.\n \t\t\t\t\n-\t\t\t\tif (stream != null)\n-\t\t\t\t\tfor (int i = 1; i <= row.nColumns(); i++)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tDataValueDescriptor c = row.getColumn(i);\n-\t\t\t\t\t\tif (c instanceof StreamStorable)\n-\t\t\t\t\t\t\tif (((StreamStorable)c).returnStream() == stream)\n-\t\t\t\t\t\t\t\trow.setColumn(i, col.cloneValue(false));\n+\t\t\t\t// Derby-4779\n+\t\t\t\tif ( col != null ) {\n+\t\t\t\t\tInputStream stream = ((StreamStorable)col).returnStream();\n+\t\t\t\t\t((StreamStorable)col).loadStream();\n+\n+\t\t\t\t\t// DERBY-3238\n+\t\t\t\t\t// fix up any duplicate streams, for instance in the case of an update with a trigger,\n+\t\t\t\t\t// all the columns are read as update columns even if they are not updated, so \n+\t\t\t\t\t// the update column will still have a reference to the original stream.\n+\t\t\t\t\t// If we knew from this context that this was an update and we knew the number\n+\t\t\t\t\t// of columns in the base table we would be able to calculate exactly the offset to \n+\t\t\t\t\t// check, but we don't have that information from this context.\n+\t\t\t\t\t// If DERBY-1482 is fixed, perhaps this code can be removed.\n+\n+\t\t\t\t\tif (stream != null)\n+\t\t\t\t\t\tfor (int i = 1; i <= row.nColumns(); i++)\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tDataValueDescriptor c = row.getColumn(i);\n+\t\t\t\t\t\t\tif (c instanceof StreamStorable)\n+\t\t\t\t\t\t\t\tif (((StreamStorable)c).returnStream() == stream)\n+\t\t\t\t\t\t\t\t\trow.setColumn(i, col.cloneValue(false));\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}"
            },
            {
                "sha": "2c428b22160769d57b076b92641ccd6b5ebeab90",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "status": "modified",
                "additions": 63,
                "deletions": 1,
                "changes": 64,
                "blob_url": "https://github.com/apache/derby/blob/d9a720b296eba5fdea4c37ff5d2b15287663b2bd/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "raw_url": "https://github.com/apache/derby/raw/d9a720b296eba5fdea4c37ff5d2b15287663b2bd/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java?ref=d9a720b296eba5fdea4c37ff5d2b15287663b2bd",
                "patch": "@@ -986,7 +986,7 @@ public  void    test_007_basicTriggers()\n                  { \"before_insert_statement_trigger: [ -1, -1, -1 ]\" },\n                  { \"after_insert_row_trigger: [ 1, -1, null ]\" },\n                  { \"after_insert_row_trigger: [ 2, -2, null ]\" },\n-                 { \"after_insert_row_trigger: [ 3, -3, null ]\" },                                                           \n+                 { \"after_insert_row_trigger: [ 3, -3, null ]\" },\n                  { \"after_insert_statement_trigger: [ -1, -1, -1 ]\" },\n              }\n              );\n@@ -5472,7 +5472,69 @@ public void test_derby_4425()\n                 new String[][] { {\"1\",\"2\"},{\"2\",\"4\"},{\"3\",\"6\"}}, false);\n     }\n \n+    // Derby 4779\n+    public void test_derby_4779()\n+        throws Exception\n+    {\n+    \tConnection conn = getConnection();\n+\n+        goodStatement\n+        (\n+         conn,\n+         \"create function f_getRegion\\n\" +\n+         \"(\\n\" +\n+         \"    v int\\n\" +\n+         \")\\n\" +\n+         \"returns int\\n\" +\n+         \"language java\\n\" +\n+         \"parameter style java\\n\" +\n+         \"deterministic\\n\" +\n+         \"no sql\\n\" +\n+         \"external name 'java.lang.Integer.signum'\\n\"\n+        );\n+\n+        goodStatement\n+        (\n+         conn,\n+         \"create table t1_orders( price int, region generated always as \" +\n+         \"( f_getRegion(price) ) )\\n\"\n+        );\n+        \n+        goodStatement\n+        (\n+         conn,\n+         \"create table t1_dummy(a int)\\n\"\n+        );\n+\n+        goodStatement\n+        (\n+         conn,\n+         \"create trigger t1_trig_after_insert_row_trigger_4779\\n\" +\n+         \"after insert on t1_orders\\n\" +\n+         \"referencing new as ar\\n\" +\n+         \"for each row\\n\" +\n+         \"insert into t1_dummy( a ) values ( 1 )\\n\"\n+        );\n+\n+        goodStatement\n+        (\n+         conn, \n+         \"insert into t1_orders(price) values (1), (2)\"\n+        );\n \n+        assertResults\n+        ( \n+         conn,\n+         \"select a from t1_dummy\",\n+         new String[][]\n+                      {\n+                          { \"1\" },\n+                          { \"1\" }\n+                      },\n+                      false\n+         \n+        );\n+    }\n \n     ///////////////////////////////////////////////////////////////////////////////////\n     //"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/feeb7ebcc41cb3b96916e89d4dbb34660d977dfb",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/503e54d5bb6901c06c456914d9e42226ff3d7d51",
        "message": "DERBY-5160: Fix NPE when adding a column without specifying a datatype.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1087457 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_95",
        "file": [
            {
                "sha": "48f41c9b29531caedb3c2a33ecb934f4050c7fd9",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/feeb7ebcc41cb3b96916e89d4dbb34660d977dfb/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java",
                "raw_url": "https://github.com/apache/derby/raw/feeb7ebcc41cb3b96916e89d4dbb34660d977dfb/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java?ref=feeb7ebcc41cb3b96916e89d4dbb34660d977dfb",
                "patch": "@@ -352,6 +352,12 @@ public void bindStatement() throws StandardException\n                         //\n \n                         if ( cdn.hasGenerationClause() && ( cdn.getType() == null ) ) { continue; }\n+\n+                        if ( cdn.getType() == null )\n+                        {\n+                            throw StandardException.newException\n+                                ( SQLState.LANG_NEEDS_DATATYPE, cdn.getColumnName() );\n+                        }\n                         \n \t\t\t\t\t\tif (cdn.getType().getTypeId().isStringTypeId()) {\n \t\t\t\t\t\t\t//we found what we are looking for. Set the "
            },
            {
                "sha": "200c763dae60e7bdee543cd89d21cdebcc9a7ca5",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/feeb7ebcc41cb3b96916e89d4dbb34660d977dfb/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java",
                "raw_url": "https://github.com/apache/derby/raw/feeb7ebcc41cb3b96916e89d4dbb34660d977dfb/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java?ref=feeb7ebcc41cb3b96916e89d4dbb34660d977dfb",
                "patch": "@@ -130,6 +130,10 @@ public void testAddColumn() throws Exception {\n         assertStatementError(\"X0Y32\", st,\n                 \"alter table t0 add column c1 int\");\n \n+        // add a column without a datatype (DERBY-5160)\n+        assertStatementError(\"42XA9\", st,\n+                \"alter table t0 add column y\");\n+\n         // alter a system table\n         assertStatementError(\"42X62\", st,\n                 \"alter table sys.systables add column c1 int\");"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/11be777da696334b6120925889b6968640526d72",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/ad5e6e3d6c3a4d358716f8d32202f599d7de03ac",
        "message": "DERBY-5124: NPE or assert failure printed when dropping table while statistics are written out\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1080573 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_96",
        "file": [
            {
                "sha": "2f5744e5e29b7087d6f1ae42d1a7c2de7de4391a",
                "filename": "java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/11be777da696334b6120925889b6968640526d72/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java",
                "raw_url": "https://github.com/apache/derby/raw/11be777da696334b6120925889b6968640526d72/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java?ref=11be777da696334b6120925889b6968640526d72",
                "patch": "@@ -553,9 +553,10 @@ private void writeUpdatedStats(LanguageConnectionContext lcc,\n             }\n \n             // Log some information.\n+            ConglomerateDescriptor cd = dd.getConglomerateDescriptor(index);\n             log(asBackgroundTask, td,\n                     \"wrote stats for index \"  + \n-                    dd.getConglomerateDescriptor(index).getDescriptorName() +\n+                    (cd == null ? \"n/a\" : cd.getDescriptorName()) +\n                     \" (\" + index + \"): rows=\" + numRows +\n                     \", card=\" + cardToStr(cardinality));\n         }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/9da08da48675edbe7752e4bd47c1b2c56d4a14a7",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/a32eb9f3504d2d26c1770411efb8e7610e457c1d",
        "message": "DERBY-5054 code causes npe in an exception case\n\nPatch contributed by Dave Brosius <dbrosius@apache.org>\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1073380 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_97",
        "file": [
            {
                "sha": "3bc3e0a95e65e7080d03d5476b2ee1f592d6147e",
                "filename": "java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java",
                "status": "modified",
                "additions": 6,
                "deletions": 3,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/9da08da48675edbe7752e4bd47c1b2c56d4a14a7/java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java",
                "raw_url": "https://github.com/apache/derby/raw/9da08da48675edbe7752e4bd47c1b2c56d4a14a7/java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java?ref=9da08da48675edbe7752e4bd47c1b2c56d4a14a7",
                "patch": "@@ -214,9 +214,12 @@ public void clearIdentity()\n         {\n             //Doing check for lcc and db to be certain\n             LanguageConnectionContext lcc = getLCC();\n-            Database db = (lcc != null ? lcc.getDatabase() : null);\n-            boolean isactive = (db != null ? db.isActive() : false);\n-            lcc.getContextManager().cleanupOnError(se, isactive);\n+            if (lcc != null)\n+            {\n+                Database db = lcc.getDatabase();\n+                boolean isactive = (db != null ? db.isActive() : false);\n+                lcc.getContextManager().cleanupOnError(se, isactive);\n+            }\n         }\n     }\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/0549e41253eb13004d51e5d41de0913369b5670c",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/20bc4615e0ba5b7b835f0940b3a03f806019076c",
        "message": "DERBY-5008: fix npe in error condition\n\nFix contributed by Dave Brosius <dbrosius@apache.org>.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1068302 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_98",
        "file": [
            {
                "sha": "5b74e9eff59628749a6b299c663cdb83c5e4a075",
                "filename": "java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/0549e41253eb13004d51e5d41de0913369b5670c/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java",
                "raw_url": "https://github.com/apache/derby/raw/0549e41253eb13004d51e5d41de0913369b5670c/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java?ref=0549e41253eb13004d51e5d41de0913369b5670c",
                "patch": "@@ -2157,11 +2157,11 @@ public void switchLogFile() throws StandardException\n \n \t\t\t\t\tif (privExists(newLogFile))\n \t\t\t\t\t    privDelete(newLogFile);\n-\t\t\t\t\tnewLogFile = null;\n \n \t\t\t\t\tlogErrMsg(MessageService.getTextMessage(\n                         MessageId.LOG_CANNOT_CREATE_NEW,\n                         newLogFile.getPath()));\n+\t\t\t\t\tnewLogFile = null;\n  \t\t\t\t}\n \n \t\t\t}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/501b8b044739bef8bea8a956fc5a689fd38eee51",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/c7bf46c3b620937be5b86839f1cf1688e92997f4",
        "message": "DERBY-268: Eliminate NPE when reading past the end of a cursor on a truncated or dropped table.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1002232 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_99",
        "file": [
            {
                "sha": "edc5ada49c802bcefa1bfd291fab50e0d0dd1f0d",
                "filename": "java/engine/org/apache/derby/impl/store/access/conglomerate/GenericController.java",
                "status": "modified",
                "additions": 9,
                "deletions": 1,
                "changes": 10,
                "blob_url": "https://github.com/apache/derby/blob/501b8b044739bef8bea8a956fc5a689fd38eee51/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericController.java",
                "raw_url": "https://github.com/apache/derby/raw/501b8b044739bef8bea8a956fc5a689fd38eee51/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericController.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericController.java?ref=501b8b044739bef8bea8a956fc5a689fd38eee51",
                "patch": "@@ -221,8 +221,16 @@ public void setEstimatedRowCount(long count)\n         if (container == null)\n             open_conglom.reopen();\n \n-        open_conglom.getContainer().setEstimatedRowCount(\n+        // the container could still be null if a DROP TABLE or TRUNCATE TABLE\n+        // has removed the old conglomerate\n+\n+        container = open_conglom.getContainer();\n+\n+        if ( container != null )\n+        {\n+            container.setEstimatedRowCount(\n                 count, /* unused flag */ 0);\n+        }\n     }\n \n     /**************************************************************************"
            },
            {
                "sha": "fdb2ceb7c1e2d226cfb385805ea4d8b2829f30ac",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java",
                "status": "modified",
                "additions": 61,
                "deletions": 0,
                "changes": 61,
                "blob_url": "https://github.com/apache/derby/blob/501b8b044739bef8bea8a956fc5a689fd38eee51/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java",
                "raw_url": "https://github.com/apache/derby/raw/501b8b044739bef8bea8a956fc5a689fd38eee51/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TruncateTableTest.java?ref=501b8b044739bef8bea8a956fc5a689fd38eee51",
                "patch": "@@ -224,5 +224,66 @@ public void testPerms() throws Exception\n         aliceConnection.close();\n         ruthConnection.close();\n     }\n+\n+    /**\n+     * Test that TRUNCATE TABLE and DROP TABLE do not cause held cursors\n+     * to trip across an NPE. See DERBY-268.\n+     */\n+    public void testCursor() throws Exception\n+    {\n+        Connection cursorConnection = openUserConnection( ALICE );\n+        Connection truncatorConnection = openUserConnection( ALICE );\n+\n+        cursorConnection.setAutoCommit( false );\n+        truncatorConnection.setAutoCommit( false );\n+\n+        cursorMinion( cursorConnection, truncatorConnection, \"truncateTab\", \"truncate table \" );\n+        cursorMinion( cursorConnection, truncatorConnection, \"dropTab\", \"drop table \" );\n+\n+        cursorConnection.close();\n+    }\n+    private void cursorMinion\n+        ( Connection cursorConnection, Connection truncatorConnection, String tableName, String truncationStub )\n+        throws Exception\n+    {\n+        Statement ddlStatement = cursorConnection.createStatement();\n+        Statement truncatorStatement = truncatorConnection.createStatement();\n+\n+        ddlStatement.execute( \"create table \" + tableName + \"( a int )\" );\n+        ddlStatement.execute( \"insert into \" + tableName + \"( a ) values ( 1 ), ( 2 )\" );\n+        ddlStatement.close();\n+        cursorConnection.commit();\n+\n+        Statement cursorStatement = cursorConnection.createStatement\n+            (\n+             ResultSet.TYPE_SCROLL_SENSITIVE,\n+             ResultSet.CONCUR_READ_ONLY,\n+             ResultSet.HOLD_CURSORS_OVER_COMMIT\n+             );\n+        ResultSet cursor = cursorStatement.executeQuery( \"select * from \" + tableName );\n+\n+        // read first row, then commit the holdable cursor\n+        cursor.next();\n+        assertEquals( 1, cursor.getInt( 1 ) );\n+        cursorConnection.commit();\n+\n+        // now truncate the table and commit\n+        truncatorStatement.execute( truncationStub + tableName );\n+        truncatorConnection.commit();\n+\n+        // we expect to be able to finish draining the cursor\n+        cursor.next();\n+        assertEquals( 2, cursor.getInt( 1 ) );\n+\n+        // and we expect to be told that the cursor is drained. this is\n+        // where the NPE was raised\n+        assertFalse( cursor.next() );\n+        \n+        cursor.close();\n+        cursorConnection.commit();\n+        \n+        cursorStatement.close();\n+        truncatorStatement.close();\n+    }\n     \n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/b8b524c00d7736560a43e1eeb7ef1a3f42356843",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/dd2650ff3109af94ac8bb87a94c23d700bd4c98c",
        "message": "DERBY-3969: Fix NPEs when declaring constraints on generated columns without explicit datatypes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@723184 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_100",
        "file": [
            {
                "sha": "430a7c1f8010ea5698018782bb7cbfe071e65d15",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java",
                "status": "modified",
                "additions": 4,
                "deletions": 1,
                "changes": 5,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "patch": "@@ -410,12 +410,15 @@ public void bindStatement() throws StandardException\n \t\t\t/* Now that we've finally goobered stuff up, bind and validate\n \t\t\t * the check constraints and generation clauses.\n \t\t\t */\n-\t\t\tif  (numCheckConstraints > 0) { tableElementList.bindAndValidateCheckConstraints(fromList); }\n \t\t\tif  (numGenerationClauses > 0)\n             { tableElementList.bindAndValidateGenerationClauses( schemaDescriptor, fromList, generatedColumns ); }\n+\t\t\tif  (numCheckConstraints > 0) { tableElementList.bindAndValidateCheckConstraints(fromList); }\n             if ( numReferenceConstraints > 0) { tableElementList.validateForeignKeysOnGenerationClauses( fromList, generatedColumns ); }\n \t\t}\n \n+        // must be done after resolving the datatypes of the generation clauses\n+        if (tableElementList != null) { tableElementList.validatePrimaryKeyNullability(); }\n+\n \t\t//Check if we are in alter table to update the statistics. If yes, then\n \t\t//check if we are here to update the statistics of a specific index. If\n \t\t//yes, then verify that the indexname provided is a valid one."
            },
            {
                "sha": "b93005740638d285049a10db7d759015b999dbff",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "patch": "@@ -438,10 +438,12 @@ public void bindStatement() throws StandardException\n \t\t\t/* Now that we've finally goobered stuff up, bind and validate\n \t\t\t * the check constraints and generation clauses.\n \t\t\t */\n-\t\t\tif  (numCheckConstraints > 0) { tableElementList.bindAndValidateCheckConstraints(fromList); }\n \t\t\tif  (numGenerationClauses > 0) { tableElementList.bindAndValidateGenerationClauses( sd, fromList, generatedColumns ); }\n+\t\t\tif  (numCheckConstraints > 0) { tableElementList.bindAndValidateCheckConstraints(fromList); }\n             if ( numReferenceConstraints > 0) { tableElementList.validateForeignKeysOnGenerationClauses( fromList, generatedColumns ); }\n \t\t}\n+\n+        if ( numPrimaryKeys > 0 ) { tableElementList.validatePrimaryKeyNullability(); }\n \t}\n \n \t/**"
            },
            {
                "sha": "be18061bbd3ff51ef8466f9b173083b3b07d36df",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "status": "modified",
                "additions": 17,
                "deletions": 2,
                "changes": 19,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "patch": "@@ -277,6 +277,21 @@ public ResultColumn getOrderByColumn(int position)\n \t */\n \n \tpublic ResultColumn getResultColumn(String columnName)\n+\t{\n+        return getResultColumn( columnName, true );\n+\t}\n+\n+\t/**\n+\t * Get a ResultColumn that matches the specified columnName. If requested\n+\t * to, mark the column as referenced.\n+\t *\n+\t * @param columnName\tThe ResultColumn to get from the list\n+\t * @param markIfReferenced True if we should mark this column as referenced.\n+\t *\n+\t * @return\tthe column that matches that name.\n+\t */\n+\n+\tpublic ResultColumn getResultColumn(String columnName, boolean markIfReferenced )\n \t{\n \t\tint size = size();\n \t\tfor (int index = 0; index < size; index++)\n@@ -285,8 +300,8 @@ public ResultColumn getResultColumn(String columnName)\n \n \t\t\tif (columnName.equals( resultColumn.getName()) )\n \t\t\t{\n-\t\t\t\t/* Mark ResultColumn as referenced and return it */\n-\t\t\t\tresultColumn.setReferenced();\n+                /* Mark ResultColumn as referenced and return it */\n+                if ( markIfReferenced ) { resultColumn.setReferenced(); }\n \t\t\t\treturn resultColumn;\n \t\t\t}\n \t\t}"
            },
            {
                "sha": "469badcd3d4c53f231a2ac10558b89e63e6d91a8",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/TableElementList.java",
                "status": "modified",
                "additions": 46,
                "deletions": 11,
                "changes": 57,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "patch": "@@ -344,21 +344,11 @@ else if (destConstraint instanceof ConstraintDescriptor)\n \t\t\t\t}\n \t\t\t}\n \n+            // validation of primary key nullability moved to validatePrimaryKeyNullability().\n             if (cdn.hasPrimaryKeyConstraint())\n             {\n                 // for PRIMARY KEY, check that columns are unique\n                 verifyUniqueColumnList(ddlStmt, cdn);\n-\n-                if (td == null)\n-                {\n-                    // in CREATE TABLE so set PRIMARY KEY columns to NOT NULL\n-                    setColumnListToNotNull(cdn);\n-                }\n-                else\n-                {\n-                    // in ALTER TABLE so raise error if any columns are nullable\n-                    checkForNullColumns(cdn, td);\n-                }\n             }\n             else if (cdn.hasUniqueKeyConstraint())\n             {\n@@ -386,6 +376,44 @@ else if (cdn.hasForeignKeyConstraint())\n \n \t}\n \n+    /**\n+\t * Validate nullability of primary keys. This logic was moved out of the main validate\n+\t * method so that it can be called after binding generation clauses. We need\n+\t * to perform the nullability checks later on because the datatype may be\n+\t * omitted on the generation clause--we can't set/vet the nullability of the\n+\t * datatype until we determine what the datatype is.\n+\t */\n+    public  void    validatePrimaryKeyNullability()\n+        throws StandardException\n+    {\n+\t\tint\t\t\tsize = size();\n+\t\tfor (int index = 0; index < size; index++)\n+\t\t{\n+\t\t\tTableElementNode tableElement = (TableElementNode) elementAt(index);\n+\n+\t\t\tif (! (tableElement.hasConstraint()))\n+\t\t\t{\n+\t\t\t\tcontinue;\n+\t\t\t}\n+            \n+\t\t\tConstraintDefinitionNode cdn = (ConstraintDefinitionNode) tableElement;\n+\n+            if (cdn.hasPrimaryKeyConstraint())\n+            {\n+                if (td == null)\n+                {\n+                    // in CREATE TABLE so set PRIMARY KEY columns to NOT NULL\n+                    setColumnListToNotNull(cdn);\n+                }\n+                else\n+                {\n+                    // in ALTER TABLE so raise error if any columns are nullable\n+                    checkForNullColumns(cdn, td);\n+                }\n+            }\n+        }\n+    }\n+    \n     /**\n \t * Count the number of constraints of the specified type.\n \t *\n@@ -721,6 +749,7 @@ void bindAndValidateGenerationClauses( SchemaDescriptor sd, FromList fromList, F\n \t{\n \t\tCompilerContext cc;\n \t\tFromBaseTable\t\t\t\ttable = (FromBaseTable) fromList.elementAt(0);\n+        ResultColumnList            tableColumns = table.getResultColumns();\n         int                                 columnCount = table.getResultColumns().size();\n \t\tint\t\t\t\t\t\t  size = size();\n \n@@ -787,6 +816,12 @@ void bindAndValidateGenerationClauses( SchemaDescriptor sd, FromList fromList, F\n                 {\n                     cdn.setType( generationClauseType );\n \n+                    //\n+                    // Poke the type into the FromTable so that constraints will\n+                    // compile.\n+                    //\n+                    tableColumns.getResultColumn( cdn.getColumnName(), false ).setType( generationClauseType );\n+\n                     //\n                     // We skipped these steps earlier on because we didn't have\n                     // a datatype. Now that we have a datatype, revisit these"
            },
            {
                "sha": "f19bfc603bab993dba03eb24e315c5252dcf11c0",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "patch": "@@ -12195,6 +12195,10 @@ columnConstraint(TableName constraintName,\n \t\t//throw an exception\n \t\tif (explicitNull) \n                    throw StandardException.newException(SQLState.LANG_ADDING_COLUMN_WITH_NULL_AND_NOT_NULL_CONSTRAINT, columnName); \n+\n+\t\t// columns with generation clauses can omit the datatype\n+\t\tif ( dataTypeDescriptor[0] == null ) { throw StandardException.newException(SQLState.LANG_NOT_NULL_NEEDS_DATATYPE); }\n+\n \t\tdataTypeDescriptor[0] = dataTypeDescriptor[0].getNullabilityType(false);\n \t\treturn null;\n \t}"
            },
            {
                "sha": "ca96a01a990494974a2efb3de23497bd204afdd9",
                "filename": "java/engine/org/apache/derby/loc/messages.xml",
                "status": "modified",
                "additions": 5,
                "deletions": 0,
                "changes": 5,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/loc/messages.xml",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/engine/org/apache/derby/loc/messages.xml",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/loc/messages.xml?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "patch": "@@ -2031,6 +2031,11 @@ Guide.\n                 <arg>columnName</arg>\n             </msg>\n \n+            <msg>\n+                <name>42XAB</name>\n+                <text>NOT NULL is allowed only if you explicitly declare a datatype.</text>\n+            </msg>\n+\n             <msg>\n                 <name>42Y00</name>\n                 <text>Class '{0}' does not implement org.apache.derby.iapi.db.AggregateDefinition and thus cannot be used as an aggregate expression.</text>"
            },
            {
                "sha": "b1e2bc44843495198e817b4b6429435f1b6d6869",
                "filename": "java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/shared/org/apache/derby/shared/common/reference/SQLState.java?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "patch": "@@ -905,6 +905,7 @@ The message identifier (ie. the value that matches a field in this class)\n     String LANG_GEN_COL_BAD_RENAME                                           = \"42XA8\";\n     String LANG_NEEDS_DATATYPE                                                      = \"42XA9\";\n     String LANG_GEN_COL_BEFORE_TRIG                                             = \"42XAA\";\n+    String LANG_NOT_NULL_NEEDS_DATATYPE                                    = \"42XAB\";\n \tString LANG_INVALID_USER_AGGREGATE_DEFINITION2                     = \"42Y00\";\n \tString LANG_INVALID_CHECK_CONSTRAINT                               = \"42Y01\";\n \t// String LANG_NO_ALTER_TABLE_COMPRESS_ON_TARGET_TABLE                = \"42Y02\";"
            },
            {
                "sha": "7dc1cd11d82a03769676f02bf15a0faebfa93073",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "patch": "@@ -57,6 +57,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     ///////////////////////////////////////////////////////////////////////////////////\n \n     protected static  final   String  REDUNDANT_CLAUSE = \"42613\";\n+    protected static  final   String  CANT_CONTAIN_NULLS = \"42831\";\n     protected static  final   String  ILLEGAL_AGGREGATE = \"42XA1\";\n     protected static  final   String  UNSTABLE_RESULTS = \"42XA2\";\n     protected static  final   String  CANT_OVERRIDE_GENERATION_CLAUSE = \"42XA3\";\n@@ -67,6 +68,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     protected static  final   String  ILLEGAL_RENAME = \"42XA8\";\n     protected static  final   String  NEED_EXPLICIT_DATATYPE = \"42XA9\";\n     protected static  final   String  BAD_BEFORE_TRIGGER = \"42XAA\";\n+    protected static  final   String  NOT_NULL_NEEDS_DATATYPE = \"42XAB\";\n     \n     protected static  final   String  NOT_NULL_VIOLATION = \"23502\";\n     protected static  final   String  CONSTRAINT_VIOLATION = \"23513\";"
            },
            {
                "sha": "a443e5bb4e754c548ba4699525fa34e3ca6ce615",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "status": "modified",
                "additions": 381,
                "deletions": 0,
                "changes": 381,
                "blob_url": "https://github.com/apache/derby/blob/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "raw_url": "https://github.com/apache/derby/raw/b8b524c00d7736560a43e1eeb7ef1a3f42356843/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java?ref=b8b524c00d7736560a43e1eeb7ef1a3f42356843",
                "patch": "@@ -4644,6 +4644,387 @@ public  void    test_026_onDeleteSetNull()\n              );\n     }\n     \n+    /**\n+     * <p>\n+     * Test that we can put constraints on generated columns when we omit the datatype.\n+     * DERBY-3969.\n+     * </p>\n+     */\n+    public  void    test_027_constraintsNoDatatype()\n+        throws Exception\n+    {\n+        Connection  conn = getConnection();\n+\n+        //\n+        // Verify that we can declare check constraints on generated columns\n+        // which omit the datatype.\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_1( a int, b generated always as ( -a ) check ( b < 0 ) )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_1( a ) values ( 1 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             CONSTRAINT_VIOLATION,\n+             \"insert into t_ccnd_1( a ) values ( -1 )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"alter table t_ccnd_1 add column c generated always as ( -a ) check ( c > -10 )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_1( a ) values ( 2 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             CONSTRAINT_VIOLATION,\n+             \"insert into t_ccnd_1( a ) values ( 20 )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_1 order by a\",\n+             new String[][]\n+             {\n+                 { \"1\", \"-1\", \"-1\" },\n+                 { \"2\", \"-2\", \"-2\" },\n+             },\n+             false\n+             );\n+\n+        //\n+        // Verify that we can declare foreign keys on generated columns\n+        // which omit the datatype.\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_2( b int primary key )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_3( a int, b generated always as ( -a ) references t_ccnd_2( b ) )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_4( a int )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_2( b ) values ( 1 )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_3( a ) values ( -1 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             FOREIGN_KEY_VIOLATION,\n+             \"insert into t_ccnd_3( a ) values ( -2 )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"alter table t_ccnd_4 add column b generated always as ( -a ) references t_ccnd_2( b )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_4( a ) values ( -1 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             FOREIGN_KEY_VIOLATION,\n+             \"insert into t_ccnd_4( a ) values ( -2 )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_3 order by a\",\n+             new String[][]\n+             {\n+                 { \"-1\", \"1\", },\n+             },\n+             false\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_4 order by a\",\n+             new String[][]\n+             {\n+                 { \"-1\", \"1\", },\n+             },\n+             false\n+             );\n+\n+        //\n+        // Verify that we can declare primary keys on generated columns\n+        // which omit the datatype.\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_5( a int, b generated always as ( -a ) primary key )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_5( a ) values ( 1 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             ILLEGAL_DUPLICATE,\n+             \"insert into t_ccnd_5( a ) values ( 1 )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_5 order by a\",\n+             new String[][]\n+             {\n+                 { \"1\", \"-1\", },\n+             },\n+             false\n+             );\n+        \n+        //\n+        // Verify that you CANNOT declare a generated column to be NOT NULL\n+        // if you omit the datatype.\n+        //\n+        expectCompilationError\n+            (\n+             NOT_NULL_NEEDS_DATATYPE,\n+             \"create table t_ccnd_6( a int, b generated always as ( -a ) not null )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_6( a int )\"\n+             );\n+        expectCompilationError\n+            (\n+             NOT_NULL_NEEDS_DATATYPE,\n+             \"alter table t_ccnd_6 add column b generated always as ( -a ) not null\"\n+             );\n+        \n+        //\n+        // Verify that you CAN declare a generated column to be NOT NULL\n+        // if you include the datatype.\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_7( a int, b int generated always as ( -a ) not null )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_7( a ) values ( 1 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             NOT_NULL_VIOLATION,\n+             \"insert into t_ccnd_7( a ) values ( null )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_7 order by a\",\n+             new String[][]\n+             {\n+                 { \"1\", \"-1\", },\n+             },\n+             false\n+             );\n+        \n+        //\n+        // Verify that we can add generated columns with primary keys\n+        // but only if you include the datatype or if the resolved datatype\n+        // is not nullable.\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_8( a int )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_9( a int not null )\"\n+             );\n+        expectCompilationError\n+            (\n+             CANT_CONTAIN_NULLS,\n+             \"alter table t_ccnd_8 add column b generated always as ( -a ) primary key\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"alter table t_ccnd_8 add column b int not null generated always as ( -a ) primary key\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_8( a ) values ( 1 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             NOT_NULL_VIOLATION,\n+             \"insert into t_ccnd_8( a ) values ( null )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             ILLEGAL_DUPLICATE,\n+             \"insert into t_ccnd_8( a ) values ( 1 )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_8 order by a\",\n+             new String[][]\n+             {\n+                 { \"1\", \"-1\", },\n+             },\n+             false\n+             );\n+\n+        goodStatement\n+            (\n+             conn,\n+             \"alter table t_ccnd_9 add column b generated always as ( -a ) primary key\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_9( a ) values ( 1 )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             ILLEGAL_DUPLICATE,\n+             \"insert into t_ccnd_9( a ) values ( 1 )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_9 order by a\",\n+             new String[][]\n+             {\n+                 { \"1\", \"-1\", },\n+             },\n+             false\n+             );\n+        \n+        //\n+        // Verify that we can create generated columns with unique constraints.\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_10( a int, b generated always as ( -a ) unique )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_ccnd_11( a int )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_10( a ) values ( 1 )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_10( a ) values ( null )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_10( a ) values ( null )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             ILLEGAL_DUPLICATE,\n+             \"insert into t_ccnd_10( a ) values ( 1 )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_10 order by a\",\n+             new String[][]\n+             {\n+                 { \"1\", \"-1\", },\n+                 { null, null, },\n+                 { null, null, },\n+             },\n+             false\n+             );\n+\n+        goodStatement\n+            (\n+             conn,\n+             \"alter table t_ccnd_11 add column b generated always as ( -a ) unique\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_11( a ) values ( 1 )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_11( a ) values ( null )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_ccnd_11( a ) values ( null )\"\n+             );\n+        expectExecutionError\n+            (\n+             conn,\n+             ILLEGAL_DUPLICATE,\n+             \"insert into t_ccnd_11( a ) values ( 1 )\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_ccnd_11 order by a\",\n+             new String[][]\n+             {\n+                 { \"1\", \"-1\", },\n+                 { null, null, },\n+                 { null, null, },\n+             },\n+             false\n+             );\n+\n+    }\n+    \n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n     // MINIONS"
            }
        ]
    }
]
[
    {
        "commit": "https://github.com/apache/derby/commit/039729285afafbb60517281c4c6939906bc56aad",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/f07a7c38040833b85853904932c721870dcf6a9d",
        "message": "DERBY-3964: Fix NPE in evaluation of generated columns while processing an ON DELETE SET NULL referential action.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@722623 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_101",
        "file": [
            {
                "sha": "535311dbee509c9b4e36063fac910cdfa02606f9",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java",
                "status": "modified",
                "additions": 20,
                "deletions": 6,
                "changes": 26,
                "blob_url": "https://github.com/apache/derby/blob/039729285afafbb60517281c4c6939906bc56aad/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java",
                "raw_url": "https://github.com/apache/derby/raw/039729285afafbb60517281c4c6939906bc56aad/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java?ref=039729285afafbb60517281c4c6939906bc56aad",
                "patch": "@@ -575,7 +575,6 @@ void forbidGenerationOverrides( ResultColumnList targetRCL, boolean forUpdate, C\n                         {\n                             newRC.setName( rc.getName() );\n                             newRC.setResultSetNumber( updateResultSet.getResultSetNumber() );\n-                            \n                             sourceRCL.setElementAt( newRC, j );\n                             \n                         }\n@@ -1582,6 +1581,7 @@ public boolean requiresDeferredProcessing()\n       *\n       * @param rcl  describes the row of expressions to be put into the bas table\n       * @param resultSetNumber  index of base table into array of ResultSets\n+      * @param isUpdate true if this is for an UPDATE statement\n       * @param ecb code generation state variable\n       * @param mb the method being generated\n       *\n@@ -1591,6 +1591,7 @@ public boolean requiresDeferredProcessing()\n \t(\n         ResultColumnList            rcl,\n         int                                 resultSetNumber,\n+        boolean                         isUpdate,\n \t\tExpressionClassBuilder\tecb,\n \t\tMethodBuilder\t\t\tmb\n     )\n@@ -1637,7 +1638,7 @@ public boolean requiresDeferredProcessing()\n \t\t}\n \t\telse\n \t\t{\n-\t\t\tMethodBuilder\tuserExprFun = generateGenerationClauses( rcl, resultSetNumber, ecb);\n+\t\t\tMethodBuilder\tuserExprFun = generateGenerationClauses( rcl, resultSetNumber, isUpdate, ecb);\n \n \t   \t\t// generation clause evaluation is used in the final result set \n \t\t\t// as an access of the new static\n@@ -1651,13 +1652,15 @@ public boolean requiresDeferredProcessing()\n       *\n       * @param rcl  describes the row of expressions to be put into the bas table\n       * @param rsNumber  index of base table into array of ResultSets\n+      * @param isUpdate true if this is for an UPDATE statement\n       * @param ecb code generation state variable\n       *\n \t  */\n \tprivate\tMethodBuilder\tgenerateGenerationClauses\n \t(\n         ResultColumnList            rcl,\n         int                                 rsNumber,\n+        boolean                         isUpdate,\n \t\tExpressionClassBuilder\tecb\n     )\n \t\tthrows StandardException\n@@ -1666,18 +1669,29 @@ public boolean requiresDeferredProcessing()\n \t\t// generates:\n \t\t// \tjava.lang.Object userExprFun( ) { }\n \t\tMethodBuilder userExprFun = ecb.newUserExprFun();\n-\t\t\n+\n \t\t/* Declare the field and load it with the current row */\n \t\tLocalField field = ecb.newFieldDeclaration(Modifier.PRIVATE, ClassName.ExecRow);\n         userExprFun.pushThis();\n         userExprFun.push( rsNumber );\n         userExprFun.callMethod(VMOpcode.INVOKEVIRTUAL, ClassName.BaseActivation, \"getCurrentRow\", ClassName.Row, 1);\n         userExprFun.putField( field );\n \n-\t\t// loop through the result columns, computing generated columns\n-        // as we go\n+\t\t// Loop through the result columns, computing generated columns\n+        // as we go. \n         int     size = rcl.size();\n-        for ( int i = 0; i < size; i++ )\n+        int     startColumn = 0;\n+        // For UPDATEs, we only compute the updated value for the\n+        // column. The updated value lives in the second half of the row.\n+        // This means we ignore the first half of the row, which holds\n+        // the before-images of the columns.\n+        if ( isUpdate )\n+        {\n+            // throw away the last cell in the row, which is the row id\n+            startColumn = size - 1;\n+            startColumn = startColumn / 2;\n+        }\n+        for ( int i = startColumn; i < size; i++ )\n         {\n             ResultColumn    rc = (ResultColumn) rcl.elementAt( i );\n "
            },
            {
                "sha": "22352f53e2391ac5dda2ed1bd35d02f68f69faeb",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/039729285afafbb60517281c4c6939906bc56aad/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "raw_url": "https://github.com/apache/derby/raw/039729285afafbb60517281c4c6939906bc56aad/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java?ref=039729285afafbb60517281c4c6939906bc56aad",
                "patch": "@@ -849,7 +849,7 @@ public void generate(ActivationClassBuilder acb,\n \t\t\tresultSet.generate(acb, mb);\n \n \t\t\t// arg 2 generate code to evaluate generation clauses\n-\t\t\tgenerateGenerationClauses( resultColumnList, resultSet.getResultSetNumber(), acb, mb );\n+\t\t\tgenerateGenerationClauses( resultColumnList, resultSet.getResultSetNumber(), false, acb, mb );\n \n \t\t\t// arg 3 generate code to evaluate CHECK CONSTRAINTS\n \t\t\tgenerateCheckConstraints( checkConstraints, acb, mb );"
            },
            {
                "sha": "a12411c3347612d68a68fbc4c58c7d844b77a0d3",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/039729285afafbb60517281c4c6939906bc56aad/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "raw_url": "https://github.com/apache/derby/raw/039729285afafbb60517281c4c6939906bc56aad/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java?ref=039729285afafbb60517281c4c6939906bc56aad",
                "patch": "@@ -844,7 +844,7 @@ public void generate(ActivationClassBuilder acb,\n         else\n         {\n \t\t\t// arg 2 generate code to evaluate generation clauses\n-\t\t\tgenerateGenerationClauses( resultColumnList, resultSet.getResultSetNumber(), acb, mb );\n+\t\t\tgenerateGenerationClauses( resultColumnList, resultSet.getResultSetNumber(), true, acb, mb );\n \n             // generate code to evaluate CHECK CONSTRAINTS\n             generateCheckConstraints( checkConstraints, acb, mb ); // arg 3"
            },
            {
                "sha": "449820424d372312e83ee09278cfb7c669a550f1",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "status": "modified",
                "additions": 67,
                "deletions": 0,
                "changes": 67,
                "blob_url": "https://github.com/apache/derby/blob/039729285afafbb60517281c4c6939906bc56aad/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "raw_url": "https://github.com/apache/derby/raw/039729285afafbb60517281c4c6939906bc56aad/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java?ref=039729285afafbb60517281c4c6939906bc56aad",
                "patch": "@@ -4573,10 +4573,77 @@ public  void    test_025_basicUpdatableResultSets()\n              false\n              );\n         conn.commit();\n+        conn.setAutoCommit( true );\n \n         stmt.close();\n     }\n \n+    /**\n+     * <p>\n+     * Test that we correctly handle foreign keys with ON DELETE SET NULL\n+     * clauses. DERBY-3964.\n+     * </p>\n+     */\n+    public  void    test_026_onDeleteSetNull()\n+        throws Exception\n+    {\n+        Connection  conn = getConnection();\n+\n+        //\n+        // Setup\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_dhw_1( a int primary key )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"create table t_dhw_2( a int references t_dhw_1( a ) on delete set null check ( a is null or a > 0 ), b int generated always as ( -a ) check ( b is null or b < 0 ) )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_dhw_1( a ) values ( 1 ), ( 2 )\"\n+             );\n+        goodStatement\n+            (\n+             conn,\n+             \"insert into t_dhw_2( a ) values( 1 )\"\n+             );\n+\n+        //\n+        // Verify that when you delete from the primary table, the foreign key\n+        // table is updated and the update percolates through to the generated column.\n+        //\n+        goodStatement\n+            (\n+             conn,\n+             \"delete from t_dhw_1 where a = 1\"\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_dhw_1 order by a\",\n+             new String[][]\n+             {\n+                 { \"2\", },\n+             },\n+             false\n+             );\n+        assertResults\n+            (\n+             conn,\n+             \"select * from t_dhw_2 order by a\",\n+             new String[][]\n+             {\n+                 { null, null, },\n+             },\n+             false\n+             );\n+    }\n+    \n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n     // MINIONS"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/f35adc58a0a5555b65d122a36e4b7576e89cde68",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/83e4e39248212fbf26fcb602cf98c410c3baf221",
        "message": "DERBY-2466: Attempt to fix NPE during run of SecurityPolicyReloadingTest on some environments.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@524252 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_102",
        "file": [
            {
                "sha": "04e2c56a95790d367cc4bee846269e127b91c9b0",
                "filename": "java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java",
                "status": "modified",
                "additions": 7,
                "deletions": 3,
                "changes": 10,
                "blob_url": "https://github.com/apache/derby/blob/f35adc58a0a5555b65d122a36e4b7576e89cde68/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java",
                "raw_url": "https://github.com/apache/derby/raw/f35adc58a0a5555b65d122a36e4b7576e89cde68/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java?ref=f35adc58a0a5555b65d122a36e4b7576e89cde68",
                "patch": "@@ -155,9 +155,13 @@ private static void installSecurityManager(String policyFile)\n \t\tif (sm != null) {\n \t\t\t// SecurityManager installed, see if it has the same settings.\n \n-\t\t\tif (set.getProperty(\"java.security.policy\").equals(\n-\t\t\t\t\tBaseTestCase.getSystemProperty(\"java.security.policy\")))\n-\t\t\t\t\treturn;\n+\t\t\tString  newPolicyProperty = set.getProperty(\"java.security.policy\" );\n+\t\t\tif ( newPolicyProperty == null ) { newPolicyProperty = \"\"; } \n+                                                   \n+\t\t\tString  oldPolicyProperty = BaseTestCase.getSystemProperty(\"java.security.policy\");\n+\t\t\tif ( oldPolicyProperty == null ) { oldPolicyProperty = \"\"; }\n+\n+\t\t\tif ( newPolicyProperty.equals( oldPolicyProperty ) ) { return; }\n \t\t\t\n \t\t\t// Uninstall the current manager.\n \t\t\tuninstallSecurityManager();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/2c140d81eb31552064ed43f437ee81362dc39887",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/d0b190e48f38f20f4edfd0b2071800769132936c",
        "message": "DERBY-2112 - fix NPE on executeBatchRequestX when PreparedStatement has no parameters. \n  Fix suggested by reporter, Cesar Devera.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@505700 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_103",
        "file": [
            {
                "sha": "3e900edd3ce0105412a88a559ce5ebf990f71614",
                "filename": "java/client/org/apache/derby/client/am/PreparedStatement.java",
                "status": "modified",
                "additions": 5,
                "deletions": 3,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/2c140d81eb31552064ed43f437ee81362dc39887/java/client/org/apache/derby/client/am/PreparedStatement.java",
                "raw_url": "https://github.com/apache/derby/raw/2c140d81eb31552064ed43f437ee81362dc39887/java/client/org/apache/derby/client/am/PreparedStatement.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/PreparedStatement.java?ref=2c140d81eb31552064ed43f437ee81362dc39887",
                "patch": "@@ -2261,9 +2261,11 @@ void flowExecute(int executeType) throws SqlException {\n         }\n \n         for (int i = 0; i < batchSize; i++) {\n-            parameterMetaData_.clientParamtertype_ = (int[]) parameterTypeList.get(i);\n-            parameters_ = (Object[]) batch_.get(i);\n-\n+            if (parameterMetaData_ != null) {\n+                parameterMetaData_.clientParamtertype_ = (int[]) parameterTypeList.get(i);\n+                parameters_ = (Object[]) batch_.get(i);\n+            }\n+            \n             if (sqlMode_ != isCall__) {\n                 boolean outputExpected;\n                 try {"
            },
            {
                "sha": "4dd0d6f1cdbb31c07cf05255fbde6be2cca692d1",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java",
                "status": "modified",
                "additions": 3,
                "deletions": 8,
                "changes": 11,
                "blob_url": "https://github.com/apache/derby/blob/2c140d81eb31552064ed43f437ee81362dc39887/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java",
                "raw_url": "https://github.com/apache/derby/raw/2c140d81eb31552064ed43f437ee81362dc39887/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java?ref=2c140d81eb31552064ed43f437ee81362dc39887",
                "patch": "@@ -92,7 +92,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n  *      try executing a batch which nothing in it.\n  *    - testNoParametersPreparedBatch()\n  *      try executing a batch with no parameters. \n- *      (fails with NullPointerException with NetworkServer. See DERBY-2112\n  *    - testSingleValueSetPreparedBatch()\n  *      try executing a batch which one parameter set in it.\n  *    - testMultipleValueSetPreparedBatch()\n@@ -1017,14 +1016,10 @@ public void testEmptyValueSetPreparedBatch() throws SQLException {\n         commit();\n     }\n     \n-    // try prepared statement batch with just no settable parameters.\n+    // try prepared statement batch without settable parameters.\n     public void testNoParametersPreparedBatch() throws SQLException {\n \n-        // TODO: analyze & implement for NetworkServer when DERBY-2112 is fixed\n-        // test fails with NullPointerException with NetworkServer\n-        // see DERBY-2112\n-        if (!usingEmbedded())\n-            return;\n+        // Note: also tests for fix of NPE of DERBY-2112\n      \n         Statement stmt = createStatement();\n         ResultSet rs;\n@@ -1649,4 +1644,4 @@ else if (usingDerbyNetClient())\n         conn2.rollback();\n         commit();\n     }\n-}\n\\ No newline at end of file\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/7e5c66994b4456fe2d5a76854f01a722a8bae53e",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/4e98d37f45e9911da6e5d18f309d57f281697f49",
        "message": "DERBY-1777: Commit Army's d1777_v2.patch, cleaning up an NPE in the optimizer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@446924 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_104",
        "file": [
            {
                "sha": "a31faef48dbce62ef08e767a5a8268540248071a",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java",
                "status": "modified",
                "additions": 13,
                "deletions": 3,
                "changes": 16,
                "blob_url": "https://github.com/apache/derby/blob/7e5c66994b4456fe2d5a76854f01a722a8bae53e/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java",
                "raw_url": "https://github.com/apache/derby/raw/7e5c66994b4456fe2d5a76854f01a722a8bae53e/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java?ref=7e5c66994b4456fe2d5a76854f01a722a8bae53e",
                "patch": "@@ -1069,10 +1069,20 @@ protected ResultSetNode getSourceResultSet(int [] colNum)\n \t\trcExpr = rc.getExpression();\n \t\tcolNum[0] = getColumnNumber();\n \n-\t\twhile ((rcExpr != null) && (rcExpr instanceof ColumnReference))\n+\t\t/* We have to make sure we enter this loop if rc is redundant,\n+\t\t * so that we can navigate down to the actual source result\n+\t\t * set (DERBY-1777). If rc *is* redundant, then rcExpr is not\n+\t\t * guaranteed to be a ColumnReference, so we have to check\n+\t\t * for that case inside the loop.\n+\t\t */\n+\t\twhile ((rcExpr != null) &&\n+\t\t\t(rc.isRedundant() || (rcExpr instanceof ColumnReference)))\n \t\t{\n-\t\t\tcolNum[0] = ((ColumnReference)rcExpr).getColumnNumber();\n-\t\t\trc = ((ColumnReference)rcExpr).getSource();\n+\t\t\tif (rcExpr instanceof ColumnReference)\n+\t\t\t{\n+\t\t\t\tcolNum[0] = ((ColumnReference)rcExpr).getColumnNumber();\n+\t\t\t\trc = ((ColumnReference)rcExpr).getSource();\n+\t\t\t}\n \n \t\t\t/* If \"rc\" is redundant then that means it points to another\n \t\t\t * ResultColumn that in turn points to the source expression."
            },
            {
                "sha": "9980a0456b58ebf8629432fa65221733d6d3629e",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java",
                "status": "modified",
                "additions": 27,
                "deletions": 12,
                "changes": 39,
                "blob_url": "https://github.com/apache/derby/blob/7e5c66994b4456fe2d5a76854f01a722a8bae53e/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java",
                "raw_url": "https://github.com/apache/derby/raw/7e5c66994b4456fe2d5a76854f01a722a8bae53e/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java?ref=7e5c66994b4456fe2d5a76854f01a722a8bae53e",
                "patch": "@@ -454,18 +454,21 @@ public boolean getNextPermutation()\n \t\t\t\t\tfirstLookOrder[i] = bestJoinOrder[i];\n \t\t\t\tpermuteState = JUMPING;\n \n-\t\t\t\t// If we were in the middle of a join order when this\n-\t\t\t\t// happened, then reset the join order before jumping.\n-\t\t\t\t// The call to rewindJoinOrder() here will put joinPosition\n-\t\t\t\t// back to 0.  But that said, we'll then end up incrementing \n-\t\t\t\t// joinPosition before we start looking for the next join\n-\t\t\t\t// order (see below), which means we need to set it to -1\n-\t\t\t\t// here so that it gets incremented to \"0\" and then\n-\t\t\t\t// processing can continue as normal from there.  Note:\n-\t\t\t\t// we don't need to set reloadBestPlan to true here\n-\t\t\t\t// because we only get here if we have *not* found a\n-\t\t\t\t// best plan yet.\n-\t\t\t\tif (joinPosition > 0)\n+\t\t\t\t/* If we already assigned at least one position in the\n+\t\t\t\t * join order when this happened (i.e. if joinPosition\n+\t\t\t\t * is greater than *or equal* to zero; DERBY-1777), then \n+\t\t\t\t * reset the join order before jumping.  The call to\n+\t\t\t\t * rewindJoinOrder() here will put joinPosition back\n+\t\t\t\t * to 0.  But that said, we'll then end up incrementing\n+\t\t\t\t * joinPosition before we start looking for the next\n+\t\t\t\t * join order (see below), which means we need to set\n+\t\t\t\t * it to -1 here so that it gets incremented to \"0\" and\n+\t\t\t\t * then processing can continue as normal from there.  \n+\t\t\t\t * Note: we don't need to set reloadBestPlan to true\n+\t\t\t\t * here because we only get here if we have *not* found\n+\t\t\t\t * a best plan yet.\n+\t\t\t\t */\n+\t\t\t\tif (joinPosition >= 0)\n \t\t\t\t{\n \t\t\t\t\trewindJoinOrder();\n \t\t\t\t\tjoinPosition = -1;\n@@ -1674,6 +1677,18 @@ public void costPermutation() throws StandardException\n \t\t\t\t\t\tgetBestAccessPath().getCostEstimate();\n \t\t}\n \n+\t\t/* At this point outerCost should be non-null (DERBY-1777).\n+\t\t * Do the assertion here so that we catch it right away;\n+\t\t * otherwise we'd end up with an NPE somewhere further\n+\t\t * down the tree and it'd be harder to figure out where\n+\t\t * it came from.\n+\t\t */\n+\t\tif (SanityManager.DEBUG)\n+\t\t{\n+\t\t\tSanityManager.ASSERT(outerCost != null,\n+\t\t\t\t\"outerCost is not expected to be null\");\n+\t\t}\n+\n \t\tOptimizable optimizable = optimizableList.getOptimizable(proposedJoinOrder[joinPosition]);\n \n \t\t/*"
            },
            {
                "sha": "a15054d7c00555b430dec0c2fe9b9f935f30e7c3",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/predicatePushdown.out",
                "status": "modified",
                "additions": 24,
                "deletions": 0,
                "changes": 24,
                "blob_url": "https://github.com/apache/derby/blob/7e5c66994b4456fe2d5a76854f01a722a8bae53e/java/testing/org/apache/derbyTesting/functionTests/master/predicatePushdown.out",
                "raw_url": "https://github.com/apache/derby/raw/7e5c66994b4456fe2d5a76854f01a722a8bae53e/java/testing/org/apache/derbyTesting/functionTests/master/predicatePushdown.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/predicatePushdown.out?ref=7e5c66994b4456fe2d5a76854f01a722a8bae53e",
                "patch": "@@ -1326,6 +1326,12 @@ ij> create view vz3 (z1, z2, z3, z4) as\n     (select c1, c, c2, 28 from tc) xx1\n       union select 'i','j','j',i from t2;\n 0 rows inserted/updated/deleted\n+ij> create view vz4 (z1, z2, z3, z4) as\n+  select distinct xx1.c1, xx1.c2, 'bokibob' bb, xx1.c from\n+    (select c1, c, c2, 28 from tc) xx1\n+      union select 'i','j','j',i from t2\n+      union select c1, c2, c3, c from tc;\n+0 rows inserted/updated/deleted\n ij> -- Both sides of predicate reference aggregates.\n select x1.c1 from\n   (select count(*) from t1 union select count(*) from t2) x1 (c1),\n@@ -1518,6 +1524,22 @@ where x1.z4 = x2.c2;\n Z4         \n -----------\n 4          \n+ij> -- Same as previous query but with a different nested\n+-- view (vz4) that has double-nested unions in it.\n+-- This is a test case for DERBY-1777.\n+select x1.z4, x2.c2 from\n+  (select z1, z4, z3 from vz4\n+    union select '1', i+1, '3' from t1\n+  ) x1 (z1, z4, z3),\n+  (select distinct j from t2 union select j from t1) x2 (c2)\n+where x1.z4 = x2.c2;\n+Z4         |C2         \n+-----------------------\n+2          |2          \n+4          |4          \n+6          |6          \n+2          |2          \n+4          |4          \n ij> -- Queries with Select->Union->Select chains having differently-\n -- ordered result column lists with some non-column reference\n -- expressions.  In all of these queries we specify LEFT join\n@@ -1707,6 +1729,8 @@ ij> drop view vz2;\n 0 rows inserted/updated/deleted\n ij> drop view vz3;\n 0 rows inserted/updated/deleted\n+ij> drop view vz4;\n+0 rows inserted/updated/deleted\n ij> drop table tc;\n 0 rows inserted/updated/deleted\n ij> -- Now bump up the size of tables T3 and T4 to the point where"
            },
            {
                "sha": "21a618ea3f49423d809a9f7bc5d45737dbfe4a62",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/predicatePushdown.sql",
                "status": "modified",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/7e5c66994b4456fe2d5a76854f01a722a8bae53e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/predicatePushdown.sql",
                "raw_url": "https://github.com/apache/derby/raw/7e5c66994b4456fe2d5a76854f01a722a8bae53e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/predicatePushdown.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/predicatePushdown.sql?ref=7e5c66994b4456fe2d5a76854f01a722a8bae53e",
                "patch": "@@ -107,6 +107,12 @@ create view vz3 (z1, z2, z3, z4) as\n     (select c1, c, c2, 28 from tc) xx1\n       union select 'i','j','j',i from t2;\n \n+create view vz4 (z1, z2, z3, z4) as\n+  select distinct xx1.c1, xx1.c2, 'bokibob' bb, xx1.c from\n+    (select c1, c, c2, 28 from tc) xx1\n+      union select 'i','j','j',i from t2\n+      union select c1, c2, c3, c from tc;\n+\n -- Both sides of predicate reference aggregates.\n select x1.c1 from\n   (select count(*) from t1 union select count(*) from t2) x1 (c1),\n@@ -266,6 +272,16 @@ select x1.z4 from\n   (select distinct j from t2 union select j from t1) x2 (c2)\n where x1.z4 = x2.c2;\n \n+-- Same as previous query but with a different nested\n+-- view (vz4) that has double-nested unions in it.\n+-- This is a test case for DERBY-1777.\n+select x1.z4, x2.c2 from\n+  (select z1, z4, z3 from vz4\n+    union select '1', i+1, '3' from t1\n+  ) x1 (z1, z4, z3),\n+  (select distinct j from t2 union select j from t1) x2 (c2)\n+where x1.z4 = x2.c2;\n+\n -- Queries with Select->Union->Select chains having differently-\n -- ordered result column lists with some non-column reference\n -- expressions.  In all of these queries we specify LEFT join\n@@ -379,6 +395,7 @@ on x1.z4 = x2.c2;\n drop view vz;\n drop view vz2;\n drop view vz3;\n+drop view vz4;\n drop table tc;\n \n -- Now bump up the size of tables T3 and T4 to the point where"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/b22383e51d8984f3c846777eb4b45680477c8698",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/6a925a39f416e8023060375faf4dbf8bd1733fba",
        "message": "DDERBY-1298 Tracing client data source gives NPE if all data source properties are not set\n\nContributed by Deepa Remesh\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@409466 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_105",
        "file": [
            {
                "sha": "29b17ac0cfc91454a7a4088731b0e2ff59ce44cc",
                "filename": "java/client/org/apache/derby/client/am/LogWriter.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/b22383e51d8984f3c846777eb4b45680477c8698/java/client/org/apache/derby/client/am/LogWriter.java",
                "raw_url": "https://github.com/apache/derby/raw/b22383e51d8984f3c846777eb4b45680477c8698/java/client/org/apache/derby/client/am/LogWriter.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/LogWriter.java?ref=b22383e51d8984f3c846777eb4b45680477c8698",
                "patch": "@@ -1247,7 +1247,8 @@ private Properties getProperties(ClientBaseDataSource cds)\n                     value = \"********\";\n                 }\n                 \n-                properties.setProperty(propertyKey, value);\n+                if(value != null)\n+                \tproperties.setProperty(propertyKey, value);\n             }\n         } catch (NamingException e) {\n             throw new SqlException(this, e.toString());"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/617d55aba2641523093e9c7496659b07224bdc0c",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/b1047191cf38ccd210002346bfdc54e0458a9381",
        "message": "DERBY-6726: NPE from trigger\n\nWhen there are multiple triggers on the same table, it is crucial that the\nTriggerDescriptor class always uses the getTableDescriptor() getter method\nto access its 'td' member field, so that the field can be lazy-initialized\nif it has not yet been set.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1763024 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_106",
        "file": [
            {
                "sha": "f4f97995b1908c0fa96480f6592b4250b7e0c415",
                "filename": "java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/617d55aba2641523093e9c7496659b07224bdc0c/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java",
                "raw_url": "https://github.com/apache/derby/raw/617d55aba2641523093e9c7496659b07224bdc0c/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java?ref=617d55aba2641523093e9c7496659b07224bdc0c",
                "patch": "@@ -411,7 +411,7 @@ private SPSDescriptor getSPS(LanguageConnectionContext lcc,\n \t\t\t\t\treferencedCols,\n \t\t\t\t\treferencedColsInTriggerAction,\n                     0,\n-\t\t\t\t\ttd,\n+\t\t\t\t\tgetTableDescriptor(),\n \t\t\t\t\t-1,\n                     false,\n                     null);\n@@ -423,7 +423,7 @@ private SPSDescriptor getSPS(LanguageConnectionContext lcc,\n \t\t\t\t\treferencedCols,\n \t\t\t\t\treferencedColsInTriggerAction,\n \t\t\t\t\t0,\n-\t\t\t\t\ttd,\n+\t\t\t\t\tgetTableDescriptor(),\n \t\t\t\t\t-1,\n                     false,\n                     null,"
            },
            {
                "sha": "4f29e64ac2f6e81f77f7f16e373ce47a1cfbe533",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "status": "modified",
                "additions": 135,
                "deletions": 0,
                "changes": 135,
                "blob_url": "https://github.com/apache/derby/blob/617d55aba2641523093e9c7496659b07224bdc0c/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "raw_url": "https://github.com/apache/derby/raw/617d55aba2641523093e9c7496659b07224bdc0c/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java?ref=617d55aba2641523093e9c7496659b07224bdc0c",
                "patch": "@@ -301,6 +301,141 @@ public void testDerby6383StatementTriggerBugTst2() throws SQLException\n         s.executeUpdate(\"drop table DERBY_6368_TAB2\");\n     }\n \n+    public void testDerby6726()\n+        throws SQLException\n+    {\n+        Statement s = createStatement();\n+        s.executeUpdate( \"CREATE TABLE LOG (\" +\n+                    \"ID BIGINT NOT NULL PRIMARY KEY \" +\n+                    \"   GENERATED ALWAYS AS IDENTITY \" +\n+                    \"   (START WITH 1, INCREMENT BY 1),\" +\n+                    \"NAME VARCHAR(80) DEFAULT 'New Log' NOT NULL,\" +\n+                    \"VERSION INT NOT NULL,\" +\n+                    \"DEPTH_UNITS VARCHAR(12) DEFAULT 'M',\" + \n+                    \"TOP_DEPTH DOUBLE DEFAULT -999.25,\" +\n+                    \"BOTTOM_DEPTH DOUBLE DEFAULT -999.25\" +\n+                    \")\");\n+\n+        s.executeUpdate(\"CREATE TABLE CURVE (\" +\n+                    \"ID BIGINT NOT NULL PRIMARY KEY \" +\n+                    \"   GENERATED ALWAYS AS IDENTITY \" +\n+                    \"   (START WITH 1, INCREMENT BY 1),\" +\n+                    \"LOG_ID BIGINT NOT NULL,\" +\n+                    \"NAME VARCHAR(80) DEFAULT 'New Curve' NOT NULL,\" +\n+                    \"TYPE VARCHAR(40) DEFAULT '.' NOT NULL,\" +\n+                    \"VERSION INT NOT NULL,\" +\n+                    \"PERSISTENCE VARCHAR(40) DEFAULT 'NUMBER',\" +\n+                    \"DEPTH_UNITS VARCHAR(12) DEFAULT 'M',\" + \n+                    \"CURVE_UNITS VARCHAR(40) DEFAULT '.',\" + \n+                    \"TOP_DEPTH DOUBLE DEFAULT -999.25,\" +\n+                    \"BOTTOM_DEPTH DOUBLE DEFAULT -999.25,\" +\n+                    \"MINCVAL DOUBLE DEFAULT -999.25,\" + \n+                    \"MAXCVAL DOUBLE DEFAULT -999.25,\" + \n+                    \"CREATED_BY VARCHAR(40) DEFAULT USER,\" +\n+                    \"CREATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\" +\n+                    \"LAST_UPDATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP\" +\n+                    \")\");\n+\n+        s.executeUpdate(\"CREATE TRIGGER CURVE_TRIG_LAST \" +\n+                    \" AFTER UPDATE OF NAME, TYPE, VERSION, PERSISTENCE, \" +\n+                    \"       DEPTH_UNITS, CURVE_UNITS, TOP_DEPTH, \" +\n+                    \"       BOTTOM_DEPTH, MINCVAL, MAXCVAL ON CURVE \" +\n+                    \" REFERENCING OLD AS UPDATEDROW \" +\n+                    \" FOR EACH ROW \" +\n+                    \"    UPDATE CURVE SET LAST_UPDATED=CURRENT_TIMESTAMP \" +\n+                    \"           WHERE ID=UPDATEDROW.ID\");\n+\n+        s.executeUpdate(\"CREATE TRIGGER CURVE_TRIG_UP \" +\n+                    \" AFTER UPDATE OF TOP_DEPTH, BOTTOM_DEPTH ON CURVE \" +\n+                    \" REFERENCING OLD AS UPDATEDROW \" +\n+                    \" FOR EACH ROW \" +\n+                    \"    UPDATE LOG SET \" +\n+                    \"        TOP_DEPTH=(\" +\n+                    \"            SELECT MIN(TOP_DEPTH) FROM CURVE \" +\n+                    \"                   WHERE LOG_ID=UPDATEDROW.LOG_ID AND \" +\n+                    \"                         TOP_DEPTH<>-999.25), \" +\n+                    \"        BOTTOM_DEPTH=(\" +\n+                    \"            SELECT MAX(BOTTOM_DEPTH) FROM CURVE \" +\n+                    \"                   WHERE LOG_ID=UPDATEDROW.LOG_ID AND \" +\n+                    \"                         BOTTOM_DEPTH<>-999.25) \" +\n+                    \"        WHERE ID=UPDATEDROW.LOG_ID\");\n+\n+        s.executeUpdate(\"CREATE TABLE CURVE_DATA_NUMBER (\" +\n+                    \"CURVE_ID BIGINT NOT NULL,\" +\n+                    \"SEQ_NUM BIGINT NOT NULL,\" +\n+                    \"MDEPTH DOUBLE,\" +\n+                    \"CVALUE DOUBLE DEFAULT -999.25\" +\n+                    \")\");\n+\n+        s.executeUpdate(\"ALTER TABLE CURVE_DATA_NUMBER \" +\n+                        \"  ADD CONSTRAINT CURVE_DATA_NUMBER_CURVE_ID_FK \" +\n+                        \"      FOREIGN KEY (CURVE_ID) REFERENCES CURVE (ID) \" +\n+                        \"      ON DELETE CASCADE\");\n+\n+        s.executeUpdate(\"ALTER TABLE CURVE_DATA_NUMBER \" +\n+                        \"  ADD CONSTRAINT CURVE_DATA_NUMBER_UN \" +\n+                        \"      UNIQUE (CURVE_ID, SEQ_NUM)\");\n+\n+        s.executeUpdate(\"CREATE INDEX CURVE_DATA_NUMBER_SEQ_NUM_INDEX \" +\n+                        \"  on CURVE_DATA_NUMBER (SEQ_NUM)\");\n+\n+        s.executeUpdate(\"CREATE TRIGGER CURVE_DATA_NUMBER_TRIG_UP \" +\n+                        \" AFTER UPDATE OF CURVE_ID, SEQ_NUM, MDEPTH, CVALUE \" +\n+                        \"       ON CURVE_DATA_NUMBER \" +\n+                        \" REFERENCING OLD AS UPDATEDROW \" +\n+                        \" FOR EACH ROW \" +\n+                        \"    UPDATE CURVE SET \" + \n+                        \"        TOP_DEPTH=(\" +\n+                        \"            SELECT MIN(MDEPTH) FROM CURVE_DATA_NUMBER \" +\n+                        \"                   WHERE CURVE_ID=UPDATEDROW.CURVE_ID AND \" +\n+                        \"                   MDEPTH<>-999.25),\" + \n+                        \"        BOTTOM_DEPTH=(\" +\n+                        \"            SELECT MAX(MDEPTH) FROM CURVE_DATA_NUMBER \" +\n+                        \"                   WHERE CURVE_ID=UPDATEDROW.CURVE_ID AND \" +\n+                        \"                   MDEPTH<>-999.25),\" + \n+                        \"        MINCVAL=(\" +\n+                        \"            SELECT MIN(CVALUE) FROM CURVE_DATA_NUMBER \" +\n+                        \"                   WHERE CURVE_ID=UPDATEDROW.CURVE_ID AND \" +\n+                        \"                   CVALUE<>-999.25),\" + \n+                        \"        MAXCVAL=(\" +\n+                        \"            SELECT MAX(CVALUE) FROM CURVE_DATA_NUMBER \" +\n+                        \"                   WHERE CURVE_ID=UPDATEDROW.CURVE_ID AND \" +\n+                        \"                   CVALUE<>-999.25) \" + \n+                        \"    WHERE ID=UPDATEDROW.CURVE_ID\");\n+\n+        s.executeUpdate(\"INSERT INTO LOG (NAME, VERSION) VALUES('TESTLOG',1)\");\n+\n+        s.executeUpdate(\"INSERT INTO CURVE(LOG_ID,NAME,VERSION) VALUES(1,'GR',1)\");\n+\n+        PreparedStatement ps = prepareStatement(\n+                        \"INSERT INTO CURVE_DATA_NUMBER \" +\n+                        \"   (CURVE_ID, SEQ_NUM, MDEPTH, CVALUE) \" +\n+                        \"   VALUES(?,?,?,?)\");\n+\n+        for(int i=1; i< 1000; i++) {\n+            ps.setInt(1, 1);\n+            ps.setInt(2, i);\n+            ps.setDouble(3, 1000.0 + i);\n+            ps.setDouble(4, 43.0 + i);\n+            ps.executeUpdate();\n+        }\n+\n+        s.executeUpdate(\"UPDATE CURVE_DATA_NUMBER \" +\n+                        \"  SET CURVE_ID=1 WHERE CURVE_ID=1 AND SEQ_NUM=1\");\n+\n+        s.executeUpdate(\"DROP TRIGGER CURVE_DATA_NUMBER_TRIG_UP\");\n+        s.executeUpdate(\"DROP TRIGGER CURVE_TRIG_UP\");\n+        s.executeUpdate(\"DROP TRIGGER CURVE_TRIG_LAST\");\n+        s.executeUpdate(\"ALTER TABLE CURVE_DATA_NUMBER \" +\n+                        \" DROP CONSTRAINT CURVE_DATA_NUMBER_CURVE_ID_FK\");\n+        s.executeUpdate(\"ALTER TABLE CURVE_DATA_NUMBER \" +\n+                        \" DROP CONSTRAINT CURVE_DATA_NUMBER_UN\");\n+        s.executeUpdate(\"DROP INDEX CURVE_DATA_NUMBER_SEQ_NUM_INDEX\");\n+        s.executeUpdate(\"DROP TABLE LOG\");\n+        s.executeUpdate(\"DROP TABLE CURVE\");\n+        s.executeUpdate(\"DROP TABLE CURVE_DATA_NUMBER\");\n+    }\n+\n /**\n      * Test that invalidating stored statements marks the statement invalid\n      *  in SYS.SYSSTATEMENTS. And when one of those invalid statements is"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/05b022f3e5e341b4f695d93f74e74962ea89dee0",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/800a411c4c61975e97260a40665690d8dd3dc57a",
        "message": "DERBY-534: Support use of the WHEN clause in CREATE TRIGGER statements\n\nFix incorrect null check when merging subqueryTrackingArray and\nmaterializedSubqueries in GenericStatementContext.setTopResultSet().\nUsed to cause NullPointerException in some cases when a WHEN clause\ncontained a subquery.\n\nAdd more tests for scalar subqueries in WHEN clauses.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1532666 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_107",
        "file": [
            {
                "sha": "c43bb85ae705e48f3c5b7fbe5824fa031e6b6591",
                "filename": "java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/05b022f3e5e341b4f695d93f74e74962ea89dee0/java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java",
                "raw_url": "https://github.com/apache/derby/raw/05b022f3e5e341b4f695d93f74e74962ea89dee0/java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java?ref=05b022f3e5e341b4f695d93f74e74962ea89dee0",
                "patch": "@@ -353,7 +353,7 @@ public void setTopResultSet(ResultSet topResultSet,\n \t\t\t\t}\n \t\t\t\tfor (int index = 0; index < subqueryTrackingArray.length; index++)\n \t\t\t\t{\n-\t\t\t\t\tif (this.subqueryTrackingArray[index] != null)\n+                    if (this.materializedSubqueries[index] != null)\n \t\t\t\t\t{\n \t\t\t\t\t\tsubqueryTrackingArray[index] = this.materializedSubqueries[index];\n \t\t\t\t\t}"
            },
            {
                "sha": "d01a2c9be9451b0ed684d4570313ebba2e0c09c1",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "status": "modified",
                "additions": 51,
                "deletions": 4,
                "changes": 55,
                "blob_url": "https://github.com/apache/derby/blob/05b022f3e5e341b4f695d93f74e74962ea89dee0/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "raw_url": "https://github.com/apache/derby/raw/05b022f3e5e341b4f695d93f74e74962ea89dee0/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java?ref=05b022f3e5e341b4f695d93f74e74962ea89dee0",
                "patch": "@@ -58,6 +58,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private static final String NO_TABLE_PERMISSION = \"42500\";\n     private static final String USER_EXCEPTION = \"38000\";\n     private static final String JAVA_EXCEPTION = \"XJ001\";\n+    private static final String NOT_SINGLE_COLUMN = \"42X39\";\n+    private static final String NON_SCALAR_QUERY = \"21000\";\n \n     public TriggerWhenClauseTest(String name) {\n         super(name);\n@@ -209,17 +211,17 @@ public void testBasicSyntax() throws SQLException {\n     }\n \n     /**\n-     * A row trigger whose WHEN clause contains a subquery, could cause a\n-     * NullPointerException. This test case is disabled until the bug is fixed.\n+     * A row trigger whose WHEN clause contains a subquery, used to cause a\n+     * NullPointerException in some situations.\n      */\n-    public void xtestSubqueryInWhenClauseNPE() throws SQLException {\n+    public void testSubqueryInWhenClauseNPE() throws SQLException {\n         Statement s = createStatement();\n         s.execute(\"create table t1(x int)\");\n         s.execute(\"create table t2(x int)\");\n         s.execute(\"create trigger tr1 after insert on t1 for each row \"\n                 + \"when ((values true)) insert into t2 values 1\");\n \n-        // This statement results in a NullPointerException.\n+        // This statement used to result in a NullPointerException.\n         s.execute(\"insert into t1 values 1,2,3\");\n     }\n \n@@ -359,6 +361,15 @@ public void testIllegalWhenClauses() throws SQLException {\n                 \"create trigger tr after delete on t1 \"\n                 + \"when ((select true from sysibm.sysdummy where ibmreqd = ?)) \"\n                 + \"call int_proc(1)\");\n+\n+        // Subqueries in the WHEN clause must have a single column\n+        assertCompileError(NOT_SINGLE_COLUMN,\n+                \"create trigger tr no cascade before insert on t1 \"\n+                + \"when ((values (true, false))) call int_proc(1)\");\n+        assertCompileError(NOT_SINGLE_COLUMN,\n+                \"create trigger tr after update of x on t1 \"\n+                + \"when ((select tablename, schemaid from sys.systables)) \"\n+                + \"call int_proc(1)\");\n     }\n \n     /**\n@@ -743,4 +754,40 @@ public void testRuntimeException() throws SQLException {\n         JDBC.assertFullResultSet(s.executeQuery(\"select * from t2 order by x\"),\n                                  new String[][] {{\"1\"}, {\"2\"}, {\"3\"}});\n     }\n+\n+    /**\n+     * Test that scalar subqueries are allowed, and that non-scalar subqueries\n+     * result in exceptions when the trigger fires.\n+     */\n+    public void testScalarSubquery() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"create table t1(x int)\");\n+        s.execute(\"create table t2(x int)\");\n+        s.execute(\"create table t3(x int)\");\n+\n+        s.execute(\"insert into t3 values 0,1,2,2\");\n+\n+        s.execute(\"create trigger tr1 after insert on t1 \"\n+                + \"referencing new as new for each row \"\n+                + \"when ((select x > 0 from t3 where x = new.x)) \"\n+                + \"insert into t2 values 1\");\n+\n+        // Subquery returns no rows, so the trigger should not fire.\n+        s.execute(\"insert into t1 values 42\");\n+        assertTableRowCount(\"T2\", 0);\n+\n+        // Subquery returns a single value, which is false, so the trigger\n+        // should not fire.\n+        s.execute(\"insert into t1 values 0\");\n+        assertTableRowCount(\"T2\", 0);\n+\n+        // Subquery returns a single value, which is true, so the trigger\n+        // should fire.\n+        s.execute(\"insert into t1 values 1\");\n+        assertTableRowCount(\"T2\", 1);\n+\n+        // Subquery returns multiple values, so an error should be raised.\n+        assertStatementError(NON_SCALAR_QUERY, s, \"insert into t1 values 2\");\n+        assertTableRowCount(\"T2\", 1);\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/1966619e30575bd99c30783d153ae658cf6bb0bc",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/36f1be9027730352e34dbe2b7a81e3a02a6f9aa6",
        "message": "DERBY-5830: Make DoubleProperties.propertyNames() thread-safe\n\nDon't store the property values in the intermediate Hashtable as they\nare not needed. They may be null if the Properties instances are\nmodified after the recursive calls to Properties.propertyNames(), and\ntrying to store a null value in a Hashtable results in a\nNullPointerException, causing issues such as DERBY-4269.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1353852 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_108",
        "file": [
            {
                "sha": "3e84d73a9aab246445bc386e3db2f640c073b7d5",
                "filename": "java/engine/org/apache/derby/iapi/util/DoubleProperties.java",
                "status": "modified",
                "additions": 20,
                "deletions": 20,
                "changes": 40,
                "blob_url": "https://github.com/apache/derby/blob/1966619e30575bd99c30783d153ae658cf6bb0bc/java/engine/org/apache/derby/iapi/util/DoubleProperties.java",
                "raw_url": "https://github.com/apache/derby/raw/1966619e30575bd99c30783d153ae658cf6bb0bc/java/engine/org/apache/derby/iapi/util/DoubleProperties.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/util/DoubleProperties.java?ref=1966619e30575bd99c30783d153ae658cf6bb0bc",
                "patch": "@@ -21,8 +21,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n package org.apache.derby.iapi.util;\n \n-import java.util.Properties;\n+import java.util.Collections;\n import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.Properties;\n \n /**\n \tA properties object that links two independent\n@@ -31,7 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \tsecond. But any put() calls are always made directly to\n \tthe write object.\n \n-    Only the put(), keys() and getProperty() methods are supported\n+    Only the put(), propertyNames() and getProperty() methods are supported\n \tby this class.\n */\n \n@@ -60,23 +62,21 @@ public String getProperty(String key, String defaultValue) {\n \t}\n \n \tpublic Enumeration propertyNames() {\n-\n-\t\tProperties p = new Properties();\n-\n-\t\tif (write != null) {\n-\n-\t\t\tfor (Enumeration e = write.propertyNames(); e.hasMoreElements(); ) {\n-\t\t\t\tString key = (String) e.nextElement();\n-\t\t\t\tp.put(key, write.getProperty(key));\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (read != null) {\n-\t\t\tfor (Enumeration e = read.propertyNames(); e.hasMoreElements(); ) {\n-\t\t\t\tString key = (String) e.nextElement();\n-\t\t\t\tp.put(key, read.getProperty(key));\n-\t\t\t}\n-\t\t}\n-\t\treturn p.keys();\n+        HashSet names = new HashSet();\n+        addAllNames(write, names);\n+        addAllNames(read, names);\n+        return Collections.enumeration(names);\n \t}\n+\n+    /**\n+     * Add all property names in the Properties object {@code src} to the\n+     * HashSet {@code dest}.\n+     */\n+    private static void addAllNames(Properties src, HashSet dest) {\n+        if (src != null) {\n+            for (Enumeration e = src.propertyNames(); e.hasMoreElements(); ) {\n+                dest.add(e.nextElement());\n+            }\n+        }\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/063dd554d30bb6ef19425e10b91b86cf973cbd0d",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/61b02b72e27b874561a17bc74ff14870f170b216",
        "message": "DERBY-5614: NullPointerException with INSERT INTO [global temporary table] SELECT ... FROM [VTI]\n\nDisables bulk-insert for GTTs when selecting from a VTI.\nAdded a new test case.\nAdded SampleVTI, which is an incomplete (only supports a few getters) VTI\nintended for basic testing.\n\nPatch file: derby-5614-1b-disable_bulkinsert_gtt.diff\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1295085 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_109",
        "file": [
            {
                "sha": "478989190fd478a365592f416c691512a3f23090",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "status": "modified",
                "additions": 7,
                "deletions": 2,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/063dd554d30bb6ef19425e10b91b86cf973cbd0d/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "raw_url": "https://github.com/apache/derby/raw/063dd554d30bb6ef19425e10b91b86cf973cbd0d/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java?ref=063dd554d30bb6ef19425e10b91b86cf973cbd0d",
                "patch": "@@ -867,8 +867,13 @@ public void optimizeStatement() throws StandardException\n         //\n         HasTableFunctionVisitor tableFunctionVisitor = new HasTableFunctionVisitor();\n         this.accept( tableFunctionVisitor );\n-        if ( tableFunctionVisitor.hasNode() ) { requestBulkInsert(); }\n-\t}\n+        // DERBY-5614: See if the target is a global temporary table (GTT),\n+        // in which case we don't support bulk insert.\n+        if ( tableFunctionVisitor.hasNode() &&\n+                !isSessionSchema(targetTableDescriptor.getSchemaDescriptor())) {\n+            requestBulkInsert();\n+        }\n+    }\n \n     /**\n      * Request bulk insert optimization at run time."
            },
            {
                "sha": "f98799eb20bf75728611bb1df7d600340c57b819",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java",
                "status": "modified",
                "additions": 56,
                "deletions": 20,
                "changes": 76,
                "blob_url": "https://github.com/apache/derby/blob/063dd554d30bb6ef19425e10b91b86cf973cbd0d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java",
                "raw_url": "https://github.com/apache/derby/raw/063dd554d30bb6ef19425e10b91b86cf973cbd0d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java?ref=063dd554d30bb6ef19425e10b91b86cf973cbd0d",
                "patch": "@@ -30,6 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.sql.Connection;\n \n import junit.framework.Test;\n+import org.apache.derbyTesting.functionTests.util.SampleVTI;\n \n \n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n@@ -1163,6 +1164,50 @@ public void testDMLRollback2() throws SQLException {\n         assertEquals(1, rs1.getInt(2));\n         assertUpdateCount(s , 0 , \"DROP TABLE SESSION.t2\");\n     }\n+\n+    /**\n+     * Tests that you can insert data into a GTT with a VTI as the source.\n+     * <p>\n+     * This used to fail because inserting from a VTI would trigger bulk insert,\n+     * but the bulk insert code path is not supported for GTT as the\n+     * destination of the insert.\n+     * <p>\n+     * See DERBY-5614.\n+     */\n+    public void testVtiInsertIntoGTT()\n+            throws SQLException {\n+        Statement s = createStatement();\n+        s.executeUpdate(\"DECLARE GLOBAL TEMPORARY TABLE SESSION.vtitogtt(\" +\n+                \"c1 varchar(10)) not logged on commit preserve rows\");\n+        // Use an empty VTI as the source.\n+        s.executeUpdate(\"CREATE FUNCTION emptySampleVTI() \" +\n+                \"RETURNS TABLE(v1 varchar(10))\" +\n+                \"LANGUAGE JAVA \" +\n+                \"PARAMETER STYLE DERBY_JDBC_RESULT_SET \" +\n+                \"NO SQL \" +\n+                \"EXTERNAL NAME 'org.apache.derbyTesting.functionTests.\" +\n+                \"util.SampleVTI.emptySampleVTI'\");\n+        s.executeUpdate(\"insert into session.vtitogtt \" +\n+                \"select * from table(emptySampleVTI()) as v\");\n+        JDBC.assertEmpty(s.executeQuery(\"select * from session.vtitogtt\"));\n+        s.executeUpdate(\"DROP FUNCTION emptySampleVTI\");\n+\n+        // Now try to actually insert some data.\n+        s.executeUpdate(\"CREATE FUNCTION sampleVTI() \" +\n+                \"RETURNS TABLE(v1 varchar(10))\" +\n+                \"LANGUAGE JAVA \" +\n+                \"PARAMETER STYLE DERBY_JDBC_RESULT_SET \" +\n+                \"NO SQL \" +\n+                \"EXTERNAL NAME 'org.apache.derbyTesting.functionTests.\" +\n+                \"util.SampleVTI.oneColSampleVTI'\");\n+        s.executeUpdate(\"insert into session.vtitogtt \" +\n+                \"select * from table(sampleVTI()) as v\");\n+        JDBC.assertUnorderedResultSet(\n+                s.executeQuery(\"select * from session.vtitogtt\"),\n+                SampleVTI.oneColSampleVTIData());\n+        s.executeUpdate(\"DROP FUNCTION sampleVTI\");\n+    }\n+\n     /**\n      * \n      * A Utility method that deletes all the SESSION schema tables before each fixture.\n@@ -1171,26 +1216,17 @@ public void testDMLRollback2() throws SQLException {\n      */\n     public void dropSchemaTables() throws SQLException {\n         Statement s = createStatement();\n-        try {\n-            s.executeUpdate(\"DROP TABLE SESSION.t1\");\n-        } catch (SQLException e) {\n-        }\n-        try {\n-            s.executeUpdate(\"DROP TABLE SESSION.t2\");\n-        } catch (SQLException e) {\n-        }\n-        try {\n-            s.executeUpdate(\"DROP TABLE SESSION.t3\");\n-        } catch (SQLException e) {\n-        }\n-        try {\n-            s.executeUpdate(\"DROP TABLE SESSION.t4\");\n-        } catch (SQLException e) {\n-        }\n-        try {\n-            s.executeUpdate(\"DROP TABLE SESSION.t5\");\n-        } catch (SQLException e) {\n+        // Query the meta data to avoid filling the log with lots of\n+        // table-not-found error messages.\n+        ResultSet rs = getConnection().getMetaData().getTables(\n+                null, \"SESSION\", \"%\", null);\n+        while (rs.next()) {\n+            try {\n+                s.executeUpdate(\"DROP TABLE \" + rs.getString(2) + \".\" +\n+                        rs.getString(3));\n+            } catch (SQLException e) {\n+            }\n         }\n+        rs.close();\n     }\n }\n-"
            },
            {
                "sha": "67db779ea515f21cb4f9ec3b25625cbc745536cc",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/util/SampleVTI.java",
                "status": "added",
                "additions": 285,
                "deletions": 0,
                "changes": 285,
                "blob_url": "https://github.com/apache/derby/blob/063dd554d30bb6ef19425e10b91b86cf973cbd0d/java/testing/org/apache/derbyTesting/functionTests/util/SampleVTI.java",
                "raw_url": "https://github.com/apache/derby/raw/063dd554d30bb6ef19425e10b91b86cf973cbd0d/java/testing/org/apache/derbyTesting/functionTests/util/SampleVTI.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/util/SampleVTI.java?ref=063dd554d30bb6ef19425e10b91b86cf973cbd0d",
                "patch": "@@ -0,0 +1,285 @@\n+/*\n+\n+   Derby - Class org.apache.derbyTesting.functionTests.util.SampleVTI\n+\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+ */\n+package org.apache.derbyTesting.functionTests.util;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+\n+import org.apache.derby.vti.VTITemplate;\n+\n+/**\n+ * A very simple, read-only, sample VTI.\n+ * <p>\n+ * This VTI is incomplete and has its quirks - it is intended for basic testing\n+ * only! Supported getters:\n+ * <ul> <li>getString</li>\n+ *      <li>getInt</li>\n+ * </ul>\n+ */\n+public class SampleVTI\n+    extends VTITemplate {\n+\n+    private static final String[][] oneColData = new String[][] {\n+            {\"one\"}, {\"two\"}, {\"three\"}, {\"four\"}, {\"five\"}\n+        };\n+\n+    /** Returns a sample VTI that is empty (has zero rows). */\n+    public static ResultSet emptySampleVTI() {\n+        return new SampleVTI(new String[0][0]);\n+    }\n+\n+    /**\n+     * Returns a sample VTI with the some test data.\n+     *\n+     *@return A result set with a single column with string data (five rows).\n+     */\n+    public static ResultSet oneColSampleVTI() {\n+        return new SampleVTI(oneColData);\n+    }\n+\n+    public static String[][] oneColSampleVTIData() {\n+        return (String[][])oneColData.clone();\n+    }\n+\n+    private final String[][] data;\n+    private final int rows;\n+    private final int cols;\n+    private int index = -1;\n+    private boolean wasNull;\n+    private boolean closed;\n+\n+    private SampleVTI(String[][] data) {\n+        this.data = data;\n+        this.rows = data.length;\n+        this.cols = rows == 0 ? 0 : data[0].length;\n+    }\n+\n+    private String getColumn(int columnIndex)\n+            throws SQLException {\n+        if (closed) {\n+            throw new SQLException(\"result set closed\");\n+        }\n+        if (columnIndex < 1 || columnIndex > cols) {\n+            throw new SQLException(\"column value out of range\");\n+        }\n+        String val = data[index][columnIndex -1];\n+        wasNull = val == null;\n+        return val;\n+    }\n+\n+    //@Override\n+    public ResultSetMetaData getMetaData() throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    //@Override\n+    public boolean next() throws SQLException {\n+        if (closed) {\n+            throw new SQLException(\"result set closed\");\n+        }\n+        return ++index < rows;\n+    }\n+\n+    //@Override\n+    public void close() throws SQLException {\n+        this.closed = true;\n+    }\n+\n+    //@Override\n+    public String getString(int columnIndex)\n+            throws SQLException {\n+        return getColumn(columnIndex);\n+    }\n+\n+    //@Override\n+    public int getInt(int columnIndex)\n+            throws SQLException {\n+        String raw = getColumn(columnIndex);\n+        if (wasNull) {\n+            raw = \"0\";\n+        }\n+        try {\n+            return Integer.parseInt(raw);\n+        } catch (NumberFormatException nfe) {\n+            throw new SQLException(\"cannot get value as int\");\n+        }\n+    }\n+\n+    //@Override\n+    public boolean wasNull() {\n+        return wasNull;\n+    }\n+\n+    public int getHoldability() throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public boolean isClosed() throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNString(int columnIndex, String nString) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNString(String columnLabel, String nString) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public String getNString(int columnIndex) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public String getNString(String columnLabel) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public Reader getNCharacterStream(int columnIndex) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public Reader getNCharacterStream(String columnLabel) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNCharacterStream(int columnIndex, Reader x, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateAsciiStream(int columnIndex, InputStream x, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBinaryStream(int columnIndex, InputStream x, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateCharacterStream(int columnIndex, Reader x, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateAsciiStream(String columnLabel, InputStream x, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBinaryStream(String columnLabel, InputStream x, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBlob(int columnIndex, InputStream inputStream, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBlob(String columnLabel, InputStream inputStream, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateClob(int columnIndex, Reader reader, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateClob(String columnLabel, Reader reader, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNClob(int columnIndex, Reader reader, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNClob(String columnLabel, Reader reader, long length) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNCharacterStream(int columnIndex, Reader x) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNCharacterStream(String columnLabel, Reader reader) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateAsciiStream(int columnIndex, InputStream x) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBinaryStream(int columnIndex, InputStream x) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateCharacterStream(int columnIndex, Reader x) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateAsciiStream(String columnLabel, InputStream x) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBinaryStream(String columnLabel, InputStream x) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateCharacterStream(String columnLabel, Reader reader) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBlob(int columnIndex, InputStream inputStream) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateBlob(String columnLabel, InputStream inputStream) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateClob(int columnIndex, Reader reader) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateClob(String columnLabel, Reader reader) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNClob(int columnIndex, Reader reader) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public void updateNClob(String columnLabel, Reader reader) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public Object getObject(int columnIndex, Class type) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    public Object getObject(String columnLabel, Class type) throws SQLException {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/a9ce08817be091aba7d5d542b60f291927303c8b",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/5825a32c736ea1bfaa8a0c1e34361bac4a65a028",
        "message": "DERBY-4410: NullPointerException when USING clause contains all columns in both join tables\n\nAdjust index properly when looping through the result columns and\nexpanding *. The old code didn't expect the number of columns to\ndecrease after the expansion and could therefore potentially skip\nthe processing of some of the columns.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@829034 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_110",
        "file": [
            {
                "sha": "033ffbe888d34a941b9e83c78614630295c03988",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "status": "modified",
                "additions": 10,
                "deletions": 0,
                "changes": 10,
                "blob_url": "https://github.com/apache/derby/blob/a9ce08817be091aba7d5d542b60f291927303c8b/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "raw_url": "https://github.com/apache/derby/raw/a9ce08817be091aba7d5d542b60f291927303c8b/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java?ref=a9ce08817be091aba7d5d542b60f291927303c8b",
                "patch": "@@ -1609,6 +1609,16 @@ public void expandAllsAndNameColumns(FromList fromList)\n \t\t\t\t\tinsertElementAt(allExpansion.elementAt(inner), index + inner);\n \t\t\t\t}\n \n+\t\t\t\t// Move the index position to account for the removals and the\n+\t\t\t\t// insertions. Should be positioned on the last column in the\n+\t\t\t\t// expansion to prevent double processing of the columns.\n+\t\t\t\t// DERBY-4410: If the expansion is empty, this will move the\n+\t\t\t\t// position one step back because the * was removed and nothing\n+\t\t\t\t// was inserted, so all columns to the right of the current\n+\t\t\t\t// position have been moved one position to the left. If we\n+\t\t\t\t// don't adjust the position, we end up skipping columns.\n+\t\t\t\tindex += (allExpansion.size() - 1);\n+\n \t\t\t\t// If the rc was a \"*\", we need to set the initial list size\n \t\t\t\t// to the number of columns that are actually returned to\n \t\t\t\t// the user."
            },
            {
                "sha": "1f22b2f6d57a2e5ffedc9eaaec71369239230f43",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/a9ce08817be091aba7d5d542b60f291927303c8b/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java",
                "raw_url": "https://github.com/apache/derby/raw/a9ce08817be091aba7d5d542b60f291927303c8b/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java?ref=a9ce08817be091aba7d5d542b60f291927303c8b",
                "patch": "@@ -652,5 +652,11 @@ public void testUsingClause() throws SQLException {\n                 \"select x.* from t1 x left join t1 y using (a,b,c)\");\n         assertStatementError(NO_COLUMNS, s,\n                 \"select x.* from t1 x right join t1 y using (a,b,c)\");\n+\n+        // DERBY-4410: If X.* expanded to no columns, the result column that\n+        // immediately followed it (Y.*) would not be expanded, which eventually\n+        // resulted in a NullPointerException.\n+        assertStatementError(NO_COLUMNS, s,\n+                \"select x.*, y.* from t1 x inner join t1 y using (a, b, c)\");\n     }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/bf9a1af0380e3fae3d70e16f1716d03c1b026b1f",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/6c3076f6e830a1cf446c72ab402506ee0589c68a",
        "message": "DERBY-2151: Fixer-upper utility to help convert ij canon tests to JUnit\n\nThis patch modifies SQLToJUnit.java so that it quietly skips entirely\nblank lines. Prior to this patch, such lines could cause SQLToJUnit to\nthrow a NullPointerException. An example of a canon with entirely\nblank lines is tests/lang/groupBy.sql.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@573432 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_111",
        "file": [
            {
                "sha": "2ddc143cb0626f277fa09ec0c650599dbfacf1ca",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/util/SQLToJUnit.java",
                "status": "modified",
                "additions": 9,
                "deletions": 1,
                "changes": 10,
                "blob_url": "https://github.com/apache/derby/blob/bf9a1af0380e3fae3d70e16f1716d03c1b026b1f/java/testing/org/apache/derbyTesting/functionTests/util/SQLToJUnit.java",
                "raw_url": "https://github.com/apache/derby/raw/bf9a1af0380e3fae3d70e16f1716d03c1b026b1f/java/testing/org/apache/derbyTesting/functionTests/util/SQLToJUnit.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/util/SQLToJUnit.java?ref=bf9a1af0380e3fae3d70e16f1716d03c1b026b1f",
                "patch": "@@ -1170,11 +1170,19 @@ private boolean getNextIjCommand(StringBuffer aLine)\n         \t}\n         \tint linetype;\n         \t\n+            // Skip entirely blank lines:\n+            while (nextline != null)\n+            {\n+                nextline = nextline.trim();\n+                if (nextline.length() == 0)\n+                    nextline = ijScript.readLine();\t\n+                else\n+                    break;\n+            }\n         \tif (nextline == null) {\n         \t\tc = -1;\n         \t\tbreak;\n         \t} else {\n-        \t\tnextline = nextline.trim();\n         \t\tlinetype = getLineType(nextline);\n         \t\t// multiple lines of SQL comments will be condensed in convert().\n         \t\t// If we are inside a result set, allow the first line of a command"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/5c572944df57c79b4fb935f824d187e97f3a82c3",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/b918c3822c663618b0783077329caaac6414762b",
        "message": "DERBY-2324 Fix ClosedObjectTest so as to not throw NullPointerExceptions on J2ME.\nCaused by returning the wrong suite when running in J2ME. Changed the baseSuite method\nso that the check is a positive one for the JDBC environment, which lead to clearer\ncode that fixed the bug.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@510140 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_112",
        "file": [
            {
                "sha": "1ec12677ef6f48ea3369e3e60c4edbd9e4afe731",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java",
                "status": "modified",
                "additions": 15,
                "deletions": 16,
                "changes": 31,
                "blob_url": "https://github.com/apache/derby/blob/5c572944df57c79b4fb935f824d187e97f3a82c3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java",
                "raw_url": "https://github.com/apache/derby/raw/5c572944df57c79b4fb935f824d187e97f3a82c3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java?ref=5c572944df57c79b4fb935f824d187e97f3a82c3",
                "patch": "@@ -132,23 +132,22 @@ private static Test baseSuite(String name)  {\n         topSuite.addTest(dsDecorator);\n         fillDataSourceSuite(dsSuite, dsDecorator);\n \n-        if (JDBC.vmSupportsJSR169()) {\n-            // JSR169 doesn't support ConnectionPoolDataSource and XADataSource\n-            return dsSuite;\n+        // JDBC 3 required for ConnectionPoolDataSource and XADataSource\n+        if (JDBC.vmSupportsJDBC3()) {\n+            \n+            TestSuite poolSuite = new TestSuite(\n+                    \"ClosedObjectTest ConnectionPoolDataSource\");\n+            PoolDataSourceDecorator poolDecorator =\n+                new PoolDataSourceDecorator(poolSuite);\n+            topSuite.addTest(poolDecorator);\n+            fillDataSourceSuite(poolSuite, poolDecorator);\n+    \n+            TestSuite xaSuite = new TestSuite(\"ClosedObjectTest XA\");\n+            XADataSourceDecorator xaDecorator = new XADataSourceDecorator(xaSuite);\n+            topSuite.addTest(xaDecorator);\n+            fillDataSourceSuite(xaSuite, xaDecorator);\n         }\n \n-        TestSuite poolSuite = new TestSuite(\n-                \"ClosedObjectTest ConnectionPoolDataSource\");\n-        PoolDataSourceDecorator poolDecorator =\n-            new PoolDataSourceDecorator(poolSuite);\n-        topSuite.addTest(poolDecorator);\n-        fillDataSourceSuite(poolSuite, poolDecorator);\n-\n-        TestSuite xaSuite = new TestSuite(\"ClosedObjectTest XA\");\n-        XADataSourceDecorator xaDecorator = new XADataSourceDecorator(xaSuite);\n-        topSuite.addTest(xaDecorator);\n-        fillDataSourceSuite(xaSuite, xaDecorator);\n-\n         return topSuite;\n     }\n \n@@ -682,7 +681,7 @@ public DataSourceDecorator(Test test) {\n          * @exception SQLException if an error occurs\n          */\n         public final void setUp() throws SQLException {\n-            connection_ = newConnection();\n+             connection_ = newConnection();\n         }\n \n         /**"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/021d9ab1deaf2b5dd03da392be23076b6058dd68",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/85ac92f8a4d0079a7f064e27e3c6aced24454b85",
        "message": "DERBY-1089: NPE inserting a join into a table with a generated column\nDERBY-2015: NPE in INSERT .. SELECT with IDENTITY column\n\nWhen an INSERT ... SELECT statement inserts a GENERATED ALWAYS identity\ncolumn, the identity column's column reference is NULL, since that\ncolumn does not have a corresponding column in the SELECT list. This\nNULL expression needs to be skipped over when remapping column references\nfrom the SELECT column list to the INSERT column list. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@478622 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_113",
        "file": [
            {
                "sha": "a485c122c19a4dc6830a5d99996cc733420abe3f",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "status": "modified",
                "additions": 8,
                "deletions": 1,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/021d9ab1deaf2b5dd03da392be23076b6058dd68/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "raw_url": "https://github.com/apache/derby/raw/021d9ab1deaf2b5dd03da392be23076b6058dd68/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java?ref=021d9ab1deaf2b5dd03da392be23076b6058dd68",
                "patch": "@@ -2868,7 +2868,14 @@ public void remapColumnReferencesToExpressions() throws StandardException\n \t\t{\n \t\t\tResultColumn rc = (ResultColumn) elementAt(index);\n \n-\t\t\trc.setExpression(rc.getExpression().remapColumnReferencesToExpressions());\n+\t\t\t// The expression may be null if this column is an identity\n+\t\t\t// column generated always. If the expression is not null, it\n+\t\t\t// is a ColumnReference; we call through to the ColumnReference\n+\t\t\t// to give it a chance to remap itself from the outer query\n+\t\t\t// node to this one.\n+\t\t\tif (rc.getExpression() != null)\n+\t\t\t\trc.setExpression(\n+\t\t\t\t\trc.getExpression().remapColumnReferencesToExpressions());\n \t\t}\n \t}\n "
            },
            {
                "sha": "6f8a990768e7f13ed16cf2ddaa4e864cd33571db",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/joins.out",
                "status": "modified",
                "additions": 24,
                "deletions": 0,
                "changes": 24,
                "blob_url": "https://github.com/apache/derby/blob/021d9ab1deaf2b5dd03da392be23076b6058dd68/java/testing/org/apache/derbyTesting/functionTests/master/joins.out",
                "raw_url": "https://github.com/apache/derby/raw/021d9ab1deaf2b5dd03da392be23076b6058dd68/java/testing/org/apache/derbyTesting/functionTests/master/joins.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/joins.out?ref=021d9ab1deaf2b5dd03da392be23076b6058dd68",
                "patch": "@@ -386,6 +386,26 @@ A1         |B1         |C1         |C3         |D1         |D3\n -----------------------------------------------------------------------\n 1          |1          |1          |1          |1          |2          \n 7          |7          |8          |9          |1          |3          \n+ij> -- JIRA 1089: demonstrate that a table with an identity column generated\n+-- always can be used as the target of an insert-as-select join:\n+create table j1089_source (source_id int);\n+0 rows inserted/updated/deleted\n+ij> insert into j1089_source values (0);\n+1 row inserted/updated/deleted\n+ij> create table j1089_dest (\n+    dest_id int not null primary key generated always as identity,\n+    source_id_1 int not null,\n+    source_id_2 int not null);\n+0 rows inserted/updated/deleted\n+ij> insert into j1089_dest (source_id_1, source_id_2)\n+    select s1.source_id, s2.source_id\n+        from j1089_source as s1\n+            join j1089_source as s2 on 1 = 1;\n+1 row inserted/updated/deleted\n+ij> select * from j1089_dest;\n+DEST_ID    |SOURCE_ID_1|SOURCE_ID_2\n+-----------------------------------\n+1          |0          |0          \n ij> -----------------------------------\n -- clean up\n ----------------------------------\n@@ -411,4 +431,8 @@ ij> drop table x;\n 0 rows inserted/updated/deleted\n ij> drop table y;\n 0 rows inserted/updated/deleted\n+ij> drop table j1089_source;\n+0 rows inserted/updated/deleted\n+ij> drop table j1089_dest;\n+0 rows inserted/updated/deleted\n ij> "
            },
            {
                "sha": "bff422c74aca665ec5555a7bab1e4fbce32ab345",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/joins.sql",
                "status": "modified",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/021d9ab1deaf2b5dd03da392be23076b6058dd68/java/testing/org/apache/derbyTesting/functionTests/tests/lang/joins.sql",
                "raw_url": "https://github.com/apache/derby/raw/021d9ab1deaf2b5dd03da392be23076b6058dd68/java/testing/org/apache/derbyTesting/functionTests/tests/lang/joins.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/joins.sql?ref=021d9ab1deaf2b5dd03da392be23076b6058dd68",
                "patch": "@@ -186,6 +186,21 @@ select a1,b1,c1,c3,d1,d3\n   from D join ((B join C on b2=c2) right outer join A on a1=b1) \n     on d3=b3 and d1=a2;\n \n+-- JIRA 1089: demonstrate that a table with an identity column generated\n+-- always can be used as the target of an insert-as-select join:\n+create table j1089_source (source_id int);\n+insert into j1089_source values (0);\n+create table j1089_dest (\n+    dest_id int not null primary key generated always as identity,\n+    source_id_1 int not null,\n+    source_id_2 int not null);\n+\n+insert into j1089_dest (source_id_1, source_id_2)\n+    select s1.source_id, s2.source_id\n+        from j1089_source as s1\n+            join j1089_source as s2 on 1 = 1;\n+select * from j1089_dest;\n+\n -----------------------------------\n -- clean up\n ----------------------------------\n@@ -200,3 +215,5 @@ drop table t4;\n drop table instab;\n drop table x;\n drop table y;\n+drop table j1089_source;\n+drop table j1089_dest;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/892eebf132dd88f2b9c968e014e6955020f1dfc1",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/6d73220051432c0021794b984aac8d8441375ffa",
        "message": "DERBY-4304\n\nDuring one of the server shutdown steps, DERBY-4306 was throwing a npe(we have fixed DERBY-4306 now) and the shutdown exception handling code was calling following method on that npe \n          consolePropertyMessage(\"DRDA_UnexpectedException.S\", exception.getMessage()); \n          consoleExceptionPrintTrace(exception); \nbut the call exception.getMessage() on npe was returning null and consolePropertyMessage is not written to handle null 2nd param for this call of consolePropertyMessage. But the work done by this particular type of consolePropertyMessage method is also done by the next call in the shutdown exception handling which is consoleExceptionPrintTrace. Because of this, I have replaced the consolePropertyMessage(\"DRDA_UnexpectedException.S\", exception.getMessage()); call with consolePropertyMessage(\"DRDA_UnexpectedException.S\", true); This change makes sure we do not run into npe when exception.getMessage() is null. I am not sure if we should enter a new jira entry to make consolePropertyMessage(\"DRDA_UnexpectedException.S\", exception.getMessage()); handle a null 2nd param. \n\njunit tests with this change ran into intermittent upgrade test failures. \n\nOne last step remaining is may be write a new method which is a subset of consolePropertyMessage because consolePropertyMessage handles the exception printing and then goes ahead and throws the exception again. For our purposes in this jira entry, we do not want the exception to be thrown back. instead, we want to move on to the next step in server shutdown. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@798347 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_114",
        "file": [
            {
                "sha": "bf2ea9e6c6b7aad99657ca961df79bee455396ab",
                "filename": "java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java",
                "status": "modified",
                "additions": 7,
                "deletions": 14,
                "changes": 21,
                "blob_url": "https://github.com/apache/derby/blob/892eebf132dd88f2b9c968e014e6955020f1dfc1/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java",
                "raw_url": "https://github.com/apache/derby/raw/892eebf132dd88f2b9c968e014e6955020f1dfc1/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java?ref=892eebf132dd88f2b9c968e014e6955020f1dfc1",
                "patch": "@@ -819,8 +819,7 @@ public Object run()  {\n                        }\n                     });\n         } catch (Exception exception) {\n-            consolePropertyMessage(\"DRDA_UnexpectedException.S\",\t\t\t\n-                exception.getMessage());\n+            consolePropertyMessage(\"DRDA_UnexpectedException.S\", true);\n             consoleExceptionPrintTrace(exception);\n         }\n \t\t\n@@ -832,8 +831,7 @@ public Object run()  {\n  \t\t\t\ttry {\n  \t\t\t\t\tsession.close();\n  \t\t\t\t} catch (Exception exception) {\n- \t\t\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\",\t\t\t\n- \t\t\t\t\t\t\texception.getMessage());\n+ \t\t\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\", true);\n  \t\t\t\t\tconsoleExceptionPrintTrace(exception);\n  \t\t\t\t}\n  \t\t\t}\n@@ -856,8 +854,7 @@ public Object run() {\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t});\n  \t\t\t\t} catch (Exception exception) {\n- \t\t\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\",\t\t\t\n- \t\t\t\t\t\t\texception.getMessage());\n+ \t\t\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\", true);\n  \t\t\t\t\tconsoleExceptionPrintTrace(exception);\n  \t\t\t\t}\n  \t\t\t}\n@@ -870,8 +867,7 @@ public Object run() {\n \t    }catch(IOException e){\n \t\t\tconsolePropertyMessage(\"DRDA_ListenerClose.S\", true);\n \t    } catch (Exception exception) {\n-\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\",\t\t\t\n-\t\t\t\t\texception.getMessage());\n+\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\", true);\n \t\t\tconsoleExceptionPrintTrace(exception);\n \t    }\n \n@@ -882,8 +878,7 @@ public Object run() {\n \t\t\t\trunQueue.notifyAll();\n \t\t\t}\t\n \t    } catch (Exception exception) {\n-\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\",\t\t\t\n-\t\t\t\t\texception.getMessage());\n+\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\", true);\n \t\t\tconsoleExceptionPrintTrace(exception);\n \t    }\n         \n@@ -892,8 +887,7 @@ public Object run() {\n \t        mgmtService.unregisterMBean(versionMBean);\n \t        mgmtService.unregisterMBean(networkServerMBean);\n \t    } catch (Exception exception) {\n-\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\",\t\t\t\n-\t\t\t\t\texception.getMessage());\n+\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\", true);\n \t\t\tconsoleExceptionPrintTrace(exception);\n \t    }\n \n@@ -925,8 +919,7 @@ public Object run() {\n \t\t\t\t\t\t\t\t\t\t   sqle.getMessage());\n \t\t\t\t}\n \t\t\t} catch (Exception exception) {\n-\t\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\",\t\t\t\n-\t\t\t\t\t\texception.getMessage());\n+\t\t\t\tconsolePropertyMessage(\"DRDA_UnexpectedException.S\", true);\n \t\t\t\tconsoleExceptionPrintTrace(exception);\n \t\t\t}\n \t\t}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/475f87e407b97c47b7e77290333d2187ed91c3b5",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/45ba22ff795534a5c9f165f31ac4433025785830",
        "message": "DERBY-2459: Ordering on a CASE expression causes NPE when using UNION\n\nWhen an order by clause involves a CASE-expression, in a situation when\ntwo or more select statements are combined in a union (or union all),\na NullPointerException is thrown.\n\nIn the original problem report, the CASE expression included qualified\ncolumn references:\n   CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END \nThis is invalid, because the \"t1\" and \"t2\" references are not applicable\nto the result of the UNION operator. So an error message should have been\nissued for the query from the DERBY-2459 description, due to the qualified\ncolumn references.\n\nHowever, with the current implementation, CASE expressions as a whole are\nnot allowed in the ORDER BY clause of a *UNION* select. CASE expressions seem\nto work correctly for a non-UNION select. I believe that Derby's current\nbehavior here is too restrictive; I think that there are valid CASE\nexpressions for a UNION select that *ought* to work (such as those which\nuse only unqualified column references to valid columns in the UNION's target\nlist), but the current implementation is lacking.\n\nFor the original query posted in the problem description, since the intent\nwas to order the results of the union by the second column in the union,\na column position expression can be used successfully: ORDER BY 2.\n\nThis patch causes Derby to issue a comprehensible error message which\nreflects reality accurately, as this is preferable to crashing with an NPE. \n\nThe patch also adds a number of additional ORDER BY test cases to the\nORDER BY test, demonstrating various query constructions, both those which\ncurrently work, and those which currently do not work.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@544532 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_115",
        "file": [
            {
                "sha": "7ed1eb2a12fa8e9dce6870f6c8f84172555bc160",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/475f87e407b97c47b7e77290333d2187ed91c3b5/java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java",
                "raw_url": "https://github.com/apache/derby/raw/475f87e407b97c47b7e77290333d2187ed91c3b5/java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java?ref=475f87e407b97c47b7e77290333d2187ed91c3b5",
                "patch": "@@ -185,6 +185,8 @@ public void bindOrderByColumn(ResultSetNode target, OrderByList oblist)\n                 SanityManager.ASSERT( addedColumnOffset >= 0,\n                                       \"Order by expression was not pulled into the result column list\");\n             resolveAddedColumn(target);\n+\t\tif (resultCol == null)\n+\t\t\tthrow StandardException.newException(SQLState.LANG_UNION_ORDER_BY);\n \t\t}\n \n \t\t// Verify that the column is orderable"
            },
            {
                "sha": "54817a33b8c2ed69a2438882d9e0575b58929767",
                "filename": "java/engine/org/apache/derby/loc/messages.xml",
                "status": "modified",
                "additions": 5,
                "deletions": 0,
                "changes": 5,
                "blob_url": "https://github.com/apache/derby/blob/475f87e407b97c47b7e77290333d2187ed91c3b5/java/engine/org/apache/derby/loc/messages.xml",
                "raw_url": "https://github.com/apache/derby/raw/475f87e407b97c47b7e77290333d2187ed91c3b5/java/engine/org/apache/derby/loc/messages.xml",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/loc/messages.xml?ref=475f87e407b97c47b7e77290333d2187ed91c3b5",
                "patch": "@@ -1173,6 +1173,11 @@ Guide.\n                 <arg>columnName</arg>\n             </msg>\n \n+            <msg>\n+                <name>42878</name>\n+                <text>The ORDER BY clause of a SELECT UNION statement only supports unqualified column references and column position numbers. Other expressions are not currently supported.</text>\n+            </msg>\n+\n             <msg>\n                 <name>42884</name>\n                 <text>No authorized routine named '{0}' of type '{1}' having compatible arguments was found.</text>"
            },
            {
                "sha": "64d74c3748e51f3e4e3e04477e8423e4e732f0d3",
                "filename": "java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/475f87e407b97c47b7e77290333d2187ed91c3b5/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "raw_url": "https://github.com/apache/derby/raw/475f87e407b97c47b7e77290333d2187ed91c3b5/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/shared/org/apache/derby/shared/common/reference/SQLState.java?ref=475f87e407b97c47b7e77290333d2187ed91c3b5",
                "patch": "@@ -855,6 +855,7 @@ The message identifier (ie. the value that matches a field in this class)\n \tString LANG_ORDER_BY_COLUMN_NOT_FOUND                              = \"42X78\";\n \tString LANG_DUPLICATE_COLUMN_FOR_ORDER_BY                          = \"42X79\";\n \tString LANG_QUALIFIED_COLUMN_NAME_NOT_ALLOWED                      = \"42877\";\n+        String LANG_UNION_ORDER_BY                                         = \"42878\";\n \tString LANG_EMPTY_VALUES_CLAUSE                                    = \"42X80\";\n \tString LANG_USING_CARDINALITY_VIOLATION                            = \"42X82\";\n \tString LANG_ADDING_COLUMN_WITH_NULL_AND_NOT_NULL_CONSTRAINT        = \"42X83\";"
            },
            {
                "sha": "bbcae7cf3cb96e08eac64a65f405ac1d6e988735",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/orderby.out",
                "status": "modified",
                "additions": 189,
                "deletions": 0,
                "changes": 189,
                "blob_url": "https://github.com/apache/derby/blob/475f87e407b97c47b7e77290333d2187ed91c3b5/java/testing/org/apache/derbyTesting/functionTests/master/orderby.out",
                "raw_url": "https://github.com/apache/derby/raw/475f87e407b97c47b7e77290333d2187ed91c3b5/java/testing/org/apache/derbyTesting/functionTests/master/orderby.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/orderby.out?ref=475f87e407b97c47b7e77290333d2187ed91c3b5",
                "patch": "@@ -1485,4 +1485,193 @@ ij> select * from derby1861 order by 2, a-2;\n A          |B          |C          |D          \n -----------------------------------------------\n 1          |2          |3          |4          \n+ij> -- Tests which verify the handling of expressions in the ORDER BY list\n+-- related to DERBY-2459. The issue in DERBY-2459 has to do with handling\n+-- of ORDER BY in the UNION case. The current Derby implementation has no\n+-- support for expressions in the ORDER BY clause of a UNION SELECT.\n+-- These test cases demonstrate some aspects of what works, and what doesn't.\n+\n+create table d2459_A1 ( id char(1) ,value int ,ref char(1));\n+0 rows inserted/updated/deleted\n+ij> create table d2459_A2 ( id char(1) ,value int ,ref char(1));\n+0 rows inserted/updated/deleted\n+ij> create table d2459_B1 ( id char(1) ,value int);\n+0 rows inserted/updated/deleted\n+ij> create table d2459_B2 ( id char(1) ,value int);\n+0 rows inserted/updated/deleted\n+ij> insert into d2459_A1 (id, value, ref) values ('b', 1, null);\n+1 row inserted/updated/deleted\n+ij> insert into d2459_A1 (id, value, ref) values ('a', 12, 'e');\n+1 row inserted/updated/deleted\n+ij> insert into d2459_A2 (id, value, ref) values ('c', 3, 'g');\n+1 row inserted/updated/deleted\n+ij> insert into d2459_A2 (id, value, ref) values ('d', 8, null);\n+1 row inserted/updated/deleted\n+ij> insert into d2459_B1 (id, value) values ('f', 2);\n+1 row inserted/updated/deleted\n+ij> insert into d2459_B1 (id, value) values ('e', 4);\n+1 row inserted/updated/deleted\n+ij> insert into d2459_B2 (id, value) values ('g', 5);\n+1 row inserted/updated/deleted\n+ij> -- Should work, as the order by expression is against a select, not a union:\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END ;\n+ID  |2          \n+----------------\n+c   |5          \n+d   |8          \n+ij> -- Should work, it's a simple column reference to the first column in UNION:\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A1 t1 left outer join d2459_B1 t2 ON t2.id = t1.ref\n+union all\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by id;\n+ID  |2          \n+----------------\n+a   |4          \n+b   |1          \n+c   |5          \n+d   |8          \n+ij> -- Should work, it's a column reference by position number\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A1 t1 left outer join d2459_B1 t2 ON t2.id = t1.ref\n+union all\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by 2;\n+ID  |2          \n+----------------\n+b   |1          \n+a   |4          \n+c   |5          \n+d   |8          \n+ij> -- should fail, because qualified column references can't refer to UNIONs\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A1 t1 left outer join d2459_B1 t2 ON t2.id = t1.ref\n+union all\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by t1.id;\n+ERROR 42877: A qualified column name 'T1.ID' is not allowed in the ORDER BY clause.\n+ij> -- should fail, because the union's results can't be referenced this way\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A1 t1 left outer join d2459_B1 t2 ON t2.id = t1.ref\n+union all\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END;\n+ERROR 42878: The ORDER BY clause of a SELECT UNION statement only supports unqualified column references and column position numbers. Other expressions are not currently supported.\n+ij> -- should fail, because this column is not in the result:\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A1 t1 left outer join d2459_B1 t2 ON t2.id = t1.ref\n+union all\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by value;\n+ERROR 42X78: Column 'VALUE' is not in the result of the query expression.\n+ij> -- ought to work, but currently fails, due to implementation restrictions:\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A1 t1 left outer join d2459_B1 t2 ON t2.id = t1.ref\n+union all\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by CASE WHEN id IS NOT NULL THEN id ELSE 2 END;\n+ERROR 42878: The ORDER BY clause of a SELECT UNION statement only supports unqualified column references and column position numbers. Other expressions are not currently supported.\n+ij> -- Also ought to work, but currently fails due to implementation restrictions:\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A1 t1 left outer join d2459_B1 t2 ON t2.id = t1.ref\n+union all\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by id || 'abc';\n+ERROR 42878: The ORDER BY clause of a SELECT UNION statement only supports unqualified column references and column position numbers. Other expressions are not currently supported.\n+ij> -- A number of simpler test cases investigating how the result set of the\n+-- UNION is constructed. If both children have identical result column names,\n+-- then the UNION result set's columns have the same names. Otherwise the\n+-- UNION result set's columns have generated names, and can only be\n+-- referred to by column position. Note als othat the matching of columns\n+-- for the result set of the UNION is done by column position, not by name\n+\n+select id from D2459_A1 union select ref from D2459_A2;\n+1   \n+----\n+a   \n+b   \n+g   \n+NULL\n+ij> select id from D2459_A1 union select ref from D2459_A2 order by id;\n+ERROR 42X78: Column 'ID' is not in the result of the query expression.\n+ij> select id from D2459_A1 union select ref from D2459_A2 order by 1;\n+1   \n+----\n+a   \n+b   \n+g   \n+NULL\n+ij> select id i from D2459_A1 union select ref i from D2459_A2 order by i;\n+I   \n+----\n+a   \n+b   \n+g   \n+NULL\n+ij> select id i from D2459_A1 union select ref j from D2459_A2;\n+1   \n+----\n+a   \n+b   \n+g   \n+NULL\n+ij> select id i from D2459_A1 union select ref j from D2459_A2 order by i;\n+ERROR 42X78: Column 'I' is not in the result of the query expression.\n+ij> select id i from D2459_A1 union select ref j from D2459_A2 order by 1;\n+1   \n+----\n+a   \n+b   \n+g   \n+NULL\n+ij> select id from D2459_A1 union select id from D2459_A2 order by D2459_A1.id;\n+ERROR 42877: A qualified column name 'D2459_A1.ID' is not allowed in the ORDER BY clause.\n+ij> select id from D2459_A1 union select id from D2459_A2 order by id||'abc';\n+ERROR 42878: The ORDER BY clause of a SELECT UNION statement only supports unqualified column references and column position numbers. Other expressions are not currently supported.\n+ij> select * from D2459_A1 union select id, value, ref from D2459_A2 order by value;\n+ID  |VALUE      |REF \n+---------------------\n+b   |1          |NULL\n+c   |3          |g   \n+d   |8          |NULL\n+a   |12         |e   \n+ij> select id, value, ref from D2459_A1 union select * from D2459_A2 order by 2;\n+ID  |VALUE      |REF \n+---------------------\n+b   |1          |NULL\n+c   |3          |g   \n+d   |8          |NULL\n+a   |12         |e   \n+ij> select id, id i from D2459_A1 union select id j, id from D2459_A2 order by id;\n+ERROR 42X78: Column 'ID' is not in the result of the query expression.\n+ij> select id, id i from D2459_A1 union select id j, id from D2459_A2 order by 2;\n+1   |2   \n+---------\n+a   |a   \n+b   |b   \n+c   |c   \n+d   |d   \n+ij> select id, ref from D2459_A1 union select ref, id from D2459_A2;\n+1   |2   \n+---------\n+a   |e   \n+b   |NULL\n+g   |c   \n+NULL|d   \n+ij> select id i, ref j from D2459_A1 union select ref i, id j from D2459_A2;\n+I   |J   \n+---------\n+a   |e   \n+b   |NULL\n+g   |c   \n+NULL|d   \n ij> \n\\ No newline at end of file"
            },
            {
                "sha": "76b5dca6386abeedd6efb4e214b96e1bc8b4afbe",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/orderby.sql",
                "status": "modified",
                "additions": 102,
                "deletions": 0,
                "changes": 102,
                "blob_url": "https://github.com/apache/derby/blob/475f87e407b97c47b7e77290333d2187ed91c3b5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/orderby.sql",
                "raw_url": "https://github.com/apache/derby/raw/475f87e407b97c47b7e77290333d2187ed91c3b5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/orderby.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/orderby.sql?ref=475f87e407b97c47b7e77290333d2187ed91c3b5",
                "patch": "@@ -534,3 +534,105 @@ select * from derby1861 order by c-1, c+1, a, b, c * 6;\n select t.*, t.c+2 from derby1861 t order by a, b, c+2;\n select * from derby1861 order by 3, 1;\n select * from derby1861 order by 2, a-2;\n+\n+-- Tests which verify the handling of expressions in the ORDER BY list\n+-- related to DERBY-2459. The issue in DERBY-2459 has to do with handling\n+-- of ORDER BY in the UNION case. The current Derby implementation has no\n+-- support for expressions in the ORDER BY clause of a UNION SELECT.\n+-- These test cases demonstrate some aspects of what works, and what doesn't.\n+\n+create table d2459_A1 ( id char(1) ,value int ,ref char(1));\n+create table d2459_A2 ( id char(1) ,value int ,ref char(1));\n+create table d2459_B1 ( id char(1) ,value int);\n+create table d2459_B2 ( id char(1) ,value int);\n+insert into d2459_A1 (id, value, ref) values ('b', 1, null);\n+insert into d2459_A1 (id, value, ref) values ('a', 12, 'e');\n+insert into d2459_A2 (id, value, ref) values ('c', 3, 'g');\n+insert into d2459_A2 (id, value, ref) values ('d', 8, null);\n+insert into d2459_B1 (id, value) values ('f', 2);\n+insert into d2459_B1 (id, value) values ('e', 4);\n+insert into d2459_B2 (id, value) values ('g', 5); \n+\n+-- Should work, as the order by expression is against a select, not a union:\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END ;\n+\n+-- Should work, it's a simple column reference to the first column in UNION:\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A1 t1 left outer join d2459_B1 t2 ON t2.id = t1.ref\n+union all\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by id;\n+\n+-- Should work, it's a column reference by position number\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A1 t1 left outer join d2459_B1 t2 ON t2.id = t1.ref\n+union all\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by 2;\n+\n+-- should fail, because qualified column references can't refer to UNIONs\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A1 t1 left outer join d2459_B1 t2 ON t2.id = t1.ref\n+union all\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by t1.id;\n+\n+-- should fail, because the union's results can't be referenced this way\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A1 t1 left outer join d2459_B1 t2 ON t2.id = t1.ref\n+union all\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END;\n+\n+-- should fail, because this column is not in the result:\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A1 t1 left outer join d2459_B1 t2 ON t2.id = t1.ref\n+union all\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by value;\n+\n+-- ought to work, but currently fails, due to implementation restrictions:\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A1 t1 left outer join d2459_B1 t2 ON t2.id = t1.ref\n+union all\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by CASE WHEN id IS NOT NULL THEN id ELSE 2 END;\n+\n+-- Also ought to work, but currently fails due to implementation restrictions:\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A1 t1 left outer join d2459_B1 t2 ON t2.id = t1.ref\n+union all\n+select t1.id, CASE WHEN t2.value IS NOT NULL THEN t2.value ELSE t1.value END\n+from d2459_A2 t1 left outer join d2459_B2 t2 ON t2.id = t1.ref\n+order by id || 'abc';\n+\n+-- A number of simpler test cases investigating how the result set of the\n+-- UNION is constructed. If both children have identical result column names,\n+-- then the UNION result set's columns have the same names. Otherwise the\n+-- UNION result set's columns have generated names, and can only be\n+-- referred to by column position. Note als othat the matching of columns\n+-- for the result set of the UNION is done by column position, not by name\n+\n+select id from D2459_A1 union select ref from D2459_A2;\n+select id from D2459_A1 union select ref from D2459_A2 order by id;\n+select id from D2459_A1 union select ref from D2459_A2 order by 1;\n+select id i from D2459_A1 union select ref i from D2459_A2 order by i;\n+select id i from D2459_A1 union select ref j from D2459_A2;\n+select id i from D2459_A1 union select ref j from D2459_A2 order by i;\n+select id i from D2459_A1 union select ref j from D2459_A2 order by 1;\n+select id from D2459_A1 union select id from D2459_A2 order by D2459_A1.id;\n+select id from D2459_A1 union select id from D2459_A2 order by id||'abc';\n+select * from D2459_A1 union select id, value, ref from D2459_A2 order by value;\n+select id, value, ref from D2459_A1 union select * from D2459_A2 order by 2;\n+select id, id i from D2459_A1 union select id j, id from D2459_A2 order by id;\n+select id, id i from D2459_A1 union select id j, id from D2459_A2 order by 2;\n+select id, ref from D2459_A1 union select ref, id from D2459_A2;\n+select id i, ref j from D2459_A1 union select ref i, id j from D2459_A2;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/8bef59d404c84b3288e6b86afb8328721ac31cf1",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/7af32f6954f0d94893a04fea8f78c74dd7057781",
        "message": "DERBY-6724: NPE if insert statement needs recompilation after having fired a trigger\n\nAllow InternalTriggerExecutionContext.cleanup() to be called more than once.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1622631 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_116",
        "file": [
            {
                "sha": "6449003523be0e4dff64c700f3c7440b62be8c70",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java",
                "status": "modified",
                "additions": 10,
                "deletions": 10,
                "changes": 20,
                "blob_url": "https://github.com/apache/derby/blob/8bef59d404c84b3288e6b86afb8328721ac31cf1/java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java",
                "raw_url": "https://github.com/apache/derby/raw/8bef59d404c84b3288e6b86afb8328721ac31cf1/java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java?ref=8bef59d404c84b3288e6b86afb8328721ac31cf1",
                "patch": "@@ -23,7 +23,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n import java.sql.ResultSet;\n import java.sql.SQLException;\n-import java.util.Enumeration;\n import java.util.Hashtable;\n import java.util.Map;\n import java.util.Vector;\n@@ -233,20 +232,21 @@ void clearTrigger() throws StandardException\n \tprotected void cleanup()\n \t\tthrows StandardException\n \t{\n-\t\tlcc.popTriggerExecutionContext(this);\n+        if (lcc != null) {\n+            lcc.popTriggerExecutionContext(this);\n+        }\n \n \t\t/*\n \t\t** Explicitly close all result sets that we have\n \t\t** given out to the user.  \n \t \t*/\n-\t\tfor (Enumeration<java.sql.ResultSet> e = resultSetVector.elements();\n-\t\t\t e.hasMoreElements(); )\n-\t\t{\n-\t\t\tjava.sql.ResultSet rs = e.nextElement();\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\trs.close();\n-\t\t\t} catch (SQLException se) {}\n+        if (resultSetVector != null) {\n+            for (ResultSet rs : resultSetVector) {\n+                try {\n+                    rs.close();\n+                } catch (SQLException se) {\n+                }\n+            }\n \t\t}\n \t\tresultSetVector = null;\n \t"
            },
            {
                "sha": "8cec2c9fe4a64467a6a1fe3191f9b98236a14df0",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java",
                "status": "modified",
                "additions": 35,
                "deletions": 1,
                "changes": 36,
                "blob_url": "https://github.com/apache/derby/blob/8bef59d404c84b3288e6b86afb8328721ac31cf1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java",
                "raw_url": "https://github.com/apache/derby/raw/8bef59d404c84b3288e6b86afb8328721ac31cf1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java?ref=8bef59d404c84b3288e6b86afb8328721ac31cf1",
                "patch": "@@ -41,6 +41,14 @@\n  * execution.\n  */\n public class StalePlansTest extends BaseJDBCTestCase {\n+    /**\n+     * The value of derby.language.stalePlanCheckInterval to use in this\n+     * test. The default value is 100, but we use 10 to reduce the number\n+     * of times the test has to execute statements to get to the desired\n+     * state.\n+     */\n+    private static final int STALE_PLAN_CHECK_INTERVAL = 10;\n+\n     public StalePlansTest(String name) {\n         super(name);\n     }\n@@ -53,7 +61,8 @@ public static Test suite() {\n         Properties props = new Properties();\n         // Check for stale plans on every 10th execution (default 100) to\n         // reduce the number of times we need to execute each statement.\n-        props.setProperty(\"derby.language.stalePlanCheckInterval\", \"10\");\n+        props.setProperty(\"derby.language.stalePlanCheckInterval\",\n+                          String.valueOf(STALE_PLAN_CHECK_INTERVAL));\n         // Disable the index statistics daemon so that it doesn't cause\n         // recompilation of statements at random times.\n         props.setProperty(\"derby.storage.indexStats.auto\", \"false\");\n@@ -299,4 +308,29 @@ public void testStalePlansOnLargeTable() throws SQLException {\n         insert2.close();\n         ps.close();\n     }\n+\n+    /**\n+     * Regression test case for DERBY-6724, where an INSERT statement would\n+     * fail with a NullPointerException if it had fired a trigger, and it\n+     * was detected during execution that the statement plan was stale and\n+     * had to be recompiled.\n+     */\n+    public void testDerby6724() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"create table d6724_t(x int)\");\n+        s.execute(\"create trigger d6724_tr after insert on d6724_t values 1\");\n+        s.execute(\"insert into d6724_t values 1\");\n+\n+        // Before DERBY-6724 this statement would fail with an NPE in the\n+        // (STALE_PLAN_CHECK_INTERVAL+1)'th execution.\n+        PreparedStatement ps = prepareStatement(\n+                \"insert into d6724_t select * from d6724_t\");\n+        for (int i = 0; i < STALE_PLAN_CHECK_INTERVAL + 1; i++) {\n+            // Execute the statement and verify that the correct number of\n+            // rows are inserted. The number doubles for each execution.\n+            assertUpdateCount(ps, 1 << i);\n+        }\n+\n+        rollback();\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/87c74010813e4c18f87142af426caefd684e9be8",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/d6aaec931465ec4c8849d9170a5608b3fc40ab3a",
        "message": "DERBY-5003 NPE in ReplicationRun_Local_3_p5 when stopping slave after purposefully crashing master\n\nPatch to collect diagnostics (sane jars only): derby-5003-diagnostics.diff\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1617484 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_117",
        "file": [
            {
                "sha": "443fd44575fd53dc288a1b515179be2589993583",
                "filename": "java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java",
                "status": "modified",
                "additions": 84,
                "deletions": 0,
                "changes": 84,
                "blob_url": "https://github.com/apache/derby/blob/87c74010813e4c18f87142af426caefd684e9be8/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java",
                "raw_url": "https://github.com/apache/derby/raw/87c74010813e4c18f87142af426caefd684e9be8/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java?ref=87c74010813e4c18f87142af426caefd684e9be8",
                "patch": "@@ -4109,6 +4109,12 @@ protected void flush(long fileNumber, long wherePosition) throws StandardExcepti\n                     ioe,\n                     getLogFileName(logFileNumber).getPath()));\n \t\t\t}\n+            catch (NullPointerException e) {\n+                if (SanityManager.DEBUG) {\n+                    SanityManager.DEBUG_PRINT(\"DERBY-5003 [1]:\", this.toString());\n+                }\n+                throw e;\n+            }\n \t\t} // unfreeze log manager to accept more log records\n \n \t\tboolean syncSuceed = false;\n@@ -4166,6 +4172,12 @@ protected void flush(long fileNumber, long wherePosition) throws StandardExcepti\n                 ioe,\n                 getLogFileName(logFileNumber).getPath()));\n \t\t}\n+        catch (NullPointerException e) {\n+            if (SanityManager.DEBUG) {\n+                SanityManager.DEBUG_PRINT(\"DERBY-5003 [2]\", this.toString());\n+            }\n+            throw e;\n+        }\n \t\tfinally\n \t\t{\n \t\t\tsynchronized(this)\n@@ -5870,4 +5882,76 @@ public final Object run() throws IOException, StandardException {\n \t\t\treturn null;\n \t\t}\n \t}\n+    \n+    @Override\n+    @SuppressWarnings(\"StringConcatenationInsideStringBufferAppend\")\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        if (SanityManager.DEBUG) { // to reduce footprint in insane code\n+            sb.append(\"LogToFile: [\\n\");\n+            sb.append(\"  logOut=\" + logOut + \"\\n\");\n+            sb.append(\"  dataDirectory=\" + dataDirectory + \"\\n\");\n+            sb.append(\"  logStorageFactory=\" + logStorageFactory + \"\\n\");\n+            sb.append(\"  logBeingFlushed=\" + logBeingFlushed + \"\\n\");\n+            sb.append(\"  firstLog=\" + firstLog + \"\\n\");\n+            sb.append(\"  endPosition=\" + endPosition + \"\\n\");\n+            sb.append(\"  lastFlush=\" + lastFlush + \"\\n\");\n+            sb.append(\"  logFileNumber=\" + logFileNumber + \"\\n\");\n+            sb.append(\"  bootTimeLogFileNumber=\" + bootTimeLogFileNumber + \"\\n\");\n+            sb.append(\"  firstLogFileNumber=\" + firstLogFileNumber + \"\\n\");\n+            sb.append(\"  maxLogFileNumber=\" + maxLogFileNumber + \"\\n\");\n+            sb.append(\"  currentCheckpoint=\" + currentCheckpoint + \"\\n\");\n+            sb.append(\"  checkpointInstant=\" + checkpointInstant + \"\\n\");\n+            sb.append(\"  currentCheckpoint=\" + currentCheckpoint + \"\\n\");\n+            sb.append(\"  checkpointDaemon=\" + checkpointDaemon + \"\\n\");\n+            sb.append(\"  myClientNumber=\" + myClientNumber + \"\\n\");\n+            sb.append(\"  checkpointDaemonCalled=\" + checkpointDaemonCalled + \"\\n\");\n+            sb.append(\"  logWrittenFromLastCheckPoint=\" + logWrittenFromLastCheckPoint + \"\\n\");\n+            sb.append(\"  rawStoreFactory=\" + rawStoreFactory + \"\\n\");\n+            sb.append(\"  dataFactory=\" + dataFactory + \"\\n\");\n+            sb.append(\"  ReadOnlyDB=\" + ReadOnlyDB + \"\\n\");\n+            sb.append(\"  masterFactory=\" + masterFactory + \"\\n\");\n+            sb.append(\"  inReplicationMasterMode=\" + inReplicationMasterMode + \"\\n\");\n+            sb.append(\"  inReplicationSlaveMode=\" + inReplicationSlaveMode + \"\\n\");\n+            sb.append(\"  replicationSlaveException=\" + replicationSlaveException + \"\\n\");\n+            sb.append(\"  inReplicationSlaveMode=\" + inReplicationSlaveMode + \"\\n\");\n+            sb.append(\"  replicationSlaveException=\" + replicationSlaveException + \"\\n\");\n+            sb.append(\"  inReplicationSlavePreMode=\" + inReplicationSlavePreMode + \"\\n\");\n+            sb.append(\"  replicationSlaveException=\" + replicationSlaveException + \"\\n\");\n+            sb.append(\"  slaveRecoveryMonitor=\" + slaveRecoveryMonitor + \"\\n\");\n+            sb.append(\"  allowedToReadFileNumber=\" + allowedToReadFileNumber + \"\\n\");\n+            sb.append(\"  slaveRecoveryMonitor=\" + slaveRecoveryMonitor + \"\\n\");\n+            sb.append(\"  keepAllLogs=\" + keepAllLogs + \"\\n\");\n+            sb.append(\"  databaseEncrypted=\" + databaseEncrypted + \"\\n\");\n+            sb.append(\"  keepAllLogs=\" + keepAllLogs + \"\\n\");\n+            sb.append(\"  recoveryNeeded=\" + recoveryNeeded + \"\\n\");\n+            sb.append(\"  inCheckpoint=\" + inCheckpoint + \"\\n\");\n+            sb.append(\"  inRedo=\" + inRedo + \"\\n\");\n+            sb.append(\"  inLogSwitch=\" + inLogSwitch + \"\\n\");\n+            sb.append(\"  stopped=\" + stopped + \"\\n\");\n+            sb.append(\"  logDevice=\" + logDevice + \"\\n\");\n+            sb.append(\"  logNotSynced=\" + logNotSynced + \"\\n\");\n+            sb.append(\"  logArchived=\" + logArchived + \"\\n\");\n+            sb.append(\"  logSwitchRequired=\" + logSwitchRequired + \"\\n\");\n+            sb.append(\"  test_logWritten=\" + test_logWritten + \"\\n\");\n+            sb.append(\"  test_numRecordToFillLog=\" + test_numRecordToFillLog + \"\\n\");\n+            sb.append(\"  mon_flushCalls=\" + mon_flushCalls + \"\\n\");\n+            sb.append(\"  mon_syncCalls=\" + mon_syncCalls + \"\\n\");\n+            sb.append(\"  mon_numLogFlushWaits=\" + mon_numLogFlushWaits + \"\\n\");\n+            sb.append(\"  mon_LogSyncStatistics=\" + mon_LogSyncStatistics + \"\\n\");\n+            sb.append(\"  corrupt=\" + corrupt + \"\\n\");\n+            sb.append(\"  isFrozen=\" + isFrozen + \"\\n\");\n+            sb.append(\"  jbmsVersion=\" + jbmsVersion + \"\\n\");\n+            sb.append(\"  onDiskMajorVersion=\" + onDiskMajorVersion + \"\\n\");\n+            sb.append(\"  onDiskMinorVersion=\" + onDiskMinorVersion + \"\\n\");\n+            sb.append(\"  onDiskBeta=\" + onDiskBeta + \"\\n\");\n+            sb.append(\"  checksum=\" + checksum + \"\\n\");\n+            sb.append(\"  onDiskBeta=\" + onDiskBeta + \"\\n\");\n+            sb.append(\"  isWriteSynced=\" + isWriteSynced + \"\\n\");\n+            sb.append(\"  jvmSyncErrorChecked=\" + jvmSyncErrorChecked + \"\\n\");\n+            sb.append(\"  logFileToBackup=\" + logFileToBackup + \"\\n\");\n+            sb.append(\"  backupInProgress=\" + backupInProgress + \"]\\n\");\n+        }\n+        return sb.toString();\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/ed8967c0b5de3bfaacf58d82272ad371571f1624",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/e9ac824113c436a74aa642fc4995071a6c4366cf",
        "message": "DERBY-6689 Assert failure/NPE when using ROW_NUMBER in MERGE ... INSERT\n\nPatch derby-6689. Adds checking for presence of window functions in\nthe matching clause nodes and throws 42ZC2 is that's the case. Adds a\ntest case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1616334 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_118",
        "file": [
            {
                "sha": "16838d8c5e60e07e1ead8285cdc7f06e59bc0aed",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/MergeNode.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/ed8967c0b5de3bfaacf58d82272ad371571f1624/java/engine/org/apache/derby/impl/sql/compile/MergeNode.java",
                "raw_url": "https://github.com/apache/derby/raw/ed8967c0b5de3bfaacf58d82272ad371571f1624/java/engine/org/apache/derby/impl/sql/compile/MergeNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/MergeNode.java?ref=ed8967c0b5de3bfaacf58d82272ad371571f1624",
                "patch": "@@ -385,6 +385,9 @@ public void bindStatement() throws StandardException\n             FromList    dummyFromList = cloneFromList( dd, dflTarget );\n             FromBaseTable   dummyTargetTable = (FromBaseTable) dummyFromList.elementAt( TARGET_TABLE_INDEX );\n             mcn.bind( dd, this, dummyFromList, dummyTargetTable );\n+\n+            // window function not allowed\n+            SelectNode.checkNoWindowFunctions(mcn, \"matching clause\");\n         }\n         \n         bindLeftJoin( dd );"
            },
            {
                "sha": "76492b51437feb267ae7ffeb989043e8f9942de4",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "status": "modified",
                "additions": 5,
                "deletions": 0,
                "changes": 5,
                "blob_url": "https://github.com/apache/derby/blob/ed8967c0b5de3bfaacf58d82272ad371571f1624/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "raw_url": "https://github.com/apache/derby/raw/ed8967c0b5de3bfaacf58d82272ad371571f1624/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java?ref=ed8967c0b5de3bfaacf58d82272ad371571f1624",
                "patch": "@@ -619,6 +619,11 @@ public void testBasicOperations()\n             \"select * from t3 where y = \" +\n                 \"    (select y from t3 order by row_number() over () fetch first row only)\"),\n             new String[][]{{\"0\"}});\n+\n+        // DERBY-6689: NPE before\n+        assertStatementError(LANG_WINDOW_FUNCTION_CONTEXT_ERROR,\n+            s,\n+            \"merge into t2 using t3 on (t2.x=t3.y) when not matched then insert values (row_number() over ())\");\n     }\n \n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/b08f4211aa72f8fa43cb04a12d0258f06e4b461f",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/f6df18497bba79b6e8d474c0a1b0b7a2a5b7ec69",
        "message": "DERBY-6663: NPE when a trigger tries to insert into a table with a foreign key\n\nMake sure FKInfo serializes its fkIds field so that the information is\navailable in stored prepared plans too.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1610711 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_119",
        "file": [
            {
                "sha": "12fa3c59c38c01f68bbd8417aa9bfcfc69845f41",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/FKInfo.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/b08f4211aa72f8fa43cb04a12d0258f06e4b461f/java/engine/org/apache/derby/impl/sql/execute/FKInfo.java",
                "raw_url": "https://github.com/apache/derby/raw/b08f4211aa72f8fa43cb04a12d0258f06e4b461f/java/engine/org/apache/derby/impl/sql/execute/FKInfo.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/FKInfo.java?ref=b08f4211aa72f8fa43cb04a12d0258f06e4b461f",
                "patch": "@@ -291,6 +291,7 @@ public void writeExternal(ObjectOutput out) throws IOException\n \t\tArrayUtil.writeIntArray(out, colArray);\n \t\tArrayUtil.writeIntArray(out, raRules);\n         ArrayUtil.writeBooleanArray(out, deferrable);\n+        ArrayUtil.writeArray(out, fkIds);\n \t}\n \n \t/**\n@@ -334,6 +335,8 @@ public void readExternal(ObjectInput in)\n \t\t\tcolArray = ArrayUtil.readIntArray(in);\n \t\t\traRules = ArrayUtil.readIntArray(in);\n             deferrable = ArrayUtil.readBooleanArray(in);\n+            fkIds = new UUID[ArrayUtil.readArrayLength(in)];\n+            ArrayUtil.readArrayItems(in, fkIds);\n \t\t}\n \t\tcatch (StandardException exception)\n \t\t{"
            },
            {
                "sha": "22ff332cdc265cc01c3898e94aa7fd0e0b52768b",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "status": "modified",
                "additions": 28,
                "deletions": 0,
                "changes": 28,
                "blob_url": "https://github.com/apache/derby/blob/b08f4211aa72f8fa43cb04a12d0258f06e4b461f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "raw_url": "https://github.com/apache/derby/raw/b08f4211aa72f8fa43cb04a12d0258f06e4b461f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java?ref=b08f4211aa72f8fa43cb04a12d0258f06e4b461f",
                "patch": "@@ -65,6 +65,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private static final String HAS_DEPENDENT_SPS = \"X0Y24\";\n     private static final String HAS_DEPENDENT_TRIGGER = \"X0Y25\";\n     private static final String TRIGGER_DROPPED = \"01502\";\n+    private static final String FOREIGN_KEY_VIOLATION = \"23503\";\n    \n     /**\n      * Thread local that a trigger can access to\n@@ -2545,4 +2546,31 @@ public void testQualifiedNamesInSystemTables() throws SQLException {\n         //s.execute(\"insert into t1 values (1,2,3)\");\n         s.execute(\"insert into tp_t1 values cast(null as tp)\");\n     }\n+\n+    /**\n+     * Regression test case for DERBY-6663 (NPE when a trigger tries to\n+     * insert into a table with a foreign key).\n+     */\n+    public void testDerby6663() throws SQLException {\n+        setAutoCommit(false);\n+        Statement s = createStatement();\n+        s.execute(\"create table d6663_t1(pk int primary key)\");\n+        s.execute(\"create table d6663_t2(x int references d6663_t1)\");\n+        s.execute(\"create table d6663_t3(y int)\");\n+        s.execute(\"create trigger d6663_tr after insert on d6663_t3 \"\n+                + \"referencing new as new for each row \"\n+                + \"insert into d6663_t2 values new.y\");\n+\n+        // Used to fail with NPE instead of foreign key violation.\n+        assertStatementError(\n+                FOREIGN_KEY_VIOLATION, s, \"insert into d6663_t3 values 1\");\n+\n+        // Verify that trigger executes successfully if there is no\n+        // foreign key violation.\n+        s.execute(\"insert into d6663_t1 values 1\");\n+        s.execute(\"insert into d6663_t3 values 1\");\n+        JDBC.assertSingleValueResultSet(\n+                s.executeQuery(\"select * from d6663_t2\"),\n+                \"1\");\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/35c061a65d9e20a7515a69812d63b673f4e207f2",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/23362a4374af7d970f6a3bb9b0867b08f5697f82",
        "message": "DERBY-6421: Cast to UDT in CHECK constraint causes NPE or assert failure\n\nDelay binding of target UDT in CastNode till bind time.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1548104 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_120",
        "file": [
            {
                "sha": "78f41b81e01570e914c10f07a553d3f145b5b5c7",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/CastNode.java",
                "status": "modified",
                "additions": 24,
                "deletions": 2,
                "changes": 26,
                "blob_url": "https://github.com/apache/derby/blob/35c061a65d9e20a7515a69812d63b673f4e207f2/java/engine/org/apache/derby/impl/sql/compile/CastNode.java",
                "raw_url": "https://github.com/apache/derby/raw/35c061a65d9e20a7515a69812d63b673f4e207f2/java/engine/org/apache/derby/impl/sql/compile/CastNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/CastNode.java?ref=35c061a65d9e20a7515a69812d63b673f4e207f2",
                "patch": "@@ -55,7 +55,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \tprivate int\t\t\t\t\ttargetCharType;\n \tTypeId\tsourceCTI = null;\n \tprivate boolean forDataTypeFunction = false;\n-    \n+\n+    /** The original, unbound descriptor for the target type, if it is a UDT. */\n+    private DataTypeDescriptor targetUDT;\n+\n     /** This variable gets set by the parser to indicate that this CAST node\n \t * has been generated by the parser. This means that we should use the \n      * collation info of the current compilation schema for this node's\n@@ -99,7 +102,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n              ContextManager cm) throws StandardException {\n         super(cm);\n         this.castOperand = castOperand;\n-        setType(castTarget);\n+\n+        // DERBY-6421: setType() tries to bind user defined types. We don't\n+        // want to do any binding here, since we could be called during\n+        // parsing. If the target type is a UDT, just store it for now and\n+        // do the binding later when bindExpression() or bindCastNodeOnly()\n+        // is called.\n+        if (castTarget.getTypeId().isUserDefinedTypeId()) {\n+            targetUDT = castTarget;\n+        } else {\n+            setType(castTarget);\n+        }\n \t}\n \n \t/**\n@@ -192,6 +205,11 @@ ValueNode bindExpression(FromList fromList, SubqueryList subqueryList, List<Aggr\n \t\t\t\t\t\t\t\tfromList, subqueryList,\n                                 aggregates);\n \n+        // Bind the target UDT.\n+        if (targetUDT != null) {\n+            setType(targetUDT);\n+        }\n+\n \t\tif (getTypeServices() == null)   //CHAR or VARCHAR function without specifying target length\n \t\t{\n \t\t\tDataTypeDescriptor opndType = castOperand.getTypeServices();\n@@ -355,6 +373,10 @@ else if (destJDBCTypeId == Types.CHAR)\n     void bindCastNodeOnly()\n \t\tthrows StandardException\n \t{\n+        // Bind the target UDT.\n+        if (targetUDT != null) {\n+            setType(targetUDT);\n+        }\n \n \t\t/*\n \t\t** The result type is always castTarget."
            },
            {
                "sha": "c1c48dc4036620580fd93f07071bf1e7ccf66f64",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java",
                "status": "modified",
                "additions": 21,
                "deletions": 1,
                "changes": 22,
                "blob_url": "https://github.com/apache/derby/blob/35c061a65d9e20a7515a69812d63b673f4e207f2/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java",
                "raw_url": "https://github.com/apache/derby/raw/35c061a65d9e20a7515a69812d63b673f4e207f2/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java?ref=35c061a65d9e20a7515a69812d63b673f4e207f2",
                "patch": "@@ -28,6 +28,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n import java.util.HashMap;\n \n import junit.framework.Test;\n@@ -48,7 +50,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     ///////////////////////////////////////////////////////////////////////////////////\n \n     public static final String OBJECT_EXISTS = \"X0Y68\";\n-    public static final String SYNTAX_ERROR = \"42X01\";\n     public static final String VIEW_DEPENDS_ON_TYPE = \"X0Y23\";\n     public static final String TRIGGER_DEPENDS_ON_TYPE = \"X0Y24\";\n \n@@ -1219,6 +1220,25 @@ public void test_17_outputParameters() throws Exception\n         assertEquals( \"[ 0, 0 ]\", obj.toString() );\n     }\n \n+    /**\n+     * Verify that you can cast a value to an UDT in a generation clause or\n+     * a CHECK constraint. Regression test case for DERBY-6421.\n+     */\n+    public void test_18_derby6421() throws SQLException {\n+        setAutoCommit(false);\n+\n+        Statement s = createStatement();\n+        s.execute(\"create type d6421_type external name 'java.util.ArrayList' \"\n+                + \"language java\");\n+        s.execute(\"create table d6421_table \"\n+                + \"(x generated always as (cast(null as d6421_type)), \"\n+                + \"check (cast(null as d6421_type) is null))\");\n+\n+        // This insert used to cause assert failure (in sane builds) or\n+        // NullPointerException (in insane builds).\n+        s.execute(\"insert into d6421_table values default\");\n+    }\n+\n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n     // PROCEDURES AND FUNCTIONS"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/b862050f562929ba2760f051fa984da04d2750c6",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/d76dd28c6619868e332d6eb1a511ba23e2b76014",
        "message": "DERBY-5317: Detect attempts to reuse a connection that in the middle of sending a request to the server. Use this to provide a better error message and avoid the NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1530704 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_121",
        "file": [
            {
                "sha": "76c0ae6c53864d6023486a3b18aa3c47c5cb5483",
                "filename": "java/client/org/apache/derby/client/am/Agent.java",
                "status": "modified",
                "additions": 4,
                "deletions": 5,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/Agent.java",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/Agent.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/Agent.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "patch": "@@ -267,9 +267,8 @@ final void disconnectEvent() {\n         }\n         connection_.completeChainBreakingDisconnect();\n     }\n-\n-    public void beginWriteChainOutsideUOW() throws SqlException {\n-    }\n+    \n+    abstract public void beginWriteChainOutsideUOW() throws SqlException;\n \n     public void beginWriteChain(ClientStatement statement) throws SqlException {\n         connection_.writeTransactionStart(statement);\n@@ -280,10 +279,10 @@ final void beginBatchedWriteChain(ClientStatement statement)\n         beginWriteChain(statement);\n     }\n \n-    protected void endWriteChain() {\n-    }\n+    abstract protected void endWriteChain();\n \n     private final void endBatchedWriteChain() {\n+        endWriteChain();\n     }\n \n     protected void beginReadChain(ClientStatement statement)"
            },
            {
                "sha": "a519137bceea8c828b0ed57e19ea2e145f38d3be",
                "filename": "java/client/org/apache/derby/client/am/BlobLocatorInputStream.java",
                "status": "modified",
                "additions": 4,
                "deletions": 3,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "patch": "@@ -179,9 +179,10 @@ public int read(byte[] b, int off, int len) throws IOException\n             currentPos += result.length;\n             return result;       \n         } catch (SqlException ex) {\n-            IOException ioEx = new IOException();\n-            ioEx.initCause(ex);\n-            throw ioEx;\n+            // Passing cause as ctor argument ensures that the IOException \n+            // inherits the cause's message, (unlike invoking initCause() on a \n+            // default-constructed IOException).\n+            throw new IOException(ex);\n         }\n     }\n "
            },
            {
                "sha": "0e135fc18ce83155f87e6a07a763755715eb289e",
                "filename": "java/client/org/apache/derby/client/am/ClobLocatorInputStream.java",
                "status": "modified",
                "additions": 4,
                "deletions": 3,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "patch": "@@ -153,9 +153,10 @@ public int read(byte[] b, int off, int len) throws IOException {\n             currentPos += result.length;\n             return result;\n         } catch (SqlException ex) {\n-            IOException ioEx = new IOException();\n-            ioEx.initCause(ex);\n-            throw ioEx;\n+            // Passing cause as ctor argument ensures that the IOException \n+            // inherits the cause's message, (unlike invoking initCause() on a \n+            // default-constructed IOException).\n+            throw new IOException(ex);\n         }\n     }\n "
            },
            {
                "sha": "48043870d1ecb6bdeb2af645ac74440d8e2f9a0f",
                "filename": "java/client/org/apache/derby/client/am/ClobLocatorReader.java",
                "status": "modified",
                "additions": 4,
                "deletions": 3,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/ClobLocatorReader.java",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/am/ClobLocatorReader.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/ClobLocatorReader.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "patch": "@@ -227,9 +227,10 @@ private void checkClosed() throws IOException {\n             currentPos += result.length;\n             return result;\n         } catch (SqlException ex) {\n-            IOException ioEx = new IOException();\n-            ioEx.initCause(ex);\n-            throw ioEx;\n+            // Passing cause as ctor argument ensures that the IOException \n+            // inherits the cause's message, (unlike invoking initCause() on a \n+            // default-constructed IOException).\n+            throw new IOException(ex);\n         }\n     }\n }"
            },
            {
                "sha": "108a4fa07d0ec6f093ece8b9709d65095a7fbe68",
                "filename": "java/client/org/apache/derby/client/net/NetAgent.java",
                "status": "modified",
                "additions": 35,
                "deletions": 10,
                "changes": 45,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/net/NetAgent.java",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/net/NetAgent.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/net/NetAgent.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "patch": "@@ -107,6 +107,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     SqlException exceptionOpeningSocket_ = null;\n     SqlException exceptionConvertingRdbnam = null;\n     \n+    /**\n+     * Flag which indicates that a writeChain has been started and data sent to\n+     * the server.\n+     * If true, starting a new write chain will throw a DisconnectException. \n+     * It is cleared when the write chain is ended.\n+     */\n+    private boolean writeChainIsDirty_ = false;\n     //---------------------constructors/finalizer---------------------------------\n \n     // Only used for testing\n@@ -462,23 +469,41 @@ private void writeDeferredResetConnection() throws SqlException {\n             throw de;\n         }\n     }\n-\n+    /**\n+     * Marks the agent's write chain as dirty. A write chain is dirty when data\n+     * from it has been sent to the server. A dirty write chain cannot be reset \n+     * and reused for another request until the remaining data has been sent to\n+     * the server and the write chain properly ended. \n+     * \n+     * Resetting a dirty chain will cause the new request to be appended to the \n+     * unfinished request already at the server, which will likely lead to \n+     * cryptic syntax errors.\n+     */\n+    void markWriteChainAsDirty() {    \n+        writeChainIsDirty_ = true;\n+    }\n+    \n+    private void verifyWriteChainIsClean() throws DisconnectException {\n+        if (writeChainIsDirty_) { \n+            throw new DisconnectException(this, \n+                new ClientMessageId(SQLState.NET_WRITE_CHAIN_IS_DIRTY));\n+        }\n+    }\n     public void beginWriteChainOutsideUOW() throws SqlException {\n+        verifyWriteChainIsClean();\n         request_.initialize();\n         writeDeferredResetConnection();\n-        super.beginWriteChainOutsideUOW();\n     }\n \n     public void beginWriteChain(ClientStatement statement) throws SqlException {\n+        verifyWriteChainIsClean();\n         request_.initialize();\n         writeDeferredResetConnection();\n         super.beginWriteChain(statement);\n     }\n \n-    protected void endWriteChain() {\n-        super.endWriteChain();\n-    }\n-\n+    protected void endWriteChain() {}\n+    \n     private void readDeferredResetConnection() throws SqlException {\n         if (!netConnection_.resetConnectionAtFirstSql_) {\n             return;\n@@ -496,19 +521,19 @@ private void readDeferredResetConnection() throws SqlException {\n \n     protected void beginReadChain(ClientStatement statement)\n             throws SqlException {\n+        // Clear here as endWriteChain may not always be called\n+        writeChainIsDirty_ = false;\n         readDeferredResetConnection();\n         super.beginReadChain(statement);\n     }\n \n     protected void beginReadChainOutsideUOW() throws SqlException {\n+        // Clear here as endWriteChain may not always be called\n+        writeChainIsDirty_ = false;\n         readDeferredResetConnection();\n         super.beginReadChainOutsideUOW();\n     }\n \n-    public void endReadChain() throws SqlException {\n-        super.endReadChain();\n-    }\n-\n     /**\n      * Switches the current CCSID manager to UTF-8\n      */"
            },
            {
                "sha": "e51b0e2fb682ae766f2c10ca54101c4bd24d352d",
                "filename": "java/client/org/apache/derby/client/net/Request.java",
                "status": "modified",
                "additions": 25,
                "deletions": 3,
                "changes": 28,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/net/Request.java",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/client/org/apache/derby/client/net/Request.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/net/Request.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "patch": "@@ -41,6 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.nio.CharBuffer;\n import java.nio.charset.Charset;\n import java.util.Hashtable;\n+import org.apache.derby.iapi.error.ExceptionUtil;\n \n \n class Request {\n@@ -315,16 +316,36 @@ final private void writePlainScalarStream(boolean chained,\n                 try {\n                     bytesRead =\n                         in.read(buffer.array(), buffer.position(), bytesToRead);\n-                } catch (Exception e) {\n+                } catch (IOException ioe) {\n+                    if (netAgent_.getOutputStream() == null) {\n+                        // The exception has taken down the connection, so we \n+                        // check if it was caused by attempting to \n+                        // read the stream from our own connection...\n+                        for (Throwable t = ioe; t != null; t = t.getCause()) {\n+                            if (t instanceof SqlException\n+                                    && ((SqlException) t).getSQLState().equals(ExceptionUtil.getSQLStateFromIdentifier(SQLState.NET_WRITE_CHAIN_IS_DIRTY))) {\n+                                throw new SqlException(netAgent_.logWriter_,\n+                                        new ClientMessageId(SQLState.NET_LOCATOR_STREAM_PARAMS_NOT_SUPPORTED),\n+                                        ioe, parameterIndex);\n+                            }\n+                        }\n+                        // Something else has killed the connection, fast forward to despair...\n+                        throw new SqlException(netAgent_.logWriter_,\n+                                new ClientMessageId(SQLState.NET_DISCONNECT_EXCEPTION_ON_READ),\n+                                ioe, parameterIndex, ioe.getMessage());\n+                    }\n+                    // The OutPutStream is still intact so try to finish request\n+                    // with what we managed to read\n+\n                     status = DRDAConstants.STREAM_READ_ERROR;\n                     padScalarStreamForError(leftToRead, bytesToRead,\n                             writeEXTDTAStatusByte, status);\n                     // set with SQLSTATE 01004: The value of a string was truncated when assigned to a host variable.\n                     netAgent_.accumulateReadException(\n-                        new SqlException(\n+                            new SqlException(\n                             netAgent_.logWriter_,\n                             new ClientMessageId(SQLState.NET_EXCEPTION_ON_READ),\n-                            e, parameterIndex, e.getMessage()));\n+                            ioe, parameterIndex, ioe.getMessage()));\n \n                     return;\n                 }\n@@ -1176,6 +1197,7 @@ protected void flush(OutputStream socketOutputStream) throws IOException {\n     private void sendBytes(OutputStream socketOutputStream)\n             throws IOException {\n         try {\n+            netAgent_.markWriteChainAsDirty();\n             socketOutputStream.write(buffer.array(), 0, buffer.position());\n             socketOutputStream.flush();\n         } finally {"
            },
            {
                "sha": "63494252d49a0294e053867967e7fb1742c9a438",
                "filename": "java/engine/org/apache/derby/loc/messages.xml",
                "status": "modified",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/engine/org/apache/derby/loc/messages.xml",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/engine/org/apache/derby/loc/messages.xml",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/loc/messages.xml?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "patch": "@@ -5263,6 +5263,23 @@ ln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-316\n                 <arg>targetClassName</arg>\n             </msg>\n \n+            <msg>\n+                <name>XN022.C</name>\n+                <text>A write chain that has transmitted data to the server cannot be reset until the request is finished and the chain terminated.</text>\n+            </msg>\n+            \n+            <msg>\n+                <name>XN023.C</name>\n+                <text>The stream specified by parameter #{0} is locator-based and requires a nested request on the same connection to be materialized. This is not supported.</text>\n+                <arg>number</arg>\n+            </msg>\n+            \n+            <msg>\n+                <name>XN024.C</name>\n+                <text>Encountered an exception which terminated the connection, while reading from the stream specified by parameter #{0}. The Exception had this message: '{1}'.</text>\n+                <arg>number</arg>\n+                <arg>messageText</arg>\n+            </msg>\n         </family>\n \n "
            },
            {
                "sha": "7a4f39d6f99de3b7e3199687e4df4f45180cac29",
                "filename": "java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/shared/org/apache/derby/shared/common/reference/SQLState.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "patch": "@@ -1630,6 +1630,9 @@ The message identifier (ie. the value that matches a field in this class)\n     String NET_XARETVAL_ERROR                                       = \"XN019.S\";\n     String NET_MARSHALLING_UDT_ERROR                     = \"XN020.S\";\n     String NET_UDT_COERCION_ERROR                               = \"XN021.S\";\n+    String NET_WRITE_CHAIN_IS_DIRTY                                 = \"XN022.C\";\n+    String NET_LOCATOR_STREAM_PARAMS_NOT_SUPPORTED                  = \"XN023.C\";\n+    String NET_DISCONNECT_EXCEPTION_ON_READ                         = \"XN024.C\";\n     \n     // XML - Derby-specific XML errors not covered by\n     // SQL standard."
            },
            {
                "sha": "5b90325b66dd29b9b692e7e8aa3896ed7638963d",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "patch": "@@ -201,6 +201,9 @@ public void test_errorcode() throws Exception\n         \t\t{\"XJ05B\",\"JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'.\",\"40000\"},\n         \t\t{\"XJ081\",\"Conflicting create/restore/recovery attributes specified.\",\"40000\"},\n         \t\t{\"XJ213\",\"The traceLevel connection property does not have a valid format for a number.\",\"40000\"},\n+        \t\t{\"XN022\",\"A write chain that has transmitted data to the server cannot be reset until the request is finished and the chain terminated.\",\"40000\"},\n+        \t\t{\"XN023\",\"The stream specified by parameter #{0} is locator-based and requires a nested request on the same connection to be materialized. This is not supported.\",\"40000\"},\n+        \t\t{\"XN024\",\"Encountered an exception which terminated the connection, while reading from the stream specified by parameter #{0}. The Exception had this message: '{1}'.\",\"40000\"},\n         \t\t{\"XRE20\",\"Failover performed successfully for database '{0}', the database has been shutdown.\",\"45000\"},\n         \t\t{\"XSDB0\",\"Unexpected exception on in-memory page {0}\",\"45000\"},\n         \t\t{\"XSDB1\",\"Unknown page format at page {0}\",\"45000\"},"
            },
            {
                "sha": "05f57adaa3d6f2e962b7d83b92bafee2cfbb0f9b",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java",
                "status": "modified",
                "additions": 16,
                "deletions": 12,
                "changes": 28,
                "blob_url": "https://github.com/apache/derby/blob/b862050f562929ba2760f051fa984da04d2750c6/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java",
                "raw_url": "https://github.com/apache/derby/raw/b862050f562929ba2760f051fa984da04d2750c6/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java?ref=b862050f562929ba2760f051fa984da04d2750c6",
                "patch": "@@ -1082,18 +1082,22 @@ private void selectUpdateClob(String testId,\n         long dlen = rs.getLong(2);\n         assertEquals(\"FAIL - MISMATCH LENGTHS GOT \" + l + \" expected \"\n                 + dlen + \" for row in CLOBTBL with ID=\" + id, dlen, l);\n-        // DERBY-5317 cannot use setCharacterStream with value from\n-        // Clob.getCharacterStream because server will try to stream\n-        // lob to and from server at the same time. setClob can be\n-        // used as a work around.\n-        if (!usingDerbyNetClient()) {\n-            PreparedStatement psUpd =\n-                    prepareStatement(\"update CLOBTBL set content=?, \" +\n-                            \"dlen =? where id = ?\");\n-            psUpd.setCharacterStream(1, value.getCharacterStream(), (int) l);\n-            psUpd.setLong(2, l);\n-            psUpd.setInt(3, updateId);\n-\n+                \n+        PreparedStatement psUpd =\n+                prepareStatement(\"update CLOBTBL set content=?, \"\n+                + \"dlen =? where id = ?\");\n+        psUpd.setCharacterStream(1, value.getCharacterStream(), (int) l);\n+        psUpd.setLong(2, l);\n+        psUpd.setInt(3, updateId);\n+        if (usingDerbyNetClient()) {\n+            // DERBY-5317 cannot use setCharacterStream with value from\n+            // Clob.getCharacterStream because server will try to stream\n+            // lob to and from server at the same time. setClob can be\n+            // used as a work around.\n+            // Verify that new error is thrown \n+            assertPreparedStatementError(\"XN023\", psUpd);\n+            return;\n+        } else {\n             assertUpdateCount(psUpd, 1);\n         }\n         commit();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/f74cf7a6a51653e960d845a1b5f6a43088589545",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/5ed54d8c0c2b8137b5afa7d0b393571e2ffb2f5d",
        "message": "DERBY-5530: SQLChar.getCollationKey NPE in index-stat-thread \n\nPropagate collation information to the new indexes on TRAUNCATE TABLE.\n\nPatch file: derby-5530-1a-propagate_collation_info.diff (trivially modified)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1243878 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_122",
        "file": [
            {
                "sha": "cdd6148675336a01179cefd5a1b13b7e886f45b9",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java",
                "status": "modified",
                "additions": 7,
                "deletions": 7,
                "changes": 14,
                "blob_url": "https://github.com/apache/derby/blob/f74cf7a6a51653e960d845a1b5f6a43088589545/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java",
                "raw_url": "https://github.com/apache/derby/raw/f74cf7a6a51653e960d845a1b5f6a43088589545/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java?ref=f74cf7a6a51653e960d845a1b5f6a43088589545",
                "patch": "@@ -86,7 +86,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.iapi.types.RowLocation;\n import org.apache.derby.iapi.util.IdUtil;\n import org.apache.derby.iapi.util.StringUtil;\n-import org.apache.derby.impl.sql.catalog.DDColumnDependableFinder;\n import org.apache.derby.impl.sql.compile.CollectNodesVisitor;\n import org.apache.derby.impl.sql.compile.ColumnDefinitionNode;\n import org.apache.derby.impl.sql.compile.ColumnReference;\n@@ -2367,9 +2366,10 @@ private void truncateTable()\n \n \t\t\tfor (int index = 0; index < numIndexes; index++)\n \t\t\t{\n+                IndexRowGenerator curIndex = compressIRGs[index];\n \t\t\t\t// create a single index row template for each index\n-\t\t\t\tindexRows[index] = compressIRGs[index].getIndexRowTemplate();\n-\t\t\t\tcompressIRGs[index].getIndexRow(emptyHeapRow, \n+                indexRows[index] = curIndex.getIndexRowTemplate();\n+                curIndex.getIndexRow(emptyHeapRow, \n \t\t\t\t\t\t\t\t\t\t\t  rl, \n \t\t\t\t\t\t\t\t\t\t\t  indexRows[index],\n \t\t\t\t\t\t\t\t\t\t\t  (FormatableBitSet) null);\n@@ -2378,15 +2378,15 @@ private void truncateTable()\n \t\t\t\t * No need to try to enforce uniqueness here as\n \t\t\t\t * index should be valid.\n \t\t\t\t */\n-\t\t\t\tint[] baseColumnPositions = \n-                    compressIRGs[index].baseColumnPositions();\n+                int[] baseColumnPositions = curIndex.baseColumnPositions();\n \n-\t\t\t\tboolean[] isAscending = compressIRGs[index].isAscending();\n+                boolean[] isAscending = curIndex.isAscending();\n \n \t\t\t\tint numColumnOrderings;\n \t\t\t\tnumColumnOrderings = baseColumnPositions.length + 1;\n \t\t\t\tordering[index]    = new ColumnOrdering[numColumnOrderings];\n-                collation[index]   = new int[baseColumnPositions.length + 1];\n+                collation[index]   = curIndex.getColumnCollationIds(\n+                                                td.getColumnDescriptorList());\n \n \t\t\t\tfor (int ii =0; ii < numColumnOrderings - 1; ii++) \n \t\t\t\t{"
            },
            {
                "sha": "1dca8693bacc49ad6787c4cfd96543ba73e9fac1",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java",
                "status": "modified",
                "additions": 35,
                "deletions": 0,
                "changes": 35,
                "blob_url": "https://github.com/apache/derby/blob/f74cf7a6a51653e960d845a1b5f6a43088589545/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java",
                "raw_url": "https://github.com/apache/derby/raw/f74cf7a6a51653e960d845a1b5f6a43088589545/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java?ref=f74cf7a6a51653e960d845a1b5f6a43088589545",
                "patch": "@@ -1827,6 +1827,39 @@ private void runDerby2670()\n         s.close();\n     }\n \n+    /**\n+     * Tests that truncating a table with indexes leaves us with a valid set\n+     * of conglomerates.\n+     */\n+    private void runDerby5530TruncateIndex()\n+            throws SQLException {\n+        setAutoCommit(false);\n+        Statement s = createStatement();\n+        s.executeUpdate(\"create table d5530i (val varchar(10))\");\n+        s.executeUpdate(\"create index idx on d5530i(val)\");\n+        s.executeUpdate(\"truncate table d5530i\");\n+        s.executeUpdate(\"insert into d5530i values 'one', 'two'\");\n+        ResultSet rs = s.executeQuery(\"select * from d5530i\");\n+        JDBC.assertUnorderedResultSet(rs, new String[][] {{\"one\"}, {\"two\"}});\n+        rollback();\n+    }\n+\n+    /**\n+     * Tests that truncating a table without indexes leaves us with a valid\n+     * conglomerate.\n+     */\n+    private void runDerby5530TruncateNoIndex()\n+            throws SQLException {\n+        setAutoCommit(false);\n+        Statement s = createStatement();\n+        s.executeUpdate(\"create table d5530 (val varchar(10))\");\n+        s.executeUpdate(\"truncate table d5530\");\n+        s.executeUpdate(\"insert into d5530 values 'one', 'two'\");\n+        ResultSet rs = s.executeQuery(\"select * from d5530\");\n+        JDBC.assertUnorderedResultSet(rs, new String[][] {{\"one\"}, {\"two\"}});\n+        rollback();\n+    }\n+\n     /**\n      * Shared code to run all test cases against a single collation.\n      * <p>\n@@ -1894,6 +1927,8 @@ private void runTestIter(\n \n         runLikeTests(db_index);\n \n+        runDerby5530TruncateNoIndex();\n+        runDerby5530TruncateIndex();\n \n         /*\n         TODO -MIKEM, this test does not work yet."
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/8f874691e1924f2c3c15c23bc8ef311e14f0d2b2",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/a5006ebcedc93d66e490bfb80ea337a7b534c8ac",
        "message": "DERBY-5390: NPE in BasicDatabase.stop in replication slave mode (dd.clearSequenceCaches)\n\nAdded check to see if the data dictionary is available.\n\nPatch file: derby-5390-1a_check_for_null.diff\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1164358 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_123",
        "file": [
            {
                "sha": "1c87ce5d9a5e777fc97934be262eb7e61dae33db",
                "filename": "java/engine/org/apache/derby/impl/db/BasicDatabase.java",
                "status": "modified",
                "additions": 10,
                "deletions": 7,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/8f874691e1924f2c3c15c23bc8ef311e14f0d2b2/java/engine/org/apache/derby/impl/db/BasicDatabase.java",
                "raw_url": "https://github.com/apache/derby/raw/8f874691e1924f2c3c15c23bc8ef311e14f0d2b2/java/engine/org/apache/derby/impl/db/BasicDatabase.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/db/BasicDatabase.java?ref=8f874691e1924f2c3c15c23bc8ef311e14f0d2b2",
                "patch": "@@ -241,13 +241,16 @@ public void boot(boolean create, Properties startParams)\n     }\n \n \tpublic void stop() {\n-        try {\n-            // on orderly shutdown, try not to leak unused numbers from the sequence generators.\n-            dd.clearSequenceCaches();\n-        }\n-        catch (Throwable t)\n-        {\n-            t.printStackTrace(Monitor.getStream().getPrintWriter());\n+        // The data dictionary is not available if this database has the\n+        // role as an active replication slave database.\n+        if (dd != null) {\n+            try {\n+                // on orderly shutdown, try not to leak unused numbers from\n+                // the sequence generators.\n+                dd.clearSequenceCaches();\n+            } catch (StandardException se) {\n+                se.printStackTrace(Monitor.getStream().getPrintWriter());\n+            }\n         }\n \t\tactive = false;\n \t}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/67790a0ed8acd00d35026e4bbbae8a454dbc252e",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/6f271b4bcca9f126632aee43c3e144061773c08d",
        "message": "DERBY-5256: Improve error reporting in common.sanity.AssertFailure \n\nAdded more specific error reporting, and fixed code that could result\nin an NPE under some circumstances.\n\nPatch file: derby-5256-1a-error_reporting.diff\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1130964 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_124",
        "file": [
            {
                "sha": "f23b88aa4d3727a2a66a7e49f17d197e81eaa653",
                "filename": "java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java",
                "status": "modified",
                "additions": 48,
                "deletions": 31,
                "changes": 79,
                "blob_url": "https://github.com/apache/derby/blob/67790a0ed8acd00d35026e4bbbae8a454dbc252e/java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java",
                "raw_url": "https://github.com/apache/derby/raw/67790a0ed8acd00d35026e4bbbae8a454dbc252e/java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java?ref=67790a0ed8acd00d35026e4bbbae8a454dbc252e",
                "patch": "@@ -126,6 +126,20 @@ public void printStackTrace(PrintWriter s) {\n         s.println(threadDump);\n     }\n \n+    /**\n+     * Tells if generating a thread dump is supported in the running JVM.\n+     */\n+    private boolean supportsThreadDump() {\n+        try {\n+            // This checks that we are on a jvm >= 1.5 where we\n+            // can actually do threaddumps.\n+            Thread.class.getMethod(\"getAllStackTraces\", new Class[] {});\n+            return true;\n+        } catch (NoSuchMethodException nsme) {\n+            // Ignore exception\n+        }\n+        return false;\n+    }\n \n     /**\n      * Dumps stack traces for all the threads if the JVM supports it.\n@@ -140,54 +154,57 @@ public void printStackTrace(PrintWriter s) {\n      */\n     private String dumpThreads() {\n \n+        if (!supportsThreadDump()) {\n+            return \"(Skipping thread dump because it is not \" +\n+                    \"supported on JVM 1.4)\";\n+        }\n+            \n+        // NOTE: No need to flush with the StringWriter/PrintWriter combination.\n         StringWriter out = new StringWriter();\n         PrintWriter p = new PrintWriter(out, true);\n \n-        //Try to get a thread dump and deal with various situations.\n+        // Load the class and method we need with reflection.\n+        final Method m;\n         try {\n-            //This checks that we are on a jvm >= 1.5 where we\n-            //can actually do threaddumps.\n-            Thread.class.getMethod(\"getAllStackTraces\", new Class[] {});\n-\n-            //Then get the thread dump.\n-            Class c = Class.\n-            forName(\"org.apache.derby.shared.common.sanity.ThreadDump\");\n-            final Method m = c.getMethod(\"getStackDumpString\",new Class[] {});\n-\n-            String dump;\n+            Class c = Class.forName(\n+                    \"org.apache.derby.shared.common.sanity.ThreadDump\");\n+            m = c.getMethod(\"getStackDumpString\", new Class[] {});\n+        } catch (Exception e) {\n+            p.println(\"Failed to load class/method required to generate \" +\n+                    \"a thread dump:\");\n+            e.printStackTrace(p);\n+            return out.toString();\n+        }\n \n-            dump = (String) AccessController.doPrivileged\n+        //Try to get a thread dump and deal with various situations.\n+        try {\n+            String dump = (String) AccessController.doPrivileged\n             (new PrivilegedExceptionAction(){\n                 public Object run() throws\n-                IllegalArgumentException,\n-                IllegalAccessException,\n-                InvocationTargetException{\n-                    return m.invoke(null, null);\n+                        IllegalArgumentException,\n+                        IllegalAccessException,\n+                        InvocationTargetException {\n+                    return m.invoke(null, (Object[])null);\n                 }\n             }\n             );\n \n             //Print the dump to the message string. That went OK.\n-            p.print(\"---------------\\nStack traces for all \" +\n-            \"live threads:\");\n+            p.print(\"---------------\\nStack traces for all live threads:\");\n             p.println(\"\\n\" + dump);\n             p.println(\"---------------\");\n-        } catch (NoSuchMethodException e) {\n-            p.println(\"(Skipping thread dump because it is not \" +\n-            \"supported on JVM 1.4)\");\n-\n-        } catch (Exception e) {\n-            if (e instanceof PrivilegedActionException &&\n-                e.getCause() instanceof InvocationTargetException &&\n-                e.getCause().getCause() instanceof AccessControlException){\n+        } catch (PrivilegedActionException pae) {\n+            Throwable cause = pae.getCause();\n+            if (cause instanceof InvocationTargetException &&\n+                cause.getCause() instanceof AccessControlException) {\n \n                 p.println(\"(Skipping thread dump \"\n-                        + \"because of insufficient permissions:\\n\"\n-                        + e.getCause().getCause() + \")\\n\");\n+                    + \"because of insufficient permissions:\\n\"\n+                    + cause.getCause() + \")\\n\");\n             } else {\n-                p.println(\"\\nAssertFailure tried to do a thread dump, but \"\n-                        + \"there was an error:\");\n-                e.getCause().printStackTrace(p);\n+                p.println(\"\\nAssertFailure tried to do a thread dump, \"\n+                    + \"but there was an error:\");\n+                cause.printStackTrace(p);\n             }\n         }\n         return out.toString();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/d9dd1e59ca68518bfe4b470b569de8e8588a22b4",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/ec6fcf1f3b93d7b9d350071632731d67cfe04508",
        "message": "DERBY-4798 NPE in nested outer join\n\nPatch derby-4798a.\n\nReintroduces the bailout code in BaseActivation#getColumnFromRow which\nwas removed in DERBY-3097 until we understand why it is needed. \n\nAdds the repro for this issue to OuterJoinTest\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@998170 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_125",
        "file": [
            {
                "sha": "656b7cd16a33a658d1f77d5ae9634c1c84df6d27",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java",
                "status": "modified",
                "additions": 17,
                "deletions": 1,
                "changes": 18,
                "blob_url": "https://github.com/apache/derby/blob/d9dd1e59ca68518bfe4b470b569de8e8588a22b4/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java",
                "raw_url": "https://github.com/apache/derby/raw/d9dd1e59ca68518bfe4b470b569de8e8588a22b4/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java?ref=d9dd1e59ca68518bfe4b470b569de8e8588a22b4",
                "patch": "@@ -1474,7 +1474,23 @@ public Activation getParentActivation() {\n \tprotected final DataValueDescriptor getColumnFromRow(int rsNumber, int colId)\n \t\tthrows StandardException {\n \n-\t\treturn row[rsNumber].getColumn(colId);\n+        if (row[rsNumber] == null) {\n+            /* This actually happens. NoPutResultSetImpl.clearOrderableCache\n+             * attempts to prefetch invariant values into a cache. This fails\n+             * in some deeply nested joins. See Beetle 4736 and 4880.*/\n+\n+            /*\n+             * Update: DERBY-4798 shows a query for which we get an NPE unless\n+             * this escape is in place (once removed by DERBY-3097, but\n+             * reintroduced by DERBY-4798 until we understand how we can get\n+             * rid of this anomaly). Thus, for now,\n+             * OuterJoinTest#testDerby_4798_NPE will provoke an NPE if this\n+             * code is removed.\n+             */\n+            return null;\n+        }\n+\n+        return row[rsNumber].getColumn(colId);\n \t}\n \n     /**"
            },
            {
                "sha": "58b7d638d848a546deb6422eceb2454b1d84500b",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java",
                "status": "modified",
                "additions": 117,
                "deletions": 1,
                "changes": 118,
                "blob_url": "https://github.com/apache/derby/blob/d9dd1e59ca68518bfe4b470b569de8e8588a22b4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java",
                "raw_url": "https://github.com/apache/derby/raw/d9dd1e59ca68518bfe4b470b569de8e8588a22b4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java?ref=d9dd1e59ca68518bfe4b470b569de8e8588a22b4",
                "patch": "@@ -35,7 +35,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;\n import org.apache.derbyTesting.junit.RuntimeStatisticsParser;\n import org.apache.derbyTesting.junit.TestConfiguration;\n-import org.apache.derby.iapi.services.sanity.SanityManager;\n \n public final class OuterJoinTest extends BaseJDBCTestCase\n {\n@@ -3379,4 +3378,121 @@ public void testDerby_4712_NPEs() throws Exception\n \n         JDBC.assertFullResultSet(rs, expRS);\n     }\n+\n+\n+    /**\n+     * Test the queries reported in DERBY-4798 as giving null pointer\n+     * exceptions. Should fail with NPE before the fix went in.\n+     */\n+    public void testDerby_4798_NPE() throws Exception\n+    {\n+        setAutoCommit(false);\n+\n+        Statement st = createStatement();\n+        ResultSet rs = null;\n+        String [][] expRS;\n+\n+        st.executeUpdate(\"create table t0(x0 int)\");\n+        st.executeUpdate(\"create table t1(x1 int)\");\n+        st.executeUpdate(\"create table t2(x2 int)\");\n+        st.executeUpdate(\"create table t3(x3 int)\");\n+        st.executeUpdate(\"create table t4(x4 int)\");\n+        st.executeUpdate(\"insert into t4 values(0)\");\n+        st.executeUpdate(\"insert into t4 values(1)\");\n+        st.executeUpdate(\"insert into t4 values(2)\");\n+        st.executeUpdate(\"insert into t4 values(3)\");\n+        st.executeUpdate(\"create table t5(x5 int)\");\n+        st.executeUpdate(\"insert into t5 values(0)\");\n+        st.executeUpdate(\"insert into t5 values(1)\");\n+        st.executeUpdate(\"insert into t5 values(2)\");\n+        st.executeUpdate(\"insert into t5 values(3)\");\n+        st.executeUpdate(\"insert into t5 values(4)\");\n+        st.executeUpdate(\"create table t6(x6 int)\");\n+        st.executeUpdate(\"insert into t6 values(0)\");\n+        st.executeUpdate(\"insert into t6 values(1)\");\n+        st.executeUpdate(\"insert into t6 values(2)\");\n+        st.executeUpdate(\"insert into t6 values(3)\");\n+        st.executeUpdate(\"insert into t6 values(4)\");\n+        st.executeUpdate(\"insert into t6 values(5)\");\n+        st.executeUpdate(\"create table t7(x7 int)\");\n+        st.executeUpdate(\"insert into t7 values(0)\");\n+        st.executeUpdate(\"insert into t7 values(1)\");\n+        st.executeUpdate(\"insert into t7 values(2)\");\n+        st.executeUpdate(\"insert into t7 values(3)\");\n+        st.executeUpdate(\"insert into t7 values(4)\");\n+        st.executeUpdate(\"insert into t7 values(5)\");\n+        st.executeUpdate(\"insert into t7 values(6)\");\n+        st.executeUpdate(\"insert into t0 values(1)\");\n+        st.executeUpdate(\"insert into t1 values(2)\");\n+        st.executeUpdate(\"insert into t0 values(3)\");\n+        st.executeUpdate(\"insert into t1 values(3)\");\n+        st.executeUpdate(\"insert into t2 values(4)\");\n+        st.executeUpdate(\"insert into t0 values(5)\");\n+        st.executeUpdate(\"insert into t2 values(5)\");\n+        st.executeUpdate(\"insert into t1 values(6)\");\n+        st.executeUpdate(\"insert into t2 values(6)\");\n+        st.executeUpdate(\"insert into t0 values(7)\");\n+        st.executeUpdate(\"insert into t1 values(7)\");\n+        st.executeUpdate(\"insert into t2 values(7)\");\n+        st.executeUpdate(\"insert into t3 values(8)\");\n+        st.executeUpdate(\"insert into t0 values(9)\");\n+        st.executeUpdate(\"insert into t3 values(9)\");\n+        st.executeUpdate(\"insert into t1 values(10)\");\n+        st.executeUpdate(\"insert into t3 values(10)\");\n+        st.executeUpdate(\"insert into t0 values(11)\");\n+        st.executeUpdate(\"insert into t1 values(11)\");\n+        st.executeUpdate(\"insert into t3 values(11)\");\n+        st.executeUpdate(\"insert into t2 values(12)\");\n+        st.executeUpdate(\"insert into t3 values(12)\");\n+        st.executeUpdate(\"insert into t0 values(13)\");\n+        st.executeUpdate(\"insert into t2 values(13)\");\n+        st.executeUpdate(\"insert into t3 values(13)\");\n+        st.executeUpdate(\"insert into t1 values(14)\");\n+        st.executeUpdate(\"insert into t2 values(14)\");\n+        st.executeUpdate(\"insert into t3 values(14)\");\n+        st.executeUpdate(\"insert into t0 values(15)\");\n+        st.executeUpdate(\"insert into t1 values(15)\");\n+        st.executeUpdate(\"insert into t2 values(15)\");\n+        st.executeUpdate(\"insert into t3 values(15)\");\n+\n+        rs = st.executeQuery(\n+        \"SELECT t0.x0, \" +\n+        \"       t1.x1,\" +\n+        \"       t2.x2,\" +\n+        \"       t3.x3,\" +\n+        \"       t4.x4,\" +\n+        \"       t5.x5,\" +\n+        \"       t6.x6,\" +\n+        \"       t7.x7 \" +\n+        \"FROM         \" +\n+        \" ((t0                                                               \" +\n+        \"   LEFT OUTER JOIN ((t1                                             \" +\n+        \"                     LEFT OUTER JOIN (t2                            \" +\n+        \"                                      LEFT OUTER JOIN t3            \" +\n+        \"                                        ON t2.x2 = t3.x3 )          \" +\n+        \"                       ON t1.x1 = t2.x2 )                           \" +\n+        \"                    LEFT OUTER JOIN (t4                             \" +\n+        \"                                     INNER JOIN (t5                 \" +\n+        \"                                                 LEFT OUTER JOIN t6 \" +\n+        \"                                                   ON t5.x5 = t6.x6)\" +\n+        \"                                       ON t4.x4 = t5.x5 )           \" +\n+        \"                      ON t1.x1 = t5.x5 )                            \" +\n+        \"     ON t0.x0 = t5.x5 )                                             \" +\n+        \"  LEFT OUTER JOIN t7                                                \" +\n+        \"    ON t3.x3 = t7.x7 )                                              \");\n+\n+        expRS = new String [][]\n+        {\n+            {\"1\", \"1\", null, null, null, null, null, null},\n+            {\"3\", \"3\", \"3\", null, \"3\", \"3\", \"3\", null},\n+            {\"5\", \"5\", null, null, null, null, null, null},\n+            {\"7\", \"7\", null, null, null, null, null, null},\n+            {\"9\", \"9\", null, null, null, null, null, null},\n+            {\"11\", \"11\", null, null, null, null, null, null},\n+            {\"13\", \"13\", null, null, null, null, null, null},\n+            {\"15\", \"15\", null, null, null, null, null, null}\n+        };\n+\n+        JDBC.assertFullResultSet(rs, expRS);\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/86c7780f00d4d02b92bef7594156ed15ddddce36",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/03028570afe50a94098295a22ab02a1482cc4dfb",
        "message": "DERBY-4549: NPE in JBitSet\n\nSubqueryNode did not preprocess its left operand, so some fields were\nnot initialized when the optimizer looked at it. This patch makes\nSubqueryNode.preprocess() call preprocess() recursively on the left\noperand.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@911315 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_126",
        "file": [
            {
                "sha": "958e73d3d3942cfecd01919a3b7e1d2bd47ec392",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/86c7780f00d4d02b92bef7594156ed15ddddce36/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java",
                "raw_url": "https://github.com/apache/derby/raw/86c7780f00d4d02b92bef7594156ed15ddddce36/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java?ref=86c7780f00d4d02b92bef7594156ed15ddddce36",
                "patch": "@@ -625,6 +625,12 @@ public ValueNode preprocess(int numTables,\n \n \t\tresultSet = resultSet.preprocess(numTables, null, (FromList) null);\n \n+        if (leftOperand != null)\n+        {\n+            leftOperand = leftOperand.preprocess(numTables,\n+                    outerFromList, outerSubqueryList, outerPredicateList);\n+        }\n+\n \t\t// Eliminate any unnecessary DISTINCTs\n \t\tif (resultSet instanceof SelectNode)\n \t\t{"
            },
            {
                "sha": "c35ac00d43bb34f6837c7cf8f140c4d7ab8a07cf",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/subquery.out",
                "status": "modified",
                "additions": 41,
                "deletions": 0,
                "changes": 41,
                "blob_url": "https://github.com/apache/derby/blob/86c7780f00d4d02b92bef7594156ed15ddddce36/java/testing/org/apache/derbyTesting/functionTests/master/subquery.out",
                "raw_url": "https://github.com/apache/derby/raw/86c7780f00d4d02b92bef7594156ed15ddddce36/java/testing/org/apache/derbyTesting/functionTests/master/subquery.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/subquery.out?ref=86c7780f00d4d02b92bef7594156ed15ddddce36",
                "patch": "@@ -1748,4 +1748,45 @@ ij> select * from t1 where exists (select * from (values null) as t2);\n ERROR 42X07: Null is only allowed in a VALUES clause within an INSERT statement.\n ij> drop table t1;\n 0 rows inserted/updated/deleted\n+ij> -- DERBY-4549: NPE in JBitSet\n+CREATE TABLE ABC (ID INT);\n+0 rows inserted/updated/deleted\n+ij> CREATE TABLE DEF (ID INT);\n+0 rows inserted/updated/deleted\n+ij> -- compilation of the statement used to fail with NPE\n+PREPARE PS AS 'SELECT * FROM ABC t1\n+WHERE (SELECT DISTINCT t2.ID FROM DEF t2) IN (SELECT t3.ID FROM DEF t3)';\n+ij> -- empty tables, empty result\n+EXECUTE PS;\n+ID         \n+-----------\n+ij> -- now, test with data in the tables\n+INSERT INTO ABC VALUES 1, 2;\n+2 rows inserted/updated/deleted\n+ij> EXECUTE PS;\n+ID         \n+-----------\n+ij> INSERT INTO DEF VALUES 2;\n+1 row inserted/updated/deleted\n+ij> EXECUTE PS;\n+ID         \n+-----------\n+1          \n+2          \n+ij> INSERT INTO DEF VALUES 2;\n+1 row inserted/updated/deleted\n+ij> EXECUTE PS;\n+ID         \n+-----------\n+1          \n+2          \n+ij> INSERT INTO DEF VALUES 3;\n+1 row inserted/updated/deleted\n+ij> -- will fail because left operand of IN is no longer scalar\n+EXECUTE PS;\n+ERROR 21000: Scalar subquery is only allowed to return a single row.\n+ij> DROP TABLE ABC;\n+0 rows inserted/updated/deleted\n+ij> DROP TABLE DEF;\n+0 rows inserted/updated/deleted\n ij> "
            },
            {
                "sha": "e5cb31240904ae6c43fcefb872156fbac8b1555a",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/subquery.sql",
                "status": "modified",
                "additions": 21,
                "deletions": 0,
                "changes": 21,
                "blob_url": "https://github.com/apache/derby/blob/86c7780f00d4d02b92bef7594156ed15ddddce36/java/testing/org/apache/derbyTesting/functionTests/tests/lang/subquery.sql",
                "raw_url": "https://github.com/apache/derby/raw/86c7780f00d4d02b92bef7594156ed15ddddce36/java/testing/org/apache/derbyTesting/functionTests/tests/lang/subquery.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/subquery.sql?ref=86c7780f00d4d02b92bef7594156ed15ddddce36",
                "patch": "@@ -583,3 +583,24 @@ select * from (values null) as t2;\n select * from t1 where exists (select 1 from (values null) as t2);\n select * from t1 where exists (select * from (values null) as t2);\n drop table t1;\n+\n+-- DERBY-4549: NPE in JBitSet\n+CREATE TABLE ABC (ID INT);\n+CREATE TABLE DEF (ID INT);\n+-- compilation of the statement used to fail with NPE\n+PREPARE PS AS 'SELECT * FROM ABC t1\n+WHERE (SELECT DISTINCT t2.ID FROM DEF t2) IN (SELECT t3.ID FROM DEF t3)';\n+-- empty tables, empty result\n+EXECUTE PS;\n+-- now, test with data in the tables\n+INSERT INTO ABC VALUES 1, 2;\n+EXECUTE PS;\n+INSERT INTO DEF VALUES 2;\n+EXECUTE PS;\n+INSERT INTO DEF VALUES 2;\n+EXECUTE PS;\n+INSERT INTO DEF VALUES 3;\n+-- will fail because left operand of IN is no longer scalar\n+EXECUTE PS;\n+DROP TABLE ABC;\n+DROP TABLE DEF;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/aa86a51fda8ec2cadd348531583c26de2db02302",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/b1a01b25b8c7a96d1f1a219ae304e6cc3079e379",
        "message": "DERBY-4435\n\ncollation[] object was not getting initialized and that was the cause of NPE. Fixed the problem by initializing the arrary correctly.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@834725 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_127",
        "file": [
            {
                "sha": "a69de70c3f6dd3649e88178fecd61e06b3ed69ed",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java",
                "status": "modified",
                "additions": 5,
                "deletions": 0,
                "changes": 5,
                "blob_url": "https://github.com/apache/derby/blob/aa86a51fda8ec2cadd348531583c26de2db02302/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/aa86a51fda8ec2cadd348531583c26de2db02302/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java?ref=aa86a51fda8ec2cadd348531583c26de2db02302",
                "patch": "@@ -2162,6 +2162,7 @@ private void emptyIndexes(long newHeapConglom,\n \t\tExecRow\t\t\t\tbaseRows = null;\n \t\tColumnOrdering[][]\tordering = new ColumnOrdering[numIndexes][];\n \t\tint\t\t\t\t\tnumColumns = td.getNumberOfColumns();\n+        collation       = new int[numIndexes][];\n \n \t\t// Create the BitSet for mapping the partial row to the full row\n \t\tFormatableBitSet bitSet = new FormatableBitSet(numColumns + 1);\n@@ -2341,6 +2342,10 @@ private void emptyIndexes(long newHeapConglom,\n \t\t\tproperties.put(\"nKeyFields\", Integer.toString(indexRowLength));\n \n \t\t\tindexCC.close();\n+\t\t\t\n+            collation[index] = \n+                constants.irgs[index].getColumnCollationIds(\n+                    td.getColumnDescriptorList());\n \n \t\t\t// We can finally drain the sorter and rebuild the index\n \t\t\t// Populate the index."
            },
            {
                "sha": "bfbf6f3b2471a4fb6869dc9e5dfe578524ee98ee",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java",
                "status": "modified",
                "additions": 20,
                "deletions": 1,
                "changes": 21,
                "blob_url": "https://github.com/apache/derby/blob/aa86a51fda8ec2cadd348531583c26de2db02302/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java",
                "raw_url": "https://github.com/apache/derby/raw/aa86a51fda8ec2cadd348531583c26de2db02302/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java?ref=aa86a51fda8ec2cadd348531583c26de2db02302",
                "patch": "@@ -737,6 +737,10 @@ private void setUpTable() throws SQLException\n             ps.executeUpdate();\n         }\n \n+        s.execute(\n+        \t\t\"CREATE TABLE EMPTY_TABLE (NAME VARCHAR(40))\");\n+        s.execute(\n+        \t\t\"CREATE INDEX EMPTY_TABLE_IDX ON EMPTY_TABLE(NAME)\");\n         commit();\n     }\n \n@@ -1128,6 +1132,7 @@ private void checkTwoPersistentCompare(\n     private void dropTable() throws SQLException \n     {\n         dropTable(\"CUSTOMER\");\n+        dropTable(\"EMPTY_TABLE\");\n     }\n \n     private void runQueries(\n@@ -1473,6 +1478,21 @@ private void runBulkInsert(\n \n         setUpTable();\n \n+        //DERBY-4435\n+        String emptyFileName =\n+            (SupportFilesSetup.getReadWrite(\"empty_file.dat\")).getPath();\n+        s.execute(\"DELETE FROM EMPTY_TABLE\");\n+        //there is no data in EMPTY_TABLE so empty_file.dat will be empty \n+        //after export\n+        doExportTable(\"APP\", \"EMPTY_TABLE\", emptyFileName, null, null, \"UTF-16\");\n+        commit();\n+        // bulk insert with replace to empty table/one index from an empty file \n+        // import empty_file.dat into EMPTY_TABLE \n+        doImportTable(\n+                \"APP\", \"EMPTY_TABLE\", emptyFileName, \"|\", \"``\", null, 1);\n+\n+        commit();\n+\n         // export CUSTOMER date to names.dat\n         String fileName =\n             (SupportFilesSetup.getReadWrite(\"names.dat\")).getPath();\n@@ -1481,7 +1501,6 @@ private void runBulkInsert(\n \n         commit();\n \n-\n         // bulk insert to empty table, no indexes without replace \n         // (last arg 0 = no replace).\n         s.execute(\"DELETE FROM CUSTOMER\");"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/9a428e437ad5611088cf502742a1f011bfecb053",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/d835c4041ae49dc5592cff66072dc9776ccda6b8",
        "message": "DERBY-2353: intermittent NPEs during DELETE ops in a reasonably large transaction\n\nWhen derby.language.logQueryPlan is true, don't try to print the query\nplan if the activation has been closed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@763900 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_128",
        "file": [
            {
                "sha": "e2727b6c1a380e3f2406289c3beaec963fdacbd1",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java",
                "status": "modified",
                "additions": 8,
                "deletions": 1,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/9a428e437ad5611088cf502742a1f011bfecb053/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java",
                "raw_url": "https://github.com/apache/derby/raw/9a428e437ad5611088cf502742a1f011bfecb053/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java?ref=9a428e437ad5611088cf502742a1f011bfecb053",
                "patch": "@@ -351,9 +351,16 @@ public void\tclose() throws StandardException\n \t\t\t** is on, then the run time statistics from the autocommit is the\n \t\t\t** only one that the user would ever see.  So, we don't overwrite\n \t\t\t** the run time statistics object for a commit.\n+            ** DERBY-2353: Also make an exception when the activation is\n+            ** closed. If the activation is closed, the run time statistics\n+            ** object is null and there's nothing to print. This may happen\n+            ** if a top-level result set closes the activation and close() is\n+            ** subsequently called on the child result sets. The information\n+            ** about the children is also printed by the parent, so it's safe\n+            ** to skip printing it.\n \t\t\t*/\n \t\t\tif (lcc.getRunTimeStatisticsMode() &&\n-\t\t\t\t! doesCommit())\n+\t\t\t\t!doesCommit() && !activation.isClosed())\n \t\t\t{\n \t\t\t\tendExecutionTime = getCurrentTimeMillis();\n "
            },
            {
                "sha": "de77f82de25c45c0bee42cca119deaa0fa8c7410",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/ReferentialActionsTest.java",
                "status": "added",
                "additions": 66,
                "deletions": 0,
                "changes": 66,
                "blob_url": "https://github.com/apache/derby/blob/9a428e437ad5611088cf502742a1f011bfecb053/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ReferentialActionsTest.java",
                "raw_url": "https://github.com/apache/derby/raw/9a428e437ad5611088cf502742a1f011bfecb053/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ReferentialActionsTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ReferentialActionsTest.java?ref=9a428e437ad5611088cf502742a1f011bfecb053",
                "patch": "@@ -0,0 +1,66 @@\n+/*\n+\n+   Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ReferentialActionsTest\n+\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to you under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+ */\n+\n+package org.apache.derbyTesting.functionTests.tests.lang;\n+\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;\n+\n+/**\n+ * This class tests SQL referential actions.\n+ */\n+public class ReferentialActionsTest extends BaseJDBCTestCase {\n+\n+    public ReferentialActionsTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(\"ReferentialActionsTest\");\n+\n+        // DERBY-2353: Need to set derby.language.logQueryPlan to expose the\n+        // bug (got a NullPointerException when writing the plan to derby.log)\n+        suite.addTest(DatabasePropertyTestSetup.singleProperty(\n+                new ReferentialActionsTest(\"onDeleteCascadeWithLogQueryPlan\"),\n+                \"derby.language.logQueryPlan\", \"true\", true));\n+\n+        return suite;\n+    }\n+\n+    /**\n+     * Test that cascading delete works when derby.language.logQueryPlan is\n+     * set to true - DERBY-2353.\n+     */\n+    public void onDeleteCascadeWithLogQueryPlan() throws SQLException {\n+        setAutoCommit(false);\n+        Statement s = createStatement();\n+        s.execute(\"create table a (a1 int primary key)\");\n+        s.execute(\"insert into a values 1\");\n+        s.execute(\"create table b (b1 int references a on delete cascade)\");\n+        s.execute(\"insert into b values 1\");\n+        // The next line used to cause a NullPointerException\n+        s.execute(\"delete from a\");\n+    }\n+}"
            },
            {
                "sha": "5e3c5e237fcebfb4fbaf8204e7b5619df219dcc5",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/9a428e437ad5611088cf502742a1f011bfecb053/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "raw_url": "https://github.com/apache/derby/raw/9a428e437ad5611088cf502742a1f011bfecb053/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java?ref=9a428e437ad5611088cf502742a1f011bfecb053",
                "patch": "@@ -70,6 +70,7 @@ public static Test suite() {\n \t\tsuite.addTest(LangScripts.suite());\n         suite.addTest(MathTrigFunctionsTest.suite());\n         suite.addTest(PrepareExecuteDDL.suite());\n+        suite.addTest(ReferentialActionsTest.suite());\n         suite.addTest(RolesTest.suite());\n         suite.addTest(RolesConferredPrivilegesTest.suite());\n         suite.addTest(SQLSessionContextTest.suite());"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/8d13a1f37b9bca1d5b160ba9a21be1103699b5a1",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/f9f83296a76f890dae83e69b35bce6852a0ef2f5",
        "message": "DERBY-3880 NPE on a query with having clause involving a join\n\nremap expression for AggregateNode operand if the JoinNode has been flattened.\n\nFix contributed by Army Brown\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@711321 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_129",
        "file": [
            {
                "sha": "0185f07eb9bf141ccfb6db592cf85315ecda5933",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "status": "modified",
                "additions": 21,
                "deletions": 0,
                "changes": 21,
                "blob_url": "https://github.com/apache/derby/blob/8d13a1f37b9bca1d5b160ba9a21be1103699b5a1/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "raw_url": "https://github.com/apache/derby/raw/8d13a1f37b9bca1d5b160ba9a21be1103699b5a1/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java?ref=8d13a1f37b9bca1d5b160ba9a21be1103699b5a1",
                "patch": "@@ -539,6 +539,27 @@ public ResultColumn\tgetNewExpressionResultColumn(DataDictionary\tdd)\n \t\t\tthis.getNewNullResultExpression() :\n \t\t\toperand;\n \n+\n+\t\t/* The operand for this aggregate node was initialized at bind\n+\t\t * time. Between then and now it's possible that certain changes\n+\t\t * have been made to the query tree which affect this operand. In\n+\t\t * particular, if the operand was pointing to a result column in\n+\t\t * a JoinNode and then that JoinNode was flattened during pre-\n+\t\t * processing, all of the references to that JoinNode--including\n+\t\t * this aggregate's operand--need to be updated to reflect the\n+\t\t * fact that the Join Node no longer exists. So check to see if\n+\t\t * the operand is a column reference, and if so, make a call to\n+\t\t * remap it to its underlying expression. If nothing has happened\n+\t\t * then this will be a no-op; but if something has changed to void\n+\t\t * out the result column to which the operand points, the result\n+\t\t * column will be marked \"redundant\" and the following call should\n+\t\t * remap as appropriate. DERBY-3880.\n+\t\t */\n+\t\tif (operand instanceof ColumnReference)\n+\t\t{\n+\t\t\t((ColumnReference)operand).remapColumnReferencesToExpressions();\n+\t\t}\n+\n \t\treturn (ResultColumn) getNodeFactory().getNode(\n \t\t\t\t\t\t\t\tC_NodeTypes.RESULT_COLUMN,\n \t\t\t\t\t\t\t\t\"##aggregate expression\","
            },
            {
                "sha": "4ac7a7d7f6d46dbc12298e705a79d4d8aae7f300",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "status": "modified",
                "additions": 20,
                "deletions": 0,
                "changes": 20,
                "blob_url": "https://github.com/apache/derby/blob/8d13a1f37b9bca1d5b160ba9a21be1103699b5a1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "raw_url": "https://github.com/apache/derby/raw/8d13a1f37b9bca1d5b160ba9a21be1103699b5a1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java?ref=8d13a1f37b9bca1d5b160ba9a21be1103699b5a1",
                "patch": "@@ -276,6 +276,16 @@ private static void createSchemaObjects(Statement st)\n \n       st.executeUpdate(\n     \t\t  \"insert into EMPTAB values( 1, 1000, 1 )\"); \n+\t\n+      // tables for DERBY-3880 testing\n+      st.executeUpdate(\"CREATE TABLE T1_D3880(i int, c varchar(20))\");\n+      st.executeUpdate(\"create table t2_D3880(i int, c2 varchar(20), i2 int)\");\n+      st.executeUpdate(\"insert into t1_D3880 values(1, 'abc')\");\n+      st.executeUpdate(\"insert into t1_D3880 values(2, 'abc')\");\n+      st.executeUpdate(\"insert into t2_D3880 values(1, 'xyz', 10)\");\n+      st.executeUpdate(\"insert into t2_D3880 values(1, 'aaa', 20)\");\n+      st.executeUpdate(\"insert into t2_D3880 values(2, 'xxx', 30)\");\n+      \n \t}\n \n \t/**\n@@ -1446,6 +1456,16 @@ public void testGroupByWithTempTable() throws SQLException {\n \t\tJDBC.assertEmpty(s.executeQuery(\"select orderID from session.ztemp group by orderID\"));\n \t}\n \n+\tpublic void testHavingWithInnerJoinDerby3880() throws SQLException {\n+\t\tStatement s = createStatement();\n+\t\tResultSet rs = s.executeQuery(\"select   t1_D3880.i, avg(t2_D3880.i2)  from t1_D3880 \" +\n+\t\t\t\t\"inner join t2_D3880 on (t1_D3880.i = t2_D3880.i) group by t1_D3880.i having \"  +\n+\t\t\t\t\t\t\"avg(t2_D3880.i2) > 0\");\n+\t\tString[][] expRs = new String[][] {{\"1\",\"15\"},{\"2\",\"30\"}};\n+\t\tJDBC.assertFullResultSet(rs,expRs);\n+\n+\t}\n+\t\n \t/**\n \t * DERBY-280: Wrong result from select when aliasing to same name as used\n \t * in group by"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/fb2cca3ab7176fc840d0d9372ca7ce46b55c180e",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/036a61fe60538007d16df830bdfe29d9d8a15d12",
        "message": "DERBY-3865 NPE in testSemantics(.....lang.RolesTest) on JavaME / CVM\n\nPatch derby-3865-2; RolesTest now skips a a test case for small devices platforms\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@702914 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_130",
        "file": [
            {
                "sha": "6be7c2a96e7d0808755a5e01307c678617ed58da",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/fb2cca3ab7176fc840d0d9372ca7ce46b55c180e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java",
                "raw_url": "https://github.com/apache/derby/raw/fb2cca3ab7176fc840d0d9372ca7ce46b55c180e/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java?ref=fb2cca3ab7176fc840d0d9372ca7ce46b55c180e",
                "patch": "@@ -645,7 +645,9 @@ public void testSemantics() throws SQLException\n \n         _stm.close();\n \n-        testCurrentRoleIsReset();\n+        if (!JDBC.vmSupportsJSR169()) {\n+            testCurrentRoleIsReset();\n+        }\n     }\n \n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/2e2d2ee298dbf29eda79f01dfc9bf03fff3e1ba7",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/d2291224feae5d74b7d3f589ebf3866f3b51bd43",
        "message": "DERBY-3307: NPE in PooledConnction event notification handling if a null listener is added\n\n- Added null check in ClientPooledConnection.addConnectionEventListener().\n\n- Added regression test in J2EEDataSourceTest\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@666040 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_131",
        "file": [
            {
                "sha": "6a2595f3d330e04a77c204b69310e8ea10c8a821",
                "filename": "java/client/org/apache/derby/client/ClientPooledConnection.java",
                "status": "modified",
                "additions": 7,
                "deletions": 0,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/2e2d2ee298dbf29eda79f01dfc9bf03fff3e1ba7/java/client/org/apache/derby/client/ClientPooledConnection.java",
                "raw_url": "https://github.com/apache/derby/raw/2e2d2ee298dbf29eda79f01dfc9bf03fff3e1ba7/java/client/org/apache/derby/client/ClientPooledConnection.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/ClientPooledConnection.java?ref=2e2d2ee298dbf29eda79f01dfc9bf03fff3e1ba7",
                "patch": "@@ -311,6 +311,13 @@ public synchronized void addConnectionEventListener(\n         if (logWriter_ != null) {\n             logWriter_.traceEntry(this, \"addConnectionEventListener\", listener);\n         }\n+\n+        if (listener == null) {\n+            // Ignore the listener if it is null. Otherwise, an exception is\n+            // thrown when a connection event occurs (DERBY-3307).\n+            return;\n+        }\n+\n         if (eventIterators > 0) {\n             // DERBY-3401: Someone is iterating over the ArrayList, and since\n             // we were able to synchronize on this, that someone is us. Clone"
            },
            {
                "sha": "835b5c468de742ec6fd80b6e5c7e25b86d63cf83",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "status": "modified",
                "additions": 60,
                "deletions": 1,
                "changes": 61,
                "blob_url": "https://github.com/apache/derby/blob/2e2d2ee298dbf29eda79f01dfc9bf03fff3e1ba7/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "raw_url": "https://github.com/apache/derby/raw/2e2d2ee298dbf29eda79f01dfc9bf03fff3e1ba7/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java?ref=2e2d2ee298dbf29eda79f01dfc9bf03fff3e1ba7",
                "patch": "@@ -138,6 +138,8 @@ private static Test baseSuite(String postfix) {\n         suite.addTest(new J2EEDataSourceTest(\"testBadConnectionAttributeSyntax\"));\n         suite.addTest(new J2EEDataSourceTest(\"testDescriptionProperty\"));\n         suite.addTest(new J2EEDataSourceTest(\"testConnectionErrorEvent\"));\n+        suite.addTest(new J2EEDataSourceTest(\n+                              \"testConnectionEventListenerIsNull\"));\n         suite.addTest(new J2EEDataSourceTest(\"testReadOnlyToWritableTran\"));\n         suite.addTest(new J2EEDataSourceTest(\"testAutoCommitOnXAResourceStart\"));\n         suite.addTest(new J2EEDataSourceTest(\"testAllDataSources\"));\n@@ -608,7 +610,64 @@ public void testConnectionErrorEvent() throws SQLException, Exception\n         conn = getConnection();\n         conn.close();\n     }\n-    \n+\n+    /**\n+     * Test that event notification doesn't fail when a null listener has\n+     * been registered (DERBY-3307).\n+     */\n+    public void testConnectionEventListenerIsNull() throws SQLException {\n+        ConnectionPoolDataSource cpds =\n+            J2EEDataSource.getConnectionPoolDataSource();\n+        subtestCloseEventWithNullListener(cpds.getPooledConnection());\n+        subtestErrorEventWithNullListener(cpds.getPooledConnection());\n+\n+        XADataSource xads = J2EEDataSource.getXADataSource();\n+        subtestCloseEventWithNullListener(xads.getXAConnection());\n+        subtestErrorEventWithNullListener(xads.getXAConnection());\n+    }\n+\n+    /**\n+     * Test that notification of a close event doesn't fail when the\n+     * listener is null.\n+     */\n+    private void subtestCloseEventWithNullListener(PooledConnection pc)\n+        throws SQLException\n+    {\n+        pc.addConnectionEventListener(null);\n+        // Trigger a close event\n+        pc.getConnection().close();\n+        pc.close();\n+    }\n+\n+    /**\n+     * Test that notification of an error event doesn't fail when the\n+     * listener is null.\n+     */\n+    private void subtestErrorEventWithNullListener(PooledConnection pc)\n+        throws SQLException\n+    {\n+        pc.addConnectionEventListener(null);\n+        Connection c = pc.getConnection();\n+        // Shut down the database to invalidate all connections\n+        getTestConfiguration().shutdownDatabase();\n+        try {\n+            // Should trigger an error event since the connection is no\n+            // longer valid\n+            c.prepareStatement(\"VALUES 1\");\n+            fail(\"Statement should fail after database shutdown\");\n+        } catch (SQLException e) {\n+            if (usingEmbedded()) {\n+                // No current connection is expected on embedded\n+                assertSQLState(\"08003\", e);\n+            } else {\n+                // The client driver reports communication error\n+                assertSQLState(\"08006\", e);\n+            }\n+        }\n+        c.close();\n+        pc.close();\n+    }\n+\n     /**\n      * Test that a PooledConnection can be reused and closed\n      * (separately) during the close event raised by the"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/0c60857246e9b547a76a7a6ecb2e259260a413a9",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/cc3806501fd739f4e372ffcd4d813a5e8ce1ae44",
        "message": "DERBY-2733 ; adding update() to the non-arg constructor, similar to what's happening in ReferenceableDataSource/EmbeddedDataSource, so the NPE doesn't occur because jdbcurl gets a default value. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@610484 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_132",
        "file": [
            {
                "sha": "b15c0c9e965f335287ae530b14386c7c2c89a746",
                "filename": "java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/0c60857246e9b547a76a7a6ecb2e259260a413a9/java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java",
                "raw_url": "https://github.com/apache/derby/raw/0c60857246e9b547a76a7a6ecb2e259260a413a9/java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java?ref=0c60857246e9b547a76a7a6ecb2e259260a413a9",
                "patch": "@@ -119,6 +119,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \t * No-arg constructor.\n \t */\n \tpublic EmbeddedSimpleDataSource() {\n+        update();\n \t}\n \n \t/*"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/32edb61bd5e90f1546ae84751163b93734b4f7ab",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/019c40a89896e6642767a4d9e86b2c8270f9bfd8",
        "message": "DERBY-3253: Fix NPE for IN list operator when the probe predicate is\npushed into a subselect but then multi-probing does not occur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@605616 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_133",
        "file": [
            {
                "sha": "7523ab45c5cb026a7ed0232d6ffa2b23673d9903",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java",
                "status": "modified",
                "additions": 54,
                "deletions": 8,
                "changes": 62,
                "blob_url": "https://github.com/apache/derby/blob/32edb61bd5e90f1546ae84751163b93734b4f7ab/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java",
                "raw_url": "https://github.com/apache/derby/raw/32edb61bd5e90f1546ae84751163b93734b4f7ab/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java?ref=32edb61bd5e90f1546ae84751163b93734b4f7ab",
                "patch": "@@ -80,9 +80,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \t * this BinRelOp is for an IN-list probe predicate; 2) if the\n \t * optimizer chooses a plan for which the probe predicate is\n \t * not usable as a start/stop key then we'll \"revert\" the pred\n-\t * back to the InListOperatorNode referenced here.\n+\t * back to the InListOperatorNode referenced here.  NOTE: Once\n+\t * set, this variable should *only* ever be accessed via the\n+\t * isInListProbeNode() or getInListOp() methods--see comments\n+\t * in the latter method for more.\n \t */\n-\tInListOperatorNode inListProbeSource = null;\n+\tprivate InListOperatorNode inListProbeSource = null;\n \n \tpublic void init(Object leftOperand, Object rightOperand)\n \t{\n@@ -153,10 +156,46 @@ public void init(Object leftOperand, Object rightOperand, Object inListOp)\n \t * If this rel op was created for an IN-list probe predicate then return\n \t * the underlying InListOperatorNode.  Will return null if this rel\n \t * op is a \"legitimate\" relational operator (as opposed to a disguised\n-\t * IN-list).\n+\t * IN-list).  With the exception of nullability checking via the\n+\t * isInListProbeNode() method, all access to this.inListProbeSource\n+\t * MUST come through this method, as this method ensures that the\n+\t * left operand of the inListProbeSource is set correctly before\n+\t * returning it.\n \t */\n \tprotected InListOperatorNode getInListOp()\n \t{\n+\t\tif (inListProbeSource != null)\n+\t\t{\n+\t\t\t/* Depending on where this probe predicate currently sits\n+\t\t\t * in the query tree, this.leftOperand *may* have been\n+\t\t\t * transformed, replaced, or remapped one or more times\n+\t\t\t * since inListProbeSource was last referenced. Since the\n+\t\t\t * leftOperand of the IN list should be the same regardless\n+\t\t\t * of which \"version\" of the operation we're looking at\n+\t\t\t * (i.e. the \"probe predicate\" version (this node) vs the\n+\t\t\t * original version (inListProbeSource)), we have to make\n+\t\t\t * sure that all of the changes made to this.leftOperand\n+\t\t\t * are reflected in inListProbeSource's leftOperand, as\n+\t\t\t * well.  In doing so we ensure the caller of this method\n+\t\t\t * will see an up-to-date version of the InListOperatorNode--\n+\t\t\t * and thus, if the caller references the InListOperatorNode's\n+\t\t\t * leftOperand, it will see the correct information. One\n+\t\t\t * notable example of this is at code generation time, where\n+\t\t\t * if this probe predicate is deemed \"not useful\", we'll\n+\t\t\t * generate the underlying InListOperatorNode instead of\n+\t\t\t * \"this\".  For that to work correctly, the InListOperatorNode\n+\t\t\t * must have the correct leftOperand. DERBY-3253.\n+\t\t\t *\n+\t\t\t * That said, since this.leftOperand will always be \"up-to-\n+\t\t\t * date\" w.r.t. the current query tree (because this probe\n+\t\t\t * predicate sits in the query tree and so all relevant\n+\t\t\t * transformations will be applied here), the simplest way\n+\t\t\t * to ensure the underlying InListOperatorNode also has an\n+\t\t\t * up-to-date leftOperand is to set it to this.leftOperand.\n+\t\t\t */\n+\t\t\tinListProbeSource.setLeftOperand(this.leftOperand);\n+\t\t}\n+\n \t\treturn inListProbeSource;\n \t}\n \n@@ -777,7 +816,7 @@ public boolean isQualifier(Optimizable optTable, boolean forPush)\n \t\t * the IN-list).  That would lead to wrong results (missing rows)\n \t\t * because that restriction is incorrect.\n \t\t */\n-\t\tif (inListProbeSource != null)\n+\t\tif (isInListProbeNode())\n \t\t\treturn false;\n \n \t\tFromTable\tft;\n@@ -1215,7 +1254,7 @@ public boolean isRelationalOperator()\n \t\t * it a \"relational operator\"; it's actually a disguised IN-list\n \t\t * operator.\n \t\t */\n-\t\treturn (inListProbeSource == null);\n+\t\treturn !isInListProbeNode();\n \t}\n \t\n \t/** @see ValueNode#isBinaryEqualsOperatorNode */\n@@ -1225,11 +1264,18 @@ public boolean isBinaryEqualsOperatorNode()\n \t\t * it as an \"equals operator\"; it's actually a disguised IN-list\n \t\t * operator.\n \t\t */\n-\t\treturn (inListProbeSource == null) &&\n+\t\treturn !isInListProbeNode() &&\n \t\t\t(operatorType == RelationalOperator.EQUALS_RELOP);\n \t}\n \n-\t/** @see ValueNode#isInListProbeNode */\n+\t/**\n+\t * @see ValueNode#isInListProbeNode\n+\t *\n+\t * It's okay for this method to reference inListProbeSource directly\n+\t * because it does not rely on the contents of inListProbeSource's\n+\t * leftOperand, and a caller of this method cannot gain access to\n+\t * inListProbeSource's leftOperand through this method.\n+\t */\n \tpublic boolean isInListProbeNode()\n \t{\n \t\treturn (inListProbeSource != null);\n@@ -1247,7 +1293,7 @@ public boolean optimizableEqualityNode(Optimizable optTable,\n \t\t/* If this rel op is for a probe predicate then we do not treat\n \t\t * it as an equality node; it's actually a disguised IN-list node.\n \t\t */\n-\t\tif (inListProbeSource != null)\n+\t\tif (isInListProbeNode())\n \t\t\treturn false;\n \n \t\tColumnReference cr = getColumnOperand(optTable,"
            },
            {
                "sha": "395e0c768ec35951f9e7d83a39c7058c390b6048",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/OrNode.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/32edb61bd5e90f1546ae84751163b93734b4f7ab/java/engine/org/apache/derby/impl/sql/compile/OrNode.java",
                "raw_url": "https://github.com/apache/derby/raw/32edb61bd5e90f1546ae84751163b93734b4f7ab/java/engine/org/apache/derby/impl/sql/compile/OrNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/OrNode.java?ref=32edb61bd5e90f1546ae84751163b93734b4f7ab",
                "patch": "@@ -152,7 +152,7 @@ public ValueNode preprocess(int numTables,\n \t\t\t\t\t\tif (left instanceof BinaryRelationalOperatorNode)\n \t\t\t\t\t\t{\n  \t\t\t\t\t\t\tbron = (BinaryRelationalOperatorNode)left;\n-\t\t\t\t\t\t\tif (bron.getInListOp() == null)\n+\t\t\t\t\t\t\tif (!bron.isInListProbeNode())\n \t\t\t\t\t\t\t{\n \t\t\t\t\t\t\t\tSanityManager.THROWASSERT(\n \t\t\t\t\t\t\t\t\"isRelationalOperator() unexpectedly returned \"\n@@ -223,7 +223,7 @@ else if (tableNumber != cr.getTableNumber() ||\n \t\t\t\t\tOrNode on = (OrNode) vn;\n \t\t\t\t\tBinaryRelationalOperatorNode bron =\n \t\t\t\t\t\t(BinaryRelationalOperatorNode) on.getLeftOperand();\n-\t\t\t\t\tif (bron.getInListOp() != null)\n+\t\t\t\t\tif (bron.isInListProbeNode())\n \t\t\t\t\t{\n \t\t\t\t\t\t/* If we have an OR between multiple IN-lists on the same\n \t\t\t\t\t\t * column then just combine them into a single IN-list."
            },
            {
                "sha": "c60a9081ab4913b212daa02cd1fed8a3f29d09a6",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java",
                "status": "modified",
                "additions": 52,
                "deletions": 5,
                "changes": 57,
                "blob_url": "https://github.com/apache/derby/blob/32edb61bd5e90f1546ae84751163b93734b4f7ab/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java",
                "raw_url": "https://github.com/apache/derby/raw/32edb61bd5e90f1546ae84751163b93734b4f7ab/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java?ref=32edb61bd5e90f1546ae84751163b93734b4f7ab",
                "patch": "@@ -212,11 +212,10 @@ protected void decorateSQL(Statement s) throws SQLException\n     }\n \n     /**\n-     * The one test fixture for this test.  Executes three different types\n-     * of queries (\"strategies\") repeatedly with an increasing number of\n-     * values in the IN list.  Underneath we will check the query plan\n-     * for each query to make sure that Derby is doing multi-probing as\n-     * expected.\n+     * Executes three different types of queries (\"strategies\") repeatedly\n+     * with an increasing number of values in the IN list.  Underneath we\n+     * will check the query plan for each query to make sure that Derby is\n+     * doing multi-probing as expected.\n      */\n     public void testMultiProbing() throws Exception\n     {\n@@ -498,6 +497,54 @@ public void testMultipleStartStopPreds() throws Exception\n         st.close();\n     }\n \n+    /**\n+     * Test the scenario in which Derby creates an IN-list probe\n+     * predicate, remaps its left operand to point to a nested\n+     * SELECT query, and then decides to *not* use the probe\n+     * predicate in the final plan.  The remapping of the left\n+     * operand will cause the probe predicate's left operand to\n+     * be set to a different ColumnReference object--one that\n+     * points to the target table in the subselect.  Then when\n+     * the optimizer decides to *not* use the probe predicate\n+     * in the final query, we'll revert back to the original IN\n+     * list (InListOperatorNode) and generate that for the query.\n+     * When we do so, the left operand of the InListOperatorNode\n+     * must reflect the fact that the IN operation's left operand\n+     * has changed (it now points to the table from the subselect).\n+     * Otherwise the InListOperatorNode will generate an invalid\n+     * ColumnReference.  DERBY-3253.\n+     */\n+    public void testProbePredPushedIntoSelectThenReverted()\n+        throws Exception\n+    {\n+        Statement st = createStatement();\n+\n+        st.execute(\"create table d3253 (i int, vc varchar(10))\");\n+        st.execute(\"insert into d3253 values \" +\n+            \"(1, 'one'), (2, 'two'), (3, 'three'), (1, 'un')\");\n+\n+        /* Before DERBY-3253 was fixed, this query would have thrown\n+         * an execution time NPE due to the fact the generated column\n+         * reference was pointing to the wrong place.\n+         */\n+        JDBC.assertUnorderedResultSet(st.executeQuery(\n+            \"select x.* from d3253, (select * from d3253) x \" +\n+            \"where d3253.i = x.i and x.vc in ('un', 'trois')\"),\n+            new String [][] {{\"1\",\"un\"},{\"1\",\"un\"}});\n+\n+        JDBC.assertUnorderedResultSet(st.executeQuery(\n+            \"select x.* from d3253, (select * from d3253) x \" +\n+            \"where d3253.i = x.i and x.i in (2, 3)\"),\n+            new String [][] {{\"2\",\"two\"},{\"3\",\"three\"}});\n+\n+        JDBC.assertEmpty(st.executeQuery(\n+            \"select x.* from d3253, (select * from d3253) x \" +\n+            \"where d3253.i = x.i and x.vc in ('uno', 'tres')\"));\n+\n+        st.execute(\"drop table d3253\");\n+        st.close();\n+    }\n+\n     /**\n      * Insert the received number of rows into DATA_TABLE via\n      * batch processing."
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/987f4fd7279133e6db24e70c991fdb8737262a90",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/c6148c9048f186cdb22518a84e45ef67f98c142e",
        "message": "DERBY-1952 Add a check to the AutoloadTest that indicates in a somewhat non-internal way that Derby's\nembedded engine was actually booted in not. Will replace the use of internal apis and checking\nfor a NPE in the jdbc4 version of the test.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@545332 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_134",
        "file": [
            {
                "sha": "3978c252e96a107f1da5a66e4af8f2673fec2803",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java",
                "status": "modified",
                "additions": 100,
                "deletions": 25,
                "changes": 125,
                "blob_url": "https://github.com/apache/derby/blob/987f4fd7279133e6db24e70c991fdb8737262a90/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java",
                "raw_url": "https://github.com/apache/derby/raw/987f4fd7279133e6db24e70c991fdb8737262a90/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java?ref=987f4fd7279133e6db24e70c991fdb8737262a90",
                "patch": "@@ -24,6 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.sql.Driver;\n import java.sql.DriverManager;\n import java.sql.SQLException;\n+import java.util.Enumeration;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n@@ -33,6 +34,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derbyTesting.junit.Derby;\n import org.apache.derbyTesting.junit.JDBC;\n import org.apache.derbyTesting.junit.NetworkServerTestSetup;\n+import org.apache.derbyTesting.junit.SecurityManagerSetup;\n import org.apache.derbyTesting.junit.TestConfiguration;\n \n /**\n@@ -59,42 +61,54 @@ public static Test suite() {\n \n         boolean embeddedAutoLoad = false;\n         boolean clientAutoLoad = false;\n+        boolean jdbc4Autoload = false;\n         \n         if (JDBC.vmSupportsJDBC4() && TestConfiguration.loadingFromJars())\n         {\n-            // test client & embedded\n-            embeddedAutoLoad = true;\n-            clientAutoLoad = true;\n+            // test client & embedded,but the JDBC 4 auto boot is not\n+            // a full boot of the engine. Thus while there is no\n+            // need to explicitly load the driver, the embedded engine\n+            // does not start up. Unlike when the embedded driver is\n+            // put in jdbc.drivers.\n+            \n+            jdbc4Autoload = true;\n         }\n-        else\n-        {\n-            // Simple test to see if the driver class is\n-            // in the value. Could get fancy and see if it is\n-            // correctly formatted but not worth it.\n \n-            try {\n-                String jdbcDrivers = getSystemProperty(\"jdbc.drivers\");\n-                if (jdbcDrivers == null)\n-                    jdbcDrivers = \"\";\n \n-                embeddedAutoLoad = jdbcDrivers\n-                        .indexOf(\"org.apache.derby.jdbc.EmbeddedDriver\") != -1;\n+        // Simple test to see if the driver class is\n+        // in the value. Could get fancy and see if it is\n+        // correctly formatted but not worth it.\n \n-                clientAutoLoad = jdbcDrivers\n-                        .indexOf(\"org.apache.derby.jdbc.ClientDriver\") != -1;\n+        try {\n+            String jdbcDrivers = getSystemProperty(\"jdbc.drivers\");\n+            if (jdbcDrivers == null)\n+                jdbcDrivers = \"\";\n \n-            } catch (SecurityException se) {\n-                // assume there is no autoloading if\n-                // we can't read the value of jdbc.drivers.\n-            }\n+            embeddedAutoLoad = jdbcDrivers\n+                    .indexOf(\"org.apache.derby.jdbc.EmbeddedDriver\") != -1;\n+\n+            clientAutoLoad = jdbcDrivers\n+                    .indexOf(\"org.apache.derby.jdbc.ClientDriver\") != -1;\n+\n+        } catch (SecurityException se) {\n+            // assume there is no autoloading if\n+            // we can't read the value of jdbc.drivers.\n         }\n+\n         \n-        if (embeddedAutoLoad || clientAutoLoad)\n+        if (jdbc4Autoload || embeddedAutoLoad || clientAutoLoad)\n         {\n             TestSuite suite = new TestSuite(\"AutoloadTest\");\n-            if (embeddedAutoLoad)\n+            \n+            if (jdbc4Autoload && !embeddedAutoLoad)\n+            {\n+                suite.addTest(SecurityManagerSetup.noSecurityManager(\n+                        new AutoloadTest(\"testEmbeddedNotStarted\")));\n+            }\n+            \n+            if (jdbc4Autoload || embeddedAutoLoad)\n                 suite.addTest(baseAutoLoadSuite(\"embedded\"));\n-            if (clientAutoLoad)\n+            if (jdbc4Autoload || clientAutoLoad)\n                 suite.addTest(\n                   TestConfiguration.clientServerDecorator(\n                           baseAutoLoadSuite(\"client\")));\n@@ -106,6 +120,7 @@ public static Test suite() {\n         // not loaded implicitly by some other means.\n         TestSuite suite = new TestSuite(\"AutoloadTest: no autoloading expected\");\n         \n+        suite.addTest(new AutoloadTest(\"testEmbeddedNotStarted\"));\n         suite.addTest(new AutoloadTest(\"noloadTestNodriverLoaded\"));\n         suite.addTest(TestConfiguration.clientServerDecorator(\n                 new AutoloadTest(\"noloadTestNodriverLoaded\")));\n@@ -129,8 +144,14 @@ private static Test baseAutoLoadSuite(String which)\n                 suite.addTest(new AutoloadTest(\"testAutoNetworkServerBoot\"));\n \n         }\n-            \n+        \n         suite.addTest(new AutoloadTest(\"testSuccessfulConnect\"));\n+        \n+        if (\"embedded\".equals(which)) {\n+            suite.addTest(SecurityManagerSetup.noSecurityManager(\n+                new AutoloadTest(\"testEmbeddedStarted\")));\n+        }\n+\n         suite.addTest(new AutoloadTest(\"testUnsuccessfulConnect\"));\n         suite.addTest(new AutoloadTest(\"testExplicitLoad\"));\n         return suite;\n@@ -150,7 +171,7 @@ public void testRegisteredDriver() throws SQLException\n     {\n         String protocol =\n             getTestConfiguration().getJDBCClient().getUrlBase();\n-                    \n+                         \n         Driver driver = DriverManager.getDriver(protocol);\n         assertNotNull(\"Expected registered driver\", driver);\n     }\n@@ -273,5 +294,59 @@ private boolean fullEngineAutoBoot()\n         String jdbcDrivers = getSystemProperty(\"jdbc.drivers\");\n         return jdbcDrivers.indexOf(\"org.apache.derby.jdbc.EmbeddedDriver\") != -1;\n     }\n+    \n+    /**\n+     * Test indirect artifiacts through public apis that\n+     * the embedded engine has not been started.\n+     */\n+    \n+    public void testEmbeddedNotStarted()\n+    {\n+        assertFalse(hasDerbyThreadGroup());\n+    }\n+    \n+    /**\n+     * Check the test(s) we use to determine if the embedded driver\n+     * is not up indicate the opposite once the driver has been\n+     * fully booted.\n+     *\n+     */\n+    public void testEmbeddedStarted()\n+    {\n+        assertTrue(hasDerbyThreadGroup());\n+    }\n+    \n+    /**\n+     * Return true if a ThreadGroup exists that has a name\n+     * starting with derby.\n+     * @return\n+     */\n+    private boolean hasDerbyThreadGroup() {\n+        ThreadGroup tg = Thread.currentThread().getThreadGroup();\n+        \n+        while (tg.getParent() != null)\n+        {\n+            tg = tg.getParent();\n+        }\n+        \n+        // estimate of groups        \n+        ThreadGroup[] allGroups = new ThreadGroup[tg.activeGroupCount()];\n+        int actual;\n+        for (;;)\n+        {\n+            actual = tg.enumerate(allGroups, true);\n+            if (actual < allGroups.length)\n+                break;\n+            // just double the size\n+            allGroups = new ThreadGroup[allGroups.length * 2];\n+        }\n+\n+        for (int i = 0; i < actual; i++)\n+        {\n+            if (allGroups[i].getName().startsWith(\"derby.\"))\n+                return true;\n+        }\n+        return false;\n+    }\n }\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/38520af26380540185da2b4af4f153eb84e59c39",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/93ce86581eee70c7122e4e7560378f64bd3c31aa",
        "message": "DERBY-2505 (partial): Convert derbynet/testij.java to JUnit. Getting an NPE\nlooking for the test script when running with jars, need to resolve that before\nhooking it into the derbynet _Suite.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@525326 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_135",
        "file": [
            {
                "sha": "8088ada8268e9f7b90d3339a33e08208201749a0",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/testij.out",
                "status": "removed",
                "additions": 0,
                "deletions": 75,
                "changes": 75,
                "blob_url": "https://github.com/apache/derby/blob/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/testij.out",
                "raw_url": "https://github.com/apache/derby/raw/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/testij.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/testij.out?ref=93ce86581eee70c7122e4e7560378f64bd3c31aa",
                "patch": "@@ -1,75 +0,0 @@\n-Testing various ij connections and comments in front of selects\n-org.apache.derby.tools.ij xxxFILTERED_TESTIJSOURCExxx\n-ij> --\n------   Licensed to the Apache Software Foundation (ASF) under one or more\n------   contributor license agreements.  See the NOTICE file distributed with\n------   this work for additional information regarding copyright ownership.\n------   The ASF licenses this file to You under the Apache License, Version 2.0\n------   (the \"License\"); you may not use this file except in compliance with\n------   the License.  You may obtain a copy of the License at\n------\n------      http://www.apache.org/licenses/LICENSE-2.0\n------\n------   Unless required by applicable law or agreed to in writing, software\n------   distributed under the License is distributed on an \"AS IS\" BASIS,\n------   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n------   See the License for the specific language governing permissions and\n------   limitations under the License.\n------\n-driver 'org.apache.derby.jdbc.ClientDriver';\n-ij> --Bug 4632  Make the db italian to make sure string selects  are working\n-connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/wombat;create=true;territory=it' USER 'dbadmin' PASSWORD 'dbadmin';\n-ij> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/wombat' USER 'dbadmin' PASSWORD 'dbadbmin';\n-ij(CONNECTION1)> -- this is a comment, a comment in front of a select should not cause an error\n-select * from sys.systables where 1=0;\n-TABLEID |TABLENAME |& |SCHEMAID |&\n------\n-0 rows selected\n-ij(CONNECTION1)> -- this is a comment, a comment in front of a values clauses should not cause an error\n-values(1);\n-1          \n------\n-1          \n-1 row selected\n-ij(CONNECTION1)> -- Try some URL attributes\n-disconnect all;\n-ij> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/junk;create=true' USER 'dbadmin' PASSWORD 'dbadbmin';\n-ij> select * from APP.notthere;\n-ERROR 42X05: Table/View 'APP.NOTTHERE' does not exist.\n-ij> -- examples from the docs\n-connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/wombat;create=true;user=judy;password=judy';\n-ij(CONNECTION1)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/./wombat;user=judy;password=judy';\n-ij(CONNECTION2)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/toursDB';\n-ERROR 08004: The connection was refused because the database toursDB was not found.\n-ij(CONNECTION2)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/toursDB' USER 'dbadmin' PASSWORD 'dbadbmin';\n-ERROR 08004: The connection was refused because the database toursDB was not found.\n-ij(CONNECTION2)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/wombat' USER 'APP' PASSWORD 'APP';\n-ij(CONNECTION3)> connect  'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;create=true;user=usr;password=pwd';\n-ij(CONNECTION4)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;upgrade=true;user=usr;password=pwd';\n-ij(CONNECTION5)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;shutdown=true;user=usr;password=pwd';\n-ERROR 08006: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: Database 'my-db-name' shutdown.\n-ij(CONNECTION5)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/./my-dbname;create=true;user=usr;password=pwd';\n-ij(CONNECTION6)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/./my-dbname;create=true;user=usr;password=pwd';\n-ij(CONNECTION7)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/toursDB' USER 'dbadmin' PASSWORD 'dbadbmin';\n-ERROR 08004: The connection was refused because the database toursDB was not found.\n-ij(CONNECTION7)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/wombat' USER 'APP' PASSWORD 'APP';\n-ij(CONNECTION8)> connect  'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;create=true;user=usr;password=pwd';\n-ij(CONNECTION9)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;upgrade=true;user=usr;password=pwd';\n-ij(CONNECTION10)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;shutdown=true;user=usr;password=pwd';\n-ERROR 08006: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: Database 'my-db-name' shutdown.\n-ij(CONNECTION10)> -- Database names with /'s\n-connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/./my-dbname;create=true;user=usr;password=pwd';\n-ij(CONNECTION11)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/./my-dbname;create=true;user=usr;password=pwd';\n-ij(CONNECTION12)> -- retrieveMessageText Testing\n-connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;create=true;user=usr;password=pwd;retrieveMessageText=false';\n-ij(CONNECTION13)> -- Should not get message text\n-select * from APP.notthere;\n-ERROR 42X05: DERBY SQL error: SQLCODE: -1, SQLSTATE: 42X05, SQLERRMC: APP.NOTTHERE\u001442X05\n-ij(CONNECTION13)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;create=true;user=usr;password=pwd;retrieveMessageText=true';\n-ij(CONNECTION14)> -- Should see message text\n-select * from APP.notthere;\n-ERROR 42X05: Table/View 'APP.NOTTHERE' does not exist.\n-ij(CONNECTION14)> -- just user security mechanism\n-connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/my-db-name;create=true;user=usr;retrieveMessageText=true';\n-ij(CONNECTION15)> connect 'jdbc:derby://xxxFILTERED_HOSTNAMExxx:1527/wombat' USER 'APP';\n-ij(CONNECTION16)> End test"
            },
            {
                "sha": "10ae010166a88e30d63b280047dfff185b488a24",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/testclientij.out",
                "status": "added",
                "additions": 72,
                "deletions": 0,
                "changes": 72,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/master/testclientij.out",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/master/testclientij.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/testclientij.out?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "patch": "@@ -0,0 +1,72 @@\n+ij version 10.3\n+ij> --\n+--   Licensed to the Apache Software Foundation (ASF) under one or more\n+--   contributor license agreements.  See the NOTICE file distributed with\n+--   this work for additional information regarding copyright ownership.\n+--   The ASF licenses this file to You under the Apache License, Version 2.0\n+--   (the \"License\"); you may not use this file except in compliance with\n+--   the License.  You may obtain a copy of the License at\n+--\n+--      http://www.apache.org/licenses/LICENSE-2.0\n+--\n+--   Unless required by applicable law or agreed to in writing, software\n+--   distributed under the License is distributed on an \"AS IS\" BASIS,\n+--   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+--   See the License for the specific language governing permissions and\n+--   limitations under the License.\n+--\n+driver 'org.apache.derby.jdbc.ClientDriver';\n+ij> --Bug 4632  Make the db italian to make sure string selects  are working\n+connect 'jdbc:derby://localhost:1527/testij;create=true;territory=it' USER 'dbadmin' PASSWORD 'dbadmin';\n+ij> connect 'jdbc:derby://localhost:1527/testij' USER 'dbadmin' PASSWORD 'dbadbmin';\n+ij(CONNECTION1)> -- this is a comment, a comment in front of a select should not cause an error\n+select * from sys.systables where 1=0;\n+TABLEID                             |TABLENAME                                                                                                                       |&|SCHEMAID                            |&\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+\n+0 rows selected\n+ij(CONNECTION1)> -- this is a comment, a comment in front of a values clauses should not cause an error\n+values(1);\n+1          \n+-----------\n+1          \n+\n+1 row selected\n+ij(CONNECTION1)> -- Try some URL attributes\n+disconnect all;\n+ij> connect 'jdbc:derby://localhost:1527/testij2;create=true' USER 'dbadmin' PASSWORD 'dbadbmin';\n+ij> select * from APP.notthere;\n+ERROR 42X05: Table/View 'APP.NOTTHERE' does not exist.\n+ij> -- examples from the docs\n+\n+connect 'jdbc:derby://localhost:1527/testij2;create=true;user=judy;password=judy';\n+ij(CONNECTION1)> connect 'jdbc:derby://localhost:1527/./testij2;user=judy;password=judy';\n+ij(CONNECTION2)> connect 'jdbc:derby://localhost:1527/toursDB';\n+ERROR 08004: The connection was refused because the database toursDB was not found.\n+ij(CONNECTION2)> connect 'jdbc:derby://localhost:1527/toursDB' USER 'dbadmin' PASSWORD 'dbadbmin';\n+ERROR 08004: The connection was refused because the database toursDB was not found.\n+ij(CONNECTION2)> connect 'jdbc:derby://localhost:1527/wombat' USER 'APP' PASSWORD 'APP';\n+ij(CONNECTION3)> connect  'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd';\n+ij(CONNECTION4)> connect 'jdbc:derby://localhost:1527/testij2;upgrade=true;user=usr;password=pwd';\n+ij(CONNECTION5)> connect 'jdbc:derby://localhost:1527/testij2;shutdown=true;user=usr;password=pwd';\n+ERROR 08006: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: Database 'testij2' shutdown.\n+ij(CONNECTION5)> connect 'jdbc:derby://localhost:1527/./testij2;create=true;user=usr;password=pwd';\n+ij(CONNECTION6)> connect 'jdbc:derby://localhost:1527/./testij2;create=true;user=usr;password=pwd';\n+ij(CONNECTION7)> connect  'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd';\n+ij(CONNECTION8)> connect 'jdbc:derby://localhost:1527/testij2;upgrade=true;user=usr;password=pwd';\n+ij(CONNECTION9)> connect 'jdbc:derby://localhost:1527/testij2;shutdown=true;user=usr;password=pwd';\n+ERROR 08006: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: Database 'testij2' shutdown.\n+ij(CONNECTION9)> -- retrieveMessageText Testing\n+connect 'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd;retrieveMessageText=false';\n+ij(CONNECTION10)> -- Should not get message text\n+select * from APP.notthere;\n+ERROR 42X05: DERBY SQL error: SQLCODE: -1, SQLSTATE: 42X05, SQLERRMC: APP.NOTTHERE\u001442X05\n+ij(CONNECTION10)> connect 'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd;retrieveMessageText=true';\n+ij(CONNECTION11)> -- Should see message text\n+select * from APP.notthere;\n+ERROR 42X05: Table/View 'APP.NOTTHERE' does not exist.\n+ij(CONNECTION11)> -- just user security mechanism\n+connect 'jdbc:derby://localhost:1527/testij2;create=true;user=usr;retrieveMessageText=true';\n+ij(CONNECTION12)> connect 'jdbc:derby://localhost:1527/wombat' USER 'APP';\n+ij(CONNECTION13)> disconnect all;\n+ij> \n\\ No newline at end of file"
            },
            {
                "sha": "5bc75cece7e93b20a04d26c0d8c37beeb3ff90a2",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetIjTests.java",
                "status": "added",
                "additions": 46,
                "deletions": 0,
                "changes": 46,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetIjTests.java",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetIjTests.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetIjTests.java?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "patch": "@@ -0,0 +1,46 @@\n+/*\n+ *\n+ * Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.NetIjTests\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, \n+ * software distributed under the License is distributed on an \n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, \n+ * either express or implied. See the License for the specific \n+ * language governing permissions and limitations under the License.\n+ */\n+\n+package org.apache.derbyTesting.functionTests.tests.derbynet;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.derbyTesting.functionTests.util.IjTestCase;\n+import org.apache.derbyTesting.junit.TestConfiguration;\n+\n+/**\n+ * Network client .sql tests to run via ij.\n+ */\n+public class NetIjTests extends IjTestCase {\n+\t\n+\tprivate NetIjTests(String name) {\n+\t\tsuper(name);\n+\t}\n+\t\n+\tpublic static Test suite() {\n+        \n+        TestSuite suite = new TestSuite(\"NetIjTests\");\n+        suite.addTest(TestConfiguration.clientServerDecorator(\n+        \t\tnew NetIjTests(\"testclientij\")));\n+        \n+        return suite;\n+    }\n+}"
            },
            {
                "sha": "4726a4d5976cddaf33133ac08dcfed1f005b2c75",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testclientij.sql",
                "status": "modified",
                "additions": 18,
                "deletions": 28,
                "changes": 46,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testclientij.sql",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testclientij.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testclientij.sql?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "patch": "@@ -16,72 +16,62 @@\n --\n driver 'org.apache.derby.jdbc.ClientDriver';\n --Bug 4632  Make the db italian to make sure string selects  are working\n-connect 'jdbc:derby://localhost:1527/wombat;create=true;territory=it' USER 'dbadmin' PASSWORD 'dbadmin';\n+connect 'jdbc:derby://localhost:1527/testij;create=true;territory=it' USER 'dbadmin' PASSWORD 'dbadmin';\n \n-connect 'jdbc:derby://localhost:1527/wombat' USER 'dbadmin' PASSWORD 'dbadbmin';\n+connect 'jdbc:derby://localhost:1527/testij' USER 'dbadmin' PASSWORD 'dbadbmin';\n -- this is a comment, a comment in front of a select should not cause an error\n select * from sys.systables where 1=0;\n -- this is a comment, a comment in front of a values clauses should not cause an error\n values(1);\n \n -- Try some URL attributes\n disconnect all;\n-connect 'jdbc:derby://localhost:1527/junk;create=true' USER 'dbadmin' PASSWORD 'dbadbmin';\n+connect 'jdbc:derby://localhost:1527/testij2;create=true' USER 'dbadmin' PASSWORD 'dbadbmin';\n select * from APP.notthere;\n \n \n -- examples from the docs\n \n-connect 'jdbc:derby://localhost:1527/wombat;create=true;user=judy;password=judy';\n+connect 'jdbc:derby://localhost:1527/testij2;create=true;user=judy;password=judy';\n \n-connect 'jdbc:derby://localhost:1527/./wombat;user=judy;password=judy';\n+connect 'jdbc:derby://localhost:1527/./testij2;user=judy;password=judy';\n \n connect 'jdbc:derby://localhost:1527/toursDB';\n \n-\n connect 'jdbc:derby://localhost:1527/toursDB' USER 'dbadmin' PASSWORD 'dbadbmin';\n \n connect 'jdbc:derby://localhost:1527/wombat' USER 'APP' PASSWORD 'APP';\n \n-connect  'jdbc:derby://localhost:1527/my-db-name;create=true;user=usr;password=pwd';\n-\n-connect 'jdbc:derby://localhost:1527/my-db-name;upgrade=true;user=usr;password=pwd';\n-\n-connect 'jdbc:derby://localhost:1527/my-db-name;shutdown=true;user=usr;password=pwd';\n+connect  'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd';\n \n-connect 'jdbc:derby://localhost:1527/./my-dbname;create=true;user=usr;password=pwd';\n+connect 'jdbc:derby://localhost:1527/testij2;upgrade=true;user=usr;password=pwd';\n \n-connect 'jdbc:derby://localhost:1527/./my-dbname;create=true;user=usr;password=pwd';\n+connect 'jdbc:derby://localhost:1527/testij2;shutdown=true;user=usr;password=pwd';\n \n-connect 'jdbc:derby://localhost:1527/toursDB' USER 'dbadmin' PASSWORD 'dbadbmin';\n-\n-connect 'jdbc:derby://localhost:1527/wombat' USER 'APP' PASSWORD 'APP';\n+connect 'jdbc:derby://localhost:1527/./testij2;create=true;user=usr;password=pwd';\n \n-connect  'jdbc:derby://localhost:1527/my-db-name;create=true;user=usr;password=pwd';\n+connect 'jdbc:derby://localhost:1527/./testij2;create=true;user=usr;password=pwd';\n \n-connect 'jdbc:derby://localhost:1527/my-db-name;upgrade=true;user=usr;password=pwd';\n-\n-connect 'jdbc:derby://localhost:1527/my-db-name;shutdown=true;user=usr;password=pwd';\n-\n--- Database names with /'s\n-connect 'jdbc:derby://localhost:1527/./my-dbname;create=true;user=usr;password=pwd';\n-\n-connect 'jdbc:derby://localhost:1527/./my-dbname;create=true;user=usr;password=pwd';\n+connect  'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd';\n \n+connect 'jdbc:derby://localhost:1527/testij2;upgrade=true;user=usr;password=pwd';\n \n+connect 'jdbc:derby://localhost:1527/testij2;shutdown=true;user=usr;password=pwd';\n \n -- retrieveMessageText Testing\n-connect 'jdbc:derby://localhost:1527/my-db-name;create=true;user=usr;password=pwd;retrieveMessageText=false';\n+connect 'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd;retrieveMessageText=false';\n \n -- Should not get message text\n select * from APP.notthere;\n \n-connect 'jdbc:derby://localhost:1527/my-db-name;create=true;user=usr;password=pwd;retrieveMessageText=true';\n+connect 'jdbc:derby://localhost:1527/testij2;create=true;user=usr;password=pwd;retrieveMessageText=true';\n \n -- Should see message text\n select * from APP.notthere;\n \n -- just user security mechanism\n-connect 'jdbc:derby://localhost:1527/my-db-name;create=true;user=usr;retrieveMessageText=true';\n+connect 'jdbc:derby://localhost:1527/testij2;create=true;user=usr;retrieveMessageText=true';\n \n connect 'jdbc:derby://localhost:1527/wombat' USER 'APP';\n+\n+disconnect all;"
            },
            {
                "sha": "c6acde95ce00ab3d9a03cc6a9398dd61ee68c359",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java",
                "status": "removed",
                "additions": 0,
                "deletions": 165,
                "changes": 165,
                "blob_url": "https://github.com/apache/derby/blob/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java",
                "raw_url": "https://github.com/apache/derby/raw/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java?ref=93ce86581eee70c7122e4e7560378f64bd3c31aa",
                "patch": "@@ -1,165 +0,0 @@\n-/*\n-\n-   Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.testij\n-\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-      http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n-\n- */\n-package org.apache.derbyTesting.functionTests.tests.derbynet;\n-\n-import java.sql.*;\n-import java.util.Vector;\n-import java.util.Properties;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.BufferedOutputStream;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.io.ByteArrayInputStream;\n-import java.io.FileNotFoundException;\n-\n-import org.apache.derbyTesting.functionTests.harness.jvm;\n-import org.apache.derbyTesting.functionTests.harness.Sed;\n-import org.apache.derbyTesting.functionTests.util.TestUtil;\n-import org.apache.derbyTesting.functionTests.util.ExecProcUtil;\n-\n-import org.apache.derby.drda.NetworkServerControl;\n-\n-\n-public class testij\n-{\n-\n-\n-\tprivate static Properties properties = new java.util.Properties();\n-\tprivate static jvm jvm;\n-\tprivate static Vector vCmd;\n-\n-\tprivate static String IjCmd=\"org.apache.derby.tools.ij\";\n-\tprivate static String SqlDir=\"extin\";\n-\tprivate static String jccSqlFile=\"testij.sql\";\n-\tprivate static String sep;\n-\tprivate static String clientSqlFile=\"testclientij.sql\";\n-\tprivate static String altExtinDir;\n-\tprivate static boolean useAltExtinDir=false;\n-    \n-\tprivate static void execCmd (String[] args) throws Exception\n-\t{\n-\t\tint totalSize = vCmd.size() + args.length;\n-\t\tString serverCmd[] = new String[totalSize];\n-\t\tint i;\n-\t\tfor (i = 0; i < vCmd.size(); i++)\n-\t\t{\n-\t\t\tserverCmd[i] = (String)vCmd.elementAt(i);\n-\t\t//\tSystem.out.println(\"serverCmd[\"+i+\"]: \"+serverCmd[i]);\n-\t\t}\n-\t\tint j = 0;\n-\t\tfor (; i < totalSize; i++)\n-\t\t{\n-\t\t\tserverCmd[i] = args[j++];\n-\t\t//\tSystem.out.println(\"serverCmd[\"+i+\"]: \"+serverCmd[i]);\n-\t\t}\n- \n-\t\t// Start a process to run the command\n-\t\tProcess pr = Runtime.getRuntime().exec(serverCmd);\n-\t\tpr.waitFor();\t\t// make sure this is executed first\n-\t}\n-\t\n-    public static void massageSqlFile (String hostName, String fileName) throws Exception {\n-        // only called if hostName is *not* localhost. \n-        // Need to replace each occurrence of the string 'localhost' with \n-        // whatever is the hostName\n-        File tmpFile = new File(\"extin\", \"tmpFile.sql\");\n-        File orgFile = new File(\"extin\", fileName);\n-        // wrap this in a try to possibly try using user.dir to find the file\n-        InputStream original; \n-        OutputStream copy; \n-        try { \n-            fileName = SqlDir + sep + fileName; \n-            original = new FileInputStream(fileName);\n-            copy = new FileOutputStream(tmpFile);\n-        }\n-        catch (FileNotFoundException fnfe) {\n-            // we must be running from within a suite...\n-            useAltExtinDir = true;\n-            String userdir =  System.getProperty(\"user.dir\");\n-            altExtinDir = userdir + sep + \"..\"; \n-            tmpFile = new File(altExtinDir, \"tmpFile.sql\");\n-            orgFile = new File (altExtinDir,  fileName); \n-            fileName = altExtinDir + sep + fileName;\n-            original = new FileInputStream(fileName);\n-            copy = new FileOutputStream(tmpFile);\n-        }\n-        int content;\n-        while ((content = original.read())> 0 ) {\n-            copy.write(content);\n-        }\n-        copy.close();\n-        original.close();\n-        Sed hostSed = new Sed();\n-        InputStream sedIs = new ByteArrayInputStream((\"substitute=localhost;\" + hostName).getBytes(\"UTF-8\"));\n-        hostSed.exec(tmpFile, orgFile, sedIs, false, false, false);\t\t\n-    }\n-\n-\tpublic static void main (String args[]) throws Exception\n-\t{\n-\t\tif ((System.getProperty(\"java.vm.name\") != null) && System.getProperty(\"java.vm.name\").equals(\"J9\"))\n-\t\t\tjvm = jvm.getJvm(\"j9_13\");\n-\t\telse\n-\t\t\tjvm = jvm.getJvm(\"currentjvm\");\t\t// ensure compatibility\n-\t\tvCmd = jvm.getCommandLine();\n-\t\tsep =  System.getProperty(\"file.separator\");\n-\t\ttry\n-\t\t{\n-            BufferedOutputStream bos = new BufferedOutputStream(System.out, 1024);\n-\t\t\t/************************************************************\n-\t\t\t *  Test comments in front of select's doesn't cause problems\n-\t\t\t ************************************************************/\n-\t\t\t//create wombat database\n-\t\t\tNetworkServerControl server = new NetworkServerControl();\n-\t\t\tSystem.out.println(\"Testing various ij connections and comments in front of selects\");\n-\t\t\t\n-\t\t\t// first, we have to massage the .sql file to replace localhost, if \n-\t\t\t// there is a system property set.\n-\t\t\t\t\t\t\n-\t\t\tString hostName=TestUtil.getHostName();\n-\t\t\tif (TestUtil.isJCCFramework()){\n-\t\t\t\t// use jccSqlfile\n-\t\t\t\tif (!hostName.equals(\"localhost\")) \n-\t\t\t\t\tmassageSqlFile(hostName,jccSqlFile);\n-\t\t\t\tif (useAltExtinDir)\t\n-\t\t\t\t\tExecProcUtil.execCmdDumpResults(new String[]{IjCmd,(altExtinDir + sep + SqlDir + sep + jccSqlFile)},vCmd,bos);\n-\t\t\t\tExecProcUtil.execCmdDumpResults(new String[]{IjCmd,(SqlDir + sep + jccSqlFile)},vCmd,bos);\n-\t\t\t} else {   // Derby Client\n-\t\t\t\t// use clientSqlFile\n-\t\t\t\tif(!hostName.equals(\"localhost\")) {\n-\t\t\t\t\tmassageSqlFile(hostName,clientSqlFile);\n-\t\t\t\tif (useAltExtinDir)\t\n-\t\t\t\t\tExecProcUtil.execCmdDumpResults(new String[]{IjCmd,(altExtinDir + sep + SqlDir + sep + clientSqlFile)},vCmd,bos);\n-\t\t\t\t}\n-\t\t\t\tExecProcUtil.execCmdDumpResults(new String[]{IjCmd,(SqlDir + sep + clientSqlFile)},vCmd,bos);\n-\t\t\t}\n-\t\t\tSystem.out.println(\"End test\");\n-\t\t}\n-\t\tcatch (Exception e)\n-\t\t{\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t}\n-\n-}\n-\n-"
            },
            {
                "sha": "f4c6bb99f021cb263edf4d751c4b5946b5b85b88",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.sql",
                "status": "removed",
                "additions": 0,
                "deletions": 61,
                "changes": 61,
                "blob_url": "https://github.com/apache/derby/blob/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.sql",
                "raw_url": "https://github.com/apache/derby/raw/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.sql?ref=93ce86581eee70c7122e4e7560378f64bd3c31aa",
                "patch": "@@ -1,61 +0,0 @@\n---\n---   Licensed to the Apache Software Foundation (ASF) under one or more\n---   contributor license agreements.  See the NOTICE file distributed with\n---   this work for additional information regarding copyright ownership.\n---   The ASF licenses this file to You under the Apache License, Version 2.0\n---   (the \"License\"); you may not use this file except in compliance with\n---   the License.  You may obtain a copy of the License at\n---\n---      http://www.apache.org/licenses/LICENSE-2.0\n---\n---   Unless required by applicable law or agreed to in writing, software\n---   distributed under the License is distributed on an \"AS IS\" BASIS,\n---   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n---   See the License for the specific language governing permissions and\n---   limitations under the License.\n---\n-driver 'com.ibm.db2.jcc.DB2Driver';\n---Bug 4632  Make the db italian to make sure string selects  are working\n-connect 'jdbc:derby:net://localhost:1527/wombat;create=true;territory=it:retrieveMessagesFromServerOnGetMessage=true;' USER 'dbadmin' PASSWORD 'dbadmin';\n-\n-connect 'jdbc:derby:net://localhost:1527/wombat' USER 'dbadmin' PASSWORD 'dbadbmin';\n--- this is a comment, a comment in front of a select should not cause an error\n-select * from sys.systables where 1=0;\n--- this is a comment, a comment in front of a values clauses should not cause an error\n-values(1);\n-\n--- Try some URL attributes\n-disconnect all;\n-connect 'jdbc:derby:net://localhost:1527/junk;create=true:retrieveMessagesFromServerOnGetMessage=true;' USER 'dbadmin' PASSWORD 'dbadbmin';\n-select * from APP.notthere;\n-\n-\n--- examples from the docs\n-\n-connect 'jdbc:derby:net://localhost:1527/wombat;create=true:user=judy;password=judy;retrieveMessagesFromServerOnGetMessage=true;';\n-\n-connect 'jdbc:derby:net://localhost:1527/\"./wombat\":user=judy;password=judy;retrieveMessagesFromServerOnGetMessage=true;';\n-\n-connect 'jdbc:derby:net://localhost:1527/toursDB:retrieveMessagesFromServerOnGetMessage=true;';\n-\n-\n-connect 'jdbc:derby:net://localhost:1527/toursDB:retrieveMessagesFromServerOnGetMessage=true;' USER 'dbadmin' PASSWORD 'dbadbmin';\n-\n-connect 'jdbc:derby:net://localhost:1527/wombat' USER 'APP' PASSWORD 'APP';\n-\n-connect  'jdbc:derby:net://localhost:1527/my-db-name;create=true:user=usr;password=pwd;retrieveMessagesFromServerOnGetMessage=true;';\n-\n-connect 'jdbc:derby:net://localhost:1527/my-db-name;upgrade=true:user=usr;password=pwd;retrieveMessagesFromServerOnGetMessage=true;';\n-\n-\n-connect 'jdbc:derby:net://localhost:1527/my-db-name;shutdown=true:user=usr;password=pwd;'\n-\n--- Quoted db and attributes\n-connect 'jdbc:derby:net://localhost:1527/\"./my-dbname;create=true\":user=usr;password=pwd;';\n-\n-connect 'jdbc:derby:net://localhost:1527/\"./my-dbname;create=true\":user=usr;password=pwd;retrieveMessagesFromServerOnGetMessage=true;';\n-\n-\n--- with no user\n-connect 'jdbc:derby:net://localhost:1527/wombat;create=true:retrieveMessagesFromServerOnGetMessage=true;';\n-"
            },
            {
                "sha": "8e396ffd9aaddfea57a52446f255ed3b7019b69d",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_app.properties",
                "status": "removed",
                "additions": 0,
                "deletions": 12,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_app.properties",
                "raw_url": "https://github.com/apache/derby/raw/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_app.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_app.properties?ref=93ce86581eee70c7122e4e7560378f64bd3c31aa",
                "patch": "@@ -1,12 +0,0 @@\n-\n-supportfiles=tests/derbynet/testij.sql,tests/derbynet/testclientij.sql\n-useextdirs=true\n-\n-#exclude with SecurityManager\n-# test execs another jvm with a relative path that means\n-# the permission FilePermission(\"<<ALL FILES>>\",\"execute\")\n-# would be required. Don't want to grant such a wide permission\n-# to the testing jar.\n-noSecurityManager=true\n-\n-"
            },
            {
                "sha": "c4ff5d5944930fa13e9c3c0cec7b46f5e977edcd",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_sed.properties",
                "status": "removed",
                "additions": 0,
                "deletions": 17,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_sed.properties",
                "raw_url": "https://github.com/apache/derby/raw/93ce86581eee70c7122e4e7560378f64bd3c31aa/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_sed.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij_sed.properties?ref=93ce86581eee70c7122e4e7560378f64bd3c31aa",
                "patch": "@@ -1,17 +0,0 @@\n-# Filters and substitutes for SED\n-# Multiple patterns for DELETE: comma separated\n-#   delete=pattern1,pattern2,...,patternn\n-# No commas can be allowed in the patterns.\n-#\n-# Multiple patterns for SUBSTITUTE: comma separated <pattern;substitute> pair\n-#   substitute=pattern1;substitute1,pattern2;substitute2,...,patternn;substitut\n-en\n-# No commas or semicolons can be allowed in the patterns/subsitutes.\n--------------------------------------------------------------------------------\n---\n-substitute=(server log.*);(server log XXX),Required user property not set;null userid not supported,org.apache.derby.tools.ij.*;org.apache.derby.tools.ij xxxFILTERED_TESTIJSOURCExxx\n-\n-\n-\n-\n-"
            },
            {
                "sha": "ad3f221e82360a1a37de9c90e0a15a5ba8e2ce86",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/util/IjTestCase.java",
                "status": "added",
                "additions": 110,
                "deletions": 0,
                "changes": 110,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/util/IjTestCase.java",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/testing/org/apache/derbyTesting/functionTests/util/IjTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/util/IjTestCase.java?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "patch": "@@ -0,0 +1,110 @@\n+/*\n+ * Derby - Class org.apache.derbyTesting.functionTests.util.ExecIjTestCase\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, \n+ * software distributed under the License is distributed on an \n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, \n+ * either express or implied. See the License for the specific \n+ * language governing permissions and limitations under the License.\n+ */\n+\n+package org.apache.derbyTesting.functionTests.util;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.OutputStream;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import org.apache.derby.tools.ij;\n+\n+/**\n+ * Run a .sql script via ij's main method and compare with a canon.\n+ */\n+public class IjTestCase extends ScriptTestCase {\n+\n+\tString scriptName;\n+\tString outfileName;\n+    File outfile;\n+\t\n+    /**\n+     * Create a script testcase that runs the .sql script with the\n+     * given name. The name should not include the \".sql\" suffix.\n+     */\n+\tpublic IjTestCase(String name) {\n+\t\tsuper(name);\n+\t\tscriptName = getName() + \".sql\";\n+\t\toutfileName = \"system\" + File.separator + getName() + \".out\";\n+\t\toutfile = new File(outfileName);\n+\t}\n+\t\n+\tpublic void setUp() throws Exception{\n+\t    super.setUp();\n+\t\tsetSystemProperty(\"ij.outfile\", outfileName);\n+\t\tsetSystemProperty(\"ij.defaultResourcePackage\",\n+\t\t\t\t\"/org/apache/derbyTesting/functionTests/tests/\"\n+\t\t\t\t+ getArea() + File.separator);\n+\t}\n+\t\n+\tpublic void tearDown() throws Exception {\n+\t\tsuper.tearDown();\n+\t\tremoveSystemProperty(\"ij.outfile\");\n+\t\tremoveSystemProperty(\"ij.defaultResourcePackage\");\n+\t}\n+\t\n+\t/**\n+\t * Run a .sql test, calling ij's main method.\n+\t * Then, take the output filre and read it into our OutputStream\n+\t * so that it can be compared via compareCanon().\n+\t */\n+\tpublic void runTest() throws Throwable {\n+\t\tString [] args = { \"-fr\", scriptName };\n+\t\tij.main(args);\n+\t\t\n+\t\tString canon =\n+\t\t\t\"org/apache/derbyTesting/functionTests/master/\"\n+\t\t\t+ getName() + \".out\";\n+\t\t\n+\t\tfinal File out = outfile;\n+\t\tFileInputStream fis = (FileInputStream) AccessController.doPrivileged(new PrivilegedAction() {\n+\t\t\tpublic Object run() {\n+\t\t\t\tFileInputStream fis = null;\n+\t\t\t\ttry {\n+\t\t\t\t\tfis = new FileInputStream(out);\n+\t\t\t\t} catch (FileNotFoundException e) {\n+\t\t\t\t\tfail(\"Could not open ij output file.\");\n+\t\t\t\t}\t\t\t\t\n+\t\t\t\treturn fis;\n+\t\t\t}\n+\t\t});\n+\t\tOutputStream os = getOutputStream();\n+\t\tint b;\n+\t\twhile ((b = fis.read()) != -1) {\n+\t\t\tos.write(b);\n+\t\t}\n+\t\tfis.close();\n+\t\t\n+\t\tBoolean deleted = (Boolean) AccessController.doPrivileged(new PrivilegedAction() {\n+\t\t\tpublic Object run() {\n+\t\t\t\tboolean d = outfile.delete();\n+\t\t\t\t\n+\t\t\t\treturn new Boolean(d);\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tif (!deleted.booleanValue())\n+\t\t\tprintln(\"Could not delete outfile for \" + scriptName);\n+\t\t\n+\t\tthis.compareCanon(canon);\n+\t}\n+}"
            },
            {
                "sha": "6462e516bc47be38a8ea898ac5d3e5f79b4696ad",
                "filename": "java/tools/org/apache/derby/impl/tools/ij/ConnectionEnv.java",
                "status": "modified",
                "additions": 8,
                "deletions": 2,
                "changes": 10,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/ConnectionEnv.java",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/ConnectionEnv.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/tools/org/apache/derby/impl/tools/ij/ConnectionEnv.java?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "patch": "@@ -28,6 +28,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.util.Enumeration;\n import java.util.Properties;\n \n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.SQLException;\n@@ -64,8 +66,12 @@ void init(LocalizedOutput out) throws SQLException, ClassNotFoundException, Inst\n \t\t// only load up ij.connection.* properties if there is\n \t\t// only one ConnectionEnv in the system.\n \t\tif (only) {\n-\t\t    Properties p = System.getProperties();\n-\t\t    protocol = p.getProperty(ij.PROTOCOL_PROPERTY);\n+            Properties p = (Properties) AccessController.doPrivileged(new PrivilegedAction() {\n+            \tpublic Object run() {\n+                \treturn System.getProperties();\n+            \t}\n+            });\n+            protocol = p.getProperty(ij.PROTOCOL_PROPERTY);\n \n \t        String prefix = CONNECTION_PROPERTY + \".\";\n \t\t    for (Enumeration e = p.propertyNames(); e.hasMoreElements(); )"
            },
            {
                "sha": "ea55353a3667e4f577a67d983e8a60209f8e1445",
                "filename": "java/tools/org/apache/derby/impl/tools/ij/Main.java",
                "status": "modified",
                "additions": 20,
                "deletions": 7,
                "changes": 27,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/Main.java",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/Main.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/tools/org/apache/derby/impl/tools/ij/Main.java?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "patch": "@@ -37,6 +37,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.io.UnsupportedEncodingException;\n import java.io.IOException;\n \n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.sql.Connection;\n import java.sql.SQLException;\n \n@@ -132,15 +134,25 @@ public static void mainCore(String[] args, Main main)\n                     }\n                 }\n \n-\t\tString outFile = util.getSystemProperty(\"ij.outfile\");\n+\t\tfinal String outFile = util.getSystemProperty(\"ij.outfile\");\n \t\tif (outFile != null && outFile.length()>0) {\n \t\t\tLocalizedOutput oldOut = out;\n-\t\t\ttry {\n-\t\t\t\tout = langUtil.getNewOutput(new FileOutputStream(outFile));\n-\t\t\t}\n-\t\t\tcatch (IOException ioe) {\n-\t\t\t\toldOut.println(langUtil.getTextMessage(\"IJ_IjErroUnabTo\",outFile));\n-\t\t\t}\n+\t\t\tFileOutputStream fos = (FileOutputStream) AccessController.doPrivileged(new PrivilegedAction() {\n+\t\t\t\tpublic Object run() {\n+\t\t\t\t\tFileOutputStream out = null;\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tout = new FileOutputStream(outFile);\n+\t\t\t\t\t} catch (FileNotFoundException e) {\n+\t\t\t\t\t\tout = null;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn out;\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\tout = langUtil.getNewOutput(fos);\n+\n+\t\t\tif (out == null)\n+\t\t\t   oldOut.println(langUtil.getTextMessage(\"IJ_IjErroUnabTo\",outFile));\n+\t\n \t\t}\n \n \t\t// the old property name is deprecated...\n@@ -238,4 +250,5 @@ private void initAppUI(){\n \t\t// adjust the application in accordance with derby.ui.locale and derby.ui.codeset\n \tLocalizedResource.getInstance();\t\n   }\n+  \n }"
            },
            {
                "sha": "eda2a2e024c58a4461be02cc820e6b39cfb81689",
                "filename": "java/tools/org/apache/derby/impl/tools/ij/ij.jj",
                "status": "modified",
                "additions": 12,
                "deletions": 3,
                "changes": 15,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/ij.jj",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/ij.jj",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/tools/org/apache/derby/impl/tools/ij/ij.jj?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "patch": "@@ -47,6 +47,8 @@ import org.apache.derby.iapi.services.info.JVMInfo;\n import org.apache.derby.tools.URLCheck;\n \n import java.lang.reflect.*;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n import java.sql.DriverManager;\n@@ -98,14 +100,16 @@ import java.util.Locale;\n  */\n class ij {\n \tstatic final String PROTOCOL_PROPERTY = \"ij.protocol\";\n-    static final String USER_PROPERTY = \"ij.user\";\n+    static final String URLCHECK_PROPERTY = \"ij.URLCheck\";\n+\tstatic final String USER_PROPERTY = \"ij.user\";\n     static final String PASSWORD_PROPERTY = \"ij.password\";\n \tstatic final String FRAMEWORK_PROPERTY = \"framework\";\n \n \tboolean\t\t\telapsedTime = false;\n \n \tConnection theConnection = null;\n \tConnectionEnv currentConnEnv = null;\n+\tString urlCheck = null;\n \n \txaAbstractHelper xahelper = null;\n \tboolean exit = false;\n@@ -138,7 +142,12 @@ class ij {\n \n \t\t// load all protocols specified via properties\n \t\t//\n-\t\tProperties p = System.getProperties();\n+        Properties p = (Properties) AccessController.doPrivileged(new PrivilegedAction() {\n+          \tpublic Object run() {\n+              \treturn System.getProperties();\n+            }\n+        });\n+        urlCheck = p.getProperty(URLCHECK_PROPERTY);\n \t\tprotocol = p.getProperty(PROTOCOL_PROPERTY);\n \t\tString framework_property = p.getProperty(FRAMEWORK_PROPERTY);\n \t\t\n@@ -1473,7 +1482,7 @@ throws SQLException\n                         }\n \t\t\t// By default perform extra checking on the URL attributes.\n \t\t\t// This checking does not change the processing.\n-                        if (System.getProperty(\"ij.URLCheck\") == null || Boolean.getBoolean(\"ij.URLCheck\")) {\n+\t\t\tif (urlCheck == null || Boolean.valueOf(urlCheck).booleanValue()) {\n                           URLCheck aCheck = new URLCheck(sVal);\n                         }\n \t\tif (!sVal.startsWith(\"jdbc:\") && (p == null) && (protocol != null)) {"
            },
            {
                "sha": "12637ef61e8900615c6783345702a64ceabd2871",
                "filename": "java/tools/org/apache/derby/impl/tools/ij/util.java",
                "status": "modified",
                "additions": 14,
                "deletions": 4,
                "changes": 18,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/util.java",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/util.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/tools/org/apache/derby/impl/tools/ij/util.java?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "patch": "@@ -31,6 +31,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.io.IOException;\n import java.lang.reflect.InvocationTargetException;\n \n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.SQLException;\n@@ -219,11 +221,19 @@ resourceName is not absolute (does not begin with a \"/\") this qualifies\n \t  */\n \tstatic public InputStream getResourceAsStream(String resourceName) \n \t{\n-\t\tClass c= util.class;\n-\t\tresourceName = qualifyResourceName(resourceName,true);\n-\t\tif (resourceName == null) \n+\t\tfinal Class c = util.class;\n+\t\tfinal String resource = qualifyResourceName(resourceName,true);\n+\t\tif (resource == null) \n \t\t\treturn null;\n-\t\tInputStream is = c.getResourceAsStream(resourceName);\n+\t\tInputStream is = (InputStream) AccessController.doPrivileged(new PrivilegedAction() {\n+            public Object run() { \n+                      InputStream locis = \n+                          c.getResourceAsStream(resource);\n+                                  return locis;\n+            }\n+        }\n+     );\n+\n \t\tif (is != null) \n \t\t\tis = new BufferedInputStream(is, utilMain.BUFFEREDFILESIZE);\n \t\treturn is;"
            },
            {
                "sha": "cf2e9307d00e3d28e4d89219ffcb076ed47847cd",
                "filename": "java/tools/org/apache/derby/impl/tools/ij/utilMain.java",
                "status": "modified",
                "additions": 17,
                "deletions": 3,
                "changes": 20,
                "blob_url": "https://github.com/apache/derby/blob/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/utilMain.java",
                "raw_url": "https://github.com/apache/derby/raw/38520af26380540185da2b4af4f153eb84e59c39/java/tools/org/apache/derby/impl/tools/ij/utilMain.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/tools/org/apache/derby/impl/tools/ij/utilMain.java?ref=38520af26380540185da2b4af4f153eb84e59c39",
                "patch": "@@ -42,6 +42,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.io.BufferedInputStream;\n import java.io.FileNotFoundException;\n import java.io.StringReader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.sql.DriverManager;\n import java.sql.Driver;\n import java.sql.Connection;\n@@ -248,13 +250,25 @@ public void go(LocalizedInput[] in, LocalizedOutput out,\n \n       \t\t//check if the property is set to not show select count and set the static variable\n       \t\t//accordingly. \n-    \t\tboolean showNoCountForSelect = Boolean.getBoolean(\"ij.showNoCountForSelect\");\n+    \t\t//boolean showNoCountForSelect = Boolean.getBoolean(\"ij.showNoCountForSelect\");\n+    \t\tString prop = (String) AccessController.doPrivileged(new PrivilegedAction() {\n+    \t\t\t\t\tpublic Object run() {\n+    \t\t\t\t\t\treturn System.getProperty(\"ij.showNoCountForSelect\");\n+    \t\t\t\t\t}\n+    \t\t});\n+    \t\tboolean showNoCountForSelect = Boolean.valueOf(prop).booleanValue();\n       \t\tJDBCDisplayUtil.showSelectCount = !showNoCountForSelect;\n \n       \t\t//check if the property is set to not show initial connections and accordingly set the\n       \t\t//static variable.\n-    \t\tboolean showNoConnectionsAtStart = Boolean.getBoolean(\"ij.showNoConnectionsAtStart\");\n-      \t\tif (!(showNoConnectionsAtStart)) {\n+    \t\tprop = (String) AccessController.doPrivileged(new PrivilegedAction() {\n+\t\t\t\tpublic Object run() {\n+\t\t\t\t\treturn System.getProperty(\"ij.showNoConnectionsAtStart\");\n+\t\t\t\t}\n+         \t});\n+    \t\tboolean showNoConnectionsAtStart = Boolean.valueOf(prop).booleanValue();\n+\n+    \t\tif (!(showNoConnectionsAtStart)) {\n          \t\ttry {\n            \t\t\tijResult result = ijParser.showConnectionsMethod(true);\n  \t\t\t\t\tdisplayResult(out,result,connEnv[currCE].getConnection());"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/5c058ac183999dd0530f3b658a0b7c61fef8a73a",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/cd4ba4a7e0eb8db4271599e9cf946b5f01dca6a1",
        "message": "DERBY-1849 - grantRevokeDDL and grantRevokeDDL2.sql fail with ibm wctme5.7_foundation (jdkJ2ME Spec v1.0)\n- accepting that triggers are not supported with this jvm\n- updated masters to latest syntax changes in test\n- stopped NPE by adding ij.dataSource properties to grantRevokeDDL2.out\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@476425 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_136",
        "file": [
            {
                "sha": "e786a8f9b2f64630443818fee339fe61729d4caf",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/j9_foundation/grantRevokeDDL.out",
                "status": "modified",
                "additions": 2792,
                "deletions": 66,
                "changes": 2858,
                "blob_url": "https://github.com/apache/derby/blob/5c058ac183999dd0530f3b658a0b7c61fef8a73a/java/testing/org/apache/derbyTesting/functionTests/master/j9_foundation/grantRevokeDDL.out",
                "raw_url": "https://github.com/apache/derby/raw/5c058ac183999dd0530f3b658a0b7c61fef8a73a/java/testing/org/apache/derbyTesting/functionTests/master/j9_foundation/grantRevokeDDL.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/j9_foundation/grantRevokeDDL.out?ref=5c058ac183999dd0530f3b658a0b7c61fef8a73a"
            },
            {
                "sha": "e7faa47847e0c82afa3395486ed8b6afa5c3d46e",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/j9_foundation/grantRevokeDDL2.out",
                "status": "added",
                "additions": 1915,
                "deletions": 0,
                "changes": 1915,
                "blob_url": "https://github.com/apache/derby/blob/5c058ac183999dd0530f3b658a0b7c61fef8a73a/java/testing/org/apache/derbyTesting/functionTests/master/j9_foundation/grantRevokeDDL2.out",
                "raw_url": "https://github.com/apache/derby/raw/5c058ac183999dd0530f3b658a0b7c61fef8a73a/java/testing/org/apache/derbyTesting/functionTests/master/j9_foundation/grantRevokeDDL2.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/j9_foundation/grantRevokeDDL2.out?ref=5c058ac183999dd0530f3b658a0b7c61fef8a73a",
                "patch": "@@ -0,0 +1,1915 @@\n+WARNING 01J14: SQL authorization is being used without first enabling authentication.\n+ij> --\n+--   Licensed to the Apache Software Foundation (ASF) under one or more\n+--   contributor license agreements.  See the NOTICE file distributed with\n+--   this work for additional information regarding copyright ownership.\n+--   The ASF licenses this file to You under the Apache License, Version 2.0\n+--   (the \"License\"); you may not use this file except in compliance with\n+--   the License.  You may obtain a copy of the License at\n+--\n+--      http://www.apache.org/licenses/LICENSE-2.0\n+--\n+--   Unless required by applicable law or agreed to in writing, software\n+--   distributed under the License is distributed on an \"AS IS\" BASIS,\n+--   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+--   See the License for the specific language governing permissions and\n+--   limitations under the License.\n+--\n+-- ------------------------------------------------------------------- \n+-- GRANT and REVOKE test Part 2\n+-- -------------------------------------------------------------------\n+connect 'grantRevokeDDL2;create=true' user 'user1' as user1;\n+WARNING 01J14: SQL authorization is being used without first enabling authentication.\n+ij(USER1)> connect 'grantRevokeDDL2' user 'user2' as user2;\n+WARNING 01J14: SQL authorization is being used without first enabling authentication.\n+ij(USER2)> connect 'grantRevokeDDL2' user 'user3' as user3;\n+WARNING 01J14: SQL authorization is being used without first enabling authentication.\n+ij(USER3)> connect 'grantRevokeDDL2' user 'user4' as user4;\n+WARNING 01J14: SQL authorization is being used without first enabling authentication.\n+ij(USER4)> connect 'grantRevokeDDL2' user 'user5' as user5;\n+WARNING 01J14: SQL authorization is being used without first enabling authentication.\n+ij(USER5)> -- DERBY-1729\n+-- test grant and revoke in Java stored procedure with triggers.\n+-- Java stored procedure that contains grant or revoke statement \n+-- requires MODIFIES SQL DATA to execute.\n+-- Since only 2 of the 8 Java stored procedures(which contains\n+-- grant or revoke statement) are declared with MODIFIES SQL DATA, \n+-- the rest are expected to fail in this test.\n+-- setup the environment\n+set connection user1;\n+ij(USER1)> -- table used in the procedures\n+drop table t1;\n+ERROR: Failed with SQLSTATE 42Y07\n+ij(USER1)> create table t1 (i int primary key, b char(15));\n+0 rows inserted/updated/deleted\n+ij(USER1)> insert into t1 values (1, 'XYZ');\n+1 row inserted/updated/deleted\n+ij(USER1)> insert into t1 values (2, 'XYZ');\n+1 row inserted/updated/deleted\n+ij(USER1)> insert into t1 values (3, 'XYZ');\n+1 row inserted/updated/deleted\n+ij(USER1)> insert into t1 values (4, 'XYZ');\n+1 row inserted/updated/deleted\n+ij(USER1)> insert into t1 values (5, 'XYZ');\n+1 row inserted/updated/deleted\n+ij(USER1)> insert into t1 values (6, 'XYZ');\n+1 row inserted/updated/deleted\n+ij(USER1)> insert into t1 values (7, 'XYZ');\n+1 row inserted/updated/deleted\n+ij(USER1)> insert into t1 values (8, 'XYZ');\n+1 row inserted/updated/deleted\n+ij(USER1)> -- table used in this test\n+drop table t2;\n+ERROR: Failed with SQLSTATE 42Y55\n+ij(USER1)> create table t2 (x integer, y integer);\n+0 rows inserted/updated/deleted\n+ij(USER1)> create procedure grant_select_proc1() \n+       parameter style java\n+       dynamic result sets 0 language java \n+       NO SQL\n+       external name 'org.apache.derbyTesting.functionTests.util.ProcedureTest.grantSelect';\n+0 rows inserted/updated/deleted\n+ij(USER1)> create procedure grant_select_proc2() \n+       parameter style java\n+       dynamic result sets 0 language java \n+       CONTAINS SQL\n+       external name 'org.apache.derbyTesting.functionTests.util.ProcedureTest.grantSelect';\n+0 rows inserted/updated/deleted\n+ij(USER1)> create procedure grant_select_proc3() \n+       parameter style java\n+       dynamic result sets 0 language java \n+       READS SQL DATA \n+       external name 'org.apache.derbyTesting.functionTests.util.ProcedureTest.grantSelect';\n+0 rows inserted/updated/deleted\n+ij(USER1)> create procedure grant_select_proc4() \n+       parameter style java\n+       dynamic result sets 0 language java \n+       MODIFIES SQL DATA  \n+       external name 'org.apache.derbyTesting.functionTests.util.ProcedureTest.grantSelect';\n+0 rows inserted/updated/deleted\n+ij(USER1)> create procedure revoke_select_proc1() \n+       parameter style java\n+       dynamic result sets 0 language java \n+       NO SQL  \n+       external name 'org.apache.derbyTesting.functionTests.util.ProcedureTest.revokeSelect';\n+0 rows inserted/updated/deleted\n+ij(USER1)> create procedure revoke_select_proc2() \n+       parameter style java\n+       dynamic result sets 0 language java \n+       CONTAINS SQL  \n+       external name 'org.apache.derbyTesting.functionTests.util.ProcedureTest.revokeSelect';\n+0 rows inserted/updated/deleted\n+ij(USER1)> create procedure revoke_select_proc3() \n+       parameter style java\n+       dynamic result sets 0 language java \n+       READS SQL DATA \n+       external name 'org.apache.derbyTesting.functionTests.util.ProcedureTest.revokeSelect';\n+0 rows inserted/updated/deleted\n+ij(USER1)> create procedure revoke_select_proc4() \n+       parameter style java\n+       dynamic result sets 0 language java \n+       MODIFIES SQL DATA \n+       external name 'org.apache.derbyTesting.functionTests.util.ProcedureTest.revokeSelect';\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- tests\n+create trigger grant_select_trig AFTER delete on t1 \n+\tfor each STATEMENT call grant_select_proc1();\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- should fail\n+delete from t1 where i = 1;\n+ERROR: Failed with SQLSTATE 38000\n+ERROR: Failed with SQLSTATE XJ001\n+ij(USER1)> -- check delete failed\n+select * from t1 where i = 1;\n+I          |B              \n+---------------------------\n+1          |XYZ            \n+1 row selected\n+ij(USER1)> drop trigger grant_select_trig;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- should fail\n+select * from user1.t1 where i = 1;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> set connection user1;\n+ij(USER1)> create trigger grant_select_trig AFTER delete on t1 \n+\tfor each STATEMENT call grant_select_proc2();\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- should fail\n+delete from t1 where i = 2;\n+ERROR: Failed with SQLSTATE 38000\n+ERROR: Failed with SQLSTATE XJ001\n+ij(USER1)> -- check delete failed\n+select * from t1 where i = 2;\n+I          |B              \n+---------------------------\n+2          |XYZ            \n+1 row selected\n+ij(USER1)> drop trigger grant_select_trig;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- should fail\n+select * from user1.t1 where i = 1;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> set connection user1;\n+ij(USER1)> create trigger grant_select_trig AFTER delete on t1 \n+\tfor each STATEMENT call grant_select_proc3();\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- should fail\n+delete from t1 where i = 3;\n+ERROR: Failed with SQLSTATE 38000\n+ERROR: Failed with SQLSTATE XJ001\n+ij(USER1)> -- check delete failed\n+select * from t1 where i = 3;\n+I          |B              \n+---------------------------\n+3          |XYZ            \n+1 row selected\n+ij(USER1)> drop trigger grant_select_trig;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- should fail\n+select * from user1.t1 where i = 1;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> set connection user1;\n+ij(USER1)> create trigger grant_select_trig AFTER delete on t1 \n+\tfor each STATEMENT call grant_select_proc4();\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- ok\n+delete from t1 where i = 4;\n+ERROR: Failed with SQLSTATE 38000\n+ERROR: Failed with SQLSTATE XJ001\n+ij(USER1)> -- check delete\n+select * from t1 where i = 4;\n+I          |B              \n+---------------------------\n+4          |XYZ            \n+1 row selected\n+ij(USER1)> drop trigger grant_select_trig;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- should be successful\n+select * from user1.t1 where i = 1;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> set connection user1;\n+ij(USER1)> create trigger revoke_select_trig AFTER delete on t1 \n+\tfor each STATEMENT call revoke_select_proc1();\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- should fail\n+delete from t1 where i = 5;\n+ERROR: Failed with SQLSTATE 38000\n+ERROR: Failed with SQLSTATE XJ001\n+ij(USER1)> -- check delete failed\n+select * from t1 where i = 5;\n+I          |B              \n+---------------------------\n+5          |XYZ            \n+1 row selected\n+ij(USER1)> drop trigger revoke_select_trig;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- should be successful\n+select * from user1.t1 where i = 1;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> set connection user1;\n+ij(USER1)> create trigger revoke_select_trig AFTER delete on t1 \n+\tfor each STATEMENT call revoke_select_proc2();\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- should fail\n+delete from t1 where i = 6;\n+ERROR: Failed with SQLSTATE 38000\n+ERROR: Failed with SQLSTATE XJ001\n+ij(USER1)> -- check delete failed\n+select * from t1 where i = 6;\n+I          |B              \n+---------------------------\n+6          |XYZ            \n+1 row selected\n+ij(USER1)> drop trigger revoke_select_trig;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- should be successful\n+select * from user1.t1 where i = 1;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> set connection user1;\n+ij(USER1)> create trigger revoke_select_trig AFTER delete on t1 \n+\tfor each STATEMENT call revoke_select_proc3();\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- should fail\n+delete from t1 where i = 7;\n+ERROR: Failed with SQLSTATE 38000\n+ERROR: Failed with SQLSTATE XJ001\n+ij(USER1)> -- check delete failed\n+select * from t1 where i = 7;\n+I          |B              \n+---------------------------\n+7          |XYZ            \n+1 row selected\n+ij(USER1)> drop trigger revoke_select_trig;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- should be successful\n+select * from user1.t1 where i = 1;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> set connection user1;\n+ij(USER1)> create trigger revoke_select_trig AFTER delete on t1 \n+\tfor each STATEMENT call revoke_select_proc4();\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- ok\n+delete from t1 where i = 8;\n+ERROR: Failed with SQLSTATE 38000\n+ERROR: Failed with SQLSTATE XJ001\n+ij(USER1)> -- check delete \n+select * from t1 where i = 8;\n+I          |B              \n+---------------------------\n+8          |XYZ            \n+1 row selected\n+ij(USER1)> drop trigger revoke_select_trig;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- should fail\n+select * from user1.t1 where i = 1;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> set connection user1;\n+ij(USER1)> drop table t2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> drop table t1;\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- -------------------------------------------------------------------\n+-- table privileges (tp)\n+-- -------------------------------------------------------------------\n+set connection user1;\n+ij(USER1)> create table t1 (c1 int primary key not null, c2 varchar(10));\n+0 rows inserted/updated/deleted\n+ij(USER1)> create table t2 (c1 int primary key not null, c2 varchar(10), c3 int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> create index idx1 on t1(c2);\n+0 rows inserted/updated/deleted\n+ij(USER1)> insert into t1 values (1, 'a'), (2, 'b'), (3, 'c');\n+3 rows inserted/updated/deleted\n+ij(USER1)> insert into t2 values (1, 'Yip', 10);\n+1 row inserted/updated/deleted\n+ij(USER1)> select * from t1;\n+C1         |C2        \n+----------------------\n+1          |a         \n+2          |b         \n+3          |c         \n+3 rows selected\n+ij(USER1)> CREATE FUNCTION F_ABS1(P1 INT)\n+\tRETURNS INT NO SQL\n+\tRETURNS NULL ON NULL INPUT\n+\tEXTERNAL NAME 'java.lang.Math.abs'\n+\tLANGUAGE JAVA PARAMETER STYLE JAVA;\n+0 rows inserted/updated/deleted\n+ij(USER1)> values f_abs1(-5);\n+1          \n+-----------\n+5          \n+1 row selected\n+ij(USER1)> -- grant on a non-existing table, expect error\n+grant select on table t0 to user2;\n+ERROR: Failed with SQLSTATE 42X05\n+ij(USER1)> -- revoke on a non-existing table, expect error\n+revoke select on table t0 from user2;\n+ERROR: Failed with SQLSTATE 42X05\n+ij(USER1)> -- grant more than one table, expect error\n+grant select on t0, t1 to user2;\n+ERROR: Failed with SQLSTATE 42X01\n+ij(USER1)> -- revoke more than one table, expect error\n+revoke select on t0, t1 from user2;\n+ERROR: Failed with SQLSTATE 42X01\n+ij(USER1)> -- revoking privilege that has not been granted, expect warning\n+revoke select,insert,update,delete,trigger,references on t1 from user2;\n+0 rows inserted/updated/deleted\n+WARNING 01006: Privilege not revoked from user USER2.\n+ij(USER1)> -- syntax errors, expect errors\n+grant select on t1 from user2;\n+ERROR: Failed with SQLSTATE 42X01\n+ij(USER1)> revoke select on t1 to user2;\n+ERROR: Failed with SQLSTATE 42X01\n+ij(USER1)> -- redundant but ok\n+grant select, select on t1 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> revoke select, select on t1 from user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- switch to user2\n+set connection user2;\n+ij(USER2)> -- test SELECT privilege, expect error\n+select * from user1.t1;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> -- test INSERT privilege, expect error\n+insert into user1.t1(c1) values 4;\n+ERROR: Failed with SQLSTATE 28506\n+ij(USER2)> -- test UPDATE privilege, expect error\n+update user1.t1 set c1=10;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> -- test DELETE privilege, expect error\n+delete from user1.t1;\n+ERROR: Failed with SQLSTATE 28506\n+ij(USER2)> -- test REFERENCES privilege, expect error\n+create table t2 (c1 int primary key not null, c2 int references user1.t1);\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> -- test TRIGGER privilege, expect error\n+create trigger trigger1 after update on user1.t1 for each statement values integer('123');\n+ERROR: Failed with SQLSTATE 28506\n+ij(USER2)> -- try to DROP user1.idx1 index, expect error\n+drop index user1.idx1;\n+ERROR: Failed with SQLSTATE 2850D\n+ij(USER2)> -- try to DROP user1.t1 table, expect error\n+drop table user1.t1;\n+ERROR: Failed with SQLSTATE 2850D\n+ij(USER2)> -- non privileged user try to grant privileges on user1.t1, expect error\n+grant select,insert,delete,update,references,trigger on user1.t1 to user2;\n+ERROR: Failed with SQLSTATE 2850C\n+ij(USER2)> -- try to grant privileges for public on user1.t1, expect error\n+grant select,insert,delete,update,references,trigger on user1.t1 to public;\n+ERROR: Failed with SQLSTATE 2850C\n+ij(USER2)> -- try to grant all privileges for user2 on user1.t1, expect error\n+grant ALL PRIVILEGES on user1.t1 to user2;\n+ERROR: Failed with SQLSTATE 2850C\n+ij(USER2)> -- try to grant all privileges on user1.t1 to public, expect error\n+grant ALL PRIVILEGES on user1.t1 to public;\n+ERROR: Failed with SQLSTATE 2850C\n+ij(USER2)> -- try to revoke user1 from table user1.t1, expect error\n+revoke select,insert,delete,update,references,trigger on user1.t1 from user1;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER2)> -- try to revoke all privileges from user1 on table user1.t1, expect error\n+revoke ALL PRIVILEGES on user1.t1 from user1;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER2)> -- try to revoke execute on a non-existing function on user1.t1, expect error\n+revoke execute on function user1.f1 from user1 restrict;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER2)> create table t2 (c1 int);\n+0 rows inserted/updated/deleted\n+ij(USER2)> -- try revoking yourself from user2.t2, expect error\n+revoke select on t2 from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER2)> -- try granting yourself again on user2.t2, expect error. Why?\n+grant select on t2 to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER2)> -- try granting yourself multiple times, expect error.  Why?\n+grant insert on t2 to user2,user2,user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER2)> -- try to execute user1.F_ABS1, expect error\n+values user1.F_ABS1(-9);\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER2)> set connection user1;\n+ij(USER1)> select * from sys.systableperms;\n+TABLEPERMSID                        |GRANTEE                                                                                                                         |GRANTOR                                                                                                                         |TABLEID                             |&|&|&|&|&|&\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+0 rows selected\n+ij(USER1)> select * from sys.syscolperms;\n+COLPERMSID                          |GRANTEE                                                                                                                         |GRANTOR                                                                                                                         |TABLEID                             |&|COLUMNS        \n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+0 rows selected\n+ij(USER1)> select * from sys.sysroutineperms;\n+ROUTINEPERMSID                      |GRANTEE                                                                                                                         |GRANTOR                                                                                                                         |ALIASID                             |&\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+xxxxFILTERED-UUIDxxxx|PUBLIC                                                                                                                          |USER1                                                                                                                           |xxxxFILTERED-UUIDxxxx|N\n+xxxxFILTERED-UUIDxxxx|PUBLIC                                                                                                                          |USER1                                                                                                                           |xxxxFILTERED-UUIDxxxx|N\n+xxxxFILTERED-UUIDxxxx|PUBLIC                                                                                                                          |USER1                                                                                                                           |xxxxFILTERED-UUIDxxxx|N\n+xxxxFILTERED-UUIDxxxx|PUBLIC                                                                                                                          |USER1                                                                                                                           |xxxxFILTERED-UUIDxxxx|N\n+xxxxFILTERED-UUIDxxxx|PUBLIC                                                                                                                          |USER1                                                                                                                           |xxxxFILTERED-UUIDxxxx|N\n+5 rows selected\n+ij(USER1)> grant select,update on table t1 to user2, user3;\n+0 rows inserted/updated/deleted\n+ij(USER1)> grant execute on function F_ABS1 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> select * from sys.systableperms;\n+TABLEPERMSID                        |GRANTEE                                                                                                                         |GRANTOR                                                                                                                         |TABLEID                             |&|&|&|&|&|&\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+xxxxFILTERED-UUIDxxxx|USER2                                                                                                                           |USER1                                                                                                                           |xxxxFILTERED-UUIDxxxx|y|N|N|y|N|N\n+xxxxFILTERED-UUIDxxxx|USER3                                                                                                                           |USER1                                                                                                                           |xxxxFILTERED-UUIDxxxx|y|N|N|y|N|N\n+2 rows selected\n+ij(USER1)> select * from sys.syscolperms;\n+COLPERMSID                          |GRANTEE                                                                                                                         |GRANTOR                                                                                                                         |TABLEID                             |&|COLUMNS        \n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+0 rows selected\n+ij(USER1)> select * from sys.sysroutineperms;\n+ROUTINEPERMSID                      |GRANTEE                                                                                                                         |GRANTOR                                                                                                                         |ALIASID                             |&\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+xxxxFILTERED-UUIDxxxx|PUBLIC                                                                                                                          |USER1                                                                                                                           |xxxxFILTERED-UUIDxxxx|N\n+xxxxFILTERED-UUIDxxxx|PUBLIC                                                                                                                          |USER1                                                                                                                           |xxxxFILTERED-UUIDxxxx|N\n+xxxxFILTERED-UUIDxxxx|PUBLIC                                                                                                                          |USER1                                                                                                                           |xxxxFILTERED-UUIDxxxx|N\n+xxxxFILTERED-UUIDxxxx|PUBLIC                                                                                                                          |USER1                                                                                                                           |xxxxFILTERED-UUIDxxxx|N\n+xxxxFILTERED-UUIDxxxx|PUBLIC                                                                                                                          |USER1                                                                                                                           |xxxxFILTERED-UUIDxxxx|N\n+xxxxFILTERED-UUIDxxxx|USER2                                                                                                                           |USER1                                                                                                                           |xxxxFILTERED-UUIDxxxx|N\n+6 rows selected\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- try to select from t1, ok\n+select * from user1.t1;\n+C1         |C2        \n+----------------------\n+1          |a         \n+2          |b         \n+3          |c         \n+3 rows selected\n+ij(USER2)> -- try to insert from t1, expect error\n+insert into user1.t1 values (5, 'e');\n+ERROR: Failed with SQLSTATE 28506\n+ij(USER2)> -- ok\n+values user1.F_ABS1(-8);\n+1          \n+-----------\n+8          \n+1 row selected\n+ij(USER2)> -- ok\n+update user1.t1 set c2 = 'user2';\n+3 rows inserted/updated/deleted\n+ij(USER2)> set connection user1;\n+ij(USER1)> -- add a column to t1, user2 should still be able to select\n+alter table t1 add column c3 varchar(10);\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- ok\n+select * from user1.t1;\n+C1         |C2        |C3        \n+---------------------------------\n+1          |user2     |NULL      \n+2          |user2     |NULL      \n+3          |user2     |NULL      \n+3 rows selected\n+ij(USER2)> -- error\n+insert into user1.t1 values (2, 'abc', 'ABC');\n+ERROR: Failed with SQLSTATE 28506\n+ij(USER2)> -- ok\n+update user1.t1 set c3 = 'XYZ';\n+3 rows inserted/updated/deleted\n+ij(USER2)> set connection user3;\n+ij(USER3)> -- try to select from t1, ok\n+select * from user1.t1;\n+C1         |C2        |C3        \n+---------------------------------\n+1          |user2     |XYZ       \n+2          |user2     |XYZ       \n+3          |user2     |XYZ       \n+3 rows selected\n+ij(USER3)> -- user3 does not have permission to execute, expect error\n+values user1.F_ABS1(-8);\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> -- ok\n+update user1.t1 set c2 = 'user3';\n+3 rows inserted/updated/deleted\n+ij(USER3)> set connection user1;\n+ij(USER1)> -- expect warnings\n+revoke update(c2) on t1 from user3;\n+0 rows inserted/updated/deleted\n+WARNING 01006: Privilege not revoked from user USER3.\n+ij(USER1)> revoke select(c2) on t1 from user3;\n+0 rows inserted/updated/deleted\n+WARNING 01006: Privilege not revoked from user USER3.\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- ok\n+update user1.t1 set c2 = 'user2';\n+3 rows inserted/updated/deleted\n+ij(USER2)> set connection user3;\n+ij(USER3)> -- revoking part of table privilege raises warning, so ok\n+update user1.t1 set c2 = 'user3';\n+3 rows inserted/updated/deleted\n+ij(USER3)> -- same as above\n+select * from user1.t1;\n+C1         |C2        |C3        \n+---------------------------------\n+1          |user3     |XYZ       \n+2          |user3     |XYZ       \n+3          |user3     |XYZ       \n+3 rows selected\n+ij(USER3)> -- same as above\n+select c2 from user1.t1;\n+C2        \n+----------\n+user3     \n+user3     \n+user3     \n+3 rows selected\n+ij(USER3)> set connection user1;\n+ij(USER1)> grant select, update on t1 to PUBLIC;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user3;\n+ij(USER3)> -- ok, use PUBLIC \n+select * from user1.t1;\n+C1         |C2        |C3        \n+---------------------------------\n+1          |user3     |XYZ       \n+2          |user3     |XYZ       \n+3          |user3     |XYZ       \n+3 rows selected\n+ij(USER3)> -- ok, use PUBLIC \n+update user1.t1 set c2 = 'user3';\n+3 rows inserted/updated/deleted\n+ij(USER3)> set connection user1;\n+ij(USER1)> grant select on t1 to user3;\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- revoke select from PUBLIC\n+revoke select on t1 from PUBLIC;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user3;\n+ij(USER3)> -- ok, privileged\n+select * from user1.t1;\n+C1         |C2        |C3        \n+---------------------------------\n+1          |user3     |XYZ       \n+2          |user3     |XYZ       \n+3          |user3     |XYZ       \n+3 rows selected\n+ij(USER3)> -- ok, use PUBLIC \n+update user1.t1 set c2 = 'user3';\n+3 rows inserted/updated/deleted\n+ij(USER3)> set connection user1;\n+ij(USER1)> revoke select, update on t1 from user3;\n+0 rows inserted/updated/deleted\n+ij(USER1)> revoke update on t1 from PUBLIC;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user3;\n+ij(USER3)> -- expect error\n+select * from user1.t1;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER3)> -- expect error \n+update user1.t1 set c2 = 'user3';\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER3)> set connection user1;\n+ij(USER1)> declare global temporary table SESSION.t1(c1 int) not logged;\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- expect error\n+grant select on session.t1 to user2;\n+ERROR: Failed with SQLSTATE XCL51\n+ij(USER1)> revoke select on session.t1 from user2;\n+ERROR: Failed with SQLSTATE XCL51\n+ij(USER1)> -- -------------------------------------------------------------------\n+-- column privileges \n+-- -------------------------------------------------------------------\n+set connection user1;\n+ij(USER1)> create table t3 (c1 int, c2 varchar(10), c3 int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> create table t4 (c1 int, c2 varchar(10), c3 int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- grant table select privilege then revoke partially \n+grant select, update on t3 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- expect warning\n+revoke select(c1) on t3 from user2;\n+0 rows inserted/updated/deleted\n+WARNING 01006: Privilege not revoked from user USER2.\n+ij(USER1)> revoke update(c2) on t3 from user2;\n+0 rows inserted/updated/deleted\n+WARNING 01006: Privilege not revoked from user USER2.\n+ij(USER1)> set connection user2;\n+ij(USER2)> select * from user1.t3;\n+C1         |C2        |C3         \n+----------------------------------\n+0 rows selected\n+ij(USER2)> set connection user1;\n+ij(USER1)> grant select (c2, c3), update (c2), insert on t4 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- expect error\n+select * from user1.t4;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> -- expect error\n+select c1 from user1.t4;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> -- ok\n+select c2, c3 from user1.t4;\n+C2        |C3         \n+----------------------\n+0 rows selected\n+ij(USER2)> -- expect error\n+update user1.t4 set c1=10, c3=100;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> -- ok\n+update user1.t4 set c2='XYZ';\n+0 rows inserted/updated/deleted\n+ij(USER2)> set connection user1;\n+ij(USER1)> -- DERBY-1847\n+-- alter table t4 add column c4 int;\n+-- set connection user2;\n+-- expect error\n+-- select c4 from user1.t4;\n+-- ok\n+-- select c2 from user1.t4;\n+set connection user1;\n+ij(USER1)> -- revoke all columns\n+revoke select, update on t4 from user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- expect error\n+select c2 from user1.t4;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> -- expect error\n+update user1.t4 set c2='ABC';\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> -- -------------------------------------------------------------------\n+-- schemas\n+-- -------------------------------------------------------------------\n+set connection user2;\n+ij(USER2)> -- expect error\n+create table myschema.t5 (i int);\n+ERROR: Failed with SQLSTATE 2850E\n+ij(USER2)> -- ok\n+create table user2.t5 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER2)> -- expect error\n+CREATE SCHEMA w3 AUTHORIZATION user2;\n+ERROR: Failed with SQLSTATE 2850E\n+ij(USER2)> create table w3.t1 (i int);\n+ERROR: Failed with SQLSTATE 2850E\n+ij(USER2)> -- expect error, already exists\n+CREATE SCHEMA AUTHORIZATION user2;\n+ERROR: Failed with SQLSTATE X0Y68\n+ij(USER2)> -- expect error\n+CREATE SCHEMA myschema;\n+ERROR: Failed with SQLSTATE 2850E\n+ij(USER2)> -- expect error\n+CREATE SCHEMA user2;\n+ERROR: Failed with SQLSTATE X0Y68\n+ij(USER2)> set connection user1;\n+ij(USER1)> -- ok\n+CREATE SCHEMA w3 AUTHORIZATION user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> CREATE SCHEMA AUTHORIZATION user6;\n+0 rows inserted/updated/deleted\n+ij(USER1)> CREATE SCHEMA myschema;\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- DERBY-1858\n+set connection user5;\n+ij(USER5)> -- expect error\n+DROP SCHEMA w3 RESTRICT;\n+ERROR: Failed with SQLSTATE 2850D\n+ij(USER5)> -- -------------------------------------------------------------------\n+-- views\n+-- -------------------------------------------------------------------\n+set connection user1;\n+ij(USER1)> create view sv1 as select * from sys.systables;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- expect error\n+select tablename from user1.sv1;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> set connection user1;\n+ij(USER1)> grant select on sv1 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- ok\n+select tablename from user1.sv1;\n+TABLENAME                                                                                                                       \n+--------------------------------------------------------------------------------------------------------------------------------\n+SYSCONGLOMERATES                                                                                                                \n+SYSTABLES                                                                                                                       \n+SYSCOLUMNS                                                                                                                      \n+SYSSCHEMAS                                                                                                                      \n+SYSCONSTRAINTS                                                                                                                  \n+SYSKEYS                                                                                                                         \n+SYSDEPENDS                                                                                                                      \n+SYSALIASES                                                                                                                      \n+SYSVIEWS                                                                                                                        \n+SYSCHECKS                                                                                                                       \n+SYSFOREIGNKEYS                                                                                                                  \n+SYSSTATEMENTS                                                                                                                   \n+SYSFILES                                                                                                                        \n+SYSTRIGGERS                                                                                                                     \n+SYSSTATISTICS                                                                                                                   \n+SYSDUMMY1                                                                                                                       \n+SYSTABLEPERMS                                                                                                                   \n+SYSCOLPERMS                                                                                                                     \n+SYSROUTINEPERMS                                                                                                                 \n+T1                                                                                                                              \n+T2                                                                                                                              \n+T2                                                                                                                              \n+T3                                                                                                                              \n+T4                                                                                                                              \n+T5                                                                                                                              \n+SV1                                                                                                                             \n+26 rows selected\n+ij(USER2)> set connection user1;\n+ij(USER1)> create table ta (i int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> insert into ta values 1,2,3;\n+3 rows inserted/updated/deleted\n+ij(USER1)> create view sva as select * from ta;\n+0 rows inserted/updated/deleted\n+ij(USER1)> create table tb (j int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> insert into tb values 2,3,4;\n+3 rows inserted/updated/deleted\n+ij(USER1)> create view svb as select * from tb;\n+0 rows inserted/updated/deleted\n+ij(USER1)> grant select on sva to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- expect error\n+create view svc (i) as select * from user1.sva union select * from user1.svb;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> set connection user1;\n+ij(USER1)> grant select on svb to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- ok\n+create view svc (i) as select * from user1.sva union select * from user1.svb;\n+0 rows inserted/updated/deleted\n+ij(USER2)> select * from svc;\n+I          \n+-----------\n+1          \n+2          \n+3          \n+4          \n+4 rows selected\n+ij(USER2)> -- DERBY-1715, DERBY-1631\n+--set connection user1;\n+--create table t01 (i int);\n+--insert into t01 values 1;\n+--grant select on t01 to user2;\n+--set connection user2;\n+--select * from user1.t01;\n+--create view v01 as select * from user1.t01;\n+--create view v02 as select * from user2.v01;\n+--create view v03 as select * from user2.v02;\n+--set connection user1;\n+--revoke select on t01 from user2;\n+--set connection user2;\n+--select * from user1.t01;\n+--select * from user2.v01;\n+--select * from user2.v02;\n+--select * from user2.v03;\n+--drop view user2.v01;\n+--drop view user2.v02;\n+--drop view user3.v03;\n+-- grant all privileges then create the view\n+set connection user1;\n+ij(USER1)> create table t01ap (i int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> insert into t01ap values 1;\n+1 row inserted/updated/deleted\n+ij(USER1)> grant all privileges on t01ap to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- ok\n+create view v02ap as select * from user1.t01ap;\n+0 rows inserted/updated/deleted\n+ij(USER2)> -- ok\n+select * from v02ap;\n+I          \n+-----------\n+1          \n+1 row selected\n+ij(USER2)> -- expect error, don't have with grant option\n+grant select on user2.v02ap to user3;\n+ERROR: Failed with SQLSTATE 2850G\n+ij(USER2)> set connection user3;\n+ij(USER3)> -- expect error\n+create view v03ap as select * from user2.v02ap;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER3)> select * from v03ap;\n+ERROR: Failed with SQLSTATE 42Y07\n+ij(USER3)> -- expect error\n+grant all privileges on v03ap to user4;\n+ERROR: Failed with SQLSTATE 42Y07\n+ij(USER3)> set connection user4;\n+ij(USER4)> -- expect error\n+create view v04ap as select * from user3.v03ap;\n+ERROR: Failed with SQLSTATE 42Y07\n+ij(USER4)> select * from v04ap;\n+ERROR: Failed with SQLSTATE 42Y07\n+ij(USER4)> -- expect error\n+grant select on v04ap to user2;\n+ERROR: Failed with SQLSTATE 42Y07\n+ij(USER4)> set connection user2;\n+ij(USER2)> select * from user4.v04ap;\n+ERROR: Failed with SQLSTATE 42Y07\n+ij(USER2)> set connection user4;\n+ij(USER4)> -- expect error\n+revoke select on v04ap from user2;\n+ERROR: Failed with SQLSTATE 42Y07\n+ij(USER4)> set connection user2;\n+ij(USER2)> -- expect error\n+select * from user4.v04ap;\n+ERROR: Failed with SQLSTATE 42Y07\n+ij(USER2)> -- -------------------------------------------------------------------\n+-- references and constraints\n+-- -------------------------------------------------------------------\n+set connection user1;\n+ij(USER1)> drop table user1.rt1;\n+ERROR: Failed with SQLSTATE 42Y55\n+ij(USER1)> drop table user2.rt2;\n+ERROR: Failed with SQLSTATE 42Y55\n+ij(USER1)> create table rt1 (c1 int not null primary key, c2 int not null);\n+0 rows inserted/updated/deleted\n+ij(USER1)> insert into rt1 values (1, 10);\n+1 row inserted/updated/deleted\n+ij(USER1)> insert into rt1 values (2, 20);\n+1 row inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- expect error\n+create table rt2 (c1 int primary key not null, c2 int not null, c3 int not null, constraint rt2fk foreign key(c1) references user1.rt1);\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> set connection user1;\n+ij(USER1)> grant references on rt1 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- ok\n+create table rt2 (c1 int primary key not null, c2 int not null, c3 int not null, constraint rt2fk foreign key(c2) references user1.rt1);\n+0 rows inserted/updated/deleted\n+ij(USER2)> insert into rt2 values (1,1,1);\n+1 row inserted/updated/deleted\n+ij(USER2)> -- expect error\n+insert into rt2 values (3,3,3);\n+ERROR: Failed with SQLSTATE 23503\n+ij(USER2)> set connection user1;\n+ij(USER1)> revoke references on rt1 from user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- ok, fk constraint got dropped by revoke\n+insert into rt2 values (3,3,3);\n+1 row inserted/updated/deleted\n+ij(USER2)> select * from rt2;\n+C1         |C2         |C3         \n+-----------------------------------\n+1          |1          |1          \n+3          |3          |3          \n+2 rows selected\n+ij(USER2)> -- expect errors\n+create table rt3 (c1 int primary key not null, c2 int not null, c3 int not null, constraint rt3fk foreign key(c1) references user1.rt1);\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> -- test PUBLIC\n+-- DERBY-1857\n+--set connection user1;\n+--drop table user3.rt3;\n+--drop table user2.rt2;\n+--drop table user1.rt1;\n+--create table rt1 (c1 int primary key not null, c2 int not null unique, c3 int not null);\n+--insert into rt1 values (1,1,1);\n+--insert into rt1 values (2,2,2);\n+--insert into rt1 values (3,3,3);\n+--grant references(c2, c1) on rt1 to PUBLIC;\n+--set connection user2;\n+--create table rt2 (c1 int primary key not null, constraint rt2fk foreign key(c1) references user1.rt1(c2) );\n+--insert into rt2 values (1), (2);\n+--set connection user3;\n+--create table rt3 (c1 int primary key not null, constraint rt3fk foreign key(c1) references user1.rt1(c2) );\n+--insert into rt3 values (1), (2);\n+--set connection user1;\n+--revoke references(c1) on rt1 from PUBLIC;\n+--set connection user2;\n+-- expect constraint error\n+--insert into rt2 values (4);\n+--set connection user3;\n+-- expect constraint error\n+--insert into rt3 values (4);\n+-- test user privilege and PUBLIC\n+set connection user1;\n+ij(USER1)> drop table user3.rt3;\n+ERROR: Failed with SQLSTATE 42Y07\n+ij(USER1)> drop table user2.rt2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> drop table user1.rt1;\n+0 rows inserted/updated/deleted\n+ij(USER1)> create table rt1 (c1 int primary key not null, c2 int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> insert into rt1 values (1,1), (2,2);\n+2 rows inserted/updated/deleted\n+ij(USER1)> grant references on rt1 to PUBLIC, user2, user3;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> create table rt2 (c1 int primary key not null, constraint rt2fk foreign key(c1) references user1.rt1);\n+0 rows inserted/updated/deleted\n+ij(USER2)> insert into rt2 values (1), (2);\n+2 rows inserted/updated/deleted\n+ij(USER2)> set connection user3;\n+ij(USER3)> create table rt3 (c1 int primary key not null, constraint rt3fk foreign key(c1) references user1.rt1);\n+0 rows inserted/updated/deleted\n+ij(USER3)> insert into rt3 values (1), (2);\n+2 rows inserted/updated/deleted\n+ij(USER3)> set connection user1;\n+ij(USER1)> -- ok, use the privilege granted to user2\n+revoke references on rt1 from PUBLIC;\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- ok, user3 got no privileges, so rt3fk should get dropped.  \n+revoke references on rt1 from user3;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- expect error, FK enforced.\n+insert into rt2 values (3);\n+ERROR: Failed with SQLSTATE 23503\n+ij(USER2)> set connection user3;\n+ij(USER3)> -- ok\n+insert into rt3 values (3);\n+1 row inserted/updated/deleted\n+ij(USER3)> -- test multiple FKs\n+-- DERBY-1589?\n+--set connection user1;\n+--drop table user3.rt3;\n+--drop table user2.rt2;\n+--drop table user1.rt1;\n+--create table rt1 (c1 int primary key not null, c2 int);\n+--insert into rt1 values (1,1), (2,2);\n+--grant references on rt1 to PUBLIC, user2, user3;\n+--set connection user2;\n+-- XJ001 occurred at create table rt2...\n+--create table rt2 (c1 int primary key not null, constraint rt2fk foreign key(c1) references user1.rt1);\n+--insert into rt2 values (1), (2);\n+--grant references on rt2 to PUBLIC, user3;\n+--set connection user3;\n+--create table rt3 (c1 int primary key not null, constraint rt3fk1 foreign key(c1) references user1.rt1, \n+--\tconstraint rt3fk2 foreign key(c1) references user1.rt2);\n+--insert into rt3 values (1), (2);\n+--set connection user1;\n+-- rt3fk1 should get dropped.\n+--revoke references on rt1 from PUBLIC;\n+--revoke references on rt1 from user3;\n+--set connection user2;\n+--revoke references on rt2 from PUBLIC;\n+-- expect error\n+--insert into rt2 values (3);\n+--set connection user3;\n+-- expect error, use user3 references privilege, rt3fk2 still in effect\n+--insert into rt3 values (3);\n+--set connection user2;\n+--revoke references on rt2 from user3;\n+--set connection user3;\n+-- ok, rt3fk2 should be dropped.\n+--insert into rt3 values (3);\n+-- -------------------------------------------------------------------\n+-- routines and standard builtins\n+-- -------------------------------------------------------------------\n+set connection user1;\n+ij(USER1)> CREATE FUNCTION F_ABS2(P1 INT)\n+\tRETURNS INT NO SQL\n+\tRETURNS NULL ON NULL INPUT\n+\tEXTERNAL NAME 'java.lang.Math.abs'\n+\tLANGUAGE JAVA PARAMETER STYLE JAVA;\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- syntax error\n+grant execute on F_ABS2 to user2;\n+ERROR: Failed with SQLSTATE 42X01\n+ij(USER1)> -- F_ABS2 is not a procedure, expect errors\n+grant execute on procedure F_ABS2 to user2;\n+ERROR: Failed with SQLSTATE 42Y03\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- expect errors\n+values user1.F_ABS1(10) + user1.F_ABS2(-10);\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER2)> set connection user1;\n+ij(USER1)> -- ok\n+grant execute on function F_ABS2 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- ok\n+values user1.F_ABS1(10) + user1.F_ABS2(-10);\n+1          \n+-----------\n+20         \n+1 row selected\n+ij(USER2)> -- expect errors\n+revoke execute on function ABS from user2 restrict;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER2)> revoke execute on function AVG from user2 restrict;\n+ERROR: Failed with SQLSTATE 42X01\n+ij(USER2)> revoke execute on function LENGTH from user2 restrict;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER2)> set connection user1;\n+ij(USER1)> -- ok\n+revoke execute on function F_ABS2 from user2 restrict;\n+0 rows inserted/updated/deleted\n+ij(USER1)> revoke execute on function F_ABS1 from user2 restrict;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- expect error\n+values user1.F_ABS1(10) + user1.F_ABS2(-10);\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER2)> set connection user1;\n+ij(USER1)> -- ok\n+grant execute on function F_ABS1 to PUBLIC;\n+0 rows inserted/updated/deleted\n+ij(USER1)> grant execute on function F_ABS2 to PUBLIC;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- ok\n+values user1.F_ABS1(10) + user1.F_ABS2(-10);\n+1          \n+-----------\n+20         \n+1 row selected\n+ij(USER2)> -- -------------------------------------------------------------------\n+-- system tables\n+-- -------------------------------------------------------------------\n+set connection user1;\n+ij(USER1)> -- not allowed. expect errors, sanity check\n+grant ALL PRIVILEGES on sys.sysaliases to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.syschecks to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.syscolperms to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.syscolumns to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.sysconglomerates to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.sysconstraints to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.sysdepends to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.sysfiles to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.sysforeignkeys to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.syskeys to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.sysroutineperms to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.sysschemas to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.sysstatistics to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.sysstatements to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.systableperms to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.systables to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.systriggers to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on sys.sysviews to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant ALL PRIVILEGES on syscs_diag.lock_table to user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.sysaliases to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.syschecks to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.syscolperms to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.syscolumns to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.sysconglomerates to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.sysconstraints to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.sysdepends to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.sysfiles to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.sysforeignkeys to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.syskeys to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.sysroutineperms to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.sysschemas to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.sysstatistics to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.sysstatements to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.systableperms to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.systables to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.systriggers to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on sys.sysviews to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> grant select on syscs_diag.lock_table to user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.sysaliases from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.syschecks from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.syscolperms from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.syscolumns from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.sysconglomerates from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.sysconstraints from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.sysdepends from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.sysfiles from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.sysforeignkeys from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.syskeys from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.sysroutineperms from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.sysschemas from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.sysstatistics from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.sysstatements from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.systableperms from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.systables from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.systriggers from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on sys.sysviews from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke ALL PRIVILEGES on syscs_diag.lock_table from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.sysaliases from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.syschecks from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.syscolperms from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.syscolumns from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.sysconglomerates from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.sysconstraints from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.sysdepends from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.sysfiles from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.sysforeignkeys from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.syskeys from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.sysroutineperms from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.sysschemas from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.sysstatistics from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.sysstatements from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.systableperms from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.systables from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.systriggers from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on sys.sysviews from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> revoke select on syscs_diag.lock_table from user2, public;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> -- -------------------------------------------------------------------\n+-- built-in functions and procedures and routines\n+-- -------------------------------------------------------------------\n+set connection user3;\n+ij(USER3)> -- test sqlj, only db owner have privileges by default\n+-- expect errors\n+CALL SQLJ.INSTALL_JAR ('bogus.jar','user2.bogus',0);\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> CALL SQLJ.REPLACE_JAR ('bogus1.jar', 'user2.bogus');\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> CALL SQLJ.REMOVE_JAR  ('user2.bogus', 0);\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> -- test backup routines, only db owner have privileges by default\n+-- expect errors\n+CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE('backup1');\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE('backup3', 1);\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT('backup4', 1);\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> -- test admin routines, only db owner have privileges by default\n+CALL SYSCS_UTIL.SYSCS_FREEZE_DATABASE();\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> CALL SYSCS_UTIL.SYSCS_UNFREEZE_DATABASE();\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> CALL SYSCS_UTIL.SYSCS_DISABLE_LOG_ARCHIVE_MODE(1);\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> CALL SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE();\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> -- test statistical routines, available for everyone by default\n+set connection user1;\n+ij(USER1)> -- ok\n+CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1);\n+0 rows inserted/updated/deleted\n+ij(USER1)> CALL SYSCS_UTIL.SYSCS_SET_STATISTICS_TIMING(1);\n+0 rows inserted/updated/deleted\n+ij(USER1)> values SYSCS_UTIL.SYSCS_GET_RUNTIMESTATISTICS();\n+1                                                                                                                               \n+--------------------------------------------------------------------------------------------------------------------------------\n+Statement Name: \n+\tnull\n+Statement Text: \n+\tCALL SYSCS_UTIL.SYSCS_SET_STATISTICS_TIMING(1)\n+Parse Time: 0\n+Bind Time: 0\n+Optimize Tim&\n+1 row selected\n+ij(USER1)> CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(0);\n+0 rows inserted/updated/deleted\n+ij(USER1)> CALL SYSCS_UTIL.SYSCS_SET_STATISTICS_TIMING(0);\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- ok\n+set connection user3;\n+ij(USER3)> CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1);\n+0 rows inserted/updated/deleted\n+ij(USER3)> CALL SYSCS_UTIL.SYSCS_SET_STATISTICS_TIMING(1);\n+0 rows inserted/updated/deleted\n+ij(USER3)> values SYSCS_UTIL.SYSCS_GET_RUNTIMESTATISTICS();\n+1                                                                                                                               \n+--------------------------------------------------------------------------------------------------------------------------------\n+Statement Name: \n+\tnull\n+Statement Text: \n+\tCALL SYSCS_UTIL.SYSCS_SET_STATISTICS_TIMING(1)\n+Parse Time: 0\n+Bind Time: 0\n+Optimize Tim&\n+1 row selected\n+ij(USER3)> CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(0);\n+0 rows inserted/updated/deleted\n+ij(USER3)> CALL SYSCS_UTIL.SYSCS_SET_STATISTICS_TIMING(0);\n+0 rows inserted/updated/deleted\n+ij(USER3)> -- test import/export, only db owner have privileges by default\n+create table TABLEIMP1 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER3)> create table TABLEEXP1 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER3)> insert into TABLEEXP1 values 1,2,3,4,5;\n+5 rows inserted/updated/deleted\n+ij(USER3)> CALL SYSCS_UTIL.SYSCS_EXPORT_TABLE ('USER3', 'TABLEEXP1', 'myfile.del', null, null, null);\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE ('USER3', 'TABLEIMP1', 'myfile.del', null, null, null, 0);\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> CALL SYSCS_UTIL.SYSCS_EXPORT_QUERY('select * from user3.TABLEEXP1','myfile.del', null, null, null);\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> CALL SYSCS_UTIL.SYSCS_IMPORT_DATA ('USER3', 'TABLEIMP1', null, '1,3,4', 'myfile.del', null, null, null,0);\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> -- test property handling routines, only db owner have privileges by default\n+-- expect errors\n+CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY ('derby.locks.deadlockTimeout', '10');\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> VALUES SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY('derby.locks.deadlockTimeout');\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> -- test compress routines, everyone have privilege as long as the user owns the schema\n+-- ok\n+CALL SYSCS_UTIL.SYSCS_COMPRESS_TABLE('USER3', 'TABLEEXP1', 1);\n+0 rows inserted/updated/deleted\n+ij(USER3)> call SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE('USER3', 'TABLEEXP1', 1, 1, 1);\n+0 rows inserted/updated/deleted\n+ij(USER3)> -- test check table routines, only db owner have privilege by default\n+VALUES SYSCS_UTIL.SYSCS_CHECK_TABLE('USER3', 'TABLEEXP1');\n+ERROR: Failed with SQLSTATE 2850A\n+ij(USER3)> -- -------------------------------------------------------------------\n+-- synonyms\n+-- -------------------------------------------------------------------\n+set connection user1;\n+ij(USER1)> create synonym s1 for user1.t1;\n+0 rows inserted/updated/deleted\n+ij(USER1)> create index ii1 on user1.t1(c2);\n+0 rows inserted/updated/deleted\n+WARNING 01504: The new index is a duplicate of an existing index: IDX1.\n+ij(USER1)> -- not supported yet, expect errors\n+grant select on s1 to user2;\n+ERROR: Failed with SQLSTATE 42X05\n+ij(USER1)> grant insert on s1 to user2;\n+ERROR: Failed with SQLSTATE 42X05\n+ij(USER1)> revoke select on s1 from user2;\n+ERROR: Failed with SQLSTATE 42X05\n+ij(USER1)> revoke insert on s1 from user2;\n+ERROR: Failed with SQLSTATE 42X05\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- expect errors\n+drop synonym user1.s1;\n+ERROR: Failed with SQLSTATE 2850D\n+ij(USER2)> drop index user1.ii1;\n+ERROR: Failed with SQLSTATE 42X65\n+ij(USER2)> -- -------------------------------------------------------------------\n+-- transactions and lock table stmt\n+-- -------------------------------------------------------------------\n+set connection user1;\n+ij(USER1)> create table t1000 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> autocommit off;\n+ij(USER1)> grant select on t1000 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> select * from user1.t1000;\n+ERROR: Failed with SQLSTATE 40XL1\n+ij(USER2)> set connection user1;\n+ij(USER1)> commit;\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- ok\n+select * from user1.t1000;\n+I          \n+-----------\n+0 rows selected\n+ij(USER2)> set connection user1;\n+ij(USER1)> revoke select on t1000 from user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> select * from user1.t1000;\n+ERROR: Failed with SQLSTATE 40XL1\n+ij(USER2)> set connection user1;\n+ij(USER1)> commit;\n+ij(USER1)> set connection user2;\n+ij(USER2)> select * from user1.t1000;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> autocommit off;\n+ij(USER2)> -- should fail\n+lock table user1.t1000 in share mode;\n+ERROR: Failed with SQLSTATE 28506\n+ij(USER2)> -- should fail\n+lock table user1.t1000 in exclusive mode;\n+ERROR: Failed with SQLSTATE 28506\n+ij(USER2)> commit;\n+ij(USER2)> autocommit on;\n+ij(USER2)> set connection user1;\n+ij(USER1)> grant select on t1000 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> rollback;\n+ij(USER1)> set connection user2;\n+ij(USER2)> select * from user1.t1000;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> set connection user1;\n+ij(USER1)> grant select on t1000 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> commit;\n+ij(USER1)> revoke select on t1000 from user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> rollback;\n+ij(USER1)> set connection user2;\n+ij(USER2)> select * from user1.t1000;\n+I          \n+-----------\n+0 rows selected\n+ij(USER2)> set connection user1;\n+ij(USER1)> autocommit on;\n+ij(USER1)> drop table t1000;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user1;\n+ij(USER1)> create table t1000 (c varchar(1));\n+0 rows inserted/updated/deleted\n+ij(USER1)> insert into t1000 values 'a', 'b', 'c';\n+3 rows inserted/updated/deleted\n+ij(USER1)> grant select on t1000 to user3;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> create table t1001 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER2)> insert into t1001 values 1;\n+1 row inserted/updated/deleted\n+ij(USER2)> set connection user1;\n+ij(USER1)> select * from user2.t1001;\n+I          \n+-----------\n+1          \n+1 row selected\n+ij(USER1)> insert into user2.t1001 values 2;\n+1 row inserted/updated/deleted\n+ij(USER1)> update user2.t1001 set i = 888;\n+2 rows inserted/updated/deleted\n+ij(USER1)> drop table user1.t1000;\n+0 rows inserted/updated/deleted\n+ij(USER1)> drop table user2.t1001;\n+0 rows inserted/updated/deleted\n+ij(USER1)> commit;\n+ij(USER1)> autocommit on;\n+ij(USER1)> -- -------------------------------------------------------------------\n+-- cursors\n+-- -------------------------------------------------------------------\n+-- DERBY-1716\n+--set connection user1;\n+--drop table t1001;\n+--create table t1001 (c varchar(1));\n+--insert into t1001 values 'a', 'b', 'c';\n+--grant select on t1001 to user3;\n+--set connection user3;\n+--autocommit off;\n+--GET CURSOR crs1 AS 'select * from user1.t1001';\n+--next crs1;\n+--set connection user1;\n+-- revoke select privilege while user3 still have an open cursor\n+--revoke select on t1001 from user3;\n+--set connection user3;\n+--next crs1;\n+--next crs1;\n+--close crs1;\n+--autocommit on;\n+-- -------------------------------------------------------------------\n+-- rename table \n+-- -------------------------------------------------------------------\n+set connection user1;\n+ij(USER1)> drop table user1.rta;\n+ERROR: Failed with SQLSTATE 42Y55\n+ij(USER1)> drop table user2.rtb;\n+ERROR: Failed with SQLSTATE 42Y55\n+ij(USER1)> create table rta (i int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> grant select on rta to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> select * from user1.rta;\n+I          \n+-----------\n+0 rows selected\n+ij(USER2)> set connection user1;\n+ij(USER1)> rename table rta to rtb;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user1;\n+ij(USER1)> -- expect error\n+select * from user1.rta;\n+ERROR: Failed with SQLSTATE 42X05\n+ij(USER1)> -- ok\n+select * from user1.rtb;\n+I          \n+-----------\n+0 rows selected\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- expect error\n+select * from user1.rta;\n+ERROR: Failed with SQLSTATE 42X05\n+ij(USER2)> -- ok\n+select * from user1.rtb;\n+I          \n+-----------\n+0 rows selected\n+ij(USER2)> -- -------------------------------------------------------------------\n+-- DB owner power =)\n+-- -------------------------------------------------------------------\n+set connection user2;\n+ij(USER2)> create table ttt1 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER2)> insert into ttt1 values 1;\n+1 row inserted/updated/deleted\n+ij(USER2)> set connection user3;\n+ij(USER3)> create table ttt1 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER3)> insert into ttt1 values 10;\n+1 row inserted/updated/deleted\n+ij(USER3)> set connection user1;\n+ij(USER1)> -- the following actions are ok\n+select * from user2.ttt1;\n+I          \n+-----------\n+1          \n+1 row selected\n+ij(USER1)> insert into user2.ttt1 values 2;\n+1 row inserted/updated/deleted\n+ij(USER1)> update user2.ttt1 set i = 888;\n+2 rows inserted/updated/deleted\n+ij(USER1)> delete from user2.ttt1;\n+2 rows inserted/updated/deleted\n+ij(USER1)> drop table user2.ttt1;\n+0 rows inserted/updated/deleted\n+ij(USER1)> select * from user3.ttt1;\n+I          \n+-----------\n+10         \n+1 row selected\n+ij(USER1)> insert into user3.ttt1 values 20;\n+1 row inserted/updated/deleted\n+ij(USER1)> update user3.ttt1 set i = 999;\n+2 rows inserted/updated/deleted\n+ij(USER1)> delete from user3.ttt1;\n+2 rows inserted/updated/deleted\n+ij(USER1)> drop table user3.ttt1;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user4;\n+ij(USER4)> create table ttt1 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER4)> set connection user1;\n+ij(USER1)> drop table user4.ttt1;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- DERBY-1858\n+-- expect error\n+drop schema user4 restrict;\n+ERROR: Failed with SQLSTATE 2850D\n+ij(USER2)> set connection user1;\n+ij(USER1)> -- ok\n+drop schema user4 restrict;\n+0 rows inserted/updated/deleted\n+ij(USER1)> -- -------------------------------------------------------------------\n+-- Statement preparation\n+-- -------------------------------------------------------------------\n+set connection user1;\n+ij(USER1)> create table ttt2 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> insert into ttt2 values 8;\n+1 row inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- prepare statement, ok\n+prepare p1 as 'select * from user1.ttt2';\n+ij(USER2)> -- expect error\n+execute p1;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> remove p1;\n+ij(USER2)> set connection user1;\n+ij(USER1)> grant select on ttt2 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- prepare statement, ok\n+prepare p1 as 'select * from user1.ttt2';\n+ij(USER2)> -- ok\n+execute p1;\n+I          \n+-----------\n+8          \n+1 row selected\n+ij(USER2)> set connection user1;\n+ij(USER1)> revoke select on ttt2 from user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- expect error\n+execute p1;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER2)> remove p1;\n+ij(USER2)> -- -------------------------------------------------------------------\n+-- Misc \n+-- -------------------------------------------------------------------\n+set connection user2;\n+ij(USER2)> create table tshared0 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER2)> -- db owner tries to revoke select access from user2\n+set connection user1;\n+ij(USER1)> -- expect error\n+revoke select on user2.tshared0 from user2;\n+ERROR: Failed with SQLSTATE 2850F\n+ij(USER1)> set connection user2;\n+ij(USER2)> select * from user2.tshared0;\n+I          \n+-----------\n+0 rows selected\n+ij(USER2)> set connection user2;\n+ij(USER2)> create table tshared1 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER2)> grant select, insert, delete, update on tshared1 to user3, user4, user5;\n+0 rows inserted/updated/deleted\n+ij(USER2)> set connection user3;\n+ij(USER3)> create table tshared1 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER3)> grant select, insert, delete, update on tshared1 to user2, user4, user5;\n+0 rows inserted/updated/deleted\n+ij(USER3)> set connection user2;\n+ij(USER2)> insert into user3.tshared1 values 1,2,3;\n+3 rows inserted/updated/deleted\n+ij(USER2)> update user3.tshared1 set i = 888;\n+3 rows inserted/updated/deleted\n+ij(USER2)> select * from user3.tshared1;\n+I          \n+-----------\n+888        \n+888        \n+888        \n+3 rows selected\n+ij(USER2)> delete from user3.tshared1;\n+3 rows inserted/updated/deleted\n+ij(USER2)> insert into user3.tshared1 values 1,2,3;\n+3 rows inserted/updated/deleted\n+ij(USER2)> set connection user3;\n+ij(USER3)> insert into user2.tshared1 values 3,2,1;\n+3 rows inserted/updated/deleted\n+ij(USER3)> update user2.tshared1 set i = 999;\n+3 rows inserted/updated/deleted\n+ij(USER3)> select * from user2.tshared1;\n+I          \n+-----------\n+999        \n+999        \n+999        \n+3 rows selected\n+ij(USER3)> delete from user2.tshared1;\n+3 rows inserted/updated/deleted\n+ij(USER3)> insert into user2.tshared1 values 3,2,1;\n+3 rows inserted/updated/deleted\n+ij(USER3)> set connection user1;\n+ij(USER1)> update user2.tshared1 set i = 1000;\n+3 rows inserted/updated/deleted\n+ij(USER1)> update user3.tshared1 set i = 1001;\n+3 rows inserted/updated/deleted\n+ij(USER1)> delete from user2.tshared1;\n+3 rows inserted/updated/deleted\n+ij(USER1)> delete from user3.tshared1;\n+3 rows inserted/updated/deleted\n+ij(USER1)> insert into user2.tshared1 values 0,1,2,3;\n+4 rows inserted/updated/deleted\n+ij(USER1)> insert into user3.tshared1 values 4,3,2,1;\n+4 rows inserted/updated/deleted\n+ij(USER1)> set connection user4;\n+ij(USER4)> select * from user2.tshared1;\n+I          \n+-----------\n+0          \n+1          \n+2          \n+3          \n+4 rows selected\n+ij(USER4)> select * from user3.tshared1;\n+I          \n+-----------\n+4          \n+3          \n+2          \n+1          \n+4 rows selected\n+ij(USER4)> create view vshared1 as select * from user2.tshared1 union select * from user3.tshared1;\n+0 rows inserted/updated/deleted\n+ij(USER4)> create view vshared2 as select * from user2.tshared1 intersect select * from user3.tshared1;\n+0 rows inserted/updated/deleted\n+ij(USER4)> create view vshared3 as select * from user2.tshared1 except select * from user3.tshared1;\n+0 rows inserted/updated/deleted\n+ij(USER4)> create view vshared4(i) as select * from user3.tshared1 union values 0;\n+0 rows inserted/updated/deleted\n+ij(USER4)> insert into user2.tshared1 select * from user3.tshared1;\n+4 rows inserted/updated/deleted\n+ij(USER4)> select * from vshared1;\n+I          \n+-----------\n+0          \n+1          \n+2          \n+3          \n+4          \n+5 rows selected\n+ij(USER4)> select * from vshared2;\n+I          \n+-----------\n+1          \n+2          \n+3          \n+4          \n+4 rows selected\n+ij(USER4)> select * from vshared3;\n+I          \n+-----------\n+0          \n+1 row selected\n+ij(USER4)> select * from vshared4;\n+I          \n+-----------\n+0          \n+1          \n+2          \n+3          \n+4          \n+5 rows selected\n+ij(USER4)> -- expect errors\n+grant select on vshared1 to user5;\n+ERROR: Failed with SQLSTATE 2850G\n+ij(USER4)> grant select on vshared2 to user5;\n+ERROR: Failed with SQLSTATE 2850G\n+ij(USER4)> grant select on vshared3 to user5;\n+ERROR: Failed with SQLSTATE 2850G\n+ij(USER4)> grant select on vshared4 to user5;\n+ERROR: Failed with SQLSTATE 2850G\n+ij(USER4)> set connection user5;\n+ij(USER5)> select * from user4.vshared1;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER5)> select * from user4.vshared2;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER5)> select * from user4.vshared3;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER5)> select * from user4.vshared4;\n+ERROR: Failed with SQLSTATE 28508\n+ij(USER5)> set connection user1;\n+ij(USER1)> -- -------------------------------------------------------------------\n+-- triggers\n+-- -------------------------------------------------------------------\n+set connection user1;\n+ij(USER1)> -- expect error\n+create trigger tt0a after insert on t1 for each statement grant select on t1 to user2;\n+ERROR: Failed with SQLSTATE 42X01\n+ij(USER1)> -- expect error\n+create trigger tt0b after insert on t1 for each statement revoke select on t1 from user2;\n+ERROR: Failed with SQLSTATE 42X01\n+ij(USER1)> -- same schema in trigger action\n+drop table t6;\n+ERROR: Failed with SQLSTATE 42Y55\n+ij(USER1)> create table t6 (c1 int not null primary key, c2 int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> grant trigger on t6 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> drop table t7;\n+ERROR: Failed with SQLSTATE 42Y55\n+ij(USER2)> create table t7 (c1 int, c2 int, c3 int);\n+0 rows inserted/updated/deleted\n+ij(USER2)> insert into t7 values (1,1,1);\n+1 row inserted/updated/deleted\n+ij(USER2)> create trigger tt1 after insert on user1.t6 for each statement update user2.t7 set c2 = 888;\n+0 rows inserted/updated/deleted\n+ij(USER2)> create trigger tt2 after insert on user1.t6 for each statement insert into user2.t7 values (2,2,2);\n+0 rows inserted/updated/deleted\n+ij(USER2)> set connection user1;\n+ij(USER1)> insert into t6 values (1, 10);\n+1 row inserted/updated/deleted\n+ij(USER1)> select * from user2.t7;\n+C1         |C2         |C3         \n+-----------------------------------\n+1          |888        |1          \n+2          |2          |2          \n+2 rows selected\n+ij(USER1)> -- different schema in trigger action\n+-- this testcase is causing NPE - DERBY-1583\n+set connection user1;\n+ij(USER1)> drop table t8;\n+ERROR: Failed with SQLSTATE 42Y55\n+ij(USER1)> drop table t9;\n+ERROR: Failed with SQLSTATE 42Y55\n+ij(USER1)> create table t8 (c1 int not null primary key, c2 int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> create table t9 (c1 int, c2 int, c3 int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> insert into user1.t8 values (1,1);\n+1 row inserted/updated/deleted\n+ij(USER1)> insert into user1.t9 values (10,10,10);\n+1 row inserted/updated/deleted\n+ij(USER1)> grant trigger on t8 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> grant update(c2, c1), insert on t9 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> create trigger tt3 after insert on user1.t8 for each statement update user1.t9 set c2 = 888;\n+0 rows inserted/updated/deleted\n+ij(USER2)> create trigger tt4 after insert on user1.t8 for each statement insert into user1.t9 values (2,2,2);\n+0 rows inserted/updated/deleted\n+ij(USER2)> set connection user1;\n+ij(USER1)> -- expect error\n+insert into user1.t8 values (1, 10);\n+ERROR: Failed with SQLSTATE 23505\n+ij(USER1)> -- ok\n+insert into user1.t8 values (2, 20);\n+1 row inserted/updated/deleted\n+ij(USER1)> select * from user1.t9;\n+C1         |C2         |C3         \n+-----------------------------------\n+10         |888        |10         \n+2          |2          |2          \n+2 rows selected\n+ij(USER1)> -- grant all privileges then create trigger, then revoke the trigger privilege\n+drop table t10;\n+ERROR: Failed with SQLSTATE 42Y55\n+ij(USER1)> drop table t11;\n+ERROR: Failed with SQLSTATE 42Y55\n+ij(USER1)> create table t10 (i int, j int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> insert into t10 values (1,1), (2,2);\n+2 rows inserted/updated/deleted\n+ij(USER1)> create table t11 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> grant all privileges on t10 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> grant all privileges on t11 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> -- ok\n+create trigger tt5 after update on user1.t10 for each statement insert into user1.t11 values 1;\n+0 rows inserted/updated/deleted\n+ij(USER2)> create trigger tt6 after update of i on user1.t10 for each statement insert into user1.t11 values 2;\n+0 rows inserted/updated/deleted\n+ij(USER2)> create trigger tt7 after update of j on user1.t10 for each statement insert into user1.t11 values 3;\n+0 rows inserted/updated/deleted\n+ij(USER2)> update user1.t10 set i=10;\n+2 rows inserted/updated/deleted\n+ij(USER2)> select * from user1.t10;\n+I          |J          \n+-----------------------\n+10         |1          \n+10         |2          \n+2 rows selected\n+ij(USER2)> select * from user1.t11;\n+I          \n+-----------\n+1          \n+2          \n+2 rows selected\n+ij(USER2)> set connection user1;\n+ij(USER1)> -- triggers get dropped\n+revoke trigger on t10 from user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> update user1.t10 set i=20;\n+2 rows inserted/updated/deleted\n+ij(USER2)> select * from user1.t10;\n+I          |J          \n+-----------------------\n+20         |1          \n+20         |2          \n+2 rows selected\n+ij(USER2)> select * from user1.t11;\n+I          \n+-----------\n+1          \n+2          \n+2 rows selected\n+ij(USER2)> set connection user1;\n+ij(USER1)> grant trigger on t10 to user2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user2;\n+ij(USER2)> create trigger tt8 after update of j on user1.t10 for each statement delete from user1.t11;\n+0 rows inserted/updated/deleted\n+ij(USER2)> update user1.t10 set j=100;\n+2 rows inserted/updated/deleted\n+ij(USER2)> select * from user1.t10;\n+I          |J          \n+-----------------------\n+20         |100        \n+20         |100        \n+2 rows selected\n+ij(USER2)> select * from user1.t11;\n+I          \n+-----------\n+0 rows selected\n+ij(USER2)> delete from user1.t10;\n+2 rows inserted/updated/deleted\n+ij(USER2)> delete from user1.t11;\n+0 rows inserted/updated/deleted\n+ij(USER2)> -- test trigger, view and function combo\n+set connection user1;\n+ij(USER1)> drop function F_ABS1;\n+0 rows inserted/updated/deleted\n+ij(USER1)> CREATE FUNCTION F_ABS1(P1 INT)\n+\tRETURNS INT NO SQL\n+\tRETURNS NULL ON NULL INPUT\n+\tEXTERNAL NAME 'java.lang.Math.abs'\n+\tLANGUAGE JAVA PARAMETER STYLE JAVA;\n+0 rows inserted/updated/deleted\n+ij(USER1)> grant execute on function F_ABS1 to user5;\n+0 rows inserted/updated/deleted\n+ij(USER1)> grant trigger,insert,update,delete,select on t10 to user5;\n+0 rows inserted/updated/deleted\n+ij(USER1)> grant trigger,insert,update,delete,select on t11 to user5;\n+0 rows inserted/updated/deleted\n+ij(USER1)> drop view v;\n+ERROR: Failed with SQLSTATE X0X05\n+ij(USER1)> create view v(i) as values 888;\n+0 rows inserted/updated/deleted\n+ij(USER1)> grant select on v to user5;\n+0 rows inserted/updated/deleted\n+ij(USER1)> set connection user5;\n+ij(USER5)> create trigger tt9 after insert on user1.t10 for each statement insert into user1.t11 values (user1.F_ABS1(-5));\n+0 rows inserted/updated/deleted\n+ij(USER5)> create trigger tt10 after insert on user1.t10 for each statement insert into user1.t11 select * from user1.v;\n+0 rows inserted/updated/deleted\n+ij(USER5)> insert into user1.t10 values (1,1);\n+1 row inserted/updated/deleted\n+ij(USER5)> select * from user1.t10;\n+I          |J          \n+-----------------------\n+1          |1          \n+1 row selected\n+ij(USER5)> select * from user1.t11;\n+I          \n+-----------\n+5          \n+888        \n+2 rows selected\n+ij(USER5)> -- Related to DERBY-1631 \n+-- cannot revoke execution on F_ABS1 due to X0Y25 (object dependencies)\n+--set connection user1;\n+--revoke execute on function F_ABS1 from user5 restrict;\n+--set connection user5;\n+--insert into user1.t10 values (2,2);\n+--select * from user1.t10;\n+--select * from user1.t11;\n+--set connection user1;\n+--revoke select on v from user5;\n+--set connection user5;\n+--insert into user1.t10 values (3,3);\n+--select * from user1.t10;\n+--select * from user1.t11;\n+--set connection user1;\n+--drop view v;\n+set connection user1;\n+ij(USER1)> "
            },
            {
                "sha": "5ca9dfc685f56f39482d8ec1da8bf1c17e51e953",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/grantRevokeDDL2_app.properties",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/5c058ac183999dd0530f3b658a0b7c61fef8a73a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/grantRevokeDDL2_app.properties",
                "raw_url": "https://github.com/apache/derby/raw/5c058ac183999dd0530f3b658a0b7c61fef8a73a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/grantRevokeDDL2_app.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/grantRevokeDDL2_app.properties?ref=5c058ac183999dd0530f3b658a0b7c61fef8a73a",
                "patch": "@@ -8,4 +8,6 @@ useextdirs=true\n derby.locks.deadlockTimeout=5\n derby.locks.waitTimeout=2\n \n-\n+# DataSource properties, only used if ij.dataSource is set\n+ij.dataSource.databaseName=wombat\n+ij.dataSource.createDatabase=create"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/ae9260fea44534dfbf26bb8ce1e27f93fb144253",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/58a99b7831558139998b4e8367610e5f95ca0d67",
        "message": "DERBY-3538 NullPointerException during execution for query with LEFT OUTER JOIN whose inner table selects all constants.\n\nContributed by Army Brown\n\nHere are some of Army's comments ...\nit *appears* that the problem is in the \"doProjection()\" method of ProjectRestrictResultSet. During code generation we recognize that the SELECT has all constants and thus that its result set is \"reusable\"; see ProjectRestrictNode.generateMinion(), esp. the call to:\n\n  mb.push(resultColumns.reusableResult());\n\nAt execution, ProjectResrictResultSet sees that it can reuse the result set so it \"caches\" the execution row in doProjection() and then just returns that on subsequent calls. However, when returning the cached row, the method does *not* call \"setCurrentRow()\" with the cached row. In some cases (esp. left outer join) that can mean that the \"current execution row\" corresponding to the ProjectRestrictResultSet remains null when it should be set to the cached row. Thus when it comes time to evaluate the ON predicate, which references the ProjectRestrictResultSet's execution row, the predicate fails with an NPE because the \"current execution row\" is not set for that PRRS. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@638425 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_137",
        "file": [
            {
                "sha": "183a8536b320af88e5ca171563ab61e279cfe37f",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java",
                "status": "modified",
                "additions": 9,
                "deletions": 0,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/ae9260fea44534dfbf26bb8ce1e27f93fb144253/java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/ae9260fea44534dfbf26bb8ce1e27f93fb144253/java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java?ref=ae9260fea44534dfbf26bb8ce1e27f93fb144253",
                "patch": "@@ -477,6 +477,15 @@ private ExecRow doProjection(ExecRow sourceRow)\n \t\t// No need to use reflection if reusing the result\n \t\tif (reuseResult && projRow != null)\n \t\t{\n+\t\t\t/* Make sure we reset the current row based on the re-used\n+\t\t\t * result.  Otherwise, if the \"current row\" for this result\n+\t\t\t * set was nulled out in a previous call to getNextRow(),\n+\t\t\t * which can happen if this node is the right-side of\n+\t\t\t * a left outer join, the \"current row\" stored for this\n+\t\t\t * result set in activation.row would remain null, which\n+\t\t\t * would be wrong. DERBY-3538.\n+\t\t\t */\n+\t\t\tsetCurrentRow(projRow);\n \t\t\treturn projRow;\n \t\t}\n "
            },
            {
                "sha": "597a7163953662d0a83a8ed5fbc6286dc0e02861",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/joins.out",
                "status": "modified",
                "additions": 19,
                "deletions": 0,
                "changes": 19,
                "blob_url": "https://github.com/apache/derby/blob/ae9260fea44534dfbf26bb8ce1e27f93fb144253/java/testing/org/apache/derbyTesting/functionTests/master/joins.out",
                "raw_url": "https://github.com/apache/derby/raw/ae9260fea44534dfbf26bb8ce1e27f93fb144253/java/testing/org/apache/derbyTesting/functionTests/master/joins.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/joins.out?ref=ae9260fea44534dfbf26bb8ce1e27f93fb144253",
                "patch": "@@ -613,6 +613,23 @@ ij> select * from j1089_dest;\n DEST_ID    |SOURCE_ID_1|SOURCE_ID_2\n -----------------------------------\n 1          |0          |0          \n+ij> -- DERBY-3538 NullPointerException during execution for query with LEFT\n+-- OUTER JOIN whose inner table selects all constants.\n+create table t3538 (i int, j int);\n+0 rows inserted/updated/deleted\n+ij> insert into t3538 values (-1, -2), (-2, -4), (-3, -9);\n+3 rows inserted/updated/deleted\n+ij> select * from\n+t3538 left outer join\n+    (select -1 a, 1 b from t3538) x0 --DERBY-PROPERTIES joinStrategy=NESTEDLOOP\n+   on x0.a = t3538.i;\n+I          |J          |A          |B          \n+-----------------------------------------------\n+-1         |-2         |-1         |1          \n+-1         |-2         |-1         |1          \n+-1         |-2         |-1         |1          \n+-2         |-4         |NULL       |NULL       \n+-3         |-9         |NULL       |NULL       \n ij> -----------------------------------\n -- clean up\n ----------------------------------\n@@ -642,4 +659,6 @@ ij> drop table j1089_source;\n 0 rows inserted/updated/deleted\n ij> drop table j1089_dest;\n 0 rows inserted/updated/deleted\n+ij> drop table t3538;\n+0 rows inserted/updated/deleted\n ij> \n\\ No newline at end of file"
            },
            {
                "sha": "0557a311b5a6c521a3fbc1637b6cb2073b20f4bf",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/joins.sql",
                "status": "modified",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/ae9260fea44534dfbf26bb8ce1e27f93fb144253/java/testing/org/apache/derbyTesting/functionTests/tests/lang/joins.sql",
                "raw_url": "https://github.com/apache/derby/raw/ae9260fea44534dfbf26bb8ce1e27f93fb144253/java/testing/org/apache/derbyTesting/functionTests/tests/lang/joins.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/joins.sql?ref=ae9260fea44534dfbf26bb8ce1e27f93fb144253",
                "patch": "@@ -352,6 +352,17 @@ insert into j1089_dest (source_id_1, source_id_2)\n             join j1089_source as s2 on 1 = 1;\n select * from j1089_dest;\n \n+\n+-- DERBY-3538 NullPointerException during execution for query with LEFT\n+-- OUTER JOIN whose inner table selects all constants.\n+create table t3538 (i int, j int);\n+insert into t3538 values (-1, -2), (-2, -4), (-3, -9);\n+\n+select * from\n+t3538 left outer join\n+    (select -1 a, 1 b from t3538) x0 --DERBY-PROPERTIES joinStrategy=NESTEDLOOP\n+   on x0.a = t3538.i; \n+\n -----------------------------------\n -- clean up\n ----------------------------------\n@@ -368,3 +379,4 @@ drop table x;\n drop table y;\n drop table j1089_source;\n drop table j1089_dest;\n+drop table t3538;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/94d3c58fa4bcc7b4f0905c55619beeee3b0d83c4",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/ab49fa3c6544d58d2573696c47c8b6a3091c8cb9",
        "message": "DERBY-5249 A table created with 10.0.2.1 with constraints cannot be dropped with 10.5 due to NullPointerException with insane build or ASSERT FAILED Failed to find sharable conglomerate descriptor for index conglomerate with sane build\n\nAdd a test for this issue. The test xtestDropTableAfterUpgradeWithConstraint()\nis not currently enabled because the issue is not yet fixed. \nRemove the x to enable the test once the issue is fixed.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1130632 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_138",
        "file": [
            {
                "sha": "4a86801c10b47fa638d271f5b1ee956b63ed3c1f",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java",
                "status": "modified",
                "additions": 55,
                "deletions": 2,
                "changes": 57,
                "blob_url": "https://github.com/apache/derby/blob/94d3c58fa4bcc7b4f0905c55619beeee3b0d83c4/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java",
                "raw_url": "https://github.com/apache/derby/raw/94d3c58fa4bcc7b4f0905c55619beeee3b0d83c4/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java?ref=94d3c58fa4bcc7b4f0905c55619beeee3b0d83c4",
                "patch": "@@ -1,6 +1,6 @@\n /*\n \n-Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup\n+Derby - Class org.apache.dertbyTesting.functionTests.tests.upgradeTests.BasicSetup\n \n Licensed to the Apache Software Foundation (ASF) under one or more\n contributor license agreements.  See the NOTICE file distributed with\n@@ -29,6 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.iapi.services.io.DerbyIOException;\n import org.apache.derbyTesting.junit.JDBC;\n import org.apache.derbyTesting.junit.TestConfiguration;\n+import org.apache.derbyTesting.junit.Utilities;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n@@ -259,5 +260,57 @@ public void noConnectionAfterHardUpgrade()\n                 }\n             break;\n         }\n+    }  \n+ \n+    \n+    /**\n+     * DERBY-5249 table created with primary and foreign key can't be dropped\n+     * Test currently disabled. Remove the x from the name to enable the \n+     * test once the bug is fixed.\n+     * \n+     */\n+    public void xtestDropTableAfterUpgradeWithConstraint() throws SQLException {\n+        final int phase = getPhase();\n+\n+        Statement s = createStatement();\n+\n+        switch (phase) {\n+        case PH_CREATE:\n+            s.executeUpdate(\"CREATE SCHEMA S\");\n+            s.executeUpdate(\"CREATE TABLE S.RS (R_TYPE_ID VARCHAR(64) \"\n+                    + \"NOT NULL)\");\n+            s.executeUpdate(\"ALTER TABLE S.RS ADD CONSTRAINT PK_RS \"\n+                    + \"PRIMARY KEY (R_TYPE_ID)\");\n+            s.executeUpdate(\"CREATE TABLE S.R_TYPE_ID (R_TYPE_ID \"\n+                    + \"VARCHAR(64) NOT NULL)\");\n+            s.executeUpdate(\"ALTER TABLE S.R_TYPE_ID ADD CONSTRAINT \"\n+                    + \"PK_R_TYPE_ID PRIMARY KEY (R_TYPE_ID)\");\n+            s.executeUpdate(\"ALTER TABLE S.RS ADD CONSTRAINT \"\n+                    + \"FK_RS_TYPEID FOREIGN KEY (R_TYPE_ID) REFERENCES \"\n+                    + \"S.R_TYPE_ID (R_TYPE_ID) ON DELETE CASCADE ON \"\n+                    + \"UPDATE NO ACTION\");\n+            /*\n+             * With 10.0 and early 10.1 releases a duplicate conglomerate entry\n+             * shows in sys.sysconglomerates for the primary key PK_RS. It can\n+             * be seen with this query.Utilities.showResultSet(s.executeQuery(\n+             * \"select c.constraintname, c.constraintid,  cong.conglomerateid, cong.conglomeratename  from sys.sysconglomerates cong, sys.syskeys k, sys.sysconstraints c where c.constraintname = 'PK_RS' and c.constraintid =k.constraintid and k.conglomerateid = cong.conglomerateid \"\n+             * ));\n+             */\n+            break;\n+        case PH_SOFT_UPGRADE:\n+            s.executeUpdate(\"ALTER TABLE S.RS DROP CONSTRAINT FK_RS_TYPEID\");\n+            s.executeUpdate(\"ALTER TABLE S.R_TYPE_ID ADD CONSTRAINT \"\n+                    + \"PK_R_TYPE_ID PRIMARY KEY (R_TYPE_ID)\");\n+            s.executeUpdate(\"ALTER TABLE S.RS DROP CONSTRAINT PK_RS\");\n+            s.executeUpdate(\"DROP TABLE S.RS\");\n+            s.executeUpdate(\"DROP TABLE S.R_TYPE\");\n+            s.executeUpdate(\"DROP SCHEMA S RESTRICT\");\n+            break;\n+        case PH_POST_SOFT_UPGRADE:\n+            break;\n+        case PH_HARD_UPGRADE:\n+            break;\n+        }\n+\n+    }\n     }\n-}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/31d80c00e8dbd862e1de2276ecb09006cd98846b",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/1e67bdad5fa4ddbf4d5ab624bce90634b8b47041",
        "message": "DERBY-3094: Grouping by expressions causes NullPointerException\n\nThis change modifies GroupByNode.addUnAggColumns to process the expressions\nin the GROUP BY list in descending order of complexity, as measured by the\nnumber of column references in the GROUP BY list element. This ensures\nthat when we are matching up expressions in the SELECT list with expressions\nin the GROUP BY list, that we choose the best match, and don't erroneously\nmatch a sub-expression.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@632221 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_139",
        "file": [
            {
                "sha": "d6252be9a8d819ecf7427a0d7264d2ae4a04250a",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java",
                "status": "modified",
                "additions": 85,
                "deletions": 10,
                "changes": 95,
                "blob_url": "https://github.com/apache/derby/blob/31d80c00e8dbd862e1de2276ecb09006cd98846b/java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java",
                "raw_url": "https://github.com/apache/derby/raw/31d80c00e8dbd862e1de2276ecb09006cd98846b/java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java?ref=31d80c00e8dbd862e1de2276ecb09006cd98846b",
                "patch": "@@ -23,6 +23,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n import java.util.Iterator;\n import java.util.Vector;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.Collections;\n \n import org.apache.derby.catalog.IndexDescriptor;\n import org.apache.derby.iapi.error.StandardException;\n@@ -343,6 +346,10 @@ private void addUnAggColumns() throws StandardException\n \t\tResultColumnList bottomRCL  = childResult.getResultColumns();\n \t\tResultColumnList groupByRCL = resultColumns;\n \n+\t\tArrayList referencesToSubstitute = new ArrayList();\n+\t\tArrayList havingRefsToSubstitute = null;\n+\t\tif (havingClause != null)\n+\t\t\thavingRefsToSubstitute = new ArrayList();\n \t\tint sz = groupingList.size();\n \t\tfor (int i = 0; i < sz; i++) \n \t\t{\n@@ -385,12 +392,27 @@ private void addUnAggColumns() throws StandardException\n \t\t\t// in the projection list with a virtual column node\n \t\t\t// that effectively points to a result column \n \t\t\t// in the result set doing the group by\n-\t\t\tSubstituteExpressionVisitor se = \n-\t\t\t\tnew SubstituteExpressionVisitor(\n-\t\t\t\t\t\tgbc.getColumnExpression(),\n-\t\t\t\t\t\tvc,\n+\t\t\t//\n+\t\t\t// Note that we don't perform the replacements\n+\t\t\t// immediately, but instead we accumulate them\n+\t\t\t// until the end of the loop. This allows us to\n+\t\t\t// sort the expressions and process them in\n+\t\t\t// descending order of complexity, necessary\n+\t\t\t// because a compound expression may contain a\n+\t\t\t// reference to a simple grouped column, but in\n+\t\t\t// such a case we want to process the expression\n+\t\t\t// as an expression, not as individual column\n+\t\t\t// references. E.g., if the statement was:\n+\t\t\t//   SELECT ... GROUP BY C1, C1 * (C2 / 100), C3\n+\t\t\t// then we don't want the replacement of the\n+\t\t\t// simple column reference C1 to affect the\n+\t\t\t// compound expression C1 * (C2 / 100). DERBY-3094.\n+\t\t\t//\n+\t\t\tValueNode vn = gbc.getColumnExpression();\n+\t\t\tSubstituteExpressionVisitor vis =\n+\t\t\t\tnew SubstituteExpressionVisitor(vn, vc,\n \t\t\t\t\t\tAggregateNode.class);\n-\t\t\tparent.getResultColumns().accept(se);\n+\t\t\treferencesToSubstitute.add(vis);\n \t\t\t\n \t\t\t// Since we always need a PR node on top of the GB \n \t\t\t// node to perform projection we can use it to perform \n@@ -414,15 +436,26 @@ private void addUnAggColumns() throws StandardException\n \t\t\t// GBN (RCL) -> (C1, SUM(C2), <input>, <aggregator>, MAX(C3), <input>, <aggregator>\n \t\t\t//              |\n \t\t\t//       FBT (C1, C2)\n-\t\t\tif (havingClause != null) {\n+\t\t\tif (havingClause != null)\n+\t\t\t{\n \t\t\t\tSubstituteExpressionVisitor havingSE =\n-\t\t\t\t\tnew SubstituteExpressionVisitor(\n-\t\t\t\t\t\t\tgbc.getColumnExpression(),\n-\t\t\t\t\t\t\tvc, null);\n-\t\t\t\thavingClause.accept(havingSE);\n+\t\t\t\t\tnew SubstituteExpressionVisitor(vn,vc,null);\n+\t\t\t\thavingRefsToSubstitute.add(havingSE);\n \t\t\t}\n \t\t\tgbc.setColumnPosition(bottomRCL.size());\n \t\t}\n+\t\tComparator sorter = new ExpressionSorter();\n+\t\tCollections.sort(referencesToSubstitute,sorter);\n+\t\tfor (int r = 0; r < referencesToSubstitute.size(); r++)\n+\t\t\tparent.getResultColumns().accept(\n+\t\t\t\t(SubstituteExpressionVisitor)referencesToSubstitute.get(r));\n+\t\tif (havingRefsToSubstitute != null)\n+\t\t{\n+\t\t\tCollections.sort(havingRefsToSubstitute,sorter);\n+\t\t\tfor (int r = 0; r < havingRefsToSubstitute.size(); r++)\n+\t\t\t\thavingClause.accept(\n+\t\t\t\t\t(SubstituteExpressionVisitor)havingRefsToSubstitute.get(r));\n+}\n \t}\n \n \t/**\n@@ -1223,4 +1256,46 @@ else if (an.getOperand() instanceof ConstantNode)\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Comparator class for GROUP BY expression substitution.\n+\t *\n+\t * This class enables the sorting of a collection of\n+\t * SubstituteExpressionVisitor instances. We sort the visitors\n+\t * during the tree manipulation processing in order to process\n+\t * expressions of higher complexity prior to expressions of\n+\t * lower complexity. Processing the expressions in this order ensures\n+\t * that we choose the best match for an expression, and thus avoids\n+\t * problems where we substitute a sub-expression instead of the\n+\t * full expression. For example, if the statement is:\n+\t *   ... GROUP BY a+b, a, a*(a+b), a+b+c\n+\t * we'll process those expressions in the order: a*(a+b),\n+\t * a+b+c, a+b, then a.\n+\t */\n+\tprivate static final class ExpressionSorter implements Comparator\n+\t{\n+\t\tpublic int compare(Object o1, Object o2)\n+\t\t{\n+\t\t\ttry {\n+\t\t\t\tValueNode v1 = ((SubstituteExpressionVisitor)o1).getSource();\n+\t\t\t\tValueNode v2 = ((SubstituteExpressionVisitor)o2).getSource();\n+\t\t\t\tint refCount1, refCount2;\n+\t\t\t\tCollectNodesVisitor vis = new CollectNodesVisitor(\n+\t\t\t\tColumnReference.class);\n+\t\t\t\tv1.accept(vis);\n+\t\t\t\trefCount1 = vis.getList().size();\n+\t\t\t\tvis = new CollectNodesVisitor(ColumnReference.class);\n+\t\t\t\tv2.accept(vis);\n+\t\t\t\trefCount2 = vis.getList().size();\n+\t\t\t\t// The ValueNode with the larger number of refs\n+\t\t\t\t// should compare lower. That way we are sorting\n+\t\t\t\t// the expressions in descending order of complexity.\n+\t\t\t\treturn refCount2 - refCount1;\n+\t\t\t}\n+\t\t\tcatch (StandardException e)\n+\t\t\t{\n+\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t}\n+\t\t}\n+\t}\n }"
            },
            {
                "sha": "055f5b335a0b2985b2e34d768cb88df1f2dfda8b",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/SubstituteExpressionVisitor.java",
                "status": "modified",
                "additions": 8,
                "deletions": 0,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/31d80c00e8dbd862e1de2276ecb09006cd98846b/java/engine/org/apache/derby/impl/sql/compile/SubstituteExpressionVisitor.java",
                "raw_url": "https://github.com/apache/derby/raw/31d80c00e8dbd862e1de2276ecb09006cd98846b/java/engine/org/apache/derby/impl/sql/compile/SubstituteExpressionVisitor.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/SubstituteExpressionVisitor.java?ref=31d80c00e8dbd862e1de2276ecb09006cd98846b",
                "patch": "@@ -43,6 +43,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \t\tskipOverClass = skipThisClass;\n \t}\n \n+\t/**\n+\t * used by GroupByNode to process expressions by complexity level.\n+\t */\n+\tpublic ValueNode getSource()\n+\t{\n+\t\treturn source;\n+\t}\n+\n \tpublic Visitable visit(Visitable node) throws StandardException \n \t{\n \t\tif (!(node instanceof ValueNode))"
            },
            {
                "sha": "379713a182d5a87e8b79a09c36fd44b7016ac005",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java",
                "status": "modified",
                "additions": 121,
                "deletions": 0,
                "changes": 121,
                "blob_url": "https://github.com/apache/derby/blob/31d80c00e8dbd862e1de2276ecb09006cd98846b/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java",
                "raw_url": "https://github.com/apache/derby/raw/31d80c00e8dbd862e1de2276ecb09006cd98846b/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java?ref=31d80c00e8dbd862e1de2276ecb09006cd98846b",
                "patch": "@@ -122,6 +122,127 @@ public void testSimpleExpressions() throws Exception\n                         {9,13,2}});\n     }\n     \n+    /**\n+     * queries which combine compound expressions and simple column refs.\n+     */\n+    public void testDerby3094Expressions() throws Exception\n+    {\n+        verifyQueryResults(\n+                \"Q1\",\n+                \"select c1+c2, sum(c3) from test group by c1+c2, c1\",\n+                new int[][] {\n+                        {11, 100}, \n+                        {12, 100},  // c1=1, c2=11\n+                        {12, 100},  // c1=2, c2=10\n+                        {13, 202}});\n+        verifyQueryResults(\n+                \"Q2\",\n+                \"select c1+c2, sum(c3) from test group by c1, c1+c2\",\n+                new int[][] {\n+                        {11, 100}, \n+                        {12, 100},  // c1=1, c2=11\n+                        {12, 100},  // c1=2, c2=10\n+                        {13, 202}});\n+        verifyQueryResults(\n+                \"Q3\",\n+                \"select c1, c1+c2 from test group by c1, c1+c2\",\n+                new int[][] {\n+                        {1, 11}, \n+                        {1, 12},\n+                        {2, 12},\n+                        {2, 13}});\n+        verifyQueryResults(\n+                \"Q4\",\n+                \"select c1+c2, sum(c3) from test group by c1+c2\",\n+                new int[][] {\n+                        {11, 100}, \n+                        {12, 200},\n+                        {13, 202}});\n+        verifyQueryResults(\n+                \"Q5\",\n+                \"select c1,c2,c1+c2,sum(c3) from test group by c1,c2,c1+c2\",\n+                new int[][] {\n+                        {1, 10, 11, 100},\n+                        {1, 11, 12, 100},\n+                        {2, 10, 12, 100},\n+                        {2, 11, 13, 202}});\n+        verifyQueryResults(\n+                \"Q6\",\n+                \"select c1,c2,sum(c3) from test group by c2, c1\",\n+                new int[][] {\n+                        {1, 10, 100},\n+                        {2, 10, 100},\n+                        {1, 11, 100},\n+                        {2, 11, 202}});\n+        verifyQueryResults(\n+                \"Q7\",\n+                \"select c1 as c2, sum(c3) from test group by c1,c2\",\n+                new int[][] {\n+                        {1, 100},\n+                        {1, 100},\n+                        {2, 100},\n+                        {2, 202}});\n+        verifyQueryResults(\n+                \"Q8\",\n+                \"select c1 as c2, sum(c3) from test group by c1\",\n+                new int[][] {\n+                        {1, 200},\n+                        {2, 302}});\n+        verifyQueryResults(\n+                \"Q9\",\n+            \"select c1+c2, sum(c3) from test group by c1+c2 having c1+c2 > 11\",\n+                new int[][] {\n+                        {12, 200},\n+                        {13, 202}});\n+        verifyQueryResults(\n+                \"Q10\",\n+            \"select c1+c2, sum(c3) from test \" +\n+                     \"group by c1, c1+c2 having c1+c2 > 11\",\n+                new int[][] {\n+                        {12, 100},\n+                        {12, 100},\n+                        {13, 202}});\n+        verifyQueryResults(\n+                \"Q11\",\n+                \"select c1*((c1+c2)/2), count(*) from test \" +\n+                \" group by (c1+c2),  c1*((c1+c2)/2)\",\n+                new int[][] {\n+                        {5, 1},\n+                        {6, 1},\n+                        {12, 1},\n+                        {12, 2}});\n+        verifyQueryResults(\n+                \"Q12\",\n+                \"select c1, c1+c2, (c1+c2)+c3, count(*) from test \" +\n+                \" group by c1, c1+c2, (c1+c2)+c3\",\n+                new int[][] {\n+                        {1, 11, 111, 1},\n+                        {1, 12, 112, 1},\n+                        {2, 12, 112, 1},\n+                        {2, 13, 114, 2}});\n+        verifyQueryResults(\n+                \"Q13\",\n+                \"select (c1+c2)+c3, count(*) from test \" +\n+                \" group by c3, c1+c2\",\n+                new int[][] {\n+                        {111, 1},\n+                        {112, 2},\n+                        {114, 2}});\n+        assertCompileError(\n+                \"42Y30\", \"select c1+c2, sum(c3) from test group by c1\");\n+        assertCompileError(\n+                \"42Y30\", \"select c1,c2, sum(c3) from test group by c1+c2,c1\");\n+        assertCompileError(\n+                \"42Y30\", \"select c1+c2, sum(c3) from test group by 1\");\n+        assertCompileError(\n+            \"42X04\", \"select c1+c2 as expr, sum(c3) from test group by expr\");\n+        assertCompileError(\n+            \"42X04\", \"select c1 as c1a, c2, sum(c3) from test group by c1a,c2\");\n+        assertCompileError(\n+                \"42Y30\", \"select c1 as c2, sum(c3) from test group by c2\");\n+        assertCompileError(\n+                \"42Y30\", \"select c1+(c2+c3), sum(c3) from test group by c3, (c1+c2)\");\n+    }\n     \n     public void testSubSelect() throws Exception\n     {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/3c78cae313469087c1f527d7d2874fb3383e1f90",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/9c5e195ab314d7555ec65363204179b999d78561",
        "message": "DERBY-1574: NullPointerException in UPDATE with COALESCE and subquery\n\nThis patch\n- adds a preprocess method to CoalesceFunctionNode to override the one\n  in ValueNode, thus making sure the arguments get handled.\n- adds a printSubNodes method to CoalesceFunctionNode (was missing\n  too, I discovered, when I was trying to look at the parse tree after\n  binding).\n- adds a new test case to coalesceTests.java and an updated master\n\nPatch contributed by Dag H. Wanvik.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@431593 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_140",
        "file": [
            {
                "sha": "602bd6940d9c03c90e5090f614bb6c1b18d2b1dd",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "status": "modified",
                "additions": 53,
                "deletions": 0,
                "changes": 53,
                "blob_url": "https://github.com/apache/derby/blob/3c78cae313469087c1f527d7d2874fb3383e1f90/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "raw_url": "https://github.com/apache/derby/raw/3c78cae313469087c1f527d7d2874fb3383e1f90/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java?ref=3c78cae313469087c1f527d7d2874fb3383e1f90",
                "patch": "@@ -317,4 +317,57 @@ public String toString() {\n \t\t}\n \t}\n \n+\t/**\n+\t * Preprocess an expression tree.  We do a number of transformations\n+\t * here (including subqueries, IN lists, LIKE and BETWEEN) plus\n+\t * subquery flattening.\n+\t * NOTE: This is done before the outer ResultSetNode is preprocessed.\n+\t *\n+\t * @param\tnumTables\t\t\tNumber of tables in the DML Statement\n+\t * @param\touterFromList\t\tFromList from outer query block\n+\t * @param\touterSubqueryList\tSubqueryList from outer query block\n+\t * @param\touterPredicateList\tPredicateList from outer query block\n+\t *\n+\t * @return\t\t\t\t\t\tThe modified expression\n+\t *\n+\t * @exception StandardException\t\tThrown on error\n+\t */\n+\tpublic ValueNode preprocess(int numTables,\n+\t\t\t\t\t\t\t\tFromList outerFromList,\n+\t\t\t\t\t\t\t\tSubqueryList outerSubqueryList,\n+\t\t\t\t\t\t\t\tPredicateList outerPredicateList) \n+\t\t\t\t\tthrows StandardException\n+\t{\n+\t\tint argumentsListSize = argumentsList.size();\n+\t\tfor (int i=0; i < argumentsListSize; i++) {\n+\t\t\t((ValueNode)argumentsList.elementAt(i)).preprocess\n+\t\t\t\t(numTables,\n+\t\t\t\t outerFromList,\n+\t\t\t\t outerSubqueryList,\n+\t\t\t\t outerPredicateList);\n+\t\t}\n+\t\treturn this;\n+\t}\n+\n+\n+\t/**\n+\t * Prints the sub-nodes of this object.  See QueryTreeNode.java for\n+\t * how tree printing is supposed to work.\n+\t *\n+\t * @param depth\t\t\t\t\tThe depth of this node in the tree\n+\t */\n+\n+\tpublic void printSubNodes(int depth)\n+\t{\n+\t\tif (SanityManager.DEBUG)\n+\t\t{\n+\t\t\tsuper.printSubNodes(depth);\n+\t\t\tprintLabel(depth, \"argumentsList: \");\n+\t\t\tint argumentsListSize = argumentsList.size();\n+\t\t\tfor (int i=0; i < argumentsListSize; i++) {\n+\t\t\t    ((ValueNode)argumentsList.elementAt(i)).treePrint(depth+1);\n+\t\t\t}\n+\t\t}\n+\t}\n+        \n }"
            },
            {
                "sha": "d653bf764f1a34748f08063d56ed594aaf9795e8",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/subquery.out",
                "status": "modified",
                "additions": 24,
                "deletions": 0,
                "changes": 24,
                "blob_url": "https://github.com/apache/derby/blob/3c78cae313469087c1f527d7d2874fb3383e1f90/java/testing/org/apache/derbyTesting/functionTests/master/subquery.out",
                "raw_url": "https://github.com/apache/derby/raw/3c78cae313469087c1f527d7d2874fb3383e1f90/java/testing/org/apache/derbyTesting/functionTests/master/subquery.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/subquery.out?ref=3c78cae313469087c1f527d7d2874fb3383e1f90",
                "patch": "@@ -1645,4 +1645,28 @@ ij> drop table t3;\n 0 rows inserted/updated/deleted\n ij> drop table t4;\n 0 rows inserted/updated/deleted\n+ij> -- DERBY-1574: Subquery in COALESCE gives NPE due\n+-- to preprocess not implemented for that node type\n+create table t1 (id int);\n+0 rows inserted/updated/deleted\n+ij> create table t2 (i integer primary key, j int);\n+0 rows inserted/updated/deleted\n+ij> insert into t1 values 1,2,3,4,5;\n+5 rows inserted/updated/deleted\n+ij> insert into t2 values (1,1),(2,4),(3,9),(4,16);\n+4 rows inserted/updated/deleted\n+ij> update t1 set id = coalesce((select j from t2 where t2.i=t1.id), 0);\n+5 rows inserted/updated/deleted\n+ij> select * from t1;\n+ID         \n+-----------\n+1          \n+4          \n+9          \n+16         \n+0          \n+ij> drop table t1;\n+0 rows inserted/updated/deleted\n+ij> drop table t2;\n+0 rows inserted/updated/deleted\n ij> "
            },
            {
                "sha": "0d23200838fe25afd7a77bee66f61643659e23a4",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/subquery.sql",
                "status": "modified",
                "additions": 15,
                "deletions": 0,
                "changes": 15,
                "blob_url": "https://github.com/apache/derby/blob/3c78cae313469087c1f527d7d2874fb3383e1f90/java/testing/org/apache/derbyTesting/functionTests/tests/lang/subquery.sql",
                "raw_url": "https://github.com/apache/derby/raw/3c78cae313469087c1f527d7d2874fb3383e1f90/java/testing/org/apache/derbyTesting/functionTests/tests/lang/subquery.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/subquery.sql?ref=3c78cae313469087c1f527d7d2874fb3383e1f90",
                "patch": "@@ -525,3 +525,18 @@ drop table t1;\n drop table t2;\n drop table t3;\n drop table t4;\n+\n+-- DERBY-1574: Subquery in COALESCE gives NPE due\n+-- to preprocess not implemented for that node type\n+create table t1 (id int);\n+create table t2 (i integer primary key, j int);\n+\n+insert into t1 values 1,2,3,4,5;\n+insert into t2 values (1,1),(2,4),(3,9),(4,16);\n+ \n+update t1 set id = coalesce((select j from t2 where t2.i=t1.id), 0);\n+select * from t1;\n+\n+drop table t1;\n+drop table t2;\n+"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/8e896c5f0bafb6df137861df90cd940d3730a3af",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/f32e51e193c80b5968fca03977d7884403d7d450",
        "message": "DERBY-746 Fix NullPointerException on passing an invalid format as encryptionKey on a JDBC URL\n* JCECipherFactory.boot() now checks the output from the fromHexString-method and throws an exception if it is invalid.\n* Added 2 new SQLStates and messages (only English)\n* Added 2 new test cases (invalid char in encryption key and encryption key of with odd length).\n* Updated master file. \nPatch contributed by Kristian Waagan (Kristian.Waagan@Sun.com)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@365785 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_141",
        "file": [
            {
                "sha": "da346311a6ccc25e5c3a661cd36758d43143095a",
                "filename": "java/engine/org/apache/derby/iapi/reference/SQLState.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/8e896c5f0bafb6df137861df90cd940d3730a3af/java/engine/org/apache/derby/iapi/reference/SQLState.java",
                "raw_url": "https://github.com/apache/derby/raw/8e896c5f0bafb6df137861df90cd940d3730a3af/java/engine/org/apache/derby/iapi/reference/SQLState.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/reference/SQLState.java?ref=8e896c5f0bafb6df137861df90cd940d3730a3af",
                "patch": "@@ -222,6 +222,9 @@ The message identifier (ie. the value that matches a field in this class)\n     String ENCRYPTION_BAD_JCE           = \"XBCXJ.S\";\n     String ENCRYPTION_BAD_EXTERNAL_KEY  = \"XBCXK.S\";\n     String ENCRYPTION_UNABLE_KEY_VERIFICATION  = \"XBCXL.S\";\n+    String ENCRYPTION_INVALID_EXKEY_LENGTH          = \"XBCXM.S\";\n+    String ENCRYPTION_ILLEGAL_EXKEY_CHARS           = \"XBCXN.S\";\n+        \n \t/*\n \t** Cache Service\n \t*/"
            },
            {
                "sha": "009c7c336cad2794dfeb509080cbfb15b6eca4f8",
                "filename": "java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java",
                "status": "modified",
                "additions": 8,
                "deletions": 0,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/8e896c5f0bafb6df137861df90cd940d3730a3af/java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java",
                "raw_url": "https://github.com/apache/derby/raw/8e896c5f0bafb6df137861df90cd940d3730a3af/java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java?ref=8e896c5f0bafb6df137861df90cd940d3730a3af",
                "patch": "@@ -546,6 +546,14 @@ else if (cryptoAlgorithmShort.equals(DES)) {\n \t\t\t\t\tthrow StandardException.newException(SQLState.SERVICE_WRONG_BOOT_PASSWORD);\n \n \t\t\t\tgeneratedKey = org.apache.derby.iapi.util.StringUtil.fromHexString(externalKey, 0, externalKey.length());\n+                if (generatedKey == null) {\n+                    throw StandardException.newException(\n+                        // If length is even, we assume invalid character(s),\n+                        // based on how 'fromHexString' behaves.\n+                        externalKey.length() % 2 == 0 \n+                            ? SQLState.ENCRYPTION_ILLEGAL_EXKEY_CHARS\n+                            : SQLState.ENCRYPTION_INVALID_EXKEY_LENGTH);\n+                }\n \n \t\t\t} else {\n "
            },
            {
                "sha": "ae25df6969e04eb1b316a7985f41fd7a20e924d1",
                "filename": "java/engine/org/apache/derby/loc/messages_en.properties",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/8e896c5f0bafb6df137861df90cd940d3730a3af/java/engine/org/apache/derby/loc/messages_en.properties",
                "raw_url": "https://github.com/apache/derby/raw/8e896c5f0bafb6df137861df90cd940d3730a3af/java/engine/org/apache/derby/loc/messages_en.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/loc/messages_en.properties?ref=8e896c5f0bafb6df137861df90cd940d3730a3af",
                "patch": "@@ -83,6 +83,8 @@ XBCXI.S=The feedback mode ''{0}'' is not supported. Supported feedback modes are\n XBCXJ.S=The application is using a version of the Java Cryptography Extension (JCE) earlier than 1.2.1.  Please upgrade to JCE 1.2.1 and try the operation again.    \n XBCXK.S=The given encryption key does not match the encryption key used when creating the database. Please ensure that you are using the correct encryption key and try again. \n XBCXL.S=The verification process for the encryption key was not successful. This could have been caused by an error when accessing the appropriate file to do the verification process.  See next exception for details.  \n+XBCXM.S=The length of the external encryption key must be an even number.\n+XBCXN.S=The external encryption key contains one or more illegal characters. Allowed characters for a hexedecimal number are 0-9, a-f and A-F.\n \n #../java/com/ibm/db2j/impl/BasicServices/CacheService/Generic/messages.properties\n "
            },
            {
                "sha": "321a7010c2b859fa9d6fbf0e7e9b6cacce0bede7",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/encryptionKey.out",
                "status": "modified",
                "additions": 15,
                "deletions": 1,
                "changes": 16,
                "blob_url": "https://github.com/apache/derby/blob/8e896c5f0bafb6df137861df90cd940d3730a3af/java/testing/org/apache/derbyTesting/functionTests/master/encryptionKey.out",
                "raw_url": "https://github.com/apache/derby/raw/8e896c5f0bafb6df137861df90cd940d3730a3af/java/testing/org/apache/derbyTesting/functionTests/master/encryptionKey.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/encryptionKey.out?ref=8e896c5f0bafb6df137861df90cd940d3730a3af",
                "patch": "@@ -13,7 +13,10 @@ ij> ----------------------------------------------------------------------------\n --\t   with right key\n --\t   with wrong key\n --\t   with right key\n--- \t   test restoreFrom \n+--\t   test restoreFrom\n+-- Case 4: use invalid key when trying to create\n+--     key length not even\n+--     key contains invalid character(s)\n --\t   \n ------------------------------------------------------------------------------------\n -- case1:\tgive external encryptionKey instead of bootpassword\n@@ -113,4 +116,15 @@ I1         |C2\n --------------------------------\n 1          |a                   \n ij(CONNECTION6)> disconnect;\n+ij> -- case 4 : invalid keys\n+-- key length not even\n+connect 'jdbc:derby:encddbdb_invkey;create=true;dataEncryption=true;encryptionAlgorithm=DES/CBC/NoPadding;encryptionKey=123456789';\n+ERROR XJ041: Failed to create database 'encddbdb_invkey', see the next exception for details.\n+ERROR XBM01: Startup failed due to an exception. See next exception for details. \n+ERROR XBCXM: The length of the external encryption key must be an even number.\n+ij> -- key contains illegal character(s)\n+connect 'jdbc:derby:encddbdb_invkey;create=true;dataEncryption=true;encryptionAlgorithm=DES/CBC/NoPadding;encryptionKey=616263646566676869616263646565XY';\n+ERROR XJ041: Failed to create database 'encddbdb_invkey', see the next exception for details.\n+ERROR XBM01: Startup failed due to an exception. See next exception for details. \n+ERROR XBCXN: The external encryption key contains one or more illegal characters. Allowed characters for a hexedecimal number are 0-9, a-f and A-F.\n ij> "
            },
            {
                "sha": "1afb6ce61a471b5fe038892d4e57eb4d96252dea",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/encryptionKey.sql",
                "status": "modified",
                "additions": 12,
                "deletions": 1,
                "changes": 13,
                "blob_url": "https://github.com/apache/derby/blob/8e896c5f0bafb6df137861df90cd940d3730a3af/java/testing/org/apache/derbyTesting/functionTests/tests/store/encryptionKey.sql",
                "raw_url": "https://github.com/apache/derby/raw/8e896c5f0bafb6df137861df90cd940d3730a3af/java/testing/org/apache/derbyTesting/functionTests/tests/store/encryptionKey.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/encryptionKey.sql?ref=8e896c5f0bafb6df137861df90cd940d3730a3af",
                "patch": "@@ -13,7 +13,10 @@\n --\t   with right key\n --\t   with wrong key\n --\t   with right key\n--- \t   test restoreFrom \n+--\t   test restoreFrom\n+-- Case 4: use invalid key when trying to create\n+--     key length not even\n+--     key contains invalid character(s)\n --\t   \n ------------------------------------------------------------------------------------\n -- case1:\tgive external encryptionKey instead of bootpassword\n@@ -83,3 +86,11 @@ disconnect;\n connect 'jdbc:derby:encdb;restoreFrom=extinout/mybackup2/encdb;dataEncryption=true;encryptionAlgorithm=DES/CBC/NoPadding;encryptionKey=61626364656667686961626364656568';\n select * from t1;\n disconnect;\n+\n+-- case 4 : invalid keys\n+-- key length not even\n+connect 'jdbc:derby:encddbdb_invkey;create=true;dataEncryption=true;encryptionAlgorithm=DES/CBC/NoPadding;encryptionKey=123456789';\n+\n+-- key contains illegal character(s)\n+connect 'jdbc:derby:encddbdb_invkey;create=true;dataEncryption=true;encryptionAlgorithm=DES/CBC/NoPadding;encryptionKey=616263646566676869616263646565XY';\n+"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/820eb0adcc1ce3ba0a5c8106680cfc430a873724",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/ed043d3dc8f57b11830011b7b0d1c76e9e19659f",
        "message": "DERBY-6828: Network Server fails to start in Czech locale.\n\nLocalizedResource.getTextMessage has special exception-handling behavior\nfor situations where the chosen ResourceBundle does not contain the\nmessage key that we are trying to format.\n\nThe exception handler simply displays the message key, together with\nany arguments to the message.\n\nBut some messages have no arguments, for example the message\nDRDA_SecurityInstalled.I has no arguments, and so NetworkServerControl\npasses a null set of arguments when displaying that message.\n\nTherefore, LocalizedResource.getTextMessage needs to include a null\nguard, so that its exception handler doesn't trip over the non-existent\narguments and crash with a NullPointerException.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1730254 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_142",
        "file": [
            {
                "sha": "53ea99c6f55bb71b5658229764da9113415ddbae",
                "filename": "java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/820eb0adcc1ce3ba0a5c8106680cfc430a873724/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java",
                "raw_url": "https://github.com/apache/derby/raw/820eb0adcc1ce3ba0a5c8106680cfc430a873724/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java?ref=820eb0adcc1ce3ba0a5c8106680cfc430a873724",
                "patch": "@@ -290,7 +290,7 @@ public String getTextMessage(String key, Object... objectArr) {\n \t\t\t\treturn MessageFormat.format(res.getString(key), objectArr);\n \t\t\t} catch (Exception e) {\n \t\t\t\t\tString tmpFormat = key;\n-\t\t\t\t\tfor (int i=0; i<objectArr.length; i++)\n+\t\t\t\t\tfor (int i=0; objectArr != null && i<objectArr.length; i++)\n \t\t\t\t\t\ttmpFormat = tmpFormat + \", <{\" + (i) + \"}>\";\n \t\t\t\t\treturn MessageFormat.format(tmpFormat, objectArr);\n \t\t\t}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/1061fd2082258262eccb55c3194a79c28b3bc8cf",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/65aba97a20ef9ec7355f3b4cf558ad12ad0869cd",
        "message": "DERBY-6348: NPE or assert failure in recursive trigger\n\nReset the activation in the statement context before setting up the\nactivation for the next trigger, so that the nested trigger activation\nis a child of the top-level activation, and not a child of the\nprevious trigger's activation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1537393 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_143",
        "file": [
            {
                "sha": "df74f42bc84ef35ab7cf9373d66e7b9afafb03c9",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/1061fd2082258262eccb55c3194a79c28b3bc8cf/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java",
                "raw_url": "https://github.com/apache/derby/raw/1061fd2082258262eccb55c3194a79c28b3bc8cf/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java?ref=1061fd2082258262eccb55c3194a79c28b3bc8cf",
                "patch": "@@ -157,6 +157,12 @@ private boolean executeSPS(SPSDescriptor sps, boolean isWhen)\n \t\t\t*/\n \t\t\tif (ps == null || recompile)\n \t\t\t{\n+                // The SPS activation will set its parent activation from\n+                // the statement context. Reset it to the original parent\n+                // activation first so that it doesn't use the activation of\n+                // the previously executed SPS as parent. DERBY-6348.\n+                lcc.getStatementContext().setActivation(activation);\n+\n \t\t\t\t/*\n \t\t\t\t** We need to clone the prepared statement so we don't\n \t\t\t\t** wind up marking that ps that is tied to sps as finished"
            },
            {
                "sha": "165131c902bae30d69339b6975242998e30dc20d",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "status": "modified",
                "additions": 30,
                "deletions": 0,
                "changes": 30,
                "blob_url": "https://github.com/apache/derby/blob/1061fd2082258262eccb55c3194a79c28b3bc8cf/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "raw_url": "https://github.com/apache/derby/raw/1061fd2082258262eccb55c3194a79c28b3bc8cf/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java?ref=1061fd2082258262eccb55c3194a79c28b3bc8cf",
                "patch": "@@ -1916,4 +1916,34 @@ public void testDerby6371DropColumn() throws SQLException {\n         JDBC.assertSingleValueResultSet(\n                 s.executeQuery(\"select * from t2\"), \"2\");\n     }\n+\n+    public void testDerby6348() throws SQLException {\n+        setAutoCommit(false);\n+        Statement s = createStatement();\n+        s.execute(\"create table d6348(x int)\");\n+        s.execute(\"insert into d6348 values 1\");\n+        s.execute(\"create trigger d6348_tr1 after update on d6348 values 1\");\n+        s.execute(\"create trigger d6348_tr2 after update on d6348 \"\n+                + \"for each row update d6348 set x = x + 1 where x < 3\");\n+\n+        // Used to fail with assert failure or NullPointerException before\n+        // DERBY-6348.\n+        s.execute(\"update d6348 set x = x + 1\");\n+\n+        JDBC.assertSingleValueResultSet(\n+                s.executeQuery(\"select * from d6348\"),\n+                \"3\");\n+\n+        rollback();\n+\n+        s.execute(\"create table d6348(x int)\");\n+        s.execute(\"create trigger d6348_tr1 after insert on d6348 \"\n+                + \"values current_user\");\n+        s.execute(\"create trigger d6348_tr2 after insert on d6348 \"\n+                + \"values current_user\");\n+\n+        // Used to fail with assert failure or NullPointerException before\n+        // DERBY-6348.\n+        s.execute(\"insert into d6348 values 1\");\n+    }\n }"
            },
            {
                "sha": "7f1cc5e4a1a66bba4ef872797a1bae49b5ef8e0f",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "status": "modified",
                "additions": 87,
                "deletions": 0,
                "changes": 87,
                "blob_url": "https://github.com/apache/derby/blob/1061fd2082258262eccb55c3194a79c28b3bc8cf/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "raw_url": "https://github.com/apache/derby/raw/1061fd2082258262eccb55c3194a79c28b3bc8cf/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java?ref=1061fd2082258262eccb55c3194a79c28b3bc8cf",
                "patch": "@@ -60,6 +60,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private static final String JAVA_EXCEPTION = \"XJ001\";\n     private static final String NOT_SINGLE_COLUMN = \"42X39\";\n     private static final String NON_SCALAR_QUERY = \"21000\";\n+    private static final String TRIGGER_RECURSION = \"54038\";\n \n     public TriggerWhenClauseTest(String name) {\n         super(name);\n@@ -790,4 +791,90 @@ public void testScalarSubquery() throws SQLException {\n         assertStatementError(NON_SCALAR_QUERY, s, \"insert into t1 values 2\");\n         assertTableRowCount(\"T2\", 1);\n     }\n+\n+    /**\n+     * Test that a WHEN clause can call the CURRENT_USER function.\n+     */\n+    public void testCurrentUser() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"create table t1(x int)\");\n+        s.execute(\"create table t2(x varchar(10))\");\n+\n+        // Create one trigger that should only fire when current user is U2,\n+        // and one that should only fire when current user is different from\n+        // U2.\n+        s.execute(\"create trigger tr01 after insert on t1 \"\n+                + \"when (current_user = 'U2') \"\n+                + \"insert into t2 values 'TR01'\");\n+        s.execute(\"create trigger tr02 after insert on t1 \"\n+                + \"when (current_user <> 'U2') \"\n+                + \"insert into t2 values 'TR02'\");\n+        s.execute(\"grant insert on t1 to u2\");\n+\n+        commit();\n+\n+        // Used to get an assert failure or a NullPointerException here before\n+        // DERBY-6348. Expect it to succeed, and expect TR02 to have fired.\n+        s.execute(\"insert into t1 values 1\");\n+        JDBC.assertSingleValueResultSet(\n+                s.executeQuery(\"select * from t2\"), \"TR02\");\n+\n+        rollback();\n+\n+        // Now try the same insert as user U2.\n+        Connection c2 = openUserConnection(\"u2\");\n+        c2.setAutoCommit(true);\n+        Statement s2 = c2.createStatement();\n+        s2.execute(\"insert into \"\n+            + JDBC.escape(TestConfiguration.getCurrent().getUserName(), \"T1\")\n+            + \" values 1\");\n+        s2.close();\n+        c2.close();\n+\n+        // Since the insert was performed by user U2, expect TR01 to have fired.\n+        JDBC.assertSingleValueResultSet(\n+                s.executeQuery(\"select * from t2\"), \"TR01\");\n+\n+        // Cleanup.\n+        dropTable(\"T1\");\n+        dropTable(\"T2\");\n+        commit();\n+    }\n+\n+    /**\n+     * Test that a trigger with a WHEN clause can be recursive.\n+     */\n+    public void testRecursiveTrigger() throws SQLException {\n+        Statement s = createStatement();\n+        s.execute(\"create table t(x int)\");\n+        s.execute(\"create trigger tr1 after insert on t \"\n+                + \"referencing new as new for each row \"\n+                + \"when (new.x > 0) insert into t values new.x - 1\");\n+\n+        // Now fire the trigger. This used to cause an assert failure or a\n+        // NullPointerException before DERBY-6348.\n+        s.execute(\"insert into t values 15, 1, 2\");\n+\n+        // The row trigger will fire three times, so that the above statement\n+        // will insert the values { 15, 14, 13, ... , 0 }, { 1, 0 } and\n+        // { 2, 1, 0 }.\n+        String[][] expectedRows = {\n+            {\"0\"}, {\"0\"}, {\"0\"}, {\"1\"}, {\"1\"}, {\"1\"}, {\"2\"}, {\"2\"}, {\"3\"},\n+            {\"4\"}, {\"5\"}, {\"6\"}, {\"7\"}, {\"8\"}, {\"9\"}, {\"10\"}, {\"11\"},\n+            {\"12\"}, {\"13\"}, {\"14\"}, {\"15\"}\n+        };\n+\n+        JDBC.assertFullResultSet(s.executeQuery(\"select * from t order by x\"),\n+                                 expectedRows);\n+\n+        // Now fire the trigger with a value so that the maximum trigger\n+        // recursion depth (16) is exceeded, and verify that we get the\n+        // expected error.\n+        assertStatementError(TRIGGER_RECURSION, s, \"insert into t values 16\");\n+\n+        // The contents of the table should not have changed, since the\n+        // above statement failed and was rolled back.\n+        JDBC.assertFullResultSet(s.executeQuery(\"select * from t order by x\"),\n+                                 expectedRows);\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/e0ba78cce75da0eac314e9b530ebfd16fb075696",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/c341dc445404dfebb07033082b5083eb2647238f",
        "message": "DERBY-4413 INSERT from SELECT DISTINCT gives assertFailure (sane), or NPE (insane) in presence of generated columns\n\nAfter DERBY-4442 went in, the exception to the ASSERT check we made in\nthe original fix for this issue should be rolled back, so as to\nprovide a better internal consistency check. Patch derby-4413-rollback\ndoes this.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@885659 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_144",
        "file": [
            {
                "sha": "ffae1928e548d42ad766fea1be34ec00cec90132",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java",
                "status": "modified",
                "additions": 1,
                "deletions": 6,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/e0ba78cce75da0eac314e9b530ebfd16fb075696/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java",
                "raw_url": "https://github.com/apache/derby/raw/e0ba78cce75da0eac314e9b530ebfd16fb075696/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java?ref=e0ba78cce75da0eac314e9b530ebfd16fb075696",
                "patch": "@@ -168,12 +168,7 @@ public void addToFreeList(DataValueDescriptor[] objectArray, int maxFreeListSize\n \t\t{\n \t\t\t// the only difference between getClone and cloneObject is cloneObject does\n \t\t\t// not objectify a stream.  We use getClone here.  Beetle 4896.\n-\n-\t\t\t// DERBY-4413 shows that the value for a generated column will be\n-\t\t\t// null as the result set is computed as part of an INSERT INTO, so\n-\t\t\t// accept a null also.\n-\t\t\tnewArray[i] =\n-\t\t\t\t(origArray[i] != null ? origArray[i].getClone() : null);\n+\t\t\tnewArray[i] = origArray[i].getClone();\n \t\t}\n \n \t\treturn newArray;"
            },
            {
                "sha": "19cad5c5a4d20cbcbfe3b8f80d11704d8a7e48c3",
                "filename": "java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java",
                "status": "modified",
                "additions": 3,
                "deletions": 33,
                "changes": 36,
                "blob_url": "https://github.com/apache/derby/blob/e0ba78cce75da0eac314e9b530ebfd16fb075696/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java",
                "raw_url": "https://github.com/apache/derby/raw/e0ba78cce75da0eac314e9b530ebfd16fb075696/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java?ref=e0ba78cce75da0eac314e9b530ebfd16fb075696",
                "patch": "@@ -126,12 +126,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \t**/\n \tprotected boolean columnOrderingNullsLowMap[];\n \n-\n-\t/**\n-    Determine whether a column is used for ordering or not.\n-\t**/\n-\tprivate boolean isOrderingColumn[];\n-\n \t/**\n \tThe sort observer.  May be null.  Used as a callback.\n \t**/\n@@ -461,18 +455,8 @@ void checkColumnTypes(DataValueDescriptor[] row)\n                 Object col2 = template[colid];\n                 if (col1 == null)\n \t\t\t\t{\n-\t\t\t\t\tif (!isOrderingColumn[colid]) {\n-\n-\t\t\t\t\t\t// DERBY-4413 shows that the value for a generated\n-\t\t\t\t\t\t// column will be null as the result set is computed as\n-\t\t\t\t\t\t// part of an INSERT INTO, so accept a null also.\n-\t\t\t\t\t\t// This column would not be part of the sort key.\n-\n-\t\t\t\t\t\tcontinue;\n-\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tSanityManager.THROWASSERT(\"col[\" + colid + \"] is null\");\n-\t\t\t\t\t}\n+\t\t\t\t\tSanityManager.THROWASSERT(\n+\t\t\t\t\t\t\"col[\" + colid + \"]  is null\");\n \t\t\t\t}\n \t\t\t\t\t\t\n                 if (!(col1 instanceof CloneableObject))\n@@ -562,27 +546,13 @@ public void initialize(\n         columnOrderingMap          = new int[columnOrdering.length];\n         columnOrderingAscendingMap = new boolean[columnOrdering.length];\n         columnOrderingNullsLowMap  = new boolean[columnOrdering.length];\n-\n-\t\tif (SanityManager.DEBUG) {\n-\t\t\tisOrderingColumn = new boolean[template.length];\n-\n-\t\t\tfor (int i = 0; i < isOrderingColumn.length; i++) {\n-\t\t\t\tisOrderingColumn[i] = false;\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (int i = 0; i < columnOrdering.length; i++)\n+        for (int i = 0; i < columnOrdering.length; i++)\n         {\n             columnOrderingMap[i] = columnOrdering[i].getColumnId();\n             columnOrderingAscendingMap[i] = columnOrdering[i].getIsAscending();\n             columnOrderingNullsLowMap[i] = columnOrdering[i].getIsNullsOrderedLow();\n-\n-\t\t\tif (SanityManager.DEBUG) {\n-\t\t\t\tisOrderingColumn[columnOrderingMap[i]] = true;\n-\t\t\t}\n         }\n \n-\n \t\t// No inserter or scan yet.\n \t\tthis.inserter = null;\n \t\tthis.scan = null;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/c617243586bb6d318633eb5129bfdab6477b9b7f",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/6b8ccdd94378fb7211470195b273b41eea6197d9",
        "message": "DERBY-4425: NPE with INSERT .. SELECT .. UNION and generated expressions\n\nThis patch adds a test which confirms that DERBY-4425 is fixed. The code\nchange which resolved DERBY-4425 was performed as part of fixing DERBY-4419,\nsince the same code change fixes both symptoms, so this is a test-only patch.\n\nsubversion revision 831304 contains the DERBY-4419 code change.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@831319 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_145",
        "file": [
            {
                "sha": "5f91b0cc8cd7e549f6b96a4890977523b0d80a4c",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "status": "modified",
                "additions": 15,
                "deletions": 0,
                "changes": 15,
                "blob_url": "https://github.com/apache/derby/blob/c617243586bb6d318633eb5129bfdab6477b9b7f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "raw_url": "https://github.com/apache/derby/raw/c617243586bb6d318633eb5129bfdab6477b9b7f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java?ref=c617243586bb6d318633eb5129bfdab6477b9b7f",
                "patch": "@@ -5307,6 +5307,21 @@ public  void    test_031_derby_4413()\n \n     }\n \n+    public void test_derby_4425()\n+        throws Exception\n+    {\n+        Connection conn = getConnection();\n+        goodStatement(conn, \"create table t4425_1(x int)\");\n+        goodStatement(conn, \"create table t4425_2(x int)\");\n+        goodStatement(conn, \"insert into t4425_1 values 1,2\");\n+        goodStatement(conn, \"insert into t4425_2 values 2,3\");\n+        goodStatement(conn, \"create table t4425_3 (x int, \" +\n+                \"y generated always as (2*x))\");\n+        goodStatement(conn, \"insert into t4425_3(x) \" +\n+                \"select * from t4425_1 union select * from t4425_2\");\n+        assertResults(conn, \"select * from t4425_3\",\n+                new String[][] { {\"1\",\"2\"},{\"2\",\"4\"},{\"3\",\"6\"}}, false);\n+    }\n \n     ///////////////////////////////////////////////////////////////////////////////////\n     //"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/9d24308dd44df406f0997fad87f9b34f31811d13",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/7a9ce7e9e625cde2953831e1f62ee1a0ff50cbdc",
        "message": "DERBY-4413 INSERT from SELECT DISTINCT gives assertFailure (sane), or NPE (insane) in presence of generated columns\n\nPatch DERBY-4413-2 makes sort accept columns that are null. In sane mode, it is checked that in such a case, the\nempty column is not part of the sort key.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@829410 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_146",
        "file": [
            {
                "sha": "43d7995899ff11ebebfa7c575fb28218f83418e9",
                "filename": "java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/9d24308dd44df406f0997fad87f9b34f31811d13/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java",
                "raw_url": "https://github.com/apache/derby/raw/9d24308dd44df406f0997fad87f9b34f31811d13/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java?ref=9d24308dd44df406f0997fad87f9b34f31811d13",
                "patch": "@@ -239,7 +239,9 @@ public String toString()\n \t\t\treturn \"GenericColumnDescriptor\\n\\tname: \"+name+\n \t\t\t\t\"\\n\\tTable: \"+schemaName+\".\"+tableName+\n \t\t\t\t\"\\n\\tcolumnPos: \"+columnPos+\n-\t\t\t\t\"\\n\\tType: \"+type;\n+\t\t\t\t\"\\n\\tType: \"+type+\n+\t\t\t\t\"\\n\\tisAutoincrement: \" + isAutoincrement +\n+\t\t\t\t\"\\n\\thasGenerationClause: \" + hasGenerationClause;\n \t\t}\n \t\telse\n \t\t{"
            },
            {
                "sha": "a7297e07f27416dd5b024c78c60910bbf69f9e2c",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java",
                "status": "modified",
                "additions": 6,
                "deletions": 1,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/9d24308dd44df406f0997fad87f9b34f31811d13/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java",
                "raw_url": "https://github.com/apache/derby/raw/9d24308dd44df406f0997fad87f9b34f31811d13/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java?ref=9d24308dd44df406f0997fad87f9b34f31811d13",
                "patch": "@@ -168,7 +168,12 @@ public void addToFreeList(DataValueDescriptor[] objectArray, int maxFreeListSize\n \t\t{\n \t\t\t// the only difference between getClone and cloneObject is cloneObject does\n \t\t\t// not objectify a stream.  We use getClone here.  Beetle 4896.\n-\t\t\tnewArray[i] = origArray[i].getClone();\n+\n+\t\t\t// DERBY-4413 shows that the value for a generated column will be\n+\t\t\t// null as the result set is computed as part of an INSERT INTO, so\n+\t\t\t// accept a null also.\n+\t\t\tnewArray[i] =\n+\t\t\t\t(origArray[i] != null ? origArray[i].getClone() : null);\n \t\t}\n \n \t\treturn newArray;"
            },
            {
                "sha": "ec6e1b775dd6e6792f2d72727500b25b5dba9ce3",
                "filename": "java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java",
                "status": "modified",
                "additions": 33,
                "deletions": 3,
                "changes": 36,
                "blob_url": "https://github.com/apache/derby/blob/9d24308dd44df406f0997fad87f9b34f31811d13/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java",
                "raw_url": "https://github.com/apache/derby/raw/9d24308dd44df406f0997fad87f9b34f31811d13/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java?ref=9d24308dd44df406f0997fad87f9b34f31811d13",
                "patch": "@@ -126,6 +126,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \t**/\n \tprotected boolean columnOrderingNullsLowMap[];\n \n+\n+\t/**\n+    Determine whether a column is used for ordering or not.\n+\t**/\n+\tprivate boolean isOrderingColumn[];\n+\n \t/**\n \tThe sort observer.  May be null.  Used as a callback.\n \t**/\n@@ -455,8 +461,18 @@ void checkColumnTypes(DataValueDescriptor[] row)\n                 Object col2 = template[colid];\n                 if (col1 == null)\n \t\t\t\t{\n-\t\t\t\t\tSanityManager.THROWASSERT(\n-\t\t\t\t\t\t\"col[\" + colid + \"]  is null\");\n+\t\t\t\t\tif (!isOrderingColumn[colid]) {\n+\n+\t\t\t\t\t\t// DERBY-4413 shows that the value for a generated\n+\t\t\t\t\t\t// column will be null as the result set is computed as\n+\t\t\t\t\t\t// part of an INSERT INTO, so accept a null also.\n+\t\t\t\t\t\t// This column would not be part of the sort key.\n+\n+\t\t\t\t\t\tcontinue;\n+\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tSanityManager.THROWASSERT(\"col[\" + colid + \"] is null\");\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\t\t\t\n                 if (!(col1 instanceof CloneableObject))\n@@ -546,13 +562,27 @@ public void initialize(\n         columnOrderingMap          = new int[columnOrdering.length];\n         columnOrderingAscendingMap = new boolean[columnOrdering.length];\n         columnOrderingNullsLowMap  = new boolean[columnOrdering.length];\n-        for (int i = 0; i < columnOrdering.length; i++)\n+\n+\t\tif (SanityManager.DEBUG) {\n+\t\t\tisOrderingColumn = new boolean[template.length];\n+\n+\t\t\tfor (int i = 0; i < isOrderingColumn.length; i++) {\n+\t\t\t\tisOrderingColumn[i] = false;\n+\t\t\t}\n+\t\t}\n+\n+\t\tfor (int i = 0; i < columnOrdering.length; i++)\n         {\n             columnOrderingMap[i] = columnOrdering[i].getColumnId();\n             columnOrderingAscendingMap[i] = columnOrdering[i].getIsAscending();\n             columnOrderingNullsLowMap[i] = columnOrdering[i].getIsNullsOrderedLow();\n+\n+\t\t\tif (SanityManager.DEBUG) {\n+\t\t\t\tisOrderingColumn[columnOrderingMap[i]] = true;\n+\t\t\t}\n         }\n \n+\n \t\t// No inserter or scan yet.\n \t\tthis.inserter = null;\n \t\tthis.scan = null;"
            },
            {
                "sha": "7d645a212c49721e0dc17d5040a0ee9c85803e3f",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "status": "modified",
                "additions": 50,
                "deletions": 2,
                "changes": 52,
                "blob_url": "https://github.com/apache/derby/blob/9d24308dd44df406f0997fad87f9b34f31811d13/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "raw_url": "https://github.com/apache/derby/raw/9d24308dd44df406f0997fad87f9b34f31811d13/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java?ref=9d24308dd44df406f0997fad87f9b34f31811d13",
                "patch": "@@ -5258,7 +5258,55 @@ public  void    test_030_derby_4146()\n              );\n \n     }\n-    \n+\n+\n+   /**\n+    * Test INSERT INTO .. select distinct in presence of generated column.\n+    * Cf DERBY-4413.\n+    */\n+    public  void    test_031_derby_4413()\n+            throws Exception\n+    {\n+        Connection  conn = getConnection();\n+\n+        //\n+        // Schema\n+        //\n+        goodStatement\n+            (\n+                conn,\n+                \"create table t_4413 (\" +\n+                \"     i integer, \" +\n+                \"     j integer not null generated always as (i*2))\"\n+            );\n+        goodStatement\n+            (\n+                conn,\n+                \"insert into t_4413(i) values 1,2,1\"\n+            );\n+\n+        goodStatement\n+            (\n+                conn,\n+                \"insert into t_4413(i) select distinct i from t_4413\"\n+            );\n+        assertResults\n+            (\n+                conn,\n+                \"select * from t_4413\",\n+                new String[][]\n+                {\n+                    { \"1\", \"2\", },\n+                    { \"2\", \"4\", },\n+                    { \"1\", \"2\", },\n+                    { \"1\", \"2\", },\n+                    { \"2\", \"4\", },\n+                },\n+                false\n+            );\n+\n+    }\n+\n \n     ///////////////////////////////////////////////////////////////////////////////////\n     //\n@@ -5436,4 +5484,4 @@ public  static  void    showValues( String tag, Integer a, Integer b, Integer c\n     }\n \n \n-}\n\\ No newline at end of file\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/0f92bc7cc166db4df04f898338bc30a4fb088dc3",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/8b256942227cb0232d16b40b50bdf763f0536112",
        "message": "DERBY-4245 (partial): Sorting a table containing a CLOB fails after upgrade to 10.5.\nFixes the NPE bug for both clean 10.5 databases and upgraded databases. Note\nthat there is a remaining bug for upgraded databases that will be fixed with a\nsubsequent patch under this issue.\n\nPatch file: derby-4245-2a-sqlclob_fix.diff\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@784701 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_147",
        "file": [
            {
                "sha": "6138702bf7fdd2b892a583431ea1db9d53c57bf8",
                "filename": "java/engine/org/apache/derby/iapi/types/SQLClob.java",
                "status": "modified",
                "additions": 16,
                "deletions": 14,
                "changes": 30,
                "blob_url": "https://github.com/apache/derby/blob/0f92bc7cc166db4df04f898338bc30a4fb088dc3/java/engine/org/apache/derby/iapi/types/SQLClob.java",
                "raw_url": "https://github.com/apache/derby/raw/0f92bc7cc166db4df04f898338bc30a4fb088dc3/java/engine/org/apache/derby/iapi/types/SQLClob.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/SQLClob.java?ref=0f92bc7cc166db4df04f898338bc30a4fb088dc3",
                "patch": "@@ -236,11 +236,11 @@ public int getLength() throws StandardException {\n         long charLength = 0;\n         try {\n             if (repositionStream) {\n-                rewindStream(csd.getDataOffset());\n+                rewindStream(stream, csd.getDataOffset());\n             }\n             charLength = UTF8Util.skipUntilEOF(stream);\n             // We just drained the whole stream. Reset it.\n-            rewindStream(0);\n+            rewindStream(stream, 0);\n         } catch (IOException ioe) {\n             throwStreamingIOException(ioe);\n         }\n@@ -342,7 +342,7 @@ public CharacterStreamDescriptor getStreamWithDescriptor()\n                 if (read > hdrInfo.headerLength()) {\n                     // We have read too much. Reset the stream.\n                     read = hdrInfo.headerLength();\n-                    rewindStream(read);\n+                    rewindStream(stream, read);\n                 }\n                 csd = new CharacterStreamDescriptor.Builder().stream(stream).\n                     bufferable(false).positionAware(false).\n@@ -686,11 +686,12 @@ public void readExternal(ObjectInput in)\n                                             : (int)csd.getByteLength();\n             hdrInfo = new HeaderInfo(hdrLen, valueLength);\n             // Make sure the stream is correctly positioned.\n-            rewindStream(hdrLen);\n+            rewindStream((InputStream)in, hdrLen);\n         } else {\n-            final boolean markSet = stream.markSupported();\n+            final InputStream srcIn = (InputStream)in;\n+            final boolean markSet = srcIn.markSupported();\n             if (markSet) {\n-                stream.mark(MAX_STREAM_HEADER_LENGTH);\n+                srcIn.mark(MAX_STREAM_HEADER_LENGTH);\n             }\n             byte[] header = new byte[MAX_STREAM_HEADER_LENGTH];\n             int read = in.read(header);\n@@ -707,11 +708,11 @@ public void readExternal(ObjectInput in)\n                 if (markSet) {\n                     // Stream is not a store Resetable one, use mark/reset\n                     // functionality instead.\n-                    stream.reset();\n-                    InputStreamUtil.skipFully(stream, hdrInfo.headerLength());\n-                } else if (stream instanceof Resetable) {\n+                    srcIn.reset();\n+                    InputStreamUtil.skipFully(srcIn, hdrInfo.headerLength());\n+                } else if (in instanceof Resetable) {\n                     // We have a store stream.\n-                    rewindStream(hdrInfo.headerLength());\n+                    rewindStream(srcIn, hdrInfo.headerLength());\n                 }\n             }\n         }\n@@ -763,14 +764,15 @@ public void readExternalFromArray(ArrayInputStream in)\n      * Rewinds the stream to the beginning and then skips the specified number\n      * of bytes.\n      *\n-     * @param pos number of bytes to skip\n+     * @param in input stream to rewind\n+     * @param offset number of bytes to skip\n      * @throws IOException if resetting or reading from the stream fails\n      */\n-    private void rewindStream(long pos)\n+    private void rewindStream(InputStream in, long offset)\n             throws IOException {\n         try {\n-            ((Resetable)stream).resetStream();\n-            InputStreamUtil.skipFully(stream, pos);\n+            ((Resetable)in).resetStream();\n+            InputStreamUtil.skipFully(in, offset);\n         } catch (StandardException se) {\n             IOException ioe = new IOException(se.getMessage());\n             ioe.initCause(se);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/cb29d72648bebee5311134077f2173f5640a247d",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/1c0881385de96f5d8fc6558174ea6991217c9924",
        "message": "DERBY-3025: NPE when connecting to database with securityMechanism=8\n\nUse an internal attribute name when passing security mechanism from\nthe network server to the embedded driver. This prevents confusion if\nan embedded connection is established with securityMechanism specified\n(in which case the security mechanism should be ignored).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@570663 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_148",
        "file": [
            {
                "sha": "bcae24eaaf94ba800e81eb0af817105417c62892",
                "filename": "java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/cb29d72648bebee5311134077f2173f5640a247d/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "raw_url": "https://github.com/apache/derby/raw/cb29d72648bebee5311134077f2173f5640a247d/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java?ref=cb29d72648bebee5311134077f2173f5640a247d",
                "patch": "@@ -1261,7 +1261,7 @@ private int getConnFromDatabaseName() throws DRDAProtocolException\n         if ((database.securityMechanism == CodePoint.SECMEC_USRSSBPWD) &&\n             (database.dbName.indexOf(Attribute.PASSWORD_ATTR) == -1))\n         {\n-            p.put(Attribute.CLIENT_SECURITY_MECHANISM,\n+            p.put(Attribute.DRDA_SECMEC,\n                   String.valueOf(database.securityMechanism));\n             p.put(Attribute.DRDA_SECTKN_IN,\n                   DecryptionManager.toHexString(database.secTokenIn, 0,"
            },
            {
                "sha": "f9ed5d93d08d5dd182184cf8a6490ef3fd110f1e",
                "filename": "java/engine/org/apache/derby/iapi/reference/Attribute.java",
                "status": "modified",
                "additions": 9,
                "deletions": 0,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/cb29d72648bebee5311134077f2173f5640a247d/java/engine/org/apache/derby/iapi/reference/Attribute.java",
                "raw_url": "https://github.com/apache/derby/raw/cb29d72648bebee5311134077f2173f5640a247d/java/engine/org/apache/derby/iapi/reference/Attribute.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/reference/Attribute.java?ref=cb29d72648bebee5311134077f2173f5640a247d",
                "patch": "@@ -237,6 +237,15 @@ List of all connection (JDBC) attributes by the system.\n      */\n     String DRDA_SECTKN_IN = \"drdaSecTokenIn\";\n     String DRDA_SECTKN_OUT = \"drdaSecTokenOut\";\n+    /**\n+     * Internal attribute which holds the value of the securityMechanism\n+     * attribute specified by the client. Used for passing information about\n+     * which security mechanism to use from the network server to the embedded\n+     * driver. Use another name than \"securityMechanism\" in order to prevent\n+     * confusion if an attempt is made to establish an embedded connection with\n+     * securityMechanism specified (see DERBY-3025).\n+     */\n+    String DRDA_SECMEC = \"drdaSecMec\";\n \n \t/**\n \t * Internal attribute. Used to always allow soft upgrade for"
            },
            {
                "sha": "e9b4d5093f9f79635030d32a908f8c923d60df58",
                "filename": "java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/cb29d72648bebee5311134077f2173f5640a247d/java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java",
                "raw_url": "https://github.com/apache/derby/raw/cb29d72648bebee5311134077f2173f5640a247d/java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java?ref=cb29d72648bebee5311134077f2173f5640a247d",
                "patch": "@@ -176,7 +176,7 @@ public boolean\tauthenticateUser(String userName,\n         // assess the substitute password to be legitimate for Derby's\n         // BUILTIN authentication scheme/provider.\n         if ((clientSecurityMechanism =\n-                info.getProperty(Attribute.CLIENT_SECURITY_MECHANISM)) != null)\n+                info.getProperty(Attribute.DRDA_SECMEC)) != null)\n         {\n             secMec = Integer.parseInt(clientSecurityMechanism);\n         }"
            },
            {
                "sha": "767f6d35e885e4ceac0d899f5e35a0c63986cc9a",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java",
                "status": "modified",
                "additions": 30,
                "deletions": 3,
                "changes": 33,
                "blob_url": "https://github.com/apache/derby/blob/cb29d72648bebee5311134077f2173f5640a247d/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java",
                "raw_url": "https://github.com/apache/derby/raw/cb29d72648bebee5311134077f2173f5640a247d/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java?ref=cb29d72648bebee5311134077f2173f5640a247d",
                "patch": "@@ -41,6 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.drda.NetworkServerControl;\n \n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;\n import org.apache.derbyTesting.junit.J2EEDataSource;\n import org.apache.derbyTesting.junit.JDBCDataSource;\n import org.apache.derbyTesting.junit.NetworkServerTestSetup;\n@@ -173,9 +174,20 @@ public NSSecurityMechanismTest(String name)\n     public static Test suite() \n     {\n         TestSuite suite = new TestSuite(\"NSSecurityMechanismTest\");\n-        suite.addTest(new NSSecurityMechanismTest(\n+\n+        TestSuite clientSuite =\n+            new TestSuite(\"NSSecurityMechanismTest - client\");\n+        clientSuite.addTest(new NSSecurityMechanismTest(\n             \"testNetworkServerSecurityMechanism\"));\n-        return TestConfiguration.clientServerDecorator((suite));\n+        suite.addTest(TestConfiguration.clientServerDecorator(clientSuite));\n+\n+        // Test case for embedded mode. Enable builtin authentication.\n+        suite.addTest(\n+            DatabasePropertyTestSetup.builtinAuthentication(\n+                new NSSecurityMechanismTest(\"testSecurityMechanismOnEmbedded\"),\n+                new String[] { \"calvin\" }, \"pw\"));\n+\n+        return suite;\n     }\n     \n     public void tearDown() throws Exception {\n@@ -368,7 +380,22 @@ else if (derby_drda_securityMechanism.equals(\n             }\n         }\n     }\n-    \n+\n+    /**\n+     * Test that securityMechanism=8 is ignored by the embedded driver\n+     * (DERBY-3025).\n+     */\n+    public void testSecurityMechanismOnEmbedded() throws SQLException {\n+        DataSource ds = JDBCDataSource.getDataSource();\n+        JDBCDataSource.setBeanProperty(\n+            ds, \"connectionAttributes\", \"securityMechanism=8\");\n+\n+        // DERBY-3025: NullPointerException or AssertFailure was thrown here\n+        Connection c = ds.getConnection(\"calvin\", \"calvinpw\");\n+\n+        c.close();\n+    }\n+\n     // returns a boolean true if the security mechanism is not supported\n     // so the loop in which this is called can be continued without\n     // causing unnecessary/impossible tests to be run"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/57191b46737ce29454714beafaedb3b35635010b",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/b70badf6d92f5eff30a568512064323765c1ed40",
        "message": "DERBY-3904: NPE on left join with aggregate\n\nThe issue involves a very special optimization that is performed\nfor MIN and MAX queries in which we may be able to use an index\nto go directly to the lowest/highest value of the desired column.\nFor example, in the query\n\n  SELECT MAX(d1) FROM t1\n\nif there is an index on d1, we can use that index to retrieve\nthe max value very rapidly. In order to incorporate this\noptimization, the following conditions must be met:\n\n - No group by\n - One of:\n   - min/max(ColumnReference) is only aggregate && source is\n     ordered on the ColumnReference\n   - min/max(ConstantNode)\nThe optimization of the other way around (min with desc index or\nmax with asc index) has the same restrictions with the additional\ntemporary restriction of no qualifications at all (because\nwe don't have true backward scans). \n\nThe source of the data must also be \"simple\" (not a result of a join),\nand the NullPointerException occurred during the code that tried\nto establish the above conditions because it wasn't thoroughly\nenough excluding the join case. In the query:\n\n  SELECT MAX( T1.D1 ) AS D FROM T1 LEFT JOIN T2 ON T1.D1 = T2.D2\n  WHERE T2.D2 IS NULL\n\nthe code in GroupByNode.considerPostOptimizeOptimizations was\ntrying to traverse the AccessPathImpl to find the index scan\ninformation, but for this LEFT JOIN case there is an AccessPathImpl\nbut no index scan information, because there is a join being\nperformed, not an index scan.\n\nThe solution is to examine the AccessPathImpl more carefully,\nand only search the index scan information if an index scan\nis actually present.\n\nAlso added a few tests, including an enhancement to the test\nlibrary's RuntimeStatisticsParser so that it can determine\nif a Last Key Index Scan is being performed by the query.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@708002 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_149",
        "file": [
            {
                "sha": "a0f2a7350c10c6f9d3e80184900d0bc14760b805",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java",
                "status": "modified",
                "additions": 5,
                "deletions": 2,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/57191b46737ce29454714beafaedb3b35635010b/java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java",
                "raw_url": "https://github.com/apache/derby/raw/57191b46737ce29454714beafaedb3b35635010b/java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java?ref=57191b46737ce29454714beafaedb3b35635010b",
                "patch": "@@ -1186,10 +1186,13 @@ void considerPostOptimizeOptimizations(boolean selectHasPredicates)\n \t\t\t\t\t\t\tint colNum = crs[0].getColumnNumber();\n \t\t\t\t\t\t\t\n \t\t\t\t\t\t\t/* Check if we have an access path, this will be\n-\t\t\t\t\t\t\t * null in a join case (See Beetle 4423)\n+\t\t\t\t\t\t\t * null in a join case (See Beetle 4423,DERBY-3904)\n \t\t\t\t\t\t\t */\n \t\t\t\t\t\t\tAccessPath accessPath= getTrulyTheBestAccessPath();\n-\t\t\t\t\t\t\tif (accessPath == null)\n+\t\t\t\t\t\t\tif (accessPath == null ||\n+\t\t\t\t\t\t\t\taccessPath.getConglomerateDescriptor()==null||\n+\t\t\t\t\t\t\t\taccessPath.getConglomerateDescriptor().\n+\t\t\t\t\t\t\t\t           getIndexDescriptor() == null)\n \t\t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t\tIndexDescriptor id = accessPath.\n \t\t\t\t\t\t\t\t\t\t\t\tgetConglomerateDescriptor()."
            },
            {
                "sha": "c13027406fdc72e87dd85cbf1d29a0986e555bce",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "status": "modified",
                "additions": 60,
                "deletions": 0,
                "changes": 60,
                "blob_url": "https://github.com/apache/derby/blob/57191b46737ce29454714beafaedb3b35635010b/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "raw_url": "https://github.com/apache/derby/raw/57191b46737ce29454714beafaedb3b35635010b/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java?ref=57191b46737ce29454714beafaedb3b35635010b",
                "patch": "@@ -41,6 +41,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derbyTesting.junit.BaseJDBCTestCase;\n import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;\n import org.apache.derbyTesting.junit.JDBC;\n+import org.apache.derbyTesting.junit.RuntimeStatisticsParser;\n+import org.apache.derbyTesting.junit.SQLUtilities;\n \n /**\n  * Many of these test cases were converted from the old groupBy.sql\n@@ -106,6 +108,16 @@ private static void createSchemaObjects(Statement st)\n \n         st.execute(\"create table d3219 (a varchar(10), b varchar(1000))\");\n \n+\t\tst.execute(\"CREATE TABLE d3904_T1( \" +\n+\t\t\t\t\"D1 DATE NOT NULL PRIMARY KEY, N1 VARCHAR( 10 ))\");\n+\t\tst.execute(\"CREATE TABLE d3904_T2( \" +\n+\t\t\t\t\"D2 DATE NOT NULL PRIMARY KEY, N2 VARCHAR( 10 ))\");\n+\t\tst.execute(\"INSERT INTO d3904_T1 VALUES \"+\n+\t\t\t\t\"( DATE( '2008-10-01' ), 'something' ), \"+\n+\t\t\t\t\"( DATE( '2008-10-02' ), 'something' )\" );\n+\t\tst.execute(\"INSERT INTO d3904_T2 VALUES\" +\n+\t\t\t\t\"( DATE( '2008-10-01' ), 'something' )\" ); \n+\n         st.executeUpdate(\"create table d2457_o (name varchar(20), ord int)\");\n         st.executeUpdate(\"create table d2457_a (ord int, amount int)\");\n         st.executeUpdate(\"insert into d2457_o values ('John', 1),\" +\n@@ -2118,5 +2130,53 @@ private static List resultArrayToList(String[][] results) {\n         }\n         return rows;\n     }\n+\n+    /**\n+      * DERBY-3904: Min/Max optimization needs to be aware of joins.\n+      */\n+    public void testDerby3904MinMaxOptimization() throws SQLException\n+    {\n+        Statement s = createStatement();\n+\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"SELECT d3904_T1.D1 \" +\n+\t\t\t\t\t\"FROM d3904_T1 LEFT JOIN d3904_T2 \" +\n+\t\t\t\t    \"ON d3904_T1.D1 = d3904_T2.D2 \" +\n+\t\t\t\t\t\"WHERE d3904_T2.D2 IS NULL\"), \n+            new String[][] {  {\"2008-10-02\"} } );\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"SELECT MAX( d3904_T1.D1 ) as D \" +\n+\t\t\t\t\t\"FROM d3904_T1 WHERE d3904_T1.D1 NOT IN \" +\n+\t\t\t\t\t\"( SELECT d3904_T2.D2 FROM d3904_T2 )\"), \n+            new String[][] {  {\"2008-10-02\"} } );\n+\t\t//\n+\t\t// In DERBY-3904, this next query fails with a null pointer\n+\t\t// exception because GroupByNode doesn't realize that there\n+\t\t// is a join involved here\n+\t\t//\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"SELECT MAX( d3904_T1.D1 ) AS D \" +\n+\t\t\t\t\t\"FROM d3904_T1 LEFT JOIN d3904_T2 \" +\n+\t\t\t\t\t\"ON d3904_T1.D1 = d3904_T2.D2 \" +\n+\t\t\t\t\t\"WHERE d3904_T2.D2 IS NULL\"),\n+            new String[][] {  {\"2008-10-02\"} } );\n+\n+\t\t// Verify that the min/max optimization still works for the\n+\t\t// simple query SELECT MAX(D1) FROM T1:\n+\t\ts.execute(\"call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)\");\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"SELECT MAX(D1) FROM D3904_T1\"),\n+            new String[][] {  {\"2008-10-02\"} } );\n+\t\tRuntimeStatisticsParser rtsp =\n+\t\t\tSQLUtilities.getRuntimeStatisticsParser(s);\n+\t\tassertTrue(rtsp.usedLastKeyIndexScan());\n+\t\tassertFalse(rtsp.usedIndexRowToBaseRow());\n+\n+\t\t// A form of the Beetle 4423 query:\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"SELECT MAX(D1) \" +\n+\t\t\t\t\t\"FROM d3904_T1, D3904_T2 WHERE d3904_T1.D1='2008-10-02'\"),\n+            new String[][] {  {\"2008-10-02\"} } );\n+\t}\n }\n "
            },
            {
                "sha": "77c9dc177662d85c8ba7430ca24542a16b7a9a89",
                "filename": "java/testing/org/apache/derbyTesting/junit/RuntimeStatisticsParser.java",
                "status": "modified",
                "additions": 11,
                "deletions": 0,
                "changes": 11,
                "blob_url": "https://github.com/apache/derby/blob/57191b46737ce29454714beafaedb3b35635010b/java/testing/org/apache/derbyTesting/junit/RuntimeStatisticsParser.java",
                "raw_url": "https://github.com/apache/derby/raw/57191b46737ce29454714beafaedb3b35635010b/java/testing/org/apache/derbyTesting/junit/RuntimeStatisticsParser.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/junit/RuntimeStatisticsParser.java?ref=57191b46737ce29454714beafaedb3b35635010b",
                "patch": "@@ -31,6 +31,7 @@\n     private boolean tableScan = false;\n     private final boolean indexScan;\n     private final boolean indexRowToBaseRow;\n+\tprivate final boolean lastKeyIndexScan;\n     private String statistics = \"\";\n     private boolean scrollInsensitive = false;\n     private final HashSet qualifiers;\n@@ -65,6 +66,7 @@ else if (rts.indexOf(\"at repeatable read isolation level\") != -1)\n         indexScan = (rts.indexOf(\"Index Scan ResultSet\") >= 0);\n         indexRowToBaseRow =\n             (rts.indexOf(\"Index Row to Base Row ResultSet\") >= 0);\n+        lastKeyIndexScan = (rts.indexOf(\"Last Key Index Scan ResultSet\") >= 0);\n         \n         if (rts.indexOf(\"Eliminate duplicates = true\") > 0) {\n         \teliminatedDuplicates = true;\n@@ -202,6 +204,15 @@ public boolean usedIndexScan() {\n         return indexScan;\n     }\n \n+    /**\n+     * Return whether or not a last key index scan result set was used\n+\t * in the query. A last key index scan is a special optimization for\n+\t * MIN and MAX queries against an indexed column (SELECT MAX(ID) FROM T).\n+     */\n+    public boolean usedLastKeyIndexScan() {\n+        return lastKeyIndexScan;\n+    }\n+\n     /**\n      * Return whether or not an index row to base row result set was used in\n      * the query."
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/7139f7c7802892c820ead435823795030e7209f0",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/1447937e93e7ac847788017f5fbb74a476fbf738",
        "message": "DERBY-6634: Improve test coverage of SqlXmlUtil.java\n\nRemove impossible code paths so that they don't show up as untested\ncode. In particular:\n\n- Remove some unnecessary null tests. The callers already make sure\n  that the arguments cannot be null, so it's better to skip the checks\n  so that potential future bugs get reported as NPEs instead of being\n  silently ignored.\n\n- Remove code that serializes lists of atomic values. Derby only\n  supports queries that return single atomic values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1607017 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_150",
        "file": [
            {
                "sha": "d537b2c92d372901aafc530f89aaaa45de210d58",
                "filename": "java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java",
                "status": "modified",
                "additions": 21,
                "deletions": 49,
                "changes": 70,
                "blob_url": "https://github.com/apache/derby/blob/7139f7c7802892c820ead435823795030e7209f0/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java",
                "raw_url": "https://github.com/apache/derby/raw/7139f7c7802892c820ead435823795030e7209f0/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java?ref=7139f7c7802892c820ead435823795030e7209f0",
                "patch": "@@ -33,6 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n import java.io.IOException;\n import java.io.StringReader;\n+import java.io.StringWriter;\n \n // -- JDBC 3.0 JAXP API classes.\n \n@@ -298,7 +299,7 @@ public void compileXQExpr(String queryExpr, String opName)\n     protected String serializeToString(String xmlAsText)\n         throws Exception\n     {\n-        ArrayList<Document> aList = new ArrayList<Document>();\n+        Document doc;\n \n         /* The call to dBuilder.parse() is a call to an external\n          * (w.r.t. to Derby) JAXP parser.  If the received XML\n@@ -311,14 +312,14 @@ protected String serializeToString(String xmlAsText)\n         try {\n \n             final InputSource is = new InputSource(new StringReader(xmlAsText));\n-            aList.add(java.security.AccessController.doPrivileged(\n+            doc = java.security.AccessController.doPrivileged(\n                 new java.security.PrivilegedExceptionAction<Document>()\n                 {\n                     public Document run() throws IOException, SAXException\n                     {\n                         return dBuilder.parse(is);\n                     }\n-                }));\n+                });\n \n         } catch (java.security.PrivilegedActionException pae) {\n \n@@ -342,7 +343,7 @@ public Document run() throws IOException, SAXException\n          * don't have a top-level attribute node in the list,\n          * so we don't have to worry.  Hence the \"null\" here.\n          */\n-        return serializeToString(aList, null);\n+        return serializeToString(Collections.singletonList(doc), null);\n     }\n \n     /**\n@@ -360,7 +361,10 @@ public Document run() throws IOException, SAXException\n      * for the rest of the serialization work, we just make calls on the\n      * DOMSerializer class provided by Xalan.\n      *\n-     * @param items List of items to serialize\n+     * @param items List of items to serialize. It should either be\n+     *  a list of a single string value (in case it's the result of\n+     *  an XMLQUERY operation that returns an atomic value), or a list\n+     *  of zero or more Node objects.\n      * @param xmlVal XMLDataValue into which the serialized string\n      *  returned by this method is ultimately going to be stored.\n      *  This is used for keeping track of XML values that represent\n@@ -372,12 +376,19 @@ public Document run() throws IOException, SAXException\n     protected String serializeToString(List items,\n         XMLDataValue xmlVal) throws TransformerException\n     {\n-        if ((items == null) || items.isEmpty()) {\n-        // nothing to do; return empty sequence.\n+        // If we have an empty sequence, return an empty value immediately.\n+        if (items.isEmpty()) {\n             return \"\";\n         }\n \n-        java.io.StringWriter sWriter = new java.io.StringWriter();\n+        // If it contains a single string, just return that string.\n+        if (items.size() == 1 && items.get(0) instanceof String) {\n+            return (String) items.get(0);\n+        }\n+\n+        // Otherwise, it's a non-empty list of Node objects.\n+\n+        StringWriter sWriter = new StringWriter();\n \n         // Serializer should have been set by now.\n         if (SanityManager.DEBUG)\n@@ -386,45 +397,10 @@ protected String serializeToString(List items,\n                 \"Tried to serialize with uninitialized XML serializer.\");\n         }\n \n-        /* Step 1: Empty sequence.  If we have an empty sequence then we\n-         * won't ever enter the for loop and the call to sWriter.toString()\n-         * at the end of this method will return an empty string, as\n-         * required.  Otherwise, for a non-empty sequence our \"items\"\n-         * list already corresponds to \"S1\".\n-         */\n-\n         // Iterate through the list and serialize each item.\n-        boolean lastItemWasString = false;\n         for (Object obj : items)\n         {\n-            // if it's a string, then this corresponds to some atomic\n-            // value, so just echo the string as it is.\n-            if (obj instanceof String)\n-            {\n-                /* Step 2: Atomic values.  If \"obj\" is a string then it\n-                 * corresponds to some atomic value whose \"lexical\n-                 * representation\" is obj.  So we just take that.\n-                 */\n-\n-                if (lastItemWasString)\n-                {\n-                    /* Step 3: Adjacent strings.  If we have multiple adjacent\n-                     * strings then concatenate them with a single space\n-                     * between them.\n-                     */\n-                    sWriter.write(\" \");\n-                }\n-\n-                /* Step 4: Create a Text node from the adjacent strings.\n-                 * Since we're just going to serialize the Text node back\n-                 * into a string, we short-cut this step by skipping the\n-                 * creation of the Text node and just writing the string\n-                 * out directly to our serialized stream.\n-                 */\n-                sWriter.write((String)obj);\n-                lastItemWasString = true;\n-            }\n-            else if (obj instanceof Attr)\n+            if (obj instanceof Attr)\n             {\n                 /* Step 7a: Attribute nodes.  If there is an Attribute node\n                  * node in the sequence then we have to throw a serialization\n@@ -453,11 +429,9 @@ else if (obj instanceof Attr)\n                  * explicit call to serialize the sequence, we'll throw the\n                  * appropriate error (see XML.XMLSerialize()).\n                  */\n-                if (xmlVal != null)\n-                    xmlVal.markAsHavingTopLevelAttr();\n+                xmlVal.markAsHavingTopLevelAttr();\n                 serializer.transform(\n                         new DOMSource((Node) obj), new StreamResult(sWriter));\n-                lastItemWasString = false;\n             }\n             else\n             { // We have a Node, so try to serialize it.\n@@ -493,8 +467,6 @@ else if (obj instanceof Attr)\n                     serializer.transform(\n                             new DOMSource(n), new StreamResult(sWriter));\n                 }\n-\n-                lastItemWasString = false;\n             }\n         }\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/c8bb7d7ad7d2fb59d896c115ebd56c839d6c41a8",
        "message": "DERBY-4698 Simple query with HAVING clause crashes with NullPointerException\n\nPatch derby-4698-2. The case of column references in HAVING clauses\nbeing wrong after JOIN flattening was initially solved by\nDERBY-3880. That solution was partial in that it can sometimes happen\ntoo late. \n\nThis patch changes the fix-up of column references in a having clause\nafter join flattening to the same point in time as that of other\ncolumn references that need fix-up after the flattening (rcl, column\nreferences in join predicates and group by clauses). Thus the fixup is\nmoved from the modifyaccesspath phase to the preprocess phase.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@956234 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_151",
        "file": [
            {
                "sha": "5b4d045ad2a162f7375b26060ef0724a38ba3d34",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "status": "modified",
                "additions": 0,
                "deletions": 20,
                "changes": 20,
                "blob_url": "https://github.com/apache/derby/blob/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "raw_url": "https://github.com/apache/derby/raw/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java?ref=2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
                "patch": "@@ -548,26 +548,6 @@ public ResultColumn\tgetNewExpressionResultColumn(DataDictionary\tdd)\n \t\t\toperand;\n \n \n-\t\t/* The operand for this aggregate node was initialized at bind\n-\t\t * time. Between then and now it's possible that certain changes\n-\t\t * have been made to the query tree which affect this operand. In\n-\t\t * particular, if the operand was pointing to a result column in\n-\t\t * a JoinNode and then that JoinNode was flattened during pre-\n-\t\t * processing, all of the references to that JoinNode--including\n-\t\t * this aggregate's operand--need to be updated to reflect the\n-\t\t * fact that the Join Node no longer exists. So check to see if\n-\t\t * the operand is a column reference, and if so, make a call to\n-\t\t * remap it to its underlying expression. If nothing has happened\n-\t\t * then this will be a no-op; but if something has changed to void\n-\t\t * out the result column to which the operand points, the result\n-\t\t * column will be marked \"redundant\" and the following call should\n-\t\t * remap as appropriate. DERBY-3880.\n-\t\t */\n-\t\tif (operand instanceof ColumnReference)\n-\t\t{\n-\t\t\t((ColumnReference)operand).remapColumnReferencesToExpressions();\n-\t\t}\n-\n \t\treturn (ResultColumn) getNodeFactory().getNode(\n \t\t\t\t\t\t\t\tC_NodeTypes.RESULT_COLUMN,\n \t\t\t\t\t\t\t\t\"##aggregate expression\","
            },
            {
                "sha": "2680322d5f06eb6be3f8ee1bc38dc43477655c25",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "status": "modified",
                "additions": 5,
                "deletions": 2,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "raw_url": "https://github.com/apache/derby/raw/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/FromList.java?ref=2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
                "patch": "@@ -708,13 +708,15 @@ public void preprocess(int numTables,\n \t * @param predicateList\t\tThe PredicateList from the outer query\n \t * @param sql\t\t\t\tThe SubqueryList from the outer query\n \t * @param gbl\t\t\t\tThe group by list, if any\n+     * @param havingClause      The HAVING clause, if any\n \t *\n \t * @exception StandardException\t\tThrown on error\n \t */\n \tpublic void flattenFromTables(ResultColumnList rcl,\n \t\t\t\t\t\t\t\t  PredicateList predicateList,\n \t\t\t\t\t\t\t\t  SubqueryList sql,\n-\t\t\t\t\t\t\t\t  GroupByList gbl)\n+                                  GroupByList gbl,\n+                                  ValueNode havingClause)\n \t\t\t\t\t\t\t\t\tthrows StandardException\n \t{\n \t\tboolean\t\t\tflattened = true;\n@@ -757,7 +759,8 @@ public void flattenFromTables(ResultColumnList rcl,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\trcl,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tpredicateList,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tsql,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tgbl);\n+                                                        gbl,\n+                                                        havingClause);\n \t\t\t\t\tif (SanityManager.DEBUG)\n \t\t\t\t\t{\n \t\t\t\t\t\tSanityManager.ASSERT(flatteningFL == null ||"
            },
            {
                "sha": "5321118e1ef710c1db27653e9cbaf9344d3db95d",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java",
                "status": "modified",
                "additions": 7,
                "deletions": 1,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java",
                "raw_url": "https://github.com/apache/derby/raw/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java?ref=2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
                "patch": "@@ -483,6 +483,7 @@ public ResultSetNode extractSubquery(int numTables)\n \t * @param outerPList\tPredicateList to append wherePredicates to.\n \t * @param sql\t\t\t\tThe SubqueryList from the outer query\n \t * @param gbl\t\t\t\tThe group by list, if any\n+     * @param havingClause      The HAVING clause, if any\n \t *\n \t * @return FromList\t\tThe fromList from the underlying SelectNode.\n \t *\n@@ -491,7 +492,8 @@ public ResultSetNode extractSubquery(int numTables)\n \tpublic FromList flatten(ResultColumnList rcl,\n \t\t\t\t\t\t\tPredicateList outerPList,\n \t\t\t\t\t\t\tSubqueryList sql,\n-\t\t\t\t\t\t\tGroupByList gbl)\n+                            GroupByList gbl,\n+                            ValueNode havingClause)\n \n \t\t\tthrows StandardException\n \t{\n@@ -541,6 +543,10 @@ else if ( ! (subquery instanceof RowResultSetNode))\n \t\t\tgbl.remapColumnReferencesToExpressions();\n \t\t}\n \n+        if (havingClause != null) {\n+            havingClause.remapColumnReferencesToExpressions();\n+        }\n+\n \t\treturn fromList;\n \t}\n "
            },
            {
                "sha": "7eaa7a50689d462f31c9544fdf708a1dc0520600",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/FromTable.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/FromTable.java",
                "raw_url": "https://github.com/apache/derby/raw/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/FromTable.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/FromTable.java?ref=2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
                "patch": "@@ -1420,6 +1420,7 @@ protected void markUpdatableByCursor(Vector updateColumns)\n \t * @param outerPList\tPredicateList to append wherePredicates to.\n \t * @param sql\t\t\t\tThe SubqueryList from the outer query\n \t * @param gbl\t\t\t\tThe group by list, if any\n+     * @param havingClause      The HAVING clause, if any\n \t *\n \t * @return FromList\t\tThe fromList from the underlying SelectNode.\n \t *\n@@ -1428,7 +1429,8 @@ protected void markUpdatableByCursor(Vector updateColumns)\n \tpublic FromList flatten(ResultColumnList rcl,\n \t\t\t\t\t\t\tPredicateList outerPList,\n \t\t\t\t\t\t\tSubqueryList sql,\n-\t\t\t\t\t\t\tGroupByList gbl)\n+                            GroupByList gbl,\n+                            ValueNode havingClause)\n \n \t\t\tthrows StandardException\n \t{"
            },
            {
                "sha": "8aedeaf921b585524de8102fb74103abc0791139",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "status": "modified",
                "additions": 8,
                "deletions": 1,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "raw_url": "https://github.com/apache/derby/raw/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java?ref=2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
                "patch": "@@ -1414,6 +1414,7 @@ private void grabJoinPredicates(PredicateList outerPredicateList)\n \t * @param outerPList\t\tPredicateList to append wherePredicates to.\n \t * @param sql\t\t\t\tThe SubqueryList from the outer query\n \t * @param gbl\t\t\t\tThe group by list, if any\n+     * @param havingClause      The HAVING clause, if any\n \t *\n \t * @return FromList\t\tThe fromList from the underlying SelectNode.\n \t *\n@@ -1422,7 +1423,8 @@ private void grabJoinPredicates(PredicateList outerPredicateList)\n \tpublic FromList flatten(ResultColumnList rcl,\n \t\t\t\t\t\t\tPredicateList outerPList,\n \t\t\t\t\t\t\tSubqueryList sql,\n-\t\t\t\t\t\t\tGroupByList gbl)\n+                            GroupByList gbl,\n+                            ValueNode havingClause)\n \n \t\t\tthrows StandardException\n \t{\n@@ -1466,6 +1468,11 @@ public FromList flatten(ResultColumnList rcl,\n \t\t\tgbl.remapColumnReferencesToExpressions();\n \t\t}\n \n+        if (havingClause != null) {\n+            havingClause.remapColumnReferencesToExpressions();\n+        }\n+\n+\n \t\tif (joinPredicates.size() > 0)\n \t\t{\n \t\t\touterPList.destructiveAppend(joinPredicates);"
            },
            {
                "sha": "3fa694059743f5368765f69788a392d10a38e7df",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "raw_url": "https://github.com/apache/derby/raw/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java?ref=2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
                "patch": "@@ -1087,7 +1087,8 @@ public ResultSetNode preprocess(int numTables,\n \t\tfromList.flattenFromTables(resultColumns, \n \t\t\t\t\t\t\t\t   wherePredicates, \n \t\t\t\t\t\t\t\t   whereSubquerys,\n-\t\t\t\t\t\t\t\t   groupByList);\n+                                   groupByList,\n+                                   havingClause);\n \n \t\tif (wherePredicates != null && wherePredicates.size() > 0 && fromList.size() > 0)\n \t\t{"
            },
            {
                "sha": "7d0349ad0ca840ce0dbb61f5d5cac278c65a8c9f",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "status": "modified",
                "additions": 81,
                "deletions": 0,
                "changes": 81,
                "blob_url": "https://github.com/apache/derby/blob/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "raw_url": "https://github.com/apache/derby/raw/2e7e8f6dd036011d170b1c497c3daa0d8ba86999/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java?ref=2e7e8f6dd036011d170b1c497c3daa0d8ba86999",
                "patch": "@@ -2270,4 +2270,85 @@ public void testDerby4450() throws SQLException {\n                 {\"50\"},{\"45\"},{\"46\"},{\"90\"}});\n         rollback();\n     }\n+\n+\n+    /**\n+     * HAVING with an aggregate function in presence of join flattening\n+     * DERBY-4698. See also DERBY-3880.\n+     * @throws SQLException\n+     */\n+    public void testDerby4698() throws SQLException {\n+        setAutoCommit(false);\n+        Statement s = createStatement();\n+        ResultSet rs;\n+\n+        s.executeUpdate(\n+            \"create table usr ( user_id  bigint primary key,\" +\n+            \"                  deleted  char(1) not null)\");\n+        s.executeUpdate(\n+            \"create table  user_account ( user_account_id bigint primary key,\" +\n+            \"                             user_id  bigint not null,\" +\n+            \"                             account_id  bigint not null)\");\n+\n+        s.executeUpdate(\n+            \"CREATE TABLE  ACCOUNT  (ACCOUNT_ID  BIGINT PRIMARY KEY,\" +\n+            \"                        ACCOUNT_TYPE  VARCHAR(10) NOT NULL,\" +\n+            \"                        BALANCE  DOUBLE NOT NULL)\");\n+\n+        s.executeUpdate(\n+            \"insert into usr values \" +\n+            \"   (3003, 'Y'), (3004, 'N'), (1001, 'N'), (1002, 'Y'),\" +\n+            \"   (1003, 'N'), (1004, 'N'), (1005, 'N'), (1006, 'N'),\" +\n+            \"   (1007, 'N'), (1008, 'N'), (2002, 'N')\");\n+\n+        s.executeUpdate(\n+            \"insert into user_account values \" +\n+            \"  (4004, 3003, 9009), (4005, 3004, 9010), (5005, 1001, 10010),\" +\n+            \"  (5006, 3004, 10011), (5007, 2002, 10012), (5008, 1003, 10013),\" +\n+            \"  (5009, 1004, 10014), (5010, 1005, 10015), (5011, 1006, 10016),\" +\n+            \"  (5012, 1007, 10017), (5013, 1008, 10018), (6006, 1001, 11011),\" +\n+            \"  (6007, 3004, 11012), (6008, 2002, 11013), (6009, 1003, 11014),\" +\n+            \"  (6010, 1004, 11015), (6011, 1005, 11016), (6012, 1006, 11017),\" +\n+            \"  (6013, 1007, 11018), (6014, 1008, 11019), (1001, 1001, 1002),\" +\n+            \"  (1002, 1002, 1003), (1003, 1003, 1004), (1004, 1004, 1005),\" +\n+            \"  (1005, 1005, 1006), (1006, 1006, 1007), (1007, 1007, 1008),\" +\n+            \"  (1008, 1008, 1009), (1009, 1004, 1010), (2002, 1004, 6006),\" +\n+            \"  (3003, 2002, 7007)\");\n+\n+        s.executeUpdate(\n+            \"insert into account values \" +\n+            \" (9009, 'USER', 12.5), (9010, 'USER', 12.5),\" +\n+            \" (10010, 'USER-01', 0.0), (10011, 'USER-01', 0.0),\" +\n+            \" (10012, 'USER-01', 0.0), (10013, 'USER-01', 0.0),\" +\n+            \" (10014, 'USER-01', 99.0), (10015, 'USER-01', 0.0),\" +\n+            \" (10016, 'USER-01', 0.0), (10017, 'USER-01', 0.0),\" +\n+            \" (10018, 'USER-01', 0.0), (11011, 'USER-02', 0.0),\" +\n+            \" (11012, 'USER-02', 0.0), (11013, 'USER-02', 0.0),\" +\n+            \" (11014, 'USER-02', 0.0), (11015, 'USER-02', 0.0),\" +\n+            \" (11016, 'USER-02', 0.0), (11017, 'USER-02', 0.0),\" +\n+            \" (11018, 'USER-02', 0.0), (11019, 'USER-02', 0.0),\" +\n+            \" (1002, 'USER', 10.0), (1003, 'USER', 80.31),\" +\n+            \" (1004, 'USER', 10.0), (1005, 'USER', 161.7),\" +\n+            \" (1006, 'USER', 10.0), (1007, 'USER', 10.0),\" +\n+            \" (1008, 'USER', 10.0), (1009, 'USER', 10.0),\" +\n+            \" (7007, 'USER', 11.0)\");\n+\n+        rs = s.executeQuery(\n+            \"SELECT user0_.user_id AS col_0_0_,\" +\n+            \"   SUM(account2_.balance) AS col_1_0_ \" +\n+            \"   FROM usr user0_ \" +\n+            \"   INNER JOIN user_account accountlin1_ \" +\n+            \"   ON user0_.user_id = accountlin1_.user_id \" +\n+            \"   INNER JOIN account account2_ \" +\n+            \"   ON accountlin1_.account_id = account2_.account_id \" +\n+            \"WHERE user0_.deleted = 'N' \" +\n+            \"      AND ( account2_.account_type IN ( 'USER-01', 'USER' ) )\" +\n+            \"GROUP BY user0_.user_id \" +\n+            \"HAVING SUM(account2_.balance) >= 100.0 \");\n+\n+        JDBC.assertFullResultSet(rs, new String[][] {\n+                {\"1004\", \"260.7\"} });\n+\n+            rollback();\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/7a27cabe5354712a3e53028c73f501e1bf069c1a",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/48229dfd0bd83ed052c8ff6d2c528dd049eb0695",
        "message": "DERBY-4420: NullPointerException with INSERT INTO ... from EXCEPT/INTERSECT\n\nThe failing code in ResultSetNode.setTableConstructorTypes() was meant\nto handle the case where the node represented a table constructor (aka\nVALUES clause). UnionNode already had an override to make it a no-op\nunless it actually represented a multi-row VALUES clause that had been\nrewritten to a union of single-row VALUES clauses.\n\nSince a VALUES clause is never rewritten to EXCEPT or INTERSECT, the\ncorrect handling is to make setTableConstructorTypes() a no-op in\nIntersectOrExceptNode. Rather than adding an empty override in\nIntersectOrExceptNode, the code was moved from\nResultSetNode.setTableConstructorTypes() to\nRowResultSetNode.setTableConstructorTypes(), and the default\nimplementation in ResultSetNode was left empty.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@832379 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_152",
        "file": [
            {
                "sha": "b29456c059ec1a7c27af216cd27feca4a905fb21",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "status": "modified",
                "additions": 9,
                "deletions": 138,
                "changes": 147,
                "blob_url": "https://github.com/apache/derby/blob/7a27cabe5354712a3e53028c73f501e1bf069c1a/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "raw_url": "https://github.com/apache/derby/raw/7a27cabe5354712a3e53028c73f501e1bf069c1a/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java?ref=7a27cabe5354712a3e53028c73f501e1bf069c1a",
                "patch": "@@ -304,7 +304,12 @@ public void bindTargetExpressions(FromList fromListParam)\n \t}\n \n \t/**\n-\t * Set the type of each parameter in the result column list for this table constructor.\n+\t * Set the type of each parameter in the result column list if this node\n+\t * represents a table constructor (aka VALUES clause). Table constructors\n+\t * are represented either by a {@code RowResultSetNode} or by a\n+\t * {@code UnionNode} with multiple {@code RowResultSetNode} children and\n+\t * whose {@code tableConstructor()} method returns {@code true}. For all\n+\t * other nodes, this method should be a no-op.\n \t *\n \t * @param typeColumns\tThe ResultColumnList containing the desired result\n \t *\t\t\t\t\t\ttypes.\n@@ -314,143 +319,9 @@ public void bindTargetExpressions(FromList fromListParam)\n \tvoid setTableConstructorTypes(ResultColumnList typeColumns)\n \t\t\tthrows StandardException\n \t{\n-\t\tif (SanityManager.DEBUG)\n-\t\t\tSanityManager.ASSERT(resultColumns.visibleSize() <= typeColumns.size(),\n-\t\t\t\t\"More columns in ResultColumnList than in base table\");\n-\n-\t\t/* Look for ? parameters in the result column list */\n-\t\tint rclSize = resultColumns.size();\n-\t\tfor (int index = 0; index < rclSize; index++)\n-\t\t{\n-\t\t\tResultColumn\trc = (ResultColumn) resultColumns.elementAt(index);\n-\n-\t\t\tValueNode re = rc.getExpression();\n-\n-\t\t\tif (re.requiresTypeFromContext())\n-\t\t\t{\n-\t\t\t\tResultColumn\ttypeCol =\n-\t\t\t\t\t(ResultColumn) typeColumns.elementAt(index);\n-\n-\t\t\t\t/*\n-\t\t\t\t** We found a ? - set its type to the type of the\n-\t\t\t\t** corresponding column of the target table.\n-\t\t\t\t*/\n-\t\t\t\tre.setType(typeCol.getTypeServices());\n-\t\t\t}\n-\t\t\telse if (re instanceof CharConstantNode)\n-\t\t\t{\n-\t\t\t\t// Character constants are of type CHAR (fixed length string).\n-\t\t\t\t// This causes a problem (beetle 5160) when multiple row values are provided\n-\t\t\t\t// as constants for insertion into a variable length string column.\n-\t\t\t\t//\n-\t\t\t\t// This issue is the query expression\n-\t\t\t\t// VALUES 'abc', 'defghi'\n-\t\t\t\t// has type of CHAR(6), ie. the length of largest row value for that column.\n-\t\t\t\t// This is from the UNION defined behaviour.\n-\t\t\t\t// This causes strings with less than the maximum length to be blank padded\n-\t\t\t\t// to that length (CHAR semantics). Thus if this VALUES clause is used to\n-\t\t\t\t// insert into a variable length string column, then these blank padded values\n-\t\t\t\t// are inserted, which is not what is required ...\n-\t\t\t\t// \n-\t\t\t\t// BECAUSE, when the VALUES is used as a table constructor SQL standard says the\n-\t\t\t\t// types of the table constructor's columns are set by the table's column types.\n-\t\t\t\t// Thus, in this case, each of those string constants should be of type VARCHAR\n-\t\t\t\t// (or the matching string type for the table).\n-\t\t\t\t//\n-\t\t\t\t//\n-\t\t\t\t// This is only an issue for fixed length character (CHAR, BIT) string or\n-\t\t\t\t// binary consraints being inserted into variable length types.\n-\t\t\t\t// This is because any other type's fundemental literal value is not affected\n-\t\t\t\t// by its data type. E.g. Numeric types such as INT, REAL, BIGINT, DECIMAL etc.\n-\t\t\t\t// do not have their value modifed by the union since even if the type is promoted\n-\t\t\t\t// to a higher type, its fundemental value remains unchanged. \n-\t\t\t\t// values (1.2, 34.4567, 234.47) will be promoted to\n-\t\t\t\t// values (1.2000, 34.4567, 234.4700)\n-\t\t\t\t// but their numeric value remains the same.\n-\t\t\t\t//\n-\t\t\t\t//\n-\t\t\t\t//\n-\t\t\t\t// The fix is to change the base type of the table constructor's value to\n-\t\t\t\t// match the column type. Its length can be left as-is, because there is\n-\t\t\t\t// still a normailzation step when the value is inserted into the table.\n-\t\t\t\t// That will set the correct length and perform truncation checks etc.\n-\n-\t\t\t\tResultColumn\ttypeCol =\n-\t\t\t\t\t(ResultColumn) typeColumns.elementAt(index);\n-\n-\t\t\t\tTypeId colTypeId = typeCol.getTypeId();\n-\n-\t\t\t\tif (colTypeId.isStringTypeId()) {\n-\n-\t\t\t\t\tif (colTypeId.getJDBCTypeId() != java.sql.Types.CHAR) {\n-\n-\t\t\t\t\t\tint maxWidth = re.getTypeServices().getMaximumWidth();\n-\n-\t\t\t\t\t\tre.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse if (colTypeId.isBitTypeId()) {\n-\t\t\t\t\tif (colTypeId.getJDBCTypeId() == java.sql.Types.VARBINARY) {\n-\t\t\t\t\t// then we're trying to cast a char literal into a\n-\t\t\t\t\t// variable bit column.  We can't change the base\n-\t\t\t\t\t// type of the table constructor's value from char\n-\t\t\t\t\t// to bit, so instead, we just change the base type\n-\t\t\t\t\t// of that value from char to varchar--that way,\n-\t\t\t\t\t// no padding will be added when we convert to\n-\t\t\t\t\t// bits later on (Beetle 5306).\n-\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARCHAR);\n-\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n-\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARBINARY) {\n-\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARCHAR);\n-\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n-\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t}\n-\t\t\telse if (re instanceof BitConstantNode)\n-\t\t\t{\n-\t\t\t\tResultColumn\ttypeCol =\n-\t\t\t\t\t(ResultColumn) typeColumns.elementAt(index);\n-\n-\t\t\t\tTypeId colTypeId = typeCol.getTypeId();\n-\n-\t\t\t\tif (colTypeId.isBitTypeId()) {\n-\n-\t\t\t\t\t// NOTE: Don't bother doing this if the column type is BLOB,\n-\t\t\t\t\t// as we don't allow bit literals to be inserted into BLOB\n-\t\t\t\t\t// columns (they have to be explicitly casted first); beetle 5266.\n-\t\t\t\t\tif ((colTypeId.getJDBCTypeId() != java.sql.Types.BINARY) &&\n-\t\t\t\t\t\t(colTypeId.getJDBCTypeId() != java.sql.Types.BLOB)) {\n-\n-\t\t\t\t\t\tint maxWidth = re.getTypeServices().getMaximumWidth();\n-\n-\t\t\t\t\t\tre.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse if (colTypeId.isStringTypeId()) {\n-\t\t\t\t\tif (colTypeId.getJDBCTypeId() == java.sql.Types.VARCHAR) {\n-\t\t\t\t\t// then we're trying to cast a bit literal into a\n-\t\t\t\t\t// variable char column.  We can't change the base\n-\t\t\t\t\t// type of the table constructor's value from bit\n-\t\t\t\t\t// to char, so instead, we just change the base\n-\t\t\t\t\t// type of that value from bit to varbit--that way,\n-\t\t\t\t\t// no padding will be added when we convert to\n-\t\t\t\t\t// char later on.\n-\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARBINARY);\n-\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n-\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARCHAR) {\n-\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARBINARY);\n-\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n-\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+\t\t// Nothing to be done unless this node represents a VALUES clause, in\n+\t\t// which case the overrides in RowResultSetNode or UnionNode will do\n+\t\t// the necessary work.\n \t}\n \n \t/**"
            },
            {
                "sha": "e788ef39cbf40b66de1c1f647bf1d5f04487c385",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java",
                "status": "modified",
                "additions": 153,
                "deletions": 11,
                "changes": 164,
                "blob_url": "https://github.com/apache/derby/blob/7a27cabe5354712a3e53028c73f501e1bf069c1a/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java",
                "raw_url": "https://github.com/apache/derby/raw/7a27cabe5354712a3e53028c73f501e1bf069c1a/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java?ref=7a27cabe5354712a3e53028c73f501e1bf069c1a",
                "patch": "@@ -21,14 +21,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n package\torg.apache.derby.impl.sql.compile;\n \n-import org.apache.derby.iapi.services.context.ContextManager;\n-\n-import org.apache.derby.iapi.sql.compile.CompilerContext;\n import org.apache.derby.iapi.sql.compile.CostEstimate;\n import org.apache.derby.iapi.sql.compile.Optimizer;\n-import org.apache.derby.iapi.sql.compile.OptimizableList;\n import org.apache.derby.iapi.sql.compile.Optimizable;\n-import org.apache.derby.iapi.sql.compile.OptimizablePredicate;\n import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;\n import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;\n import org.apache.derby.iapi.sql.compile.RowOrdering;\n@@ -38,25 +33,22 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;\n import org.apache.derby.iapi.sql.dictionary.TableDescriptor;\n \n-import org.apache.derby.iapi.sql.Activation;\n-import org.apache.derby.iapi.sql.ResultSet;\n-import org.apache.derby.iapi.sql.Row;\n import org.apache.derby.iapi.error.StandardException;\n \n-import org.apache.derby.impl.sql.compile.ActivationClassBuilder;\n import org.apache.derby.iapi.services.compiler.MethodBuilder;\n \n import org.apache.derby.iapi.store.access.Qualifier;\n \n import org.apache.derby.iapi.services.sanity.SanityManager;\n \n+import org.apache.derby.iapi.types.DataTypeDescriptor;\n+import org.apache.derby.iapi.types.TypeId;\n+\n import org.apache.derby.iapi.util.JBitSet;\n import org.apache.derby.iapi.reference.SQLState;\n import org.apache.derby.iapi.reference.ClassName;\n import org.apache.derby.iapi.services.classfile.VMOpcode;\n \n-import java.util.Enumeration;\n-import java.util.Properties;\n import java.util.Vector;\n \n /**\n@@ -640,6 +632,156 @@ boolean returnsAtMostOneRow()\n \t\treturn true;\n \t}\n \n+\t/**\n+\t * Set the type of each parameter in the result column list for this table constructor.\n+\t *\n+\t * @param typeColumns\tThe ResultColumnList containing the desired result\n+\t *\t\t\t\t\t\ttypes.\n+\t *\n+\t * @exception StandardException\t\tThrown on error\n+\t */\n+\tvoid setTableConstructorTypes(ResultColumnList typeColumns)\n+\t\t\tthrows StandardException\n+\t{\n+\t\tif (SanityManager.DEBUG)\n+\t\t\tSanityManager.ASSERT(resultColumns.visibleSize() <= typeColumns.size(),\n+\t\t\t\t\"More columns in ResultColumnList than in base table\");\n+\n+\t\t/* Look for ? parameters in the result column list */\n+\t\tint rclSize = resultColumns.size();\n+\t\tfor (int index = 0; index < rclSize; index++)\n+\t\t{\n+\t\t\tResultColumn\trc = (ResultColumn) resultColumns.elementAt(index);\n+\n+\t\t\tValueNode re = rc.getExpression();\n+\n+\t\t\tif (re.requiresTypeFromContext())\n+\t\t\t{\n+\t\t\t\tResultColumn\ttypeCol =\n+\t\t\t\t\t(ResultColumn) typeColumns.elementAt(index);\n+\n+\t\t\t\t/*\n+\t\t\t\t** We found a ? - set its type to the type of the\n+\t\t\t\t** corresponding column of the target table.\n+\t\t\t\t*/\n+\t\t\t\tre.setType(typeCol.getTypeServices());\n+\t\t\t}\n+\t\t\telse if (re instanceof CharConstantNode)\n+\t\t\t{\n+\t\t\t\t// Character constants are of type CHAR (fixed length string).\n+\t\t\t\t// This causes a problem (beetle 5160) when multiple row values are provided\n+\t\t\t\t// as constants for insertion into a variable length string column.\n+\t\t\t\t//\n+\t\t\t\t// This issue is the query expression\n+\t\t\t\t// VALUES 'abc', 'defghi'\n+\t\t\t\t// has type of CHAR(6), ie. the length of largest row value for that column.\n+\t\t\t\t// This is from the UNION defined behaviour.\n+\t\t\t\t// This causes strings with less than the maximum length to be blank padded\n+\t\t\t\t// to that length (CHAR semantics). Thus if this VALUES clause is used to\n+\t\t\t\t// insert into a variable length string column, then these blank padded values\n+\t\t\t\t// are inserted, which is not what is required ...\n+\t\t\t\t//\n+\t\t\t\t// BECAUSE, when the VALUES is used as a table constructor SQL standard says the\n+\t\t\t\t// types of the table constructor's columns are set by the table's column types.\n+\t\t\t\t// Thus, in this case, each of those string constants should be of type VARCHAR\n+\t\t\t\t// (or the matching string type for the table).\n+\t\t\t\t//\n+\t\t\t\t//\n+\t\t\t\t// This is only an issue for fixed length character (CHAR, BIT) string or\n+\t\t\t\t// binary consraints being inserted into variable length types.\n+\t\t\t\t// This is because any other type's fundemental literal value is not affected\n+\t\t\t\t// by its data type. E.g. Numeric types such as INT, REAL, BIGINT, DECIMAL etc.\n+\t\t\t\t// do not have their value modifed by the union since even if the type is promoted\n+\t\t\t\t// to a higher type, its fundemental value remains unchanged.\n+\t\t\t\t// values (1.2, 34.4567, 234.47) will be promoted to\n+\t\t\t\t// values (1.2000, 34.4567, 234.4700)\n+\t\t\t\t// but their numeric value remains the same.\n+\t\t\t\t//\n+\t\t\t\t//\n+\t\t\t\t//\n+\t\t\t\t// The fix is to change the base type of the table constructor's value to\n+\t\t\t\t// match the column type. Its length can be left as-is, because there is\n+\t\t\t\t// still a normailzation step when the value is inserted into the table.\n+\t\t\t\t// That will set the correct length and perform truncation checks etc.\n+\n+\t\t\t\tResultColumn\ttypeCol =\n+\t\t\t\t\t(ResultColumn) typeColumns.elementAt(index);\n+\n+\t\t\t\tTypeId colTypeId = typeCol.getTypeId();\n+\n+\t\t\t\tif (colTypeId.isStringTypeId()) {\n+\n+\t\t\t\t\tif (colTypeId.getJDBCTypeId() != java.sql.Types.CHAR) {\n+\n+\t\t\t\t\t\tint maxWidth = re.getTypeServices().getMaximumWidth();\n+\n+\t\t\t\t\t\tre.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse if (colTypeId.isBitTypeId()) {\n+\t\t\t\t\tif (colTypeId.getJDBCTypeId() == java.sql.Types.VARBINARY) {\n+\t\t\t\t\t// then we're trying to cast a char literal into a\n+\t\t\t\t\t// variable bit column.  We can't change the base\n+\t\t\t\t\t// type of the table constructor's value from char\n+\t\t\t\t\t// to bit, so instead, we just change the base type\n+\t\t\t\t\t// of that value from char to varchar--that way,\n+\t\t\t\t\t// no padding will be added when we convert to\n+\t\t\t\t\t// bits later on (Beetle 5306).\n+\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARCHAR);\n+\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n+\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n+\t\t\t\t\t}\n+\t\t\t\t\telse if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARBINARY) {\n+\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARCHAR);\n+\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n+\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t}\n+\t\t\telse if (re instanceof BitConstantNode)\n+\t\t\t{\n+\t\t\t\tResultColumn\ttypeCol =\n+\t\t\t\t\t(ResultColumn) typeColumns.elementAt(index);\n+\n+\t\t\t\tTypeId colTypeId = typeCol.getTypeId();\n+\n+\t\t\t\tif (colTypeId.isBitTypeId()) {\n+\n+\t\t\t\t\t// NOTE: Don't bother doing this if the column type is BLOB,\n+\t\t\t\t\t// as we don't allow bit literals to be inserted into BLOB\n+\t\t\t\t\t// columns (they have to be explicitly casted first); beetle 5266.\n+\t\t\t\t\tif ((colTypeId.getJDBCTypeId() != java.sql.Types.BINARY) &&\n+\t\t\t\t\t\t(colTypeId.getJDBCTypeId() != java.sql.Types.BLOB)) {\n+\n+\t\t\t\t\t\tint maxWidth = re.getTypeServices().getMaximumWidth();\n+\n+\t\t\t\t\t\tre.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse if (colTypeId.isStringTypeId()) {\n+\t\t\t\t\tif (colTypeId.getJDBCTypeId() == java.sql.Types.VARCHAR) {\n+\t\t\t\t\t// then we're trying to cast a bit literal into a\n+\t\t\t\t\t// variable char column.  We can't change the base\n+\t\t\t\t\t// type of the table constructor's value from bit\n+\t\t\t\t\t// to char, so instead, we just change the base\n+\t\t\t\t\t// type of that value from bit to varbit--that way,\n+\t\t\t\t\t// no padding will be added when we convert to\n+\t\t\t\t\t// char later on.\n+\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARBINARY);\n+\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n+\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n+\t\t\t\t\t}\n+\t\t\t\t\telse if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARCHAR) {\n+\t\t\t\t\t\tTypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARBINARY);\n+\t\t\t\t\t\tre.setType(new DataTypeDescriptor(tId, true));\n+\t\t\t\t\t\ttypeColumns.setElementAt(typeCol, index);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n     /**\n      * The generated ResultSet will be:\n      *"
            },
            {
                "sha": "b98de28d39e1c087162b825d6117e5db81534a3f",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "status": "modified",
                "additions": 48,
                "deletions": 0,
                "changes": 48,
                "blob_url": "https://github.com/apache/derby/blob/7a27cabe5354712a3e53028c73f501e1bf069c1a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "raw_url": "https://github.com/apache/derby/raw/7a27cabe5354712a3e53028c73f501e1bf069c1a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java?ref=7a27cabe5354712a3e53028c73f501e1bf069c1a",
                "patch": "@@ -86,4 +86,52 @@ public void testInsertIntoSelectFromWithLongVarchar() throws SQLException {\n                     \"select * from t2 order by int(cast (a as varchar(10)))\"),\n                 data);\n     }\n+\n+    /**\n+     * INSERT used to fail with a NullPointerException if the source was an\n+     * EXCEPT operation or an INTERSECT operation. DERBY-4420.\n+     */\n+    public void testInsertFromExceptOrIntersect() throws SQLException {\n+        setAutoCommit(false);\n+        Statement s = createStatement();\n+\n+        // Create tables to fetch data from\n+        s.execute(\"create table t1(x int)\");\n+        s.execute(\"insert into t1 values 1,2,3\");\n+        s.execute(\"create table t2(x int)\");\n+        s.execute(\"insert into t2 values 2,3,4\");\n+\n+        // Create table to insert into\n+        s.execute(\"create table t3(x int)\");\n+\n+        // INTERSECT (used to cause NullPointerException)\n+        s.execute(\"insert into t3 select * from t1 intersect select * from t2\");\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"select * from t3 order by x\"),\n+                new String[][]{{\"2\"}, {\"3\"}});\n+        s.execute(\"delete from t3\");\n+\n+        // INTERSECT ALL (used to cause NullPointerException)\n+        s.execute(\"insert into t3 select * from t1 \" +\n+                  \"intersect all select * from t2\");\n+        JDBC.assertFullResultSet(\n+                s.executeQuery(\"select * from t3 order by x\"),\n+                new String[][]{{\"2\"}, {\"3\"}});\n+        s.execute(\"delete from t3\");\n+\n+        // EXCEPT (used to cause NullPointerException)\n+        s.execute(\"insert into t3 select * from t1 except select * from t2\");\n+        JDBC.assertSingleValueResultSet(\n+                s.executeQuery(\"select * from t3 order by x\"),\n+                \"1\");\n+        s.execute(\"delete from t3\");\n+\n+        // EXCEPT ALL (used to cause NullPointerException)\n+        s.execute(\"insert into t3 select * from t1 \" +\n+                  \"except all select * from t2\");\n+        JDBC.assertSingleValueResultSet(\n+                s.executeQuery(\"select * from t3 order by x\"),\n+                \"1\");\n+        s.execute(\"delete from t3\");\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/e3acc4a021ccd91d873a1113ad988fb9e026acc0",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/3d44317fe94d8be6dd8d6624203c93d29fd8bb1f",
        "message": "DERBY-213 - ResultSet.next() after last row of FORWARD_ONLY cursor throws an SQL Exception with Network Server\n\n- Additional tests in jdbcapi/resultset.java\n- Change to special flag to fix a small NullPointerException\n- modified output files for resultset.out, updatableResultSet.out, holdCursorJDBC30, forupdate.out\n- Changes to ResultSet, Statement and Connection in the org.apache.derby.client.am package. These changes have the following effects:\n      * FORWARD_ONLY ResultSets will no longer close implicitly after the last ResultSet has been retrieved.\n      * Checks to see if an auto-commit should be performed have been moved to Statement to mimic embedded functionality.\n      * Multiple ResultSets will now auto-commit if all ResultSets are closed if auto-commit is turned on.\n\n\t\nContributed by Philip Wilder\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@264128 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_153",
        "file": [
            {
                "sha": "b23b869c69acb80a0fa65c837d6ad3611514c0f8",
                "filename": "java/client/org/apache/derby/client/am/Connection.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/client/org/apache/derby/client/am/Connection.java",
                "raw_url": "https://github.com/apache/derby/raw/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/client/org/apache/derby/client/am/Connection.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/Connection.java?ref=e3acc4a021ccd91d873a1113ad988fb9e026acc0",
                "patch": "@@ -520,10 +520,12 @@ public void flowCommit() throws SqlException {\n     }\n \n     // precondition: autoCommit_ is true\n-    public void flowAutoCommit() throws SqlException {\n+    public boolean flowAutoCommit() throws SqlException {\n         if (willAutoCommitGenerateFlow()) {\n             flowCommit();\n+            return true;\n         }\n+        return false;\n     }\n \n     public boolean willAutoCommitGenerateFlow() throws org.apache.derby.client.am.SqlException {"
            },
            {
                "sha": "eb657eaa24b3f4ee521fb911b5d55d3d12d8f15a",
                "filename": "java/client/org/apache/derby/client/am/ResultSet.java",
                "status": "modified",
                "additions": 21,
                "deletions": 60,
                "changes": 81,
                "blob_url": "https://github.com/apache/derby/blob/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/client/org/apache/derby/client/am/ResultSet.java",
                "raw_url": "https://github.com/apache/derby/raw/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/client/org/apache/derby/client/am/ResultSet.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/ResultSet.java?ref=e3acc4a021ccd91d873a1113ad988fb9e026acc0",
                "patch": "@@ -281,6 +281,9 @@ boolean nextX() throws SqlException {\n             //   In these cases, the commit occurs when all results and output parameter values have been retrieved.\n             // we will check to see if the forward only result set has gone past the end,\n             // we will close the result set, the autocommit logic is in the closeX() method\n+            //\n+            //Aug 24, 2005: Auto-commit logic is no longer in the closeX() method. Insted it has been \n+            //moved to Statement and is handled in a manner similar to the embedded driver.\n //    if (!isValidCursorPosition_ && // We've gone past the end (+100)\n //        cursor_ != null) {\n             if ((!isValidCursorPosition_ && cursor_ != null) ||\n@@ -291,10 +294,6 @@ boolean nextX() throws SqlException {\n                 // check for an error which may have caused the cursor to terminate.\n                 // if there were no more rows because of an error, then this method\n                 // should throw an SqlException rather than just returning false.\n-                // note: closeX is still called and this will cause the\n-                // result set to be closed on the client. any additional calls to\n-                // next() will fail checkForClosedResultSet(), the query terminating exception is\n-                // only thrown once.\n                 // depending on how this works with scrollable cursors, there may be\n                 // a better way/more common place for this logic.\n                 SqlException sqlException = null;\n@@ -304,16 +303,17 @@ boolean nextX() throws SqlException {\n                         accumulateWarning(new SqlWarning(agent_.logWriter_, queryTerminatingSqlca_));\n                     } else if (sqlcode < 0) {\n                         sqlException = new SqlException(agent_.logWriter_, queryTerminatingSqlca_);\n-                    }\n+                    }                    \n                 }\n+            \n                 try {\n-                    closeX(); // the auto commit logic is in closeX()\n+                    statement_.resultSetCommitting(this);\n                 } catch (SqlException sqle) {\n                     sqlException = Utils.accumulateSQLException(sqle, sqlException);\n                 }\n-                if (sqlException != null) {\n+                \n+                if (sqlException != null)\n                     throw sqlException;\n-                }\n             }\n         }\n \n@@ -385,14 +385,13 @@ public final void closeX() throws SqlException {\n             if (openOnServer_) {\n                 flowCloseAndAutoCommitIfNotAutoCommitted();\n             } else {\n-                flowAutoCommitIfNotAutoCommitted(); // in case of early close\n+                statement_.resultSetCommitting(this);\n             }\n         } finally {\n             markClosed();\n             connection_.CommitAndRollbackListeners_.remove(this);\n         }\n \n-        flowAutoCommitIfLastOpenMultipleResultSetWasJustClosed();\n         if (statement_.openOnClient_ && statement_.isCatalogQuery_) {\n             statement_.closeX();\n         }\n@@ -413,31 +412,28 @@ public void nullDataForGC() {\n \n     void flowCloseAndAutoCommitIfNotAutoCommitted() throws SqlException {\n         agent_.beginWriteChain(statement_);\n-        writeCloseAndAutoCommitIfNotAutoCommitted();\n+        boolean performedAutoCommit = writeCloseAndAutoCommit();\n         agent_.flow(statement_);\n-        readCloseAndAutoCommitIfNotAutoCommitted();\n+        readCloseAndAutoCommit(performedAutoCommit);\n         agent_.endReadChain();\n     }\n \n-    private void writeCloseAndAutoCommitIfNotAutoCommitted() throws SqlException {\n+    private boolean writeCloseAndAutoCommit() throws SqlException {\n         // set autoCommitted_ to false so commit will flow following\n         // close cursor if autoCommit is true.\n         autoCommitted_ = false;\n         if (generatedSection_ == null) { // none call statement result set case\n             writeCursorClose_(statement_.section_);\n-            writeAutoCommitIfNotAutoCommitted();\n         } else { // call statement result set(s) case\n             writeCursorClose_(generatedSection_);\n         }\n+        return statement_.resultSetCommitting(this, true);\n     }\n \n-    private void readCloseAndAutoCommitIfNotAutoCommitted() throws SqlException {\n-        if (generatedSection_ == null) { // none call statement result set case\n-            readCursorClose_();\n+    private void readCloseAndAutoCommit(boolean readAutoCommit) throws SqlException {\n+        readCursorClose_();\n+        if (readAutoCommit) \n             readAutoCommitIfNotAutoCommitted();\n-        } else { // call statement result set(s) case\n-            readCursorClose_();\n-        }\n     }\n \n     void writeClose() throws SqlException {\n@@ -463,13 +459,6 @@ void readClose() throws SqlException {\n         }\n     }\n \n-    void flowAutoCommitIfNotAutoCommitted() throws SqlException {\n-        if (generatedSection_ == null && connection_.autoCommit_ && !autoCommitted_) {\n-            connection_.flowAutoCommit();\n-            markAutoCommitted();\n-        }\n-    }\n-\n     // precondition: transaction state allows for auto commit to generate flow\n     private void writeAutoCommitIfNotAutoCommitted() throws SqlException {\n         if (connection_.autoCommit_ && !autoCommitted_) {\n@@ -484,25 +473,6 @@ private void readAutoCommitIfNotAutoCommitted() throws SqlException {\n         }\n     }\n \n-    private void flowAutoCommitIfLastOpenMultipleResultSetWasJustClosed() throws SqlException {\n-        // After this call, the generatedSection_ is reset to null to avoid repeating the commit.\n-        if (generatedSection_ != null && statement_ != null && statement_.resultSetList_ != null) {\n-            int count = 0;\n-            for (int i = 0; i < statement_.resultSetList_.length; i++) {\n-                if (statement_.resultSetList_[i] == null) {\n-                    count++;\n-                }\n-            }\n-            if (count == statement_.resultSetList_.length) {\n-                if (connection_.autoCommit_ && !autoCommitted_) {\n-                    connection_.flowAutoCommit();\n-                    markAutoCommitted();\n-                }\n-            }\n-        }\n-        generatedSection_ = null; // this is prevent a subsequent close() call from doing another autocommit.\n-    }\n-\n     public boolean wasNull() throws SqlException {\n \n         if (agent_.loggingEnabled()) {\n@@ -3005,6 +2975,11 @@ private void nullOutReferenceInStatement() {\n         if (statement_.resultSet_ == this) {\n             statement_.resultSet_ = null;\n         }\n+        /*\n+         * Aug 10, 2005: Do we really only want to only null out the one resultSet? \n+         * The only time this method is called is from completeLocalCommit or \n+         * completeLocalRollback, both of which affect *all* ResultSets  \n+         */\n         if (statement_.resultSetList_ != null) {\n             for (int i = 0; i < statement_.resultSetList_.length; i++) {\n                 if (statement_.resultSetList_[i] == this) {\n@@ -3890,17 +3865,3 @@ private void resetRowsetSqlca() {\n         }\n     }\n }\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-"
            },
            {
                "sha": "d7daa5b5a8246493c00af2a9c6e4b0f3137930f6",
                "filename": "java/client/org/apache/derby/client/am/Statement.java",
                "status": "modified",
                "additions": 70,
                "deletions": 0,
                "changes": 70,
                "blob_url": "https://github.com/apache/derby/blob/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/client/org/apache/derby/client/am/Statement.java",
                "raw_url": "https://github.com/apache/derby/raw/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/client/org/apache/derby/client/am/Statement.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/am/Statement.java?ref=e3acc4a021ccd91d873a1113ad988fb9e026acc0",
                "patch": "@@ -2108,4 +2108,74 @@ protected void removeClientCursorNameFromCache() {\n             cursorName_ = null;\n         }\n     }\n+    \n+    /**\n+     * Convenience method for resultSetCommitting(ResultSet, boolean)\n+     * \n+     * @see Statement#resultSetCommitting(ResultSet, boolean)\n+     * @param closingRS The ResultSet to be closed\n+     * @throws SqlException\n+     */\n+    public void resultSetCommitting(ResultSet closingRS) throws SqlException {\n+        resultSetCommitting(closingRS, false);\n+    }\n+    \n+    /**\n+     * Method that checks to see if any other ResultSets are open. If not\n+     * proceeds with the autocommit.\n+     * \n+     * @param closingRS The ResultSet to be closed\n+     * @param writeChain A Boolean indicating whether this method\n+     * is part of a chain of write from client to Server\n+     * @throws SqlException\n+     */\n+    public boolean resultSetCommitting(ResultSet closingRS, boolean writeChain) throws SqlException {\n+\n+        // If the Connection is not in auto commit then this statement completion\n+        // cannot cause a commit.\n+        if (!connection_.autoCommit_ || closingRS.autoCommitted_)\n+            return false;\n+\n+        // If we have multiple results, see if there is another result set open.\n+        // If so, then no commit. The last result set to close will close the statement.\n+        if (resultSetList_ != null) {\n+            for (int i = 0; i < resultSetList_.length; i++) {\n+                ResultSet crs = resultSetList_[i];\n+                if (crs == null)\n+                    continue;\n+                if (!crs.openOnClient_)\n+                    continue;\n+                if (crs == closingRS)\n+                    continue;\n+\n+                // at least one still open so no commit now.\n+                return false;\n+            }\n+        }\n+        \n+        if (writeChain) {\n+            connection_.writeAutoCommit();\n+            return true;\n+        } else {\n+            if (connection_.flowAutoCommit()) {\n+                markAutoCommitted();\n+                return true;\n+            }\n+            return false;\n+        }\n+    }\n+    \n+    /**\n+     * Mark all ResultSets associated with this statement as auto-committed.   \n+     */\n+    public void markAutoCommitted() {\n+        if (resultSetList_ != null) {\n+            for (int i = 0; i < resultSetList_.length; i++)\n+                if (resultSetList_[i] != null) {\n+                    resultSetList_[i].markAutoCommitted();\n+                }\n+        } else if (resultSet_ != null) {\n+            resultSet_.markAutoCommitted();\n+        }\n+    }\n }"
            },
            {
                "sha": "7ed190c087361a8e89c896e7d2c9cbdda9cd248c",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/harness/SpecialFlags.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/harness/SpecialFlags.java",
                "raw_url": "https://github.com/apache/derby/raw/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/harness/SpecialFlags.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/harness/SpecialFlags.java?ref=e3acc4a021ccd91d873a1113ad988fb9e026acc0",
                "patch": "@@ -105,6 +105,8 @@ public static void parse(String flags,\n \t{\n \t    // flags is a list of key-value pairs separated by a ^;\n \t    // to be parsed and added to either ijProps or srvProps\n+        if (flags == null)\n+            flags = \"\";\n \t    StringTokenizer st = new StringTokenizer(flags, \"^\");\n \t    String str = \"\";\n \t    String key = \"\";"
            },
            {
                "sha": "6c0f445c74b4c695399fb27b52dcbde90172610e",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/forupdate.out",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/forupdate.out",
                "raw_url": "https://github.com/apache/derby/raw/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/forupdate.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/forupdate.out?ref=e3acc4a021ccd91d873a1113ad988fb9e026acc0",
                "patch": "@@ -56,7 +56,7 @@ No current row\n ij> -- the delete will get a 'cursor not updatable' execution error, but won't get\n ----- a compile time error\n delete from t1 where current of c1;\n-ERROR (no SQLState): Invalid cursor name \"C1\" in the Update/Delete statement.\n+ERROR 42X23: Cursor SQL_CURLH000C1 is not updatable.\n ij> close c1;\n ij> -- . read only for read only cursor spec\n ----- we know because the delete is refused with a 'cursor not updatable' message\n@@ -129,10 +129,10 @@ ij> next c4;\n No current row\n ij> -- this will get a target table mismatch error, it uses the correlation name:\n delete from s1 where current of c4;\n-ERROR (no SQLState): Invalid cursor name \"C4\" in the Update/Delete statement.\n+ERROR 42X28: Delete table 'S1' is not target of cursor 'SQL_CURLH000C1'.\n ij> -- this will compile and get a 'no current row' error, it uses the table name:\n delete from t1 where current of c4;\n-ERROR (no SQLState): Invalid cursor name \"C4\" in the Update/Delete statement.\n+ERROR XCL08: Cursor 'SQL_CURLH000C1' is not on a row.\n ij> close c4;\n ij> -- . list columns in order same/different from appearance in table\n ----- the columns are 'found' regardless of their order."
            },
            {
                "sha": "bf7c599c38755f78d4b238bbe0c269ed7e6ac427",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/holdCursorJDBC30.out",
                "status": "modified",
                "additions": 65,
                "deletions": 65,
                "changes": 130,
                "blob_url": "https://github.com/apache/derby/blob/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/holdCursorJDBC30.out",
                "raw_url": "https://github.com/apache/derby/raw/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/holdCursorJDBC30.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/holdCursorJDBC30.out?ref=e3acc4a021ccd91d873a1113ad988fb9e026acc0",
                "patch": "@@ -58,7 +58,7 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> close test1;\n ij> -- should fail\n next test1;\n@@ -68,7 +68,7 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> close test1;\n ij> -- should fail\n@@ -79,14 +79,14 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> close test1;\n ij> -- should fail\n@@ -97,16 +97,16 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> close test1;\n ij> -- should fail\n@@ -117,16 +117,16 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> close test1;\n ij> commit;\n ij> -- should fail\n@@ -337,7 +337,7 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> close test1;\n ij> -- should fail\n next test1;\n@@ -348,7 +348,7 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> close test1;\n ij> -- should fail\n@@ -360,14 +360,14 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> close test1;\n ij> -- should fail\n@@ -379,16 +379,16 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> close test1;\n ij> -- should fail\n@@ -400,16 +400,16 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> close test1;\n ij> commit;\n ij> -- should fail\n@@ -678,7 +678,7 @@ A |DATA\n ij> next  test1;\n No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> close test1;\n ij> commit;\n ij> -- should fail\n@@ -732,7 +732,7 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> close test1;\n ij> -- should fail\n next test1;\n@@ -743,7 +743,7 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> close test1;\n ij> -- should fail\n@@ -755,14 +755,14 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> close test1;\n ij> -- should fail\n@@ -774,16 +774,16 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> close test1;\n ij> -- should fail\n@@ -795,16 +795,16 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> close test1;\n ij> commit;\n ij> -- should fail\n@@ -1026,7 +1026,7 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> close test1;\n ij> -- should fail\n next test1;\n@@ -1037,7 +1037,7 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> close test1;\n ij> -- should fail\n@@ -1049,14 +1049,14 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> close test1;\n ij> -- should fail\n@@ -1068,16 +1068,16 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> close test1;\n ij> -- should fail\n@@ -1089,16 +1089,16 @@ ij> next  test1;\n No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> commit;\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> next  test1;\n-ERROR (no SQLState): Invalid operation: result set closed\n+No current row\n ij> close test1;\n ij> commit;\n ij> -- should fail"
            },
            {
                "sha": "c0865ea58c95aaa3d968d51c856f251aeb0c555e",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/updatableResultSet.out",
                "status": "modified",
                "additions": 8,
                "deletions": 8,
                "changes": 16,
                "blob_url": "https://github.com/apache/derby/blob/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/updatableResultSet.out",
                "raw_url": "https://github.com/apache/derby/raw/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/updatableResultSet.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/updatableResultSet.out?ref=e3acc4a021ccd91d873a1113ad988fb9e026acc0",
                "patch": "@@ -70,11 +70,11 @@ updateRow will check if it is on a row or not even though no changes have been m\n SQL State : null\n Got expected exception Invalid operation to update at current cursor position\n ResultSet is positioned after the last row. attempt to deleteRow at this point should fail!\n-SQL State : null\n-Got expected exception Invalid operation: result set closed\n+SQL State : XCL08\n+Got expected exception Cursor '<xxx-cursor-name-xxx>' is not on a row.\n ResultSet is positioned after the last row. attempt to updateRow at this point should fail!\n SQL State : null\n-Got expected exception Invalid operation: result set closed\n+Got expected exception Invalid operation to update at current cursor position\n Negative Test8 - attempt deleteRow & updateRow on updatable resultset after closing the resultset\n Make sure that we got CONCUR_UPDATABLE? true\n SQL State : null\n@@ -374,8 +374,8 @@ Verify that update trigger got fired by verifying the row count to be 1 in updat\n Positive Test13a - Another test case for delete trigger\n column 1 on this row is 1\n this delete row will fire the delete trigger which will delete all the rows from the table and from the resultset\n-SQL State : null\n-Got expected exception Invalid operation: result set closed\n+SQL State : XCL08\n+Got expected exception Cursor '<xxx-cursor-name-xxx>' is not on a row.\n Verify that delete trigger got fired by verifying the row count to be 0 in table1WithTriggers\n \t 1\n \t -\n@@ -391,7 +391,7 @@ Look at the current contents of table2WithTriggers\n column 1 on this row is 2\n this update row will fire the update trigger which will update all the rows in the table to have c1=1 and hence no more rows will qualify for the resultset\n SQL State : null\n-Got expected exception Invalid operation: result set closed\n+Got expected exception Invalid operation to update at current cursor position\n Verify that update trigger got fired by verifying that all column c1s have value 1 in table2WithTriggers\n \t C1,C2\n \t -- --\n@@ -408,8 +408,8 @@ Positive Test14a - make sure self referential delete cascade works when deleteRo\n \t{e4,e3}\n column 1 on this row is e1\n this delete row will cause the delete cascade constraint to delete all the rows from the table and from the resultset\n-SQL State : null\n-Got expected exception Invalid operation: result set closed\n+SQL State : XCL08\n+Got expected exception Cursor '<xxx-cursor-name-xxx>' is not on a row.\n Verify that delete trigger got fired by verifying the row count to be 0 in selfReferencingT1\n \t 1\n \t -"
            },
            {
                "sha": "e0f534ad4d235a446650bb061efc31972af280f0",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/resultset.out",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/resultset.out",
                "raw_url": "https://github.com/apache/derby/raw/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/resultset.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/resultset.out?ref=e3acc4a021ccd91d873a1113ad988fb9e026acc0",
                "patch": "@@ -1993,4 +1993,8 @@ Testing nullif(?,TIMESTAMP) with setTimestamp\n \t{null}\n Testing nullif(?,BLOB(1k))\n ERROR 42818: Comparisons between 'BLOB' and 'BLOB' are not supported.\n+Single RS auto-commit test: PASS.\n+SingleRSCloseCursorsAtCommit: PASS.\n+MultipleRSAutoCommit: PASS. \n+MultipleRSNoCommit: PASS. \n Test resultset finished"
            },
            {
                "sha": "d8848de36a17cb2fff80ebfdf510b508d7a8a960",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/resultset.out",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/master/resultset.out",
                "raw_url": "https://github.com/apache/derby/raw/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/master/resultset.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/resultset.out?ref=e3acc4a021ccd91d873a1113ad988fb9e026acc0",
                "patch": "@@ -1993,4 +1993,8 @@ Testing nullif(?,TIMESTAMP) with setTimestamp\n \t{null}\r\n Testing nullif(?,BLOB(1k))\r\n ERROR 42818: Comparisons between 'BLOB' and 'BLOB' are not supported.\r\n+Single RS auto-commit test: PASS.\r\n+SingleRSCloseCursorsAtCommit: PASS.\r\n+MultipleRSAutoCommit: PASS. \r\n+MultipleRSNoCommit: PASS. \r\n Test resultset finished\r"
            },
            {
                "sha": "ebfdda38695b991e71f5748528b81f682465e4bf",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/copyfiles.ant",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/copyfiles.ant",
                "raw_url": "https://github.com/apache/derby/raw/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/copyfiles.ant",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/copyfiles.ant?ref=e3acc4a021ccd91d873a1113ad988fb9e026acc0",
                "patch": "@@ -32,6 +32,7 @@ resultsetStream.gif\n resultsetStream_app.properties\n resultsetJdbc30_sed.properties\n resultset_app.properties\n+resultset_derby.properties\n savepointJdbc30_app.properties\n savepointJdbc30_derby.properties\n secureUsers.sql"
            },
            {
                "sha": "58ac49117817642799a3f6aa884b06da3db30254",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java",
                "status": "modified",
                "additions": 297,
                "deletions": 3,
                "changes": 300,
                "blob_url": "https://github.com/apache/derby/blob/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java",
                "raw_url": "https://github.com/apache/derby/raw/e3acc4a021ccd91d873a1113ad988fb9e026acc0/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java?ref=e3acc4a021ccd91d873a1113ad988fb9e026acc0",
                "patch": "@@ -20,6 +20,7 @@\n \n package org.apache.derbyTesting.functionTests.tests.jdbcapi;\n \n+import java.sql.CallableStatement;\n import java.sql.Connection;\n import java.sql.Date;\n import java.sql.DriverManager;\n@@ -32,12 +33,14 @@\n import java.sql.Timestamp;\n import java.sql.Types;\n \n+\n import java.lang.reflect.*;\n \n import org.apache.derby.tools.ij;\n import org.apache.derbyTesting.functionTests.util.TestUtil;\n import org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil;\n import org.apache.derby.iapi.reference.JDBC30Translation;\n+import org.apache.derby.iapi.reference.SQLState;\n \n /**\n  * Test of JDBC result set and result set meta-data.\n@@ -561,8 +564,8 @@ public static void main(String[] args) throws Throwable {\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\trs.close();\n-\n+            rs.close();\n+            \n \t\t\t// Try getting a row from the closed result set\n \t\t\ttry {\n \t\t\t\trs.next();\n@@ -599,6 +602,11 @@ public static void main(String[] args) throws Throwable {\n \t\t\ttestMutableValues(con);\n \t\t\ttestCorrelationNamesAndMetaDataCalls(con);\n \t\t\ttestNullIfAndMetaDataCalls(con);\n+            //We know that JCC behavior does not match \n+            //DerbyNetClient or embedded\n+            if (!TestUtil.isJCCFramework()) {\n+                runAutoCommitTests(con);\n+            }\n \t\t\tcon.close();\n \n \t\t}\n@@ -1041,5 +1049,291 @@ private static void checkMutableValue(java.util.ArrayList list, int col, Object\n \n \t\tlist.add(value);\n \t}\n-}\n+    \n+    /**\n+     * Helper method to set up and run the auto-commit tests.\n+     * \n+     * @param conn The Connection\n+     * @throws SQLException\n+     */\n+    private static void runAutoCommitTests(Connection conn) throws SQLException {\n+        Statement s = conn.createStatement();\n+        ResultSet rs = s.executeQuery(\"select tablename from sys.systables \" +\n+                \"where tablename = 'AUTOCOMMITTABLE'\");\n+        if (rs.next()) {\n+            rs.close();\n+            s.executeUpdate(\"delete from AutoCommitTable\");\n+        } else {\n+            rs.close();\n+            s.executeUpdate(\"create table AutoCommitTable (num int)\");\n+        }\n+        s.executeUpdate(\"insert into AutoCommitTable values (1)\");\n+        s.executeUpdate(\"insert into AutoCommitTable values (2)\");\n+        int isolation = conn.getTransactionIsolation();\n+        conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n+        testSingleRSAutoCommit(conn);\n+        testSingleRSCloseCursorsAtCommit(conn);\n+        multipleRSTests(conn);\n+        conn.setTransactionIsolation(isolation);\n+        s.executeUpdate(\"drop table AutoCommitTable\");\n+        s.close();\n+    }\n+    \n+    /**\n+     * Tests for two things:\n+     * \n+     * 1) The ResultSet does not close implicitly when the ResultSet completes \n+     * and holdability == HOLD_CURSORS_OVER_COMMIT\n+     * \n+     * 2) The ResultSet auto-commits when it completes and auto-commit is on. \n+     * \n+     * @param conn The Connection\n+     * @param tableName\n+     * @throws SQLException\n+     */\n+    private static void testSingleRSAutoCommit(Connection conn) throws SQLException {\n+        setHoldability(conn, JDBC30Translation.HOLD_CURSORS_OVER_COMMIT);\n+        System.out.print(\"Single RS auto-commit test: \");\n+        Statement s = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n+        ResultSet rs = s.executeQuery(\"select * from AutoCommitTable\");\n+        while (rs.next());\n+        if (!checkLocks()) {\n+            System.out.println(\"FAIL. Auto-commit unsuccessful.\");\n+            rs.close();\n+            return;\n+        }\n+        try {\n+            if (!rs.next()) {\n+                System.out.println(\"PASS.\");\n+            } else {\n+                System.out.println(\"FAIL. Final call of the ResultSet should return false\");\n+            }\n+            rs.close();\n+        } catch (SQLException e) {\n+            System.out.println(\"FAIL. Final call to ResultSet.next() threw an Exception: \");\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    /**\n+     * Check to see that ResultSet closes implicitly when holdability is set to\n+     * CLOSE_CURORS_AT_COMMIT.\n+     * \n+     * @param conn The Connection\n+     * @throws SQLException\n+     */\n+    private static void testSingleRSCloseCursorsAtCommit(Connection conn) throws SQLException {\n+        setHoldability(conn, JDBC30Translation.CLOSE_CURSORS_AT_COMMIT);\n+        conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n+        System.out.print(\"SingleRSCloseCursorsAtCommit: \");\n+        Statement s = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n+        ResultSet rs = s.executeQuery(\"select * from AutoCommitTable\");\n+        while (rs.next());\n+        if (!checkLocks()) {\n+            System.out.println(\"FAIL. Auto-commit unsuccessful.\");\n+            rs.close();\n+            return;\n+        }\n+        try {\n+            rs.next();\n+            System.out.println(\"FAIL. ResultSet not closed implicitly\");\n+            rs.close();\n+        } catch (SQLException e) {\n+            System.out.println(\"PASS.\");\n+        }\n+    }\n+    \n+    /**\n+     * Sets up and runs two tests with multiple ResultSets\n+     * \n+     * @param conn The Connection\n+     * @throws SQLException\n+     */\n+    private static void multipleRSTests(Connection conn) throws SQLException {\n+        setHoldability(conn, JDBC30Translation.HOLD_CURSORS_OVER_COMMIT);\n+        \n+        //Installing Procedure\n+        Statement stmt = conn.createStatement();\n+        ResultSet mdrs = conn.getMetaData().getProcedures(\n+                null, null, \"MULTIRESULT\");\n+        if (mdrs != null || !mdrs.next()) {\n+            stmt.executeUpdate(\"create procedure multiResult(p1 int, \" +\n+                    \"p2 int) parameter style JAVA READS SQL DATA dynamic \" +\n+                    \"result sets 2 language java external name \" +\n+                    \"'org.apache.derbyTesting.functionTests.\" +\n+                    \"tests.jdbcapi.resultset.multiResult'\");\n+        }\n+        mdrs.close();\n+        multipleRSAutoCommit(conn);\n+        multipleRSNoCommit(conn);\n+        stmt.executeUpdate(\"drop procedure multiResult\");\n+        stmt.close();\n+    }\n+    \n+    /**\n+     * Test to see that an auto commit occurs for multiple ResultSets if all \n+     * ResultSets but one are closed and the final ResultSet has completed.\n+     * \n+     * @param conn The Connection\n+     * @throws SQLException\n+     */\n+    private static void multipleRSAutoCommit(Connection conn) throws SQLException {\n+        System.out.print(\"MultipleRSAutoCommit: \");\n+        CallableStatement cs = conn.prepareCall(\"call multiResult(?, ?)\");\n+        cs.setInt(1, 1);\n+        cs.setInt(2, 2);\n+        cs.execute();\n+        ResultSet rs = null;\n+        do {\n+            if (rs != null)\n+                rs.close();\n+            rs = cs.getResultSet();\n+            while (rs.next());\n+            \n+            if (rs.next()) {\n+                System.out.println(\"FAIL. Final call to ResultSet should return false.\");\n+            }\n+        } while (getMoreResults(cs));\n+        \n+        if (!checkLocks()) {\n+            return;\n+        }\n+        \n+        System.out.println(\"PASS. \");\n+        \n+        if (rs != null)\n+            rs.close();\n+        cs.close();\n+    }\n+    \n+    /**\n+     * Used to insure that there is no auto-commit in the event that there is\n+     * more then one ResultSet open.\n+     * \n+     * @param conn The Connection\n+     * @throws SQLException\n+     */\n+    private static void multipleRSNoCommit(Connection conn) throws SQLException {\n+        System.out.print(\"MultipleRSNoCommit: \");\n+        CallableStatement cs = conn.prepareCall(\"call multiResult(?, ?)\");\n+        cs.setInt(1, 1);\n+        cs.setInt(2, 2);\n+        cs.execute();\n+        ResultSet rs = null;\n+        do {\n+            rs = cs.getResultSet();\n+            while (rs.next());\n+            \n+            if (rs.next()) {\n+                System.out.println(\"FAIL. Final call to ResultSet should return false.\");\n+            }\n+        } while (getMoreResults(cs));\n+        \n+        if (checkLocks()) {\n+            System.out.println(\"FAIL. Connection incorrectly auto-committed.\");\n+        }\n+        \n+        System.out.println(\"PASS. \");\n+        \n+        if (rs != null)\n+            rs.close();\n+        cs.close();\n+    }\n \n+    \n+    \n+    /**\n+     * Checks to see if there is a lock on a table by attempting to modify the\n+     * same table. If the first connection was serializable then it will \n+     * continue to hold a lock and the second Connection will time out.\n+     * \n+     * @return false if the a lock could not be established, true if a lock\n+     * can be established.\n+     * @throws SQLException\n+     */\n+    private static boolean checkLocks() throws SQLException {\n+        Connection conn = null;\n+        try {\n+            conn = ij.startJBMS();\n+        } catch (Exception e) {\n+            System.out.println(\"FAIL. Unable to establish connection in checkLocks\");\n+            return false;\n+        }\n+        Statement stmt = conn.createStatement();\n+        try {\n+            stmt.executeUpdate(\"update AutoCommitTable \" \n+                    + \"set num = 3 where num = 2\");\n+            stmt.executeUpdate(\"update AutoCommitTable \" \n+                    + \"set num = 2 where num = 3\");\n+        } catch (SQLException e) {\n+            if (e.getSQLState().equals(SQLState.LOCK_TIMEOUT)) {\n+                return false;\n+            } else {\n+                throw e;\n+            }\n+        }\n+        stmt.close();\n+        conn.close();\n+        return true;\n+    }\n+    \n+    /**\n+     * Sets the holdability of a Connection using reflection so it is\n+     * JDBC2.0 compatible.\n+     * \n+     * @param conn The Connection\n+     * @param hold The new holdability.\n+     * @throws SQLException\n+     */\n+    public static void setHoldability(Connection conn, int hold) throws SQLException {\n+        try {\n+            Object[] holdArray = {new Integer(hold)};\n+            Method sh = conn.getClass().getMethod(\"setHoldability\", CONN_PARAM);\n+            sh.invoke(conn, holdArray);\n+        } catch (Exception e) {System.out.println(\"shouldn't get that error \" + e.getMessage());}//for jdks prior to jdk14\n+    }\n+    \n+    /**\n+     * Uses reflection to call CallableStatement.getMoreResults(KEEP_CURRENT_RESULT)\n+     * for JDBC2.0 compatibilty\n+     * @param cs The Callable statement\n+     * @return boolean value indicating if there are more results \n+     * @throws SQLException\n+     */\n+    public static boolean getMoreResults(CallableStatement cs) throws SQLException {\n+        try {\n+            Object[] holdArray = {new Integer(JDBC30Translation.KEEP_CURRENT_RESULT)};\n+            Method sh = cs.getClass().getMethod(\"getMoreResults\", CONN_PARAM);\n+            Boolean temp = (Boolean)sh.invoke(cs, holdArray);\n+            return temp.booleanValue();\n+        } catch (Exception e) {return cs.getMoreResults();}//for jdks prior to jdk14 \n+    }\n+    \n+    \n+    \n+    /**\n+     * Procedure installed by the multipleResultSet method and used by the \n+     * multiRSHelper. Designed to return two ResultSets from a specified table\n+     * where the num column equals p1 and p2 respectively.  \n+     *  \n+     * @param p1 Number parameter for the first ResultSet\n+     * @param p2 Number parameter for the second ResultSet \n+     * @param data1 The first ResultSet to be returned.\n+     * @param data2 The Second ResultSet to be returned\n+     * @throws SQLException\n+     */\n+     public static void multiResult(int p1, int p2, ResultSet[] data1, ResultSet[] data2) \n+        throws SQLException {\n+\n+        Connection conn = DriverManager.getConnection(\"jdbc:default:connection\");\n+        PreparedStatement ps = conn.prepareStatement(\"select * from AutoCommitTable where num = ?\");\n+        ps.setInt(1, p1);\n+        data1[0] = ps.executeQuery();\n+\n+        ps = conn.prepareStatement(\"select * from AutoCommitTable where num = ?\");\n+        ps.setInt(1, p2);\n+        data2[0] = ps.executeQuery();\n+\n+        conn.close();\n+     }\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/a823c6a885f3d798c16dc4682d8a9bea318360bc",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/66f38fa688e555d0d5a97cb8467f1de103eb12f1",
        "message": "DERBY-4712 Complex nested joins problems\n\nPatch DERBY-4712b, which removes one of the source for NPE seen by the reporter.\nThe other is covered by DERBY-4798.\n\nA corner case: the patch makes an inner join which decides it is not\nflattenable, propagate this fact down to any nested outer join nodes\ncontaining nested inner joins, the latter inner joins will otherwise\nthink they are flattenable (a priori value for inner joins).\n\nAdds new test cases.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@997325 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_154",
        "file": [
            {
                "sha": "cf71e3c860791b5807b75bbd45a6c5d54dd538d4",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "status": "modified",
                "additions": 7,
                "deletions": 0,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/a823c6a885f3d798c16dc4682d8a9bea318360bc/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "raw_url": "https://github.com/apache/derby/raw/a823c6a885f3d798c16dc4682d8a9bea318360bc/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java?ref=a823c6a885f3d798c16dc4682d8a9bea318360bc",
                "patch": "@@ -1512,6 +1512,13 @@ public FromTable transformOuterJoins(ValueNode predicateTree, int numTables)\n \t\t/* Can't flatten if no predicates in where clause. */\n \t\tif (predicateTree == null)\n \t\t{\n+            // DERBY-4712. Make sure any nested outer joins know we are non\n+            // flattenable, too, since they inform their left and right sides\n+            // which, is they are inner joins, a priori think they are\n+            // flattenable. If left/right result sets are not outer joins,\n+            // these next two calls are no-ops.\n+            ((FromTable) leftResultSet).transformOuterJoins(null, numTables);\n+            ((FromTable) rightResultSet).transformOuterJoins(null, numTables);\n \t\t\treturn this;\n \t\t}\n "
            },
            {
                "sha": "f99ef0a2490ced21a0f0b06e102e9ddc9f46a418",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java",
                "status": "modified",
                "additions": 246,
                "deletions": 0,
                "changes": 246,
                "blob_url": "https://github.com/apache/derby/blob/a823c6a885f3d798c16dc4682d8a9bea318360bc/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java",
                "raw_url": "https://github.com/apache/derby/raw/a823c6a885f3d798c16dc4682d8a9bea318360bc/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java?ref=a823c6a885f3d798c16dc4682d8a9bea318360bc",
                "patch": "@@ -3133,4 +3133,250 @@ public void testDerby_4736_nullability() throws Exception\n \n         JDBC.assertFullResultSet(rs, expRS);\n     }\n+\n+\n+    /**\n+     * Test the queries reported in DERBY-4712 as giving null pointer\n+     * exceptions. Should fail with NPE before the fix went in.  For bug\n+     * explanation, see the JIRA issue and {@code JoinNode#transformOuterJoins}.\n+     */\n+    public void testDerby_4712_NPEs() throws Exception\n+    {\n+        setAutoCommit(false);\n+\n+        Statement st = createStatement();\n+        ResultSet rs = null;\n+        String [][] expRS;\n+\n+        st.executeUpdate(\"create table t0(x0 int)\");\n+        st.executeUpdate(\"create table t1(x1 int)\");\n+        st.executeUpdate(\"create table t2(x2 int)\");\n+        st.executeUpdate(\"create table t3(x3 int)\");\n+        st.executeUpdate(\"create table t4(x4 int)\");\n+        st.executeUpdate(\"insert into t4 values(0)\");\n+        st.executeUpdate(\"insert into t4 values(1)\");\n+        st.executeUpdate(\"insert into t4 values(2)\");\n+        st.executeUpdate(\"insert into t4 values(3)\");\n+        st.executeUpdate(\"create table t5(x5 int)\");\n+        st.executeUpdate(\"insert into t5 values(0)\");\n+        st.executeUpdate(\"insert into t5 values(1)\");\n+        st.executeUpdate(\"insert into t5 values(2)\");\n+        st.executeUpdate(\"insert into t5 values(3)\");\n+        st.executeUpdate(\"insert into t5 values(4)\");\n+        st.executeUpdate(\"create table t6(x6 int)\");\n+        st.executeUpdate(\"insert into t6 values(0)\");\n+        st.executeUpdate(\"insert into t6 values(1)\");\n+        st.executeUpdate(\"insert into t6 values(2)\");\n+        st.executeUpdate(\"insert into t6 values(3)\");\n+        st.executeUpdate(\"insert into t6 values(4)\");\n+        st.executeUpdate(\"insert into t6 values(5)\");\n+        st.executeUpdate(\"create table t7(x7 int)\");\n+        st.executeUpdate(\"insert into t7 values(0)\");\n+        st.executeUpdate(\"insert into t7 values(1)\");\n+        st.executeUpdate(\"insert into t7 values(2)\");\n+        st.executeUpdate(\"insert into t7 values(3)\");\n+        st.executeUpdate(\"insert into t7 values(4)\");\n+        st.executeUpdate(\"insert into t7 values(5)\");\n+        st.executeUpdate(\"insert into t7 values(6)\");\n+        st.executeUpdate(\"create table t8(x8 int)\");\n+        st.executeUpdate(\"insert into t8 values(0)\");\n+        st.executeUpdate(\"insert into t8 values(1)\");\n+        st.executeUpdate(\"insert into t8 values(2)\");\n+        st.executeUpdate(\"insert into t8 values(3)\");\n+        st.executeUpdate(\"insert into t8 values(4)\");\n+        st.executeUpdate(\"insert into t8 values(5)\");\n+        st.executeUpdate(\"insert into t8 values(6)\");\n+        st.executeUpdate(\"insert into t8 values(7)\");\n+        st.executeUpdate(\"create table t9(x9 int)\");\n+        st.executeUpdate(\"insert into t9 values(0)\");\n+        st.executeUpdate(\"insert into t9 values(1)\");\n+        st.executeUpdate(\"insert into t9 values(2)\");\n+        st.executeUpdate(\"insert into t9 values(3)\");\n+        st.executeUpdate(\"insert into t9 values(4)\");\n+        st.executeUpdate(\"insert into t9 values(5)\");\n+        st.executeUpdate(\"insert into t9 values(6)\");\n+        st.executeUpdate(\"insert into t9 values(7)\");\n+        st.executeUpdate(\"insert into t9 values(8)\");\n+        st.executeUpdate(\"insert into t0 values(1)\");\n+        st.executeUpdate(\"insert into t1 values(2)\");\n+        st.executeUpdate(\"insert into t0 values(3)\");\n+        st.executeUpdate(\"insert into t1 values(3)\");\n+        st.executeUpdate(\"insert into t2 values(4)\");\n+        st.executeUpdate(\"insert into t0 values(5)\");\n+        st.executeUpdate(\"insert into t2 values(5)\");\n+        st.executeUpdate(\"insert into t1 values(6)\");\n+        st.executeUpdate(\"insert into t2 values(6)\");\n+        st.executeUpdate(\"insert into t0 values(7)\");\n+        st.executeUpdate(\"insert into t1 values(7)\");\n+        st.executeUpdate(\"insert into t2 values(7)\");\n+        st.executeUpdate(\"insert into t3 values(8)\");\n+        st.executeUpdate(\"insert into t0 values(9)\");\n+        st.executeUpdate(\"insert into t3 values(9)\");\n+        st.executeUpdate(\"insert into t1 values(10)\");\n+        st.executeUpdate(\"insert into t3 values(10)\");\n+        st.executeUpdate(\"insert into t0 values(11)\");\n+        st.executeUpdate(\"insert into t1 values(11)\");\n+        st.executeUpdate(\"insert into t3 values(11)\");\n+        st.executeUpdate(\"insert into t2 values(12)\");\n+        st.executeUpdate(\"insert into t3 values(12)\");\n+        st.executeUpdate(\"insert into t0 values(13)\");\n+        st.executeUpdate(\"insert into t2 values(13)\");\n+        st.executeUpdate(\"insert into t3 values(13)\");\n+        st.executeUpdate(\"insert into t1 values(14)\");\n+        st.executeUpdate(\"insert into t2 values(14)\");\n+        st.executeUpdate(\"insert into t3 values(14)\");\n+        st.executeUpdate(\"insert into t0 values(15)\");\n+        st.executeUpdate(\"insert into t1 values(15)\");\n+        st.executeUpdate(\"insert into t2 values(15)\");\n+        st.executeUpdate(\"insert into t3 values(15)\");\n+\n+        rs = st.executeQuery(\n+        \"SELECT t0.x0,                                                  \" +\n+        \"       t1.x1,                                                  \" +\n+        \"       t2.x2,                                                  \" +\n+        \"       t3.x3,                                                  \" +\n+        \"       t4.x4,                                                  \" +\n+        \"       t5.x5,                                                  \" +\n+        \"       t6.x6,                                                  \" +\n+        \"       t7.x7,                                                  \" +\n+        \"       t8.x8                                                   \" +\n+        \"FROM   (((t0                                                   \" +\n+        \"          INNER JOIN ((t1                                      \" +\n+        \"                       RIGHT OUTER JOIN (t2                    \" +\n+        \"                                         INNER JOIN t3         \" +\n+        \"                                           ON t2.x2 = t3.x3 )  \" +\n+        \"                         ON t1.x1 = t2.x2 )                    \" +\n+        \"                      LEFT OUTER JOIN (t4                      \" +\n+        \"                                       INNER JOIN t5           \" +\n+        \"                                         ON t4.x4 = t5.x5 )    \" +\n+        \"                        ON t1.x1 = t4.x4 )                     \" +\n+        \"            ON t0.x0 = t2.x2 )                                 \" +\n+        \"         LEFT OUTER JOIN (t6                                   \" +\n+        \"                          INNER JOIN t7                        \" +\n+        \"                            ON t6.x6 = t7.x7 )                 \" +\n+        \"           ON t1.x1 = t6.x6 )                                  \" +\n+        \"        INNER JOIN t8                                          \" +\n+        \"          ON t5.x5 = t8.x8 )                                   \");\n+\n+        JDBC.assertEmpty(rs);\n+\n+        rs = st.executeQuery(\n+        \"SELECT t0.x0,                                               \" +\n+        \"       t1.x1,                                               \" +\n+        \"       t2.x2,                                               \" +\n+        \"       t3.x3,                                               \" +\n+        \"       t4.x4,                                               \" +\n+        \"       t5.x5,                                               \" +\n+        \"       t6.x6,                                               \" +\n+        \"       t7.x7                                                \" +\n+        \"FROM   ((t0                                                 \" +\n+        \"         RIGHT OUTER JOIN t1                                \" +\n+        \"           ON t0.x0 = t1.x1 )                               \" +\n+        \"        INNER JOIN (((t2                                    \" +\n+        \"                      INNER JOIN (t3                        \" +\n+        \"                                  LEFT OUTER JOIN t4        \" +\n+        \"                                    ON t3.x3 = t4.x4 )      \" +\n+        \"                        ON t2.x2 = t3.x3 )                  \" +\n+        \"                     RIGHT OUTER JOIN t5                    \" +\n+        \"                       ON t2.x2 = t5.x5 )                   \" +\n+        \"                    LEFT OUTER JOIN (t6                     \" +\n+        \"                                     INNER JOIN t7          \" +\n+        \"                                       ON t6.x6 = t7.x7 )   \" +\n+        \"                      ON t4.x4 = t6.x6 )                    \" +\n+        \"          ON t0.x0 = t5.x5 )                                \");\n+\n+        expRS = new String [][]\n+        {\n+            {\"3\", \"3\", null, null, null, \"3\", null, null}\n+        };\n+\n+        JDBC.assertFullResultSet(rs, expRS);\n+\n+        rs = st.executeQuery(\n+        \"SELECT t0.x0,                                                \" +\n+        \"       t1.x1,                                                \" +\n+        \"       t2.x2,                                                \" +\n+        \"       t3.x3,                                                \" +\n+        \"       t4.x4,                                                \" +\n+        \"       t5.x5,                                                \" +\n+        \"       t6.x6,                                                \" +\n+        \"       t7.x7                                                 \" +\n+        \"FROM   ((((t0                                                \" +\n+        \"           LEFT OUTER JOIN t1                                \" +\n+        \"             ON t0.x0 = t1.x1 )                              \" +\n+        \"          RIGHT OUTER JOIN t2                                \" +\n+        \"            ON t0.x0 = t2.x2 )                               \" +\n+        \"         RIGHT OUTER JOIN t3                                 \" +\n+        \"           ON t0.x0 = t3.x3 )                                \" +\n+        \"        INNER JOIN ((t4                                      \" +\n+        \"                     INNER JOIN t5                           \" +\n+        \"                       ON t4.x4 = t5.x5 )                    \" +\n+        \"                    RIGHT OUTER JOIN (t6                     \" +\n+        \"                                      RIGHT OUTER JOIN t7    \" +\n+        \"                                        ON t6.x6 = t7.x7 )   \" +\n+        \"                      ON t4.x4 = t6.x6 )                     \" +\n+        \"          ON t1.x1 = t4.x4 )                                 \");\n+\n+        JDBC.assertEmpty(rs);\n+\n+        rs = st.executeQuery(\n+        \"SELECT t0.x0,                                    \" +\n+        \"       t1.x1,                                    \" +\n+        \"       t2.x2,                                    \" +\n+        \"       t3.x3,                                    \" +\n+        \"       t4.x4,                                    \" +\n+        \"       t5.x5                                     \" +\n+        \"FROM   (((t0                                     \" +\n+        \"          INNER JOIN t1                          \" +\n+        \"            ON t0.x0 = t1.x1 )                   \" +\n+        \"         RIGHT OUTER JOIN (t2                    \" +\n+        \"                           RIGHT OUTER JOIN t3   \" +\n+        \"                             ON t2.x2 = t3.x3 )  \" +\n+        \"           ON t0.x0 = t2.x2 )                    \" +\n+        \"        INNER JOIN (t4                           \" +\n+        \"                    LEFT OUTER JOIN t5           \" +\n+        \"                      ON t4.x4 = t5.x5 )         \" +\n+        \"          ON t1.x1 = t4.x4 )                     \");\n+\n+        JDBC.assertEmpty(rs);\n+\n+        rs = st.executeQuery(\n+        \"SELECT t0.x0,                                                    \" +\n+        \"       t1.x1,                                                    \" +\n+        \"       t2.x2,                                                    \" +\n+        \"       t3.x3,                                                    \" +\n+        \"       t4.x4,                                                    \" +\n+        \"       t5.x5,                                                    \" +\n+        \"       t6.x6                                                     \" +\n+        \"FROM   ((t0                                                      \" +\n+        \"         RIGHT OUTER JOIN                                        \" +\n+        \"                  (t1                                            \" +\n+        \"                   RIGHT OUTER JOIN (t2                          \" +\n+        \"                                     LEFT OUTER JOIN             \" +\n+        \"                                           (t3                   \" +\n+        \"                                            LEFT OUTER JOIN t4   \" +\n+        \"                                               ON t3.x3 = t4.x4  \" +\n+        \"                                            )                    \" +\n+        \"                                               ON t2.x2 = t3.x3 )\" +\n+        \"                      ON t1.x1 = t3.x3 )                         \" +\n+        \"           ON t0.x0 = t1.x1 )                                    \" +\n+        \"        LEFT OUTER JOIN (t5                                      \" +\n+        \"                         INNER JOIN t6                           \" +\n+        \"                           ON t5.x5 = t6.x6 )                    \" +\n+        \"          ON t2.x2 = t5.x5 )                                     \");\n+\n+        expRS = new String [][]\n+        {\n+            {null, null, \"4\", null, null, \"4\", \"4\"},\n+            {null, null, \"5\", null, null, null, null},\n+            {null, null, \"6\", null, null, null, null},\n+            {null, null, \"7\", null, null, null, null},\n+            {null, null, \"12\", \"12\", null, null, null},\n+            {null, null, \"13\", \"13\", null, null, null},\n+            {null, \"14\", \"14\", \"14\", null, null, null},\n+            {\"15\", \"15\", \"15\", \"15\", null, null, null},\n+        };\n+\n+        JDBC.assertFullResultSet(rs, expRS);\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/6d73220051432c0021794b984aac8d8441375ffa",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/dc562462f0ac666aa59d795917217bdea10e1474",
        "message": "DERBY-4306\n\nregisteredMbeans is null but we do not check for nullability before executing following\nif (registeredMbeans.remove(mbeanName) == null) \nwhich resulted in NPE. \n\nI have fixed the problem by checking for nullability first. registeredMbeans will be null if someone shuts down the engine first and then later on issues a command to shutdown the server. During the shutdown, registeredMbeans will be null and we should check for that nullability before accessing it.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@797147 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_155",
        "file": [
            {
                "sha": "5f343cadb669bf61af12c64a784bbc0216d8c139",
                "filename": "java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/6d73220051432c0021794b984aac8d8441375ffa/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java",
                "raw_url": "https://github.com/apache/derby/raw/6d73220051432c0021794b984aac8d8441375ffa/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java?ref=6d73220051432c0021794b984aac8d8441375ffa",
                "patch": "@@ -283,6 +283,10 @@ public void unregisterMBean(Object mbeanIdentifier)\n      */\n     private synchronized void unregisterMBean(final ObjectName mbeanName)\n     {\n+        //Has this service been shut down?\n+        if (registeredMbeans == null)\n+            return;\n+\n         if (registeredMbeans.remove(mbeanName) == null)\n             return;\n         "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/90701f7b6a169adf5db790cd2a32bd4b1c3bd436",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/f6abacbd48cd693d40779569fb0901697115b18b",
        "message": "DERBY-3718\n\nDerby has an internal datatype called REF. For REF datatypes, we associate Types.OTHER as it's type. This\n association of Types.OTHER for REF datatype is causing NPE when a row level trigger is fired in the test \ncase provided in DERBY-3718.\n\nThis NPE happens only in 10.4 and trunk. This is because starting 10.4(DERBY-2917 revision r619995),\nrather than saving the TypeId of the DataTypeDescriptor (in DataTypeDescriptor.writeExternal method), we\nrely on reconstructing TypeId (in readExternal) by using the Types.xxx associated with a type. This \napproach does not work for internal datatype REF, because we use Types.OTHER for REF datatypes. \nTypes.OTHER is not enough to know that the type to be constructed is REF.  \n\nSince we are dealing with the internal type which will be assigned a Types.OTHER type then we can't rely on Types.xxx to get us the correct data type. This fix relies on using the name of the data type rather \nthan it's Type.xxx to construct the correct TypeId. This is being accomplised by changing \nDataTypeDescriptor.readExternal to use this.getTypeName rather than this.getJDBCTypeId to construct the TypeId. In addition to this change, I had to change DataTypeDescriptor.getTypeName() to use TypeDescriptor to get the type name rather than TypeId. This is because TypeId is not available when DataTypeDescriptor.readExternal calls DataTypeDescriptor.getTypeName. This will match how we already implement DataTypeDescriptor.getJDBCTypeId(). Junit and old harness suite have run with no new regressions. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@670778 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_156",
        "file": [
            {
                "sha": "87ac06d5b597975e150468744bcdbb9689e7c775",
                "filename": "java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/90701f7b6a169adf5db790cd2a32bd4b1c3bd436/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java",
                "raw_url": "https://github.com/apache/derby/raw/90701f7b6a169adf5db790cd2a32bd4b1c3bd436/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java?ref=90701f7b6a169adf5db790cd2a32bd4b1c3bd436",
                "patch": "@@ -1036,7 +1036,7 @@ public DataValueDescriptor getNull() throws StandardException {\n \t */\n \tpublic\tString\t\tgetTypeName()\n \t{\n-\t\treturn typeId.getSQLTypeName();\n+\t\treturn typeDescriptor.getTypeName();\n \t}\n \n \t/**\n@@ -1753,7 +1753,7 @@ public void readExternal( ObjectInput in )\n \t{\n \t\ttypeDescriptor = (TypeDescriptorImpl) in.readObject();\n         \n-        typeId = TypeId.getBuiltInTypeId(this.getJDBCTypeId());\n+        typeId = TypeId.getBuiltInTypeId(this.getTypeName());\n         \n         collationDerivation = in.readInt();\n \t}"
            },
            {
                "sha": "0568fc69032ed8ce18a6407b28aa314358900917",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "status": "modified",
                "additions": 40,
                "deletions": 0,
                "changes": 40,
                "blob_url": "https://github.com/apache/derby/blob/90701f7b6a169adf5db790cd2a32bd4b1c3bd436/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "raw_url": "https://github.com/apache/derby/raw/90701f7b6a169adf5db790cd2a32bd4b1c3bd436/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java?ref=90701f7b6a169adf5db790cd2a32bd4b1c3bd436",
                "patch": "@@ -399,6 +399,46 @@ public static void logTriggerInfo(String info)\n     {\n         ((List) TRIGGER_INFO.get()).add(info);  \n     }\n+\n+    /** \n+     * Test for DERBY-3718 NPE when a trigger is fired\n+     * \n+     * @throws SQLException\n+     * @throws IOException\n+     */\n+    public void testNPEinTriggerFire() throws SQLException\n+    {\n+        Statement s = createStatement();\n+        \n+    \tString sql = \" CREATE TABLE TRADE(ID INT PRIMARY KEY GENERATED \"+\n+    \t\"BY DEFAULT AS IDENTITY (START WITH 1000), BUYID INT NOT NULL,\" +\n+    \t\"QTY FLOAT(2) NOT NULL)\";\n+        s.executeUpdate(sql);\n+\n+        sql = \"CREATE TABLE TOTAL(BUYID INT NOT NULL, TOTALQTY FLOAT(2) NOT NULL)\";\n+        s.executeUpdate(sql);\n+        \n+        sql = \"CREATE TRIGGER TRADE_INSERT AFTER INSERT ON TRADE REFERENCING \"+ \n+        \"NEW AS NEWROW FOR EACH ROW MODE DB2SQL UPDATE TOTAL SET TOTALQTY \"+\n+        \"= NEWROW.QTY WHERE BUYID = NEWROW.BUYID\"; \n+        s.executeUpdate(sql);\n+        \n+        s.executeUpdate(\"INSERT INTO TOTAL VALUES (1, 0)\");\n+        //Before DERBY-3718 was fixed, following would cause NPE in 10.4 and \n+        //trunk. This happened because starting 10.4, rather than saving the\n+        //TypeId of the DataTypeDescriptor (in writeExternal method), we rely\n+        //on reconstructing TypeId (in readExternal) by using the Types.xxx \n+        //information(DERBY-2917 revision r619995). This approach does not\n+        //work for internal datatype REF, because we use Types.OTHER for REF\n+        //datatypes. Types.OTHER is not enough to know that the type to be \n+        //constructed is REF. \n+        //To get around the problem, for reconstructing TypeId, we will\n+        //use the type name rather than Types.xxx. Since we have the correct\n+        //type name for internal datatype REF, we can successfully reconstruct\n+        //REF datatype. \n+        s.executeUpdate(\"INSERT INTO TRADE VALUES(1, 1, 10)\");\n+        commit();      \n+    }\n     \n     /** \n      * Test for DERBY-3238 trigger fails with IOException if triggering table has large lob."
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/8c26fb66b2a9359d8345ad6f7f8bcfdd9446144c",
        "message": "DERBY-688: Enhancements to XML functionality toward XPath/XQuery support\n\nThis patch was submitted by Army Brown (qozinx@gmail.com)\n\nAttaching a \"phase 7\" patch, d688_phase7_v1.patch, that does the following:\n\n  1 - Makes changes to catch all \"Throwable\" errors that might be\n      thrown by Xalan or JAXP, instead of just catching the exceptions\n      declared by the APIs. This is per the email thread here:\n\n      http://www.nabble.com/xalan-assertion-when-execution-a-xml-query...-tf2149830.html#a5953476\n\n      This allows Derby to continue working as normal if/when an\n      unexpected Xalan/JAXP error (such NPE or assertion failure)\n      occurs. In that case the statement itself will fail and the\n      error will be printed, but Derby will continue to work as\n      expected after the failure.\n\n  2 - Slight change so that, in the event of an unexpected Xalan\n      compilation error, the name of the operator that encountered\n      the error will be printed as part of Derby's message. Currently\n      the operator name isn't passed in and thus \"{0}\" shows up\n      in the error message, which is incorrect.\n\n  3 - Fixes a small bug in XML query execution code that was leading\n      to NPEs in Xalan. Namely, the current code passes a null argument\n      into Xalan where a non-null is expected (and required) for namespace\n      prefix resolution.\n\n  4 - Makes the first of two changes required to ensure Derby SQL/XML\n      support agrees with the specification. The two changes are\n      mentioned in my previous comments; this phase 7 patch addresses\n      the first one (insertion of a non-Document node into a Derby XML\n      column should not be allowed).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@434556 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_157",
        "file": [
            {
                "sha": "93f79cbe205e2e7addbf13a12986f506c12226de",
                "filename": "java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java",
                "status": "modified",
                "additions": 58,
                "deletions": 25,
                "changes": 83,
                "blob_url": "https://github.com/apache/derby/blob/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java",
                "raw_url": "https://github.com/apache/derby/raw/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java?ref=f67c2ee7faa7ad03610558c6483ee3ac8a315b4f",
                "patch": "@@ -56,6 +56,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.xpath.objects.XObject;\n import org.apache.xpath.objects.XNodeSet;\n \n+import org.apache.xml.utils.PrefixResolverDefault;\n+\n import org.apache.xalan.serialize.DOMSerializer;\n import org.apache.xalan.serialize.Serializer;\n import org.apache.xalan.serialize.SerializerFactory;\n@@ -203,12 +205,23 @@ public SqlXmlUtil() throws StandardException\n             // Just rethrow it.\n             throw se;\n \n-        } catch (Exception e) {\n-\n-            // Must be something caused by JAXP or Xalan; wrap it in a\n-            // StandardException and rethrow it.\n+        } catch (Throwable t) {\n+\n+            /* Must be something caused by JAXP or Xalan; wrap it in a\n+             * StandardException and rethrow it. Note: we catch \"Throwable\"\n+             * here to catch as many external errors as possible in order\n+             * to minimize the chance of an uncaught JAXP/Xalan error (such\n+             * as a NullPointerException) causing Derby to fail in a more\n+             * serious way.  In particular, an uncaught Java exception\n+             * like NPE can result in Derby throwing \"ERROR 40XT0: An\n+             * internal error was identified by RawStore module\" for all\n+             * statements on the connection after the failure--which we\n+             * clearly don't want.  If we catch the error and wrap it,\n+             * though, the statement will fail but Derby will continue to\n+             * run as normal.\n+             */ \n             throw StandardException.newException(\n-                SQLState.LANG_UNEXPECTED_XML_EXCEPTION, e);\n+                SQLState.LANG_UNEXPECTED_XML_EXCEPTION, t);\n \n         }\n \n@@ -225,21 +238,43 @@ public SqlXmlUtil() throws StandardException\n      *\n      * @param queryExpr The XPath expression to compile\n      */\n-    public void compileXQExpr(String queryExpr)\n+    public void compileXQExpr(String queryExpr, String opName)\n         throws StandardException\n     {\n         try {\n \n-            // The following XPath constructor compiles the expression\n-            // as part of the construction process.\n-            query = new XPath(queryExpr, null, null, XPath.SELECT);\n-\n-        } catch (TransformerException te) {\n-\n-            // Something went wrong during compilation of the\n-            // expression; wrap the error and re-throw it.\n+            /* The following XPath constructor compiles the expression\n+             * as part of the construction process.  We have to pass\n+             * in a PrefixResolver object in order to avoid NPEs when\n+             * invalid/unknown functions are used, so we just create\n+             * a dummy one, which means prefixes will not be resolved\n+             * in the query (Xalan will just throw an error if a prefix\n+             * is used).  In the future we may want to revisit this\n+             * to make it easier for users to query based on namespaces.\n+             */\n+            query = new XPath(queryExpr, null,\n+                new PrefixResolverDefault(dBuilder.newDocument()),\n+                XPath.SELECT);\n+\n+        } catch (Throwable te) {\n+\n+            /* Something went wrong during compilation of the\n+             * expression; wrap the error and re-throw it.\n+             * Note: we catch \"Throwable\" here to catch as many\n+             * Xalan-produced errors as possible in order to\n+             * minimize the chance of an uncaught Xalan error\n+             * (such as a NullPointerException) causing Derby\n+             * to fail in a more serious way.  In particular, an\n+             * uncaught Java exception like NPE can result in\n+             * Derby throwing \"ERROR 40XT0: An internal error was\n+             * identified by RawStore module\" for all statements on\n+             * the connection after the failure--which we clearly\n+             * don't want.  If we catch the error and wrap it,\n+             * though, the statement will fail but Derby will\n+             * continue to run as normal. \n+             */\n             throw StandardException.newException(\n-                SQLState.LANG_XML_QUERY_ERROR, te);\n+                SQLState.LANG_XML_QUERY_ERROR, te, opName);\n \n         }\n     }\n@@ -344,7 +379,7 @@ protected String serializeToString(ArrayList items)\n      *  results of the query\n      * @param resultXType The qualified XML type of the result\n      *  of evaluating the expression, if returnResults is true.\n-     *  If the result is a sequence of one Document or Element node\n+     *  If the result is a sequence of exactly one Document node\n      *  then this will be XML(DOCUMENT(ANY)); else it will be\n      *  XML(SEQUENCE).  If returnResults is false, this value\n      *  is ignored.\n@@ -438,16 +473,14 @@ else if (!(xOb instanceof XNodeSet))\n \n         nodeList = null;\n \n-        // Indicate what kind of XML result value we have.  If\n-        // we have a sequence of exactly one Element or Document\n-        // then it is XMLPARSE-able and so we consider it to be\n-        // of type XML_DOC_ANY (which means we can store it in\n-        // a Derby XML column).\n-        if ((numItems == 1) && ((itemRefs.get(0) instanceof Document)\n-            || (itemRefs.get(0) instanceof Element)))\n-        {\n+        /* Indicate what kind of XML result value we have.  If\n+         * we have a sequence of exactly one Document then it\n+         * is XMLPARSE-able and so we consider it to be of type\n+         * XML_DOC_ANY (which means we can store it in a Derby\n+         * XML column).\n+         */\n+        if ((numItems == 1) && (itemRefs.get(0) instanceof Document))\n             resultXType[0] = XML.XML_DOC_ANY;\n-        }\n         else\n             resultXType[0] = XML.XML_SEQUENCE;\n "
            },
            {
                "sha": "ee6db46a02cc90fac38afdf076a7e3f1bfd46c35",
                "filename": "java/engine/org/apache/derby/iapi/types/XML.java",
                "status": "modified",
                "additions": 49,
                "deletions": 16,
                "changes": 65,
                "blob_url": "https://github.com/apache/derby/blob/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/engine/org/apache/derby/iapi/types/XML.java",
                "raw_url": "https://github.com/apache/derby/raw/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/engine/org/apache/derby/iapi/types/XML.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/types/XML.java?ref=f67c2ee7faa7ad03610558c6483ee3ac8a315b4f",
                "patch": "@@ -555,11 +555,23 @@ public XMLDataValue XMLParse(String text, boolean preserveWS,\n                         \"but we shouldn't have made it this far\");\n             }\n \n-        } catch (Exception xe) {\n-        // Couldn't parse the XML document.  Throw a StandardException\n-        // with the parse exception nested in it.\n+        } catch (Throwable t) {\n+        /* Couldn't parse the XML document.  Throw a StandardException\n+         * with the parse exception (or other error) nested in it.\n+         * Note: we catch \"Throwable\" here to catch as many external\n+         * errors as possible in order to minimize the chance of an\n+         * uncaught JAXP/Xalan error (such as a NullPointerException)\n+         * causing Derby to fail in a more serious way.  In particular,\n+         * an uncaught Java exception like NPE can result in Derby\n+         * throwing \"ERROR 40XT0: An internal error was identified by\n+         * RawStore module\" for all statements on the connection after\n+         * the failure--which we clearly don't want.  If we catch the\n+         * error and wrap it, though, the statement will fail but Derby\n+         * will continue to run as normal.\n+         */ \n             throw StandardException.newException(\n-                SQLState.LANG_INVALID_XML_DOCUMENT, xe);\n+                SQLState.LANG_INVALID_XML_DOCUMENT, t);\n+\n         }\n \n         // If we get here, the text is valid XML so go ahead\n@@ -676,15 +688,26 @@ public BooleanDataValue XMLExists(SqlXmlUtil sqlxUtil)\n             return new SQLBoolean(null !=\n                 sqlxUtil.evalXQExpression(this, false, new int[1]));\n \n-        } catch (Exception xe) {\n-        // Failed somewhere during evaluation of the XML query expression;\n-        // turn error into a StandardException and throw it.\n-            if (xe instanceof StandardException)\n-                throw (StandardException)xe;\n-            else {\n-                throw StandardException.newException(\n-                    SQLState.LANG_XML_QUERY_ERROR, xe, \"XMLEXISTS\");\n-            }\n+        } catch (StandardException se) {\n+\n+            // Just re-throw it.\n+            throw se;\n+\n+        } catch (Throwable xe) {\n+        /* Failed somewhere during evaluation of the XML query expression;\n+         * turn error into a StandardException and throw it.  Note: we\n+         * catch \"Throwable\" here to catch as many Xalan-produced errors\n+         * as possible in order to minimize the chance of an uncaught Xalan\n+         * error (such as a NullPointerException) causing Derby to fail in\n+         * a more serious way.  In particular, an uncaught Java exception\n+         * like NPE can result in Derby throwing \"ERROR 40XT0: An internal\n+         * error was identified by RawStore module\" for all statements on\n+         * the connection after the failure--which we clearly don't want.  \n+         * If we catch the error and wrap it, though, the statement will\n+         * fail but Derby will continue to run as normal. \n+         */\n+            throw StandardException.newException(\n+                SQLState.LANG_XML_QUERY_ERROR, xe, \"XMLEXISTS\");\n         }\n     }\n \n@@ -744,9 +767,19 @@ public XMLDataValue XMLQuery(XMLDataValue result,\n             // Just re-throw it.\n             throw se;\n \n-        } catch (Exception xe) {\n-        // Failed somewhere during evaluation of the XML query expression;\n-        // turn error into a StandardException and throw it.\n+        } catch (Throwable xe) {\n+        /* Failed somewhere during evaluation of the XML query expression;\n+         * turn error into a StandardException and throw it.  Note: we\n+         * catch \"Throwable\" here to catch as many Xalan-produced errors\n+         * as possible in order to minimize the chance of an uncaught Xalan\n+         * error (such as a NullPointerException) causing Derby to fail in\n+         * a more serious way.  In particular, an uncaught Java exception\n+         * like NPE can result in Derby throwing \"ERROR 40XT0: An internal\n+         * error was identified by RawStore module\" for all statements on\n+         * the connection after the failure--which we clearly don't want.  \n+         * If we catch the error and wrap it, though, the statement will\n+         * fail but Derby will continue to run as normal. \n+         */\n             throw StandardException.newException(\n                 SQLState.LANG_XML_QUERY_ERROR, xe, \"XMLQUERY\");\n         }"
            },
            {
                "sha": "351c13ca5a082502ea2822a400c606833e1d6ed7",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java",
                "raw_url": "https://github.com/apache/derby/raw/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java?ref=f67c2ee7faa7ad03610558c6483ee3ac8a315b4f",
                "patch": "@@ -367,7 +367,8 @@ public ValueNode bindXMLQuery()\n         // compile the query expression.\n             sqlxUtil = new SqlXmlUtil();\n             sqlxUtil.compileXQExpr(\n-                ((CharConstantNode)leftOperand).getString());\n+                ((CharConstantNode)leftOperand).getString(),\n+                (operatorType == XMLEXISTS_OP ? \"XMLEXISTS\" : \"XMLQUERY\"));\n         }\n \n         // Right operand must be an XML data value.  NOTE: This"
            },
            {
                "sha": "fbacaa5ed13e15806ca114b9aeaf9ee3d1cd25d4",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj",
                "raw_url": "https://github.com/apache/derby/raw/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj?ref=f67c2ee7faa7ad03610558c6483ee3ac8a315b4f",
                "patch": "@@ -7098,9 +7098,9 @@ short\n  * operator uses and the result is always a Document node).\n  * Internally this means that we can only store a sequence if it\n  * contains exactly one org.w3c.dom.Node that is an instance of\n- * either org.w3c.dom.Document or org.w3c.dom.Element.  If the\n- * result of an XMLQUERY operation does not fit this criteria then\n- * it will *not* be storable into Derby XML columns.\n+ * org.w3c.dom.Document.  If the result of an XMLQUERY operation\n+ * does not fit this criteria then it will *not* be storable into\n+ * Derby XML columns.\n  */\n short\n \txqReturningClause() throws StandardException :"
            },
            {
                "sha": "7b6cd2be3246a8bdf2c0fc80b6475cfbddc54433",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/xml_general.out",
                "status": "modified",
                "additions": 37,
                "deletions": 30,
                "changes": 67,
                "blob_url": "https://github.com/apache/derby/blob/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/xml_general.out",
                "raw_url": "https://github.com/apache/derby/raw/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/xml_general.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/xml_general.out?ref=f67c2ee7faa7ad03610558c6483ee3ac8a315b4f",
                "patch": "@@ -632,6 +632,16 @@ ij> select i, xmlquery('//*' passing by ref 'hello' empty on empty) from t1;\n ERROR 42Z77: Context item must have type 'XML'; 'CHAR' is not allowed.\n ij> select i, xmlquery('//*' passing by ref cast ('hello' as clob) empty on empty) from t1;\n ERROR 42Z77: Context item must have type 'XML'; 'CLOB' is not allowed.\n+ij> -- This should fail because the function is not recognized by Xalan.\n+----- The failure should be an error from Xalan saying what the problem\n+----- is; it should *NOT* be a NPE, which is what we were seeing before\n+----- DERBY-688 was completed.\n+select i,\n+  xmlserialize(\n+    xmlquery('data(//@*)' passing by ref x returning sequence empty on empty)\n+  as char(70))\n+from t1;\n+ERROR 10000: Encountered error while evaluating XML query expression for XMLQUERY operator; see next exception for details. SQLSTATE: XJ001: Java exception: 'Could not find function: data: javax.xml.transform.TransformerException'.\n ij> -- These should all succeed.  Since it's Xalan that's actually doing\n ----- the query evaluation we don't need to test very many queries; we\n ----- just want to make sure we get the correct results when there is\n@@ -790,8 +800,7 @@ as char(30));\n -----\n <lets> try this </lets>       \n ij> -- Check insertion of XMLQUERY result into a table.  Should only allow\n------ results that constitute a valid DOCUMENT node (i.e. that can be parsed\n------ by the XMLPARSE operator).\n+----- results that are a sequence of exactly one Document node.\n insert into t1 values (\n   9,\n   xmlparse(document '<here><is><my height=\"4.4\">attribute</my></is></here>' preserve whitespace)\n@@ -813,9 +822,9 @@ I |2\n 0 |<ay>caramba</ay>                                                           \n 0 |<there><goes><my weight=\"180\">attribute</my></goes></there>                \n ij> -- These should all fail because the result of the XMLQUERY op is\n------ not a valid document (it's either an empty sequence, an attribute,\n------ some undefined value, or a sequence with more than one item in\n------ it.\n+----- not a valid document (it's either an empty sequence, a node that is\n+----- not a Document node, some undefined value, or a sequence with more\n+----- than one item in it).\n insert into t2 (i, x) values (\n   20, \n   (select\n@@ -856,35 +865,35 @@ ij> insert into t2 (i, x) values (\n   )\n );\n ERROR 2200L: Values assigned to XML columns must be well-formed DOCUMENT nodes.\n-ij> -- These should succeed.\n-insert into t2 (i, x) values (\n+ij> insert into t2 (i, x) values (\n   25,\n   (select\n-    xmlquery('.' passing by ref x returning sequence empty on empty)\n+    xmlquery('//is' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n-1 row inserted/updated/deleted\n+ERROR 2200L: Values assigned to XML columns must be well-formed DOCUMENT nodes.\n ij> insert into t2 (i, x) values (\n   26,\n   (select\n-    xmlquery('//is' passing by ref x returning sequence empty on empty)\n+    xmlquery('//*[@*]' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n-1 row inserted/updated/deleted\n-ij> insert into t2 (i, x) values (\n+ERROR 2200L: Values assigned to XML columns must be well-formed DOCUMENT nodes.\n+ij> -- These should succeed.\n+insert into t2 (i, x) values (\n   27,\n   (select\n-    xmlquery('/here' passing by ref x returning sequence empty on empty)\n+    xmlquery('.' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n 1 row inserted/updated/deleted\n ij> insert into t2 (i, x) values (\n   28,\n   (select\n-    xmlquery('//*[@*]' passing by ref x returning sequence empty on empty)\n+    xmlquery('/here/..' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n@@ -894,10 +903,8 @@ select i, xmlserialize(x as char(75)) from t2;\n I |2                                                                          \n -----\n 1 |<should> work as planned </should>                                         \n-25 |<here><is><my height=\"4.4\">attribute</my></is></here>                      \n-26 |<is><my height=\"4.4\">attribute</my></is>                                   \n 27 |<here><is><my height=\"4.4\">attribute</my></is></here>                      \n-28 |<my height=\"4.4\">attribute</my>                                            \n+28 |<here><is><my height=\"4.4\">attribute</my></is></here>                      \n ij> -- Next two should _both_ succeed because there's no row with i = 100\n ----- in t1, thus the SELECT will return null and XMLQuery operator should\n ----- never get executed.  x will be NULL in these cases.\n@@ -938,7 +945,7 @@ where i = 29;\n 1 row inserted/updated/deleted\n ij> update t3\n   set x = \n-    xmlquery('//*[@height]' passing by ref\n+    xmlquery('self::node()[//@height]' passing by ref\n       (select\n         xmlquery('.' passing by ref x empty on empty)\n         from t1\n@@ -995,7 +1002,7 @@ I |2\n 0 |<ay>caramba</ay>                                                           \n 0 |<there><goes><my weight=\"180\">attribute</my></goes></there>                \n 29 |<none><here/></none>                                                       \n-30 |<my height=\"4.4\">attribute</my>                                            \n+30 |<here><is><my height=\"4.4\">attribute</my></is></here>                      \n ij> -- Pass results of an XMLQUERY op into another XMLQUERY op.\n ----- Should work so long as results of the first op constitute\n ----- a valid document.\n@@ -1013,7 +1020,7 @@ ERROR X0Y79: Statement.executeUpdate() cannot be called with a statement that re\n ij> select i,\n   xmlserialize(\n     xmlquery('.' passing by ref\n-      xmlquery('//lets/@*' passing by ref\n+      xmlquery('//lets' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -1022,7 +1029,7 @@ from t1 where i > 5;\n ERROR 2200V: Invalid context item for XMLQUERY operator; context items must be well-formed DOCUMENT nodes.\n ij> select i,\n   xmlexists('.' passing by ref\n-    xmlquery('//lets/@*' passing by ref\n+    xmlquery('/okay' passing by ref\n       xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n     empty on empty)\n   )\n@@ -1032,7 +1039,7 @@ ij> -- Should succeed but result is empty sequence.\n select i,\n   xmlserialize(\n     xmlquery('/not' passing by ref\n-      xmlquery('//lets' passing by ref\n+      xmlquery('.' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -1047,8 +1054,8 @@ I |2\n ij> -- Should succeed with various results.\n select i,\n   xmlserialize(\n-    xmlquery('.' passing by ref\n-      xmlquery('//lets' passing by ref\n+    xmlquery('//lets' passing by ref\n+      xmlquery('.' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -1062,8 +1069,8 @@ I |2\n 9 |<lets boki=\"inigo\"/>                                                                                \n ij> select i,\n   xmlserialize(\n-    xmlquery('//@boki' passing by ref\n-      xmlquery('/okay' passing by ref\n+    xmlquery('string(//@boki)' passing by ref\n+      xmlquery('/okay/..' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -1077,17 +1084,17 @@ I |2\n 9 |inigo                                                                                               \n ij> select i,\n   xmlserialize(\n-    xmlquery('/masted/text()' passing by ref\n-      xmlquery('//masted' passing by ref x empty on empty)\n+    xmlquery('/half/masted/text()' passing by ref\n+      xmlquery('.' passing by ref x empty on empty)\n     empty on empty)\n   as char(100))\n from t1 where i = 6;\n I |2                                                                                                   \n -----\n 6 | bass                                                                                               \n ij> select i,\n-  xmlexists('/masted/text()' passing by ref\n-    xmlquery('//masted' passing by ref x empty on empty)\n+  xmlexists('/half/masted/text()' passing by ref\n+    xmlquery('.' passing by ref x empty on empty)\n   )\n from t1 where i = 6;\n I |2     "
            },
            {
                "sha": "47a9cbef0f03358222b5fd45dc6dac7b2cdc7877",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/xml_general.out",
                "status": "modified",
                "additions": 37,
                "deletions": 30,
                "changes": 67,
                "blob_url": "https://github.com/apache/derby/blob/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/xml_general.out",
                "raw_url": "https://github.com/apache/derby/raw/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/xml_general.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/xml_general.out?ref=f67c2ee7faa7ad03610558c6483ee3ac8a315b4f",
                "patch": "@@ -633,6 +633,16 @@ ij> select i, xmlquery('//*' passing by ref 'hello' empty on empty) from t1;\n ERROR 42Z77: Context item must have type 'XML'; 'CHAR' is not allowed.\n ij> select i, xmlquery('//*' passing by ref cast ('hello' as clob) empty on empty) from t1;\n ERROR 42Z77: Context item must have type 'XML'; 'CLOB' is not allowed.\n+ij> -- This should fail because the function is not recognized by Xalan.\n+----- The failure should be an error from Xalan saying what the problem\n+----- is; it should *NOT* be a NPE, which is what we were seeing before\n+----- DERBY-688 was completed.\n+select i,\n+  xmlserialize(\n+    xmlquery('data(//@*)' passing by ref x returning sequence empty on empty)\n+  as char(70))\n+from t1;\n+ERROR 10000: Encountered error while evaluating XML query expression for XMLQUERY operator; see next exception for details. SQLSTATE: XJ001: Java exception: 'Could not find function: data: javax.xml.transform.TransformerException'.\n ij> -- These should all succeed.  Since it's Xalan that's actually doing\n ----- the query evaluation we don't need to test very many queries; we\n ----- just want to make sure we get the correct results when there is\n@@ -791,8 +801,7 @@ as char(30));\n -----\n <lets> try this </lets>       \n ij> -- Check insertion of XMLQUERY result into a table.  Should only allow\n------ results that constitute a valid DOCUMENT node (i.e. that can be parsed\n------ by the XMLPARSE operator).\n+----- results that are a sequence of exactly one Document node.\n insert into t1 values (\n   9,\n   xmlparse(document '<here><is><my height=\"4.4\">attribute</my></is></here>' preserve whitespace)\n@@ -814,9 +823,9 @@ I |2\n 0 |<ay>caramba</ay>                                                           \n 0 |<there><goes><my weight=\"180\">attribute</my></goes></there>                \n ij> -- These should all fail because the result of the XMLQUERY op is\n------ not a valid document (it's either an empty sequence, an attribute,\n------ some undefined value, or a sequence with more than one item in\n------ it.\n+----- not a valid document (it's either an empty sequence, a node that is\n+----- not a Document node, some undefined value, or a sequence with more\n+----- than one item in it).\n insert into t2 (i, x) values (\n   20, \n   (select\n@@ -857,35 +866,35 @@ ij> insert into t2 (i, x) values (\n   )\n );\n ERROR 2200L: Values assigned to XML columns must be well-formed DOCUMENT nodes.\n-ij> -- These should succeed.\n-insert into t2 (i, x) values (\n+ij> insert into t2 (i, x) values (\n   25,\n   (select\n-    xmlquery('.' passing by ref x returning sequence empty on empty)\n+    xmlquery('//is' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n-1 row inserted/updated/deleted\n+ERROR 2200L: Values assigned to XML columns must be well-formed DOCUMENT nodes.\n ij> insert into t2 (i, x) values (\n   26,\n   (select\n-    xmlquery('//is' passing by ref x returning sequence empty on empty)\n+    xmlquery('//*[@*]' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n-1 row inserted/updated/deleted\n-ij> insert into t2 (i, x) values (\n+ERROR 2200L: Values assigned to XML columns must be well-formed DOCUMENT nodes.\n+ij> -- These should succeed.\n+insert into t2 (i, x) values (\n   27,\n   (select\n-    xmlquery('/here' passing by ref x returning sequence empty on empty)\n+    xmlquery('.' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n 1 row inserted/updated/deleted\n ij> insert into t2 (i, x) values (\n   28,\n   (select\n-    xmlquery('//*[@*]' passing by ref x returning sequence empty on empty)\n+    xmlquery('/here/..' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n@@ -895,10 +904,8 @@ select i, xmlserialize(x as char(75)) from t2;\n I |2                                                                          \n -----\n 1 |<should> work as planned </should>                                         \n-25 |<here><is><my height=\"4.4\">attribute</my></is></here>                      \n-26 |<is><my height=\"4.4\">attribute</my></is>                                   \n 27 |<here><is><my height=\"4.4\">attribute</my></is></here>                      \n-28 |<my height=\"4.4\">attribute</my>                                            \n+28 |<here><is><my height=\"4.4\">attribute</my></is></here>                      \n ij> -- Next two should _both_ succeed because there's no row with i = 100\n ----- in t1, thus the SELECT will return null and XMLQuery operator should\n ----- never get executed.  x will be NULL in these cases.\n@@ -939,7 +946,7 @@ where i = 29;\n 1 row inserted/updated/deleted\n ij> update t3\n   set x = \n-    xmlquery('//*[@height]' passing by ref\n+    xmlquery('self::node()[//@height]' passing by ref\n       (select\n         xmlquery('.' passing by ref x empty on empty)\n         from t1\n@@ -996,7 +1003,7 @@ I |2\n 0 |<ay>caramba</ay>                                                           \n 0 |<there><goes><my weight=\"180\">attribute</my></goes></there>                \n 29 |<none><here/></none>                                                       \n-30 |<my height=\"4.4\">attribute</my>                                            \n+30 |<here><is><my height=\"4.4\">attribute</my></is></here>                      \n ij> -- Pass results of an XMLQUERY op into another XMLQUERY op.\n ----- Should work so long as results of the first op constitute\n ----- a valid document.\n@@ -1014,7 +1021,7 @@ ERROR 2200V: Invalid context item for XMLQUERY operator; context items must be w\n ij> select i,\n   xmlserialize(\n     xmlquery('.' passing by ref\n-      xmlquery('//lets/@*' passing by ref\n+      xmlquery('//lets' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -1023,7 +1030,7 @@ from t1 where i > 5;\n ERROR 2200V: Invalid context item for XMLQUERY operator; context items must be well-formed DOCUMENT nodes.\n ij> select i,\n   xmlexists('.' passing by ref\n-    xmlquery('//lets/@*' passing by ref\n+    xmlquery('/okay' passing by ref\n       xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n     empty on empty)\n   )\n@@ -1033,7 +1040,7 @@ ij> -- Should succeed but result is empty sequence.\n select i,\n   xmlserialize(\n     xmlquery('/not' passing by ref\n-      xmlquery('//lets' passing by ref\n+      xmlquery('.' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -1048,8 +1055,8 @@ I |2\n ij> -- Should succeed with various results.\n select i,\n   xmlserialize(\n-    xmlquery('.' passing by ref\n-      xmlquery('//lets' passing by ref\n+    xmlquery('//lets' passing by ref\n+      xmlquery('.' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -1063,8 +1070,8 @@ I |2\n 9 |<lets boki=\"inigo\"/>                                                                                \n ij> select i,\n   xmlserialize(\n-    xmlquery('//@boki' passing by ref\n-      xmlquery('/okay' passing by ref\n+    xmlquery('string(//@boki)' passing by ref\n+      xmlquery('/okay/..' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -1078,17 +1085,17 @@ I |2\n 9 |inigo                                                                                               \n ij> select i,\n   xmlserialize(\n-    xmlquery('/masted/text()' passing by ref\n-      xmlquery('//masted' passing by ref x empty on empty)\n+    xmlquery('/half/masted/text()' passing by ref\n+      xmlquery('.' passing by ref x empty on empty)\n     empty on empty)\n   as char(100))\n from t1 where i = 6;\n I |2                                                                                                   \n -----\n 6 | bass                                                                                               \n ij> select i,\n-  xmlexists('/masted/text()' passing by ref\n-    xmlquery('//masted' passing by ref x empty on empty)\n+  xmlexists('/half/masted/text()' passing by ref\n+    xmlquery('.' passing by ref x empty on empty)\n   )\n from t1 where i = 6;\n I |2     "
            },
            {
                "sha": "4b2757d5ce7d05a36f835cba639a9b42333ce520",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/xml_general.out",
                "status": "modified",
                "additions": 38,
                "deletions": 30,
                "changes": 68,
                "blob_url": "https://github.com/apache/derby/blob/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/testing/org/apache/derbyTesting/functionTests/master/xml_general.out",
                "raw_url": "https://github.com/apache/derby/raw/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/testing/org/apache/derbyTesting/functionTests/master/xml_general.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/xml_general.out?ref=f67c2ee7faa7ad03610558c6483ee3ac8a315b4f",
                "patch": "@@ -651,6 +651,17 @@ ij> select i, xmlquery('//*' passing by ref 'hello' empty on empty) from t1;\n ERROR 42Z77: Context item must have type 'XML'; 'CHAR' is not allowed.\n ij> select i, xmlquery('//*' passing by ref cast ('hello' as clob) empty on empty) from t1;\n ERROR 42Z77: Context item must have type 'XML'; 'CLOB' is not allowed.\n+ij> -- This should fail because the function is not recognized by Xalan.\n+-- The failure should be an error from Xalan saying what the problem\n+-- is; it should *NOT* be a NPE, which is what we were seeing before\n+-- DERBY-688 was completed.\n+select i,\n+  xmlserialize(\n+    xmlquery('data(//@*)' passing by ref x returning sequence empty on empty)\n+  as char(70))\n+from t1;\n+ERROR 10000: Encountered error while evaluating XML query expression for XMLQUERY operator; see next exception for details.\n+ERROR XJ001: Java exception: 'Could not find function: data: javax.xml.transform.TransformerException'.\n ij> -- These should all succeed.  Since it's Xalan that's actually doing\n -- the query evaluation we don't need to test very many queries; we\n -- just want to make sure we get the correct results when there is\n@@ -809,8 +820,7 @@ as char(30));\n ------------------------------\n <lets> try this </lets>       \n ij> -- Check insertion of XMLQUERY result into a table.  Should only allow\n--- results that constitute a valid DOCUMENT node (i.e. that can be parsed\n--- by the XMLPARSE operator).\n+-- results that are a sequence of exactly one Document node.\n insert into t1 values (\n   9,\n   xmlparse(document '<here><is><my height=\"4.4\">attribute</my></is></here>' preserve whitespace)\n@@ -832,9 +842,9 @@ I          |2\n 0          |<ay>caramba</ay>                                                           \n 0          |<there><goes><my weight=\"180\">attribute</my></goes></there>                \n ij> -- These should all fail because the result of the XMLQUERY op is\n--- not a valid document (it's either an empty sequence, an attribute,\n--- some undefined value, or a sequence with more than one item in\n--- it.\n+-- not a valid document (it's either an empty sequence, a node that is\n+-- not a Document node, some undefined value, or a sequence with more\n+-- than one item in it).\n insert into t2 (i, x) values (\n   20, \n   (select\n@@ -875,35 +885,35 @@ ij> insert into t2 (i, x) values (\n   )\n );\n ERROR 2200L: Values assigned to XML columns must be well-formed DOCUMENT nodes.\n-ij> -- These should succeed.\n-insert into t2 (i, x) values (\n+ij> insert into t2 (i, x) values (\n   25,\n   (select\n-    xmlquery('.' passing by ref x returning sequence empty on empty)\n+    xmlquery('//is' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n-1 row inserted/updated/deleted\n+ERROR 2200L: Values assigned to XML columns must be well-formed DOCUMENT nodes.\n ij> insert into t2 (i, x) values (\n   26,\n   (select\n-    xmlquery('//is' passing by ref x returning sequence empty on empty)\n+    xmlquery('//*[@*]' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n-1 row inserted/updated/deleted\n-ij> insert into t2 (i, x) values (\n+ERROR 2200L: Values assigned to XML columns must be well-formed DOCUMENT nodes.\n+ij> -- These should succeed.\n+insert into t2 (i, x) values (\n   27,\n   (select\n-    xmlquery('/here' passing by ref x returning sequence empty on empty)\n+    xmlquery('.' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n 1 row inserted/updated/deleted\n ij> insert into t2 (i, x) values (\n   28,\n   (select\n-    xmlquery('//*[@*]' passing by ref x returning sequence empty on empty)\n+    xmlquery('/here/..' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n@@ -913,10 +923,8 @@ select i, xmlserialize(x as char(75)) from t2;\n I          |2                                                                          \n ---------------------------------------------------------------------------------------\n 1          |<should> work as planned </should>                                         \n-25         |<here><is><my height=\"4.4\">attribute</my></is></here>                      \n-26         |<is><my height=\"4.4\">attribute</my></is>                                   \n 27         |<here><is><my height=\"4.4\">attribute</my></is></here>                      \n-28         |<my height=\"4.4\">attribute</my>                                            \n+28         |<here><is><my height=\"4.4\">attribute</my></is></here>                      \n ij> -- Next two should _both_ succeed because there's no row with i = 100\n -- in t1, thus the SELECT will return null and XMLQuery operator should\n -- never get executed.  x will be NULL in these cases.\n@@ -957,7 +965,7 @@ where i = 29;\n 1 row inserted/updated/deleted\n ij> update t3\n   set x = \n-    xmlquery('//*[@height]' passing by ref\n+    xmlquery('self::node()[//@height]' passing by ref\n       (select\n         xmlquery('.' passing by ref x empty on empty)\n         from t1\n@@ -1014,7 +1022,7 @@ I          |2\n 0          |<ay>caramba</ay>                                                           \n 0          |<there><goes><my weight=\"180\">attribute</my></goes></there>                \n 29         |<none><here/></none>                                                       \n-30         |<my height=\"4.4\">attribute</my>                                            \n+30         |<here><is><my height=\"4.4\">attribute</my></is></here>                      \n ij> -- Pass results of an XMLQUERY op into another XMLQUERY op.\n -- Should work so long as results of the first op constitute\n -- a valid document.\n@@ -1034,7 +1042,7 @@ ERROR 2200V: Invalid context item for XMLQUERY operator; context items must be w\n ij> select i,\n   xmlserialize(\n     xmlquery('.' passing by ref\n-      xmlquery('//lets/@*' passing by ref\n+      xmlquery('//lets' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -1045,7 +1053,7 @@ I          |2\n ERROR 2200V: Invalid context item for XMLQUERY operator; context items must be well-formed DOCUMENT nodes.\n ij> select i,\n   xmlexists('.' passing by ref\n-    xmlquery('//lets/@*' passing by ref\n+    xmlquery('/okay' passing by ref\n       xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n     empty on empty)\n   )\n@@ -1057,7 +1065,7 @@ ij> -- Should succeed but result is empty sequence.\n select i,\n   xmlserialize(\n     xmlquery('/not' passing by ref\n-      xmlquery('//lets' passing by ref\n+      xmlquery('.' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -1072,8 +1080,8 @@ I          |2\n ij> -- Should succeed with various results.\n select i,\n   xmlserialize(\n-    xmlquery('.' passing by ref\n-      xmlquery('//lets' passing by ref\n+    xmlquery('//lets' passing by ref\n+      xmlquery('.' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -1087,8 +1095,8 @@ I          |2\n 9          |<lets boki=\"inigo\"/>                                                                                \n ij> select i,\n   xmlserialize(\n-    xmlquery('//@boki' passing by ref\n-      xmlquery('/okay' passing by ref\n+    xmlquery('string(//@boki)' passing by ref\n+      xmlquery('/okay/..' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -1102,17 +1110,17 @@ I          |2\n 9          |inigo                                                                                               \n ij> select i,\n   xmlserialize(\n-    xmlquery('/masted/text()' passing by ref\n-      xmlquery('//masted' passing by ref x empty on empty)\n+    xmlquery('/half/masted/text()' passing by ref\n+      xmlquery('.' passing by ref x empty on empty)\n     empty on empty)\n   as char(100))\n from t1 where i = 6;\n I          |2                                                                                                   \n ----------------------------------------------------------------------------------------------------------------\n 6          | bass                                                                                               \n ij> select i,\n-  xmlexists('/masted/text()' passing by ref\n-    xmlquery('//masted' passing by ref x empty on empty)\n+  xmlexists('/half/masted/text()' passing by ref\n+    xmlquery('.' passing by ref x empty on empty)\n   )\n from t1 where i = 6;\n I          |2    "
            },
            {
                "sha": "181c574695b01bd5cf707f12c8227471f243dfb7",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/xml_general.sql",
                "status": "modified",
                "additions": 32,
                "deletions": 23,
                "changes": 55,
                "blob_url": "https://github.com/apache/derby/blob/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/xml_general.sql",
                "raw_url": "https://github.com/apache/derby/raw/f67c2ee7faa7ad03610558c6483ee3ac8a315b4f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/xml_general.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/xml_general.sql?ref=f67c2ee7faa7ad03610558c6483ee3ac8a315b4f",
                "patch": "@@ -265,6 +265,16 @@ select i, xmlquery('//*' passing by ref i empty on empty) from t1;\n select i, xmlquery('//*' passing by ref 'hello' empty on empty) from t1;\n select i, xmlquery('//*' passing by ref cast ('hello' as clob) empty on empty) from t1;\n \n+-- This should fail because the function is not recognized by Xalan.\n+-- The failure should be an error from Xalan saying what the problem\n+-- is; it should *NOT* be a NPE, which is what we were seeing before\n+-- DERBY-688 was completed.\n+select i,\n+  xmlserialize(\n+    xmlquery('data(//@*)' passing by ref x returning sequence empty on empty)\n+  as char(70))\n+from t1;\n+\n -- These should all succeed.  Since it's Xalan that's actually doing\n -- the query evaluation we don't need to test very many queries; we\n -- just want to make sure we get the correct results when there is\n@@ -340,8 +350,7 @@ values xmlserialize(\n as char(30));\n \n -- Check insertion of XMLQUERY result into a table.  Should only allow\n--- results that constitute a valid DOCUMENT node (i.e. that can be parsed\n--- by the XMLPARSE operator).\n+-- results that are a sequence of exactly one Document node.\n \n insert into t1 values (\n   9,\n@@ -359,9 +368,9 @@ select i, xmlserialize(x as char(75)) from t2;\n select i, xmlserialize(x as char(75)) from t3;\n \n -- These should all fail because the result of the XMLQUERY op is\n--- not a valid document (it's either an empty sequence, an attribute,\n--- some undefined value, or a sequence with more than one item in\n--- it.\n+-- not a valid document (it's either an empty sequence, a node that is\n+-- not a Document node, some undefined value, or a sequence with more\n+-- than one item in it).\n \n insert into t2 (i, x) values (\n   20, \n@@ -403,36 +412,36 @@ insert into t2 (i, x) values (\n   )\n );\n \n--- These should succeed.\n-\n insert into t2 (i, x) values (\n   25,\n   (select\n-    xmlquery('.' passing by ref x returning sequence empty on empty)\n+    xmlquery('//is' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n \n insert into t2 (i, x) values (\n   26,\n   (select\n-    xmlquery('//is' passing by ref x returning sequence empty on empty)\n+    xmlquery('//*[@*]' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n \n+-- These should succeed.\n+\n insert into t2 (i, x) values (\n   27,\n   (select\n-    xmlquery('/here' passing by ref x returning sequence empty on empty)\n+    xmlquery('.' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n \n insert into t2 (i, x) values (\n   28,\n   (select\n-    xmlquery('//*[@*]' passing by ref x returning sequence empty on empty)\n+    xmlquery('/here/..' passing by ref x returning sequence empty on empty)\n     from t1 where i = 9\n   )\n );\n@@ -478,7 +487,7 @@ where i = 29;\n \n update t3\n   set x = \n-    xmlquery('//*[@height]' passing by ref\n+    xmlquery('self::node()[//@height]' passing by ref\n       (select\n         xmlquery('.' passing by ref x empty on empty)\n         from t1\n@@ -551,7 +560,7 @@ from t1 where i > 5;\n select i,\n   xmlserialize(\n     xmlquery('.' passing by ref\n-      xmlquery('//lets/@*' passing by ref\n+      xmlquery('//lets' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -560,7 +569,7 @@ from t1 where i > 5;\n \n select i,\n   xmlexists('.' passing by ref\n-    xmlquery('//lets/@*' passing by ref\n+    xmlquery('/okay' passing by ref\n       xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n     empty on empty)\n   )\n@@ -571,7 +580,7 @@ from t1 where i > 5;\n select i,\n   xmlserialize(\n     xmlquery('/not' passing by ref\n-      xmlquery('//lets' passing by ref\n+      xmlquery('.' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -582,8 +591,8 @@ from t1 where i > 5;\n \n select i,\n   xmlserialize(\n-    xmlquery('.' passing by ref\n-      xmlquery('//lets' passing by ref\n+    xmlquery('//lets' passing by ref\n+      xmlquery('.' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -592,8 +601,8 @@ from t1 where i > 5;\n \n select i,\n   xmlserialize(\n-    xmlquery('//@boki' passing by ref\n-      xmlquery('/okay' passing by ref\n+    xmlquery('string(//@boki)' passing by ref\n+      xmlquery('/okay/..' passing by ref\n         xmlparse(document '<okay><lets boki=\"inigo\"/></okay>' preserve whitespace)\n       empty on empty)\n     empty on empty)\n@@ -602,15 +611,15 @@ from t1 where i > 5;\n \n select i,\n   xmlserialize(\n-    xmlquery('/masted/text()' passing by ref\n-      xmlquery('//masted' passing by ref x empty on empty)\n+    xmlquery('/half/masted/text()' passing by ref\n+      xmlquery('.' passing by ref x empty on empty)\n     empty on empty)\n   as char(100))\n from t1 where i = 6;\n \n select i,\n-  xmlexists('/masted/text()' passing by ref\n-    xmlquery('//masted' passing by ref x empty on empty)\n+  xmlexists('/half/masted/text()' passing by ref\n+    xmlquery('.' passing by ref x empty on empty)\n   )\n from t1 where i = 6;\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/b647b38a26c74ce3a952feb6bf6b7e54876e8e90",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/09150393e2b9d87cb24d953a5d023cd9001fed71",
        "message": "Committed DERBY-555 for \u00d8ystein Gr\u00f8vlen (oystein.grovlen@sun.com):\n\nWith this patch, when a database is booted in read-only mode, the boot message in derby.log will contain information about that.\n\nI have also added a test, TurnsReadOnly.java, that without the fix, get the NPE. This is not in a disk full scenario, but it also occurs with a read-only DB directory. Since there is currently no way to turn write access back on from a Java program, the DB directory will be read-only after the test is run. Hence, the test framework will not be able to clean up the test directory. Therefore, this test is not added to the derbyall test suite.\n\nThe following files are changed:\n\nM java/engine/org/apache/derby/impl/store/raw/RawStore.java\n      Do not check log location for read-only databases (avoids NPE)\nM java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java\n      Add information to boot message in derby.log when database is booted in read-only mode.\nM java/engine/org/apache/derby/iapi/reference/MessageId.java\n      Added message id for the read-only part of the boot message\nM java/engine/org/apache/derby/loc/messages_en.properties\n      Added text for the read-only part of the boot message\nM java/testing/org/apache/derbyTesting/functionTests/tests/store/copyfiles.ant\n      Added TurnsReadOnly_app.properties\nA java/testing/org/apache/derbyTesting/functionTests/tests/store/TurnsReadOnly.java\n      New test that boots a database with log in non-default location, shuts it down, sets DB directory to read-only, boots again and checks that DML is not allowed.\nA java/testing/org/apache/derbyTesting/functionTests/tests/store/TurnsReadOnly_app.properties\n      Test properties\nA java/testing/org/apache/derbyTesting/functionTests/master/TurnsReadOnly.out\n      Master file for new test. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@325896 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_158",
        "file": [
            {
                "sha": "75ab12612490b027ae40c62598ff43ae66438bf6",
                "filename": "java/engine/org/apache/derby/iapi/reference/MessageId.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/engine/org/apache/derby/iapi/reference/MessageId.java",
                "raw_url": "https://github.com/apache/derby/raw/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/engine/org/apache/derby/iapi/reference/MessageId.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/reference/MessageId.java?ref=b647b38a26c74ce3a952feb6bf6b7e54876e8e90",
                "patch": "@@ -80,6 +80,7 @@\n     String STORE_BACKUP_COMPLETED           = \"D012\";\n     String STORE_DURABILITY_TESTMODE_NO_SYNC = \"D013\"; // for derby.system.durability is \n                                                        // set to test\n+    String STORE_BOOT_READONLY_MSG          = \"D014\";\n \n \n \t/*"
            },
            {
                "sha": "4d614ed4913b19a967fd6cb5b549440b8fc6121b",
                "filename": "java/engine/org/apache/derby/impl/store/raw/RawStore.java",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/engine/org/apache/derby/impl/store/raw/RawStore.java",
                "raw_url": "https://github.com/apache/derby/raw/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/engine/org/apache/derby/impl/store/raw/RawStore.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/RawStore.java?ref=b647b38a26c74ce3a952feb6bf6b7e54876e8e90",
                "patch": "@@ -274,8 +274,10 @@ public void\tboot(boolean create, Properties properties)\n \t\tString logDevice = properties.getProperty(Attribute.LOG_DEVICE);\n \t\tif (logDevice !=null)\n \t\t{\n-\t\t\tif (create || !logDevice.equals(logFactory.getCanonicalLogPath()) ||\n-\t\t\t\trestoreFromBackup!=null)\n+            if (!isReadOnly() // We do not care about log location if read only\n+                && (create \n+                    || !logDevice.equals(logFactory.getCanonicalLogPath()) \n+                    || restoreFromBackup!=null))\n \t\t\t{\n \t\t\t\t// get the real location from the log factory\n \t\t\t\tproperties.put(Attribute.LOG_DEVICE, logFactory.getCanonicalLogPath());"
            },
            {
                "sha": "2b1b45b5c3f7230b7f44a0aff371461a1c325923",
                "filename": "java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java",
                "status": "modified",
                "additions": 7,
                "deletions": 3,
                "changes": 10,
                "blob_url": "https://github.com/apache/derby/blob/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java",
                "raw_url": "https://github.com/apache/derby/raw/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java?ref=b647b38a26c74ce3a952feb6bf6b7e54876e8e90",
                "patch": "@@ -326,12 +326,16 @@ public void\tboot(boolean create, Properties startParams) throws StandardExceptio\n \n \t\tlogMsg(LINE);\n \t\tlong bootTime = System.currentTimeMillis();\n+        String readOnlyMsg = (isReadOnly()) \n+            ? MessageService.getTextMessage(MessageId.STORE_BOOT_READONLY_MSG)\n+            : \"\";\n \n \t\tlogMsg(CheapDateFormatter.formatDate(bootTime) +\n \t\t\t   MessageService.getTextMessage(MessageId.STORE_BOOT_MSG,\n-\t\t\t   \t\t\t\t\t\t\t\t\tjbmsVersion,\n-\t\t\t\t\t\t\t\t\t\t\t\tidentifier,\n-\t\t\t\t\t\t\t\t\t\t\t\tdataDirectory));\n+                                             jbmsVersion,\n+                                             identifier,\n+                                             dataDirectory,\n+                                             readOnlyMsg));\n \n \t\tuf = null;\n "
            },
            {
                "sha": "3ae4068d8b93c9a21716ead0bf3e0ae9d8beb72e",
                "filename": "java/engine/org/apache/derby/loc/messages_en.properties",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/engine/org/apache/derby/loc/messages_en.properties",
                "raw_url": "https://github.com/apache/derby/raw/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/engine/org/apache/derby/loc/messages_en.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/loc/messages_en.properties?ref=b647b38a26c74ce3a952feb6bf6b7e54876e8e90",
                "patch": "@@ -1180,7 +1180,7 @@ C007=Exception loading class {0} from jar {1} - {2}\n \n # RawStore Data\n \n-D001=:\\n Booting Derby version {0}: instance {1}\\non database directory {2} \\n\n+D001=:\\n Booting Derby version {0}: instance {1}\\non database directory {2} {3} \\n\n D002=:\\nShutting down instance {0}\n D004=Backup started for database located at {0}\n D005=moved old backup copy from {0} to {1}\n@@ -1192,6 +1192,7 @@ D010=Backup aborted due to error\n D011=removed old backup copy at {0}\n D012=Backup completed, log instant at {0} \\n\n D013=WARNING: The database is booted with {0}={1}. In this mode, it is possible that database may not be able to recover, committed transactions may be lost, database may be in an inconsistent state. Please use this mode only when these consequences are acceptable  \\n\n+D014=in READ ONLY mode\n \n # Connectivity \n J004=database identity"
            },
            {
                "sha": "a0570351a96b2063ba574e446c7ad3e0337c621b",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/TurnsReadOnly.out",
                "status": "added",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/testing/org/apache/derbyTesting/functionTests/master/TurnsReadOnly.out",
                "raw_url": "https://github.com/apache/derby/raw/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/testing/org/apache/derbyTesting/functionTests/master/TurnsReadOnly.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/TurnsReadOnly.out?ref=b647b38a26c74ce3a952feb6bf6b7e54876e8e90",
                "patch": "@@ -0,0 +1,6 @@\n+Database has been booted.\n+Table t1 created.\n+Shutting down database ...\n+Database shutdown completed\n+Database has been booted.\n+Database is read-only"
            },
            {
                "sha": "96a1b7bfd5521f7b3a35eb264413031702166edb",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/TurnsReadOnly.java",
                "status": "added",
                "additions": 109,
                "deletions": 0,
                "changes": 109,
                "blob_url": "https://github.com/apache/derby/blob/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/testing/org/apache/derbyTesting/functionTests/tests/store/TurnsReadOnly.java",
                "raw_url": "https://github.com/apache/derby/raw/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/testing/org/apache/derbyTesting/functionTests/tests/store/TurnsReadOnly.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/TurnsReadOnly.java?ref=b647b38a26c74ce3a952feb6bf6b7e54876e8e90",
                "patch": "@@ -0,0 +1,109 @@\n+/*\n+\n+   Derby - Class org.apache.derbyTesting.functionTests.store.LogChecksumSetup\n+\n+   Copyright 2005 The Apache Software Foundation or its licensors, as applicable.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+ */\n+\n+package org.apache.derbyTesting.functionTests.tests.store;\n+\n+import java.io.File;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+import javax.sql.DataSource;\n+\n+import org.apache.derby.tools.ij;\n+import org.apache.derbyTesting.functionTests.util.TestUtil;\n+\n+/*\n+ * This class is a test where you are not able to create the lock file\n+ * when booting an existing database.  The database will then become\n+ * read-only.  The tests first creates a database and then shutdowns,\n+ * turns off write access to the database directory and then boots the\n+ * database again.  A non-default log directory is used since that\n+ * uncovered a bug (DERBY-555).  (logDevice is set in the\n+ * _app.properties file)\n+ *\n+ * NB! This test is not included in derbyall since it creates a\n+ * read-only directory which will be annoying when trying to clean\n+ * test directories.  When Java 6 can be used, it will be possible to\n+ * turn on write access at the end of the test.\n+ *\n+ * @author oystein.grovlen@sun.com\n+ */\n+\n+public class TurnsReadOnly\n+{\n+    \n+    public static void main(String[] argv) throws Throwable \n+    {\n+        try {\n+            ij.getPropertyArg(argv); \n+            Connection conn = ij.startJBMS();\n+            conn.setAutoCommit(true);\n+            System.out.println(\"Database has been booted.\");\n+\n+            Statement s = conn.createStatement();\n+            s.execute(\"CREATE TABLE t1(a INT)\");\n+            System.out.println(\"Table t1 created.\");\n+\n+            // Shut down database\n+            Properties shutdownAttrs = new Properties();\n+            shutdownAttrs.setProperty(\"shutdownDatabase\", \"shutdown\");\n+            System.out.println(\"Shutting down database ...\");\n+            try {\n+                DataSource ds = TestUtil.getDataSource(shutdownAttrs);\n+                ds.getConnection();\n+            } catch(SQLException se) {\n+\t\t\t\tif (se.getSQLState() != null \n+                    && se.getSQLState().equals(\"XJ015\")) {\n+\t\t\t\t\tSystem.out.println(\"Database shutdown completed\");\n+                } else {\n+                    throw se;\n+                }\n+            }\n+\n+            // Make database directory read-only.\n+            String derbyHome = System.getProperty(\"derby.system.home\");\n+            File dbDir = new File(derbyHome, \"wombat\");\n+            dbDir.setReadOnly();\n+            \n+            // Boot database, check that it is read-only\n+            conn = ij.startJBMS();\n+            conn.setAutoCommit(true);\n+            System.out.println(\"Database has been booted.\");\n+            s = conn.createStatement();\n+            try {\n+                s.execute(\"INSERT INTO t1 VALUES(1)\");\n+            } catch(SQLException se) {\n+\t\t\t\tif (se.getSQLState() != null \n+                    && se.getSQLState().equals(\"25502\")) {\n+\t\t\t\t\tSystem.out.println(\"Database is read-only\");\n+                } else {\n+                    throw se;\n+                }\n+            }\n+\n+        } catch (SQLException sqle) {\n+            org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(System.out, \n+                                                                    sqle);\n+            sqle.printStackTrace(System.out);\n+        }\n+    }\n+}"
            },
            {
                "sha": "7bd673068fa6e43e6cfff1dd86674b0228ca69f8",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/TurnsReadOnly_app.properties",
                "status": "added",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/testing/org/apache/derbyTesting/functionTests/tests/store/TurnsReadOnly_app.properties",
                "raw_url": "https://github.com/apache/derby/raw/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/testing/org/apache/derbyTesting/functionTests/tests/store/TurnsReadOnly_app.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/TurnsReadOnly_app.properties?ref=b647b38a26c74ce3a952feb6bf6b7e54876e8e90",
                "patch": "@@ -0,0 +1 @@\n+database=jdbc:derby:wombat;create=true;logDevice=extinout/wombatlog"
            },
            {
                "sha": "1a74c3f3527d7279e2529d993c928aad9e0b5efc",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/copyfiles.ant",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/testing/org/apache/derbyTesting/functionTests/tests/store/copyfiles.ant",
                "raw_url": "https://github.com/apache/derby/raw/b647b38a26c74ce3a952feb6bf6b7e54876e8e90/java/testing/org/apache/derbyTesting/functionTests/tests/store/copyfiles.ant",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/copyfiles.ant?ref=b647b38a26c74ce3a952feb6bf6b7e54876e8e90",
                "patch": "@@ -23,6 +23,7 @@ TableLockBasic_derby.properties\n TransactionTable.sql\n TransactionTable_app.properties\n TransactionTable_derby.properties\n+TurnsReadOnly_app.properties\n access.sql\n access_app.properties\n access_derby.properties"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/dcd2b0434d78beea3de4700711cfabebb4f08e54",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/fa292b99f0de0c5a1ded9244ce7dbeb4050284be",
        "message": "DERBY-4450 GROUP BY in an IN-subquery inside HAVING clause whose select list is subset of group by columns, gives NPE\n\nPatch derby-4450b + Knut's simplification of the autocommit call in GrooupByTest#testDerby4450.\n\nThis solves the problem seen in this issue, which was a regression\nfrom DERBY-681.  The crux of the problem is that a PRN is added in the\nresult set tree without adjusting a higher level reference so that\nwrong code is generated. The solution here is to reuse the result\ncolumn list in the inserted PRN, so that reference from above will\npoint correctly even after the PRN insertion (more details in JIRA).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@882732 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_159",
        "file": [
            {
                "sha": "b62832b1ad96192ede4c0251a146c6d9b2bc5c85",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "status": "modified",
                "additions": 15,
                "deletions": 5,
                "changes": 20,
                "blob_url": "https://github.com/apache/derby/blob/dcd2b0434d78beea3de4700711cfabebb4f08e54/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "raw_url": "https://github.com/apache/derby/raw/dcd2b0434d78beea3de4700711cfabebb4f08e54/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java?ref=dcd2b0434d78beea3de4700711cfabebb4f08e54",
                "patch": "@@ -1604,14 +1604,24 @@ public ResultSetNode genProjectRestrict(int origFromListSize)\n \t\t\t// select c1 from t group by c1, c2\n \t\t\t// we would have added c2 to the projection list which will have to be \n \t\t\t// projected out.\n-\t\t\t\n-\t\t\tResultColumnList newSelectList = prnRSN.getResultColumns().copyListAndObjects(); \n-\t\t\tnewSelectList.removeGeneratedGroupingColumns();\n-\t\t\tnewSelectList.genVirtualColumnNodes(prnRSN, prnRSN.getResultColumns());\n+\t\t\t//\n+\n+\t\t\t// Keep the same RCL on top, since there may be\n+\t\t\t// references to its result columns above us, e.g. in this query:\n+\t\t\t//\n+\t\t\t// select sum(j),i from t group by i having i\n+\t\t\t//             in (select i from t group by i,j )\n+\t\t\t//\n+\t\t\tResultColumnList topList = prnRSN.getResultColumns();\n+\t\t\tResultColumnList newSelectList = topList.copyListAndObjects();\n+\t\t\tprnRSN.setResultColumns(newSelectList);\n+\n+\t\t\ttopList.removeGeneratedGroupingColumns();\n+\t\t\ttopList.genVirtualColumnNodes(prnRSN, newSelectList);\n \t\t\tprnRSN = (ResultSetNode) getNodeFactory().getNode(\n \t\t\t\t\t\tC_NodeTypes.PROJECT_RESTRICT_NODE,\n \t\t\t\t\t\tprnRSN,\n-\t\t\t\t\t\tnewSelectList,\n+\t\t\t\t\t\ttopList,\n \t\t\t\t\t\tnull,\n \t\t\t\t\t\tnull,\n \t\t\t\t\t\tnull,"
            },
            {
                "sha": "5a35a9d1b0c3a4e4e62bf4e0583889db54ac3f25",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "status": "modified",
                "additions": 28,
                "deletions": 1,
                "changes": 29,
                "blob_url": "https://github.com/apache/derby/blob/dcd2b0434d78beea3de4700711cfabebb4f08e54/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "raw_url": "https://github.com/apache/derby/raw/dcd2b0434d78beea3de4700711cfabebb4f08e54/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java?ref=dcd2b0434d78beea3de4700711cfabebb4f08e54",
                "patch": "@@ -2243,4 +2243,31 @@ public void testDerby4071AggregateOnGroupByColumnInHaving() throws SQLException\n          \n          JDBC.assertFullResultSet(rs, new String[][] {{\"4\",\"2\"},{\"5\",\"2\"}});\n     }\n-}\n\\ No newline at end of file\n+\n+    /**\n+     * GROUP BY in an IN-subquery inside HAVING clause whose select list is\n+     * subset of group by columns.\n+     *\n+     * @throws SQLException\n+     */\n+    public void testDerby4450() throws SQLException {\n+        setAutoCommit(false);\n+        Statement s = createStatement();\n+        ResultSet rs;\n+\n+        s.executeUpdate(\n+            \"create table tt(i int not null,\" +\n+            \"               j int, k int)\");\n+        s.executeUpdate(\n+            \"insert into tt values \" +\n+            \"    (1,10,1), (1,40,1),(3,45,1),(4,46,1),(5,90,1)\");\n+\n+        rs = s.executeQuery(\n+            \"select sum(j) from tt group by i having i \" +\n+            \"                     in (select i from tt group by i,j )\");\n+\n+        JDBC.assertFullResultSet(rs, new String[][] {\n+                {\"50\"},{\"45\"},{\"46\"},{\"90\"}});\n+        rollback();\n+    }\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/f36770cc9888fde309c606859a2993c32a15364f",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/d7731394ae0f07b3946972d26600320b6ac3ab89",
        "message": "DERBY-3872\n\nThe NPE in this jira entry was caused by the missing overwrite of accept() method in IndexToBaseRowNode.\nBecause of the missing code, the additional layer of VirtualColumn node over ResultColumn was not \nhappening for the where clause in HAVING. Once the accept method was added to IndexToBaseRowNode, the\nVirtualColumn on top of the ResultColumn got the correct resultset number associated with it and at the\ncode generation time, we start referencing the correct resultset rather than the one associated with\nthe JOIN clause. Thanks a ton to Army and Bryan on this jira entry for their help.\n\nI have added a test case for this in lang/GroupByTest.java\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@705037 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_160",
        "file": [
            {
                "sha": "1ce4433c87663c21c8f9703d865f2198930c48c4",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java",
                "status": "modified",
                "additions": 28,
                "deletions": 0,
                "changes": 28,
                "blob_url": "https://github.com/apache/derby/blob/f36770cc9888fde309c606859a2993c32a15364f/java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java",
                "raw_url": "https://github.com/apache/derby/raw/f36770cc9888fde309c606859a2993c32a15364f/java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java?ref=f36770cc9888fde309c606859a2993c32a15364f",
                "patch": "@@ -27,6 +27,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.iapi.sql.compile.CostEstimate;\n import org.apache.derby.iapi.sql.compile.Optimizable;\n import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;\n+import org.apache.derby.iapi.sql.compile.Visitable;\n+import org.apache.derby.iapi.sql.compile.Visitor;\n \n import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;\n \n@@ -409,4 +411,30 @@ void adjustForSortElimination(RequiredRowOrdering rowOrdering)\n \t\treturn indexColMapping;\n \t}\n \n+\t/**\n+\t * Accept a visitor, and call v.visit()\n+\t * on child nodes as necessary.  \n+\t * \n+\t * @param v the visitor\n+\t *\n+\t * @exception StandardException on error\n+\t */\n+\tpublic Visitable accept(Visitor v) \n+\t\tthrows StandardException\n+\t{\n+\t\tif (v.skipChildren(this))\n+\t\t{\n+\t\t\treturn v.visit(this);\n+\t\t}\n+\n+\t\tVisitable returnNode = super.accept(v);\n+\n+\t\tif (source != null && !v.stopTraversal())\n+\t\t{\n+\t\t\tsource = (FromBaseTable)source.accept(v);\n+\t\t}\n+\n+\t\treturn returnNode;\n+\t}\n+\n }"
            },
            {
                "sha": "274b276ce103c18ddb0d28b50b55f3e17f73e3f9",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "status": "modified",
                "additions": 43,
                "deletions": 0,
                "changes": 43,
                "blob_url": "https://github.com/apache/derby/blob/f36770cc9888fde309c606859a2993c32a15364f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "raw_url": "https://github.com/apache/derby/raw/f36770cc9888fde309c606859a2993c32a15364f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java?ref=f36770cc9888fde309c606859a2993c32a15364f",
                "patch": "@@ -242,6 +242,28 @@ private static void createSchemaObjects(Statement st)\n         st.executeUpdate(\n             \"insert into tab1 select i, s, l, c, v, lvc, d, r, \"\n             + \"dt, t, ts from t\");\n+        \n+        //Following setup is for DERBY-3872\n+        st.executeUpdate(\n+        \t\t\"CREATE TABLE EMPTAB (EMPID INTEGER NOT NULL, \"\n+        \t\t+ \"SALARY DECIMAL(10, 4), DEPT_DEPTNO INTEGER)\"); \n+\n+        st.executeUpdate(\n+        \t\t\"ALTER TABLE EMPTAB ADD CONSTRAINT \" +\n+        \t\t\"PK_EMPTAB PRIMARY KEY (EMPID)\"); \n+\n+        st.executeUpdate(\n+        \t\t\"CREATE TABLE DEPTTAB (DEPTNO INTEGER NOT NULL)\");\n+\n+      st.executeUpdate(\n+    \t\t  \"ALTER TABLE DEPTTAB ADD CONSTRAINT \"+\n+    \t\t  \"PK_DEPTTAB PRIMARY KEY (DEPTNO)\");\n+\n+      st.executeUpdate(\n+    \t\t  \"insert into DEPTTAB values( 1 )\");\n+\n+      st.executeUpdate(\n+    \t\t  \"insert into EMPTAB values( 1, 1000, 1 )\"); \n \t}\n \n \t/**\n@@ -1087,6 +1109,27 @@ public void testHavingClauseInSubquery()\n             {\"0\", \"1992-09-09\", \"0\", \"1992-09-09\"}\n         };\n         \n+        JDBC.assertFullResultSet(rs, expRS, true);\n+\n+        //Test case for DERBY-3872 Prior to fix for DERBY-3872, following\n+        //query resulted in NPE because of missing chain of\n+        //VirtualColumn-to-ResultColumn nodes for the where clause in\n+        //the HAVING clause. The reason for this that we didn't overwrite \n+        //the method \"accept()\" in IndexToBaseRowNode. This missing code\n+        //caused Derby to associate the ResultColumn for the HAVING\n+        //clause incorrectly with the ResultColumn used for the join\n+        //clause. More info can be found in the jira\n+        rs = st.executeQuery(\n+        \t\t\"select  q1.DEPTNO from DEPTTAB q1, EMPTAB q2 where \"+ \n+        \t\t\"( integer (1.1) = 1)  and  ( q2.DEPT_DEPTNO = q1.DEPTNO) \"+\n+        \t\t\" GROUP BY q1.DEPTNO HAVING  max( q2.SALARY) >=  \"+\n+        \t\t\"( select  q3.SALARY from EMPTAB q3 where  \"+\n+        \t\t\"(q3.EMPID =  q1.DEPTNO) )\");\n+        \n+        expRS = new String [][]\n+        {\n+            {\"1\"}\n+        };\n         JDBC.assertFullResultSet(rs, expRS, true);\n \t\tst.close();\n \t}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/c2a81618f53769b5ca92ccf3506fc1295253a600",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/4112e91aa432f57850dcb30d302f7642ef9070c7",
        "message": "DERBY-2397 (refactor) Refactor the implementation of the SQLJ routines (INSTALL_JAR,\nREMOVE_JAR and REPLACE_JAR) so that the methods for the system procedures directly\ncall the code to install, remove or replace a jar file. Previously these routines\ncreated ConstantActions and executed those, resulting in four extra classes that\njust routed the procedures to the real code. Since these executions are not DDL\nstatements they should not use ConstantAction, no Activation was available (since no\ncompilation) which meant that executeConstantAction() was called with null which\nis not the intended api for a ConstantAction. This resulted in NPEs if modifying\ncode in these jar constant action to use the activation as might be expected from\nlooking at other ConstantAction implementations.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@517770 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_161",
        "file": [
            {
                "sha": "97dcd40096620b79d91f80e53afb01bb612734e7",
                "filename": "java/engine/org/apache/derby/catalog/SystemProcedures.java",
                "status": "modified",
                "additions": 62,
                "deletions": 59,
                "changes": 121,
                "blob_url": "https://github.com/apache/derby/blob/c2a81618f53769b5ca92ccf3506fc1295253a600/java/engine/org/apache/derby/catalog/SystemProcedures.java",
                "raw_url": "https://github.com/apache/derby/raw/c2a81618f53769b5ca92ccf3506fc1295253a600/java/engine/org/apache/derby/catalog/SystemProcedures.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/catalog/SystemProcedures.java?ref=c2a81618f53769b5ca92ccf3506fc1295253a600",
                "patch": "@@ -21,34 +21,30 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n package org.apache.derby.catalog;\n \n-import org.apache.derby.iapi.services.sanity.SanityManager;\n-\n-import org.apache.derby.iapi.services.i18n.MessageService;\n-import org.apache.derby.iapi.error.PublicAPI;\n-import org.apache.derby.iapi.error.StandardException;\n-import org.apache.derby.iapi.reference.SQLState;\n-import java.sql.ResultSet;\n import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n import java.sql.SQLException;\n-import java.sql.DatabaseMetaData;\n-import java.util.StringTokenizer;\n import java.util.NoSuchElementException;\n import java.util.Random;\n+import java.util.StringTokenizer;\n \n-import org.apache.derby.jdbc.InternalDriver;\n import org.apache.derby.iapi.db.Factory;\n import org.apache.derby.iapi.db.PropertyInfo;\n-import org.apache.derby.impl.jdbc.Util;\n-import org.apache.derby.impl.load.Export;\n-import org.apache.derby.impl.load.Import;\n-import org.apache.derby.impl.jdbc.EmbedDatabaseMetaData;\n-\n-import org.apache.derby.impl.sql.execute.JarDDL;\n-import org.apache.derby.iapi.util.IdUtil;\n import org.apache.derby.iapi.error.PublicAPI;\n import org.apache.derby.iapi.error.StandardException;\n+import org.apache.derby.iapi.reference.SQLState;\n+import org.apache.derby.iapi.services.i18n.MessageService;\n import org.apache.derby.iapi.sql.conn.ConnectionUtil;\n+import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;\n+import org.apache.derby.iapi.util.IdUtil;\n+import org.apache.derby.impl.jdbc.EmbedDatabaseMetaData;\n+import org.apache.derby.impl.jdbc.Util;\n+import org.apache.derby.impl.load.Export;\n+import org.apache.derby.impl.load.Import;\n+import org.apache.derby.impl.sql.execute.JarUtil;\n+import org.apache.derby.jdbc.InternalDriver;\n \n \n /**\n@@ -969,26 +965,28 @@ public static void INSTALL_JAR(String url, String jar, int deploy)\n \t\tthrows SQLException {\n \n \t\ttry {\n+            \n+            LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();\n \n \t\t\tString[] st = IdUtil.parseQualifiedName(jar.trim(), true);\n \n-\t\t\tString schemaName = null;\n-\t\t\tString sqlName = null;\n-\n-\t\t\tswitch (st.length) {\n-\t\t\tcase 1:\n-\t\t\t\tschemaName = null;\n+\t\t\tString schemaName;\n+\t\t\tString sqlName;\n+            \n+            if (st.length == 1)\n+            {\n+\t\t\t\tschemaName = lcc.getCurrentSchemaName();\n \t\t\t\tsqlName = st[0];\n-\t\t\t\tbreak;\n-\t\t\tcase 2:\n-\t\t\t\tschemaName = st[0];\n+            }\n+            else\n+            {\n+                schemaName = st[0];\n \t\t\t\tsqlName = st[1];\n-\t\t\tdefault:\n-\t\t\t\t; // RESOLVE\n \t\t\t}\n \n \t\t\tcheckJarSQLName(sqlName);\n-\t\t\tJarDDL.add(schemaName, sqlName, url);\n+            \n+            JarUtil.install(lcc, schemaName, sqlName, url);\n \t\t} \n \t\tcatch (StandardException se) {\n \t\t\tthrow PublicAPI.wrapStandardException(se);\n@@ -1009,26 +1007,29 @@ public static void REPLACE_JAR(String url, String jar)\n \t\tthrows SQLException {\n \n \t\ttry {\n+            \n+            LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();\n \n \t\t\tString[] st = IdUtil.parseQualifiedName(jar.trim(), true);\n \n-\t\t\tString schemaName = null;\n-\t\t\tString sqlName = null;\n-\n-\t\t\tswitch (st.length) {\n-\t\t\tcase 1:\n-\t\t\t\tschemaName = null;\n-\t\t\t\tsqlName = st[0];\n-\t\t\t\tbreak;\n-\t\t\tcase 2:\n-\t\t\t\tschemaName = st[0];\n-\t\t\t\tsqlName = st[1];\n-\t\t\tdefault:\n-\t\t\t\t; // RESOLVE\n-\t\t\t}\n+            String schemaName;\n+            String sqlName;\n+            \n+            if (st.length == 1)\n+            {\n+                schemaName = lcc.getCurrentSchemaName();\n+                sqlName = st[0];\n+            }\n+            else\n+            {\n+                schemaName = st[0];\n+                sqlName = st[1];\n+            }\n \n \t\t\tcheckJarSQLName(sqlName);\n-\t\t\tJarDDL.replace(schemaName, sqlName, url);\n+            \n+            JarUtil.replace(lcc,\n+                    schemaName, sqlName, url);\n \t\t} \n \t\tcatch (StandardException se) {\n \t\t\tthrow PublicAPI.wrapStandardException(se);\n@@ -1046,27 +1047,29 @@ public static void REMOVE_JAR(String jar, int undeploy)\n \t\tthrows SQLException {\n \n \t\ttry {\n+            \n+            LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();\n \n \t\t\tString[] st = IdUtil.parseQualifiedName(jar.trim(), true);\n \n-\t\t\tString schemaName = null;\n-\t\t\tString sqlName = null;\n-\n-\t\t\tswitch (st.length) {\n-\t\t\tcase 1:\n-\t\t\t\tschemaName = null;\n-\t\t\t\tsqlName = st[0];\n-\t\t\t\tbreak;\n-\t\t\tcase 2:\n-\t\t\t\tschemaName = st[0];\n-\t\t\t\tsqlName = st[1];\n-\t\t\tdefault:\n-\t\t\t\t; // RESOLVE\n-\t\t\t}\n+            String schemaName;\n+            String sqlName;\n+            \n+            if (st.length == 1)\n+            {\n+                schemaName = lcc.getCurrentSchemaName();\n+                sqlName = st[0];\n+            }\n+            else\n+            {\n+                schemaName = st[0];\n+                sqlName = st[1];\n+            }\n \n \t\t\tcheckJarSQLName(sqlName);\n+            \n+            JarUtil.drop(lcc, schemaName, sqlName);\n \n-\t\t\tJarDDL.drop(schemaName, sqlName);\n \t\t} \n \t\tcatch (StandardException se) {\n \t\t\tthrow PublicAPI.wrapStandardException(se);"
            },
            {
                "sha": "33124f54ae2a8e22371e76fd9891006b177432e0",
                "filename": "java/engine/org/apache/derby/impl/db/BasicDatabase.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/c2a81618f53769b5ca92ccf3506fc1295253a600/java/engine/org/apache/derby/impl/db/BasicDatabase.java",
                "raw_url": "https://github.com/apache/derby/raw/c2a81618f53769b5ca92ccf3506fc1295253a600/java/engine/org/apache/derby/impl/db/BasicDatabase.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/db/BasicDatabase.java?ref=c2a81618f53769b5ca92ccf3506fc1295253a600",
                "patch": "@@ -69,6 +69,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.iapi.store.access.TransactionController;\n import org.apache.derby.iapi.jdbc.AuthenticationService;\n import org.apache.derby.iapi.services.uuid.UUIDFactory;\n+import org.apache.derby.impl.sql.execute.JarUtil;\n import org.apache.derby.io.StorageFile;\n import org.apache.derby.catalog.UUID;\n \n@@ -805,7 +806,7 @@ public StorageFile getJarFile(String schemaName, String sqlName)\n         ContextManager cm = ContextService.getFactory().getCurrentContextManager();\n \t\tFileResource fr = af.getTransaction(cm).getFileHandler();\n \n-\t\tString externalName = org.apache.derby.impl.sql.execute.JarDDL.mkExternalName(schemaName, sqlName, fr.getSeparatorChar());\n+\t\tString externalName = JarUtil.mkExternalName(schemaName, sqlName, fr.getSeparatorChar());\n \n \t\treturn fr.getAsFile(externalName, generationId);\n \t}"
            },
            {
                "sha": "7d711bd38ebe75960cc6c8951f504a170b246b2e",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/AddJarConstantAction.java",
                "status": "removed",
                "additions": 0,
                "deletions": 95,
                "changes": 95,
                "blob_url": "https://github.com/apache/derby/blob/4112e91aa432f57850dcb30d302f7642ef9070c7/java/engine/org/apache/derby/impl/sql/execute/AddJarConstantAction.java",
                "raw_url": "https://github.com/apache/derby/raw/4112e91aa432f57850dcb30d302f7642ef9070c7/java/engine/org/apache/derby/impl/sql/execute/AddJarConstantAction.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/AddJarConstantAction.java?ref=4112e91aa432f57850dcb30d302f7642ef9070c7",
                "patch": "@@ -1,95 +0,0 @@\n-/*\n-\n-   Derby - Class org.apache.derby.impl.sql.execute.AddJarConstantAction\n-\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to you under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-      http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n-\n- */\n-\n-package org.apache.derby.impl.sql.execute;\n-\n-import org.apache.derby.iapi.services.sanity.SanityManager;\n-import org.apache.derby.iapi.error.StandardException;\n-import org.apache.derby.iapi.sql.execute.ConstantAction;\n-import org.apache.derby.iapi.sql.Activation;\n-import org.apache.derby.catalog.UUID;\n-\n-/**\n- *\tConstant action to Add an external  Jar file to a database. \n- *\n- */\n-class AddJarConstantAction extends DDLConstantAction\n-{\n-\tprivate\tfinal String schemaName;\n-\tprivate\tfinal String sqlName;\n-\tprivate final String externalPath;\n-\n-\n-\t//////////////////////////////////////////////////////////////\n-\t//\n-\t// CONSTRUCTORS\n-\t//\n-\t//////////////////////////////////////////////////////////////\n-\n-\t/**\n-\t *\tMake the ConstantAction to add a jar file to database.\n-\t *\n-\t *\t@param\tschemaName\t\t\tThe SchemaName for the jar file.\n-\t *\t@param\tsqlName\t\t\t    The sqlName for the jar file.\n-\t *  @param  externalPath            The name of the file that holds the jar.\n-\t */\n-\tAddJarConstantAction(\n-\t\t\t\t\t\t\t\t String schemaName,\n-\t\t\t\t\t\t\t\t String sqlName,\n-\t\t\t\t\t\t\t\t String externalPath)\n-\t{\n-\t\tthis.schemaName = schemaName;\n-\t\tthis.sqlName = sqlName;\n-\t\tthis.externalPath = externalPath;\n-\t}\n-\n-\n-\t//////////////////////////////////////////////////////////////\n-\t//\n-\t// OBJECT SHADOWS\n-\t//\n-\t//////////////////////////////////////////////////////////////\n-\n-\tpublic\tString\ttoString()\n-\t{\n-\t\t// Do not put this under SanityManager.DEBUG - it is needed for\n-\t\t// error reporting.\n-\t\treturn \"ADD JAR FILE \" + schemaName + \".\" + sqlName;\n-\t}\n-\n-\t//////////////////////////////////////////////////////////////\n-\t//\n-\t// CONSTANT ACTION METHODS\n-\t//\n-\t//////////////////////////////////////////////////////////////\n-\n-\n-\t/**\n-\t * @see ConstantAction#executeConstantAction\n-\t * @exception StandardException Thrown on failure\n-\t */\n-\tpublic void\texecuteConstantAction( Activation activation )\n-\t\t\t\t\t\tthrows StandardException\n-\t{\n-\t\tJarUtil.add(schemaName,sqlName,externalPath);\n-\t}\n-\n-}"
            },
            {
                "sha": "870b439500251fd9018756cafc54c606bdd1df6a",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/DropJarConstantAction.java",
                "status": "removed",
                "additions": 0,
                "deletions": 90,
                "changes": 90,
                "blob_url": "https://github.com/apache/derby/blob/4112e91aa432f57850dcb30d302f7642ef9070c7/java/engine/org/apache/derby/impl/sql/execute/DropJarConstantAction.java",
                "raw_url": "https://github.com/apache/derby/raw/4112e91aa432f57850dcb30d302f7642ef9070c7/java/engine/org/apache/derby/impl/sql/execute/DropJarConstantAction.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/DropJarConstantAction.java?ref=4112e91aa432f57850dcb30d302f7642ef9070c7",
                "patch": "@@ -1,90 +0,0 @@\n-/*\n-\n-   Derby - Class org.apache.derby.impl.sql.execute.DropJarConstantAction\n-\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to you under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-      http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n-\n- */\n-\n-package org.apache.derby.impl.sql.execute;\n-\n-import org.apache.derby.iapi.services.sanity.SanityManager;\n-import org.apache.derby.iapi.error.StandardException;\n-import org.apache.derby.iapi.sql.execute.ConstantAction;\n-\n-import org.apache.derby.iapi.sql.Activation;\n-\n-import org.apache.derby.catalog.UUID;\n-\n-/**\n- *\tConstant action to drop an external jar file from a database. \n- *\n- */\n-class DropJarConstantAction extends DDLConstantAction\n-{\n-\tprivate final String schemaName;\n-\tprivate final String sqlName;\n-\n-\t//////////////////////////////////////////////////////////////\n-\t//\n-\t// CONSTRUCTORS\n-\t//\n-\t//////////////////////////////////////////////////////////////\n-\n-\t/**\n-\t *\tMake the ConstantAction to drop a jar file to database.\n-\t *\n-\t *\t@param\tschemaName\t\t\tThe SchemaName for the jar file.\n-\t *\t@param\tsqlName\t\t\t    The sqlName for the jar file.\n-\t */\n-\tDropJarConstantAction(String schemaName,\n-\t\t\t\t\t\t\t\t  String sqlName)\n-\t{\n-\t\tthis.schemaName = schemaName;\n-\t\tthis.sqlName = sqlName;\n-\t}\n-\n-\n-\t//////////////////////////////////////////////////////////////\n-\t//\n-\t// OBJECT SHADOWS\n-\t//\n-\t//////////////////////////////////////////////////////////////\n-\n-\tpublic\tString\ttoString()\n-\t{\n-\t\t// Do not put this under SanityManager.DEBUG - it is needed for\n-\t\t// error reporting.\n-\t\treturn \"DROP JAR FILE \" + schemaName + \".\" + sqlName;\n-\t}\n-\n-\t//////////////////////////////////////////////////////////////\n-\t//\n-\t// CONSTANT ACTION METHODS\n-\t//\n-\t//////////////////////////////////////////////////////////////\n-\n-\n-\t/**\n-\t * @see ConstantAction#executeConstantAction\n-\t * @exception StandardException Thrown on failure\n-\t */\n-\tpublic void\texecuteConstantAction( Activation activation )\n-\t\t\t\t\t\tthrows StandardException\n-\t{\n-\t\tJarUtil.drop(schemaName,sqlName);\n-\t}\n-}"
            },
            {
                "sha": "d17d1148ae484d080763996c602ebc7ea0095782",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java",
                "status": "modified",
                "additions": 0,
                "deletions": 50,
                "changes": 50,
                "blob_url": "https://github.com/apache/derby/blob/c2a81618f53769b5ca92ccf3506fc1295253a600/java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java",
                "raw_url": "https://github.com/apache/derby/raw/c2a81618f53769b5ca92ccf3506fc1295253a600/java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java?ref=c2a81618f53769b5ca92ccf3506fc1295253a600",
                "patch": "@@ -811,56 +811,6 @@ public\tUpdateConstantAction\tgetUpdateConstantAction(\n \t\t\t\t\t\t\t\t\t\t);\n \t}\n \n-\t/**\n-\t * Make the ConstantAction to Add a jar file to a database.\n-\t *\n-\t *\t@param\tschemaName\t\t\tThe SchemaName for the jar file.\n-\t *\t@param\tsqlName\t\t\t    The sqlName for the jar file.\n-\t *  @param  externalPath            The name of the file that holds the jar.\n-\t *  @exception StandardException Ooops\n-\t */\n-\tpublic\tConstantAction getAddJarConstantAction(\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t String schemaName,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t String sqlName,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t String externalPath)\n-\t\t throws StandardException\n-\t{\n-\t\tgetAuthorizer().authorize(Authorizer.JAR_WRITE_OP);\n-\t\treturn new AddJarConstantAction(schemaName,sqlName,externalPath);\n-\t}\n-\t/**\n-\t * Make the ConstantAction to replace a jar file in a database.\n-\t *\n-\t *\t@param\tschemaName\t\t\tThe SchemaName for the jar file.\n-\t *\t@param\tsqlName\t\t\t    The sqlName for the jar file.\n-\t *  @param  externalPath            The name of the file that holds the new jar.\n-\t *  @exception StandardException Ooops\n-\t */\n-\tpublic\tConstantAction getReplaceJarConstantAction(\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t String schemaName,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t String sqlName,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t String externalPath)\n-\t\t throws StandardException\n-\t{\n-\t\tgetAuthorizer().authorize(Authorizer.JAR_WRITE_OP);\n-\t\treturn new ReplaceJarConstantAction(schemaName,sqlName,externalPath);\n-\t}\n-\t/**\n-\t * Make the ConstantAction to drop a jar file from a database.\n-\t *\n-\t *\t@param\tschemaName\t\t\tThe SchemaName for the jar file.\n-\t *\t@param\tsqlName\t\t\t    The sqlName for the jar file.\n-\t *  @exception StandardException Ooops\n-\t */\n-\tpublic\tConstantAction getDropJarConstantAction(\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t  String schemaName,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t  String sqlName)\n-\t\t throws StandardException\n-\t{\n-\t\tgetAuthorizer().authorize(Authorizer.JAR_WRITE_OP);\n-\t\treturn new DropJarConstantAction(schemaName,sqlName);\n-\t}\n-\n \tstatic protected Authorizer getAuthorizer()\n \t{\n \t\tLanguageConnectionContext lcc = (LanguageConnectionContext)"
            },
            {
                "sha": "b5b8aa668849fb7775a5f330efeed5779f5896e1",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/JarDDL.java",
                "status": "removed",
                "additions": 0,
                "deletions": 124,
                "changes": 124,
                "blob_url": "https://github.com/apache/derby/blob/4112e91aa432f57850dcb30d302f7642ef9070c7/java/engine/org/apache/derby/impl/sql/execute/JarDDL.java",
                "raw_url": "https://github.com/apache/derby/raw/4112e91aa432f57850dcb30d302f7642ef9070c7/java/engine/org/apache/derby/impl/sql/execute/JarDDL.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/JarDDL.java?ref=4112e91aa432f57850dcb30d302f7642ef9070c7",
                "patch": "@@ -1,124 +0,0 @@\n-/*\n-\n-   Derby - Class org.apache.derby.impl.sql.execute.JarDDL\n-\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to you under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-      http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n-\n- */\n-\n-package org.apache.derby.impl.sql.execute;\n-\n-import org.apache.derby.iapi.services.context.ContextService;\n-import org.apache.derby.iapi.error.StandardException;\n-import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;\n-import org.apache.derby.iapi.sql.execute.ConstantAction;\n-import org.apache.derby.iapi.sql.execute.ExecutionContext;\n-import org.apache.derby.iapi.store.access.FileResource;\n-\n-public class JarDDL\n-{\n-\t/**\n-\t  Add a jar file to the current connection's database.\n-\n- \t  @exception StandardException Opps\n-\t  */\n-\tstatic public void\n-\tadd(String schemaName, String sqlName, String externalPath)\n-\t\t throws StandardException\n-\t{\n-\t\tschemaName = JarDDL.getSchemaName(schemaName);\n-\n-\t\tGenericConstantActionFactory caf = getConstantActionFactory();\n-\t\tConstantAction ca =\n-\t\t\tcaf.getAddJarConstantAction(schemaName,sqlName,externalPath);\n-\t\tca.executeConstantAction(null);\n-\t}\n-\n-\n-\t/**\n-\t  Drop a jar file from the current connection's database.\n-\n-\t  @exception StandardException Opps\n-\t  */\n-\tstatic public void\n-\tdrop(String schemaName, String sqlName)\n-\t\t throws StandardException\n-\t{\n-\t\tschemaName = JarDDL.getSchemaName(schemaName);\n-\n-\t\tGenericConstantActionFactory caf = getConstantActionFactory();\n-\t\tConstantAction ca =\n-\t\t\tcaf.getDropJarConstantAction(schemaName,sqlName);\n-\t\tca.executeConstantAction(null);\n-\t}\n-\n-\t/**\n-\t  Replace a jar file from the current connection's database with the content of an\n-\t  external file. \n-\n-\t  @exception StandardException Opps\n-\t  */\n-\tstatic public void\n-\treplace(String schemaName, String sqlName,String externalPath)\n-\t\t throws StandardException\n-\t{\n-\t\tschemaName = JarDDL.getSchemaName(schemaName);\n-\n-\t\tGenericConstantActionFactory caf = getConstantActionFactory();\n-\t\tConstantAction ca =\n-\t\t\tcaf.getReplaceJarConstantAction(schemaName,sqlName,externalPath);\n-\t\tca.executeConstantAction(null);\n-\t}\n-\n-\tprivate static GenericConstantActionFactory getConstantActionFactory()\n-\t{\n-\t\tExecutionContext ec =\n-\t\t\t(ExecutionContext)ContextService.getContext(ExecutionContext.CONTEXT_ID);\n-\t\tGenericExecutionFactory gef =\n-\t\t\t(GenericExecutionFactory)ec.getExecutionFactory();\n-\t\tGenericConstantActionFactory caf = gef.getConstantActionFactory();\n-\t\treturn caf;\n-\t}\n-\n-\tprivate static String getSchemaName(String schemaName) {\n-\n-\t\tif (schemaName != null)\n-\t\t\treturn schemaName;\n-\n-        // find the language context.\n-        LanguageConnectionContext lcc = (LanguageConnectionContext) ContextService.getContext(LanguageConnectionContext.CONTEXT_ID);\n-\n-\t\tschemaName = lcc.getCurrentSchemaName();\n-\n-\t\treturn schemaName;\n-\t}\n-\t\n-\t/**\n-\t  Make an external name for a file stored in the database.\n-\t  */\n-\tpublic static String mkExternalName(String schemaName, String sqlName, char separatorChar)\n-\t{\n-\t\tStringBuffer sb = new StringBuffer(30);\n-\n-\t\tsb.append(FileResource.JAR_DIRECTORY_NAME);\n-\t\tsb.append(separatorChar);\n-\t\tsb.append(schemaName);\n-\t\tsb.append(separatorChar);\n-\t\tsb.append(sqlName);\n-\t\tsb.append(\".jar\");\n-\t\treturn sb.toString();\n-\t}\n-}"
            },
            {
                "sha": "8b63559f69c27fda69a5483625d423361efe4229",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/JarUtil.java",
                "status": "modified",
                "additions": 49,
                "deletions": 36,
                "changes": 85,
                "blob_url": "https://github.com/apache/derby/blob/c2a81618f53769b5ca92ccf3506fc1295253a600/java/engine/org/apache/derby/impl/sql/execute/JarUtil.java",
                "raw_url": "https://github.com/apache/derby/raw/c2a81618f53769b5ca92ccf3506fc1295253a600/java/engine/org/apache/derby/impl/sql/execute/JarUtil.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/JarUtil.java?ref=c2a81618f53769b5ca92ccf3506fc1295253a600",
                "patch": "@@ -21,64 +21,60 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n package org.apache.derby.impl.sql.execute;\n \n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+\n+import org.apache.derby.iapi.error.StandardException;\n import org.apache.derby.iapi.reference.Property;\n-import org.apache.derby.iapi.util.IdUtil;\n-import org.apache.derby.impl.sql.execute.JarDDL;\n-import org.apache.derby.iapi.services.property.PropertyUtil;\n+import org.apache.derby.iapi.reference.SQLState;\n import org.apache.derby.iapi.services.loader.ClassFactory;\n-import org.apache.derby.iapi.services.context.ContextService;\n-import org.apache.derby.iapi.services.sanity.SanityManager;\n-import org.apache.derby.iapi.error.StandardException;\n+import org.apache.derby.iapi.services.property.PropertyUtil;\n import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;\n+import org.apache.derby.iapi.sql.depend.DependencyManager;\n import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;\n import org.apache.derby.iapi.sql.dictionary.DataDictionary;\n import org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor;\n import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;\n-\n-import org.apache.derby.iapi.sql.depend.DependencyManager;\n-import org.apache.derby.iapi.reference.SQLState;\n import org.apache.derby.iapi.store.access.FileResource;\n-import org.apache.derby.catalog.UUID;\n-\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n+import org.apache.derby.iapi.util.IdUtil;\n \n \n-class JarUtil\n+public class JarUtil\n {\n \t//\n \t//State passed in by the caller\n+    private LanguageConnectionContext lcc;\n \tprivate String schemaName;\n \tprivate String sqlName;\n \n \t//Derived state\n-\tprivate LanguageConnectionContext lcc;\n+\t\n \tprivate FileResource fr;\n \tprivate DataDictionary dd;\n \tprivate DataDescriptorGenerator ddg;\n \t\n \t//\n \t//State derived from the caller's context\n-\tprivate JarUtil(String schemaName, String sqlName)\n+\tprivate JarUtil(LanguageConnectionContext lcc,\n+            String schemaName, String sqlName)\n \t\t throws StandardException\n \t{\n \t\tthis.schemaName = schemaName;\n \t\tthis.sqlName = sqlName;\n \n-        lcc = (LanguageConnectionContext)\n-\t\t\tContextService.getContext(LanguageConnectionContext.CONTEXT_ID);\n+        this.lcc = lcc;\n \t\tfr = lcc.getTransactionExecute().getFileHandler();\n \t\tdd = lcc.getDataDictionary();\n \t\tddg = dd.getDataDescriptorGenerator();\n \t}\n \n \t/**\n-\t  Add a jar file to the current connection's database.\n+\t  install a jar file to the current connection's database.\n \n \t  @param schemaName the name for the schema that holds the jar file.\n \t  @param sqlName the sql name for the jar file.\n@@ -87,11 +83,12 @@ private JarUtil(String schemaName, String sqlName)\n \n \t  @exception StandardException Opps\n \t  */\n-\tstatic long\n-\tadd(String schemaName, String sqlName, String externalPath)\n+\tpublic static long\n+\tinstall(LanguageConnectionContext lcc,\n+            String schemaName, String sqlName, String externalPath)\n \t\t throws StandardException\n \t{\n-\t\tJarUtil jutil = new JarUtil(schemaName, sqlName);\n+\t\tJarUtil jutil = new JarUtil(lcc, schemaName, sqlName);\n \t\tInputStream is = null;\n \t\t\n \t\ttry {\n@@ -130,7 +127,7 @@ private long add(final InputStream is) throws StandardException\n         try {\n             notifyLoader(false);\n             dd.invalidateAllSPSPlans();\n-            final String jarExternalName = JarDDL.mkExternalName(schemaName,\n+            final String jarExternalName = JarUtil.mkExternalName(schemaName,\n                     sqlName, fr.getSeparatorChar());\n \n             long generationId = setJar(jarExternalName, is, true, 0L);\n@@ -155,11 +152,11 @@ private long add(final InputStream is) throws StandardException\n      * @exception StandardException\n      *                Opps\n      */\n-\tstatic void\n-\tdrop(String schemaName, String sqlName)\n+\tpublic static void\n+\tdrop(LanguageConnectionContext lcc, String schemaName, String sqlName)\n \t\t throws StandardException\n \t{\n-\t\tJarUtil jutil = new JarUtil(schemaName,sqlName);\n+\t\tJarUtil jutil = new JarUtil(lcc, schemaName,sqlName);\n \t\tjutil.drop();\n \t}\n \n@@ -211,7 +208,7 @@ private void drop() throws StandardException\n \n \t\t\tdd.dropFileInfoDescriptor(fid);\n \n-\t\t\tfr.remove(JarDDL.mkExternalName(schemaName, sqlName, fr.getSeparatorChar()),\n+\t\t\tfr.remove(JarUtil.mkExternalName(schemaName, sqlName, fr.getSeparatorChar()),\n \t\t\t\tfid.getGenerationId());\n \t\t} finally {\n \t\t\tnotifyLoader(true);\n@@ -230,12 +227,12 @@ private void drop() throws StandardException\n \n \t  @exception StandardException Opps\n \t  */\n-\tstatic long\n-\treplace(String schemaName, String sqlName,\n+\tpublic static long\n+\treplace(LanguageConnectionContext lcc, String schemaName, String sqlName,\n \t\t\tString externalPath)\n \t\t throws StandardException\n \t{\n-\t\tJarUtil jutil = new JarUtil(schemaName,sqlName);\n+\t\tJarUtil jutil = new JarUtil(lcc, schemaName,sqlName);\n \t\tInputStream is = null;\n \t\t\n \n@@ -280,7 +277,7 @@ private long replace(InputStream is) throws StandardException\n \t\t\tdd.invalidateAllSPSPlans();\n \t\t\tdd.dropFileInfoDescriptor(fid);\n             final String jarExternalName =\n-                JarDDL.mkExternalName(schemaName, sqlName, fr.getSeparatorChar());\n+                JarUtil.mkExternalName(schemaName, sqlName, fr.getSeparatorChar());\n \n \t\t\t//\n \t\t\t//Replace the file.\n@@ -385,4 +382,20 @@ public Object run() throws StandardException {\n             throw (StandardException) e.getException();\n         }\n     }\n+    \n+    /**\n+      Make an external name for a jar file stored in the database.\n+      */\n+    public static String mkExternalName(String schemaName, String sqlName, char separatorChar)\n+    {\n+        StringBuffer sb = new StringBuffer(30);\n+\n+        sb.append(FileResource.JAR_DIRECTORY_NAME);\n+        sb.append(separatorChar);\n+        sb.append(schemaName);\n+        sb.append(separatorChar);\n+        sb.append(sqlName);\n+        sb.append(\".jar\");\n+        return sb.toString();\n+    }\n }"
            },
            {
                "sha": "b53b9009c5d1767258eb58e2cefec505eeb5a83a",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/ReplaceJarConstantAction.java",
                "status": "removed",
                "additions": 0,
                "deletions": 88,
                "changes": 88,
                "blob_url": "https://github.com/apache/derby/blob/4112e91aa432f57850dcb30d302f7642ef9070c7/java/engine/org/apache/derby/impl/sql/execute/ReplaceJarConstantAction.java",
                "raw_url": "https://github.com/apache/derby/raw/4112e91aa432f57850dcb30d302f7642ef9070c7/java/engine/org/apache/derby/impl/sql/execute/ReplaceJarConstantAction.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/ReplaceJarConstantAction.java?ref=4112e91aa432f57850dcb30d302f7642ef9070c7",
                "patch": "@@ -1,88 +0,0 @@\n-/*\n-\n-   Derby - Class org.apache.derby.impl.sql.execute.ReplaceJarConstantAction\n-\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to you under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-      http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n-\n- */\n-\n-package org.apache.derby.impl.sql.execute;\n-\n-import org.apache.derby.iapi.error.StandardException;\n-import org.apache.derby.iapi.sql.Activation;\n-import org.apache.derby.iapi.sql.execute.ConstantAction;\n-/**\n- *\tConstant action to Add an external  Jar file to a database. \n- *\n- */\n-class ReplaceJarConstantAction extends DDLConstantAction\n-{\n-\tprivate final String schemaName;\n-\tprivate final String sqlName;\n-\tprivate final String externalPath;\n-\t//////////////////////////////////////////////////////////////\n-\t//\n-\t// CONSTRUCTORS\n-\t//\n-\t//////////////////////////////////////////////////////////////\n-\n-\t/**\n-\t *\tMake the ConstantAction to replace a jar file in a database.\n-\t *\n-\t *\t@param\tschemaName\t\t\tThe SchemaName for the jar file.\n-\t *\t@param\tsqlName\t\t\t    The sqlName for the jar file.\n-\t *  @param  externalPath            The name of the file that holds the jar.\n-\t */\n-\tReplaceJarConstantAction(\n-\t\t\t\t\t\t\t\t\tString schemaName,\n-\t\t\t\t\t\t\t\t\tString sqlName,\n-\t\t\t\t\t\t\t\t\tString externalPath)\n-\t{\n-\t\tthis.schemaName = schemaName;\n-\t\tthis.sqlName = sqlName;\n-\t\tthis.externalPath = externalPath;\n-\t}\n-\n-\t//////////////////////////////////////////////////////////////\n-\t//\n-\t// OBJECT SHADOWS\n-\t//\n-\t//////////////////////////////////////////////////////////////\n-\n-\tpublic\tString\ttoString()\n-\t{\n-\t\t// Do not put this under SanityManager.DEBUG - it is needed for\n-\t\t// error reporting.\n-\t\treturn \"REPLACE JAR FILE \" + schemaName + \".\" + sqlName;\n-\t}\n-\n-\t//////////////////////////////////////////////////////////////\n-\t//\n-\t// CONSTANT ACTION METHODS\n-\t//\n-\t//////////////////////////////////////////////////////////////\n-\t/**\n-\t * @see ConstantAction#executeConstantAction\n-\t * @exception StandardException Thrown on failure\n-\t */\n-\tpublic void\texecuteConstantAction( Activation activation )\n-\t\t\t\t\t\tthrows StandardException\n-\t{\n-\t\tJarUtil.replace(schemaName,\n-\t\t\t\t\t\t\t\t\t   sqlName,\n-\t\t\t\t\t\t\t\t\t   externalPath);\n-\t}\n-}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/3038d98980493ada1e76f5e5d81c0b27a0c73ab1",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/da5e29674dccd113130ac922ad45ae348aa8ecef",
        "message": "DERBY-1589: CREATE TABLE throws NPE after DROPs and REVOKEs\n\nFKConstraintDefinitionNode, which is the compiler implementation code\nfor the \"foreign key ... references ... \" constraint in the compiler,\nis not properly registering that the statement containing the\nforeign key constraint has a dependency on the table being referenced. Due\nto the lack of the dependency, when the referenced table (t11ConstraintTest)\nis dropped, the statement is not invalidated. \n\nThis patch changes the compiler so that it creates a dependency from\na statement with a FOREIGN KEY clause in it to the table which is\nreferenced by that clause. The patch also contains a simple regression\ntest, based on the original bug.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@447644 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_162",
        "file": [
            {
                "sha": "236ef3a4cfbb3a69b12967e3e483dfccf9b56278",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/FKConstraintDefinitionNode.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/3038d98980493ada1e76f5e5d81c0b27a0c73ab1/java/engine/org/apache/derby/impl/sql/compile/FKConstraintDefinitionNode.java",
                "raw_url": "https://github.com/apache/derby/raw/3038d98980493ada1e76f5e5d81c0b27a0c73ab1/java/engine/org/apache/derby/impl/sql/compile/FKConstraintDefinitionNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/FKConstraintDefinitionNode.java?ref=3038d98980493ada1e76f5e5d81c0b27a0c73ab1",
                "patch": "@@ -107,6 +107,10 @@ protected void bind(DDLStatementNode ddlNode, DataDictionary dd)\tthrows Standard\n \t\t// Verify if REFERENCES_PRIV is granted to columns referenced\n \t\tgetCompilerContext().pushCurrentPrivType(getPrivType());\n \n+\t\t// Indicate that this statement has a dependency on the\n+\t\t// table which is referenced by this foreign key:\n+\t\tgetCompilerContext().createDependency(td);\n+\n \t\t// If references clause doesn't have columnlist, get primary key info\n \t\tif (refRcl.size()==0 && (td.getPrimaryKey() != null))\n \t\t{"
            },
            {
                "sha": "e7032ae1539e323939edd7b03278ab48a30b6e8d",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/grantRevokeDDL.out",
                "status": "modified",
                "additions": 33,
                "deletions": 1,
                "changes": 34,
                "blob_url": "https://github.com/apache/derby/blob/3038d98980493ada1e76f5e5d81c0b27a0c73ab1/java/testing/org/apache/derbyTesting/functionTests/master/grantRevokeDDL.out",
                "raw_url": "https://github.com/apache/derby/raw/3038d98980493ada1e76f5e5d81c0b27a0c73ab1/java/testing/org/apache/derbyTesting/functionTests/master/grantRevokeDDL.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/grantRevokeDDL.out?ref=3038d98980493ada1e76f5e5d81c0b27a0c73ab1",
                "patch": "@@ -3045,4 +3045,36 @@ ij(MAMTA1)> update mamta2.ttt1 set i = 888;\n 2 rows inserted/updated/deleted\n ij(MAMTA1)> commit;\n ij(MAMTA1)> autocommit on;\n-ij(MAMTA1)> \n+ij(MAMTA1)> -- Simple test case for DERBY-1589. The problem here involves dependency\n+-- management between the FOREIGN KEY clause in the CREATE TABLE statement\n+-- and the underlying table that the FK refers to. The statement must\n+-- declare a dependency on the referenced table so that changes to the table\n+-- cause invalidation of the statement's compiled plan. The test case below\n+-- sets up such a situation by dropping the referenced table and recreating\n+-- it and then re-issuing a statement with identical text to one which\n+-- was issued earlier.\n+set connection mamta1;\n+ij(MAMTA1)> create table d1589t11ConstraintTest (c111 int not null, c112 int not null, primary key (c111, c112));\n+0 rows inserted/updated/deleted\n+ij(MAMTA1)> grant references on d1589t11ConstraintTest to mamta3;\n+0 rows inserted/updated/deleted\n+ij(MAMTA1)> set connection mamta3;\n+ij(MAMTA3)> drop table d1589t31ConstraintTest;\n+ERROR: Failed with SQLSTATE 42Y55\n+ij(MAMTA3)> create table d1589t31ConstraintTest (c311 int, c312 int, foreign key(c311, c312) references mamta1.d1589t11ConstraintTest);\n+0 rows inserted/updated/deleted\n+ij(MAMTA3)> drop table d1589t31ConstraintTest;\n+0 rows inserted/updated/deleted\n+ij(MAMTA3)> set connection mamta1;\n+ij(MAMTA1)> drop table d1589t11ConstraintTest;\n+0 rows inserted/updated/deleted\n+ij(MAMTA1)> create table d1589t11ConstraintTest (c111 int not null, c112 int not null, primary key (c111, c112));\n+0 rows inserted/updated/deleted\n+ij(MAMTA1)> grant references(c111) on d1589t11ConstraintTest to mamta3;\n+0 rows inserted/updated/deleted\n+ij(MAMTA1)> grant references(c112) on d1589t11ConstraintTest to PUBLIC;\n+0 rows inserted/updated/deleted\n+ij(MAMTA1)> set connection mamta3;\n+ij(MAMTA3)> create table d1589t31ConstraintTest (c311 int, c312 int, foreign key(c311, c312) references mamta1.d1589t11ConstraintTest);\n+0 rows inserted/updated/deleted\n+ij(MAMTA3)> "
            },
            {
                "sha": "5954f6ea96c58c208b566865955f65176f46d9cb",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/grantRevokeDDL.sql",
                "status": "modified",
                "additions": 24,
                "deletions": 0,
                "changes": 24,
                "blob_url": "https://github.com/apache/derby/blob/3038d98980493ada1e76f5e5d81c0b27a0c73ab1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/grantRevokeDDL.sql",
                "raw_url": "https://github.com/apache/derby/raw/3038d98980493ada1e76f5e5d81c0b27a0c73ab1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/grantRevokeDDL.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/grantRevokeDDL.sql?ref=3038d98980493ada1e76f5e5d81c0b27a0c73ab1",
                "patch": "@@ -1924,3 +1924,27 @@ insert into mamta2.ttt1 values 2;\n update mamta2.ttt1 set i = 888;\n commit;\n autocommit on;\n+\n+-- Simple test case for DERBY-1589. The problem here involves dependency\n+-- management between the FOREIGN KEY clause in the CREATE TABLE statement\n+-- and the underlying table that the FK refers to. The statement must\n+-- declare a dependency on the referenced table so that changes to the table\n+-- cause invalidation of the statement's compiled plan. The test case below\n+-- sets up such a situation by dropping the referenced table and recreating\n+-- it and then re-issuing a statement with identical text to one which\n+-- was issued earlier.\n+\n+set connection mamta1;\n+create table d1589t11ConstraintTest (c111 int not null, c112 int not null, primary key (c111, c112));\n+grant references on d1589t11ConstraintTest to mamta3;\n+set connection mamta3;\n+drop table d1589t31ConstraintTest;\n+create table d1589t31ConstraintTest (c311 int, c312 int, foreign key(c311, c312) references mamta1.d1589t11ConstraintTest);\n+drop table d1589t31ConstraintTest;\n+set connection mamta1;\n+drop table d1589t11ConstraintTest;\n+create table d1589t11ConstraintTest (c111 int not null, c112 int not null, primary key (c111, c112));\n+grant references(c111) on d1589t11ConstraintTest to mamta3;\n+grant references(c112) on d1589t11ConstraintTest to PUBLIC;\n+set connection mamta3;\n+create table d1589t31ConstraintTest (c311 int, c312 int, foreign key(c311, c312) references mamta1.d1589t11ConstraintTest); "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/a36fdb788ce7b9f2bec78784e44dc11150571af2",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/7e6c096e654c91ba87c641a1ebb5d0697e9eddcf",
        "message": "DERBY-374\n\nInvalid URL with Derby Client when connecting to Network Server causes protocol exception.\n\nThis patch does the following:\n\n1. Network server used to give NPE when InternalDriver returns null connection for certain malformed URLs. With this patch, network server checks for null connections returned by InternalDriver and returns RDBAFLRM and SQLCARD with null SQLException.\n2. The client parses the SQLCARD and if finds null SQLException, it sets connectionNull variable in NetConnection to true.\n3. ClientDriver connect method, which calls the constructor of NetConnection, gets back an object with connectionNull set to true. And it inturn returns null connection.\n4. Added tests to checkDriver.java for more Client URLs. \n\nContributed by Deepa Remesh\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@292917 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_163",
        "file": [
            {
                "sha": "dbe30e600703832e0d9cfdc7fb5b1cdcc86870d2",
                "filename": "java/client/org/apache/derby/client/net/NetConnection.java",
                "status": "modified",
                "additions": 22,
                "deletions": 1,
                "changes": 23,
                "blob_url": "https://github.com/apache/derby/blob/a36fdb788ce7b9f2bec78784e44dc11150571af2/java/client/org/apache/derby/client/net/NetConnection.java",
                "raw_url": "https://github.com/apache/derby/raw/a36fdb788ce7b9f2bec78784e44dc11150571af2/java/client/org/apache/derby/client/net/NetConnection.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/net/NetConnection.java?ref=a36fdb788ce7b9f2bec78784e44dc11150571af2",
                "patch": "@@ -128,6 +128,13 @@\n \n     // stored the password for deferred reset only.\n     private transient char[] deferredResetPassword_ = null;\n+    \n+    //If Network Server gets null connection from the embedded driver, \n+    //it sends RDBAFLRM followed by SQLCARD with null SQLException.\n+    //Client will parse the SQLCARD and set connectionNull to true if the\n+    //SQLCARD is empty. If connectionNull=true, connect method in \n+    //ClientDriver will in turn return null connection.\n+    private boolean connectionNull = false;\n \n     private void setDeferredResetPassword(String password) {\n         deferredResetPassword_ = (password == null) ? null : flipBits(password.toCharArray());\n@@ -186,7 +193,8 @@ public NetConnection(NetLogWriter netLogWriter,\n         String password = ClientDataSource.getPassword(properties);\n         securityMechanism_ = ClientDataSource.getSecurityMechanism(properties);\n         flowConnect(password, securityMechanism_);\n-        completeConnect();\n+        if(!isConnectionNull())\n+        \tcompleteConnect();\n     }\n \n     // For JDBC 2 Connections\n@@ -1502,5 +1510,18 @@ public void doResetNow() throws SqlException {\n         agent_.flowOutsideUOW();\n         agent_.endReadChain();\n     }\n+    \n+\t/**\n+\t * @return Returns the connectionNull.\n+\t */\n+\tpublic boolean isConnectionNull() {\n+\t\treturn connectionNull;\n+\t}\n+\t/**\n+\t * @param connectionNull The connectionNull to set.\n+\t */\n+\tpublic void setConnectionNull(boolean connectionNull) {\n+\t\tthis.connectionNull = connectionNull;\n+\t}\n }\n "
            },
            {
                "sha": "5712e62db994f0d9cb1aac9a147b988ec2002270",
                "filename": "java/client/org/apache/derby/client/net/NetConnectionReply.java",
                "status": "modified",
                "additions": 6,
                "deletions": 1,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/a36fdb788ce7b9f2bec78784e44dc11150571af2/java/client/org/apache/derby/client/net/NetConnectionReply.java",
                "raw_url": "https://github.com/apache/derby/raw/a36fdb788ce7b9f2bec78784e44dc11150571af2/java/client/org/apache/derby/client/net/NetConnectionReply.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/client/net/NetConnectionReply.java?ref=a36fdb788ce7b9f2bec78784e44dc11150571af2",
                "patch": "@@ -485,7 +485,12 @@ void parseRdbAccessFailed(NetConnection netConnection) throws DisconnectExceptio\n         }\n \n         NetSqlca netSqlca = parseSQLCARD(null);\n-        netConnection.completeSqlca(netSqlca);\n+        \n+        //Check if the SQLCARD has null SQLException\n+        if(netSqlca.getSqlErrmc() == null)\n+        \tnetConnection.setConnectionNull(true);\n+        else\n+        \tnetConnection.completeSqlca(netSqlca);\n     }\n \n "
            },
            {
                "sha": "3480b28797b09e0343d7e2ad2e6cdd2f8542aa01",
                "filename": "java/client/org/apache/derby/jdbc/ClientDriver.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/a36fdb788ce7b9f2bec78784e44dc11150571af2/java/client/org/apache/derby/jdbc/ClientDriver.java",
                "raw_url": "https://github.com/apache/derby/raw/a36fdb788ce7b9f2bec78784e44dc11150571af2/java/client/org/apache/derby/jdbc/ClientDriver.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/client/org/apache/derby/jdbc/ClientDriver.java?ref=a36fdb788ce7b9f2bec78784e44dc11150571af2",
                "patch": "@@ -129,6 +129,10 @@ public ClientDriver() {\n                         port,\n                         database,\n                         augmentedProperties);\n+        \n+        if(conn.isConnectionNull())\n+        \treturn null;\n+        \n         return conn;\n     }\n "
            },
            {
                "sha": "5e5ae33f6b1fd4fa8d7e2633ce01a32fb7142815",
                "filename": "java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "status": "modified",
                "additions": 29,
                "deletions": 28,
                "changes": 57,
                "blob_url": "https://github.com/apache/derby/blob/a36fdb788ce7b9f2bec78784e44dc11150571af2/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "raw_url": "https://github.com/apache/derby/raw/a36fdb788ce7b9f2bec78784e44dc11150571af2/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java?ref=a36fdb788ce7b9f2bec78784e44dc11150571af2",
                "patch": "@@ -973,6 +973,13 @@ private boolean parseDRDAConnection() throws DRDAProtocolException\n \t\tverifyRequiredObject(codePoint,CodePoint.ACCRDB);\n \t\tint svrcod = parseACCRDB();\n \n+\t\t//If network server gets a null connection form InternalDriver, reply with\n+\t\t//RDBAFLRM and SQLCARD with null SQLException \n+\t\tif(database.getConnection() == null && databaseAccessException == null){\n+\t\t\twriteRDBfailure(CodePoint.RDBAFLRM);\n+\t\t\treturn false;\n+\t\t}\t\t\n+\t\t\n \t\t//if earlier we couldn't access the database\n \t\tif (databaseAccessException != null)\n \t\t{\n@@ -983,43 +990,16 @@ private boolean parseDRDAConnection() throws DRDAProtocolException\n \t\t\t\t|| failureType == CodePoint.RDBATHRM)\n \t\t\t{\n \t\t\t\twriteRDBfailure(failureType);\n-\t\t\t\twriteSQLCARD(databaseAccessException,\n-\t\t\t\t\tCodePoint.SVRCOD_ERROR,0,0);\n \t\t\t}\n \t\t\telse\n \t\t\t{\n \t\t\t\twriteRDBfailure(CodePoint.RDBAFLRM);\n-\n-\t\t\t\t// RDBAFLRM requires TYPDEFNAM and TYPDEFOVR\n-\t\t\t\twriter.createDssObject();\n-\t\t\t\twriter.writeScalarString(CodePoint.TYPDEFNAM,\n-\t\t\t\t\t\t\t\t\t\t CodePoint.TYPDEFNAM_QTDSQLASC);\n-\t\t\t\twriteTYPDEFOVR();\n-\t\t\t\twriter.endDss();\n-\n-\t\t\t\t// Finally, per DDM spec, \"an SQLCARD always follows\n-\t\t\t\t// the RDBAFLRM\".\n-\t\t\t\twriteSQLCARD(databaseAccessException,\n-\t\t\t\t\t\t\t CodePoint.SVRCOD_ERROR,0,0);\n \t\t\t}\n-\n-\t\t\t// Ignore anything that was chained to the ACCRDB.\n-\t\t\tskipRemainder(false);\n-\n-\t\t\t// Finalize chain state for whatever we wrote in\n-\t\t\t// response to ACCRDB.\n-\t\t\tfinalizeChain();\n \t\t\treturn false;\n \t\t}\n \t\telse if (database.accessCount > 1 )\t// already in conversation with database\n \t\t{\n \t\t\twriteRDBfailure(CodePoint.RDBACCRM);\n-\n-\t\t\t// Ignore anything that was chained to the ACCRDB.\n-\t\t\tskipRemainder(false);\n-\n-\t\t\t// Finalize chain state for RDBACCRM\n-\t\t\tfinalizeChain();\n \t\t\treturn false;\n \t\t}\n \t\telse // everything is fine \n@@ -1049,7 +1029,28 @@ private void writeRDBfailure(int codePoint) throws DRDAProtocolException\n \t\twriter.writeScalar2Bytes(CodePoint.SVRCOD, CodePoint.SVRCOD_ERROR);\n \t\twriteRDBNAM(database.dbName);\n     \twriter.endDdmAndDss();\n-\n+    \t\n+    \tswitch(codePoint){\n+    \t\tcase CodePoint.RDBAFLRM:\n+    \t\t\t//RDBAFLRM requires TYPDEFNAM and TYPDEFOVR\n+    \t\t\twriter.createDssObject();\n+    \t\t\twriter.writeScalarString(CodePoint.TYPDEFNAM,\n+    \t\t\t\t\t\t\t\t\t CodePoint.TYPDEFNAM_QTDSQLASC);\n+    \t\t\twriteTYPDEFOVR();\n+    \t\t\twriter.endDss();\n+    \t\tcase CodePoint.RDBNFNRM:\n+    \t\tcase CodePoint.RDBATHRM:\n+    \t\t\twriteSQLCARD(databaseAccessException,CodePoint.SVRCOD_ERROR,0,0);\n+    \t\tcase CodePoint.RDBACCRM:\n+    \t\t\t//Ignore anything that was chained to the ACCRDB.\n+    \t\t\tskipRemainder(false);\n+\n+    \t\t\t// Finalize chain state for whatever we wrote in\n+    \t\t\t// response to ACCRDB.\n+    \t\t\tfinalizeChain();\n+    \t\t\tbreak;\n+    \t}\n+    \t\n \t}\n \n \t/* Check the database access exception and return the appropriate"
            },
            {
                "sha": "2e7981d869aea67a2d88e9a9bdcbb3b94b60a268",
                "filename": "java/drda/org/apache/derby/impl/drda/Database.java",
                "status": "modified",
                "additions": 7,
                "deletions": 4,
                "changes": 11,
                "blob_url": "https://github.com/apache/derby/blob/a36fdb788ce7b9f2bec78784e44dc11150571af2/java/drda/org/apache/derby/impl/drda/Database.java",
                "raw_url": "https://github.com/apache/derby/raw/a36fdb788ce7b9f2bec78784e44dc11150571af2/java/drda/org/apache/derby/impl/drda/Database.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/Database.java?ref=a36fdb788ce7b9f2bec78784e44dc11150571af2",
                "patch": "@@ -116,7 +116,8 @@ protected void setConnection(Connection conn)\n \t\tthrows SQLException\n \t{\n \t\tthis.conn = conn;\n-\t\tdefaultStatement.setStatement(conn);\n+\t\tif(conn != null)\n+\t\t\tdefaultStatement.setStatement(conn);\n \t}\n \t/**\n \t * Get the connection\n@@ -245,9 +246,11 @@ protected Connection makeConnection(Properties p) throws SQLException\n                 // take care of case of SECMEC_USRIDONL\n                 if(password != null) \n \t\t    p.put(Attribute.PASSWORD_ATTR, password);\n-\t\tConnection conn = NetworkServerControlImpl.getDriver().connect(Attribute.PROTOCOL\n-\t\t\t\t\t\t\t + dbName + attrString, p);\n-\t\tconn.setAutoCommit(false);\n+        Connection conn = NetworkServerControlImpl.getDriver().connect(Attribute.PROTOCOL\n+\t\t\t\t\t\t\t + shortDbName + attrString, p);\n+\t\tif(conn != null){\n+\t\t\tconn.setAutoCommit(false);\n+\t\t}\n \t\tsetConnection(conn);\n \t\treturn conn;\n \t}"
            },
            {
                "sha": "5c79c437137664141dfd4d76debbf69fbae232fe",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/checkDriver.out",
                "status": "modified",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/a36fdb788ce7b9f2bec78784e44dc11150571af2/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/checkDriver.out",
                "raw_url": "https://github.com/apache/derby/raw/a36fdb788ce7b9f2bec78784e44dc11150571af2/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/checkDriver.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/checkDriver.out?ref=a36fdb788ce7b9f2bec78784e44dc11150571af2",
                "patch": "@@ -42,3 +42,20 @@ getURL() = jdbc:derby://localhost:1527/testpropdb;traceFile=[DERBY_SYSTEM_HOME]/\n getUserName() = APP\n CURRENT SCHEMA = APP\n  trace file exists\n+doClientURLTest()\n+doClientURLTest with url: jdbc:derby://localhost:1527/wombat:create=true\n+Null connection returned for url jdbc:derby://localhost:1527/wombat:create=true\n+doClientURLTest with url: jdbc:derby://localhost:1527/[DERBY_SYSTEM_HOME]/wombat:create=true\n+EXPECTED EXCEPTION:DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ040, SQLERRMC: Failed to start database '[DERBY_SYSTEM_HOME]/wombat:create=true', see the next exception for details.::SQLSTATE: XJ001Java exception: 'The filename, directory name, or volume label syntax is incorrect: java.io.IOException'.\n+doClientURLTest with url: jdbc:derby://localhost:1527/\"wombat\";create=true\n+EXPECTED EXCEPTION:DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ041, SQLERRMC: Failed to create database '\"wombat\"', see the next exception for details.::SQLSTATE: XBM0HDirectory [DERBY_SYSTEM_HOME]/\"wombat\" cannot be created.\n+doClientURLTest with url: jdbc:derby://localhost:1527/\"[DERBY_SYSTEM_HOME]/wombat\";create=true\n+Null connection returned for url jdbc:derby://localhost:1527/\"[DERBY_SYSTEM_HOME]/wombat\";create=true\n+doClientURLTest with url: jdbc:derby://localhost:1527/'[DERBY_SYSTEM_HOME]/wombat';create=true\n+Null connection returned for url jdbc:derby://localhost:1527/'[DERBY_SYSTEM_HOME]/wombat';create=true\n+doClientURLTest with url: jdbc:derby://localhost:1527/'wombat';create=true\n+Connection info for connect(jdbc:derby://localhost:1527/'wombat';create=true, null)\n+getURL() = jdbc:derby://localhost:1527/'wombat';create=true\n+getUserName() = APP\n+CURRENT SCHEMA = APP\n+PASSED:Connection Successful with url: jdbc:derby://localhost:1527/'wombat';create=true"
            },
            {
                "sha": "cb138fa0dea1af7ff8131550557304036fe6bafc",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java",
                "status": "modified",
                "additions": 59,
                "deletions": 2,
                "changes": 61,
                "blob_url": "https://github.com/apache/derby/blob/a36fdb788ce7b9f2bec78784e44dc11150571af2/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java",
                "raw_url": "https://github.com/apache/derby/raw/a36fdb788ce7b9f2bec78784e44dc11150571af2/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java?ref=a36fdb788ce7b9f2bec78784e44dc11150571af2",
                "patch": "@@ -49,6 +49,19 @@\n \t\n \tprivate static String DERBY_SYSTEM_HOME = System.getProperty(\"derby.system.home\");\n \t\n+\tprivate static String CLIENT_URL_WITH_COLON1 = \n+\t\t\"jdbc:derby://localhost:1527/wombat:create=true\";\n+\tprivate static String CLIENT_URL_WITH_COLON2 = \n+\t\t\"jdbc:derby://localhost:1527/\"+ DERBY_SYSTEM_HOME + File.separator +\"wombat:create=true\";\n+\tprivate static String CLIENT_URL_WITH_DOUBLE_QUOTES1 = \n+\t\t\"jdbc:derby://localhost:1527/\\\"wombat\\\";create=true\"; \n+\tprivate static String CLIENT_URL_WITH_DOUBLE_QUOTES2 = \n+\t\t\"jdbc:derby://localhost:1527/\\\"\" + DERBY_SYSTEM_HOME + File.separator + \"wombat\\\";create=true\";\n+\tprivate static String CLIENT_URL_WITH_SINGLE_QUOTES1 = \n+\t\t\"jdbc:derby://localhost:1527/'\" + DERBY_SYSTEM_HOME + File.separator + \"wombat';create=true\";\n+\tprivate static String CLIENT_URL_WITH_SINGLE_QUOTES2 = \n+\t\t\"jdbc:derby://localhost:1527/'wombat';create=true\";\n+\t\n \t// URLS to check.  New urls need to also be added to the acceptsUrl table\n \tprivate static String[] urls = new String[]\n \t{\n@@ -58,6 +71,16 @@\n \t\tINVALID_URL,\n \t};\n \t\n+\t//Client URLS\n+\tprivate static String[] clientUrls = new String[]\n+\t{\n+\t\tCLIENT_URL_WITH_COLON1,\n+\t\tCLIENT_URL_WITH_COLON2,\n+\t\tCLIENT_URL_WITH_DOUBLE_QUOTES1,\n+\t\tCLIENT_URL_WITH_DOUBLE_QUOTES2,\n+\t\tCLIENT_URL_WITH_SINGLE_QUOTES1,\n+\t\tCLIENT_URL_WITH_SINGLE_QUOTES2\n+\t};\n \t\n \t/**\n \t * url prefix for this framework\n@@ -102,6 +125,7 @@ public static void main(String[] args) {\n \t\t\tcheckAcceptsURL(driver);\n \t\t\ttestEmbeddedAttributes(driver);\n \t\t\ttestClientAttributes(driver);\n+\t\t\tdoClientURLTest(driver);\n \t\t}\n \t\tcatch (SQLException se)\n \t\t{\n@@ -320,6 +344,34 @@ private static void assertExpectedURLAcceptance(String url, boolean expectedAcce\n \n \t}\n \t\n+\t/**\n+\t * Tests client URLs to see connection is successful or the correct exception is thrown.\n+\t * \n+\t * @param driver\n+\t * @throws SQLException\n+\t */\n+\tprivate static void doClientURLTest(Driver driver){\n+\t\tif (!TestUtil.isDerbyNetClientFramework())\n+\t\t\treturn;\n+\t\t\n+\t\tSystem.out.println(\"doClientURLTest()\");\n+\t\tProperties info = null;\t\t//test with null Properties object\n+\n+\t\tfor (int i = 0; i < clientUrls.length;i++)\n+\t\t{\n+\t\t\tString url = clientUrls[i];\n+\t\t\tSystem.out.println(\"doClientURLTest with url: \" + replaceSystemHome(url));\n+\t\t\ttry{\n+\t\t\t\tConnection conn = testConnect(driver,url,info);\n+\t\t\t\tif(conn != null)\n+\t\t\t\t\tSystem.out.println(\"PASSED:Connection Successful with url: \" + replaceSystemHome(url) );\n+\t\t\t}\n+\t\t\tcatch(SQLException se){\n+\t\t\t\tSystem.out.println(\"EXPECTED EXCEPTION:\"+replaceSystemHome(se.getMessage()));\n+\t\t\t}\n+\t\t}\n+\t}\t\n+\t\n \t/**\n \t * Make  java.sql.Driver.connect(String url, Properties info call) and print the status of\n \t * the connection.\n@@ -330,14 +382,19 @@ private static void assertExpectedURLAcceptance(String url, boolean expectedAcce\n \t * \n \t * @throws SQLException on error.\n \t */\n-\tprivate static void testConnect(Driver driver, String url, Properties info) throws SQLException\n+\tprivate static Connection testConnect(Driver driver, String url, Properties info) throws SQLException\n \t{\n \t\tString infoString = null;\n \t\tif (info != null)\n \t\t\tinfoString = replaceSystemHome(info.toString());\n \t\tString urlString = replaceSystemHome(url);\n \t\tConnection conn = driver.connect(url,info);\n \t\t\n+\t\tif(conn == null){\n+\t\t\tSystem.out.println(\"Null connection returned for url \"+urlString);\n+\t\t\treturn conn;\n+\t\t}\n+\t\t\n \t\tSystem.out.println(\"\\nConnection info for connect(\" + urlString + \", \" + infoString +\")\");\n \t\tString getUrlValue = conn.getMetaData().getURL();\n \t\t// URL may include path of DERBY_SYSTEM_HOME for traceFile\n@@ -350,7 +407,7 @@ private static void testConnect(Driver driver, String url, Properties info) thro\n \t\trs.next();\n \t\tSystem.out.println(\"CURRENT SCHEMA = \" + rs.getString(1));\n \t\tconn.close();\n-\n+\t\treturn conn;\n \t}\n \n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/fc4e76b6bb64d3eeb14d66597b22ee034d50d929",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/ce68ae0584f5d68216c9b68d90c1b39e45d6f198",
        "message": "DERBY-3358: After an incorrect(unsuccesfull) startMaster comand, further correct startMaster attempts also fail.\nContributed by V Narayanan.\nM java/engine/org/apache/derby/impl/services/replication/master/MasterController.java\n* Added a variable boolean that indicates whether the master controller is currently running or has\n  been stopped. I thought I could manage with the earlier boolean variable stopMasterController but\n  decided against it because it seemed more tied with the stopMaster operation.\n* moved start up parameter initialization from boot to startMaster method. \n* changed the startMaster, stopMaster and the startFailover methods to take into account the boolean\n  active.\n* replaced the earlier uses of stopMasterController with active.\n  \nM java/engine/org/apache/derby/impl/store/raw/RawStore.java\n* The replication properties that are part of the bootServiceModule call no longer contain the\n  startup parameters. These have instead been moved to the startMaster method.\n* The replicationProps are empty and not null because a null passed to a bootServiceModule call\n  results in a NullPointerException.\n\nM java/engine/org/apache/derby/iapi/services/replication/master/MasterFactory.java\n* Changed the startMaster declaration to now accept the startup parameters as the method arguments.\n\nM java/engine/org/apache/derby/loc/messages.xml\nM java/shared/org/apache/derby/shared/common/reference/SQLState.java\n* Added a new messages for the case when the master has already been booted.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@634218 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_164",
        "file": [
            {
                "sha": "3712cf38f4228232b6453deb9d00d16fe3227020",
                "filename": "java/engine/org/apache/derby/iapi/services/replication/master/MasterFactory.java",
                "status": "modified",
                "additions": 14,
                "deletions": 16,
                "changes": 30,
                "blob_url": "https://github.com/apache/derby/blob/fc4e76b6bb64d3eeb14d66597b22ee034d50d929/java/engine/org/apache/derby/iapi/services/replication/master/MasterFactory.java",
                "raw_url": "https://github.com/apache/derby/raw/fc4e76b6bb64d3eeb14d66597b22ee034d50d929/java/engine/org/apache/derby/iapi/services/replication/master/MasterFactory.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/services/replication/master/MasterFactory.java?ref=fc4e76b6bb64d3eeb14d66597b22ee034d50d929",
                "patch": "@@ -73,19 +73,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n         \"org.apache.derby.iapi.services.replication.master.MasterFactory\";\n \n     /* Property names that are used as key values in the Properties objects*/\n-\n-    /** Property key used to specify which slave host to connect to */\n-    public static final String SLAVE_HOST =\n-        Property.PROPERTY_RUNTIME_PREFIX + \"replication.master.slavehost\";\n-\n-    /** Property key to specify which slave port to connect to */\n-    public static final String SLAVE_PORT =\n-        Property.PROPERTY_RUNTIME_PREFIX + \"replication.master.slaveport\";\n     \n-    /** Property key to specify the name of the database */\n-    public static final String MASTER_DB =\n-        Property.PROPERTY_RUNTIME_PREFIX + \"replication.master.dbname\";\n-\n     /** Property key to specify replication mode */\n     public static final String REPLICATION_MODE =\n         Property.PROPERTY_RUNTIME_PREFIX + \"replication.master.mode\";\n@@ -108,17 +96,27 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n      * @param rawStore The RawStoreFactory for the database\n      * @param dataFac The DataFactory for this database\n      * @param logFac The LogFactory ensuring recoverability for this database\n+     * @param slavehost The hostname for the slave\n+     * @param slaveport The port the slave is listening on\n+     * @param dbname The master database that is being replicated.\n      * @exception StandardException Standard Derby exception policy,\n      * thrown on replication startup error. \n      */\n     public void startMaster(RawStoreFactory rawStore,\n-                            DataFactory dataFac, LogFactory logFac)\n-        throws StandardException;\n+                            DataFactory dataFac,\n+                            LogFactory logFac,\n+                            String slavehost,\n+                            int slaveport,\n+                            String dbname)\n+                            throws StandardException;\n \n     /**\n-     * Will perform all work that is needed to shut down replication\n+     * Will perform all work that is needed to shut down replication.\n+     *\n+     * @throws StandardException If the replication master has been stopped\n+     *                           already.\n      */\n-    public void stopMaster();\n+    public void stopMaster() throws StandardException;\n     \n     /**\n      * Will perform all work needed to failover"
            },
            {
                "sha": "209760607715ff1fb13788a1845786367d9a3254",
                "filename": "java/engine/org/apache/derby/impl/services/replication/master/MasterController.java",
                "status": "modified",
                "additions": 71,
                "deletions": 28,
                "changes": 99,
                "blob_url": "https://github.com/apache/derby/blob/fc4e76b6bb64d3eeb14d66597b22ee034d50d929/java/engine/org/apache/derby/impl/services/replication/master/MasterController.java",
                "raw_url": "https://github.com/apache/derby/raw/fc4e76b6bb64d3eeb14d66597b22ee034d50d929/java/engine/org/apache/derby/impl/services/replication/master/MasterController.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/services/replication/master/MasterController.java?ref=fc4e76b6bb64d3eeb14d66597b22ee034d50d929",
                "patch": "@@ -76,8 +76,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n     private int slaveport;\n     private String dbname;\n     \n-    //Set to true when stopMaster is called\n-    private boolean stopMasterController = false;\n+    //Indicates whether the Master Controller is currently\n+    //active\n+    private boolean active = false;\n \n     //How long to wait before reporting the failure to\n     //establish a connection with the slave.\n@@ -95,33 +96,26 @@ public MasterController() { }\n     ////////////////////////////////////////////////////////////\n \n     /**\n-     * Used by Monitor.bootServiceModule to start the service. Will:\n-     *\n-     * Set up basic variables\n-     * Connect to the slave using the network service (DERBY-2921)\n-     *\n-     * Not implemented yet\n+     * Used by Monitor.bootServiceModule to start the service. Currently\n+     * only used to set up the replication mode.\n      *\n      * @param create Currently ignored\n      * @param properties Properties used to start the service in the\n-     * correct mode\n+     *                   correct mode. Currently initializes only the\n+     *                   replicationMode property.\n      * @exception StandardException Standard Derby exception policy,\n      * thrown on error.\n      */\n     public void boot(boolean create, Properties properties)\n         throws StandardException {\n-\n+        //The boot method is loaded only once, because of that the\n+        //boot time parameters once wrong would result in repeated\n+        //startMaster attempts failing. In order to allow for\n+        //multiple start master attempts the slave host name, port\n+        //number and the dbname have been moved to the startMaster\n+        //method.\n         replicationMode =\n             properties.getProperty(MasterFactory.REPLICATION_MODE);\n-\n-        slavehost = properties.getProperty(MasterFactory.SLAVE_HOST);\n-\n-        String port = properties.getProperty(MasterFactory.SLAVE_PORT);\n-        if (port != null) {\n-            slaveport = new Integer(port).intValue();\n-        }\n-\n-        dbname = properties.getProperty(MasterFactory.MASTER_DB);\n     }\n \n     ////////////////////////////////////////////////////////////////\n@@ -171,13 +165,34 @@ public void stop() { }\n      * @param rawStore The RawStoreFactory for the database\n      * @param dataFac The DataFactory for this database\n      * @param logFac The LogFactory ensuring recoverability for this database\n+     * @param slavehost The hostname of the slave\n+     * @param slaveport The port the slave is listening on\n+     * @param dbname The master database that is being replicated.\n      * @exception StandardException Standard Derby exception policy,\n-     * thrown on replication startup error. \n+     *                              1) thrown on replication startup error\n+     *                              2) thrown if the master has already been\n+     *                                 booted.\n+     *                              3) thrown if the specified replication mode\n+     *                                 is not supported.\n      */\n     public void startMaster(RawStoreFactory rawStore,\n-                            DataFactory dataFac, LogFactory logFac) \n+                            DataFactory dataFac,\n+                            LogFactory logFac,\n+                            String slavehost,\n+                            int slaveport,\n+                            String dbname)\n                             throws StandardException {\n-        stopMasterController = false;\n+        if (active) {\n+            //It is wrong to attempt startMaster on a already\n+            //started master.\n+            throw StandardException.newException\n+                    (SQLState.REPLICATION_MASTER_ALREADY_BOOTED, dbname);\n+        }\n+\n+        this.slavehost = slavehost;\n+        this.slaveport = new Integer(slaveport).intValue();\n+        this.dbname = dbname;\n+\n         rawStoreFactory = rawStore;\n         dataFactory = dataFac;\n         logFactory = logFac;\n@@ -206,6 +221,9 @@ public void startMaster(RawStoreFactory rawStore,\n             throw se;\n         }\n \n+        //The master has been started successfully.\n+        active = true;\n+\n         // Add code that initializes replication by sending the\n         // database to the slave, making logFactory add logrecords to\n         // the buffer etc. Repliation should be up and running when\n@@ -215,10 +233,17 @@ public void startMaster(RawStoreFactory rawStore,\n     }\n \n     /**\n-     * Will perform all work that is needed to shut down replication\n+     * Will perform all work that is needed to shut down replication.\n+     *\n+     * @throws StandardException If the replication master has been stopped\n+     *                           already.\n      */\n-    public void stopMaster() {\n-        stopMasterController = true;\n+    public void stopMaster() throws StandardException {\n+        if (!active) {\n+            throw StandardException.newException\n+                    (SQLState.REPLICATION_NOT_IN_MASTER_MODE);\n+        }\n+        active = false;\n         logFactory.stopReplicationMasterRole();\n         try {\n             logShipper.flushBuffer();\n@@ -240,11 +265,22 @@ public void stopMaster() {\n      * @see org.apache.derby.iapi.services.replication.master.MasterFactory#startFailover()\n      */\n     public void startFailover() throws StandardException {\n+        if (!active) {\n+            //It is not correct to stop the master and then attempt a failover.\n+            //The control would come here because the master module is already\n+            //loaded and a findService for the master module will not fail. But\n+            //since this module has been stopped failover does not suceed.\n+            throw StandardException.newException\n+                    (SQLState.REPLICATION_NOT_IN_MASTER_MODE);\n+        }\n+\n         //acknowledgment returned from the slave containing\n         //the status of the failover performed.\n         ReplicationMessage ack = null;\n         \n-        stopMasterController = true;\n+        //A failover stops the master controller and shuts down\n+        //the master database.\n+        active = false;\n         \n         //freeze the database to stop clients when this command is received\n         rawStoreFactory.freeze();\n@@ -431,7 +467,7 @@ void handleExceptions(Exception exception) {\n                          exception, dbname);\n             Monitor.logTextMessage(MessageId.REPLICATION_MASTER_RECONN, dbname);\n             \n-            while (!stopMasterController) {\n+            while (active) {\n                 try {\n                     transmitter = new ReplicationMessageTransmit\n                             (slavehost, slaveport);\n@@ -473,7 +509,14 @@ void handleExceptions(Exception exception) {\n     private void printStackAndStopMaster(Throwable t) {\n         ReplicationLogger.\n             logError(MessageId.REPLICATION_LOGSHIPPER_EXCEPTION, t, dbname);\n-        stopMaster();\n+        try {\n+            stopMaster();\n+        } catch (Throwable t_stopmaster) {\n+            //The stop master threw an exception saying the replication\n+            //has been stopped already.\n+            ReplicationLogger.\n+                logError(MessageId.REPLICATION_MASTER_STOPPED, t, dbname);\n+        }\n     }\n     \n     /**"
            },
            {
                "sha": "cee18d7053985a4f8f3817738c44c89d75377e91",
                "filename": "java/engine/org/apache/derby/impl/store/raw/RawStore.java",
                "status": "modified",
                "additions": 2,
                "deletions": 5,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/fc4e76b6bb64d3eeb14d66597b22ee034d50d929/java/engine/org/apache/derby/impl/store/raw/RawStore.java",
                "raw_url": "https://github.com/apache/derby/raw/fc4e76b6bb64d3eeb14d66597b22ee034d50d929/java/engine/org/apache/derby/impl/store/raw/RawStore.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/store/raw/RawStore.java?ref=fc4e76b6bb64d3eeb14d66597b22ee034d50d929",
                "patch": "@@ -487,18 +487,15 @@ public void startReplicationMaster(String dbmaster, String host, int port,\n         }\n \n         Properties replicationProps = new Properties();\n-        replicationProps.setProperty(MasterFactory.MASTER_DB, dbmaster);\n-        replicationProps.setProperty(MasterFactory.SLAVE_HOST, host);\n-        replicationProps.setProperty(MasterFactory.SLAVE_PORT,\n-                                     new Integer(port).toString());\n \n         replicationProps.setProperty(MasterFactory.REPLICATION_MODE,\n                                      replicationMode);\n \n         MasterFactory masterFactory = (MasterFactory)\n             Monitor.bootServiceModule(true, this, getMasterFactoryModule(),\n                                       replicationProps);\n-        masterFactory.startMaster(this, dataFactory, logFactory);\n+        masterFactory.startMaster(this, dataFactory, logFactory,\n+                host, port, dbmaster);\n \n     }\n     "
            },
            {
                "sha": "7ab7c3b059195cbe49737c508a59c48eb79b8bc2",
                "filename": "java/engine/org/apache/derby/loc/messages.xml",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/fc4e76b6bb64d3eeb14d66597b22ee034d50d929/java/engine/org/apache/derby/loc/messages.xml",
                "raw_url": "https://github.com/apache/derby/raw/fc4e76b6bb64d3eeb14d66597b22ee034d50d929/java/engine/org/apache/derby/loc/messages.xml",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/loc/messages.xml?ref=fc4e76b6bb64d3eeb14d66597b22ee034d50d929",
                "patch": "@@ -4846,6 +4846,12 @@ ln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-316\n                 <arg>dbname</arg>\n             </msg>\n \n+            <msg>\n+                <name>XRE22</name>\n+                <text>Replication master has already been booted for database '{0}'</text>\n+                <arg>dbname</arg>\n+            </msg>\n+\n             <msg>\n                 <name>XRE40</name>\n                 <text>Could not perform operation because the database is not in replication slave mode.</text>"
            },
            {
                "sha": "2e602205472dda5833920cd7300c88b0437f29a4",
                "filename": "java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/fc4e76b6bb64d3eeb14d66597b22ee034d50d929/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "raw_url": "https://github.com/apache/derby/raw/fc4e76b6bb64d3eeb14d66597b22ee034d50d929/java/shared/org/apache/derby/shared/common/reference/SQLState.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/shared/org/apache/derby/shared/common/reference/SQLState.java?ref=fc4e76b6bb64d3eeb14d66597b22ee034d50d929",
                "patch": "@@ -1785,6 +1785,7 @@ The message identifier (ie. the value that matches a field in this class)\n     String REPLICATION_UNEXPECTED_MESSAGEID                        = \"XRE12\";\n     String REPLICATION_FAILOVER_SUCCESSFUL                         = \"XRE20.D\";\n     String REPLICATION_FAILOVER_UNSUCCESSFUL                       = \"XRE21\";\n+    String REPLICATION_MASTER_ALREADY_BOOTED                       = \"XRE22\";\n     String REPLICATION_NOT_IN_SLAVE_MODE                           = \"XRE40\";\n     String SLAVE_OPERATION_DENIED_WHILE_CONNECTED                  = \"XRE41\";\n     String REPLICATION_SLAVE_SHUTDOWN_OK                           = \"XRE42\";"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/45c3f035c3308aa68a499bbf9953da2ff1aa9fb4",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/4c5705aecf63ebc51d312e9b92d62688016ae0ff",
        "message": "DERBY-3175: NullPointerException on INSERT after ALTER TABLE DROP COLUMN\n\nThe implementation of ALTER TABLE DROP COLUMN needs to adjust the\nSYSCOLUMNS information for some of the columns in the table. Specifically,\ncolumns with a higher column position than the dropped column need to\nhave their column position adjusted (decremented by 1).\n\nThe algorithm which did this column position adjustment was flawed,\nbecause it was losing the auto-increment information for generated columns.\n\nThe code adjusts the column position by:\n - reading the old column information into a ColumnDescriptor\n - deleting the old column information from SYSCOLUMNS\n - modifying the ColumnDescriptor to set the new column position\n - adding the new column information to SYSCOLUMNS\n\nBut the generated column information in the ColumnDescriptor was not being\npreserved properly in this process.\n\nThe fix involved ensuring that the ColumnDescriptor information was\naccurate for generated columns, and ensuring that SYSCOLUMNSRowFactory.makeRow\nwas correctly loading the generated column information into the new row.\n\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@594727 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_165",
        "file": [
            {
                "sha": "4b592f43d212634527f8d15f3f3937ac000ee1e5",
                "filename": "java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java",
                "status": "modified",
                "additions": 28,
                "deletions": 1,
                "changes": 29,
                "blob_url": "https://github.com/apache/derby/blob/45c3f035c3308aa68a499bbf9953da2ff1aa9fb4/java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java",
                "raw_url": "https://github.com/apache/derby/raw/45c3f035c3308aa68a499bbf9953da2ff1aa9fb4/java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java?ref=45c3f035c3308aa68a499bbf9953da2ff1aa9fb4",
                "patch": "@@ -69,6 +69,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \tprivate UUID\t\t\t\tdefaultUUID;\n \tprivate long\t\t\t\tautoincStart;\n \tprivate long\t\t\t\tautoincInc;\n+\tprivate long\t\t\t\tautoincValue;\n \t//Following variable is used to see if the user is adding an autoincrement \n \t//column, or if user is altering the existing autoincrement column to change \n \t//the increment value or to change the start value. If none of the above,\n@@ -154,6 +155,7 @@ public ColumnDescriptor(String columnName, int columnPosition,\n \t\t\t      columnDefaultInfo);\n \n \t\tthis.autoincStart = autoincStart;\n+\t\tthis.autoincValue = autoincStart;\n \t\tthis.autoincInc = autoincInc;\n \n \t}\n@@ -176,13 +178,14 @@ public ColumnDescriptor(String columnName, int columnPosition,\n \t * @param defaultUUID\t\t\tThe UUID for the default, if any.\n \t * @param autoincStart\tStart value for an autoincrement column.\n \t * @param autoincInc\tIncrement for autoincrement column\n+\t * @param autoincValue\tCurrent value of the autoincrement column\n \t */\n \tpublic ColumnDescriptor(String columnName, int columnPosition,\n \t\tDataTypeDescriptor columnType, DataValueDescriptor columnDefault,\n \t\tDefaultInfo columnDefaultInfo,\n \t\tUUID uuid,\n \t\tUUID defaultUUID,\n-        long autoincStart, long autoincInc)\n+        long autoincStart, long autoincInc, long autoincValue)\n \n \t{\n \t\tthis.columnName = columnName;\n@@ -198,6 +201,7 @@ public ColumnDescriptor(String columnName, int columnPosition,\n \t\t\t      columnDefaultInfo);\n \t\t\n \t\tthis.autoincStart = autoincStart;\n+\t\tthis.autoincValue = autoincValue;\n \t\tthis.autoincInc = autoincInc;\n \t}\n \n@@ -380,10 +384,33 @@ public long getAutoincInc()\n \t\treturn autoincInc;\n \t}\n \n+\t/**\n+\t * Get the current value for an autoincrement column.\n+\t *\n+\t * One case in which this is used involves dropping a column\n+\t * from a table. When ALTER TABLE DROP COLUMN runs, it drops\n+\t * the column from SYSCOLUMNS, and then must adjust the\n+\t * column positions of the other subsequent columns in the table\n+\t * to account for the removal of the dropped columns. This\n+\t * involves deleting and re-adding the column descriptors to\n+\t * SYSCOLUMNS, but during that process we must be careful to\n+\t * preserve the current value of any autoincrement column.\n+\t *\n+\t * @return the current value for an autoincrement column\n+\t */\n+\tpublic long getAutoincValue()\n+\t{\n+\t\treturn autoincValue;\n+\t}\n+\n \tpublic long getAutoinc_create_or_modify_Start_Increment()\n \t{\n \t\treturn autoinc_create_or_modify_Start_Increment;\n \t}\n+\tpublic void setAutoinc_create_or_modify_Start_Increment(int c_or_m)\n+\t{\n+\t\tautoinc_create_or_modify_Start_Increment = c_or_m;\n+\t}\n \n \t/**\n \t * Set the ordinal position of the column."
            },
            {
                "sha": "ab51c7b673ec0657f1f790635b9f682764f1d2e8",
                "filename": "java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/45c3f035c3308aa68a499bbf9953da2ff1aa9fb4/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java",
                "raw_url": "https://github.com/apache/derby/raw/45c3f035c3308aa68a499bbf9953da2ff1aa9fb4/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java?ref=45c3f035c3308aa68a499bbf9953da2ff1aa9fb4",
                "patch": "@@ -3678,7 +3678,7 @@ private void addSPSParams(SPSDescriptor spsd, TransactionController tc, boolean\n                         (DataValueDescriptor)parameterDefaults[index],\n                     (DefaultInfo) null,\n                     uuid,\n-                    (UUID) null, 0, 0);\n+                    (UUID) null, 0, 0, 0);\n \t\t\t\t\t\t\t\t\t\t\n \t\t\taddDescriptor(cd, null, SYSCOLUMNS_CATALOG_NUM, \n \t\t\t\t\t\t  false, // no chance of duplicates here\n@@ -3862,7 +3862,7 @@ public void\tupdateSPS(\n \t\t\t\t\t\t\t\t\t\t  (DefaultInfo) null,\n \t\t\t\t\t\t\t\t\t\t  uuid,\n \t\t\t\t\t\t\t\t\t\t  (UUID) null,\n-\t\t\t\t\t\t\t\t\t\t  0, 0);\n+\t\t\t\t\t\t\t\t\t\t  0, 0, 0);\n \t\t\t\t\t\t\t\t\t\t\n \t\t\t\tupdateColumnDescriptor(cd,\n \t\t\t\t\t\t\t\t\t   cd.getReferencingUUID(), "
            },
            {
                "sha": "230ff13f84288128d944666fc50b78011273314d",
                "filename": "java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java",
                "status": "modified",
                "additions": 15,
                "deletions": 4,
                "changes": 19,
                "blob_url": "https://github.com/apache/derby/blob/45c3f035c3308aa68a499bbf9953da2ff1aa9fb4/java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java",
                "raw_url": "https://github.com/apache/derby/raw/45c3f035c3308aa68a499bbf9953da2ff1aa9fb4/java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java?ref=45c3f035c3308aa68a499bbf9953da2ff1aa9fb4",
                "patch": "@@ -154,6 +154,7 @@ public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)\n \t\tObject\t\t\t\t\tdefaultSerializable = null;\n \t\tlong\t\t\t\t\tautoincStart = 0;\n \t\tlong\t\t\t\t\tautoincInc = 0;\n+\t\tlong\t\t\t\t\tautoincValue = 0;\n \t\t//The SYSCOLUMNS table's autoinc related columns change with different\n \t\t//values depending on what happened to the autoinc column, ie is the \n \t\t//user adding an autoincrement column, or is user changing the existing \n@@ -174,6 +175,7 @@ public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)\n \t\t\tcolID = new Integer(column.getPosition() );\n \t\t\tautoincStart = column.getAutoincStart();\n \t\t\tautoincInc   = column.getAutoincInc();\n+\t\t\tautoincValue   = column.getAutoincValue();\n \t\t\tautoinc_create_or_modify_Start_Increment = column.getAutoinc_create_or_modify_Start_Increment();\n \t\t\tif (column.getDefaultInfo() != null)\n \t\t\t{\n@@ -222,8 +224,15 @@ public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)\n \t\tif (autoinc_create_or_modify_Start_Increment == ColumnDefinitionNode.CREATE_AUTOINCREMENT ||\n \t\t\t\tautoinc_create_or_modify_Start_Increment == ColumnDefinitionNode.MODIFY_AUTOINCREMENT_INC_VALUE)\n \t\t{//user is adding an autoinc column or is changing the increment value of autoinc column\n+\t\t\t// This code also gets run when ALTER TABLE DROP COLUMN\n+\t\t\t// is used to drop a column other than the autoinc\n+\t\t\t// column, and the autoinc column gets removed from\n+\t\t\t// SYSCOLUMNS and immediately re-added with a different\n+\t\t\t// column position (to account for the dropped column).\n+\t\t\t// In this case, the autoincValue may have a\n+\t\t\t// different value than the autoincStart.\n \t\t\trow.setColumn(SYSCOLUMNS_AUTOINCREMENTVALUE, \n-\t\t\t\t\t\t  new SQLLongint(autoincStart));\n+\t\t\t\t\t\t  new SQLLongint(autoincValue));\n \t\t\trow.setColumn(SYSCOLUMNS_AUTOINCREMENTSTART, \n \t\t\t\t\t\t  new SQLLongint(autoincStart));\n \t\t\trow.setColumn(SYSCOLUMNS_AUTOINCREMENTINC, \n@@ -320,7 +329,7 @@ public TupleDescriptor buildDescriptor(\n \t\tUUID\t\t\t\tdefaultUUID = null;\n \t\tUUID\t\t\t\tuuid = null;\n \t\tUUIDFactory\t\t\tuuidFactory = getUUIDFactory();\n-\t\tlong autoincStart, autoincInc;\n+\t\tlong autoincStart, autoincInc, autoincValue;\n \n \t\tDataDescriptorGenerator\tddg = dd.getDataDescriptorGenerator();\n \n@@ -393,7 +402,8 @@ else if (object instanceof DefaultInfoImpl)\n \t\tDataTypeDescriptor dataTypeServices = \n \t\t\tDataTypeDescriptor.getType(catalogType);\n \n-\t\t/* 7th column is AUTOINCREMENTVALUE, not cached in descriptor (long) */\n+\t\t/* 7th column is AUTOINCREMENTVALUE (long) */\n+\t\tautoincValue = row.getColumn(SYSCOLUMNS_AUTOINCREMENTVALUE).getLong();\n \n \t\t/* 8th column is AUTOINCREMENTSTART (long) */\n \t\tautoincStart = row.getColumn(SYSCOLUMNS_AUTOINCREMENTSTART).getLong();\n@@ -409,7 +419,8 @@ else if (object instanceof DefaultInfoImpl)\n \n \t\tcolDesc = new ColumnDescriptor(columnName, columnNumber,\n \t\t\t\t\t\t\tdataTypeServices, defaultValue, defaultInfo, uuid, \n-\t\t\t\t\t\t\tdefaultUUID, autoincStart, autoincInc);\n+\t\t\t\t\t\t\tdefaultUUID, autoincStart, autoincInc,\n+                            autoincValue);\n \t\treturn colDesc;\n \t}\n "
            },
            {
                "sha": "663a7eb709dd9e80b80e35a0a1ad50754386f461",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java",
                "status": "modified",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/45c3f035c3308aa68a499bbf9953da2ff1aa9fb4/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java",
                "raw_url": "https://github.com/apache/derby/raw/45c3f035c3308aa68a499bbf9953da2ff1aa9fb4/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java?ref=45c3f035c3308aa68a499bbf9953da2ff1aa9fb4",
                "patch": "@@ -79,6 +79,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derby.iapi.types.RowLocation;\n import org.apache.derby.iapi.types.StringDataValue;\n import org.apache.derby.impl.sql.catalog.DDColumnDependableFinder;\n+import org.apache.derby.impl.sql.compile.ColumnDefinitionNode;\n \n /**\n  *\tThis class  describes actions that are ALWAYS performed for an\n@@ -931,11 +932,22 @@ else if (referencedCols[j] == droppedColumnPosition)\n \t\tColumnDescriptor[] cdlArray = \n             new ColumnDescriptor[size - columnDescriptor.getPosition()];\n \n+\t\t// For each column in this table with a higher column position,\n+\t\t// drop the entry from SYSCOLUMNS, but hold on to the column\n+\t\t// descriptor and reset its position to adjust for the dropped\n+\t\t// column. Then, re-add all those adjusted column descriptors\n+\t\t// back to SYSCOLUMNS\n+\t\t//\n \t\tfor (int i = columnDescriptor.getPosition(), j = 0; i < size; i++, j++)\n \t\t{\n \t\t\tColumnDescriptor cd = (ColumnDescriptor) tab_cdl.elementAt(i);\n \t\t\tdd.dropColumnDescriptor(td.getUUID(), cd.getColumnName(), tc);\n \t\t\tcd.setPosition(i);\n+\t\t\tif (cd.isAutoincrement())\n+\t\t\t{\n+\t\t\t\tcd.setAutoinc_create_or_modify_Start_Increment(\n+\t\t\t\t\t\tColumnDefinitionNode.CREATE_AUTOINCREMENT);\n+\t\t\t}\n \t\t\tcdlArray[j] = cd;\n \t\t}\n \t\tdd.addDescriptorArray(cdlArray, td,"
            },
            {
                "sha": "9831c2b14caf0676c4876af52db8191479aaefb2",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/altertable.out",
                "status": "modified",
                "additions": 218,
                "deletions": 0,
                "changes": 218,
                "blob_url": "https://github.com/apache/derby/blob/45c3f035c3308aa68a499bbf9953da2ff1aa9fb4/java/testing/org/apache/derbyTesting/functionTests/master/altertable.out",
                "raw_url": "https://github.com/apache/derby/raw/45c3f035c3308aa68a499bbf9953da2ff1aa9fb4/java/testing/org/apache/derbyTesting/functionTests/master/altertable.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/altertable.out?ref=45c3f035c3308aa68a499bbf9953da2ff1aa9fb4",
                "patch": "@@ -1643,6 +1643,224 @@ USER1\n USER2                                                                                                                           |s|{0, 1}         \n SUPER_USER                                                                                                                      |u|{1}            \n USER1                                                                                                                           |u|{0}            \n+ij> -- JIRA 3175: Null Pointer Exception or SanityManager ASSERT because\n+-- autoincrement properties of generated column are not maintained properly\n+-- when a column before it in the table is dropped:\n+create table d3175 (x varchar(12), y varchar(12),\n+                    id int primary key generated by default as identity);\n+0 rows inserted/updated/deleted\n+ij> select * from sys.syscolumns c,sys.systables t where c.referenceid = t.tableid and t.tablename='D3175';\n+REFERENCEID                         |COLUMNNAME                                                                                                                      |COLUMNNUMB&|COLUMNDATATYPE |COLUMNDEFAULT  |COLUMNDEFAULTID                     |AUTOINCREMENTVALUE  |AUTOINCREMENTSTART  |AUTOINCREMENTINC    |TABLEID                             |TABLENAME                                                                                                                       |&|SCHEMAID                            |&\nn+xxxxFILTERED-UUIDxxxx|ID                                                                                                                              |3          |INTEGER NOT NU&|GENERATED_BY_D&|xxxxFILTERED-UUIDxxxx|1                   |1                   |1                   |xxxxFILTERED-UUIDxxxx|D3175                                                                                                                           |T|xxxxFILTERED-UUIDxxxx|R\n+xxxxFILTERED-UUIDxxxx|X                                                                                                                               |1          |VARCHAR(12)    |NULL           |NULL                                |NULL                |NULL                |NULL                |xxxxFILTERED-UUIDxxxx|D3175                                                                                                                           |T|xxxxFILTERED-UUIDxxxx|R\n+xxxxFILTERED-UUIDxxxx|Y                                                                                                                               |2          |VARCHAR(12)    |NULL           |NULL                                |NULL                |NULL                |NULL                |xxxxFILTERED-UUIDxxxx|D3175                                                                                                                           |T|xxxxFILTERED-UUIDxxxx|R\n+ij> insert into d3175(x) values 'b';\n+1 row inserted/updated/deleted\n+ij> alter table d3175 drop column y;\n+0 rows inserted/updated/deleted\n+ij> insert into d3175(x) values 'a';\n+1 row inserted/updated/deleted\n+ij> select * from sys.syscolumns c,sys.systables t where c.referenceid = t.tableid and t.tablename='D3175';\n+REFERENCEID                         |COLUMNNAME                                                                                                                      |COLUMNNUMB&|COLUMNDATATYPE |COLUMNDEFAULT  |COLUMNDEFAULTID                     |AUTOINCREMENTVALUE  |AUTOINCREMENTSTART  |AUTOINCREMENTINC    |TABLEID                             |TABLENAME                                                                                                                       |&|SCHEMAID                            |&\nn+xxxxFILTERED-UUIDxxxx|ID                                                                                                                              |2          |INTEGER NOT NU&|GENERATED_BY_D&|xxxxFILTERED-UUIDxxxx|3                   |1                   |1                   |xxxxFILTERED-UUIDxxxx|D3175                                                                                                                           |T|xxxxFILTERED-UUIDxxxx|R\n+xxxxFILTERED-UUIDxxxx|X                                                                                                                               |1          |VARCHAR(12)    |NULL           |NULL                                |NULL                |NULL                |NULL                |xxxxFILTERED-UUIDxxxx|D3175                                                                                                                           |T|xxxxFILTERED-UUIDxxxx|R\n+ij> -- JIRA 3177 appears to be aduplicate of JIRA 3175, but the reproduction\n+-- test script is different. In the interests of additional testing, we\n+-- include the JIRA 3177 test script, as it has a number of additional\n+-- examples of interesting ALTER TABLE statements\n+--\n+-- In the original JIRA 3177 bug, by the time we get to the end of the\n+-- ALTER TABLE processing, the select from SYS.SYSCOLUMNS retrieves NULL\n+-- for the autoinc columns, instead of the correct value (1).\n+create table d3177_SchemaVersion ( version INTEGER NOT NULL  );\n+0 rows inserted/updated/deleted\n+ij> insert into d3177_SchemaVersion (version) values (0);\n+1 row inserted/updated/deleted\n+ij> create table d3177_BinaryData ( \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  CRC32 BIGINT NOT NULL , \n+  data BLOB NOT NULL , \n+  CONSTRAINT d3177_BinaryData_id_pk PRIMARY KEY(id) \n+);\n+0 rows inserted/updated/deleted\n+ij> create table d3177_MailServers ( \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  port INTEGER NOT NULL , \n+  username varchar(80) NOT NULL , \n+  protocol varchar(80) NOT NULL , \n+  SSLProtocol varchar(10), \n+  emailAddress varchar(80) NOT NULL , \n+  server varchar(80) NOT NULL , \n+  password varchar(80) NOT NULL , \n+  CONSTRAINT d3177_MailServers_id_pk PRIMARY KEY(id) \n+);\n+0 rows inserted/updated/deleted\n+ij> create table d3177_Mailboxes ( \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  port INTEGER NOT NULL , \n+  folder varchar(80) NOT NULL , \n+  username varchar(80) NOT NULL , \n+  SSLProtocol varchar(10), \n+  hostname varchar(80) NOT NULL , \n+  storeType varchar(80) NOT NULL , \n+  password varchar(80) NOT NULL , \n+  timeout INTEGER NOT NULL , \n+  MailServerID INTEGER NOT NULL , \n+  CONSTRAINT d3177_Mailboxes_id_pk PRIMARY KEY(id) \n+);\n+0 rows inserted/updated/deleted\n+ij> create table d3177_MESSAGES ( \n+  Message_From varchar(1000), \n+  Message_Cc varchar(1000), \n+  Message_Subject varchar(1000), \n+  Message_ID varchar(256) NOT NULL , \n+  Message_Bcc varchar(1000), \n+  Message_Date TIMESTAMP, \n+  Content_Type varchar(256), \n+  MailboxID INTEGER NOT NULL , \n+  Search_Text CLOB NOT NULL , \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  Message_To varchar(1000), \n+  Display_Text CLOB NOT NULL , \n+  Message_Data_ID INTEGER NOT NULL , \n+  CONSTRAINT d3177_MESSAGES_id_pk PRIMARY KEY(id) \n+);\n+0 rows inserted/updated/deleted\n+ij> select * from sys.syscolumns c,sys.systables t where c.referenceid = t.tableid and c.columnname='ID' and t.tablename='D3177_MESSAGES';\n+REFERENCEID                         |COLUMNNAME                                                                                                                      |COLUMNNUMB&|COLUMNDATATYPE |COLUMNDEFAULT  |COLUMNDEFAULTID                     |AUTOINCREMENTVALUE  |AUTOINCREMENTSTART  |AUTOINCREMENTINC    |TABLEID                             |TABLENAME                                                                                                                       |&|SCHEMAID                            |&\nn+xxxxFILTERED-UUIDxxxx|ID                                                                                                                              |10         |INTEGER NOT NU&|NULL           |NULL                                |1                   |1                   |1                   |xxxxFILTERED-UUIDxxxx|D3177_MESSAGES                                                                                                                  |T|xxxxFILTERED-UUIDxxxx|R\n+ij> create table D3177_ATTACHMENTS ( \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  Inline INTEGER, \n+  CRC32 BIGINT NOT NULL , \n+  Attachment_Name varchar(256) NOT NULL , \n+  Attachment_File varchar(512) NOT NULL , \n+  Message_ID INTEGER NOT NULL , \n+  Content_Type varchar(256) NOT NULL , \n+  CONSTRAINT D3177_ATTACHMENTS_id_pk PRIMARY KEY(id) \n+);\n+0 rows inserted/updated/deleted\n+ij> alter table D3177_ATTACHMENTS ADD CONSTRAINT ATTACHMENTS_Message_ID_MESSAGES_ID FOREIGN KEY ( Message_ID ) REFERENCES D3177_MESSAGES ( ID );\n+0 rows inserted/updated/deleted\n+ij> alter table D3177_MESSAGES ADD CONSTRAINT MESSAGES_MailboxID_Mailboxes_ID FOREIGN KEY ( MailboxID ) REFERENCES d3177_Mailboxes ( ID );\n+0 rows inserted/updated/deleted\n+ij> alter table D3177_MESSAGES ADD CONSTRAINT MESSAGES_Message_Data_ID_d3177_BinaryData_ID FOREIGN KEY ( Message_Data_ID ) REFERENCES d3177_BinaryData ( ID );\n+0 rows inserted/updated/deleted\n+ij> alter table d3177_Mailboxes ADD CONSTRAINT Mailboxes_MailServerID_MailServers_ID FOREIGN KEY ( MailServerID ) REFERENCES d3177_MailServers ( ID );\n+0 rows inserted/updated/deleted\n+ij> update d3177_SchemaVersion set version=1;\n+1 row inserted/updated/deleted\n+ij> alter table D3177_MESSAGES alter Message_To SET DATA TYPE varchar(10000);\n+0 rows inserted/updated/deleted\n+ij> alter table D3177_MESSAGES alter Message_From SET DATA TYPE varchar(10000);\n+0 rows inserted/updated/deleted\n+ij> alter table D3177_MESSAGES alter Message_Cc SET DATA TYPE varchar(10000);\n+0 rows inserted/updated/deleted\n+ij> alter table D3177_MESSAGES alter Message_Bcc SET DATA TYPE varchar(10000);\n+0 rows inserted/updated/deleted\n+ij> select * from sys.syscolumns c,sys.systables t where c.referenceid = t.tableid and c.columnname='ID' and t.tablename='D3177_MESSAGES';\n+REFERENCEID                         |COLUMNNAME                                                                                                                      |COLUMNNUMB&|COLUMNDATATYPE |COLUMNDEFAULT  |COLUMNDEFAULTID                     |AUTOINCREMENTVALUE  |AUTOINCREMENTSTART  |AUTOINCREMENTINC    |TABLEID                             |TABLENAME                                                                                                                       |&|SCHEMAID                            |&\nn+xxxxFILTERED-UUIDxxxx|ID                                                                                                                              |10         |INTEGER NOT NU&|NULL           |NULL                                |1                   |1                   |1                   |xxxxFILTERED-UUIDxxxx|D3177_MESSAGES                                                                                                                  |T|xxxxFILTERED-UUIDxxxx|R\n+ij> update d3177_SchemaVersion set version=2;\n+1 row inserted/updated/deleted\n+ij> create table D3177_MailStatistics ( \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  ProcessedCount INTEGER DEFAULT 0 NOT NULL , \n+  HourOfDay INTEGER NOT NULL , \n+  LastModified TIMESTAMP NOT NULL , \n+  RejectedMailCount INTEGER DEFAULT 0 NOT NULL , \n+  DayOfWeek INTEGER NOT NULL , \n+  CONSTRAINT D3177_MailStatistics_id_pk PRIMARY KEY(id) \n+);\n+0 rows inserted/updated/deleted\n+ij> CREATE INDEX D3177_MailStatistics_HourOfDay_idx ON D3177_MailStatistics(HourOfDay);\n+0 rows inserted/updated/deleted\n+ij> CREATE INDEX D3177_MailStatistics_DayOfWeek_idx ON D3177_MailStatistics(DayOfWeek);\n+0 rows inserted/updated/deleted\n+ij> alter table D3177_MESSAGES alter CONTENT_TYPE SET DATA TYPE varchar(256);\n+0 rows inserted/updated/deleted\n+ij> update d3177_SchemaVersion set version=3;\n+1 row inserted/updated/deleted\n+ij> alter table D3177_messages alter column Message_ID NULL;\n+0 rows inserted/updated/deleted\n+ij> CREATE INDEX D3177_MESSAGES_Message_ID_idx ON D3177_MESSAGES(Message_ID);\n+0 rows inserted/updated/deleted\n+ij> update d3177_SchemaVersion set version=4;\n+1 row inserted/updated/deleted\n+ij> alter table D3177_MESSAGES add filename varchar(256);\n+0 rows inserted/updated/deleted\n+ij> alter table D3177_MESSAGES add CRC32 BIGINT;\n+0 rows inserted/updated/deleted\n+ij> select id,crc32,data from d3177_BinaryData;\n+ID         |CRC32               |DATA                                                                                                                            \n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------\n+ij> select * from sys.syscolumns c,sys.systables t where c.referenceid = t.tableid and c.columnname='ID' and t.tablename='D3177_MESSAGES';\n+REFERENCEID                         |COLUMNNAME                                                                                                                      |COLUMNNUMB&|COLUMNDATATYPE |COLUMNDEFAULT  |COLUMNDEFAULTID                     |AUTOINCREMENTVALUE  |AUTOINCREMENTSTART  |AUTOINCREMENTINC    |TABLEID                             |TABLENAME                                                                                                                       |&|SCHEMAID                            |&\nn+xxxxFILTERED-UUIDxxxx|ID                                                                                                                              |10         |INTEGER NOT NU&|NULL           |NULL                                |1                   |1                   |1                   |xxxxFILTERED-UUIDxxxx|D3177_MESSAGES                                                                                                                  |T|xxxxFILTERED-UUIDxxxx|R\n+ij> alter table D3177_messages alter column filename NOT NULL;\n+0 rows inserted/updated/deleted\n+ij> alter table D3177_messages alter column crc32 NOT NULL;\n+0 rows inserted/updated/deleted\n+ij> alter table D3177_messages alter column mailboxid NULL;\n+0 rows inserted/updated/deleted\n+ij> ALTER TABLE D3177_MESSAGES DROP CONSTRAINT MESSAGES_message_data_id_BinaryData_id;\n+ERROR 42X86: ALTER TABLE failed. There is no constraint 'RENC_SCHEMA_1.MESSAGES_MESSAGE_DATA_ID_BINARYDATA_ID' on table '\"RENC_SCHEMA_1\".\"D3177_MESSAGES\"'. \n+ij> alter table D3177_messages drop column message_data_id;\n+0 rows inserted/updated/deleted\n+WARNING 01500: The constraint MESSAGES_MESSAGE_DATA_ID_D3177_BINARYDATA_ID on table D3177_MESSAGES has been dropped.\n+ij> drop table d3177_BinaryData;\n+0 rows inserted/updated/deleted\n+ij> update d3177_SchemaVersion set version=6;\n+1 row inserted/updated/deleted\n+ij> create table D3177_EmailAddresses ( \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  address varchar(256) NOT NULL , \n+  CONSTRAINT D3177_EmailAddresses_id_pk PRIMARY KEY(id), \n+  CONSTRAINT D3177_EmailAddresses_address_uq UNIQUE(address) \n+);\n+0 rows inserted/updated/deleted\n+ij> CREATE UNIQUE INDEX D3177_EmailAddresses_address_idx ON D3177_EmailAddresses(address);\n+0 rows inserted/updated/deleted\n+WARNING 01504: The new index is a duplicate of an existing index: xxxxGENERATED-IDxxxx.\n+ij> create table D3177_EmailAddressesToMessages ( \n+  MessageID INTEGER NOT NULL , \n+  EmailAddressID INTEGER NOT NULL  \n+);\n+0 rows inserted/updated/deleted\n+ij> alter table D3177_EmailAddressesToMessages ADD CONSTRAINT EmailAddressesToMessages_MessageID_Messages_ID FOREIGN KEY ( MessageID ) REFERENCES D3177_Messages ( ID );\n+0 rows inserted/updated/deleted\n+ij> alter table D3177_EmailAddressesToMessages ADD CONSTRAINT EmailAddressesToMessages_EmailAddressID_EmailAddresses_ID FOREIGN KEY ( EmailAddressID ) REFERENCES D3177_EmailAddresses ( ID );\n+0 rows inserted/updated/deleted\n+ij> create table AuthenticationServers ( \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  port INTEGER NOT NULL , \n+  protocol varchar(20) NOT NULL , \n+  hostname varchar(40) NOT NULL , \n+  CONSTRAINT AuthenticationServers_id_pk PRIMARY KEY(id) \n+);\n+0 rows inserted/updated/deleted\n+ij> alter table d3177_Mailboxes add AuthenticationServerID INTEGER;\n+0 rows inserted/updated/deleted\n+ij> select id,filename from D3177_messages;\n+ID         |FILENAME                                                                                                                        \n+--------------------------------------------------------------------------------------------------------------------------------------------\n+ij> alter table D3177_MESSAGES drop column message_to;\n+0 rows inserted/updated/deleted\n+ij> alter table D3177_MESSAGES drop column message_cc;\n+0 rows inserted/updated/deleted\n+ij> alter table D3177_MESSAGES drop column message_from;\n+0 rows inserted/updated/deleted\n+ij> select * from sys.syscolumns c,sys.systables t where c.referenceid = t.tableid and c.columnname='ID' and t.tablename='D3177_MESSAGES';\n+REFERENCEID                         |COLUMNNAME                                                                                                                      |COLUMNNUMB&|COLUMNDATATYPE |COLUMNDEFAULT  |COLUMNDEFAULTID                     |AUTOINCREMENTVALUE  |AUTOINCREMENTSTART  |AUTOINCREMENTINC    |TABLEID                             |TABLENAME                                                                                                                       |&|SCHEMAID                            |&\nn+xxxxFILTERED-UUIDxxxx|ID                                                                                                                              |8          |INTEGER NOT NU&|NULL           |NULL                                |1                   |1                   |1                   |xxxxFILTERED-UUIDxxxx|D3177_MESSAGES                                                                                                                  |T|xxxxFILTERED-UUIDxxxx|R\n+ij> update d3177_SchemaVersion set version=7;\n+1 row inserted/updated/deleted\n ij> -- JIRA 2371: ensure that a non-numeric, non-autogenerated column can\n -- have its default value modified:\n create table t2371 ( a varchar(10));"
            },
            {
                "sha": "0369eb27b1495d522d9cdcfb22c9fd3fa51eb302",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/altertable.sql",
                "status": "modified",
                "additions": 163,
                "deletions": 0,
                "changes": 163,
                "blob_url": "https://github.com/apache/derby/blob/45c3f035c3308aa68a499bbf9953da2ff1aa9fb4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/altertable.sql",
                "raw_url": "https://github.com/apache/derby/raw/45c3f035c3308aa68a499bbf9953da2ff1aa9fb4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/altertable.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/altertable.sql?ref=45c3f035c3308aa68a499bbf9953da2ff1aa9fb4",
                "patch": "@@ -928,6 +928,169 @@ grant select(c) on d1909 to user2;\n select c.grantee, c.type, c.columns from sys.syscolperms c, sys.systables t\n \twhere c.tableid = t.tableid and t.tablename='D1909';\n \n+-- JIRA 3175: Null Pointer Exception or SanityManager ASSERT because\n+-- autoincrement properties of generated column are not maintained properly\n+-- when a column before it in the table is dropped:\n+\n+create table d3175 (x varchar(12), y varchar(12),\n+                    id int primary key generated by default as identity);\n+select * from sys.syscolumns c,sys.systables t where c.referenceid = t.tableid and t.tablename='D3175';\n+insert into d3175(x) values 'b';\n+alter table d3175 drop column y;\n+insert into d3175(x) values 'a';\n+select * from sys.syscolumns c,sys.systables t where c.referenceid = t.tableid and t.tablename='D3175';\n+\n+-- JIRA 3177 appears to be aduplicate of JIRA 3175, but the reproduction\n+-- test script is different. In the interests of additional testing, we\n+-- include the JIRA 3177 test script, as it has a number of additional\n+-- examples of interesting ALTER TABLE statements\n+--\n+-- In the original JIRA 3177 bug, by the time we get to the end of the\n+-- ALTER TABLE processing, the select from SYS.SYSCOLUMNS retrieves NULL\n+-- for the autoinc columns, instead of the correct value (1).\n+\n+create table d3177_SchemaVersion ( version INTEGER NOT NULL  );\n+insert into d3177_SchemaVersion (version) values (0);\n+create table d3177_BinaryData ( \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  CRC32 BIGINT NOT NULL , \n+  data BLOB NOT NULL , \n+  CONSTRAINT d3177_BinaryData_id_pk PRIMARY KEY(id) \n+);\n+create table d3177_MailServers ( \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  port INTEGER NOT NULL , \n+  username varchar(80) NOT NULL , \n+  protocol varchar(80) NOT NULL , \n+  SSLProtocol varchar(10), \n+  emailAddress varchar(80) NOT NULL , \n+  server varchar(80) NOT NULL , \n+  password varchar(80) NOT NULL , \n+  CONSTRAINT d3177_MailServers_id_pk PRIMARY KEY(id) \n+);\n+create table d3177_Mailboxes ( \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  port INTEGER NOT NULL , \n+  folder varchar(80) NOT NULL , \n+  username varchar(80) NOT NULL , \n+  SSLProtocol varchar(10), \n+  hostname varchar(80) NOT NULL , \n+  storeType varchar(80) NOT NULL , \n+  password varchar(80) NOT NULL , \n+  timeout INTEGER NOT NULL , \n+  MailServerID INTEGER NOT NULL , \n+  CONSTRAINT d3177_Mailboxes_id_pk PRIMARY KEY(id) \n+);\n+create table d3177_MESSAGES ( \n+  Message_From varchar(1000), \n+  Message_Cc varchar(1000), \n+  Message_Subject varchar(1000), \n+  Message_ID varchar(256) NOT NULL , \n+  Message_Bcc varchar(1000), \n+  Message_Date TIMESTAMP, \n+  Content_Type varchar(256), \n+  MailboxID INTEGER NOT NULL , \n+  Search_Text CLOB NOT NULL , \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  Message_To varchar(1000), \n+  Display_Text CLOB NOT NULL , \n+  Message_Data_ID INTEGER NOT NULL , \n+  CONSTRAINT d3177_MESSAGES_id_pk PRIMARY KEY(id) \n+);\n+ select * from sys.syscolumns c,sys.systables t where c.referenceid = t.tableid and c.columnname='ID' and t.tablename='D3177_MESSAGES';\n+create table D3177_ATTACHMENTS ( \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  Inline INTEGER, \n+  CRC32 BIGINT NOT NULL , \n+  Attachment_Name varchar(256) NOT NULL , \n+  Attachment_File varchar(512) NOT NULL , \n+  Message_ID INTEGER NOT NULL , \n+  Content_Type varchar(256) NOT NULL , \n+  CONSTRAINT D3177_ATTACHMENTS_id_pk PRIMARY KEY(id) \n+);\n+alter table D3177_ATTACHMENTS ADD CONSTRAINT ATTACHMENTS_Message_ID_MESSAGES_ID FOREIGN KEY ( Message_ID ) REFERENCES D3177_MESSAGES ( ID );\n+alter table D3177_MESSAGES ADD CONSTRAINT MESSAGES_MailboxID_Mailboxes_ID FOREIGN KEY ( MailboxID ) REFERENCES d3177_Mailboxes ( ID );\n+alter table D3177_MESSAGES ADD CONSTRAINT MESSAGES_Message_Data_ID_d3177_BinaryData_ID FOREIGN KEY ( Message_Data_ID ) REFERENCES d3177_BinaryData ( ID );\n+alter table d3177_Mailboxes ADD CONSTRAINT Mailboxes_MailServerID_MailServers_ID FOREIGN KEY ( MailServerID ) REFERENCES d3177_MailServers ( ID );\n+\n+update d3177_SchemaVersion set version=1;\n+\n+alter table D3177_MESSAGES alter Message_To SET DATA TYPE varchar(10000);\n+alter table D3177_MESSAGES alter Message_From SET DATA TYPE varchar(10000);\n+alter table D3177_MESSAGES alter Message_Cc SET DATA TYPE varchar(10000);\n+alter table D3177_MESSAGES alter Message_Bcc SET DATA TYPE varchar(10000);\n+\n+ select * from sys.syscolumns c,sys.systables t where c.referenceid = t.tableid and c.columnname='ID' and t.tablename='D3177_MESSAGES';\n+update d3177_SchemaVersion set version=2;\n+\n+create table D3177_MailStatistics ( \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  ProcessedCount INTEGER DEFAULT 0 NOT NULL , \n+  HourOfDay INTEGER NOT NULL , \n+  LastModified TIMESTAMP NOT NULL , \n+  RejectedMailCount INTEGER DEFAULT 0 NOT NULL , \n+  DayOfWeek INTEGER NOT NULL , \n+  CONSTRAINT D3177_MailStatistics_id_pk PRIMARY KEY(id) \n+);\n+CREATE INDEX D3177_MailStatistics_HourOfDay_idx ON D3177_MailStatistics(HourOfDay);\n+CREATE INDEX D3177_MailStatistics_DayOfWeek_idx ON D3177_MailStatistics(DayOfWeek);\n+alter table D3177_MESSAGES alter CONTENT_TYPE SET DATA TYPE varchar(256);\n+\n+update d3177_SchemaVersion set version=3;\n+\n+alter table D3177_messages alter column Message_ID NULL;\n+\n+CREATE INDEX D3177_MESSAGES_Message_ID_idx ON D3177_MESSAGES(Message_ID);\n+\n+update d3177_SchemaVersion set version=4;\n+\n+alter table D3177_MESSAGES add filename varchar(256);\n+alter table D3177_MESSAGES add CRC32 BIGINT;\n+select id,crc32,data from d3177_BinaryData;\n+\n+ select * from sys.syscolumns c,sys.systables t where c.referenceid = t.tableid and c.columnname='ID' and t.tablename='D3177_MESSAGES';\n+alter table D3177_messages alter column filename NOT NULL;\n+alter table D3177_messages alter column crc32 NOT NULL;\n+alter table D3177_messages alter column mailboxid NULL;\n+ALTER TABLE D3177_MESSAGES DROP CONSTRAINT MESSAGES_message_data_id_BinaryData_id;\n+alter table D3177_messages drop column message_data_id;\n+drop table d3177_BinaryData;\n+\n+update d3177_SchemaVersion set version=6;\n+\n+create table D3177_EmailAddresses ( \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  address varchar(256) NOT NULL , \n+  CONSTRAINT D3177_EmailAddresses_id_pk PRIMARY KEY(id), \n+  CONSTRAINT D3177_EmailAddresses_address_uq UNIQUE(address) \n+);\n+\n+CREATE UNIQUE INDEX D3177_EmailAddresses_address_idx ON D3177_EmailAddresses(address);\n+\n+create table D3177_EmailAddressesToMessages ( \n+  MessageID INTEGER NOT NULL , \n+  EmailAddressID INTEGER NOT NULL  \n+);\n+alter table D3177_EmailAddressesToMessages ADD CONSTRAINT EmailAddressesToMessages_MessageID_Messages_ID FOREIGN KEY ( MessageID ) REFERENCES D3177_Messages ( ID );\n+alter table D3177_EmailAddressesToMessages ADD CONSTRAINT EmailAddressesToMessages_EmailAddressID_EmailAddresses_ID FOREIGN KEY ( EmailAddressID ) REFERENCES D3177_EmailAddresses ( ID );\n+\n+create table AuthenticationServers ( \n+  id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), \n+  port INTEGER NOT NULL , \n+  protocol varchar(20) NOT NULL , \n+  hostname varchar(40) NOT NULL , \n+  CONSTRAINT AuthenticationServers_id_pk PRIMARY KEY(id) \n+);\n+alter table d3177_Mailboxes add AuthenticationServerID INTEGER;\n+select id,filename from D3177_messages;\n+\n+alter table D3177_MESSAGES drop column message_to;\n+alter table D3177_MESSAGES drop column message_cc;\n+alter table D3177_MESSAGES drop column message_from;\n+\n+ select * from sys.syscolumns c,sys.systables t where c.referenceid = t.tableid and c.columnname='ID' and t.tablename='D3177_MESSAGES';\n+\n+update d3177_SchemaVersion set version=7;\n -- JIRA 2371: ensure that a non-numeric, non-autogenerated column can\n -- have its default value modified:\n create table t2371 ( a varchar(10));"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/9247f313449c367d8b0b6927b3157cec0c781ee0",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/48152c29b26574030f0fdbed0e8a3445891a2b07",
        "message": "DERBY-3033: NullPointerExceptions with flattening of NOT EXISTS subqueries\n\nThis patch modifies the behavior of queries which contain correlated\nsubqueries using a NOT EXISTS predicate. For example:\n\n   select ... from a, b where <join criteria> \n       and not exists (select from c where c.col = b.col)\n\nDepending on various conditions, subqueries may be \"flattened\", which is\na term used to describe an internal rewriting process in which the\nsubquery is converted into a same-level join with the parent tables.\n\nFor many types of queries, such flattening results in multiple tables\nequijoined together, and the optimizer may recognize, via transitive\nclosure of the equijoin predicates, additional opportunities for join\npredicates.\n\nHowever, when a NOT EXISTS table is in the join's from list, join\npredicates that mention the NOT EXISTS table cannot be used for such\ntransitive closure, because these are not equijoin predicates, they\nare equi-NON-join predicates: the join succeeds when there are NOT\nmatching rows in that table.\n\nPrior to this change, Derby might incorrectly infer an equijoin predicate\nin such a situation, which could lead to wrong results, or to crashes\nduring query execution when the join processing attempted to access the\nnon-existing rows. This change modifies the PredicateList processing to\nnote when a join predicate includes a NOT EXISTS table, and to omit\nthat join predicate from transitive closure processing.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@581943 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_166",
        "file": [
            {
                "sha": "e66a5a5b95cc95ff046999eefddc7bf06c44cef3",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "status": "modified",
                "additions": 36,
                "deletions": 0,
                "changes": 36,
                "blob_url": "https://github.com/apache/derby/blob/9247f313449c367d8b0b6927b3157cec0c781ee0/java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "raw_url": "https://github.com/apache/derby/raw/9247f313449c367d8b0b6927b3157cec0c781ee0/java/engine/org/apache/derby/impl/sql/compile/FromList.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/FromList.java?ref=9247f313449c367d8b0b6927b3157cec0c781ee0",
                "patch": "@@ -1548,6 +1548,42 @@ void genExistsBaseTables(JBitSet referencedTableMap, FromList outerFromList,\n \t\t}\n \t}\n \n+\t/**\n+\t * determine whether this table is NOT EXISTS.\n+\t *\n+\t * This routine searches for the indicated table number in the fromlist\n+\t * and returns TRUE if the table is present in the from list and is \n+\t * marked NOT EXISTS, false otherwise.\n+\t *\n+\t * A table may be present in the from list for NOT EXISTS if it is used\n+\t * as a correlated NOT EXISTS subquery. In such a situation, when the\n+\t * subquery is flattened, it is important that we remember that this is\n+\t * a NOT EXISTS subquery, because the join semantics are different \n+\t * (we're looking for rows that do NOT match, rather than rows\n+\t * that do). And since the join semantics are different, we cannot\n+\t * include this table into a transitive closure of equijoins\n+\t * (See DERBY-3033 for a situation where this occurs).\n+\t *\n+\t * @param tableNumber\twhich table to check\n+\t * @return true if this table is in the from list as NOT EXISTS\n+\t */\n+\tboolean tableNumberIsNotExists(int tableNumber)\n+\t\tthrows StandardException\n+\t{\n+\t\tint size = size();\n+\t\tfor (int index = 0; index < size; index++)\n+\t\t{\n+\t\t\tProjectRestrictNode prn = (ProjectRestrictNode) elementAt(index);\n+\t\t\tif (! (prn.getChildResult() instanceof FromTable))\n+\t\t\t{\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tFromTable ft = (FromTable) prn.getChildResult();\n+\t\t\tif (ft.getTableNumber() == tableNumber)\n+\t\t\t\treturn ft.isNotExists();\n+\t\t}\n+\t\treturn false;\n+\t}\n \t/**\n \t * Get the lock mode for the target of an update statement\n \t * (a delete or update).  The update mode will always be row for"
            },
            {
                "sha": "05ab42eb630a9b232b23db771284e054516debfe",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/PredicateList.java",
                "status": "modified",
                "additions": 11,
                "deletions": 1,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/9247f313449c367d8b0b6927b3157cec0c781ee0/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java",
                "raw_url": "https://github.com/apache/derby/raw/9247f313449c367d8b0b6927b3157cec0c781ee0/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java?ref=9247f313449c367d8b0b6927b3157cec0c781ee0",
                "patch": "@@ -1817,6 +1817,14 @@ else if (vn instanceof UnaryOperatorNode)\n      * other side of the middle predicate to see if we can find an equijoin \n      * between outer and inner.  If so, then we simply assign it to the same \n      * equivalence class.  If not, then we add the new equijoin clause.\n+\t *\n+\t * Note that an equijoin predicate between two tables CANNOT be\n+\t * used for transitive closure, if either of the tables is in the\n+\t * fromlist for NOT EXISTS. In that case, the join predicate\n+\t * actually specifies that the rows from the indicated table must\n+\t * NOT exist, and therefore those non-existent rows cannot be\n+\t * transitively joined to the other matching tables. See DERBY-3033\n+\t * for a description of a situation in which this actually arises.\n \t *\n \t * @param numTables\tThe number of tables in the query\n \t * @param fromList\tThe FromList in question.\n@@ -1867,7 +1875,9 @@ void joinClauseTransitiveClosure(int numTables,\n \t\t\t\tColumnReference leftCR = (ColumnReference) left;\n \t\t\t\tColumnReference rightCR = (ColumnReference) right;\n \t\t\t\tif (leftCR.getSourceLevel() == rightCR.getSourceLevel() &&\n-\t\t\t\t\tleftCR.getTableNumber() != rightCR.getTableNumber())\n+\t\t\t\t\tleftCR.getTableNumber() != rightCR.getTableNumber() &&\n+\t\t\t\t\t!fromList.tableNumberIsNotExists(leftCR.getTableNumber()) &&\n+\t\t\t\t\t!fromList.tableNumberIsNotExists(rightCR.getTableNumber()))\n \t\t\t\t{\n \t\t\t\t\t// Add the equijoin clause to each of the lists\n \t\t\t\t\tjoinClauses[leftCR.getTableNumber()].addElement(predicate);"
            },
            {
                "sha": "f190251da3eb90518eb0850819f2f995c52fae4e",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSubqueriesTest.java",
                "status": "renamed",
                "additions": 163,
                "deletions": 5,
                "changes": 168,
                "blob_url": "https://github.com/apache/derby/blob/9247f313449c367d8b0b6927b3157cec0c781ee0/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSubqueriesTest.java",
                "raw_url": "https://github.com/apache/derby/raw/9247f313449c367d8b0b6927b3157cec0c781ee0/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSubqueriesTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSubqueriesTest.java?ref=9247f313449c367d8b0b6927b3157cec0c781ee0",
                "patch": "@@ -1,6 +1,6 @@\n /*\n  \n-   Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ExistsWithSetOpsTest\n+   Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ExistsWithSubqueriesTest\n \n    Licensed to the Apache Software Foundation (ASF) under one or more\n    contributor license agreements.  See the NOTICE file distributed with\n@@ -31,18 +31,27 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n+import java.sql.PreparedStatement;\n \n /**\n- * This test ensures that an EXISTS predicate which wraps a set operation--\n+ * This test contains a variety of cases of EXISTS predicates with subqueries.\n+ *\n+ * Several tests ensure that an EXISTS predicate which wraps a set operation--\n  * meaning a UNION, INTERSECT, or EXCEPT node--returns the correct results.\n  * For example:\n  *\n  *   select * from ( values 'BAD' ) as T\n  *     where exists ((values 1) intersect (values 2))\n  *\n  * should return zero rows. Prompted by DERBY-2370.\n+ *\n+ * A somewhat unrelated test verifies the DERBY-3033 behavior, which\n+ * involves flattening of subqueries with NOT EXISTS predicates. The\n+ * issue here is that a flattened NOT EXISTS subquery cannot be used\n+ * to perform equi-join transitive closure, because the implied predicate\n+ * that results from the flattening is a NOT EQUALS condition.\n  */\n-public class ExistsWithSetOpsTest extends BaseJDBCTestCase {\n+public class ExistsWithSubqueriesTest extends BaseJDBCTestCase {\n     \n     private static final String EXISTS_PREFIX_1 =\n         \"select * from ( values 'GOT_A_ROW' ) as T where exists (\";\n@@ -55,7 +64,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n      * @param name name of the test.\n      *\n      */\n-    public ExistsWithSetOpsTest(String name)\n+    public ExistsWithSubqueriesTest(String name)\n     {\n         super(name);\n     }\n@@ -72,7 +81,7 @@ public static Test suite()\n          * to run the test against one or the other; we choose embedded.\n          */\n         suite.addTest(\n-            TestConfiguration.embeddedSuite(ExistsWithSetOpsTest.class));\n+            TestConfiguration.embeddedSuite(ExistsWithSubqueriesTest.class));\n \n         /* Wrap the suite in a CleanDatabaseTestSetup that will create\n          * and populate the test tables.\n@@ -382,4 +391,153 @@ private void checkQuery(Statement st, String [][] expRS,\n             JDBC.assertFullResultSet(rs, expRS);\n         rs.close();\n     }\n+\n+    /**\n+     * Regression test for Derby-3033.\n+     *\n+     * This method constructs a query with the property that it:\n+     * - contains a NOT EXISTS condition against a correlated subquery\n+     * - such that if that subquery is flattened, the result is 3 tables\n+     *   which all have join predicates on the same key.\n+     * The point of the test is that it is *not* correct to construct\n+     * a new equijoin predicate between table d3033_a and d3033_c via\n+     * transitive closure, because the join condition between d3033_b and\n+     * d3033_c is NOT EXISTS.\n+     *\n+     * In the original bug, the compiler/optimizer erroneously generated\n+     * the extra equijoin predicate, which caused NPE exceptions at\n+     * runtime due to attempts to reference the non-existent (NOT EXISTS) row.\n+     *\n+     * So this test succeeds if it gets the right results and no NPE.\n+     */\n+    public void testDerby3033()\n+        throws Exception\n+    {\n+        setupDerby3033();\n+\n+        PreparedStatement pstmt = prepareStatement(\n+            \"select c1, c2_b \" +\n+            \"from (select distinct st.c1,st.c2_b,dsr.c3_a,st.c3_b \" +\n+            \"      from \" +\n+            \"             d3033_a dsr, \" +  // Table order matters here!\n+            \"             d3033_b st \" +\n+            \"      where dsr.c4_a is null \" +\n+            \"      and   dsr.c2 = ? \" +\n+            \"      and   dsr.c1 = st.c1 \" +\n+            \"      and   not exists ( \" +\n+            \"              select 1 \" +\n+            \"              from d3033_c \" +\n+            \"              where d3033_c.c1 = st.c1 \" +\n+            \"              and   d3033_c.c2 = ? \" +\n+            \"              and   d3033_c.c3_c = ? \" +\n+            \"              ) \" +\n+            \") temp \"\n+        );\n+ \n+        pstmt.setInt(1, 4);\n+        pstmt.setInt(2, 4);\n+        pstmt.setInt(3, 100);\n+ \n+        String [][]expected = {\n+            { \"1\", \"100\" },\n+            { \"2\", \"200\" },\n+            { \"3\", \"300\" },\n+        };\n+        ResultSet rs = pstmt.executeQuery();\n+        JDBC.assertFullResultSet(rs, expected);\n+        pstmt.close();\n+    }\n+\n+    /**\n+     * Ensure that the #rows statistics are updated\n+     */\n+    private void updateStats(Statement st, String tName)\n+        throws Exception\n+    {\n+        ResultSet rs = st.executeQuery(\"select * from \" + tName);\n+        int numRows = 0;\n+        while (rs.next())\n+            numRows ++;\n+        rs.close();\n+    }\n+\n+    private void setupDerby3033()\n+        throws Exception\n+    {\n+        // The pattern of inserting the data is fairly important, as we\n+        // are going to do a combination of joins between the three tables\n+        // and we want both matching data and non-matching data. We load:\n+        //\n+        // d3033_a      d3033_b       d3033_c\n+        // --------     --------      --------\n+        //    1            1             1\n+        //    2            2             3\n+        //    3            3\n+        //                 4\n+        //\n+        // We also load a whole pile of irrelevant data into tables a and c\n+        // so that the index becomes relevant in the optimizer's analysis,\n+        // then we create some constraints and indexes and delete the rows\n+        // from table d3033_c (the NOT EXISTS table).\n+        //\n+        Statement s = createStatement();\n+\n+        s.executeUpdate(\"create table d3033_a \"+\n+                        \"(c1 int, c2 int, c3_a int, c4_a date)\");\n+        s.executeUpdate(\"create table d3033_b \"+\n+                        \"(c1 int primary key not null, c2_b int, c3_b date)\");\n+        s.executeUpdate(\"create table d3033_c (c1 int, c2 int, c3_c int)\");\n+        s.executeUpdate(\"insert into d3033_a (c1,c2,c3_a) values(1, 4, 10)\");\n+        s.executeUpdate(\"insert into d3033_a (c1,c2,c3_a) values(2, 4, 20)\");\n+        s.executeUpdate(\"insert into d3033_a (c1,c2,c3_a) values(3, 4, 30)\");\n+        s.executeUpdate(\"insert into d3033_b values(1, 100, CURRENT_DATE)\");\n+        s.executeUpdate(\"insert into d3033_b values(2, 200, CURRENT_DATE)\");\n+        s.executeUpdate(\"insert into d3033_b values(3, 300, CURRENT_DATE)\");\n+        s.executeUpdate(\"insert into d3033_b values(4, 400, CURRENT_DATE)\");\n+        s.executeUpdate(\"insert into d3033_c values(1, 4, 100)\");\n+        s.executeUpdate(\"insert into d3033_c values(3, 4, 100)\");\n+            \n+        PreparedStatement pstmt2 = prepareStatement(\n+                \"insert into d3033_a (c1, c2, c3_a) values (?,?,?)\");\n+\n+        PreparedStatement pstmt = prepareStatement(\n+                \"insert into d3033_b (c1, c2_b, c3_b) values (?,?,?)\");\n+\n+        java.util.Date now = new java.util.Date();\n+        java.sql.Timestamp nowTS = new java.sql.Timestamp(now.getTime());\n+        for (int i = 0; i < 15; i++)\n+        {\n+            pstmt.setInt(1, 100+i);\n+            pstmt.setInt(2, 100+i);\n+            pstmt.setTimestamp(3, nowTS);\n+            pstmt.executeUpdate();\n+\n+            for (int j = 0; j < 200; j++)\n+            {\n+                pstmt2.setInt(1, 1000+j);\n+                pstmt2.setInt(2, 100+i); // note \"i\" here (FK)\n+                pstmt2.setInt(3, 1000 + (j+1)*10);\n+                pstmt2.executeUpdate();\n+            }\n+        }\n+\n+\n+        s.executeUpdate(\"alter table d3033_a add constraint \" +\n+                \"d3033_a_fk foreign key (c2) references d3033_b(c1) \" +\n+                \"on delete cascade on update no action\");\n+\n+        s.executeUpdate(\"alter table d3033_c add constraint \" +\n+                \"d3033_c_fk foreign key (c1) references d3033_b(c1) \" +\n+                \"on delete cascade on update no action\");\n+\n+        s.executeUpdate(\"delete from d3033_c\");\n+\n+        // Update the statistics on the 3 tables:\n+        updateStats(s, \"d3033_a\");\n+        updateStats(s, \"d3033_b\");\n+        updateStats(s, \"d3033_c\");\n+\n+        s.close();\n+    }\n+\n }",
                "previous_filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSetOpsTest.java"
            },
            {
                "sha": "e9a76fa83ee03da2631307f7404c821400afedf3",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/9247f313449c367d8b0b6927b3157cec0c781ee0/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "raw_url": "https://github.com/apache/derby/raw/9247f313449c367d8b0b6927b3157cec0c781ee0/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java?ref=9247f313449c367d8b0b6927b3157cec0c781ee0",
                "patch": "@@ -63,7 +63,7 @@ public static Test suite() {\n         suite.addTest(CreateTableFromQueryTest.suite());\n         suite.addTest(DatabaseClassLoadingTest.suite());\n         suite.addTest(DynamicLikeOptimizationTest.suite());\n-        suite.addTest(ExistsWithSetOpsTest.suite());\n+        suite.addTest(ExistsWithSubqueriesTest.suite());\n         suite.addTest(GrantRevokeTest.suite());\n         suite.addTest(GroupByExpressionTest.suite());\n \t\tsuite.addTest(LangScripts.suite());"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/4d04c7bf7abe9dd93e202be57d78059aa5bd3ea1",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/bcceef4bfa8d0f76100296985dffb3848e67de2e",
        "message": "DERBY-1706\ncontributed by Mamta Satoor\n\nThis fix addresses the null pointer reported in DERBY-1706.\n\nSESSION schema is a special schema which is used for global temporary tables. \nIn order to handle global temporary table, Derby creates a in-memory SESSION \nschema descriptor which does not have any uuid associated with it. A physical \nSESSION schema(with it's uuid set properly) will be created *only* if there is\na persistent object created in it by a user. Global temporary tables can only \nreside in SESSION schema and Derby documentation recommends that SESSION schema\nshould not be used for other persistent objects. This is because the same \nobject name could be referencing different objects within SESSION schema \ndepending on in what order they got created.\n\nFor instance\ncreate table session.t1(c11 int);\n-- the following select will get data from the persistent table t1 in SESSION schema\nselect * from session.t1;\ndeclare global temporary table session.t1(c11 int, c12 int) on commit delete rows not logged;\n-- the following select this time will return data from the temporary table t1 rather than persistent table t1\n-- This is because, at any time, if there is a global temporary table by the table referenced by a statement,\n-- then Derby will always pick up the global temporary table. If no global temporary table by that name is\n-- found, then Derby will look for persistent table in SESSION schema. If none found, then error will be thrown\nselect * from session.t1;\n-- following will drop the temporary table t1 and not the persistent table t1\ndrop table session.t1;\n-- the following select will get data from the persistent table t1 in SESSION schema because temporary table\n-- doesn't exist anymore\nselect * from session.t1;\n\nSo, as can be seen from the example above, the statements referencing SESSION schema objects could have different meanings depending on what kind of objects exist in SESSION schema. Because of this, the compiled plans of statements referencing SESSION schema are not saved in the statement cache, rather they get compiled everytime they are executed. In order to enforce this, in the compilation phase, Derby checks if the statement at hand is referencing a SESSION schema object by calling referencesSessionSchema method. If this method returns true, the statement's compiled plan will not be saved in the statement cache.\n\nNow, taking the script provided by Yip which results in NPE\nset schema session;\ncreate table t1 (i int);\n\nDerby calls referencesSessionSchema while compiling \"create table t1 (i int); \" to see if it references SESSION schema object. Since, there is no schema associated with the table t1, Derby will check for the compilation schema which in this case is SESSION schema because we used \"set schema session; \". (This happens in QueryTreeNode.getSchemaDescriptor(String schemaName, boolean raiseError) line 1486). The method\nthen tries to call an equal method on the UUID associated with the SESSION schema descriptor but since it is null(because no physical SESSION schema has been created yet), we end up with a null pointer exception. This will happen only if no physical SESSION schema has been created yet and user tries to create a first persistent object inside SESSION schema after doing a set schema session.\n\nFollowing will not give a NPE because user hand created SESSION schema before doing set schema SESSION and creating an object inside it.\ncreate schema session;\nset schema session;\ncreate table t1 (i int);\nThe hand creation of SESSION schema causes Derby to have a schema descriptor for SESSION schema with it's uuid set correctly.\n\nThe fix for the NPE is simple and that is to check if the UUID is null.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@447212 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_167",
        "file": [
            {
                "sha": "6d5d04aeb5e8511ced2236feb0c5303752fdb149",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java",
                "status": "modified",
                "additions": 6,
                "deletions": 1,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/4d04c7bf7abe9dd93e202be57d78059aa5bd3ea1/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java",
                "raw_url": "https://github.com/apache/derby/raw/4d04c7bf7abe9dd93e202be57d78059aa5bd3ea1/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java?ref=4d04c7bf7abe9dd93e202be57d78059aa5bd3ea1",
                "patch": "@@ -1506,7 +1506,12 @@ final SchemaDescriptor\tgetSchemaDescriptor(String schemaName, boolean raiseError\n \t\t\tgetLanguageConnectionContext().getTransactionCompile(), raiseError);\n \n \t\tif (isCurrent || isCompilation) {\n-\t\t\tif (sdCatalog != null)\n+\t\t\t//if we are dealing with a SESSION schema and it is not physically\n+\t\t\t//created yet, then it's uuid is going to be null. DERBY-1706\n+\t\t\t//Without the getUUID null check below, following will give NPE\n+\t\t\t//set schema session; -- session schema has not been created yet\n+\t\t\t//create table t1(c11 int);\n+\t\t\tif (sdCatalog != null && sdCatalog.getUUID() != null)\n \t\t\t{\n \t\t\t\t// different UUID for default (current) schema than in catalog,\n \t\t\t\t// so reset default schema."
            },
            {
                "sha": "7356c6cf2ee502c67a7ea8b596ee8ff08ca0ef58",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/declareGlobalTempTableJava.out",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/4d04c7bf7abe9dd93e202be57d78059aa5bd3ea1/java/testing/org/apache/derbyTesting/functionTests/master/declareGlobalTempTableJava.out",
                "raw_url": "https://github.com/apache/derby/raw/4d04c7bf7abe9dd93e202be57d78059aa5bd3ea1/java/testing/org/apache/derbyTesting/functionTests/master/declareGlobalTempTableJava.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/declareGlobalTempTableJava.out?ref=4d04c7bf7abe9dd93e202be57d78059aa5bd3ea1",
                "patch": "@@ -1,4 +1,6 @@\n Test declaredGlobalTempTableJava starting\n+TEST-DERBY1706 : Create a persistent object in SESSION schema w/o first creating the schema\n+TEST-DERBY1706 PASSED\n TEST1 : global temporary tables can only be in SESSION schema\n Expected message: The qualifier for a declared global temporary table name must be SESSION.\n TEST1 PASSED"
            },
            {
                "sha": "46a64af75b02aeb60d62662fae6d2e1013fd1cc8",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/declareGlobalTempTableJava.java",
                "status": "modified",
                "additions": 47,
                "deletions": 0,
                "changes": 47,
                "blob_url": "https://github.com/apache/derby/blob/4d04c7bf7abe9dd93e202be57d78059aa5bd3ea1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/declareGlobalTempTableJava.java",
                "raw_url": "https://github.com/apache/derby/raw/4d04c7bf7abe9dd93e202be57d78059aa5bd3ea1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/declareGlobalTempTableJava.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/declareGlobalTempTableJava.java?ref=4d04c7bf7abe9dd93e202be57d78059aa5bd3ea1",
                "patch": "@@ -68,6 +68,10 @@ public static void main(String[] args) {\n \t\t\tcon1.setAutoCommit(false);\n \t\t\tcon2.setAutoCommit(false);\n \n+\t\t\t/* Test this before other tests because this test requires\n+\t\t\t that session schema has not been created yet */\n+\t\t\tpassed = testDERBY1706(con1, s) && passed;\n+\n \t\t\t/* Test various schema and grammar related cases */\n \t\t\tpassed = testSchemaNameAndGrammar(con1, s) && passed;\n \n@@ -90,6 +94,49 @@ public static void main(String[] args) {\n \t\tSystem.out.println(\"Test declaredGlobalTempTable finished\");\n \t}\n \n+\t/**\n+\t * Test switching to session schema (it doesn't yet exist because\n+\t * no create schema session has been issued yet) & then try to create \n+\t * first persistent object in it. This used to cause null pointer \n+\t * exception (DERBY-1706).\n+\t *\n+\t * @param conn\tThe Connection\n+\t * @param s\t\tA Statement on the Connection\n+\t *\n+\t * @return\ttrue if it succeeds, false if it doesn't\n+\t *\n+\t * @exception SQLException\tThrown if some unexpected error happens\n+\t */\n+\n+\tstatic boolean testDERBY1706(Connection con1, Statement s)\n+\t\t\t\t\tthrows SQLException {\n+\t\tboolean passed = true;\n+\n+\t\ttry\n+\t\t{\n+\t\t\tSystem.out.print(\"TEST-DERBY1706 : Create a persistent object\");\n+\t\t\tSystem.out.print(\" in SESSION schema w/o first creating the\");\n+\t\t\tSystem.out.println(\" schema\");\n+\n+\t\t\ts.executeUpdate(\"set schema SESSION\");\n+\t\t\ts.executeUpdate(\"create table DERBY1706(c11 int)\");\n+\t\t\ts.executeUpdate(\"drop table DERBY1706\");\n+\t\t\ts.executeUpdate(\"set schema APP\");\n+\t\t\ts.executeUpdate(\"drop schema SESSION restrict\");\n+\n+\t\t\tcon1.commit();\n+\t\t\tSystem.out.println(\"TEST-DERBY1706 PASSED\");\n+\t\t} catch (Throwable e)\n+\t\t{\n+\t\t\tSystem.out.println(\"Unexpected message: \" + e.getMessage());\n+\t\t\tcon1.rollback();\n+\t\t\tpassed = false; //we shouldn't have reached here. Set passed to false to indicate failure\n+\t\t\tSystem.out.println(\"TEST-DERBY1706 FAILED\");\n+\t\t}\n+\n+\t\treturn passed;\n+\t}\n+\n \t/**\n \t * Test various schema and grammar related cases\n \t *"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/e9ac824113c436a74aa642fc4995071a6c4366cf",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/4222fe98ddeecbedbca29e6d9a5eddc7bd8de43d",
        "message": "DERBY-6688 NPE (or sane: ASSERT failure) with ROW_NUMBER in some subqueries\n\nIn FromSubquery (used in the OK subquery) the phasing is different\nthan in SubqueryNode (used in the failing query): the order by list is\npushed down too late in the SubqueryNode (after the\nSelectNode#preprocess), so that the fact that the order by carries an\nimplicit window definition isn't recorded, causing the \"windows\" field\nto be null, leading to missing rewriting in the getProjectRestrict\nphase, hence the error.\n\nIn FromSubquery, the order by list is pushed down into the child\nselect node just before calling its preprocess method, i.e. the order\nby list is present what that happens.\n\nThe patch (derby-6688-b) moves the pushing down of the order by list\nin SubqueryNode#preprocess to the resultSet (the SelectNode) to just\nbefore the call to preprocess of the resultSet, so the rest of the\nwindows rewriting machinery kicks in.\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1616332 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_168",
        "file": [
            {
                "sha": "04e29e7210099b85e43558c6f2af88ad65f88bef",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java",
                "status": "modified",
                "additions": 21,
                "deletions": 17,
                "changes": 38,
                "blob_url": "https://github.com/apache/derby/blob/e9ac824113c436a74aa642fc4995071a6c4366cf/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java",
                "raw_url": "https://github.com/apache/derby/raw/e9ac824113c436a74aa642fc4995071a6c4366cf/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java?ref=e9ac824113c436a74aa642fc4995071a6c4366cf",
                "patch": "@@ -622,7 +622,25 @@ ValueNode preprocess(int numTables,\n \t\tboolean\t\tflattenable;\n \t\tValueNode\ttopNode = this;\n \n-\t\tresultSet = resultSet.preprocess(numTables, null, (FromList) null);\n+        final boolean haveOrderBy; // need to remember for flattening decision\n+\n+        // Push the order by list down to the ResultSet\n+        if (orderByList != null) {\n+            haveOrderBy = true;\n+            // If we have more than 1 ORDERBY columns, we may be able to\n+            // remove duplicate columns, e.g., \"ORDER BY 1, 1, 2\".\n+            if (orderByList.size() > 1)\n+            {\n+                orderByList.removeDupColumns();\n+            }\n+\n+            resultSet.pushOrderByList(orderByList);\n+            orderByList = null;\n+        } else {\n+            haveOrderBy = false;\n+        }\n+\n+        resultSet = resultSet.preprocess(numTables, null, (FromList) null);\n \n         if (leftOperand != null)\n         {\n@@ -684,7 +702,7 @@ ValueNode preprocess(int numTables,\n \t\t */\n \t\tflattenable = (resultSet instanceof RowResultSetNode) &&\n \t\t\t\t\t  underTopAndNode && !havingSubquery &&\n-                      orderByList == null &&\n+                      !haveOrderBy &&\n                       offset == null &&\n                       fetchFirst == null &&\n \t\t\t\t\t  !isWhereExistsAnyInWithWhereSubquery() &&\n@@ -756,7 +774,7 @@ ValueNode preprocess(int numTables,\n \n \t\tflattenable = (resultSet instanceof SelectNode) &&\n  \t\t\t          !((SelectNode)resultSet).hasWindows() &&\n-                      orderByList == null &&\n+                      !haveOrderBy &&\n                       offset == null &&\n                       fetchFirst == null &&\n \t\t\t\t\t  underTopAndNode && !havingSubquery &&\n@@ -855,20 +873,6 @@ else if ( (isIN() || isANY() || isEXISTS() || flattenableNotExists) &&\n \n         resultSet.pushQueryExpressionSuffix();\n \n-\t\t// Push the order by list down to the ResultSet\n-\t\tif (orderByList != null) {\n-\t\t\t// If we have more than 1 ORDERBY columns, we may be able to\n-\t\t\t// remove duplicate columns, e.g., \"ORDER BY 1, 1, 2\".\n-\t\t\tif (orderByList.size() > 1)\n-\t\t\t{\n-\t\t\t\torderByList.removeDupColumns();\n-\t\t\t}\n-\n-\t\t\tresultSet.pushOrderByList(orderByList);\n-\t\t\torderByList = null;\n-\t\t}\n-\n-\n         resultSet.pushOffsetFetchFirst( offset, fetchFirst, hasJDBClimitClause );\n \n \t\t/* We transform the leftOperand and the select list for quantified "
            },
            {
                "sha": "c9d88319565f065a80602ea073bcc08522c3c255",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "status": "modified",
                "additions": 27,
                "deletions": 1,
                "changes": 28,
                "blob_url": "https://github.com/apache/derby/blob/e9ac824113c436a74aa642fc4995071a6c4366cf/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "raw_url": "https://github.com/apache/derby/raw/e9ac824113c436a74aa642fc4995071a6c4366cf/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java?ref=e9ac824113c436a74aa642fc4995071a6c4366cf",
                "patch": "@@ -588,11 +588,37 @@ public void testBasicOperations()\n             \"select * from t4 t_1 join t4 t_2 on \" +\n             \"                     t_1.a = row_number() over () + t_2.a\");\n \n-        // DERBY-6565\n+        // DERBY-6565: NPE before\n         assertStatementError(\n                 LANG_WINDOW_FUNCTION_CONTEXT_ERROR,\n                 s,\n                 \"update t3 set y = y - row_number() over ()\");\n+\n+        // DERBY-6688: subquery using SubqueryNode rather than FromSubquery\n+        // had problems with presence of window function in order by.\n+\n+        JDBC.assertFullResultSet(s.executeQuery(\"select * from t3\"),\n+                new String[][]{{\"4\"},{\"5\"},{\"6\"},{\"7\"},{\"8\"}});\n+\n+        // failed prior to DERBY-6688\n+        s.executeUpdate(\n+            \"update t3 set y = y - \" +\n+            \"    (select y from t3 order by row_number() over () \" +\n+            \"     fetch first 1 row only)\");\n+        JDBC.assertFullResultSet(s.executeQuery(\"select * from t3\"),\n+                new String[][]{{\"0\"},{\"1\"},{\"2\"},{\"3\"},{\"4\"}});\n+\n+        // Used to work before\n+        JDBC.assertFullResultSet(s.executeQuery(\n+            \"select * from  \" +\n+            \"    (select y from t3 order by row_number() over () fetch first 1 row only) tt\"),\n+            new String[][]{{\"0\"}});\n+\n+        // failed prior to DERBY-6688\n+        JDBC.assertFullResultSet(s.executeQuery(\n+            \"select * from t3 where y = \" +\n+                \"    (select y from t3 order by row_number() over () fetch first row only)\"),\n+            new String[][]{{\"0\"}});\n     }\n \n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/7b429a3186a9c705baa9d5172f3ad3e2cfcc446c",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/4ff594e4ddcb3281ce71ac24784453e2d2a8eab1",
        "message": "DERBY-3823 NullPointerException in stress.multi test\n\nAdding a test case showing that in case of a network server, an open resulset's metadata can get changed underneath it but it is\n\tnot reflected in the metadata. The test creates a table with one of column as varchar(5). It inserts 1000 rows and then\n\topens a reulset on that table with varchar column as one of the columns. The test verifies that the reulset's metadata\n\tat this point shows the length of the column as 5. Next, while the resulset is still open, the tests does an ALTER TABLE\n\tto increase the varchar column's length to 8. In case of embedded mode, this fails because of the open resulset. In case \n\tof network server, because of prefetching of rows, the ALTER TABLE is allowed but when the test gets the resulset's \n\tmetadata again and checks the length of varchar column, it still shows the length to be 5 rather than 8. \n\nThere are couple other jiras related to network server prefetching, namely, DERBY-3839 and DERBY-4373.\n\nOnce DERBY-3823 is fixed, we should see the change in metadata reflected in resultset's metadata. A fix for DERBY-3823 will\n        cause the following the test added here to fail. Right now, the new test accepts the incorrect metadata length obtained \n\tthrough the resultset's metadata after ALTER TABLE has been performed in network server mode.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1182570 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_169",
        "file": [
            {
                "sha": "2d43bcaa7696b62e8ad139ebb1349bda4fb9b674",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java",
                "status": "modified",
                "additions": 59,
                "deletions": 0,
                "changes": 59,
                "blob_url": "https://github.com/apache/derby/blob/7b429a3186a9c705baa9d5172f3ad3e2cfcc446c/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java",
                "raw_url": "https://github.com/apache/derby/raw/7b429a3186a9c705baa9d5172f3ad3e2cfcc446c/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java?ref=7b429a3186a9c705baa9d5172f3ad3e2cfcc446c",
                "patch": "@@ -1789,6 +1789,65 @@ public void testAlterColumn() throws Exception {\n \n         st.executeUpdate(\n                 \"rename column renc_schema_2.renc_8.b to b2\");\n+        \n+        //DERBY-3823 While a resulset is still open, network server allows\n+        // ALTER TABLE to change the length of the column in the resultset,\n+        // but that length is not reflected in resultset's metadata. This\n+        // most likely is happening because of the pre-fetching by the \n+        // server. Related jiras are DERBY-3839 and DERBY-4373.\n+        //Once DERBY-3823 is fixed, we should see the change in metadata\n+        // reflected in resultset's metadata. A fix for DERBY-3823 will\n+        // cause the following test to fail. Right now, the following\n+        // test accepts the incorrect metadata length obtained through\n+        // the resultset's metadata after ALTER TABLE has been performed.\n+        conn.setAutoCommit(false);\n+        //Create table and load data\n+        st.executeUpdate(\n+                \"create table derby_3823_t1 (c11 int, c12 varchar(5))\");\n+        PreparedStatement ps = prepareStatement(\n+        \t\t\"insert into derby_3823_t1 values(?,'aaaaa')\");\n+        for (int i = 0; i < 1000; i++) { \n+        \tps.setInt(1, i); \n+        \tps.executeUpdate(); \n+    \t} \n+        conn.commit();\n+        //Open a resultset on the table which will be altered because\n+        // the resultset has been exhausted. The alter table will fail\n+        // in embedded mode because of the open resulset but will succeed\n+        // in network server because of the pre-fetching.\n+        rs = st.executeQuery(\"select * from derby_3823_t1\");\n+        //Just get first 100 rows rather than going through all the rows\n+        //Next, we will attempt to change the column length of one of the\n+        // columns in the resultset and see what happens\n+        for (int i = 0; i < 100; i++) { \n+        \trs.next(); \n+    \t}\n+        rsmd = rs.getMetaData();\n+        //The column c12's length at this point is 2\n+        assertEquals(5, rsmd.getColumnDisplaySize(2));\n+        Statement st1 = createStatement();\n+        // This should fail, as c12's column length at this point is 2 and\n+        //  data being inserted is 8 characters in length\n+        assertStatementError(\"22001\", st1, \"insert into derby_3823_t1 values(99,'12345678')\");\n+        if (usingEmbedded()) \n+        {\n+        \t//ALTER TABLE will fail in embedded because of the open resulset\n+            assertStatementError(\"X0X95\", st1,\n+                    \"alter table derby_3823_t1 alter column c12 set data type varchar(8)\");\n+        } else {\n+        \t//ALTER TABLE does not fail in network server because of pre-fetching\n+            st1.execute(\"alter table derby_3823_t1 alter column c12 set data type varchar(8)\"); \n+            //BUG - but the following metadata of the resultset does not show\n+            //  the new column length for C12 which is 8 rather than 2\n+            rsmd = rs.getMetaData(); \n+            //Following is incorrect. The column length should have been 8\n+            // rather than 5\n+            assertEquals(5, rsmd.getColumnDisplaySize(2));\n+            //Following shows that we are able to enter 8character string after\n+            // alter table alter column. It is the resulset metadata which does\n+            // not reflect the change in length\n+            st1.executeUpdate(\"insert into derby_3823_t1 values(99,'12345678')\"); \n+        }\n     }\n     \n     // DERBY-5120 Make sure that sysdepends will catch trigger"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/6a072f828dd040b8cf63d0c0fb160ee086ddb4e0",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/26e4e3f309325129a419a60c8037464956afa128",
        "message": "DerbyDERBY-5663 Getting NPE when trying to set derby.language.logStatementText property to true inside a junit suite.\n\nIt is possible that the same instance of SystemPropertyTestSetup decorator is used more than once. In such a case, nulling out the oldValues in tearDown method can cause a null pointer exception in the subsequent use of the same SystemPropertyTestSetup. The right thing to do is to initialize oldValues to new Properties object everytime SystemPropertyTestSetup.setUp gets used. In order to do this, we are removing the initialization of oldValues from the constructor and putting it in setUp method.\n\nAdditionally, we do not want to null out newValues in tearDown method because the subsequent use of same SystemPropertyTestSetup instance will loose the new values requested by the user of the decorator. Because of this, we will not null newValues in tearDown anymore.\n\nExisting junit All suite and derbyall ran fine with these changes.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1309244 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_170",
        "file": [
            {
                "sha": "c02f42ab87a3f5d0de3eccf86f773438846d1bac",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java",
                "status": "modified",
                "additions": 8,
                "deletions": 0,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/6a072f828dd040b8cf63d0c0fb160ee086ddb4e0/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java",
                "raw_url": "https://github.com/apache/derby/raw/6a072f828dd040b8cf63d0c0fb160ee086ddb4e0/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java?ref=6a072f828dd040b8cf63d0c0fb160ee086ddb4e0",
                "patch": "@@ -36,6 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n+import java.util.Properties;\n \n import junit.framework.Test;\n \n@@ -45,6 +46,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import org.apache.derbyTesting.junit.TestConfiguration;\n import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;\n import org.apache.derbyTesting.junit.JDBC;\n+import org.apache.derbyTesting.junit.SystemPropertyTestSetup;\n \n /**\n  * This test is part of the \"largedata\" suite because this test tests data for\n@@ -132,6 +134,11 @@ public static Test suite() {\n      * @return a test suite\n      */\n     static Test baseSuite(final int biggestSize, final int bigSize) {\n+    \t//Run the suite with following properties in case we run into lock\n+    \t// time out issues. It will help debug the problem if timeouts occur.\n+        Properties sysprops = new Properties();\n+        sysprops.setProperty(\"derby.locks.deadlockTrace\", \"true\");\n+        sysprops.setProperty(\"derby.locks.monitor\", \"true\");\n         // Some of the test cases depend on certain other test cases to run\n         // first, so force the test cases to run in lexicographical order.\n         Test suite = new CleanDatabaseTestSetup(\n@@ -141,6 +148,7 @@ protected void decorateSQL(Statement s)\n                 setupTables(s, biggestSize, bigSize);\n             }\n         };\n+        suite = new SystemPropertyTestSetup(suite,sysprops);\n \n         return new SupportFilesSetup(suite);\n     }"
            },
            {
                "sha": "a5340a09aa59ca862c5bd51d1ac1ac6514d09337",
                "filename": "java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java",
                "status": "modified",
                "additions": 9,
                "deletions": 3,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/6a072f828dd040b8cf63d0c0fb160ee086ddb4e0/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java",
                "raw_url": "https://github.com/apache/derby/raw/6a072f828dd040b8cf63d0c0fb160ee086ddb4e0/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java?ref=6a072f828dd040b8cf63d0c0fb160ee086ddb4e0",
                "patch": "@@ -51,7 +51,6 @@ public SystemPropertyTestSetup(Test test,\n \t{\n \t\tsuper(test);\n \t\tthis.newValues = newValues;\n-\t\tthis.oldValues = new Properties();\n \t\tthis.staticProperties = staticProperties;\n \t}\n \n@@ -67,7 +66,6 @@ public SystemPropertyTestSetup(Test test,\n \t{\n \t\tsuper(test);\n \t\tthis.newValues = newValues;\n-\t\tthis.oldValues = new Properties();\n \t\tthis.staticProperties = false;\n \t}\n \t/**\n@@ -77,6 +75,15 @@ public SystemPropertyTestSetup(Test test,\n     protected void setUp()\n     throws java.lang.Exception\n     {\n+    \t//DERBY-5663 Getting NPE when trying to set \n+    \t// derby.language.logStatementText property to true inside a junit \n+    \t// suite.\n+    \t//The same instance of SystemPropertyTestSetup can be used again\n+    \t// and hence we want to make sure that oldValues is not null as set\n+    \t// in the tearDown() method. If we leave it null, we will run into NPE\n+    \t// during the tearDown of SystemPropertyTestSetup during the \n+    \t// decorator's reuse.\n+\t\tthis.oldValues = new Properties();\n     \t// shutdown engine so static properties take effect\n         // shutdown the engine before setting the properties. this\n         // is because the properties may change authentication settings\n@@ -106,7 +113,6 @@ protected void tearDown()\n     \t// shutdown engine to restore any static properties\n     \tif (staticProperties)\n     \t\tTestConfiguration.getCurrent().shutdownEngine();\n-        newValues = null;\n         oldValues = null;\n     }\n     "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/00b43c19c2967d0db68379a5bd407c1683feeb76",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/669492d570100a818463a07d96fbcd2171f1ad06",
        "message": "Adding a test case for DERBY-3302. There are two sub-test case classes involved here,\ncol_rec1.java and col_rec2.java\n\nThe purpose of col_rec1 test and col_rec2 test is to create a territory based database and \ncreate some objects with collation sensitive character types. Then, make the database crash \nso that during the recovery, store engine has to do collation related operations. Those \ncollation related operations are going to require that we use correct Collator object. \nDERBY-3302 demonstrated a npe during this operation because Derby was relying on database \ncontext to get the correct Collator object. But database context is not available at this \npoint in the recovery. With the fix for DERBY-3302, the Collator object will now be \nobtained from collation sensitive datatypes itself rather than looking at database context \nwhich is not available at this point in recovery. \n\ncol_rec1 class will do the steps of create a territory based database and create some \nobjects with collation sensitive character types. Then, make the database crash. \ncol_rec2 class will do the part of rebooting the crashed db which will require store to go \nthrough recovery.\n\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@611295 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_171",
        "file": [
            {
                "sha": "03569469c820e6f24214833123aeb07f94c45455",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/col_rec1.out",
                "status": "added",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/master/col_rec1.out",
                "raw_url": "https://github.com/apache/derby/raw/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/master/col_rec1.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/col_rec1.out?ref=00b43c19c2967d0db68379a5bd407c1683feeb76",
                "patch": "@@ -0,0 +1,2 @@\n+Beginning test: test1\n+Ending test: test1"
            },
            {
                "sha": "03569469c820e6f24214833123aeb07f94c45455",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/col_rec2.out",
                "status": "added",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/master/col_rec2.out",
                "raw_url": "https://github.com/apache/derby/raw/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/master/col_rec2.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/col_rec2.out?ref=00b43c19c2967d0db68379a5bd407c1683feeb76",
                "patch": "@@ -0,0 +1,2 @@\n+Beginning test: test1\n+Ending test: test1"
            },
            {
                "sha": "d4dba752b5d6b9fd2b9ecc69d42e2682803efb13",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/suites/storeCollationDBrecovery.properties",
                "status": "added",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/suites/storeCollationDBrecovery.properties",
                "raw_url": "https://github.com/apache/derby/raw/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/suites/storeCollationDBrecovery.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/suites/storeCollationDBrecovery.properties?ref=00b43c19c2967d0db68379a5bd407c1683feeb76",
                "patch": "@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to you under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+usesystem=storeCollationDBRecovery\n+"
            },
            {
                "sha": "ffe5a45e528b671f1f1bbc9d52c3558b5d538261",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/suites/storeCollationDBrecovery.runall",
                "status": "added",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/suites/storeCollationDBrecovery.runall",
                "raw_url": "https://github.com/apache/derby/raw/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/suites/storeCollationDBrecovery.runall",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/suites/storeCollationDBrecovery.runall?ref=00b43c19c2967d0db68379a5bd407c1683feeb76",
                "patch": "@@ -0,0 +1,2 @@\n+store/col_rec1.java\n+store/col_rec2.java"
            },
            {
                "sha": "2945752f41655f339b489235f48bcef9e4388b9d",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec1.java",
                "status": "added",
                "additions": 115,
                "deletions": 0,
                "changes": 115,
                "blob_url": "https://github.com/apache/derby/blob/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec1.java",
                "raw_url": "https://github.com/apache/derby/raw/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec1.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec1.java?ref=00b43c19c2967d0db68379a5bd407c1683feeb76",
                "patch": "@@ -0,0 +1,115 @@\n+/*\r\n+\r\n+   Derby - Class org.apache.derbyTesting.functionTests.tests.store.col_rec1\r\n+\r\n+   Licensed to the Apache Software Foundation (ASF) under one or more\r\n+   contributor license agreements.  See the NOTICE file distributed with\r\n+   this work for additional information regarding copyright ownership.\r\n+   The ASF licenses this file to You under the Apache License, Version 2.0\r\n+   (the \"License\"); you may not use this file except in compliance with\r\n+   the License.  You may obtain a copy of the License at\r\n+\r\n+      http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+   Unless required by applicable law or agreed to in writing, software\r\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+   See the License for the specific language governing permissions and\r\n+   limitations under the License.\r\n+\r\n+ */\r\n+\r\n+package org.apache.derbyTesting.functionTests.tests.store;\r\n+\r\n+import org.apache.derby.iapi.services.sanity.SanityManager;\r\n+\r\n+import java.sql.CallableStatement;\r\n+import java.sql.Connection;\r\n+import java.sql.DriverManager;\r\n+import java.sql.PreparedStatement;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.apache.derby.tools.ij;\r\n+\r\n+/**\r\n+ * The purpose of this test and col_rec2 test is to create a territory based \r\n+ * database and create some objects with collation sensitive character types. \r\n+ * Then, make the database crash so that during the recovery, store engine has \r\n+ * to do collation related operations. Those collation related operations are \r\n+ * going to require that we use correct Collator object. DERBY-3302 \r\n+ * demonstrated a npe during this operation because Derby was relying on\r\n+ * database context to get the correct Collator object. But database context\r\n+ * is not available at this point in the recovery. With the fix for DERBY-3302, \r\n+ * the Collator object will now be obtained from collation sensitive datatypes \r\n+ * itself rather than looking at database context which is not available at \r\n+ * this point in recovery. \r\n+ * \r\n+ * This particular class will do the steps of create a territory based database\r\n+ * and create some objects with collation sensitive character types. Then, make \r\n+ * the database crash. col_rec2.java will do the part of rebooting the crashed\r\n+ * db which will require store to go through recovery.\r\n+ */\r\n+\r\n+public class col_rec1 extends BaseTest\r\n+{\r\n+\r\n+    public col_rec1()\r\n+    {\r\n+    }\r\n+\r\n+    /**\r\n+     * setup for restart recovery test which will require the use of correct\r\n+     * Collator object during recovery of territory based database that will \r\n+     * be created and crashed in this test and later will be recovered in\r\n+     * col_rec2.\r\n+     **/\r\n+    private void test1(\r\n+    Connection  conn,\r\n+    String      test_name,\r\n+    String      table_name)\r\n+        throws SQLException\r\n+    {\r\n+        beginTest(conn, test_name);\r\n+        Statement s = conn.createStatement();\r\n+        s.execute(\r\n+                \"create table t(x varchar(100) primary key)\");\r\n+        conn.commit();\r\n+        conn.setAutoCommit(false);\r\n+        s.execute(\"insert into t values 'xxxx'\");\r\n+\t\tConnection connSecond = DriverManager.getConnection\r\n+\t\t(\"jdbc:derby:collationDB\");\r\n+        connSecond.setAutoCommit(false);\r\n+        Statement sSecond = connSecond.createStatement();\r\n+        sSecond.execute(\"insert into t values 'abab'\");\r\n+        endTest(conn, test_name);\r\n+    }\r\n+\r\n+    public void testList(Connection conn)\r\n+        throws SQLException\r\n+    {\r\n+        test1(conn, \"test1\", \"T\");\r\n+    }\r\n+\r\n+    public static void main(String[] argv) \r\n+        throws Throwable\r\n+    {\r\n+    \tcol_rec1 test = new col_rec1();\r\n+\r\n+   \t\tij.getPropertyArg(argv); \r\n+        Connection conn = ij.startJBMS();\r\n+        conn.setAutoCommit(false);\r\n+\r\n+        try\r\n+        {\r\n+            test.testList(conn);\r\n+        }\r\n+        catch (SQLException sqle)\r\n+        {\r\n+\t\t\torg.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(\r\n+                System.out, sqle);\r\n+\t\t\tsqle.printStackTrace(System.out);\r\n+\t\t}\r\n+    }\r\n+}\r"
            },
            {
                "sha": "325d1d32c6393265a40fa5cb98dd7fd113cd5160",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec1_app.properties",
                "status": "added",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec1_app.properties",
                "raw_url": "https://github.com/apache/derby/raw/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec1_app.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec1_app.properties?ref=00b43c19c2967d0db68379a5bd407c1683feeb76",
                "patch": "@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to you under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+ij.database=jdbc:derby:collationDB;create=true;territory=no_NO;collation=TERRITORY_BASED\n+"
            },
            {
                "sha": "9b8b0c90555aca2546cc4106b33ee93b30615a48",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec2.java",
                "status": "added",
                "additions": 119,
                "deletions": 0,
                "changes": 119,
                "blob_url": "https://github.com/apache/derby/blob/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec2.java",
                "raw_url": "https://github.com/apache/derby/raw/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec2.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec2.java?ref=00b43c19c2967d0db68379a5bd407c1683feeb76",
                "patch": "@@ -0,0 +1,119 @@\n+/*\r\n+\r\n+  Derby - Class org.apache.derbyTesting.functionTests.tests.store.col_rec2\r\n+\r\n+   Licensed to the Apache Software Foundation (ASF) under one or more\r\n+   contributor license agreements.  See the NOTICE file distributed with\r\n+   this work for additional information regarding copyright ownership.\r\n+   The ASF licenses this file to You under the Apache License, Version 2.0\r\n+   (the \"License\"); you may not use this file except in compliance with\r\n+   the License.  You may obtain a copy of the License at\r\n+\r\n+      http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+   Unless required by applicable law or agreed to in writing, software\r\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+   See the License for the specific language governing permissions and\r\n+   limitations under the License.\r\n+\r\n+ */\r\n+\r\n+package org.apache.derbyTesting.functionTests.tests.store;\r\n+\r\n+import org.apache.derby.iapi.services.sanity.SanityManager;\r\n+\r\n+import java.sql.CallableStatement;\r\n+import java.sql.Connection;\r\n+import java.sql.PreparedStatement;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.apache.derby.tools.ij;\r\n+\r\n+/**\r\n+ * The purpose of this test and col_rec1 test is to create a territory based \r\n+ * database and create some objects with collation sensitive character types. \r\n+ * Then, make the database crash so that during the recovery, store engine has \r\n+ * to do collation related operations. Those collation related operations are \r\n+ * going to require that we use correct Collator object. DERBY-3302 \r\n+ * demonstrated a npe during this operation because Derby was relying on\r\n+ * database context to get the correct Collator object. But database context\r\n+ * is not available at this point in the recovery. With the fix for DERBY-3302, \r\n+ * the Collator object will now be obtained from collation sensitive datatypes \r\n+ * itself rather than looking at database context which is not available at \r\n+ * this point in recovery. \r\n+ * \r\n+ * col_rec1 class will do the steps of create a territory based database\r\n+ * and create some objects with collation sensitive character types. Then, make \r\n+ * the database crash. This test will do the part of rebooting the crashed\r\n+ * db which will require store to go through recovery.\r\n+ */\r\n+\r\n+public class col_rec2 extends BaseTest\r\n+{\r\n+\r\n+    public col_rec2()\r\n+    {\r\n+    }\r\n+\r\n+    /**\r\n+     * setup for restart recovery test which will require the use of correct\r\n+     * Collator object during recovery of territory based database that was \r\n+     * created and crashed in this col_rec1\r\n+     **/\r\n+    private void test1(\r\n+    Connection  conn,\r\n+    String      test_name,\r\n+    String      table_name)\r\n+        throws SQLException\r\n+    {\r\n+        beginTest(conn, test_name);\r\n+        Statement s = conn.createStatement();\r\n+        ResultSet rs = s.executeQuery(\"VALUES SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY\" + \r\n+                    \"('derby.database.collation')\");\r\n+        rs.next();\r\n+        String collation = rs.getString(1);\r\n+        if (!collation.equals(\"TERRITORY_BASED\"))\r\n+            logError(\"Collation should have been territory based but it is \"\r\n+            \t\t+ collation);\r\n+\r\n+        rs = s.executeQuery(\"select count(*) from t\");\r\n+        rs.next();\r\n+        int numberOfRows = rs.getInt(1);\r\n+        if (numberOfRows > 1)\r\n+        \t logError(\"Expected 1 row in T but found \" + numberOfRows +\r\n+        \t\t\t \" rows\");\r\n+        rs.close();\r\n+        s.close();\r\n+        endTest(conn, test_name);\r\n+    }\r\n+\r\n+    public void testList(Connection conn)\r\n+        throws SQLException\r\n+    {\r\n+        test1(conn, \"test1\", \"T\");\r\n+    }\r\n+\r\n+    public static void main(String[] argv) \r\n+        throws Throwable\r\n+    {\r\n+    \tcol_rec2 test = new col_rec2();\r\n+\r\n+   \t\tij.getPropertyArg(argv); \r\n+        Connection conn = ij.startJBMS();\r\n+        conn.setAutoCommit(false);\r\n+\r\n+        try\r\n+        {\r\n+            test.testList(conn);\r\n+        }\r\n+        catch (SQLException sqle)\r\n+        {\r\n+\t\t\torg.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(\r\n+                System.out, sqle);\r\n+\t\t\tsqle.printStackTrace(System.out);\r\n+\t\t}\r\n+    }\r\n+}\r"
            },
            {
                "sha": "59993eccf8e659acbe83da75cb29eff678fa8e7a",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec2_app.properties",
                "status": "added",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/derby/blob/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec2_app.properties",
                "raw_url": "https://github.com/apache/derby/raw/00b43c19c2967d0db68379a5bd407c1683feeb76/java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec2_app.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/store/col_rec2_app.properties?ref=00b43c19c2967d0db68379a5bd407c1683feeb76",
                "patch": "@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to you under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+ij.database=jdbc:derby:collationDB\n+"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/2c865dd473428ec50cac0b72ba440882b94ca602",
        "message": "DERBY-630: CREATE TRIGGER fails with null pointer exception\n\nThis patch was contributed by Yip Ng (yipng168@gmail.com)\n\nThe current implementation for CREATE TRIGGER needs to handle null compilation\nschema. A compilation schema with null value indicates that the\ntrigger action statement text does not depend on the current schema. This means:\n\n1. It is safe to compile this statement in any schema since there is no dependency with\n    the CURRENT SCHEMA. i.e.: All relevent fields are qualified with a specific schema.\n\n2. The statement cache mechanism can utilize this piece of information to enable\n    better statement plan sharing across different schemas; thus, avoiding unnecessary\n    statement compilation.\n\n \nSo the proposal is:\n\na) Allow null compilation schema. The system catalog first needs to change the\n   compiliation schema id column of SYS.SYSSTATEMENTS and SYS.SYSVIEWS system\n   table's nullability to true. This would also require a soft upgrade for the\n   previous versions of Derby. This step will resolve the NPE problem of this jira.\n\nb) Handle null compilation schema in statement preparation logic. This can be filed\n   as a separate jira as improvement. It may require some work on the SQL parser to\n   determine whether the compiled statement depends on the CURRENT SCHEMA or not, so\n   that the compilation schema can be properly set. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@464215 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_172",
        "file": [
            {
                "sha": "6b6e1bff7ae54ca40bf5c1a87e333f1382e7fe37",
                "filename": "java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -104,6 +104,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \t/** Derby 10.2 System Catalog version */\n \tpublic static final int DD_VERSION_DERBY_10_2\t\t= 140;\n \n+\t/** Derby 10.3 System Catalog version */\n+\tpublic static final int DD_VERSION_DERBY_10_3\t\t= 150;\n+\n \t// general info\n \tpublic\tstatic\tfinal\tString\tDATABASE_ID = \"derby.databaseID\";\n "
            },
            {
                "sha": "5dabb4eeb5f4ac8bc5143c6d7ba3923d00d20e4f",
                "filename": "java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java",
                "status": "modified",
                "additions": 52,
                "deletions": 10,
                "changes": 62,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -148,6 +148,8 @@ private static String majorToString(int majorVersionNumber) {\n \t\t\treturn \"10.1\";\n \t\tcase DataDictionary.DD_VERSION_DERBY_10_2:\n \t\t\treturn \"10.2\";\n+\t\tcase DataDictionary.DD_VERSION_DERBY_10_3:\n+\t\t\treturn \"10.3\";\n \t\tdefault:\n \t\t\treturn null;\n \t\t}\n@@ -282,6 +284,21 @@ private\tvoid\tapplySafeChanges(TransactionController tc, int fromMajorVersionNumb\n \t\t}\n \t\t*/\n \n+\t\t/*\n+\t\t * Derby soft upgrade code\n+\t\t */\n+\t\tif (lastSoftUpgradeVersion <= DataDictionary.DD_VERSION_DERBY_10_2)\n+\t\t{\n+\t\t\tif (fromMajorVersionNumber <= DataDictionary.DD_VERSION_DERBY_10_2)\n+\t\t\t{\n+\t\t\t\tmodifySysTableNullability(tc,\n+\t\t\t\t\tDataDictionaryImpl.SYSSTATEMENTS_CATALOG_NUM);\n+\t\t\t\n+\t\t\t\tmodifySysTableNullability(tc,\n+\t\t\t\t\tDataDictionaryImpl.SYSVIEWS_CATALOG_NUM);\n+\t\t\t}\n+\t\t}\n+\t\t\n \t\ttc.setProperty(DataDictionary.SOFT_DATA_DICTIONARY_VERSION, this, true);\n \t}\n \n@@ -689,27 +706,50 @@ private int getJBMSMinorVersionNumber()\n \t * \n \t * Modifies the nullability of the system table corresponding\n \t * to the received catalog number.\n-\t * OLD Cloudscape 5.1 upgrade code\n+\t * \n \t * @param tc\t\t\tTransactionController.\n \t * @param catalogNum\tThe catalog number corresponding\n \t *  to the table for which we will modify the nullability.\n+\t *  \n+\t *  OLD Cloudscape 5.1 upgrade code\n \t *  If this corresponds to SYSALIASES, then the nullability of\n \t *  the SYSALIASES.ALIASINFO column will be changed to true\n \t *  (Beetle 4430).  If this corresponds to SYSSTATEMENTS,\n \t *  the nullability of the SYSSTATEMENTS.LASTCOMPILED\n \t *  column will be changed to true.\n \t *\n-\t * @exception StandardException\n+\t *  Derby upgrade code\n+\t *  If this corresponds to SYSSTATEMENTS, then the nullability of\n+\t *  the SYSSTATEMENTS.COMPILATION_SCHEMAID column will \n+\t *  be changed to true.  If this corresponds to SYSVIEWS, the nullability\n+\t *  of the SYSVIEWS.COMPILATION_SCHEMAID column will be changed to true.\n+\t *  \n+\t * @exception StandardException   Thrown on error\n \t */\n-\n-\t/* OLD Cloudscape 5.1 upgrade code. See applySafeChanges().\n-\n \tprivate void modifySysTableNullability(TransactionController tc, int catalogNum)\n-\tthrows StandardException\n-\t{\n-\n-\t\tTabInfo ti = bootingDictionary.getNonCoreTIByNumber(catalogNum);\n+\t\tthrows StandardException\n+\t{\t\t\n+\t\tTabInfoImpl ti = bootingDictionary.getNonCoreTIByNumber(catalogNum);\n \t\tCatalogRowFactory rowFactory = ti.getCatalogRowFactory();\n+\t\t\n+\t\tif (catalogNum == DataDictionaryImpl.SYSSTATEMENTS_CATALOG_NUM)\n+\t\t{\n+\t\t\t// SYSSTATEMENTS table ==> SYSSTATEMENTS_COMPILATION_SCHEMAID needs \n+\t\t\t// to be modified.\n+\t\t\tbootingDictionary.upgrade_setNullability(rowFactory,\n+\t\t\t\tSYSSTATEMENTSRowFactory.SYSSTATEMENTS_COMPILATION_SCHEMAID, \n+\t\t\t\ttrue, tc);\n+\t\t}\n+\t\telse if (catalogNum == DataDictionaryImpl.SYSVIEWS_CATALOG_NUM)\n+\t\t{\n+\t\t\t// SYSVIEWS table ==> SYSVIEWS_COMPILATION_SCHEMAID needs \n+\t\t\t// to be modified.\n+\t\t\tbootingDictionary.upgrade_setNullability(rowFactory,\n+\t\t\t\tSYSVIEWSRowFactory.SYSVIEWS_COMPILATION_SCHEMAID, \n+\t\t\t\ttrue, tc);\n+\t\t}\n+\t\t\n+\t\t/* OLD Cloudscape 5.1 upgrade code. See applySafeChanges(). \n \t\tif (catalogNum == DataDictionaryImpl.SYSALIASES_CATALOG_NUM) {\n \t\t// SYSALIASES table ==> ALIASINFO needs to be modified.\n \t\t\tbootingDictionary.upgrade_setNullability(rowFactory,\n@@ -720,8 +760,10 @@ else if (catalogNum == DataDictionaryImpl.SYSSTATEMENTS_CATALOG_NUM) {\n \t\t\tbootingDictionary.upgrade_setNullability(rowFactory,\n \t\t\t\tSYSSTATEMENTSRowFactory.SYSSTATEMENTS_LASTCOMPILED, true, tc);\n \t\t}\n+\t\t*/\t\t\n+\t\t\n \t}\n-*/\n+\n \t/**\n \t\tCheck to see if a database has been upgraded to the required\n \t\tlevel in order to use a language feature."
            },
            {
                "sha": "7ac4dec69925eeecda872981217dee5e7d3db9ee",
                "filename": "java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -460,7 +460,7 @@ public boolean canSupport(Properties startParams)\n \tpublic void boot(boolean create, Properties startParams) \n \t\t\tthrows StandardException\n \t{\n-\t\tsoftwareVersion = new DD_Version(this, DataDictionary.DD_VERSION_DERBY_10_2);\n+\t\tsoftwareVersion = new DD_Version(this, DataDictionary.DD_VERSION_DERBY_10_3);\n \n \t\t/* There is a bootstrapping problem here. We would like to use\n          * a language connection context to find the name of the system and default"
            },
            {
                "sha": "8d5fb26bc70df7aeccb76f4b6abd329a8b40aaa3",
                "filename": "java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java",
                "status": "modified",
                "additions": 6,
                "deletions": 4,
                "changes": 10,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -187,7 +187,8 @@ public ExecRow makeSYSSTATEMENTSrow(\n \t\t\ttypeStr = spsDescriptor.getTypeAsString();\n \t\t\tinitiallyCompilable = spsDescriptor.initiallyCompilable();\n \t\t\tpreparedStatement = spsDescriptor.getPreparedStatement(compileMe);\n-\t\t\tcompUuidStr = spsDescriptor.getCompSchemaId().toString();\n+\t\t\tcompUuidStr = (spsDescriptor.getCompSchemaId() != null)?\n+\t\t\t\t\tspsDescriptor.getCompSchemaId().toString():null;\n \t\t\tusingText = spsDescriptor.getUsingText();\n \t\t}\n \n@@ -263,7 +264,7 @@ public TupleDescriptor buildDescriptor(\n \t\tString\t\t\t\t\t\ttext;\n \t\tString\t\t\t\t\t\tusingText;\n \t\tUUID\t\t\t\t\t\tuuid;\n-\t\tUUID\t\t\t\t\t\tcompUuid;\n+\t\tUUID\t\t\t\t\t\tcompUuid = null;\n \t\tString\t\t\t\t\t\tuuidStr;\n \t\tUUID\t\t\t\t\t\tsuuid;\t\t// schema\n \t\tString\t\t\t\t\t\tsuuidStr;\t// schema\n@@ -328,7 +329,8 @@ public TupleDescriptor buildDescriptor(\n \t\t// 8th column is COMPILATIONSCHEMAID (UUID - char(36))\n \t\tcol = row.getColumn(8);\n \t\tuuidStr = col.getString();\n-\t\tcompUuid = getUUIDFactory().recreateUUID(uuidStr);\n+\t\tif (uuidStr != null)\n+\t\t\tcompUuid = getUUIDFactory().recreateUUID(uuidStr);\n \n \t\t// 9th column is TEXT (LONG VARCHAR)\n \t\tcol = row.getColumn(9);\n@@ -472,7 +474,7 @@ public ExecRow makeEmptyRow()\n \t\t\t\t\t\t\tSYSSTATEMENTS_COMPILATION_SCHEMAID,\t// column number\n \t\t\t\t\t\t\t0,\t\t\t\t\t// precision\n \t\t\t\t\t\t\t0,\t\t\t\t\t// scale\n-\t\t\t\t\t\t\tfalse,\t\t\t\t// nullability\n+\t\t\t\t\t\t\ttrue,\t\t\t\t// nullability\n \t\t\t\t\t\t\t\"CHAR\",\t\t\t\t// dataType\n \t\t\t\t\t\t\ttrue,\t\t\t\t// built-in type\n \t\t\t\t\t\t\t36\t\t\t\t\t// maxLength"
            },
            {
                "sha": "5a13ddce408152685bc4f948c377aaa7e5203649",
                "filename": "java/engine/org/apache/derby/impl/sql/catalog/SYSVIEWSRowFactory.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/engine/org/apache/derby/impl/sql/catalog/SYSVIEWSRowFactory.java",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/engine/org/apache/derby/impl/sql/catalog/SYSVIEWSRowFactory.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/catalog/SYSVIEWSRowFactory.java?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -319,7 +319,7 @@ public TupleDescriptor buildDescriptor(\n \t\t\t\t\t\t\tSYSVIEWS_COMPILATION_SCHEMAID,\t// column number\n \t\t\t\t\t\t\t0,\t\t\t\t\t// precision\n \t\t\t\t\t\t\t0,\t\t\t\t\t// scale\n-\t\t\t\t\t\t\tfalse,\t\t\t\t// nullability\n+\t\t\t\t\t\t\ttrue,\t\t\t\t// nullability\n \t\t\t\t\t\t\t\"CHAR\",\t\t\t\t// dataType\n \t\t\t\t\t\t\ttrue,\t\t\t\t// built-in type\n \t\t\t\t\t\t\t36\t\t\t\t\t// maxLength"
            },
            {
                "sha": "dc77b439c3116ec6b290dd4e6afefd5055375f60",
                "filename": "java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java",
                "status": "modified",
                "additions": 29,
                "deletions": 5,
                "changes": 34,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -199,11 +199,35 @@ public void\texecuteConstantAction(Activation activation)\n \t\t\t\tdef = dd.getSchemaDescriptor(def.getDescriptorName(), tc, \n \t\t\t\t\t\t\t\t\t\t\t false);\n \t\t\t}\n-\t\t\tspsCompSchemaId = def.getUUID();\n-\t\t}\n-\t\tif (SanityManager.DEBUG) { \n-\t\t\tSanityManager.ASSERT(spsCompSchemaId != null,\n-\t\t\t\t\t\t\t\t \"spsCompSchemaId is null\"); \n+\t\t\t\n+\t\t\t/* \n+\t\t\t** It is possible for spsCompSchemaId to be null.  For instance, \n+\t\t\t** the current schema may not have been physically created yet but \n+\t\t\t** it exists \"virtually\".  In this case, its UUID will have the \n+\t\t\t** value of null meaning that it is not persistent.  e.g.:   \n+\t\t\t**\n+\t\t\t** CONNECT 'db;create=true' user 'ernie';\n+\t\t\t** CREATE TABLE bert.t1 (i INT);\n+\t\t\t** CREATE TRIGGER bert.tr1 AFTER INSERT ON bert.t1 \n+\t\t\t**    FOR EACH STATEMENT MODE DB2SQL \n+\t\t\t**    SELECT * FROM SYS.SYSTABLES;\n+\t\t\t**\n+\t\t\t** Note that in the above case, the trigger action statement have a \n+\t\t\t** null compilation schema.  A compilation schema with null value \n+\t\t\t** indicates that the trigger action statement text does not have \n+\t\t\t** any dependencies with the CURRENT SCHEMA.  This means:\n+\t\t\t**\n+\t\t\t** o  It is safe to compile this statement in any schema since \n+\t\t\t**    there is no dependency with the CURRENT SCHEMA. i.e.: All \n+\t\t\t**    relevent identifiers are qualified with a specific schema.\n+\t\t\t**\n+\t\t\t** o  The statement cache mechanism can utilize this piece of \n+\t\t\t**    information to enable better statement plan sharing across \n+\t\t\t**    connections in different schemas; thus, avoiding unnecessary \n+\t\t\t**    statement compilation.\n+\t\t\t*/ \n+\t\t\tif (def != null)\n+\t\t\t\tspsCompSchemaId = def.getUUID();\n \t\t}\n \n \t\tString tabName;"
            },
            {
                "sha": "60dc26966592d522d397985ee8c22701d8fc2b20",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/syscat.out",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/syscat.out",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/syscat.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/syscat.out?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -210,7 +210,7 @@ SYSROUTINEPERMS |ROUTINEPERMSID |1 |CHAR(36) NOT NULL\n SYSSCHEMAS |AUTHORIZATIONID |3 |n SYSSCHEMAS |SCHEMAID |1 |CHAR(36) NOT NULL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n SYSSCHEMAS |SCHEMANAME |2 |n-SYSSTATEMENTS |COMPILATIONSCHEMAID |8 |n+SYSSTATEMENTS |COMPILATIONSCHEMAID |8 |n SYSSTATEMENTS |LASTCOMPILED |7 |n SYSSTATEMENTS |SCHEMAID |3 |n SYSSTATEMENTS |STMTID |1 |n@@ -260,7 +260,7 @@ SYSTRIGGERS |TRIGGERNAME |2 |VARCHAR(128) NOT NULL\n SYSTRIGGERS |TYPE |7 |n SYSTRIGGERS |WHENSTMTID |10 |n SYSVIEWS |CHECKOPTION |3 |n-SYSVIEWS |COMPILATIONSCHEMAID |4 |n+SYSVIEWS |COMPILATIONSCHEMAID |4 |n SYSVIEWS |TABLEID |1 |n SYSVIEWS |VIEWDEFINITION |2 |n ij> select TABLENAME, ISINDEX \n@@ -426,7 +426,7 @@ SYSROUTINEPERMS |ROUTINEPERMSID |1 |CHAR(36) NOT NULL\n SYSSCHEMAS |AUTHORIZATIONID |3 |n SYSSCHEMAS |SCHEMAID |1 |n SYSSCHEMAS |SCHEMANAME |2 |n-SYSSTATEMENTS |COMPILATIONSCHEMAID |8 |n+SYSSTATEMENTS |COMPILATIONSCHEMAID |8 |n SYSSTATEMENTS |LASTCOMPILED |7 |n SYSSTATEMENTS |SCHEMAID |3 |n SYSSTATEMENTS |STMTID |1 |n@@ -476,7 +476,7 @@ SYSTRIGGERS |TRIGGERNAME |2 |VARCHAR(128) NOT NULL\n SYSTRIGGERS |TYPE |7 |n SYSTRIGGERS |WHENSTMTID |10 |n SYSVIEWS |CHECKOPTION |3 |n-SYSVIEWS |COMPILATIONSCHEMAID |4 |n+SYSVIEWS |COMPILATIONSCHEMAID |4 |n SYSVIEWS |TABLEID |1 |n SYSVIEWS |VIEWDEFINITION |2 |n T |I |1 |
            },
            {
                "sha": "d3c52b43d62c9f1b8fee19f52717ffd3dd62d2e2",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/syscat.out",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/syscat.out",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/syscat.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/syscat.out?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -210,7 +210,7 @@ SYSROUTINEPERMS |ROUTINEPERMSID |1 |CHAR(36) NOT NULL\n SYSSCHEMAS |AUTHORIZATIONID |3 |n SYSSCHEMAS |SCHEMAID |1 |n SYSSCHEMAS |SCHEMANAME |2 |n-SYSSTATEMENTS |COMPILATIONSCHEMAID |8 |n+SYSSTATEMENTS |COMPILATIONSCHEMAID |8 |n SYSSTATEMENTS |LASTCOMPILED |7 |n SYSSTATEMENTS |SCHEMAID |3 |n SYSSTATEMENTS |STMTID |1 |n@@ -260,7 +260,7 @@ SYSTRIGGERS |TRIGGERNAME |2 |VARCHAR(128) NOT NULL\n SYSTRIGGERS |TYPE |7 |n SYSTRIGGERS |WHENSTMTID |10 |n SYSVIEWS |CHECKOPTION |3 |CHAR(1) NOT NULL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n-SYSVIEWS |COMPILATIONSCHEMAID |4 |n+SYSVIEWS |COMPILATIONSCHEMAID |4 |n SYSVIEWS |TABLEID |1 |n SYSVIEWS |VIEWDEFINITION |2 |n ij> select TABLENAME, ISINDEX \n@@ -426,7 +426,7 @@ SYSROUTINEPERMS |ROUTINEPERMSID |1 |CHAR(36) NOT NULL\n SYSSCHEMAS |AUTHORIZATIONID |3 |n SYSSCHEMAS |SCHEMAID |1 |n SYSSCHEMAS |SCHEMANAME |2 |n-SYSSTATEMENTS |COMPILATIONSCHEMAID |8 |CHAR(36) NOT NULL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n+SYSSTATEMENTS |COMPILATIONSCHEMAID |8 |n SYSSTATEMENTS |LASTCOMPILED |7 |n SYSSTATEMENTS |SCHEMAID |3 |n SYSSTATEMENTS |STMTID |1 |CHAR(36) NOT NULL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n@@ -476,7 +476,7 @@ SYSTRIGGERS |TRIGGERNAME |2 |VARCHAR(128) NOT NULL\n SYSTRIGGERS |TYPE |7 |CHAR(1) NOT NULL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n SYSTRIGGERS |WHENSTMTID |10 |n SYSVIEWS |CHECKOPTION |3 |n-SYSVIEWS |COMPILATIONSCHEMAID |4 |n+SYSVIEWS |COMPILATIONSCHEMAID |4 |n SYSVIEWS |TABLEID |1 |n SYSVIEWS |VIEWDEFINITION |2 |n T |I |1 |
            },
            {
                "sha": "d3c52b43d62c9f1b8fee19f52717ffd3dd62d2e2",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/syscat.out",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/syscat.out",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/syscat.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/syscat.out?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -210,7 +210,7 @@ SYSROUTINEPERMS |ROUTINEPERMSID |1 |CHAR(36) NOT NULL\n SYSSCHEMAS |AUTHORIZATIONID |3 |n SYSSCHEMAS |SCHEMAID |1 |n SYSSCHEMAS |SCHEMANAME |2 |n-SYSSTATEMENTS |COMPILATIONSCHEMAID |8 |n+SYSSTATEMENTS |COMPILATIONSCHEMAID |8 |n SYSSTATEMENTS |LASTCOMPILED |7 |n SYSSTATEMENTS |SCHEMAID |3 |n SYSSTATEMENTS |STMTID |1 |n@@ -260,7 +260,7 @@ SYSTRIGGERS |TRIGGERNAME |2 |VARCHAR(128) NOT NULL\n SYSTRIGGERS |TYPE |7 |n SYSTRIGGERS |WHENSTMTID |10 |CHAR(36)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n SYSVIEWS |CHECKOPTION |3 |n-SYSVIEWS |COMPILATIONSCHEMAID |4 |n+SYSVIEWS |COMPILATIONSCHEMAID |4 |n SYSVIEWS |TABLEID |1 |n SYSVIEWS |VIEWDEFINITION |2 |LONG VARCHAR NOT NULL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n ij> select TABLENAME, ISINDEX \n@@ -426,7 +426,7 @@ SYSROUTINEPERMS |ROUTINEPERMSID |1 |CHAR(36) NOT NULL\n SYSSCHEMAS |AUTHORIZATIONID |3 |VARCHAR(128) NOT NULL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n SYSSCHEMAS |SCHEMAID |1 |n SYSSCHEMAS |SCHEMANAME |2 |n-SYSSTATEMENTS |COMPILATIONSCHEMAID |8 |n+SYSSTATEMENTS |COMPILATIONSCHEMAID |8 |n SYSSTATEMENTS |LASTCOMPILED |7 |n SYSSTATEMENTS |SCHEMAID |3 |n SYSSTATEMENTS |STMTID |1 |n@@ -476,7 +476,7 @@ SYSTRIGGERS |TRIGGERNAME |2 |VARCHAR(128) NOT NULL\n SYSTRIGGERS |TYPE |7 |n SYSTRIGGERS |WHENSTMTID |10 |n SYSVIEWS |CHECKOPTION |3 |n-SYSVIEWS |COMPILATIONSCHEMAID |4 |n+SYSVIEWS |COMPILATIONSCHEMAID |4 |n SYSVIEWS |TABLEID |1 |n SYSVIEWS |VIEWDEFINITION |2 |n T |I |1 |
            },
            {
                "sha": "b0366b4db6e1e7006e7bd12975ffc3b727ac8154",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/Upgrade_10_1_10_3.out",
                "status": "added",
                "additions": 2966,
                "deletions": 0,
                "changes": 2966,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/master/Upgrade_10_1_10_3.out",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/master/Upgrade_10_1_10_3.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/Upgrade_10_1_10_3.out?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1"
            },
            {
                "sha": "d0b5dbe342670c18ea8bfda4ea5dcded7e8ce999",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/syscat.out",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/master/syscat.out",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/master/syscat.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/syscat.out?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -210,7 +210,7 @@ SYSROUTINEPERMS\n SYSSCHEMAS                                                                                                                      |AUTHORIZATIONID                                                                                                                 |3          |VARCHAR(128) N&\n SYSSCHEMAS                                                                                                                      |SCHEMAID                                                                                                                        |1          |CHAR(36) NOT N&\n SYSSCHEMAS                                                                                                                      |SCHEMANAME                                                                                                                      |2          |VARCHAR(128) N&\n-SYSSTATEMENTS                                                                                                                   |COMPILATIONSCHEMAID                                                                                                             |8          |CHAR(36) NOT N&\n+SYSSTATEMENTS                                                                                                                   |COMPILATIONSCHEMAID                                                                                                             |8          |CHAR(36)       \n SYSSTATEMENTS                                                                                                                   |LASTCOMPILED                                                                                                                    |7          |TIMESTAMP      \n SYSSTATEMENTS                                                                                                                   |SCHEMAID                                                                                                                        |3          |CHAR(36) NOT N&\n SYSSTATEMENTS                                                                                                                   |STMTID                                                                                                                          |1          |CHAR(36) NOT N&\n@@ -260,7 +260,7 @@ SYSTRIGGERS\n SYSTRIGGERS                                                                                                                     |TYPE                                                                                                                            |7          |CHAR(1) NOT NU&\n SYSTRIGGERS                                                                                                                     |WHENSTMTID                                                                                                                      |10         |CHAR(36)       \n SYSVIEWS                                                                                                                        |CHECKOPTION                                                                                                                     |3          |CHAR(1) NOT NU&\n-SYSVIEWS                                                                                                                        |COMPILATIONSCHEMAID                                                                                                             |4          |CHAR(36) NOT N&\n+SYSVIEWS                                                                                                                        |COMPILATIONSCHEMAID                                                                                                             |4          |CHAR(36)       \n SYSVIEWS                                                                                                                        |TABLEID                                                                                                                         |1          |CHAR(36) NOT N&\n SYSVIEWS                                                                                                                        |VIEWDEFINITION                                                                                                                  |2          |LONG VARCHAR N&\n ij> select TABLENAME, ISINDEX \n@@ -426,7 +426,7 @@ SYSROUTINEPERMS\n SYSSCHEMAS                                                                                                                      |AUTHORIZATIONID                                                                                                                 |3          |VARCHAR(128) N&\n SYSSCHEMAS                                                                                                                      |SCHEMAID                                                                                                                        |1          |CHAR(36) NOT N&\n SYSSCHEMAS                                                                                                                      |SCHEMANAME                                                                                                                      |2          |VARCHAR(128) N&\n-SYSSTATEMENTS                                                                                                                   |COMPILATIONSCHEMAID                                                                                                             |8          |CHAR(36) NOT N&\n+SYSSTATEMENTS                                                                                                                   |COMPILATIONSCHEMAID                                                                                                             |8          |CHAR(36)       \n SYSSTATEMENTS                                                                                                                   |LASTCOMPILED                                                                                                                    |7          |TIMESTAMP      \n SYSSTATEMENTS                                                                                                                   |SCHEMAID                                                                                                                        |3          |CHAR(36) NOT N&\n SYSSTATEMENTS                                                                                                                   |STMTID                                                                                                                          |1          |CHAR(36) NOT N&\n@@ -476,7 +476,7 @@ SYSTRIGGERS\n SYSTRIGGERS                                                                                                                     |TYPE                                                                                                                            |7          |CHAR(1) NOT NU&\n SYSTRIGGERS                                                                                                                     |WHENSTMTID                                                                                                                      |10         |CHAR(36)       \n SYSVIEWS                                                                                                                        |CHECKOPTION                                                                                                                     |3          |CHAR(1) NOT NU&\n-SYSVIEWS                                                                                                                        |COMPILATIONSCHEMAID                                                                                                             |4          |CHAR(36) NOT N&\n+SYSVIEWS                                                                                                                        |COMPILATIONSCHEMAID                                                                                                             |4          |CHAR(36)       \n SYSVIEWS                                                                                                                        |TABLEID                                                                                                                         |1          |CHAR(36) NOT N&\n SYSVIEWS                                                                                                                        |VIEWDEFINITION                                                                                                                  |2          |LONG VARCHAR N&\n T                                                                                                                               |I                                                                                                                               |1          |INTEGER        "
            },
            {
                "sha": "36c715e83662296b8bb151c51cbc7ffc518de89b",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/triggerGeneral.out",
                "status": "modified",
                "additions": 41,
                "deletions": 1,
                "changes": 42,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/master/triggerGeneral.out",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/master/triggerGeneral.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/triggerGeneral.out?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -1263,4 +1263,44 @@ ij> select * from t32TriggerTest;\n C321       \n -----------\n 1          \n-ij> \n+ij> -- DERBY-630 \n+-- NPE in CREATE TRIGGER when compilation schema is other than APP.\n+connect 'jdbc:derby:wombat;create=true;user=user1;password=pwd' as user1;\n+WARNING 01J01: Database 'wombat' not created, connection made to existing database instead.\n+ij(USER1)> create table ippo.t1 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> create table ippo.t2 (i int);\n+0 rows inserted/updated/deleted\n+ij(USER1)> create index ippo.idx2 on t2(i);\n+0 rows inserted/updated/deleted\n+ij(USER1)> create trigger ippo.tr1 after insert on ippo.t1 for each row mode db2sql \n+   insert into ippo.t2 values 1;\n+0 rows inserted/updated/deleted\n+ij(USER1)> insert into ippo.t1 values 1;\n+1 row inserted/updated/deleted\n+ij(USER1)> insert into ippo.t1 values 1;\n+1 row inserted/updated/deleted\n+ij(USER1)> select * from ippo.t2;\n+I          \n+-----------\n+1          \n+1          \n+ij(USER1)> drop index ippo.idx2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> insert into ippo.t1 values 1;\n+1 row inserted/updated/deleted\n+ij(USER1)> select * from ippo.t2;\n+I          \n+-----------\n+1          \n+1          \n+1          \n+ij(USER1)> drop trigger ippo.tr1;\n+0 rows inserted/updated/deleted\n+ij(USER1)> drop table ippo.t2;\n+0 rows inserted/updated/deleted\n+ij(USER1)> drop table ippo.t1;\n+0 rows inserted/updated/deleted\n+ij(USER1)> drop schema ippo restrict;\n+0 rows inserted/updated/deleted\n+ij(USER1)> "
            },
            {
                "sha": "6eecde673ed2b2ff3584aec59c8f5e6ff45c441e",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/suites/upgrade.properties",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/suites/upgrade.properties",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/suites/upgrade.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/suites/upgrade.properties?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -1,4 +1,4 @@\n-# the upgrade test Upgrade_10_1_10_2.java cannot be run with the following jvms:\n+# the upgrade test Upgrade_10_1_10_3.java cannot be run with the following jvms:\n # jdk131, ibm131: missing support for obtaining version numbers\n # wctme5.7_foundation: missing support for java.sql.Driver\n # wsdd5.6, wctme5.7: missing support for javax.naming.InitialContext"
            },
            {
                "sha": "5b40f7ee34a3640cde6b437859d04563681db849",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/suites/upgrade.runall",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/suites/upgrade.runall",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/suites/upgrade.runall",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/suites/upgrade.runall?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -1 +1 @@\n-\n+upgradeTests/Upgrade_10_1_10_3.java"
            },
            {
                "sha": "e6cf565d1725b0ad3024ae36c6c61d644a7e787b",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/triggerGeneral.sql",
                "status": "modified",
                "additions": 20,
                "deletions": 0,
                "changes": 20,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/triggerGeneral.sql",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/triggerGeneral.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/triggerGeneral.sql?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -709,3 +709,23 @@ drop view v21ViewTest;\n insert into t31TriggerTest values(1);\n select * from t31TriggerTest;\n select * from t32TriggerTest;\n+\n+\n+-- DERBY-630 \n+-- NPE in CREATE TRIGGER when compilation schema is other than APP.\n+connect 'jdbc:derby:wombat;create=true;user=user1;password=pwd' as user1;\n+create table ippo.t1 (i int);\n+create table ippo.t2 (i int);\n+create index ippo.idx2 on t2(i);\n+create trigger ippo.tr1 after insert on ippo.t1 for each row mode db2sql \n+   insert into ippo.t2 values 1;\n+insert into ippo.t1 values 1;\n+insert into ippo.t1 values 1;\n+select * from ippo.t2;\n+drop index ippo.idx2;\n+insert into ippo.t1 values 1;\n+select * from ippo.t2;\n+drop trigger ippo.tr1;\n+drop table ippo.t2;\n+drop table ippo.t1;\n+drop schema ippo restrict;"
            },
            {
                "sha": "68270605188a0e8abec90fccb48686904fe12e4f",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTester.java",
                "status": "modified",
                "additions": 55,
                "deletions": 2,
                "changes": 57,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTester.java",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTester.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTester.java?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.io.File;\n \n import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n import java.sql.ResultSet;\n import java.sql.Statement;\n import java.sql.PreparedStatement;\n@@ -365,6 +366,7 @@ private void runPhase(int version, int phase)\n \t\t\t\t\t\t\t\t\toldMinorVersion) && passed;\n             passed = caseTriggerVTI(conn, phase, oldMajorVersion, \n                     oldMinorVersion) && passed;\n+\t\t\tpassed = caseCompilationSchema(phase, conn) && passed;\n             passed = caseGrantRevoke(conn, phase, classLoader, false) && passed;\n             // Test grant/revoke feature with sql authorization\n             if(phase == PH_HARD_UPGRADE) {\n@@ -373,7 +375,7 @@ private void runPhase(int version, int phase)\n             \tpassed = caseGrantRevoke(conn, phase, classLoader, true) && passed;\n             \tcheckSysSchemas(conn);\n             \tcheckRoutinePermissions(conn);\n-            }        \t\n+            }        \n \t\t\trunMetadataTest(classLoader, conn);\n \t\t\tconn.close();\n \t\t\tshutdownDatabase(classLoader);\n@@ -502,7 +504,58 @@ private boolean caseVersionCheck(int version, Connection conn)\n \t\tSystem.out.println(\"complete caseVersionCheck - passed \" + passed);\n \t\treturn passed;\n \t}\n-\t\n+\n+\t/**\n+\t * Verify the compilation schema is nullable after upgrade\n+\t * @param phase upgrade test phase\n+\t * @param conn Connection\n+\t * @throws SQLException\n+\t */\n+\tprivate boolean caseCompilationSchema(int phase, Connection conn) \n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrows SQLException\n+\t{\n+\t\tboolean passed = false;\n+\t\tDatabaseMetaData dmd;\n+\t\tResultSet rs;\n+\t\tString isNullable;\n+\n+\t\tif (conn == null)\n+\t\t\treturn false;\n+\n+\t\tdmd = conn.getMetaData();\n+\t\t\n+\t\tswitch (phase)\n+\t\t{\n+\t\t\tcase PH_CREATE:\n+\t\t\tcase PH_POST_SOFT_UPGRADE:\n+\t\t\tcase PH_POST_HARD_UPGRADE:\n+\t\t\t\tpassed = true;\n+\t\t\t\tbreak;\n+\n+\t\t\tcase PH_SOFT_UPGRADE:\n+\t\t\tcase PH_HARD_UPGRADE:\n+\t\t\t\trs = dmd.getColumns(null, \"SYS\", \"SYSSTATEMENTS\", \"COMPILATIONSCHEMAID\");\n+\t\t\t\trs.next();\n+\t\t\t\tisNullable = rs.getString(\"IS_NULLABLE\");\n+\t\t\t\tSystem.out.println (\"SYS.SYSSTATEMENTS.COMPILATIONSCHEMAID IS_NULLABLE=\" + isNullable);\n+\t\t\t\tpassed = (\"YES\".equals(isNullable));\n+\n+\t\t\t\trs = dmd.getColumns(null, \"SYS\", \"SYSVIEWS\", \"COMPILATIONSCHEMAID\");\n+\t\t\t\trs.next();\n+\t\t\t\tisNullable = rs.getString(\"IS_NULLABLE\");\n+\t\t\t\tSystem.out.println(\"SYS.SYSVIEWS.COMPILATIONSCHEMAID IS_NULLABLE=\" + isNullable);\n+\t\t\t\tpassed = (\"YES\".equals(isNullable)) && passed;\n+\t\t\t\tbreak;\n+\t\t\t\n+\t\t\tdefault:\n+\t\t\t\tpassed = false;\n+\t\t\t\tbreak;\n+\t\t}\n+\n+\t\tSystem.out.println(\"complete caseCompilationSchema - passed \" + passed);\n+\t\treturn passed;\n+\t}\n+\n \t/**\n \t * In 10.2: We will write a ReusableRecordIdSequenceNumber in the \n \t * header of a FileContaienr."
            },
            {
                "sha": "f24d2021725caeb6779d0c14a08166eb0d7d9c4a",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Upgrade_10_1_10_3.java",
                "status": "added",
                "additions": 56,
                "deletions": 0,
                "changes": 56,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Upgrade_10_1_10_3.java",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Upgrade_10_1_10_3.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Upgrade_10_1_10_3.java?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -0,0 +1,56 @@\n+/*\n+\n+Derby - org.apache.derbyTesting.functionTests.tests.upgradeTests.Upgrade_10_1_10_3\n+\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to You under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+   http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+\n+*/\n+package org.apache.derbyTesting.functionTests.tests.upgradeTests;\n+\n+import java.net.MalformedURLException;\n+import java.sql.SQLException;\n+\n+/**\n+ * Test upgrade from 10.1 to 10.3 \n+ */\n+public class Upgrade_10_1_10_3 {\n+\n+\tpublic static void main(String[] args) {\n+\t\t\n+\t\tint oldMajorVersion = 10;\n+\t\tint oldMinorVersion = 1;\n+\t\tint newMajorVersion = 10;\n+\t\tint newMinorVersion = 3;\n+\t\tboolean allowPreReleaseUpgrade = true;\n+\t\t\n+\t\ttry {\n+\t\t\tUpgradeTester upgradeTester = new UpgradeTester(\n+\t\t\t\t\t\t\t\t\t\t\toldMajorVersion, oldMinorVersion,\n+\t\t\t\t\t\t\t\t\t\t\tnewMajorVersion, newMinorVersion,\n+\t\t\t\t\t\t\t\t\t\t\tallowPreReleaseUpgrade);\n+\t\t\tupgradeTester.runUpgradeTests();\n+\t\t} catch(MalformedURLException mue) {\n+\t\t\tSystem.out.println(\"MalformedURLException: \" + mue.getMessage());\n+\t\t\tmue.printStackTrace();\n+\t\t} catch (SQLException sqle) {\n+\t\t\tSystem.out.println(\"SQLException:\");\n+\t\t\tUpgradeTester.dumpSQLExceptions(sqle);\n+\t\t} catch (Exception e) {\n+\t\t\tSystem.out.println(\"Exception: \" + e.getMessage());\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+}"
            },
            {
                "sha": "79d18f9a0f8f4d4e3f8e96c1747e0ed82928192a",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Upgrade_10_1_10_3_sed.properties",
                "status": "added",
                "additions": 10,
                "deletions": 0,
                "changes": 10,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Upgrade_10_1_10_3_sed.properties",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Upgrade_10_1_10_3_sed.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Upgrade_10_1_10_3_sed.properties?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -0,0 +1,10 @@\n+# Filters and substitutes for SED\n+# Multiple patterns for DELETE: comma separated\n+#   delete=pattern1,pattern2,...,patternn\n+# No commas can be allowed in the patterns.\n+#\n+# Multiple patterns for SUBSTITUTE: comma separated <pattern;substitute> pair\n+#   substitute=pattern1;substitute1,pattern2;substitute2,...,patternn;substituten\n+# No commas or semicolons can be allowed in the patterns/subsitutes.\n+delete=JDBC Driver*,getDatabaseProductVersion()*,getDriverVersion()*\n+"
            },
            {
                "sha": "b1dfb1f9e6793453fefefc72a2e451e00e120355",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/build.xml",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/build.xml",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/build.xml",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/build.xml?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -95,7 +95,7 @@\n   </target> \n \t\n   <target name=\"checkUpgradeAppProps\">\t\t\n-  \t<available file=\"${out.dir}/${derby.testing.functest.dir}/tests/upgradeTests/Upgrade_10_1_10_2_app.properties\" property=\"haveUpgradeProps\"/>\n+  \t<available file=\"${out.dir}/${derby.testing.functest.dir}/tests/upgradeTests/Upgrade_10_1_10_3_app.properties\" property=\"haveUpgradeProps\"/>\n   </target>\n  \n   <target name=\"updateProperty\" unless=\"haveUpgradeProps\">\n@@ -104,15 +104,15 @@\n   </target>\n \t\n   <target name=\"setpropertydefault\" unless=\"derbyTesting.jar.path\">\n-  \t<propertyfile file=\"${out.dir}/${derby.testing.functest.dir}/tests/upgradeTests/Upgrade_10_1_10_2_app.properties\"\n+  \t<propertyfile file=\"${out.dir}/${derby.testing.functest.dir}/tests/upgradeTests/Upgrade_10_1_10_3_app.properties\"\n                       comment=\"Need to find out the set of permissions required by upgrade test - DERBY-1135\">\n \t\t<entry key=\"jvmflags\" value=\"-DderbyTesting.jar.path=${src.dir}/tools/testing/derby\"/>\n \t\t<entry key=\"noSecurityManager\" value=\"true\"/>\n \t</propertyfile>\n   </target>\n \t\n   <target name=\"setproperty\" if=\"derbyTesting.jar.path\">\n-  \t<propertyfile file=\"${out.dir}/${derby.testing.functest.dir}/tests/upgradeTests/Upgrade_10_1_10_2_app.properties\"\n+  \t<propertyfile file=\"${out.dir}/${derby.testing.functest.dir}/tests/upgradeTests/Upgrade_10_1_10_3_app.properties\"\n                       comment=\"Need to find out the set of permissions required by upgrade test - DERBY-1135\">\n   \t\t<entry key=\"jvmflags\" value=\"-DderbyTesting.jar.path=${derbyTesting.jar.path}\" />\n \t\t<entry key=\"noSecurityManager\" value=\"true\"/>"
            },
            {
                "sha": "5354541827c89370a7c069d5e160528aba14c505",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/copyfiles.ant",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/copyfiles.ant",
                "raw_url": "https://github.com/apache/derby/raw/16c8b8807fc36939ac5ac49d961cd5d3e13588b1/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/copyfiles.ant",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/copyfiles.ant?ref=16c8b8807fc36939ac5ac49d961cd5d3e13588b1",
                "patch": "@@ -1,3 +1,3 @@\n-Upgrade_10_1_10_2_app.properties\n-Upgrade_10_1_10_2_sed.properties\n+Upgrade_10_1_10_3_app.properties\n+Upgrade_10_1_10_3_sed.properties\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/2e4a44ee331251458ee6be6a67ec77275768b525",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/558e1e4643b228724766a3cc03b5c456079a9deb",
        "message": "DERBY-706 Improve testing and increase code coverage for Network Server classes\n\nhave attached a second patch 'derby-706_2.diff' which adds some more tests and re-arranges/removes some internal methods. Details of patch are:\n\n* DDMWriter: Removes min method because Math.min is used. Use doesRequestContainData() method.\n* DDMReader: Use readCodePoint() method\n* DRDAConnThread: QRYOPTVAL codepoint is not part of DRDA spec. parseCcsidSBC was giving NPE.\n* CodePointNameTable: Add codepoints to be used in protocol.tests\n* protocol.tests: Added tests to cover methods which were not tested before.\n* Session, DRDAStatement, Database, DRDAProtocolException: Remove some methods which are not needed. The same can be done using other methods.\n* TestProto: Use lookup method.\n* testProtocol: Added \"derby.drda.traceAll=true\" to derby.properties file to test methods in DssTrace\n* testProperties: Added test for trace off command. Added \"derby.drda.traceAll=true\" to derby.properties file to test memcheck.\n* runtimeinfo: Rearranged test because the output was not predictable on different jvms/machines.\n\nRan derbyall with Sun JDK 1.4.2 on WinXP. No failures. \n\nContributed by Deepa Remesh\n\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@356553 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_173",
        "file": [
            {
                "sha": "aee22df4b5fa6310cb3533edcd197f3f01038073",
                "filename": "java/drda/org/apache/derby/impl/drda/CodePointNameTable.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/CodePointNameTable.java",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/CodePointNameTable.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/CodePointNameTable.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -70,6 +70,7 @@\n     put (new Integer (CodePoint.MGRDEPRM), \"MGRDEPRM\");\n     put (new Integer (CodePoint.MGRLVLLS), \"MGRLVLLS\");\n     put (new Integer (CodePoint.MGRLVLRM), \"MGRLVLRM\");\n+    put (new Integer (CodePoint.MONITOR), \"MONITOR\");\n     put (new Integer (CodePoint.NBRROW), \"NBRROW\");\n     put (new Integer (CodePoint.OBJNSPRM), \"OBJNSPRM\");\n     put (new Integer (CodePoint.OPNQFLRM), \"OPNQFLRM\");\n@@ -83,6 +84,7 @@\n     put (new Integer (CodePoint.PKGBNARM), \"PKGBNARM\");\n     put (new Integer (CodePoint.PKGBPARM), \"PKGBPARM\");\n     put (new Integer (CodePoint.PKGNAMCSN), \"PKGNAMCSN\");\n+    put (new Integer (CodePoint.PKGNAMCT), \"PKGNAMCT\");\n     put (new Integer (CodePoint.PRCCNVRM), \"PRCCNVRM\");\n     put (new Integer (CodePoint.PRDID), \"PRDID\");\n     put (new Integer (CodePoint.PRDDTA), \"PRDDTA\");\n@@ -91,6 +93,7 @@\n     put (new Integer (CodePoint.QRYBLKCTL), \"QRYBLKCTL\");\n     put (new Integer (CodePoint.QRYBLKRST), \"QRYBLKRST\");\n     put (new Integer (CodePoint.QRYBLKSZ), \"QRYBLKSZ\");\n+    put (new Integer (CodePoint.QRYCLSRLS), \"QRYCLSRLS\");\n     put (new Integer (CodePoint.QRYDSC), \"QRYDSC\");\n     put (new Integer (CodePoint.QRYDTA), \"QRYDTA\");\n     put (new Integer (CodePoint.QRYINSID), \"QRYINSID\");"
            },
            {
                "sha": "9311cb4093dcbed337bbb049e8df72c0c5f5fbaa",
                "filename": "java/drda/org/apache/derby/impl/drda/DDMReader.java",
                "status": "modified",
                "additions": 3,
                "deletions": 18,
                "changes": 21,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DDMReader.java",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DDMReader.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DDMReader.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -285,17 +285,6 @@ protected boolean isCmd() throws DRDAProtocolException, java.io.UnsupportedEncod\n \t\treturn NetworkServerControlImpl.isCmd(val);\n \t}\n \n-\t/**\n-\t * Return buffer \n-\t *\n-\t *\n-\t * @return buffer\n-\t */\n-\tprotected byte [] getBuffer()\n-\t{\n-\t\treturn buffer;\n-\t}\n-\n \t/**\n \t * Read DSS header\n \t * DSS Header format is \n@@ -513,13 +502,9 @@ protected int readLengthAndCodePoint() throws DRDAProtocolException\n \t{\n \t\tensureBLayerDataInBuffer (4, NO_ADJUST_LENGTHS);\n \n-\t\tddmScalarLen =\n-\t\t\t((buffer[pos++] & 0xff) << 8) +\n-\t\t\t((buffer[pos++] & 0xff) << 0);\n-\n-\t\tint codePoint =\n-\t\t\t((buffer[pos++] & 0xff) << 8) +\n-\t\t\t((buffer[pos++] & 0xff) << 0);\n+\t\tddmScalarLen = readCodePoint();\n+\t\tint codePoint = readCodePoint();\n+\t\t\n \t\tif (SanityManager.DEBUG)\n \t\t\ttrace(\"length = \"+ ddmScalarLen + \" codepoint = \" + java.lang.Integer.toHexString(codePoint));\n \t\t// SYNERRCD 0x0D - Object code point index not supported."
            },
            {
                "sha": "c047809b1a4e27fb28cf8166e8c19bd5633d16e0",
                "filename": "java/drda/org/apache/derby/impl/drda/DDMWriter.java",
                "status": "modified",
                "additions": 1,
                "deletions": 7,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DDMWriter.java",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DDMWriter.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DDMWriter.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -1720,12 +1720,6 @@ private void sendBytes (java.io.OutputStream socketOutputStream) throws java.io.\n     }\n   }\n \n-\n-\tprivate static int min (int i, int j)\n-\t{\n-\t\treturn (i < j) ? i : j;\n-\t}\n-\n \tprotected String toDebugString(String indent)\n \t{\n \t\tString s = indent + \"***** DDMWriter toDebugString ******\\n\";\n@@ -1815,7 +1809,7 @@ protected void finalizeChain(byte currChainByte,\n \t\t\tagent.trace(\"Sending data\");\n \n \t\tresetChainState();\n-\t\tif (offset != 0) {\n+\t\tif (doesRequestContainData()) {\n \t\t\ttry {\n \t\t\t\tflush(socketOutputStream);\n \t\t\t} catch (java.io.IOException e) {"
            },
            {
                "sha": "fbcc3d87f0e1e1f8a82bf7e0d37a939d31804d9f",
                "filename": "java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "status": "modified",
                "additions": 11,
                "deletions": 11,
                "changes": 22,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -1714,10 +1714,6 @@ private String parseOPNQRY() throws DRDAProtocolException, SQLException\n \t\t\t\t\t// Ignore release of read locks.  Nothing we can do here\n \t\t\t\t\tparseQRYCLSRLS();\n \t\t\t\t\tbreak;\n-\t\t\t\tcase CodePoint.QRYOPTVAL:\n-\t\t\t\t\t// optimize for n rows. Not supported by cloudscape(ignore)\n-\t\t\t\t\tparseQRYOPTVAL();\n-\t\t\t\t\tbreak;\n \t\t\t\t// optional\n \t\t\t\tcase CodePoint.MONITOR:\n \t\t\t\t\tparseMONITOR();\n@@ -1896,12 +1892,6 @@ private int parseQRYCLSRLS() throws DRDAProtocolException\n \t\treturn 0;\n \t}\n \n-\tprivate int parseQRYOPTVAL() throws DRDAProtocolException\n-\t{\n-\t\treader.skipBytes();\n-\t\treturn 0;\n-\t}\n-\n \t/**\n \t * Write a QRYPOPRM - Query Previously opened\n \t * Instance Variables\n@@ -4820,7 +4810,17 @@ private String parseCcsidMBC(int length) throws DRDAProtocolException\n \tprivate String parseCcsidSBC(int length) throws DRDAProtocolException\n \t{\n \t\tString strVal = null;\n-\t\tString ccsidSBCEncoding = database.getCurrentStatement().ccsidSBCEncoding;\n+\t\tDRDAStatement  currentStatement;\n+\t\t\n+\t\tcurrentStatement = database.getCurrentStatement();\n+\t\tif (currentStatement == null)\n+\t\t{\n+\t\t\tcurrentStatement = database.getDefaultStatement();\n+\t\t\tcurrentStatement.initialize();\n+\t\t}\n+\t\tString ccsidSBCEncoding = currentStatement.ccsidSBCEncoding;\n+\t\tSystem.out.println(\"ccsidSBCEncoding - \" + ccsidSBCEncoding);\n+\t\t\n \t\tif (length == 0)\n \t\t\treturn null;\n \t\tbyte [] byteStr = reader.readBytes(length);"
            },
            {
                "sha": "0724d97fa12b94722b2c003471e603c038cff49f",
                "filename": "java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java",
                "status": "modified",
                "additions": 0,
                "deletions": 31,
                "changes": 31,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -323,37 +323,6 @@ protected static DRDAProtocolException newAgentError(DRDAConnThread agent,\n \t\t\t\t\t\t\t\t\t\toa);\n \t}\n \t\n-\tprotected final byte[] getCrrtkn()\n-\t{\n-\t\treturn crrtkn;\n-\t}\n-\t\n-\tprotected final int getCodpntArg()\n-\t{\n-\t\treturn codpntArg;\n-\t}\n-\t\n-\tprotected final int getErrorCodePoint()\n-\t{\n-\t\treturn errorCodePoint;\n-\t}\n-\t\n-\tprotected final int getSvrcod()\n-\t{\n-\t\treturn  svrcod;\n-\t}\n-\t\n-\tprotected final int getErrcd()\n-\t{\n-\t\treturn  errcd;\n-\t}\n-\t\n-\tprotected final String getMessageid()\n-\t{\n-\t\treturn  messageid;\n-\t}\n-\t\n-\t\n \tprotected final boolean isDisconnectException()\n \t{\n \t\treturn (errorCodePoint == 0);"
            },
            {
                "sha": "4a70294a47225516b3c0425117e74e53afcfad64",
                "filename": "java/drda/org/apache/derby/impl/drda/DRDAStatement.java",
                "status": "modified",
                "additions": 0,
                "deletions": 8,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DRDAStatement.java",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/DRDAStatement.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/DRDAStatement.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -195,14 +195,6 @@ protected void setRsDefaultOptions(DRDAResultSet drs)\n \t\tdrs.qryrowset = qryrowset;\n \t}\n \n-\t/**\n-\t * Set result set options to default for statement\n-\t */\n-\tprotected void setRsDefaultOptions()\n-\t{\n-\t\tsetRsDefaultOptions(currentDrdaRs);\n-\t}\n-\n \t/**\n \t * Get the extData Objects\n \t *"
            },
            {
                "sha": "33b41bfd1e7df41b220842955eec3348dce0ec69",
                "filename": "java/drda/org/apache/derby/impl/drda/Database.java",
                "status": "modified",
                "additions": 0,
                "deletions": 34,
                "changes": 34,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/Database.java",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/Database.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/Database.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -163,21 +163,6 @@ protected DRDAStatement getDefaultStatement(String pkgnamcsn)\n \t\treturn currentStatement;\n \t}\n \n-\t/**\n-\t * Get prepared statement based on pkgnamcsn\n-\t *\n-\t * @param pkgnamcsn - key to access statement\n-\t * @return prepared statement\n-\t */\n-\tprotected PreparedStatement getPreparedStatement(String pkgnamcsn) \n-\t\tthrows SQLException\n-\t{\n-\t\tcurrentStatement = getDRDAStatement(pkgnamcsn);\n-\t\tif (currentStatement == null)\n-\t\t\treturn null;\n-\t\treturn currentStatement.getPreparedStatement();\n-\t}\n-\t\n \t/**\n \t * Get a new DRDA statement and store it in the stmtTable if stortStmt is true\n \t * If possible recycle an existing statement\n@@ -271,25 +256,6 @@ String appendAttrString(Properties p)\n \t\treturn attrString;\n \t}\n \n-\t/**\n-\t * Get result set\n-\t *\n-\t * @param pkgnamcsn - key to access prepared statement\n-\t * @return result set\n-\t */\n-\tprotected ResultSet getResultSet(String pkgnamcsn) throws SQLException\n-\t{\n-\t\treturn getDRDAStatement(pkgnamcsn).getResultSet();\n-\t}\n-\t/**\n- \t * Set result set\n-\t *\n-\t * @param value\n-\t */\n-\tprotected void setResultSet(ResultSet value) throws SQLException\n-\t{\n-\t\tcurrentStatement.setResultSet(value);\n-\t}\n \t/**\n \t * Store DRDA prepared statement\n \t * @param  stmt\tDRDA prepared statement"
            },
            {
                "sha": "29ac511bc2095533ebebe928ba271d05c15a5770",
                "filename": "java/drda/org/apache/derby/impl/drda/Session.java",
                "status": "modified",
                "additions": 0,
                "deletions": 30,
                "changes": 30,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/Session.java",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/Session.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/Session.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -268,34 +268,4 @@ protected  String buildRuntimeInfo(String indent, LocalizedResource localLangUti\n \t\ts += \"\\n\";\n \t\treturn s;\n \t}\n-\n-\tprivate String getStateString(int s)\n-\t{\n-\t\tswitch (s)\n-\t\t{\n-\t\t\tcase INIT: \n-\t\t\t\treturn \"INIT\";\n-\t\t\tcase ATTEXC:\n-\t\t\t\treturn \"ATTEXC\";\n-\t\t\tcase CLOSED:\n-\t\t\t\treturn \"CLOSED\";\n-\t\t\tdefault:\n-\t\t\t\treturn \"UNKNOWN_STATE\";\n-\n-\t\t}\n-\t}\n-\n-\tprivate String getTypeString(int t)\n-\t{\n-\t\tswitch (t)\n-\t\t{\n-\t\t\tcase DRDA_SESSION:\n-\t\t\t\treturn \"DRDA_SESSION\";\n-\t\t\tcase CMD_SESSION:\n-\t\t\t\treturn \"CMD_SESSION\";\n-\t\t\tdefault:\n-\t\t\t\treturn \"UNKNOWN_TYPE\";\n-\t\t}\n-\t\t\t\t\t\n-\t}\n }"
            },
            {
                "sha": "1129345a6a8de197e18e0d37d11b239431e11b4d",
                "filename": "java/drda/org/apache/derby/impl/drda/TestProto.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/TestProto.java",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/TestProto.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/TestProto.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -865,8 +865,8 @@ private void readLengthAndCodePoint() throws IOException, DRDAProtocolException\n \t */\n \tprivate void cpError(int cp, int reqCP) throws IOException\n \t{\n-\t\tString cpName = (String)codePointNameTable.get(new Integer(cp));\n-\t\tString reqCPName = (String)codePointNameTable.get(new Integer(reqCP));\n+\t\tString cpName = codePointNameTable.lookup(cp);\n+\t\tString reqCPName = codePointNameTable.lookup(reqCP);\n \t\tfail(\"wrong codepoint val = \" + Integer.toHexString(cp) + \n \t\t\t \"(\"+cpName+\")\" +\n \t\t\t \", required codepoint = \" + Integer.toHexString(reqCP) +"
            },
            {
                "sha": "1b2c39b4ff081ccf447cb4660e9b9ea95874b482",
                "filename": "java/drda/org/apache/derby/impl/drda/XADatabase.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/XADatabase.java",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/drda/org/apache/derby/impl/drda/XADatabase.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/XADatabase.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -80,7 +80,7 @@ protected synchronized Connection makeConnection(Properties p) throws\n \t\tif (conn == null)\n \t\t{\n \t\t\txaConnection = xaDataSource.getXAConnection(userId,password);\n-\t\t\txaResource = xaConnection.getXAResource();\n+\t\t\tsetXAResource(xaConnection.getXAResource());\n \t\t}\n \t\telse // this is just a connection reset. Close the logical connection.\n \t\t{"
            },
            {
                "sha": "1ca09afd8acdf862b93b33cf7328b77b9d76861a",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/runtimeinfo.out",
                "status": "modified",
                "additions": 4,
                "deletions": 22,
                "changes": 26,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/runtimeinfo.out",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/runtimeinfo.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/runtimeinfo.out?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -16,23 +16,6 @@ Session # :3\n # Waiting  Sessions : 0\n Total Memory : #####\tFree Memory : #####\n End test\n-Testing Runtimeinfo (method)\n------ Derby Network Server Runtime Information ---\n------ Session Information ---------------\n-Session # :2\n-Database :wombat;create=true\n-User :APP\n-# Statements:0\n-Prepared Statement Information: \n-\tStmt ID\t\tSQLText\n-\t-------------\t-----------\n-Session # :4\n------\n-# Connection Threads : 2\n-# Active Sessions : 2\n-# Waiting  Sessions : 0\n-Total Memory : #####\tFree Memory : #####\n-End test (method)\n Testing Runtimeinfo (locale)\n -----Duser.language=err -Duser.country=DE org.apache.derby.drda.NetworkServerControl runtimeinfo \n ----- Derby Network Server Runtime Information ---\n@@ -46,7 +29,7 @@ Prepared Statement Information:\n \t-------------\t-----------\n \tSYSLH0002\tVALUES(1)\n \tSYSLH0001\tSELECT count(*) from sys.systables\n-Session # :5\n+Session # :4\n Database :wombat;create=true\n User :APP\n # Statements:2\n@@ -55,25 +38,24 @@ Prepared Statement Information:\n \t-------------\t-----------\n \tSYSLH0002\tVALUES(2)\n \tSYSLH0001\tSELECT count(*) from sys.systables\n-Session # :6\n+Session # :5\n Database :wombat;create=true\n User :APP\n # Statements:0\n Prepared Statement Information: \n \tStmt ID\t\tSQLText\n \t-------------\t-----------\n-Session # :7\n+Session # :6\n -----\n # Connection Threads : 4\n # Active Sessions : 4\n # Waiting  Sessions : 0\n Total Memory : #####\tFree Memory : #####\n End test (locale)\n Testing Runtimeinfo after closing connectiosn\n-org.apache.derby.drda.NetworkServerControl runtimeinfo \n ----- Derby Network Server Runtime Information ---\n ----- Session Information ---------------\n-Session # :8\n+Session # :7\n -----\n # Connection Threads : 4\n # Active Sessions : 1"
            },
            {
                "sha": "d64dd6c9ea2b026a2521bc6046d10d43b833600e",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/runtimeinfo.out",
                "status": "modified",
                "additions": 4,
                "deletions": 22,
                "changes": 26,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/runtimeinfo.out",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/runtimeinfo.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/runtimeinfo.out?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -16,23 +16,6 @@ Session # :3\n # Waiting  Sessions : 0\n Total Memory : #####\tFree Memory : #####\n End test\n-Testing Runtimeinfo (method)\n------ Derby Network Server Runtime Information ---\n------ Session Information ---------------\n-Session # :2\n-Database :wombat;create=true\n-User :APP\n-# Statements:0\n-Prepared Statement Information: \n-\tStmt ID\t\tSQLText\n-\t-------------\t-----------\n-Session # :4\n------\n-# Connection Threads : 2\n-# Active Sessions : 2\n-# Waiting  Sessions : 0\n-Total Memory : #####\tFree Memory : #####\n-End test (method)\n Testing Runtimeinfo (locale)\n -----Duser.language=err -Duser.country=DE org.apache.derby.drda.NetworkServerControl runtimeinfo \n ----- Derby Network Server Runtime Information ---\n@@ -46,7 +29,7 @@ Prepared Statement Information:\n \t-------------\t-----------\n \tSYSSH2001\tSELECT count(*) from sys.systables\n \tSYSSH2002\tVALUES(1)\n-Session # :5\n+Session # :4\n Database :wombat;create=true\n User :APP\n # Statements:2\n@@ -55,25 +38,24 @@ Prepared Statement Information:\n \t-------------\t-----------\n \tSYSSH2001\tSELECT count(*) from sys.systables\n \tSYSSH2002\tVALUES(2)\n-Session # :6\n+Session # :5\n Database :wombat;create=true\n User :APP\n # Statements:0\n Prepared Statement Information: \n \tStmt ID\t\tSQLText\n \t-------------\t-----------\n-Session # :7\n+Session # :6\n -----\n # Connection Threads : 4\n # Active Sessions : 4\n # Waiting  Sessions : 0\n Total Memory : #####\tFree Memory : #####\n End test (locale)\n Testing Runtimeinfo after closing connectiosn\n-org.apache.derby.drda.NetworkServerControl runtimeinfo \n ----- Derby Network Server Runtime Information ---\n ----- Session Information ---------------\n-Session # :8\n+Session # :7\n -----\n # Connection Threads : 4\n # Active Sessions : 1"
            },
            {
                "sha": "2ec2bcfed0a2fca87aa9c96977270c28d4812607",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out",
                "status": "modified",
                "additions": 13,
                "deletions": 0,
                "changes": 13,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -44,6 +44,19 @@ derby.drda.timeSlice=0\n derby.drda.startNetworkServer=false\n derby.drda.host=localhost\n derby.drda.traceAll=true\n+org.apache.derby.drda.NetworkServerControl trace off -p 1527 \n+Trace turned off for all sessions.\n+Trace turned off for all sessions.\n+----- listing properties --\n+derby.drda.maxThreads=0\n+derby.drda.keepAlive=true\n+derby.drda.minThreads=0\n+derby.drda.portNumber=1527\n+derby.drda.logConnections=true\n+derby.drda.timeSlice=0\n+derby.drda.startNetworkServer=false\n+derby.drda.host=localhost\n+derby.drda.traceAll=false\n org.apache.derby.drda.NetworkServerControl shutdown -p 1527 \n Shutdown successful.\n org.apache.derby.drda.NetworkServerControl "
            },
            {
                "sha": "131ddc015222868d582c7fe5e1ae60e664acc08f",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/testProtocol.out",
                "status": "modified",
                "additions": 7,
                "deletions": 0,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/testProtocol.out",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/master/testProtocol.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/testProtocol.out?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -137,6 +137,7 @@ PASSED\n Test that we only send one RDBUPRM per transaction\n PASSED\n Test for missing PKGNAMCSN on OPNQRY\n+Also test QRYCLSRLS and MONITOR codepoints which are ignored currently\n PASSED\n Test for missing QRYBLKSZ on OPNQRY\n PASSED\n@@ -160,6 +161,8 @@ Test too large value for QRYROWSET codepoint on CNTQRY\n PASSED\n Test invalid value for QRYROWSET on OPNQRY\n PASSED\n+Test to see OPNQRY returns PRCCNVRM if non-existent RDBNAM specified\n+PASSED\n Test too large value for QRYRFRTBL codepoint on CNTQRY\n PASSED\n Test invalid value for QRYRFRTBL codepoint on CNTQRY\n@@ -281,3 +284,7 @@ Test for invalid codepoint in DSCSQLSTT\n PASSED\n Test for non-existant prepared statement in DSCSQLSTT\n PASSED\n+Test exception is thrown when specifying non-null indicator for both MBCS and SBCS in SQLSTT\n+PASSED\n+Test for missing SQLSTT in EXCSQLSET - PKGNAMCT is ignored\n+PASSED"
            },
            {
                "sha": "29f10318f9f5723aefb35d96b60ec4b48541a9e3",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -20,7 +20,9 @@ testconnection_app.properties\n testij_app.properties\n testij_sed.properties\n testProperties_app.properties\n+testProperties_derby.properties\n testProtocol_app.properties\n+testProtocol_derby.properties\n testSecMec_app.properties\n timeslice_app.properties\n protocol.tests"
            },
            {
                "sha": "b369fd12c8950baf82d9115c83f35d4a2211c34d",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/protocol.tests",
                "status": "modified",
                "additions": 109,
                "deletions": 0,
                "changes": 109,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/protocol.tests",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/protocol.tests",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/protocol.tests?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -1359,6 +1359,7 @@ moreData false\n endTest\n //\n DISPLAY \"Test for missing PKGNAMCSN on OPNQRY\"\n+DISPLAY \"Also test QRYCLSRLS and MONITOR codepoints which are ignored currently\"\n include connect.inc\n createDssRequest\n startDdm PRPSQLSTT\n@@ -1382,6 +1383,12 @@ flush\n checkSQLCard 0 \"     \"\n createDssRequest\n startDdm OPNQRY\n+startDdm QRYCLSRLS\n+writeBytes \"0x00\" \n+endDdm\n+startDdm MONITOR\n+writeBytes \"00000000\" \n+endDdm\n endDdm\n endDss\n flush\n@@ -1794,6 +1801,52 @@ flush\n checkerror SYNTAXRM 8 20 QRYROWSET\n endTest\n //\n+DISPLAY \"Test to see OPNQRY returns PRCCNVRM if non-existent RDBNAM specified\"\n+include connect.inc\n+createDssRequest\n+startDdm PRPSQLSTT\n+startDdm PKGNAMCSN\n+writePaddedString \"test\" 18\n+writePaddedString \"rdbcolid\" 18\n+writePaddedString \"pkgid\"  18\n+writeBytes \"0x0101010101010101\"\n+writeShort 1\n+endDdm\n+endDdm\n+endDss\n+createDssObject \n+startDdm SQLSTT\n+writeByte 0\t// null indicator\n+writeEncodedLDString \"values(1)\" \"UTF-8\" 4\n+writeByte 255 // null indicator\n+endDdm\n+endDss\n+flush\n+checkSQLCard 0 \"     \"\n+createDssRequest\n+startDdm OPNQRY\n+startDdm PKGNAMCSN\n+writePaddedString \"test\" 18\n+writePaddedString \"rdbcolid\" 18\n+writePaddedString \"pkgid\"  18\n+writeBytes \"0x0101010101010101\"\n+writeShort 1\n+endDdm\n+startDdm QRYBLKSZ\n+writeInt 32767\n+endDdm\n+startDdm QRYROWSET \n+writeInt 1\t\n+endDdm\n+startDdm RDBNAM \t//this is optional\n+writeScalarString RDBNAM \"non-existent-db   \" \n+endDdm\n+endDdm\n+endDss\n+flush\n+checkerror PRCCNVRM 8 18\n+endTest\n+//\n DISPLAY \"Test too large value for QRYRFRTBL codepoint on CNTQRY\"\n include values1.inc\n createDssRequest\n@@ -2469,6 +2522,7 @@ endDss\n flush\n checkError SYNTAXRM 8 20 PKGNAMCSN\n endTest\n+//\n // Remove this test for now until JCC issue with JCC sending close twice \n // resolved\n DISPLAY \"Test closing an already closed statement\"\n@@ -2992,3 +3046,58 @@ flush\n checkError SYNTAXRM\t8 20 PKGNAMCSN\n endTest\n //\n+DISPLAY \"Test exception is thrown when specifying non-null indicator for both MBCS and SBCS in SQLSTT\"\n+//This covers DRDAConnThread.agentError method\n+include connect.inc\n+createDssRequest\n+startDdm PRPSQLSTT\n+startDdm PKGNAMCSN\n+writePaddedString \"test\" 18\n+writePaddedString \"rdbcolid\" 18\n+writePaddedString \"pkgid\"  18\n+writeBytes \"0x0101010101010101\"\n+writeShort 1\n+endDdm\n+endDdm\n+endDss\n+createDssObject \n+startDdm SQLSTT\n+writeByte 0\t// non-null indicator\n+writeEncodedLDString \"values(1)\" \"UTF-8\" 4\n+writeByte 0 // non-null indicator\n+endDdm\n+endDss\n+flush\n+//Network server throws a DRDAProtocolException\n+//It does not send back anything\n+endTest\n+//\n+DISPLAY \"Test for missing SQLSTT in EXCSQLSET - PKGNAMCT is ignored\"\n+include connect.inc\n+createDssRequest\n+startDdm EXCSQLSET\n+startDdm PKGNAMCT\n+writePaddedString \"test\" 18\n+writePaddedString \"rdbcolid\" 18\n+writePaddedString \"pkgid\"  18\n+writeBytes \"0x0101010101010101\"\n+writeShort 1\n+endDdm\n+startDdm PKGNAMCSN\n+writePaddedString \"test\" 18\n+writePaddedString \"rdbcolid\" 18\n+writePaddedString \"pkgid\"  18\n+writeBytes \"0x0101010101010101\"\n+writeShort 1\n+endDdm\n+writeScalarString TYPDEFNAM  QTDSQLASC\n+startDdm TYPDEFOVR\n+writeScalar2Bytes CCSIDSBC\t1208\n+writeScalar2Bytes CCSIDMBC\t1208\n+endDdm\n+endDdm\n+endDss\n+flush\n+checkError SYNTAXRM\t8 29 TYPDEFNAM\n+endTest\n+//"
            },
            {
                "sha": "d4e25a4def007e6bfd0db217af5a0f6676e270ab",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/runtimeinfo.java",
                "status": "modified",
                "additions": 5,
                "deletions": 11,
                "changes": 16,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/runtimeinfo.java",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/runtimeinfo.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/runtimeinfo.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -118,16 +118,6 @@ public static void main (String args[]) throws Exception\n \t\t\texecCmdDumpResults(RuntimeinfoCmd);\t\n \t\t\tSystem.out.println(\"End test\");\n \t\t\t\n-\t\t\t/******************************************************************\n-\t\t\t *  Test runtimeinfo by calling NetworkServerControl.getRuntimeInfo\n-\t\t\t******************************************************************/\n-\t\t\tSystem.out.println(\"Testing Runtimeinfo (method)\");\n-\t\t\tNetworkServerControl derbyServer = \n-\t\t\t\tnew NetworkServerControl( InetAddress.getByName(\"localhost\"),\n-\t\t\t\t\t\t\t\t\t\tNetworkServerControl.DEFAULT_PORTNUMBER);\n-\t\t\tSystem.out.println(derbyServer.getRuntimeInfo());\t\n-\t\t\tSystem.out.println(\"End test (method)\");\n-\t\t\t\n \t\t\t// Now get a couple of connections with some prepared statements\n \t\t\tConnection conn2 = ij.startJBMS();\n \t\t\tPreparedStatement ps = prepareAndExecuteQuery(conn1,\"SELECT count(*) from sys.systables\");\n@@ -152,9 +142,13 @@ public static void main (String args[]) throws Exception\n \t\t\tconn2.close();\n \t\t\tconn3.close();\n \t\t\t/** once more after closing the connections \n+\t\t\t * - by calling NetworkServerControl.getRuntimeInfo \n \t\t\t */\n \t\t\tSystem.out.println(\"Testing Runtimeinfo after closing connectiosn\");\n-\t\t\texecCmdDumpResults(RuntimeinfoCmd);\t\n+\t\t\tNetworkServerControl derbyServer = \n+\t\t\t\tnew NetworkServerControl( InetAddress.getByName(\"localhost\"),\n+\t\t\t\t\t\t\t\t\t\tNetworkServerControl.DEFAULT_PORTNUMBER);\n+\t\t\tSystem.out.println(derbyServer.getRuntimeInfo());\t\n \t\t\tSystem.out.println(\"End test\");\n \n \t\t\tbos.close();"
            },
            {
                "sha": "a95da456cddce8bf919da1bca710b4cb58aeb3b6",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java",
                "status": "modified",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -94,6 +94,14 @@\n \t\t\t\t\t\t\t\t\t\"-p\",\n \t\t\t\t\t\t\t\t\t\"1527\"};\n     \n+    //trace off\n+    private static String[] cmdTraceOff =\n+\t\tnew String[] {  \"org.apache.derby.drda.NetworkServerControl\",\n+\t\t\t\t\t\t\"trace\",\n+\t\t\t\t\t\t\"off\",\n+\t\t\t\t\t\t\"-p\",\n+\t\t\t\t\t\t\"1527\"};\n+    \n     //logconnections on\n     private static String[] cmdLogconnectionsOn =\n \t\t\t\t\tnew String[] {  \"org.apache.derby.drda.NetworkServerControl\",\n@@ -273,9 +281,13 @@ public static void main (String args[]) throws Exception\n \t\t\twaitForStart(\"1527\",15000);\n \t\t\t//check that default properties are used\n \t\t\tlistProperties(\"1527\");\n+\t\t\t\n+\t\t\t//Test trace and logconnections commands\n \t\t\texecCmdDumpResults(cmdTraceOn);\n \t\t\texecCmdDumpResults(cmdLogconnectionsOn);\n \t\t\tlistProperties(\"1527\");\n+\t\t\texecCmdDumpResults(cmdTraceOff);\n+\t\t\tlistProperties(\"1527\");\n \t\t\tderbyServerCmd(\"shutdown\",\"1527\");\n \t\t\t\n \t\t\t//Test error conditions in command-line"
            },
            {
                "sha": "da9d9192cbb93cef9a91a36ef233db682d5cb08c",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties_derby.properties",
                "status": "added",
                "additions": 19,
                "deletions": 0,
                "changes": 19,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties_derby.properties",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties_derby.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties_derby.properties?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -0,0 +1,19 @@\n+#defaults\n+derby.infolog.append=true\n+derby.locks.waitTimeout=120\n+derby.language.logStatementText=true\n+\n+#added to cover call to memCheck class\n+derby.drda.debug=true#defaults\n+derby.infolog.append=true\n+derby.locks.waitTimeout=120\n+derby.language.logStatementText=true\n+\n+#added to cover call to memCheck class\n+derby.drda.debug=true#defaults\n+derby.infolog.append=true\n+derby.locks.waitTimeout=120\n+derby.language.logStatementText=true\n+\n+#added to cover call to memCheck class\n+derby.drda.debug=true\n\\ No newline at end of file"
            },
            {
                "sha": "1c8a960f63494e4e719ea3cbd2c1c39e2f0ee39d",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProtocol_derby.properties",
                "status": "added",
                "additions": 7,
                "deletions": 0,
                "changes": 7,
                "blob_url": "https://github.com/apache/derby/blob/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProtocol_derby.properties",
                "raw_url": "https://github.com/apache/derby/raw/2e4a44ee331251458ee6be6a67ec77275768b525/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProtocol_derby.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProtocol_derby.properties?ref=2e4a44ee331251458ee6be6a67ec77275768b525",
                "patch": "@@ -0,0 +1,7 @@\n+#defaults\n+derby.infolog.append=true\n+derby.locks.waitTimeout=120\n+derby.language.logStatementText=true\n+\n+#added to cover call to DssTrace methods\n+derby.drda.traceAll=true\n\\ No newline at end of file"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/09150393e2b9d87cb24d953a5d023cd9001fed71",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/117d8b57c9860a1d112fecaa6d14a2b69fc4e8ea",
        "message": "DERBY-375\n\nSpecification of incomplete server properties on command line causes NPE with NetworkServerControl when starting the server.\n\nThe patch does the following:\n1. Moves the call to 'init', which initializes 'langUtil', before the call to 'getPropertyInfo' method in the constructors of NetworkServerControlImpl.\n2. If the system properties are specified without values, use defaults for them.\n3. For 'derby.drda.traceDirectory' property following is mentioned in the doc - \"If the derby.system.home property has been set, it is the default. Otherwise, the default is the current directory.\". 'getPropertyInfo' was getting the value of 'derby.system.home' but not using it as default for 'derby.drda.traceDirectory'.\nSo the current directory was always getting used as default. Changed this.\n4. When I added the default for 'derby.drda.traceDirectory', the tests derbynet/getCurrentProperties.java and derbynet/sysinfo.java had additional lines for derby.drda.traceDirectory in their outputs. Since the directory listed is dependent on the test directory, I have sed out 'traceDirectory' lines for these tests.\n5. Adds tests to derbynet/testProperties.java.\n6. Fixes javadoc for 'traceDirectory' in NetworkServerControl.\n\nContributed by Deepa Remesh\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@321274 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_174",
        "file": [
            {
                "sha": "8522fb548da50a465eefb388f69c805bae33cc6e",
                "filename": "java/drda/org/apache/derby/drda/NetworkServerControl.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/derby/blob/09150393e2b9d87cb24d953a5d023cd9001fed71/java/drda/org/apache/derby/drda/NetworkServerControl.java",
                "raw_url": "https://github.com/apache/derby/raw/09150393e2b9d87cb24d953a5d023cd9001fed71/java/drda/org/apache/derby/drda/NetworkServerControl.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/drda/NetworkServerControl.java?ref=09150393e2b9d87cb24d953a5d023cd9001fed71",
                "patch": "@@ -86,7 +86,8 @@\n \tThis changes where new trace files will be placed. \n \tFor sessions with tracing already turned on,  \n \ttrace files remain in the previous location. \n-\tDefault is clousdcape.system.home</LI>\n+\tDefault is derby.system.home, if it is set. \n+\tOtherwise the default is the current directory.</LI>\n \n \t</UL>\n \t<P>Properties can be set in the derby.properties file or on the command line."
            },
            {
                "sha": "3b0fb30867ca8cf26a11ffdade06a9e1d93da4ea",
                "filename": "java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java",
                "status": "modified",
                "additions": 41,
                "deletions": 11,
                "changes": 52,
                "blob_url": "https://github.com/apache/derby/blob/09150393e2b9d87cb24d953a5d023cd9001fed71/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java",
                "raw_url": "https://github.com/apache/derby/raw/09150393e2b9d87cb24d953a5d023cd9001fed71/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java?ref=09150393e2b9d87cb24d953a5d023cd9001fed71",
                "patch": "@@ -285,8 +285,8 @@\n \t// constructor\n \tpublic NetworkServerControlImpl() throws Exception\n \t{\n-\t\tgetPropertyInfo();\n \t\tinit();\n+\t\tgetPropertyInfo();\n     }\n \n \n@@ -299,12 +299,12 @@ public NetworkServerControlImpl() throws Exception\n \t */\n \tpublic NetworkServerControlImpl(InetAddress address, int portNumber) throws Exception\n \t{\n+\t\tinit();\n \t\tgetPropertyInfo();\n \t\tthis.hostAddress = address;\n \t\tthis.portNumber = (portNumber <= 0) ?\n \t\t\tthis.portNumber: portNumber;\n \t\tthis.hostArg = address.getHostAddress();\n-\t\tinit();\n \t}\n \n     private void init() throws Exception\n@@ -2448,29 +2448,51 @@ private void  getPropertyInfo() throws Exception\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \"true\"))  \n \t\t\tsetTraceAll(true);\n \n-\t\tsetTraceDirectory(PropertyUtil.getSystemProperty( \n-\t\t\tProperty.DRDA_PROP_TRACEDIRECTORY));\n+\t\t//If the derby.system.home property has been set, it is the default. \n+\t\t//Otherwise, the default is the current directory. \n+\t\t//If derby.system.home is not set, directory will be null and trace files will get\n+\t\t//created in current directory.\n+\t\tpropval = PropertyUtil.getSystemProperty(Property.DRDA_PROP_TRACEDIRECTORY,directory);\n+\t\tif(propval != null){\n+\t\t\tif(propval.equals(\"\"))\n+\t\t\t\tpropval = directory;\n+\t\t\tsetTraceDirectory(propval);\n+\t\t}\n \n+\t\t//DERBY-375 If a system property is specified without any value, getProperty returns \n+\t\t//an empty string. Use default values in such cases.\n \t\tpropval = PropertyUtil.getSystemProperty( \n \t\t\tProperty.DRDA_PROP_MINTHREADS);\n-\t\tif (propval != null)\n+\t\tif (propval != null){\n+\t\t\tif(propval.equals(\"\"))\n+\t\t\t\tpropval = \"0\";\n \t\t\tsetMinThreads(getIntPropVal(Property.DRDA_PROP_MINTHREADS, propval));\n+\t\t}\n \n \t\tpropval = PropertyUtil.getSystemProperty( \n \t\t\tProperty.DRDA_PROP_MAXTHREADS);\n-\t\tif (propval != null)\n+\t\tif (propval != null){\n+\t\t\tif(propval.equals(\"\"))\n+\t\t\t\tpropval = \"0\";\n \t\t\tsetMaxThreads(getIntPropVal(Property.DRDA_PROP_MAXTHREADS, propval));\n+\t\t}\n \n \n \t\tpropval = PropertyUtil.getSystemProperty( \n \t\t\tProperty.DRDA_PROP_TIMESLICE);\n-\t\tif (propval != null)\n+\t\tif (propval != null){\n+\t\t\tif(propval.equals(\"\"))\n+\t\t\t\tpropval = \"0\";\n \t\t\tsetTimeSlice(getIntPropVal(Property.DRDA_PROP_TIMESLICE, propval));\n+\t\t}\n \n \t\tpropval = PropertyUtil.getSystemProperty( \n \t\t\tProperty.DRDA_PROP_PORTNUMBER);\n-\t\tif (propval != null)\n+\t\tif (propval != null){\n+\t\t\tif(propval.equals(\"\"))\n+\t\t\t\tpropval = String.valueOf(NetworkServerControl.DEFAULT_PORTNUMBER);\n \t\t\tportNumber = getIntPropVal(Property.DRDA_PROP_PORTNUMBER, propval);\n+\t\t}\n \n \t\tpropval = PropertyUtil.getSystemProperty( \n \t\t\tProperty.DRDA_PROP_KEEPALIVE);\n@@ -2480,9 +2502,12 @@ private void  getPropertyInfo() throws Exception\n \t\t\n \t\tpropval = PropertyUtil.getSystemProperty( \n \t\t\tProperty.DRDA_PROP_HOSTNAME);\n-\t\tif (propval != null)\n-\t\t\thostArg = propval;\n-\n+\t\tif (propval != null){\n+\t\t\tif(propval.equals(\"\"))\n+\t\t\t\thostArg = DEFAULT_HOST; \n+\t\t\telse\n+\t\t\t\thostArg = propval;\n+\t\t}\t\n \t\tpropval = PropertyUtil.getSystemProperty(\n \t\t\t\t\t\t NetworkServerControlImpl.DRDA_PROP_DEBUG);\n \t\tif (propval != null  && StringUtil.SQLEqualsIgnoreCase(propval, \"true\"))\n@@ -3214,6 +3239,11 @@ private Properties getPropertyValues()\n \t\tretval.put(Property.DRDA_PROP_TIMESLICE, new  Integer(getTimeSlice()).toString());\n \t\tretval.put(Property.DRDA_PROP_LOGCONNECTIONS, new Boolean(getLogConnections()).toString());\n \t\tString startDRDA = PropertyUtil.getSystemProperty(Property.START_DRDA);\n+\t\t//DERBY-375 If a system property is specified without any value, getProperty returns \n+\t\t//an empty string. Use default values in such cases.\n+\t\tif(startDRDA!=null && startDRDA.equals(\"\"))\n+\t\t\tstartDRDA = \"false\";\n+\t\t\n \t\tretval.put(Property.START_DRDA, (startDRDA == null)? \"false\" : startDRDA);\n \n \t\t//get the trace value for each session if tracing for all is not set"
            },
            {
                "sha": "17ebabd8a2b1c9b6c6cf7e21baacc2cf4f567ca0",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out",
                "status": "modified",
                "additions": 18,
                "deletions": 0,
                "changes": 18,
                "blob_url": "https://github.com/apache/derby/blob/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out",
                "raw_url": "https://github.com/apache/derby/raw/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/testProperties.out?ref=09150393e2b9d87cb24d953a5d023cd9001fed71",
                "patch": "@@ -14,4 +14,22 @@ org.apache.derby.drda.NetworkServerControl start -p 1530\n Successfully Connected\n org.apache.derby.drda.NetworkServerControl shutdown -p 1530 \n Shutdown successful.\n+Testing start server by specifying system properties without values\n+First shutdown server started on default port by the test harness\n+org.apache.derby.drda.NetworkServerControl shutdown -p 1527 \n+Shutdown successful.\n+-Dderby.drda.logConnections -Dderby.drda.traceAll -Dderby.drda.traceDirectory -Dderby.drda.keepAlive -Dderby.drda.timeSlice -Dderby.drda.host -Dderby.drda.portNumber -Dderby.drda.minThreads -Dderby.drda.maxThreads -Dderby.drda.startNetworkServer -Dderby.drda.debug org.apache.derby.drda.NetworkServerControl start \n+-- listing properties --\n+derby.drda.maxThreads=0\n+derby.drda.keepAlive=true\n+derby.drda.minThreads=0\n+derby.drda.portNumber=1527\n+derby.drda.logConnections=false\n+derby.drda.timeSlice=0\n+derby.drda.startNetworkServer=false\n+derby.drda.host=localhost\n+derby.drda.traceAll=false\n+Successfully Connected\n+org.apache.derby.drda.NetworkServerControl shutdown -p 1527 \n+Shutdown successful.\n End test"
            },
            {
                "sha": "846d4bfda38ff55c6b9142c492faa0d4eebbdcf7",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/derby/blob/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant",
                "raw_url": "https://github.com/apache/derby/raw/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/copyfiles.ant?ref=09150393e2b9d87cb24d953a5d023cd9001fed71",
                "patch": "@@ -7,6 +7,7 @@ dataSourcePermissions_net_app.properties\n dataSourcePermissions_net_sed.properties\n default_app.properties\n default_derby.properties\n+getCurrentProperties_sed.properties\n runtimeinfo_sed.properties\n sysinfo_sed.properties\n testij.sql"
            },
            {
                "sha": "1ef3257a7e83a764e07032c7b7bbecda36ac1412",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/getCurrentProperties_sed.properties",
                "status": "added",
                "additions": 9,
                "deletions": 0,
                "changes": 9,
                "blob_url": "https://github.com/apache/derby/blob/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/getCurrentProperties_sed.properties",
                "raw_url": "https://github.com/apache/derby/raw/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/getCurrentProperties_sed.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/getCurrentProperties_sed.properties?ref=09150393e2b9d87cb24d953a5d023cd9001fed71",
                "patch": "@@ -0,0 +1,9 @@\n+# Filters and substitutes for SED\n+# Multiple patterns for DELETE: comma separated\n+#   delete=pattern1,pattern2,...,patternn\n+# No commas can be allowed in the patterns.\n+#\n+# Multiple patterns for SUBSTITUTE: comma separated <pattern;substitute> pair\n+#   substitute=pattern1;substitute1,pattern2;substitute2,...,patternn;substituten\n+# No commas or semicolons can be allowed in the patterns/subsitutes.\n+delete=traceDirectory\n\\ No newline at end of file"
            },
            {
                "sha": "9bb5dc5051b781ef7fe07fb315ad45171ef8236b",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo_sed.properties",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo_sed.properties",
                "raw_url": "https://github.com/apache/derby/raw/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo_sed.properties",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo_sed.properties?ref=09150393e2b9d87cb24d953a5d023cd9001fed71",
                "patch": "@@ -1 +1 @@\n-delete=Version,version,Java,OS,[0-9*].[0-9*].[0-9*],JRE - JDBC\n+delete=Version,version,Java,OS,[0-9*].[0-9*].[0-9*],JRE - JDBC,traceDirectory"
            },
            {
                "sha": "1fcd1fd074218ad7088d2d22f0d2fa5e0f376b28",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java",
                "status": "modified",
                "additions": 42,
                "deletions": 0,
                "changes": 42,
                "blob_url": "https://github.com/apache/derby/blob/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java",
                "raw_url": "https://github.com/apache/derby/raw/09150393e2b9d87cb24d953a5d023cd9001fed71/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProperties.java?ref=09150393e2b9d87cb24d953a5d023cd9001fed71",
                "patch": "@@ -42,6 +42,9 @@\n \t   default\n \n \t   The command line should take precedence\n+\n+\tIt also tests start server by specifying system properties without values.\n+\tIn this case the server will use default values.\n */\n \n public class testProperties\n@@ -52,6 +55,21 @@\n \tprivate static Vector vCmd;\n     private static  BufferedOutputStream bos = null;\n \n+    //Command to start server specifying system properties without values\n+    private static String[] startServerCmd =\n+\t\t\t\t\tnew String[] {  \"-Dderby.drda.logConnections\",\n+    \t\t\t\t\t\t\t\t\"-Dderby.drda.traceAll\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.traceDirectory\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.keepAlive\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.timeSlice\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.host\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.portNumber\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.minThreads\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.maxThreads\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.startNetworkServer\",\n+\t\t\t\t\t\t\t\t\t\"-Dderby.drda.debug\",\n+\t\t\t\t\t\t\t\t\t\"org.apache.derby.drda.NetworkServerControl\",\n+\t\t\t\t\t\t\t\t\t\"start\"};\n \n \t/**\n \t * Execute the given command and dump the results to standard out\n@@ -160,6 +178,14 @@ private static void waitForStart(String portString, int timeToWait) throws Excep\n         }\n \t}\n \n+\tprivate static void listProperties(String portString) throws Exception{\n+\t\tint port = Integer.parseInt(portString);\n+\t\tNetworkServerControl derbyServer = new NetworkServerControl( InetAddress.getByName(\"localhost\"),\n+\t\t\t\t\t\t\t\t\t\t\t\t\tport);\n+\t\tProperties p = derbyServer.getCurrentProperties();\n+\t\tp.list(System.out);\n+\t}\n+\n \tpublic static void main (String args[]) throws Exception\n \t{\n \t\tif ((System.getProperty(\"java.vm.name\") != null) && System.getProperty(\"java.vm.name\").equals(\"J9\"))\n@@ -204,6 +230,22 @@ public static void main (String args[]) throws Exception\n \t\t\tSystem.out.println(\"Successfully Connected\");\n \t\t\t//shutdown - with command line option\n \t\t\tderbyServerCmd(\"shutdown\",\"1530\");\n+\n+\t\t\t/**********************************************************************\n+\t\t\t *  Test start server specifying system properties without values\n+\t\t\t *********************************************************************/\n+\t\t\tSystem.out.println(\"Testing start server by specifying system properties without values\");\n+\t\t\tSystem.out.println(\"First shutdown server started on default port by the test harness\");\n+\n+\t\t\t//Shutdown the server started by test\n+\t\t\tderbyServerCmd(\"shutdown\",\"1527\");\n+\t\t\texecCmd(startServerCmd);\n+\t\t\twaitForStart(\"1527\",15000);\n+\t\t\t//check that default properties are used\n+\t\t\tlistProperties(\"1527\");\n+\t\t\tSystem.out.println(\"Successfully Connected\");\n+\t\t\tderbyServerCmd(\"shutdown\",\"1527\");\n+\n \t\t\tSystem.out.println(\"End test\");\n \t\t\tbos.close();\n \t\t}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/616634fd67e652a346e2ee29d3ae77a6449b66f6",
        "message": "DERBY-1644: NPE when inserting values to tbl w/ identity col gen by default\n\nWhen the VALUES clause encounters multiple rows, it generates a UNION\nnode tree to combine the rows to be inserted. InsertNode notices the\ntop-level UNION node and calls the special checkAutoincrementUnion()\nmethod which knows how to recursively traverse the Union tree and\ncall checkAutoIncrement() on the underlying RowResultSetNode instances\nat the leaf level of the tree.\n\nHOWEVER, when the number of columns in the rows in the VALUES clause\nis a subset of the number of columns in the table we're inserting into,\nthe top node of the tree is not a UnionNode, but is rather a\nProjectRestrictNode. This means that we skip past the UnionNode test and\njust call checkAutoincrement(), which processes the PRN but doesn't\ngo down to the RowResultSetNode(s) at the leaf level.\n\nThis leaves the ResultColumn instance at the leaf level with a NULL column\ndescriptor, which causes the NPE during the code generation phase.\n\nAnd, there is a second, related problem. The enhanceRCLForInsert() call\nis also only made at the top level of the tree. However, this call is a\nnecessary pre-condition for calling checkAutoincrement() because\nenhanceRCLForInsert() ensures that the proper ResultColumnList values are\nin place prior to the checkAutoincrement() reconciliation of the column lists.\n\nThe patch solves these problems by merging the code from InsertNode.bind\ntogether with the current recursive processing in\nResultColumnList.checkAutoincrementUnion() to produce a new recursive\nroutine, which I have called enhanceAndCheckForAutoincrement(), which will\nrecursively traverse the ResultSet tree, calling *both* enhanceRCLForInsert()\nand checkAutoincrement() on the various nodes in the tree.\n\nThus the primary ideas involved in this patch are:\n - When an INSERT statement will insert multiple rows from the VALUES\n   clause, the compiler will compile the various values into a tree of\n   UnionNodes with RowResultSetNodes at the leaves of the three\n - The columns specified in the INSERT statement may be a subset\n   of the rows in the table. The \"extra\" columns need to be constructed by\n   the INSERT statement, either by generating NULL values for those\n   columns which are nullable, or by compiling a default values for those\n   columns which have DEFAULT values, or by generating a value for an IDENTITY\n   column which is GENERATED. The work of constructing these extra\n   column values is done by genNewRCForInsert.\n - For columns which are GENERATED ALWAYS, we must make sure that\n   the INSERT statement doesn't allow the user to insert their own value for\n   the generated column.\n - The columns which are specified in the INSERT column spec may not match\n   the order in which the columns arise in the table. Therefore, the column\n   values may need to be re-ordered by the INSERT statement so that they\n   occur in the proper order.\n - In the case when the ResultSet which provides the values for the INSERT\n   statement is not just a single node, but is rather a tree of UnionNodes, the\n   above processing needs to happen throughout the tree, not just at\n   the root node. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@487414 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_175",
        "file": [
            {
                "sha": "09c0f0129076a4d816d0293156a1e2ad6775bbc5",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "status": "modified",
                "additions": 101,
                "deletions": 38,
                "changes": 139,
                "blob_url": "https://github.com/apache/derby/blob/0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "raw_url": "https://github.com/apache/derby/raw/0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java?ref=0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f",
                "patch": "@@ -411,45 +411,10 @@ public void bindStatement() throws StandardException\n \t\t\t}\n \t\t}\n \n-\t\t// colmap[x] == y means that column x in the target table\n-\t\t// maps to column y in the source result set.\n-\t\t// colmap[x] == -1 means that column x in the target table\n-\t\t// maps to its default value.\n-\t\t// both colmap indexes and values are 0-based.\n+\t\tenhanceAndCheckForAutoincrement(resultSet, inOrder,\n+\t\t\t\tnumTableColumns, colMap, dataDictionary,\n+\t\t\t\ttargetTableDescriptor, targetVTI);\n \n-\t\t/* if the list is in order and complete, we don't have to change\n-\t\t * the tree. If it is not, then we call RSN.enhanceRCLForInsert() \n-\t\t * which will either\n-\t\t * (reorder and/or \"enhance\" the source RCL within the same RSN) or\n-\t\t * (generate and return a PRN with a new reordered/enhanced RCL above\n-\t\t * the existing RSN).  This way, RSN's that understand how to do projections\n-\t\t * can avoid the additional PRN while those that do not will get one.\n-\t\t */\n-\t\t/* NOTE - javascope gives confusing branch coverage info here.  By\n-\t\t * breaking apart the following if condition, I have verified that\n-\t\t * we test all cases.  (Jerry 7/17/97)\n-\t\t */\n-\t\tif (! inOrder || resultSet.resultColumns.size() < numTableColumns)\n-\t\t{\n-\t\t\t// one thing we do know is that all of the resultsets underneath\n-\t\t\t// us have their resultColumn names filled in with the names of\n-\t\t\t// the target table columns.  That makes generating the mapping\n-\t\t\t// \"easier\" -- we simply generate the names of the target table columns\n-\t\t\t// that are included.  For the missing columns, we generate default\n-\t\t\t// value expressions.\n-\n-\t\t\tresultSet = resultSet.enhanceRCLForInsert(numTableColumns, colMap, \n-\t\t\t\t\t\t\t\t\t\t\t\t\t  dataDictionary,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t  targetTableDescriptor, targetVTI);\n-\t\t}\n-\n-\t\tif (resultSet instanceof UnionNode)\n-\t\t{\n-\t\t\t// If we are inserting a number of rows in VALUES clause, we need to\n-\t\t\t// examine each row for 'autoincrement'.\n-\t\t\tresultColumnList.checkAutoincrementUnion(resultSet);\n-\t\t}\n-\t\telse resultColumnList.checkAutoincrement(resultSet.getResultColumns());\n \t\tresultColumnList.checkStorableExpressions(resultSet.getResultColumns());\n \t\t/* Insert a NormalizeResultSetNode above the source if the source\n \t\t * and target column types and lengths do not match.\n@@ -529,6 +494,104 @@ public void bindStatement() throws StandardException\n \t\tgetCompilerContext().popCurrentPrivType();\n \t}\n \n+\t/**\n+\t * Process ResultSet column lists for projection and autoincrement.\n+\t *\n+\t * This method recursively descends the result set node tree. When\n+\t * it finds a simple result set, it processes any autoincrement\n+\t * columns in that rs by calling checkAutoIncrement. When it finds\n+\t * a compound result set, like a Union or a PRN, it recursively\n+\t * descends to the child(ren) nodes. Union nodes can arise due to\n+\t * multi-rows in VALUES clause), PRN nodes can arise when the set\n+\t * of columns being inserted is a subset of the set of columns in \n+\t * the table.\n+\t *\n+\t * In addition to checking for autoincrement columns in the result set,\n+\t * we may need to enhance and re-order the column list to match the\n+\t * column list of the table we are inserting into. This work is handled\n+\t * by ResultsetNode.enhanceRCLForInsert.\n+\t *\n+\t * Note that, at the leaf level, we need to enhance the RCL first, then\n+\t * check for autoincrement columns. At the non-leaf levels, we have\n+\t * to enhance the RCL, but we don't have to check for autoincrement\n+\t * columns, since they only occur at the leaf level.\n+\t *\n+\t * This way, all ColumnDescriptor of all rows will be set properly.\n+\t *\n+\t * @param resultSet\t\t\tcurrent node in the result set tree\n+\t * @param inOrder\t\t\tFALSE if the column list needs reordering\n+\t * @param numTableColumns   # of columns in target RCL\n+\t * @param colMap            correspondence between RCLs\n+\t * @param dataDictionary    DataDictionary to use\n+\t * @param targetTD          Table Descriptor for target\n+\t * @param targetVTI         Target description if it is a VTI\n+\t *\n+\t * @exception StandardException Thrown on error\n+\t */\n+\tprivate void enhanceAndCheckForAutoincrement(ResultSetNode resultSet, \n+\t\t\tboolean inOrder, int numTableColumns, int []colMap, \n+\t\t\tDataDictionary dataDictionary,\n+\t\t\tTableDescriptor targetTableDescriptor,\n+\t\t\tFromVTI targetVTI)\n+\t\tthrows StandardException\n+\t{\n+\t\t/*\n+\t\t * Some implementation notes:\n+\t\t * \n+\t\t * colmap[x] == y means that column x in the target table\n+\t\t * maps to column y in the source result set.\n+\t\t * colmap[x] == -1 means that column x in the target table\n+\t\t * maps to its default value.\n+\t\t * both colmap indexes and values are 0-based.\n+\t\t *\n+\t\t * if the list is in order and complete, we don't have to change\n+\t\t * the tree. If it is not, then we call RSN.enhanceRCLForInsert() \n+\t\t * which will reorder (\"enhance\") the source RCL within the same RSN)\n+\t\t *\n+\t\t * one thing we do know is that all of the resultsets underneath\n+\t\t * us have their resultColumn names filled in with the names of\n+\t\t * the target table columns.  That makes generating the mapping\n+\t\t * \"easier\" -- we simply generate the names of the target table columns\n+\t\t * that are included.  For the missing columns, we generate default\n+\t\t * value expressions.\n+\t\t */\n+\n+\t\tif (resultSet instanceof SingleChildResultSetNode)\n+\t\t{\n+\t\t\tenhanceAndCheckForAutoincrement(\n+\t\t\t\t((SingleChildResultSetNode)resultSet).getChildResult(),\n+\t\t\t\tinOrder, numTableColumns, colMap, dataDictionary,\n+\t\t\t\ttargetTableDescriptor, targetVTI);\n+\t\t\tif (! inOrder || resultSet.resultColumns.size() < numTableColumns)\n+\t\t\t\tresultSet.enhanceRCLForInsert(\n+\t\t\t\t\t\tnumTableColumns, colMap, dataDictionary,\n+\t\t\t\t\t\ttargetTableDescriptor, targetVTI);\n+\t\t}\n+\t\telse if (resultSet instanceof UnionNode)\n+\t\t{\n+\t\t\tenhanceAndCheckForAutoincrement(\n+\t\t\t\t((TableOperatorNode)resultSet).getLeftResultSet(),\n+\t\t\t\tinOrder, numTableColumns, colMap, dataDictionary,\n+\t\t\t\ttargetTableDescriptor, targetVTI);\n+\t\t\tenhanceAndCheckForAutoincrement(\n+\t\t\t\t((TableOperatorNode)resultSet).getRightResultSet(),\n+\t\t\t\tinOrder, numTableColumns, colMap, dataDictionary,\n+\t\t\t\ttargetTableDescriptor, targetVTI);\n+\t\t\tif (! inOrder || resultSet.resultColumns.size() < numTableColumns)\n+\t\t\t\tresultSet.enhanceRCLForInsert(\n+\t\t\t\t\t\tnumTableColumns, colMap, dataDictionary,\n+\t\t\t\t\t\ttargetTableDescriptor, targetVTI);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tif (! inOrder || resultSet.resultColumns.size() < numTableColumns)\n+\t\t\t\tresultSet.enhanceRCLForInsert(\n+\t\t\t\t\t\tnumTableColumns, colMap, dataDictionary,\n+\t\t\t\t\t\ttargetTableDescriptor, targetVTI);\n+\t\t\tresultColumnList.checkAutoincrement(resultSet.getResultColumns());\n+\t\t}\n+\t}\n+\n \tint getPrivType()\n \t{\n \t\treturn Authorizer.INSERT_PRIV;"
            },
            {
                "sha": "1c2cc0c8f8ba1a10a17d7356cff2bad941fb0476",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "status": "modified",
                "additions": 0,
                "deletions": 30,
                "changes": 30,
                "blob_url": "https://github.com/apache/derby/blob/0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "raw_url": "https://github.com/apache/derby/raw/0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java?ref=0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f",
                "patch": "@@ -2252,36 +2252,6 @@ else if (!thisRC.getName().equals(otherRC.getName()))\n \t\t}\n \t}\n \n-\t/**\n-\t * If the resultset is a UnionNode (e.g., multi-rows in VALUES clause), we recursively call itself.\n-\t * checkAutoincrement() will set ColumnDescriptor for autoincrement columns.\n-\t * This way, all ColumnDescriptor of all rows will be set properly.\n-\t */\n-\tpublic void\tcheckAutoincrementUnion(ResultSetNode rs)\n-\t\tthrows StandardException\n-\t{\n-\t\tResultSetNode lrs = ((TableOperatorNode)rs).getLeftResultSet();\n-\t\tResultSetNode rrs = ((TableOperatorNode)rs).getRightResultSet();\n-\n-\t\tif (lrs instanceof UnionNode)\n-\t\t{\n-\t\t\tthis.checkAutoincrementUnion(lrs);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tthis.checkAutoincrement(lrs.getResultColumns());\n-\t\t}\n-\n-\t\tif (rrs instanceof UnionNode)\n-\t\t{\n-\t\t\tthis.checkAutoincrementUnion(rrs);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tthis.checkAutoincrement(rrs.getResultColumns());\n-\t\t}\n-\t}\n-\n \t/**\n \t * Do the 2 RCLs have the same type & length.\n \t * This is useful for UNIONs when deciding whether a NormalizeResultSet is required."
            },
            {
                "sha": "943b107900e2078e18d5a98ce495d66539abfff9",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "status": "modified",
                "additions": 2,
                "deletions": 9,
                "changes": 11,
                "blob_url": "https://github.com/apache/derby/blob/0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "raw_url": "https://github.com/apache/derby/raw/0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java?ref=0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f",
                "patch": "@@ -1044,9 +1044,7 @@ public void markStatementResultSet()\n \t * This ResultSet is the source for an Insert.  The target RCL\n \t * is in a different order and/or a superset of this RCL.  In most cases\n \t * we will reorder and/or add defaults to the current RCL so that is\n-\t * matches the target RCL.  Those RSNs whose generate() method does\n-\t * not handle projects will insert a PRN, with a new RCL which matches\n-\t * the target RCL, above the current RSN.\n+\t * matches the target RCL.\n \t * NOTE - The new or enhanced RCL will be fully bound.\n \t *\n \t * @param numTargetColumns\t# of columns in target RCL\n@@ -1056,12 +1054,10 @@ public void markStatementResultSet()\n \t * @param dataDictionary\tDataDictionary to use\n \t * @param targetTD\t\t\tTableDescriptor for target if the target is not a VTI, null if a VTI\n      * @param targetVTI         Target description if it is a VTI, null if not a VTI\n-\t *\n-\t * @return ResultSetNode\tThe new top of the tree\n \t *\n \t * @exception StandardException\t\tThrown on error\n \t */\n-\tpublic ResultSetNode enhanceRCLForInsert(int numTargetColumns, int[] colMap, \n+\tpublic void enhanceRCLForInsert(int numTargetColumns, int[] colMap, \n \t\t\t\t\t\t\t\t\t\t\t DataDictionary dataDictionary,\n \t\t\t\t\t\t\t\t\t\t\t TableDescriptor targetTD,\n                                              FromVTI targetVTI)\n@@ -1072,7 +1068,6 @@ public ResultSetNode enhanceRCLForInsert(int numTargetColumns, int[] colMap,\n \t\t\t\t\t\t\t(ResultColumnList) getNodeFactory().getNode(\n \t\t\t\t\t\t\t\t\t\t\t\tC_NodeTypes.RESULT_COLUMN_LIST,\n \t\t\t\t\t\t\t\t\t\t\t\tgetContextManager());\n-\t\tint numResultSetColumns = resultColumns.size();\n \n \t\t/* Create a massaged version of the source RCL.\n \t\t * (Much simpler to build new list and then assign to source,\n@@ -1098,8 +1093,6 @@ public ResultSetNode enhanceRCLForInsert(int numTargetColumns, int[] colMap,\n \n \t\t/* Set the source RCL to the massaged version */\n \t\tresultColumns = newResultCols;\n-\n-\t\treturn this;\n \t}\n \n \t/**"
            },
            {
                "sha": "a3bb99ae9e5116cbe93f42fd85ceb3e75607af42",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java",
                "status": "modified",
                "additions": 0,
                "deletions": 102,
                "changes": 102,
                "blob_url": "https://github.com/apache/derby/blob/0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java",
                "raw_url": "https://github.com/apache/derby/raw/0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java?ref=0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f",
                "patch": "@@ -883,108 +883,6 @@ public void setResultToBooleanTrueNode(boolean onlyConvertAlls)\n \t\trightResultSet.setResultToBooleanTrueNode(onlyConvertAlls);\n \t}\n \n-\t/**\n-\t * This ResultSet is the source for an Insert.  The target RCL\n-\t * is in a different order and/or a superset of this RCL.  In most cases\n-\t * we will reorder and/or add defaults to the current RCL so that is\n-\t * matches the target RCL.  Those RSNs whose generate() method does\n-\t * not handle projects will insert a PRN, with a new RCL which matches\n-\t * the target RCL, above the current RSN.\n-\t * NOTE - The new or enhanced RCL will be fully bound.\n-\t *\n-\t * @param numTargetColumns\t# of columns in target RCL\n-\t * @param colMap\t\t\tint array representation of correspondence between\n-\t *\t\t\t\t\t\t\tRCLs - colmap[i] = -1 -> missing in current RCL\n-\t *\t\t\t\t\t\t\t\t   colmap[i] = j -> targetRCL(i) <-> thisRCL(j+1)\n-\t * @param dataDictionary\tDataDictionary to use\n-\t * @param targetTD\t\t\tTableDescriptor for target if the target is not a VTI, null if a VTI\n-     * @param targetVTI         Target description if it is a VTI, null if not a VTI\n-\t *\n-\t * @return ResultSetNode\tThe new top of the tree\n-\t *\n-\t * @exception StandardException\t\tThrown on error\n-\t */\n-\tpublic ResultSetNode enhanceRCLForInsert(int numTargetColumns, int[] colMap, \n-\t\t\t\t\t\t\t\t\t\t\t DataDictionary dataDictionary,\n-\t\t\t\t\t\t\t\t\t\t\t TableDescriptor targetTD,\n-                                             FromVTI targetVTI)\n-\t\t\tthrows StandardException\n-\t{\n-\t\t// our newResultCols are put into the bound form straight away.\n-\t\tResultColumnList newResultCols =\n-\t\t\t\t\t\t\t\t(ResultColumnList) getNodeFactory().getNode(\n-\t\t\t\t\t\t\t\t\t\t\t\tC_NodeTypes.RESULT_COLUMN_LIST,\n-\t\t\t\t\t\t\t\t\t\t\t\tgetContextManager());\n-\t\tint numResultSetColumns = resultColumns.size();\n-\n-\t\t/* Create a massaged version of the source RCL.\n-\t\t * (Much simpler to build new list and then assign to source,\n-\t\t * rather than massage the source list in place.)\n-\t\t */\n-\t\tfor (int index = 0; index < numTargetColumns; index++)\n-\t\t{\n-\t\t\tResultColumn\tnewResultColumn;\n-\t\t\tResultColumn\toldResultColumn;\n-\t\t\tColumnReference newColumnReference;\n-\n-\t\t\tif (colMap[index] != -1)\n-\t\t\t{\n-\t\t\t\t// getResultColumn uses 1-based positioning, so offset the colMap entry appropriately\n-\t\t\t\toldResultColumn = resultColumns.getResultColumn(colMap[index]+1);\n-\n-\t\t\t\tnewColumnReference = (ColumnReference) getNodeFactory().getNode(\n-\t\t\t\t\t\t\t\t\t\t\t\tC_NodeTypes.COLUMN_REFERENCE,\n-\t\t\t\t\t\t\t\t\t\t\t\toldResultColumn.getName(),\n-\t\t\t\t\t\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\t\t\t\t\t\tgetContextManager());\n-\t\t\t\t/* The ColumnReference points to the source of the value */\n-\t\t\t\tnewColumnReference.setSource(oldResultColumn);\n-\t\t\t\t// colMap entry is 0-based, columnId is 1-based.\n-\t\t\t\tnewColumnReference.setType(oldResultColumn.getExpressionType());\n-\n-\t\t\t\t// Source of an insert, so nesting levels must be 0\n-\t\t\t\tnewColumnReference.setNestingLevel(0);\n-\t\t\t\tnewColumnReference.setSourceLevel(0);\n-\n-\t\t\t\t// because the insert already copied the target table's\n-\t\t\t\t// column descriptors into the result, we grab it from there.\n-\t\t\t\t// alternatively, we could do what the else clause does,\n-\t\t\t\t// and look it up in the DD again.\n-\t\t\t\tnewResultColumn = (ResultColumn) getNodeFactory().getNode(\n-\t\t\t\t\t\tC_NodeTypes.RESULT_COLUMN,\n-\t\t\t\t\t\toldResultColumn.getType(),\n-\t\t\t\t\t\tnewColumnReference,\n-\t\t\t\t\t\tgetContextManager());\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tnewResultColumn = genNewRCForInsert(targetTD, targetVTI, index + 1, dataDictionary);\n-\t\t\t}\n-\n-\t\t\tnewResultCols.addResultColumn(newResultColumn);\n-\t\t}\n-\n-\t\t/* The generated ProjectRestrictNode now has the ResultColumnList\n-\t\t * in the order that the InsertNode expects.\n-\t\t * NOTE: This code here is an exception to several \"rules\":\n-\t\t *\t\to  This is the only ProjectRestrictNode that is currently\n-\t\t *\t\t   generated outside of preprocess().\n-\t\t *\t    o  The UnionNode is the only node which is not at the\n-\t\t *\t\t   top of the query tree which has ColumnReferences under\n-\t\t *\t\t   its ResultColumnList prior to expression push down.\n-\t\t */\n-\t\treturn (ResultSetNode) getNodeFactory().getNode(\n-\t\t\t\t\t\t\t\t\tC_NodeTypes.PROJECT_RESTRICT_NODE,\n-\t\t\t\t\t\t\t\t\tthis,\n-\t\t\t\t\t\t\t\t\tnewResultCols,\n-\t\t\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\t\t\ttableProperties,\n-\t\t\t\t\t\t\t\t\tgetContextManager());\n-\t}\n-\n \t/**\n \t * Evaluate whether or not the subquery in a FromSubquery is flattenable.  \n \t * Currently, a FSqry is flattenable if all of the following are true:"
            },
            {
                "sha": "26eff15d75e584059f93233b596a91ae72628c15",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/autoincrement.out",
                "status": "modified",
                "additions": 94,
                "deletions": 0,
                "changes": 94,
                "blob_url": "https://github.com/apache/derby/blob/0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f/java/testing/org/apache/derbyTesting/functionTests/master/autoincrement.out",
                "raw_url": "https://github.com/apache/derby/raw/0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f/java/testing/org/apache/derbyTesting/functionTests/master/autoincrement.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/autoincrement.out?ref=0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f",
                "patch": "@@ -1929,4 +1929,98 @@ ij(CONN2)> INSERT INTO derby_1645 (StringValue) VALUES ('test53');\n 1 row inserted/updated/deleted\n ij(CONN2)> INSERT INTO derby_1645 (TableId, StringValue) VALUES (-999, 'test3');\n 1 row inserted/updated/deleted\n+ij(CONN2)> -- Test cases related to DERBY-1644, which involve:\n+--  a) multi-row VALUES clauses\n+--  b) GENERATED BY DEFAULT autoincrement fields\n+--  c) insert statements which mention only a subset of the table's columns\n+-- First we have the actual case from the bug report. Then we have a number\n+-- of other similar cases, to try to cover the code area in question\n+create table D1644 (c1 int, c2 int generated by default as identity);\n+0 rows inserted/updated/deleted\n+ij(CONN2)> insert into D1644 (c2) values default, 10;\n+2 rows inserted/updated/deleted\n+ij(CONN2)> insert into D1644 (c2) values (11);\n+1 row inserted/updated/deleted\n+ij(CONN2)> insert into D1644 (c2) values default;\n+1 row inserted/updated/deleted\n+ij(CONN2)> insert into D1644 (c2) values (default);\n+1 row inserted/updated/deleted\n+ij(CONN2)> insert into D1644 (c2) values 12, 13, 14;\n+3 rows inserted/updated/deleted\n+ij(CONN2)> insert into D1644 (c2) values 15, 16, default;\n+3 rows inserted/updated/deleted\n+ij(CONN2)> insert into D1644 values (17, 18);\n+1 row inserted/updated/deleted\n+ij(CONN2)> insert into D1644 values (19, default);\n+1 row inserted/updated/deleted\n+ij(CONN2)> insert into D1644 values (20, default), (21, 22), (23, 24), (25, default);\n+4 rows inserted/updated/deleted\n+ij(CONN2)> insert into D1644 (c2, c1) values (default, 26);\n+1 row inserted/updated/deleted\n+ij(CONN2)> insert into D1644 (c2, c1) values (27, 28), (default, 29), (30, 31);\n+3 rows inserted/updated/deleted\n+ij(CONN2)> insert into D1644 (c2) values default, default, default, default;\n+4 rows inserted/updated/deleted\n+ij(CONN2)> insert into D1644 (c2, c1) values (default, 128),(default, 129),(default, 131);\n+3 rows inserted/updated/deleted\n+ij(CONN2)> select * from D1644;\n+C1         |C2         \n+-----------------------\n+NULL       |1          \n+NULL       |10         \n+NULL       |11         \n+NULL       |2          \n+NULL       |3          \n+NULL       |12         \n+NULL       |13         \n+NULL       |14         \n+NULL       |15         \n+NULL       |16         \n+NULL       |4          \n+17         |18         \n+19         |5          \n+20         |6          \n+21         |22         \n+23         |24         \n+25         |7          \n+26         |8          \n+28         |27         \n+29         |9          \n+31         |30         \n+NULL       |10         \n+NULL       |11         \n+NULL       |12         \n+NULL       |13         \n+128        |14         \n+129        |15         \n+131        |16         \n+ij(CONN2)> create table D1644_A (c1 int, c2 int generated by default as identity, c3 int);\n+0 rows inserted/updated/deleted\n+ij(CONN2)> insert into D1644_A (c3, c1, c2) values (1, 2, default);\n+1 row inserted/updated/deleted\n+ij(CONN2)> insert into D1644_A (c3, c1, c2) values (3,4,5), (6,7,default);\n+2 rows inserted/updated/deleted\n+ij(CONN2)> insert into D1644_A (c3, c2) values (8, default), (9, 10);\n+2 rows inserted/updated/deleted\n+ij(CONN2)> select * from D1644_A;\n+C1         |C2         |C3         \n+-----------------------------------\n+2          |1          |1          \n+4          |5          |3          \n+7          |2          |6          \n+NULL       |3          |8          \n+NULL       |10         |9          \n+ij(CONN2)> create table D1644_B (c1 int generated by default as identity);\n+0 rows inserted/updated/deleted\n+ij(CONN2)> insert into D1644_B (c1) values default, 10;\n+2 rows inserted/updated/deleted\n+ij(CONN2)> insert into D1644_B values default, 10;\n+2 rows inserted/updated/deleted\n+ij(CONN2)> select * from D1644_B;\n+C1         \n+-----------\n+1          \n+10         \n+2          \n+10         \n ij(CONN2)> "
            },
            {
                "sha": "8b3de861cf5e9f26b89446bf52f530190f3b90df",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/autoincrement.sql",
                "status": "modified",
                "additions": 33,
                "deletions": 0,
                "changes": 33,
                "blob_url": "https://github.com/apache/derby/blob/0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/autoincrement.sql",
                "raw_url": "https://github.com/apache/derby/raw/0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f/java/testing/org/apache/derbyTesting/functionTests/tests/lang/autoincrement.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/autoincrement.sql?ref=0958c84ffda9ed45e9d8ecc8baa8f40ce3f3919f",
                "patch": "@@ -1027,3 +1027,36 @@ SELECT\t\tcol.columndefault, col.columndefaultid,\n INSERT INTO derby_1645 (StringValue) VALUES ('test53');\n INSERT INTO derby_1645 (TableId, StringValue) VALUES (-999, 'test3');\n \n+-- Test cases related to DERBY-1644, which involve:\n+--  a) multi-row VALUES clauses\n+--  b) GENERATED BY DEFAULT autoincrement fields\n+--  c) insert statements which mention only a subset of the table's columns\n+-- First we have the actual case from the bug report. Then we have a number\n+-- of other similar cases, to try to cover the code area in question\n+create table D1644 (c1 int, c2 int generated by default as identity);\n+insert into D1644 (c2) values default, 10;\n+\n+insert into D1644 (c2) values (11);\n+insert into D1644 (c2) values default;\n+insert into D1644 (c2) values (default);\n+insert into D1644 (c2) values 12, 13, 14;\n+insert into D1644 (c2) values 15, 16, default;\n+insert into D1644 values (17, 18);\n+insert into D1644 values (19, default);\n+insert into D1644 values (20, default), (21, 22), (23, 24), (25, default);\n+insert into D1644 (c2, c1) values (default, 26);\n+insert into D1644 (c2, c1) values (27, 28), (default, 29), (30, 31);\n+insert into D1644 (c2) values default, default, default, default;\n+insert into D1644 (c2, c1) values (default, 128),(default, 129),(default, 131);\n+select * from D1644;\n+\n+create table D1644_A (c1 int, c2 int generated by default as identity, c3 int);\n+insert into D1644_A (c3, c1, c2) values (1, 2, default);\n+insert into D1644_A (c3, c1, c2) values (3,4,5), (6,7,default);\n+insert into D1644_A (c3, c2) values (8, default), (9, 10);\n+select * from D1644_A;\n+create table D1644_B (c1 int generated by default as identity);\n+insert into D1644_B (c1) values default, 10;\n+insert into D1644_B values default, 10;\n+select * from D1644_B;\n+"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/derby/commit/6b8ccdd94378fb7211470195b273b41eea6197d9",
        "repo": "derby",
        "parent": "https://github.com/apache/derby/commit/aebfb28875fc7d4463550a23a471c2b203593335",
        "message": "DERBY-4419: NPE with INSERT .. SELECT .. UNION and identity columns\n\nThe following SQL was causing problems:\n\n    create table t3(x int, y int generated always as identity);\n    insert into t3(x) select * from t1 union select * from t2;\n\nDuring the insert, the value of column Y is not specified by the INSERT\nstatement, and therefore Derby notices that Y's value is to be generated,\nand so Derby generates code to compute a value for Y when inserting each\nrow into T3.\n\nWhen Derby is compiling the INSERT statement, Derby checks that the\ncolumn information for the column(s) to be inserted matches the correpsonding\ncolumn information for the column(s) that are selected by the SELECT\nclause in the INSERT statement.\n\nIn the above example, Derby expands the \"*\" expression for each of tables\nT1 and T2, and verifies that the result is a single integer column, thus\nmatching column X in T3.\n\nHowever, at that point in processing, the ResultColumnList also contains\ninformation about column Y, since its value is to be automatically generated.\n\nTherefore, Derby needs to skip over such columns during datatype checking;\nthese columns are marked isGeneratedForUnmatchedColumnInInsert, so this\nchange causes Derby to check that value.\n\nA similar behavior (DERBY-4425) occurs for columns which are generated by\nexpressions, which is a new feature in recent versions of Derby.\n\nThis change also fixes DERBY-4425. A separate commit for DERBY-4425 will\nadd an additional regression test for that situation.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@831304 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "derby_176",
        "file": [
            {
                "sha": "6e4c355da766e0ed8c965224c0f5e27e9923079e",
                "filename": "java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/derby/blob/6b8ccdd94378fb7211470195b273b41eea6197d9/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "raw_url": "https://github.com/apache/derby/raw/6b8ccdd94378fb7211470195b273b41eea6197d9/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java?ref=6b8ccdd94378fb7211470195b273b41eea6197d9",
                "patch": "@@ -1688,7 +1688,7 @@ boolean columnTypesAndLengthsMatch()\n \t\t\tResultColumn resultColumn = (ResultColumn) elementAt(index);\n \n \t\t\t/* Skip over generated columns */\n-\t\t\tif (resultColumn.isGenerated())\n+\t\t\tif (resultColumn.isGenerated() || resultColumn.isGeneratedForUnmatchedColumnInInsert())\n \t\t\t{\n \t\t\t\tcontinue;\n \t\t\t}"
            },
            {
                "sha": "7238edfc7d6b8d0060bc6a5f3f7443ff0097e848",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/master/autoincrement.out",
                "status": "modified",
                "additions": 13,
                "deletions": 0,
                "changes": 13,
                "blob_url": "https://github.com/apache/derby/blob/6b8ccdd94378fb7211470195b273b41eea6197d9/java/testing/org/apache/derbyTesting/functionTests/master/autoincrement.out",
                "raw_url": "https://github.com/apache/derby/raw/6b8ccdd94378fb7211470195b273b41eea6197d9/java/testing/org/apache/derbyTesting/functionTests/master/autoincrement.out",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/master/autoincrement.out?ref=6b8ccdd94378fb7211470195b273b41eea6197d9",
                "patch": "@@ -2112,4 +2112,17 @@ alter table d4006_a alter column z default null;\n ij(CONN2)> -- should fail DERBY-4011\n drop table d4006_a;\n 0 rows inserted/updated/deleted\n+ij(CONN2)> -- DERBY-4419 is a variant on DERBY-1644:\n+create table d4419_t1(x int);\n+0 rows inserted/updated/deleted\n+ij(CONN2)> insert into d4419_t1 values 1,2;\n+2 rows inserted/updated/deleted\n+ij(CONN2)> create table d4419_t2(x int);\n+0 rows inserted/updated/deleted\n+ij(CONN2)> insert into d4419_t2 values 2,3;\n+2 rows inserted/updated/deleted\n+ij(CONN2)> create table d4419_t3(x int, y int generated always as identity);\n+0 rows inserted/updated/deleted\n+ij(CONN2)> insert into d4419_t3(x) select * from d4419_t1 union select * from d4419_t2;\n+3 rows inserted/updated/deleted\n ij(CONN2)> "
            },
            {
                "sha": "1142b4f266f4af371ae03459ca3bf74b0ce18b0f",
                "filename": "java/testing/org/apache/derbyTesting/functionTests/tests/lang/autoincrement.sql",
                "status": "modified",
                "additions": 8,
                "deletions": 0,
                "changes": 8,
                "blob_url": "https://github.com/apache/derby/blob/6b8ccdd94378fb7211470195b273b41eea6197d9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/autoincrement.sql",
                "raw_url": "https://github.com/apache/derby/raw/6b8ccdd94378fb7211470195b273b41eea6197d9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/autoincrement.sql",
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/testing/org/apache/derbyTesting/functionTests/tests/lang/autoincrement.sql?ref=6b8ccdd94378fb7211470195b273b41eea6197d9",
                "patch": "@@ -1119,3 +1119,11 @@ alter table d4006_a alter column z default 99; -- should fail DERBY-4011\n alter table d4006_a alter column z default null; -- should fail DERBY-4011\n drop table d4006_a;\n \n+-- DERBY-4419 is a variant on DERBY-1644:\n+create table d4419_t1(x int);\n+insert into d4419_t1 values 1,2;\n+create table d4419_t2(x int);\n+insert into d4419_t2 values 2,3;\n+create table d4419_t3(x int, y int generated always as identity);\n+insert into d4419_t3(x) select * from d4419_t1 union select * from d4419_t2;\n+"
            }
        ]
    }
]
