[
    {
        "commit": "https://github.com/apache/mina-sshd/commit/141907415b3d0bb38c3b177d30bdcdef90983667",
        "repo": "mina-sshd",
        "parent": "https://github.com/apache/mina-sshd/commit/f68a8f513a6c3be6cde0af7d8ac46d18b251ab3a",
        "message": "Fix possible NPE when handling immediate KEX packet follow-up in case a peer proposal is not yet set",
        "bug_id": "mina-sshd_1",
        "file": [
            {
                "sha": "cc5c926704f508b9ea916961b8557bef95295130",
                "filename": "sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSession.java",
                "status": "modified",
                "additions": 8,
                "deletions": 3,
                "changes": 11,
                "blob_url": "https://github.com/apache/mina-sshd/blob/141907415b3d0bb38c3b177d30bdcdef90983667/sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSession.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/141907415b3d0bb38c3b177d30bdcdef90983667/sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSession.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSession.java?ref=141907415b3d0bb38c3b177d30bdcdef90983667",
                "patch": "@@ -488,10 +488,15 @@ protected boolean handleFirstKexPacketFollows(int cmd, Buffer buffer, boolean fo\n      */\n     protected SimpleImmutableEntry<String, String> comparePreferredKexProposalOption(KexProposalOption option) {\n         String[] clientPreferences = GenericUtils.split(clientProposal.get(option), ',');\n-        String clientValue = clientPreferences[0];\n+        String clientValue = GenericUtils.isEmpty(clientPreferences) ? null : clientPreferences[0];\n         String[] serverPreferences = GenericUtils.split(serverProposal.get(option), ',');\n-        String serverValue = serverPreferences[0];\n-        return Objects.equals(clientValue, serverValue) ? null : new SimpleImmutableEntry<>(clientValue, serverValue);\n+        String serverValue = GenericUtils.isEmpty(serverPreferences) ? null : serverPreferences[0];\n+        if (GenericUtils.isEmpty(clientValue) || GenericUtils.isEmpty(serverValue)\n+                || (!Objects.equals(clientValue, serverValue))) {\n+            return new SimpleImmutableEntry<>(clientValue, serverValue);\n+        }\n+\n+        return null;\n     }\n \n     /**"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/mina-sshd/commit/8ec4b9c36cd28e40cc81cf9f13f30706459295c9",
        "repo": "mina-sshd",
        "parent": "https://github.com/apache/mina-sshd/commit/29d77123269047ada7e317ff6f1c9da0592399b7",
        "message": "[SSHD-846] Nullify AbstractSession KEX instance before marking state as DONE to avoid race condition and possible NPE",
        "bug_id": "mina-sshd_2",
        "file": [
            {
                "sha": "ce4c3fe7f84c67ba164481895a6c2b88172df969",
                "filename": "sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSession.java",
                "status": "modified",
                "additions": 6,
                "deletions": 4,
                "changes": 10,
                "blob_url": "https://github.com/apache/mina-sshd/blob/8ec4b9c36cd28e40cc81cf9f13f30706459295c9/sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSession.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/8ec4b9c36cd28e40cc81cf9f13f30706459295c9/sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSession.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSession.java?ref=8ec4b9c36cd28e40cc81cf9f13f30706459295c9",
                "patch": "@@ -849,9 +849,11 @@ protected void handleKexInit(Buffer buffer) throws Exception {\n         Map<KexProposalOption, String> result = negotiate();\n         String kexAlgorithm = result.get(KexProposalOption.ALGORITHMS);\n         Collection<? extends NamedFactory<KeyExchange>> kexFactories = getKeyExchangeFactories();\n-        kex = ValidateUtils.checkNotNull(NamedFactory.create(kexFactories, kexAlgorithm),\n-                \"Unknown negotiated KEX algorithm: %s\",\n-                kexAlgorithm);\n+        synchronized (pendingPackets) {\n+            kex = ValidateUtils.checkNotNull(NamedFactory.create(kexFactories, kexAlgorithm),\n+                    \"Unknown negotiated KEX algorithm: %s\",\n+                    kexAlgorithm);\n+        }\n \n         byte[] v_s = serverVersion.getBytes(StandardCharsets.UTF_8);\n         byte[] v_c = clientVersion.getBytes(StandardCharsets.UTF_8);\n@@ -889,8 +891,8 @@ protected void handleNewKeys(int cmd, Buffer buffer) throws Exception {\n         Collection<? extends Map.Entry<? extends SshFutureListener<IoWriteFuture>, IoWriteFuture>> pendingWrites;\n         synchronized (pendingPackets) {\n             pendingWrites = sendPendingPackets(pendingPackets);\n-            kexState.set(KexState.DONE);\n             kex = null; // discard and GC since KEX is completed\n+            kexState.set(KexState.DONE);\n         }\n \n         int pendingCount = pendingWrites.size();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/mina-sshd/commit/a1cb02b41355c176693ead60c0bce80eb858eb5b",
        "repo": "mina-sshd",
        "parent": "https://github.com/apache/mina-sshd/commit/6ecd949a9d855feee2f1d2231b7c002d1df7f4cb",
        "message": "[SSHD-734] When ClientSessionImpl construction fails, AbstractSessionIoHandler#exceptionCaught may throw NPE",
        "bug_id": "mina-sshd_3",
        "file": [
            {
                "sha": "49ce76b009509efae282edb8e830e3bf04c7a813",
                "filename": "sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSession.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/mina-sshd/blob/a1cb02b41355c176693ead60c0bce80eb858eb5b/sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSession.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/a1cb02b41355c176693ead60c0bce80eb858eb5b/sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSession.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSession.java?ref=a1cb02b41355c176693ead60c0bce80eb858eb5b",
                "patch": "@@ -255,6 +255,8 @@ protected AbstractSession(boolean isServer, FactoryManager factoryManager, IoSes\n         this.ioSession = ioSession;\n         this.decoderBuffer = new SessionWorkBuffer(this);\n \n+        attachSession(ioSession, this);\n+\n         Factory<Random> factory = ValidateUtils.checkNotNull(factoryManager.getRandomFactory(), \"No random factory for %s\", ioSession);\n         random = ValidateUtils.checkNotNull(factory.create(), \"No randomizer instance for %s\", ioSession);\n "
            },
            {
                "sha": "1610030f4ff8b26acb50ebba707d72599ba63a96",
                "filename": "sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSessionIoHandler.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/mina-sshd/blob/a1cb02b41355c176693ead60c0bce80eb858eb5b/sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSessionIoHandler.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/a1cb02b41355c176693ead60c0bce80eb858eb5b/sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSessionIoHandler.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSessionIoHandler.java?ref=a1cb02b41355c176693ead60c0bce80eb858eb5b",
                "patch": "@@ -37,9 +37,8 @@ protected AbstractSessionIoHandler() {\n \n     @Override\n     public void sessionCreated(IoSession ioSession) throws Exception {\n-        AbstractSession session = ValidateUtils.checkNotNull(\n+        ValidateUtils.checkNotNull(\n                 createSession(ioSession), \"No session created for %s\", ioSession);\n-        AbstractSession.attachSession(ioSession, session);\n     }\n \n     @Override"
            },
            {
                "sha": "bff2420f0c977aec290bd397217283ecb12875e7",
                "filename": "sshd-core/src/test/java/org/apache/sshd/client/ClientDeadlockTest.java",
                "status": "added",
                "additions": 86,
                "deletions": 0,
                "changes": 86,
                "blob_url": "https://github.com/apache/mina-sshd/blob/a1cb02b41355c176693ead60c0bce80eb858eb5b/sshd-core/src/test/java/org/apache/sshd/client/ClientDeadlockTest.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/a1cb02b41355c176693ead60c0bce80eb858eb5b/sshd-core/src/test/java/org/apache/sshd/client/ClientDeadlockTest.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/test/java/org/apache/sshd/client/ClientDeadlockTest.java?ref=a1cb02b41355c176693ead60c0bce80eb858eb5b",
                "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.sshd.client;\n+\n+import java.io.IOException;\n+import java.util.EnumSet;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.sshd.client.future.ConnectFuture;\n+import org.apache.sshd.client.session.ClientSession;\n+import org.apache.sshd.common.io.IoSession;\n+import org.apache.sshd.server.SshServer;\n+import org.apache.sshd.server.session.ServerSessionImpl;\n+import org.apache.sshd.server.session.SessionFactory;\n+import org.apache.sshd.util.test.BaseTestSupport;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * TODO Add javadoc\n+ *\n+ * @author <a href=\"mailto:dev@mina.apache.org\">Apache MINA SSHD Project</a>\n+ */\n+public class ClientDeadlockTest extends BaseTestSupport {\n+\n+    private SshServer sshd;\n+    private SshClient client;\n+    private int port;\n+\n+    public ClientDeadlockTest() {\n+        super();\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        sshd = setupTestServer();\n+        sshd.setSessionFactory(new SessionFactory(sshd) {\n+            @Override\n+            protected ServerSessionImpl doCreateSession(IoSession ioSession) throws Exception {\n+                throw new IOException(\"Closing\");\n+            }\n+        });\n+        sshd.start();\n+        port = sshd.getPort();\n+\n+        client = setupTestClient();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (sshd != null) {\n+            sshd.stop(true);\n+        }\n+        if (client != null) {\n+            client.stop();\n+        }\n+    }\n+\n+    @Test\n+    public void testSimpleClient() throws Exception {\n+        client.start();\n+\n+        ConnectFuture future = client.connect(getCurrentTestName(), TEST_LOCALHOST, port);\n+        ClientSession session = future.verify(5, TimeUnit.SECONDS).getSession();\n+        session.waitFor(EnumSet.of(ClientSession.ClientSessionEvent.CLOSED), TimeUnit.SECONDS.toMillis(3L));\n+        assertTrue(session.isClosed());\n+    }\n+\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/mina-sshd/commit/46f0cb61a83ef17112a796759c0386b4ee00073a",
        "repo": "mina-sshd",
        "parent": "https://github.com/apache/mina-sshd/commit/ea46a25d2817c1e68cf65e5d1b6e6bd82fd8b820",
        "message": "Fix NPE",
        "bug_id": "mina-sshd_4",
        "file": [
            {
                "sha": "85324e229ee07a0d9bedeaa2ca6d8f5a70f12748",
                "filename": "sshd-core/src/main/java/org/apache/sshd/client/subsystem/sftp/SftpFileSystemProvider.java",
                "status": "modified",
                "additions": 2,
                "deletions": 3,
                "changes": 5,
                "blob_url": "https://github.com/apache/mina-sshd/blob/46f0cb61a83ef17112a796759c0386b4ee00073a/sshd-core/src/main/java/org/apache/sshd/client/subsystem/sftp/SftpFileSystemProvider.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/46f0cb61a83ef17112a796759c0386b4ee00073a/sshd-core/src/main/java/org/apache/sshd/client/subsystem/sftp/SftpFileSystemProvider.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/client/subsystem/sftp/SftpFileSystemProvider.java?ref=46f0cb61a83ef17112a796759c0386b4ee00073a",
                "patch": "@@ -318,11 +318,10 @@ public FileChannel newFileChannel(Path path, Set<? extends OpenOption> options,\n             @Override\n             public Iterator<Path> iterator() {\n                 return new Iterator<Path>() {\n-                    private boolean dotIgnored, dotdotIgnored;\n-                    private SftpClient.DirEntry curEntry = nextEntry();\n-\n                     @SuppressWarnings(\"synthetic-access\")\n                     private final Iterator<SftpClient.DirEntry> it = iter.iterator();\n+                    private boolean dotIgnored, dotdotIgnored;\n+                    private SftpClient.DirEntry curEntry = nextEntry();\n \n                     @Override\n                     public boolean hasNext() {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/mina-sshd/commit/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d",
        "repo": "mina-sshd",
        "parent": "https://github.com/apache/mina-sshd/commit/b0b8d34664618d561187996639299eed04867ebf",
        "message": "[SSHD-570] NPE while executing a command while redirecting",
        "bug_id": "mina-sshd_5",
        "file": [
            {
                "sha": "5f167df5082cdbde9294068b4df6cd077f18c52e",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/shell/InvertedShellWrapper.java",
                "status": "modified",
                "additions": 60,
                "deletions": 25,
                "changes": 85,
                "blob_url": "https://github.com/apache/mina-sshd/blob/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/main/java/org/apache/sshd/server/shell/InvertedShellWrapper.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/main/java/org/apache/sshd/server/shell/InvertedShellWrapper.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/shell/InvertedShellWrapper.java?ref=2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d",
                "patch": "@@ -24,6 +24,10 @@\n import java.util.concurrent.Executor;\n import java.util.concurrent.ExecutorService;\n \n+import org.apache.sshd.common.PropertyResolverUtils;\n+import org.apache.sshd.common.util.ValidateUtils;\n+import org.apache.sshd.common.util.io.IoUtils;\n+import org.apache.sshd.common.util.logging.AbstractLoggingBean;\n import org.apache.sshd.common.util.threads.ThreadUtils;\n import org.apache.sshd.server.Command;\n import org.apache.sshd.server.Environment;\n@@ -40,12 +44,24 @@\n  *\n  * @author <a href=\"mailto:dev@mina.apache.org\">Apache MINA SSHD Project</a>\n  */\n-public class InvertedShellWrapper implements Command, SessionAware {\n+public class InvertedShellWrapper extends AbstractLoggingBean implements Command, SessionAware {\n \n     /**\n-     * default buffer size for the IO pumps.\n+     * Default buffer size for the IO pumps.\n      */\n-    public static final int DEFAULT_BUFFER_SIZE = 8192;\n+    public static final int DEFAULT_BUFFER_SIZE = IoUtils.DEFAULT_COPY_SIZE;\n+\n+    /**\n+     * Value used to control the &quot;busy-wait&quot; sleep time (millis) on\n+     * the pumping loop if nothing was pumped - must be <U>positive</U>\n+     * @see #DEFAULT_PUMP_SLEEP_TIME\n+     */\n+    public static final String PUMP_SLEEP_TIME = \"inverted-shell-wrapper-pump-sleep\";\n+\n+    /**\n+     * Default value for {@link #PUMP_SLEEP_TIME} if none set\n+     */\n+    public static final long DEFAULT_PUMP_SLEEP_TIME = 1L;\n \n     private final InvertedShell shell;\n     private final Executor executor;\n@@ -58,31 +74,44 @@\n     private InputStream shellErr;\n     private ExitCallback callback;\n     private boolean shutdownExecutor;\n+    private long pumpSleepTime = DEFAULT_PUMP_SLEEP_TIME;\n \n+    /**\n+     * Auto-allocates an {@link Executor} in order to create the streams pump thread\n+     * and uses the {@link #DEFAULT_BUFFER_SIZE}\n+     *\n+     * @param shell The {@link InvertedShell}\n+     * @see #InvertedShellWrapper(InvertedShell, int)\n+     */\n     public InvertedShellWrapper(InvertedShell shell) {\n         this(shell, DEFAULT_BUFFER_SIZE);\n     }\n \n-    public InvertedShellWrapper(InvertedShell shell, Executor executor) {\n-        this(shell, executor, DEFAULT_BUFFER_SIZE);\n-    }\n-\n+    /**\n+     * Auto-allocates an {@link Executor} in order to create the streams pump thread\n+     *\n+     * @param shell      The {@link InvertedShell}\n+     * @param bufferSize Buffer size to use - must be above min. size ({@link Byte#SIZE})\n+     * @see #InvertedShellWrapper(InvertedShell, Executor, boolean, int)\n+     */\n     public InvertedShellWrapper(InvertedShell shell, int bufferSize) {\n-        this(shell,\n-                ThreadUtils.newSingleThreadExecutor(\"shell[\" + Integer.toHexString(shell.hashCode()) + \"]\"),\n-                true,\n-                bufferSize);\n-    }\n-\n-    public InvertedShellWrapper(InvertedShell shell, Executor executor, int bufferSize) {\n-        this(shell, executor, false, bufferSize);\n+        this(shell, null, true, bufferSize);\n     }\n \n+    /**\n+     * @param shell            The {@link InvertedShell}\n+     * @param executor         The {@link Executor} to use in order to create the streams pump thread.\n+     *                         If {@code null} one is auto-allocated and shutdown when wrapper is {@link #destroy()}-ed.\n+     * @param shutdownExecutor If {@code true} the executor is shut down when shell wrapper is {@link #destroy()}-ed.\n+     *                         Ignored if executor service auto-allocated\n+     * @param bufferSize       Buffer size to use - must be above min. size ({@link Byte#SIZE})\n+     */\n     public InvertedShellWrapper(InvertedShell shell, Executor executor, boolean shutdownExecutor, int bufferSize) {\n-        this.shell = shell;\n-        this.executor = executor;\n+        this.shell = ValidateUtils.checkNotNull(shell, \"No shell\");\n+        this.executor = (executor == null) ? ThreadUtils.newSingleThreadExecutor(\"shell[0x\" + Integer.toHexString(shell.hashCode()) + \"]\") : executor;\n+        ValidateUtils.checkTrue(bufferSize > Byte.SIZE, \"Copy buffer size too small: %d\", bufferSize);\n         this.bufferSize = bufferSize;\n-        this.shutdownExecutor = shutdownExecutor;\n+        this.shutdownExecutor = (executor == null) ? true : shutdownExecutor;\n     }\n \n     @Override\n@@ -107,6 +136,9 @@ public void setExitCallback(ExitCallback callback) {\n \n     @Override\n     public void setSession(ServerSession session) {\n+        pumpSleepTime = PropertyResolverUtils.getLongProperty(session, PUMP_SLEEP_TIME, DEFAULT_PUMP_SLEEP_TIME);\n+        ValidateUtils.checkTrue(pumpSleepTime > 0L, \"Invalid \" + PUMP_SLEEP_TIME + \": %d\", pumpSleepTime);\n+\n         if (shell instanceof SessionAware) {\n             ((SessionAware) shell).setSession(session);\n         }\n@@ -130,7 +162,7 @@ public void run() {\n     @Override\n     public synchronized void destroy() {\n         shell.destroy();\n-        if (shutdownExecutor && executor instanceof ExecutorService) {\n+        if (shutdownExecutor && (executor instanceof ExecutorService)) {\n             ((ExecutorService) executor).shutdown();\n         }\n     }\n@@ -140,8 +172,7 @@ protected void pumpStreams() {\n             // Use a single thread to correctly sequence the output and error streams.\n             // If any bytes are available from the output stream, send them first, then\n             // check the error stream, or wait until more data is available.\n-            byte[] buffer = new byte[bufferSize];\n-            for (;;) {\n+            for (byte[] buffer = new byte[bufferSize];;) {\n                 if (pumpStream(in, shellIn, buffer)) {\n                     continue;\n                 }\n@@ -158,15 +189,20 @@ protected void pumpStreams() {\n                 // Sleep a bit.  This is not very good, as it consumes CPU, but the\n                 // input streams are not selectable for nio, and any other blocking\n                 // method would consume at least two threads\n-                Thread.sleep(1);\n+                Thread.sleep(pumpSleepTime);\n             }\n         } catch (Exception e) {\n             shell.destroy();\n-            callback.onExit(shell.exitValue());\n+\n+            int exitValue = shell.exitValue();\n+            if (log.isDebugEnabled()) {\n+                log.debug(e.getClass().getSimpleName() + \" while pumping the streams (exit=\" + exitValue + \"): \" + e.getMessage(), e);\n+            }\n+            callback.onExit(exitValue, e.getClass().getSimpleName());\n         }\n     }\n \n-    private boolean pumpStream(InputStream in, OutputStream out, byte[] buffer) throws IOException {\n+    protected boolean pumpStream(InputStream in, OutputStream out, byte[] buffer) throws IOException {\n         int available = in.available();\n         if (available > 0) {\n             int len = in.read(buffer);\n@@ -180,5 +216,4 @@ private boolean pumpStream(InputStream in, OutputStream out, byte[] buffer) thro\n         }\n         return false;\n     }\n-\n }"
            },
            {
                "sha": "1fa9b6f7ea84007dbb60f276f4509327f7a05d5b",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/shell/ProcessShell.java",
                "status": "added",
                "additions": 143,
                "deletions": 0,
                "changes": 143,
                "blob_url": "https://github.com/apache/mina-sshd/blob/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/main/java/org/apache/sshd/server/shell/ProcessShell.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/main/java/org/apache/sshd/server/shell/ProcessShell.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/shell/ProcessShell.java?ref=2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d",
                "patch": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.sshd.server.shell;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.sshd.common.util.GenericUtils;\n+import org.apache.sshd.common.util.ValidateUtils;\n+import org.apache.sshd.common.util.io.IoUtils;\n+import org.apache.sshd.common.util.logging.AbstractLoggingBean;\n+\n+/**\n+ * Bridges the I/O streams between the SSH command and the process that executes it\n+ *\n+ * @author <a href=\"mailto:dev@mina.apache.org\">Apache MINA SSHD Project</a>\n+ */\n+public class ProcessShell extends AbstractLoggingBean implements InvertedShell {\n+    private final Set<TtyOptions> ttyOptions;\n+    private final String[] command;\n+    private String cmdValue;\n+    private Process process;\n+    private TtyFilterOutputStream in;\n+    private TtyFilterInputStream out;\n+    private TtyFilterInputStream err;\n+\n+    public ProcessShell(Collection<TtyOptions> ttyOptions, String ... command) {\n+        // we create a copy of the options so as to avoid concurrent modifications\n+        this.ttyOptions = GenericUtils.of(ttyOptions);\n+        // we clone the original array so as not to change it\n+        this.command = ValidateUtils.checkNotNullAndNotEmpty(command, \"No process shell command(s)\").clone();\n+        this.cmdValue = GenericUtils.join(command, ' ');\n+    }\n+\n+    @Override\n+    public void start(Map<String, String> env) throws IOException {\n+        for (int i = 0; i < command.length; i++) {\n+            String cmd = command[i];\n+            if (\"$USER\".equals(cmd)) {\n+                cmd = env.get(\"USER\");\n+                command[i] = cmd;\n+                cmdValue = GenericUtils.join(command, ' ');\n+            }\n+        }\n+\n+        ProcessBuilder builder = new ProcessBuilder(command);\n+        if (GenericUtils.size(env) > 0) {\n+            try {\n+                Map<String, String> procEnv = builder.environment();\n+                procEnv.putAll(env);\n+            } catch (Exception e) {\n+                log.warn(\"Could not set environment for command=\" + cmdValue, e);\n+            }\n+        }\n+\n+        log.info(\"Starting shell with command: '{}' and env: {}\", builder.command(), builder.environment());\n+        process = builder.start();\n+        out = new TtyFilterInputStream(process.getInputStream(), ttyOptions);\n+        err = new TtyFilterInputStream(process.getErrorStream(), ttyOptions);\n+        in = new TtyFilterOutputStream(process.getOutputStream(), err, ttyOptions);\n+    }\n+\n+    @Override\n+    public OutputStream getInputStream() {\n+        return in;\n+    }\n+\n+    @Override\n+    public InputStream getOutputStream() {\n+        return out;\n+    }\n+\n+    @Override\n+    public InputStream getErrorStream() {\n+        return err;\n+    }\n+\n+    @Override\n+    public boolean isAlive() {\n+        // TODO in JDK-8 call process.isAlive()\n+        try {\n+            process.exitValue();\n+            return false;\n+        } catch (IllegalThreadStateException e) {\n+            return true;\n+        }\n+    }\n+\n+    @Override\n+    public int exitValue() {\n+        // TODO in JDK-8 call process.isAlive()\n+        if (isAlive()) {\n+            try {\n+                return process.waitFor();\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        } else {\n+            return process.exitValue();\n+        }\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        // NOTE !!! DO NOT NULL-IFY THE PROCESS SINCE \"exitValue\" is called subsequently\n+        if (process != null) {\n+            log.debug(\"Destroy process for \" + cmdValue);\n+            process.destroy();\n+        }\n+\n+        IOException e = IoUtils.closeQuietly(getInputStream(), getOutputStream(), getErrorStream());\n+        if (e != null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(e.getClass().getSimpleName() + \" while destroy streams of '\" + cmdValue + \"': \" + e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return GenericUtils.isEmpty(cmdValue) ? super.toString() : cmdValue;\n+    }\n+}\n\\ No newline at end of file"
            },
            {
                "sha": "b29c46bcc89e557ff9e52d385de07af7a621c06a",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/shell/ProcessShellFactory.java",
                "status": "modified",
                "additions": 4,
                "deletions": 214,
                "changes": 218,
                "blob_url": "https://github.com/apache/mina-sshd/blob/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/main/java/org/apache/sshd/server/shell/ProcessShellFactory.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/main/java/org/apache/sshd/server/shell/ProcessShellFactory.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/shell/ProcessShellFactory.java?ref=2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d",
                "patch": "@@ -18,22 +18,10 @@\n  */\n package org.apache.sshd.server.shell;\n \n-import java.io.FilterInputStream;\n-import java.io.FilterOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.EnumSet;\n-import java.util.Map;\n import java.util.Set;\n-\n import org.apache.sshd.common.Factory;\n import org.apache.sshd.common.util.GenericUtils;\n-import org.apache.sshd.common.util.OsUtils;\n-import org.apache.sshd.common.util.buffer.Buffer;\n-import org.apache.sshd.common.util.buffer.ByteArrayBuffer;\n import org.apache.sshd.common.util.logging.AbstractLoggingBean;\n import org.apache.sshd.server.Command;\n \n@@ -44,33 +32,6 @@\n  * @author <a href=\"mailto:dev@mina.apache.org\">Apache MINA SSHD Project</a>\n  */\n public class ProcessShellFactory extends AbstractLoggingBean implements Factory<Command> {\n-\n-    public enum TtyOptions {\n-        Echo,\n-        INlCr,\n-        ICrNl,\n-        ONlCr,\n-        OCrNl;\n-\n-        public static final Set<TtyOptions> LINUX_OPTIONS =\n-                Collections.unmodifiableSet(EnumSet.of(TtyOptions.ONlCr));\n-\n-        public static final Set<TtyOptions> WINDOWS_OPTIONS =\n-                Collections.unmodifiableSet(EnumSet.of(TtyOptions.Echo, TtyOptions.ICrNl, TtyOptions.ONlCr));\n-\n-        public static Set<TtyOptions> resolveDefaultTtyOptions() {\n-            return resolveTtyOptions(OsUtils.isWin32());\n-        }\n-\n-        public static Set<TtyOptions> resolveTtyOptions(boolean isWin32) {\n-            if (isWin32) {\n-                return WINDOWS_OPTIONS;\n-            } else {\n-                return LINUX_OPTIONS;\n-            }\n-        }\n-    }\n-\n     private String[] command;\n     private final Set<TtyOptions> ttyOptions;\n \n@@ -84,7 +45,7 @@ public ProcessShellFactory(String[] command) {\n \n     public ProcessShellFactory(String[] command, Collection<TtyOptions> ttyOptions) {\n         this.command = command;\n-        this.ttyOptions = GenericUtils.isEmpty(ttyOptions) ? Collections.<TtyOptions>emptySet() : GenericUtils.of(ttyOptions);\n+        this.ttyOptions = GenericUtils.of(ttyOptions);\n     }\n \n     public String[] getCommand() {\n@@ -97,181 +58,10 @@ public void setCommand(String[] command) {\n \n     @Override\n     public Command create() {\n-        return new InvertedShellWrapper(new ProcessShell());\n+        return new InvertedShellWrapper(createInvertedShell());\n     }\n \n-    public class ProcessShell implements InvertedShell {\n-\n-        private Process process;\n-        private TtyFilterOutputStream in;\n-        private TtyFilterInputStream out;\n-        private TtyFilterInputStream err;\n-\n-        public ProcessShell() {\n-            super();\n-        }\n-\n-        @SuppressWarnings(\"synthetic-access\")\n-        @Override\n-        public void start(Map<String, String> env) throws IOException {\n-            String[] cmds = new String[command.length];\n-            for (int i = 0; i < cmds.length; i++) {\n-                if (\"$USER\".equals(command[i])) {\n-                    cmds[i] = env.get(\"USER\");\n-                } else {\n-                    cmds[i] = command[i];\n-                }\n-            }\n-            ProcessBuilder builder = new ProcessBuilder(cmds);\n-            if (GenericUtils.size(env) > 0) {\n-                try {\n-                    Map<String, String> procEnv = builder.environment();\n-                    procEnv.putAll(env);\n-                } catch (Exception e) {\n-                    log.warn(\"Could not set environment for command=\" + GenericUtils.join(cmds, ' '), e);\n-                }\n-            }\n-\n-            log.info(\"Starting shell with command: '{}' and env: {}\", builder.command(), builder.environment());\n-            process = builder.start();\n-            out = new TtyFilterInputStream(process.getInputStream());\n-            err = new TtyFilterInputStream(process.getErrorStream());\n-            in = new TtyFilterOutputStream(process.getOutputStream(), err);\n-        }\n-\n-        @Override\n-        public OutputStream getInputStream() {\n-            return in;\n-        }\n-\n-        @Override\n-        public InputStream getOutputStream() {\n-            return out;\n-        }\n-\n-        @Override\n-        public InputStream getErrorStream() {\n-            return err;\n-        }\n-\n-        @Override\n-        public boolean isAlive() {\n-            try {\n-                process.exitValue();\n-                return false;\n-            } catch (IllegalThreadStateException e) {\n-                return true;\n-            }\n-        }\n-\n-        @Override\n-        public int exitValue() {\n-            try {\n-                return process.waitFor();\n-            } catch (InterruptedException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n-        @Override\n-        public void destroy() {\n-            if (process != null) {\n-                try {\n-                    process.destroy();\n-                } finally {\n-                    process = null;\n-                }\n-            }\n-        }\n-\n-        protected class TtyFilterInputStream extends FilterInputStream {\n-            private Buffer buffer;\n-            private int lastChar;\n-\n-            public TtyFilterInputStream(InputStream in) {\n-                super(in);\n-                buffer = new ByteArrayBuffer(32);\n-            }\n-\n-            synchronized void write(int c) {\n-                buffer.putByte((byte) c);\n-            }\n-\n-            synchronized void write(byte[] buf, int off, int len) {\n-                buffer.putBytes(buf, off, len);\n-            }\n-\n-            @Override\n-            public int available() throws IOException {\n-                return super.available() + buffer.available();\n-            }\n-\n-            @SuppressWarnings(\"synthetic-access\")\n-            @Override\n-            public synchronized int read() throws IOException {\n-                int c;\n-                if (buffer.available() > 0) {\n-                    c = buffer.getByte();\n-                    buffer.compact();\n-                } else {\n-                    c = super.read();\n-                }\n-                if (c == '\\n' && ttyOptions.contains(TtyOptions.ONlCr) && lastChar != '\\r') {\n-                    c = '\\r';\n-                    Buffer buf = new ByteArrayBuffer();\n-                    buf.putByte((byte) '\\n');\n-                    buf.putBuffer(buffer);\n-                    buffer = buf;\n-                } else if (c == '\\r' && ttyOptions.contains(TtyOptions.OCrNl)) {\n-                    c = '\\n';\n-                }\n-                lastChar = c;\n-                return c;\n-            }\n-\n-            @Override\n-            public synchronized int read(byte[] b, int off, int len) throws IOException {\n-                if (buffer.available() == 0) {\n-                    int nb = super.read(b, off, len);\n-                    buffer.putRawBytes(b, off, nb);\n-                }\n-                int nb = 0;\n-                while (nb < len && buffer.available() > 0) {\n-                    b[off + nb++] = (byte) read();\n-                }\n-                return nb;\n-            }\n-        }\n-\n-        protected class TtyFilterOutputStream extends FilterOutputStream {\n-            private TtyFilterInputStream echo;\n-\n-            public TtyFilterOutputStream(OutputStream out, TtyFilterInputStream echo) {\n-                super(out);\n-                this.echo = echo;\n-            }\n-\n-            @SuppressWarnings(\"synthetic-access\")\n-            @Override\n-            public void write(int c) throws IOException {\n-                if (c == '\\n' && ttyOptions.contains(TtyOptions.INlCr)) {\n-                    c = '\\r';\n-                } else if (c == '\\r' && ttyOptions.contains(TtyOptions.ICrNl)) {\n-                    c = '\\n';\n-                }\n-                super.write(c);\n-                if (ttyOptions.contains(TtyOptions.Echo)) {\n-                    echo.write(c);\n-                }\n-            }\n-\n-            @Override\n-            public void write(byte[] b, int off, int len) throws IOException {\n-                for (int i = off; i < len; i++) {\n-                    write(b[i]);\n-                }\n-            }\n-        }\n+    protected InvertedShell createInvertedShell() {\n+        return new ProcessShell(ttyOptions, getCommand());\n     }\n-\n }"
            },
            {
                "sha": "fd5ffcbacb04dfb914a6d9f13f9469f1ec014088",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/shell/TtyFilterInputStream.java",
                "status": "added",
                "additions": 97,
                "deletions": 0,
                "changes": 97,
                "blob_url": "https://github.com/apache/mina-sshd/blob/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/main/java/org/apache/sshd/server/shell/TtyFilterInputStream.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/main/java/org/apache/sshd/server/shell/TtyFilterInputStream.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/shell/TtyFilterInputStream.java?ref=2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d",
                "patch": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.sshd.server.shell;\n+\n+import java.io.FilterInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.Set;\n+\n+import org.apache.sshd.common.util.GenericUtils;\n+import org.apache.sshd.common.util.buffer.Buffer;\n+import org.apache.sshd.common.util.buffer.ByteArrayBuffer;\n+\n+/**\n+ * Handles the input while taking into account the {@link TtyOptions} for\n+ * handling CR / LF\n+ *\n+ * @author <a href=\"mailto:dev@mina.apache.org\">Apache MINA SSHD Project</a>\n+ */\n+public class TtyFilterInputStream extends FilterInputStream {\n+    private final Set<TtyOptions> ttyOptions;\n+    private Buffer buffer;\n+    private int lastChar;\n+\n+    public TtyFilterInputStream(InputStream in, Collection<TtyOptions> ttyOptions) {\n+        super(in);\n+        // we create a copy of the options so as to avoid concurrent modifications\n+        this.ttyOptions = GenericUtils.of(ttyOptions);\n+        this.buffer = new ByteArrayBuffer(32);\n+    }\n+\n+    public synchronized void write(int c) {\n+        buffer.putByte((byte) c);\n+    }\n+\n+    public synchronized void write(byte[] buf, int off, int len) {\n+        buffer.putBytes(buf, off, len);\n+    }\n+\n+    @Override\n+    public int available() throws IOException {\n+        return super.available() + buffer.available();\n+    }\n+\n+    @Override\n+    public synchronized int read() throws IOException {\n+        int c;\n+        if (buffer.available() > 0) {\n+            c = buffer.getByte();\n+            buffer.compact();\n+        } else {\n+            c = super.read();\n+        }\n+\n+        if ((c == '\\n') && ttyOptions.contains(TtyOptions.ONlCr) && (lastChar != '\\r')) {\n+            c = '\\r';\n+            Buffer buf = new ByteArrayBuffer();\n+            buf.putByte((byte) '\\n');\n+            buf.putBuffer(buffer);\n+            buffer = buf;\n+        } else if ((c == '\\r') && ttyOptions.contains(TtyOptions.OCrNl)) {\n+            c = '\\n';\n+        }\n+        lastChar = c;\n+        return c;\n+    }\n+\n+    @Override\n+    public synchronized int read(byte[] b, int off, int len) throws IOException {\n+        if (buffer.available() == 0) {\n+            int nb = super.read(b, off, len);\n+            buffer.putRawBytes(b, off, nb);\n+        }\n+        int nb = 0;\n+        while ((nb < len) && (buffer.available() > 0)) {\n+            b[off + nb++] = (byte) read();\n+        }\n+        return nb;\n+    }\n+}\n\\ No newline at end of file"
            },
            {
                "sha": "6461ef07652be29005018da09a1ad6cdaabd85bc",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/shell/TtyFilterOutputStream.java",
                "status": "added",
                "additions": 66,
                "deletions": 0,
                "changes": 66,
                "blob_url": "https://github.com/apache/mina-sshd/blob/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/main/java/org/apache/sshd/server/shell/TtyFilterOutputStream.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/main/java/org/apache/sshd/server/shell/TtyFilterOutputStream.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/shell/TtyFilterOutputStream.java?ref=2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d",
                "patch": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.sshd.server.shell;\n+\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Collection;\n+import java.util.Set;\n+\n+import org.apache.sshd.common.util.GenericUtils;\n+import org.apache.sshd.common.util.ValidateUtils;\n+\n+/**\n+ * Handles the output stream while taking care of the {@link TtyOptions} for CR / LF\n+ * and ECHO settings\n+ *\n+ * @author <a href=\"mailto:dev@mina.apache.org\">Apache MINA SSHD Project</a>\n+ */\n+public class TtyFilterOutputStream extends FilterOutputStream {\n+    private final Set<TtyOptions> ttyOptions;\n+    private TtyFilterInputStream echo;\n+\n+    public TtyFilterOutputStream(OutputStream out, TtyFilterInputStream echo, Collection<TtyOptions> ttyOptions) {\n+        super(out);\n+        // we create a copy of the options so as to avoid concurrent modifications\n+        this.ttyOptions = GenericUtils.of(ttyOptions);\n+        this.echo = this.ttyOptions.contains(TtyOptions.Echo) ? ValidateUtils.checkNotNull(echo, \"No echo stream\") : echo;\n+    }\n+\n+    @Override\n+    public void write(int c) throws IOException {\n+        if ((c == '\\n') && ttyOptions.contains(TtyOptions.INlCr)) {\n+            c = '\\r';\n+        } else if ((c == '\\r') && ttyOptions.contains(TtyOptions.ICrNl)) {\n+            c = '\\n';\n+        }\n+        super.write(c);\n+        if (ttyOptions.contains(TtyOptions.Echo)) {\n+            echo.write(c);\n+        }\n+    }\n+\n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+        for (int i = off; i < len; i++) {\n+            write(b[i]);\n+        }\n+    }\n+}\n\\ No newline at end of file"
            },
            {
                "sha": "0334631cb841e7ce3386d8a3bfc2cd0965aab627",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/shell/TtyOptions.java",
                "status": "added",
                "additions": 55,
                "deletions": 0,
                "changes": 55,
                "blob_url": "https://github.com/apache/mina-sshd/blob/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/main/java/org/apache/sshd/server/shell/TtyOptions.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/main/java/org/apache/sshd/server/shell/TtyOptions.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/shell/TtyOptions.java?ref=2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d",
                "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.sshd.server.shell;\n+\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import org.apache.sshd.common.util.OsUtils;\n+\n+/**\n+ * Options controlling the I/O streams behavior\n+ * @author <a href=\"mailto:dev@mina.apache.org\">Apache MINA SSHD Project</a>\n+ */\n+public enum TtyOptions {\n+    Echo,\n+    INlCr,\n+    ICrNl,\n+    ONlCr,\n+    OCrNl;\n+\n+    public static final Set<TtyOptions> LINUX_OPTIONS =\n+            Collections.unmodifiableSet(EnumSet.of(TtyOptions.ONlCr));\n+\n+    public static final Set<TtyOptions> WINDOWS_OPTIONS =\n+            Collections.unmodifiableSet(EnumSet.of(TtyOptions.Echo, TtyOptions.ICrNl, TtyOptions.ONlCr));\n+\n+    public static Set<TtyOptions> resolveDefaultTtyOptions() {\n+        return resolveTtyOptions(OsUtils.isWin32());\n+    }\n+\n+    public static Set<TtyOptions> resolveTtyOptions(boolean isWin32) {\n+        if (isWin32) {\n+            return WINDOWS_OPTIONS;\n+        } else {\n+            return LINUX_OPTIONS;\n+        }\n+    }\n+}\n\\ No newline at end of file"
            },
            {
                "sha": "53955da7d5495c227ea51ae01c4bd627f9d9330f",
                "filename": "sshd-core/src/test/java/org/apache/sshd/server/shell/InvertedShellWrapperTest.java",
                "status": "modified",
                "additions": 113,
                "deletions": 12,
                "changes": 125,
                "blob_url": "https://github.com/apache/mina-sshd/blob/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/test/java/org/apache/sshd/server/shell/InvertedShellWrapperTest.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/test/java/org/apache/sshd/server/shell/InvertedShellWrapperTest.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/test/java/org/apache/sshd/server/shell/InvertedShellWrapperTest.java?ref=2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d",
                "patch": "@@ -20,7 +20,12 @@\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n \n import org.apache.sshd.util.test.BaseTestSupport;\n import org.apache.sshd.util.test.BogusEnvironment;\n@@ -32,28 +37,124 @@\n \n @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n public class InvertedShellWrapperTest extends BaseTestSupport {\n+    public InvertedShellWrapperTest() {\n+        super();\n+    }\n \n     @Test\n     public void testStreamsAreFlushedBeforeClosing() throws Exception {\n         BogusInvertedShell shell = newShell(\"out\", \"err\");\n         shell.setAlive(false);\n+\n         try (ByteArrayInputStream in = new ByteArrayInputStream(\"in\".getBytes(StandardCharsets.UTF_8));\n              ByteArrayOutputStream out = new ByteArrayOutputStream(50);\n              ByteArrayOutputStream err = new ByteArrayOutputStream()) {\n \n             InvertedShellWrapper wrapper = new InvertedShellWrapper(shell);\n-            wrapper.setInputStream(in);\n-            wrapper.setOutputStream(out);\n-            wrapper.setErrorStream(err);\n-            wrapper.setExitCallback(new BogusExitCallback());\n-            wrapper.start(new BogusEnvironment());\n-\n-            wrapper.pumpStreams();\n-\n-            // check the streams were flushed before exiting\n-            assertEquals(\"in\", shell.getInputStream().toString());\n-            assertEquals(\"out\", out.toString());\n-            assertEquals(\"err\", err.toString());\n+            try {\n+                wrapper.setInputStream(in);\n+                wrapper.setOutputStream(out);\n+                wrapper.setErrorStream(err);\n+                wrapper.setExitCallback(new BogusExitCallback());\n+                wrapper.start(new BogusEnvironment());\n+\n+                wrapper.pumpStreams();\n+\n+                // check the streams were flushed before exiting\n+                assertEquals(\"stdin\", \"in\", shell.getInputStream().toString());\n+                assertEquals(\"stdout\", \"out\", out.toString());\n+                assertEquals(\"stderr\", \"err\", err.toString());\n+            } finally {\n+                wrapper.destroy();\n+            }\n+        }\n+    }\n+\n+    @Test   // see SSHD-570\n+    public void testExceptionWhilePumpStreams() throws Exception {\n+        final BogusInvertedShell bogusShell = newShell(\"out\", \"err\");\n+        bogusShell.setAlive(false);\n+\n+        final int DESTROYED_EXIT_VALUE = 7365;\n+        InvertedShell shell = new InvertedShell() {\n+            private boolean destroyed;\n+\n+            @Override\n+            public void start(Map<String, String> env) throws IOException {\n+                bogusShell.start(env);\n+            }\n+\n+            @Override\n+            public boolean isAlive() {\n+                return bogusShell.isAlive();\n+            }\n+\n+            @Override\n+            public InputStream getOutputStream() {\n+                return bogusShell.getOutputStream();\n+            }\n+\n+            @Override\n+            public OutputStream getInputStream() {\n+                return bogusShell.getInputStream();\n+            }\n+\n+            @Override\n+            public InputStream getErrorStream() {\n+                return bogusShell.getErrorStream();\n+            }\n+\n+            @Override\n+            public int exitValue() {\n+                return destroyed ? DESTROYED_EXIT_VALUE : bogusShell.exitValue();\n+            }\n+\n+            @Override\n+            public void destroy() {\n+                bogusShell.destroy();\n+                bogusShell.setAlive(false);\n+                destroyed = true;\n+            }\n+        };\n+\n+        try (ByteArrayOutputStream out = new ByteArrayOutputStream();\n+             ByteArrayOutputStream err = new ByteArrayOutputStream();\n+             InputStream stdin = new InputStream() {\n+                private final byte[] data = getCurrentTestName().getBytes(StandardCharsets.UTF_8);\n+                private int readPos;\n+\n+                @Override\n+                public int read() throws IOException {\n+                    if (readPos >= data.length) {\n+                        throw new EOFException(\"Data exhausted\");\n+                    }\n+\n+                    return data[readPos++];\n+                }\n+\n+                @Override\n+                public int available() throws IOException {\n+                    return data.length;\n+                }\n+             }) {\n+\n+            BogusExitCallback exitCallback = new BogusExitCallback();\n+            InvertedShellWrapper wrapper = new InvertedShellWrapper(shell);\n+            try {\n+                wrapper.setInputStream(stdin);\n+                wrapper.setOutputStream(out);\n+                wrapper.setErrorStream(err);\n+\n+                wrapper.setExitCallback(exitCallback);\n+                wrapper.start(new BogusEnvironment());\n+\n+                wrapper.pumpStreams();\n+            } finally {\n+                wrapper.destroy();\n+            }\n+\n+            assertEquals(\"Mismatched exit value\", DESTROYED_EXIT_VALUE, exitCallback.getExitValue());\n+            assertEquals(\"Mismatched exit message\", EOFException.class.getSimpleName(), exitCallback.getExitMessage());\n         }\n     }\n "
            },
            {
                "sha": "a4f1ff6c4348cea69c6c0c1ceab59edb3b8d5e95",
                "filename": "sshd-core/src/test/java/org/apache/sshd/util/test/BogusExitCallback.java",
                "status": "modified",
                "additions": 16,
                "deletions": 1,
                "changes": 17,
                "blob_url": "https://github.com/apache/mina-sshd/blob/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/test/java/org/apache/sshd/util/test/BogusExitCallback.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d/sshd-core/src/test/java/org/apache/sshd/util/test/BogusExitCallback.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/test/java/org/apache/sshd/util/test/BogusExitCallback.java?ref=2f95f7b9d41756385cba1b8fdfb20f3ec3bd987d",
                "patch": "@@ -23,19 +23,34 @@\n public class BogusExitCallback implements ExitCallback {\n \n     private boolean exited;\n+    private int exitValue;\n+    private String exitMessage;\n+\n+    public BogusExitCallback() {\n+        super();\n+    }\n \n     @Override\n     public void onExit(int exitValue) {\n-        this.exited = true;\n+        onExit(exitValue, String.valueOf(exitValue));\n     }\n \n     @Override\n     public void onExit(int exitValue, String exitMessage) {\n         this.exited = true;\n+        this.exitValue = exitValue;\n+        this.exitMessage = exitMessage;\n     }\n \n     public boolean isExited() {\n         return exited;\n     }\n \n+    public int getExitValue() {\n+        return exitValue;\n+    }\n+\n+    public String getExitMessage() {\n+        return exitMessage;\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/mina-sshd/commit/83c1fc1182cad4186c84fdf6ebce1f618a09f7af",
        "repo": "mina-sshd",
        "parent": "https://github.com/apache/mina-sshd/commit/f8767d486da31f30ee97b7054afd2b193db1edc0",
        "message": "[SSHD-307] Avoid possible NPE in org.apache.sshd.common.session.AbstractSession.getSession",
        "bug_id": "mina-sshd_6",
        "file": [
            {
                "sha": "1ca0b19d358fab24e3ce2c3c50645b62c61b59f2",
                "filename": "sshd-core/src/main/java/org/apache/sshd/common/io/mina/MinaService.java",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "blob_url": "https://github.com/apache/mina-sshd/blob/83c1fc1182cad4186c84fdf6ebce1f618a09f7af/sshd-core/src/main/java/org/apache/sshd/common/io/mina/MinaService.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/83c1fc1182cad4186c84fdf6ebce1f618a09f7af/sshd-core/src/main/java/org/apache/sshd/common/io/mina/MinaService.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/common/io/mina/MinaService.java?ref=83c1fc1182cad4186c84fdf6ebce1f618a09f7af",
                "patch": "@@ -66,7 +66,11 @@ public CloseFuture close(boolean immediately) {\n         Map<Long, IoSession> mina = new HashMap<Long, IoSession>(getIoService().getManagedSessions());\n         Map<Long, org.apache.sshd.common.io.IoSession> sessions = new HashMap<Long, org.apache.sshd.common.io.IoSession>();\n         for (Long id : mina.keySet()) {\n-            sessions.put(id, getSession(mina.get(id)));\n+            // Avoid possible NPE if the MinaSession hasn't been created yet\n+            org.apache.sshd.common.io.IoSession session = getSession(mina.get(id));\n+            if (session != null) {\n+                sessions.put(id, session);\n+            }\n         }\n         return sessions;\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/mina-sshd/commit/9a27e728436965c388be95211297853d2dd07f37",
        "repo": "mina-sshd",
        "parent": "https://github.com/apache/mina-sshd/commit/cfc90d8a93845f250389718ddf86f6a1c59e8a25",
        "message": "[SSHD-249] Data race in AbstractSession.close() may lead to NPE and blocks during shutdown",
        "bug_id": "mina-sshd_7",
        "file": [
            {
                "sha": "f5e9cdf183eae6dea07f1690def2bcc28f75ea63",
                "filename": "sshd-core/src/main/java/org/apache/sshd/common/session/AbstractSession.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/mina-sshd/blob/9a27e728436965c388be95211297853d2dd07f37/sshd-core/src/main/java/org/apache/sshd/common/session/AbstractSession.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/9a27e728436965c388be95211297853d2dd07f37/sshd-core/src/main/java/org/apache/sshd/common/session/AbstractSession.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/common/session/AbstractSession.java?ref=9a27e728436965c388be95211297853d2dd07f37",
                "patch": "@@ -328,9 +328,9 @@ public void operationComplete(IoCloseFuture future) {\n                 try {\n                     closing = true;\n                     log.debug(\"Closing session\");\n-                    Channel[] channelToClose = channels.values().toArray(new Channel[channels.values().size()]);\n-                    if (channelToClose.length > 0) {\n-                        final AtomicInteger latch = new AtomicInteger(channelToClose.length);\n+                    List<Channel> channelToClose = new ArrayList<Channel>(channels.values());\n+                    if (channelToClose.size() > 0) {\n+                        final AtomicInteger latch = new AtomicInteger(channelToClose.size());\n                         for (Channel channel : channelToClose) {\n                             log.debug(\"Closing channel {}\", channel.getId());\n                             channel.close(immediately).addListener(new SshFutureListener() {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/mina-sshd/commit/7acefd2f4df61ff06f7a0494f076bc49a090ecb9",
        "repo": "mina-sshd",
        "parent": "https://github.com/apache/mina-sshd/commit/31f73ec4ee399bc1443349ea83699c8cf1ba59a0",
        "message": "[SSHD-197] IOExceptions thrown from SshFile can cause NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/sshd/trunk@1429800 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "mina-sshd_8",
        "file": [
            {
                "sha": "a506b3a6367fec8f65c802e4eff89375df188eaa",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/mina-sshd/blob/7acefd2f4df61ff06f7a0494f076bc49a090ecb9/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/7acefd2f4df61ff06f7a0494f076bc49a090ecb9/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java?ref=7acefd2f4df61ff06f7a0494f076bc49a090ecb9",
                "patch": "@@ -231,7 +231,7 @@ public void run() {\n         } catch (IOException e) {\n             try {\n                 exitValue = ERROR;\n-                exitMessage = e.getMessage();\n+                exitMessage = e.getMessage() == null ? \"\" : e.getMessage();\n                 out.write(exitValue);\n                 out.write(exitMessage.getBytes());\n                 out.write('\\n');"
            },
            {
                "sha": "994c17da467bd7e99117917b040260dabc42b4fe",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/sftp/SftpSubsystem.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/mina-sshd/blob/7acefd2f4df61ff06f7a0494f076bc49a090ecb9/sshd-core/src/main/java/org/apache/sshd/server/sftp/SftpSubsystem.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/7acefd2f4df61ff06f7a0494f076bc49a090ecb9/sshd-core/src/main/java/org/apache/sshd/server/sftp/SftpSubsystem.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/sftp/SftpSubsystem.java?ref=7acefd2f4df61ff06f7a0494f076bc49a090ecb9",
                "patch": "@@ -571,7 +571,7 @@ protected void process(Buffer buffer) throws IOException {\n                         handles.put(handle, new FileHandle(file, pflags)); // handle flags conversion\n                         sendHandle(id, handle);\n                     } catch (IOException e) {\n-                        sendStatus(id, SSH_FX_FAILURE, e.getMessage());\n+                        sendStatus(id, SSH_FX_FAILURE, e.getMessage() == null ? \"\" : e.getMessage());\n                     }\n                 } else {\n                     String path = buffer.getString();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/mina-sshd/commit/091e8840c64a6f11d9845dcea3613bb1261d8c44",
        "repo": "mina-sshd",
        "parent": "https://github.com/apache/mina-sshd/commit/b198a7b50e094bff3886f59ba7431aa0ac4faa10",
        "message": "SSHD-44: NPE in ScpCommand and improvements to ScpCommandFactory.createCommand\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/sshd/trunk@830479 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "mina-sshd_9",
        "file": [
            {
                "sha": "918c3189b351329083fac2b7a25324c2e8e67752",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/CommandFactory.java",
                "status": "modified",
                "additions": 8,
                "deletions": 1,
                "changes": 9,
                "blob_url": "https://github.com/apache/mina-sshd/blob/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/CommandFactory.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/CommandFactory.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/CommandFactory.java?ref=091e8840c64a6f11d9845dcea3613bb1261d8c44",
                "patch": "@@ -101,12 +101,19 @@\n     public interface ExitCallback {\n \n         /**\n-         * Informs the SSH server that the shell has exited\n+         * Informs the SSH client/server that the shell has exited\n          *\n          * @param exitValue the exit value\n          */\n         void onExit(int exitValue);\n \n+        /**\n+         * Informs the SSH client/server that the shell has exited\n+         *\n+         * @param exitValue the exit value\n+         * @param exitMessage exit value description\n+         */\n+        void onExit(int exitValue, String exitMessage);\n     }\n \n }"
            },
            {
                "sha": "ead4ae056320c58f4ebd6ab9c1f3bba9565a35ee",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java",
                "status": "modified",
                "additions": 10,
                "deletions": 1,
                "changes": 11,
                "blob_url": "https://github.com/apache/mina-sshd/blob/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java?ref=091e8840c64a6f11d9845dcea3613bb1261d8c44",
                "patch": "@@ -474,14 +474,20 @@ protected int getPtyModeValue(PtyMode mode) {\n     }\n \n     protected boolean handleExec(Buffer buffer) throws IOException {\n+        CommandFactory.Command command;\n         boolean wantReply = buffer.getBoolean();\n         String commandLine = buffer.getString();\n \n         if (((ServerSession) session).getServerFactoryManager().getCommandFactory() == null) {\n             return false;\n         }\n \n-        CommandFactory.Command command = ((ServerSession) session).getServerFactoryManager().getCommandFactory().createCommand(commandLine);\n+        try {\n+            command = ((ServerSession) session).getServerFactoryManager().getCommandFactory().createCommand(commandLine);\n+        } catch (IllegalArgumentException iae) {\n+            // TODO: Shouldn't we log errors on the server side?\n+            return false;\n+        }\n         // If the command wants to be aware of the session, let's do that\n         if (command instanceof CommandFactory.SessionAware) {\n             ((CommandFactory.SessionAware) command).setSession((ServerSession) session);\n@@ -505,6 +511,9 @@ public void onExit(int exitValue) {\n                     log.info(\"Error closing shell\", e);\n                 }\n             }\n+            public void onExit(int exitValue, String exitMessage) {\n+                onExit(exitValue);\n+            }\n         });\n \n         if (wantReply) {"
            },
            {
                "sha": "1c0c4fe6194da162dc04e5d00ba2d741e2d9c2ba",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java",
                "status": "modified",
                "additions": 12,
                "deletions": 3,
                "changes": 15,
                "blob_url": "https://github.com/apache/mina-sshd/blob/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java?ref=091e8840c64a6f11d9845dcea3613bb1261d8c44",
                "patch": "@@ -41,6 +41,8 @@\n public class ScpCommand implements CommandFactory.Command, Runnable {\n \n     private static final Logger log = LoggerFactory.getLogger(ScpCommand.class);\n+    private static final int OK = 0;\n+    private static final int ERROR = 2;\n \n     private boolean optR;\n     private boolean optT;\n@@ -116,6 +118,9 @@ public void start() throws IOException {\n     }\n \n     public void run() {\n+        int exitValue = OK;\n+        String exitMessage = null;\n+        \n         try {\n             if (optT && !optR) {\n                 ack();\n@@ -143,16 +148,20 @@ public void run() {\n             }\n         } catch (IOException e) {\n             try {\n-                out.write(2);\n-                out.write(e.getMessage().getBytes());\n+                exitValue = ERROR;\n+                exitMessage = e.getMessage();\n+                out.write(exitValue);\n+                out.write(exitMessage.getBytes());\n                 out.write('\\n');\n                 out.flush();\n             } catch (IOException e2) {\n                 // Ignore\n             }\n             log.info(\"Error in scp command\", e);\n         } finally {\n-            callback.onExit(0);\n+            if (callback != null) {\n+                callback.onExit(exitValue, exitMessage);\n+            }\n         }\n     }\n "
            },
            {
                "sha": "fdc632ca2c78bcbceaa84ffff253d5618c251236",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommandFactory.java",
                "status": "modified",
                "additions": 46,
                "deletions": 7,
                "changes": 53,
                "blob_url": "https://github.com/apache/mina-sshd/blob/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommandFactory.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommandFactory.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommandFactory.java?ref=091e8840c64a6f11d9845dcea3613bb1261d8c44",
                "patch": "@@ -18,6 +18,9 @@\n  */\n package org.apache.sshd.server.command;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n import org.apache.sshd.server.CommandFactory;\n \n /**\n@@ -40,15 +43,51 @@ public ScpCommandFactory(CommandFactory delegate) {\n         this.delegate = delegate;\n     }\n \n-    public Command createCommand(String command){\n-        String[] args = command.split(\" \");\n-        if (args.length > 0 && \"scp\".equals(args[0])) {\n-            return new ScpCommand(args);\n+    /**\n+     * Parses a command string and verifies that the basic syntax is\n+     * correct. If parsing fails the responsibility is delegated to\n+     * the configured {@link CommandFactory} instance; if one exist.\n+     *\n+     * @param command command to parse \n+     * @return configured {@link CommandFactory.Command} instance\n+     * @throws IllegalArgumentException\n+     */\n+    public Command createCommand(String command) {\n+        try {\n+            return new ScpCommand(splitCommandString(command));\n+        } catch (IllegalArgumentException iae) {\n+            if (delegate != null) {\n+                return delegate.createCommand(command);\n+            }\n+            throw iae;\n+        }\n+    }\n+\n+    private String[] splitCommandString(String command) {\n+        if (!command.trim().startsWith(\"scp\")) {\n+            throw new IllegalArgumentException(\"Unknown command, does not begin with 'scp'\");\n         }\n-        if (delegate != null) {\n-            return delegate.createCommand(command);\n+\n+        String[] args = command.split(\" \");\n+        List<String> parts = new ArrayList<String>();\n+        parts.add(args[0]);\n+        for (int i = 1; i < args.length; i++) {\n+            if (!args[i].trim().startsWith(\"-\")) {\n+                parts.add(concatenateWithSpace(args, i));\n+                break;\n+            } else {\n+                parts.add(args[i]);\n+            }\n         }\n-        return new UnknownCommand(command);\n+        return parts.toArray(new String[parts.size()]);\n     }\n \n+    private String concatenateWithSpace(String[] args, int from) {\n+        StringBuilder sb = new StringBuilder();\n+\n+        for (int i = from; i < args.length; i++) {\n+            sb.append(args[i] + \" \");\n+        }\n+        return sb.toString().trim();\n+    }\n }"
            },
            {
                "sha": "1c789c15454bc53866ff59238f15dc2d69c09a5d",
                "filename": "sshd-core/src/test/java/org/apache/sshd/ScpTest.java",
                "status": "modified",
                "additions": 7,
                "deletions": 7,
                "changes": 14,
                "blob_url": "https://github.com/apache/mina-sshd/blob/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/test/java/org/apache/sshd/ScpTest.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/test/java/org/apache/sshd/ScpTest.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/test/java/org/apache/sshd/ScpTest.java?ref=091e8840c64a6f11d9845dcea3613bb1261d8c44",
                "patch": "@@ -109,32 +109,32 @@ public void testScp() throws Exception {\n         String data = \"0123456789\\n\";\n \n         File root = new File(\"target/scp\");\n-        File target = new File(\"target/scp/out.txt\");\n+        File target = new File(\"target/scp/o ut.txt\");\n         root.mkdirs();\n         assertTrue(root.exists());\n \n         target.delete();\n         assertFalse(target.exists());\n-        sendFile(\"target/scp/out.txt\", \"out.txt\", data);\n+        sendFile(\"target/scp/o ut.txt\", \"out.txt\", data);\n         assertFileLength(target, data.length(), 5000);\n \n         target.delete();\n         assertFalse(target.exists());\n-        sendFile(\"target/scp\", \"out.txt\", data);\n+        sendFile(\"target/scp\", \"o ut.txt\", data);\n         assertFileLength(target, data.length(), 5000);\n \n         sendFileError(\"target\", \"scp\", \"0123456789\\n\");\n \n         readFileError(\"target/scp\");\n \n-        assertEquals(data, readFile(\"target/scp/out.txt\"));\n+        assertEquals(data, readFile(\"target/scp/o ut.txt\"));\n \n         assertEquals(data, readDir(\"target/scp\"));\n \n         target.delete();\n         root.delete();\n \n-        sendDir(\"target\", \"scp\", \"out.txt\", data);\n+        sendDir(\"target\", \"scp\", \"o ut.txt\", data);\n         assertFileLength(target, data.length(), 5000);\n     }\n \n@@ -164,7 +164,7 @@ protected String readFile(String path) throws Exception {\n         OutputStream os = c.getOutputStream();\n         InputStream is = c.getInputStream();\n         String header = readLine(is);\n-        assertEquals(\"C0644 11 out.txt\", header);\n+        assertEquals(\"C0644 11 o ut.txt\", header);\n         int length = Integer.parseInt(header.substring(6, header.indexOf(' ', 6)));\n         os.write(0);\n         os.flush();\n@@ -191,7 +191,7 @@ protected String readDir(String path) throws Exception {\n         os.write(0);\n         os.flush();\n         header = readLine(is);\n-        assertEquals(\"C0644 11 out.txt\", header);\n+        assertEquals(\"C0644 11 o ut.txt\", header);\n         int length = Integer.parseInt(header.substring(6, header.indexOf(' ', 6)));\n         os.write(0);\n         os.flush();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/mina-sshd/commit/269a56b8692339e24f45ebaec10611b7c9f89e63",
        "repo": "mina-sshd",
        "parent": "https://github.com/apache/mina-sshd/commit/e3f6339f0b92f30154e2747df45e996af98ec22d",
        "message": "SSHD-19: Avoid NullPointerException when sftp is disabled\n\nIf a subsystem is disabled the server won't be able to create\nthe subsystem command object and initialize it into the channel.\nA SSH_MSG_CHANNEL_FAILURE is returned to the client, but the\nclient may have already started to send data for this command.\n\nIn the case of the sftp there is an initial data packet\nsent by the client immediately behind the channel request,\nso the ChannelSession needs to consume this requset even if it\nno subsystem command was created.  Eventually the client will\nreceive the SSH_MSG_CHANNEL_FAILURE that was sent, and tear down\nthe connection with a failure message.\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/sshd/trunk@1031886 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "mina-sshd_10",
        "file": [
            {
                "sha": "0f528786d9901b27b577042e9e18ba6b941ffe02",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/mina-sshd/blob/269a56b8692339e24f45ebaec10611b7c9f89e63/sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java",
                "raw_url": "https://github.com/apache/mina-sshd/raw/269a56b8692339e24f45ebaec10611b7c9f89e63/sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java?ref=269a56b8692339e24f45ebaec10611b7c9f89e63",
                "patch": "@@ -199,8 +199,10 @@ public void handleRequest(Buffer buffer) throws IOException {\n     }\n \n     protected void doWriteData(byte[] data, int off, int len) throws IOException {\n-        shellIn.write(data, off, len);\n-        shellIn.flush();\n+        if (shellIn != null) {\n+            shellIn.write(data, off, len);\n+            shellIn.flush();\n+        }\n     }\n \n     protected void doWriteExtendedData(byte[] data, int off, int len) throws IOException {"
            }
        ]
    }
]
