[
    {
        "commit": "https://github.com/apache/ranger/commit/3cba16886cd78a35c61f02ebd1ed4bc8a3767d47",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/fa0dff146399b97554d4e745e6e2dcbd7510d988",
        "message": "RANGER-2661:NullPointerException on RangerRolesProvider.loadUserGroupRoles",
        "bug_id": "ranger_1",
        "file": [
            {
                "sha": "f5cdddf83efe41f0ff10919abe31413aa0ba527d",
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/service/RangerBasePlugin.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/ranger/blob/3cba16886cd78a35c61f02ebd1ed4bc8a3767d47/agents-common/src/main/java/org/apache/ranger/plugin/service/RangerBasePlugin.java",
                "raw_url": "https://github.com/apache/ranger/raw/3cba16886cd78a35c61f02ebd1ed4bc8a3767d47/agents-common/src/main/java/org/apache/ranger/plugin/service/RangerBasePlugin.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/service/RangerBasePlugin.java?ref=3cba16886cd78a35c61f02ebd1ed4bc8a3767d47",
                "patch": "@@ -117,7 +117,9 @@ public void setRoles(RangerRoles roles) {\n \n \t\tRangerPolicyEngine policyEngine = this.policyEngine;\n \n-\t\tpolicyEngine.setRoles(roles);\n+\t\tif (policyEngine != null) {\n+\t\t\tpolicyEngine.setRoles(roles);\n+\t\t}\n \n \t\tpluginContext.notifyAuthContextChanged();\n \t}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/fb97a18b5f409dc7beb9c0ed5ec43c9daad89f41",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/d12f94f681c8406e16d5c0591019dae7ce2d3541",
        "message": "RANGER-2610: NPE in PolicyRefresher if service-policies in policy-cache contain only service definition",
        "bug_id": "ranger_2",
        "file": [
            {
                "sha": "45b223d80dd28193dc9f8dafebe08cb22db69ab8",
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/policyengine/RangerPolicyEngineImpl.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/ranger/blob/fb97a18b5f409dc7beb9c0ed5ec43c9daad89f41/agents-common/src/main/java/org/apache/ranger/plugin/policyengine/RangerPolicyEngineImpl.java",
                "raw_url": "https://github.com/apache/ranger/raw/fb97a18b5f409dc7beb9c0ed5ec43c9daad89f41/agents-common/src/main/java/org/apache/ranger/plugin/policyengine/RangerPolicyEngineImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/policyengine/RangerPolicyEngineImpl.java?ref=fb97a18b5f409dc7beb9c0ed5ec43c9daad89f41",
                "patch": "@@ -96,7 +96,7 @@ public RangerPolicyEngineImpl(final RangerPolicyEngineImpl other, ServicePolicie\n \n \tpublic RangerPolicyEngineImpl(final RangerPolicyEngineImpl other, ServicePolicies servicePolicies, RangerRoles rangerRoles) {\n \n-\t\tlong policyVersion = servicePolicies.getPolicyVersion();\n+\t\tlong policyVersion = servicePolicies.getPolicyVersion() != null ? servicePolicies.getPolicyVersion() : -1L;\n \n \t\tthis.useForwardedIPAddress = other.useForwardedIPAddress;\n \t\tthis.trustedProxyAddresses = other.trustedProxyAddresses;"
            },
            {
                "sha": "7ec8495bc894d3831fe385d25eda28b44f93a299",
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/util/PolicyRefresher.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/ranger/blob/fb97a18b5f409dc7beb9c0ed5ec43c9daad89f41/agents-common/src/main/java/org/apache/ranger/plugin/util/PolicyRefresher.java",
                "raw_url": "https://github.com/apache/ranger/raw/fb97a18b5f409dc7beb9c0ed5ec43c9daad89f41/agents-common/src/main/java/org/apache/ranger/plugin/util/PolicyRefresher.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/util/PolicyRefresher.java?ref=fb97a18b5f409dc7beb9c0ed5ec43c9daad89f41",
                "patch": "@@ -210,7 +210,7 @@ private void loadPolicy() {\n \t\t\t\tplugIn.setPolicies(svcPolicies);\n \t\t\t\tpoliciesSetInPlugin = true;\n \t\t\t\tsetLastActivationTimeInMillis(System.currentTimeMillis());\n-\t\t\t\tlastKnownVersion = svcPolicies.getPolicyVersion();\n+\t\t\t\tlastKnownVersion = svcPolicies.getPolicyVersion() != null ? svcPolicies.getPolicyVersion() : -1L;\n \t\t\t} else {\n \t\t\t\tif (!policiesSetInPlugin && !serviceDefSetInPlugin) {\n \t\t\t\t\tplugIn.setPolicies(null);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/9f639f3c5876c7134f43df33467691a2b01735a7",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/46a75938bfa58676044361b597bd52d1496804a0",
        "message": "RANGER-2186: Part II - check for NPE when incrementing service-specific policy and tag versions after update transaction is committed",
        "bug_id": "ranger_3",
        "file": [
            {
                "sha": "6c699cad9d946c7e125594f93d0f477edb242bfa",
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "status": "modified",
                "additions": 10,
                "deletions": 8,
                "changes": 18,
                "blob_url": "https://github.com/apache/ranger/blob/9f639f3c5876c7134f43df33467691a2b01735a7/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "raw_url": "https://github.com/apache/ranger/raw/9f639f3c5876c7134f43df33467691a2b01735a7/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java?ref=9f639f3c5876c7134f43df33467691a2b01735a7",
                "patch": "@@ -2880,14 +2880,16 @@ public static void persistVersionChange(RangerDaoManager daoMgr, Long id, VERSIO\n \n \t\t} else {\n \t\t\tXXService service = daoMgr.getXXService().getById(id);\n-\t\t\tserviceVersionInfoDbObj = new XXServiceVersionInfo();\n-\t\t\tserviceVersionInfoDbObj.setServiceId(service.getId());\n-\t\t\tserviceVersionInfoDbObj.setPolicyVersion(1L);\n-\t\t\tserviceVersionInfoDbObj.setPolicyUpdateTime(new Date());\n-\t\t\tserviceVersionInfoDbObj.setTagVersion(1L);\n-\t\t\tserviceVersionInfoDbObj.setTagUpdateTime(new Date());\n-\n-\t\t\tserviceVersionInfoDao.create(serviceVersionInfoDbObj);\n+\t\t\tif (service != null) {\n+\t\t\t\tserviceVersionInfoDbObj = new XXServiceVersionInfo();\n+\t\t\t\tserviceVersionInfoDbObj.setServiceId(service.getId());\n+\t\t\t\tserviceVersionInfoDbObj.setPolicyVersion(1L);\n+\t\t\t\tserviceVersionInfoDbObj.setPolicyUpdateTime(new Date());\n+\t\t\t\tserviceVersionInfoDbObj.setTagVersion(1L);\n+\t\t\t\tserviceVersionInfoDbObj.setTagUpdateTime(new Date());\n+\n+\t\t\t\tserviceVersionInfoDao.create(serviceVersionInfoDbObj);\n+\t\t\t}\n \t\t}\n \t}\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/c85ef54762b94b77fe7ef7b71a97a7acea7e8b26",
        "message": "RANGER-2000: NPE in ValiditySchedule validation",
        "bug_id": "ranger_4",
        "file": [
            {
                "sha": "4557b9f0439b84e19251504bb55891c08c49f11b",
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/model/validation/RangerValidityScheduleValidator.java",
                "status": "modified",
                "additions": 11,
                "deletions": 10,
                "changes": 21,
                "blob_url": "https://github.com/apache/ranger/blob/aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc/agents-common/src/main/java/org/apache/ranger/plugin/model/validation/RangerValidityScheduleValidator.java",
                "raw_url": "https://github.com/apache/ranger/raw/aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc/agents-common/src/main/java/org/apache/ranger/plugin/model/validation/RangerValidityScheduleValidator.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/model/validation/RangerValidityScheduleValidator.java?ref=aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc",
                "patch": "@@ -141,7 +141,7 @@ private boolean validateTimeRangeSpec(List<ValidationFailureDetails> validationF\n         for (RangerValidityRecurrence recurrence : validitySchedule.getRecurrences()) {\n             ret = validateValidityInterval(recurrence, validationFailures) && ret;\n \n-            if (RangerValidityRecurrence.ValidityInterval.getValidityIntervalInMinutes(recurrence.getInterval()) > 0) {\n+            if (ret) {\n                 ret = validateFieldSpec(recurrence, RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.minute, validationFailures) && ret;\n                 ret = validateFieldSpec(recurrence, RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.hour, validationFailures) && ret;\n                 ret = validateFieldSpec(recurrence, RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.dayOfMonth, validationFailures) && ret;\n@@ -156,7 +156,6 @@ private boolean validateTimeRangeSpec(List<ValidationFailureDetails> validationF\n                             getNormalizedValue(recurrence, RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.month), getNormalizedValue(recurrence, RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.year));\n                     RangerValidityRecurrence normalizedRecurrence = new RangerValidityRecurrence(schedule, recurrence.getInterval());\n                     normalizedValiditySchedule.getRecurrences().add(normalizedRecurrence);\n-\n                 }\n             }\n         }\n@@ -174,22 +173,24 @@ private boolean validateTimeZone(String timeZone, List<ValidationFailureDetails>\n     }\n \n     private boolean validateValidityInterval(RangerValidityRecurrence recurrence, List<ValidationFailureDetails> validationFailures) {\n-        boolean ret = true;\n-        RangerValidityRecurrence.ValidityInterval validityInterval = recurrence.getInterval();\n-        if (validityInterval != null) {\n+        boolean ret = recurrence.getInterval() != null && recurrence.getSchedule() != null;\n+\n+        if (ret) {\n+            RangerValidityRecurrence.ValidityInterval validityInterval = recurrence.getInterval();\n+\n             if (validityInterval.getDays() < 0\n-                    || (validityInterval.getHours() < 0 || validityInterval.getHours() > 23)\n-                    || (validityInterval.getMinutes() < 0 || validityInterval.getMinutes() > 59)) {\n+                        || (validityInterval.getHours() < 0 || validityInterval.getHours() > 23)\n+                        || (validityInterval.getMinutes() < 0 || validityInterval.getMinutes() > 59)) {\n                 validationFailures.add(new ValidationFailureDetails(0, \"interval\", \"\", false, true, false, \"invalid interval\"));\n                 ret = false;\n             }\n-        }\n-        int validityIntervalInMinutes = RangerValidityRecurrence.ValidityInterval.getValidityIntervalInMinutes(validityInterval);\n-        if (validityIntervalInMinutes > 0) {\n+\n             if (StringUtils.isBlank(recurrence.getSchedule().getDayOfMonth()) && StringUtils.isBlank(recurrence.getSchedule().getDayOfWeek())) {\n                 validationFailures.add(new ValidationFailureDetails(0, \"validitySchedule\", \"\", false, true, false, \"empty dayOfMonth and dayOfWeek\"));\n                 ret = false;\n             }\n+        } else {\n+\t        validationFailures.add(new ValidationFailureDetails(0, \"recurrence\", \"schedule/interval\", true, true, false, \"empty schedule/interval in recurrence spec\"));\n         }\n         return ret;\n     }"
            },
            {
                "sha": "321df659f2e706bca9f9efa1051f0dd336cb171d",
                "filename": "agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-invalid.json",
                "status": "modified",
                "additions": 69,
                "deletions": 1,
                "changes": 70,
                "blob_url": "https://github.com/apache/ranger/blob/aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc/agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-invalid.json",
                "raw_url": "https://github.com/apache/ranger/raw/aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc/agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-invalid.json",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-invalid.json?ref=aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc",
                "patch": "@@ -95,7 +95,7 @@\n     \"result\": {\n       \"isValid\": false,\n       \"isApplicable\": false,\n-      \"validationFailureCount\": 1\n+      \"validationFailureCount\": 2\n     }\n   },\n   {\n@@ -143,4 +143,72 @@\n       \"validationFailureCount\": 1\n     }\n   }\n+  ,\n+  {\n+    \"name\": \"schedule blank\",\n+\n+    \"validitySchedules\": [\n+      {\n+        \"startTime\": \"2018/01/12 14:32:00\",\n+        \"endTime\": \"2020/01/23 06:30:00\",\n+        \"recurrences\": [\n+          {\n+            \"interval\": {\"minutes\": 10 }\n+          }\n+        ]\n+      }\n+    ],\n+    \"accessTime\": \"20180112-14:32:27.000-0800\",\n+    \"result\": {\n+      \"isValid\": false,\n+      \"isApplicable\": false,\n+      \"validationFailureCount\": 1\n+    }\n+  }\n+  ,\n+  {\n+    \"name\": \"interval blank\",\n+\n+    \"validitySchedules\": [\n+      {\n+        \"startTime\": \"2018/01/12 14:32:00\",\n+        \"endTime\": \"2020/01/23 06:30:00\",\n+        \"recurrences\": [\n+          {\n+            \"schedule\": {\"minute\": \"45, 30, 1, 14\", \"hour\": \"*, 0,20, 21\", \"dayOfMonth\": \"\", \"dayOfWeek\": \"2\", \"month\": \"12, 1-2\", \"year\": \"2018\"}\n+          }\n+        ]\n+      }\n+    ],\n+    \"accessTime\": \"20180112-14:32:27.000-0800\",\n+    \"result\": {\n+      \"isValid\": false,\n+      \"isApplicable\": false,\n+      \"validationFailureCount\": 1\n+    }\n+  },\n+  {\n+    \"name\": \"schedule and interval blank\",\n+\n+    \"validitySchedules\": [\n+      {\n+        \"startTime\": \"2018/01/12 14:32:00\",\n+        \"endTime\": \"2020/01/23 06:30:00\",\n+        \"recurrences\": [\n+          {\n+            \"schedule\": {\"minute\": \"45, 30, 1, 14\", \"hour\": \"*, 0,20, 21\", \"dayOfMonth\": \"\", \"dayOfWeek\": \"2\", \"month\": \"12, 1-2\", \"year\": \"2018\"}\n+          },\n+          {\n+            \"interval\": {\"minutes\": 10 }\n+          }\n+        ]\n+      }\n+    ],\n+    \"accessTime\": \"20180112-14:32:27.000-0800\",\n+    \"result\": {\n+      \"isValid\": false,\n+      \"isApplicable\": false,\n+      \"validationFailureCount\": 2\n+    }\n+  }\n ]\n\\ No newline at end of file"
            },
            {
                "sha": "7df6fcfe272a74eec8e8d644fb799b0931370772",
                "filename": "agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-valid-and-applicable.json",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/ranger/blob/aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc/agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-valid-and-applicable.json",
                "raw_url": "https://github.com/apache/ranger/raw/aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc/agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-valid-and-applicable.json",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-valid-and-applicable.json?ref=aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc",
                "patch": "@@ -8,15 +8,15 @@\n         \"recurrences\": [\n           {\n             \"schedule\": {\n-              \"minute\": \"60\",\n+              \"minute\": \"30\",\n               \"hour\": \"*\",\n               \"dayOfMonth\": \"*\",\n               \"dayOfWeek\": \"5, 7\",\n               \"month\": \"*\",\n               \"year\": \"2018\"\n             },\n             \"interval\": {\n-              \"minutes\": 0\n+              \"minutes\": 10\n             }\n           }\n         ]\n@@ -45,7 +45,7 @@\n               \"month\": \"*\",\n               \"year\": \"2018\"\n             },\n-            \"inteval\": {\n+            \"interval\": {\n               \"minutes\": 9\n             }\n           }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/f3467abc3dce82c66acaa4530ce8c6d34bb455a2",
        "message": "RANGER-770 : Fix NullPointerException Unit test cases on master branch",
        "bug_id": "ranger_5",
        "file": [
            {
                "sha": "64591283533d7d4f96f3baa0660d984cc28a7afd",
                "filename": "security-admin/src/main/java/org/apache/ranger/entity/XXTagAttributeDef.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/ranger/blob/8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf/security-admin/src/main/java/org/apache/ranger/entity/XXTagAttributeDef.java",
                "raw_url": "https://github.com/apache/ranger/raw/8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf/security-admin/src/main/java/org/apache/ranger/entity/XXTagAttributeDef.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/entity/XXTagAttributeDef.java?ref=8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf",
                "patch": "@@ -41,8 +41,8 @@\n \tprivate static final long serialVersionUID = 1L;\n \n \t@Id\n-\t@SequenceGenerator(name = \"X_SERVICE_RESOURCE_ELEMENT_SEQ\", sequenceName = \"X_SERVICE_RESOURCE_ELEMENT_SEQ\", allocationSize = 1)\n-\t@GeneratedValue(strategy = GenerationType.AUTO, generator = \"X_SERVICE_RESOURCE_ELEMENT_SEQ\")\n+\t@SequenceGenerator(name = \"X_TAG_ATTR_DEF_SEQ\", sequenceName = \"X_TAG_ATTR_DEF_SEQ\", allocationSize = 1)\n+\t@GeneratedValue(strategy = GenerationType.AUTO, generator = \"X_TAG_ATTR_DEF_SEQ\")\n \t@Column(name = \"id\")\n \tprotected Long id;\n "
            },
            {
                "sha": "339f1e7de87b153a0f21036d2cc80d61457aa5d2",
                "filename": "security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java",
                "status": "modified",
                "additions": 47,
                "deletions": 28,
                "changes": 75,
                "blob_url": "https://github.com/apache/ranger/blob/8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf/security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java",
                "raw_url": "https://github.com/apache/ranger/raw/8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf/security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java?ref=8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf",
                "patch": "@@ -703,7 +703,6 @@ public void test15revokeAccess() throws Exception {\n \n \t@Test\n \tpublic void test16createPolicyFalse() throws Exception {\n-\n \t\tRangerPolicy rangerPolicy = rangerPolicy();\n \t\tRangerServiceDef rangerServiceDef = rangerServiceDef();\n \n@@ -730,29 +729,36 @@ public void test16createPolicyFalse() throws Exception {\n \t\trangerAccessTypeDefObj.setName(\"read\");\n \t\trangerAccessTypeDefObj.setRbKeyLabel(null);\n \t\trangerAccessTypeDefList.add(rangerAccessTypeDefObj);\n+\t\tXXServiceDef xServiceDef = serviceDef();\n+\t\tXXService xService = xService();\n+\t\tXXServiceDefDao xServiceDefDao = Mockito.mock(XXServiceDefDao.class);\n+\t\tXXServiceDao xServiceDao = Mockito.mock(XXServiceDao.class);\n \n \t\tMockito.when(\n \t\t\t\tsvcStore.getServicePoliciesIfUpdated(Mockito.anyString(),\n \t\t\t\t\t\tMockito.anyLong())).thenReturn(servicePolicies);\n \t\tMockito.when(validatorFactory.getPolicyValidator(svcStore)).thenReturn(\n \t\t\t\tpolicyValidator);\n-\t\tMockito.when(bizUtil.isAdmin()).thenReturn(false);\n+\t\tMockito.when(bizUtil.isAdmin()).thenReturn(true);\n \t\tMockito.when(bizUtil.getCurrentUserLoginId()).thenReturn(userName);\n \t\tMockito.when(userMgr.getGroupsForUser(userName)).thenReturn(\n \t\t\t\tuserGroupsList);\n-\n-\t\tMockito.when(restErrorUtil.createRESTException((String)null))\n-\t\t\t\t.thenThrow(new WebApplicationException());\n-\t\tthrown.expect(WebApplicationException.class);\n+\t\tMockito.when(daoManager.getXXService()).thenReturn(xServiceDao);\n+\t\tMockito.when(xServiceDao.findByName(Mockito.anyString())).thenReturn(\n+\t\t\t\txService);\n+\t\tMockito.when(daoManager.getXXServiceDef()).thenReturn(xServiceDefDao);\n+\t\tMockito.when(xServiceDefDao.getById(xService.getType())).thenReturn(\n+\t\t\t\txServiceDef);\n+\t\tMockito.when(svcStore.createPolicy((RangerPolicy) Mockito.anyObject()))\n+\t\t\t\t.thenReturn(rangPolicy);\n \n \t\tRangerPolicy dbRangerPolicy = serviceREST.createPolicy(rangerPolicy);\n \t\tAssert.assertNotNull(dbRangerPolicy);\n-\t\tMockito.verify(svcStore).getServicePoliciesIfUpdated(\n-\t\t\t\tMockito.anyString(), Mockito.anyLong());\n-\t\tMockito.verify(bizUtil).getCurrentUserLoginId();\n-\t\tMockito.verify(bizUtil).isAdmin();\n-\t\tMockito.verify(userMgr).getGroupsForUser(userName);\n+\t\tMockito.verify(bizUtil, Mockito.times(2)).isAdmin();\n \t\tMockito.verify(validatorFactory).getPolicyValidator(svcStore);\n+\n+\t\tMockito.verify(daoManager).getXXService();\n+\t\tMockito.verify(daoManager).getXXServiceDef();\n \t}\n \n \t@Test\n@@ -770,16 +776,21 @@ public void test17updatePolicyFalse() throws Exception {\n \t\trangerAccessTypeDefObj.setName(\"read\");\n \t\trangerAccessTypeDefObj.setRbKeyLabel(null);\n \t\trangerAccessTypeDefList.add(rangerAccessTypeDefObj);\n+\t\tXXServiceDef xServiceDef = serviceDef();\n+\t\tXXService xService = xService();\n+\t\tXXServiceDefDao xServiceDefDao = Mockito.mock(XXServiceDefDao.class);\n+\t\tXXServiceDao xServiceDao = Mockito.mock(XXServiceDao.class);\n+\n \t\tMockito.when(validatorFactory.getPolicyValidator(svcStore)).thenReturn(\n \t\t\t\tpolicyValidator);\n-\t\tMockito.when(bizUtil.isAdmin()).thenReturn(false);\n+\t\tMockito.when(bizUtil.isAdmin()).thenReturn(true);\n \t\tMockito.when(bizUtil.getCurrentUserLoginId()).thenReturn(userName);\n \t\tMockito.when(userMgr.getGroupsForUser(userName)).thenReturn(\n \t\t\t\tuserGroupsList);\n-\n-\t\tMockito.when(restErrorUtil.createRESTException((String)null))\n-\t\t\t\t.thenThrow(new WebApplicationException());\n-\t\tthrown.expect(WebApplicationException.class);\n+\t\tMockito.when(daoManager.getXXService()).thenReturn(xServiceDao);\n+\t\tMockito.when(xServiceDao.findByName(Mockito.anyString())).thenReturn(xService);\n+\t\tMockito.when(daoManager.getXXServiceDef()).thenReturn(xServiceDefDao);\n+\t\tMockito.when(xServiceDefDao.getById(xService.getType())).thenReturn(xServiceDef);\n \t\tRangerPolicy dbRangerPolicy = serviceREST.updatePolicy(rangerPolicy);\n \t\tAssert.assertNull(dbRangerPolicy);\n \t\tMockito.verify(validatorFactory).getPolicyValidator(svcStore);\n@@ -803,16 +814,20 @@ public void test18deletePolicyFalse() throws Exception {\n \t\trangerAccessTypeDefObj.setName(\"read\");\n \t\trangerAccessTypeDefObj.setRbKeyLabel(null);\n \t\trangerAccessTypeDefList.add(rangerAccessTypeDefObj);\n+\t\tXXServiceDef xServiceDef = serviceDef();\n+\t\tXXService xService = xService();\n+\t\tXXServiceDefDao xServiceDefDao = Mockito.mock(XXServiceDefDao.class);\n+\t\tXXServiceDao xServiceDao = Mockito.mock(XXServiceDao.class);\n \t\tMockito.when(validatorFactory.getPolicyValidator(svcStore)).thenReturn(\n \t\t\t\tpolicyValidator);\n-\t\tMockito.when(bizUtil.isAdmin()).thenReturn(false);\n+\t\tMockito.when(bizUtil.isAdmin()).thenReturn(true);\n \t\tMockito.when(bizUtil.getCurrentUserLoginId()).thenReturn(userName);\n-\t\tMockito.when(userMgr.getGroupsForUser(userName)).thenReturn(\n-\t\t\t\tuserGroupsList);\n-\n-\t\tMockito.when(restErrorUtil.createRESTException((String)null))\n-\t\t\t\t.thenThrow(new WebApplicationException());\n-\t\tthrown.expect(WebApplicationException.class);\n+\t\tMockito.when(userMgr.getGroupsForUser(userName)).thenReturn(userGroupsList);\n+\t\tMockito.when(svcStore.getPolicy(Id)).thenReturn(rangerPolicy);\n+\t\tMockito.when(daoManager.getXXService()).thenReturn(xServiceDao);\n+\t\tMockito.when(xServiceDao.findByName(Mockito.anyString())).thenReturn(xService);\n+\t\tMockito.when(daoManager.getXXServiceDef()).thenReturn(xServiceDefDao);\n+\t\tMockito.when(xServiceDefDao.getById(xService.getType())).thenReturn(xServiceDef);\n \t\tserviceREST.deletePolicy(rangerPolicy.getId());\n \t\tMockito.verify(validatorFactory).getPolicyValidator(svcStore);\n \t}\n@@ -834,16 +849,20 @@ public void test19getPolicyFalse() throws Exception {\n \t\trangerAccessTypeDefObj.setName(\"read\");\n \t\trangerAccessTypeDefObj.setRbKeyLabel(null);\n \t\trangerAccessTypeDefList.add(rangerAccessTypeDefObj);\n+\t\tXXServiceDef xServiceDef = serviceDef();\n+\t\tXXService xService = xService();\n+\t\tXXServiceDefDao xServiceDefDao = Mockito.mock(XXServiceDefDao.class);\n+\t\tXXServiceDao xServiceDao = Mockito.mock(XXServiceDao.class);\n \t\tMockito.when(validatorFactory.getPolicyValidator(svcStore)).thenReturn(\n \t\t\t\tpolicyValidator);\n-\t\tMockito.when(bizUtil.isAdmin()).thenReturn(false);\n+\t\tMockito.when(bizUtil.isAdmin()).thenReturn(true);\n \t\tMockito.when(bizUtil.getCurrentUserLoginId()).thenReturn(userName);\n \t\tMockito.when(userMgr.getGroupsForUser(userName)).thenReturn(\n \t\t\t\tuserGroupsList);\n-\n-\t\tMockito.when(restErrorUtil.createRESTException((String)null))\n-\t\t\t\t.thenThrow(new WebApplicationException());\n-\t\tthrown.expect(WebApplicationException.class);\n+\t\tMockito.when(daoManager.getXXService()).thenReturn(xServiceDao);\n+\t\tMockito.when(xServiceDao.findByName(Mockito.anyString())).thenReturn(xService);\n+\t\tMockito.when(daoManager.getXXServiceDef()).thenReturn(xServiceDefDao);\n+\t\tMockito.when(xServiceDefDao.getById(xService.getType())).thenReturn(xServiceDef);\n \t\tRangerPolicy dbRangerPolicy = serviceREST.getPolicy(rangerPolicy\n \t\t\t\t.getId());\n \t\tAssert.assertNotNull(dbRangerPolicy);"
            },
            {
                "sha": "b73a629a5429c35dde65575f068fa4947c34dde4",
                "filename": "security-admin/src/test/java/org/apache/ranger/service/TestRangerServiceDefServiceBase.java",
                "status": "modified",
                "additions": 4,
                "deletions": 3,
                "changes": 7,
                "blob_url": "https://github.com/apache/ranger/blob/8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf/security-admin/src/test/java/org/apache/ranger/service/TestRangerServiceDefServiceBase.java",
                "raw_url": "https://github.com/apache/ranger/raw/8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf/security-admin/src/test/java/org/apache/ranger/service/TestRangerServiceDefServiceBase.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/test/java/org/apache/ranger/service/TestRangerServiceDefServiceBase.java?ref=8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.ranger.biz.RangerBizUtil;\n import org.apache.ranger.common.ContextUtil;\n import org.apache.ranger.common.GUIDUtil;\n+import org.apache.ranger.common.JSONUtil;\n import org.apache.ranger.common.MessageEnums;\n import org.apache.ranger.common.RESTErrorUtil;\n import org.apache.ranger.common.RangerSearchUtil;\n@@ -98,6 +99,9 @@\n \t\n \t@Mock\n \tGUIDUtil guidUtil;\n+\t\n+\t@Mock\n+\tJSONUtil jsonUtil;\n \n \t@Rule\n \tpublic ExpectedException thrown = ExpectedException.none();\n@@ -427,17 +431,14 @@ public void test10populateRangerPolicyConditionDefToXX() {\n \t\tserviceDefObj.setDescription(\"HDFS Repository\");\n \t\tserviceDefObj.setGuid(\"1427365526516_835_0\");\n \t\tserviceDefObj.setId(Id);\n-\n \t\tMockito.when(\n \t\t\t\t(XXPolicyConditionDef) rangerAuditFields.populateAuditFields(\n \t\t\t\t\t\tpolicyConditionDefObj, serviceDefObj)).thenReturn(\n \t\t\t\tpolicyConditionDefObj);\n-\n \t\tXXPolicyConditionDef dbPolicyConditionDef = rangerServiceDefService\n \t\t\t\t.populateRangerPolicyConditionDefToXX(rangerConditionDefvObj,\n \t\t\t\t\t\tpolicyConditionDefObj, serviceDefObj, 1);\n \t\tAssert.assertNotNull(dbPolicyConditionDef);\n-\t\tAssert.assertEquals(dbPolicyConditionDef, policyConditionDefObj);\n \t\tAssert.assertEquals(dbPolicyConditionDef.getName(),\n \t\t\t\tpolicyConditionDefObj.getName());\n \t\tAssert.assertEquals(dbPolicyConditionDef.getDescription(),"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/af6b8c4f3d27b2a5adf37b509c036ab3ba63cb75",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/e23977ce61ece178d37b97f95d5353fda53ab71b",
        "message": "RANGER-1965 - Prevent NPE on decrypting a null password\n\nSigned-off-by: Colm O hEigeartaigh <coheigea@apache.org>",
        "bug_id": "ranger_6",
        "file": [
            {
                "sha": "e654f2bfeb1462475eb5072a7432bb0fb78054f2",
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/client/BaseClient.java",
                "status": "modified",
                "additions": 12,
                "deletions": 8,
                "changes": 20,
                "blob_url": "https://github.com/apache/ranger/blob/af6b8c4f3d27b2a5adf37b509c036ab3ba63cb75/agents-common/src/main/java/org/apache/ranger/plugin/client/BaseClient.java",
                "raw_url": "https://github.com/apache/ranger/raw/af6b8c4f3d27b2a5adf37b509c036ab3ba63cb75/agents-common/src/main/java/org/apache/ranger/plugin/client/BaseClient.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/client/BaseClient.java?ref=af6b8c4f3d27b2a5adf37b509c036ab3ba63cb75",
                "patch": "@@ -104,15 +104,19 @@ protected void login() {\n \t\t\t\t else {\n \t\t\t\t\t String encryptedPwd = configHolder.getPassword();\n \t\t\t\t\t String password = null;\n-\t\t\t\t\t try {\n-\t\t\t\t\t     password = PasswordUtils.decryptPassword(encryptedPwd);\n-\t\t\t\t\t } catch(Exception ex) {\n-\t\t\t\t\t     LOG.info(\"Password decryption failed; trying connection with received password string\");\n-\t\t\t\t\t     password = null;\n-\t\t\t\t\t } finally {\n-\t\t\t\t\t     if (password == null) {\n-\t\t\t\t\t         password = encryptedPwd;\n+\t\t\t\t\t if (encryptedPwd != null) {\n+\t\t\t\t\t     try {\n+\t\t\t\t\t         password = PasswordUtils.decryptPassword(encryptedPwd);\n+\t\t\t\t\t     } catch(Exception ex) {\n+\t\t\t\t\t         LOG.info(\"Password decryption failed; trying connection with received password string\");\n+\t\t\t\t\t         password = null;\n+\t\t\t\t\t     } finally {\n+\t\t\t\t\t         if (password == null) {\n+\t\t\t\t\t             password = encryptedPwd;\n+\t\t\t\t\t         }\n \t\t\t\t\t     }\n+\t\t\t\t\t } else {\n+\t\t\t\t\t     LOG.info(\"Password decryption failed: no password was configured\");\n \t\t\t\t\t }\n \t\t\t\t\t if ( configHolder.isKerberosAuthentication() ) {\n \t\t\t\t\t\t LOG.info(\"Init Login: using username/password\");"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/ab0b91fd666feb034a7a3c06d419d915f8c6721d",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/5f6e6ce72e16343c47b5294b93e15b81f4ebf475",
        "message": "RANGER-2016 : fix NPE caused by a code path, where a HttpServletRequest is passed as null, and re-introduce the non-null validity check",
        "bug_id": "ranger_7",
        "file": [
            {
                "sha": "94374ab2fe4f749326460bb81606cc6115ef2b9f",
                "filename": "security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java",
                "status": "modified",
                "additions": 3,
                "deletions": 4,
                "changes": 7,
                "blob_url": "https://github.com/apache/ranger/blob/ab0b91fd666feb034a7a3c06d419d915f8c6721d/security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java",
                "raw_url": "https://github.com/apache/ranger/raw/ab0b91fd666feb034a7a3c06d419d915f8c6721d/security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java?ref=ab0b91fd666feb034a7a3c06d419d915f8c6721d",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.commons.collections.MapUtils;\n import org.apache.commons.lang.ArrayUtils;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.Validate;\n import org.apache.log4j.Logger;\n import org.apache.ranger.plugin.util.SearchFilter;\n import org.springframework.stereotype.Component;\n@@ -42,7 +43,7 @@\n \tfinal static Logger logger = Logger.getLogger(RangerSearchUtil.class);\n \t\n \tpublic SearchFilter getSearchFilter(@Nonnull HttpServletRequest request, List<SortField> sortFields) {\n-\n+\t\tValidate.notNull(request, \"request\");\n \t\tSearchFilter ret = new SearchFilter();\n \n \t\tif (MapUtils.isEmpty(request.getParameterMap())) {\n@@ -112,9 +113,7 @@ public SearchFilter getSearchFilterFromLegacyRequestForRepositorySearch(HttpServ\n \n \n \tpublic SearchFilter getSearchFilterFromLegacyRequest(HttpServletRequest request, List<SortField> sortFields) {\n-\t\tif (request == null) {\n-\t\t\treturn null;\n-\t\t}\n+\t\tValidate.notNull(request, \"request\");\n \t\tSearchFilter ret = new SearchFilter();\n \n \t\tif (MapUtils.isEmpty(request.getParameterMap())) {"
            },
            {
                "sha": "1bff8158fccdff6a3b67f184797f5d339de9da73",
                "filename": "security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java",
                "status": "modified",
                "additions": 17,
                "deletions": 17,
                "changes": 34,
                "blob_url": "https://github.com/apache/ranger/blob/ab0b91fd666feb034a7a3c06d419d915f8c6721d/security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java",
                "raw_url": "https://github.com/apache/ranger/raw/ab0b91fd666feb034a7a3c06d419d915f8c6721d/security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java?ref=ab0b91fd666feb034a7a3c06d419d915f8c6721d",
                "patch": "@@ -2089,7 +2089,7 @@ public void importPoliciesFromFile(\n \t\t\t\t\t\t\tLOG.debug(\"Deleting Policy from provided services in servicesMapJson file...\");\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (CollectionUtils.isNotEmpty(sourceServices) && CollectionUtils.isNotEmpty(destinationServices)) {\n-\t\t\t\t\t\t\tdeletePoliciesProvidedInServiceMap(sourceServices, destinationServices, null);\n+\t\t\t\t\t\t\tdeletePoliciesProvidedInServiceMap(sourceServices, destinationServices);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \n@@ -2303,16 +2303,14 @@ public void importPoliciesFromFile(\n \t}\n \t\n \tprivate void deletePoliciesProvidedInServiceMap(\n-\t\t\tList<String> sourceServices, List<String> destinationServices,\n-\t\t\tHttpServletRequest request) {\n+\t\t\tList<String> sourceServices, List<String> destinationServices) {\n \t\tint totalDeletedPilicies = 0;\n \t\tif (CollectionUtils.isNotEmpty(sourceServices)\n \t\t\t\t&& CollectionUtils.isNotEmpty(destinationServices)) {\n \t\t\tRangerPolicyValidator validator = validatorFactory.getPolicyValidator(svcStore);\n \t\t\tfor (int i = 0; i < sourceServices.size(); i++) {\n \t\t\t\tif (!destinationServices.get(i).isEmpty()) {\n-\t\t\t\t\tRangerPolicyList servicePolicies = null;\n-\t\t\t\t\tservicePolicies = getServicePoliciesByName(destinationServices.get(i), request);\n+\t\t\t\t\tfinal RangerPolicyList servicePolicies = getServicePolicies(destinationServices.get(i), new SearchFilter());\n \t\t\t\t\tif (servicePolicies != null) {\n \t\t\t\t\t\tList<RangerPolicy> rangerPolicyList = servicePolicies.getPolicies();\n \t\t\t\t\t\tif (CollectionUtils.isNotEmpty(rangerPolicyList)) {\n@@ -2535,11 +2533,20 @@ public RangerPolicyList getServicePoliciesByName(@PathParam(\"name\") String servi\n \t\t\tLOG.debug(\"==> ServiceREST.getServicePolicies(\" + serviceName + \")\");\n \t\t}\n \n-\t\tRangerPolicyList ret  = new RangerPolicyList();\n-\t\tRangerPerfTracer perf = null;\n-\n \t\tSearchFilter filter = searchUtil.getSearchFilter(request, policyService.sortFields);\n \n+\t\tRangerPolicyList ret = getServicePolicies(serviceName, filter);\n+\n+\t\tif (LOG.isDebugEnabled()) {\n+\t\t\tLOG.debug(\"<== ServiceREST.getServicePolicies(\" + serviceName + \"): count=\"\n+\t\t\t\t\t+ (ret == null ? 0 : ret.getListSize()));\n+\t\t}\n+\n+\t\treturn ret;\n+\t}\n+\n+\tprivate RangerPolicyList getServicePolicies(String serviceName, SearchFilter filter) {\n+\t\tRangerPerfTracer perf = null;\n \t\ttry {\n \t\t\tif(RangerPerfTracer.isPerfTraceEnabled(PERF_LOG)) {\n \t\t\t\tperf = RangerPerfTracer.getPerfTracer(PERF_LOG, \"ServiceREST.getServicePolicies(serviceName=\" + serviceName + \")\");\n@@ -2548,7 +2555,7 @@ public RangerPolicyList getServicePoliciesByName(@PathParam(\"name\") String servi\n \t\t\tif(isAdminUserWithNoFilterParams(filter)) {\n \t\t\t\tPList<RangerPolicy> policies = svcStore.getPaginatedServicePolicies(serviceName, filter);\n \n-\t\t\t\tret = toRangerPolicyList(policies);\n+\t\t\t\treturn toRangerPolicyList(policies);\n \t\t\t} else {\n \t\t\t\t// get all policies from the store; pick the page to return after applying filter\n \t\t\t\tint savedStartIndex = filter == null ? 0 : filter.getStartIndex();\n@@ -2568,7 +2575,7 @@ public RangerPolicyList getServicePoliciesByName(@PathParam(\"name\") String servi\n \n \t\t\t\tservicePolicies = applyAdminAccessFilter(servicePolicies);\n \n-\t\t\t\tret = toRangerPolicyList(servicePolicies, filter);\n+\t\t\t\treturn toRangerPolicyList(servicePolicies, filter);\n \t\t\t}\n \t\t} catch(WebApplicationException excp) {\n \t\t\tthrow excp;\n@@ -2579,13 +2586,6 @@ public RangerPolicyList getServicePoliciesByName(@PathParam(\"name\") String servi\n \t\t} finally {\n \t\t\tRangerPerfTracer.log(perf);\n \t\t}\n-\n-\t\tif (LOG.isDebugEnabled()) {\n-\t\t\tLOG.debug(\"<== ServiceREST.getServicePolicies(\" + serviceName + \"): count=\"\n-\t\t\t\t\t+ (ret == null ? 0 : ret.getListSize()));\n-\t\t}\n-\n-\t\treturn ret;\n \t}\n \n \t@GET"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/2a3ada00603b17093678a78c4106ca91a4b5a2fd",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/770f274d04f1a438b90d3cb6643d587558f6bbf7",
        "message": "RANGER-1530 - NPE in HadoopConfigHolder",
        "bug_id": "ranger_8",
        "file": [
            {
                "sha": "fabbdcbb0b007852aaaa854cbe9df6074598f0e6",
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/client/HadoopConfigHolder.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/ranger/blob/2a3ada00603b17093678a78c4106ca91a4b5a2fd/agents-common/src/main/java/org/apache/ranger/plugin/client/HadoopConfigHolder.java",
                "raw_url": "https://github.com/apache/ranger/raw/2a3ada00603b17093678a78c4106ca91a4b5a2fd/agents-common/src/main/java/org/apache/ranger/plugin/client/HadoopConfigHolder.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/client/HadoopConfigHolder.java?ref=2a3ada00603b17093678a78c4106ca91a4b5a2fd",
                "patch": "@@ -293,7 +293,7 @@ private void initLoginInfo() {\n \t\tif (prop != null) {\n \t\t\tuserName = prop.getProperty(RANGER_LOGIN_USER_NAME_PROP);\n \t\t\tkeyTabFile = prop.getProperty(RANGER_LOGIN_KEYTAB_FILE_PROP);\n-\t\t\tif (!StringUtils.isEmpty(prop.getProperty(ENABLE_HIVE_METASTORE_LOOKUP).trim())) {\n+\t\t\tif (!StringUtils.isEmpty(prop.getProperty(ENABLE_HIVE_METASTORE_LOOKUP))) {\n \t\t\t\ttry {\n \t\t\t\t\tenableHiveMetastoreLookup = Boolean.valueOf(prop.getProperty(ENABLE_HIVE_METASTORE_LOOKUP,\"false\").trim());\n \t\t\t\t} catch (Exception e) {"
            },
            {
                "sha": "cd5c0130c46c9d03fd863a04acac7feeb6ebdb71",
                "filename": "hdfs-agent/src/main/java/org/apache/ranger/services/hdfs/client/HdfsClient.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/ranger/blob/2a3ada00603b17093678a78c4106ca91a4b5a2fd/hdfs-agent/src/main/java/org/apache/ranger/services/hdfs/client/HdfsClient.java",
                "raw_url": "https://github.com/apache/ranger/raw/2a3ada00603b17093678a78c4106ca91a4b5a2fd/hdfs-agent/src/main/java/org/apache/ranger/services/hdfs/client/HdfsClient.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/hdfs-agent/src/main/java/org/apache/ranger/services/hdfs/client/HdfsClient.java?ref=2a3ada00603b17093678a78c4106ca91a4b5a2fd",
                "patch": "@@ -53,7 +53,7 @@ public HdfsClient(String serviceName, Map<String,String> connectionProperties) {\n     for (Map.Entry<String, String> entry: connectionProperties.entrySet())  {\n       String key = entry.getKey();\n       String value = entry.getValue();\n-      if (!rangerInternalPropertyKeys.contains(key)) {\n+      if (!rangerInternalPropertyKeys.contains(key) && value != null) {\n         conf.set(key, value);\n       }\n     }\n@@ -253,7 +253,7 @@ public static void validateConnectionConfigs(Map<String, String> configs)\n \t  String lookupPrincipal=null;\n \t  try{\n \t\t  lookupPrincipal = SecureClientLogin.getPrincipal(configs.get(\"lookupprincipal\"), java.net.InetAddress.getLocalHost().getCanonicalHostName());\n-\t  }catch(Exception e){\t\n+\t  }catch(Exception e){\n \t\t  //do nothing\n \t  }\n \t  String lookupKeytab = configs.get(\"lookupkeytab\");"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/e191a4b4e2d465018b56ec18b190655d52fd3acb",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/9c21c33bcd3d26777bfc501e3cd73a2d490c661f",
        "message": "Fixing some potential NPEs",
        "bug_id": "ranger_9",
        "file": [
            {
                "sha": "ff4dc7630eea7699b8fe2d6b8d4b573984f6f637",
                "filename": "agents-audit/src/main/java/org/apache/ranger/audit/provider/MiscUtil.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/ranger/blob/e191a4b4e2d465018b56ec18b190655d52fd3acb/agents-audit/src/main/java/org/apache/ranger/audit/provider/MiscUtil.java",
                "raw_url": "https://github.com/apache/ranger/raw/e191a4b4e2d465018b56ec18b190655d52fd3acb/agents-audit/src/main/java/org/apache/ranger/audit/provider/MiscUtil.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-audit/src/main/java/org/apache/ranger/audit/provider/MiscUtil.java?ref=e191a4b4e2d465018b56ec18b190655d52fd3acb",
                "patch": "@@ -565,6 +565,10 @@ static public boolean logErrorMessageByInterval(Log useLogger,\n \t */\n \tstatic public boolean logErrorMessageByInterval(Log useLogger,\n \t\t\tString message, Throwable e) {\n+        if (message == null) {\n+            return false;\n+        }\n+\n \t\tLogHistory log = logHistoryList.get(message);\n \t\tif (log == null) {\n \t\t\tlog = new LogHistory();"
            },
            {
                "sha": "4376908571dca57a2d00fd6a0b3cb1a5b0edddd7",
                "filename": "plugin-solr/src/main/java/org/apache/ranger/authorization/solr/authorizer/RangerSolrAuthorizer.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/ranger/blob/e191a4b4e2d465018b56ec18b190655d52fd3acb/plugin-solr/src/main/java/org/apache/ranger/authorization/solr/authorizer/RangerSolrAuthorizer.java",
                "raw_url": "https://github.com/apache/ranger/raw/e191a4b4e2d465018b56ec18b190655d52fd3acb/plugin-solr/src/main/java/org/apache/ranger/authorization/solr/authorizer/RangerSolrAuthorizer.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/plugin-solr/src/main/java/org/apache/ranger/authorization/solr/authorizer/RangerSolrAuthorizer.java?ref=e191a4b4e2d465018b56ec18b190655d52fd3acb",
                "patch": "@@ -353,13 +353,13 @@ String mapToRangerAccessType(AuthorizationContext context) {\n \t\tString accessType = ACCESS_TYPE_OTHERS;\n \n \t\tRequestType requestType = context.getRequestType();\n-\t\tif (requestType.equals(RequestType.ADMIN)) {\n+\t\tif (RequestType.ADMIN.equals(requestType)) {\n \t\t\taccessType = ACCESS_TYPE_ADMIN;\n-\t\t} else if (requestType.equals(RequestType.READ)) {\n+\t\t} else if (RequestType.READ.equals(requestType)) {\n \t\t\taccessType = ACCESS_TYPE_QUERY;\n-\t\t} else if (requestType.equals(RequestType.WRITE)) {\n+\t\t} else if (RequestType.WRITE.equals(requestType)) {\n \t\t\taccessType = ACCESS_TYPE_UPDATE;\n-\t\t} else if (requestType.equals(RequestType.UNKNOWN)) {\n+\t\t} else if (RequestType.UNKNOWN.equals(requestType)) {\n \t\t\tlogger.info(\"UNKNOWN request type. Mapping it to \" + accessType\n \t\t\t\t\t+ \". Resource=\" + context.getResource());\n \t\t\taccessType = ACCESS_TYPE_OTHERS;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/11bcd728ef103a1dd34a6d3f2b386bbaaa9ba550",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/e52e2b271399c4d40b23da2a099b0dc16ed840c0",
        "message": "RANGER-1658:Solr gives NPE while printing the AuthorizationContext in INFO and DEBUG log\n\nSigned-off-by: rmani <rmani@hortonworks.com>",
        "bug_id": "ranger_10",
        "file": [
            {
                "sha": "0cc9de99d6b34e3a5882f8562132e8085ac2a023",
                "filename": "plugin-solr/src/main/java/org/apache/ranger/authorization/solr/authorizer/RangerSolrAuthorizer.java",
                "status": "modified",
                "additions": 27,
                "deletions": 13,
                "changes": 40,
                "blob_url": "https://github.com/apache/ranger/blob/11bcd728ef103a1dd34a6d3f2b386bbaaa9ba550/plugin-solr/src/main/java/org/apache/ranger/authorization/solr/authorizer/RangerSolrAuthorizer.java",
                "raw_url": "https://github.com/apache/ranger/raw/11bcd728ef103a1dd34a6d3f2b386bbaaa9ba550/plugin-solr/src/main/java/org/apache/ranger/authorization/solr/authorizer/RangerSolrAuthorizer.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/plugin-solr/src/main/java/org/apache/ranger/authorization/solr/authorizer/RangerSolrAuthorizer.java?ref=11bcd728ef103a1dd34a6d3f2b386bbaaa9ba550",
                "patch": "@@ -162,6 +162,7 @@ public AuthorizationResponse authorize(AuthorizationContext context) {\n \n \t\ttry {\n \t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"==> RangerSolrAuthorizer.authorize()\");\n \t\t\t\tlogAuthorizationConext(context);\n \t\t\t}\n \n@@ -228,7 +229,7 @@ public AuthorizationResponse authorize(AuthorizationContext context) {\n \t\t\tresponse = new AuthorizationResponse(200);\n \t\t}\n \t\tif (logger.isDebugEnabled()) {\n-\t\t\tlogger.debug(\"context=\" + context + \": returning: \" + isDenied);\n+\t\t\tlogger.debug( \"<== RangerSolrAuthorizer.authorize() result: \" + isDenied + \"Response : \" + response.getMessage());\n \t\t}\n \t\treturn response;\n \t}\n@@ -238,9 +239,7 @@ public AuthorizationResponse authorize(AuthorizationContext context) {\n \t */\n \tprivate void logAuthorizationConext(AuthorizationContext context) {\n \t\ttry {\n-\t\t\t// Note: This method should be called with isDebugEnabled() or\n-\t\t\t// isInfoEnabled() scope\n-\n+\t\t\t// Note: This method should be called with isDebugEnabled()\n \t\t\tString collections = \"\";\n \t\t\tint i = -1;\n \t\t\tfor (CollectionRequest collectionRequest : context\n@@ -280,15 +279,30 @@ private void logAuthorizationConext(AuthorizationContext context) {\n \n \t\t\tString userName = getUserName(context);\n \t\t\tSet<String> groups = getGroupsForUser(userName);\n-\n-\t\t\tlogger.info(\"AuthorizationContext: context.getResource()=\"\n-\t\t\t\t\t+ context.getResource() + \", solarParams=\"\n-\t\t\t\t\t+ context.getParams() + \", requestType=\"\n-\t\t\t\t\t+ context.getRequestType() + \", ranger.requestType=\"\n-\t\t\t\t\t+ mapToRangerAccessType(context) + \", userPrincipal=\"\n-\t\t\t\t\t+ context.getUserPrincipal() + \", userName=\" + userName\n-\t\t\t\t\t+ \", groups=\" + groups + \", ipAddress=\" + ipAddress\n-\t\t\t\t\t+ \", collections=\" + collections + \", headers=\" + headers);\n+\t\t\tString resource    = context.getResource();\n+\t\t\tString solrParams  = \"\";\n+\t\t\ttry {\n+\t\t\t\tsolrParams = context.getParams().toQueryString();\n+\t\t\t} catch (Throwable t) {\n+\t\t\t\t//Exception ignored\n+\t\t\t}\n+\t\t\tRequestType requestType  = context.getRequestType();\n+\t\t\tString \t\taccessType   = mapToRangerAccessType(context);\n+\t\t\tPrincipal\tprincipal\t = context.getUserPrincipal();\n+\n+\t\t\tString contextString = new String(\"AuthorizationContext: \");\n+\t\t\tcontextString  = contextString + \"context.getResource()= \" + ((resource != null ) ? resource : \"\");\n+\t\t\tcontextString  = contextString + \", solarParams= \" + (( solrParams != null ) ? solrParams : \"\");\n+\t\t\tcontextString  = contextString + \", requestType= \" + (( requestType != null ) ? requestType : \"\");\n+\t\t\tcontextString  = contextString + \", ranger.requestType= \" + ((accessType != null ) ? accessType : \"\");\n+\t\t\tcontextString  = contextString + \", userPrincipal= \" + ((principal != null ) ? principal : \"\");\n+\t\t\tcontextString  = contextString + \", userName= \"  + userName;\n+\t\t\tcontextString  = contextString + \", groups= \" + groups;\n+\t\t\tcontextString  = contextString + \", ipAddress= \" + ipAddress;\n+\t\t\tcontextString  = contextString + \", collections= \" + collections;\n+\t\t\tcontextString  = contextString + \", headers= \" + headers;\n+\n+\t\t\tlogger.debug(contextString);\n \t\t} catch (Throwable t) {\n \t\t\tlogger.error(\"Error getting request context!!!\", t);\n \t\t}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/58018b21b751293d803f7702920b13247b0c09ba",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/4981181a9a9f261d3fb30485aec709a1bccb3292",
        "message": "RANGER-1402 - NPE if there is a problem with the HiveClient driverClassName\n\nSigned-off-by: Colm O hEigeartaigh <coheigea@apache.org>",
        "bug_id": "ranger_11",
        "file": [
            {
                "sha": "93763587255ec0421fb13d123f9608fbde281bea",
                "filename": "hive-agent/src/main/java/org/apache/ranger/services/hive/client/HiveConnectionMgr.java",
                "status": "modified",
                "additions": 11,
                "deletions": 2,
                "changes": 13,
                "blob_url": "https://github.com/apache/ranger/blob/58018b21b751293d803f7702920b13247b0c09ba/hive-agent/src/main/java/org/apache/ranger/services/hive/client/HiveConnectionMgr.java",
                "raw_url": "https://github.com/apache/ranger/raw/58018b21b751293d803f7702920b13247b0c09ba/hive-agent/src/main/java/org/apache/ranger/services/hive/client/HiveConnectionMgr.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/hive-agent/src/main/java/org/apache/ranger/services/hive/client/HiveConnectionMgr.java?ref=58018b21b751293d803f7702920b13247b0c09ba",
                "patch": "@@ -64,10 +64,19 @@ public HiveClient call() throws Exception {\n \t\t\t\t\t\t\tLOG.error(\"Error connecting hive repository : \"+\n \t\t\t\t\t\t\t\t\tserviceName +\" using config : \"+ configs, e);\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tHiveClient oldClient = hiveConnectionCache.putIfAbsent(serviceName, hiveClient);\n+\n+\t\t\t\t\t\tHiveClient oldClient = null;\n+\t\t\t\t\t\tif (hiveClient != null) {\n+\t\t\t\t\t\t\toldClient = hiveConnectionCache.putIfAbsent(serviceName, hiveClient);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\toldClient = hiveConnectionCache.get(serviceName);\n+\t\t\t\t\t\t}\n+\n \t\t\t\t\t\tif (oldClient != null) {\n \t\t\t\t\t\t\t// in the meantime someone else has put a valid client into the cache, let's use that instead.\n-\t\t\t\t\t\t\thiveClient.close();\n+\t\t\t\t\t\t\tif (hiveClient != null) {\n+\t\t\t\t\t\t\t\thiveClient.close();\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\thiveClient = oldClient;\n \t\t\t\t\t\t}\n \t\t\t\t\t\trepoConnectStatusMap.put(serviceName, true);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/29f8f2027f7703dcb144f4bd87499fe3d8459a88",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/ab4683eb1fa325494b36b516ef2d80a2962f4548",
        "message": "NPE fix\n\nSigned-off-by: sneethiraj <sneethir@apache.org>",
        "bug_id": "ranger_12",
        "file": [
            {
                "sha": "33a2da375790d6a75ef9a0fbf70029e563ade6bb",
                "filename": "security-admin/src/main/java/org/apache/ranger/service/RangerServiceDefService.java",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/ranger/blob/29f8f2027f7703dcb144f4bd87499fe3d8459a88/security-admin/src/main/java/org/apache/ranger/service/RangerServiceDefService.java",
                "raw_url": "https://github.com/apache/ranger/raw/29f8f2027f7703dcb144f4bd87499fe3d8459a88/security-admin/src/main/java/org/apache/ranger/service/RangerServiceDefService.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/RangerServiceDefService.java?ref=29f8f2027f7703dcb144f4bd87499fe3d8459a88",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.ranger.common.SortField;\n import org.apache.ranger.common.SearchField.DATA_TYPE;\n import org.apache.ranger.common.SearchField.SEARCH_TYPE;\n+import org.apache.ranger.common.UserSessionBase;\n import org.apache.ranger.entity.XXContextEnricherDef;\n import org.apache.ranger.entity.XXAccessTypeDef;\n import org.apache.ranger.entity.XXEnumDef;\n@@ -158,13 +159,14 @@ public RangerServiceDef getPopulatedViewObject(XXServiceDef xServiceDef) {\n \t\treturn this.populateViewBean(xServiceDef);\n \t}\n \t@Override\n-\t@SuppressWarnings(\"unchecked\")\n \tpublic RangerServiceDefList searchRangerServiceDefs(SearchFilter searchFilter) {\n \t\tList<RangerServiceDef> serviceDefList = new ArrayList<RangerServiceDef>();\n \t\tRangerServiceDefList retList = new RangerServiceDefList();\n \n \t\tList<XXServiceDef> xSvcDefList = (List<XXServiceDef>) searchResources(searchFilter, searchFields, sortFields, retList);\n-\t\tList<String> userRoleList = ContextUtil.getCurrentUserSession().getUserRoleList();\n+\t\tUserSessionBase sessionBase = ContextUtil.getCurrentUserSession();\n+\t\tList<String> userRoleList = (sessionBase != null) ? sessionBase.getUserRoleList() : null;\n+\n \t\tfor (XXServiceDef xSvcDef : xSvcDefList) {\n \t\t\tif(userRoleList != null && !userRoleList.contains(RangerConstants.ROLE_KEY_ADMIN)){\n \t\t\t\tif(xSvcDef!=null && !\"KMS\".equalsIgnoreCase(xSvcDef.getName())){"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/b1bfbc572cd2a2974403abb7c023b5390c21f55d",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/87446272e0e3678463aad96770c7f957f1d9418b",
        "message": "RANGER-339: Fix for potential NPE, remove dead code",
        "bug_id": "ranger_13",
        "file": [
            {
                "sha": "47500813f368dd10172faa98e13764b69bfa8e1f",
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java",
                "status": "modified",
                "additions": 59,
                "deletions": 72,
                "changes": 131,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -68,22 +68,7 @@\n import org.apache.ranger.service.XUserService;\n import org.apache.ranger.solr.SolrAccessAuditsService;\n import org.apache.ranger.util.RestUtil;\n-import org.apache.ranger.view.VXAccessAuditList;\n-import org.apache.ranger.view.VXAsset;\n-import org.apache.ranger.view.VXAuditMap;\n-import org.apache.ranger.view.VXAuditMapList;\n-import org.apache.ranger.view.VXLong;\n-import org.apache.ranger.view.VXPermMap;\n-import org.apache.ranger.view.VXPermMapList;\n-import org.apache.ranger.view.VXPolicy;\n-import org.apache.ranger.view.VXPolicyExportAuditList;\n-import org.apache.ranger.view.VXResource;\n-import org.apache.ranger.view.VXResourceList;\n-import org.apache.ranger.view.VXResponse;\n-import org.apache.ranger.view.VXStringList;\n-import org.apache.ranger.view.VXTrxLog;\n-import org.apache.ranger.view.VXTrxLogList;\n-import org.apache.ranger.view.VXUser;\n+import org.apache.ranger.view.*;\n import org.codehaus.jackson.JsonGenerationException;\n import org.codehaus.jackson.map.JsonMappingException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -1756,39 +1741,42 @@ public VXTrxLogList getReportLogs(SearchCriteria searchCriteria) {\n \n \tpublic VXAccessAuditList getAccessLogs(SearchCriteria searchCriteria) {\n \n-\t\tif (searchCriteria != null && searchCriteria.getParamList() != null\n-\t\t\t\t&& searchCriteria.getParamList().size() > 0) {\n-\t\t\tint clientTimeOffsetInMinute = RestUtil.getClientTimeOffset();\n-\t\t\tjava.util.Date temp = null;\n-\t\t\tDateUtil dateUtil = new DateUtil();\n-\t\t\tif (searchCriteria.getParamList().containsKey(\"startDate\")) {\n-\t\t\t\ttemp = (java.util.Date) searchCriteria.getParamList().get(\n-\t\t\t\t\t\t\"startDate\");\n-\t\t\t\ttemp = dateUtil.getDateFromGivenDate(temp, 0, 0, 0, 0);\n-\t\t\t\ttemp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n-\t\t\t\tsearchCriteria.getParamList().put(\"startDate\", temp);\n-\t\t\t}\n-\t\t\tif (searchCriteria.getParamList().containsKey(\"endDate\")) {\n-\t\t\t\ttemp = (java.util.Date) searchCriteria.getParamList().get(\n-\t\t\t\t\t\t\"endDate\");\n-\t\t\t\ttemp = dateUtil.getDateFromGivenDate(temp, 0, 23, 59, 59);\n-\t\t\t\ttemp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n-\t\t\t\tsearchCriteria.getParamList().put(\"endDate\", temp);\n-\t\t\t}\n+        if (searchCriteria == null) {\n+            searchCriteria = new SearchCriteria();\n+        }\n+        if (searchCriteria.getParamList() != null\n+                && searchCriteria.getParamList().size() > 0) {\n+            int clientTimeOffsetInMinute = RestUtil.getClientTimeOffset();\n+            java.util.Date temp = null;\n+            DateUtil dateUtil = new DateUtil();\n+            if (searchCriteria.getParamList().containsKey(\"startDate\")) {\n+                temp = (java.util.Date) searchCriteria.getParamList().get(\n+                        \"startDate\");\n+                temp = dateUtil.getDateFromGivenDate(temp, 0, 0, 0, 0);\n+                temp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n+                searchCriteria.getParamList().put(\"startDate\", temp);\n+            }\n+            if (searchCriteria.getParamList().containsKey(\"endDate\")) {\n+                temp = (java.util.Date) searchCriteria.getParamList().get(\n+                        \"endDate\");\n+                temp = dateUtil.getDateFromGivenDate(temp, 0, 23, 59, 59);\n+                temp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n+                searchCriteria.getParamList().put(\"endDate\", temp);\n+            }\n+\n+        }\n+        if (searchCriteria.getSortType() == null) {\n+            searchCriteria.setSortType(\"desc\");\n+        } else if (!searchCriteria.getSortType().equalsIgnoreCase(\"asc\") && !searchCriteria.getSortType().equalsIgnoreCase(\"desc\")) {\n+            searchCriteria.setSortType(\"desc\");\n+        }\n+        if (xaBizUtil.getAuditDBType().equalsIgnoreCase(RangerBizUtil.AUDIT_STORE_SOLR)) {\n+            return solrAccessAuditsService.searchXAccessAudits(searchCriteria);\n+        } else {\n+            return xAccessAuditService.searchXAccessAudits(searchCriteria);\n+        }\n+    }\n \n-\t\t}\n-\t\tif(searchCriteria.getSortType()==null){\n-\t\t\tsearchCriteria.setSortType(\"desc\");\n-\t\t}else if(!searchCriteria.getSortType().equalsIgnoreCase(\"asc\")&& !searchCriteria.getSortType().equalsIgnoreCase(\"desc\")){\n-\t\t\tsearchCriteria.setSortType(\"desc\");\n-\t\t}\n-\t\tif (xaBizUtil.getAuditDBType().equalsIgnoreCase(RangerBizUtil.AUDIT_STORE_SOLR)) {\n-\t\t\treturn solrAccessAuditsService.searchXAccessAudits(searchCriteria);\n-\t\t} else {\n-\t\t\treturn xAccessAuditService.searchXAccessAudits(searchCriteria);\n-\t\t}\n-\t\t//return xAccessAuditService.searchXAccessAudits(searchCriteria);\n-\t}\n \n \tpublic VXTrxLogList getTransactionReport(String transactionId) {\n \t\tList<XXTrxLog> xTrxLogList = rangerDaoManager.getXXTrxLog()\n@@ -1854,30 +1842,29 @@ public VXTrxLogList getTransactionReport(String transactionId) {\n \t@Override\n \tpublic VXPolicyExportAuditList searchXPolicyExportAudits(\n \t\t\tSearchCriteria searchCriteria) {\n-\t\tif (searchCriteria != null && searchCriteria.getParamList() != null\n-\t\t\t\t&& searchCriteria.getParamList().size() > 0) {\n-\n-\t\t\tint clientTimeOffsetInMinute = RestUtil.getClientTimeOffset();\n-\t\t\tjava.util.Date temp = null;\n-\t\t\tDateUtil dateUtil = new DateUtil();\n-\t\t\tif (searchCriteria.getParamList().containsKey(\"startDate\")) {\n-\t\t\t\ttemp = (java.util.Date) searchCriteria.getParamList().get(\n-\t\t\t\t\t\t\"startDate\");\n-\t\t\t\ttemp = dateUtil.getDateFromGivenDate(temp, 0, 0, 0, 0);\n-\t\t\t\ttemp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n-\t\t\t\tsearchCriteria.getParamList().put(\"startDate\", temp);\n-\t\t\t}\n-\t\t\tif (searchCriteria.getParamList().containsKey(\"endDate\")) {\n-\t\t\t\ttemp = (java.util.Date) searchCriteria.getParamList().get(\n-\t\t\t\t\t\t\"endDate\");\n-\t\t\t\ttemp = dateUtil.getDateFromGivenDate(temp, 0, 23, 59, 59);\n-\t\t\t\ttemp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n-\t\t\t\tsearchCriteria.getParamList().put(\"endDate\", temp);\n-\t\t\t}\n-\t\t}\n-\t\n-\t\treturn xPolicyExportAuditService.searchXPolicyExportAudits(searchCriteria);\n-\t}\n+        if (searchCriteria != null && searchCriteria.getParamList() != null\n+                && searchCriteria.getParamList().size() > 0) {\n+\n+            int clientTimeOffsetInMinute = RestUtil.getClientTimeOffset();\n+            java.util.Date temp = null;\n+            DateUtil dateUtil = new DateUtil();\n+            if (searchCriteria.getParamList().containsKey(\"startDate\")) {\n+                temp = (java.util.Date) searchCriteria.getParamList().get(\n+                        \"startDate\");\n+                temp = dateUtil.getDateFromGivenDate(temp, 0, 0, 0, 0);\n+                temp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n+                searchCriteria.getParamList().put(\"startDate\", temp);\n+            }\n+            if (searchCriteria.getParamList().containsKey(\"endDate\")) {\n+                temp = (java.util.Date) searchCriteria.getParamList().get(\n+                        \"endDate\");\n+                temp = dateUtil.getDateFromGivenDate(temp, 0, 23, 59, 59);\n+                temp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n+                searchCriteria.getParamList().put(\"endDate\", temp);\n+            }\n+        }\n+        return xPolicyExportAuditService.searchXPolicyExportAudits(searchCriteria);\n+    }\n \t\n \tpublic VXAsset getXAsset(Long id){\n \t\tUserSessionBase currentUserSession = ContextUtil"
            },
            {
                "sha": "420b37d5583962e924e7ee4d5cbdabc10e1a160d",
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java",
                "status": "modified",
                "additions": 5,
                "deletions": 2,
                "changes": 7,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -1081,8 +1081,11 @@ public VXPortalUser createDefaultAccountUser(VXPortalUser userProfile) {\n \t\t\t\t\t\t\t\tMessageEnums.OPER_NOT_ALLOWED_FOR_STATE);*/\n \t\t\t}\n \t\t}\n-\n-\t\treturn mapXXPortalUserToVXPortalUserForDefaultAccount(xXPortalUser);\n+        if (xXPortalUser != null) {\n+            return mapXXPortalUserToVXPortalUserForDefaultAccount(xXPortalUser);\n+        }else {\n+            return null;\n+        }\n \t}\n \n \tprivate VXPortalUser mapXXPortalUserToVXPortalUserForDefaultAccount(XXPortalUser user) {"
            },
            {
                "sha": "014dedc0195e50482bb594a50a47f2fbe9acc8d6",
                "filename": "security-admin/src/main/java/org/apache/ranger/patch/BaseLoader.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/patch/BaseLoader.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/patch/BaseLoader.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/patch/BaseLoader.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -146,7 +146,7 @@ public String timeTakenSoFar(int lineCount) {\n \tlong currTime =  DateUtil.getUTCDate().getTime();\n \tString retStr = formatTimeTaken(currTime - startTime);\n \tif (currTime - startTime > 0 && countSoFar > 0) {\n-\t    double rateSoFar = countSoFar * 1000 / (currTime - startTime);\n+\t    double rateSoFar = (double)(countSoFar * 1000) / (currTime - startTime);\n \t    retStr = retStr + \" \" + \". Rate so far for \" + countSoFar + \" is \"\n \t\t    + twoDForm.format(rateSoFar);\n "
            },
            {
                "sha": "a8999a980b67e59512a0ffe41723b541f1353ddf",
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XAccessAuditService.java",
                "status": "modified",
                "additions": 13,
                "deletions": 12,
                "changes": 25,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XAccessAuditService.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XAccessAuditService.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XAccessAuditService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -147,21 +147,22 @@ protected VXAccessAudit mapEntityToViewBean(VXAccessAudit vObj, XXAccessAudit mO\n \t * @return\n \t */\n \tpublic VXAccessAuditList searchXAccessAudits(SearchCriteria searchCriteria) {\n-\t\tVXAccessAuditList returnList = new VXAccessAuditList();\n-\t\tList<VXAccessAudit> xAccessAuditList = new ArrayList<VXAccessAudit>();\n+        VXAccessAuditList returnList = new VXAccessAuditList();\n+        List<VXAccessAudit> xAccessAuditList = new ArrayList<VXAccessAudit>();\n \n-\t\tList<XXAccessAudit> resultList = (List<XXAccessAudit>)searchResources(searchCriteria,\n-\t\t\t\tsearchFields, sortFields, returnList);\n+        List<XXAccessAudit> resultList = (List<XXAccessAudit>) searchResources(searchCriteria,\n+                searchFields, sortFields, returnList);\n \n-\t\t// Iterate over the result list and create the return list\n-\t\tfor (XXAccessAudit gjXAccessAudit : resultList) {\n-\t\t\tVXAccessAudit vXAccessAudit = populateViewBean(gjXAccessAudit);\n-\t\t\txAccessAuditList.add(vXAccessAudit);\n-\t\t}\n+        // Iterate over the result list and create the return list\n+        for (XXAccessAudit gjXAccessAudit : resultList) {\n+            VXAccessAudit vXAccessAudit = populateViewBean(gjXAccessAudit);\n+            xAccessAuditList.add(vXAccessAudit);\n+        }\n \n-\t\treturnList.setVXAccessAudits(xAccessAuditList);\n-\t\treturn returnList;\n-\t}\n+\n+        returnList.setVXAccessAudits(xAccessAuditList);\n+        return returnList;\n+    }\n \t\n \tpublic VXAccessAudit populateViewBean(XXAccessAudit gjXAccessAudit) {\n \t\tVXAccessAudit vXAccessAudit = new VXAccessAudit();"
            },
            {
                "sha": "1d6f42c3ffa5097bd6c30dcb6fc9eb6cd4952118",
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XAssetService.java",
                "status": "modified",
                "additions": 29,
                "deletions": 27,
                "changes": 56,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XAssetService.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XAssetService.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XAssetService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -117,33 +117,35 @@ protected void validateForUpdate(VXAsset vObj, XXAsset mObj) {\n \t@Override\n \tprotected XXAsset mapViewToEntityBean(VXAsset vObj, XXAsset mObj,\n \t\t\tint OPERATION_CONTEXT) {\n-\t\tString oldConfig = (mObj != null) ? mObj.getConfig() : null;\n-\t\tsuper.mapViewToEntityBean(vObj, mObj, OPERATION_CONTEXT);\n-\t\tString config = vObj.getConfig();\n-\t\tif (config != null && !config.isEmpty()) {\n-\t\t\tMap<String, String> configMap = jsonUtil.jsonToMap(config);\n-\t\t\tEntry<String, String> passwordEntry = getPasswordEntry(configMap);\n-\t\t\tif (passwordEntry != null) {\n-\t\t\t\t// If \"*****\" then get password from db and update\n-\t\t\t\tString password = passwordEntry.getValue();\n-\t\t\t\tif (password != null) {\n-\t\t\t\t\tif (password.equals(hiddenPasswordString)) {\n-\t\t\t\t\t\tif (oldConfig != null && !oldConfig.isEmpty()) {\n-\t\t\t\t\t\t\tMap<String, String> oldConfigMap = jsonUtil\n-\t\t\t\t\t\t\t\t\t.jsonToMap(oldConfig);\n-\t\t\t\t\t\t\tEntry<String, String> oldPasswordEntry \n-\t\t\t\t\t\t\t\t\t= getPasswordEntry(oldConfigMap);\n-\t\t\t\t\t\t\tif (oldPasswordEntry != null) {\n-\t\t\t\t\t\t\t\tconfigMap.put(oldPasswordEntry.getKey(),\n-\t\t\t\t\t\t\t\t\t\toldPasswordEntry.getValue());\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tconfig = jsonUtil.readMapToString(configMap);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tmObj.setConfig(config);\n+        if (vObj != null && mObj != null) {\n+            String oldConfig = (mObj != null) ? mObj.getConfig() : null;\n+            super.mapViewToEntityBean(vObj, mObj, OPERATION_CONTEXT);\n+            String config = vObj.getConfig();\n+            if (config != null && !config.isEmpty()) {\n+                Map<String, String> configMap = jsonUtil.jsonToMap(config);\n+                Entry<String, String> passwordEntry = getPasswordEntry(configMap);\n+                if (passwordEntry != null) {\n+                    // If \"*****\" then get password from db and update\n+                    String password = passwordEntry.getValue();\n+                    if (password != null) {\n+                        if (password.equals(hiddenPasswordString)) {\n+                            if (oldConfig != null && !oldConfig.isEmpty()) {\n+                                Map<String, String> oldConfigMap = jsonUtil\n+                                        .jsonToMap(oldConfig);\n+                                Entry<String, String> oldPasswordEntry\n+                                        = getPasswordEntry(oldConfigMap);\n+                                if (oldPasswordEntry != null) {\n+                                    configMap.put(oldPasswordEntry.getKey(),\n+                                            oldPasswordEntry.getValue());\n+                                }\n+                            }\n+                        }\n+                        config = jsonUtil.readMapToString(configMap);\n+                    }\n+                }\n+            }\n+            mObj.setConfig(config);\n+        }\n \t\treturn mObj;\n \t}\n "
            },
            {
                "sha": "c00ca74ee982f74d647074bcffd0b2aea087a7a5",
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -78,7 +78,7 @@ protected void validateForUpdate(VXAuditMap vObj, XXAuditMap mObj) {\n \t}\n \n \tpublic List<XXTrxLog> getTransactionLog(VXAuditMap vObj, VXAuditMap mObj, String action){\n-\t\tif(vObj == null && (action == null || !action.equalsIgnoreCase(\"update\"))){\n+\t\tif(vObj == null || action == null || (action.equalsIgnoreCase(\"update\") && mObj == null)){\n \t\t\treturn null;\n \t\t}\n \t\t"
            },
            {
                "sha": "d31e178787c18b02453d245f6738e57e64264ca7",
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XGroupService.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XGroupService.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XGroupService.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XGroupService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -154,7 +154,7 @@ public VXGroup readResourceWithOutLogin(Long id) {\n \t}\n \n \tpublic List<XXTrxLog> getTransactionLog(VXGroup vObj, XXGroup mObj, String action){\n-\t\tif(vObj == null && (action == null || !action.equalsIgnoreCase(\"update\"))){\n+\t\tif(vObj == null || action == null || (action.equalsIgnoreCase(\"update\") && mObj == null)){\n \t\t\treturn null;\n \t\t}\n \t\t"
            },
            {
                "sha": "34109aeb0444a7b7443c5a2a5411198684618b58",
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -150,7 +150,7 @@ public String getUserName(Long userId){\n \t}\n \t\n \tpublic List<XXTrxLog> getTransactionLog(VXPermMap vObj, VXPermMap mObj, String action){\n-\t\tif(vObj == null && (action == null || !action.equalsIgnoreCase(\"update\"))){\n+\t\tif(vObj == null || action == null || (action.equalsIgnoreCase(\"update\") && mObj == null)){\n \t\t\treturn null;\n \t\t}\n \t\t"
            },
            {
                "sha": "1faec211c8bdace0655cbb7a04cc3e3147a78433",
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XResourceService.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XResourceService.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XResourceService.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XResourceService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -424,9 +424,9 @@ private void populatePageList(List<XXResource> resourceList,\n \n \t@Override\n \tprotected XXResource mapViewToEntityBean(VXResource vObj, XXResource mObj, int OPERATION_CONTEXT) {\n-\t\tsuper.mapViewToEntityBean(vObj, mObj, OPERATION_CONTEXT);\n-\t\tmObj.setUdfs(vObj.getUdfs());\n-\t\tif(vObj!=null && mObj!=null){\n+        if(vObj!=null && mObj!=null){\n+\t\t    super.mapViewToEntityBean(vObj, mObj, OPERATION_CONTEXT);\n+\t\t    mObj.setUdfs(vObj.getUdfs());\n \t\t\tXXPortalUser xXPortalUser= null;\n \t\t\tif(mObj.getAddedByUserId()==null || mObj.getAddedByUserId()==0){\n \t\t\t\tif(!stringUtil.isEmpty(vObj.getOwner())){\n@@ -951,7 +951,7 @@ public boolean checkGroupAccess(VXPermMap vxPermMap, List<String> pathList,\n \t}\n \t\n \tpublic List<XXTrxLog> getTransactionLog(VXResource vObj, XXResource mObj, String action){\n-\t\tif(vObj == null && (action == null || !action.equalsIgnoreCase(\"update\"))){\n+\t\tif(vObj == null || action == null || (action.equalsIgnoreCase(\"update\") && mObj == null)) {\n \t\t\treturn null;\n \t\t}\n "
            },
            {
                "sha": "3c3ac641dd8b4e2370c77ea6d08e1e34337f83bb",
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XTrxLogService.java",
                "status": "modified",
                "additions": 17,
                "deletions": 17,
                "changes": 34,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XTrxLogService.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XTrxLogService.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XTrxLogService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -438,22 +438,22 @@ protected XXTrxLog mapViewToEntityBean(VXTrxLog vObj, XXTrxLog mObj, int OPERATI\n \n \t@Override\n \tprotected VXTrxLog mapEntityToViewBean(VXTrxLog vObj, XXTrxLog mObj) {\n-\t\tsuper.mapEntityToViewBean(vObj, mObj);\n-\t\tif(mObj!=null && vObj!=null){\n-\t\t\tXXPortalUser xXPortalUser=null;\n-\t\t\tif(stringUtil.isEmpty(vObj.getOwner())){\n-\t\t\t\txXPortalUser= rangerDaoManager.getXXPortalUser().getById(mObj.getAddedByUserId());\t\n-\t\t\t\tif(xXPortalUser!=null){\n-\t\t\t\t\tvObj.setOwner(xXPortalUser.getLoginId());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif(stringUtil.isEmpty(vObj.getUpdatedBy())){\n-\t\t\t\txXPortalUser= rangerDaoManager.getXXPortalUser().getById(mObj.getUpdatedByUserId());\t\t\n-\t\t\t\tif(xXPortalUser!=null){\n-\t\t\t\t\tvObj.setUpdatedBy(xXPortalUser.getLoginId());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn vObj;\n+        if(mObj!=null && vObj!=null){\n+            super.mapEntityToViewBean(vObj, mObj);\n+            XXPortalUser xXPortalUser=null;\n+            if(stringUtil.isEmpty(vObj.getOwner())){\n+                xXPortalUser= rangerDaoManager.getXXPortalUser().getById(mObj.getAddedByUserId());\n+                if(xXPortalUser!=null){\n+                    vObj.setOwner(xXPortalUser.getLoginId());\n+                }\n+            }\n+            if(stringUtil.isEmpty(vObj.getUpdatedBy())){\n+                xXPortalUser= rangerDaoManager.getXXPortalUser().getById(mObj.getUpdatedByUserId());\n+                if(xXPortalUser!=null){\n+                    vObj.setUpdatedBy(xXPortalUser.getLoginId());\n+                }\n+            }\n+        }\n+        return vObj;\n \t}\n }\n\\ No newline at end of file"
            },
            {
                "sha": "c70fbb87ce2719333605b5b9898f8641cd35811a",
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XUserService.java",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XUserService.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XUserService.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XUserService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -261,8 +261,10 @@ private void populateUserAttributes(String userName, VXUser vObj) {\n \n \tpublic List<XXTrxLog> getTransactionLog(VXUser vObj, VXPortalUser mObj,\n \t\t\tString action) {\n-\t\tif (vObj == null || action == null || (action.equalsIgnoreCase(\"update\") && mObj == null))\n-\t    \t\treturn null;\n+\n+\t\tif (vObj == null || action == null || (action.equalsIgnoreCase(\"update\") && mObj == null)) {\n+\t\t\treturn null;\n+\t\t}\n \n \t\tList<XXTrxLog> trxLogList = new ArrayList<XXTrxLog>();\n \t\ttry {"
            },
            {
                "sha": "7cd06cc4d2d6781c8f6bf3dc38aba2ea635abef2",
                "filename": "ugsync/src/main/java/org/apache/ranger/ldapusersync/process/PolicyMgrUserGroupBuilder.java",
                "status": "modified",
                "additions": 17,
                "deletions": 13,
                "changes": 30,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/ugsync/src/main/java/org/apache/ranger/ldapusersync/process/PolicyMgrUserGroupBuilder.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/ugsync/src/main/java/org/apache/ranger/ldapusersync/process/PolicyMgrUserGroupBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/ugsync/src/main/java/org/apache/ranger/ldapusersync/process/PolicyMgrUserGroupBuilder.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -126,7 +126,7 @@ public static void main(String[] args) throws Throwable {\n \t}\n \n \t\n-\tpublic void init() throws Throwable {\n+\tpublic synchronized void init() throws Throwable {\n \t\trecordsToPullPerCall = config.getMaxRecordsPerAPICall() ;\n \t\tpolicyMgrBaseUrl = config.getPolicyManagerBaseURL() ;\n \t\tisMockRun = config.isMockRunEnabled() ;\n@@ -164,24 +164,28 @@ private String getURL(String uri) {\n \t\n \t\n \tprivate void rebuildUserGroupMap() {\n-\t\t\n-\t\tfor(XUserInfo user : xuserList) {\n-\t\t\taddUserToList(user);\n+\n+        List<XUserInfo> newUsers = new ArrayList<XUserInfo>();\n+        for(XUserInfo user : xuserList) {\n+\t\t\taddUserToList(user, newUsers);\n \t\t}\n-\t\t\n+        xuserList.addAll(newUsers);\n+\n+        List<XGroupInfo> newGroups = new ArrayList<XGroupInfo>();\n \t\tfor(XGroupInfo group : xgroupList) {\n-\t\t\taddGroupToList(group);\n+\t\t\taddGroupToList(group, newGroups);\n \t\t}\n-\t\t\n+        xgroupList.addAll(newGroups);\n+\n \t\tfor(XUserGroupInfo ug : xusergroupList) {\n \t\t\taddUserGroupToList(ug);\n \t\t}\n \t}\n \t\n \t\n-\tprivate void addUserToList(XUserInfo aUserInfo) {\n+\tprivate void addUserToList(XUserInfo aUserInfo, List<XUserInfo> newUsers) {\n \t\tif (! xuserList.contains(aUserInfo)) {\n-\t\t\txuserList.add(aUserInfo) ;\n+            newUsers.add(aUserInfo);\n \t\t}\n \t\t\n \t\tString userId = aUserInfo.getId() ;\n@@ -198,10 +202,10 @@ private void addUserToList(XUserInfo aUserInfo) {\n \t}\n \t\n \n-\tprivate void addGroupToList(XGroupInfo aGroupInfo) {\n+\tprivate void addGroupToList(XGroupInfo aGroupInfo, List<XGroupInfo> newGroups) {\n \t\t\n \t\tif (! xgroupList.contains(aGroupInfo) ) {\n-\t\t\txgroupList.add(aGroupInfo) ;\n+            newGroups.add(aGroupInfo);\n \t\t}\n \n \t\tif (aGroupInfo.getName() != null) {\n@@ -437,7 +441,7 @@ private XUserInfo addXUserInfo(String aUserName) {\n \t    ret = gson.fromJson(response, XUserInfo.class) ;\n \n \t    if (ret != null) {\n-\t    \taddUserToList(ret);\n+\t    \taddUserToList(ret, xuserList);\n \t    }\n \t\t\n \t\treturn ret ;\n@@ -467,7 +471,7 @@ private XGroupInfo addXGroupInfo(String aGroupName) {\n \t    ret = gson.fromJson(response, XGroupInfo.class) ;\n \t    \n \t    if (ret != null) {\n-\t    \taddGroupToList(ret);\n+\t    \taddGroupToList(ret, xgroupList);\n \t    }\n \t\t\n \t\treturn ret ;"
            },
            {
                "sha": "6e98b3423148fe9967c8877ca3b216875c57ac6c",
                "filename": "ugsync/src/main/java/org/apache/ranger/unixusersync/config/UserGroupSyncConfig.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/ugsync/src/main/java/org/apache/ranger/unixusersync/config/UserGroupSyncConfig.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/ugsync/src/main/java/org/apache/ranger/unixusersync/config/UserGroupSyncConfig.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/ugsync/src/main/java/org/apache/ranger/unixusersync/config/UserGroupSyncConfig.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -280,7 +280,7 @@ public String getSSLTrustStorePathPassword() {\n \tpublic long getSleepTimeInMillisBetweenCycle() throws Throwable {\n \t\tString val =  prop.getProperty(UGSYNC_SLEEP_TIME_IN_MILLIS_BETWEEN_CYCLE_PARAM) ;\n \t\tif (val == null) {\n-\t\t\tif (LGSYNC_SOURCE_CLASS.equals(getUserGroupSource())) {\n+\t\t\tif (LGSYNC_SOURCE_CLASS.equals(getUserGroupSource().getClass().getName())) {\n \t\t\t\treturn UGSYNC_SLEEP_TIME_IN_MILLIS_BETWEEN_CYCLE_LDAP_DEFAULT_VALUE ;\n \t\t\t} else {\n \t\t\t\treturn UGSYNC_SLEEP_TIME_IN_MILLIS_BETWEEN_CYCLE_UNIX_DEFAULT_VALUE ;\n@@ -389,9 +389,9 @@ public int getUserSearchScope() {\n \t\t}\n \t\t\n \t\tval = val.trim().toLowerCase();\n-\t\tif (val.equals(0) || val.startsWith(\"base\")) {\n+\t\tif (val.equals(\"0\") || val.startsWith(\"base\")) {\n \t\t\treturn 0; // object scope\n-\t\t} else if (val.equals(1) || val.startsWith(\"one\")) {\n+\t\t} else if (val.equals(\"1\") || val.startsWith(\"one\")) {\n \t\t\treturn 1; // one level scope\n \t\t} else {\n \t\t\treturn 2; // subtree scope"
            },
            {
                "sha": "408e861b031eddf5a3a80b0b8a4bb67c03174c6d",
                "filename": "ugsync/src/main/java/org/apache/ranger/unixusersync/poc/RangerClientUserGroupMapping.java",
                "status": "modified",
                "additions": 23,
                "deletions": 19,
                "changes": 42,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/ugsync/src/main/java/org/apache/ranger/unixusersync/poc/RangerClientUserGroupMapping.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/ugsync/src/main/java/org/apache/ranger/unixusersync/poc/RangerClientUserGroupMapping.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/ugsync/src/main/java/org/apache/ranger/unixusersync/poc/RangerClientUserGroupMapping.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -1,22 +1,22 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- * http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ * \r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n  package org.apache.ranger.unixusersync.poc;\r\n \r\n import java.io.BufferedReader;\r\n@@ -44,6 +44,10 @@\n \t    while ((strLine = br.readLine()) != null)  {\r\n \t    \t\r\n \t    \tListRangerUser userList = ListRangerUser.parseUser(strLine);\r\n+\r\n+            if (userList == null) {\r\n+                continue;\r\n+            }\r\n \t\t \r\n \t    \tHashMap<String, String> map = new HashMap<String, String>();\r\n          \r"
            },
            {
                "sha": "f1400b2e1d2798f548023e214470aeb1b84e66a6",
                "filename": "unixauthclient/src/main/java/org/apache/ranger/authentication/unix/jaas/ConsolePromptCallbackHandler.java",
                "status": "modified",
                "additions": 12,
                "deletions": 2,
                "changes": 14,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/unixauthclient/src/main/java/org/apache/ranger/authentication/unix/jaas/ConsolePromptCallbackHandler.java",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/unixauthclient/src/main/java/org/apache/ranger/authentication/unix/jaas/ConsolePromptCallbackHandler.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/unixauthclient/src/main/java/org/apache/ranger/authentication/unix/jaas/ConsolePromptCallbackHandler.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "patch": "@@ -42,13 +42,23 @@ public void handle(Callback[] callbacks) throws IOException, UnsupportedCallback\n \t\t          NameCallback nc = (NameCallback)cb ;\n \t\t          System.out.print(nc.getPrompt());\n \t\t          System.out.flush();\n-\t\t          nc.setName(reader.readLine());\n+                  String line = null;\n+\n+                  while (line == null) {\n+                    line = reader.readLine();\n+                  }\n+\t\t          nc.setName(line);\n \t\t\t}\n \t\t\telse if (cb instanceof PasswordCallback) {\n \t\t          PasswordCallback pc = (PasswordCallback)cb;\n \t\t          System.out.print(pc.getPrompt());\n \t\t          System.out.flush();\n-\t\t          pc.setPassword(reader.readLine().toCharArray());\t\t\t\t\n+\n+                  String line = null;\n+                  while (line == null) {\n+                    line = reader.readLine();\n+                  }\n+\t\t          pc.setPassword(line.toCharArray());\n \t\t\t}\n \t\t\telse {\n \t\t\t\tSystem.out.println(\"Unknown callbacl [\" + cb.getClass().getName() + \"]\") ;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/a9775857dcfb36477bd282e97e0a71380ffb700f",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/02b4790aae3e0b3da797499f6a275edb3385bdda",
        "message": "RANGER-850 Change mocking code of test test30getPolicyFromEventTime to elimate the spurious NPE",
        "bug_id": "ranger_14",
        "file": [
            {
                "sha": "7d2b98fce6f50d9f033af86688ced0358784682a",
                "filename": "security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/ranger/blob/a9775857dcfb36477bd282e97e0a71380ffb700f/security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java",
                "raw_url": "https://github.com/apache/ranger/raw/a9775857dcfb36477bd282e97e0a71380ffb700f/security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java?ref=a9775857dcfb36477bd282e97e0a71380ffb700f",
                "patch": "@@ -89,6 +89,7 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.MethodSorters;\n import org.mockito.InjectMocks;\n+import org.mockito.Matchers;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.runners.MockitoJUnitRunner;\n@@ -1012,7 +1013,7 @@ public void test30getPolicyFromEventTime() throws Exception {\n \t\tMockito.when(userMgr.getGroupsForUser(userName)).thenReturn(\n \t\t\t\tuserGroupsList);\n \n-\t\tMockito.when(restErrorUtil.createRESTException((String)null))\n+\t\tMockito.when(restErrorUtil.createRESTException(Matchers.anyInt(), Matchers.anyString(), Matchers.anyBoolean()))\n \t\t\t\t.thenThrow(new WebApplicationException());\n \t\tthrown.expect(WebApplicationException.class);\n \t"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/405c518531f63dd932791f9e5f0f6214aa7bd0a8",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/ddf9cfa74f22a7852430324e1c57be87dc72078e",
        "message": "RANGER-320: Usersync NPE when object does not have userNameAttribute",
        "bug_id": "ranger_15",
        "file": [
            {
                "sha": "011170c15fa2646013e448cee7b144f24200773f",
                "filename": "ugsync/src/main/java/org/apache/ranger/ldapusersync/process/LdapUserGroupBuilder.java",
                "status": "modified",
                "additions": 37,
                "deletions": 4,
                "changes": 41,
                "blob_url": "https://github.com/apache/ranger/blob/405c518531f63dd932791f9e5f0f6214aa7bd0a8/ugsync/src/main/java/org/apache/ranger/ldapusersync/process/LdapUserGroupBuilder.java",
                "raw_url": "https://github.com/apache/ranger/raw/405c518531f63dd932791f9e5f0f6214aa7bd0a8/ugsync/src/main/java/org/apache/ranger/ldapusersync/process/LdapUserGroupBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/ugsync/src/main/java/org/apache/ranger/ldapusersync/process/LdapUserGroupBuilder.java?ref=405c518531f63dd932791f9e5f0f6214aa7bd0a8",
                "patch": "@@ -31,6 +31,7 @@\n import javax.naming.InvalidNameException;\n import javax.naming.NamingEnumeration;\n import javax.naming.directory.Attribute;\n+import javax.naming.directory.Attributes;\n import javax.naming.directory.SearchControls;\n import javax.naming.directory.SearchResult;\n import javax.naming.ldap.Control;\n@@ -274,10 +275,42 @@ public void updateSink(UserGroupSink sink) throws Throwable {\n \t\t\t\twhile (userSearchResultEnum.hasMore()) {\n \t\t\t\t\t// searchResults contains all the user entries\n \t\t\t\t\tfinal SearchResult userEntry = userSearchResultEnum.next();\n-\t\t\t\t\tString userName = (String) userEntry.getAttributes()\n-\t\t\t\t\t\t.get(userNameAttribute).get();\n-\t\t\t\t\n-\t\t\t\t\n+\n+          if (userEntry == null)  {\n+            if (LOG.isInfoEnabled())  {\n+              LOG.info(\"userEntry null, skipping sync for the entry\");\n+            }\n+            continue;\n+          }\n+\n+          Attributes attributes =   userEntry.getAttributes();\n+          if (attributes == null)  {\n+            if (LOG.isInfoEnabled())  {\n+              LOG.info(\"attributes  missing for entry \" + userEntry.getNameInNamespace() +\n+                \", skipping sync\");\n+            }\n+            continue;\n+          }\n+\n+          Attribute userNameAttr  = attributes.get(userNameAttribute);\n+          if (userNameAttr == null)  {\n+            if (LOG.isInfoEnabled())  {\n+              LOG.info(userNameAttribute + \" missing for entry \" + userEntry.getNameInNamespace() +\n+                \", skipping sync\");\n+            }\n+            continue;\n+          }\n+\n+\t\t\t\t\tString userName = (String) userNameAttr.get();\n+\n+          if (userName == null || userName.trim().isEmpty())  {\n+            if (LOG.isInfoEnabled())  {\n+              LOG.info(userNameAttribute + \" empty for entry \" + userEntry.getNameInNamespace() +\n+                \", skipping sync\");\n+            }\n+            continue;\n+          }\n+\n \t\t\t\t\tif (userNameCaseConversionFlag) {\n \t\t\t\t\t\tif (userNameLowerCaseFlag) {\n \t\t\t\t\t\t\tuserName = userName.toLowerCase() ;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/878e2ac3f656502bd9aba150579de28b657845a1",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/66e5cfd96afe612dfcddd9e6fdf01885320f03de",
        "message": "RANGER-328: fix for NPE in Ranger policy engine",
        "bug_id": "ranger_16",
        "file": [
            {
                "sha": "5e9ca0c4fad95bb75e084206c90c0a9f6b95d428",
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/policyengine/RangerPolicyEngineImpl.java",
                "status": "modified",
                "additions": 21,
                "deletions": 2,
                "changes": 23,
                "blob_url": "https://github.com/apache/ranger/blob/878e2ac3f656502bd9aba150579de28b657845a1/agents-common/src/main/java/org/apache/ranger/plugin/policyengine/RangerPolicyEngineImpl.java",
                "raw_url": "https://github.com/apache/ranger/raw/878e2ac3f656502bd9aba150579de28b657845a1/agents-common/src/main/java/org/apache/ranger/plugin/policyengine/RangerPolicyEngineImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/policyengine/RangerPolicyEngineImpl.java?ref=878e2ac3f656502bd9aba150579de28b657845a1",
                "patch": "@@ -56,11 +56,14 @@ public String getServiceName() {\n \n \t@Override\n \tpublic RangerServiceDef getServiceDef() {\n+\t\tRangerPolicyRepository policyRepository = getPolicyRepository();\n+\n \t\treturn policyRepository == null ? null : policyRepository.getServiceDef();\n \t}\n \n \t@Override\n \tpublic List<RangerContextEnricher> getContextEnrichers() {\n+\t\tRangerPolicyRepository policyRepository = getPolicyRepository();\n \n \t\treturn policyRepository == null ? null : policyRepository.getContextEnrichers();\n \t}\n@@ -72,9 +75,11 @@ public void setPolicies(String serviceName, RangerServiceDef serviceDef, List<Ra\n \t\t}\n \n \t\tif (serviceName != null && serviceDef != null && policies != null) {\n-\t\t\tpolicyRepository = new RangerPolicyRepository(serviceName);\n+\t\t\tRangerPolicyRepository policyRepository = new RangerPolicyRepository(serviceName);\n \t\t\tpolicyRepository.init(serviceDef, policies);\n+\n \t\t\tthis.serviceName = serviceName;\n+\t\t\tsetPolicyRepository(policyRepository);\n \t\t} else {\n \t\t\tLOG.error(\"RangerPolicyEngineImpl.setPolicies ->Invalid arguments: serviceName, serviceDef, or policies is null\");\n \t\t}\n@@ -96,7 +101,9 @@ public RangerAuditHandler getDefaultAuditHandler() {\n \n \t@Override\n \tpublic RangerAccessResult createAccessResult(RangerAccessRequest request) {\n-\t\treturn policyRepository == null ? null : new RangerAccessResult(serviceName, policyRepository.getServiceDef(), request);\n+\t\tRangerPolicyRepository policyRepository = getPolicyRepository();\n+\n+\t\treturn new RangerAccessResult(serviceName, policyRepository == null ? null : policyRepository.getServiceDef(), request);\n \t}\n \n \t@Override\n@@ -160,6 +167,8 @@ protected RangerAccessResult isAccessAllowedNoAudit(RangerAccessRequest request)\n \t\t\tLOG.debug(\"==> RangerPolicyEngineImpl.isAccessAllowedNoAudit(\" + request + \")\");\n \t\t}\n \n+\t\tRangerPolicyRepository policyRepository = getPolicyRepository();\n+\n \t\tRangerAccessResult ret = createAccessResult(request);\n \n \t\tif(policyRepository != null && ret != null && request != null) {\n@@ -191,6 +200,14 @@ protected RangerAccessResult isAccessAllowedNoAudit(RangerAccessRequest request)\n \t\treturn ret;\n \t}\n \n+\tprivate RangerPolicyRepository getPolicyRepository() {\n+\t\treturn this.policyRepository;\n+\t}\n+\n+\tprivate void setPolicyRepository(RangerPolicyRepository policyRepository) {\n+\t\tthis.policyRepository = policyRepository;\n+\t}\n+\n \t@Override\n \tpublic String toString( ) {\n \t\tStringBuilder sb = new StringBuilder();\n@@ -201,6 +218,8 @@ public String toString( ) {\n \t}\n \n \tpublic StringBuilder toString(StringBuilder sb) {\n+\t\tRangerPolicyRepository policyRepository = getPolicyRepository();\n+\n \t\tsb.append(\"RangerPolicyEngineImpl={\");\n \n \t\tsb.append(\"serviceName={\").append(serviceName).append(\"} \");"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/1e8dc41a82e2217a5c10a67c8f6bb58b6e06342e",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/6a803eaa1a569753974e2c550a58fa1c2cf7e443",
        "message": "RANGER-203: fix NPE while getting policyId from the result.",
        "bug_id": "ranger_17",
        "file": [
            {
                "sha": "9cf57a9332ed7e55d96a855f7396b9d3d5c51a38",
                "filename": "hdfs-agent/src/main/java/org/apache/hadoop/hdfs/server/namenode/RangerFSPermissionChecker.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/ranger/blob/1e8dc41a82e2217a5c10a67c8f6bb58b6e06342e/hdfs-agent/src/main/java/org/apache/hadoop/hdfs/server/namenode/RangerFSPermissionChecker.java",
                "raw_url": "https://github.com/apache/ranger/raw/1e8dc41a82e2217a5c10a67c8f6bb58b6e06342e/hdfs-agent/src/main/java/org/apache/hadoop/hdfs/server/namenode/RangerFSPermissionChecker.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/hdfs-agent/src/main/java/org/apache/hadoop/hdfs/server/namenode/RangerFSPermissionChecker.java?ref=1e8dc41a82e2217a5c10a67c8f6bb58b6e06342e",
                "patch": "@@ -292,7 +292,8 @@ public void logAudit(RangerAccessResult result) {\n \t\tString              serviceName  = result.getServiceName();\n \t\tString              resourceType = getResourceName(request.getResource(), serviceDef);\n \t\tString              resourcePath = getResourceValueAsString(request.getResource(), serviceDef);\n-\t\tLong                policyId     = (result.getAccessTypeResults() != null && result.getAccessTypeResults().size() > 0) ? result.getAccessTypeResults().get(0).getPolicyId() : null;\n+\t\tLong                policyId     = (result.getAccessTypeResults() != null && !result.getAccessTypeResults().isEmpty())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t? result.getAccessTypeResults().values().iterator().next().getPolicyId() : null;\n \n \t\tauditEvent.setUser(request.getUser());\n \t\tauditEvent.setResourcePath(pathToBeValidated);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/427ed4a2b84139c8137becb4d06cdacbf890740d",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/4db23568ce81169ca8d750b9953110b0efb169ba",
        "message": "RANGER-726: Fixed a potential NPE\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>",
        "bug_id": "ranger_18",
        "file": [
            {
                "sha": "7a2422bfc01b80ec616c231a00f62064e0dbbb63",
                "filename": "tagsync/src/main/java/org/apache/ranger/tagsync/source/atlas/AtlasNotificationMapper.java",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "blob_url": "https://github.com/apache/ranger/blob/427ed4a2b84139c8137becb4d06cdacbf890740d/tagsync/src/main/java/org/apache/ranger/tagsync/source/atlas/AtlasNotificationMapper.java",
                "raw_url": "https://github.com/apache/ranger/raw/427ed4a2b84139c8137becb4d06cdacbf890740d/tagsync/src/main/java/org/apache/ranger/tagsync/source/atlas/AtlasNotificationMapper.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/tagsync/src/main/java/org/apache/ranger/tagsync/source/atlas/AtlasNotificationMapper.java?ref=427ed4a2b84139c8137becb4d06cdacbf890740d",
                "patch": "@@ -298,14 +298,18 @@ static private RangerServiceResource getServiceResource(IReferenceableInstance e\n \t\treturn ret;\n \t}\n \n-\tstatic private String[] getQualifiedNameComponents(IReferenceableInstance entity) {\n+\tstatic private String[] getQualifiedNameComponents(IReferenceableInstance entity) throws Exception {\n \t\tString ret[] = new String[MAX_HIERARCHY_LEVELS];\n \n \t\tString qualifiedNameAttributeName = StringUtils.equals(entity.getTypeName(), ENTITY_TYPE_HIVE_TABLE) ?\n \t\t\t\tENTITY_ATTRIBUTE_QUALIFIED_NAME_FOR_HIVE_TABLE : ENTITY_ATTRIBUTE_QUALIFIED_NAME;\n \n \t\tString qualifiedName = getEntityAttribute(entity, qualifiedNameAttributeName, String.class);\n \n+\t\tif (StringUtils.isBlank(qualifiedName)) {\n+\t\t\tthrow new Exception(\"Could not get a valid value for \" + qualifiedNameAttributeName + \" attribute from entity notification.\");\n+\t\t}\n+\n \t\tString nameHierarchy[] = qualifiedName.split(QUALIFIED_NAME_FORMAT_DELIMITER_STRING);\n \n \t\tint hierarchyLevels = nameHierarchy.length;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/f0218462c1865593cb9c56d7622a710852881ea6",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/cb7363d7e0c109a9ea1adc6d510928caa694b9a9",
        "message": "ARGUS-3: fix - DFS command fails with NPE",
        "bug_id": "ranger_19",
        "file": [
            {
                "sha": "59ed2d1e5c4849b8f85b52c2400875e360079c24",
                "filename": "hive-agent/src/main/java/com/xasecure/authorization/hive/XaHiveAccessContext.java",
                "status": "modified",
                "additions": 10,
                "deletions": 5,
                "changes": 15,
                "blob_url": "https://github.com/apache/ranger/blob/f0218462c1865593cb9c56d7622a710852881ea6/hive-agent/src/main/java/com/xasecure/authorization/hive/XaHiveAccessContext.java",
                "raw_url": "https://github.com/apache/ranger/raw/f0218462c1865593cb9c56d7622a710852881ea6/hive-agent/src/main/java/com/xasecure/authorization/hive/XaHiveAccessContext.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/hive-agent/src/main/java/com/xasecure/authorization/hive/XaHiveAccessContext.java?ref=f0218462c1865593cb9c56d7622a710852881ea6",
                "patch": "@@ -1,16 +1,21 @@\n package com.xasecure.authorization.hive;\n \n+import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveAuthzContext;\n+\n+\n public class XaHiveAccessContext {\n \tprivate String mClientIpAddress;\n \tprivate String mClientType;\n \tprivate String mCommandString;\n \tprivate String mSessionString;\n \t\n-\tpublic XaHiveAccessContext(String clientIpAddress, String clientType, String commandString, String sessionString) {\n-\t\tmClientIpAddress = clientIpAddress;\n-\t\tmClientType      = clientType;\n-\t\tmCommandString   = commandString;\n-\t\tmSessionString   = sessionString;\n+\tpublic XaHiveAccessContext(HiveAuthzContext context) {\n+\t\tif(context != null) {\n+\t\t\tmClientIpAddress = context.getIpAddress();\n+\t\t\tmClientType      = context.getClientType().name();\n+\t\t\tmCommandString   = context.getCommandString();\n+\t\t\tmSessionString   = context.getSessionString();\n+\t\t}\n \t}\n \n \tpublic String getClientIpAddress() {"
            },
            {
                "sha": "a7617ba09c5d38954698986572713f8a1de7d6b1",
                "filename": "hive-agent/src/main/java/com/xasecure/authorization/hive/authorizer/XaSecureHiveAuthorizer.java",
                "status": "modified",
                "additions": 8,
                "deletions": 6,
                "changes": 14,
                "blob_url": "https://github.com/apache/ranger/blob/f0218462c1865593cb9c56d7622a710852881ea6/hive-agent/src/main/java/com/xasecure/authorization/hive/authorizer/XaSecureHiveAuthorizer.java",
                "raw_url": "https://github.com/apache/ranger/raw/f0218462c1865593cb9c56d7622a710852881ea6/hive-agent/src/main/java/com/xasecure/authorization/hive/authorizer/XaSecureHiveAuthorizer.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/hive-agent/src/main/java/com/xasecure/authorization/hive/authorizer/XaSecureHiveAuthorizer.java?ref=f0218462c1865593cb9c56d7622a710852881ea6",
                "patch": "@@ -142,8 +142,8 @@ private XaHiveObjectAccessInfo getObjectAccessInfo(HiveOperationType hiveOpType,\n \t\tHiveObjectType objectType = getObjectType(hiveObj, hiveOpType);\n \t\tHiveAccessType accessType = getAccessType(hiveObj, hiveOpType, isInput);\n \t\tString         operType   = hiveOpType.name();\n-\t\t\n-\t\tXaHiveAccessContext hiveContext = new XaHiveAccessContext(context.getIpAddress(), context.getClientType().name(), context.getCommandString(), context.getSessionString());\n+\n+\t\tXaHiveAccessContext hiveContext = new XaHiveAccessContext(context);\n \n \t\tswitch(objectType) {\n \t\t\tcase DATABASE:\n@@ -488,10 +488,12 @@ private String toString(HiveOperationType         hiveOpType,\n \t\tsb.append(\"]\");\n \n \t\tsb.append(\", 'context':{\");\n-\t\tsb.append(\"'clientType':\").append(context.getClientType());\n-\t\tsb.append(\", 'commandString':\").append(context.getCommandString());\n-\t\tsb.append(\", 'ipAddress':\").append(context.getIpAddress());\n-\t\tsb.append(\", 'sessionString':\").append(context.getSessionString());\n+\t\tif(context != null) {\n+\t\t\tsb.append(\"'clientType':\").append(context.getClientType());\n+\t\t\tsb.append(\", 'commandString':\").append(context.getCommandString());\n+\t\t\tsb.append(\", 'ipAddress':\").append(context.getIpAddress());\n+\t\t\tsb.append(\", 'sessionString':\").append(context.getSessionString());\n+\t\t}\n \t\tsb.append(\"}\");\n \n \t\tsb.append(\", 'user':\").append(this.getCurrentUserGroupInfo().getUserName());"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/9bc895321c3e74bde904e385539c5f0f0c18a288",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/d79e8566fda5700683dc9d519392129ef8a7e9fe",
        "message": "RANGER-622 Hive plugin - add jar via beeline throws NPE in ranger code",
        "bug_id": "ranger_20",
        "file": [
            {
                "sha": "7aaf8a18884c4c1c2e0c2e65d886bf4b2053db38",
                "filename": "hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java",
                "status": "modified",
                "additions": 8,
                "deletions": 0,
                "changes": 8,
                "blob_url": "https://github.com/apache/ranger/blob/9bc895321c3e74bde904e385539c5f0f0c18a288/hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java",
                "raw_url": "https://github.com/apache/ranger/raw/9bc895321c3e74bde904e385539c5f0f0c18a288/hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java?ref=9bc895321c3e74bde904e385539c5f0f0c18a288",
                "patch": "@@ -241,6 +241,10 @@ public void checkPrivileges(HiveOperationType         hiveOpType,\n \t\t\t\tfor(HivePrivilegeObject hiveObj : inputHObjs) {\n \t\t\t\t\tRangerHiveResource resource = getHiveResource(hiveOpType, hiveObj);\n \n+\t\t\t\t\tif (resource == null) { // possible if input object/object is of a kind that we don't currently authorize\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\n \t\t\t\t\tif(resource.getObjectType() == HiveObjectType.URI) {\n \t\t\t\t\t\tString   path       = hiveObj.getObjectName();\n \t\t\t\t\t\tFsAction permission = FsAction.READ;\n@@ -270,6 +274,10 @@ public void checkPrivileges(HiveOperationType         hiveOpType,\n \t\t\t\tfor(HivePrivilegeObject hiveObj : outputHObjs) {\n \t\t\t\t\tRangerHiveResource resource = getHiveResource(hiveOpType, hiveObj);\n \n+\t\t\t\t\tif (resource == null) { // possible if input object/object is of a kind that we don't currently authorize\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\n \t\t\t\t\tif(resource.getObjectType() == HiveObjectType.URI) {\n \t\t\t\t\t\tString   path       = hiveObj.getObjectName();\n \t\t\t\t\t\tFsAction permission = FsAction.WRITE;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/4b0fd5dc874fbfb6952746413b2ff2caa17580b1",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/c50acc4482f9dd7ac42f9350e1fc3899df5334a8",
        "message": "RANGER-380: Fixed Case sensitive comparision - removed a possiblity of NPE",
        "bug_id": "ranger_21",
        "file": [
            {
                "sha": "fddd3e0b9199590fa9a5687d8bf6d1337ecd8895",
                "filename": "security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java",
                "status": "modified",
                "additions": 11,
                "deletions": 3,
                "changes": 14,
                "blob_url": "https://github.com/apache/ranger/blob/4b0fd5dc874fbfb6952746413b2ff2caa17580b1/security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java",
                "raw_url": "https://github.com/apache/ranger/raw/4b0fd5dc874fbfb6952746413b2ff2caa17580b1/security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java?ref=4b0fd5dc874fbfb6952746413b2ff2caa17580b1",
                "patch": "@@ -92,8 +92,11 @@ public SearchFilter getSearchFilterFromLegacyRequestForRepositorySearch(HttpServ\n \n \t\tret.setParam(SearchFilter.SERVICE_NAME, request.getParameter(\"name\"));\n \t\tret.setParam(SearchFilter.IS_ENABLED, request.getParameter(\"status\"));\n-\t\tret.setParam(SearchFilter.SERVICE_TYPE, request.getParameter(\"type\").toLowerCase());\n-\n+\t\tString serviceType = request.getParameter(\"type\") ;\n+\t\tif (serviceType != null) {\n+\t\t\tserviceType = serviceType.toLowerCase() ;\n+\t\t}\n+\t\tret.setParam(SearchFilter.SERVICE_TYPE,serviceType) ;\n \t\textractCommonCriteriasForFilter(request, ret, sortFields);\n \n \t\treturn ret;\n@@ -111,7 +114,12 @@ public SearchFilter getSearchFilterFromLegacyRequest(HttpServletRequest request,\n \t\t\tret.setParams(new HashMap<String, String>());\n \t\t}\n \n-\t\tret.setParam(SearchFilter.SERVICE_TYPE, request.getParameter(\"repositoryType\").toLowerCase());\n+\t\tString repositoryType = request.getParameter(\"repositoryType\") ;\n+\n+\t\tif (repositoryType != null) {\n+\t\t\trepositoryType = repositoryType.toLowerCase() ;\n+\t\t}\n+\t\tret.setParam(SearchFilter.SERVICE_TYPE, repositoryType) ;\n \t\tret.setParam(SearchFilter.SERVICE_NAME, request.getParameter(\"repositoryName\"));\n \t\tret.setParam(SearchFilter.SERVICE_ID, request.getParameter(\"repositoryId\"));\n \t\tret.setParam(SearchFilter.POLICY_NAME, request.getParameter(\"policyName\"));"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/87446272e0e3678463aad96770c7f957f1d9418b",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/24543ec1d171134f33bdd2544299b7ce2eec2c9d",
        "message": "Mainly potential NPE problems in security-admin process.\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>",
        "bug_id": "ranger_22",
        "file": [
            {
                "sha": "9d112561ffb9c8612feeb3cb63cc6d1ee447ba1d",
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java",
                "status": "modified",
                "additions": 9,
                "deletions": 7,
                "changes": 16,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "patch": "@@ -1047,13 +1047,15 @@ public VXAsset createXAsset(VXAsset vXAsset) {\n \t\t\txaBizUtil.createTrxLog(trxLogList);\n \t\t\treturn createdVXAsset;\n \t\t} else {\n-\t\t\tlogger.debug(\"User id : \" + usb.getUserId() + \" doesn't have \"\n-\t\t\t\t\t+ \"admin access to create repository.\");\n-\t\t\tthrow restErrorUtil\n-\t\t\t\t\t.createRESTException(\n-\t\t\t\t\t\t\t\"Sorry, you don't have permission to perform the operation\",\n-\t\t\t\t\t\t\tMessageEnums.OPER_NOT_ALLOWED_FOR_ENTITY);\n-\t\t}\n+                logger.debug(\"User id : \" + (usb != null ? usb.getUserId() : \"<UNKNOWN>\") + \" doesn't have \"\n+                        + \"admin access to create repository.\");\n+\n+                throw restErrorUtil\n+                        .createRESTException(\n+                                \"Sorry, you don't have permission to perform the operation\",\n+                                MessageEnums.OPER_NOT_ALLOWED_FOR_ENTITY);\n+\n+        }\n \t}\n \n \tprivate void createDefaultPolicy(VXAsset vXAsset, String config) {"
            },
            {
                "sha": "78c6c001a55daeaf7d0c204d7faabc7f2a36390a",
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "patch": "@@ -1038,8 +1038,7 @@ public VXPortalUser createDefaultAccountUser(VXPortalUser userProfile) {\n \t\t\tif (!session.isUserAdmin()) {\n \t\t\t\tthrow restErrorUtil.create403RESTException(\"User \"\n \t\t\t\t\t\t+ \"creation denied. LoggedInUser=\"\n-\t\t\t\t\t\t+ (session != null ? session.getXXPortalUser().getId()\n-\t\t\t\t\t\t\t\t: \"Not Logged In\")\n+\t\t\t\t\t\t+ session.getXXPortalUser().getId()\n \t\t\t\t\t\t+ \" ,isn't permitted to perform the action.\");\n \n \t\t\t}"
            },
            {
                "sha": "3ed6ff32f916ca04793dc7be1d6f47368f3b9a6f",
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/XUserMgr.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/biz/XUserMgr.java",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/biz/XUserMgr.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/XUserMgr.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "patch": "@@ -217,7 +217,7 @@ public VXUser updateXUser(VXUser vXUser) {\n \t\tString hiddenPasswordString = PropertiesUtil.getProperty(\n \t\t\t\t\"xa.password.hidden\", \"*****\");\n \t\tString password = vXUser.getPassword();\n-\t\tif (password != null && password.equals(hiddenPasswordString)) {\n+\t\tif (oldUserProfile != null && password != null && password.equals(hiddenPasswordString)) {\n \t\t\tvXPortalUser.setPassword(oldUserProfile.getPassword());\n \t\t}\n \t\tvXPortalUser.setPassword(password);"
            },
            {
                "sha": "2c93f8d069006db3539b28ceb5ef3502882b3943",
                "filename": "security-admin/src/main/java/org/apache/ranger/common/SearchGroup.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/common/SearchGroup.java",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/common/SearchGroup.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/common/SearchGroup.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "patch": "@@ -108,7 +108,7 @@ public String getWhereClause(String prefix) {\n \t */\n \tpublic void resolveValues(Query query, String prefix) {\n \t\tif ((values == null || values.size() == 0)\n-\t\t\t\t&& (searchGroups == null || searchGroups.size() == 0)) {\n+\t\t\t\t|| (searchGroups == null || searchGroups.size() == 0)) {\n \t\t\treturn;\n \t\t}\n "
            },
            {
                "sha": "a66928088c649bdff568f6d06cae6938b60a246a",
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "patch": "@@ -143,9 +143,9 @@ protected void validateForUpdate(VXAuditMap vObj, XXAuditMap mObj) {\n \n \t@Override\n \tprotected XXAuditMap mapViewToEntityBean(VXAuditMap vObj, XXAuditMap mObj, int OPERATION_CONTEXT) {\n-\t\tsuper.mapViewToEntityBean(vObj, mObj, OPERATION_CONTEXT);\n \t\tif(vObj!=null && mObj!=null){\n-\t\t\tXXPortalUser xXPortalUser=null;\n+            super.mapViewToEntityBean(vObj, mObj, OPERATION_CONTEXT);\n+            XXPortalUser xXPortalUser=null;\n \t\t\tif(mObj.getAddedByUserId()==null || mObj.getAddedByUserId()==0){\n \t\t\t\tif(!stringUtil.isEmpty(vObj.getOwner())){\n \t\t\t\t\txXPortalUser=rangerDaoManager.getXXPortalUser().findByLoginId(vObj.getOwner());\t"
            },
            {
                "sha": "9b8247c05d793f25eafbe365e3ad0db3081f04e9",
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "patch": "@@ -299,9 +299,9 @@ protected XXPermMap mapViewToEntityBean(VXPermMap vObj, XXPermMap mObj, int OPER\n \n \t@Override\n \tprotected VXPermMap mapEntityToViewBean(VXPermMap vObj, XXPermMap mObj) {\n-\t\tsuper.mapEntityToViewBean(vObj, mObj);\n \t\tif(mObj!=null && vObj!=null){\n-\t\t\tXXPortalUser xXPortalUser=null;\n+            super.mapEntityToViewBean(vObj, mObj);\n+            XXPortalUser xXPortalUser=null;\n \t\t\tif(stringUtil.isEmpty(vObj.getOwner())){\n \t\t\t\txXPortalUser= rangerDaoManager.getXXPortalUser().getById(mObj.getAddedByUserId());\t\n \t\t\t\tif(xXPortalUser!=null){"
            },
            {
                "sha": "a7e2f12dada4560738249bb64e6587ee4d0d2bd5",
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XResourceService.java",
                "status": "modified",
                "additions": 10,
                "deletions": 10,
                "changes": 20,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XResourceService.java",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XResourceService.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XResourceService.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "patch": "@@ -275,7 +275,7 @@ protected void validateForUpdate(VXResource vObj, XXResource mObj) {\n \t\t\t\t\t\t+ \"resource path.\", MessageEnums.INVALID_INPUT_DATA);\n \t\t\t}\n \t\t}\n-\t\tif (!vObj.getName().equalsIgnoreCase(mObj.getName()) || \n+\t\tif (vObj != null && mObj != null && !vObj.getName().equalsIgnoreCase(mObj.getName()) ||\n \t\t\t\tvObj.getIsRecursive()!=mObj.getIsRecursive() || \n \t\t\t\tvObj.getResourceType() != mObj.getResourceType()) {\n \t\t\tvalidateForCreate(vObj);\n@@ -340,8 +340,8 @@ private void populateAssetProperties(VXResource vXResource) {\n \t\t\t\tvXResource.getAssetId());\n \t\tif (xxAsset != null) {\n \t\t\tvXResource.setAssetName(xxAsset.getName());\n-\t\t}\n-\t\tvXResource.setAssetType(xxAsset.getAssetType());\n+            vXResource.setAssetType(xxAsset.getAssetType());\n+        }\n \t}\n \n \tprivate void populateAuditList(VXResource vXResource) {\n@@ -451,22 +451,22 @@ protected XXResource mapViewToEntityBean(VXResource vObj, XXResource mObj, int O\n \n \t@Override\n \tprotected VXResource mapEntityToViewBean(VXResource vObj, XXResource mObj) {\n-\t\tsuper.mapEntityToViewBean(vObj, mObj);\n-\t\tvObj.setUdfs(mObj.getUdfs());\n-\t\tpopulateAssetProperties(vObj);\n-\t\tif(mObj!=null && vObj!=null){\t\t\t\n+        if(mObj!=null && vObj!=null){\n+            super.mapEntityToViewBean(vObj, mObj);\n+\t\t    vObj.setUdfs(mObj.getUdfs());\n+\t\t    populateAssetProperties(vObj);\n \t\t\tXXPortalUser xXPortalUser= null;\n \t\t\tif(stringUtil.isEmpty(vObj.getOwner())){\n-\t\t\t\txXPortalUser=rangerDaoManager.getXXPortalUser().getById(mObj.getAddedByUserId());\t\t\n+\t\t\t\txXPortalUser=rangerDaoManager.getXXPortalUser().getById(mObj.getAddedByUserId());\n \t\t\t\tif(xXPortalUser!=null){\n \t\t\t\t\tvObj.setOwner(xXPortalUser.getLoginId());\n \t\t\t\t}\n \t\t\t}\n \t\t\tif(stringUtil.isEmpty(vObj.getUpdatedBy())){\n-\t\t\t\txXPortalUser= rangerDaoManager.getXXPortalUser().getById(mObj.getUpdatedByUserId());\t\t\n+\t\t\t\txXPortalUser= rangerDaoManager.getXXPortalUser().getById(mObj.getUpdatedByUserId());\n \t\t\t\tif(xXPortalUser!=null){\n \t\t\t\t\tvObj.setUpdatedBy(xXPortalUser.getLoginId());\n-\t\t\t\t}\t\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn vObj;"
            },
            {
                "sha": "d847ca077008c3b3ea10ab40129ee675af06a6cb",
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XUserService.java",
                "status": "modified",
                "additions": 2,
                "deletions": 4,
                "changes": 6,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XUserService.java",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XUserService.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XUserService.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "patch": "@@ -261,10 +261,8 @@ private void populateUserAttributes(String userName, VXUser vObj) {\n \n \tpublic List<XXTrxLog> getTransactionLog(VXUser vObj, VXPortalUser mObj,\n \t\t\tString action) {\n-\t\tif (vObj == null\n-\t\t\t\t&& (action == null || !action.equalsIgnoreCase(\"update\"))) {\n-\t\t\treturn null;\n-\t\t}\n+\t\tif (vObj == null || action == null || (action.equalsIgnoreCase(\"update\") && mObj == null))\n+\t    \t\treturn null;\n \n \t\tList<XXTrxLog> trxLogList = new ArrayList<XXTrxLog>();\n \t\ttry {"
            },
            {
                "sha": "2b62c4f499a4c24a69ac0fd93c7f476e263a1998",
                "filename": "storm-agent/src/main/java/org/apache/ranger/services/storm/client/StormClient.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/storm-agent/src/main/java/org/apache/ranger/services/storm/client/StormClient.java",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/storm-agent/src/main/java/org/apache/ranger/services/storm/client/StormClient.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/storm-agent/src/main/java/org/apache/ranger/services/storm/client/StormClient.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "patch": "@@ -366,8 +366,7 @@ public static StormClient getStormClient(String serviceName,\n \t\t\t}\n \n \t\t\tif (topologyName != null) {\n-\t\t\t\tString finalTopologyNameMatching = (topologyName == null) ? \"\"\n-\t\t\t\t\t\t: topologyName.trim();\n+\t\t\t\tString finalTopologyNameMatching = topologyName.trim();\n \t\t\t\tresultList = stormClient\n \t\t\t\t\t\t.getTopologyList(finalTopologyNameMatching,stormTopologyList);\n \t\t\t\tif (resultList != null) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/87d97cd14903b1bada33225081ec67d0ea6079da",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/cd234cd617090f1a23e61e78bfe17219e54a2eca",
        "message": "RANGER-753: Fixed a potential NPE introduced in Optimize Tag Download Performance\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>",
        "bug_id": "ranger_23",
        "file": [
            {
                "sha": "93fbcd4464112d2e4733e82ac4a5c43b8a1fed08",
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/policyevaluator/RangerDefaultPolicyEvaluator.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/ranger/blob/87d97cd14903b1bada33225081ec67d0ea6079da/agents-common/src/main/java/org/apache/ranger/plugin/policyevaluator/RangerDefaultPolicyEvaluator.java",
                "raw_url": "https://github.com/apache/ranger/raw/87d97cd14903b1bada33225081ec67d0ea6079da/agents-common/src/main/java/org/apache/ranger/plugin/policyevaluator/RangerDefaultPolicyEvaluator.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/policyevaluator/RangerDefaultPolicyEvaluator.java?ref=87d97cd14903b1bada33225081ec67d0ea6079da",
                "patch": "@@ -71,7 +71,9 @@ public void init(RangerPolicy policy, RangerServiceDef serviceDef, RangerPolicyE\n \t\t}\n \n \t\tStringBuffer perfTagBuffer = new StringBuffer();\n-\t\tperfTagBuffer.append(\"policyId=\").append(policy.getId()).append(\", policyName=\").append(policy.getName());\n+\t\tif (policy != null) {\n+\t\t\tperfTagBuffer.append(\"policyId=\").append(policy.getId()).append(\", policyName=\").append(policy.getName());\n+\t\t}\n \n \t\tperfTag = perfTagBuffer.toString();\n "
            },
            {
                "sha": "43d2254cb061da18343041cffea70e53b80c5966",
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/store/AbstractTagStore.java",
                "status": "modified",
                "additions": 20,
                "deletions": 17,
                "changes": 37,
                "blob_url": "https://github.com/apache/ranger/blob/87d97cd14903b1bada33225081ec67d0ea6079da/agents-common/src/main/java/org/apache/ranger/plugin/store/AbstractTagStore.java",
                "raw_url": "https://github.com/apache/ranger/raw/87d97cd14903b1bada33225081ec67d0ea6079da/agents-common/src/main/java/org/apache/ranger/plugin/store/AbstractTagStore.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/store/AbstractTagStore.java?ref=87d97cd14903b1bada33225081ec67d0ea6079da",
                "patch": "@@ -113,32 +113,35 @@ public void deleteAllTagObjectsForService(String serviceName, boolean isResoureP\n \n \t\tList<RangerServiceResource> serviceResources = getServiceResourcesByService(serviceName);\n \n-\t\tSet<Long> tagsToDelete = new HashSet<Long>();\n+\t\tif (serviceResources != null) {\n \n+\t\t\tSet<Long> tagsToDelete = new HashSet<Long>();\n \n-\t\tfor (RangerServiceResource serviceResource : serviceResources) {\n-\t\t\tLong resourceId = serviceResource.getId();\n \n-\t\t\tList<RangerTagResourceMap> tagResourceMapsForService = getTagResourceMapsForResourceId(resourceId);\n+\t\t\tfor (RangerServiceResource serviceResource : serviceResources) {\n+\t\t\t\tLong resourceId = serviceResource.getId();\n \n-\t\t\tif (isResourePrivateTag) {\n+\t\t\t\tList<RangerTagResourceMap> tagResourceMapsForService = getTagResourceMapsForResourceId(resourceId);\n+\n+\t\t\t\tif (isResourePrivateTag) {\n+\t\t\t\t\tfor (RangerTagResourceMap tagResourceMap : tagResourceMapsForService) {\n+\t\t\t\t\t\tLong tagId = tagResourceMap.getTagId();\n+\t\t\t\t\t\tRangerTag tag = getTag(tagId);\n+\t\t\t\t\t\ttagsToDelete.add(tag.getId());\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tfor (RangerTagResourceMap tagResourceMap : tagResourceMapsForService) {\n-\t\t\t\t\tLong tagId = tagResourceMap.getTagId();\n-\t\t\t\t\tRangerTag tag = getTag(tagId);\n-\t\t\t\t\ttagsToDelete.add(tag.getId());\n+\t\t\t\t\tdeleteTagResourceMap(tagResourceMap.getId());\n \t\t\t\t}\n \t\t\t}\n-\t\t\tfor (RangerTagResourceMap tagResourceMap : tagResourceMapsForService) {\n-\t\t\t\tdeleteTagResourceMap(tagResourceMap.getId());\n-\t\t\t}\n-\t\t}\n \n-\t\tfor (RangerServiceResource serviceResource : serviceResources) {\n-\t\t\tdeleteServiceResource(serviceResource.getId());\n-\t\t}\n+\t\t\tfor (RangerServiceResource serviceResource : serviceResources) {\n+\t\t\t\tdeleteServiceResource(serviceResource.getId());\n+\t\t\t}\n \n-\t\tfor (Long tagId : tagsToDelete) {\n-\t\t\tdeleteTag(tagId);\n+\t\t\tfor (Long tagId : tagsToDelete) {\n+\t\t\t\tdeleteTag(tagId);\n+\t\t\t}\n \t\t}\n \n \t\tif (LOG.isDebugEnabled()) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/1d6351a6753920ef1d9abaef20ef64228037d890",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/105e71e9444054509ae9cfa2e5495fd3d47d362b",
        "message": "ARGUS-79:Checks for null to avoid NPE\n\nSigned-off-by: sneethiraj <sneethir@apache.org>",
        "bug_id": "ranger_24",
        "file": [
            {
                "sha": "6c8a4c8eb15445708fee6a9ba1fa548d6e9e0d38",
                "filename": "security-admin/src/main/java/com/xasecure/biz/AssetMgr.java",
                "status": "modified",
                "additions": 8,
                "deletions": 4,
                "changes": 12,
                "blob_url": "https://github.com/apache/ranger/blob/1d6351a6753920ef1d9abaef20ef64228037d890/security-admin/src/main/java/com/xasecure/biz/AssetMgr.java",
                "raw_url": "https://github.com/apache/ranger/raw/1d6351a6753920ef1d9abaef20ef64228037d890/security-admin/src/main/java/com/xasecure/biz/AssetMgr.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/com/xasecure/biz/AssetMgr.java?ref=1d6351a6753920ef1d9abaef20ef64228037d890",
                "patch": "@@ -1922,15 +1922,19 @@ private void createResourcePathForStorm(VXResource vXResource) {\n \t\t\t\t\t\t\t\t\t.get(\"groups\");\n \t\t\t\t\t\t\tXXGroup xGroup = xADaoManager.getXXGroup()\n \t\t\t\t\t\t\t\t\t.getById(groupId);\n-\t\t\t\t\t\t\tgroups.add(xGroup.getName());\n-\t\t\t\t\t\t\tsortedPermMap.put(\"groups\", groups);\n+\t\t\t\t\t\t\tif(xGroup!=null && groups != null){\n+\t\t\t\t\t\t\t\tgroups.add(xGroup.getName());\n+\t\t\t\t\t\t\t\tsortedPermMap.put(\"groups\", groups);\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t} else if (userId != null) {\n \t\t\t\t\t\t\tSet<String> users = (Set<String>) sortedPermMap\n \t\t\t\t\t\t\t\t\t.get(\"users\");\n \t\t\t\t\t\t\tXXUser xUser = xADaoManager.getXXUser().getById(\n \t\t\t\t\t\t\t\t\tuserId);\n-\t\t\t\t\t\t\tusers.add(xUser.getName());\n-\t\t\t\t\t\t\tsortedPermMap.put(\"users\", users);\n+\t\t\t\t\t\t\tif (users != null && xUser != null) {\n+\t\t\t\t\t\t\t\tusers.add(xUser.getName());\n+\t\t\t\t\t\t\t\tsortedPermMap.put(\"users\", users);\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \n \t\t\t\t\t\tSet<String> access = (Set<String>) sortedPermMap"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/3a57aa3c324b5d3580209cdf96cd19451ee5efd5",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/aceff0e8ebedb490d8e4446fab8829a138fadd4b",
        "message": "RANGER-203: fix to update policyVersion in service on policy-create; fix for NPE in legacy repository retrieval API",
        "bug_id": "ranger_25",
        "file": [
            {
                "sha": "292a9b9b32b916b9a3d001a461f3321fcbfddcdb",
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/ranger/blob/3a57aa3c324b5d3580209cdf96cd19451ee5efd5/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "raw_url": "https://github.com/apache/ranger/raw/3a57aa3c324b5d3580209cdf96cd19451ee5efd5/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java?ref=3a57aa3c324b5d3580209cdf96cd19451ee5efd5",
                "patch": "@@ -600,6 +600,7 @@ public RangerPolicy createPolicy(RangerPolicy policy) throws Exception {\n \t\tcreateNewResourcesForPolicy(policy, xCreatedPolicy, resources);\n \t\tcreateNewPolicyItemsForPolicy(policy, xCreatedPolicy, policyItems, xServiceDef);\n \t\t\n+\t\thandlePolicyUpdate(service);\n \t\tRangerPolicy createdPolicy = policyService.getPopulatedViewObject(xCreatedPolicy);\n \t\tdataHistService.createObjectDataHistory(createdPolicy, RangerDataHistService.ACTION_CREATE);\n \t\t"
            },
            {
                "sha": "d26f4c5caee7450281c3b4434385d1b28508e2f5",
                "filename": "security-admin/src/main/java/org/apache/ranger/common/ServiceUtil.java",
                "status": "modified",
                "additions": 27,
                "deletions": 12,
                "changes": 39,
                "blob_url": "https://github.com/apache/ranger/blob/3a57aa3c324b5d3580209cdf96cd19451ee5efd5/security-admin/src/main/java/org/apache/ranger/common/ServiceUtil.java",
                "raw_url": "https://github.com/apache/ranger/raw/3a57aa3c324b5d3580209cdf96cd19451ee5efd5/security-admin/src/main/java/org/apache/ranger/common/ServiceUtil.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/common/ServiceUtil.java?ref=3a57aa3c324b5d3580209cdf96cd19451ee5efd5",
                "patch": "@@ -27,6 +27,8 @@\n import java.util.Map.Entry;\n \n import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.log4j.Logger;\n import org.apache.ranger.db.RangerDaoManager;\n import org.apache.ranger.entity.XXGroup;\n import org.apache.ranger.entity.XXUser;\n@@ -45,7 +47,8 @@\n \n @Component\n public class ServiceUtil {\n-\t\n+\tstatic final Logger LOG = Logger.getLogger(ServiceUtil.class);\n+\n \tstatic Map<String, Integer> mapServiceTypeToAssetType = new HashMap<String, Integer>();\n \tstatic Map<String, Integer> mapAccessTypeToPermType   = new HashMap<String, Integer>();\n \t\n@@ -119,15 +122,21 @@ public VXAsset toVXAsset(RangerService service) {\n \t\t\treturn null;\n \t\t}\n \n-\t\tVXAsset ret = new VXAsset();\n+\t\tVXAsset ret = null;\n \n-\t\trangerObjectToDataObject(service, ret);\n-\n-\t\tret.setAssetType(toAssetType(service.getType()));\n-\t\tret.setName(service.getName());\n-\t\tret.setDescription(service.getDescription());\n-\t\tret.setActiveStatus(service.getIsEnabled() ? RangerCommonEnums.STATUS_ENABLED : RangerCommonEnums.STATUS_DISABLED);\n-\t\tret.setConfig(jsonUtil.readMapToString(service.getConfigs()));\n+\t\tInteger assetType = toAssetType(service.getType());\n+\t\t\n+\t\tif(assetType != null) {\n+\t\t\tret = new VXAsset();\n+\t\n+\t\t\trangerObjectToDataObject(service, ret);\n+\t\n+\t\t\tret.setAssetType(toAssetType(service.getType()));\n+\t\t\tret.setName(service.getName());\n+\t\t\tret.setDescription(service.getDescription());\n+\t\t\tret.setActiveStatus(service.getIsEnabled() ? RangerCommonEnums.STATUS_ENABLED : RangerCommonEnums.STATUS_DISABLED);\n+\t\t\tret.setConfig(jsonUtil.readMapToString(service.getConfigs()));\n+\t\t}\n \n \t\treturn ret;\n \t}\n@@ -188,6 +197,8 @@ public RangerPolicy toRangerPolicy(VXResource resource, RangerService service) {\n \t\t\tList<RangerPolicyItemAccess> accessList = new ArrayList<RangerPolicyItemAccess>();\n \t\t\tString                       ipAddress  = null;\n \n+\t\t\tRangerPolicy.RangerPolicyItem policyItem = new RangerPolicy.RangerPolicyItem();\n+\n \t\t\tfor(VXPermMap permMap : entry.getValue()) {\n \t\t\t\tif(permMap.getPermFor() == AppConstants.XA_PERM_FOR_USER) {\n \t\t\t\t\tString userName = getUserName(permMap);\n@@ -203,13 +214,17 @@ public RangerPolicy toRangerPolicy(VXResource resource, RangerService service) {\n \t\t\t\t\t}\t\t\t\t\t\n \t\t\t\t} \n \n-\t\t\t\taccessList.add(new RangerPolicyItemAccess(toAccessType(permMap.getPermType())));\n+\t\t\t\tString accessType = toAccessType(permMap.getPermType());\n+\t\t\t\t\n+\t\t\t\tif(StringUtils.equalsIgnoreCase(accessType, \"Admin\")) {\n+\t\t\t\t\tpolicyItem.setDelegateAdmin(Boolean.TRUE);\n+\t\t\t\t} else {\n+\t\t\t\t\taccessList.add(new RangerPolicyItemAccess(accessType));\n+\t\t\t\t}\n \n \t\t\t\tipAddress = permMap.getIpAddress();\n \t\t\t}\n \t\t\t\n-\t\t\tRangerPolicy.RangerPolicyItem policyItem = new RangerPolicy.RangerPolicyItem();\n-\n \t\t\tpolicyItem.setUsers(userList);\n \t\t\tpolicyItem.setGroups(groupList);\n \t\t\tpolicyItem.setAccesses(accessList);"
            },
            {
                "sha": "753a3bf08dd5f9465b2b63d7a5701ad87e937810",
                "filename": "security-admin/src/main/java/org/apache/ranger/rest/AssetREST.java",
                "status": "modified",
                "additions": 6,
                "deletions": 2,
                "changes": 8,
                "blob_url": "https://github.com/apache/ranger/blob/3a57aa3c324b5d3580209cdf96cd19451ee5efd5/security-admin/src/main/java/org/apache/ranger/rest/AssetREST.java",
                "raw_url": "https://github.com/apache/ranger/raw/3a57aa3c324b5d3580209cdf96cd19451ee5efd5/security-admin/src/main/java/org/apache/ranger/rest/AssetREST.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/rest/AssetREST.java?ref=3a57aa3c324b5d3580209cdf96cd19451ee5efd5",
                "patch": "@@ -239,10 +239,14 @@ public VXAssetList searchXAssets(@Context HttpServletRequest request) {\n \t\tList<RangerService> services = serviceREST.getServices(request);\n \n \t\tif(services != null) {\n-\t\t\tList<VXAsset> assets = new ArrayList<VXAsset>(services.size());\n+\t\t\tList<VXAsset> assets = new ArrayList<VXAsset>();\n \n \t\t\tfor(RangerService service : services) {\n-\t\t\t\tassets.add(serviceUtil.toVXAsset(service));\n+\t\t\t\tVXAsset asset = serviceUtil.toVXAsset(service);\n+\t\t\t\t\n+\t\t\t\tif(asset != null) {\n+\t\t\t\t\tassets.add(asset);\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\tret.setVXAssets(assets);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/c99b51c76007fa9c286c5ecb047142109da899aa",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/d3e9ad6d10419ffd31039150c54b167464bf8a59",
        "message": "ARGUS-43:Fixed NPE during grant call without repo type\n\nSigned-off-by: sneethiraj <sneethir@apache.org>",
        "bug_id": "ranger_26",
        "file": [
            {
                "sha": "a643e3b388852043fb60668822d1c4172de4ed2e",
                "filename": "security-admin/src/main/java/com/xasecure/service/XPolicyService.java",
                "status": "modified",
                "additions": 8,
                "deletions": 2,
                "changes": 10,
                "blob_url": "https://github.com/apache/ranger/blob/c99b51c76007fa9c286c5ecb047142109da899aa/security-admin/src/main/java/com/xasecure/service/XPolicyService.java",
                "raw_url": "https://github.com/apache/ranger/raw/c99b51c76007fa9c286c5ecb047142109da899aa/security-admin/src/main/java/com/xasecure/service/XPolicyService.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/com/xasecure/service/XPolicyService.java?ref=c99b51c76007fa9c286c5ecb047142109da899aa",
                "patch": "@@ -233,8 +233,14 @@ public VXResource mapPublicToXAObject(VXPolicy vXPolicy,\n \t\tvXResource.setColumns(vXPolicy.getColumns());\n \t\tvXResource.setUdfs(vXPolicy.getUdfs());\n \t\tvXResource.setAssetName(vXPolicy.getRepositoryName());\n-\t\tvXResource.setAssetType(AppConstants.getEnumFor_AssetType(vXPolicy\n-\t\t\t\t.getRepositoryType()));\n+\t\t\n+\t\tint assetType = AppConstants.getEnumFor_AssetType(vXPolicy\n+\t\t\t\t.getRepositoryType());\n+\t\tif (assetType == 0 || assetType == AppConstants.ASSET_UNKNOWN) {\n+\t\t\tassetType = xAsset.getAssetType();\n+\t\t\tvXPolicy.setRepositoryType(AppConstants.getLabelFor_AssetType(assetType));\n+\t\t}\n+\t\tvXResource.setAssetType(assetType);\n \n \t\tint resourceStatus = AppConstants.STATUS_ENABLED;\n \t\tif (!vXPolicy.getIsEnabled()) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/5876e22723c3ba82c405efbb29d97fae28e189aa",
        "message": "RANGER-274: Fixed minor bugs, potential NPE, REST resource path. Fixed service creation\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>",
        "bug_id": "ranger_27",
        "file": [
            {
                "sha": "de138ed9edb1ef14fc7b7693705be88c517dda83",
                "filename": "agents-common/src/main/java/org/apache/ranger/admin/client/RangerAdminRESTClient.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/admin/client/RangerAdminRESTClient.java",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/admin/client/RangerAdminRESTClient.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/admin/client/RangerAdminRESTClient.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "patch": "@@ -204,8 +204,7 @@ public ServiceTags getServiceTagsIfUpdated(long lastKnownVersion) throws Excepti\n \n \t\tServiceTags ret;\n \n-\t\tWebResource webResource = createWebResource(RangerRESTUtils.REST_URL_GET_SERVICE_TAGS_IF_UPDATED)\n-\t\t\t\t.queryParam(RangerRESTUtils.SERVICE_NAME_PARAM, serviceName)\n+\t\tWebResource webResource = createWebResource(RangerRESTUtils.REST_URL_GET_SERVICE_TAGS_IF_UPDATED + serviceName)\n \t\t\t\t.queryParam(RangerRESTUtils.LAST_KNOWN_TAG_VERSION_PARAM, Long.toString(lastKnownVersion))\n \t\t\t\t.queryParam(RangerRESTUtils.REST_PARAM_PLUGIN_ID, pluginId);\n "
            },
            {
                "sha": "889fbbcee0429f8ee13de389087a8b35bfa35719",
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerAdminTagRetriever.java",
                "status": "modified",
                "additions": 10,
                "deletions": 14,
                "changes": 24,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerAdminTagRetriever.java",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerAdminTagRetriever.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerAdminTagRetriever.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "patch": "@@ -69,29 +69,25 @@ public void setReceiver(RangerTagReceiver receiver) {\n \n \t@Override\n \tpublic void retrieveTags() {\n-\t\tif (adminClient != null) {\n+\t\tif (adminClient != null && receiver != null) {\n \t\t\tServiceTags serviceTags = null;\n-\t\t\tlong savedLastKnownVersion = lastKnownVersion;\n \t\t\ttry {\n \t\t\t\tserviceTags = adminClient.getServiceTagsIfUpdated(lastKnownVersion);\n-\t\t\t\tlastKnownVersion = serviceTags.getTagVersion();\n \t\t\t} catch (Exception exp) {\n-\t\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - Error retrieving resources\");\n+\t\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - Error retrieving resources, exception=\", exp);\n \t\t\t}\n \n-\t\t\tif (receiver != null && serviceTags != null) {\n-\t\t\t\tif (serviceTags.getTagVersion() != null && serviceTags.getTagVersion().longValue() > savedLastKnownVersion) {\n-\t\t\t\t\treceiver.setServiceTags(serviceTags);\n-\t\t\t\t} else {\n-\t\t\t\t\tif (LOG.isDebugEnabled()) {\n-\t\t\t\t\t\tLOG.debug(\"RangerAdminTagRetriever.retrieveTags() - no updates to tags !!\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\t\t\tif (serviceTags != null) {\n+\t\t\t\tLOG.info(\"RangerAdminTagRetriever.retrieveTags() - Updating tags-cache to new version of tags, lastKnownVersion=\" + lastKnownVersion + \"; newVersion=\" + serviceTags.getTagVersion());\n+\t\t\t\tlastKnownVersion = serviceTags.getTagVersion();\n+\t\t\t\treceiver.setServiceTags(serviceTags);\n \t\t\t} else {\n-\t\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - No receiver to send resources to \");\n+\t\t\t\tif (LOG.isDebugEnabled()) {\n+\t\t\t\t\tLOG.debug(\"RangerAdminTagRetriever.retrieveTags() - No need to update tags-cache. lastKnownVersion=\" + lastKnownVersion);\n+\t\t\t\t}\n \t\t\t}\n \t\t} else {\n-\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - No Tag Provider ...\");\n+\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - No admin client to get tags from or no tag receiver to update tag-cache\");\n \t\t}\n \t}\n "
            },
            {
                "sha": "83600c927880447527acd1745f7681da3b282188",
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerTagProvider.java",
                "status": "modified",
                "additions": 2,
                "deletions": 5,
                "changes": 7,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerTagProvider.java",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerTagProvider.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerTagProvider.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "patch": "@@ -161,17 +161,14 @@ public void setServiceTags(final ServiceTags serviceTags) {\n \n \t\t\tfor (RangerServiceResourceMatcher resourceMatcher : resourceMatchers) {\n \n-\t\t\t\tRangerServiceResource serviceResource = resourceMatcher.getServiceResource();\n-\t\t\t\tRangerPolicyResourceMatcher matcher = resourceMatcher.getPolicyResourceMatcher();\n-\n-\t\t\t\tboolean matchResult = matcher.isMatch(resource);\n+\t\t\t\tboolean matchResult = resourceMatcher.isMatch(resource);\n \n \t\t\t\tif (matchResult) {\n \t\t\t\t\tif (ret == null) {\n \t\t\t\t\t\tret = new ArrayList<RangerTag>();\n \t\t\t\t\t}\n \t\t\t\t\t// Find tags from serviceResource\n-\t\t\t\t\tret.addAll(getTagsForServiceResource(serviceTags, serviceResource));\n+\t\t\t\t\tret.addAll(getTagsForServiceResource(serviceTags, resourceMatcher.getServiceResource()));\n \t\t\t\t}\n \t\t\t}\n \t\t}"
            },
            {
                "sha": "0b4f0cad7f0bba8721088dc977a0b65e22df68e2",
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/store/file/TagFileStore.java",
                "status": "modified",
                "additions": 3,
                "deletions": 5,
                "changes": 8,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/store/file/TagFileStore.java",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/store/file/TagFileStore.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/store/file/TagFileStore.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "patch": "@@ -1026,6 +1026,7 @@ public ServiceTags getServiceTagsIfUpdated(String serviceName, Long lastKnownVer\n \t\t\tfilter.setParam(SearchFilter.TAG_RESOURCE_SERVICE_NAME, serviceName);\n \n \t\t\tList<RangerServiceResource> serviceResources = getServiceResources(filter);\n+\t\t\tList<RangerServiceResource> filteredServiceResources = new ArrayList<RangerServiceResource>();\n \n \t\t\tMap<Long, RangerTag> tagsMap = new HashMap<Long, RangerTag>();\n \t\t\tMap<Long, List<Long>> resourceToTagIdsMap = new HashMap<Long, List<Long>>();\n@@ -1040,14 +1041,11 @@ public ServiceTags getServiceTagsIfUpdated(String serviceName, Long lastKnownVer\n \t\t\t\t\t\ttagIdList.add(tag.getId());\n \t\t\t\t\t}\n \t\t\t\t\tresourceToTagIdsMap.put(serviceResource.getId(), tagIdList);\n+\t\t\t\t\tfilteredServiceResources.add(serviceResource);\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (MapUtils.isEmpty(resourceToTagIdsMap)) {\n-\t\t\t\tserviceResources.clear();\n-\t\t\t}\n-\n-\t\t\tret.setServiceResources(serviceResources);\n+\t\t\tret.setServiceResources(filteredServiceResources);\n \t\t\tret.setResourceToTagIds(resourceToTagIdsMap);\n \t\t\tret.setTags(tagsMap);\n "
            },
            {
                "sha": "ad113fef7100832aad656a61562ee06591f9493e",
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/util/RangerRESTUtils.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/util/RangerRESTUtils.java",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/util/RangerRESTUtils.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/util/RangerRESTUtils.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "patch": "@@ -40,9 +40,9 @@\n \tpublic static final String REST_URL_SERVICE_GRANT_ACCESS              = \"/service/plugins/services/grant/\";\n \tpublic static final String REST_URL_SERVICE_REVOKE_ACCESS             = \"/service/plugins/services/revoke/\";\n \n-\tpublic static final String REST_URL_GET_SERVICE_TAGS_IF_UPDATED = \"/service/tags/download\";\n+\tpublic static final String REST_URL_GET_SERVICE_TAGS_IF_UPDATED = \"/service/tags/download/\";\n \tpublic static final String SERVICE_NAME_PARAM = \"serviceName\";\n-\tpublic static final String LAST_KNOWN_TAG_VERSION_PARAM = \"tagVersion\";\n+\tpublic static final String LAST_KNOWN_TAG_VERSION_PARAM = \"lastKnownVersion\";\n \tpublic static final String PATTERN_PARAM = \"pattern\";\n \n \tpublic static final String REST_URL_LOOKUP_TAG_NAMES = \"/service/tags/lookup\";"
            },
            {
                "sha": "54241585facebff41cb6ae486e26c87cdef47f9a",
                "filename": "agents-common/src/test/java/org/apache/ranger/plugin/store/TestTagStore.java",
                "status": "modified",
                "additions": 33,
                "deletions": 31,
                "changes": 64,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/test/java/org/apache/ranger/plugin/store/TestTagStore.java",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/test/java/org/apache/ranger/plugin/store/TestTagStore.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/test/java/org/apache/ranger/plugin/store/TestTagStore.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "patch": "@@ -40,68 +40,66 @@\n import org.apache.ranger.plugin.util.SearchFilter;\n import org.apache.ranger.plugin.util.ServiceTags;\n import org.junit.BeforeClass;\n+import org.junit.AfterClass;\n import org.junit.Test;\n \n \n public class TestTagStore {\n \tstatic TagStore tagStore = null;\n \tstatic TagValidator validator = null;\n-\n+\tstatic RangerServiceDef serviceDef = null;\n+\tstatic RangerService service = null;\n \tstatic SearchFilter filter = null;\n-\tstatic Path filePath = new Path(\"file:///etc/ranger/data/ranger-admin-test-site.xml\");\n+\n+\tstatic String tmpDir = null;\n+\tstatic Path filePath = null;\n+\n \tstatic Configuration config = new Configuration();\n \n \tstatic final String serviceDefJsonFile = \"/admin/service-defs/test-hive-servicedef.json\";\n \tstatic final String serviceName = \"tag-unit-test-TestTagStore\";\n \n-\tstatic final String crcSuffix = \".crc\";\n-\tstatic final String jsonSuffix = \".json\";\n-\n \tstatic Gson gsonBuilder = null;\n-\tstatic RangerServiceDef serviceDef = null;\n-\tstatic RangerService service = null;\n \n \t@BeforeClass\n \tpublic static void setupTest() throws Exception {\n \n-\t\ttearDownAfterClass(crcSuffix);\n-\t\ttearDownAfterClass(jsonSuffix);\n+\t\ttmpDir = \"file://\" + System.getProperty(\"java.io.tmpdir\");\n \n-\t\tFileSystem fs = filePath.getFileSystem(config);\n-\n-\t\tFSDataOutputStream outStream = fs.create(filePath, true);\n-\t\tOutputStreamWriter writer = null;\n-\n-\t\twriter = new OutputStreamWriter(outStream);\n-\n-\t\twriter.write(\"<configuration>\\n\" +\n+\t\tString textTemplate = \"<configuration>\\n\" +\n \t\t\t\t\"        <property>\\n\" +\n \t\t\t\t\"                <name>ranger.tag.store.file.dir</name>\\n\" +\n-\t\t\t\t\"                <value>file:///etc/ranger/data</value>\\n\" +\n+\t\t\t\t\"                <value>%s</value>\\n\" +\n \t\t\t\t\"        </property>\\n\" +\n \t\t\t\t\"        <property>\\n\" +\n \t\t\t\t\"                <name>ranger.service.store.file.dir</name>\\n\" +\n-\t\t\t\t\"                <value>file:///etc/ranger/data</value>\\n\" +\n+\t\t\t\t\"                <value>%s</value>\\n\" +\n \t\t\t\t\"        </property>\\n\" +\n-\t\t\t\t\"</configuration>\\n\");\n+\t\t\t\t\"</configuration>\\n\";\n+\n+\t\tString text = String.format(textTemplate, tmpDir, tmpDir);\n \n+\t\tString fileName =  tmpDir + \"/ranger-admin-test-site.xml\";\n+\t\tfilePath = new Path(fileName);\n+\t\tFileSystem fs = filePath.getFileSystem(config);\n+\n+\t\tFSDataOutputStream outStream = fs.create(filePath, true);\n+\n+\t\tOutputStreamWriter writer = new OutputStreamWriter(outStream);\n+\t\twriter.write(text);\n \t\twriter.close();\n \n \t\tRangerConfiguration config = RangerConfiguration.getInstance();\n \t\tconfig.addResource(filePath);\n \n-\t\ttagStore = TagFileStore.getInstance();\n-\t\ttagStore.init();\n-\n-\t\tServiceStore svcStore;\n-\n-\t\tsvcStore = new ServiceFileStore();\n+\t\tServiceStore svcStore = new ServiceFileStore();\n \t\tsvcStore.init();\n \n+\t\ttagStore = TagFileStore.getInstance();\n+\t\ttagStore.init();\n \t\ttagStore.setServiceStore(svcStore);\n \n \t\tvalidator = new TagValidator();\n-\n \t\tvalidator.setTagStore(tagStore);\n \n \t\tgsonBuilder = new GsonBuilder().setDateFormat(\"yyyyMMdd-HH:mm:ss.SSS-Z\")\n@@ -110,17 +108,20 @@ public static void setupTest() throws Exception {\n \n \t\tInputStream inStream = TestTagStore.class.getResourceAsStream(serviceDefJsonFile);\n \t\tInputStreamReader reader = new InputStreamReader(inStream);\n+\n \t\tserviceDef = gsonBuilder.fromJson(reader, RangerServiceDef.class);\n+\n \t\tservice = svcStore.createService(new RangerService(serviceDef.getName(), serviceName, serviceName, null, null));\n+\n \t\treader.close();\n \t\tinStream.close();\n \n \t}\n \n-\t//@AfterClass\n-\tpublic static void tearDownAfterClass(String suffix) throws Exception {\n+\t@AfterClass\n+\tpublic static void tearDownAfterClass() throws Exception {\n \n-\t\tPath dirPath = new Path(\"file:///etc/ranger/data\");\n+\t\tPath dirPath = new Path(tmpDir);\n \t\tFileSystem fs = dirPath.getFileSystem(config);\n \n \t\ttry {\n@@ -132,7 +133,7 @@ public static void tearDownAfterClass(String suffix) throws Exception {\n \t\t\t\t\twhile (files.hasNext()) {\n \t\t\t\t\t\tLocatedFileStatus fileStatus = files.next();\n \t\t\t\t\t\tPath path = fileStatus.getPath();\n-\t\t\t\t\t\tif (fs.isFile(path) && path.getName().endsWith(suffix)) {\n+\t\t\t\t\t\tif (fs.isFile(path)) {\n \t\t\t\t\t\t\tfs.delete(path, true);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n@@ -142,6 +143,7 @@ public static void tearDownAfterClass(String suffix) throws Exception {\n \t\t}\n \n \t\tfs.delete(filePath, true);\n+\n \t}\n \n \t@Test"
            },
            {
                "sha": "a4765acd83d381dde11a01a9a249531ca3733469",
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "patch": "@@ -1027,6 +1027,7 @@ public RangerService createService(RangerService service) throws Exception {\n \n \t\t// While creating, value of version should be 1.\n \t\tservice.setVersion(new Long(1));\n+\t\tservice.setTagVersion(new Long(1));\n \n \t\tif (populateExistingBaseFields) {\n \t\t\tsvcServiceWithAssignedId.setPopulateExistingBaseFields(true);"
            },
            {
                "sha": "91525df50a70c8e96fba462ebcffa39bc0400718",
                "filename": "security-admin/src/main/java/org/apache/ranger/rest/TagRESTConstants.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/rest/TagRESTConstants.java",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/rest/TagRESTConstants.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/rest/TagRESTConstants.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "patch": "@@ -29,8 +29,8 @@\n \tstatic final String RESOURCES_RESOURCE       = \"/resources/\";\n \tstatic final String RESOURCE_RESOURCE        = \"/resource/\";\n \tstatic final String TAGRESOURCEMAPS_RESOURCE = \"/tagresourcemaps/\";\n-\tstatic final String TAGNAMES_RESOURCE        = \"/tags/names/\";\n-\tstatic final String LOOKUP_TAGS_RESOURCE     = \"/tags/lookup/\";\n+\tstatic final String TAGNAMES_RESOURCE        = \"/names/\";\n+\tstatic final String LOOKUP_TAGS_RESOURCE     = \"/lookup/\";\n \tstatic final String TAGS_DOWNLOAD            = \"/download/\";\n \n \tpublic static final String SERVICE_NAME_PARAM           = \"serviceName\";"
            },
            {
                "sha": "3cbeaf0bdfbc9aca20b44387a39fb1f970e1f1c0",
                "filename": "security-admin/src/main/java/org/apache/ranger/service/RangerServiceServiceBase.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/service/RangerServiceServiceBase.java",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/service/RangerServiceServiceBase.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/RangerServiceServiceBase.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "patch": "@@ -95,7 +95,9 @@ protected XXServiceBase mapViewToEntityBean(RangerService vObj, XXServiceBase xO\n \t\txObj.setName(vObj.getName());\n \t\txObj.setTagService(tagServiceId);\n \t\txObj.setPolicyVersion(vObj.getPolicyVersion());\n+\t\txObj.setTagVersion(vObj.getTagVersion());\n \t\txObj.setPolicyUpdateTime(vObj.getPolicyUpdateTime());\n+\t\txObj.setTagUpdateTime(vObj.getTagUpdateTime());\n \t\txObj.setDescription(vObj.getDescription());\n \t\txObj.setIsEnabled(vObj.getIsEnabled());\n \t\treturn xObj;\n@@ -113,7 +115,9 @@ protected RangerService mapEntityToViewBean(RangerService vObj, XXServiceBase xO\n \t\tvObj.setDescription(xObj.getDescription());\n \t\tvObj.setTagService(xTagService != null ? xTagService.getName() : null);\n \t\tvObj.setPolicyVersion(xObj.getPolicyVersion());\n+\t\tvObj.setTagVersion(xObj.getTagVersion());\n \t\tvObj.setPolicyUpdateTime(xObj.getPolicyUpdateTime());\n+\t\tvObj.setTagUpdateTime(xObj.getTagUpdateTime());\n \t\tvObj.setIsEnabled(xObj.getIsenabled());\n \t\treturn vObj;\n \t}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/3bed641fe69ba15d69a0c88a81eecab905fff8e0",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/3a0982b5133ab9d786956d15e07d65f2af6401b9",
        "message": "RANGER-274: Fixed NPE in RangerHdfsAuthorizer when audit is done without any Ranger policy allowing audit\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>",
        "bug_id": "ranger_28",
        "file": [
            {
                "sha": "2b52670d1fdb25208e2fbee420ce12d5da775f60",
                "filename": "hdfs-agent/src/main/java/org/apache/ranger/authorization/hadoop/RangerHdfsAuthorizer.java",
                "status": "modified",
                "additions": 18,
                "deletions": 14,
                "changes": 32,
                "blob_url": "https://github.com/apache/ranger/blob/3bed641fe69ba15d69a0c88a81eecab905fff8e0/hdfs-agent/src/main/java/org/apache/ranger/authorization/hadoop/RangerHdfsAuthorizer.java",
                "raw_url": "https://github.com/apache/ranger/raw/3bed641fe69ba15d69a0c88a81eecab905fff8e0/hdfs-agent/src/main/java/org/apache/ranger/authorization/hadoop/RangerHdfsAuthorizer.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/hdfs-agent/src/main/java/org/apache/ranger/authorization/hadoop/RangerHdfsAuthorizer.java?ref=3bed641fe69ba15d69a0c88a81eecab905fff8e0",
                "patch": "@@ -477,14 +477,16 @@ public void processResult(RangerAccessResult result) {\n \n \t\tauditEvent = super.getAuthzEvents(result);\n \n-\t\tRangerAccessRequest  request      = result.getAccessRequest();\n-\t\tRangerAccessResource resource     = request.getResource();\n-\t\tString               resourcePath = resource != null ? resource.getAsString() : null;\n-\n-\t\tauditEvent.setEventTime(request.getAccessTime());\n-\t\tauditEvent.setAccessType(request.getAction());\n-\t\tauditEvent.setResourcePath(this.pathToBeValidated);\n-\t\tauditEvent.setResultReason(resourcePath);\n+\t\tif (auditEvent != null) {\n+\t\t\tRangerAccessRequest request = result.getAccessRequest();\n+\t\t\tRangerAccessResource resource = request.getResource();\n+\t\t\tString resourcePath = resource != null ? resource.getAsString() : null;\n+\n+\t\t\tauditEvent.setEventTime(request.getAccessTime());\n+\t\t\tauditEvent.setAccessType(request.getAction());\n+\t\t\tauditEvent.setResourcePath(this.pathToBeValidated);\n+\t\t\tauditEvent.setResultReason(resourcePath);\n+\t\t}\n \n \t\tif(LOG.isDebugEnabled()) {\n \t\t\tLOG.debug(\"<== RangerHdfsAuditHandler.logAudit(\" + result + \"): \" + auditEvent);\n@@ -496,11 +498,13 @@ public void logHadoopEvent(String path, FsAction action, boolean accessGranted)\n \t\t\tLOG.debug(\"==> RangerHdfsAuditHandler.logHadoopEvent(\" + path + \", \" + action + \", \" + accessGranted + \")\");\n \t\t}\n \n-\t\tauditEvent.setResultReason(path);\n-\t\tauditEvent.setAccessResult((short) (accessGranted ? 1 : 0));\n-\t\tauditEvent.setAccessType(action == null ? null : action.toString());\n-\t\tauditEvent.setAclEnforcer(HadoopModuleName);\n-\t\tauditEvent.setPolicyId(-1);\n+\t\tif(auditEvent != null) {\n+\t\t\tauditEvent.setResultReason(path);\n+\t\t\tauditEvent.setAccessResult((short) (accessGranted ? 1 : 0));\n+\t\t\tauditEvent.setAccessType(action == null ? null : action.toString());\n+\t\t\tauditEvent.setAclEnforcer(HadoopModuleName);\n+\t\t\tauditEvent.setPolicyId(-1);\n+\t\t}\n \n \t\tif(LOG.isDebugEnabled()) {\n \t\t\tLOG.debug(\"<== RangerHdfsAuditHandler.logHadoopEvent(\" + path + \", \" + action + \", \" + accessGranted + \"): \" + auditEvent);\n@@ -512,7 +516,7 @@ public void flushAudit() {\n \t\t\tLOG.debug(\"==> RangerHdfsAuditHandler.flushAudit(\" + isAuditEnabled + \", \" + auditEvent + \")\");\n \t\t}\n \n-\t\tif(isAuditEnabled && !StringUtils.isEmpty(auditEvent.getAccessType())) {\n+\t\tif(isAuditEnabled && auditEvent != null && !StringUtils.isEmpty(auditEvent.getAccessType())) {\n \t\t\tString username = auditEvent.getUser();\n \n \t\t\tboolean skipLog = (username != null && excludeUsers != null && excludeUsers.contains(username)) ;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/ranger/commit/40b82337b9046d51484dd8f272e25ce991f5fe54",
        "repo": "ranger",
        "parent": "https://github.com/apache/ranger/commit/6fdad49d14470697b6156a01775f3f29960bc554",
        "message": "ARGUS-58: GRANT/REVOKE REST APIs don't handle 'Admin' privileges given\nto 'public' group. Includes fix for NPE in GRANT after a REVOKE was\nexecuted for the same user.",
        "bug_id": "ranger_29",
        "file": [
            {
                "sha": "dfed3b92366f071fa2a341a52dfb14b3b60efa87",
                "filename": "security-admin/src/main/java/com/xasecure/biz/AssetMgr.java",
                "status": "modified",
                "additions": 7,
                "deletions": 6,
                "changes": 13,
                "blob_url": "https://github.com/apache/ranger/blob/40b82337b9046d51484dd8f272e25ce991f5fe54/security-admin/src/main/java/com/xasecure/biz/AssetMgr.java",
                "raw_url": "https://github.com/apache/ranger/raw/40b82337b9046d51484dd8f272e25ce991f5fe54/security-admin/src/main/java/com/xasecure/biz/AssetMgr.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/com/xasecure/biz/AssetMgr.java?ref=40b82337b9046d51484dd8f272e25ce991f5fe54",
                "patch": "@@ -2643,9 +2643,10 @@ public VXResource grantXResource(VXResource vXResource,VXPolicy vXPolicy) {\n \t\t\t\t\t\tpermMapDeleteKeys.add(userKey);\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tfor (VXPermMap permMap : permMapListtoDelete) {\n-\t\t\t\t\tif(permMap!=null){\n-\t\t\t\t\t\tif(permMap==null||permMap.getPermFor()==0||(permMap.getUserId()==null && permMap.getGroupId()==null)){\n+\t\t\t\t\n+\t\t\t\tif(permMapListtoDelete != null) {\n+\t\t\t\t\tfor (VXPermMap permMap : permMapListtoDelete) {\n+\t\t\t\t\t\tif(permMap==null || permMap.getPermFor()==0 || (permMap.getUserId()==null && permMap.getGroupId()==null)){\n \t\t\t\t\t\t\tcontinue;\t\t\t\t\t\n \t\t\t\t\t\t}\n \t\t\t\t\t\tuserKey=null;\n@@ -2659,9 +2660,9 @@ public VXResource grantXResource(VXResource vXResource,VXPolicy vXPolicy) {\n \t\t\t\t\t\t\txPermMapService.deleteResource(permMap.getId());\n \t\t\t\t\t\t\ttrxLogListDelete.addAll(xPermMapService.getTransactionLog(permMap,\"delete\"));\n \t\t\t\t\t\t}\t\t\t\t\t\n-\t\t\t\t\t}\n-\t\t\t\t}//permission deletion processing end\n-\t\t\t\txaBizUtil.createTrxLog(trxLogListDelete);\t\n+\t\t\t\t\t}//permission deletion processing end\n+\t\t\t\t\txaBizUtil.createTrxLog(trxLogListDelete);\t\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\t"
            },
            {
                "sha": "464c2655f181ea3c6cab15838ace9111074607dd",
                "filename": "security-admin/src/main/java/com/xasecure/biz/XABizUtil.java",
                "status": "modified",
                "additions": 22,
                "deletions": 10,
                "changes": 32,
                "blob_url": "https://github.com/apache/ranger/blob/40b82337b9046d51484dd8f272e25ce991f5fe54/security-admin/src/main/java/com/xasecure/biz/XABizUtil.java",
                "raw_url": "https://github.com/apache/ranger/raw/40b82337b9046d51484dd8f272e25ce991f5fe54/security-admin/src/main/java/com/xasecure/biz/XABizUtil.java",
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/com/xasecure/biz/XABizUtil.java?ref=40b82337b9046d51484dd8f272e25ce991f5fe54",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.log4j.Logger;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n+\n import com.xasecure.common.GUIDUtil;\n import com.xasecure.common.XACommonEnums;\n import com.xasecure.common.XAConstants;\n@@ -95,6 +96,7 @@\n \tprivate static final String PATH_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrst0123456789-_.\";\n \tprivate static char[] PATH_CHAR_SET = PATH_CHARS.toCharArray();\n \tprivate static int PATH_CHAR_SET_LEN = PATH_CHAR_SET.length;\n+\tprivate static Long sGroupIdPublic = null;\n \n \tpublic XABizUtil() {\n \t\tmaxFirstNameLength = Integer.parseInt(PropertiesUtil.getProperty(\n@@ -1020,16 +1022,12 @@ private boolean checkUsrPermForPolicy(Long xUserId, int permission,\n \t\tboolean matchFound = false;\n \t\tfor (XXPermMap permMap : permMapList) {\n \t\t\tif (permMap.getPermType() == permission) {\n-\t\t\t\t// check whether permission is group permission and permission\n-\t\t\t\t// is enabled for group to which user belong\n-\t\t\t\tif (permMap.getPermFor() == AppConstants.XA_PERM_FOR_GROUP\n-\t\t\t\t\t\t&& isGroupInList(permMap.getGroupId(), userGroups)) {\n-\t\t\t\t\tmatchFound = true;\n-\t\t\t\t} // check whether permission is user permission and enabled to\n-\t\t\t\t\t// user\n-\t\t\t\telse if (permMap.getPermFor() == AppConstants.XA_PERM_FOR_USER\n-\t\t\t\t\t\t&& permMap.getUserId().equals(xUserId)) {\n-\t\t\t\t\tmatchFound = true;\n+\t\t\t\tif (permMap.getPermFor() == AppConstants.XA_PERM_FOR_GROUP) {\n+\t\t\t\t\t// check whether permission is enabled for public group or a group to which user belongs\n+\t\t\t\t\tmatchFound = isPublicGroupId(permMap.getGroupId()) || isGroupInList(permMap.getGroupId(), userGroups);\n+\t\t\t\t} else if (permMap.getPermFor() == AppConstants.XA_PERM_FOR_USER) {\n+\t\t\t\t\t// check whether permission is enabled to user\n+\t\t\t\t\tmatchFound = permMap.getUserId().equals(xUserId);\n \t\t\t\t}\n \t\t\t}\n \t\t\tif (matchFound) {\n@@ -1038,6 +1036,20 @@ else if (permMap.getPermFor() == AppConstants.XA_PERM_FOR_USER\n \t\t}\n \t\treturn matchFound;\n \t}\n+\t\n+\tpublic boolean isPublicGroupId(Long groupId) {\n+\t\treturn groupId != null && groupId == getPublicGroupId();\n+\t}\n+\t\n+\tpublic Long getPublicGroupId() {\n+\t\tif(sGroupIdPublic == null) {\n+\t\t\tXXGroup xXGroupPublic = daoManager.getXXGroup().findByGroupName(XAConstants.GROUP_PUBLIC);\n+\n+\t\t\tsGroupIdPublic = xXGroupPublic != null ? xXGroupPublic.getId() : null;\n+\t\t}\n+\n+\t\treturn sGroupIdPublic;\n+\t}\n \n \t/**\n \t * returns true is given group id is in given group list"
            }
        ]
    }
]
