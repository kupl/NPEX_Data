[
    {
        "commit": "https://github.com/apache/geronimo-health/commit/46a9a437656f7df7b1933e138760a3a858efe667",
        "repo": "geronimo-health",
        "parent": "https://github.com/apache/geronimo-health/commit/13323213c42e466fd1354851f4e37cdce858e4ec",
        "message": "GERONIMO-6753 fix NPE on the CDI extension for produced checks. Bean manager can't resolve the bean because we are using the producer class instead of the Healthcheck type",
        "bug_id": "geronimo-health_1",
        "file": [
            {
                "sha": "8d2e6c214b73d6421de5c065a7c7adc4ac3cd718",
                "filename": "geronimo-health/src/main/java/org/apache/geronimo/microprofile/impl/health/cdi/GeronimoHealthExtension.java",
                "status": "modified",
                "additions": 20,
                "deletions": 13,
                "changes": 33,
                "blob_url": "https://github.com/apache/geronimo-health/blob/46a9a437656f7df7b1933e138760a3a858efe667/geronimo-health/src/main/java/org/apache/geronimo/microprofile/impl/health/cdi/GeronimoHealthExtension.java",
                "raw_url": "https://github.com/apache/geronimo-health/raw/46a9a437656f7df7b1933e138760a3a858efe667/geronimo-health/src/main/java/org/apache/geronimo/microprofile/impl/health/cdi/GeronimoHealthExtension.java",
                "contents_url": "https://api.github.com/repos/apache/geronimo-health/contents/geronimo-health/src/main/java/org/apache/geronimo/microprofile/impl/health/cdi/GeronimoHealthExtension.java?ref=46a9a437656f7df7b1933e138760a3a858efe667",
                "patch": "@@ -5,9 +5,9 @@\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- *\n+ * <p/>\n  * http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p/>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -34,7 +34,6 @@\n import javax.enterprise.inject.spi.Extension;\n import javax.enterprise.inject.spi.ProcessBean;\n import javax.enterprise.util.AnnotationLiteral;\n-\n import org.apache.geronimo.microprofile.common.registry.HealthChecksRegistry;\n import org.eclipse.microprofile.health.Health;\n import org.eclipse.microprofile.health.HealthCheck;\n@@ -63,6 +62,7 @@ void findChecks(@Observes final ProcessBean<?> bean) {\n         if (!bean.getBean().getTypes().contains(HealthCheck.class)) {\n             return;\n         }\n+        // deprecated - use @Liveness or @Readiness\n         if (bean.getAnnotated().isAnnotationPresent(Health.class)) {\n             beans.add(bean.getBean());\n         }\n@@ -76,17 +76,20 @@ void findChecks(@Observes final ProcessBean<?> bean) {\n \n     void start(@Observes final AfterDeploymentValidation afterDeploymentValidation, final BeanManager beanManager) {\n         liveness = livenessBeans.stream()\n-             .map(it -> lookup(it, beanManager))\n-             .collect(toList());\n+                .map(it -> lookup(it, beanManager))\n+                .collect(toList());\n+\n         readiness = readinessBeans.stream()\n-             .map(it -> lookup(it, beanManager))\n-             .collect(toList());\n+                .map(it -> lookup(it, beanManager))\n+                .collect(toList());\n+\n+        // per spec, checks has everything including liveness and readiness\n         checks = Stream.concat(Stream.concat(\n-                    beans.stream()\n-                        .map(it -> lookup(it, beanManager)),\n-                    liveness.stream()),\n-                    readiness.stream())\n+                        beans.stream().map(it -> lookup(it, beanManager)),\n+                        liveness.stream()),\n+                        readiness.stream())\n                 .collect(toList());\n+\n         started = true;\n     }\n \n@@ -128,8 +131,12 @@ public boolean isReady() {\n     }\n \n     private HealthCheck lookup(final Bean<?> bean, final BeanManager manager) {\n-        final Class<?> type = bean.getBeanClass() == null ? HealthCheck.class : bean.getBeanClass();\n-        final Set<Bean<?>> beans = manager.getBeans(type, bean.getQualifiers().toArray(new Annotation[0]));\n+        // if this is not an instance of HealthCheck, then it's a producer (not sure it's enough)\n+        final Class<?> type = bean.getBeanClass() == null || !HealthCheck.class.isAssignableFrom(bean.getBeanClass())\n+                ? HealthCheck.class\n+                : bean.getBeanClass();\n+        final Set<Annotation> qualifiers = bean.getQualifiers();\n+        final Set<Bean<?>> beans = manager.getBeans(type, qualifiers.toArray(new Annotation[qualifiers.size()]));\n         final Bean<?> resolvedBean = manager.resolve(beans);\n         final CreationalContext<Object> creationalContext = manager.createCreationalContext(null);\n         if (!manager.isNormalScope(resolvedBean.getScope())) {"
            }
        ]
    }
]
