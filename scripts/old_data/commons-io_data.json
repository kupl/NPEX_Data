[
    {
        "commit": "https://github.com/apache/commons-io/commit/7fed4a30e3cab9171de459bd24fb3b8d838cd126",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/8c8b77006108b46d0693fe9bc9bde027582086c4",
        "message": "[IO-644] NPE in\norg.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(File, File) when\nonly one input is null.",
        "bug_id": "commons-io_1",
        "file": [
            {
                "sha": "c709b313908f24520c4f556c247925441356d334",
                "filename": "src/changes/changes.xml",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/commons-io/blob/7fed4a30e3cab9171de459bd24fb3b8d838cd126/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-io/raw/7fed4a30e3cab9171de459bd24fb3b8d838cd126/src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/changes/changes.xml?ref=7fed4a30e3cab9171de459bd24fb3b8d838cd126",
                "patch": "@@ -174,8 +174,8 @@ The <action> type attribute can be add,update,fix,remove.\n       <action issue=\"IO-643\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n         NPE in org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(Reader, Reader) when only one input is null.\n       </action>\n-      <action issue=\"IO-643\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n-        NPE in org.apache.commons.io.FileUtils.contentEquals(File, File) when only one input is null.\n+      <action issue=\"IO-644\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n+        NPE in org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(File, File) when only one input is null.\n       </action>\n     </release>\n "
            },
            {
                "sha": "4a2aa27bf5a731ab93792fad967e716d22ed493d",
                "filename": "src/main/java/org/apache/commons/io/FileUtils.java",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/commons-io/blob/7fed4a30e3cab9171de459bd24fb3b8d838cd126/src/main/java/org/apache/commons/io/FileUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/7fed4a30e3cab9171de459bd24fb3b8d838cd126/src/main/java/org/apache/commons/io/FileUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/FileUtils.java?ref=7fed4a30e3cab9171de459bd24fb3b8d838cd126",
                "patch": "@@ -445,6 +445,12 @@ public static boolean contentEquals(final File file1, final File file2) throws I\n      */\n     public static boolean contentEqualsIgnoreEOL(final File file1, final File file2, final String charsetName)\n             throws IOException {\n+        if (file1 == null && file2 == null) {\n+            return true;\n+        }\n+        if (file1 == null ^ file2 == null) {\n+            return false;\n+        }\n         final boolean file1Exists = file1.exists();\n         if (file1Exists != file2.exists()) {\n             return false;"
            },
            {
                "sha": "95f534312b5fb4cf6f01de61bcf4d7f92ec63332",
                "filename": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/commons-io/blob/7fed4a30e3cab9171de459bd24fb3b8d838cd126/src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/7fed4a30e3cab9171de459bd24fb3b8d838cd126/src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/java/org/apache/commons/io/FileUtilsTestCase.java?ref=7fed4a30e3cab9171de459bd24fb3b8d838cd126",
                "patch": "@@ -630,6 +630,9 @@ public void testContentEqualsIgnoreEOL() throws Exception {\n         // Non-existent files\n         final File file1 = new File(temporaryFolder, getName());\n         final File file2 = new File(temporaryFolder, getName() + \"2\");\n+        assertTrue(FileUtils.contentEqualsIgnoreEOL(null, null, null));\n+        assertFalse(FileUtils.contentEqualsIgnoreEOL(null, file1, null));\n+        assertFalse(FileUtils.contentEqualsIgnoreEOL(file1, null, null));\n         // both don't  exist\n         assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file1, null));\n         assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file2, null));"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/8c8b77006108b46d0693fe9bc9bde027582086c4",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/c936be45fac0d73ac27c207311e4e910bf0522e5",
        "message": "[IO-643] NPE in org.apache.commons.io.FileUtils.contentEquals(File,\nFile) when only one input is null.",
        "bug_id": "commons-io_2",
        "file": [
            {
                "sha": "03b78948baa4dd7a3ceb2e76d2ba9ef2e2a8175e",
                "filename": "src/changes/changes.xml",
                "status": "modified",
                "additions": 4,
                "deletions": 1,
                "changes": 5,
                "blob_url": "https://github.com/apache/commons-io/blob/8c8b77006108b46d0693fe9bc9bde027582086c4/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-io/raw/8c8b77006108b46d0693fe9bc9bde027582086c4/src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/changes/changes.xml?ref=8c8b77006108b46d0693fe9bc9bde027582086c4",
                "patch": "@@ -171,9 +171,12 @@ The <action> type attribute can be add,update,fix,remove.\n       <action issue=\"IO-641\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n         NPE in org.apache.commons.io.IOUtils.contentEquals(Reader, Reader) when only one input is null.\n       </action>\n-      <action issue=\"IO-642\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n+      <action issue=\"IO-643\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n         NPE in org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(Reader, Reader) when only one input is null.\n       </action>\n+      <action issue=\"IO-643\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n+        NPE in org.apache.commons.io.FileUtils.contentEquals(File, File) when only one input is null.\n+      </action>\n     </release>\n \n     <release version=\"2.6\" date=\"2017-10-15\" description=\"Java 7 required, Java 9 supported.\">"
            },
            {
                "sha": "25c6c7b7efe4294e55d58ca675ff9b05d35d8b60",
                "filename": "src/main/java/org/apache/commons/io/FileUtils.java",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/commons-io/blob/8c8b77006108b46d0693fe9bc9bde027582086c4/src/main/java/org/apache/commons/io/FileUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/8c8b77006108b46d0693fe9bc9bde027582086c4/src/main/java/org/apache/commons/io/FileUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/FileUtils.java?ref=8c8b77006108b46d0693fe9bc9bde027582086c4",
                "patch": "@@ -388,6 +388,12 @@ private static void cleanDirectoryOnExit(final File directory) throws IOExceptio\n      * @throws IOException in case of an I/O error\n      */\n     public static boolean contentEquals(final File file1, final File file2) throws IOException {\n+        if (file1 == null && file2 == null) {\n+            return true;\n+        }\n+        if (file1 == null ^ file2 == null) {\n+            return false;\n+        }\n         final boolean file1Exists = file1.exists();\n         if (file1Exists != file2.exists()) {\n             return false;"
            },
            {
                "sha": "924a3dff04ddb650088268b4ada9ee8f9c46dd1f",
                "filename": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/commons-io/blob/8c8b77006108b46d0693fe9bc9bde027582086c4/src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/8c8b77006108b46d0693fe9bc9bde027582086c4/src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/java/org/apache/commons/io/FileUtilsTestCase.java?ref=8c8b77006108b46d0693fe9bc9bde027582086c4",
                "patch": "@@ -571,6 +571,9 @@ public void testContentEquals() throws Exception {\n         // Non-existent files\n         final File file = new File(temporaryFolder, getName());\n         final File file2 = new File(temporaryFolder, getName() + \"2\");\n+        assertTrue(FileUtils.contentEquals(null, null));\n+        assertFalse(FileUtils.contentEquals(null, file));\n+        assertFalse(FileUtils.contentEquals(file, null));\n         // both don't  exist\n         assertTrue(FileUtils.contentEquals(file, file));\n         assertTrue(FileUtils.contentEquals(file, file2));"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/c936be45fac0d73ac27c207311e4e910bf0522e5",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/8b56fda49a913f26bbff128ac1b4e9eb3cb54cf5",
        "message": "[IO-642] NPE in\norg.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(Reader, Reader)\nwhen only one input is null.",
        "bug_id": "commons-io_3",
        "file": [
            {
                "sha": "35a79f0ebe6c7562a10ec821a73254f4af98b192",
                "filename": "src/changes/changes.xml",
                "status": "modified",
                "additions": 4,
                "deletions": 1,
                "changes": 5,
                "blob_url": "https://github.com/apache/commons-io/blob/c936be45fac0d73ac27c207311e4e910bf0522e5/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-io/raw/c936be45fac0d73ac27c207311e4e910bf0522e5/src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/changes/changes.xml?ref=c936be45fac0d73ac27c207311e4e910bf0522e5",
                "patch": "@@ -167,10 +167,13 @@ The <action> type attribute can be add,update,fix,remove.\n       </action>\n       <action issue=\"IO-640\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n         NPE in org.apache.commons.io.IOUtils.contentEquals(InputStream, InputStream) when only one input is null.\n-      </action>\n+      </action>\"src/changes/changes.xml\"\n       <action issue=\"IO-641\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n         NPE in org.apache.commons.io.IOUtils.contentEquals(Reader, Reader) when only one input is null.\n       </action>\n+      <action issue=\"IO-642\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n+        NPE in org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(Reader, Reader) when only one input is null.\n+      </action>\n     </release>\n \n     <release version=\"2.6\" date=\"2017-10-15\" description=\"Java 7 required, Java 9 supported.\">"
            },
            {
                "sha": "4f845599e2347e78ce556a7c915bff21dfd679de",
                "filename": "src/main/java/org/apache/commons/io/IOUtils.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/commons-io/blob/c936be45fac0d73ac27c207311e4e910bf0522e5/src/main/java/org/apache/commons/io/IOUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/c936be45fac0d73ac27c207311e4e910bf0522e5/src/main/java/org/apache/commons/io/IOUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/IOUtils.java?ref=c936be45fac0d73ac27c207311e4e910bf0522e5",
                "patch": "@@ -789,6 +789,9 @@ public static boolean contentEqualsIgnoreEOL(final Reader input1, final Reader i\n         if (input1 == input2) {\n             return true;\n         }\n+        if (input1 == null ^ input2 == null) {\n+            return false;\n+        }\n         final BufferedReader br1 = toBufferedReader(input1);\n         final BufferedReader br2 = toBufferedReader(input2);\n "
            },
            {
                "sha": "4a502468e4c5ed99df14cc9c7e5788ed73859604",
                "filename": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                "status": "modified",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/commons-io/blob/c936be45fac0d73ac27c207311e4e910bf0522e5/src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/c936be45fac0d73ac27c207311e4e910bf0522e5/src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/java/org/apache/commons/io/IOUtilsTestCase.java?ref=c936be45fac0d73ac27c207311e4e910bf0522e5",
                "patch": "@@ -290,6 +290,18 @@ public synchronized void close() throws IOException {\n     }\n \n     @Test public void testContentEqualsIgnoreEOL() throws Exception {\n+        {\n+            final Reader input1 = new CharArrayReader(\"\".toCharArray());\n+            assertTrue(IOUtils.contentEqualsIgnoreEOL((Reader) null, null));\n+        }\n+        {\n+            final Reader input1 = new CharArrayReader(\"\".toCharArray());\n+            assertFalse(IOUtils.contentEqualsIgnoreEOL(null, input1));\n+        }\n+        {\n+            final Reader input1 = new CharArrayReader(\"\".toCharArray());\n+            assertFalse(IOUtils.contentEqualsIgnoreEOL(input1, null));\n+        }\n         {\n             final Reader input1 = new CharArrayReader(\"\".toCharArray());\n             assertTrue(IOUtils.contentEqualsIgnoreEOL(input1, input1));"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/8b56fda49a913f26bbff128ac1b4e9eb3cb54cf5",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/fa36ecd5918e76bf6524cb6fb13535ccadd9919a",
        "message": "[IO-641] NPE in org.apache.commons.io.IOUtils.contentEquals(Reader,\nReader) when only one input is null.",
        "bug_id": "commons-io_4",
        "file": [
            {
                "sha": "16234950d9765104f6e036ce427c5ec801845f26",
                "filename": "src/changes/changes.xml",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/commons-io/blob/8b56fda49a913f26bbff128ac1b4e9eb3cb54cf5/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-io/raw/8b56fda49a913f26bbff128ac1b4e9eb3cb54cf5/src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/changes/changes.xml?ref=8b56fda49a913f26bbff128ac1b4e9eb3cb54cf5",
                "patch": "@@ -168,6 +168,9 @@ The <action> type attribute can be add,update,fix,remove.\n       <action issue=\"IO-640\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n         NPE in org.apache.commons.io.IOUtils.contentEquals(InputStream, InputStream) when only one input is null.\n       </action>\n+      <action issue=\"IO-641\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n+        NPE in org.apache.commons.io.IOUtils.contentEquals(Reader, Reader) when only one input is null.\n+      </action>\n     </release>\n \n     <release version=\"2.6\" date=\"2017-10-15\" description=\"Java 7 required, Java 9 supported.\">"
            },
            {
                "sha": "0fb82c32cd247c10a27ef6d45df6b68148dca872",
                "filename": "src/main/java/org/apache/commons/io/IOUtils.java",
                "status": "modified",
                "additions": 8,
                "deletions": 5,
                "changes": 13,
                "blob_url": "https://github.com/apache/commons-io/blob/8b56fda49a913f26bbff128ac1b4e9eb3cb54cf5/src/main/java/org/apache/commons/io/IOUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/8b56fda49a913f26bbff128ac1b4e9eb3cb54cf5/src/main/java/org/apache/commons/io/IOUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/IOUtils.java?ref=8b56fda49a913f26bbff128ac1b4e9eb3cb54cf5",
                "patch": "@@ -698,6 +698,7 @@ public static void closeQuietly(final Writer output) {\n      * <p>\n      * This method buffers the input internally using\n      * <code>BufferedInputStream</code> if they are not already buffered.\n+     * </p>\n      *\n      * @param input1 the first stream\n      * @param input2 the second stream\n@@ -734,6 +735,7 @@ public static boolean contentEquals(final InputStream input1, final InputStream\n      * <p>\n      * This method buffers the input internally using\n      * <code>BufferedReader</code> if they are not already buffered.\n+     * </p>\n      *\n      * @param input1 the first reader\n      * @param input2 the second reader\n@@ -749,9 +751,11 @@ public static boolean contentEquals(final Reader input1, final Reader input2)\n         if (input1 == input2) {\n             return true;\n         }\n-\n-        BufferedReader bufferedInput1 = toBufferedReader(input1);\n-        BufferedReader bufferedInput2 = toBufferedReader(input2);\n+        if (input1 == null ^ input2 == null) {\n+            return false;\n+        }\n+        final BufferedReader bufferedInput1 = toBufferedReader(input1);\n+        final BufferedReader bufferedInput2 = toBufferedReader(input2);\n \n         int ch = bufferedInput1.read();\n         while (EOF != ch) {\n@@ -762,8 +766,7 @@ public static boolean contentEquals(final Reader input1, final Reader input2)\n             ch = bufferedInput1.read();\n         }\n \n-        final int ch2 = bufferedInput2.read();\n-        return ch2 == EOF;\n+        return bufferedInput2.read() == EOF;\n     }\n \n     /**"
            },
            {
                "sha": "0a619824c702e9cfb1d53902961fd7aaeac6d519",
                "filename": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                "status": "modified",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/commons-io/blob/8b56fda49a913f26bbff128ac1b4e9eb3cb54cf5/src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/8b56fda49a913f26bbff128ac1b4e9eb3cb54cf5/src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/java/org/apache/commons/io/IOUtilsTestCase.java?ref=8b56fda49a913f26bbff128ac1b4e9eb3cb54cf5",
                "patch": "@@ -262,6 +262,18 @@ public synchronized void close() throws IOException {\n     }\n \n     @Test public void testContentEquals_Reader_Reader() throws Exception {\n+        {\n+            final StringReader input1 = new StringReader(\"\");\n+            assertTrue(IOUtils.contentEquals((Reader) null, null));\n+        }\n+        {\n+            final StringReader input1 = new StringReader(\"\");\n+            assertFalse(IOUtils.contentEquals(null, input1));\n+        }\n+        {\n+            final StringReader input1 = new StringReader(\"\");\n+            assertFalse(IOUtils.contentEquals(input1, null));\n+        }\n         {\n             final StringReader input1 = new StringReader(\"\");\n             assertTrue(IOUtils.contentEquals(input1, input1));"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/fa36ecd5918e76bf6524cb6fb13535ccadd9919a",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/e6c81e64a0a485f7d4d133aab8a3e02cc548973b",
        "message": "[IO-640] NPE in org.apache.commons.io.IOUtils.contentEquals(InputStream,\nInputStream) when only one input is null.",
        "bug_id": "commons-io_5",
        "file": [
            {
                "sha": "fc34f479972a04fb86f34329cfb2dab6e9192da1",
                "filename": "src/changes/changes.xml",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/commons-io/blob/fa36ecd5918e76bf6524cb6fb13535ccadd9919a/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-io/raw/fa36ecd5918e76bf6524cb6fb13535ccadd9919a/src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/changes/changes.xml?ref=fa36ecd5918e76bf6524cb6fb13535ccadd9919a",
                "patch": "@@ -165,6 +165,9 @@ The <action> type attribute can be add,update,fix,remove.\n         Add and reuse org.apache.commons.io.IOUtils.closeQuitely(Closeable, Consumer&lt;IOException&gt;).\n         Add and reuse org.apache.commons.io.IOUtils.close(Closeable, IOConsumer&lt;IOException&gt;).\n       </action>\n+      <action issue=\"IO-640\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n+        NPE in org.apache.commons.io.IOUtils.contentEquals(InputStream, InputStream) when only one input is null.\n+      </action>\n     </release>\n \n     <release version=\"2.6\" date=\"2017-10-15\" description=\"Java 7 required, Java 9 supported.\">"
            },
            {
                "sha": "ba92c2e9447d7fec192615808e82bf48d5eb3361",
                "filename": "src/main/java/org/apache/commons/io/IOUtils.java",
                "status": "modified",
                "additions": 12,
                "deletions": 7,
                "changes": 19,
                "blob_url": "https://github.com/apache/commons-io/blob/fa36ecd5918e76bf6524cb6fb13535ccadd9919a/src/main/java/org/apache/commons/io/IOUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/fa36ecd5918e76bf6524cb6fb13535ccadd9919a/src/main/java/org/apache/commons/io/IOUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/IOUtils.java?ref=fa36ecd5918e76bf6524cb6fb13535ccadd9919a",
                "patch": "@@ -712,6 +712,9 @@ public static boolean contentEquals(final InputStream input1, final InputStream\n         if (input1 == input2) {\n             return true;\n         }\n+        if (input1 == null ^ input2 == null) {\n+            return false;\n+        }\n         final BufferedInputStream bufferedInput1 = buffer(input1);\n         final BufferedInputStream bufferedInput2 = buffer(input2);\n         int ch = bufferedInput1.read();\n@@ -740,25 +743,26 @@ public static boolean contentEquals(final InputStream input1, final InputStream\n      * @throws IOException          if an I/O error occurs\n      * @since 1.1\n      */\n-    public static boolean contentEquals(Reader input1, Reader input2)\n+    @SuppressWarnings(\"resource\")\n+    public static boolean contentEquals(final Reader input1, final Reader input2)\n             throws IOException {\n         if (input1 == input2) {\n             return true;\n         }\n \n-        input1 = toBufferedReader(input1);\n-        input2 = toBufferedReader(input2);\n+        BufferedReader bufferedInput1 = toBufferedReader(input1);\n+        BufferedReader bufferedInput2 = toBufferedReader(input2);\n \n-        int ch = input1.read();\n+        int ch = bufferedInput1.read();\n         while (EOF != ch) {\n-            final int ch2 = input2.read();\n+            final int ch2 = bufferedInput2.read();\n             if (ch != ch2) {\n                 return false;\n             }\n-            ch = input1.read();\n+            ch = bufferedInput1.read();\n         }\n \n-        final int ch2 = input2.read();\n+        final int ch2 = bufferedInput2.read();\n         return ch2 == EOF;\n     }\n \n@@ -776,6 +780,7 @@ public static boolean contentEquals(Reader input1, Reader input2)\n      * @throws IOException          if an I/O error occurs\n      * @since 2.2\n      */\n+    @SuppressWarnings(\"resource\")\n     public static boolean contentEqualsIgnoreEOL(final Reader input1, final Reader input2)\n             throws IOException {\n         if (input1 == input2) {"
            },
            {
                "sha": "4ea628e76c9b039ac3587afe8519a4e18c99ff4c",
                "filename": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                "status": "modified",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/commons-io/blob/fa36ecd5918e76bf6524cb6fb13535ccadd9919a/src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/fa36ecd5918e76bf6524cb6fb13535ccadd9919a/src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/java/org/apache/commons/io/IOUtilsTestCase.java?ref=fa36ecd5918e76bf6524cb6fb13535ccadd9919a",
                "patch": "@@ -229,6 +229,18 @@ public synchronized void close() throws IOException {\n     }\n \n     @Test public void testContentEquals_InputStream_InputStream() throws Exception {\n+        {\n+            final ByteArrayInputStream input1 = new ByteArrayInputStream(\"\".getBytes(StandardCharsets.UTF_8));\n+            assertTrue(IOUtils.contentEquals((InputStream) null, null));\n+        }\n+        {\n+            final ByteArrayInputStream input1 = new ByteArrayInputStream(\"\".getBytes(StandardCharsets.UTF_8));\n+            assertFalse(IOUtils.contentEquals(input1, null));\n+        }\n+        {\n+            final ByteArrayInputStream input1 = new ByteArrayInputStream(\"\".getBytes(StandardCharsets.UTF_8));\n+            assertFalse(IOUtils.contentEquals(null, input1));\n+        }\n         {\n             final ByteArrayInputStream input1 = new ByteArrayInputStream(\"\".getBytes(StandardCharsets.UTF_8));\n             assertTrue(IOUtils.contentEquals(input1, input1));"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/5899f1eb7239ea26291b9e38490f5922b86158d8",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/92a07f9aa109f0f55af963f86e466c80718f9466",
        "message": "[IO-547] Throw a IllegalArgumentException instead of\nNullPointerException in FileSystemUtils.freeSpaceWindows().",
        "bug_id": "commons-io_6",
        "file": [
            {
                "sha": "490c05e2c9dfad6f23db3c17f9a5f67afefb4895",
                "filename": "src/changes/changes.xml",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/commons-io/blob/5899f1eb7239ea26291b9e38490f5922b86158d8/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-io/raw/5899f1eb7239ea26291b9e38490f5922b86158d8/src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/changes/changes.xml?ref=5899f1eb7239ea26291b9e38490f5922b86158d8",
                "patch": "@@ -50,6 +50,9 @@ The <action> type attribute can be add,update,fix,remove.\n       <action issue=\"IO-542\" dev=\"pschumacher\" type=\"update\" due-to=\"Ilmars Poikans\">\n         FileUtils#readFileToByteArray: optimize reading of files with known size\n       </action>\n+      <action issue=\"IO-547\" dev=\"ggregory\" type=\"update\" due-to=\"Nikhil Shinde, Michael Ernst, Gary Greory\">\n+        Throw a IllegalArgumentException instead of NullPointerException in FileSystemUtils.freeSpaceWindows().\n+      </action>\n       <action issue=\"IO-367\" dev=\"pschumacher\" type=\"add\" due-to=\"James Sawle\">\n         Add convenience methods for copyToDirectory\n       </action>"
            },
            {
                "sha": "a560c0bae566c20b84a158b01d3814c8394d289e",
                "filename": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                "status": "modified",
                "additions": 9,
                "deletions": 6,
                "changes": 15,
                "blob_url": "https://github.com/apache/commons-io/blob/5899f1eb7239ea26291b9e38490f5922b86158d8/src/main/java/org/apache/commons/io/FileSystemUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/5899f1eb7239ea26291b9e38490f5922b86158d8/src/main/java/org/apache/commons/io/FileSystemUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/FileSystemUtils.java?ref=5899f1eb7239ea26291b9e38490f5922b86158d8",
                "patch": "@@ -294,13 +294,16 @@ long freeSpaceOS(final String path, final int os, final boolean kb, final long t\n      * @throws IOException if an error occurs\n      */\n     long freeSpaceWindows(String path, final long timeout) throws IOException {\n-        path = FilenameUtils.normalize(path, false);\n-        if (path.length() > 0 && path.charAt(0) != '\"') {\n-            path = \"\\\"\" + path + \"\\\"\";\n+        String normPath = FilenameUtils.normalize(path, false);\n+        if (normPath == null) {\n+            throw new IllegalArgumentException(path);\n+        }\n+        if (normPath.length() > 0 && normPath.charAt(0) != '\"') {\n+            normPath = \"\\\"\" + normPath + \"\\\"\";\n         }\n \n         // build and run the 'dir' command\n-        final String[] cmdAttribs = new String[] {\"cmd.exe\", \"/C\", \"dir /a /-c \" + path};\n+        final String[] cmdAttribs = new String[] {\"cmd.exe\", \"/C\", \"dir /a /-c \" + normPath};\n \n         // read in the output of the command to an ArrayList\n         final List<String> lines = performCommand(cmdAttribs, Integer.MAX_VALUE, timeout);\n@@ -312,13 +315,13 @@ long freeSpaceWindows(String path, final long timeout) throws IOException {\n         for (int i = lines.size() - 1; i >= 0; i--) {\n             final String line = lines.get(i);\n             if (line.length() > 0) {\n-                return parseDir(line, path);\n+                return parseDir(line, normPath);\n             }\n         }\n         // all lines are blank\n         throw new IOException(\n                 \"Command line 'dir /-c' did not return any info \" +\n-                \"for path '\" + path + \"'\");\n+                \"for path '\" + normPath + \"'\");\n     }\n \n     /**"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/f15433d69c96aec08c9a0c3c15a69edd8250ae2b",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/30f81c47f7ea0e9f743e08e73f48c0cfcfb746ff",
        "message": "Fix broken build (#73)\n\nSeveral things were broken with the build. This fixes build failures and\r\nmakes the build pass again on all Java versions tested on Travis CI.\r\n\r\n1. The test started to fail after the changes made in b5990be. This is\r\n   because after changing the type of writer from Appendable to NullWriter\r\n   the wrong overload of copy would be used:\r\n\r\n    copy(Reader, Writer) instead of copy(Reader, Appendable)\r\n\r\n  This change just forces the right overload at the call site.\r\n\r\n2. Replace tabs with spaces\r\n3. Add missing package-info file\r\n4. Fix NPE during javadoc generation\r\n\r\n  Commons parent 46 shipped with maven-javadoc-plugin 3.0.0 which was\r\n  affected by https://issues.apache.org/jira/browse/MJAVADOC-517.\r\n  This upgrades the build to commons parent 47, which includes\r\n  maven-javadoc-plugin 3.0.1.\r\n\r\n5. Fix invalid javadoc links\r\n6. Fix problem with Javadoc tool reporting import of unnamed modules",
        "bug_id": "commons-io_7",
        "file": [
            {
                "sha": "869112ea0de243f3d98c4107c84cdd8b5ac7ae82",
                "filename": "pom.xml",
                "status": "modified",
                "additions": 13,
                "deletions": 1,
                "changes": 14,
                "blob_url": "https://github.com/apache/commons-io/blob/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/pom.xml",
                "raw_url": "https://github.com/apache/commons-io/raw/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/pom.xml?ref=f15433d69c96aec08c9a0c3c15a69edd8250ae2b",
                "patch": "@@ -19,7 +19,7 @@\n   <parent>\n     <groupId>org.apache.commons</groupId>\n     <artifactId>commons-parent</artifactId>\n-    <version>46</version>\n+    <version>47</version>\n   </parent>\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>commons-io</groupId>\n@@ -350,6 +350,18 @@ file comparators, endian transformation classes, and much more.\n           </ignorePathsToDelete>\n         </configuration>\n       </plugin>\n+      <!--\n+       Fix for https://bugs.openjdk.java.net/browse/JDK-8212233\n+       which is addressed in maven-javadoc-plugin:3.1.0, see https://issues.apache.org/jira/browse/MJAVADOC-562\n+      -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-javadoc-plugin</artifactId>\n+        <version>${commons.javadoc.version}</version>\n+        <configuration>\n+          <source>7</source>\n+        </configuration>\n+      </plugin>\n     </plugins>\n   </build>\n "
            },
            {
                "sha": "a897c382a74634d4caf2ad302d3e0a32a32ae212",
                "filename": "src/main/java/org/apache/commons/io/DirectoryWalker.java",
                "status": "modified",
                "additions": 10,
                "deletions": 15,
                "changes": 25,
                "blob_url": "https://github.com/apache/commons-io/blob/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/src/main/java/org/apache/commons/io/DirectoryWalker.java",
                "raw_url": "https://github.com/apache/commons-io/raw/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/src/main/java/org/apache/commons/io/DirectoryWalker.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/DirectoryWalker.java?ref=f15433d69c96aec08c9a0c3c15a69edd8250ae2b",
                "patch": "@@ -36,16 +36,15 @@\n  * <p>\n  * The following sections describe:\n  *   <ul>\n- *      <li><a href=\"#DirectoryWalker_example\">1. Example Implementation</a> - example\n+ *      <li><a href=\"#example\">1. Example Implementation</a> - example\n  *          <code>FileCleaner</code> implementation.</li>\n- *      <li><a href=\"#DirectoryWalker_filter\">2. Filter Example</a> - using\n+ *      <li><a href=\"#filter\">2. Filter Example</a> - using\n  *          {@link FileFilter}(s) with <code>DirectoryWalker</code>.</li>\n- *      <li><a href=\"#DirectoryWalker_cancel\">3. Cancellation</a> - how to implement cancellation\n+ *      <li><a href=\"#cancel\">3. Cancellation</a> - how to implement cancellation\n  *          behaviour.</li>\n  *   </ul>\n  *\n- * <a id=\"DirectoryWalker_example\"></a>\n- * <h3>1. Example Implementation</h3>\n+ * <h3 id=\"example\">1. Example Implementation</h3>\n  *\n  * There are many possible extensions, for example, to delete all\n  * files and '.svn' directories, and return a list of deleted files:\n@@ -81,8 +80,7 @@\n  *  }\n  * </pre>\n  *\n- * <a id=\"DirectoryWalker_filter\"></a>\n- * <h3>2. Filter Example</h3>\n+ * <h3 id=\"filter\">2. Filter Example</h3>\n  *\n  * Choosing which directories and files to process can be a key aspect\n  * of using this class. This information can be setup in three ways,\n@@ -148,8 +146,7 @@\n  * This is much simpler than the previous example, and is why it is the preferred\n  * option for filtering.\n  *\n- * <a id=\"DirectoryWalker_cancel\"></a>\n- * <h3>3. Cancellation</h3>\n+ * <h3 id=\"cancel\">3. Cancellation</h3>\n  *\n  * The DirectoryWalker contains some of the logic required for cancel processing.\n  * Subclasses must complete the implementation.\n@@ -172,17 +169,16 @@\n  * <p>\n  * Two possible scenarios are envisaged for cancellation:\n  * <ul>\n- *    <li><a href=\"#DirectoryWalker_external\">3.1 External / Multi-threaded</a> - cancellation being\n+ *    <li><a href=\"#external\">3.1 External / Multi-threaded</a> - cancellation being\n  *        decided/initiated by an external process.</li>\n- *    <li><a href=\"#DirectoryWalker_internal\">3.2 Internal</a> - cancellation being decided/initiated\n+ *    <li><a href=\"#internal\">3.2 Internal</a> - cancellation being decided/initiated\n  *        from within a DirectoryWalker implementation.</li>\n  * </ul>\n  * <p>\n  * The following sections provide example implementations for these two different\n  * scenarios.\n  *\n- * <a id=\"DirectoryWalker_external\"></a>\n- * <h4>3.1 External / Multi-threaded</h4>\n+ * <h4 id=\"external\">3.1 External / Multi-threaded</h4>\n  *\n  * This example provides a public <code>cancel()</code> method that can be\n  * called by another thread to stop the processing. A typical example use-case\n@@ -213,8 +209,7 @@\n  *  }\n  * </pre>\n  *\n- * <a id=\"DirectoryWalker_internal\"></a>\n- * <h4>3.2 Internal</h4>\n+ * <h4 id=\"internal\">3.2 Internal</h4>\n  *\n  * This shows an example of how internal cancellation processing could be implemented.\n  * <b>Note</b> the decision logic and throwing a {@link CancelException} could be implemented"
            },
            {
                "sha": "6d57dade2325426a0ae0dacecbe638b7e3f8d130",
                "filename": "src/main/java/org/apache/commons/io/input/MessageDigestCalculatingInputStream.java",
                "status": "modified",
                "additions": 2,
                "deletions": 4,
                "changes": 6,
                "blob_url": "https://github.com/apache/commons-io/blob/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/src/main/java/org/apache/commons/io/input/MessageDigestCalculatingInputStream.java",
                "raw_url": "https://github.com/apache/commons-io/raw/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/src/main/java/org/apache/commons/io/input/MessageDigestCalculatingInputStream.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/input/MessageDigestCalculatingInputStream.java?ref=f15433d69c96aec08c9a0c3c15a69edd8250ae2b",
                "patch": "@@ -46,14 +46,12 @@ public MessageDigestMaintainingObserver(final MessageDigest pMd) {\n         }\n \n         @Override\n-\t\tpublic\n-        void data(final int pByte) throws IOException {\n+        public void data(final int pByte) throws IOException {\n             md.update((byte) pByte);\n         }\n \n         @Override\n-\t\tpublic\n-        void data(final byte[] pBuffer, final int pOffset, final int pLength) throws IOException {\n+        public void data(final byte[] pBuffer, final int pOffset, final int pLength) throws IOException {\n             md.update(pBuffer, pOffset, pLength);\n         }\n     }"
            },
            {
                "sha": "8d20de1324cec51effba96851c7fb5222724bf2b",
                "filename": "src/main/java/org/apache/commons/io/input/buffer/CircularBufferInputStream.java",
                "status": "modified",
                "additions": 102,
                "deletions": 87,
                "changes": 189,
                "blob_url": "https://github.com/apache/commons-io/blob/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/src/main/java/org/apache/commons/io/input/buffer/CircularBufferInputStream.java",
                "raw_url": "https://github.com/apache/commons-io/raw/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/src/main/java/org/apache/commons/io/input/buffer/CircularBufferInputStream.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/input/buffer/CircularBufferInputStream.java?ref=f15433d69c96aec08c9a0c3c15a69edd8250ae2b",
                "patch": "@@ -16,109 +16,124 @@\n  */\n package org.apache.commons.io.input.buffer;\n \n-import java.io.BufferedInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.Objects;\n \n \n /**\n  * Implementation of a buffered input stream, which is internally based on the\n- * {@link CircularByteBuffer}. Unlike the {@link BufferedInputStream}, this one\n+ * {@link CircularByteBuffer}. Unlike the {@link java.io.BufferedInputStream}, this one\n  * doesn't need to reallocate byte arrays internally.\n  */\n public class CircularBufferInputStream extends InputStream {\n-\tprotected final InputStream in;\n-\tprotected final CircularByteBuffer buffer;\n-\tprotected final int bufferSize;\n-\tprivate boolean eofSeen;\n+    protected final InputStream in;\n+    protected final CircularByteBuffer buffer;\n+    protected final int bufferSize;\n+    private boolean eofSeen;\n \n-\t/** Creates a new instance, which filters the given input stream, and\n-\t * uses the given buffer size.\n-\t * @param pIn The input stream, which is being buffered.\n-\t * @param pBufferSize The size of the {@link CircularByteBuffer}, which is\n-\t * used internally.\n-\t */\n-\tpublic CircularBufferInputStream(InputStream pIn, int pBufferSize) {\n-\t\tObjects.requireNonNull(pIn, \"InputStream\");\n-\t\tif (pBufferSize <= 0) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid buffer size: \" + pBufferSize);\n-\t\t}\n-\t\tin = pIn;\n-\t\tbuffer = new CircularByteBuffer(pBufferSize);\n-\t\tbufferSize = pBufferSize;\n-\t\teofSeen = false;\n-\t}\n+    /**\n+     * Creates a new instance, which filters the given input stream, and\n+     * uses the given buffer size.\n+     *\n+     * @param pIn         The input stream, which is being buffered.\n+     * @param pBufferSize The size of the {@link CircularByteBuffer}, which is\n+     *                    used internally.\n+     */\n+    public CircularBufferInputStream(InputStream pIn, int pBufferSize) {\n+        Objects.requireNonNull(pIn, \"InputStream\");\n+        if (pBufferSize <= 0) {\n+            throw new IllegalArgumentException(\"Invalid buffer size: \" + pBufferSize);\n+        }\n+        in = pIn;\n+        buffer = new CircularByteBuffer(pBufferSize);\n+        bufferSize = pBufferSize;\n+        eofSeen = false;\n+    }\n \n-\t/** Creates a new instance, which filters the given input stream, and\n-\t * uses a reasonable default buffer size (8192).\n-\t * @param pIn The input stream, which is being buffered.\n-\t */\n-\tpublic CircularBufferInputStream(InputStream pIn) {\n-\t\tthis(pIn, 8192);\n-\t}\n+    /**\n+     * Creates a new instance, which filters the given input stream, and\n+     * uses a reasonable default buffer size (8192).\n+     *\n+     * @param pIn The input stream, which is being buffered.\n+     */\n+    public CircularBufferInputStream(InputStream pIn) {\n+        this(pIn, 8192);\n+    }\n \n-\tprotected void fillBuffer() throws IOException {\n-\t\tif (eofSeen) {\n-\t\t\treturn;\n-\t\t}\n-\t\tint space = buffer.getSpace();\n-\t\tfinal byte[] buf = new byte[space];\n-\t\twhile (space > 0) {\n-\t\t\tfinal int res = in.read(buf, 0, space);\n-\t\t\tif (res == -1) {\n-\t\t\t\teofSeen = true;\n-\t\t\t\treturn;\n-\t\t\t} else if (res > 0) {\n-\t\t\t\tbuffer.add(buf, 0, res);\n-\t\t\t\tspace -= res;\n-\t\t\t}\n-\t\t}\n-\t}\n+    /**\n+     * Fills the buffer with the contents of the input stream.\n+     *\n+     * @throws IOException in case of an error while reading from the input stream.\n+     */\n+    protected void fillBuffer() throws IOException {\n+        if (eofSeen) {\n+            return;\n+        }\n+        int space = buffer.getSpace();\n+        final byte[] buf = new byte[space];\n+        while (space > 0) {\n+            final int res = in.read(buf, 0, space);\n+            if (res == -1) {\n+                eofSeen = true;\n+                return;\n+            } else if (res > 0) {\n+                buffer.add(buf, 0, res);\n+                space -= res;\n+            }\n+        }\n+    }\n \n-\tprotected boolean haveBytes(int pNumber) throws IOException {\n-\t\tif (buffer.getCurrentNumberOfBytes() < pNumber) {\n-\t\t\tfillBuffer();\n-\t\t}\n-\t\treturn buffer.hasBytes();\n-\t}\n+    /**\n+     * Fills the buffer from the input stream until the given number of bytes have been added to the buffer.\n+     *\n+     * @param pNumber number of byte to fill into the buffer\n+     * @return true if the buffer has bytes\n+     * @throws IOException in case of an error while reading from the input stream.\n+     */\n+    protected boolean haveBytes(int pNumber) throws IOException {\n+        if (buffer.getCurrentNumberOfBytes() < pNumber) {\n+            fillBuffer();\n+        }\n+        return buffer.hasBytes();\n+    }\n \n-\t@Override\n-\tpublic int read() throws IOException {\n-\t\tif (!haveBytes(1)) {\n-\t\t\treturn -1;\n-\t\t}\n-\t\treturn buffer.read();\n-\t}\n+    @Override\n+    public int read() throws IOException {\n+        if (!haveBytes(1)) {\n+            return -1;\n+        }\n+        return buffer.read();\n+    }\n \n-\t@Override\n-\tpublic int read(byte[] pBuffer) throws IOException {\n-\t\treturn read(pBuffer, 0, pBuffer.length);\n-\t}\n+    @Override\n+    public int read(byte[] pBuffer) throws IOException {\n+        return read(pBuffer, 0, pBuffer.length);\n+    }\n \n-\t@Override\n-\tpublic int read(byte[] pBuffer, int pOffset, int pLength) throws IOException {\n-\t\tObjects.requireNonNull(pBuffer, \"Buffer\");\n-\t\tif (pOffset < 0) {\n-\t\t\tthrow new IllegalArgumentException(\"Offset must not be negative\");\n-\t\t}\n-\t\tif (pLength < 0) {\n-\t\t\tthrow new IllegalArgumentException(\"Length must not be negative\");\n-\t\t}\n-\t\tif (!haveBytes(pLength)) {\n-\t\t\treturn -1;\n-\t\t}\n-\t\tfinal int result = Math.min(pLength, buffer.getCurrentNumberOfBytes());\n-\t\tfor (int i = 0;  i < result;  i++) {\n-\t\t\tpBuffer[pOffset+i] = buffer.read();\n-\t\t}\n-\t\treturn result;\n-\t}\n+    @Override\n+    public int read(byte[] pBuffer, int pOffset, int pLength) throws IOException {\n+        Objects.requireNonNull(pBuffer, \"Buffer\");\n+        if (pOffset < 0) {\n+            throw new IllegalArgumentException(\"Offset must not be negative\");\n+        }\n+        if (pLength < 0) {\n+            throw new IllegalArgumentException(\"Length must not be negative\");\n+        }\n+        if (!haveBytes(pLength)) {\n+            return -1;\n+        }\n+        final int result = Math.min(pLength, buffer.getCurrentNumberOfBytes());\n+        for (int i = 0; i < result; i++) {\n+            pBuffer[pOffset + i] = buffer.read();\n+        }\n+        return result;\n+    }\n \n-\t@Override\n-\tpublic void close() throws IOException {\n-\t\tin.close();\n-\t\teofSeen = true;\n-\t\tbuffer.clear();\n-\t}\n+    @Override\n+    public void close() throws IOException {\n+        in.close();\n+        eofSeen = true;\n+        buffer.clear();\n+    }\n }"
            },
            {
                "sha": "95ca142c9308f5536c765953b56bbc56f3fb9b14",
                "filename": "src/main/java/org/apache/commons/io/input/buffer/CircularByteBuffer.java",
                "status": "modified",
                "additions": 216,
                "deletions": 205,
                "changes": 421,
                "blob_url": "https://github.com/apache/commons-io/blob/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/src/main/java/org/apache/commons/io/input/buffer/CircularByteBuffer.java",
                "raw_url": "https://github.com/apache/commons-io/raw/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/src/main/java/org/apache/commons/io/input/buffer/CircularByteBuffer.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/input/buffer/CircularByteBuffer.java?ref=f15433d69c96aec08c9a0c3c15a69edd8250ae2b",
                "patch": "@@ -26,225 +26,236 @@\n  * like the {@link CircularBufferInputStream}.\n  */\n public class CircularByteBuffer {\n-\tprivate final byte[] buffer;\n-\tprivate int startOffset, endOffset, currentNumberOfBytes;\n+    private final byte[] buffer;\n+    private int startOffset, endOffset, currentNumberOfBytes;\n \n-\t/**\n-\t * Creates a new instance with the given buffer size.\n-\t * @param pSize the size of buffer to create\n-\t */\n-\tpublic CircularByteBuffer(int pSize) {\n-\t\tbuffer = new byte[pSize];\n-\t\tstartOffset = 0;\n-\t\tendOffset = 0;\n-\t\tcurrentNumberOfBytes = 0;\n-\t}\n+    /**\n+     * Creates a new instance with the given buffer size.\n+     *\n+     * @param pSize the size of buffer to create\n+     */\n+    public CircularByteBuffer(int pSize) {\n+        buffer = new byte[pSize];\n+        startOffset = 0;\n+        endOffset = 0;\n+        currentNumberOfBytes = 0;\n+    }\n \n-\t/**\n-\t * Creates a new instance with a reasonable default buffer size (8192).\n-\t */\n-\tpublic CircularByteBuffer() {\n-\t\tthis(8192);\n-\t}\n+    /**\n+     * Creates a new instance with a reasonable default buffer size (8192).\n+     */\n+    public CircularByteBuffer() {\n+        this(8192);\n+    }\n \n-\t/**\n-\t * Returns the next byte from the buffer, removing it at the same time, so\n-\t * that following invocations won't return it again.\n-\t * @return The byte, which is being returned.\n-\t * @throws IllegalStateException The buffer is empty. Use {@link #hasBytes()},\n-\t * or {@link #getCurrentNumberOfBytes()}, to prevent this exception.\n-\t */\n-\tpublic byte read() {\n-\t\tif (currentNumberOfBytes <= 0) {\n-\t\t\tthrow new IllegalStateException(\"No bytes available.\");\n-\t\t}\n-\t\tfinal byte b = buffer[startOffset];\n-\t\t--currentNumberOfBytes;\n-\t\tif (++startOffset == buffer.length) {\n-\t\t\tstartOffset = 0;\n-\t\t}\n-\t\treturn b;\n-\t}\n+    /**\n+     * Returns the next byte from the buffer, removing it at the same time, so\n+     * that following invocations won't return it again.\n+     *\n+     * @return The byte, which is being returned.\n+     * @throws IllegalStateException The buffer is empty. Use {@link #hasBytes()},\n+     *                               or {@link #getCurrentNumberOfBytes()}, to prevent this exception.\n+     */\n+    public byte read() {\n+        if (currentNumberOfBytes <= 0) {\n+            throw new IllegalStateException(\"No bytes available.\");\n+        }\n+        final byte b = buffer[startOffset];\n+        --currentNumberOfBytes;\n+        if (++startOffset == buffer.length) {\n+            startOffset = 0;\n+        }\n+        return b;\n+    }\n \n-\t/**\n-\t * Returns the given number of bytes from the buffer by storing them in\n-\t * the given byte array at the given offset.\n-\t * @param pBuffer The byte array, where to add bytes.\n-\t * @param pOffset The offset, where to store bytes in the byte array.\n-\t * @param pLength The number of bytes to return.\n-\t * @throws NullPointerException The byte array {@code pBuffer} is null.\n-\t * @throws IllegalArgumentException Either of {@code pOffset}, or {@code pLength} is negative,\n-\t * or the length of the byte array {@code pBuffer} is too small.\n-\t * @throws IllegalStateException The buffer doesn't hold the given number\n-\t * of bytes. Use {@link #getCurrentNumberOfBytes()} to prevent this\n-\t * exception.\n-\t */\n-\tpublic void read(byte[] pBuffer, int pOffset, int pLength) {\n-\t\tObjects.requireNonNull(pBuffer);\n-\t\tif (pOffset < 0  ||  pOffset >= pBuffer.length) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid offset: \" + pOffset);\n-\t\t}\n-\t\tif (pLength < 0  ||  pLength > buffer.length) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid length: \" + pLength);\n-\t\t}\n-\t\tif (pOffset+pLength > pBuffer.length) {\n-\t\t\tthrow new IllegalArgumentException(\"The supplied byte array contains only \"\n-\t\t\t\t\t+ pBuffer.length + \" bytes, but offset, and length would require \"\n-\t\t\t\t\t+ (pOffset+pLength-1));\n-\t\t}\n-\t\tif (currentNumberOfBytes < pLength) {\n-\t\t\tthrow new IllegalStateException(\"Currently, there are only \" + currentNumberOfBytes\n-\t\t\t\t\t+ \"in the buffer, not \" + pLength);\n-\t\t}\n-\t\tint offset = pOffset;\n-\t\tfor (int i = 0;  i < pLength;  i++) {\n-\t\t\tpBuffer[offset++] = buffer[startOffset];\n-\t\t\t--currentNumberOfBytes;\n-\t\t\tif (++startOffset == buffer.length) {\n-\t\t\t\tstartOffset = 0;\n-\t\t\t}\n-\t\t}\n-\t}\n+    /**\n+     * Returns the given number of bytes from the buffer by storing them in\n+     * the given byte array at the given offset.\n+     *\n+     * @param pBuffer The byte array, where to add bytes.\n+     * @param pOffset The offset, where to store bytes in the byte array.\n+     * @param pLength The number of bytes to return.\n+     * @throws NullPointerException     The byte array {@code pBuffer} is null.\n+     * @throws IllegalArgumentException Either of {@code pOffset}, or {@code pLength} is negative,\n+     *                                  or the length of the byte array {@code pBuffer} is too small.\n+     * @throws IllegalStateException    The buffer doesn't hold the given number\n+     *                                  of bytes. Use {@link #getCurrentNumberOfBytes()} to prevent this\n+     *                                  exception.\n+     */\n+    public void read(byte[] pBuffer, int pOffset, int pLength) {\n+        Objects.requireNonNull(pBuffer);\n+        if (pOffset < 0 || pOffset >= pBuffer.length) {\n+            throw new IllegalArgumentException(\"Invalid offset: \" + pOffset);\n+        }\n+        if (pLength < 0 || pLength > buffer.length) {\n+            throw new IllegalArgumentException(\"Invalid length: \" + pLength);\n+        }\n+        if (pOffset + pLength > pBuffer.length) {\n+            throw new IllegalArgumentException(\"The supplied byte array contains only \"\n+                    + pBuffer.length + \" bytes, but offset, and length would require \"\n+                    + (pOffset + pLength - 1));\n+        }\n+        if (currentNumberOfBytes < pLength) {\n+            throw new IllegalStateException(\"Currently, there are only \" + currentNumberOfBytes\n+                    + \"in the buffer, not \" + pLength);\n+        }\n+        int offset = pOffset;\n+        for (int i = 0; i < pLength; i++) {\n+            pBuffer[offset++] = buffer[startOffset];\n+            --currentNumberOfBytes;\n+            if (++startOffset == buffer.length) {\n+                startOffset = 0;\n+            }\n+        }\n+    }\n \n-\t/**\n-\t * Adds a new byte to the buffer, which will eventually be returned by following\n-\t * invocations of {@link #read()}.\n-\t * @param pByte The byte, which is being added to the buffer.\n-\t * @throws IllegalStateException The buffer is full. Use {@link #hasSpace()},\n-\t * or {@link #getSpace()}, to prevent this exception.\n-\t */\n-\tpublic void add(byte pByte) {\n-\t\tif (currentNumberOfBytes >= buffer.length) {\n-\t\t\tthrow new IllegalStateException(\"No space available\");\n-\t\t}\n-\t\tbuffer[endOffset] = pByte;\n-\t\t++currentNumberOfBytes;\n-\t\tif (++endOffset == buffer.length) {\n-\t\t\tendOffset = 0;\n-\t\t}\n-\t}\n+    /**\n+     * Adds a new byte to the buffer, which will eventually be returned by following\n+     * invocations of {@link #read()}.\n+     *\n+     * @param pByte The byte, which is being added to the buffer.\n+     * @throws IllegalStateException The buffer is full. Use {@link #hasSpace()},\n+     *                               or {@link #getSpace()}, to prevent this exception.\n+     */\n+    public void add(byte pByte) {\n+        if (currentNumberOfBytes >= buffer.length) {\n+            throw new IllegalStateException(\"No space available\");\n+        }\n+        buffer[endOffset] = pByte;\n+        ++currentNumberOfBytes;\n+        if (++endOffset == buffer.length) {\n+            endOffset = 0;\n+        }\n+    }\n \n-\t/**\n-\t * Returns, whether the next bytes in the buffer are exactly those, given by\n-\t * {@code pBuffer}, {@code pOffset}, and {@code pLength}. No bytes are being\n-\t * removed from the buffer. If the result is true, then the following invocations\n-\t * of {@link #read()} are guaranteed to return exactly those bytes.\n-\t * @param pBuffer the buffer to compare against\n-\t * @param pOffset start offset\n-\t * @param pLength length to compare\n-\t * @return True, if the next invocations of {@link #read()} will return the\n-\t * bytes at offsets {@code pOffset}+0, {@code pOffset}+1, ...,\n-\t * {@code pOffset}+{@code pLength}-1 of byte array {@code pBuffer}.\n-\t * @throws IllegalArgumentException Either of {@code pOffset}, or {@code pLength} is negative.\n-\t * @throws NullPointerException The byte array {@code pBuffer} is null.\n-\t */\n-\tpublic boolean peek(byte[] pBuffer, int pOffset, int pLength) {\n-\t\tObjects.requireNonNull(pBuffer, \"Buffer\");\n-\t\tif (pOffset < 0  ||  pOffset >= pBuffer.length) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid offset: \" + pOffset);\n-\t\t}\n-\t\tif (pLength < 0  ||  pLength > buffer.length) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid length: \" + pLength);\n-\t\t}\n-\t\tif (pLength < currentNumberOfBytes) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tint offset = startOffset;\n-\t\tfor (int i = 0;  i < pLength;  i++) {\n-\t\t\tif (buffer[offset] != pBuffer[i+pOffset]) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tif (++offset == buffer.length) {\n-\t\t\t\toffset = 0;\n-\t\t\t}\n-\t\t}\n-\t\treturn true;\n-\t}\n+    /**\n+     * Returns, whether the next bytes in the buffer are exactly those, given by\n+     * {@code pBuffer}, {@code pOffset}, and {@code pLength}. No bytes are being\n+     * removed from the buffer. If the result is true, then the following invocations\n+     * of {@link #read()} are guaranteed to return exactly those bytes.\n+     *\n+     * @param pBuffer the buffer to compare against\n+     * @param pOffset start offset\n+     * @param pLength length to compare\n+     * @return True, if the next invocations of {@link #read()} will return the\n+     * bytes at offsets {@code pOffset}+0, {@code pOffset}+1, ...,\n+     * {@code pOffset}+{@code pLength}-1 of byte array {@code pBuffer}.\n+     * @throws IllegalArgumentException Either of {@code pOffset}, or {@code pLength} is negative.\n+     * @throws NullPointerException     The byte array {@code pBuffer} is null.\n+     */\n+    public boolean peek(byte[] pBuffer, int pOffset, int pLength) {\n+        Objects.requireNonNull(pBuffer, \"Buffer\");\n+        if (pOffset < 0 || pOffset >= pBuffer.length) {\n+            throw new IllegalArgumentException(\"Invalid offset: \" + pOffset);\n+        }\n+        if (pLength < 0 || pLength > buffer.length) {\n+            throw new IllegalArgumentException(\"Invalid length: \" + pLength);\n+        }\n+        if (pLength < currentNumberOfBytes) {\n+            return false;\n+        }\n+        int offset = startOffset;\n+        for (int i = 0; i < pLength; i++) {\n+            if (buffer[offset] != pBuffer[i + pOffset]) {\n+                return false;\n+            }\n+            if (++offset == buffer.length) {\n+                offset = 0;\n+            }\n+        }\n+        return true;\n+    }\n \n-\t/**\n-\t * Adds the given bytes to the buffer. This is the same as invoking {@link #add(byte)}\n-\t * for the bytes at offsets {@code pOffset}+0, {@code pOffset}+1, ...,\n-\t * {@code pOffset}+{@code pLength}-1 of byte array {@code pBuffer}.\n+    /**\n+     * Adds the given bytes to the buffer. This is the same as invoking {@link #add(byte)}\n+     * for the bytes at offsets {@code pOffset}+0, {@code pOffset}+1, ...,\n+     * {@code pOffset}+{@code pLength}-1 of byte array {@code pBuffer}.\n+     *\n      * @param pBuffer the buffer to copy\n      * @param pOffset start offset\n      * @param pLength length to copy\n-\t * @throws IllegalStateException The buffer doesn't have sufficient space. Use\n-\t * {@link #getSpace()} to prevent this exception.\n-\t * @throws IllegalArgumentException Either of {@code pOffset}, or {@code pLength} is negative.\n-\t * @throws NullPointerException The byte array {@code pBuffer} is null.\n-\t */\n-\tpublic void add(byte[] pBuffer, int pOffset, int pLength) {\n-\t\tObjects.requireNonNull(pBuffer, \"Buffer\");\n-\t\tif (pOffset < 0  ||  pOffset >= pBuffer.length) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid offset: \" + pOffset);\n-\t\t}\n-\t\tif (pLength < 0) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid length: \" + pLength);\n-\t\t}\n-\t\tif (currentNumberOfBytes+pLength > buffer.length) {\n-\t\t\tthrow new IllegalStateException(\"No space available\");\n-\t\t}\n-\t\tfor (int i = 0;  i < pLength;  i++) {\n-\t\t\tbuffer[endOffset] = pBuffer[pOffset+i];\n-\t\t\tif (++endOffset == buffer.length) {\n-\t\t\t\tendOffset = 0;\n-\t\t\t}\n-\t\t}\n-\t\tcurrentNumberOfBytes += pLength;\n-\t}\n+     * @throws IllegalStateException    The buffer doesn't have sufficient space. Use\n+     *                                  {@link #getSpace()} to prevent this exception.\n+     * @throws IllegalArgumentException Either of {@code pOffset}, or {@code pLength} is negative.\n+     * @throws NullPointerException     The byte array {@code pBuffer} is null.\n+     */\n+    public void add(byte[] pBuffer, int pOffset, int pLength) {\n+        Objects.requireNonNull(pBuffer, \"Buffer\");\n+        if (pOffset < 0 || pOffset >= pBuffer.length) {\n+            throw new IllegalArgumentException(\"Invalid offset: \" + pOffset);\n+        }\n+        if (pLength < 0) {\n+            throw new IllegalArgumentException(\"Invalid length: \" + pLength);\n+        }\n+        if (currentNumberOfBytes + pLength > buffer.length) {\n+            throw new IllegalStateException(\"No space available\");\n+        }\n+        for (int i = 0; i < pLength; i++) {\n+            buffer[endOffset] = pBuffer[pOffset + i];\n+            if (++endOffset == buffer.length) {\n+                endOffset = 0;\n+            }\n+        }\n+        currentNumberOfBytes += pLength;\n+    }\n \n-\t/**\n-\t * Returns, whether there is currently room for a single byte in the buffer.\n-\t * Same as {@link #hasSpace(int) hasSpace(1)}.\n-\t * @see #hasSpace(int)\n-\t * @see #getSpace()\n-\t * @return true if there is space for a byte\n-\t */\n-\tpublic boolean hasSpace() {\n-\t\treturn currentNumberOfBytes < buffer.length;\n-\t}\n+    /**\n+     * Returns, whether there is currently room for a single byte in the buffer.\n+     * Same as {@link #hasSpace(int) hasSpace(1)}.\n+     *\n+     * @return true if there is space for a byte\n+     * @see #hasSpace(int)\n+     * @see #getSpace()\n+     */\n+    public boolean hasSpace() {\n+        return currentNumberOfBytes < buffer.length;\n+    }\n \n-\t/**\n-\t * Returns, whether there is currently room for the given number of bytes in the buffer.\n-\t * @see #hasSpace()\n-\t * @see #getSpace()\n-\t * @param pBytes the byte count\n-\t * @return true if there is space for the given number of bytes\n-\t */\n-\tpublic boolean hasSpace(int pBytes) {\n-\t\treturn currentNumberOfBytes+pBytes <= buffer.length;\n-\t}\n+    /**\n+     * Returns, whether there is currently room for the given number of bytes in the buffer.\n+     *\n+     * @param pBytes the byte count\n+     * @return true if there is space for the given number of bytes\n+     * @see #hasSpace()\n+     * @see #getSpace()\n+     */\n+    public boolean hasSpace(int pBytes) {\n+        return currentNumberOfBytes + pBytes <= buffer.length;\n+    }\n \n-\t/**\n-\t * Returns, whether the buffer is currently holding, at least, a single byte.\n-\t * @return true if the buffer is not empty\n-\t */\n-\tpublic boolean hasBytes() {\n-\t\treturn currentNumberOfBytes > 0;\n-\t}\n+    /**\n+     * Returns, whether the buffer is currently holding, at least, a single byte.\n+     *\n+     * @return true if the buffer is not empty\n+     */\n+    public boolean hasBytes() {\n+        return currentNumberOfBytes > 0;\n+    }\n \n-\t/**\n-\t * Returns the number of bytes, that can currently be added to the buffer.\n-\t * @return the number of bytes that can be added\n-\t */\n-\tpublic int getSpace() {\n-\t\treturn buffer.length - currentNumberOfBytes;\n-\t}\n+    /**\n+     * Returns the number of bytes, that can currently be added to the buffer.\n+     *\n+     * @return the number of bytes that can be added\n+     */\n+    public int getSpace() {\n+        return buffer.length - currentNumberOfBytes;\n+    }\n \n-\t/**\n-\t * Returns the number of bytes, that are currently present in the buffer.\n-\t * @return the number of bytes\n-\t */\n-\tpublic int getCurrentNumberOfBytes() {\n-\t\treturn currentNumberOfBytes;\n-\t}\n+    /**\n+     * Returns the number of bytes, that are currently present in the buffer.\n+     *\n+     * @return the number of bytes\n+     */\n+    public int getCurrentNumberOfBytes() {\n+        return currentNumberOfBytes;\n+    }\n \n-\t/**\n-\t * Removes all bytes from the buffer.\n-\t */\n-\tpublic void clear() {\n-\t\tstartOffset = 0;\n-\t\tendOffset = 0;\n-\t\tcurrentNumberOfBytes = 0;\n-\t}\n+    /**\n+     * Removes all bytes from the buffer.\n+     */\n+    public void clear() {\n+        startOffset = 0;\n+        endOffset = 0;\n+        currentNumberOfBytes = 0;\n+    }\n }"
            },
            {
                "sha": "feed9c143283d163420f35cc39ab8533d5a9e4ed",
                "filename": "src/main/java/org/apache/commons/io/input/buffer/PeekableInputStream.java",
                "status": "modified",
                "additions": 63,
                "deletions": 56,
                "changes": 119,
                "blob_url": "https://github.com/apache/commons-io/blob/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/src/main/java/org/apache/commons/io/input/buffer/PeekableInputStream.java",
                "raw_url": "https://github.com/apache/commons-io/raw/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/src/main/java/org/apache/commons/io/input/buffer/PeekableInputStream.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/input/buffer/PeekableInputStream.java?ref=f15433d69c96aec08c9a0c3c15a69edd8250ae2b",
                "patch": "@@ -21,67 +21,74 @@\n import java.util.Objects;\n \n \n-/** Implementation of a buffered input stream, which allows to peek into\n+/**\n+ * Implementation of a buffered input stream, which allows to peek into\n  * the buffers first bytes. This comes in handy when manually implementing\n  * scanners, lexers, parsers, or the like.\n  */\n public class PeekableInputStream extends CircularBufferInputStream {\n-\t/** Creates a new instance, which filters the given input stream, and\n-\t * uses the given buffer size.\n-\t * @param pIn The input stream, which is being buffered.\n-\t * @param pBufferSize The size of the {@link CircularByteBuffer}, which is\n-\t * used internally.\n-\t */\n-\tpublic PeekableInputStream(InputStream pIn, int pBufferSize) {\n-\t\tsuper(pIn, pBufferSize);\n-\t}\n+    /**\n+     * Creates a new instance, which filters the given input stream, and\n+     * uses the given buffer size.\n+     *\n+     * @param pIn         The input stream, which is being buffered.\n+     * @param pBufferSize The size of the {@link CircularByteBuffer}, which is\n+     *                    used internally.\n+     */\n+    public PeekableInputStream(InputStream pIn, int pBufferSize) {\n+        super(pIn, pBufferSize);\n+    }\n \n-\t/** Creates a new instance, which filters the given input stream, and\n-\t * uses a reasonable default buffer size (8192).\n-\t * @param pIn The input stream, which is being buffered.\n-\t */\n-\tpublic PeekableInputStream(InputStream pIn) {\n-\t\tsuper(pIn);\n-\t}\n+    /**\n+     * Creates a new instance, which filters the given input stream, and\n+     * uses a reasonable default buffer size (8192).\n+     *\n+     * @param pIn The input stream, which is being buffered.\n+     */\n+    public PeekableInputStream(InputStream pIn) {\n+        super(pIn);\n+    }\n \n-\t/**\n-\t * Returns, whether the next bytes in the buffer are as given by\n-\t * {@code pBuffer}. This is equivalent to {@link #peek(byte[],int,int)}\n-\t * with {@code pOffset} == 0, and {@code pLength} == {@code pBuffer.length}\n-\t * @param pBuffer the buffer to compare against\n-\t * @return true if the next bytes are as given\n-\t * @throws IOException Refilling the buffer failed.\n-\t */\n-\tpublic boolean peek(byte[] pBuffer) throws IOException {\n-\t\tObjects.requireNonNull(pBuffer, \"Buffer\");\n-\t\tif (pBuffer.length > bufferSize) {\n-\t\t\tthrow new IllegalArgumentException(\"Peek request size of \" + pBuffer.length\n-\t\t\t\t\t                           + \" bytes exceeds buffer size of \" + bufferSize + \" bytes\");\n-\t\t}\n-\t\tif (buffer.getCurrentNumberOfBytes() < pBuffer.length) {\n-\t\t\tfillBuffer();\n-\t\t}\n-\t\treturn buffer.peek(pBuffer, 0, pBuffer.length);\n-\t}\n+    /**\n+     * Returns, whether the next bytes in the buffer are as given by\n+     * {@code pBuffer}. This is equivalent to {@link #peek(byte[], int, int)}\n+     * with {@code pOffset} == 0, and {@code pLength} == {@code pBuffer.length}\n+     *\n+     * @param pBuffer the buffer to compare against\n+     * @return true if the next bytes are as given\n+     * @throws IOException Refilling the buffer failed.\n+     */\n+    public boolean peek(byte[] pBuffer) throws IOException {\n+        Objects.requireNonNull(pBuffer, \"Buffer\");\n+        if (pBuffer.length > bufferSize) {\n+            throw new IllegalArgumentException(\"Peek request size of \" + pBuffer.length\n+                    + \" bytes exceeds buffer size of \" + bufferSize + \" bytes\");\n+        }\n+        if (buffer.getCurrentNumberOfBytes() < pBuffer.length) {\n+            fillBuffer();\n+        }\n+        return buffer.peek(pBuffer, 0, pBuffer.length);\n+    }\n \n-\t/**\n-\t * Returns, whether the next bytes in the buffer are as given by\n-\t * {@code pBuffer}, {code pOffset}, and {@code pLength}.\n-\t * @param pBuffer the buffer to compare against\n-\t * @param pOffset the start offset\n-\t * @param pLength the length to compare\n-\t * @return true if the next bytes in the buffer are as given\n-\t * @throws IOException if there is a problem calling fillBuffer()\n-\t */\n-\tpublic boolean peek(byte[] pBuffer, int pOffset, int pLength) throws IOException {\n-\t\tObjects.requireNonNull(pBuffer, \"Buffer\");\n-\t\tif (pBuffer.length > bufferSize) {\n-\t\t\tthrow new IllegalArgumentException(\"Peek request size of \" + pBuffer.length\n-\t\t\t\t\t                           + \" bytes exceeds buffer size of \" + bufferSize + \" bytes\");\n-\t\t}\n-\t\tif (buffer.getCurrentNumberOfBytes() < pBuffer.length) {\n-\t\t\tfillBuffer();\n-\t\t}\n-\t\treturn buffer.peek(pBuffer, pOffset, pLength);\n-\t}\n+    /**\n+     * Returns, whether the next bytes in the buffer are as given by\n+     * {@code pBuffer}, {code pOffset}, and {@code pLength}.\n+     *\n+     * @param pBuffer the buffer to compare against\n+     * @param pOffset the start offset\n+     * @param pLength the length to compare\n+     * @return true if the next bytes in the buffer are as given\n+     * @throws IOException if there is a problem calling fillBuffer()\n+     */\n+    public boolean peek(byte[] pBuffer, int pOffset, int pLength) throws IOException {\n+        Objects.requireNonNull(pBuffer, \"Buffer\");\n+        if (pBuffer.length > bufferSize) {\n+            throw new IllegalArgumentException(\"Peek request size of \" + pBuffer.length\n+                    + \" bytes exceeds buffer size of \" + bufferSize + \" bytes\");\n+        }\n+        if (buffer.getCurrentNumberOfBytes() < pBuffer.length) {\n+            fillBuffer();\n+        }\n+        return buffer.peek(pBuffer, pOffset, pLength);\n+    }\n }"
            },
            {
                "sha": "06dc5651039995c6c71ec24ee8e2ef8c179127b8",
                "filename": "src/main/java/org/apache/commons/io/input/buffer/package-info.java",
                "status": "added",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/commons-io/blob/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/src/main/java/org/apache/commons/io/input/buffer/package-info.java",
                "raw_url": "https://github.com/apache/commons-io/raw/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/src/main/java/org/apache/commons/io/input/buffer/package-info.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/input/buffer/package-info.java?ref=f15433d69c96aec08c9a0c3c15a69edd8250ae2b",
                "patch": "@@ -0,0 +1,17 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.io.input.buffer;"
            },
            {
                "sha": "a50b0543697fd7da516f8e020ce46909df8d847a",
                "filename": "src/test/java/org/apache/commons/io/IOUtilsCopyTestCase.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/commons-io/blob/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/src/test/java/org/apache/commons/io/IOUtilsCopyTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/f15433d69c96aec08c9a0c3c15a69edd8250ae2b/src/test/java/org/apache/commons/io/IOUtilsCopyTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/java/org/apache/commons/io/IOUtilsCopyTestCase.java?ref=f15433d69c96aec08c9a0c3c15a69edd8250ae2b",
                "patch": "@@ -257,7 +257,7 @@ public void testCopy_readerToAppendable_IO84() throws Exception {\n         final NullWriter writer = new NullWriter();\n \n         // Test copy() method\n-        assertEquals(size, IOUtils.copy(reader, writer));\n+        assertEquals(size, IOUtils.copy(reader, (Appendable) writer));\n \n         // reset the input\n         reader.close();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/660b89f08ab6469d548800b83619e4207c78381b",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/acf5c4be226fe3ef34a1df16403ac42c459caf73",
        "message": "IO-77 revert to throwing NullPointerException rather than IllegalArgumentException\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@610810 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_8",
        "file": [
            {
                "sha": "f4d73b9bc9991937eb2ebe782a5d96ca8791d239",
                "filename": "src/java/org/apache/commons/io/FileUtils.java",
                "status": "modified",
                "additions": 15,
                "deletions": 15,
                "changes": 30,
                "blob_url": "https://github.com/apache/commons-io/blob/660b89f08ab6469d548800b83619e4207c78381b/src/java/org/apache/commons/io/FileUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/660b89f08ab6469d548800b83619e4207c78381b/src/java/org/apache/commons/io/FileUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/java/org/apache/commons/io/FileUtils.java?ref=660b89f08ab6469d548800b83619e4207c78381b",
                "patch": "@@ -1717,17 +1717,17 @@ public static Checksum checksum(File file, Checksum checksum) throws IOException\n      *\n      * @param srcDir the directory to be moved\n      * @param destDir the destination directory\n-     * @throws IllegalArgumentException if source or destination is <code>null</code>\n+     * @throws NullPointerException if source or destination is <code>null</code>\n      * @throws IOException if source or destination is invalid\n      * @throws IOException if an IO error occurs moving the file\n      * @since Commons IO 1.4\n      */\n     public static void moveDirectory(File srcDir, File destDir) throws IOException {\n         if (srcDir == null) {\n-            throw new IllegalArgumentException(\"Source must not be null\");\n+            throw new NullPointerException(\"Source must not be null\");\n         }\n         if (destDir == null) {\n-            throw new IllegalArgumentException(\"Destination must not be null\");\n+            throw new NullPointerException(\"Destination must not be null\");\n         }\n         if (!srcDir.exists()) {\n             throw new FileNotFoundException(\"Source '\" + srcDir + \"' does not exist\");\n@@ -1756,17 +1756,17 @@ public static void moveDirectory(File srcDir, File destDir) throws IOException {\n      * @param destDir the destination file\n      * @param createDestDir If <code>true</code> create the destination directory,\n      * otherwise if <code>false</code> throw an IOException\n-     * @throws IllegalArgumentException if source or destination is <code>null</code>\n+     * @throws NullPointerException if source or destination is <code>null</code>\n      * @throws IOException if source or destination is invalid\n      * @throws IOException if an IO error occurs moving the file\n      * @since Commons IO 1.4\n      */\n     public static void moveDirectoryToDirectory(File src, File destDir, boolean createDestDir) throws IOException {\n         if (src == null) {\n-            throw new IllegalArgumentException( \"Source must not be null\" );\n+            throw new NullPointerException(\"Source must not be null\");\n         }\n         if (destDir == null) {\n-            throw new IllegalArgumentException(\"Destination directory must not be null\");\n+            throw new NullPointerException(\"Destination directory must not be null\");\n         }\n         if (!destDir.exists() && createDestDir) {\n             destDir.mkdirs();\n@@ -1789,17 +1789,17 @@ public static void moveDirectoryToDirectory(File src, File destDir, boolean crea\n      *\n      * @param srcFile the file to be moved\n      * @param destFile the destination file\n-     * @throws IllegalArgumentException if source or destination is <code>null</code>\n+     * @throws NullPointerException if source or destination is <code>null</code>\n      * @throws IOException if source or destination is invalid\n      * @throws IOException if an IO error occurs moving the file\n      * @since Commons IO 1.4\n      */\n     public static void moveFile(File srcFile, File destFile) throws IOException {\n         if (srcFile == null) {\n-            throw new IllegalArgumentException( \"Source must not be null\" );\n+            throw new NullPointerException(\"Source must not be null\");\n         }\n         if (destFile == null) {\n-            throw new IllegalArgumentException(\"Destination must not be null\");\n+            throw new NullPointerException(\"Destination must not be null\");\n         }\n         if (!srcFile.exists()) {\n             throw new FileNotFoundException(\"Source '\" + srcFile + \"' does not exist\");\n@@ -1831,17 +1831,17 @@ public static void moveFile(File srcFile, File destFile) throws IOException {\n      * @param destDir the destination file\n      * @param createDestDir If <code>true</code> create the destination directory,\n      * otherwise if <code>false</code> throw an IOException\n-     * @throws IllegalArgumentException if source or destination is <code>null</code>\n+     * @throws NullPointerException if source or destination is <code>null</code>\n      * @throws IOException if source or destination is invalid\n      * @throws IOException if an IO error occurs moving the file\n      * @since Commons IO 1.4\n      */\n     public static void moveFileToDirectory(File srcFile, File destDir, boolean createDestDir) throws IOException {\n         if (srcFile == null) {\n-            throw new IllegalArgumentException( \"Source must not be null\" );\n+            throw new NullPointerException(\"Source must not be null\");\n         }\n         if (destDir == null) {\n-            throw new IllegalArgumentException(\"Destination directory must not be null\");\n+            throw new NullPointerException(\"Destination directory must not be null\");\n         }\n         if (!destDir.exists() && createDestDir) {\n             destDir.mkdirs();\n@@ -1865,17 +1865,17 @@ public static void moveFileToDirectory(File srcFile, File destDir, boolean creat\n      * @param destDir the destination directory \n      * @param createDestDir If <code>true</code> create the destination directory,\n      * otherwise if <code>false</code> throw an IOException\n-     * @throws IllegalArgumentException if source or destination is <code>null</code>\n+     * @throws NullPointerException if source or destination is <code>null</code>\n      * @throws IOException if source or destination is invalid\n      * @throws IOException if an IO error occurs moving the file\n      * @since Commons IO 1.4\n      */\n     public static void moveToDirectory(File src, File destDir, boolean createDestDir) throws IOException {\n         if (src == null) {\n-            throw new IllegalArgumentException( \"Source must not be null\" );\n+            throw new NullPointerException(\"Source must not be null\");\n         }\n         if (destDir == null) {\n-            throw new IllegalArgumentException(\"Destination must not be null\");\n+            throw new NullPointerException(\"Destination must not be null\");\n         }\n         if (!src.exists()) {\n             throw new FileNotFoundException(\"Source '\" + src + \"' does not exist\");"
            },
            {
                "sha": "93fedfdb52dd9e27aacbe0c85cd99724a9e20a0d",
                "filename": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                "status": "modified",
                "additions": 20,
                "deletions": 20,
                "changes": 40,
                "blob_url": "https://github.com/apache/commons-io/blob/660b89f08ab6469d548800b83619e4207c78381b/src/test/org/apache/commons/io/FileUtilsTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/660b89f08ab6469d548800b83619e4207c78381b/src/test/org/apache/commons/io/FileUtilsTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/org/apache/commons/io/FileUtilsTestCase.java?ref=660b89f08ab6469d548800b83619e4207c78381b",
                "patch": "@@ -1351,14 +1351,14 @@ public boolean delete() {\n     public void testMoveFile_Errors() throws Exception {\n         try {\n             FileUtils.moveFile(null, new File(\"foo\"));\n-            fail(\"Expected IllegalArgumentException when source is null\");\n-        } catch (IllegalArgumentException e) {\n+            fail(\"Expected NullPointerException when source is null\");\n+        } catch (NullPointerException e) {\n             // expected\n         }\n         try {\n             FileUtils.moveFile(new File(\"foo\"), null);\n-            fail(\"Expected IllegalArgumentException when destination is null\");\n-        } catch (IllegalArgumentException e) {\n+            fail(\"Expected NullPointerException when destination is null\");\n+        } catch (NullPointerException e) {\n             // expected\n         }\n         try {\n@@ -1400,14 +1400,14 @@ public void testMoveFileToDirectory() throws Exception {\n     public void testMoveFileToDirectory_Errors() throws Exception {\n         try {\n             FileUtils.moveFileToDirectory(null, new File(\"foo\"), true);\n-            fail(\"Expected IllegalArgumentException when source is null\");\n-        } catch (IllegalArgumentException e) {\n+            fail(\"Expected NullPointerException when source is null\");\n+        } catch (NullPointerException e) {\n             // expected\n         }\n         try {\n             FileUtils.moveFileToDirectory(new File(\"foo\"), null, true);\n-            fail(\"Expected IllegalArgumentException when destination is null\");\n-        } catch (IllegalArgumentException e) {\n+            fail(\"Expected NullPointerException when destination is null\");\n+        } catch (NullPointerException e) {\n             // expected\n         }\n         File testFile1    = new File(getTestDirectory(), \"testMoveFileFile1\");\n@@ -1485,14 +1485,14 @@ public boolean renameTo( File dest ) {\n     public void testMoveDirectory_Errors() throws Exception {\n         try {\n             FileUtils.moveDirectory(null, new File(\"foo\"));\n-            fail(\"Expected IllegalArgumentException when source is null\");\n-        } catch (IllegalArgumentException e) {\n+            fail(\"Expected NullPointerException when source is null\");\n+        } catch (NullPointerException e) {\n             // expected\n         }\n         try {\n             FileUtils.moveDirectory(new File(\"foo\"), null);\n-            fail(\"Expected IllegalArgumentException when destination is null\");\n-        } catch (IllegalArgumentException e) {\n+            fail(\"Expected NullPointerException when destination is null\");\n+        } catch (NullPointerException e) {\n             // expected\n         }\n         try {\n@@ -1549,14 +1549,14 @@ public void testMoveDirectoryToDirectory() throws Exception {\n     public void testMoveDirectoryToDirectory_Errors() throws Exception {\n         try {\n             FileUtils.moveDirectoryToDirectory(null, new File(\"foo\"), true);\n-            fail(\"Expected IllegalArgumentException when source is null\");\n-        } catch (IllegalArgumentException e) {\n+            fail(\"Expected NullPointerException when source is null\");\n+        } catch (NullPointerException e) {\n             // expected\n         }\n         try {\n             FileUtils.moveDirectoryToDirectory(new File(\"foo\"), null, true);\n-            fail(\"Expected IllegalArgumentException when destination is null\");\n-        } catch (IllegalArgumentException e) {\n+            fail(\"Expected NullPointerException when destination is null\");\n+        } catch (NullPointerException e) {\n             // expected\n         }\n         File testFile1    = new File(getTestDirectory(), \"testMoveFileFile1\");\n@@ -1604,14 +1604,14 @@ public void testMoveToDirectory() throws Exception {\n     public void testMoveToDirectory_Errors() throws Exception {\n         try {\n             FileUtils.moveDirectoryToDirectory(null, new File(\"foo\"), true);\n-            fail(\"Expected IllegalArgumentException when source is null\");\n-        } catch (IllegalArgumentException e) {\n+            fail(\"Expected NullPointerException when source is null\");\n+        } catch (NullPointerException e) {\n             // expected\n         }\n         try {\n             FileUtils.moveDirectoryToDirectory(new File(\"foo\"), null, true);\n-            fail(\"Expected IllegalArgumentException when destination is null\");\n-        } catch (IllegalArgumentException e) {\n+            fail(\"Expected NullPointerException when destination is null\");\n+        } catch (NullPointerException e) {\n             // expected\n         }\n         File nonexistant    = new File(getTestDirectory(), \"nonexistant\");"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/7f075b8e754037cb7c2fd396086ca3d6a955675f",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/eb7b931481c13c5443cdaaf47299a10943b4a973",
        "message": "IO-77 - change moveDirectory/moveFile mehtods to throw IllegalArgumentException rather than NullPointerException - thanks to Holger Hoffst\u00e4tte\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@609683 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_9",
        "file": [
            {
                "sha": "6d8bf97a483acb157f4e655dafe01b0c02c72a28",
                "filename": "src/java/org/apache/commons/io/FileUtils.java",
                "status": "modified",
                "additions": 15,
                "deletions": 15,
                "changes": 30,
                "blob_url": "https://github.com/apache/commons-io/blob/7f075b8e754037cb7c2fd396086ca3d6a955675f/src/java/org/apache/commons/io/FileUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/7f075b8e754037cb7c2fd396086ca3d6a955675f/src/java/org/apache/commons/io/FileUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/java/org/apache/commons/io/FileUtils.java?ref=7f075b8e754037cb7c2fd396086ca3d6a955675f",
                "patch": "@@ -1717,17 +1717,17 @@ public static Checksum checksum(File file, Checksum checksum) throws IOException\n      *\n      * @param srcDir the directory to be moved\n      * @param destDir the destination directory\n-     * @throws NullPointerException if source or destination is <code>null</code>\n+     * @throws IllegalArgumentException if source or destination is <code>null</code>\n      * @throws IOException if source or destination is invalid\n      * @throws IOException if an IO error occurs moving the file\n      * @since Commons IO 1.4\n      */\n     public static void moveDirectory(File srcDir, File destDir) throws IOException {\n         if (srcDir == null) {\n-            throw new NullPointerException(\"Source must not be null\");\n+            throw new IllegalArgumentException(\"Source must not be null\");\n         }\n         if (destDir == null) {\n-            throw new NullPointerException(\"Destination must not be null\");\n+            throw new IllegalArgumentException(\"Destination must not be null\");\n         }\n         if (!srcDir.exists()) {\n             throw new FileNotFoundException(\"Source '\" + srcDir + \"' does not exist\");\n@@ -1756,17 +1756,17 @@ public static void moveDirectory(File srcDir, File destDir) throws IOException {\n      * @param destDir the destination file\n      * @param createDestDir If <code>true</code> create the destination directory,\n      * otherwise if <code>false</code> throw an IOException\n-     * @throws NullPointerException if source or destination is <code>null</code>\n+     * @throws IllegalArgumentException if source or destination is <code>null</code>\n      * @throws IOException if source or destination is invalid\n      * @throws IOException if an IO error occurs moving the file\n      * @since Commons IO 1.4\n      */\n     public static void moveDirectoryToDirectory(File src, File destDir, boolean createDestDir) throws IOException {\n         if (src == null) {\n-            throw new NullPointerException( \"Source must not be null\" );\n+            throw new IllegalArgumentException( \"Source must not be null\" );\n         }\n         if (destDir == null) {\n-            throw new NullPointerException(\"Destination directory must not be null\");\n+            throw new IllegalArgumentException(\"Destination directory must not be null\");\n         }\n         if (!destDir.exists() && createDestDir) {\n             destDir.mkdirs();\n@@ -1789,17 +1789,17 @@ public static void moveDirectoryToDirectory(File src, File destDir, boolean crea\n      *\n      * @param srcFile the file to be moved\n      * @param destFile the destination file\n-     * @throws NullPointerException if source or destination is <code>null</code>\n+     * @throws IllegalArgumentException if source or destination is <code>null</code>\n      * @throws IOException if source or destination is invalid\n      * @throws IOException if an IO error occurs moving the file\n      * @since Commons IO 1.4\n      */\n     public static void moveFile(File srcFile, File destFile) throws IOException {\n         if (srcFile == null) {\n-            throw new NullPointerException( \"Source must not be null\" );\n+            throw new IllegalArgumentException( \"Source must not be null\" );\n         }\n         if (destFile == null) {\n-            throw new NullPointerException(\"Destination must not be null\");\n+            throw new IllegalArgumentException(\"Destination must not be null\");\n         }\n         if (!srcFile.exists()) {\n             throw new FileNotFoundException(\"Source '\" + srcFile + \"' does not exist\");\n@@ -1831,17 +1831,17 @@ public static void moveFile(File srcFile, File destFile) throws IOException {\n      * @param destDir the destination file\n      * @param createDestDir If <code>true</code> create the destination directory,\n      * otherwise if <code>false</code> throw an IOException\n-     * @throws NullPointerException if source or destination is <code>null</code>\n+     * @throws IllegalArgumentException if source or destination is <code>null</code>\n      * @throws IOException if source or destination is invalid\n      * @throws IOException if an IO error occurs moving the file\n      * @since Commons IO 1.4\n      */\n     public static void moveFileToDirectory(File srcFile, File destDir, boolean createDestDir) throws IOException {\n         if (srcFile == null) {\n-            throw new NullPointerException( \"Source must not be null\" );\n+            throw new IllegalArgumentException( \"Source must not be null\" );\n         }\n         if (destDir == null) {\n-            throw new NullPointerException(\"Destination directory must not be null\");\n+            throw new IllegalArgumentException(\"Destination directory must not be null\");\n         }\n         if (!destDir.exists() && createDestDir) {\n             destDir.mkdirs();\n@@ -1865,17 +1865,17 @@ public static void moveFileToDirectory(File srcFile, File destDir, boolean creat\n      * @param destDir the destination directory \n      * @param createDestDir If <code>true</code> create the destination directory,\n      * otherwise if <code>false</code> throw an IOException\n-     * @throws NullPointerException if source or destination is <code>null</code>\n+     * @throws IllegalArgumentException if source or destination is <code>null</code>\n      * @throws IOException if source or destination is invalid\n      * @throws IOException if an IO error occurs moving the file\n      * @since Commons IO 1.4\n      */\n     public static void moveToDirectory(File src, File destDir, boolean createDestDir) throws IOException {\n         if (src == null) {\n-            throw new NullPointerException( \"Source must not be null\" );\n+            throw new IllegalArgumentException( \"Source must not be null\" );\n         }\n         if (destDir == null) {\n-            throw new NullPointerException(\"Destination must not be null\");\n+            throw new IllegalArgumentException(\"Destination must not be null\");\n         }\n         if (!src.exists()) {\n             throw new FileNotFoundException(\"Source '\" + src + \"' does not exist\");"
            },
            {
                "sha": "19a0b1278bca5daab74b69e6447a37df1418ae65",
                "filename": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                "status": "modified",
                "additions": 20,
                "deletions": 20,
                "changes": 40,
                "blob_url": "https://github.com/apache/commons-io/blob/7f075b8e754037cb7c2fd396086ca3d6a955675f/src/test/org/apache/commons/io/FileUtilsTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/7f075b8e754037cb7c2fd396086ca3d6a955675f/src/test/org/apache/commons/io/FileUtilsTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/org/apache/commons/io/FileUtilsTestCase.java?ref=7f075b8e754037cb7c2fd396086ca3d6a955675f",
                "patch": "@@ -1351,14 +1351,14 @@ public boolean delete() {\n     public void testMoveFile_Errors() throws Exception {\n         try {\n             FileUtils.moveFile(null, new File(\"foo\"));\n-            fail(\"Expected NullPointerException when source is null\");\n-        } catch (NullPointerException e) {\n+            fail(\"Expected IllegalArgumentException when source is null\");\n+        } catch (IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             FileUtils.moveFile(new File(\"foo\"), null);\n-            fail(\"Expected NullPointerException when destination is null\");\n-        } catch (NullPointerException e) {\n+            fail(\"Expected IllegalArgumentException when destination is null\");\n+        } catch (IllegalArgumentException e) {\n             // expected\n         }\n         try {\n@@ -1400,14 +1400,14 @@ public void testMoveFileToDirectory() throws Exception {\n     public void testMoveFileToDirectory_Errors() throws Exception {\n         try {\n             FileUtils.moveFileToDirectory(null, new File(\"foo\"), true);\n-            fail(\"Expected NullPointerException when source is null\");\n-        } catch (NullPointerException e) {\n+            fail(\"Expected IllegalArgumentException when source is null\");\n+        } catch (IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             FileUtils.moveFileToDirectory(new File(\"foo\"), null, true);\n-            fail(\"Expected NullPointerException when destination is null\");\n-        } catch (NullPointerException e) {\n+            fail(\"Expected IllegalArgumentException when destination is null\");\n+        } catch (IllegalArgumentException e) {\n             // expected\n         }\n         File testFile1    = new File(getTestDirectory(), \"testMoveFileFile1\");\n@@ -1485,14 +1485,14 @@ public boolean renameTo( File dest ) {\n     public void testMoveDirectory_Errors() throws Exception {\n         try {\n             FileUtils.moveDirectory(null, new File(\"foo\"));\n-            fail(\"Expected NullPointerException when source is null\");\n-        } catch (NullPointerException e) {\n+            fail(\"Expected IllegalArgumentException when source is null\");\n+        } catch (IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             FileUtils.moveDirectory(new File(\"foo\"), null);\n-            fail(\"Expected NullPointerException when destination is null\");\n-        } catch (NullPointerException e) {\n+            fail(\"Expected IllegalArgumentException when destination is null\");\n+        } catch (IllegalArgumentException e) {\n             // expected\n         }\n         try {\n@@ -1549,14 +1549,14 @@ public void testMoveDirectoryToDirectory() throws Exception {\n     public void testMoveDirectoryToDirectory_Errors() throws Exception {\n         try {\n             FileUtils.moveDirectoryToDirectory(null, new File(\"foo\"), true);\n-            fail(\"Expected NullPointerException when source is null\");\n-        } catch (NullPointerException e) {\n+            fail(\"Expected IllegalArgumentException when source is null\");\n+        } catch (IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             FileUtils.moveDirectoryToDirectory(new File(\"foo\"), null, true);\n-            fail(\"Expected NullPointerException when destination is null\");\n-        } catch (NullPointerException e) {\n+            fail(\"Expected IllegalArgumentException when destination is null\");\n+        } catch (IllegalArgumentException e) {\n             // expected\n         }\n         File testFile1    = new File(getTestDirectory(), \"testMoveFileFile1\");\n@@ -1604,14 +1604,14 @@ public void testMoveToDirectory() throws Exception {\n     public void testMoveToDirectory_Errors() throws Exception {\n         try {\n             FileUtils.moveDirectoryToDirectory(null, new File(\"foo\"), true);\n-            fail(\"Expected NullPointerException when source is null\");\n-        } catch (NullPointerException e) {\n+            fail(\"Expected IllegalArgumentException when source is null\");\n+        } catch (IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             FileUtils.moveDirectoryToDirectory(new File(\"foo\"), null, true);\n-            fail(\"Expected NullPointerException when destination is null\");\n-        } catch (NullPointerException e) {\n+            fail(\"Expected IllegalArgumentException when destination is null\");\n+        } catch (IllegalArgumentException e) {\n             // expected\n         }\n         File nonexistant    = new File(getTestDirectory(), \"nonexistant\");"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/5ef9722809594f9e087a5be77c098057ef42969a",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/fe3554cc2c0ab534e90742d03d5663c30a173973",
        "message": "IO-128 Change to NullPointerException so that behaviour is unchanged from before - just better error message\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@592606 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_10",
        "file": [
            {
                "sha": "7de8d31ee1e0fd7b2e8695eacd86731e09635efe",
                "filename": "src/java/org/apache/commons/io/FilenameUtils.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/commons-io/blob/5ef9722809594f9e087a5be77c098057ef42969a/src/java/org/apache/commons/io/FilenameUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/5ef9722809594f9e087a5be77c098057ef42969a/src/java/org/apache/commons/io/FilenameUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/java/org/apache/commons/io/FilenameUtils.java?ref=5ef9722809594f9e087a5be77c098057ef42969a",
                "patch": "@@ -978,7 +978,7 @@ public static boolean equals(\n             filename1 = normalize(filename1);\n             filename2 = normalize(filename2);\n             if (filename1 == null || filename2 == null) {\n-                throw new IllegalArgumentException(\n+                throw new NullPointerException(\n                     \"Error normalizing one or both of the file names\");\n             }\n         }"
            },
            {
                "sha": "f9dd0248024153e84fe49a209b7f3d2c87101638",
                "filename": "src/test/org/apache/commons/io/FilenameUtilsTestCase.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/commons-io/blob/5ef9722809594f9e087a5be77c098057ef42969a/src/test/org/apache/commons/io/FilenameUtilsTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/5ef9722809594f9e087a5be77c098057ef42969a/src/test/org/apache/commons/io/FilenameUtilsTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/org/apache/commons/io/FilenameUtilsTestCase.java?ref=5ef9722809594f9e087a5be77c098057ef42969a",
                "patch": "@@ -791,19 +791,19 @@ public void testEqualsNormalizedError_IO_128() {\n         try {\n             FilenameUtils.equalsNormalizedOnSystem(\"//file.txt\", \"file.txt\");\n             fail(\"Invalid normalized first file\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected result\n         }\n         try {\n             FilenameUtils.equalsNormalizedOnSystem(\"file.txt\", \"//file.txt\");\n             fail(\"Invalid normalized second file\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected result\n         }\n         try {\n             FilenameUtils.equalsNormalizedOnSystem(\"//file.txt\", \"//file.txt\");\n             fail(\"Invalid normalized both filse\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected result\n         }\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/d9406824aeba0e977c0692971a6dbb2e62823886",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/e1c5de1bbe2bf93ea9e5212c0f71fb7255dbdcff",
        "message": "[IO-502] Exceptions are suppressed incorrectly when copying files. Fix NPEs due to the patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1741122 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_11",
        "file": [
            {
                "sha": "d4fbea67c102983799883b1ee29f8f7bbbe445b8",
                "filename": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                "status": "modified",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/commons-io/blob/d9406824aeba0e977c0692971a6dbb2e62823886/src/main/java/org/apache/commons/io/FileSystemUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/d9406824aeba0e977c0692971a6dbb2e62823886/src/main/java/org/apache/commons/io/FileSystemUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/FileSystemUtils.java?ref=d9406824aeba0e977c0692971a6dbb2e62823886",
                "patch": "@@ -510,6 +510,23 @@ long parseBytes(final String freeSpace, final String path) throws IOException {\n                         \"Command line did not return any info \" +\n                         \"for command \" + Arrays.asList(cmdAttribs));\n             }\n+\n+            inr.close();\n+            inr = null;\n+\n+            in.close();\n+            in = null;\n+\n+            if (out != null) {\n+                out.close();\n+                out = null;\n+            }\n+\n+            if (err != null) {\n+                err.close();\n+                err = null;\n+            }\n+\n             return lines;\n \n         } catch (final InterruptedException ex) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/9afc2969a3b491476525e100a8a542027576952e",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/586d223e8049873dfa350e5f575e3c03e714dbcf",
        "message": "Silence impossible \"possible NPE\" warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1471788 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_12",
        "file": [
            {
                "sha": "98f4f920e7b76f5eaf310644bc0e6404b1eb10c8",
                "filename": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/commons-io/blob/9afc2969a3b491476525e100a8a542027576952e/src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                "raw_url": "https://github.com/apache/commons-io/raw/9afc2969a3b491476525e100a8a542027576952e/src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/input/XmlStreamReader.java?ref=9afc2969a3b491476525e100a8a542027576952e",
                "patch": "@@ -711,7 +711,7 @@ private static String getXmlProlog(final InputStream is, final String guessedEnc\n             int max = BUFFER_SIZE;\n             int c = is.read(bytes, offset, max);\n             int firstGT = -1;\n-            String xmlProlog = null;\n+            String xmlProlog = \"\"; // avoid possible NPE warning (cannot happen; this just silences the warning)\n             while (c != -1 && firstGT == -1 && offset < BUFFER_SIZE) {\n                 offset += c;\n                 max -= c;"
            },
            {
                "sha": "4e93effeb0fb74c4245dd00e56d080cda66b417a",
                "filename": "src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/commons-io/blob/9afc2969a3b491476525e100a8a542027576952e/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java",
                "raw_url": "https://github.com/apache/commons-io/raw/9afc2969a3b491476525e100a8a542027576952e/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java?ref=9afc2969a3b491476525e100a8a542027576952e",
                "patch": "@@ -669,7 +669,7 @@ private static String getXmlProlog(final BufferedInputStream is, final String gu\n             int max = BUFFER_SIZE;\n             int c = is.read(bytes, offset, max);\n             int firstGT = -1;\n-            String xmlProlog = null;\n+            String xmlProlog = \"\"; // avoid possible NPE warning (cannot happen; this just silences the warning)\n             while (c != -1 && firstGT == -1 && offset < BUFFER_SIZE) {\n                 offset += c;\n                 max -= c;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/e191b9ca9486f2b4273ed5effba490c27a096ddc",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/2541eb43d2716599ab687bce2a61751a3ebdbe9d",
        "message": "Fix NPE since java.io.File.listFiles(FileFilter) can return null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1687886 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_13",
        "file": [
            {
                "sha": "289b9e3de37b1f9fbbf91b5c58becadf96ea815a",
                "filename": "src/main/java/org/apache/commons/io/FileUtils.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/commons-io/blob/e191b9ca9486f2b4273ed5effba490c27a096ddc/src/main/java/org/apache/commons/io/FileUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/e191b9ca9486f2b4273ed5effba490c27a096ddc/src/main/java/org/apache/commons/io/FileUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/FileUtils.java?ref=e191b9ca9486f2b4273ed5effba490c27a096ddc",
                "patch": "@@ -3141,6 +3141,6 @@ public boolean accept(File aFile) {\n                     }\n                 }\n         );\n-        return fileInDir.length > 0;\n+        return fileInDir != null && fileInDir.length > 0;\n     }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/4a02524aef7f78af52cc7c7beedfa1eb83f8ccb5",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/ea3781d3e141599cb3a36f8a236366927a9d10fe",
        "message": "IO-128 - currently file name \"normalization\" errors in the equals method causes a mis-leading NullPointerException. Adding a check for this and throwing an IllegalArgumentException with a better message should improve the user experience.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@584325 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_14",
        "file": [
            {
                "sha": "2c6c62fd975ccdfd600cda1d4ccbb53b39b0e50e",
                "filename": "src/java/org/apache/commons/io/FilenameUtils.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/commons-io/blob/4a02524aef7f78af52cc7c7beedfa1eb83f8ccb5/src/java/org/apache/commons/io/FilenameUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/4a02524aef7f78af52cc7c7beedfa1eb83f8ccb5/src/java/org/apache/commons/io/FilenameUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/java/org/apache/commons/io/FilenameUtils.java?ref=4a02524aef7f78af52cc7c7beedfa1eb83f8ccb5",
                "patch": "@@ -977,6 +977,10 @@ public static boolean equals(\n         if (normalized) {\n             filename1 = normalize(filename1);\n             filename2 = normalize(filename2);\n+            if (filename1 == null || filename2 == null) {\n+                throw new IllegalArgumentException(\n+                    \"Error normalizing one or both of the file names\");\n+            }\n         }\n         if (caseSensitivity == null) {\n             caseSensitivity = IOCase.SENSITIVE;"
            },
            {
                "sha": "637f8acfe60ac42ccc27c5317f2b400769a27f83",
                "filename": "src/test/org/apache/commons/io/FilenameUtilsTestCase.java",
                "status": "modified",
                "additions": 24,
                "deletions": 0,
                "changes": 24,
                "blob_url": "https://github.com/apache/commons-io/blob/4a02524aef7f78af52cc7c7beedfa1eb83f8ccb5/src/test/org/apache/commons/io/FilenameUtilsTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/4a02524aef7f78af52cc7c7beedfa1eb83f8ccb5/src/test/org/apache/commons/io/FilenameUtilsTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/org/apache/commons/io/FilenameUtilsTestCase.java?ref=4a02524aef7f78af52cc7c7beedfa1eb83f8ccb5",
                "patch": "@@ -784,6 +784,30 @@ public void testEqualsNormalizedOnSystem() {\n         assertEquals(false, FilenameUtils.equalsNormalizedOnSystem(\"a/b/\", \"a/b\"));\n     }\n \n+    /**\n+     * Test for https://issues.apache.org/jira/browse/IO-128\n+     */\n+    public void testEqualsNormalizedError_IO_128() {\n+        try {\n+            FilenameUtils.equalsNormalizedOnSystem(\"//file.txt\", \"file.txt\");\n+            fail(\"Invalid normalized first file\");\n+        } catch(IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            FilenameUtils.equalsNormalizedOnSystem(\"file.txt\", \"//file.txt\");\n+            fail(\"Invalid normalized second file\");\n+        } catch(IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            FilenameUtils.equalsNormalizedOnSystem(\"//file.txt\", \"//file.txt\");\n+            fail(\"Invalid normalized both filse\");\n+        } catch(IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testEquals_fullControl() {\n         assertEquals(false, FilenameUtils.equals(\"file.txt\", \"FILE.TXT\", true, IOCase.SENSITIVE));\n         assertEquals(true, FilenameUtils.equals(\"file.txt\", \"FILE.TXT\", true, IOCase.INSENSITIVE));"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/5e62d0ee12f21aa65f97f8d5b7f5bdeb938ef93f",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/a4d187760b94ab4930421148e8433d8a6bafd1c3",
        "message": "IO-334 FileUtils.toURLs throws NPE for null parameter\nDocumented the behaviour\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1347799 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_15",
        "file": [
            {
                "sha": "ff42198c7808b59f1de06527ff5d1522c191b779",
                "filename": "src/changes/changes.xml",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/commons-io/blob/5e62d0ee12f21aa65f97f8d5b7f5bdeb938ef93f/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-io/raw/5e62d0ee12f21aa65f97f8d5b7f5bdeb938ef93f/src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/changes/changes.xml?ref=5e62d0ee12f21aa65f97f8d5b7f5bdeb938ef93f",
                "patch": "@@ -47,6 +47,10 @@ The <action> type attribute can be add,update,fix,remove.\n   <body>\n     <!-- The release date is the date RC is cut -->\n     <release version=\"2.4\" date=\"2012-TDB-TDB\" description=\"\">\n+      <action issue=\"IO-334\" dev=\"sebb\" type=\"fix\">\n+        FileUtils.toURLs throws NPE for null parameter.\n+        Documented the behaviour.\n+      </action>            \n       <action issue=\"IO-333\" dev=\"ggregory\" type=\"add\" due-to=\"fmeschbe\">\n         Export OSGi packages at version 1.x in addition to 2.x.\n       </action>            "
            },
            {
                "sha": "ed45d5483a8cb4fe953dee37b431ec8205a7cbc5",
                "filename": "src/main/java/org/apache/commons/io/FileUtils.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/commons-io/blob/5e62d0ee12f21aa65f97f8d5b7f5bdeb938ef93f/src/main/java/org/apache/commons/io/FileUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/5e62d0ee12f21aa65f97f8d5b7f5bdeb938ef93f/src/main/java/org/apache/commons/io/FileUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/main/java/org/apache/commons/io/FileUtils.java?ref=5e62d0ee12f21aa65f97f8d5b7f5bdeb938ef93f",
                "patch": "@@ -936,9 +936,10 @@ static String decodeUrl(String url) {\n      * <p>\n      * Returns an array of the same size as the input.\n      *\n-     * @param files  the files to convert\n+     * @param files  the files to convert, must not be {@code null}\n      * @return an array of URLs matching the input\n      * @throws IOException if a file cannot be converted\n+     * @throws NullPointerException if the parameter is null\n      */\n     public static URL[] toURLs(File[] files) throws IOException {\n         URL[] urls = new URL[files.length];"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/3545c7701ef563309c4cb6dc3a66f68ec61ed980",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/f9ae38abc1b8c957b7dfdf49b27992204c7b5ae0",
        "message": "Fix potential NPE if proxied stream supports write((byte[]) null) without complaining\nAdd test for same\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1003340 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_16",
        "file": [
            {
                "sha": "66c2dbac9130037aca8e700e8e5c5555ab1d1b0b",
                "filename": "src/java/org/apache/commons/io/output/ProxyOutputStream.java",
                "status": "modified",
                "additions": 3,
                "deletions": 2,
                "changes": 5,
                "blob_url": "https://github.com/apache/commons-io/blob/3545c7701ef563309c4cb6dc3a66f68ec61ed980/src/java/org/apache/commons/io/output/ProxyOutputStream.java",
                "raw_url": "https://github.com/apache/commons-io/raw/3545c7701ef563309c4cb6dc3a66f68ec61ed980/src/java/org/apache/commons/io/output/ProxyOutputStream.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/java/org/apache/commons/io/output/ProxyOutputStream.java?ref=3545c7701ef563309c4cb6dc3a66f68ec61ed980",
                "patch": "@@ -68,9 +68,10 @@ public void write(int idx) throws IOException {\n     @Override\n     public void write(byte[] bts) throws IOException {\n         try {\n-            beforeWrite(bts != null ? bts.length : 0);\n+            int len = bts != null ? bts.length : 0;\n+            beforeWrite(len);\n             out.write(bts);\n-            afterWrite(bts.length);\n+            afterWrite(len);\n         } catch (IOException e) {\n             handleIOException(e);\n         }"
            },
            {
                "sha": "9833d9fd2ffb2f5adcf83fd4187ec2aba21ed7cd",
                "filename": "src/test/org/apache/commons/io/output/ProxyOutputStreamTest.java",
                "status": "added",
                "additions": 57,
                "deletions": 0,
                "changes": 57,
                "blob_url": "https://github.com/apache/commons-io/blob/3545c7701ef563309c4cb6dc3a66f68ec61ed980/src/test/org/apache/commons/io/output/ProxyOutputStreamTest.java",
                "raw_url": "https://github.com/apache/commons-io/raw/3545c7701ef563309c4cb6dc3a66f68ec61ed980/src/test/org/apache/commons/io/output/ProxyOutputStreamTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/org/apache/commons/io/output/ProxyOutputStreamTest.java?ref=3545c7701ef563309c4cb6dc3a66f68ec61ed980",
                "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.io.output;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit Test Case for {@link CloseShieldOutputStream}.\n+ */\n+public class ProxyOutputStreamTest extends TestCase {\n+\n+    private ByteArrayOutputStream original;\n+\n+    private OutputStream proxied;\n+\n+    @Override\n+    protected void setUp() {\n+        original = new ByteArrayOutputStream(){\n+            @Override\n+            public void write(byte[] ba) throws IOException {\n+                if (ba != null){\n+                    super.write(ba);\n+                }\n+            }\n+        };\n+        proxied = new ProxyOutputStream(original);\n+    }\n+\n+    public void testWrite() throws Exception {\n+        proxied.write('y');\n+        assertEquals(1, original.size());\n+        assertEquals('y', original.toByteArray()[0]);\n+    }\n+\n+    public void testWriteNullBaSucceeds() throws Exception {\n+        byte[] ba = null;\n+        original.write(ba);\n+        proxied.write(ba);\n+    }\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/3e71a200c0208f83f126162443d61b354d6f7fb3",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/74b54ab22649c901e787598bffa8565059539d9a",
        "message": "Upgrade maven-changes-plugin from 2.0 to 2.3 (was failing with a NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1003247 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_17",
        "file": [
            {
                "sha": "38db59283e57a2b6aa2a64e6a5d82c0b22f5f0c0",
                "filename": "pom.xml",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/commons-io/blob/3e71a200c0208f83f126162443d61b354d6f7fb3/pom.xml",
                "raw_url": "https://github.com/apache/commons-io/raw/3e71a200c0208f83f126162443d61b354d6f7fb3/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/pom.xml?ref=3e71a200c0208f83f126162443d61b354d6f7fb3",
                "patch": "@@ -262,9 +262,11 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-changes-plugin</artifactId>\n-        <version>2.0</version>\n+        <version>2.3</version>\n         <configuration>\n-          <issueLinkTemplate>%URL%/../%ISSUE%</issueLinkTemplate>\n+          <issueLinkTemplatePerSystem>\n+            <default>%URL%/%ISSUE%</default>\n+          </issueLinkTemplatePerSystem>\n           <columnNames>Fix Version,Type,Key,Summary,Priority,Reporter,Resolution</columnNames>\n           <sortColumnNames>Fix Version DESC,Type,Key DESC</sortColumnNames>\n           <resolutionIds>Fixed</resolutionIds>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/a32a395a621098ce652ee8158e6320fa422f9fa3",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/a360f974003c5c60c16d019e873314c09d965107",
        "message": "Add test for and fix NPE if thread stopped with no file found\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002918 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_18",
        "file": [
            {
                "sha": "a8d36b3449514ae42da49c0f0838b112c6fddd37",
                "filename": "src/java/org/apache/commons/io/input/Tailer.java",
                "status": "modified",
                "additions": 5,
                "deletions": 4,
                "changes": 9,
                "blob_url": "https://github.com/apache/commons-io/blob/a32a395a621098ce652ee8158e6320fa422f9fa3/src/java/org/apache/commons/io/input/Tailer.java",
                "raw_url": "https://github.com/apache/commons-io/raw/a32a395a621098ce652ee8158e6320fa422f9fa3/src/java/org/apache/commons/io/input/Tailer.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/java/org/apache/commons/io/input/Tailer.java?ref=a32a395a621098ce652ee8158e6320fa422f9fa3",
                "patch": "@@ -148,13 +148,14 @@ public void run() {\n \n                 if (reader == null) {\n                     Thread.sleep(delay);\n+                } else {\n+                    // The current position in the file\n+                    position = end ? file.length() : 0;\n+                    last = System.currentTimeMillis();\n+                    reader.seek(position);                    \n                 }\n             }\n \n-            // The current position in the file\n-            position = end ? file.length() : 0;\n-            last = System.currentTimeMillis();\n-            reader.seek(position);\n \n             while (run) {\n "
            },
            {
                "sha": "1d69a98794b4d18441c50bf611283510512df5d4",
                "filename": "src/test/org/apache/commons/io/input/TailerTest.java",
                "status": "modified",
                "additions": 20,
                "deletions": 0,
                "changes": 20,
                "blob_url": "https://github.com/apache/commons-io/blob/a32a395a621098ce652ee8158e6320fa422f9fa3/src/test/org/apache/commons/io/input/TailerTest.java",
                "raw_url": "https://github.com/apache/commons-io/raw/a32a395a621098ce652ee8158e6320fa422f9fa3/src/test/org/apache/commons/io/input/TailerTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/org/apache/commons/io/input/TailerTest.java?ref=a32a395a621098ce652ee8158e6320fa422f9fa3",
                "patch": "@@ -110,13 +110,29 @@ private void write(File file, String... lines) throws Exception {\n         }\n     }\n \n+    public void testStopWithNoFile() throws Exception {\n+        File file = new File(getTestDirectory(),\"nosuchfile\");\n+        assertFalse(\"nosuchfile should not exist\", file.exists());\n+        TestTailerListener listener = new TestTailerListener();\n+        int delay = 100;\n+        int idle = 50; // allow time for thread to work\n+        Tailer tailer = start(file, listener, delay, false);\n+        Thread.sleep(idle);\n+        tailer.stop();\n+        Thread.sleep(delay+idle);\n+        assertNull(listener.exception);\n+    }\n+\n     /**\n      * Test {@link TailerListener} implementation.\n      */\n     private static class TestTailerListener extends TailerListenerAdapter {\n \n         private final List<String> lines = new ArrayList<String>();\n \n+        volatile Exception exception = null;\n+        \n+        @Override\n         public void handle(String line) {\n             lines.add(line);\n         }\n@@ -126,5 +142,9 @@ public void handle(String line) {\n         public void clear() {\n             lines.clear();\n         }\n+        @Override\n+        public void handle(Exception e) {\n+            exception = e;\n+        }\n     }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/403949d8075f3aca227825b69de2de21342071e9",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/d981b95df458230c30beffa819f3110274bbf7fe",
        "message": "[IO-112] NPE in FileUtils.openOutputStream(File) when file has no parent in path.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@503497 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_19",
        "file": [
            {
                "sha": "a15fb553e4a3c9cbef898e795b9fabf878ae87c3",
                "filename": "src/java/org/apache/commons/io/FileUtils.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/commons-io/blob/403949d8075f3aca227825b69de2de21342071e9/src/java/org/apache/commons/io/FileUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/403949d8075f3aca227825b69de2de21342071e9/src/java/org/apache/commons/io/FileUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/java/org/apache/commons/io/FileUtils.java?ref=403949d8075f3aca227825b69de2de21342071e9",
                "patch": "@@ -169,7 +169,7 @@ public static FileOutputStream openOutputStream(File file) throws IOException {\n             }\n         } else {\n             File parent = file.getParentFile();\n-            if (parent.exists() == false) {\n+            if (parent != null && parent.exists() == false) {\n                 if (parent.mkdirs() == false) {\n                     throw new IOException(\"File '\" + file + \"' could not be created\");\n                 }"
            },
            {
                "sha": "12e938e38efa1a6c896260ce259887d4c610a965",
                "filename": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                "status": "modified",
                "additions": 30,
                "deletions": 0,
                "changes": 30,
                "blob_url": "https://github.com/apache/commons-io/blob/403949d8075f3aca227825b69de2de21342071e9/src/test/org/apache/commons/io/FileUtilsTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/403949d8075f3aca227825b69de2de21342071e9/src/test/org/apache/commons/io/FileUtilsTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/org/apache/commons/io/FileUtilsTestCase.java?ref=403949d8075f3aca227825b69de2de21342071e9",
                "patch": "@@ -143,6 +143,36 @@ public void test_openInputStream_notExists() throws Exception {\n     }\n \n     //-----------------------------------------------------------------------\n+    void openOutputStream_noParent(boolean createFile) throws Exception {\n+        File file = new File(\"test.txt\");\n+        assertNull(file.getParentFile());\n+        try {\n+            if (createFile) {\n+            createLineBasedFile(file, new String[]{\"Hello\"});}\n+            FileOutputStream out = null;\n+            try {\n+                out = FileUtils.openOutputStream(file);\n+                out.write(0);\n+            } finally {\n+                IOUtils.closeQuietly(out);\n+            }\n+            assertEquals(true, file.exists());\n+        } finally {\n+            if (file.delete() == false) {\n+                file.deleteOnExit();\n+            }\n+        }\n+    }\n+\n+    public void test_openOutputStream_noParentCreateFile() throws Exception {\n+        openOutputStream_noParent(true);\n+    }\n+\n+    public void test_openOutputStream_noParentNoFile() throws Exception {\n+        openOutputStream_noParent(false);\n+    }\n+\n+\n     public void test_openOutputStream_exists() throws Exception {\n         File file = new File(getTestDirectory(), \"test.txt\");\n         createLineBasedFile(file, new String[] {\"Hello\"});"
            },
            {
                "sha": "c0e991ce19a86c8d13b019e17ef549b38f37f417",
                "filename": "src/test/org/apache/commons/io/testtools/FileBasedTestCase.java",
                "status": "modified",
                "additions": 3,
                "deletions": 5,
                "changes": 8,
                "blob_url": "https://github.com/apache/commons-io/blob/403949d8075f3aca227825b69de2de21342071e9/src/test/org/apache/commons/io/testtools/FileBasedTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/403949d8075f3aca227825b69de2de21342071e9/src/test/org/apache/commons/io/testtools/FileBasedTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/org/apache/commons/io/testtools/FileBasedTestCase.java?ref=403949d8075f3aca227825b69de2de21342071e9",
                "patch": "@@ -93,12 +93,10 @@ protected void generateTestData(OutputStream out, long size)\n     }\n \n     protected void createLineBasedFile(File file, String[] data) throws IOException {\n-        if (!file.getParentFile().exists()) {\n-            throw new IOException(\"Cannot create file \" + file\n-                    + \" as the parent directory does not exist\");\n+        if (file.getParentFile() != null && !file.getParentFile().exists()) {\n+            throw new IOException(\"Cannot create file \" + file + \" as the parent directory does not exist\");\n         }\n-        PrintWriter output = new PrintWriter(\n-            new OutputStreamWriter(new FileOutputStream(file), \"UTF-8\"));\n+        PrintWriter output = new PrintWriter(new OutputStreamWriter(new FileOutputStream(file), \"UTF-8\"));\n         try {\n             for (int i = 0; i < data.length; i++) {\n                 output.println(data[i]);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/e5d4220d2635a31283bada96a769ccb674a9195e",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/5cde3d9ced307f01ded5a4090db3737b1d55e8e5",
        "message": "fixed FileFilterTestCase, was not running due to a few NPEs and faulty test cases\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140348 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_20",
        "file": [
            {
                "sha": "4a85c6c72c53780d924cb7c5b1925cbe4db74d08",
                "filename": "src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                "status": "modified",
                "additions": 18,
                "deletions": 12,
                "changes": 30,
                "blob_url": "https://github.com/apache/commons-io/blob/e5d4220d2635a31283bada96a769ccb674a9195e/src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/e5d4220d2635a31283bada96a769ccb674a9195e/src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java?ref=e5d4220d2635a31283bada96a769ccb674a9195e",
                "patch": "@@ -1,7 +1,7 @@\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//io/src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java,v 1.4 2003/01/27 02:22:31 bayard Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/01/27 02:22:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//io/src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java,v 1.5 2003/02/25 09:03:50 tobrien Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2003/02/25 09:03:50 $\n  *\n  * ====================================================================\n  *\n@@ -96,11 +96,15 @@ public void assertFiltering(FileFilter filter, File file, boolean expected)\n                (filter.accept(file) == expected) \n                );\n \n-       if(file.getParentFile() != null) {\n+       if(file != null && file.getParentFile() != null) {\n            assertTrue(\n                 \"Filter(File, String) \"+filter.getClass().getName()+\" not \"+expected+\" for \"+file, \n                 (filter.accept(file.getParentFile(), file.getName()) == expected)\n            );\n+       } else if( file == null ) {\n+\t   assertTrue(\n+\t\t      \"Filter(File, String) \"+filter.getClass().getName()+\" not \"+expected+\" for null\",\n+\t\t      filter.accept( file ) == expected );\n        }\n     }\n \n@@ -118,21 +122,23 @@ public void testExtension() throws Exception {\n \n     public void testDirectory() throws Exception {\n         FileFilter filter = new DirectoryFileFilter();\n-        /* These don't like the test for accept(File, String)\n+\n         assertFiltering( filter, new File(\"src/\"), true);\n         assertFiltering( filter, new File(\"src/java/\"), true);\n-        */\n+        \n         assertFiltering( filter, new File(\"project.xml\"), false);\n-        assertFiltering( filter, new File(\"test\"), false);\n-        assertFiltering( filter, new File(\"test/\"), false);\n+\t\n+\tassertFiltering( filter, new File(\"test\"), true);\n+        assertFiltering( filter, new File(\"test/\"), true);\n+\n         assertFiltering( filter, new File(\"STATUS.html\"), false);\n     }\n \n     public void testPrefix() throws Exception {\n         FileFilter filter = new PrefixFileFilter( new String[] { \"foo\", \"bar\" } );\n         assertFiltering( filter, new File(\"foo.test\"), true);\n         assertFiltering( filter, new File(\"foo\"), true);\n-        assertFiltering( filter, new File(\"bar\"), false);\n+        assertFiltering( filter, new File(\"bar\"), true);\n         assertFiltering( filter, new File(\"food/\"), true);\n         assertFiltering( filter, new File(\"barred\\\\\"), true);\n         assertFiltering( filter, new File(\"test\"), false);\n@@ -142,9 +148,9 @@ public void testPrefix() throws Exception {\n \n     public void testNull() throws Exception {\n         FileFilter filter = FileFilterUtils.nullFileFilter();\n-        assertFiltering( filter, new File(\"foo.test\"), true);\n-        assertFiltering( filter, new File(\"foo\"), true);\n-        assertFiltering( filter, new File(\"\"), true);\n+        assertFiltering( filter, new File(\"foo.test\"), false);\n+        assertFiltering( filter, new File(\"foo\"), false);\n+        assertFiltering( filter, null, true);\n     }\n \n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/11abbca78285fa0d3fd91ea64d6fd80686fd4eae",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/cf02f0f9b4c0ce1687bbf76dd567c18ab6f23bce",
        "message": "Remove items from try block that don't need to be protected; fixes possible NPE warning in Eclipse.\nStart fixing raw types\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@897193 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_21",
        "file": [
            {
                "sha": "e6884941fcb8f4c9c4c0babf75f0a39dfa9fb380",
                "filename": "src/test/org/apache/commons/io/DirectoryWalkerTestCase.java",
                "status": "modified",
                "additions": 6,
                "deletions": 8,
                "changes": 14,
                "blob_url": "https://github.com/apache/commons-io/blob/11abbca78285fa0d3fd91ea64d6fd80686fd4eae/src/test/org/apache/commons/io/DirectoryWalkerTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/11abbca78285fa0d3fd91ea64d6fd80686fd4eae/src/test/org/apache/commons/io/DirectoryWalkerTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/org/apache/commons/io/DirectoryWalkerTestCase.java?ref=11abbca78285fa0d3fd91ea64d6fd80686fd4eae",
                "patch": "@@ -326,12 +326,10 @@ public void testCancel() {\n      * Test Cancel\n      */\n     public void testMultiThreadCancel() {\n-        String cancelName = null;\n-        TestMultiThreadCancelWalker walker = null;\n+        String cancelName = \"DirectoryWalker.java\";\n+        TestMultiThreadCancelWalker walker = new TestMultiThreadCancelWalker(cancelName, false);\n         // Cancel on a file\n         try {\n-            cancelName = \"DirectoryWalker.java\";\n-            walker = new TestMultiThreadCancelWalker(cancelName, false);\n             walker.find(javaDir);\n             fail(\"CancelException not thrown for '\" + cancelName + \"'\");\n         } catch (DirectoryWalker.CancelException cancel) {\n@@ -421,7 +419,7 @@ protected TestFalseFileFinder(FileFilter filter, int depthLimit) {\n \n         /** Always returns false. */\n         @Override\n-        protected boolean handleDirectory(File directory, int depth, Collection results) {\n+        protected boolean handleDirectory(File directory, int depth, Collection<?> results) {\n             return false;\n         }\n     }\n@@ -469,7 +467,7 @@ protected void handleFile(File file, int depth, Collection results) throws IOExc\n \n         /** Handles Cancel. */\n         @Override\n-        protected void handleCancelled(File startDirectory, Collection results,\n+        protected void handleCancelled(File startDirectory, Collection<?> results,\n                        CancelException cancel) throws IOException {\n             if (!suppressCancel) {\n                 super.handleCancelled(startDirectory, results, cancel);\n@@ -522,13 +520,13 @@ protected void handleFile(File file, int depth, Collection results) throws IOExc\n \n         /** Handles Cancelled. */\n         @Override\n-        protected boolean handleIsCancelled(File file, int depth, Collection results) throws IOException {\n+        protected boolean handleIsCancelled(File file, int depth, Collection<?> results) throws IOException {\n             return cancelled;\n         }\n \n         /** Handles Cancel. */\n         @Override\n-        protected void handleCancelled(File startDirectory, Collection results,\n+        protected void handleCancelled(File startDirectory, Collection<?> results,\n                        CancelException cancel) throws IOException {\n             if (!suppressCancel) {\n                 super.handleCancelled(startDirectory, results, cancel);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/65b3c8a113786f6fb9ab9a387d9631012395fcf0",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/62933fa0b495f47154e91b71d85b7004d965e9f3",
        "message": "BugZilla #25742:\nChange listFiles so its behaviour matches the javadocs.\nFixes NPE when extension is null.\nSubmitted by: Ignat Skoryh <ignat.at.tiger.unisquad.com>\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140448 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_22",
        "file": [
            {
                "sha": "64a298f0ec12ebd9d9618ad35cfee94410870ce3",
                "filename": "src/java/org/apache/commons/io/FileUtils.java",
                "status": "modified",
                "additions": 8,
                "deletions": 3,
                "changes": 11,
                "blob_url": "https://github.com/apache/commons-io/blob/65b3c8a113786f6fb9ab9a387d9631012395fcf0/src/java/org/apache/commons/io/FileUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/65b3c8a113786f6fb9ab9a387d9631012395fcf0/src/java/org/apache/commons/io/FileUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/java/org/apache/commons/io/FileUtils.java?ref=65b3c8a113786f6fb9ab9a387d9631012395fcf0",
                "patch": "@@ -116,7 +116,7 @@\n  * @author <a href=\"mailto:jefft@apache.org\">Jeff Turner</a>\n  * @author Matthew Hawthorne\n  * @author <a href=\"mailto:jeremias@apache.org\">Jeremias Maerki</a>\n- * @version $Id: FileUtils.java,v 1.19 2003/11/23 20:43:30 bayard Exp $\n+ * @version $Id: FileUtils.java,v 1.20 2003/12/25 11:05:59 jeremias Exp $\n  */\n public class FileUtils {\n \n@@ -276,8 +276,13 @@ public static Collection listFiles(File directory, IOFileFilter fileFilter, IOFi\n      * @return an collection of java.io.File with the matching files\n      */\n     public static Collection listFiles(File directory, String[] extensions, boolean recursive) {\n-        String[] suffixes = toSuffixes(extensions);\n-        IOFileFilter filter = new SuffixFileFilter(suffixes);\n+        IOFileFilter filter;\n+        if (extensions == null) {\n+            filter = TrueFileFilter.INSTANCE;\n+        } else {\n+            String[] suffixes = toSuffixes(extensions);\n+            filter = new SuffixFileFilter(suffixes);\n+        }\n         return listFiles(directory, filter, \n             (recursive ? TrueFileFilter.INSTANCE : FalseFileFilter.INSTANCE));\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-io/commit/62ae9ca81916868ea2408c335b6585d3c384fa76",
        "repo": "commons-io",
        "parent": "https://github.com/apache/commons-io/commit/2f2390483ed5168b07266dde083210c390611182",
        "message": "Cleaned up LineIterator changes include:\n* Removed the IOIterator interface, it can be added back later when there is more than one\nIterator implementations with a close method.\n* Doesn't automatically close the Reader at EOF.\n* made LineIterator final because the hasNext method isn't implemented in a subclassable way.\n* constructor throws an IllegaArgumentException, not a NPE when the argument is bogus.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@383730 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-io_23",
        "file": [
            {
                "sha": "b943ae9714f3ddb86bc51e7c3c07678104e35e8f",
                "filename": "src/java/org/apache/commons/io/FileUtils.java",
                "status": "modified",
                "additions": 5,
                "deletions": 16,
                "changes": 21,
                "blob_url": "https://github.com/apache/commons-io/blob/62ae9ca81916868ea2408c335b6585d3c384fa76/src/java/org/apache/commons/io/FileUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/62ae9ca81916868ea2408c335b6585d3c384fa76/src/java/org/apache/commons/io/FileUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/java/org/apache/commons/io/FileUtils.java?ref=62ae9ca81916868ea2408c335b6585d3c384fa76",
                "patch": "@@ -24,6 +24,8 @@\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.io.UnsupportedEncodingException;\n+import java.io.FileReader;\n+import java.io.Reader;\n import java.net.URL;\n import java.util.Collection;\n import java.util.Date;\n@@ -923,22 +925,9 @@ public static List readLines(File file, String encoding) throws IOException {\n \n     /**\n      * Return an Iterator for the lines in a <code>File</code>.\n-     * Please read the javadoc of {@link LineIterator} to understand\n-     * whether you should close the iterator.\n-     * The file is closed if an exception is thrown during this method.\n-     * <p>\n-     * The recommended usage patterm is:\n-     * <pre>\n-     * LineIterator it = FileUtils.lineIterator(file, \"UTF-8\");\n-     * try {\n-     *   while (it.hasNext()) {\n-     *     String line = it.nextLine();\n-     *     /// do something with line\n-     *   }\n-     * } finally {\n-     *   LineIterator.closeQuietly(iterator);\n-     * }\n-     * </pre>\n+     * This neccessitates creating an InputStream for the file. The only ways\n+     * to close this stream are to call {@link LineIterator#close()} or let\n+     * the <code>LineIterator</code> be garbage collected.\n      * <p>\n      * There is no lineIterator method without encoding parameter because\n      * the default encoding can differ between platforms and will have"
            },
            {
                "sha": "7ded05c0e63f1bca724182c083f5a754169afbc4",
                "filename": "src/java/org/apache/commons/io/IOIterator.java",
                "status": "removed",
                "additions": 0,
                "deletions": 35,
                "changes": 35,
                "blob_url": "https://github.com/apache/commons-io/blob/2f2390483ed5168b07266dde083210c390611182/src/java/org/apache/commons/io/IOIterator.java",
                "raw_url": "https://github.com/apache/commons-io/raw/2f2390483ed5168b07266dde083210c390611182/src/java/org/apache/commons/io/IOIterator.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/java/org/apache/commons/io/IOIterator.java?ref=2f2390483ed5168b07266dde083210c390611182",
                "patch": "@@ -1,35 +0,0 @@\n-/*\n- * Copyright 2006 The Apache Software Foundation.\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.io;\n-\n-import java.util.Iterator;\n-\n-/**\n- * An <code>Iterator</code> for IO objects, such as streams, readers\n- * and writers, which must be closed to avoid resource leaks.\n- *\n- * @author Niall Pemberton\n- * @version $Id$\n- * @since Commons IO 1.2\n- */\n-public interface IOIterator extends Iterator {\n-\n-    /**\n-     * Close any open io resources, exceptions are quitely swallowed.\n-     */\n-    public void close();\n-\n-}"
            },
            {
                "sha": "01b8848337a3ec20040b9fd915a07b17be474f76",
                "filename": "src/java/org/apache/commons/io/IOUtils.java",
                "status": "modified",
                "additions": 7,
                "deletions": 31,
                "changes": 38,
                "blob_url": "https://github.com/apache/commons-io/blob/62ae9ca81916868ea2408c335b6585d3c384fa76/src/java/org/apache/commons/io/IOUtils.java",
                "raw_url": "https://github.com/apache/commons-io/raw/62ae9ca81916868ea2408c335b6585d3c384fa76/src/java/org/apache/commons/io/IOUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/java/org/apache/commons/io/IOUtils.java?ref=62ae9ca81916868ea2408c335b6585d3c384fa76",
                "patch": "@@ -509,21 +509,9 @@ public static List readLines(Reader input) throws IOException {\n     //-----------------------------------------------------------------------\n     /**\n      * Return an Iterator for the lines in a <code>Reader</code>.\n-     * Please read the javadoc of {@link LineIterator} to understand\n-     * whether you should close the iterator.\n-     * <p>\n-     * The recommended usage pattern is:\n-     * <pre>\n-     * LineIterator it = IOUtils.lineIterator(reader);\n-     * try {\n-     *   while (it.hasNext()) {\n-     *     String line = it.nextLine();\n-     *     /// do something with line\n-     *   }\n-     * } finally {\n-     *   LineIterator.closeQuietly(iterator);\n-     * }\n-     * </pre>\n+     * Unless you keep a reference to the <code>InputStream</code> the\n+     * only way to close it is to call {@link LineIterator#close()} or\n+     * wait for the garbage collector.\n      *\n      * @param reader  the <code>Reader</code> to read from, not null\n      * @return an Iterator of the lines in the reader, never null\n@@ -537,21 +525,9 @@ public static LineIterator lineIterator(Reader reader) {\n     /**\n      * Return an Iterator for the lines in an <code>InputStream</code>, using\n      * the character encoding specified (or default encoding if null).\n-     * Please read the javadoc of {@link LineIterator} to understand\n-     * whether you should close the iterator.\n-     * <p>\n-     * The recommended usage pattern is:\n-     * <pre>\n-     * LineIterator it = IOUtils.lineIterator(stream, \"UTF-8\");\n-     * try {\n-     *   while (it.hasNext()) {\n-     *     String line = it.nextLine();\n-     *     /// do something with line\n-     *   }\n-     * } finally {\n-     *   LineIterator.closeQuietly(iterator);\n-     * }\n-     * </pre>\n+     * Unless you keep a reference to the <code>InputStream</code> the\n+     * only way to close it is to call {@link LineIterator#close()} or\n+     * wait for the garbage collector.\n      *\n      * @param input  the <code>InputStream</code> to read from, not null\n      * @param encoding  the encoding to use, null means platform default\n@@ -562,7 +538,7 @@ public static LineIterator lineIterator(Reader reader) {\n      */\n     public static LineIterator lineIterator(InputStream input, String encoding) \n                      throws IOException {\n-        InputStreamReader reader = null;\n+        Reader reader = null;\n         if (encoding == null) {\n             reader = new InputStreamReader(input);\n         } else {"
            },
            {
                "sha": "7fa1b3f9ecd4658de25ed73ad69eab8e6f2a4614",
                "filename": "src/java/org/apache/commons/io/LineIterator.java",
                "status": "modified",
                "additions": 22,
                "deletions": 31,
                "changes": 53,
                "blob_url": "https://github.com/apache/commons-io/blob/62ae9ca81916868ea2408c335b6585d3c384fa76/src/java/org/apache/commons/io/LineIterator.java",
                "raw_url": "https://github.com/apache/commons-io/raw/62ae9ca81916868ea2408c335b6585d3c384fa76/src/java/org/apache/commons/io/LineIterator.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/java/org/apache/commons/io/LineIterator.java?ref=62ae9ca81916868ea2408c335b6585d3c384fa76",
                "patch": "@@ -22,32 +22,23 @@\n \n /**\n  * An Iterator over the lines in a <code>Reader</code>.\n+ *\n  * <p>\n- * This iterator must be closed after use to avoid a resource leak.\n- * If you read every line, then the final {@link #hasNext()} method\n- * will close the iterator. If you do not fully read the iterator\n- * then you must call the {@link #close()} method.\n- * <p>\n- * However, since the iterator methods can throw exception, we recommend\n- * always calling close in a finally block:\n- * <pre>\n- * LineIterator it = FileUtils.lineIterator(file, \"UTF-8\");\n- * try {\n- *   while (it.hasNext()) {\n- *     String line = it.nextLine();\n- *     /// do something with line\n- *   }\n- * } finally {\n- *   LineIterator.closeQuietly(iterator);\n- * }\n- * </pre>\n+ * If you do not wish to maintain a reference to the <code>Reader</code>\n+ * you can call {@link #close()} to close the backing <code>Reader</code>\n+ * and free an interal resources.\n  *\n  * @author Niall Pemberton\n  * @author Stephen Colebourne\n+ * @author Sandy McArthur\n  * @version $Id$\n  * @since Commons IO 1.2\n  */\n-public class LineIterator implements IOIterator {\n+/*\n+ * XXX: hasNext() should be reworked so this class can be\n+ * meaningfully subclassed before the final below is removed.\n+ */\n+public final class LineIterator {\n \n     /** The reader that is being read. */\n     private final BufferedReader bufferedReader;\n@@ -60,22 +51,24 @@\n      * Constructs an iterator of the lines for a <code>Reader</code>.\n      *\n      * @param reader the <code>Reader</code> to read from, not null\n-     * @throws NullPointerException if the reader is null\n+     * @throws IllegalArgumentException if the reader is null\n      */\n-    public LineIterator(Reader reader) {\n+    public LineIterator(final Reader reader) throws IllegalArgumentException {\n         if (reader == null) {\n-            throw new NullPointerException(\"Reader must not be null\");\n+            throw new IllegalArgumentException(\"Reader must not be null.\");\n         }\n         if (reader instanceof BufferedReader) {\n-            this.bufferedReader = (BufferedReader) reader;\n+            bufferedReader = (BufferedReader) reader;\n         } else {\n-            this.bufferedReader = new BufferedReader(reader);\n+            bufferedReader = new BufferedReader(reader);\n         }\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Indicates whether the <code>Reader</code> has more lines.\n+     * If there is an <code>IOException</code> then {@link #close()} will\n+     * be called on this instance.\n      *\n      * @return <code>true</code> if the Reader has more lines\n      * @throws IllegalStateException if an IO exception occurs\n@@ -89,7 +82,7 @@ public boolean hasNext() {\n             try {\n                 cachedLine = bufferedReader.readLine();\n                 if (cachedLine == null) {\n-                    close();\n+                    finished = true;\n                     return false;\n                 } else {\n                     return true;\n@@ -130,15 +123,13 @@ public String nextLine() {\n      * Closes the underlying <code>Reader</code> quietly.\n      * This method is useful if you only want to process the first few\n      * lines of a larger file. If you do not close the iterator\n-     * then the <code>Reader</code> remains open and is a resource leak.\n+     * then the <code>Reader</code> remains open.\n      * This method can safely be called multiple times.\n      */\n     public void close() {\n-        if (!finished) {\n-            IOUtils.closeQuietly(bufferedReader);\n-            finished = true;\n-            cachedLine = null;\n-        }\n+        finished = true;\n+        IOUtils.closeQuietly(bufferedReader);\n+        cachedLine = null;\n     }\n \n     /**"
            },
            {
                "sha": "c0f2f5c8a48fac71628fea5b8ae610c0b6763317",
                "filename": "src/test/org/apache/commons/io/LineIteratorTestCase.java",
                "status": "modified",
                "additions": 86,
                "deletions": 103,
                "changes": 189,
                "blob_url": "https://github.com/apache/commons-io/blob/62ae9ca81916868ea2408c335b6585d3c384fa76/src/test/org/apache/commons/io/LineIteratorTestCase.java",
                "raw_url": "https://github.com/apache/commons-io/raw/62ae9ca81916868ea2408c335b6585d3c384fa76/src/test/org/apache/commons/io/LineIteratorTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-io/contents/src/test/org/apache/commons/io/LineIteratorTestCase.java?ref=62ae9ca81916868ea2408c335b6585d3c384fa76",
                "patch": "@@ -74,7 +74,7 @@ public void testConstructor() throws Exception {\n         try {\n             new LineIterator((Reader) null);\n             fail();\n-        } catch (NullPointerException ex) {\n+        } catch (IllegalArgumentException ex) {\n             // expected\n         }\n     }\n@@ -116,11 +116,10 @@ public void testMissingFile() throws Exception {\n         LineIterator iterator = null;\n         try {\n             iterator = FileUtils.lineIterator(testFile, \"UTF-8\");\n+            iterator.close();\n             fail(\"Expected FileNotFoundException\");\n         } catch(FileNotFoundException expected) {\n             // ignore, expected result\n-        } finally {\n-            LineIterator.closeQuietly(iterator);\n         }\n     }\n \n@@ -134,16 +133,13 @@ public void testValidEncoding() throws Exception {\n         createFile(testFile, encoding, 3);\n         \n         LineIterator iterator = FileUtils.lineIterator(testFile, encoding);\n-        try {\n-            int count = 0;\n-            while (iterator.hasNext()) {\n-                assertTrue(iterator.next() instanceof String);\n-                count++;\n-            }\n-            assertEquals(3, count);\n-        } finally {\n-            LineIterator.closeQuietly(iterator);\n+        int count = 0;\n+        while (iterator.hasNext()) {\n+            assertTrue(iterator.next() instanceof String);\n+            count++;\n         }\n+        iterator.close();\n+        assertEquals(3, count);\n     }\n \n     /**\n@@ -158,11 +154,10 @@ public void testInvalidEncoding() throws Exception {\n         LineIterator iterator = null;\n         try {\n             iterator = FileUtils.lineIterator(testFile, encoding);\n+            iterator.close();\n             fail(\"Expected UnsupportedEncodingException\");\n         } catch(UnsupportedEncodingException expected) {\n             // ignore, expected result\n-        } finally {\n-            LineIterator.closeQuietly(iterator);\n         }\n     }\n \n@@ -176,15 +171,12 @@ public void testNextOnly() throws Exception {\n         List lines = createFile(testFile, encoding, 3);\n         \n         LineIterator iterator = FileUtils.lineIterator(testFile, encoding);\n-        try {\n-            for (int i = 0; i < lines.size(); i++) {\n-                String line = (String) iterator.next();\n-                assertEquals(\"next() line \" + i, lines.get(i), line);\n-            }\n-            assertEquals(\"No more expected\", false, iterator.hasNext());\n-        } finally {\n-            LineIterator.closeQuietly(iterator);\n+        for (int i = 0; i < lines.size(); i++) {\n+            String line = (String)iterator.next();\n+            assertEquals(\"next() line \" + i, lines.get(i), line);\n         }\n+        assertEquals(\"No more expected\", false, iterator.hasNext());\n+        iterator.close();\n     }\n \n     /**\n@@ -197,15 +189,12 @@ public void testNextLineOnly() throws Exception {\n         List lines = createFile(testFile, encoding, 3);\n         \n         LineIterator iterator = FileUtils.lineIterator(testFile, encoding);\n-        try {\n-            for (int i = 0; i < lines.size(); i++) {\n-                String line = iterator.nextLine();\n-                assertEquals(\"nextLine() line \" + i, lines.get(i), line);\n-            }\n-            assertFalse(\"No more expected\", iterator.hasNext());\n-        } finally {\n-            LineIterator.closeQuietly(iterator);\n+        for (int i = 0; i < lines.size(); i++) {\n+            String line = iterator.nextLine();\n+            assertEquals(\"nextLine() line \" + i, lines.get(i), line);\n         }\n+        assertFalse(\"No more expected\", iterator.hasNext());\n+        iterator.close();\n     }\n \n     /**\n@@ -218,47 +207,44 @@ public void testCloseEarly() throws Exception {\n         File testFile = new File(getTestDirectory(), \"LineIterator-closeEarly.txt\");\n         createFile(testFile, encoding, 3);\n         \n-        LineIterator iterator = null;\n+        LineIterator iterator = FileUtils.lineIterator(testFile, encoding);\n+\n+        // get\n+        assertTrue(\"Line expected\", iterator.next() instanceof String);\n+        assertTrue(\"More expected\", iterator.hasNext());\n+\n+        // close\n+        iterator.close();\n+        assertFalse(\"No more expected\", iterator.hasNext());\n         try {\n-            iterator = FileUtils.lineIterator(testFile, encoding);\n-            \n-            // get\n-            assertTrue(\"Line expected\", iterator.next() instanceof String);\n-            assertTrue(\"More expected\", iterator.hasNext());\n-            \n-            // close\n-            iterator.close();\n-            assertFalse(\"No more expected\", iterator.hasNext());\n-            try {\n-                iterator.next();\n-                fail();\n-            } catch (NoSuchElementException ex) {\n-                // expected\n-            }\n-            try {\n-                iterator.nextLine();\n-                fail();\n-            } catch (NoSuchElementException ex) {\n-                // expected\n-            }\n-            \n-            // try closing again\n-            iterator.close();\n-            try {\n-                iterator.next();\n-                fail();\n-            } catch (NoSuchElementException ex) {\n-                // expected\n-            }\n-            try {\n-                iterator.nextLine();\n-                fail();\n-            } catch (NoSuchElementException ex) {\n-                // expected\n-            }\n-        } finally {\n-            LineIterator.closeQuietly(iterator);\n+            iterator.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+            // expected\n         }\n+        try {\n+            iterator.nextLine();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+            // expected\n+        }\n+\n+        // try closing again\n+        iterator.close();\n+        try {\n+            iterator.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+            // expected\n+        }\n+        try {\n+            iterator.nextLine();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+            // expected\n+        }\n+\n+        iterator.close();\n     }\n \n     /**\n@@ -272,42 +258,39 @@ private void doTestFileWithSpecifiedLines(int lineCount) throws Exception {\n         File testFile = new File(getTestDirectory(), fileName);\n         List lines = createFile(testFile, encoding, lineCount);\n         \n-        LineIterator iterator = null;\n+        LineIterator iterator = FileUtils.lineIterator(testFile, encoding);\n+\n         try {\n-            iterator = FileUtils.lineIterator(testFile, encoding);\n-            \n-            try {\n-                iterator.remove();\n-                fail(\"Remove is unsupported\");\n-            } catch (UnsupportedOperationException ex) {\n-                // expected\n-            }\n-            \n-            int idx = 0;\n-            while (iterator.hasNext()) {\n-                String line = (String)iterator.next();\n-                assertEquals(\"Comparing line \" + idx, lines.get(idx), line);\n-                assertTrue(\"Exceeded expected idx=\" + idx + \" size=\" + lines.size(), idx < lines.size());\n-                idx++;\n-            }\n-            assertEquals(\"Line Count doesn't match\", idx, lines.size());\n-            \n-            // try calling next() after file processed\n-            try {\n-                iterator.next();\n-                fail(\"Expected NoSuchElementException\");\n-            } catch (NoSuchElementException expected) {\n-                // ignore, expected result\n-            }\n-            try {\n-                iterator.nextLine();\n-                fail(\"Expected NoSuchElementException\");\n-            } catch (NoSuchElementException expected) {\n-                // ignore, expected result\n-            }\n-        } finally {\n-            LineIterator.closeQuietly(iterator);\n+            iterator.remove();\n+            fail(\"Remove is unsupported\");\n+        } catch (UnsupportedOperationException ex) {\n+            // expected\n         }\n+\n+        int idx = 0;\n+        while (iterator.hasNext()) {\n+            String line = (String)iterator.next();\n+            assertEquals(\"Comparing line \" + idx, lines.get(idx), line);\n+            assertTrue(\"Exceeded expected idx=\" + idx + \" size=\" + lines.size(), idx < lines.size());\n+            idx++;\n+        }\n+        assertEquals(\"Line Count doesn't match\", idx, lines.size());\n+\n+        // try calling next() after file processed\n+        try {\n+            iterator.next();\n+            fail(\"Expected NoSuchElementException\");\n+        } catch (NoSuchElementException expected) {\n+            // ignore, expected result\n+        }\n+        try {\n+            iterator.nextLine();\n+            fail(\"Expected NoSuchElementException\");\n+        } catch (NoSuchElementException expected) {\n+            // ignore, expected result\n+        }\n+\n+        iterator.close();\n     }\n \n     /**"
            }
        ]
    }
]
