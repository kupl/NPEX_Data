[
    {
        "commit": "https://github.com/apache/geronimo-yoko/commit/32255b0bc18e1f704f4376e99a92ffbf12c8fb73",
        "repo": "geronimo-yoko",
        "parent": "https://github.com/apache/geronimo-yoko/commit/3ebe0147f2ed236cf9718760e4281c5ffdd18513",
        "message": "Merge branch 'npe_in_meta' into 'ibm-trunk'\n\nNpe in meta\n\nSee merge request !55",
        "bug_id": "geronimo-yoko_1",
        "file": [
            {
                "sha": "d6875f1ed15266e6f75a50de90caf4a7e1274ee3",
                "filename": "yoko-core/src/test/java/org/apache/yoko/MetaTest.java",
                "status": "added",
                "additions": 18,
                "deletions": 0,
                "changes": 18,
                "blob_url": "https://github.com/apache/geronimo-yoko/blob/32255b0bc18e1f704f4376e99a92ffbf12c8fb73/yoko-core/src/test/java/org/apache/yoko/MetaTest.java",
                "raw_url": "https://github.com/apache/geronimo-yoko/raw/32255b0bc18e1f704f4376e99a92ffbf12c8fb73/yoko-core/src/test/java/org/apache/yoko/MetaTest.java",
                "contents_url": "https://api.github.com/repos/apache/geronimo-yoko/contents/yoko-core/src/test/java/org/apache/yoko/MetaTest.java?ref=32255b0bc18e1f704f4376e99a92ffbf12c8fb73",
                "patch": "@@ -0,0 +1,18 @@\n+package org.apache.yoko;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class MetaTest extends AbstractOrbTestBase {\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        setWaitForFile(\"Test.ref\");\n+    }\n+\n+    @Test\n+    public void testMeta() throws Exception {\n+        client.invokeMain(\"test.meta.TestMeta\");\n+    }\n+}"
            },
            {
                "sha": "52bcc8a8988501f114d7066af9df5ef3063dc216",
                "filename": "yoko-core/src/test/java/test/meta/TestMeta.java",
                "status": "added",
                "additions": 31,
                "deletions": 0,
                "changes": 31,
                "blob_url": "https://github.com/apache/geronimo-yoko/blob/32255b0bc18e1f704f4376e99a92ffbf12c8fb73/yoko-core/src/test/java/test/meta/TestMeta.java",
                "raw_url": "https://github.com/apache/geronimo-yoko/raw/32255b0bc18e1f704f4376e99a92ffbf12c8fb73/yoko-core/src/test/java/test/meta/TestMeta.java",
                "contents_url": "https://api.github.com/repos/apache/geronimo-yoko/contents/yoko-core/src/test/java/test/meta/TestMeta.java?ref=32255b0bc18e1f704f4376e99a92ffbf12c8fb73",
                "patch": "@@ -0,0 +1,31 @@\n+package test.meta;\n+\n+import java.io.Serializable;\n+\n+import javax.rmi.CORBA.Util;\n+import javax.rmi.CORBA.ValueHandler;\n+\n+import org.junit.Assert;\n+import org.omg.CORBA.ValueDefPackage.FullValueDescription;\n+import org.omg.SendingContext.CodeBase;\n+\n+public class TestMeta {\n+\n+    public static void main(String[] args) throws Exception {\n+        testMeta();\n+    }\n+\n+    public static void testMeta() throws Exception {\n+        ValueHandler vh = Util.createValueHandler();\n+        CodeBase codebase = (CodeBase)vh.getRunTimeCodeBase();\n+        String dataClassRepid = vh.getRMIRepositoryID(Data.class);\n+        FullValueDescription fvd = codebase.meta(dataClassRepid);\n+        Assert.assertNotNull(fvd);\n+    }\n+\n+    public static class Data implements Serializable {\n+        private static final long serialVersionUID = 1L;\n+        public Data d;\n+    }\n+\n+}"
            },
            {
                "sha": "636ee916726035c0cd97ba44a8eaf264a45ab22e",
                "filename": "yoko-rmi-impl/src/main/java/org/apache/yoko/rmi/impl/ValueDescriptor.java",
                "status": "modified",
                "additions": 25,
                "deletions": 7,
                "changes": 32,
                "blob_url": "https://github.com/apache/geronimo-yoko/blob/32255b0bc18e1f704f4376e99a92ffbf12c8fb73/yoko-rmi-impl/src/main/java/org/apache/yoko/rmi/impl/ValueDescriptor.java",
                "raw_url": "https://github.com/apache/geronimo-yoko/raw/32255b0bc18e1f704f4376e99a92ffbf12c8fb73/yoko-rmi-impl/src/main/java/org/apache/yoko/rmi/impl/ValueDescriptor.java",
                "contents_url": "https://api.github.com/repos/apache/geronimo-yoko/contents/yoko-rmi-impl/src/main/java/org/apache/yoko/rmi/impl/ValueDescriptor.java?ref=32255b0bc18e1f704f4376e99a92ffbf12c8fb73",
                "patch": "@@ -61,7 +61,6 @@\n import org.omg.CORBA.VM_NONE;\n import org.omg.CORBA.ValueMember;\n import org.omg.CORBA.ValueDefPackage.FullValueDescription;\n-import org.omg.CORBA.portable.IndirectionException;\n import org.omg.CORBA.portable.InputStream;\n import org.omg.CORBA.portable.OutputStream;\n import org.omg.CORBA.portable.UnknownException;\n@@ -846,7 +845,9 @@ long getHashCode() {\n \n     protected ValueMember[] _value_members = null;\n \n-    ValueMember[] getValueMembers() {\n+    private ValueMember[] getValueMembers() {\n+        getTypeCode(); // ensure recursion through typecode for non-array types\n+\n         if (_value_members == null) {\n             _value_members = new ValueMember[_fields.length];\n             for (int i = 0; i < _fields.length; i++) {\n@@ -879,12 +880,29 @@ TypeCode getTypeCode() {\n         return _type_code;\n     }\n \n+    private static final OperationDescription[] ZERO_OPERATIONS = {};\n+    private static final AttributeDescription[] ZERO_ATTRIBUTES = {};\n+    private static final Initializer[] ZERO_INITIALIZERS = {};\n+    private static final String[] ZERO_STRINGS = {};\n+    \n     FullValueDescription getFullValueDescription() {\n-        return new FullValueDescription(getJavaClass().getName(), getRepositoryID(),\n-                false, // is_abstract\n-                isCustomMarshalled(), \"\", \"1.0\", new OperationDescription[0], new AttributeDescription[0], getValueMembers(), new Initializer[0],\n-                new String[0], new String[0], false, // is_truncatable\n-                ((_super_descriptor == null) ? \"\" : _super_descriptor.getRepositoryID()), getTypeCode());\n+        FullValueDescription fvd = new FullValueDescription();\n+        fvd.name = getJavaClass().getName();\n+        fvd.id = getRepositoryID();\n+        fvd.is_abstract = false;\n+        fvd.is_custom = isCustomMarshalled();\n+        fvd.defined_in = \"\";\n+        fvd.version = \"1.0\";\n+        fvd.operations = ZERO_OPERATIONS;\n+        fvd.attributes = ZERO_ATTRIBUTES;\n+        fvd.members = getValueMembers();\n+        fvd.initializers = ZERO_INITIALIZERS;\n+        fvd.supported_interfaces = ZERO_STRINGS;\n+        fvd.abstract_base_values = ZERO_STRINGS;\n+        fvd.is_truncatable = false;\n+        fvd.base_value = ((_super_descriptor == null) ? \"\" : _super_descriptor.getRepositoryID());\n+        fvd.type = getTypeCode();\n+        return fvd;\n     }\n \n     class ObjectDeserializer {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/geronimo-yoko/commit/cad2f331f25fb0290c6ae79a8bd63c5360017743",
        "repo": "geronimo-yoko",
        "parent": "https://github.com/apache/geronimo-yoko/commit/900fa433074e0d44afdc8eac0d335c39d757f01a",
        "message": "Throw NPE from NamingContext when NameComponent has null fields",
        "bug_id": "geronimo-yoko_2",
        "file": [
            {
                "sha": "dd8bf5bcb513128d8054559af75e67c5df907215",
                "filename": "yoko-core/src/main/java/org/apache/yoko/orb/CosNaming/tnaming2/NamingContextBase.java",
                "status": "modified",
                "additions": 9,
                "deletions": 2,
                "changes": 11,
                "blob_url": "https://github.com/apache/geronimo-yoko/blob/cad2f331f25fb0290c6ae79a8bd63c5360017743/yoko-core/src/main/java/org/apache/yoko/orb/CosNaming/tnaming2/NamingContextBase.java",
                "raw_url": "https://github.com/apache/geronimo-yoko/raw/cad2f331f25fb0290c6ae79a8bd63c5360017743/yoko-core/src/main/java/org/apache/yoko/orb/CosNaming/tnaming2/NamingContextBase.java",
                "contents_url": "https://api.github.com/repos/apache/geronimo-yoko/contents/yoko-core/src/main/java/org/apache/yoko/orb/CosNaming/tnaming2/NamingContextBase.java?ref=cad2f331f25fb0290c6ae79a8bd63c5360017743",
                "patch": "@@ -24,6 +24,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n@@ -613,8 +614,14 @@ protected void validateName(NameComponent[] n) throws InvalidName {\n         // we have at least one name, so validate the toplevel item\n         NameComponent name = n[0];\n \n-        // more name validation\n-        if (name.id.length() == 0 && name.kind.length() == 0) {\n+        // for remote invocation, client would have received an NPE on marshalling a NameComponent with a null field\n+        // for local invocation, ok to propagate the NPE and not a CORBA BAD_PARAM\n+        Objects.requireNonNull(name.id, \"A NameComponent must not have a null id field\");\n+        Objects.requireNonNull(name.kind, \"A NameComponent must not have a null kind field\");\n+\n+        // This ensures the name is not completely empty, but is this correct? CosNaming1.4 2.4.1 says:\n+        // > The single '.' character is the only representation of a name with empty id and kind fields.\n+        if (name.id.isEmpty() && name.kind.isEmpty()) {\n             throw new InvalidName();\n         }\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/geronimo-yoko/commit/280844afc933ad64383ddc423899fc174328bd37",
        "repo": "geronimo-yoko",
        "parent": "https://github.com/apache/geronimo-yoko/commit/4459c52810c3977f6af127efdbf9fe71b0f328cd",
        "message": "GERONIMOTCK-133 Change equation comparation order to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/yoko/trunk@1364476 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "geronimo-yoko_3",
        "file": [
            {
                "sha": "0b03204760009f91944282a052bdb24197c96845",
                "filename": "yoko-core/src/main/java/org/apache/yoko/orb/OB/ValueReader.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/geronimo-yoko/blob/280844afc933ad64383ddc423899fc174328bd37/yoko-core/src/main/java/org/apache/yoko/orb/OB/ValueReader.java",
                "raw_url": "https://github.com/apache/geronimo-yoko/raw/280844afc933ad64383ddc423899fc174328bd37/yoko-core/src/main/java/org/apache/yoko/orb/OB/ValueReader.java",
                "contents_url": "https://api.github.com/repos/apache/geronimo-yoko/contents/yoko-core/src/main/java/org/apache/yoko/orb/OB/ValueReader.java?ref=280844afc933ad64383ddc423899fc174328bd37",
                "patch": "@@ -1081,7 +1081,7 @@ private Class resolveRepoClass(String name, String codebase)\n             result = read(strategy);\n         } catch (org.omg.CORBA.MARSHAL marshalex) {\n             logger.severe(marshalex.getMessage() + \" at pos=\" + (in_.buf_.pos_- 4));\n-            if (System.getProperty(\"org.apache.yoko.ignoreInvalidValueTag\").equalsIgnoreCase(\"true\")) {\n+            if (\"true\".equalsIgnoreCase(System.getProperty(\"org.apache.yoko.ignoreInvalidValueTag\"))) {\n                 result = read(strategy);\n             } else {\n                 throw marshalex;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/geronimo-yoko/commit/06507e9fe11b0130a13ac3ed04431332d0710f58",
        "repo": "geronimo-yoko",
        "parent": "https://github.com/apache/geronimo-yoko/commit/21b92f9312e55eacd637c0068f6f272a0f8c8d30",
        "message": "YOKO-420 NPE from create_POA if null is passed for the policies list.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/yoko/trunk@635536 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "geronimo-yoko_4",
        "file": [
            {
                "sha": "f55411720a1be68ffc8e308bdf4c8bb6f33f5a2b",
                "filename": "core/src/main/java/org/apache/yoko/orb/OBPortableServer/POAPolicies.java",
                "status": "modified",
                "additions": 62,
                "deletions": 60,
                "changes": 122,
                "blob_url": "https://github.com/apache/geronimo-yoko/blob/06507e9fe11b0130a13ac3ed04431332d0710f58/core/src/main/java/org/apache/yoko/orb/OBPortableServer/POAPolicies.java",
                "raw_url": "https://github.com/apache/geronimo-yoko/raw/06507e9fe11b0130a13ac3ed04431332d0710f58/core/src/main/java/org/apache/yoko/orb/OBPortableServer/POAPolicies.java",
                "contents_url": "https://api.github.com/repos/apache/geronimo-yoko/contents/core/src/main/java/org/apache/yoko/orb/OBPortableServer/POAPolicies.java?ref=06507e9fe11b0130a13ac3ed04431332d0710f58",
                "patch": "@@ -78,67 +78,69 @@\n         dispatchStrategyPolicyValue_ = null;\n         bidirPolicyValue_ = org.omg.BiDirPolicy.BOTH.value;\n \n-        for (int i = 0; i < policies.length; ++i) {\n-            int policyType = policies[i].policy_type();\n-            if (policyType == org.omg.PortableServer.THREAD_POLICY_ID.value) {\n-                org.omg.PortableServer.ThreadPolicy policy = org.omg.PortableServer.ThreadPolicyHelper\n-                        .narrow(policies[i]);\n-                synchronizationPolicyValue_ = (policy.value() == org.omg.PortableServer.ThreadPolicyValue.ORB_CTRL_MODEL) ? SynchronizationPolicyValue.NO_SYNCHRONIZATION\n-                        : SynchronizationPolicyValue.SYNCHRONIZE_ON_ORB;\n-            } else if (policyType == org.omg.PortableServer.LIFESPAN_POLICY_ID.value) {\n-                org.omg.PortableServer.LifespanPolicy policy = org.omg.PortableServer.LifespanPolicyHelper\n-                        .narrow(policies[i]);\n-                lifespanPolicyValue_ = policy.value();\n-            } else if (policyType == org.omg.PortableServer.ID_UNIQUENESS_POLICY_ID.value) {\n-                org.omg.PortableServer.IdUniquenessPolicy policy = org.omg.PortableServer.IdUniquenessPolicyHelper\n-                        .narrow(policies[i]);\n-                idUniquenessPolicyValue_ = policy.value();\n-            } else if (policyType == org.omg.PortableServer.ID_ASSIGNMENT_POLICY_ID.value) {\n-                org.omg.PortableServer.IdAssignmentPolicy policy = org.omg.PortableServer.IdAssignmentPolicyHelper\n-                        .narrow(policies[i]);\n-                idAssignmentPolicyValue_ = policy.value();\n-            } else if (policyType == org.omg.PortableServer.IMPLICIT_ACTIVATION_POLICY_ID.value) {\n-                org.omg.PortableServer.ImplicitActivationPolicy policy = org.omg.PortableServer.ImplicitActivationPolicyHelper\n-                        .narrow(policies[i]);\n-                implicitActivationPolicyValue_ = policy.value();\n-            } else if (policyType == org.omg.PortableServer.SERVANT_RETENTION_POLICY_ID.value) {\n-                org.omg.PortableServer.ServantRetentionPolicy policy = org.omg.PortableServer.ServantRetentionPolicyHelper\n-                        .narrow(policies[i]);\n-                servantRetentionPolicyValue_ = policy.value();\n-            } else if (policyType == org.omg.PortableServer.REQUEST_PROCESSING_POLICY_ID.value) {\n-                org.omg.PortableServer.RequestProcessingPolicy policy = org.omg.PortableServer.RequestProcessingPolicyHelper\n-                        .narrow(policies[i]);\n-                requestProcessingPolicyValue_ = policy.value();\n-            } else if (policyType == org.omg.BiDirPolicy.BIDIRECTIONAL_POLICY_TYPE.value) {\n-                org.omg.BiDirPolicy.BidirectionalPolicy p = org.omg.BiDirPolicy.BidirectionalPolicyHelper\n-                        .narrow(policies[i]);\n-                bidirPolicyValue_ = p.value();\n+        if (policies != null) {\n+            for (int i = 0; i < policies.length; ++i) {\n+                int policyType = policies[i].policy_type();\n+                if (policyType == org.omg.PortableServer.THREAD_POLICY_ID.value) {\n+                    org.omg.PortableServer.ThreadPolicy policy = org.omg.PortableServer.ThreadPolicyHelper\n+                            .narrow(policies[i]);\n+                    synchronizationPolicyValue_ = (policy.value() == org.omg.PortableServer.ThreadPolicyValue.ORB_CTRL_MODEL) ? SynchronizationPolicyValue.NO_SYNCHRONIZATION\n+                            : SynchronizationPolicyValue.SYNCHRONIZE_ON_ORB;\n+                } else if (policyType == org.omg.PortableServer.LIFESPAN_POLICY_ID.value) {\n+                    org.omg.PortableServer.LifespanPolicy policy = org.omg.PortableServer.LifespanPolicyHelper\n+                            .narrow(policies[i]);\n+                    lifespanPolicyValue_ = policy.value();\n+                } else if (policyType == org.omg.PortableServer.ID_UNIQUENESS_POLICY_ID.value) {\n+                    org.omg.PortableServer.IdUniquenessPolicy policy = org.omg.PortableServer.IdUniquenessPolicyHelper\n+                            .narrow(policies[i]);\n+                    idUniquenessPolicyValue_ = policy.value();\n+                } else if (policyType == org.omg.PortableServer.ID_ASSIGNMENT_POLICY_ID.value) {\n+                    org.omg.PortableServer.IdAssignmentPolicy policy = org.omg.PortableServer.IdAssignmentPolicyHelper\n+                            .narrow(policies[i]);\n+                    idAssignmentPolicyValue_ = policy.value();\n+                } else if (policyType == org.omg.PortableServer.IMPLICIT_ACTIVATION_POLICY_ID.value) {\n+                    org.omg.PortableServer.ImplicitActivationPolicy policy = org.omg.PortableServer.ImplicitActivationPolicyHelper\n+                            .narrow(policies[i]);\n+                    implicitActivationPolicyValue_ = policy.value();\n+                } else if (policyType == org.omg.PortableServer.SERVANT_RETENTION_POLICY_ID.value) {\n+                    org.omg.PortableServer.ServantRetentionPolicy policy = org.omg.PortableServer.ServantRetentionPolicyHelper\n+                            .narrow(policies[i]);\n+                    servantRetentionPolicyValue_ = policy.value();\n+                } else if (policyType == org.omg.PortableServer.REQUEST_PROCESSING_POLICY_ID.value) {\n+                    org.omg.PortableServer.RequestProcessingPolicy policy = org.omg.PortableServer.RequestProcessingPolicyHelper\n+                            .narrow(policies[i]);\n+                    requestProcessingPolicyValue_ = policy.value();\n+                } else if (policyType == org.omg.BiDirPolicy.BIDIRECTIONAL_POLICY_TYPE.value) {\n+                    org.omg.BiDirPolicy.BidirectionalPolicy p = org.omg.BiDirPolicy.BidirectionalPolicyHelper\n+                            .narrow(policies[i]);\n+                    bidirPolicyValue_ = p.value();\n+                }\n+\n+                //\n+                // Yoko proprietary policies\n+                //\n+                else if (policyType == SYNCHRONIZATION_POLICY_ID.value) {\n+                    SynchronizationPolicy policy = SynchronizationPolicyHelper\n+                            .narrow(policies[i]);\n+                    synchronizationPolicyValue_ = policy.value();\n+                } else if (policyType == DISPATCH_STRATEGY_POLICY_ID.value) {\n+                    DispatchStrategyPolicy policy = DispatchStrategyPolicyHelper\n+                            .narrow(policies[i]);\n+                    dispatchStrategyPolicyValue_ = policy.value();\n+                } else if (policyType == INTERCEPTOR_CALL_POLICY_ID.value) {\n+                    InterceptorCallPolicy policy = InterceptorCallPolicyHelper\n+                            .narrow(policies[i]);\n+                    interceptorCallPolicyValue_ = policy.value();\n+                } else if (policyType == ZERO_PORT_POLICY_ID.value) {\n+                    ZeroPortPolicy policy = ZeroPortPolicyHelper\n+                            .narrow(policies[i]);\n+                    zeroPortPolicyValue_ = policy.value();\n+                }\n+\n+                //\n+                // Otherwise the policy is not a ORB defined POA policy\n+                //\n             }\n-\n-            //\n-            // Yoko proprietary policies\n-            //\n-            else if (policyType == SYNCHRONIZATION_POLICY_ID.value) {\n-                SynchronizationPolicy policy = SynchronizationPolicyHelper\n-                        .narrow(policies[i]);\n-                synchronizationPolicyValue_ = policy.value();\n-            } else if (policyType == DISPATCH_STRATEGY_POLICY_ID.value) {\n-                DispatchStrategyPolicy policy = DispatchStrategyPolicyHelper\n-                        .narrow(policies[i]);\n-                dispatchStrategyPolicyValue_ = policy.value();\n-            } else if (policyType == INTERCEPTOR_CALL_POLICY_ID.value) {\n-                InterceptorCallPolicy policy = InterceptorCallPolicyHelper\n-                        .narrow(policies[i]);\n-                interceptorCallPolicyValue_ = policy.value();\n-            } else if (policyType == ZERO_PORT_POLICY_ID.value) {\n-                ZeroPortPolicy policy = ZeroPortPolicyHelper\n-                        .narrow(policies[i]);\n-                zeroPortPolicyValue_ = policy.value();\n-            }\n-\n-            //\n-            // Otherwise the policy is not a ORB defined POA policy\n-            //\n         }\n \n         if (dispatchStrategyPolicyValue_ == null) {"
            }
        ]
    }
]
