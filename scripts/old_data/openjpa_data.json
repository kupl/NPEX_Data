[
    {
        "commit": "https://github.com/apache/openjpa/commit/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/4d577c0fd27d1fb0e37fdb44a7f355c010768a20",
        "message": "OPENJPA-2646: Sporadic NullPointerException and ClassCastException caused by query cache misses in multithreaded environments.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1831596 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_1",
        "file": [
            {
                "sha": "fe1ec2a738f9ca336e79e9570e085d1e3b78eeb3",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java",
                "status": "modified",
                "additions": 9,
                "deletions": 1,
                "changes": 10,
                "blob_url": "https://github.com/apache/openjpa/blob/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java?ref=8be86a6903dcf5d6486bf5578486fdd1fd28fc4a",
                "patch": "@@ -362,7 +362,15 @@ public void setEnableStatistics(boolean enable){\n     public boolean getEnableStatistics(){\n         return _statsEnabled;\n     }\n-        \n+\n+    public void setMaxCacheSize(int size) {\n+        ((CacheMap)_delegate).setCacheSize(size);\n+    }\n+\n+    public int getCacheSize() {\n+        return _delegate.size();\n+    }\n+\n \t//-------------------------------------------------------\n \t// Configurable contract\n \t//-------------------------------------------------------"
            },
            {
                "sha": "8385914e72d5de6dbc92751c096cd4745b7f0a48",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java",
                "status": "modified",
                "additions": 19,
                "deletions": 19,
                "changes": 38,
                "blob_url": "https://github.com/apache/openjpa/blob/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java",
                "raw_url": "https://github.com/apache/openjpa/raw/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java?ref=8be86a6903dcf5d6486bf5578486fdd1fd28fc4a",
                "patch": "@@ -35,7 +35,8 @@\n import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\n \n-import java.util.concurrent.locks.ReentrantLock;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n /**\n  * Fixed-size map that has ability to pin/unpin entries and move overflow to\n@@ -65,8 +66,9 @@\n     // number of pinned values (not including keys not mapped to values)\n     private int _pinnedSize = 0;\n \n-    private final ReentrantLock _writeLock = new ReentrantLock();\n-    private final ReentrantLock _readLock;\n+    private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock(true);\n+    private final Lock _readLock = rwl.readLock();\n+    private final Lock _writeLock = rwl.writeLock();\n \n     /**\n      * Create a non-LRU (and therefore highly concurrent) cache map with a\n@@ -128,14 +130,12 @@ public void overflowRemoved(Object key, Object value) {\n                     cacheMapOverflowRemoved(key, value);\n                 }\n             };\n-            _readLock = null;\n         } else {\n             cacheMap = new LRUMap(size, load) {\n                 public void overflowRemoved(Object key, Object value) {\n                     cacheMapOverflowRemoved(key, value);\n                 }\n             };\n-            _readLock = _writeLock;\n         }\n         if (max < 0)\n             max = Integer.MAX_VALUE;\n@@ -186,16 +186,14 @@ protected Object remove(Map map, Object key) {\n      * Acquire read lock.\n      */\n     public void readLock() {\n-        if (_readLock != null)\n-            _readLock.lock();\n+        _readLock.lock();\n     }\n \n     /**\n      * Release read lock.\n      */\n     public void readUnlock() {\n-        if (_readLock != null)\n-            _readLock.unlock();\n+        _readLock.unlock();\n     }\n \n     /**\n@@ -216,7 +214,7 @@ public void writeUnlock() {\n      * Whether this cache map uses LRU eviction.\n      */\n     public boolean isLRU() {\n-        return _readLock != null;\n+        return cacheMap instanceof LRUMap;\n     }\n \n     /**\n@@ -348,24 +346,26 @@ protected void entryAdded(Object key, Object value) {\n     }\n \n     public Object get(Object key) {\n+        boolean putcache = false;\n+        Object val = null;\n         readLock();\n         try {\n-            // Check the main map first\n-            Object  val = cacheMap.get(key);\n+            val = softMap.get(key);\n             if (val == null) {\n-                // if we find the key in the soft map, move it back into\n-                // the primary map\n-                val = softMap.get(key);\n-                if (val != null){\n-                    put(key, val);\n-                }else{\n+                val = cacheMap.get(key);\n+                if (val == null) {\n                     val = pinnedMap.get(key);\n+                } else {\n+                    putcache = true;\n                 }\n             }\n-           \n             return val;\n         } finally {\n             readUnlock();\n+            //cannot obtain a write lock while holding a read lock\n+            //doing it this way prevents a deadlock\n+            if (putcache)\n+                put(key, val);\n         }\n     }\n "
            },
            {
                "sha": "64f73717b0bad82e1f1d8d2b4ef1532597a0a11f",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestMultithreadedReparameterization.java",
                "status": "modified",
                "additions": 112,
                "deletions": 29,
                "changes": 141,
                "blob_url": "https://github.com/apache/openjpa/blob/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestMultithreadedReparameterization.java",
                "raw_url": "https://github.com/apache/openjpa/raw/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestMultithreadedReparameterization.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestMultithreadedReparameterization.java?ref=8be86a6903dcf5d6486bf5578486fdd1fd28fc4a",
                "patch": "@@ -19,10 +19,13 @@\n \n package org.apache.openjpa.persistence.jdbc.sqlcache;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Properties;\n \n import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n \n import junit.framework.TestCase;\n@@ -41,19 +44,19 @@\n     private static String RESOURCE = \"META-INF/persistence.xml\"; \n     private static String UNIT_NAME = \"PreparedQuery\";\n     protected static OpenJPAEntityManagerFactory emf;\n-    \n+\n     public void setUp() throws Exception {\n         super.setUp();\n         if (emf == null) {\n             Properties config = new Properties();\n             config.put(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true,SchemaAction='drop,add')\");\n             config.put(\"openjpa.Log\", \"SQL=WARN\");\n-            config.put(\"openjpa.jdbc.QuerySQLCache\", \"true(EnableStatistics=true)\");\n+            config.put(\"openjpa.jdbc.QuerySQLCache\", \"true(EnableStatistics=true, MaxCacheSize=2)\");\n             config.put(\"openjpa.ConnectionFactoryProperties\", \"PrintParameters=true\");\n             emf = OpenJPAPersistence.createEntityManagerFactory(UNIT_NAME, RESOURCE, config);\n         }\n     }\n-    \n+\n     public void testReparameterizationUnderHeavyLoad() throws Exception {\n         long baseId = System.currentTimeMillis();\n         EntityManager em = emf.createEntityManager();\n@@ -68,14 +71,16 @@ public void testReparameterizationUnderHeavyLoad() throws Exception {\n             em.persist(p);\n         }\n         em.getTransaction().commit();\n-    \n+\n         String jpql = \"select p from Person p \" \n                     + \"where p.id=:id and p.firstName=:first and p.lastName=:last and p.age=:age\";\n         int nRepeats = 20;\n         Thread[] threads = new Thread[nThreads];\n+        final List<Throwable> exceptions = Collections.synchronizedList(new ArrayList<Throwable>());\n+\n         for (int i = 0; i < nThreads; i++) {\n             Object[] args = {\"id\", baseId+i, \"first\", \"First\"+i, \"last\", \"Last\"+i, \"age\", (short)(20+i)};\n-            QueryThread thread = new QueryThread(emf.createEntityManager(), jpql, args, nRepeats);\n+            QueryThread thread = new QueryThread(emf.createEntityManager(), jpql, args, nRepeats, exceptions);\n             threads[i] = new Thread(thread);\n         }\n         for (Thread thread : threads) {\n@@ -84,12 +89,90 @@ public void testReparameterizationUnderHeavyLoad() throws Exception {\n         for (Thread thread : threads) {\n             thread.join();\n         }\n-        QueryStatistics<String> stats = emf.getConfiguration().getQuerySQLCacheInstance().getStatistics();\n-        assertEquals(nThreads*nRepeats,stats.getExecutionCount(), stats.getExecutionCount(jpql));\n-        assertEquals(nThreads*nRepeats-1,stats.getExecutionCount(), stats.getHitCount(jpql));\n-        \n+        try {\n+            QueryStatistics<String> stats = emf.getConfiguration().getQuerySQLCacheInstance().getStatistics();\n+            for(Throwable t : exceptions) {\n+                fail((t.getCause() != null ? t.getCause().toString() : t.toString()));\n+            }\n+            assertEquals(nThreads*nRepeats,stats.getExecutionCount(), stats.getExecutionCount(jpql));\n+            assertEquals(nThreads*nRepeats-1,stats.getExecutionCount(), stats.getHitCount(jpql));\n+        } finally {\n+            //clear statistics for other tests\n+            emf.getConfiguration().getQuerySQLCacheInstance().clear();\n+        }\n+    }\n+\n+    /**\n+     *  This is a test to verify that the PreparedQueryCache correctly swaps queries between\n+     *  the hard and the soft cache maps. It is important for this test that the max cache size\n+     *  is set to a number much smaller than the default (1000) to force swapping between hard\n+     *  and soft maps. During this swapping interval, it is possible that another thread will\n+     *  attempt to read from the maps and cause either NPE or CCE. \n+     *  \n+     * @see OPENJPA-2646\n+     * @throws Exception\n+     */\n+    public void testCacheSwappingUnderHeavyLoad() throws Exception {\n+        final int nRuns = 10;\n+        final int nThreads = 20;\n+        //This value needs to be more than the max cache size to reliably cause cache\n+        //overflow to start swapping between hard -> soft cache\n+        // (\"openjpa.jdbc.QuerySQLCache\", \"true(MaxCacheSize=2\")\n+        final int nQueries = 10;\n+\n+        final List<Throwable> exceptions = Collections.synchronizedList(new ArrayList<Throwable>());\n+\n+        for (int y = 0; y < nRuns; y++) {\n+            Thread[] threads = new Thread[nThreads];\n+            for (int i = 0; i < nThreads; i++) {\n+                threads[i] = new Thread(new Runnable() {\n+                    @Override public void run() {\n+                        try {\n+                            EntityManager em = emf.createEntityManager();\n+                            // Since the cache (CacheMap) is set to a size of '2' all threads will \n+                            // fill up the cache and constantly cause query strings to move \n+                            // to/from the main cache and soft cache, eventually causing a \n+                            // \"cache miss\" by a thread.\n+                            String qStr = \"select p from Person p where p.firstName=:first and p.id = \";\n+                            for (int j = 0; j < nQueries; j++) {\n+                                Query q = em.createQuery(qStr + j);\n+                                q.setParameter(\"first\", \"test\");\n+                                q.getResultList();\n+                            }\n+                            em.close();\n+                        } catch (Throwable t) {\n+                            System.err.println(\"\\nThread (\" + Thread.currentThread().getName()\n+                                    + \"): Caught the following exception: \" + t\n+                                    + \"\\n  With cause: \" + t.getCause());\n+                            //catch the AssertionError so that we can fail the main Thread\n+                            exceptions.add(t);\n+                        }\n+                    }\n+                });\n+                threads[i].start();\n+            }\n+\n+            for (Thread thread : threads) {\n+                synchronized (thread) {\n+                    try {\n+                        thread.join();\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }\n+\n+            try {\n+                for(Throwable t : exceptions) {\n+                    fail((t.getCause() != null ? t.getCause().toString() : t.toString()));\n+                }\n+            } finally {\n+                //clear statistics for other tests\n+                emf.getConfiguration().getQuerySQLCacheInstance().clear();\n+            }\n+        }\n     }\n-    \n+\n     /**\n      * Each thread executes same query with same parameters repeatedly.\n      * \n@@ -101,34 +184,34 @@ public void testReparameterizationUnderHeavyLoad() throws Exception {\n         public final String jpql;\n         public final Object[] args;\n         public final int nTimes;\n-        public QueryThread(EntityManager em, String jpql, Object[] args, int r) {\n+        public final List<Throwable> exceptions;\n+        public QueryThread(EntityManager em, String jpql, Object[] args, int r, List<Throwable> exceptions) {\n             this.em = em;\n             this.jpql = jpql;\n             this.args = args;\n             this.nTimes = r;\n+            this.exceptions = exceptions;\n         }\n-        \n+\n         public void run()  {\n             try {\n-            for (int i = 0; i < nTimes; i++) {\n-                TypedQuery<Person> q = em.createQuery(jpql, Person.class);\n-                for (int j = 0; j < args.length; j += 2) {\n-                    q.setParameter(args[j].toString(), args[j+1]);\n+                for (int i = 0; i < nTimes; i++) {\n+                    TypedQuery<Person> q = em.createQuery(jpql, Person.class);\n+                    for (int j = 0; j < args.length; j += 2) {\n+                        q.setParameter(args[j].toString(), args[j+1]);\n+                    }\n+                    List<Person> result = q.getResultList();\n+                    assertEquals(Thread.currentThread() + \" failed\", 1, result.size());\n+                    Person p = result.get(0);\n+                    assertEquals(args[1], p.getId());\n+                    assertEquals(args[3], p.getFirstName());\n+                    assertEquals(args[5], p.getLastName());\n+                    assertEquals(args[7], p.getAge());\n                 }\n-                List<Person> result = q.getResultList();\n-                assertEquals(Thread.currentThread() + \" failed\", 1, result.size());\n-                Person p = result.get(0);\n-                assertEquals(args[1], p.getId());\n-                assertEquals(args[3], p.getFirstName());\n-                assertEquals(args[5], p.getLastName());\n-                assertEquals(args[7], p.getAge());\n-                \n-            }\n-            } catch (Exception ex) {\n-                ex.printStackTrace();\n-                fail();\n+            } catch (Throwable t) {\n+                //catch the AssertionError so that we can fail the main Thread\n+                exceptions.add(t);\n             }\n         }\n-        \n     }\n }"
            },
            {
                "sha": "8eaab807f68797fd7e3dfb151d00a3b5ff04f398",
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java",
                "status": "modified",
                "additions": 5,
                "deletions": 4,
                "changes": 9,
                "blob_url": "https://github.com/apache/openjpa/blob/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=8be86a6903dcf5d6486bf5578486fdd1fd28fc4a",
                "patch": "@@ -521,7 +521,7 @@ public boolean equals(Object other) {\n      * cache. \n      */\n     private boolean preExecute(Map params) {\n-    \t\n+\n         PreparedQueryCache cache = _em.getPreparedQueryCache();\n         if (cache == null) {\n             return false;\n@@ -533,20 +533,21 @@ private boolean preExecute(Map params) {\n             }\n             return false;\n         }\n-        \n+\n         // Determine if the query has NULL parameters.  If so, then do not use a PreparedQuery from the cache\n         for (Object val : params.values()) {\n             if (val == null) {\n                 ignorePreparedQuery();\n                 return false;\n             }\n         }\n-        \n+\n         Boolean registered = cache.register(_id, _query, fetch);\n         boolean alreadyCached = (registered == null);\n         String lang = _query.getLanguage();\n         QueryStatistics<String> stats = cache.getStatistics();\n         if (alreadyCached && LANG_PREPARED_SQL.equals(lang)) {\n+            //This value is expected to be non-null as it was just registered\n             PreparedQuery pq = _em.getPreparedQuery(_id);\n             if (pq.isInitialized()) {\n                 try {\n@@ -567,7 +568,7 @@ private boolean preExecute(Map params) {\n         }\n         return registered == Boolean.TRUE;\n     }\n-    \n+\n     /**\n      * Initialize the registered Prepared Query from the given opaque object.\n      * "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/93e15d846c2338b979d8a08408bce95c31c4598f",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/81fc3ab6051257667d115e120de98ed650d4d54d",
        "message": "OPENJPA-574 fix a potential NullPointerException in checkUpdateCount for statement batching.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@659364 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_2",
        "file": [
            {
                "sha": "eecd8ce2dd61645e52ed42ea4ab66e8b363a3c23",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/openjpa/blob/93e15d846c2338b979d8a08408bce95c31c4598f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/93e15d846c2338b979d8a08408bce95c31c4598f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java?ref=93e15d846c2338b979d8a08408bce95c31c4598f",
                "patch": "@@ -238,7 +238,9 @@ private void checkUpdateCount(int[] count, int batchedRowsBaseIndex,\n         // DB2/ZOS        1 / 0           1 / 0        -2 / SQLException\n         // Oracle        -2 / -2         -2 / -2       -2 / SQLException\n         int cnt = 0;\n-        int updateSuccessCnt = ps.getUpdateCount();\n+        int updateSuccessCnt = 0;\n+        if (ps != null && _dict.platform.indexOf(\"Oracle\") > -1)\n+            updateSuccessCnt = ps.getUpdateCount();\n         if (_log.isTraceEnabled() &&\n             _dict.platform.indexOf(\"Oracle\") > -1)\n             _log.trace(_loc.get(\"batch_update_success_count\","
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/36c68c49f59f948967d31f690c7858b40bcea3a9",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/ee8155bb60ddfdc94e94b8973455c599072a6c27",
        "message": "OPENJPA-555 MappingTool got NullPointerException in DB2Dictionary.isDB2ZOSV8xOrLater() \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@644177 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_3",
        "file": [
            {
                "sha": "8dea6ced5bc6d8bb26e66902e421bb384af8766d",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "status": "modified",
                "additions": 12,
                "deletions": 7,
                "changes": 19,
                "blob_url": "https://github.com/apache/openjpa/blob/36c68c49f59f948967d31f690c7858b40bcea3a9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "raw_url": "https://github.com/apache/openjpa/raw/36c68c49f59f948967d31f690c7858b40bcea3a9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=36c68c49f59f948967d31f690c7858b40bcea3a9",
                "patch": "@@ -390,7 +390,8 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n \r\n     public boolean isDB2UDBV82OrLater() {\r\n         boolean match = false;\r\n-        if ((databaseProductVersion.indexOf(\"SQL\") != -1\r\n+        if (databaseProductName != null &&\r\n+            (databaseProductVersion.indexOf(\"SQL\") != -1\r\n             || databaseProductName.indexOf(\"DB2/\") != -1)\r\n             && ((maj == 8 && min >= 2) || (maj >= 9)))\r\n             match = true;\r\n@@ -399,7 +400,8 @@ public boolean isDB2UDBV82OrLater() {\n \r\n     public boolean isDB2ZOSV8xOrLater() {\r\n        boolean match = false;\r\n-       if ((databaseProductVersion.indexOf(\"DSN\") != -1\r\n+       if (databaseProductName != null &&\r\n+           (databaseProductVersion.indexOf(\"DSN\") != -1\r\n            || databaseProductName.indexOf(\"DB2/\") == -1)\r\n            && maj >= 8)\r\n            match = true;\r\n@@ -408,25 +410,28 @@ public boolean isDB2ZOSV8xOrLater() {\n \r\n     public boolean isDB2ISeriesV5R3OrEarlier() {\r\n        boolean match = false;\r\n-       if (databaseProductName.indexOf(\"AS\") != -1\r\n+       if (databaseProductName != null &&\r\n+           databaseProductName.indexOf(\"AS\") != -1\r\n            && ((maj == 5 && min <=3) || maj < 5))\r\n            match = true;\r\n        return match;\r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R4OrLater() {\r\n        boolean match = false;\r\n-       if (databaseProductName.indexOf(\"AS\") != -1\r\n+       if (databaseProductName != null &&\r\n+           databaseProductName.indexOf(\"AS\") != -1\r\n            && (maj >=6 || (maj == 5 && min >=4)))\r\n            match = true;\r\n       return match;\r\n     }\r\n \r\n     public boolean isDB2UDBV81OrEarlier() {\r\n         boolean match = false;\r\n-        if ((databaseProductVersion.indexOf(\"SQL\") != -1 \r\n-           || databaseProductName.indexOf(\"DB2/\") != -1) &&\r\n-           ((maj == 8 && min <= 1) || maj < 8))\r\n+        if (databaseProductName != null &&\r\n+            (databaseProductVersion.indexOf(\"SQL\") != -1 \r\n+            || databaseProductName.indexOf(\"DB2/\") != -1) &&\r\n+            ((maj == 8 && min <= 1) || maj < 8))\r\n             match = true;\r\n         return match;\r\n     }\r"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/4d5d2fb2bfaa5edeb9cd6170cf2f58d9d5f6d32f",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/73692a6d3235414427f2792b348a885fb19d0faf",
        "message": "OPENJPA-1700 FindBugs - A null pointer is dereferenced here.  This will lead to a NullPointerException when the code is executed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@954696 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_4",
        "file": [
            {
                "sha": "b9cd4a5a1570e72212805cecb3d01dff932ec3e6",
                "filename": "openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/4d5d2fb2bfaa5edeb9cd6170cf2f58d9d5f6d32f/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java",
                "raw_url": "https://github.com/apache/openjpa/raw/4d5d2fb2bfaa5edeb9cd6170cf2f58d9d5f6d32f/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=4d5d2fb2bfaa5edeb9cd6170cf2f58d9d5f6d32f",
                "patch": "@@ -451,7 +451,7 @@ private static void addAll(Collection collection, String base,\n         // most specific to least\n         for (int i = _derivations.length - 1; i >= 0; i--) {\n             Set<String> members = _derivations[i].getSupportedQueryHints();\n-            if (members != null || !members.isEmpty())\n+            if (members != null && !members.isEmpty())\n                 result.addAll(members);\n         }\n         return result;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/2e0c5d576c5e210bfb1d0a8d799a20284f971a27",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/a5dcfc91fa956627c66d3100717c308e3855d6c0",
        "message": "Avoid NPE.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@502369 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_5",
        "file": [
            {
                "sha": "082fd48ff2db32012f0b9632111547925582faec",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/2e0c5d576c5e210bfb1d0a8d799a20284f971a27/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java",
                "raw_url": "https://github.com/apache/openjpa/raw/2e0c5d576c5e210bfb1d0a8d799a20284f971a27/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=2e0c5d576c5e210bfb1d0a8d799a20284f971a27",
                "patch": "@@ -255,7 +255,7 @@ public void backingMember(Member member) {\n      * Return the backing member supplied in {@link #backingMember}.\n      */\n     public Member getBackingMember() {\n-        return _backingMember.getMember();\n+        return (_backingMember == null) ? null : _backingMember.getMember();\n     }\n \n     /**"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/2d5ab5c862737cf13c6a77bee4924dd959e8b941",
        "message": "OPENJPA-2284: Save NPE while parsing cascade\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1416742 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_6",
        "file": [
            {
                "sha": "3dc65495fbe65402f61eca4e932da71acd9db254",
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "status": "modified",
                "additions": 2,
                "deletions": 4,
                "changes": 6,
                "blob_url": "https://github.com/apache/openjpa/blob/88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "raw_url": "https://github.com/apache/openjpa/raw/88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e",
                "patch": "@@ -1361,10 +1361,8 @@ protected void setCascades(FieldMetaData fmd) {\n             return;\n \n         ValueMetaData vmd = fmd;\n-        switch (_strategy) {\n-            case ONE_MANY:\n-            case MANY_MANY:\n-                vmd = fmd.getElement();\n+        if (_strategy == ONE_MANY || _strategy == MANY_MANY) {\n+            vmd = fmd.getElement();\n         }\n         for (CascadeType cascade : cascades) {\n             switch (cascade) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/94969374f623a82a8d659b763b2c987d2b1c3d79",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/4823f1748eeba31bbf81b7fde1c017470f0d3d92",
        "message": "OPENJPA-2234: Avoid NPE when the ManagedRuntime returns a null TransactionManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1396043 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_7",
        "file": [
            {
                "sha": "f338b1ff2b7811e8e74cb970d017b244b3593242",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/openjpa/blob/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java",
                "raw_url": "https://github.com/apache/openjpa/raw/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=94969374f623a82a8d659b763b2c987d2b1c3d79",
                "patch": "@@ -65,6 +65,7 @@\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.GeneralException;\n+import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.InvalidStateException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UserException;\n@@ -722,6 +723,9 @@ boolean syncWithManagedTransaction(BrokerImpl broker, boolean begin) {\n         try {\n             ManagedRuntime mr = broker.getManagedRuntime();\n             TransactionManager tm = mr.getTransactionManager();\n+            if (tm == null) {\n+                throw new InternalException(_loc.get(\"null-transactionmanager\", mr));\n+            }\n             trans = tm.getTransaction();\n             if (trans != null\n                 && (trans.getStatus() == Status.STATUS_NO_TRANSACTION"
            },
            {
                "sha": "3e5a1ed28f2bb75a62be33c4d79919c1047ae268",
                "filename": "openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties",
                "raw_url": "https://github.com/apache/openjpa/raw/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=94969374f623a82a8d659b763b2c987d2b1c3d79",
                "patch": "@@ -456,4 +456,4 @@ writebehind-cfg-err: Missing required WriteBehind configuration parameter \"{0}\"\n bad-lock-scope: This lock manager does not recognize lock scope \"{0}\".\n detach-none-exclusive: Configured AutoDetach option \"{0}\" is incorrect because \\\n     NONE option can not be specified with any other option other than CLOSE. \n-\n+null-transactionmanager: Received a null javax.transaction.TransactionManager from the openjpa.ManagedRuntime \"{0}\"."
            },
            {
                "sha": "378c4e96bcf1e759909c2030884d98a62a0dbeff",
                "filename": "openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestNullTransactionManagerFromRuntime.java",
                "status": "added",
                "additions": 309,
                "deletions": 0,
                "changes": 309,
                "blob_url": "https://github.com/apache/openjpa/blob/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestNullTransactionManagerFromRuntime.java",
                "raw_url": "https://github.com/apache/openjpa/raw/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestNullTransactionManagerFromRuntime.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestNullTransactionManagerFromRuntime.java?ref=94969374f623a82a8d659b763b2c987d2b1c3d79",
                "patch": "@@ -0,0 +1,309 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.ee;\n+\n+import java.util.BitSet;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import javax.transaction.TransactionManager;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n+import org.apache.openjpa.kernel.AbstractBrokerFactory;\n+import org.apache.openjpa.kernel.BrokerImpl;\n+import org.apache.openjpa.kernel.DelegatingStoreManager;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.kernel.FetchConfigurationImpl;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.PCState;\n+import org.apache.openjpa.kernel.Seq;\n+import org.apache.openjpa.kernel.StoreContext;\n+import org.apache.openjpa.kernel.StoreManager;\n+import org.apache.openjpa.kernel.StoreQuery;\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+\n+public class TestNullTransactionManagerFromRuntime extends TestCase {\n+    public void test() {\n+        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n+        conf.setMetaDataFactory(\"org.apache.openjpa.meta.NoneMetaDataFactory\");\n+        conf.setManagedRuntime(new ManagedRuntimeNullTransactionManager());\n+        MangagedRuntimeTestBrokerFactory fact = new MangagedRuntimeTestBrokerFactory(conf);\n+        BrokerImpl b = new BrokerImpl();\n+        try {\n+            b.initialize(fact, new ManagedRuntimeNoopDelegatingStoreManager(null), true, 0, false);\n+            fail(\"Calling syncWithManagedTransaction should have thrown an exception.\");\n+        } catch (RuntimeException re) {\n+            // expected\n+        }\n+    }\n+\n+    class ManagedRuntimeNullTransactionManager extends AbstractManagedRuntime {\n+        @Override\n+        public Throwable getRollbackCause() throws Exception {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public TransactionManager getTransactionManager() throws Exception {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public void setRollbackOnly(Throwable cause) throws Exception {\n+\n+        }\n+    }\n+\n+    class MangagedRuntimeTestBrokerFactory extends AbstractBrokerFactory {\n+        public MangagedRuntimeTestBrokerFactory(OpenJPAConfiguration conf) {\n+            super(conf);\n+        }\n+\n+        @Override\n+        protected StoreManager newStoreManager() {\n+\n+            return null;\n+        }\n+    }\n+\n+    class ManagedRuntimeNoopDelegatingStoreManager extends DelegatingStoreManager {\n+        public ManagedRuntimeNoopDelegatingStoreManager(StoreManager store) {\n+            super(store);\n+        }\n+\n+        @Override\n+        public StoreManager getDelegate() {\n+\n+            return super.getDelegate();\n+        }\n+\n+        @Override\n+        public StoreManager getInnermostDelegate() {\n+\n+            return super.getInnermostDelegate();\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+\n+            return super.hashCode();\n+        }\n+\n+        @Override\n+        public boolean equals(Object other) {\n+\n+            return super.equals(other);\n+        }\n+\n+        @Override\n+        public void setContext(StoreContext ctx) {\n+        }\n+\n+        @Override\n+        public void beginOptimistic() {\n+\n+            super.beginOptimistic();\n+        }\n+\n+        @Override\n+        public void rollbackOptimistic() {\n+\n+            super.rollbackOptimistic();\n+        }\n+\n+        @Override\n+        public void begin() {\n+\n+            super.begin();\n+        }\n+\n+        @Override\n+        public void commit() {\n+\n+            super.commit();\n+        }\n+\n+        @Override\n+        public void rollback() {\n+\n+            super.rollback();\n+        }\n+\n+        @Override\n+        public boolean exists(OpenJPAStateManager sm, Object context) {\n+\n+            return super.exists(sm, context);\n+        }\n+\n+        @Override\n+        public boolean syncVersion(OpenJPAStateManager sm, Object context) {\n+\n+            return super.syncVersion(sm, context);\n+        }\n+\n+        @Override\n+        public boolean initialize(OpenJPAStateManager sm, PCState state, FetchConfiguration fetch, Object context) {\n+\n+            return super.initialize(sm, state, fetch, context);\n+        }\n+\n+        @Override\n+        public boolean load(OpenJPAStateManager sm, BitSet fields, FetchConfiguration fetch, int lockLevel,\n+            Object context) {\n+\n+            return super.load(sm, fields, fetch, lockLevel, context);\n+        }\n+\n+        @Override\n+        public Collection<Object> loadAll(Collection<OpenJPAStateManager> sms, PCState state, int load,\n+            FetchConfiguration fetch, Object context) {\n+\n+            return super.loadAll(sms, state, load, fetch, context);\n+        }\n+\n+        @Override\n+        public void beforeStateChange(OpenJPAStateManager sm, PCState fromState, PCState toState) {\n+\n+            super.beforeStateChange(sm, fromState, toState);\n+        }\n+\n+        @Override\n+        public Collection<Exception> flush(Collection<OpenJPAStateManager> sms) {\n+\n+            return super.flush(sms);\n+        }\n+\n+        @Override\n+        public boolean assignObjectId(OpenJPAStateManager sm, boolean preFlush) {\n+\n+            return super.assignObjectId(sm, preFlush);\n+        }\n+\n+        @Override\n+        public boolean assignField(OpenJPAStateManager sm, int field, boolean preFlush) {\n+\n+            return super.assignField(sm, field, preFlush);\n+        }\n+\n+        @Override\n+        public Class<?> getManagedType(Object oid) {\n+\n+            return super.getManagedType(oid);\n+        }\n+\n+        @Override\n+        public Class<?> getDataStoreIdType(ClassMetaData meta) {\n+\n+            return super.getDataStoreIdType(meta);\n+        }\n+\n+        @Override\n+        public Object copyDataStoreId(Object oid, ClassMetaData meta) {\n+\n+            return super.copyDataStoreId(oid, meta);\n+        }\n+\n+        @Override\n+        public Object newDataStoreId(Object oidVal, ClassMetaData meta) {\n+\n+            return super.newDataStoreId(oidVal, meta);\n+        }\n+\n+        @Override\n+        public Object getClientConnection() {\n+\n+            return super.getClientConnection();\n+        }\n+\n+        @Override\n+        public void retainConnection() {\n+\n+            super.retainConnection();\n+        }\n+\n+        @Override\n+        public void releaseConnection() {\n+\n+            super.releaseConnection();\n+        }\n+\n+        @Override\n+        public ResultObjectProvider executeExtent(ClassMetaData meta, boolean subclasses, FetchConfiguration fetch) {\n+\n+            return super.executeExtent(meta, subclasses, fetch);\n+        }\n+\n+        @Override\n+        public StoreQuery newQuery(String language) {\n+\n+            return super.newQuery(language);\n+        }\n+\n+        @Override\n+        public FetchConfiguration newFetchConfiguration() {\n+\n+            return new FetchConfigurationImpl();\n+        }\n+\n+        @Override\n+        public void close() {\n+\n+            super.close();\n+        }\n+\n+        @Override\n+        public int compareVersion(OpenJPAStateManager state, Object v1, Object v2) {\n+\n+            return super.compareVersion(state, v1, v2);\n+        }\n+\n+        @Override\n+        public Seq getDataStoreIdSequence(ClassMetaData forClass) {\n+\n+            return super.getDataStoreIdSequence(forClass);\n+        }\n+\n+        @Override\n+        public Seq getValueSequence(FieldMetaData fmd) {\n+\n+            return super.getValueSequence(fmd);\n+        }\n+\n+        @Override\n+        public boolean cancelAll() {\n+\n+            return super.cancelAll();\n+        }\n+\n+        @Override\n+        public boolean isCached(List<Object> oids, BitSet edata) {\n+\n+            return super.isCached(oids, edata);\n+        }\n+\n+    }\n+\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/7cee19d3be610e178020eabdae6c877e6784373c",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/908e0f69350a5804d6f54387d86ee4a39906698b",
        "message": "OPENJPA-2151: Fix NPE in ClassMetaData.hasInverseManagedFields.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1342747 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_8",
        "file": [
            {
                "sha": "cf37d747cac6e2b7c30bb5a452a6d1c2b857ae8b",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "status": "modified",
                "additions": 5,
                "deletions": 3,
                "changes": 8,
                "blob_url": "https://github.com/apache/openjpa/blob/7cee19d3be610e178020eabdae6c877e6784373c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "raw_url": "https://github.com/apache/openjpa/raw/7cee19d3be610e178020eabdae6c877e6784373c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=7cee19d3be610e178020eabdae6c877e6784373c",
                "patch": "@@ -2787,12 +2787,14 @@ public String getSourceName(){\n \n     public boolean hasInverseManagedFields() {\n         if (inverseManagedFields == null) {\n-            for(FieldMetaData fmd: getFields()){\n-                if(fmd.getInverseMetaDatas().length > 0){\n-                    inverseManagedFields = Boolean.TRUE;\n+            Boolean res = Boolean.FALSE;\n+            for (FieldMetaData fmd : getFields()) {\n+                if (fmd.getInverseMetaDatas().length > 0) {\n+                    res = Boolean.TRUE;\n                     break;\n                 }\n             }\n+            inverseManagedFields = res;\n         }\n         return inverseManagedFields.booleanValue();\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/6599b7b403fecc75ec7b3fb2bfd0b51bcfa6cdb8",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/c55f8469f1c24c88360220e9c5d82389a4b82dff",
        "message": "OPENJPA-2136: Fix NPE when using LiteAutoDetach.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1292034 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_9",
        "file": [
            {
                "sha": "f7678e95b6c692fbea5502bf69bba43e3bbd8276",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/6599b7b403fecc75ec7b3fb2bfd0b51bcfa6cdb8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/6599b7b403fecc75ec7b3fb2bfd0b51bcfa6cdb8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=6599b7b403fecc75ec7b3fb2bfd0b51bcfa6cdb8",
                "patch": "@@ -3457,6 +3457,9 @@ private void detachAllInternalLite() {\n         if (_transAdditions != null) {\n             _transAdditions.clear();\n         }\n+        if (_pending != null) {\n+            _pending = null;\n+        }\n         if (_dmLite == null) {\n             _dmLite = new DetachManagerLite(_conf);\n         }"
            },
            {
                "sha": "9fd9fd102bdff79f8ad4f70bf73cfb6d7f04ccef",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java",
                "status": "modified",
                "additions": 10,
                "deletions": 0,
                "changes": 10,
                "blob_url": "https://github.com/apache/openjpa/blob/6599b7b403fecc75ec7b3fb2bfd0b51bcfa6cdb8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java",
                "raw_url": "https://github.com/apache/openjpa/raw/6599b7b403fecc75ec7b3fb2bfd0b51bcfa6cdb8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java?ref=6599b7b403fecc75ec7b3fb2bfd0b51bcfa6cdb8",
                "patch": "@@ -45,6 +45,16 @@ public void setUp() {\n         root = createData();\n     }\n \n+    public void testPendingClear() {\n+        EntityManager em = emf.createEntityManager();\n+        DMCustomer dm = em.find(DMCustomer.class, root.getId());\n+        dm.setLastName(System.currentTimeMillis() + \"--last\");\n+        em.clear();\n+        em.getTransaction().begin();\n+        // Pre OPENJPA-2136 this commit call would fail.\n+        em.getTransaction().commit();\n+    }\n+\n     public void testLeaveProxy() {\n         Object[] p = props;\n         p[1] = \"loaded(LiteAutoDetach=true,DetachProxyFields=false)\";"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/9c1ac5ffc932ec156a1040740e4d65717f60ed7b",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/6659b57886fc9e44003602f4ba0eff3b115284a7",
        "message": "OPENJPA-2042: Fix possible NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1198786 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_10",
        "file": [
            {
                "sha": "1d21e2b88a27100381b5db266ed2202e04fc6c0f",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java",
                "status": "modified",
                "additions": 5,
                "deletions": 2,
                "changes": 7,
                "blob_url": "https://github.com/apache/openjpa/blob/9c1ac5ffc932ec156a1040740e4d65717f60ed7b/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java",
                "raw_url": "https://github.com/apache/openjpa/raw/9c1ac5ffc932ec156a1040740e4d65717f60ed7b/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java?ref=9c1ac5ffc932ec156a1040740e4d65717f60ed7b",
                "patch": "@@ -206,8 +206,11 @@ public static void register(Class<?> pcClass, String[] fieldNames, Class<?>[] fi\n             _metas.put(pcClass, meta);\n         }\n         synchronized (_listeners) {\n-            for (RegisterClassListener r : _listeners)\n-                r.register(pcClass);\n+            for (RegisterClassListener r : _listeners){\n+                if (r != null) {\n+                    r.register(pcClass);\n+                }\n+            }\n         }\n     }\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/d91475d506d06aa550b4ff15c20bcdc348c58684",
        "message": "OPENJPA-1847: Fix NPE in SchemaGenerator and formatting.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1063827 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_11",
        "file": [
            {
                "sha": "51bf3acbdf54e3481eebc25e127ef887f29ef7c1",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java",
                "status": "modified",
                "additions": 34,
                "deletions": 42,
                "changes": 76,
                "blob_url": "https://github.com/apache/openjpa/blob/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java",
                "raw_url": "https://github.com/apache/openjpa/raw/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
                "patch": "@@ -267,59 +267,52 @@ public void generateSchemas(String[] schemasAndTables)\n      * {@link #generatePrimaryKeys}, and {@link #generateForeignKeys}\n      * automatically.\n      */\n-    public void generateSchemas(DBIdentifier[] schemasAndTables)\n-        throws SQLException {\n+    public void generateSchemas(DBIdentifier[] schemasAndTables) throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-schemas\"));\n+        // generate all schemas and tables\n+        try {\n+            getConn();\n+            Object[][] schemaMap;\n+            if (schemasAndTables == null || schemasAndTables.length == 0)\n+                schemaMap = _allowed;\n+            else\n+                schemaMap = parseSchemasList(schemasAndTables);\n \n-        Object[][] schemaMap;\n-        if (schemasAndTables == null || schemasAndTables.length == 0)\n-            schemaMap = _allowed;\n-        else\n-            schemaMap = parseSchemasList(schemasAndTables);\n-\n-        if (schemaMap == null) {\n-            generateSchema(DBIdentifier.NULL, (DBIdentifier[])null);\n-\n-            // estimate the number of schema objects we will need to visit\n-            // in order to estimate progress total for any listeners\n-            int numTables = getTables(null).size();\n-            _schemaObjects += numTables\n-                + (_pks ? numTables : 0)\n-                + (_indexes ? numTables : 0)\n-                + (_fks ? numTables : 0);\n-\n-            if (_pks)\n-                generatePrimaryKeys(DBIdentifier.NULL, null);\n-            if (_indexes)\n-                generateIndexes(DBIdentifier.NULL, null);\n-            if (_fks)\n-                generateForeignKeys(DBIdentifier.NULL, null);\n-            return;\n-        }\n+            if (schemaMap == null) {\n+                generateSchema(DBIdentifier.NULL, (DBIdentifier[]) null);\n+\n+                // estimate the number of schema objects we will need to visit\n+                // in order to estimate progress total for any listeners\n+                int numTables = getTables(null).size();\n+                _schemaObjects +=\n+                    numTables + (_pks ? numTables : 0) + (_indexes ? numTables : 0) + (_fks ? numTables : 0);\n+\n+                if (_pks)\n+                    generatePrimaryKeys(DBIdentifier.NULL, null);\n+                if (_indexes)\n+                    generateIndexes(DBIdentifier.NULL, null);\n+                if (_fks)\n+                    generateForeignKeys(DBIdentifier.NULL, null);\n+                return;\n+            }\n \n-        // generate all schemas and tables\n-        try{ \n-            getConn(); \n             for (int i = 0; i < schemaMap.length; i++) {\n                 generateSchema((DBIdentifier) schemaMap[i][0], (DBIdentifier[]) schemaMap[i][1]);\n             }\n-        \n+\n             // generate pks, indexes, fks\n             DBIdentifier schemaName = DBIdentifier.NULL;\n             DBIdentifier[] tableNames;\n             for (int i = 0; i < schemaMap.length; i++) {\n                 schemaName = (DBIdentifier) schemaMap[i][0];\n                 tableNames = (DBIdentifier[]) schemaMap[i][1];\n-    \n+\n                 // estimate the number of schema objects we will need to visit\n                 // in order to estimate progress total for any listeners\n-                int numTables = (tableNames != null) ? tableNames.length\n-                    : getTables(schemaName).size();\n-                _schemaObjects += numTables\n-                    + (_pks ? numTables : 0)\n-                    + (_indexes ? numTables : 0)\n-                    + (_fks ? numTables : 0);\n-    \n+                int numTables = (tableNames != null) ? tableNames.length : getTables(schemaName).size();\n+                _schemaObjects +=\n+                    numTables + (_pks ? numTables : 0) + (_indexes ? numTables : 0) + (_fks ? numTables : 0);\n+\n                 if (_pks) {\n                     generatePrimaryKeys(schemaName, tableNames);\n                 }\n@@ -330,9 +323,8 @@ public void generateSchemas(DBIdentifier[] schemasAndTables)\n                     generateForeignKeys(schemaName, tableNames);\n                 }\n             }\n-        }\n-        finally  { \n-            closeConn(); \n+        } finally {\n+            closeConn();\n         }\n     }\n "
            },
            {
                "sha": "35fc1c398c4aa082b1e8e6d61e5cdaac87cb6581",
                "filename": "openjpa-persistence-jdbc/pom.xml",
                "status": "modified",
                "additions": 0,
                "deletions": 1,
                "changes": 1,
                "blob_url": "https://github.com/apache/openjpa/blob/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/pom.xml",
                "raw_url": "https://github.com/apache/openjpa/raw/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
                "patch": "@@ -926,7 +926,6 @@\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSchema.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java</exclude>"
            },
            {
                "sha": "ec67df180415a5572e9ed929bdca7777386a9ebe",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java",
                "status": "modified",
                "additions": 6,
                "deletions": 20,
                "changes": 26,
                "blob_url": "https://github.com/apache/openjpa/blob/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java",
                "raw_url": "https://github.com/apache/openjpa/raw/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java?ref=cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
                "patch": "@@ -27,31 +27,17 @@\n  */\n package org.apache.openjpa.persistence.jdbc.kernel;\n \n-import java.beans.BeanInfo;\n-import java.beans.Introspector;\n-import java.beans.PropertyDescriptor;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.math.BigDecimal;\n-import java.math.BigInteger;\n-import java.util.*;\n-import javax.management.IntrospectionException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n import org.apache.openjpa.kernel.Broker;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.jpql.JPQLParser;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n-\n-\n-\n-import java.lang.annotation.Annotation;\n-import junit.framework.*;\n-import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n \n \n public class BaseJDBCTest"
            },
            {
                "sha": "2832d6c47109142d725613fff06bcfd2e921fa4b",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java",
                "status": "modified",
                "additions": 18,
                "deletions": 65,
                "changes": 83,
                "blob_url": "https://github.com/apache/openjpa/blob/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java",
                "raw_url": "https://github.com/apache/openjpa/raw/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java?ref=cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
                "patch": "@@ -42,7 +42,6 @@\n \n import org.apache.openjpa.persistence.jdbc.common.apps.*;\n \n-\n import java.lang.annotation.Annotation;\n import junit.framework.*;\n import javax.persistence.EntityManager;\n@@ -53,82 +52,36 @@\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n \n+public class TestSchemaGenerator extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest {\n \n-public class TestSchemaGenerator\n-        extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest {\n-        \n-    /** Creates a new instance of TestSchemaGenerator */\n-    public TestSchemaGenerator(String name) \n-    {\n-    \tsuper(name);\n+    @Override\n+    protected String getPersistenceUnitName() {\n+        // TODO Auto-generated method stub\n+        return \"TestConv\";\n     }\n-    \n-    public void DBMetadataTest()\n-    throws Exception {\n-        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory)\n-        getEmf();\n-        //FIXME jthomas\n-        \n-        //ClassMapping cm = (ClassMapping) KodoJDOHelper.getMetaData\n-        //    (pmf, RuntimeTest1.class);\n-        ClassMapping cm =null;\n-        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n-        \n-        DataSource ds = (DataSource) conf.getDataSource2(null);\n-        Connection c = ds.getConnection();\n-        DatabaseMetaData meta = c.getMetaData();\n-        DBDictionary dict = conf.getDBDictionaryInstance();\n-        \n-        String schema = cm.getTable().getSchema().getName();\n-        Table[] tables = dict.getTables(meta, c.getCatalog(), schema,\n-                cm.getTable().getName(), c);\n-        assertEquals(1, tables.length);\n-        \n-        Column[] columns = dict.getColumns(meta, c.getCatalog(), schema,\n-                cm.getTable().getName(), null, c);\n-        for (int i = 0; i < columns.length; i++)\n-            System.out.println(\"### \" + columns[i].getName());\n+\n+    /** Creates a new instance of TestSchemaGenerator */\n+    public TestSchemaGenerator(String name) {\n+        super(name);\n     }\n-    \n-    public void testSchemaGen()\n-    throws Exception {\n-        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory)\n-        getEmf();\n+\n+    public void testSchemaGen() throws Exception {\n+        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory) getEmf();\n         OpenJPAEntityManager pm = pmf.createEntityManager();\n-        JDBCConfiguration con =\n-            (JDBCConfiguration) ((OpenJPAEntityManagerSPI) pm)\n-            .getConfiguration();\n-        DBDictionary dict = con.getDBDictionaryInstance();\n-        MappingRepository repos = con.getMappingRepositoryInstance();\n-        ClassMapping cm = repos.getMapping(RuntimeTest1.class,\n-                pm.getClassLoader(), true);\n-        String schemas = cm.getTable().getSchema().getName();\n-        if (schemas == null)\n-            schemas = \"\";\n-        schemas += \".\" + cm.getTable().getName();\n-        \n-        Map props=new HashMap();\n-        props.put(\"openjpa.jdbc.Schemas\", schemas);\n-        \n-        OpenJPAEntityManagerFactory kpmf =(OpenJPAEntityManagerFactory)\n-                getEmf(props);\n-        JDBCConfiguration conf =\n-            (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) kpmf)\n-            .getConfiguration();\n-        \n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration();\n+\n         StringWriter sw = new StringWriter();\n-        \n+\n         SchemaTool.Flags flags = new SchemaTool.Flags();\n         flags.writer = sw;\n         flags.primaryKeys = true;\n         flags.foreignKeys = true;\n         flags.indexes = true;\n         flags.openjpaTables = true;\n         flags.action = SchemaTool.ACTION_REFLECT;\n-        \n-        SchemaTool.run(conf, new String[0], flags,\n-                getClass().getClassLoader());\n-        \n+\n+        SchemaTool.run(conf, new String[0], flags, getClass().getClassLoader());\n+\n         sw.flush();\n         String data = sw.toString();\n         assertTrue(data.length() > 0);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/73cd30152044f4fc56f25eb4b64529983dc9b0a1",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/24e17363ef3faf489bf187b26f748eb80a19d3a0",
        "message": "OPENJPA-1892: Fix NPE in DataCacheStoreManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1036988 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_12",
        "file": [
            {
                "sha": "127d50a6e11d750829e0e6f4fd883885b287ed3f",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "status": "modified",
                "additions": 8,
                "deletions": 3,
                "changes": 11,
                "blob_url": "https://github.com/apache/openjpa/blob/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "raw_url": "https://github.com/apache/openjpa/raw/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=73cd30152044f4fc56f25eb4b64529983dc9b0a1",
                "patch": "@@ -392,9 +392,14 @@ public boolean initialize(OpenJPAStateManager sm, PCState state, FetchConfigurat\n                            && ((fetch.getCacheStoreMode() == DataCacheStoreMode.USE && !alreadyCached)\n                             || (fetch.getCacheStoreMode() == DataCacheStoreMode.REFRESH));\n         if (updateCache) {\n-            cacheStateManager(cache, sm, data);\n-            if (stats.isEnabled()) {\n-                ((CacheStatisticsSPI) stats).newPut(sm.getMetaData().getDescribedType());\n+            // It is possible that the \"cacheability\" of the provided SM changed after hitting the DB. This can happen\n+            // when we are operating against an Entity that is in some sort of inheritance structure.\n+            cache = _mgr.selectCache(sm);\n+            if (cache != null) {\n+                cacheStateManager(cache, sm, data);\n+                if (stats.isEnabled()) {\n+                    ((CacheStatisticsSPI) stats).newPut(sm.getMetaData().getDescribedType());\n+                }\n             }\n         }\n         return fromDatabase || alreadyCached;"
            },
            {
                "sha": "4c5245465056eab2272d638137b4dc171d1d4d8a",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelectiveInheritance.java",
                "status": "added",
                "additions": 65,
                "deletions": 0,
                "changes": 65,
                "blob_url": "https://github.com/apache/openjpa/blob/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelectiveInheritance.java",
                "raw_url": "https://github.com/apache/openjpa/raw/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelectiveInheritance.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelectiveInheritance.java?ref=73cd30152044f4fc56f25eb4b64529983dc9b0a1",
                "patch": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.cache.jpa.model.ChildUncacheable;\n+import org.apache.openjpa.persistence.cache.jpa.model.ParentUnspecifiedEntity;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * This test was added for https://issues.apache.org/jira/browse/OPENJPA-1892.\n+ * \n+ * The key to this test is that the ChildUncacheable is uncacheable and ParentUnspecifiedEntity is cacheable. In the\n+ * case were we pass the root Entity in em.find(ParentUnspecifiedEntity.class, 1) AND the id we passed corresponds to\n+ * the child Entity we shouldn't be caching this result.\n+ * \n+ */\n+public class TestCacheModeDisableSelectiveInheritance extends SingleEMFTestCase {\n+    Object[] params =\n+        new Object[] { ChildUncacheable.class, ParentUnspecifiedEntity.class, CLEAR_TABLES,\n+            \"javax.persistence.sharedCache.mode\", \"DISABLE_SELECTIVE\", \"openjpa.DataCache\", \"true\" };\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp(params);\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+\n+    }\n+\n+    public void testSimpleFind() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            ChildUncacheable c = new ChildUncacheable();\n+            em.getTransaction().begin();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            assertEquals(c, em.find(ChildUncacheable.class, c.getId()));\n+            em.clear();\n+            assertEquals(c.getId(), em.find(ChildUncacheable.class, c.getId()).getId());\n+\n+        } finally {\n+            em.close();\n+        }\n+    }\n+}"
            },
            {
                "sha": "0ebdf818b6c3a0b97523f09048bc9bf1b62391e3",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ChildUncacheable.java",
                "status": "added",
                "additions": 30,
                "deletions": 0,
                "changes": 30,
                "blob_url": "https://github.com/apache/openjpa/blob/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ChildUncacheable.java",
                "raw_url": "https://github.com/apache/openjpa/raw/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ChildUncacheable.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ChildUncacheable.java?ref=73cd30152044f4fc56f25eb4b64529983dc9b0a1",
                "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa.model;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@Cacheable(value = false)\n+public class ChildUncacheable extends ParentUnspecifiedEntity {\n+    @Basic\n+    String child;\n+}"
            },
            {
                "sha": "62be9aa98fc39ecd8a4af690a0f83b9f284cb699",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ParentUnspecifiedEntity.java",
                "status": "added",
                "additions": 61,
                "deletions": 0,
                "changes": 61,
                "blob_url": "https://github.com/apache/openjpa/blob/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ParentUnspecifiedEntity.java",
                "raw_url": "https://github.com/apache/openjpa/raw/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ParentUnspecifiedEntity.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ParentUnspecifiedEntity.java?ref=73cd30152044f4fc56f25eb4b64529983dc9b0a1",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ParentUnspecifiedEntity {\n+    @Id\n+    @Column(name = \"ID\")\n+    protected int id;\n+\n+    @Version\n+    @Column(name = \"VERSN\")\n+    protected int version;\n+\n+    protected String name;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/c960f725cb6d6ad6211ceec654ea657ccbebface",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/5040a436e7dc394dececa869321cfae52f30e4ac",
        "message": "OPENJPA-1882: Fix DataCacheStoreManager NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1033637 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_13",
        "file": [
            {
                "sha": "8f1fecf645abe5319ba1152fcbe21a432436a337",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "status": "modified",
                "additions": 7,
                "deletions": 8,
                "changes": 15,
                "blob_url": "https://github.com/apache/openjpa/blob/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "raw_url": "https://github.com/apache/openjpa/raw/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=c960f725cb6d6ad6211ceec654ea657ccbebface",
                "patch": "@@ -281,17 +281,17 @@ private static Modifications getModifications(Map<DataCache,Modifications> modMa\n \n     public boolean exists(OpenJPAStateManager sm, Object edata) {\n         DataCache cache = _mgr.selectCache(sm);\n-        CacheStatistics stats = cache.getStatistics();\n+        CacheStatistics stats = (cache == null) ? null : cache.getStatistics();\n         if (cache != null && !isLocking(null) && cache.contains(sm.getObjectId())){\n-            if (stats.isEnabled()) {\n+            if (stats != null && stats.isEnabled()) {\n                 // delay this call ONLY if stats collection is enabled\n                 Class<?> cls = sm.getMetaData().getDescribedType();\n                 ((CacheStatisticsSPI)stats).newGet(cls, false);\n             }\n             return true;\n         }\n         // If isLocking(null)==true && cache.contains(..) == true... probably shouldn't count?\n-        if (stats.isEnabled()) {\n+        if (stats != null && stats.isEnabled()) {\n             // delay this call ONLY if stats collection is enabled\n             Class<?> cls = sm.getMetaData().getDescribedType();\n             ((CacheStatisticsSPI)stats).newGet(cls, false);\n@@ -322,14 +322,13 @@ public boolean isCached(List<Object> oids, BitSet edata) {\n     public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n         DataCache cache = _mgr.selectCache(sm);\n         FetchConfiguration fc = sm.getContext().getFetchConfiguration();\n-        CacheStatistics stats = cache.getStatistics();\n+        CacheStatistics stats = (cache == null) ? null : cache.getStatistics();\n         if (cache == null || sm.isEmbedded() || fc.getCacheRetrieveMode() == DataCacheRetrieveMode.BYPASS) {\n-            if(stats.isEnabled()){\n-                ((CacheStatisticsSPI)stats).newGet(sm.getMetaData().getDescribedType(), false);\n+            if (stats != null && stats.isEnabled()) {\n+                ((CacheStatisticsSPI) stats).newGet(sm.getMetaData().getDescribedType(), false);\n             }\n             return super.syncVersion(sm, edata);\n         }\n-        \n         DataCachePCData data;\n         Object version = null;\n         data = cache.get(sm.getObjectId());\n@@ -338,7 +337,7 @@ public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n \n         // if we have a cached version update from there\n         if (version != null) {\n-            if(stats.isEnabled()){\n+            if (stats != null && stats.isEnabled()) {\n                 ((CacheStatisticsSPI)stats).newGet(data.getType(), true);\n             }\n             if (!version.equals(sm.getVersion())) {"
            },
            {
                "sha": "e84cf8c91811000650b021406db7414b1ac5f4d6",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java",
                "status": "added",
                "additions": 82,
                "deletions": 0,
                "changes": 82,
                "blob_url": "https://github.com/apache/openjpa/blob/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java",
                "raw_url": "https://github.com/apache/openjpa/raw/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java?ref=c960f725cb6d6ad6211ceec654ea657ccbebface",
                "patch": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.datacache.DataCacheManager;\n+import org.apache.openjpa.datacache.DataCacheStoreManager;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.kernel.DelegatingStoreManager;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.persistence.EntityManagerImpl;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * \n+ * This test was added for OPENJPA-1882.\n+ * <p>\n+ * When caching is enabled and a given type isn't being cached, make sure calling exists/syncVersion with that type\n+ * doesn't result in a NPE.\n+ * \n+ */\n+public class TestDataCacheStoreManager extends SingleEMFTestCase {\n+    Object[] p =\n+        new Object[] { CLEAR_TABLES, CachedEntityStatistics.class, \"openjpa.DataCache\", \"true(EnableStatistics=true)\",\n+            \"openjpa.QueryCache\", \"true\", };\n+\n+    private EntityManager em;\n+    private DataCacheStoreManager dsm;\n+    private DataCacheManager dcm;\n+    private OpenJPAStateManager sm;\n+\n+    public void setUp() {\n+        super.setUp(p);\n+\n+        em = emf.createEntityManager();\n+        dcm = emf.getConfiguration().getDataCacheManagerInstance();\n+        dsm =\n+            (DataCacheStoreManager) ((DelegatingStoreManager) ((EntityManagerImpl) em).getBroker().getStoreManager())\n+                .getDelegate();\n+\n+        em.getTransaction().begin();\n+        CachedEntityStatistics p = new CachedEntityStatistics();\n+        em.persist(p);\n+        em.getTransaction().commit();\n+\n+        dcm.stopCaching(CachedEntityStatistics.class.getName());\n+\n+        sm = (OpenJPAStateManager) ((PersistenceCapable) p).pcGetStateManager();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        dcm.startCaching(CachedEntityStatistics.class.getName());\n+        em.close();\n+\n+        super.tearDown();\n+    }\n+\n+    public void testExists() {\n+        dsm.exists(sm, null);\n+    }\n+\n+    public void testsyncVersion() {\n+        dsm.syncVersion(sm, null);\n+    }\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/2fa5556c0daf13cb63b037492e74ad4051aa671c",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/961e957be0797037c474bd60865bc443f5b5fc22",
        "message": "OPENJPA-1707: Fix NPE coming from PCRegistry.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@961774 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_14",
        "file": [
            {
                "sha": "09077674735f62b2b6b65edb895dedbbd8c8d5d8",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/2fa5556c0daf13cb63b037492e74ad4051aa671c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java",
                "raw_url": "https://github.com/apache/openjpa/raw/2fa5556c0daf13cb63b037492e74ad4051aa671c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=2fa5556c0daf13cb63b037492e74ad4051aa671c",
                "patch": "@@ -4746,7 +4746,7 @@ public static boolean checkEnhancementLevel(Class<?> cls, Log log) {\n         if (cls == null || log == null) {\n             return false;\n         }\n-        PersistenceCapable pc = PCRegistry.newInstance(cls, null, true);\n+        PersistenceCapable pc = PCRegistry.newInstance(cls, null, false);\n         if (pc == null) {\n             return false;\n         }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/cb77af09f2a73e30e00f0b12d23169fff1e0f003",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/990bfb8d9613199156d781204c3bc2cbec805393",
        "message": "OPENJPA-1657: Save NPE for some database connect on null properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@942815 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_15",
        "file": [
            {
                "sha": "e8a9f1e18208244734e8a7a6c120cfbf7cd8f24b",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/cb77af09f2a73e30e00f0b12d23169fff1e0f003/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java",
                "raw_url": "https://github.com/apache/openjpa/raw/cb77af09f2a73e30e00f0b12d23169fff1e0f003/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java?ref=cb77af09f2a73e30e00f0b12d23169fff1e0f003",
                "patch": "@@ -93,7 +93,8 @@ public Connection getConnection(String username, String password)\n \n     public Connection getConnection(Properties props)\n         throws SQLException {\n-    \tConnection con = getDriver().connect(_connectionURL, props);\n+    \tConnection con = getDriver().connect(_connectionURL, props == null? new Properties() : props);\n+    \t\n     \tif (con == null) {\n             throw new SQLException(_eloc.get(\"poolds-null\",\n                     _connectionDriverName, _connectionURL).getMessage());"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/e603bdc5c8e4a2d8c0be197490f2e71a33fdc553",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61",
        "message": "OPENJPA-1507. NPE fix.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909515 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_16",
        "file": [
            {
                "sha": "db1ea81c5ecde84716325926080d784270d88ed6",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/e603bdc5c8e4a2d8c0be197490f2e71a33fdc553/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/e603bdc5c8e4a2d8c0be197490f2e71a33fdc553/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=e603bdc5c8e4a2d8c0be197490f2e71a33fdc553",
                "patch": "@@ -1624,6 +1624,9 @@ public String getQuerySQLCache() {\n     }\n     \n     public PreparedQueryCache getQuerySQLCacheInstance() {\n+        if (preparedQueryCachePlugin == null)\n+            return null;\n+        \n         if (preparedQueryCachePlugin.get() == null) {\n             preparedQueryCachePlugin.instantiate(PreparedQueryCache.class,\n                     this);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/3f3d586c7301b1f2f926fb40fac194b6229d970e",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/f697798fd8dac5c9567ecdbd2bd768169cbcc2ef",
        "message": "OPENJPA-1413: fix NPE when update using CASE expression on Derby\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@886991 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_17",
        "file": [
            {
                "sha": "efe1ba3fd7908a6bcf97f2e42496ac1b8806edbf",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/3f3d586c7301b1f2f926fb40fac194b6229d970e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java",
                "raw_url": "https://github.com/apache/openjpa/raw/3f3d586c7301b1f2f926fb40fac194b6229d970e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java?ref=3f3d586c7301b1f2f926fb40fac194b6229d970e",
                "patch": "@@ -106,7 +106,8 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         boolean val2Null = _val2 instanceof Const\n             && ((Const) _val2).isSQLValueNull(sel, ctx, bstate.state2);\n         appendTo(sel, ctx, bstate, buf, val1Null, val2Null);\n-        sel.append(buf, state.joins);\n+        if (sel != null)\n+            sel.append(buf, state.joins);\n     }\n \n     public void selectColumns(Select sel, ExpContext ctx, ExpState state, "
            },
            {
                "sha": "8c884949a0f576f9d7f0d49f8497ffdcaaa18f9e",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java",
                "status": "modified",
                "additions": 10,
                "deletions": 13,
                "changes": 23,
                "blob_url": "https://github.com/apache/openjpa/blob/3f3d586c7301b1f2f926fb40fac194b6229d970e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java",
                "raw_url": "https://github.com/apache/openjpa/raw/3f3d586c7301b1f2f926fb40fac194b6229d970e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java?ref=3f3d586c7301b1f2f926fb40fac194b6229d970e",
                "patch": "@@ -249,22 +249,19 @@ public void testGeneralCaseExpressions() {\n         assertEquals(\"the name is not Jacob\", \"Jacob\", result3[0]);\n         assertEquals(\"the credit rating is not 'POOR'\", \"POOR\", result3[1]);\n \n-        /*\n-        // this jpql fail with NPE in Derby. It works with DB2 \n         String update2 = \"update CompUser c set c.creditRating = \" +\n             \" CASE WHEN c.name ='Jacob' THEN \" +\n-            \"org.apache.openjpa.persistence.common.apps.CompUser$\n-            CreditRating.POOR\" + \n+            \"org.apache.openjpa.persistence.common.apps.CompUser$CreditRating.POOR\" + \n             \" WHEN c.name = 'Ugo' THEN \" + \n-            \"org.apache.openjpa.persistence.common.apps.CompUser$\n-            CreditRating.GOOD \" +\n+            \"org.apache.openjpa.persistence.common.apps.CompUser$CreditRating.GOOD \" +\n             \" ELSE \" + \n-            \"org.apache.openjpa.persistence.common.apps.CompUser$\n-            CreditRating.EXCELLENT \" +\n+            \"org.apache.openjpa.persistence.common.apps.CompUser$CreditRating.EXCELLENT \" +\n             \" END \";\n-        */\n+        int updateCount = em.createQuery(update2).executeUpdate();\n+        assertEquals(\"the result is not 6\", 6, updateCount);\n         \n-        String update2 = \"update CompUser c set c.creditRating = \" +\n+        \n+        String update3 = \"update CompUser c set c.creditRating = \" +\n             \" CASE WHEN c.age > 30 THEN \" +\n             \"org.apache.openjpa.persistence.common.apps.\" +\n             \"CompUser$CreditRating.POOR\" + \n@@ -275,7 +272,7 @@ public void testGeneralCaseExpressions() {\n             \"org.apache.openjpa.persistence.common.apps.\" +\n             \"CompUser$CreditRating.EXCELLENT \" +\n             \" END \"; \n-        int updateCount = em.createQuery(update2).executeUpdate();\n+        updateCount = em.createQuery(update3).executeUpdate();\n         assertEquals(\"the result is not 6\", 6, updateCount);\n         \n         String query4 = \"select e.name, e.creditRating from CompUser e \" + \n@@ -300,7 +297,7 @@ public void testGeneralCaseExpressions() {\n             ((org.apache.openjpa.persistence.common.apps.CompUser.CreditRating)\n             result4[1]).name());\n         \n-        String update3 = \"update CompUser c set c.creditRating = \" +\n+        String update4 = \"update CompUser c set c.creditRating = \" +\n             \" CASE c.age WHEN 35 THEN \" +\n             \"org.apache.openjpa.persistence.common.apps.\" +\n             \"CompUser$CreditRating.POOR\" + \n@@ -311,7 +308,7 @@ public void testGeneralCaseExpressions() {\n             \"org.apache.openjpa.persistence.common.apps.\" +\n             \"CompUser$CreditRating.EXCELLENT \" +\n             \" END \"; \n-        result = em.createQuery(update3).executeUpdate();\n+        result = em.createQuery(update4).executeUpdate();\n         assertEquals(\"the result is not 6\", 6, result);\n \n         // Derby fails but DB2 works "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/69517ce840b72560e0a33e6e01b91d255f77e1d7",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/36a6df375bcb4b4c9b925c4234d02f6d84c6a334",
        "message": "Save NPE on getting super type\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@885526 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_18",
        "file": [
            {
                "sha": "8ec864683ae14ba400dd21ccbe819f9de9c497b5",
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Types.java",
                "status": "modified",
                "additions": 5,
                "deletions": 3,
                "changes": 8,
                "blob_url": "https://github.com/apache/openjpa/blob/69517ce840b72560e0a33e6e01b91d255f77e1d7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Types.java",
                "raw_url": "https://github.com/apache/openjpa/raw/69517ce840b72560e0a33e6e01b91d255f77e1d7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Types.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Types.java?ref=69517ce840b72560e0a33e6e01b91d255f77e1d7",
                "patch": "@@ -136,11 +136,13 @@ public boolean hasVersionAttribute() {\n          *  Return the identifiable type that corresponds to the most\n          *  specific mapped superclass or entity extended by the entity \n          *  or mapped superclass. \n-         *  @return supertype of identifiable type or null if no such supertype\n+         *  @return super type of identifiable type or null if no such super type\n          */\n         public IdentifiableType<? super X> getSupertype() {\n-            return (IdentifiableType<? super X>) model.managedType(meta\n-                .getPCSuperclassMetaData().getDescribedType());\n+            ClassMetaData superMeta = meta.getPCSuperclassMetaData();\n+            if (superMeta == null)\n+                return null;\n+            return (IdentifiableType<? super X>) model.managedType(superMeta.getDescribedType());\n         }\n \n         public boolean hasIdAttribute() {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/5432ffecbb765de57791f414aa88c9dd88cd55c6",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/d91fa6a2ac3fb4f2ba3af8aaa66121134765e3b8",
        "message": "OPENJPA-1211: check null value to prevent NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@799340 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_19",
        "file": [
            {
                "sha": "7227e29e732559cade6163d30e1af301dff4d021",
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/5432ffecbb765de57791f414aa88c9dd88cd55c6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/5432ffecbb765de57791f414aa88c9dd88cd55c6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java?ref=5432ffecbb765de57791f414aa88c9dd88cd55c6",
                "patch": "@@ -257,6 +257,8 @@ private void addJoin(Join<X,?> join) {\n      * Return a path to the specified field.  \n      */\n     public <Y> Path<Y> get(String attName) {\n+        if (type == null)\n+            return super.get(attName);\n         Member<? super X, ?> member = null;\n         for (Attribute<? super X, ?> a : type.getAttributes()) { \n             if(a instanceof Member<?, ?>){ "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/bb01292ce90b5ad2e733390bf4cfcb238989e1b8",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/718370e1ef8ceaa48fedfa92b90dc49de6cb530b",
        "message": "OPENJPA-957 - Guard NPE as fetch may be null in getForUpdateClause.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@762177 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_20",
        "file": [
            {
                "sha": "7b89c927206acdfd25c3b40c27f4f87ed977262b",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/bb01292ce90b5ad2e733390bf4cfcb238989e1b8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "raw_url": "https://github.com/apache/openjpa/raw/bb01292ce90b5ad2e733390bf4cfcb238989e1b8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=bb01292ce90b5ad2e733390bf4cfcb238989e1b8",
                "patch": "@@ -350,7 +350,8 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         else\n             isolationLevel = conf.getTransactionIsolationConstant();\n \n-        if (fetch.getReadLockLevel() >= MixedLockLevels.LOCK_PESSIMISTIC_WRITE)\n+        if (fetch != null\n+            && fetch.getReadLockLevel() >= MixedLockLevels.LOCK_PESSIMISTIC_WRITE)\n             isolationLevel = Connection.TRANSACTION_SERIALIZABLE;\n \n         if (isForUpdate) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/80aea14f18227ceafca32cc4a36f614280a7fcc9",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/0416d6b54c83585ace5fab8280151b2af0c4c354",
        "message": "OPENJPA-912 Potential NPE in setInverseRelation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@741994 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_21",
        "file": [
            {
                "sha": "cb853d42614e3bfef053cf9ced5ae3bc7271fbbe",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/openjpa/blob/80aea14f18227ceafca32cc4a36f614280a7fcc9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java",
                "raw_url": "https://github.com/apache/openjpa/raw/80aea14f18227ceafca32cc4a36f614280a7fcc9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=80aea14f18227ceafca32cc4a36f614280a7fcc9",
                "patch": "@@ -392,6 +392,10 @@ private void setInverseRelation(OpenJPAStateManager owner,\n                     for (Iterator itr = ((Collection) coll).iterator();\n                         itr.hasNext();) {\n                         PersistenceCapable pc = (PersistenceCapable) itr.next();\n+\n+                        if (pc == null)\n+                            continue;\n+\n                         OpenJPAStateManager sm = (OpenJPAStateManager) pc.\n                             pcGetStateManager();\n                         FieldMapping[] fmd = ((ClassMapping) sm.getMetaData())."
            },
            {
                "sha": "2b32fff481a900d5735762757502f25971dae713",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/80aea14f18227ceafca32cc4a36f614280a7fcc9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java",
                "raw_url": "https://github.com/apache/openjpa/raw/80aea14f18227ceafca32cc4a36f614280a7fcc9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java?ref=80aea14f18227ceafca32cc4a36f614280a7fcc9",
                "patch": "@@ -32,7 +32,8 @@\n \tlong aid;\n \n \tpublic void setUp () {\n-\t\tsetUp (ChainEntityA.class, ChainEntityB.class, ChainEntityC.class);\n+\t\tsetUp (DROP_TABLES,\n+\t\t    ChainEntityA.class, ChainEntityB.class, ChainEntityC.class);\n \t\t// Create A\n \t\tChainEntityA a = new ChainEntityA ();\n \t\ta.setName (\"TEST_A\");"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/89df4a75321f4066bb7a0a83d0fa03ace16e32bf",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/e70fd12a5933871b1e937e77a1dba04330b31de6",
        "message": "OPENJPA-873: fix NPE when MappedSuperclass does not have \nIdClass defined.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@737816 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_22",
        "file": [
            {
                "sha": "507eeced744f7e2bba58b243ec0dbad9e03cff19",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/openjpa/blob/89df4a75321f4066bb7a0a83d0fa03ace16e32bf/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "raw_url": "https://github.com/apache/openjpa/raw/89df4a75321f4066bb7a0a83d0fa03ace16e32bf/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=89df4a75321f4066bb7a0a83d0fa03ace16e32bf",
                "patch": "@@ -1880,7 +1880,9 @@ private void validateAppIdClass() {\n         if (_super != null) {\n             // concrete superclass oids must match or be parent of ours\n             ClassMetaData sup = getPCSuperclassMetaData();\n-            if (!sup.getObjectIdType().isAssignableFrom(_objectId))\n+            Class objectIdType = sup.getObjectIdType();\n+            if (objectIdType != null && \n+                !objectIdType.isAssignableFrom(_objectId))\n                 throw new MetaDataException(_loc.get(\"id-classes\",\n                     new Object[]{ _type, _objectId, _super,\n                         sup.getObjectIdType() }));"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/b683569de095f7e9d24606816f5d09d88e12f3e2",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/49d5f19a684dc48ce579a9eeaffb04ca9a49996e",
        "message": "OPENJPA-485: \nOPENJPA-497: Saving NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@682570 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_23",
        "file": [
            {
                "sha": "e59a58252fd988c3a0b4ac36becf8678e5d2668d",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/openjpa/blob/b683569de095f7e9d24606816f5d09d88e12f3e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java",
                "raw_url": "https://github.com/apache/openjpa/raw/b683569de095f7e9d24606816f5d09d88e12f3e2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=b683569de095f7e9d24606816f5d09d88e12f3e2",
                "patch": "@@ -489,8 +489,10 @@ else if (action.op == Action.UNBOUND_VAR) {\n \n                     for (; from != null && from != to;\n                         from = from.getJoinablePCSuperclassMapping()) {\n-                    \tpstate.field = from.getFieldMapping(pstate.field\n-                    \t    .getName());\n+                    \tFieldMapping cast = from.getFieldMapping(pstate.field\n+                    \t\t\t.getName());\n+                    \tif (cast != null)\n+                    \t\tpstate.field = cast;\n                         pstate.joins = from.joinSuperclass(pstate.joins, false);\n                     }\n                 }"
            },
            {
                "sha": "6c1156746cd3f7850866473f920daf8d1ca54014",
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java",
                "status": "modified",
                "additions": 8,
                "deletions": 9,
                "changes": 17,
                "blob_url": "https://github.com/apache/openjpa/blob/b683569de095f7e9d24606816f5d09d88e12f3e2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/b683569de095f7e9d24606816f5d09d88e12f3e2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=b683569de095f7e9d24606816f5d09d88e12f3e2",
                "patch": "@@ -322,9 +322,8 @@ private void validateParameters() {\n \t\t\t\tif (expectedParamType.isPrimitive() && actualValue == null)\n \t\t\t\t\tnewValidationException(\"param-type-null\", \n \t\t\t\t\t\t\tposition, query, expectedParamType.getName());\n-\t\t\t\tif (actualValue == null)\n-\t\t\t\t\tcontinue;\n-\t\t\t\tif (!Filters.wrap(expectedParamType).isInstance(actualValue)) \n+\t\t\t\tif (actualValue != null &&\n+\t\t\t\t   !Filters.wrap(expectedParamType).isInstance(actualValue)) \n \t\t\t\t\tnewValidationException(\"param-type-mismatch\",\n \t\t\t\t\t\t\tposition, query, actualValue,\n \t\t\t\t\t\t\tactualValue.getClass().getName(),\n@@ -347,8 +346,8 @@ private void validateParameters() {\n \t\t\t\t\tif (expectedParamType.isPrimitive() && actualValue == null)\n \t\t\t\t\t\tnewValidationException(\"param-type-null\", \n \t\t\t\t\t\t\t\tposition, query, expectedParamType.getName());\n-\t\t\t\t\tif (!Filters.wrap(expectedParamType)\n-\t\t\t\t\t\t\t.isInstance(actualValue)) \n+\t\t\t\t\tif (actualValue != null \n+\t\t\t\t\t && !Filters.wrap(expectedParamType).isInstance(actualValue)) \n \t\t\t\t\t\tnewValidationException(\"param-type-mismatch\",\n \t\t\t\t\t\t\t\tposition, query, actualValue,\n \t\t\t\t\t\t\t\tactualValue.getClass().getName(),\n@@ -375,9 +374,8 @@ private void validateParameters() {\n \t\t\t\tif (expectedParamType.isPrimitive() && actualValue == null)\n \t\t\t\t\tnewValidationException(\"param-type-null\", \n \t\t\t\t\t\t\texpectedName, query, expectedParamType.getName());\n-\t\t\t\tif (actualValue == null)\n-\t\t\t\t\tcontinue;\n-\t\t\t\tif (!Filters.wrap(expectedParamType).isInstance(actualValue)) {\n+\t\t\t\tif (actualValue != null \n+\t\t\t\t && !Filters.wrap(expectedParamType).isInstance(actualValue)) {\n \t\t\t\t\tnewValidationException(\"param-type-mismatch\",\n \t\t\t\t\t\t\texpectedName, query, actualValue,\n \t\t\t\t\t\t\tactualValue.getClass().getName(),\n@@ -395,7 +393,8 @@ private void validateParameters() {\n \t\t\t\tif (expectedParamType.isPrimitive() && actualValue == null)\n \t\t\t\t\tnewValidationException(\"param-type-null\", \n \t\t\t\t\t\t\tactualName, query, expectedParamType.getName());\n-\t\t\t\tif (!Filters.wrap(expectedParamType).isInstance(actualValue)) {\n+\t\t\t\tif (actualValue != null \n+\t\t\t\t && !Filters.wrap(expectedParamType).isInstance(actualValue)) {\n \t\t\t\t\tnewValidationException(\"param-type-mismatch\",\n \t\t\t\t\t\t\tactualName, query, actualValue,\n \t\t\t\t\t\t\tactualValue.getClass().getName(),"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/89e7531398352ba214faa845098ba773562bdc70",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/c7a906314641bc2a3f7d997422028686938c1d55",
        "message": "Initialize Database Prodcut/Vendor name to empty string to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@675387 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_24",
        "file": [
            {
                "sha": "69091419f75113f3dfd8e0774d2043abb8d32e9a",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "status": "modified",
                "additions": 23,
                "deletions": 39,
                "changes": 62,
                "blob_url": "https://github.com/apache/openjpa/blob/89e7531398352ba214faa845098ba773562bdc70/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "raw_url": "https://github.com/apache/openjpa/raw/89e7531398352ba214faa845098ba773562bdc70/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=89e7531398352ba214faa845098ba773562bdc70",
                "patch": "@@ -72,8 +72,8 @@\n     protected static final String useKeepExclusiveLockClause\r\n         = \"USE AND KEEP EXCLUSIVE LOCKS\";\r\n     protected static final String forReadOnlyClause = \"FOR READ ONLY\";\r\n-    protected String databaseProductName = null;\r\n-    protected String databaseProductVersion = null;\r\n+    protected String databaseProductName = \"\";\r\n+    protected String databaseProductVersion = \"\";\r\n     protected int maj = 0;\r\n     protected int min = 0;\r\n     \r\n@@ -242,8 +242,8 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n     \tsuper.connectedConfiguration(conn);\r\n \r\n     \tDatabaseMetaData metaData = conn.getMetaData();\r\n-        databaseProductName = metaData.getDatabaseProductName();\r\n-        databaseProductVersion = metaData.getDatabaseProductVersion();\r\n+        databaseProductName = nullSafe(metaData.getDatabaseProductName());\r\n+        databaseProductVersion = nullSafe(metaData.getDatabaseProductVersion());\r\n         \r\n         // Determine the type of DB2 database\r\n         // First check for AS/400\r\n@@ -384,51 +384,32 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n     }\r\n \r\n     public boolean isDB2UDBV82OrLater() {\r\n-        boolean match = false;\r\n-        if (databaseProductName != null &&\r\n-            (databaseProductVersion.indexOf(\"SQL\") != -1\r\n-            || databaseProductName.indexOf(\"DB2/\") != -1)\r\n-            && ((maj == 8 && min >= 2) || (maj >= 9)))\r\n-            match = true;\r\n-        return match;\r\n+        return (databaseProductVersion.indexOf(\"SQL\") != -1\r\n+             || databaseProductName.indexOf(\"DB2/\") != -1)\r\n+             && ((maj == 8 && min >= 2) || (maj >= 9));\r\n     }\r\n \r\n     public boolean isDB2ZOSV8xOrLater() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           (databaseProductVersion.indexOf(\"DSN\") != -1\r\n-           || databaseProductName.indexOf(\"DB2/\") == -1)\r\n-           && maj >= 8)\r\n-           match = true;\r\n-        return match;\r\n+       return (databaseProductVersion.indexOf(\"DSN\") != -1\r\n+            || databaseProductName.indexOf(\"DB2/\") == -1)\r\n+            && maj >= 8;\r\n+           \r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R3OrEarlier() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           databaseProductName.indexOf(\"AS\") != -1\r\n-           && ((maj == 5 && min <=3) || maj < 5))\r\n-           match = true;\r\n-       return match;\r\n+       return (databaseProductName.indexOf(\"AS\") != -1\r\n+           && ((maj == 5 && min <=3) || maj < 5));\r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R4OrLater() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           databaseProductName.indexOf(\"AS\") != -1\r\n-           && (maj >=6 || (maj == 5 && min >=4)))\r\n-           match = true;\r\n-      return match;\r\n+       return databaseProductName.indexOf(\"AS\") != -1\r\n+           && (maj >=6 || (maj == 5 && min >=4));\r\n     }\r\n \r\n     public boolean isDB2UDBV81OrEarlier() {\r\n-        boolean match = false;\r\n-        if (databaseProductName != null &&\r\n-            (databaseProductVersion.indexOf(\"SQL\") != -1 \r\n-            || databaseProductName.indexOf(\"DB2/\") != -1) &&\r\n-            ((maj == 8 && min <= 1) || maj < 8))\r\n-            match = true;\r\n-        return match;\r\n+        return (databaseProductVersion.indexOf(\"SQL\") != -1 \r\n+            || databaseProductName.indexOf(\"DB2/\") != -1) \r\n+            && ((maj == 8 && min <= 1) || maj < 8);\r\n     }\r\n \r\n     /** Get the version Major/Minor for the ISeries\r\n@@ -456,8 +437,7 @@ private void getProductVersionMajorMinorForISeries() {\n                     String s2 =  stringtokenizer.nextToken();\r\n                     min = Integer.parseInt(s2);\r\n                 }\r\n-            }\r\n-            else {\r\n+            } else {\r\n                 index = databaseProductVersion.indexOf('0');\r\n                 if (index != -1) {\r\n                     String s = databaseProductVersion.substring(index);\r\n@@ -844,4 +824,8 @@ public void createIndexIfNecessary(Schema schema, String table,\n             idx.addColumn(pkColumn);\r\n         }\r\n     }\r\n+    \r\n+    String nullSafe(String s) {\r\n+    \treturn s == null ? \"\" : s;\r\n+    }\r\n }\r"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/126358f0e4f9aa200fb4e880fde8437295dbf071",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/f3dd4c039797ee3498d5bffeac16415474680216",
        "message": "Fix NPE reported on newsgroup.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@633739 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_25",
        "file": [
            {
                "sha": "130e97fa41df7d209e6c9feb67c3cbc906351eea",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/126358f0e4f9aa200fb4e880fde8437295dbf071/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/126358f0e4f9aa200fb4e880fde8437295dbf071/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java?ref=126358f0e4f9aa200fb4e880fde8437295dbf071",
                "patch": "@@ -168,7 +168,8 @@ protected void clearInverseRelationCache(OpenJPAStateManager sm,\n                     .indexOf(fmd.getName()) != -1) {\n                     DataCache cache = sm.getMetaData().getDataCache();\n                     Object oid = sm.getContext().getObjectId(sm.fetch(i));\n-                    DataCachePCData data = cache.get(oid);\n+                    DataCachePCData data = cache == null ? null\n+                        : cache.get(oid);\n                     if ((data != null) &&\n                         (data instanceof DataCachePCDataImpl)) {\n                         ((DataCachePCDataImpl) data)"
            },
            {
                "sha": "da65baa92cfdd6288c061eefdfdf33f746c3a05d",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java",
                "status": "modified",
                "additions": 8,
                "deletions": 3,
                "changes": 11,
                "blob_url": "https://github.com/apache/openjpa/blob/126358f0e4f9aa200fb4e880fde8437295dbf071/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java",
                "raw_url": "https://github.com/apache/openjpa/raw/126358f0e4f9aa200fb4e880fde8437295dbf071/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=126358f0e4f9aa200fb4e880fde8437295dbf071",
                "patch": "@@ -128,6 +128,9 @@ private List checkCache(QueryKey qk) {\n             // using it because of the individual by-oid lookups\n             ClassMetaData meta = _repos.getMetaData(getContext().\n                 getCandidateType(), _sctx.getClassLoader(), true);\n+            if (meta.getDataCache() == null)\n+                return null;\n+\n             BitSet idxs = meta.getDataCache().containsAll(res);\n \n             // eventually we should optimize this to figure out how many objects\n@@ -333,9 +336,11 @@ private void clearAccessPath(StoreQuery q) {\n                 (q.getContext(), classes));\n \n             // evict from the data cache\n-            for (int i = 0; i < cmd.length; i++)\n-                cmd[i].getDataCache().removeAll(\n-                    cmd[i].getDescribedType(), true);\n+            for (int i = 0; i < cmd.length; i++) {\n+                if (cmd[i].getDataCache() != null)\n+                    cmd[i].getDataCache().removeAll(\n+                        cmd[i].getDescribedType(), true);\n+            }\n         }\n \n         public Number executeDelete(StoreQuery q, Object[] params) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/73b35874f032a84d4d9ada3dbb49b18777641019",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/cd2f9e978ee6bb3da2c2272e9259c9bec683faef",
        "message": "Avoid potential NPE; fix error msg.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@590143 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_26",
        "file": [
            {
                "sha": "f7f001db20d1230eaf3ccf41979021879ea8921b",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java",
                "status": "modified",
                "additions": 8,
                "deletions": 6,
                "changes": 14,
                "blob_url": "https://github.com/apache/openjpa/blob/73b35874f032a84d4d9ada3dbb49b18777641019/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/73b35874f032a84d4d9ada3dbb49b18777641019/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=73b35874f032a84d4d9ada3dbb49b18777641019",
                "patch": "@@ -463,10 +463,11 @@ private BitSet getUnloadedInternal(FetchConfiguration fetch, int mode,\n                 // merge the fetchgroup required fields to the original\n                 // fields only the fields are not already loaded and\n                 // are not in the original fields.\n-                for (int j = 0; j < fgFields.length(); j++) {\n-                    if (fgFields.get(j) && !fields.get(j) && !_loaded.get(j))\n-                        fields.set(j);\n-                }\n+                if (fgFields != null)\n+                    for (int j = 0; j < fgFields.length(); j++) {\n+                        if (fgFields.get(j) && !fields.get(j) &&!_loaded.get(j))\n+                            fields.set(j);\n+                    }\n             }\n \n         }\n@@ -597,7 +598,7 @@ private boolean assignField(int field, boolean preFlushing) {\n         // Just return if there's no value generation strategy\n         if (fmd.getValueStrategy() == ValueStrategies.NONE)\n             return false;\n-        \n+\n         // Throw exception if field already has a value assigned.\n         // @GeneratedValue overrides POJO initial values and setter methods\n         if (!isDefaultValue(field) && !fmd.isValueGenerated())\n@@ -816,7 +817,8 @@ public void dirtyCheck() {\n \n         SaveFieldManager saved = getSaveFieldManager();\n         if (saved == null)\n-            throw new InternalException(_loc.get(\"no-saved-fields\"));\n+            throw new InternalException(_loc.get(\"no-saved-fields\",\n+                getManagedInstance()));\n \n         FieldMetaData[] fmds = getMetaData().getFields();\n         for (int i = 0; i < fmds.length; i++) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/44c08403ac2b61eb1d022a5bf7b5df4778efb1f2",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/809cb370030c72970ed499c3003aa5400b3a276e",
        "message": "NPE check. Checking in on behalf of Abe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@575752 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_27",
        "file": [
            {
                "sha": "6f994b7f9e248309d47be1233d7000898b781ce6",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/openjpa/blob/44c08403ac2b61eb1d022a5bf7b5df4778efb1f2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java",
                "raw_url": "https://github.com/apache/openjpa/raw/44c08403ac2b61eb1d022a5bf7b5df4778efb1f2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=44c08403ac2b61eb1d022a5bf7b5df4778efb1f2",
                "patch": "@@ -3666,7 +3666,7 @@ private void putfield(Code code, BCClass declarer, String attrName,\n      */\n     private String toBackingFieldName(String name) {\n         if (_meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY\n-            && _attrsToFields.containsKey(name))\n+            && _attrsToFields != null && _attrsToFields.containsKey(name))\n             name = (String) _attrsToFields.get(name);\n         return name;\n     }\n@@ -3679,7 +3679,7 @@ private String fromBackingFieldName(String name) {\n         // meta is null when doing persistence-aware enhancement\n         if (_meta != null\n             && _meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY\n-            && _fieldsToAttrs.containsKey(name))\n+            && _fieldsToAttrs != null && _fieldsToAttrs.containsKey(name))\n             return (String) _fieldsToAttrs.get(name);\n         else\n             return name;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/d260d34d69be456f78f195fc2fb075dcfa2aa4fb",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/fa39addf827a6ef14492389574e89055906efd49",
        "message": "Oops; fixing NPE caused by previous short-circuiting.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563664 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_28",
        "file": [
            {
                "sha": "01563e37a3da46d0603b2fc35507435eb320a972",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java",
                "status": "modified",
                "additions": 8,
                "deletions": 4,
                "changes": 12,
                "blob_url": "https://github.com/apache/openjpa/blob/d260d34d69be456f78f195fc2fb075dcfa2aa4fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java",
                "raw_url": "https://github.com/apache/openjpa/raw/d260d34d69be456f78f195fc2fb075dcfa2aa4fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java?ref=d260d34d69be456f78f195fc2fb075dcfa2aa4fb",
                "patch": "@@ -49,6 +49,8 @@\n public class TestXMLCustomerOrder\n     extends SQLListenerTestCase {\n \n+    private boolean enabled = false;\n+\n     public void setUp() {\n         OpenJPAEntityManagerFactory emf = createEMF();\n         DBDictionary dict = ((JDBCConfiguration) emf.getConfiguration())\n@@ -58,6 +60,8 @@ public void setUp() {\n         if (!dict.supportsXMLColumn)\n             return;\n \n+        enabled = true;\n+\n         setUp(org.apache.openjpa.persistence.xmlmapping.entities.Customer.class\n             , org.apache.openjpa.persistence.xmlmapping.entities.Customer\n                 .CustomerKey.class\n@@ -71,15 +75,15 @@ public static void main(String[] args) {\n     }\n \n     public void testXMLCustomerOrder() {\t\n+        // skip if dictionary has no support for XML column type\n+        if (!enabled)\n+            return;\n+\n         OpenJPAEntityManager em =\n             OpenJPAPersistence.cast(emf.createEntityManager());\n         DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n             .getDBDictionaryInstance();\n \n-        // skip if dictionary has no support for XML column type \n-        if (!dict.supportsXMLColumn)\n-            return;\n-\n         String sqllog = TestXMLCustomerOrder.class.getName();\n         sqllog = sqllog.replace('.', '/');\n         sqllog = \"./\" + sqllog;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/04397f562eeffeeb521527f12bfe9ab8bb83a93e",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/e041fe0d4de6baebefcbc34a3ff1962212535b5b",
        "message": "OPENJPA-148 Applied follow-up patch that resolved potential NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@540283 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_29",
        "file": [
            {
                "sha": "2130a0d5bd25e9bfc70a5312f7db5b2d6ac6d5c9",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java",
                "status": "modified",
                "additions": 9,
                "deletions": 3,
                "changes": 12,
                "blob_url": "https://github.com/apache/openjpa/blob/04397f562eeffeeb521527f12bfe9ab8bb83a93e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java",
                "raw_url": "https://github.com/apache/openjpa/raw/04397f562eeffeeb521527f12bfe9ab8bb83a93e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=04397f562eeffeeb521527f12bfe9ab8bb83a93e",
                "patch": "@@ -46,6 +46,7 @@\n import org.apache.openjpa.lib.meta.URLMetaDataIterator;\n import org.apache.openjpa.lib.meta.ZipFileMetaDataIterator;\n import org.apache.openjpa.lib.meta.ZipStreamMetaDataIterator;\n+import org.apache.openjpa.lib.meta.ClassLoaderMetaDataIterator;\n import org.apache.openjpa.lib.util.Files;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.GeneralException;\n@@ -633,13 +634,18 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n         if (urls != null) {\n             for (Iterator itr = urls.iterator(); itr.hasNext();) {\n                 url = (URL) itr.next();\n-\n                 if (\"file\".equals(url.getProtocol())) {\n                     File file = new File(url.getFile()).getAbsoluteFile();\n-                    if (files.contains(file)) {\n+                    if (files != null && files.contains(file)) {\n+                        continue;\n+                    } else if (file.isDirectory()) {\n+                        if (log.isTraceEnabled())\n+                            log.trace(_loc.get(\"scanning-directory\", file));\n+                        scan(new FileMetaDataIterator(file, newMetaDataFilter()),\n+                                cparser, names, true, file);\n                         continue;\n                     }\n-                } \n+                }\n                 if (\"jar\".equals(url.getProtocol())\n                     && url.getPath().endsWith(\"!/\")) {\n                     if (log.isTraceEnabled())"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/0a072b8a50dc376cccb5662915e0f9a1b2763c32",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6",
        "message": "Fix possible NPE introduced in recent changes to MethodLifecycleCallbacks.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@505052 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_30",
        "file": [
            {
                "sha": "a0449a80ba8b061a3f54406f51d8ac8265285050",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/openjpa/blob/0a072b8a50dc376cccb5662915e0f9a1b2763c32/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java",
                "raw_url": "https://github.com/apache/openjpa/raw/0a072b8a50dc376cccb5662915e0f9a1b2763c32/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java?ref=0a072b8a50dc376cccb5662915e0f9a1b2763c32",
                "patch": "@@ -118,8 +118,8 @@ protected static Method getMethod(Class cls, String method, Class[] args) {\n      * from the corresponding parameters of the to array. \n      */\n     private static boolean isAssignable(Class[] from, Class[] to) {\n-        if (from == null)\n-            return to == null;\n+        if (from == null || to == null)\n+            return to == from;\n \n         if (from.length != to.length)\n             return false;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/9a2a9072617ffffca3bbbb6713ca337f6d286b88",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/cd65ce1c4dad2c8d0382db07d573f28497791142",
        "message": "Fix possible NPEs resulting from Patrick's last DataCacheStoreManager commit.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@471831 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_31",
        "file": [
            {
                "sha": "40b9e78cd7afd754780e21664bb853cd271d2c58",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/openjpa/blob/9a2a9072617ffffca3bbbb6713ca337f6d286b88/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "raw_url": "https://github.com/apache/openjpa/raw/9a2a9072617ffffca3bbbb6713ca337f6d286b88/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=9a2a9072617ffffca3bbbb6713ca337f6d286b88",
                "patch": "@@ -571,9 +571,15 @@ private void evictOptimisticLockFailure(OptimisticException e) {\n         // and less write locks to do the mutation.\n         ClassMetaData meta = sm.getMetaData();\n         DataCache cache = meta.getDataCache();\n+        if (cache == null)\n+            return;\n+\n         cache.writeLock();\n         try {\n             DataCachePCData data = cache.get(sm.getId());\n+            if (data == null)\n+                return;\n+\n             boolean remove;\n             switch (compareVersion(sm, sm.getVersion(), data.getVersion())) {\n                 case StoreManager.VERSION_LATER:"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/6503eabef5327eaf3c20965d75ad086c3c4480dd",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/36b9628948cb746696204447d467105a3a67f0bd",
        "message": "OPENJPA-1550: When batchLimit=-1 or >1 and an exception is caused, the params and failedObject are missing from the resultant exception.\navoid NullPointerException for JDBC provider using PureQUery APIs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922355 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_32",
        "file": [
            {
                "sha": "c09ce814663a63b7b16251cab405189d0afda098",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java",
                "status": "modified",
                "additions": 3,
                "deletions": 2,
                "changes": 5,
                "blob_url": "https://github.com/apache/openjpa/blob/6503eabef5327eaf3c20965d75ad086c3c4480dd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/6503eabef5327eaf3c20965d75ad086c3c4480dd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java?ref=6503eabef5327eaf3c20965d75ad086c3c4480dd",
                "patch": "@@ -224,9 +224,10 @@ protected void flushBatch() throws SQLException {\n             } finally {\n                 _batchedSql = null;\n                 batchedRows.clear();\n-                //Clear the Params now....should this be done above?\n-                ps.clearParameters();\n                 if (ps != null) {\n+                    //Clear the Params now....should this be done above? No. \n+                    //if JDBC provider using PureQuery, ps is null\n+                    ps.clearParameters();\n                     try {\n                         ps.close();\n                     } catch (SQLException sqex) {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/fd4ca960502967429a242bbdbb51abd778346899",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/e424097b564273b807f0637056ea244c40a125c3",
        "message": "OPENJPA-2267: Fix NPE in ResultPacker when there is a null result.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1391218 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_33",
        "file": [
            {
                "sha": "153a1bfcf63479fc8e221f2278ae270687c6dd37",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/fd4ca960502967429a242bbdbb51abd778346899/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java",
                "raw_url": "https://github.com/apache/openjpa/raw/fd4ca960502967429a242bbdbb51abd778346899/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java?ref=fd4ca960502967429a242bbdbb51abd778346899",
                "patch": "@@ -199,7 +199,7 @@ private void assertConvertable(Class<?> candidate, Class<?>[] types,\n      * Pack the given object into an instance of the query's result class.\n      */\n     public Object pack(Object result) {\n-        if (_resultClass == result.getClass())\n+        if (result == null || _resultClass == result.getClass())\n             return result;\n         // special cases for efficient basic types where we want to avoid\n         // creating an array for call to general pack method below"
            },
            {
                "sha": "e1f91ed7a1aee0ae49517624c3d08f01f481e306",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java",
                "status": "modified",
                "additions": 7,
                "deletions": 0,
                "changes": 7,
                "blob_url": "https://github.com/apache/openjpa/blob/fd4ca960502967429a242bbdbb51abd778346899/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java",
                "raw_url": "https://github.com/apache/openjpa/raw/fd4ca960502967429a242bbdbb51abd778346899/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java?ref=fd4ca960502967429a242bbdbb51abd778346899",
                "patch": "@@ -31,6 +31,8 @@\n \n public class TestNativeQueries extends SingleEMFTestCase {\n     private static final String TABLE_NAME = \"entity_1\";\n+    private static final String TABLE_NAME_2 = \"ENTITY2\";\n+    \n     private static final String CONST_NAME = \"testSimple\";\n     private static final int CONST_INT = 42;\n     \n@@ -148,6 +150,11 @@ public void testHintsAreProcessed() {\n         assertEquals(\"abc\", q.getHints().get(hintKey));\n         \n     }\n+    \n+    public void testNullResult(){\n+        String sql = \"SELECT max(pk) FROM \" + TABLE_NAME_2+ \"\";\n+        assertNull(em.createNativeQuery(sql, Long.class).getSingleResult());\n+    }\n \n     public void assertSize(int num, List l) {\n         assertNotNull(l);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/d64a3e5fdbc286694ad644ab0dfc460307cd1159",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/9c1ac5ffc932ec156a1040740e4d65717f60ed7b",
        "message": "OPENJPA-2071 Guarded NPE against isInterface call from ResultPacker constructor with null parameter\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1199919 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_34",
        "file": [
            {
                "sha": "f33d3e1e1dc229e87799951148a81dd03fdca790",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java",
                "status": "modified",
                "additions": 8,
                "deletions": 6,
                "changes": 14,
                "blob_url": "https://github.com/apache/openjpa/blob/d64a3e5fdbc286694ad644ab0dfc460307cd1159/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java",
                "raw_url": "https://github.com/apache/openjpa/raw/d64a3e5fdbc286694ad644ab0dfc460307cd1159/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java?ref=d64a3e5fdbc286694ad644ab0dfc460307cd1159",
                "patch": "@@ -173,12 +173,14 @@ private ResultPacker(Class<?> candidate, Class<?>[] types, String[] aliases, Cla\n     }\n     \n     boolean isInterface(Class<?> intf, Class<?> actual) {\n-    \tClass<?>[] intfs = actual.getInterfaces();\n-    \tfor (Class<?> c : intfs) {\n-    \t\tif (c == intf)\n-    \t\t\treturn true;\n-    \t}\n-    \treturn false;\n+        if (actual != null) {\n+            Class<?>[] intfs = actual.getInterfaces();\n+            for (Class<?> c : intfs) {\n+                if (c == intf)\n+                    return true;\n+            }\n+        }\n+        return false;\n     }\n \n     /**"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/dcaa2177c6f89620b373823803adb7c819436e07",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/ea5db0fbb3ba898f5afbb086a748e25b2ad57531",
        "message": "OPENJPA-1890: fix NPE when an embeddable is set to a managed entity more than once\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1036244 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_35",
        "file": [
            {
                "sha": "33c372cd58205961b1d860b82669c28c03de36f2",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java",
                "status": "modified",
                "additions": 5,
                "deletions": 2,
                "changes": 7,
                "blob_url": "https://github.com/apache/openjpa/blob/dcaa2177c6f89620b373823803adb7c819436e07/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java",
                "raw_url": "https://github.com/apache/openjpa/raw/dcaa2177c6f89620b373823803adb7c819436e07/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=dcaa2177c6f89620b373823803adb7c819436e07",
                "patch": "@@ -311,8 +311,11 @@ private void delete(boolean immediate, OpCallbacks call, boolean deref) {\n             // works on external value\n             if ((immediate || fmd.isEmbeddedPC())\n                 && fmd.getCascadeDelete() == ValueMetaData.CASCADE_IMMEDIATE) {\n-                if (fmd.isEmbeddedPC() && deref)\n-                    dereferenceEmbedDependent(_broker.getStateManagerImpl(objval, false));\n+                if (fmd.isEmbeddedPC() && deref) {\n+                    StateManagerImpl sm = _broker.getStateManagerImpl(objval, false);\n+                    if (sm != null) \n+                        dereferenceEmbedDependent(sm);\n+                }\n                 delete(fmd, objval, call);\n             }\n             else if (fmd.getCascadeDelete() == ValueMetaData.CASCADE_AUTO)"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/004cbd9644c8b2806bd36256e01481b81300157f",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/5e8b5afc7252dc4c5a086560000046022a60c47c",
        "message": "OPENJPA-1700 FindBugs - extraneous checks for null as a NPE would have already occurred\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@956693 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_36",
        "file": [
            {
                "sha": "b5617d99e93c8a9f0e0832a2e3d9a266472e3608",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/004cbd9644c8b2806bd36256e01481b81300157f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java",
                "raw_url": "https://github.com/apache/openjpa/raw/004cbd9644c8b2806bd36256e01481b81300157f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=004cbd9644c8b2806bd36256e01481b81300157f",
                "patch": "@@ -1349,8 +1349,7 @@ private void mergeJoinColumn(MetaDataContext context, String prefix,\n         boolean adapt, boolean fill) {\n         // default to the primary key column name if this is a pk join\n         DBIdentifier name = given.getIdentifier();\n-        if (DBIdentifier.isNull(name) && given != null\n-            && given.getFlag(Column.FLAG_PK_JOIN) && cls != null) {\n+        if (DBIdentifier.isNull(name) && given.getFlag(Column.FLAG_PK_JOIN) && cls != null) {\n             Column[] pks = cls.getPrimaryKeyColumns();\n             if (pks.length == 1)\n                 name = pks[0].getIdentifier();"
            },
            {
                "sha": "21e6ced58e4d150ba4c247a8aef631248d5c0db3",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/004cbd9644c8b2806bd36256e01481b81300157f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java",
                "raw_url": "https://github.com/apache/openjpa/raw/004cbd9644c8b2806bd36256e01481b81300157f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=004cbd9644c8b2806bd36256e01481b81300157f",
                "patch": "@@ -1019,7 +1019,7 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n                 getMetaDataFactory().newClassArgParser();\n             classParser.setClassLoader(loader);\n             Class<?>[] parsed;\n-            for (int i = 0; args != null && i < args.length; i++) {\n+            for (int i = 0; i < args.length; i++) {\n                 parsed = classParser.parseTypes(args[i]);\n                 classes.addAll(Arrays.asList(parsed));\n             }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/2eeca2a8ac545585a51404c94e59c63559395f05",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/6485137930cbfa27de554d5a1e6d75c8eff5529e",
        "message": "OPENJPA-1315 Incorrect hashcode()/equals() implementations in QueryImpl causes NPE in Eclipse debugger.  Patch contributed by Tim McConnell.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818195 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_37",
        "file": [
            {
                "sha": "1b0728ebf4c0b248a629491add635383010e31fc",
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java",
                "status": "modified",
                "additions": 5,
                "deletions": 3,
                "changes": 8,
                "blob_url": "https://github.com/apache/openjpa/blob/2eeca2a8ac545585a51404c94e59c63559395f05/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/2eeca2a8ac545585a51404c94e59c63559395f05/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=2eeca2a8ac545585a51404c94e59c63559395f05",
                "patch": "@@ -392,14 +392,16 @@ public LockModeType getLockMode() {\n     }\n \n \tpublic int hashCode() {\n-\t\treturn _query.hashCode();\n+        return (_query == null) ? 0 : _query.hashCode();\n \t}\n \n \tpublic boolean equals(Object other) {\n \t\tif (other == this)\n \t\t\treturn true;\n-\t\tif (!(other instanceof QueryImpl))\n-\t\t\treturn false;\n+        if ((other == null) || (other.getClass() != this.getClass()))\n+            return false;\n+        if (_query == null)\n+            return false;\n \t\treturn _query.equals(((QueryImpl) other)._query);\n \t}\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/add24283b4e0bf63b3ee0df65490d1e361edc410",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/1c4a61758ace44c766491f32193ad5d4612a958f",
        "message": "OPENJPA-1249 Make insertBlobForStreamingLoad method usage consistent for Oracle DB to eliminate NPE in updateBlob path.  \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816287 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_38",
        "file": [
            {
                "sha": "59eacd06dd6cf9a8ea44551412b7b6992aa6bc80",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java",
                "status": "modified",
                "additions": 10,
                "deletions": 0,
                "changes": 10,
                "blob_url": "https://github.com/apache/openjpa/blob/add24283b4e0bf63b3ee0df65490d1e361edc410/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java",
                "raw_url": "https://github.com/apache/openjpa/raw/add24283b4e0bf63b3ee0df65490d1e361edc410/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=add24283b4e0bf63b3ee0df65490d1e361edc410",
                "patch": "@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import java.io.ByteArrayInputStream;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.security.AccessController;\n@@ -40,6 +41,7 @@\n import java.util.Set;\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.schema.Column;\n@@ -1191,4 +1193,12 @@ protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n         }\n         return recoverable;\n     }\n+    \n+    @Override\n+    public void insertBlobForStreamingLoad(Row row, Column col, \n+        JDBCStore store, Object ob, Select sel) throws SQLException {\n+        if (ob == null)\n+            col.setType(Types.OTHER);\n+        row.setNull(col);\n+    }    \n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/78dda5c2b720872d3898b47f6af18f01f25746f1",
        "message": "OPENJPA-819 Committing fix for NPE and corresponding test case contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@727813 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_39",
        "file": [
            {
                "sha": "d7a10545ccb73103ac280d068f4619e03c5fbbe7",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java",
                "status": "modified",
                "additions": 9,
                "deletions": 2,
                "changes": 11,
                "blob_url": "https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java",
                "raw_url": "https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8",
                "patch": "@@ -43,6 +43,7 @@\n import org.apache.openjpa.util.GeneratedClasses;\r\n import org.apache.openjpa.util.ImplHelper;\r\n import org.apache.openjpa.util.InternalException;\r\n+import org.apache.openjpa.util.MetaDataException;\r\n import org.apache.openjpa.util.UserException;\r\n import serp.bytecode.BCClass;\r\n \r\n@@ -133,10 +134,16 @@ public void write(BCClass bc) throws IOException {\n \r\n             // set this before enhancement as well as after since enhancement\r\n             // uses a different metadata repository, and the metadata config\r\n-            // matters in the enhancement contract. Don't do any warning here,\r\n+            // matters in the enhancement contract. In order to avoid a \r\n+            // NullPointerException, check for no metadata and throw an\r\n+            // exception if none exists. Otherwise, don't do any warning here,\r\n             // since we'll issue warnings when we do the final metadata\r\n             // reconfiguration at the end of this method.\r\n-            configureMetaData(enhancer.getMetaData(), conf, redefine, false);\r\n+            ClassMetaData meta = enhancer.getMetaData();\r\n+            if (meta == null) {\r\n+                throw new MetaDataException(_loc.get(\"no-meta\", cls)).setFatal(true);\r\n+            }\r\n+            configureMetaData(meta, conf, redefine, false);\r\n \r\n             unspecified = collectRelatedUnspecifiedTypes(enhancer.getMetaData(),\r\n                 classes, unspecified);\r"
            },
            {
                "sha": "bfcedb60512b0d27333fb64f9aa8e7c32bd6b5b7",
                "filename": "openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties",
                "raw_url": "https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8",
                "patch": "@@ -16,7 +16,9 @@\n # under the License.  \n \n copy-no-oid: Cannot copy identity for abstract type \"{0}\".\n-no-meta: No registered metadata for type \"{0}\".\n+no-meta: No registered metadata for type \"{0}\". This can happen if this \\\n+    class has not been annotated as a persistent entity or specified in the \\\n+    persistence unit (ex: in the orm.xml). \n bad-getter: Missing getter for property \"{1}\" in type \"{0}\". \n bad-setter: Missing setter for property \"{1}\" in type \"{0}\". \n bad-field: Missing field for property \"{1}\" in type \"{0}\"."
            },
            {
                "sha": "b21fd2428c5870250f9fa4c337bd391b6f199533",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Animal.java",
                "status": "added",
                "additions": 28,
                "deletions": 0,
                "changes": 28,
                "blob_url": "https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Animal.java",
                "raw_url": "https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Animal.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Animal.java?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+// This class specifically does NOT have @Entity specified for it since it is\n+// used by the TestMissingMetaData test case.\n+public class Animal {\n+    private String name;\n+    \n+    public Animal() {\n+    }\n+}"
            },
            {
                "sha": "7286f85f09a392c8926130d19e52870bf616aa6b",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestMissingMetaData.java",
                "status": "added",
                "additions": 64,
                "deletions": 0,
                "changes": 64,
                "blob_url": "https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestMissingMetaData.java",
                "raw_url": "https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestMissingMetaData.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestMissingMetaData.java?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8",
                "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+\n+// This test case extends TestCase directly instead of SingleEMTestCase with the\n+// corresponding setup() method because that scheme goes down a different code\n+// path and doesn't test the intended code change.\n+public class TestMissingMetaData extends TestCase {\n+    private OpenJPAEntityManagerFactory emf;\n+\n+    public void setUp() {\n+        // This test case uses a different persistence xml file because\n+        // modifying the current persistence.xml file with a bad class would\n+        // cause the TestEnhancementWithMultiplePUs test case to fail.\n+        emf = OpenJPAPersistence.createEntityManagerFactory(\n+            \"test-missing-metadata\", \"persistence2.xml\");\n+    }\n+    \n+    public void testMissingMetaData() {\n+        String msg =\n+            \"No registered metadata for type \" +\n+            \"\\\"class org.apache.openjpa.persistence.simple.Animal\\\".\";\n+        try {\n+            emf.createEntityManager();\n+            fail(\"didn't receive expected ArgumentException - \" + msg);\n+        } catch (Exception e) {\n+            assertEquals(ArgumentException.class,e.getClass());\n+            assertTrue(e.getMessage().startsWith(msg));\n+        }\n+    }\n+    \n+    public void tearDown() {\n+        emf.close();\n+    }\n+    \n+    public static void main(String[] args) {\n+        TestRunner.run(TestMissingMetaData.class);\n+\n+    }\n+\n+}"
            },
            {
                "sha": "5b1994e6582039befe90490b7eab37ac02c9f373",
                "filename": "openjpa-persistence-jdbc/src/test/resources/META-INF/persistence2.xml",
                "status": "added",
                "additions": 28,
                "deletions": 0,
                "changes": 28,
                "blob_url": "https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence2.xml",
                "raw_url": "https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence2.xml",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence2.xml?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8",
                "patch": "@@ -0,0 +1,28 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"1.0\">\n+    \n+    <persistence-unit name=\"test-missing-metadata\">\n+    \t<class>org.apache.openjpa.persistence.simple.Animal</class>\n+    </persistence-unit>\n+    \n+</persistence>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/63c48992274fce84b2c08bf8bbe6df024736557c",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/ddc42e807837f340306dbbf2e9f04255f8437539",
        "message": "OPENJPA-602: Avoid NPE when table-per-class inheritance staregy with an abstract root. See test cases for further details.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666314 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_40",
        "file": [
            {
                "sha": "7a3bec02fece2146ec986ca18ab01c0eb8880fe9",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java",
                "status": "modified",
                "additions": 10,
                "deletions": 3,
                "changes": 13,
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -133,9 +133,16 @@ public void map(boolean adapt) {\n             elem.setJoinDirection(ValueMapping.JOIN_EXPECTED_INVERSE);\n             elem.setUseClassCriteria(criteria);\n \n-            field.setOrderColumn(finfo.getOrderColumn(field,\n-                mapped.getForeignKey().getTable(), adapt));\n-            field.setOrderColumnIO(finfo.getColumnIO());\n+            ForeignKey fk = mapped.getForeignKey();\n+            /** Foreign key may be null if declared type of the mapped field is \n+             * abstract and under table-per-class inheritance strategy will have\n+             * no mapped table.  \n+             */\n+            if (fk != null) {\n+            \tfield.setOrderColumn(finfo.getOrderColumn(field,\n+            \t\t\tfk.getTable(), adapt));\n+            \tfield.setOrderColumnIO(finfo.getColumnIO());\n+            }\n             return;\n         }\n "
            },
            {
                "sha": "a5f5622fabfef091f6dd90dea3f16c775a622324",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java",
                "status": "added",
                "additions": 55,
                "deletions": 0,
                "changes": 55,
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.MappedSuperclass;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * An abstract base entity class with auto-generated identty and version field.\r\n+ * Used for testing special case of table-per-class inheritance strategy when \r\n+ * the root of persistent inheritance hierarchy is abstract and itself \r\n+ * derives from an abstract MappedSuperClass (i.e. this class).\r\n+ * \r\n+ * For a more detailed description of the domain model to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ * \r\n+ */\r\n+@MappedSuperclass\r\n+public abstract class BaseEntity {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\t@Version\r\n+\tprivate long version;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic long getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+}\r"
            },
            {
                "sha": "1572ffb0eedd6154eaa07d00662b6d221b209f71",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java",
                "status": "added",
                "additions": 45,
                "deletions": 0,
                "changes": 45,
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * A persistent class derived from an abstract persistent class and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain model to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class EnglishParagraph extends Translatable {\r\n+\tprivate String content;\r\n+\r\n+\tpublic String getContent() {\r\n+\t\treturn content;\r\n+\t}\r\n+\r\n+\tpublic void setContent(String content) {\r\n+\t\tthis.content = content;\r\n+\t}\r\n+}\r"
            },
            {
                "sha": "16aba3f065fea0f0db965b6928854c89edaf366a",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java",
                "status": "added",
                "additions": 45,
                "deletions": 0,
                "changes": 45,
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * A persistent class derived from an abstract persistent class and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain model to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class FrenchParagraph extends Translatable {\r\n+\tprivate String content;\r\n+\r\n+\tpublic String getContent() {\r\n+\t\treturn content;\r\n+\t}\r\n+\r\n+\tpublic void setContent(String content) {\r\n+\t\tthis.content = content;\r\n+\t}\r\n+}\r"
            },
            {
                "sha": "8852f56e074fd0fa92985f3940fe38edd04d52af",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java",
                "status": "added",
                "additions": 45,
                "deletions": 0,
                "changes": 45,
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * A persistent class derived from an abstract persistent class and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain model to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class GermanParagraph extends Translatable {\r\n+\tprivate String content;\r\n+\r\n+\tpublic String getContent() {\r\n+\t\treturn content;\r\n+\t}\r\n+\r\n+\tpublic void setContent(String content) {\r\n+\t\tthis.content = content;\r\n+\t}\r\n+}\r"
            },
            {
                "sha": "f9e25c4e8df19468eb5f1642e8d6fa20d764a02f",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java",
                "status": "added",
                "additions": 155,
                "deletions": 0,
                "changes": 155,
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -0,0 +1,155 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests a domain model with following characteristics:\r\n+ * a) A typical bidirectional ManyToOne/OneToMany relation \r\n+ *    EntityA references a single instance of EntityB\r\n+ *    EntityB references a collection of EntityA\r\n+ * b) EntityB itself is abstract \r\n+ * c) Many concrete subclasses of EntityB exist\r\n+ * d) EntityB uses TABLE_PER_CLASS inheritance strategy, hence no mapping table \r\n+ *    exists for EntityB itself.\r\n+ * e) Relation field in EntityA is declared as abstract type EntityB (for which\r\n+ * f) all the domain classes i.e. EntityA, EntityB and all its subclasses is\r\n+ *    derived from an abstract MappedSuperClass which holds primary key and\r\n+ *    version fields.\r\n+ *    \r\n+ *  The test addresses a reported error [1] in mapping the above domain model.\r\n+ *  The test verifies basic persist, query and delete operations on the domain\r\n+ *  model.\r\n+ *  \r\n+ *  [1] <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-602\"> OPENJPA-602</A>}\r\n+ *        \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestTablePerClassInheritanceWithAbstractRoot extends\r\n+\t\tSingleEMFTestCase {\r\n+\tClass[] UNJOINED_SUBCLASSES = {\r\n+\t\t\tEnglishParagraph.class, \r\n+\t\t\tFrenchParagraph.class, \r\n+\t\t\tGermanParagraph.class};\r\n+\t\r\n+    public void setUp() {\r\n+        setUp(CLEAR_TABLES, \r\n+        \t\t\"openjpa.Log\", \"SQL=TRACE\", \r\n+        \t\tTranslation.class, BaseEntity.class,\r\n+        \t\tEnglishParagraph.class, FrenchParagraph.class, \r\n+        \t\tGermanParagraph.class, Translatable.class);\r\n+    }\r\n+    \r\n+\tpublic void testConsistency() {\r\n+\t\tOpenJPAEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\t/**\r\n+\t\t * Aggregate query operations can not be performed on unjoined \r\n+\t\t * subclasses. Hence all concrete subclasses of abstract base\r\n+\t\t * class is counted separately to count all Translatable instances.\r\n+\t\t */\r\n+\t\tint nTranslatableBefore = count(UNJOINED_SUBCLASSES);\r\n+\t\tint nTranslationBefore = count(Translation.class);\r\n+\t\t\r\n+\t\tEnglishParagraph english = new EnglishParagraph();\r\n+\t\tFrenchParagraph french   = new FrenchParagraph();\r\n+\t\tGermanParagraph german   = new GermanParagraph();\r\n+\t\t\r\n+\t\tTranslation translation1 = new Translation(); \r\n+\t\tTranslation translation2 = new Translation(); \r\n+\t\tTranslation translation3 = new Translation(); \r\n+\t\tTranslation translation4 = new Translation(); \r\n+\t\t\r\n+\t\tenglish.setContent(\"Hello\");\r\n+\t\tfrench.setContent(\"Bon jour\");\r\n+\t\tgerman.setContent(\"Guten Tag\");\r\n+\r\n+\t\t\r\n+\t\ttranslation1.setTranslatable(english);\r\n+\t\ttranslation2.setTranslatable(english);\r\n+\t\ttranslation3.setTranslatable(french);\r\n+\t\ttranslation4.setTranslatable(german);\r\n+\t\t\r\n+\t\tenglish.addTranslation(translation1);\r\n+\t\tenglish.addTranslation(translation2);\r\n+\t\tfrench.addTranslation(translation3);\r\n+\t\tgerman.addTranslation(translation4);\r\n+\t\t\r\n+\t\tem.persist(translation1);\r\n+\t\tem.persist(translation2);\r\n+\t\tem.persist(translation3);\r\n+\t\tem.persist(translation4);\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tem.clear();\r\n+\r\n+\t\tint nTranslatableAfter = count(UNJOINED_SUBCLASSES);\r\n+\t\tint nTranslationAfter  = count(Translation.class);\r\n+\t\t\r\n+\t\tassertEquals(nTranslatableBefore+3, nTranslatableAfter);\r\n+\t\tassertEquals(nTranslationBefore+4, nTranslationAfter);\r\n+\t\t\r\n+\t\t/**\r\n+\t\t * Verify that if A refers to B then A must be a member of the set \r\n+\t\t * referred by B\r\n+\t\t */\r\n+\t\tem.getTransaction().begin();\r\n+\t\tList<Translation> result = em.createQuery(\"SELECT p FROM Translation p\")\r\n+\t\t\t.getResultList();\r\n+\t\tassertTrue(!result.isEmpty());\r\n+\t\tfor (Translation translation : result) {\r\n+\t\t\tassertTrue(translation.getTranslatable()\r\n+\t\t\t\t\t.getTranslations().contains(translation));\r\n+\t\t}\r\n+\t\tem.getTransaction().rollback();\r\n+\t}\r\n+\t\r\n+\t\r\n+\tvoid linkConsistently(Translation translation, Translatable translatable) {\r\n+\t\ttranslatable.addTranslation(translation);\r\n+\t\ttranslation.setTranslatable(translatable);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Count the number of instances in the given class by aggregate JPQL query.\r\n+\t */\r\n+\tpublic int count(Class c) {\r\n+\t\tOpenJPAEntityManager em = emf.createEntityManager();\r\n+\t\treturn ((Number) em.createQuery(\"SELECT COUNT(p) FROM \" + \r\n+\t\t\t\tc.getSimpleName() + \" p\").getSingleResult()).intValue();\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Count total number of instances of all the given classes by separate JPQL\r\n+\t * aggregate query. Useful when a base class has unjoined subclasses.\r\n+\t */\r\n+\tpublic int count(Class... classes) {\r\n+\t\tint total = 0;\r\n+\t\tfor (Class c:classes) {\r\n+\t\t\ttotal += count(c);\r\n+\t\t}\r\n+\t\treturn total;\r\n+\t}\r\n+\t\r\n+}\r"
            },
            {
                "sha": "f995bfaedbc380301d58b946c703cf47d75c67ae",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java",
                "status": "added",
                "additions": 57,
                "deletions": 0,
                "changes": 57,
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -0,0 +1,57 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+/**\r\n+ * An abstract persistent class used as root of inheritance hierarchy and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain model to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)\r\n+public abstract class Translatable extends BaseEntity {\r\n+\t@OneToMany(mappedBy=\"translatable\", cascade=CascadeType.PERSIST)\r\n+\tprivate Set<Translation> translations;\r\n+\t\r\n+\tpublic void addTranslation(Translation t) {\r\n+\t\tif (translations == null)\r\n+\t\t\ttranslations = new HashSet<Translation>();\r\n+\t\ttranslations.add(t);\r\n+\t}\r\n+\t\r\n+\tpublic Set<Translation> getTranslations() {\r\n+\t\treturn Collections.unmodifiableSet(translations);\r\n+\t}\r\n+}\r"
            },
            {
                "sha": "1b93a0390c2e8a357d4dde4b371463e54c6e6659",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java",
                "status": "added",
                "additions": 51,
                "deletions": 0,
                "changes": 51,
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"TRANSLATIONS\")\r\n+/**\r\n+ * An persistent class that refers to a polymorphic uni-cardinality relation. \r\n+ * The polymorphic relation itself derives from an abstract class that uses\r\n+ * table-per-class inheritance strategy.\r\n+ *   \r\n+ * For a more detailed description of the domain model to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class Translation extends BaseEntity {\r\n+\t@ManyToOne(cascade=CascadeType.PERSIST)\r\n+\tprivate Translatable translatable;\r\n+\r\n+\tpublic Translatable getTranslatable() {\r\n+\t\treturn translatable;\r\n+\t}\r\n+\r\n+\tpublic void setTranslatable(Translatable translatable) {\r\n+\t\tthis.translatable = translatable;\r\n+\t}\r\n+}\r"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/177111b5598e4301c2d4e2de7c86b7e0a8acef88",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/e097063b0a2079bd03fc680dacf30782c35305e6",
        "message": "Potential NPE where custom can be null, Boolean.TRUE or Boolean.FALSE. Follow the pattern in update() and deleet()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@631663 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_41",
        "file": [
            {
                "sha": "bf527d0b217df2bd218e1f500bf86639a3c9852d",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/177111b5598e4301c2d4e2de7c86b7e0a8acef88/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java",
                "raw_url": "https://github.com/apache/openjpa/raw/177111b5598e4301c2d4e2de7c86b7e0a8acef88/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java?ref=177111b5598e4301c2d4e2de7c86b7e0a8acef88",
                "patch": "@@ -187,7 +187,7 @@ protected void insert(OpenJPAStateManager sm, ClassMapping mapping,\n         Boolean custom = mapping.isCustomInsert(sm, store);\n         if (!Boolean.FALSE.equals(custom))\n             mapping.customInsert(sm, store);\n-        if (custom.equals(Boolean.TRUE))\n+        if (Boolean.TRUE.equals(custom))\n             return;\n \n         ClassMapping sup = mapping.getJoinablePCSuperclassMapping();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/1921d6cc598bc697587a6fd8365b19caca098249",
        "message": "Return gracefully when no class found for enhancement. Without this check raises NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@549405 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_42",
        "file": [
            {
                "sha": "040656ac0d4306bc1ab093a351544bca78a2e5a3",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "blob_url": "https://github.com/apache/openjpa/blob/a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java",
                "raw_url": "https://github.com/apache/openjpa/raw/a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee",
                "patch": "@@ -3639,6 +3639,10 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n         if (args.length == 0) {\n             log.info(_loc.get(\"running-all-classes\"));\n             classes = repos.getPersistentTypeNames(true, loader);\n+            if (classes == null) {\n+            \tlog.warn(_loc.get(\"no-class-to-enhance\"));\n+            \treturn false;\n+            }\n         } else {\n             ClassArgParser cap = conf.getMetaDataRepositoryInstance().\n                 getMetaDataFactory().newClassArgParser();\n@@ -3647,7 +3651,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n             for (int i = 0; i < args.length; i++)\n                 classes.addAll(Arrays.asList(cap.parseTypes(args[i])));\n         }\n-\n+        \n         Project project = new Project();\n         BCClass bc;\n         PCEnhancer enhancer;"
            },
            {
                "sha": "e2d44ded9005a913cad13c442a28782644f9c5be",
                "filename": "openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/openjpa/blob/a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties",
                "raw_url": "https://github.com/apache/openjpa/raw/a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee",
                "patch": "@@ -30,6 +30,7 @@ running-all-classes: No targets were given.  Running on all classes in your \\\n     persistent classes list, or all metadata files in classpath directories if \\\n \tyou have not listed your persistent classes.  Use -help to display tool \\\n     usage information.\n+no-class-to-enhance: Found no class to enhance.\n detach-custom-ser: Type \"{0}\" is set to detach on serialize, but implements \\\n \ta custom readObject and/or writeObject method.  You cannot use custom \\\n \tserialization with detachment. "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/8785be46e71c65c4d87ab59203c17771d9faec26",
        "message": "Possible fix for OPENJPA-13 JIRA issue.  Also fix possible NPE on delayed close\non transaction completion in managed environment.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@453016 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_43",
        "file": [
            {
                "sha": "b1090879afcd33a6d3ad337a4281c78b261da5e1",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/openjpa/blob/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java",
                "raw_url": "https://github.com/apache/openjpa/raw/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n@@ -341,7 +342,7 @@ public void setAutoAssignedValue(OpenJPAStateManager sm, JDBCStore store,\n         Column col, Object autoInc) {\n         Object data;\n         if (_cols.length == 1)\n-            data = autoInc;\n+            data = JavaTypes.convert(autoInc, col.getJavaType());\n         else {\n             // multiple columns; have to get current value, replace this col's\n             // value with the given one, and reset\n@@ -351,7 +352,8 @@ public void setAutoAssignedValue(OpenJPAStateManager sm, JDBCStore store,\n                 data = new Object[_cols.length];\n             for (int i = 0; i < _cols.length; i++) {\n                 if (_cols[i] == col) {\n-                    ((Object[]) data)[i] = autoInc;\n+                    ((Object[]) data)[i] = JavaTypes.convert(autoInc, \n+                        col.getJavaType());\n                     break;\n                 }\n             }"
            },
            {
                "sha": "f31f072a17089012fc7aeed7f22741b45aa178df",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "status": "modified",
                "additions": 4,
                "deletions": 5,
                "changes": 9,
                "blob_url": "https://github.com/apache/openjpa/blob/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc",
                "patch": "@@ -1794,7 +1794,9 @@ public void afterCompletion(int status) {\n             _flags &= ~FLAG_FLUSHED;\n             _flags &= ~FLAG_TRANS_ENDING;\n \n-            if (_transEventManager.hasEndListeners()) {\n+            // event manager nulled if freed broker\n+            if (_transEventManager != null \n+                && _transEventManager.hasEndListeners()) {\n                 fireTransactionEvent(new TransactionEvent(this,\n                     status == Status.STATUS_COMMITTED\n                         ? TransactionEvent.AFTER_COMMIT_COMPLETE\n@@ -4021,10 +4023,7 @@ protected void free() {\n             _extents = null;\n         }\n \n-        try {\n-            releaseConnection();\n-        } catch (RuntimeException re) {\n-        }\n+        try { releaseConnection(); } catch (RuntimeException re) {}\n \n         _lm.close();\n         _store.close();"
            },
            {
                "sha": "4748d0f06aefbfed789b8b255069f933828fbeeb",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java",
                "status": "modified",
                "additions": 5,
                "deletions": 5,
                "changes": 10,
                "blob_url": "https://github.com/apache/openjpa/blob/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java",
                "raw_url": "https://github.com/apache/openjpa/raw/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java?ref=5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc",
                "patch": "@@ -287,7 +287,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case DOUBLE:\n                 if (val instanceof String)\n-                    new Double(val.toString());\n+                    return new Double(val.toString());\n                 return val;\n             case FLOAT_OBJ:\n                 if (val instanceof Float)\n@@ -297,7 +297,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case FLOAT:\n                 if (val instanceof String)\n-                    new Float(val.toString());\n+                    return new Float(val.toString());\n                 return val;\n             case INT_OBJ:\n                 if (val instanceof Integer)\n@@ -307,7 +307,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case INT:\n                 if (val instanceof String)\n-                    new Integer(val.toString());\n+                    return new Integer(val.toString());\n                 return val;\n             case LONG_OBJ:\n                 if (val instanceof Long)\n@@ -317,7 +317,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case LONG:\n                 if (val instanceof String)\n-                    new Long(val.toString());\n+                    return new Long(val.toString());\n                 return val;\n             case NUMBER:\n                 if (val instanceof Number)\n@@ -333,7 +333,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case SHORT:\n                 if (val instanceof String)\n-                    new Short(val.toString());\n+                    return new Short(val.toString());\n                 return val;\n             case STRING:\n                 return val.toString();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/20e0762e43734170fd7d97297693382329877b33",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/47edcb8edce8dc6b0c384af53e6a679aa68f1abd",
        "message": "Fixed getMethodDescriptors to not try to create a MethodDescriptor for a non-existant method (which would cause an NPE).\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@443524 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_44",
        "file": [
            {
                "sha": "551e5e5e1bb1ad385e6d57b26d2c4dacd8b1206c",
                "filename": "openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java",
                "status": "modified",
                "additions": 6,
                "deletions": 2,
                "changes": 8,
                "blob_url": "https://github.com/apache/openjpa/blob/20e0762e43734170fd7d97297693382329877b33/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/20e0762e43734170fd7d97297693382329877b33/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=20e0762e43734170fd7d97297693382329877b33",
                "patch": "@@ -374,8 +374,12 @@ public Image getIcon(int kind) {\n         PropertyDescriptor[] pds = getPropertyDescriptors();\n         _mds = new MethodDescriptor[pds.length * 2];\n         for (int i = 0; i < pds.length; i++) {\n-            _mds[i * 2] = new MethodDescriptor(pds[i].getWriteMethod());\n-            _mds[(i * 2) + 1] = new MethodDescriptor(pds[i].getReadMethod());\n+            Method write = pds[i].getWriteMethod();\n+            if (write != null)\n+                _mds[i * 2] = new MethodDescriptor(write);\n+            Method read = pds[i].getReadMethod();\n+            if (read != null)\n+                _mds[(i * 2) + 1] = new MethodDescriptor(read);\n         }\n         return _mds;\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/ec7f6f5b01f502069454b842c98cb7e9ef868789",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/105d46c6eacbaad594e991b012f046da5d7d38fd",
        "message": "Modified same named entities to use unique table names.  Also corrected an NPE in test cleanup which occurred when embeddable metadata was present in the metadata repository.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@828786 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_45",
        "file": [
            {
                "sha": "a15c8eaca9659ab6e048d9e2744ab2da3936e960",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java",
                "status": "modified",
                "additions": 6,
                "deletions": 4,
                "changes": 10,
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -81,10 +81,12 @@ public void tearDown() throws Exception {\n             for (ClassMapping mapping : ((ClassMapping[]) emf\n                 .getConfiguration().getMetaDataRepositoryInstance()\n                 .getMetaDatas())) {\n-                Query q =\n-                    em.createNativeQuery(\"DROP TABLE \"\n-                        + mapping.getTable().getName());\n-                q.executeUpdate();\n+                if (mapping.getTable() != null) {\n+                    Query q =\n+                        em.createNativeQuery(\"DROP TABLE \"\n+                            + mapping.getTable().getName());\n+                    q.executeUpdate();\n+                }\n             }\n             em.getTransaction().commit();\n             em.close();"
            },
            {
                "sha": "1a37a9002a132787d4d0e14a3e4ef50b3d6dc2b2",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -316,7 +316,7 @@ public void verifyRefresh(boolean useDataCache, LockModeType lock,\n         // Modify the record in the database in a separate transaction using\n         // native SQL so that the in-memory instance is not altered \n         em.getTransaction().begin();\n-        String sql = \"UPDATE PObject SET NAME='\" + MARKER_DATABASE\n+        String sql = \"UPDATE L2_PObject SET NAME='\" + MARKER_DATABASE\n         + \"' WHERE id=\" + oid;\n         em.createNativeQuery(sql).executeUpdate();\n         em.getTransaction().commit();\n@@ -483,7 +483,7 @@ public void verifyDeleteDetectionOnRefresh(boolean useDataCache,\n         // delete the record in the database in a separate transaction using\n         // native SQL so that the in-memory instance is not altered \n         em.getTransaction().begin();\n-        String sql = \"DELETE FROM PObject WHERE id=\"+oid;\n+        String sql = \"DELETE FROM L2_PObject WHERE id=\"+oid;\n         em.createNativeQuery(sql).executeUpdate();\n         em.getTransaction().commit();\n         "
            },
            {
                "sha": "23e6142e06c41102f0868542d1491e97418390cf",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -23,8 +23,10 @@\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import javax.persistence.Entity;\n+import javax.persistence.Table;\n \n @Entity\n+@Table(name=\"L2_AttachA\")\n public class AttachA\n     implements Serializable {\n "
            },
            {
                "sha": "0094463bd6820f9e1f04ac5039b1b4dd56bfb961",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -21,8 +21,10 @@\n import java.io.Serializable;\n import java.util.Date;\n import javax.persistence.Entity;\n+import javax.persistence.Table;\n \n @Entity\n+@Table(name=\"L2_AttachE\")\n public class AttachE\n     implements Serializable {\n "
            },
            {
                "sha": "1d579e18331cc7c4623e65a11618b4a0bf9314f6",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -21,6 +21,7 @@\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n+import javax.persistence.Table;\n import javax.persistence.Version;\n \n /**\n@@ -31,6 +32,7 @@\n  *\n  */\n @Entity\n+@Table(name=\"L2_PObject\")\n public class PObject {\n \t@Id\n \t@GeneratedValue"
            },
            {
                "sha": "166f352281a73694d7293c8a31bde3a43c46c0fc",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -21,6 +21,7 @@\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n+import javax.persistence.Table;\n import javax.persistence.Version;\n \n /**\n@@ -31,6 +32,7 @@\n  *\n  */\n @Entity\n+@Table(name=\"EX_POBJECT\")\n public class PObject {\n \t@Id\n \tprivate long id;"
            },
            {
                "sha": "04444a652461dabe8ba0e131bfcd7576f135061e",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java",
                "status": "modified",
                "additions": 3,
                "deletions": 2,
                "changes": 5,
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -25,11 +25,12 @@\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n import java.lang.annotation.Annotation;\n \n @Entity\n-\n-\n+@Table(name=\"JDBC_AttachA\")\n public class AttachA\n     implements Serializable, PreDetachCallback,\n     PostDetachCallback, PreAttachCallback, PostAttachCallback {"
            },
            {
                "sha": "f68aabcdb04f41d8a2ea4ba610a1c356ea43547f",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -25,9 +25,12 @@\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n import java.lang.annotation.Annotation;\n \n @Entity\n+@Table(name=\"JDBC_AttachE\")\n public class AttachE\n     implements Serializable {\n "
            },
            {
                "sha": "c728b036d62d5c9bfbc7a64c9e0070e5f2626699",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObject.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObject.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObject.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObject.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -22,6 +22,7 @@\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.Table;\n \n /**\n  * A persistent entity to verify IDENTITY strategy for primary key value\n@@ -31,6 +32,7 @@\n  *\n  */\n @Entity\n+@Table(name=\"ORCL_POBJECT\")\n public class PObject {\n \t@Id\n \t@GeneratedValue(strategy=GenerationType.IDENTITY)"
            },
            {
                "sha": "7a213d4f9044dee37d55ed652869172d4263e0ac",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -28,6 +28,7 @@\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.Table;\n import javax.persistence.Version;\n \n import org.apache.openjpa.persistence.FetchAttribute;\n@@ -42,6 +43,7 @@\n @FetchAttribute(name = \"attachEArray\", recursionDepth = 0)\n     })\n     })\n+@Table(name=\"K_AttachA\")\n public class AttachA implements Serializable {\n \n     @Id"
            },
            {
                "sha": "279163ab575cc8b7a8363552af66ef4a5af7f5b2",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -31,6 +31,7 @@\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n \n@@ -46,6 +47,7 @@\n @FetchAttribute(name = \"f\")\n     })\n     })\n+@Table(name=\"K_AttachE\")\n public class AttachE implements Serializable {\n \n     @Id"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/6ea5a81c9380521adb3c0c7839a06194c9e148f3",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/aa5259d5210a6ba6e9adc11d37db2cc733725715",
        "message": "OPENJPA-449 : initializing _pcClassLoaders in constructor instead of conditionally inside loadPersistentTypes(). Saves NPE on new Broker construction in multi-threaded scenarios' openjpa-kernel\\src\\main\\java\\org\\apache\\openjpa\\kernel\\AbstractBrokerFactory.java\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@596871 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_46",
        "file": [
            {
                "sha": "6d15b736a08d1ac2cd771971c32856bdd6113901",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/6ea5a81c9380521adb3c0c7839a06194c9e148f3/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java",
                "raw_url": "https://github.com/apache/openjpa/raw/6ea5a81c9380521adb3c0c7839a06194c9e148f3/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=6ea5a81c9380521adb3c0c7839a06194c9e148f3",
                "patch": "@@ -134,6 +134,7 @@ protected static AbstractBrokerFactory getPooledFactory(Map map) {\n      */\n     protected AbstractBrokerFactory(OpenJPAConfiguration config) {\n         _conf = config;\n+        _pcClassLoaders = new ReferenceHashSet(ReferenceHashSet.WEAK);\n     }\n \n     /**\n@@ -255,7 +256,6 @@ private void loadPersistentTypes(ClassLoader envLoader) {\n                     if (needsSub(cls))\n                         toRedefine.add(cls);\n                 }\n-                _pcClassLoaders = new ReferenceHashSet(ReferenceHashSet.WEAK);\n                 _pcClassLoaders.add(loader);\n             }\n         } else {"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/25e80a994e6e50afb0e146066cf6e0185e4b8af7",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/3b2f6a720dcf71073f25fde87f02c522c9eb8f80",
        "message": "OPENJPA-42 Check for the existence of superclass metadata in getSuperclassField so we throw a better exception than an NPE if it doesn't exist.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@442030 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_47",
        "file": [
            {
                "sha": "703b5c2e7178c99e94d7cdef968f84ddb65e2082",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "status": "modified",
                "additions": 3,
                "deletions": 2,
                "changes": 5,
                "blob_url": "https://github.com/apache/openjpa/blob/25e80a994e6e50afb0e146066cf6e0185e4b8af7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "raw_url": "https://github.com/apache/openjpa/raw/25e80a994e6e50afb0e146066cf6e0185e4b8af7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=25e80a994e6e50afb0e146066cf6e0185e4b8af7",
                "patch": "@@ -810,8 +810,9 @@ private void replaceDefinedSuperclassFields(FieldMetaData[] fields,\n      * Return the superclass copy of the given field.\n      */\n     protected FieldMetaData getSuperclassField(FieldMetaData supField) {\n-        FieldMetaData fmd = getPCSuperclassMetaData().\n-            getField(supField.getName());\n+        ClassMetaData sm = getPCSuperclassMetaData();\n+        FieldMetaData fmd = sm == null ? null : sm.getField(supField.getName());\n+\n         if (fmd == null || fmd.getManagement() != fmd.MANAGE_PERSISTENT)\n             throw new MetaDataException(_loc.get(\"unmanaged-sup-field\",\n                 supField, this));"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/f6413764d5b41a83003a163b74023dce8398fb05",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/07a98e871b2676bc3c868e4ca0e652a6af9027f2",
        "message": "OPENJPA-1168:\nImproved checking for type1 UUID generator is initialized. Reducing\ntiming window which could result in a NPE.\nSubmitted by: Rick Curtis\n\tmodified:   openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java\n\tmodified:   openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@792592 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_48",
        "file": [
            {
                "sha": "a9028a6383827b4079169907a550f7ac10ac19d1",
                "filename": "openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java",
                "status": "modified",
                "additions": 8,
                "deletions": 5,
                "changes": 13,
                "blob_url": "https://github.com/apache/openjpa/blob/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java",
                "raw_url": "https://github.com/apache/openjpa/raw/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java?ref=f6413764d5b41a83003a163b74023dce8398fb05",
                "patch": "@@ -94,15 +94,16 @@\n     private static long _lastMillis = 0L;\n     private static final int MAX_14BIT = 0x3FFF;\n     private static short _seq = 0;\n-        \n+\n+    private static boolean type1Initialized = false;\n     /*\n      * Initializer for type 1 UUIDs.  Creates random generator and genenerates\n      * the node portion of the UUID using the IP address.\n      */\n-    private static synchronized void initializeForType1()\n-    {\n-        if (RANDOM != null)\n+    private static synchronized void initializeForType1() {\n+        if (type1Initialized == true) {\n             return;\n+        }\n         // note that secure random is very slow the first time\n         // it is used; consider switching to a standard random\n         RANDOM = new SecureRandom();\n@@ -118,6 +119,7 @@ private static synchronized void initializeForType1()\n         IP = new byte[6];\n         RANDOM.nextBytes(IP);\n         System.arraycopy(ip, 0, IP, 2, ip.length);        \n+        type1Initialized = true;\n     }\n \n     /**\n@@ -134,8 +136,9 @@ private static synchronized void initializeForType1()\n      * Creates a type 1 UUID \n      */\n     public static byte[] createType1() {\n-        if (RANDOM == null)\n+        if (type1Initialized == false) {\n             initializeForType1();\n+        }\n         // set ip addr\n         byte[] uuid = new byte[16];\n         System.arraycopy(IP, 0, uuid, 10, IP.length);"
            },
            {
                "sha": "8b86fe23429fdbedbd7f0c81789edb39c47916c7",
                "filename": "openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java",
                "status": "modified",
                "additions": 35,
                "deletions": 0,
                "changes": 35,
                "blob_url": "https://github.com/apache/openjpa/blob/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java",
                "raw_url": "https://github.com/apache/openjpa/raw/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java?ref=f6413764d5b41a83003a163b74023dce8398fb05",
                "patch": "@@ -18,6 +18,10 @@\n  */\n package org.apache.openjpa.lib.util;\n \n+import java.lang.reflect.Field;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.security.PrivilegedExceptionAction;\n import java.util.HashSet;\n import java.util.Set;\n \n@@ -76,4 +80,35 @@ public void testGetTime() {\n             time = newTime;\n         }\n     }\n+    \n+    public void testInitType1MultiThreaded() throws Exception {\n+        // This test method depends IP and RANDOM in UUIDGenerator to be null\n+        // and type1Initialized to be false. Using reflection to ensure that\n+        // those fields are null. Wrap this  method in doPrivledgedAction so it\n+        // doesn't fail when running with security.\n+        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n+            public Object run() throws Exception {\n+                Class uuid = UUIDGenerator.class;\n+                Field[] fields = uuid.getDeclaredFields();\n+                for (Field f : fields) {\n+                    if (f.getName().equals(\"type1Initialized\")) {\n+                        f.setAccessible(true);\n+                        f.set(null, false);\n+                    } else if (f.getName().equals(\"IP\") || f.getName().equals(\"RANDOM\")) {\n+                        f.setAccessible(true);\n+                        f.set(null, null);\n+                    }\n+                }\n+                Thread t = new Thread() {\n+                    public void run() {\n+                        UUIDGenerator.createType1();\n+                    }\n+                };\n+\n+                t.start();\n+                UUIDGenerator.createType1();\n+                return null;\n+            }\n+        });\n+    }// end testInitType1MultiThreaded\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/openjpa/commit/b4077bd6a64f73fd28c210f265d5ef8b089199dd",
        "repo": "openjpa",
        "parent": "https://github.com/apache/openjpa/commit/22226fc0f4b49f5cdb16792e0901d94ae7d838b7",
        "message": "OPENJPA-74: Fixed multiple problems with named queries: 1. They were not being parsed as part of the orm.xml file, since we were incorrectly looking for an attribute named 'query' (when it really should have been a sub-element named 'query'). 2. Looking for a named query did not force resolution of all metadatas. 3. An NPE was being thrown when a JPQL query was created with a null filter\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@470996 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "openjpa_49",
        "file": [
            {
                "sha": "8b2097e5e18fd60dd21624287ac7cc7b191bf2ca",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "patch": "@@ -1628,6 +1628,9 @@ public void dump(PrintStream out, String prefix, boolean text) {\n         }\n \n         private static final JPQLNode parse(String jpql) {\n+            if (jpql == null)\n+                jpql = \"\";\n+\n             try {\n                 return (JPQLNode) new JPQL(jpql).parseQuery();\n             } catch (Error e) {"
            },
            {
                "sha": "48cdc71f773e15895371d9b6ad4347c9257335f2",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java",
                "status": "modified",
                "additions": 29,
                "deletions": 2,
                "changes": 31,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "patch": "@@ -1461,11 +1461,38 @@ public void endConfiguration() {\n     public synchronized QueryMetaData getQueryMetaData(Class cls, String name,\n         ClassLoader envLoader, boolean mustExist) {\n         QueryMetaData meta = getQueryMetaDataInternal(cls, name, envLoader);\n-        if (meta == null && mustExist)\n-            throw new MetaDataException(_loc.get(\"no-named-query\", cls, name));\n+        if (meta == null) {\n+            // load all the metadatas for all the known classes so that\n+            // query names are seen and registered\n+            resolveAll(envLoader);\n+            meta = getQueryMetaDataInternal(cls, name, envLoader);\n+        }\n+\n+        if (meta == null && mustExist) {\n+            if (cls == null) {\n+                throw new MetaDataException(_loc.get\n+                    (\"no-named-query-null-class\",\n+                        getPersistentTypeNames(false, envLoader), name));\n+            } else {\n+                throw new MetaDataException(_loc.get(\"no-named-query\",\n+                    cls, name));\n+            }\n+        }\n+\n         return meta;\n     }\n \n+    /** \n+     * Resolve all known metadata classes. \n+     */\n+    private void resolveAll(ClassLoader envLoader) {\n+        Collection types = loadPersistentTypes(false, envLoader);\n+        for (Iterator i = types.iterator(); i.hasNext(); ) {\n+            Class c = (Class) i.next();\n+            getMetaData(c, envLoader, false);\n+        }\n+    }\n+\n     /**\n      * Return query metadata for the given class, name, and classloader.\n      */"
            },
            {
                "sha": "601f70066f63f16b1a934f0234ffbb4adc9ad9b3",
                "filename": "openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "patch": "@@ -204,6 +204,8 @@ tool-usage: Usage: java org.apache.openjpa.meta.MetaDataTool\\n\\\n \t\\t<class name | .java file | .class file>+\n no-named-query: There is no named query defined for the class \"{0}\" with \\\n \tthe name \"{1}\".\n+no-named-query-null-class: There is no query with the name \"{1}\" defined for \\\n+    any of the known persistent classes: {0}.\n no-named-sequence: Could not locate the sequence with name \"{0}\".  It is \\\n \tpossible that the metadata file containing the sequence has not been \\\n \tparsed yet.  Make sure to use a persistent class whose metadata is in \\\n@@ -274,4 +276,4 @@ no-metadatafactory: MetaDataFactory could not be configured \\\n     using Ant, please see the <properties> or <propertiesFile> attributes \\\n     of the task''s nested <config> element. This can also occur if your \\\n     OpenJPA distribution jars are corrupt, or if your security policy is \\\n-    overly strict.\n\\ No newline at end of file\n+    overly strict."
            },
            {
                "sha": "2d913268828a95918956e9dbd0cfe2a1dc4a62b1",
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "patch": "@@ -42,6 +42,7 @@\n     MAP_KEY,\n     NATIVE_QUERIES,\n     NATIVE_QUERY,\n+    QUERY_STRING,\n     ORDER_BY,\n     QUERIES,\n     QUERY,"
            },
            {
                "sha": "c76eaeb1884fc5b71b99f3e4f971492828a772ee",
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "status": "modified",
                "additions": 24,
                "deletions": 0,
                "changes": 24,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "patch": "@@ -119,6 +119,7 @@\n         _elems.put(\"named-query\", QUERY);\n         _elems.put(\"named-native-query\", NATIVE_QUERY);\n         _elems.put(\"query-hint\", QUERY_HINT);\n+        _elems.put(\"query\", QUERY_STRING);\n \n         _elems.put(\"flush-mode\", FLUSH_MODE);\n         _elems.put(\"sequence-generator\", SEQ_GENERATOR);\n@@ -442,6 +443,9 @@ protected boolean startSystemElement(String name, Attributes attrs)\n                 case NATIVE_QUERY:\n                     ret = startNamedNativeQuery(attrs);\n                     break;\n+                case QUERY_STRING:\n+                    ret = startQueryString(attrs);\n+                    break;\n                 case SEQ_GENERATOR:\n                     ret = startSequenceGenerator(attrs);\n                     break;\n@@ -489,6 +493,9 @@ else if (tag instanceof MetaDataTag) {\n                 case NATIVE_QUERY:\n                     endNamedNativeQuery();\n                     break;\n+                case QUERY_STRING:\n+                    endQueryString();\n+                    break;\n                 case SEQ_GENERATOR:\n                     endSequenceGenerator();\n                     break;\n@@ -553,6 +560,9 @@ protected boolean startClassElement(String name, Attributes attrs)\n                 case NATIVE_QUERY:\n                     ret = startNamedNativeQuery(attrs);\n                     break;\n+                case QUERY_STRING:\n+                    ret = startQueryString(attrs);\n+                    break;\n                 case SEQ_GENERATOR:\n                     ret = startSequenceGenerator(attrs);\n                     break;\n@@ -640,6 +650,9 @@ else if (tag instanceof MetaDataTag) {\n                 case NATIVE_QUERY:\n                     endNamedNativeQuery();\n                     break;\n+                case QUERY_STRING:\n+                    endQueryString();\n+                    break;\n                 case SEQ_GENERATOR:\n                     endSequenceGenerator();\n                     break;\n@@ -1368,6 +1381,17 @@ protected void endNamedQuery()\n         popElement();\n     }\n \n+    protected boolean startQueryString(Attributes attrs)\n+        throws SAXException {\n+        return true;\n+    }\n+\n+    protected void endQueryString()\n+        throws SAXException {\n+        QueryMetaData meta = (QueryMetaData) currentElement();\n+        meta.setQueryString(currentText());\n+    }\n+\n     /**\n      * Parse query-hint.\n      */"
            }
        ]
    }
]
