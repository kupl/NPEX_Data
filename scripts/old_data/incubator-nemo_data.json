[
    {
        "commit": "https://github.com/apache/incubator-nemo/commit/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda",
        "repo": "incubator-nemo",
        "parent": "https://github.com/apache/incubator-nemo/commit/d1a728ba5f1f5b9dacd68fba855e838f6e4946c4",
        "message": "[Minor] Avoid NullPointerException in getting ExecutionProperty.Value\n\nThis PR:\r\n* Avoid `NullPointerException` when comparing `ExecutionProperty.Value` with non-null value by using `(non-null value).equals(ExecutionProperty.Value)` instead of `ExecutionProperty.Value.equals(non-null value)`.",
        "bug_id": "incubator-nemo_1",
        "file": [
            {
                "sha": "f2b1d00afc53abea975f4cefaa3ace5f9af8bd82",
                "filename": "common/src/main/java/edu/snu/onyx/common/dag/DAGBuilder.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/common/src/main/java/edu/snu/onyx/common/dag/DAGBuilder.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/common/src/main/java/edu/snu/onyx/common/dag/DAGBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/common/src/main/java/edu/snu/onyx/common/dag/DAGBuilder.java?ref=8f14bd36d3f0abb52af99261e3cb9861bd7f7fda",
                "patch": "@@ -267,8 +267,8 @@ private void executionPropertyCheck() {\n         }));\n     // All vertices connected with OneToOne edge should have identical Parallelism execution property.\n     vertices.forEach(v -> incomingEdges.get(v).stream().filter(e -> e instanceof IREdge).map(e -> (IREdge) e)\n-        .filter(e -> e.getProperty(ExecutionProperty.Key.DataCommunicationPattern)\n-        .equals(DataCommunicationPatternProperty.Value.OneToOne))\n+        .filter(e -> DataCommunicationPatternProperty.Value.OneToOne\n+                .equals(e.getProperty(ExecutionProperty.Key.DataCommunicationPattern)))\n         .filter(e -> !Boolean.TRUE.equals(e.isSideInput())).forEach(e -> {\n           if (e.getSrc() != null && e.getDst() != null\n               && !(e.getSrc() instanceof LoopVertex) && !(e.getDst() instanceof LoopVertex)"
            },
            {
                "sha": "53b1b3775199b4fd9633941fcd27324eaf59a4af",
                "filename": "compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/annotating/DisaggregationEdgeDataStorePass.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/annotating/DisaggregationEdgeDataStorePass.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/annotating/DisaggregationEdgeDataStorePass.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/annotating/DisaggregationEdgeDataStorePass.java?ref=8f14bd36d3f0abb52af99261e3cb9861bd7f7fda",
                "patch": "@@ -40,8 +40,8 @@ public DisaggregationEdgeDataStorePass() {\n     dag.getVertices().forEach(vertex -> { // Initialize the DataStore of the DAG with GlusterFileStore.\n       final List<IREdge> inEdges = dag.getIncomingEdgesOf(vertex);\n       inEdges.forEach(edge -> {\n-        if (edge.getProperty(ExecutionProperty.Key.DataStore)\n-            .equals(DataStoreProperty.Value.LocalFileStore)) {\n+        if (DataStoreProperty.Value.LocalFileStore\n+              .equals(edge.getProperty(ExecutionProperty.Key.DataStore))) {\n           edge.setProperty(DataStoreProperty.of(DataStoreProperty.Value.GlusterFileStore));\n         }\n       });"
            },
            {
                "sha": "5448a58ba7e5bfcce9c856fcf01f23ffcad14862",
                "filename": "compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/annotating/PadoEdgeDataStorePass.java",
                "status": "modified",
                "additions": 10,
                "deletions": 10,
                "changes": 20,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/annotating/PadoEdgeDataStorePass.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/annotating/PadoEdgeDataStorePass.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/annotating/PadoEdgeDataStorePass.java?ref=8f14bd36d3f0abb52af99261e3cb9861bd7f7fda",
                "patch": "@@ -50,8 +50,8 @@ public PadoEdgeDataStorePass() {\n           } else if (fromReservedToTransient(edge)) {\n             edge.setProperty(DataStoreProperty.of(DataStoreProperty.Value.LocalFileStore));\n           } else {\n-            if (edge.getProperty(ExecutionProperty.Key.DataCommunicationPattern)\n-                .equals(DataCommunicationPatternProperty.Value.OneToOne)) {\n+            if (DataCommunicationPatternProperty.Value.OneToOne\n+                  .equals(edge.getProperty(ExecutionProperty.Key.DataCommunicationPattern))) {\n               edge.setProperty(DataStoreProperty.of(DataStoreProperty.Value.MemoryStore));\n             } else {\n               edge.setProperty(DataStoreProperty.of(DataStoreProperty.Value.LocalFileStore));\n@@ -69,10 +69,10 @@ public PadoEdgeDataStorePass() {\n    * @return whether or not the edge satisfies the condition.\n    */\n   static boolean fromTransientToReserved(final IREdge irEdge) {\n-    return irEdge.getSrc().getProperty(ExecutionProperty.Key.ExecutorPlacement)\n-        .equals(ExecutorPlacementProperty.TRANSIENT)\n-        && irEdge.getDst().getProperty(ExecutionProperty.Key.ExecutorPlacement)\n-        .equals(ExecutorPlacementProperty.RESERVED);\n+    return ExecutorPlacementProperty.TRANSIENT\n+        .equals(irEdge.getSrc().getProperty(ExecutionProperty.Key.ExecutorPlacement))\n+        && ExecutorPlacementProperty.RESERVED\n+        .equals(irEdge.getDst().getProperty(ExecutionProperty.Key.ExecutorPlacement));\n   }\n \n   /**\n@@ -81,9 +81,9 @@ static boolean fromTransientToReserved(final IREdge irEdge) {\n    * @return whether or not the edge satisfies the condition.\n    */\n   static boolean fromReservedToTransient(final IREdge irEdge) {\n-    return irEdge.getSrc().getProperty(ExecutionProperty.Key.ExecutorPlacement)\n-        .equals(ExecutorPlacementProperty.RESERVED)\n-        && irEdge.getDst().getProperty(ExecutionProperty.Key.ExecutorPlacement)\n-        .equals(ExecutorPlacementProperty.TRANSIENT);\n+    return ExecutorPlacementProperty.RESERVED\n+        .equals(irEdge.getSrc().getProperty(ExecutionProperty.Key.ExecutorPlacement))\n+        && ExecutorPlacementProperty.TRANSIENT\n+        .equals(irEdge.getDst().getProperty(ExecutionProperty.Key.ExecutorPlacement));\n   }\n }"
            },
            {
                "sha": "739651c9e2ec1365294416c215d61e9280b70e2d",
                "filename": "compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/annotating/SailfishEdgeDataStorePass.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/annotating/SailfishEdgeDataStorePass.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/annotating/SailfishEdgeDataStorePass.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/annotating/SailfishEdgeDataStorePass.java?ref=8f14bd36d3f0abb52af99261e3cb9861bd7f7fda",
                "patch": "@@ -38,11 +38,11 @@ public SailfishEdgeDataStorePass() {\n     dag.getVertices().forEach(vertex -> {\n       // Find the merger vertex inserted by reshaping pass.\n       if (dag.getIncomingEdgesOf(vertex).stream().anyMatch(irEdge ->\n-          irEdge.getProperty(ExecutionProperty.Key.DataCommunicationPattern)\n-            .equals(DataCommunicationPatternProperty.Value.ScatterGather))) {\n+              DataCommunicationPatternProperty.Value.ScatterGather\n+          .equals(irEdge.getProperty(ExecutionProperty.Key.DataCommunicationPattern)))) {\n         dag.getIncomingEdgesOf(vertex).forEach(edgeToMerger -> {\n-          if (edgeToMerger.getProperty(ExecutionProperty.Key.DataCommunicationPattern)\n-              .equals(DataCommunicationPatternProperty.Value.ScatterGather)) {\n+          if (DataCommunicationPatternProperty.Value.ScatterGather\n+          .equals(edgeToMerger.getProperty(ExecutionProperty.Key.DataCommunicationPattern))) {\n             // Pass data through memory to the merger vertex.\n             edgeToMerger.setProperty(DataStoreProperty.of(DataStoreProperty.Value.MemoryStore));\n           }"
            },
            {
                "sha": "273348e4285889a972ce9af00a4b8b1c2324c49a",
                "filename": "compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/reshaping/DataSkewReshapingPass.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/reshaping/DataSkewReshapingPass.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/reshaping/DataSkewReshapingPass.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/reshaping/DataSkewReshapingPass.java?ref=8f14bd36d3f0abb52af99261e3cb9861bd7f7fda",
                "patch": "@@ -46,16 +46,16 @@\n     dag.topologicalDo(v -> {\n       // We care about OperatorVertices that have any incoming edges that are of type ScatterGather.\n       if (v instanceof OperatorVertex && dag.getIncomingEdgesOf(v).stream().anyMatch(irEdge ->\n-          irEdge.getProperty(ExecutionProperty.Key.DataCommunicationPattern)\n-                              .equals(DataCommunicationPatternProperty.Value.ScatterGather))) {\n+          DataCommunicationPatternProperty.Value.ScatterGather\n+          .equals(irEdge.getProperty(ExecutionProperty.Key.DataCommunicationPattern)))) {\n         final MetricCollectionBarrierVertex metricCollectionBarrierVertex = new MetricCollectionBarrierVertex();\n         metricCollectionVertices.add(metricCollectionBarrierVertex);\n         builder.addVertex(v);\n         builder.addVertex(metricCollectionBarrierVertex);\n         dag.getIncomingEdgesOf(v).forEach(edge -> {\n           // we insert the metric collection vertex when we meet a scatter gather edge\n-          if (edge.getProperty(ExecutionProperty.Key.DataCommunicationPattern)\n-              .equals(DataCommunicationPatternProperty.Value.ScatterGather)) {\n+          if (DataCommunicationPatternProperty.Value.ScatterGather\n+                .equals(edge.getProperty(ExecutionProperty.Key.DataCommunicationPattern))) {\n             // We then insert the dynamicOptimizationVertex between the vertex and incoming vertices.\n             final IREdge newEdge = new IREdge(DataCommunicationPatternProperty.Value.OneToOne,\n                 edge.getSrc(), metricCollectionBarrierVertex, edge.getCoder());"
            },
            {
                "sha": "cab1a783a26fb8c089d71e0714c100dfc12c5c27",
                "filename": "compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/reshaping/SailfishReshapingPass.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/reshaping/SailfishReshapingPass.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/reshaping/SailfishReshapingPass.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/compiler/optimizer/src/main/java/edu/snu/onyx/compiler/optimizer/pass/compiletime/reshaping/SailfishReshapingPass.java?ref=8f14bd36d3f0abb52af99261e3cb9861bd7f7fda",
                "patch": "@@ -41,11 +41,11 @@\n       // We care about OperatorVertices that have any incoming edge that\n       // has ScatterGather as data communication pattern.\n       if (v instanceof OperatorVertex && dag.getIncomingEdgesOf(v).stream().anyMatch(irEdge ->\n-          irEdge.getProperty(ExecutionProperty.Key.DataCommunicationPattern)\n-                              .equals(DataCommunicationPatternProperty.Value.ScatterGather))) {\n+              DataCommunicationPatternProperty.Value.ScatterGather\n+          .equals(irEdge.getProperty(ExecutionProperty.Key.DataCommunicationPattern)))) {\n         dag.getIncomingEdgesOf(v).forEach(edge -> {\n-          if (edge.getProperty(ExecutionProperty.Key.DataCommunicationPattern)\n-              .equals(DataCommunicationPatternProperty.Value.ScatterGather)) {\n+          if (DataCommunicationPatternProperty.Value.ScatterGather\n+                .equals(edge.getProperty(ExecutionProperty.Key.DataCommunicationPattern))) {\n             // Insert a merger vertex having transform that write received data immediately\n             // before the vertex receiving shuffled data.\n             final OperatorVertex iFileMergerVertex = new OperatorVertex(new RelayTransform());"
            },
            {
                "sha": "8a1d1cb125b13e23172e20608e7ef430886c0335",
                "filename": "runtime/executor/src/main/java/edu/snu/onyx/runtime/executor/data/PartitionManagerWorker.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/runtime/executor/src/main/java/edu/snu/onyx/runtime/executor/data/PartitionManagerWorker.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/runtime/executor/src/main/java/edu/snu/onyx/runtime/executor/data/PartitionManagerWorker.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/runtime/executor/src/main/java/edu/snu/onyx/runtime/executor/data/PartitionManagerWorker.java?ref=8f14bd36d3f0abb52af99261e3cb9861bd7f7fda",
                "patch": "@@ -142,7 +142,7 @@ public void createPartition(final String partitionId,\n     if (optionalResultData.isPresent()) {\n       // Partition resides in this evaluator!\n       return CompletableFuture.completedFuture(optionalResultData.get());\n-    } else if (partitionStore.equals(DataStoreProperty.Value.GlusterFileStore)) {\n+    } else if (DataStoreProperty.Value.GlusterFileStore.equals(partitionStore)) {\n       throw new PartitionFetchException(new Throwable(\"Cannot find a partition in remote store.\"));\n     } else {\n       // We don't have the partition here...\n@@ -245,7 +245,7 @@ public void commitPartition(final String partitionId,\n             .setPartitionId(partitionId)\n             .setState(ControlMessage.PartitionStateFromExecutor.COMMITTED);\n \n-    if (partitionStore.equals(DataStoreProperty.Value.GlusterFileStore)) {\n+    if (DataStoreProperty.Value.GlusterFileStore.equals(partitionStore)) {\n       partitionStateChangedMsgBuilder.setLocation(REMOTE_FILE_STORE);\n     } else {\n       partitionStateChangedMsgBuilder.setLocation(executorId);\n@@ -345,8 +345,8 @@ public void onPullRequest(final PartitionOutputStream<?> outputStream) {\n       @Override\n       public void run() {\n         try {\n-          if (partitionStore.equals(DataStoreProperty.Value.LocalFileStore)\n-              || partitionStore.equals(DataStoreProperty.Value.GlusterFileStore)) {\n+          if (DataStoreProperty.Value.LocalFileStore.equals(partitionStore)\n+              || DataStoreProperty.Value.GlusterFileStore.equals(partitionStore)) {\n             // TODO #492: Modularize the data communication pattern. Remove execution property value dependant code.\n             final FileStore fileStore = (FileStore) getPartitionStore(partitionStore);\n             outputStream.writeFileAreas(fileStore.getFileAreas(outputStream.getPartitionId(),"
            },
            {
                "sha": "9e990dc9f72bdc9a28b381c3a56a61c3d7a06dfa",
                "filename": "runtime/executor/src/main/java/edu/snu/onyx/runtime/executor/datatransfer/OutputWriter.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/runtime/executor/src/main/java/edu/snu/onyx/runtime/executor/datatransfer/OutputWriter.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/runtime/executor/src/main/java/edu/snu/onyx/runtime/executor/datatransfer/OutputWriter.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/runtime/executor/src/main/java/edu/snu/onyx/runtime/executor/datatransfer/OutputWriter.java?ref=8f14bd36d3f0abb52af99261e3cb9861bd7f7fda",
                "patch": "@@ -102,11 +102,11 @@ public void write(final Iterable dataToWrite) {\n     DataCommunicationPatternProperty.Value comValue =\n         runtimeEdge.getProperty(ExecutionProperty.Key.DataCommunicationPattern);\n \n-    if (comValue.equals(DataCommunicationPatternProperty.Value.OneToOne)) {\n+    if (DataCommunicationPatternProperty.Value.OneToOne.equals(comValue)) {\n       writeOneToOne(blocksToWrite);\n-    } else if (comValue.equals(DataCommunicationPatternProperty.Value.BroadCast)) {\n+    } else if (DataCommunicationPatternProperty.Value.BroadCast.equals(comValue)) {\n       writeBroadcast(blocksToWrite);\n-    } else if (comValue.equals(DataCommunicationPatternProperty.Value.ScatterGather)) {\n+    } else if (DataCommunicationPatternProperty.Value.ScatterGather.equals(comValue)) {\n       // If the dynamic optimization which detects data skew is enabled, sort the data and write it.\n       if (isDataSizeMetricCollectionEdge) {\n         dataSkewWrite(blocksToWrite);"
            },
            {
                "sha": "6c367d5b83745477eeb7bc723f617d0ac6169ce5",
                "filename": "tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/annotating/DefaultPartitionerPassTest.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/annotating/DefaultPartitionerPassTest.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/annotating/DefaultPartitionerPassTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/annotating/DefaultPartitionerPassTest.java?ref=8f14bd36d3f0abb52af99261e3cb9861bd7f7fda",
                "patch": "@@ -57,14 +57,14 @@ public void testAnnotation() throws Exception {\n     final DAG<IRVertex, IREdge> processedDAG = partitionerPass.apply(compiledDAG);\n \n     processedDAG.getVertices().forEach(v -> processedDAG.getIncomingEdgesOf(v).stream()\n-        .filter(e -> e.getProperty(ExecutionProperty.Key.DataCommunicationPattern)\n-                      .equals(DataCommunicationPatternProperty.Value.ScatterGather))\n+        .filter(e -> DataCommunicationPatternProperty.Value.ScatterGather\n+                      .equals(e.getProperty(ExecutionProperty.Key.DataCommunicationPattern)))\n         .forEach(e -> assertEquals(e.getProperty(ExecutionProperty.Key.Partitioner),\n             PartitionerProperty.Value.HashPartitioner)));\n \n     processedDAG.getVertices().forEach(v -> processedDAG.getIncomingEdgesOf(v).stream()\n-        .filter(e -> !e.getProperty(ExecutionProperty.Key.DataCommunicationPattern)\n-                        .equals(DataCommunicationPatternProperty.Value.ScatterGather))\n+        .filter(e -> !DataCommunicationPatternProperty.Value.ScatterGather\n+                      .equals(e.getProperty(ExecutionProperty.Key.DataCommunicationPattern)))\n         .forEach(e -> assertEquals(e.getProperty(ExecutionProperty.Key.Partitioner),\n             PartitionerProperty.Value.IntactPartitioner)));\n   }"
            },
            {
                "sha": "e9954aa3214ff96cd6c7237faa1fd7745b2f6cc3",
                "filename": "tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/composite/DataSkewCompositePassTest.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/composite/DataSkewCompositePassTest.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/composite/DataSkewCompositePassTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/composite/DataSkewCompositePassTest.java?ref=8f14bd36d3f0abb52af99261e3cb9861bd7f7fda",
                "patch": "@@ -79,8 +79,8 @@ public void testDataSkewPass() throws Exception {\n     final Integer originalVerticesNum = mrDAG.getVertices().size();\n     final Long numOfScatterGatherEdges = mrDAG.getVertices().stream().filter(irVertex ->\n         mrDAG.getIncomingEdgesOf(irVertex).stream().anyMatch(irEdge ->\n-            irEdge.getProperty(ExecutionProperty.Key.DataCommunicationPattern)\n-              .equals(DataCommunicationPatternProperty.Value.ScatterGather)))\n+            DataCommunicationPatternProperty.Value.ScatterGather\n+            .equals(irEdge.getProperty(ExecutionProperty.Key.DataCommunicationPattern))))\n         .count();\n     final DAG<IRVertex, IREdge> processedDAG = new DataSkewCompositePass().apply(mrDAG);\n "
            },
            {
                "sha": "20f3ec92ac478aac187f53565cda98a8985f9609",
                "filename": "tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/composite/DisaggregationPassTest.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/composite/DisaggregationPassTest.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/composite/DisaggregationPassTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/composite/DisaggregationPassTest.java?ref=8f14bd36d3f0abb52af99261e3cb9861bd7f7fda",
                "patch": "@@ -53,8 +53,8 @@ public void testDisaggregation() throws Exception {\n \n     processedDAG.getTopologicalSort().forEach(irVertex -> {\n       processedDAG.getIncomingEdgesOf(irVertex).forEach(edgeToMerger -> {\n-        if (edgeToMerger.getProperty(ExecutionProperty.Key.DataCommunicationPattern)\n-            .equals(DataCommunicationPatternProperty.Value.OneToOne)) {\n+        if (DataCommunicationPatternProperty.Value.OneToOne\n+              .equals(edgeToMerger.getProperty(ExecutionProperty.Key.DataCommunicationPattern))) {\n           assertEquals(DataStoreProperty.Value.MemoryStore, edgeToMerger.getProperty(ExecutionProperty.Key.DataStore));\n         } else {\n           assertEquals(DataStoreProperty.Value.GlusterFileStore,"
            },
            {
                "sha": "97f51575bd0a102480e85314cd0a4addc27575ea",
                "filename": "tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/composite/SailfishPassTest.java",
                "status": "modified",
                "additions": 4,
                "deletions": 4,
                "changes": 8,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/composite/SailfishPassTest.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/composite/SailfishPassTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/tests/src/test/java/edu/snu/onyx/tests/compiler/optimizer/pass/compiletime/composite/SailfishPassTest.java?ref=8f14bd36d3f0abb52af99261e3cb9861bd7f7fda",
                "patch": "@@ -52,12 +52,12 @@ public void testSailfish() throws Exception {\n \n     processedDAG.getTopologicalSort().forEach(irVertex -> {\n       if (processedDAG.getIncomingEdgesOf(irVertex).stream().anyMatch(irEdge ->\n-          irEdge.getProperty(ExecutionProperty.Key.DataCommunicationPattern)\n-            .equals(DataCommunicationPatternProperty.Value.ScatterGather))) {\n+              DataCommunicationPatternProperty.Value.ScatterGather\n+          .equals(irEdge.getProperty(ExecutionProperty.Key.DataCommunicationPattern)))) {\n         // Merger vertex\n         processedDAG.getIncomingEdgesOf(irVertex).forEach(edgeToMerger -> {\n-          if (edgeToMerger.getProperty(ExecutionProperty.Key.DataCommunicationPattern)\n-              .equals(DataCommunicationPatternProperty.Value.ScatterGather)) {\n+          if (DataCommunicationPatternProperty.Value.ScatterGather\n+          .equals(edgeToMerger.getProperty(ExecutionProperty.Key.DataCommunicationPattern))) {\n             assertEquals(DataFlowModelProperty.Value.Push,\n                 edgeToMerger.getProperty(ExecutionProperty.Key.DataFlowModel));\n             assertEquals(DataStoreProperty.Value.MemoryStore,"
            },
            {
                "sha": "70aebeabe4d4aa14cd9fbc0d87cf42a6fd297b95",
                "filename": "tests/src/test/java/edu/snu/onyx/tests/runtime/executor/datatransfer/DataTransferTest.java",
                "status": "modified",
                "additions": 3,
                "deletions": 3,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/tests/src/test/java/edu/snu/onyx/tests/runtime/executor/datatransfer/DataTransferTest.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/8f14bd36d3f0abb52af99261e3cb9861bd7f7fda/tests/src/test/java/edu/snu/onyx/tests/runtime/executor/datatransfer/DataTransferTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/tests/src/test/java/edu/snu/onyx/tests/runtime/executor/datatransfer/DataTransferTest.java?ref=8f14bd36d3f0abb52af99261e3cb9861bd7f7fda",
                "patch": "@@ -275,7 +275,7 @@ private void writeAndRead(final PartitionManagerWorker sender,\n     edgeProperties.put(DataStoreProperty.of(store));\n     final RuntimeEdge dummyEdge;\n \n-    if (commPattern.equals(DataCommunicationPatternProperty.Value.ScatterGather)) {\n+    if (DataCommunicationPatternProperty.Value.ScatterGather.equals(commPattern)) {\n       final IRVertex srcMockVertex = mock(IRVertex.class);\n       final IRVertex dstMockVertex = mock(IRVertex.class);\n       final PhysicalStage srcStage = setupStages(\"srcStage\", taskGroupPrefix);\n@@ -310,7 +310,7 @@ private void writeAndRead(final PartitionManagerWorker sender,\n       final InputReader reader =\n           new InputReader(dstTaskIndex, taskGroupPrefix + dstTaskIndex, srcVertex, dummyEdge, receiver);\n \n-      if (commPattern.equals(DataCommunicationPatternProperty.Value.OneToOne)) {\n+      if (DataCommunicationPatternProperty.Value.OneToOne.equals(commPattern)) {\n         assertEquals(1, reader.getSourceParallelism());\n       } else {\n         assertEquals(PARALLELISM_TEN, reader.getSourceParallelism());\n@@ -328,7 +328,7 @@ private void writeAndRead(final PartitionManagerWorker sender,\n     // Compare (should be the same)\n     final List flattenedWrittenData = flatten(dataWrittenList);\n     final List flattenedReadData = flatten(dataReadList);\n-    if (commPattern.equals(DataCommunicationPatternProperty.Value.BroadCast)) {\n+    if (DataCommunicationPatternProperty.Value.BroadCast.equals(commPattern)) {\n       final List broadcastedWrittenData = new ArrayList<>();\n       IntStream.range(0, PARALLELISM_TEN).forEach(i -> broadcastedWrittenData.addAll(flattenedWrittenData));\n       assertEquals(broadcastedWrittenData.size(), flattenedReadData.size());"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-nemo/commit/70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
        "repo": "incubator-nemo",
        "parent": "https://github.com/apache/incubator-nemo/commit/9cc5168581fa7781c7388b8da9e9d2c83863190b",
        "message": "[NEMO-353] Launch NEXMark applications (#198)\n\nJIRA: [NEMO-353: Launch NEXMark applications](https://issues.apache.org/jira/projects/NEMO/issues/NEMO-353)\r\n\r\n**Major changes:**\r\n- Remove nemo-client dependency from nemo-compiler-frontend-beam and create shaded-client.jar file to include it for the execution of NEXMark jobs. \r\n- Create an example package that contains NEXMark jar file. \r\n- Fix NullPointerException in `BeamUnboundedSourceVertex` when executing NEXMark applications. \r\n\r\n**Minor changes to note:**\r\n-Update README",
        "bug_id": "incubator-nemo_2",
        "file": [
            {
                "sha": "ad27484376279e5b0ac88fccca409f424268449d",
                "filename": "README.md",
                "status": "modified",
                "additions": 11,
                "deletions": 0,
                "changes": 11,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/README.md",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/README.md",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/README.md?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -95,6 +95,16 @@ Below describes how Beam applications can be run directly on Nemo.\n  \t-user_main org.apache.nemo.examples.beam.WordCount \\\n  \t-optimization_policy org.apache.nemo.compiler.optimizer.policy.TransientResourcePolicy \\\n \t-user_args \"hdfs://v-m:9000/test_input_wordcount hdfs://v-m:9000/test_output_wordcount\"\n+\n+## NEXMark streaming Q0 (query0) example \n+./bin/run_nexmark.sh \\\n+ \t-job_id nexmark-Q0 \\\n+\t-executor_json `pwd`/examples/resources/executors/beam_test_executor_resources.json \\\n+ \t-user_main org.apache.beam.sdk.nexmark.Main \\\n+ \t-optimization_policy org.apache.nemo.compiler.optimizer.policy.StreamingPolicy \\\n+  -scheduler_impl_class_name org.apache.nemo.runtime.master.scheduler.StreamingScheduler \\\t\n+\t-user_args \"--runner=org.apache.nemo.client.beam.NemoRunner --streaming=true --query=0 --numEventGenerators=1\"\n+\n ```\n ## Resource Configuration\n `-executor_json` command line option can be used to provide a path to the JSON file that describes resource configuration for executors. Its default value is `config/default.json`, which initializes one of each `Transient`, `Reserved`, and `Compute` executor, each of which has one core and 1024MB memory.\n@@ -148,3 +158,4 @@ Nemo Compiler and Engine can store JSON representation of intermediate DAGs.\n ## Speeding up builds \n * To exclude Spark related packages: mvn clean install -T 2C -DskipTests -pl \\\\!compiler/frontend/spark,\\\\!examples/spark\n * To exclude Beam related packages: mvn clean install -T 2C -DskipTests -pl \\\\!compiler/frontend/beam,\\\\!examples/beam\n+* To exclude NEXMark related packages: mvn clean install -T 2C -DskipTests -pl \\\\!examples/nexmark"
            },
            {
                "sha": "59b5a67672da930b5c4bb8c0986e50a012f3ade1",
                "filename": "bin/run_beam.sh",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/bin/run_beam.sh",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/bin/run_beam.sh",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/bin/run_beam.sh?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -17,6 +17,8 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-java -Dlog4j.configuration=file://`pwd`/log4j.properties -cp examples/beam/target/nemo-examples-beam-$(mvn -q \\\n+VERSION=$(mvn -q \\\n   -Dexec.executable=echo -Dexec.args='${project.version}' \\\n-  --non-recursive exec:exec)-shaded.jar:`yarn classpath` org.apache.nemo.client.JobLauncher \"$@\"\n+  --non-recursive exec:exec)\n+\n+java -Dlog4j.configuration=file://`pwd`/log4j.properties -cp client/target/nemo-client-$VERSION-shaded.jar:examples/beam/target/nemo-examples-beam-$VERSION-shaded.jar:`yarn classpath` org.apache.nemo.client.JobLauncher \"$@\""
            },
            {
                "sha": "d1b6a2c0038c7979c205fbcd0e2cea3cef3ccfd0",
                "filename": "bin/run_nexmark.sh",
                "status": "added",
                "additions": 24,
                "deletions": 0,
                "changes": 24,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/bin/run_nexmark.sh",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/bin/run_nexmark.sh",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/bin/run_nexmark.sh?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -0,0 +1,24 @@\n+#!/usr/bin/env bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+VERSION=$(mvn -q \\\n+  -Dexec.executable=echo -Dexec.args='${project.version}' \\\n+  --non-recursive exec:exec)\n+\n+java -Dlog4j.configuration=file://`pwd`/log4j.properties -cp client/target/nemo-client-$VERSION-shaded.jar:`yarn classpath`:examples/nexmark/target/nexmark-$VERSION-shaded.jar org.apache.nemo.client.JobLauncher \"$@\""
            },
            {
                "sha": "c9439d2b071c36aafc5ee166fcc995ac446978d3",
                "filename": "client/pom.xml",
                "status": "modified",
                "additions": 51,
                "deletions": 0,
                "changes": 51,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/client/pom.xml",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/client/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/client/pom.xml?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -56,5 +56,56 @@ under the License.\n             <artifactId>reef-runtime-yarn</artifactId>\n             <version>${reef.version}</version>\n         </dependency>\n+\n+\n+      <!-- for nemo-beam-runner -->\n+      <dependency>\n+        <groupId>org.apache.nemo</groupId>\n+        <artifactId>nemo-compiler-frontend-beam</artifactId>\n+        <version>${project.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>com.google.auto.service</groupId>\n+        <artifactId>auto-service</artifactId>\n+        <version>${auto-service.version}</version>\n+        <optional>true</optional>\n+      </dependency>\n     </dependencies>\n+\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-deploy-plugin</artifactId>\n+        <version>2.8.2</version>\n+        <configuration>\n+          <skip>true</skip>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-shade-plugin</artifactId>\n+        <version>3.0.0</version>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>shade</goal>\n+            </goals>\n+            <configuration>\n+              <outputFile>\n+                ${project.build.directory}/${project.artifactId}-${project.version}-shaded.jar\n+              </outputFile>\n+              <transformers>\n+                <!-- Required for using beam-hadoop: See https://stackoverflow.com/questions/44365545\n+                -->\n+                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\" />\n+              </transformers>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n </project>"
            },
            {
                "sha": "c4c69e4763a67bcd0dfa65db399f0e61f518e0a1",
                "filename": "client/src/main/java/org/apache/nemo/client/beam/BeamStateTranslator.java",
                "status": "renamed",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/client/src/main/java/org/apache/nemo/client/beam/BeamStateTranslator.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/client/src/main/java/org/apache/nemo/client/beam/BeamStateTranslator.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/client/src/main/java/org/apache/nemo/client/beam/BeamStateTranslator.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.nemo.compiler.frontend.beam;\n+package org.apache.nemo.client.beam;\n \n import org.apache.nemo.client.StateTranslator;\n import org.apache.nemo.runtime.common.state.PlanState;",
                "previous_filename": "compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/BeamStateTranslator.java"
            },
            {
                "sha": "512f8f16afa2ab719f39e8449f2c1462185f800f",
                "filename": "client/src/main/java/org/apache/nemo/client/beam/NemoPipelineResult.java",
                "status": "renamed",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/client/src/main/java/org/apache/nemo/client/beam/NemoPipelineResult.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/client/src/main/java/org/apache/nemo/client/beam/NemoPipelineResult.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/client/src/main/java/org/apache/nemo/client/beam/NemoPipelineResult.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.nemo.compiler.frontend.beam;\n+package org.apache.nemo.client.beam;\n \n import org.apache.nemo.client.ClientEndpoint;\n import org.apache.beam.sdk.PipelineResult;",
                "previous_filename": "compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/NemoPipelineResult.java"
            },
            {
                "sha": "ccafc3ec1e1d21210ce865297b4260d8ecf83af7",
                "filename": "client/src/main/java/org/apache/nemo/client/beam/NemoRunner.java",
                "status": "renamed",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/client/src/main/java/org/apache/nemo/client/beam/NemoRunner.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/client/src/main/java/org/apache/nemo/client/beam/NemoRunner.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/client/src/main/java/org/apache/nemo/client/beam/NemoRunner.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -16,14 +16,16 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.nemo.compiler.frontend.beam;\n+package org.apache.nemo.client.beam;\n \n import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.nemo.client.JobLauncher;\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.PipelineRunner;\n import org.apache.beam.sdk.options.PipelineOptions;\n import org.apache.beam.sdk.options.PipelineOptionsValidator;\n+import org.apache.nemo.compiler.frontend.beam.NemoPipelineOptions;\n+import org.apache.nemo.compiler.frontend.beam.PipelineVisitor;\n \n /**\n  * Runner class for BEAM programs.",
                "previous_filename": "compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/NemoRunner.java"
            },
            {
                "sha": "832bcd6a9d84e39a1ed5f231ceceac5453bcc791",
                "filename": "client/src/main/java/org/apache/nemo/client/beam/NemoRunnerRegistrar.java",
                "status": "renamed",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/client/src/main/java/org/apache/nemo/client/beam/NemoRunnerRegistrar.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/client/src/main/java/org/apache/nemo/client/beam/NemoRunnerRegistrar.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/client/src/main/java/org/apache/nemo/client/beam/NemoRunnerRegistrar.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -16,14 +16,15 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.nemo.compiler.frontend.beam;\n+package org.apache.nemo.client.beam;\n \n import com.google.auto.service.AutoService;\n import com.google.common.collect.ImmutableList;\n import org.apache.beam.sdk.PipelineRunner;\n import org.apache.beam.sdk.options.PipelineOptions;\n import org.apache.beam.sdk.options.PipelineOptionsRegistrar;\n import org.apache.beam.sdk.runners.PipelineRunnerRegistrar;\n+import org.apache.nemo.compiler.frontend.beam.NemoPipelineOptions;\n \n /**\n  * Contains the {@link PipelineRunnerRegistrar} and {@link PipelineOptionsRegistrar} for the {@link NemoRunner}.",
                "previous_filename": "compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/NemoRunnerRegistrar.java"
            },
            {
                "sha": "c999fffb25422d03c8d03aa7371c3021e5b8c9c2",
                "filename": "compiler/frontend/beam/pom.xml",
                "status": "modified",
                "additions": 44,
                "deletions": 51,
                "changes": 95,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/compiler/frontend/beam/pom.xml",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/compiler/frontend/beam/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/compiler/frontend/beam/pom.xml?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -7,9 +7,7 @@ regarding copyright ownership.  The ASF licenses this file\n to you under the Apache License, Version 2.0 (the\n \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n-\n   http://www.apache.org/licenses/LICENSE-2.0\n-\n Unless required by applicable law or agreed to in writing,\n software distributed under the License is distributed on an\n \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -18,56 +16,51 @@ specific language governing permissions and limitations\n under the License.\n -->\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.nemo</groupId>\n+    <artifactId>nemo-compiler</artifactId>\n+    <version>0.2-SNAPSHOT</version>\n+    <relativePath>../../</relativePath>\n+  </parent>\n+\n+  <artifactId>nemo-compiler-frontend-beam</artifactId>\n+  <name>Nemo Compiler Frontend: Beam</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.nemo</groupId>\n+      <artifactId>nemo-common</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.beam</groupId>\n+      <artifactId>beam-sdks-java-core</artifactId>\n+      <version>${beam.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.beam</groupId>\n+      <artifactId>beam-runners-core-java</artifactId>\n+      <version>${beam.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.beam</groupId>\n+      <artifactId>beam-sdks-java-io-hadoop-input-format</artifactId>\n+      <version>${beam.version}</version>\n+    </dependency>\n \n-    <parent>\n-        <groupId>org.apache.nemo</groupId>\n-        <artifactId>nemo-compiler</artifactId>\n-        <version>0.2-SNAPSHOT</version>\n-        <relativePath>../../</relativePath>\n-    </parent>\n+    <dependency>\n+      <groupId>org.apache.hadoop</groupId>\n+      <artifactId>hadoop-mapreduce-client-core</artifactId>\n+      <version>${hadoop.version}</version>\n+      <scope>provided</scope>\n+    </dependency>\n+    <!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk -->\n \n-    <artifactId>nemo-compiler-frontend-beam</artifactId>\n-    <name>Nemo Compiler Frontend: Beam</name>\n-    <packaging>jar</packaging>\n \n-    <dependencies>\n-\t      <dependency>\n-            <groupId>org.apache.nemo</groupId>\n-            <artifactId>nemo-common</artifactId>\n-            <version>${project.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.nemo</groupId>\n-            <artifactId>nemo-client</artifactId>\n-            <version>${project.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.beam</groupId>\n-            <artifactId>beam-sdks-java-core</artifactId>\n-            <version>${beam.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.beam</groupId>\n-            <artifactId>beam-runners-core-java</artifactId>\n-            <version>${beam.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.beam</groupId>\n-            <artifactId>beam-sdks-java-io-hadoop-input-format</artifactId>\n-            <version>${beam.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.hadoop</groupId>\n-            <artifactId>hadoop-mapreduce-client-core</artifactId>\n-            <version>${hadoop.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>com.google.auto.service</groupId>\n-            <artifactId>auto-service</artifactId>\n-            <version>${auto-service.version}</version>\n-            <optional>true</optional>\n-        </dependency>\n-    </dependencies>\n+  </dependencies>\n </project>"
            },
            {
                "sha": "f1bb460be1e9eba66668484fea0901693de7fd83",
                "filename": "compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/InMemorySideInputReader.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/InMemorySideInputReader.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/InMemorySideInputReader.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/InMemorySideInputReader.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -92,7 +92,7 @@ public void addSideInputElement(final PCollectionView<?> view,\n \n   /**\n    * Say a DoFn of this reader has 3 main inputs and 4 side inputs.\n-   * {@link org.apache.nemo.runtime.executor.datatransfer.InputWatermarkManager} guarantees that the watermark here\n+   * Nemo runtime guarantees that the watermark here\n    * is the minimum of the all 7 input streams.\n    * @param newWatermark to set.\n    */"
            },
            {
                "sha": "fa3d00d4e6c96c2fc7451241c29fd0a5e49b04ba",
                "filename": "compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/PipelineVisitor.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/PipelineVisitor.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/PipelineVisitor.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/PipelineVisitor.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -35,7 +35,7 @@\n    * @param pipeline to visit.\n    * @param pipelineOptions pipeline options.\n    */\n-  PipelineVisitor(final Pipeline pipeline, final NemoPipelineOptions pipelineOptions) {\n+  public PipelineVisitor(final Pipeline pipeline, final NemoPipelineOptions pipelineOptions) {\n     this.context = new PipelineTranslationContext(pipeline, pipelineOptions);\n   }\n \n@@ -61,7 +61,7 @@ public void leaveCompositeTransform(final TransformHierarchy.Node node) {\n   /**\n    * @return the converted pipeline.\n    */\n-  IRDAG getConvertedPipeline() {\n+  public IRDAG getConvertedPipeline() {\n     return new IRDAG(context.getBuilder().build());\n   }\n }"
            },
            {
                "sha": "c2080cf1fb09fccb431631b10a39e3894e78d425",
                "filename": "compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/source/BeamUnboundedSourceVertex.java",
                "status": "modified",
                "additions": 11,
                "deletions": 3,
                "changes": 14,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/source/BeamUnboundedSourceVertex.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/source/BeamUnboundedSourceVertex.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/compiler/frontend/beam/src/main/java/org/apache/nemo/compiler/frontend/beam/source/BeamUnboundedSourceVertex.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.nemo.common.ir.Readable;\n import org.apache.nemo.common.ir.vertex.IRVertex;\n import org.apache.nemo.common.ir.vertex.SourceVertex;\n+import org.apache.nemo.common.test.EmptyComponents;\n import org.joda.time.Instant;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -81,10 +82,17 @@ public boolean isBounded() {\n \n   @Override\n   public List<Readable<Object>> getReadables(final int desiredNumOfSplits) throws Exception {\n+\n     final List<Readable<Object>> readables = new ArrayList<>();\n-    source.split(desiredNumOfSplits, null)\n-      .forEach(unboundedSource -> readables.add(new UnboundedSourceReadable<>(unboundedSource)));\n-    return readables;\n+    if (source != null) {\n+      source.split(desiredNumOfSplits, null)\n+        .forEach(unboundedSource -> readables.add(new UnboundedSourceReadable<>(unboundedSource)));\n+      return readables;\n+    } else {\n+      // TODO #333: Remove SourceVertex#clearInternalStates\n+      final SourceVertex emptySourceVertex = new EmptyComponents.EmptySourceVertex(\"EMPTY\");\n+      return emptySourceVertex.getReadables(desiredNumOfSplits);\n+    }\n   }\n \n   @Override"
            },
            {
                "sha": "274824945e7def6e1e12dfb58bab718f618bedf4",
                "filename": "examples/beam/pom.xml",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/pom.xml",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/pom.xml?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -36,6 +36,12 @@ under the License.\n             <artifactId>nemo-compiler-frontend-beam</artifactId>\n             <version>${project.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.nemo</groupId>\n+            <artifactId>nemo-client</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>com.github.fommil.netlib</groupId>\n             <artifactId>all</artifactId>"
            },
            {
                "sha": "84dcc930337abbac437129c48d29e0c7a5f34820",
                "filename": "examples/beam/src/main/java/org/apache/nemo/examples/beam/AlternatingLeastSquare.java",
                "status": "modified",
                "additions": 2,
                "deletions": 5,
                "changes": 7,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/AlternatingLeastSquare.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/AlternatingLeastSquare.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/src/main/java/org/apache/nemo/examples/beam/AlternatingLeastSquare.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -20,12 +20,10 @@\n \n import com.github.fommil.netlib.BLAS;\n import com.github.fommil.netlib.LAPACK;\n-import org.apache.nemo.compiler.frontend.beam.NemoRunner;\n import org.apache.nemo.compiler.frontend.beam.transform.LoopCompositeTransform;\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.coders.CoderProviders;\n import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.*;\n import org.apache.beam.sdk.values.KV;\n import org.apache.beam.sdk.values.PCollection;\n@@ -353,7 +351,7 @@ public void processElement(final ProcessContext c) throws Exception {\n    * Main function for the ALS BEAM program.\n    * @param args arguments.\n    */\n-  public static void main(final String[] args) {\n+  public static void main(final String[] args) throws ClassNotFoundException {\n     final Long start = System.currentTimeMillis();\n     LOG.info(Arrays.toString(args));\n     final String inputFilePath = args[0];\n@@ -374,8 +372,7 @@ public static void main(final String[] args) {\n       outputFilePath = \"\";\n     }\n \n-    final PipelineOptions options = PipelineOptionsFactory.create();\n-    options.setRunner(NemoRunner.class);\n+    final PipelineOptions options = NemoPipelineOptionsFactory.create();\n     options.setJobName(\"ALS\");\n     options.setStableUniqueNames(PipelineOptions.CheckEnabled.OFF);\n "
            },
            {
                "sha": "06588e61e6e9a1154a4bec1344aac479640ed1a1",
                "filename": "examples/beam/src/main/java/org/apache/nemo/examples/beam/AlternatingLeastSquareInefficient.java",
                "status": "modified",
                "additions": 2,
                "deletions": 5,
                "changes": 7,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/AlternatingLeastSquareInefficient.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/AlternatingLeastSquareInefficient.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/src/main/java/org/apache/nemo/examples/beam/AlternatingLeastSquareInefficient.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -19,11 +19,9 @@\n package org.apache.nemo.examples.beam;\n \n import org.apache.nemo.compiler.frontend.beam.transform.LoopCompositeTransform;\n-import org.apache.nemo.compiler.frontend.beam.NemoRunner;\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.coders.CoderProviders;\n import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.Combine;\n import org.apache.beam.sdk.transforms.DoFn;\n import org.apache.beam.sdk.transforms.ParDo;\n@@ -102,7 +100,7 @@ private AlternatingLeastSquareInefficient() {\n    * Main function for the ALS BEAM program.\n    * @param args arguments.\n    */\n-  public static void main(final String[] args) {\n+  public static void main(final String[] args) throws ClassNotFoundException {\n     final Long start = System.currentTimeMillis();\n     LOG.info(Arrays.toString(args));\n     final String inputFilePath = args[0];\n@@ -115,8 +113,7 @@ public static void main(final String[] args) {\n       lambda = 0.05;\n     }\n \n-    final PipelineOptions options = PipelineOptionsFactory.create();\n-    options.setRunner(NemoRunner.class);\n+    final PipelineOptions options = NemoPipelineOptionsFactory.create();\n     options.setJobName(\"ALS\");\n     options.setStableUniqueNames(PipelineOptions.CheckEnabled.OFF);\n "
            },
            {
                "sha": "522eee24335d17c1865ceb41d1228dcd41255f9c",
                "filename": "examples/beam/src/main/java/org/apache/nemo/examples/beam/Broadcast.java",
                "status": "modified",
                "additions": 1,
                "deletions": 4,
                "changes": 5,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/Broadcast.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/Broadcast.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/src/main/java/org/apache/nemo/examples/beam/Broadcast.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -18,10 +18,8 @@\n  */\n package org.apache.nemo.examples.beam;\n \n-import org.apache.nemo.compiler.frontend.beam.NemoRunner;\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.DoFn;\n import org.apache.beam.sdk.transforms.ParDo;\n import org.apache.beam.sdk.transforms.View;\n@@ -48,8 +46,7 @@ private Broadcast() {\n   public static void main(final String[] args) {\n     final String inputFilePath = args[0];\n     final String outputFilePath = args[1];\n-    final PipelineOptions options = PipelineOptionsFactory.create();\n-    options.setRunner(NemoRunner.class);\n+    final PipelineOptions options = NemoPipelineOptionsFactory.create();\n \n     final Pipeline p = Pipeline.create(options);\n     final PCollection<String> elemCollection = GenericSourceSink.read(p, inputFilePath);"
            },
            {
                "sha": "2b595f61ad285148ff59b2a704bd66c2a0978bb9",
                "filename": "examples/beam/src/main/java/org/apache/nemo/examples/beam/MinimalWordCount.java",
                "status": "modified",
                "additions": 1,
                "deletions": 5,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/MinimalWordCount.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/MinimalWordCount.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/src/main/java/org/apache/nemo/examples/beam/MinimalWordCount.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -20,15 +20,12 @@\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.io.TextIO;\n import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.Count;\n import org.apache.beam.sdk.transforms.Filter;\n import org.apache.beam.sdk.transforms.FlatMapElements;\n import org.apache.beam.sdk.transforms.MapElements;\n import org.apache.beam.sdk.values.KV;\n import org.apache.beam.sdk.values.TypeDescriptors;\n-import org.apache.nemo.compiler.frontend.beam.NemoPipelineOptions;\n-import org.apache.nemo.compiler.frontend.beam.NemoRunner;\n \n import java.util.Arrays;\n /**\n@@ -47,8 +44,7 @@ private MinimalWordCount() {\n   public static void main(final String[] args) {\n     final String inputFilePath = args[0];\n     final String outputFilePath = args[1];\n-    final PipelineOptions options = PipelineOptionsFactory.create().as(NemoPipelineOptions.class);\n-    options.setRunner(NemoRunner.class);\n+    final PipelineOptions options = NemoPipelineOptionsFactory.create();\n     options.setJobName(\"MinimalWordCount\");\n     // Create the Pipeline object with the options we defined above\n     final Pipeline p = Pipeline.create(options);"
            },
            {
                "sha": "7a671fab0e5b6fb2e47aefa93fcb8f2016ab9c52",
                "filename": "examples/beam/src/main/java/org/apache/nemo/examples/beam/MultinomialLogisticRegression.java",
                "status": "modified",
                "additions": 1,
                "deletions": 4,
                "changes": 5,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/MultinomialLogisticRegression.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/MultinomialLogisticRegression.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/src/main/java/org/apache/nemo/examples/beam/MultinomialLogisticRegression.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -19,11 +19,9 @@\n package org.apache.nemo.examples.beam;\n \n import org.apache.nemo.compiler.frontend.beam.transform.LoopCompositeTransform;\n-import org.apache.nemo.compiler.frontend.beam.NemoRunner;\n import org.apache.nemo.common.Pair;\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.*;\n import org.apache.beam.sdk.transforms.join.CoGbkResult;\n import org.apache.beam.sdk.transforms.join.CoGroupByKey;\n@@ -419,8 +417,7 @@ public static void main(final String[] args) {\n       initialModelKeys.add(i);\n     }\n \n-    final PipelineOptions options = PipelineOptionsFactory.create();\n-    options.setRunner(NemoRunner.class);\n+    final PipelineOptions options = NemoPipelineOptionsFactory.create();\n     options.setJobName(\"MLR\");\n     options.setStableUniqueNames(PipelineOptions.CheckEnabled.OFF);\n "
            },
            {
                "sha": "000d2380013a0a4cdcc62c0d56d997cb1e866975",
                "filename": "examples/beam/src/main/java/org/apache/nemo/examples/beam/NemoPipelineOptionsFactory.java",
                "status": "added",
                "additions": 49,
                "deletions": 0,
                "changes": 49,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/NemoPipelineOptionsFactory.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/NemoPipelineOptionsFactory.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/src/main/java/org/apache/nemo/examples/beam/NemoPipelineOptionsFactory.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.nemo.examples.beam;\n+\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n+import org.apache.nemo.compiler.frontend.beam.NemoPipelineOptions;\n+\n+/**\n+ * NemoPipelineOptionsFactory that creates nemo pipeline options.\n+ */\n+final class NemoPipelineOptionsFactory {\n+\n+  private NemoPipelineOptionsFactory() {\n+  }\n+\n+  /**\n+   * Create a PipelineOptions for nemo runner.\n+   * @return pipeline options\n+   */\n+  public static PipelineOptions create() {\n+    final PipelineOptions options = PipelineOptionsFactory.create().as(NemoPipelineOptions.class);\n+    try {\n+      options.setRunner((Class<? extends PipelineRunner<?>>)\n+        Class.forName(\"org.apache.nemo.client.beam.NemoRunner\"));\n+      return options;\n+    } catch (final ClassNotFoundException e) {\n+      e.printStackTrace();\n+      throw new RuntimeException(e);\n+    }\n+  }\n+}"
            },
            {
                "sha": "e2a829d888e194bf54c7203ff6dcb35b53eabf0d",
                "filename": "examples/beam/src/main/java/org/apache/nemo/examples/beam/NetworkTraceAnalysis.java",
                "status": "modified",
                "additions": 1,
                "deletions": 5,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/NetworkTraceAnalysis.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/NetworkTraceAnalysis.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/src/main/java/org/apache/nemo/examples/beam/NetworkTraceAnalysis.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -18,11 +18,8 @@\n  */\n package org.apache.nemo.examples.beam;\n \n-import org.apache.nemo.compiler.frontend.beam.NemoPipelineOptions;\n-import org.apache.nemo.compiler.frontend.beam.NemoRunner;\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.*;\n import org.apache.beam.sdk.transforms.join.CoGbkResult;\n import org.apache.beam.sdk.transforms.join.CoGroupByKey;\n@@ -58,8 +55,7 @@ public static void main(final String[] args) {\n     final String input0FilePath = args[0];\n     final String input1FilePath = args[1];\n     final String outputFilePath = args[2];\n-    final PipelineOptions options = PipelineOptionsFactory.create().as(NemoPipelineOptions.class);\n-    options.setRunner(NemoRunner.class);\n+    final PipelineOptions options = NemoPipelineOptionsFactory.create();\n     options.setJobName(\"NetworkTraceAnalysis\");\n \n     // Given \"4 0.0 192.168.3.1 -> 192.168.0.2 Len=29\", this finds \"192.168.3.1\", \"192.168.0.2\" and \"29\""
            },
            {
                "sha": "c4bf5d8dab21fba62b61aa6fd8369389fa781e43",
                "filename": "examples/beam/src/main/java/org/apache/nemo/examples/beam/PartitionWordsByLength.java",
                "status": "modified",
                "additions": 1,
                "deletions": 5,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/PartitionWordsByLength.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/PartitionWordsByLength.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/src/main/java/org/apache/nemo/examples/beam/PartitionWordsByLength.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -18,11 +18,8 @@\n  */\n package org.apache.nemo.examples.beam;\n \n-import org.apache.nemo.compiler.frontend.beam.NemoPipelineOptions;\n-import org.apache.nemo.compiler.frontend.beam.NemoRunner;\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.*;\n import org.apache.beam.sdk.values.*;\n \n@@ -46,8 +43,7 @@ private PartitionWordsByLength() {\n   public static void main(final String[] args) {\n     final String inputFilePath = args[0];\n     final String outputFilePath = args[1];\n-    final PipelineOptions options = PipelineOptionsFactory.create().as(NemoPipelineOptions.class);\n-    options.setRunner(NemoRunner.class);\n+    final PipelineOptions options = NemoPipelineOptionsFactory.create();\n     options.setJobName(\"PartitionWordsByLength\");\n \n     // {} here is required for preserving type information."
            },
            {
                "sha": "268f4bc8f4b598b6ae29cd51eaa9d5937f8d6da4",
                "filename": "examples/beam/src/main/java/org/apache/nemo/examples/beam/PerKeyMedian.java",
                "status": "modified",
                "additions": 1,
                "deletions": 5,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/PerKeyMedian.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/PerKeyMedian.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/src/main/java/org/apache/nemo/examples/beam/PerKeyMedian.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -18,11 +18,8 @@\n  */\n package org.apache.nemo.examples.beam;\n \n-import org.apache.nemo.compiler.frontend.beam.NemoPipelineOptions;\n-import org.apache.nemo.compiler.frontend.beam.NemoRunner;\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.*;\n import org.apache.beam.sdk.values.KV;\n import org.apache.beam.sdk.values.PCollection;\n@@ -52,8 +49,7 @@ private PerKeyMedian() {\n   public static void main(final String[] args) {\n     final String inputFilePath = args[0];\n     final String outputFilePath = args[1];\n-    final PipelineOptions options = PipelineOptionsFactory.create().as(NemoPipelineOptions.class);\n-    options.setRunner(NemoRunner.class);\n+    final PipelineOptions options = NemoPipelineOptionsFactory.create();\n     options.setJobName(\"PerKeyMedian\");\n \n     final Pipeline p = Pipeline.create(options);"
            },
            {
                "sha": "e46946f54c0e6d238d0d5eac39350a441b730d53",
                "filename": "examples/beam/src/main/java/org/apache/nemo/examples/beam/PerPercentileAverage.java",
                "status": "modified",
                "additions": 1,
                "deletions": 5,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/PerPercentileAverage.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/PerPercentileAverage.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/src/main/java/org/apache/nemo/examples/beam/PerPercentileAverage.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -19,12 +19,9 @@\n package org.apache.nemo.examples.beam;\n \n import com.google.common.collect.Lists;\n-import org.apache.nemo.compiler.frontend.beam.NemoPipelineOptions;\n-import org.apache.nemo.compiler.frontend.beam.NemoRunner;\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.coders.SerializableCoder;\n import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.*;\n import org.apache.beam.sdk.values.KV;\n import org.apache.beam.sdk.values.PCollection;\n@@ -51,8 +48,7 @@ private PerPercentileAverage() {\n   public static void main(final String[] args) {\n     final String inputFilePath = args[0];\n     final String outputFilePath = args[1];\n-    final PipelineOptions options = PipelineOptionsFactory.create().as(NemoPipelineOptions.class);\n-    options.setRunner(NemoRunner.class);\n+    final PipelineOptions options = NemoPipelineOptionsFactory.create();\n     options.setJobName(\"PerPercentileAverage\");\n \n     final Pipeline p = Pipeline.create(options);"
            },
            {
                "sha": "84e20fd08cac53e55b4ea58c8521b02081aa2922",
                "filename": "examples/beam/src/main/java/org/apache/nemo/examples/beam/SimpleSumSQL.java",
                "status": "modified",
                "additions": 1,
                "deletions": 5,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/SimpleSumSQL.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/SimpleSumSQL.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/src/main/java/org/apache/nemo/examples/beam/SimpleSumSQL.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -21,12 +21,9 @@\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.extensions.sql.SqlTransform;\n import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.schemas.Schema;\n import org.apache.beam.sdk.transforms.*;\n import org.apache.beam.sdk.values.*;\n-import org.apache.nemo.compiler.frontend.beam.NemoPipelineOptions;\n-import org.apache.nemo.compiler.frontend.beam.NemoRunner;\n \n import java.util.List;\n import java.util.stream.Collectors;\n@@ -49,8 +46,7 @@ private SimpleSumSQL() {\n   public static void main(final String[] args) {\n     final String outputFilePath = args[0];\n \n-    final PipelineOptions options = PipelineOptionsFactory.create().as(NemoPipelineOptions.class);\n-    options.setRunner(NemoRunner.class);\n+    final PipelineOptions options = NemoPipelineOptionsFactory.create();\n     options.setJobName(\"SimpleSumSQL\");\n     final Pipeline p = Pipeline.create(options);\n "
            },
            {
                "sha": "d01a41e418639620106a99e6f4c3e5be153c8ec4",
                "filename": "examples/beam/src/main/java/org/apache/nemo/examples/beam/WindowedBroadcast.java",
                "status": "modified",
                "additions": 1,
                "deletions": 5,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/WindowedBroadcast.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/WindowedBroadcast.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/src/main/java/org/apache/nemo/examples/beam/WindowedBroadcast.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -21,14 +21,11 @@\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.io.GenerateSequence;\n import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.*;\n import org.apache.beam.sdk.transforms.windowing.SlidingWindows;\n import org.apache.beam.sdk.transforms.windowing.Window;\n import org.apache.beam.sdk.values.PCollection;\n import org.apache.beam.sdk.values.PCollectionView;\n-import org.apache.nemo.compiler.frontend.beam.NemoPipelineOptions;\n-import org.apache.nemo.compiler.frontend.beam.NemoRunner;\n import org.joda.time.Duration;\n import org.joda.time.Instant;\n \n@@ -65,8 +62,7 @@ public static void main(final String[] args) {\n       .<Long>into(SlidingWindows.of(Duration.standardSeconds(2))\n       .every(Duration.standardSeconds(1)));\n \n-    final PipelineOptions options = PipelineOptionsFactory.create().as(NemoPipelineOptions.class);\n-    options.setRunner(NemoRunner.class);\n+    final PipelineOptions options = NemoPipelineOptionsFactory.create();\n     options.setJobName(\"WindowedBroadcast\");\n \n     final Pipeline p = Pipeline.create(options);"
            },
            {
                "sha": "eaa3f058992b63cf64a141cf5bc9baa6c23411eb",
                "filename": "examples/beam/src/main/java/org/apache/nemo/examples/beam/WindowedWordCount.java",
                "status": "modified",
                "additions": 1,
                "deletions": 5,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/WindowedWordCount.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/WindowedWordCount.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/src/main/java/org/apache/nemo/examples/beam/WindowedWordCount.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -21,15 +21,12 @@\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.io.GenerateSequence;\n import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.*;\n import org.apache.beam.sdk.transforms.windowing.FixedWindows;\n import org.apache.beam.sdk.transforms.windowing.SlidingWindows;\n import org.apache.beam.sdk.transforms.windowing.Window;\n import org.apache.beam.sdk.values.KV;\n import org.apache.beam.sdk.values.PCollection;\n-import org.apache.nemo.compiler.frontend.beam.NemoPipelineOptions;\n-import org.apache.nemo.compiler.frontend.beam.NemoRunner;\n import org.joda.time.Duration;\n import org.joda.time.Instant;\n \n@@ -110,8 +107,7 @@ public static void main(final String[] args) {\n         .every(Duration.standardSeconds(5)));\n     }\n \n-    final PipelineOptions options = PipelineOptionsFactory.create().as(NemoPipelineOptions.class);\n-    options.setRunner(NemoRunner.class);\n+    final PipelineOptions options = NemoPipelineOptionsFactory.create();\n     options.setJobName(\"WindowedWordCount\");\n \n     final Pipeline p = Pipeline.create(options);"
            },
            {
                "sha": "6ffaa2e25ce39909061fb7397e0a13baceeac541",
                "filename": "examples/beam/src/main/java/org/apache/nemo/examples/beam/WordCount.java",
                "status": "modified",
                "additions": 1,
                "deletions": 5,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/WordCount.java",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/beam/src/main/java/org/apache/nemo/examples/beam/WordCount.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/beam/src/main/java/org/apache/nemo/examples/beam/WordCount.java?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -18,11 +18,8 @@\n  */\n package org.apache.nemo.examples.beam;\n \n-import org.apache.nemo.compiler.frontend.beam.NemoPipelineOptions;\n-import org.apache.nemo.compiler.frontend.beam.NemoRunner;\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.*;\n import org.apache.beam.sdk.values.KV;\n import org.apache.beam.sdk.values.PCollection;\n@@ -44,8 +41,7 @@ private WordCount() {\n   public static void main(final String[] args) {\n     final String inputFilePath = args[0];\n     final String outputFilePath = args[1];\n-    final PipelineOptions options = PipelineOptionsFactory.create().as(NemoPipelineOptions.class);\n-    options.setRunner(NemoRunner.class);\n+    final PipelineOptions options = NemoPipelineOptionsFactory.create();\n     options.setJobName(\"WordCount\");\n \n     final Pipeline p = Pipeline.create(options);"
            },
            {
                "sha": "23a4ee18af41e51ba1a85ebcc2d74024ca4f0529",
                "filename": "examples/nexmark/pom.xml",
                "status": "added",
                "additions": 75,
                "deletions": 0,
                "changes": 75,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/nexmark/pom.xml",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/nexmark/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/nexmark/pom.xml?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -0,0 +1,75 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>nemo-examples</artifactId>\n+    <groupId>org.apache.nemo</groupId>\n+    <version>0.2-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>nexmark</artifactId>\n+  <name>Nemo Examples: NEXMark</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.beam</groupId>\n+      <artifactId>beam-sdks-java-nexmark</artifactId>\n+      <version>${beam.version}</version>\n+    </dependency>\n+\n+    <!-- https://mvnrepository.com/artifact/org.apache.beam/beam-sdks-java-io-google-cloud-platform -->\n+    <dependency>\n+      <groupId>org.apache.beam</groupId>\n+      <artifactId>beam-sdks-java-io-google-cloud-platform</artifactId>\n+      <version>${beam.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-shade-plugin</artifactId>\n+        <version>3.0.0</version>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>shade</goal>\n+            </goals>\n+            <configuration>\n+              <outputFile>\n+                ${project.build.directory}/${project.artifactId}-${project.version}-shaded.jar\n+              </outputFile>\n+              <transformers>\n+                <!-- Required for using beam-hadoop: See https://stackoverflow.com/questions/44365545\n+                -->\n+                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\"/>\n+              </transformers>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"
            },
            {
                "sha": "8be9bd139bc636bd35174d789b70064256dcb55e",
                "filename": "examples/pom.xml",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/incubator-nemo/blob/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/pom.xml",
                "raw_url": "https://github.com/apache/incubator-nemo/raw/70978e7ad676263ca8c3b9cc7358cd80aa99d51b/examples/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/incubator-nemo/contents/examples/pom.xml?ref=70978e7ad676263ca8c3b9cc7358cd80aa99d51b",
                "patch": "@@ -32,6 +32,7 @@ under the License.\n   <modules>\n     <module>beam</module>\n     <module>spark</module>\n+    <module>nexmark</module>\n   </modules>\n \n "
            }
        ]
    }
]
