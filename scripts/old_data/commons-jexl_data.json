[
    {
        "commit": "https://github.com/apache/commons-jexl/commit/05044a7c4a04886dc78a48f8fd71127496b9709f",
        "repo": "commons-jexl",
        "parent": "https://github.com/apache/commons-jexl/commit/13cf54fe23674761bf19e087c29139676c363774",
        "message": "JEXL:\nProtect against potential NPE\n\ngit-svn-id: https://svn-us.apache.org/repos/asf/commons/proper/jexl/trunk@1821779 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-jexl_1",
        "file": [
            {
                "sha": "b0c3cae7733e94d9feb4a201c9339e563bd52857",
                "filename": "src/main/java/org/apache/commons/jexl3/internal/introspection/MethodKey.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/commons-jexl/blob/05044a7c4a04886dc78a48f8fd71127496b9709f/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodKey.java",
                "raw_url": "https://github.com/apache/commons-jexl/raw/05044a7c4a04886dc78a48f8fd71127496b9709f/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodKey.java",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodKey.java?ref=05044a7c4a04886dc78a48f8fd71127496b9709f",
                "patch": "@@ -373,7 +373,7 @@ private static boolean isInvocationConvertible(\n             return true;\n         }\n         /* system asssignable, both sides must be array or not */\n-        if (formal.isAssignableFrom(actual) && (actual != null && actual.isArray() == formal.isArray())) {\n+        if (actual != null && formal.isAssignableFrom(actual) && actual.isArray() == formal.isArray()) {\n             return true;\n         }\n         /** catch all... */"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-jexl/commit/e84b08e6c6d7af704e6ae30a4182b52cfa83bd0f",
        "repo": "commons-jexl",
        "parent": "https://github.com/apache/commons-jexl/commit/0b2b0d5a9d30eb02a41316a90c9812c7fd0ef8b1",
        "message": "JEXL:\nProtect against potential NPE\n\ngit-svn-id: https://svn-us.apache.org/repos/asf/commons/proper/jexl/trunk@1821740 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-jexl_2",
        "file": [
            {
                "sha": "2e6114eaa6130bd9bb9dcaba29f300feaf9b66e0",
                "filename": "src/main/java/org/apache/commons/jexl3/JexlArithmetic.java",
                "status": "modified",
                "additions": 10,
                "deletions": 8,
                "changes": 18,
                "blob_url": "https://github.com/apache/commons-jexl/blob/e84b08e6c6d7af704e6ae30a4182b52cfa83bd0f/src/main/java/org/apache/commons/jexl3/JexlArithmetic.java",
                "raw_url": "https://github.com/apache/commons-jexl/raw/e84b08e6c6d7af704e6ae30a4182b52cfa83bd0f/src/main/java/org/apache/commons/jexl3/JexlArithmetic.java",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/main/java/org/apache/commons/jexl3/JexlArithmetic.java?ref=e84b08e6c6d7af704e6ae30a4182b52cfa83bd0f",
                "patch": "@@ -588,14 +588,16 @@ protected Number narrowBigDecimal(Object lhs, Object rhs, BigDecimal bigd) {\n      */\n     public boolean narrowArguments(Object[] args) {\n         boolean narrowed = false;\n-        for (int a = 0; a < args.length; ++a) {\n-            Object arg = args[a];\n-            if (arg instanceof Number) {\n-                Number narg = (Number) arg;\n-                Number narrow = narrow(narg);\n-                if (!narg.equals(narrow)) {\n-                    args[a] = narrow;\n-                    narrowed = true;\n+        if (args != null) {\n+            for (int a = 0; a < args.length; ++a) {\n+                Object arg = args[a];\n+                if (arg instanceof Number) {\n+                    Number narg = (Number) arg;\n+                    Number narrow = narrow(narg);\n+                    if (!narg.equals(narrow)) {\n+                        args[a] = narrow;\n+                        narrowed = true;\n+                    }\n                 }\n             }\n         }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-jexl/commit/4a502824d7e1636d9ac3e1e0c944968fe74be457",
        "repo": "commons-jexl",
        "parent": "https://github.com/apache/commons-jexl/commit/010e325d0ce7ccb95008958f423eb498834c750a",
        "message": "avoid NPE when params[i] is null\n\ngit-svn-id: https://svn-us.apache.org/repos/asf/jakarta/commons/proper/jexl/trunk@513425 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-jexl_3",
        "file": [
            {
                "sha": "0438934c851682ec74df7bf803c8c687c4b7303b",
                "filename": "src/java/org/apache/commons/jexl/util/introspection/Introspector.java",
                "status": "modified",
                "additions": 8,
                "deletions": 8,
                "changes": 16,
                "blob_url": "https://github.com/apache/commons-jexl/blob/4a502824d7e1636d9ac3e1e0c944968fe74be457/src/java/org/apache/commons/jexl/util/introspection/Introspector.java",
                "raw_url": "https://github.com/apache/commons-jexl/raw/4a502824d7e1636d9ac3e1e0c944968fe74be457/src/java/org/apache/commons/jexl/util/introspection/Introspector.java",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/java/org/apache/commons/jexl/util/introspection/Introspector.java?ref=4a502824d7e1636d9ac3e1e0c944968fe74be457",
                "patch": "@@ -27,7 +27,7 @@\n  * object for a particular class given the name of a method\n  * and the parameters to the method in the form of an Object[]\n  *\n- * The first time the Introspector sees a \n+ * The first time the Introspector sees a\n  * class it creates a class method map for the\n  * class in question. Basically the class method map\n  * is a Hashtable where Method objects are keyed by a\n@@ -43,7 +43,7 @@\n  * \"method\" + \"java.lang.String\" + \"java.lang.StringBuffer\"\n  *\n  * This mapping is performed for all the methods in a class\n- * and stored for \n+ * and stored for\n  * @since 1.0\n  * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n  * @author <a href=\"mailto:bob@werken.com\">Bob McWhirter</a>\n@@ -57,7 +57,7 @@\n      *  if interested.\n      */\n \n-    public static final String CACHEDUMP_MSG = \n+    public static final String CACHEDUMP_MSG =\n         \"Introspector : detected classloader change. Dumping cache.\";\n \n     /**\n@@ -72,7 +72,7 @@\n     public Introspector(Log logger) {\n         this.rlog = logger;\n     }\n-   \n+\n     /**\n      * Gets the method defined by <code>name</code> and\n      * <code>params</code> for the Class <code>c</code>.\n@@ -104,12 +104,12 @@ public Method getMethod(Class c, String name, Object[] params) throws Exception\n                 if (i > 0) {\n                     msg.append(\", \");\n                 }\n-                \n-                msg.append(params[i].getClass().getName());\n+\n+                msg.append(null == params[i] ? \"null\" : params[i].getClass().getName());\n             }\n-            \n+\n             msg.append(\") for class \").append(c.getName());\n-            \n+\n             rlog.error(msg.toString());\n         }\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-jexl/commit/c9299a35f8d6daf802e5f091971e8a2fc4d763fe",
        "repo": "commons-jexl",
        "parent": "https://github.com/apache/commons-jexl/commit/e84758a418b9347c65105c4e463f28b95899034d",
        "message": "Reverted spec on bsf-api to something simpler; prepare release fails with NPE otherwise\n\ngit-svn-id: https://svn-us.apache.org/repos/asf/commons/proper/jexl/trunk@927975 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-jexl_4",
        "file": [
            {
                "sha": "d738936310ac2df041d80b61e2958a45beca149a",
                "filename": "pom.xml",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/commons-jexl/blob/c9299a35f8d6daf802e5f091971e8a2fc4d763fe/pom.xml",
                "raw_url": "https://github.com/apache/commons-jexl/raw/c9299a35f8d6daf802e5f091971e8a2fc4d763fe/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/pom.xml?ref=c9299a35f8d6daf802e5f091971e8a2fc4d763fe",
                "patch": "@@ -106,7 +106,7 @@\n         <dependency>\n             <groupId>org.apache.bsf</groupId>\n             <artifactId>bsf-api</artifactId>\n-            <version>[3.0-beta3,)</version>\n+            <version>3.0-beta3</version>\n             <scope>provided</scope>\n         </dependency>\n     </dependencies>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-jexl/commit/dc013efedf7134dd2da4565c90f1f6f7207d42c6",
        "repo": "commons-jexl",
        "parent": "https://github.com/apache/commons-jexl/commit/a80683ce2276554f0e7929e5ed3731a5156d64a1",
        "message": "Script engine must throw NPE if either parameter is null\n\ngit-svn-id: https://svn-us.apache.org/repos/asf/commons/proper/jexl/branches/2.0@799910 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-jexl_5",
        "file": [
            {
                "sha": "fa80364158e8ac6894784f201783bf30e23c3bc3",
                "filename": "src/java/org/apache/commons/jexl/scripting/JexlScriptEngine.java",
                "status": "modified",
                "additions": 7,
                "deletions": 2,
                "changes": 9,
                "blob_url": "https://github.com/apache/commons-jexl/blob/dc013efedf7134dd2da4565c90f1f6f7207d42c6/src/java/org/apache/commons/jexl/scripting/JexlScriptEngine.java",
                "raw_url": "https://github.com/apache/commons-jexl/raw/dc013efedf7134dd2da4565c90f1f6f7207d42c6/src/java/org/apache/commons/jexl/scripting/JexlScriptEngine.java",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/java/org/apache/commons/jexl/scripting/JexlScriptEngine.java?ref=dc013efedf7134dd2da4565c90f1f6f7207d42c6",
                "patch": "@@ -75,6 +75,10 @@ public Bindings createBindings() {\n \n     /** {@inheritDoc} */\n     public Object eval(Reader script, ScriptContext context) throws ScriptException {\n+        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)\n+        if (script == null || context == null) {\n+            throw new NullPointerException(\"script and context must be non-null\");\n+        }\n         BufferedReader reader = new BufferedReader(script);\n         StringBuilder buffer = new StringBuilder();\n         try {\n@@ -98,8 +102,9 @@ public Object eval(Reader script, ScriptContext context) throws ScriptException\n     /** {@inheritDoc} */\n     @SuppressWarnings(\"unchecked\")\n     public Object eval(String scriptText, final ScriptContext context) throws ScriptException {\n-        if (scriptText == null) {\n-            return null;\n+        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)\n+        if (scriptText == null || context == null) {\n+            throw new NullPointerException(\"script and context must be non-null\");\n         }\n         // This is mandated by JSR-223 (end of section SCR.4.3.4.1.2 - Script Execution)\n         context.setAttribute(\"context\", context, ScriptContext.ENGINE_SCOPE);"
            },
            {
                "sha": "3f879bf3807fd53c4771e3e3c7ddb7d3fd2837f8",
                "filename": "src/test/org/apache/commons/jexl/scripting/JexlScriptEngineTest.java",
                "status": "modified",
                "additions": 21,
                "deletions": 0,
                "changes": 21,
                "blob_url": "https://github.com/apache/commons-jexl/blob/dc013efedf7134dd2da4565c90f1f6f7207d42c6/src/test/org/apache/commons/jexl/scripting/JexlScriptEngineTest.java",
                "raw_url": "https://github.com/apache/commons-jexl/raw/dc013efedf7134dd2da4565c90f1f6f7207d42c6/src/test/org/apache/commons/jexl/scripting/JexlScriptEngineTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/test/org/apache/commons/jexl/scripting/JexlScriptEngineTest.java?ref=dc013efedf7134dd2da4565c90f1f6f7207d42c6",
                "patch": "@@ -18,10 +18,12 @@\n \n package org.apache.commons.jexl.scripting;\n \n+import java.io.Reader;\n import java.util.Map;\n \n import javax.script.ScriptEngine;\n import javax.script.ScriptEngineManager;\n+import javax.script.ScriptException;\n \n import junit.framework.TestCase;\n \n@@ -50,6 +52,25 @@ public void testScripting() throws Exception {\n         assertEquals(initialValue,engine.get(\"old\"));\n         assertEquals(newValue,engine.get(\"value\"));\n     }\n+    \n+    public void testNulls() throws Exception {\n+        ScriptEngineManager manager = new ScriptEngineManager();\n+        assertNotNull(\"Manager should not be null\", manager);\n+        ScriptEngine engine = manager.getEngineByName(\"jexl\");\n+        assertNotNull(\"Engine should not be null (name)\", engine);\n+        try {\n+            engine.eval((String)null);\n+            fail(\"Should have caused NPE\");\n+        } catch (NullPointerException e) {\n+            // NOOP\n+        }\n+        try {\n+            engine.eval((Reader)null);\n+            fail(\"Should have caused NPE\");\n+        } catch (NullPointerException e) {\n+            // NOOP\n+        }\n+    }\n \n     public void testEngineNames() throws Exception {\n         ScriptEngine engine;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-jexl/commit/b3ecc91886be91b1da97e519487429101a581fc5",
        "repo": "commons-jexl",
        "parent": "https://github.com/apache/commons-jexl/commit/c9fab5a610fef28803b409ac77db4925270f4922",
        "message": "Fix narrowing of Doubles and Floats which was NPE'ing.\n\ngit-svn-id: https://svn-us.apache.org/repos/asf/jakarta/commons/proper/jexl/trunk@377901 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-jexl_6",
        "file": [
            {
                "sha": "2f00d63f7da769747eceee740e268c22dbb6b0e3",
                "filename": "src/java/org/apache/commons/jexl/parser/ASTMethod.java",
                "status": "modified",
                "additions": 4,
                "deletions": 11,
                "changes": 15,
                "blob_url": "https://github.com/apache/commons-jexl/blob/b3ecc91886be91b1da97e519487429101a581fc5/src/java/org/apache/commons/jexl/parser/ASTMethod.java",
                "raw_url": "https://github.com/apache/commons-jexl/raw/b3ecc91886be91b1da97e519487429101a581fc5/src/java/org/apache/commons/jexl/parser/ASTMethod.java",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/java/org/apache/commons/jexl/parser/ASTMethod.java?ref=b3ecc91886be91b1da97e519487429101a581fc5",
                "patch": "@@ -98,19 +98,15 @@ public Object execute(Object obj, JexlContext jc)\n     private Number narrow(Number original)\n     {\n     \tif (original == null) return null;\n-    \tNumber result = null;\n+    \tNumber result = original;\n     \tif (original instanceof Double || original instanceof Float)\n     \t{\n-    \t\tdouble value = result.doubleValue();\n+    \t\tdouble value = original.doubleValue();\n     \t\tif (value <= Float.MAX_VALUE && value >= Float.MIN_VALUE)\n     \t\t{\n     \t\t\tresult = new Float(result.floatValue());\n     \t\t}\n-    \t\telse\n-    \t\t{\n-    \t\t\t// it was a double\n-    \t\t\tresult = original;\n-    \t\t}\n+   \t\t\t// else it was already a double\n     \t}\n     \telse\n     \t{\n@@ -128,10 +124,7 @@ else if (value <= Integer.MAX_VALUE && value >= Integer.MIN_VALUE)\n \t        {\n \t        \tresult = new Integer((int)value);\n \t        }\n-\t        else\n-\t        {\n-\t        \tresult = original;\n-\t        }\n+   \t\t\t// else it was already a long\n     \t}\n         return result;\n     }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-jexl/commit/5f1fcc9538033d82823bc8e69ba225be5a772194",
        "repo": "commons-jexl",
        "parent": "https://github.com/apache/commons-jexl/commit/158a6018b030def41d77a514990c44df05b9df4b",
        "message": "Various MethodKey fixes:\n * Fix potential NPEs.\n * Reduce visibility of many methods\n * Use Void.class as a signature for null arguments\n * Need only one AmbiguousException\nPatch by Henri Biestro <hbiestro at gmail dot com>.\nJEXL-67\n\n\ngit-svn-id: https://svn-us.apache.org/repos/asf/commons/proper/jexl/branches/2.0@802288 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-jexl_7",
        "file": [
            {
                "sha": "1ed47d686aaaa9ae308884a44af575c6d2487691",
                "filename": "src/main/java/org/apache/commons/jexl/util/introspection/IntrospectorBase.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/commons-jexl/blob/5f1fcc9538033d82823bc8e69ba225be5a772194/src/main/java/org/apache/commons/jexl/util/introspection/IntrospectorBase.java",
                "raw_url": "https://github.com/apache/commons-jexl/raw/5f1fcc9538033d82823bc8e69ba225be5a772194/src/main/java/org/apache/commons/jexl/util/introspection/IntrospectorBase.java",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/main/java/org/apache/commons/jexl/util/introspection/IntrospectorBase.java?ref=5f1fcc9538033d82823bc8e69ba225be5a772194",
                "patch": "@@ -174,7 +174,7 @@ public CacheMiss() {}\n                         l.add(ictor);\n                     }\n                     // try to find one\n-                    ctor = MethodKey.CONSTRUCTORS.getMostSpecific(l, key.getParameters());\n+                    ctor = key.getMostSpecific(l);\n                     if (ctor != null) {\n                         constructorsMap.put(key, ctor);\n                     } else {"
            },
            {
                "sha": "3ff5c7470a05c6c410065da73f2cf99642a15410",
                "filename": "src/main/java/org/apache/commons/jexl/util/introspection/MethodKey.java",
                "status": "modified",
                "additions": 33,
                "deletions": 17,
                "changes": 50,
                "blob_url": "https://github.com/apache/commons-jexl/blob/5f1fcc9538033d82823bc8e69ba225be5a772194/src/main/java/org/apache/commons/jexl/util/introspection/MethodKey.java",
                "raw_url": "https://github.com/apache/commons-jexl/raw/5f1fcc9538033d82823bc8e69ba225be5a772194/src/main/java/org/apache/commons/jexl/util/introspection/MethodKey.java",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/main/java/org/apache/commons/jexl/util/introspection/MethodKey.java?ref=5f1fcc9538033d82823bc8e69ba225be5a772194",
                "patch": "@@ -40,7 +40,7 @@\n  * A key can be constructed either from arguments (array of objects) or from parameters\n  * (array of class).\n  * Roughly 3x faster than string key to access the map & uses less memory.\n- * \n+ *\n  * For the parameters methods:\n  * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n  * @author <a href=\"mailto:bob@werken.com\">Bob McWhirter</a>\n@@ -180,6 +180,26 @@ public String debugString() {\n         return builder.toString();\n     }\n \n+    /**\n+     * Gets the most specific method that is applicable to the parameters of this key.\n+     * @param methods a list of methods.\n+     * @return the most specific method.\n+     * @throws MethodKey.AmbiguousException if there is more than one.\n+     */\n+    public Method getMostSpecific(List<Method> methods) {\n+        return METHODS.getMostSpecific(methods, params);\n+    }\n+\n+    /**\n+     * Gets the most specific constructor that is applicable to the parameters of this key.\n+     * @param methods a list of constructors.\n+     * @return the most specific constructor.\n+     * @throws MethodKey.AmbiguousException if there is more than one.\n+     */\n+    public Constructor<?> getMostSpecific(List<Constructor<?>> methods) {\n+        return CONSTRUCTORS.getMostSpecific(methods, params);\n+    }\n+\n     /**\n      * whether a method/ctor is more specific than a previously compared one.\n      */\n@@ -207,9 +227,9 @@ public String debugString() {\n \n     /**\n      * Utility for parameters matching.\n-     * @param <T> method or contructor\n+     * @param <T> Method or Constructor\n      */\n-     public abstract static class Parameters<T> {\n+     private abstract static class Parameters<T> {\n         /**\n          * Extract the parameter types from its applicable argument.\n          * @param app a method or constructor\n@@ -225,7 +245,7 @@ public String debugString() {\n          * @return the most specific method.\n          * @throws MethodKey.AmbiguousException if there is more than one.\n          */\n-        protected T getMostSpecific(List<T> methods, Class<?>[] classes) {\n+        private T getMostSpecific(List<T> methods, Class<?>[] classes) {\n             LinkedList<T> applicables = getApplicables(methods, classes);\n \n             if (applicables.isEmpty()) {\n@@ -357,7 +377,7 @@ private int moreSpecific(Class<?>[] c1, Class<?>[] c2) {\n          *         formal and actual arguments matches, and argument types are assignable\n          *         to formal types through a method invocation conversion).\n          */\n-        protected LinkedList<T> getApplicables(List<T> methods, Class<?>[] classes) {\n+        private LinkedList<T> getApplicables(List<T> methods, Class<?>[] classes) {\n             LinkedList<T> list = new LinkedList<T>();\n \n             for (Iterator<T> imethod = methods.iterator(); imethod.hasNext();) {\n@@ -438,13 +458,8 @@ private boolean isApplicable(T method, Class<?>[] classes) {\n          */\n         private boolean isConvertible(Class<?> formal, Class<?> actual,\n                 boolean possibleVarArg) {\n-            // if we see Void.class as the class of an argument most likely\n-            // obtained through a MethodKey, we consider it\n-            // as a wildcard; non primitives are thus convertible.\n-            if (actual.equals(Void.class) && !formal.isPrimitive()) {\n-                return true;\n-            }\n-            return isInvocationConvertible(formal, actual, possibleVarArg);\n+            // if we see Void.class, the argument was null\n+            return isInvocationConvertible(formal, actual.equals(Void.class)? null : actual, possibleVarArg);\n         }\n \n         /**\n@@ -458,7 +473,8 @@ private boolean isConvertible(Class<?> formal, Class<?> actual,\n          */\n         private boolean isStrictConvertible(Class<?> formal, Class<?> actual,\n                 boolean possibleVarArg) {\n-            return isStrictInvocationConvertible(formal, actual, possibleVarArg);\n+            // if we see Void.class, the argument was null\n+            return isStrictInvocationConvertible(formal, actual.equals(Void.class)? null : actual, possibleVarArg);\n         }\n \n     }\n@@ -531,7 +547,7 @@ public static boolean isInvocationConvertible(Class<?> formal,\n \n         /* Check for vararg conversion. */\n         if (possibleVarArg && formal.isArray()) {\n-            if (actual.isArray()) {\n+            if (actual != null && actual.isArray()) {\n                 actual = actual.getComponentType();\n             }\n             return isInvocationConvertible(formal.getComponentType(),\n@@ -595,7 +611,7 @@ public static boolean isStrictInvocationConvertible(Class<?> formal,\n \n         /* Check for vararg conversion. */\n         if (possibleVarArg && formal.isArray()) {\n-            if (actual.isArray()) {\n+            if (actual != null && actual.isArray()) {\n                 actual = actual.getComponentType();\n             }\n             return isStrictInvocationConvertible(formal.getComponentType(),\n@@ -607,7 +623,7 @@ public static boolean isStrictInvocationConvertible(Class<?> formal,\n     /**\n      * The parameter matching service for methods.\n      */\n-    public static final Parameters<Method> METHODS = new Parameters<Method>() {\n+    private static final Parameters<Method> METHODS = new Parameters<Method>() {\n         @Override\n         protected Class<?>[] getParameterTypes(Method app) {\n             return app.getParameterTypes();\n@@ -618,7 +634,7 @@ public static boolean isStrictInvocationConvertible(Class<?> formal,\n     /**\n      * The parameter matching service for constructors.\n      */\n-    public static final Parameters<Constructor<?>> CONSTRUCTORS = new Parameters<Constructor<?>>() {\n+    private static final Parameters<Constructor<?>> CONSTRUCTORS = new Parameters<Constructor<?>>() {\n         @Override\n         protected Class<?>[] getParameterTypes(Constructor<?> app) {\n             return app.getParameterTypes();"
            },
            {
                "sha": "beeaf0bab914c8807546e91cc8b0bba14a5bf926",
                "filename": "src/main/java/org/apache/commons/jexl/util/introspection/MethodMap.java",
                "status": "modified",
                "additions": 1,
                "deletions": 15,
                "changes": 16,
                "blob_url": "https://github.com/apache/commons-jexl/blob/5f1fcc9538033d82823bc8e69ba225be5a772194/src/main/java/org/apache/commons/jexl/util/introspection/MethodMap.java",
                "raw_url": "https://github.com/apache/commons-jexl/raw/5f1fcc9538033d82823bc8e69ba225be5a772194/src/main/java/org/apache/commons/jexl/util/introspection/MethodMap.java",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/main/java/org/apache/commons/jexl/util/introspection/MethodMap.java?ref=5f1fcc9538033d82823bc8e69ba225be5a772194",
                "patch": "@@ -122,21 +122,7 @@ Method find(MethodKey methodKey) throws MethodKey.AmbiguousException {\n         if (methodList == null) {\n             return null;\n         }\n-        return MethodKey.METHODS.getMostSpecific(methodList, methodKey.getParameters());\n+        return methodKey.getMostSpecific(methodList);\n     } // CSON: RedundantThrows\n \n-\n-    /**\n-     * Simple distinguishable exception, used when\n-     * we run across ambiguous overloading.  Caught\n-     * by the introspector.\n-     */\n-    public static class AmbiguousException extends RuntimeException {\n-        /**\n-         * Version Id for serializable.\n-         */\n-        private static final long serialVersionUID = -2314636505414551663L;\n-    }\n-\n-\n }\n\\ No newline at end of file"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/commons-jexl/commit/4e2684b3bf72c6b719bd141fe555553158548a6b",
        "repo": "commons-jexl",
        "parent": "https://github.com/apache/commons-jexl/commit/e42b28d69475b365fbf11db17a0f362417461051",
        "message": "JEXL-62\nAvoid NPE in Interpreter when () omitted from method with no parameters (e.g. var.hashCode)\nIncludes test case.\n\nThanks for patch by Henri Biestro <hbiestro at gmail dot com>.\n\ngit-svn-id: https://svn-us.apache.org/repos/asf/commons/proper/jexl/branches/2.0@799903 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "commons-jexl_8",
        "file": [
            {
                "sha": "7d514a690f1701bbd77c152206461d21d39ce2a6",
                "filename": "src/java/org/apache/commons/jexl/Interpreter.java",
                "status": "modified",
                "additions": 10,
                "deletions": 4,
                "changes": 14,
                "blob_url": "https://github.com/apache/commons-jexl/blob/4e2684b3bf72c6b719bd141fe555553158548a6b/src/java/org/apache/commons/jexl/Interpreter.java",
                "raw_url": "https://github.com/apache/commons-jexl/raw/4e2684b3bf72c6b719bd141fe555553158548a6b/src/java/org/apache/commons/jexl/Interpreter.java",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/java/org/apache/commons/jexl/Interpreter.java?ref=4e2684b3bf72c6b719bd141fe555553158548a6b",
                "patch": "@@ -279,6 +279,7 @@ public Object visit(ASTAssignment node, Object data) {\n         JexlNode propertyNode = null;\n         Object property = null;\n         boolean isVariable = true;\n+        int v = 0;\n         StringBuilder variableName = null;\n         // 1: follow children till penultimate\n         int last = left.jjtGetNumChildren() - 1;\n@@ -293,9 +294,11 @@ public Object visit(ASTAssignment node, Object data) {\n             // if we get null back as a result, check for an ant variable\n             if (isVariable) {\n                 String name = ((ASTIdentifier) objectNode).image;\n-                if (c == 0) {\n+                if (v == 0) {\n                     variableName = new StringBuilder(name);\n-                } else {\n+                    v = 1;\n+                }\n+                for(; v <= c; ++v) {\n                     variableName.append('.');\n                     variableName.append(name);\n                 }\n@@ -958,16 +961,19 @@ public Object visit(ASTReference node, Object data) {\n         StringBuilder variableName = null;\n         Map<String, ?> vars = context.getVars();\n         boolean isVariable = true;\n+        int v = 0;\n         for (int i = 0; i < numChildren; i++) {\n             JexlNode theNode = node.jjtGetChild(i);\n             isVariable &= (theNode instanceof ASTIdentifier);\n             result = theNode.jjtAccept(this, result);\n             // if we get null back a result, check for an ant variable\n             if (result == null && isVariable) {\n                 String name = ((ASTIdentifier) theNode).image;\n-                if (i == 0) {\n+                if (v == 0) {\n                     variableName = new StringBuilder(name);\n-                } else {\n+                    v = 1;\n+                }\n+                for(; v <= i; ++v) {\n                     variableName.append('.');\n                     variableName.append(name);\n                 }"
            },
            {
                "sha": "25f946ff539a7eda19095610c76d515e57b31ee0",
                "filename": "src/test/org/apache/commons/jexl/IssuesTest.java",
                "status": "modified",
                "additions": 31,
                "deletions": 0,
                "changes": 31,
                "blob_url": "https://github.com/apache/commons-jexl/blob/4e2684b3bf72c6b719bd141fe555553158548a6b/src/test/org/apache/commons/jexl/IssuesTest.java",
                "raw_url": "https://github.com/apache/commons-jexl/raw/4e2684b3bf72c6b719bd141fe555553158548a6b/src/test/org/apache/commons/jexl/IssuesTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/test/org/apache/commons/jexl/IssuesTest.java?ref=4e2684b3bf72c6b719bd141fe555553158548a6b",
                "patch": "@@ -183,4 +183,35 @@ public void test11() throws Exception {\n         }\n     }\n \n+    // JEXL-62\n+    public void test62() throws Exception {\n+        JexlContext ctxt;\n+        JexlEngine jexl = new JexlEngine();\n+        jexl.setSilent(true); // to avoid throwing JexlException on null method call\n+        \n+        Script jscript;\n+\n+        ctxt = JexlHelper.createContext();\n+        jscript = jexl.createScript(\"dummy.hashCode()\");\n+        assertEquals(jscript.getText(), null, jscript.execute(ctxt)); // OK\n+\n+        ctxt.getVars().put(\"dummy\", \"abcd\");\n+        assertEquals(jscript.getText(), Integer.valueOf(\"abcd\".hashCode()), jscript.execute(ctxt)); // OK\n+        \n+        jscript = jexl.createScript(\"dummy.hashCode\");\n+        assertEquals(jscript.getText(), null, jscript.execute(ctxt)); // OK\n+\n+        Expression jexpr;\n+\n+        ctxt = JexlHelper.createContext();\n+        jexpr = jexl.createExpression(\"dummy.hashCode()\");\n+        assertEquals(jexpr.getExpression(), null, jexpr.evaluate(ctxt)); // OK\n+\n+        ctxt.getVars().put(\"dummy\", \"abcd\");\n+        assertEquals(jexpr.getExpression(), Integer.valueOf(\"abcd\".hashCode()), jexpr.evaluate(ctxt)); // OK\n+\n+        jexpr = jexl.createExpression(\"dummy.hashCode\");\n+        assertEquals(jexpr.getExpression(), null, jexpr.evaluate(ctxt)); // OK\n+    }\n+\n }\n\\ No newline at end of file"
            }
        ]
    }
]
