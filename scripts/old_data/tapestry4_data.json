[
    {
        "commit": "https://github.com/apache/tapestry4/commit/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/a82331911b7d8d704b2d25594913727b650e323f",
        "message": "TAPESTRY-783: contrib:Tree fails with NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@351507 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_1",
        "file": [
            {
                "sha": "9cc89623bd499e80cc912b874a484535afeadcda",
                "filename": "contrib/src/java/org/apache/tapestry/contrib/tree/components/TreeNodeView.java",
                "status": "modified",
                "additions": 17,
                "deletions": 113,
                "changes": 130,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/contrib/src/java/org/apache/tapestry/contrib/tree/components/TreeNodeView.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/contrib/src/java/org/apache/tapestry/contrib/tree/components/TreeNodeView.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/contrib/src/java/org/apache/tapestry/contrib/tree/components/TreeNodeView.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -42,12 +42,6 @@\n {\n     private static final Log LOG = LogFactory.getLog(TreeNodeView.class);\n \n-    private IBinding m_objNodeRenderFactoryBinding;\n-\n-    private IBinding m_objShowNodeImagesBinding;\n-\n-    private IBinding m_objMakeNodeDirectBinding;\n-\n     private Boolean m_objNodeState;\n \n     private Boolean m_objShowNodeImages;\n@@ -62,6 +56,10 @@\n \n     private int m_CurrentForeachConnectImageValue = TreeRowObject.LINE_CONN_IMG;\n \n+    public abstract INodeRenderFactory getNodeRenderFactoryParameter();\n+\n+    public abstract Boolean getShowNodeImages();\n+\n     public TreeNodeView()\n     {\n         super();\n@@ -122,7 +120,7 @@ public void nodeExpandCollaps(IRequestCycle cycle)\n         ComponentAddress objModelSourceAddress = (ComponentAddress) context[2];\n         ITreeModelSource objTreeModelSource = (ITreeModelSource) objModelSourceAddress\n                 .findComponent(cycle);\n-        //ITreeModelSource objTreeModelSource = getTreeModelSource();\n+        // ITreeModelSource objTreeModelSource = getTreeModelSource();\n         ITreeStateModel objStateModel = objTreeModelSource.getTreeModel().getTreeStateModel();\n         boolean bState = objStateModel.isUniqueKeyExpanded(objValueUID);\n \n@@ -156,14 +154,14 @@ public void nodeSelect(IRequestCycle cycle)\n         ComponentAddress objModelSourceAddress = (ComponentAddress) context[2];\n         ITreeModelSource objTreeModelSource = (ITreeModelSource) objModelSourceAddress\n                 .findComponent(cycle);\n-        //ITreeModelSource objTreeModelSource = getTreeModelSource();\n+        // ITreeModelSource objTreeModelSource = getTreeModelSource();\n         ITreeStateModel objStateModel = objTreeModelSource.getTreeModel().getTreeStateModel();\n         Object objSelectedNodeInState = objStateModel.getSelectedNode();\n \n         if (objValueUID.equals(objSelectedNodeInState))\n         {\n-            //do nothing, the selected node in UI is the same as the selected in\n-            //state model. The user should use refresh of back button.\n+            // do nothing, the selected node in UI is the same as the selected in\n+            // state model. The user should use refresh of back button.\n             return;\n         }\n \n@@ -419,27 +417,6 @@ protected void renderComponent(IMarkupWriter arg0, IRequestCycle arg1)\n         m_objNodeState = null;\n     }\n \n-    /**\n-     * Returns the ShowNodeImagesBinding.\n-     * \n-     * @return IBinding\n-     */\n-    public IBinding getShowNodeImagesBinding()\n-    {\n-        return m_objShowNodeImagesBinding;\n-    }\n-\n-    /**\n-     * Sets the ShowNodeImagesBinding.\n-     * \n-     * @param ShowNodeImagesBinding\n-     *            The ShowNodeImagesBinding to set\n-     */\n-    public void setShowNodeImagesBinding(IBinding ShowNodeImagesBinding)\n-    {\n-        m_objShowNodeImagesBinding = ShowNodeImagesBinding;\n-    }\n-\n     /**\n      * Returns the ShowNodeImages.\n      * \n@@ -449,21 +426,15 @@ public Boolean isShowNodeImages()\n     {\n         if (m_objShowNodeImages == null)\n         {\n-            if (getNodeRenderFactoryBinding() == null)\n+            if (isParameterBound(\"nodeRenderFactory\"))\n             {\n-                m_objShowNodeImages = Boolean.TRUE;\n+                m_objShowNodeImages = getShowNodeImages();\n             }\n             else\n             {\n-                if (m_objShowNodeImagesBinding != null)\n-                {\n-                    m_objShowNodeImages = (Boolean) m_objShowNodeImagesBinding.getObject();\n-                }\n-                else\n-                {\n-                    m_objShowNodeImages = Boolean.TRUE;\n-                }\n+                m_objShowNodeImages = Boolean.TRUE;\n             }\n+\n         }\n         return m_objShowNodeImages;\n     }\n@@ -482,7 +453,7 @@ public boolean getShowWithoutImages()\n \n     public String getOffsetStyle()\n     {\n-        //return \"width: \" + getTreeDataView().getTreeDeep() * 15;\n+        // return \"width: \" + getTreeDataView().getTreeDeep() * 15;\n         ITreeRowSource objTreeRowSource = getTreeRowSource();\n         TreeRowObject objTreeRowObject = objTreeRowSource.getTreeRow();\n         int nTreeRowDepth = 0;\n@@ -495,86 +466,19 @@ public String getOffsetStyle()\n         return \"padding-left: \" + nTreeRowDepth * 19 + \"px\";\n     }\n \n-    /**\n-     * Returns the nodeRenderFactoryBinding.\n-     * \n-     * @return IBinding\n-     */\n-    public IBinding getNodeRenderFactoryBinding()\n-    {\n-        return m_objNodeRenderFactoryBinding;\n-    }\n-\n-    /**\n-     * Sets the nodeRenderFactoryBinding.\n-     * \n-     * @param nodeRenderFactoryBinding\n-     *            The nodeRenderFactoryBinding to set\n-     */\n-    public void setNodeRenderFactoryBinding(IBinding nodeRenderFactoryBinding)\n-    {\n-        m_objNodeRenderFactoryBinding = nodeRenderFactoryBinding;\n-    }\n-\n     public INodeRenderFactory getNodeRenderFactory()\n     {\n         if (m_objNodeRenderFactory == null)\n         {\n-            IBinding objBinding = getNodeRenderFactoryBinding();\n-            if (objBinding != null)\n-            {\n-                m_objNodeRenderFactory = (INodeRenderFactory) objBinding.getObject();\n-            }\n+            if (isParameterBound(\"nodeRenderFactory\"))\n+                m_objNodeRenderFactory = getNodeRenderFactoryParameter();\n             else\n-            {\n                 m_objNodeRenderFactory = new SimpleNodeRenderFactory();\n-            }\n         }\n         return m_objNodeRenderFactory;\n     }\n \n-    /**\n-     * Returns the makeNodeDirectBinding.\n-     * \n-     * @return IBinding\n-     */\n-    public IBinding getMakeNodeDirectBinding()\n-    {\n-        return m_objMakeNodeDirectBinding;\n-    }\n-\n-    /**\n-     * Sets the makeNodeDirectBinding.\n-     * \n-     * @param makeNodeDirectBinding\n-     *            The makeNodeDirectBinding to set\n-     */\n-    public void setMakeNodeDirectBinding(IBinding makeNodeDirectBinding)\n-    {\n-        m_objMakeNodeDirectBinding = makeNodeDirectBinding;\n-    }\n-\n-    /**\n-     * Returns the makeNodeDirect.\n-     * \n-     * @return Boolean\n-     */\n-    public boolean getMakeNodeDirect()\n-    {\n-        if (m_objMakeNodeDirect == null)\n-        {\n-            IBinding objBinding = getMakeNodeDirectBinding();\n-            if (objBinding != null)\n-            {\n-                m_objMakeNodeDirect = (Boolean) objBinding.getObject();\n-            }\n-            else\n-            {\n-                m_objMakeNodeDirect = Boolean.TRUE;\n-            }\n-        }\n-        return m_objMakeNodeDirect.booleanValue();\n-    }\n+    public abstract boolean getMakeNodeDirect();\n \n     public boolean getMakeNodeNoDirect()\n     {\n@@ -603,7 +507,7 @@ public String getSelectedID()\n \n     private String getSelectedNodeID()\n     {\n-        //return getTreeDataView().getTreeView().getSelectedNodeID();\n+        // return getTreeDataView().getTreeView().getSelectedNodeID();\n         return \"tree\";\n     }\n "
            },
            {
                "sha": "ecbaadb16bd16a967b3030fb3e76218a03d79fc7",
                "filename": "contrib/src/java/org/apache/tapestry/contrib/tree/components/TreeNodeView.jwc",
                "status": "modified",
                "additions": 40,
                "deletions": 43,
                "changes": 83,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/contrib/src/java/org/apache/tapestry/contrib/tree/components/TreeNodeView.jwc",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/contrib/src/java/org/apache/tapestry/contrib/tree/components/TreeNodeView.jwc",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/contrib/src/java/org/apache/tapestry/contrib/tree/components/TreeNodeView.jwc?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -16,98 +16,95 @@\n -->\n \n <!DOCTYPE component-specification PUBLIC \n-  \"-//Apache Software Foundation//Tapestry Specification 3.0//EN\" \n-  \"http://jakarta.apache.org/tapestry/dtd/Tapestry_3_0.dtd\">\n+  \"-//Apache Software Foundation//Tapestry Specification 4.0//EN\" \n+  \"http://jakarta.apache.org/tapestry/dtd/Tapestry_4_0.dtd\">\n \n <component-specification\n     class=\"org.apache.tapestry.contrib.tree.components.TreeNodeView\"\n     allow-body=\"yes\" allow-informal-parameters=\"yes\">\n \n-    <parameter name=\"showNodeImages\" type=\"boolean\" required=\"no\"\n-               direction=\"custom\"/>\n-    <parameter name=\"makeNodeDirect\" type=\"boolean\" required=\"no\"\n-               direction=\"custom\"/>\n+    <parameter name=\"showNodeImages\" default-value=\"true\"/>\n+    <parameter name=\"makeNodeDirect\" default-value=\"true\"/>\n \n     <parameter name=\"nodeRenderFactory\"\n-               type=\"org.apache.tapestry.contrib.tree.components.INodeRenderFactory\"\n-               required=\"no\" direction=\"custom\"/>\n+                required=\"no\"  property=\"nodeRenderFactoryParameter\"/>\n \n     <reserved-parameter name=\"treedataview\"/>\n     <reserved-parameter name=\"nodeviewdirect\"/>\n \n     <component id=\"expandCollapsDirect\" type=\"DirectLink\">\n-        <binding name=\"parameters\" expression=\"nodeContext\"/>\n-        <binding name=\"listener\" expression=\"listeners.nodeExpandCollaps\"/>\n-        <binding name=\"stateful\" expression=\"false\"/>\n-        <binding name=\"name\" expression=\"selectedID\"/>\n-        <binding name=\"anchor\" expression=\"cleanSelectedID\"/>\n-        <binding name=\"disabled\" expression=\"disableLink\"/>\n+        <binding name=\"parameters\" value=\"nodeContext\"/>\n+        <binding name=\"listener\" value=\"listeners.nodeExpandCollaps\"/>\n+        <binding name=\"stateful\" value=\"false\"/>\n+        <binding name=\"name\" value=\"selectedID\"/>\n+        <binding name=\"anchor\" value=\"cleanSelectedID\"/>\n+        <binding name=\"disabled\" value=\"disableLink\"/>\n     </component>\n \n     <component id=\"nodeDirect\" type=\"DirectLink\">\n-        <binding name=\"parameters\" expression=\"nodeContext\"/>\n-        <binding name=\"listener\" expression=\"listeners.nodeSelect\"/>\n-        <binding name=\"stateful\" expression=\"false\"/>\n-        <binding name=\"name\" expression=\"selectedID\"/>\n-        <binding name=\"anchor\" expression=\"cleanSelectedID\"/>\n+        <binding name=\"parameters\" value=\"nodeContext\"/>\n+        <binding name=\"listener\" value=\"listeners.nodeSelect\"/>\n+        <binding name=\"stateful\" value=\"false\"/>\n+        <binding name=\"name\" value=\"selectedID\"/>\n+        <binding name=\"anchor\" value=\"cleanSelectedID\"/>\n     </component>\n     \n     <component id=\"showImages\" type=\"If\">\n-        <binding name=\"condition\" expression=\"showImages\"/>\n+        <binding name=\"condition\" value=\"showImages\"/>\n     </component>\n \n     <component id=\"showImages2\" copy-of=\"showImages\"/>\n \n     <component id=\"makeNodeDirect\" type=\"If\">\n-        <binding name=\"condition\" expression=\"makeNodeDirect\"/>\n+        <binding name=\"condition\" value=\"makeNodeDirect\"/>\n     </component>\n \n     <component id=\"makeNodeNoDirect\" type=\"If\">\n-        <binding name=\"condition\" expression=\"makeNodeNoDirect\"/>\n+        <binding name=\"condition\" value=\"makeNodeNoDirect\"/>\n     </component>\n \n     <component id=\"imageNode\" type=\"Image\">\n-        <binding name=\"image\" expression=\"nodeImage\"/>\n+        <binding name=\"image\" value=\"nodeImage\"/>\n     </component>\n     <component id=\"imageNode2\" copy-of=\"imageNode\"/>\n \n     <component id=\"insertValue\" type=\"Delegator\">\n-\t\t<binding name=\"delegate\" expression=\"currentRenderer\"/>\n+\t\t<binding name=\"delegate\" value=\"currentRenderer\"/>\n     </component>\n     <component id=\"insertValue2\" copy-of=\"insertValue\"/>\n \n     <component id=\"class\" type=\"Any\">\n-        <static-binding name=\"element\">div</static-binding>\n-        <binding name=\"class\" expression=\"nodeStyleClass\"/>\n+        <binding name=\"element\" value=\"literal:div\"/>\n+        <binding name=\"class\" value=\"nodeStyleClass\"/>\n     </component>\n     \n-    <private-asset name=\"_topCloseNodeImage\" resource-path=\"TopPlus.gif\"/>\n-    <private-asset name=\"_topOpenNodeImage\" resource-path=\"TopMinus.gif\"/>\n-    <private-asset name=\"_topLineImage\" resource-path=\"TopLine.gif\"/>\n+    <asset name=\"_topCloseNodeImage\" path=\"TopPlus.gif\"/>\n+    <asset name=\"_topOpenNodeImage\" path=\"TopMinus.gif\"/>\n+    <asset name=\"_topLineImage\" path=\"TopLine.gif\"/>\n     \n-    <private-asset name=\"_topLastOpenNodeImage\" resource-path=\"TopLastMinus.gif\"/>\n-    <private-asset name=\"_topLastCloseNodeImage\" resource-path=\"TopLastPlus.gif\"/>\n+    <asset name=\"_topLastOpenNodeImage\" path=\"TopLastMinus.gif\"/>\n+    <asset name=\"_topLastCloseNodeImage\" path=\"TopLastPlus.gif\"/>\n     \n-    <private-asset name=\"_middleCloseNodeImage\" resource-path=\"MiddlePlus.gif\"/>\n-    <private-asset name=\"_middleOpenNodeImage\" resource-path=\"MiddleMinus.gif\"/>\n-    <private-asset name=\"_middleCrossLineImage\" resource-path=\"MiddleCrossLine.gif\"/>\n-    <private-asset name=\"_middleLineImage\" resource-path=\"MiddleLine.gif\"/>\n+    <asset name=\"_middleCloseNodeImage\" path=\"MiddlePlus.gif\"/>\n+    <asset name=\"_middleOpenNodeImage\" path=\"MiddleMinus.gif\"/>\n+    <asset name=\"_middleCrossLineImage\" path=\"MiddleCrossLine.gif\"/>\n+    <asset name=\"_middleLineImage\" path=\"MiddleLine.gif\"/>\n     \n-    <private-asset name=\"_bottomCloseNodeImage\" resource-path=\"BottomPlus.gif\"/>\n-    <private-asset name=\"_bottomOpenNodeImage\" resource-path=\"BottomMinus.gif\"/>\n-    <private-asset name=\"_bottomLineImage\" resource-path=\"BottomLine.gif\"/>\n+    <asset name=\"_bottomCloseNodeImage\" path=\"BottomPlus.gif\"/>\n+    <asset name=\"_bottomOpenNodeImage\" path=\"BottomMinus.gif\"/>\n+    <asset name=\"_bottomLineImage\" path=\"BottomLine.gif\"/>\n     \n-    <private-asset name=\"_whiteSpaceImage\" resource-path=\"WhiteSpace.gif\"/>\n+    <asset name=\"_whiteSpaceImage\" path=\"WhiteSpace.gif\"/>\n     \n     <component id=\"showConnectImage\" type=\"If\">\n-        <binding name=\"condition\" expression=\"showConnectImage\"/>\n+        <binding name=\"condition\" value=\"showConnectImage\"/>\n     </component>\n     <component id=\"connectImage\" type=\"Image\">\n-        <binding name=\"image\" expression=\"connectImage\"/>\n+        <binding name=\"image\" value=\"connectImage\"/>\n     </component>\n     <component id=\"foreachConnectImage\" type=\"Foreach\">\n-        <binding name=\"source\" expression=\"foreachConnectImageList\"/>\n-        <binding name=\"value\" expression=\"currentForeachConnectImageValue\"/>\n+        <binding name=\"source\" value=\"foreachConnectImageList\"/>\n+        <binding name=\"value\" value=\"currentForeachConnectImageValue\"/>\n     </component>\n     \n     "
            },
            {
                "sha": "a525716101723587d1ead7d470930efd43767f90",
                "filename": "contrib/src/java/org/apache/tapestry/contrib/tree/components/table/TreeTableDataView.java",
                "status": "modified",
                "additions": 6,
                "deletions": 6,
                "changes": 12,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/contrib/src/java/org/apache/tapestry/contrib/tree/components/table/TreeTableDataView.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/contrib/src/java/org/apache/tapestry/contrib/tree/components/table/TreeTableDataView.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/contrib/src/java/org/apache/tapestry/contrib/tree/components/table/TreeTableDataView.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -56,7 +56,7 @@ public TreeTableDataView()\n     public void initialize()\n     {\n         m_nTreeDeep = -1;\n-        //\t\tm_objTableModel = null;\n+        // m_objTableModel = null;\n         m_objTreeRowObject = null;\n         m_arrAllExpandedNodes = null;\n     }\n@@ -79,7 +79,7 @@ public ITreeModelSource getTreeModelSource()\n         return objSource == null ? getTreeViewParameter() : objSource;\n     }\n \n-    public ArrayList generateNodeList()\n+    public List generateNodeList()\n     {\n         if (m_arrAllExpandedNodes == null)\n         {\n@@ -211,7 +211,7 @@ public ITableModel getTableModel()\n \n     private ITableModel createTableModel()\n     {\n-        ArrayList arrAllNodes = generateNodeList();\n+        List arrAllNodes = generateNodeList();\n         Object[] arrAllExpandedNodes = new Object[arrAllNodes.size()];\n         arrAllNodes.toArray(arrAllExpandedNodes);\n \n@@ -256,20 +256,20 @@ public ITableSessionStateManager getTableSessionStateManager()\n         SimpleTableSessionStateManager objStateManager = new SimpleTableSessionStateManager(\n                 objDataModel, objColumnModel);\n         return objStateManager;\n-        //return NullTableSessionStateManager.NULL_STATE_MANAGER;\n+        // return NullTableSessionStateManager.NULL_STATE_MANAGER;\n     }\n \n     /**\n      * @see org.apache.tapestry.BaseComponent#renderComponent(org.apache.tapestry.IMarkupWriter,\n      *      org.apache.tapestry.IRequestCycle)\n      */\n-    protected void renderComponent(IMarkupWriter arg0, IRequestCycle cycle)\n+    protected void renderComponent(IMarkupWriter writer, IRequestCycle cycle)\n     {\n         Object objExistedTreeModelSource = cycle\n                 .getAttribute(ITreeRowSource.TREE_ROW_SOURCE_ATTRIBUTE);\n         cycle.setAttribute(ITreeRowSource.TREE_ROW_SOURCE_ATTRIBUTE, this);\n \n-        super.renderComponent(arg0, cycle);\n+        super.renderComponent(writer, cycle);\n \n         cycle.setAttribute(ITreeRowSource.TREE_ROW_SOURCE_ATTRIBUTE, objExistedTreeModelSource);\n     }"
            },
            {
                "sha": "d49d8aed005cfc073aa50e9009803d1e5b59347a",
                "filename": "contrib/src/java/org/apache/tapestry/contrib/tree/components/table/TreeTableDataView.jwc",
                "status": "modified",
                "additions": 21,
                "deletions": 42,
                "changes": 63,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/contrib/src/java/org/apache/tapestry/contrib/tree/components/table/TreeTableDataView.jwc",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/contrib/src/java/org/apache/tapestry/contrib/tree/components/table/TreeTableDataView.jwc",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/contrib/src/java/org/apache/tapestry/contrib/tree/components/table/TreeTableDataView.jwc?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -16,46 +16,25 @@\n -->\n \n <!DOCTYPE component-specification PUBLIC \n-  \"-//Apache Software Foundation//Tapestry Specification 3.0//EN\" \n-  \"http://jakarta.apache.org/tapestry/dtd/Tapestry_3_0.dtd\">\n-\n-<component-specification class=\"org.apache.tapestry.contrib.tree.components.table.TreeTableDataView\"\n-    allow-body=\"yes\" allow-informal-parameters=\"yes\">\n-\n-    <parameter name=\"treeView\"\n-               type=\"org.apache.tapestry.contrib.tree.components.TreeView\"\n-               required=\"no\" direction=\"custom\"/>\n-\n-    <parameter name=\"nodeViewComponentAddress\"\n-               type=\"org.apache.tapestry.util.ComponentAddress\"\n-               required=\"no\" direction=\"custom\"/>\n-\n-    <parameter name=\"nodeRenderFactory\"\n-               type=\"org.apache.tapestry.contrib.tree.components.INodeRenderFactory\"\n-               required=\"no\" direction=\"custom\"/>\n-    \n-\t<parameter name=\"entriesPerTablePage\" \n-\t\ttype=\"int\" \n-\t\trequired=\"no\"\n-\t\tdirection=\"custom\"/>\n-    <parameter name=\"showRootNode\" type=\"boolean\" required=\"no\"\n-               direction=\"custom\"/>\n-\n-    <parameter name=\"tableColunms\"\n-               type=\"java.util.ArrayList\"\n-               required=\"no\" direction=\"custom\"/>\n-\n-    <bean name=\"tableClass\" class=\"org.apache.tapestry.bean.EvenOdd\" lifecycle=\"request\"/>\n-\n-\t<component id=\"table\" type=\"Table\">\n-\t\t<binding name=\"tableModel\" expression=\"tableModel\"/>\n-\t\t<binding name=\"tableSessionStateManager\" expression=\"tableSessionStateManager\"/>\n-\t\t<binding name=\"row\" expression=\"treeRowObject\"/>\n-        <binding name=\"rowsClass\" expression='beans.tableClass.next'/>\n-        <static-binding name=\"class\">treetable</static-binding>\n-        <static-binding name=\"cellspacing\">0</static-binding>\n-        <static-binding name=\"cellpadding\">0</static-binding>\n-        <static-binding name=\"width\">*</static-binding>\n-\t</component>\n-\n+  \"-//Apache Software Foundation//Tapestry Specification 4.0//EN\" \n+  \"http://jakarta.apache.org/tapestry/dtd/Tapestry_4_0.dtd\">\n+<component-specification class=\"org.apache.tapestry.contrib.tree.components.table.TreeTableDataView\" allow-body=\"yes\"\n+           allow-informal-parameters=\"yes\">\n+           <parameter name=\"treeView\" required=\"no\"/>\n+           <parameter name=\"nodeViewComponentAddress\" required=\"no\"/>\n+           <parameter name=\"nodeRenderFactory\" required=\"no\"/>\n+           <parameter name=\"entriesPerTablePage\" required=\"no\"/>\n+           <parameter name=\"showRootNode\" required=\"no\"/>\n+           <parameter name=\"tableColunms\" property=\"tableColumnsParameter\" required=\"no\"/>\n+           <bean name=\"tableClass\" class=\"org.apache.tapestry.bean.EvenOdd\" lifecycle=\"request\"/>\n+           <component id=\"table\" type=\"Table\">\n+                      <binding name=\"tableModel\" value=\"tableModel\"/>\n+                      <binding name=\"tableSessionStateManager\" value=\"tableSessionStateManager\"/>\n+                      <binding name=\"row\" value=\"treeRowObject\"/>\n+                      <binding name=\"rowsClass\" value=\"beans.tableClass.next\"/>\n+                      <binding name=\"class\" value=\"literal:treetable\"/>\n+                      <binding name=\"cellspacing\" value=\"literal:0\"/>\n+                      <binding name=\"cellpadding\" value=\"literal:0\"/>\n+                      <binding name=\"width\" value=\"literal:*\"/>\n+           </component>\n </component-specification>"
            },
            {
                "sha": "95c4d0eec2fe006ead10b0baacf3c82ecc2dd9d6",
                "filename": "examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/FileSystemTree.java",
                "status": "modified",
                "additions": 17,
                "deletions": 15,
                "changes": 32,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/FileSystemTree.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/FileSystemTree.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/FileSystemTree.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -18,6 +18,7 @@\n import java.util.Collection;\n import java.util.Date;\n \n+import org.apache.tapestry.annotations.InjectObject;\n import org.apache.tapestry.contrib.tree.components.INodeRenderFactory;\n import org.apache.tapestry.contrib.tree.components.TreeView;\n import org.apache.tapestry.contrib.tree.model.ITreeDataModel;\n@@ -28,6 +29,9 @@\n import org.apache.tapestry.contrib.tree.model.ITreeStateModel;\n import org.apache.tapestry.contrib.tree.model.TreeStateEvent;\n import org.apache.tapestry.contrib.tree.simple.SimpleTreeModel;\n+import org.apache.tapestry.engine.IEngineService;\n+import org.apache.tapestry.event.PageDetachListener;\n+import org.apache.tapestry.event.PageEvent;\n import org.apache.tapestry.html.BasePage;\n import org.apache.tapestry.workbench.tree.examples.fsmodel.FileSystem;\n import org.apache.tapestry.workbench.tree.examples.fsmodel.FileSystemDataModel;\n@@ -36,7 +40,7 @@\n import org.apache.tapestry.workbench.tree.examples.fsmodel.NodeRenderFactory;\n \n public abstract class FileSystemTree extends BasePage implements ISelectedFolderSource,\n-        ITreeStateListener\n+        ITreeStateListener, PageDetachListener\n {\n     private ITreeSessionStateManager m_objTreeSessionStateManager = null;\n \n@@ -46,21 +50,18 @@\n \n     private Object m_objValue;\n \n+    @InjectObject(\"engine-service:asset\")\n+    public abstract IEngineService getAssetService();\n+\n     /**\n      * Injected\n      * \n      * @since 4.0\n      */\n     public abstract String getTreeRootDir();\n \n-    public FileSystemTree()\n+    public void pageDetached(PageEvent event)\n     {\n-        super();\n-    }\n-\n-    protected void initialize()\n-    {\n-        super.initialize();\n         m_objDataModel = null;\n         m_objValue = null;\n         m_objTreeSessionStateManager = null;\n@@ -69,18 +70,19 @@ protected void initialize()\n     public void initTableModel()\n     {\n         ITreeNode objParent;\n-        \n+\n         String strRootDir = getTreeRootDir();\n \n         System.out.println(\"strRootDir = \" + strRootDir);\n \n         if (strRootDir == null || \"\".equals(strRootDir))\n         {\n-            objParent = new FileSystem();\n+            objParent = new FileSystem(getAssetService());\n         }\n         else\n         {\n-            FolderObject objFolder = new FolderObject(null, new File(strRootDir), true);\n+            FolderObject objFolder = new FolderObject(null, new File(strRootDir), true,\n+                    getAssetService());\n             objFolder.reload();\n             objParent = objFolder;\n         }\n@@ -131,16 +133,16 @@ public INodeRenderFactory getRenderFactory()\n \n     public ITreeSessionStateManager getSessionStateManager()\n     {\n-        //IPage objPage = getRequestCycle().getPage(\"contrib:TreeNodeViewPage\");\n-        //System.out.println(\"TreeNodeViewPage NamespaceId :\n+        // IPage objPage = getRequestCycle().getPage(\"contrib:TreeNodeViewPage\");\n+        // System.out.println(\"TreeNodeViewPage NamespaceId :\n         // \"+objPage.getNamespace().getNamespaceId());\n \n         if (m_objTreeSessionStateManager == null)\n         {\n             String strRootDir = getTreeRootDir();\n-            //System.out.println(\"strRootDir = \" + strRootDir);\n+            // System.out.println(\"strRootDir = \" + strRootDir);\n \n-            m_objTreeSessionStateManager = new FileSystemStateManager(strRootDir);\n+            m_objTreeSessionStateManager = new FileSystemStateManager(strRootDir, getAssetService());\n         }\n         return m_objTreeSessionStateManager;\n     }"
            },
            {
                "sha": "2e06276973d17eafae483111f366d533a1cb5468",
                "filename": "examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/FileSystemTreeTable.java",
                "status": "modified",
                "additions": 15,
                "deletions": 12,
                "changes": 27,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/FileSystemTreeTable.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/FileSystemTreeTable.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/FileSystemTreeTable.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -19,6 +19,7 @@\n import java.util.Collection;\n import java.util.Date;\n \n+import org.apache.tapestry.annotations.InjectObject;\n import org.apache.tapestry.contrib.table.model.simple.SimpleTableColumn;\n import org.apache.tapestry.contrib.tree.components.INodeRenderFactory;\n import org.apache.tapestry.contrib.tree.components.table.TreeTable;\n@@ -32,6 +33,9 @@\n import org.apache.tapestry.contrib.tree.model.TreeRowObject;\n import org.apache.tapestry.contrib.tree.model.TreeStateEvent;\n import org.apache.tapestry.contrib.tree.simple.SimpleTreeModel;\n+import org.apache.tapestry.engine.IEngineService;\n+import org.apache.tapestry.event.PageDetachListener;\n+import org.apache.tapestry.event.PageEvent;\n import org.apache.tapestry.html.BasePage;\n import org.apache.tapestry.workbench.tree.examples.fsmodel.FileSystem;\n import org.apache.tapestry.workbench.tree.examples.fsmodel.FileSystemDataModel;\n@@ -41,7 +45,7 @@\n import org.apache.tapestry.workbench.tree.examples.fsmodel.NodeRenderFactory;\n \n public abstract class FileSystemTreeTable extends BasePage implements ISelectedFolderSource,\n-        ITreeStateListener\n+        ITreeStateListener, PageDetachListener\n {\n     private ITreeSessionStateManager m_objTreeSessionStateManager = null;\n \n@@ -61,14 +65,11 @@\n \n     public abstract String getTreeRootDir();\n \n-    public FileSystemTreeTable()\n-    {\n-        super();\n-    }\n+    @InjectObject(\"engine-service:asset\")\n+    public abstract IEngineService getAssetService();\n \n-    protected void initialize()\n+    public void pageDetached(PageEvent event)\n     {\n-        super.initialize();\n         m_objDataModel = null;\n         m_objValue = null;\n         m_objTreeSessionStateManager = null;\n@@ -83,11 +84,12 @@ public void initTableModel()\n \n         if (strRootDir == null || \"\".equals(strRootDir))\n         {\n-            objParent = new FileSystem();\n+            objParent = new FileSystem(getAssetService());\n         }\n         else\n         {\n-            FolderObject objFolder = new FolderObject(null, new File(strRootDir), true);\n+            FolderObject objFolder = new FolderObject(null, new File(strRootDir), true,\n+                    getAssetService());\n             objFolder.reload();\n             objParent = objFolder;\n         }\n@@ -141,7 +143,7 @@ public ITreeSessionStateManager getSessionStateManager()\n         if (m_objTreeSessionStateManager == null)\n         {\n             String strRootDir = getTreeRootDir();\n-            m_objTreeSessionStateManager = new FileSystemStateManager(strRootDir);\n+            m_objTreeSessionStateManager = new FileSystemStateManager(strRootDir, getAssetService());\n         }\n         return m_objTreeSessionStateManager;\n     }\n@@ -158,10 +160,10 @@ public ArrayList getTableColumns()\n             {\n                 private static final long serialVersionUID = -8211004113105081255L;\n \n-\t\t\t\tpublic Object getColumnValue(Object objValue)\n+                public Object getColumnValue(Object objValue)\n                 {\n                     TreeRowObject objRowObject = (TreeRowObject) objValue;\n-                    //SFObject objSFObject = (SFObject)objRowObject.getTreeNode();\n+                    // SFObject objSFObject = (SFObject)objRowObject.getTreeNode();\n                     IFileSystemTreeNode objFileSystemTreeNode = (IFileSystemTreeNode) objRowObject\n                             .getTreeNode();\n                     return objFileSystemTreeNode.getDate();\n@@ -229,4 +231,5 @@ public String getSelectedNodeName()\n         }\n         return objSelectedNode.toString();\n     }\n+\n }\n\\ No newline at end of file"
            },
            {
                "sha": "4bcfed5dcd88bb08848f29f3e27b5be628fa6f4d",
                "filename": "examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/AssetsHolder.java",
                "status": "modified",
                "additions": 22,
                "deletions": 16,
                "changes": 38,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/AssetsHolder.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/AssetsHolder.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/AssetsHolder.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -16,26 +16,35 @@\n \n import org.apache.hivemind.impl.DefaultClassResolver;\n import org.apache.hivemind.util.ClasspathResource;\n+import org.apache.hivemind.util.Defense;\n import org.apache.tapestry.asset.PrivateAsset;\n+import org.apache.tapestry.engine.IEngineService;\n \n /**\n- *\n  * @author ceco\n- *\n  */\n public class AssetsHolder\n {\n+    private final IEngineService _assetService;\n+\n+    private final String m_strOpenAssetsURL;\n+\n+    private final String m_strCloseAssetsURL;\n \n-    private String m_strOpenAssetsURL;\n-    private String m_strCloseAssetsURL;\n     private PrivateAsset m_objOpenAsset = null;\n+\n     private PrivateAsset m_objCloseAsset = null;\n+\n     /**\n      * Constructor for AssetsHolder.\n      */\n-    public AssetsHolder(String strOpenAssetsURL, String strCloseAssetsURL)\n+    public AssetsHolder(IEngineService assetService, String strOpenAssetsURL,\n+            String strCloseAssetsURL)\n     {\n-        super();\n+        Defense.notNull(assetService, \"assetService\");\n+\n+        _assetService = assetService;\n+\n         m_strOpenAssetsURL = strOpenAssetsURL;\n         m_strCloseAssetsURL = strCloseAssetsURL;\n     }\n@@ -44,23 +53,20 @@ public PrivateAsset getAssetForOpenNode()\n     {\n         if (m_objOpenAsset == null)\n         {\n-            //m_objOpenAsset = new PrivateAsset(m_strOpenAssetsURL);\n-            m_objOpenAsset =\n-                new PrivateAsset(\n-                    new ClasspathResource(new DefaultClassResolver(), m_strOpenAssetsURL),\n-                    null);\n+            // m_objOpenAsset = new PrivateAsset(m_strOpenAssetsURL);\n+            m_objOpenAsset = new PrivateAsset(new ClasspathResource(new DefaultClassResolver(),\n+                    m_strOpenAssetsURL), _assetService, null);\n         }\n         return m_objOpenAsset;\n     }\n+\n     public PrivateAsset getAssetForCloseNode()\n     {\n         if (m_objCloseAsset == null)\n         {\n-            //m_objCloseAsset = new PrivateAsset(m_strCloseAssetsURL);\n-            m_objCloseAsset =\n-                new PrivateAsset(\n-                    new ClasspathResource(new DefaultClassResolver(), m_strCloseAssetsURL),\n-                    null);\n+            // m_objCloseAsset = new PrivateAsset(m_strCloseAssetsURL);\n+            m_objCloseAsset = new PrivateAsset(new ClasspathResource(new DefaultClassResolver(),\n+                    m_strCloseAssetsURL), _assetService, null);\n         }\n         return m_objCloseAsset;\n     }"
            },
            {
                "sha": "e4689143cb265dbe429b45c5bfe871eb202874ff",
                "filename": "examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/Drive.java",
                "status": "modified",
                "additions": 41,
                "deletions": 28,
                "changes": 69,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/Drive.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/Drive.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/Drive.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -17,35 +17,48 @@\n import java.io.File;\n \n import org.apache.tapestry.contrib.tree.model.ITreeNode;\n+import org.apache.tapestry.engine.IEngineService;\n \n public class Drive extends FolderObject\n {\n-\tprivate static final long serialVersionUID = -7032714277766590386L;\n-\t\n-\tprivate String m_strType;\n-\tprivate String m_strLabel;\n-\tprivate long m_lSize;\n-\n-\tpublic Drive(ITreeNode objParent, File objFile) {\n-\t\tsuper(objParent, objFile, false);\n-\t}\n-\tpublic long getSize() {\n-\t\treturn m_lSize;\n-\t}\n-\tpublic String getType() {\n-\t\treturn m_strType;\n-\t}\n-\tpublic String getLabel() {\n-\t\treturn m_strLabel;\n-\t}\n-\n-\tpublic AssetsHolder getAssets() {\n-\t\tif (m_objAssetsHolder == null) {\n-\t\t\tm_objAssetsHolder =\n-\t\t\t\tnew AssetsHolder(\n-\t\t\t\t\t\"/org/apache/tapestry/workbench/tree/examples/fsmodel/harddrive.gif\",\n-\t\t\t\t\t\"/org/apache/tapestry/workbench/tree/examples/fsmodel/harddrive.gif\");\n-\t\t}\n-\t\treturn m_objAssetsHolder;\n-\t}\n+    private String m_strType;\n+\n+    private String m_strLabel;\n+\n+    private long m_lSize;\n+\n+    private final IEngineService _assetService;\n+\n+    public Drive(ITreeNode objParent, File objFile, IEngineService assetService)\n+    {\n+        super(objParent, objFile, false, assetService);\n+\n+        _assetService = assetService;\n+    }\n+\n+    public long getSize()\n+    {\n+        return m_lSize;\n+    }\n+\n+    public String getType()\n+    {\n+        return m_strType;\n+    }\n+\n+    public String getLabel()\n+    {\n+        return m_strLabel;\n+    }\n+\n+    public AssetsHolder getAssets()\n+    {\n+        if (m_objAssetsHolder == null)\n+        {\n+            m_objAssetsHolder = new AssetsHolder(_assetService,\n+                    \"/org/apache/tapestry/workbench/tree/examples/fsmodel/harddrive.gif\",\n+                    \"/org/apache/tapestry/workbench/tree/examples/fsmodel/harddrive.gif\");\n+        }\n+        return m_objAssetsHolder;\n+    }\n }"
            },
            {
                "sha": "5151225058900ea8d4313cd10e466a9c62c1bc92",
                "filename": "examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FileObject.java",
                "status": "modified",
                "additions": 26,
                "deletions": 14,
                "changes": 40,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FileObject.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FileObject.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FileObject.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -19,69 +19,81 @@\n import java.util.Collection;\n \n import org.apache.tapestry.contrib.tree.model.ITreeNode;\n+import org.apache.tapestry.engine.IEngineService;\n \n public class FileObject extends SFObject\n {\n-    private static final long serialVersionUID = -3267574534008265259L;\n-    \n-\tprivate long m_lSize;\n+    private long m_lSize;\n \n-    public FileObject(ITreeNode objParent, File objFile) {\n+    private final IEngineService _assetService;\n+\n+    public FileObject(ITreeNode objParent, File objFile, IEngineService assetService)\n+    {\n         super(objParent, objFile);\n+        _assetService = assetService;\n         init();\n     }\n \n-    protected void init() {\n+    protected void init()\n+    {\n         super.init();\n         m_lSize = m_objFile.length();\n     }\n \n-    public long getSize() {\n+    public long getSize()\n+    {\n         return m_lSize;\n     }\n \n     /**\n      * @see org.apache.tapestry.contrib.tree.model.ITreeNode#containsChild(ITreeNode)\n      */\n-    public boolean containsChild(ITreeNode node) {\n+    public boolean containsChild(ITreeNode node)\n+    {\n         return false;\n     }\n \n     /**\n      * @see org.apache.tapestry.contrib.tree.model.ITreeNode#getAllowsChildren()\n      */\n-    public boolean getAllowsChildren() {\n+    public boolean getAllowsChildren()\n+    {\n         return false;\n     }\n \n     /**\n      * @see org.apache.tapestry.contrib.tree.model.ITreeNode#getChildCount()\n      */\n-    public int getChildCount() {\n+    public int getChildCount()\n+    {\n         return 0;\n     }\n \n     /**\n      * @see org.apache.tapestry.contrib.tree.model.ITreeNode#getChildren()\n      */\n-    public Collection getChildren() {\n+    public Collection getChildren()\n+    {\n         return new ArrayList();\n     }\n \n     /**\n      * @see org.apache.tapestry.contrib.tree.model.ITreeNode#isLeaf()\n      */\n-    public boolean isLeaf() {\n+    public boolean isLeaf()\n+    {\n         return true;\n     }\n \n     /**\n      * @see org.apache.tapestry.workbench.tree.examples.fsmodel.IFileSystemTreeNode#getAssets()\n      */\n-    public AssetsHolder getAssets() {\n-        if (m_objAssetsHolder == null) {\n+    public AssetsHolder getAssets()\n+    {\n+        if (m_objAssetsHolder == null)\n+        {\n             final String a = \"/org/apache/tapestry/workbench/tree/examples/fsmodel/file.gif\";\n-            m_objAssetsHolder = new AssetsHolder(a, a);\n+            m_objAssetsHolder = new AssetsHolder(_assetService, a, a);\n         }\n         return m_objAssetsHolder;\n     }"
            },
            {
                "sha": "02f60c71bb79daacfc335e69e517a0cecdf7a461",
                "filename": "examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FileSystem.java",
                "status": "modified",
                "additions": 134,
                "deletions": 109,
                "changes": 243,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FileSystem.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FileSystem.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FileSystem.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -20,21 +20,25 @@\n import java.util.Vector;\n \n import org.apache.tapestry.contrib.tree.model.ITreeNode;\n+import org.apache.tapestry.engine.IEngineService;\n \n public class FileSystem implements IFileSystemTreeNode\n {\n-    private static final long serialVersionUID = -6214030851378993747L;\n-    \n-\tprivate transient AssetsHolder m_objAssetsHolder = null;\n-    /** @associates <{Drive}>\n+\n+    private transient AssetsHolder m_objAssetsHolder = null;\n+\n+    /**\n+     * @associates <{Drive}>\n      * @supplierCardinality 0..*\n      * @link aggregation\n      */\n     private Vector m_vDrives;\n \n-    public FileSystem()\n+    private final IEngineService _assetService;\n+\n+    public FileSystem(IEngineService assetService)\n     {\n-        //initDrives();\n+        _assetService = assetService;\n     }\n \n     private void initDrives()\n@@ -43,127 +47,148 @@ private void initDrives()\n         File[] arrFile = File.listRoots();\n \n         if (arrFile != null)\n-            for(int i=0; i<arrFile.length; i++)\n+            for (int i = 0; i < arrFile.length; i++)\n             {\n                 File objFile = arrFile[i];\n-                boolean bFloppy = objFile.getAbsolutePath().startsWith(\"A:\") || objFile.getAbsolutePath().startsWith(\"B:\");\n-                if(!bFloppy)\n-                        m_vDrives.addElement(new Drive(this, objFile));\n+                boolean bFloppy = objFile.getAbsolutePath().startsWith(\"A:\")\n+                        || objFile.getAbsolutePath().startsWith(\"B:\");\n+                if (!bFloppy)\n+                    m_vDrives.addElement(new Drive(this, objFile, _assetService));\n             }\n     }\n \n     public Vector getDrives()\n     {\n-    \tif(m_vDrives == null){\n-    \t\tinitDrives();\n-    \t}\n+        if (m_vDrives == null)\n+        {\n+            initDrives();\n+        }\n         return m_vDrives;\n     }\n+\n     public int getChildNumber(Object objChild)\n     {\n-        for(int i=0;i<m_vDrives.size();i++)\n+        for (int i = 0; i < m_vDrives.size(); i++)\n         {\n             Object objChildDrive = m_vDrives.elementAt(i);\n-            if(objChildDrive.equals(objChild))\n+            if (objChildDrive.equals(objChild))\n             {\n                 return i;\n             }\n         }\n         return -1;\n     }\n-\t/**\n-\t * @see org.apache.tapestry.contrib.tree.model.ITreeNode#containsChild(ITreeNode)\n-\t */\n-\tpublic boolean containsChild(ITreeNode node) {\n-\t\treturn true;\n-\t}\n-\n-\t/**\n-\t * @see org.apache.tapestry.contrib.tree.model.ITreeNode#getAllowsChildren()\n-\t */\n-\tpublic boolean getAllowsChildren() {\n-\t\treturn true;\n-\t}\n-\n-\t/**\n-\t * @see org.apache.tapestry.contrib.tree.model.ITreeNode#getChildCount()\n-\t */\n-\tpublic int getChildCount() {\n-\t\treturn getDrives().size();\n-\t}\n-\n-\t/**\n-\t * @see org.apache.tapestry.contrib.tree.model.ITreeNode#getChildren()\n-\t */\n-\tpublic Collection getChildren() {\n-\t\treturn getDrives();\n-\t}\n-\n-\t/**\n-\t * @see org.apache.tapestry.contrib.tree.model.ITreeNode#getParent()\n-\t */\n-\tpublic ITreeNode getParent() {\n-\t\treturn null;\n-\t}\n-\n-\t/**\n-\t * @see org.apache.tapestry.contrib.tree.model.ITreeNode#isLeaf()\n-\t */\n-\tpublic boolean isLeaf() {\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * @see java.lang.Object#toString()\n-\t */\n-\tpublic String toString() {\n-\t\treturn getName();\n-\t}\n-\tpublic String getName(){\n-\t\treturn \"FileSystem\";\n-\t}\n-\t\n-\t/**\n-\t * @see java.lang.Object#equals(Object)\n-\t */\n-\tpublic boolean equals(Object arg0) {\n-\t\tif(!(arg0 instanceof FileSystem))\n-\t\t\treturn false;\n-\t\tFileSystem objFileSystem = (FileSystem)arg0;\n-\t\tif(getName().equals(objFileSystem.getName()))\n-\t\t\treturn true;\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * @see java.lang.Object#hashCode()\n-\t */\n-\tpublic int hashCode() {\n-\t\treturn getName().hashCode();\n-\t}\n-\n-\t/**\n-\t * @see org.apache.tapestry.workbench.tree.examples.fsmodel.IFileSystemTreeNode#getAbsolutePath()\n-\t */\n-\tpublic String getAbsolutePath() {\n-\t\treturn \"\";\n-\t}\n-\n-\t/**\n-\t * @see org.apache.tapestry.workbench.tree.examples.fsmodel.IFileSystemTreeNode#getAssets()\n-\t */\n-\tpublic AssetsHolder getAssets() {\n-\t\tif(m_objAssetsHolder == null){\n-\t\t\tm_objAssetsHolder = new AssetsHolder(\"/org/apache/tapestry/workbench/tree/examples/fsmodel/computer.gif\", \"/org/apache/tapestry/workbench/tree/examples/fsmodel/computer.gif\");\n-\t\t}\n-\t\treturn m_objAssetsHolder;\n-\t}\n-\n-\t/**\n-\t * @see org.apache.tapestry.workbench.tree.examples.fsmodel.IFileSystemTreeNode#getObjectDate()\n-\t */\n-\tpublic Date getDate() {\n-\t\treturn null;\n-\t}\n+\n+    /**\n+     * @see org.apache.tapestry.contrib.tree.model.ITreeNode#containsChild(ITreeNode)\n+     */\n+    public boolean containsChild(ITreeNode node)\n+    {\n+        return true;\n+    }\n+\n+    /**\n+     * @see org.apache.tapestry.contrib.tree.model.ITreeNode#getAllowsChildren()\n+     */\n+    public boolean getAllowsChildren()\n+    {\n+        return true;\n+    }\n+\n+    /**\n+     * @see org.apache.tapestry.contrib.tree.model.ITreeNode#getChildCount()\n+     */\n+    public int getChildCount()\n+    {\n+        return getDrives().size();\n+    }\n+\n+    /**\n+     * @see org.apache.tapestry.contrib.tree.model.ITreeNode#getChildren()\n+     */\n+    public Collection getChildren()\n+    {\n+        return getDrives();\n+    }\n+\n+    /**\n+     * @see org.apache.tapestry.contrib.tree.model.ITreeNode#getParent()\n+     */\n+    public ITreeNode getParent()\n+    {\n+        return null;\n+    }\n+\n+    /**\n+     * @see org.apache.tapestry.contrib.tree.model.ITreeNode#isLeaf()\n+     */\n+    public boolean isLeaf()\n+    {\n+        return false;\n+    }\n+\n+    /**\n+     * @see java.lang.Object#toString()\n+     */\n+    public String toString()\n+    {\n+        return getName();\n+    }\n+\n+    public String getName()\n+    {\n+        return \"FileSystem\";\n+    }\n+\n+    /**\n+     * @see java.lang.Object#equals(Object)\n+     */\n+    public boolean equals(Object arg0)\n+    {\n+        if (!(arg0 instanceof FileSystem))\n+            return false;\n+        FileSystem objFileSystem = (FileSystem) arg0;\n+        if (getName().equals(objFileSystem.getName()))\n+            return true;\n+        return false;\n+    }\n+\n+    /**\n+     * @see java.lang.Object#hashCode()\n+     */\n+    public int hashCode()\n+    {\n+        return getName().hashCode();\n+    }\n+\n+    /**\n+     * @see org.apache.tapestry.workbench.tree.examples.fsmodel.IFileSystemTreeNode#getAbsolutePath()\n+     */\n+    public String getAbsolutePath()\n+    {\n+        return \"\";\n+    }\n+\n+    /**\n+     * @see org.apache.tapestry.workbench.tree.examples.fsmodel.IFileSystemTreeNode#getAssets()\n+     */\n+    public AssetsHolder getAssets()\n+    {\n+        if (m_objAssetsHolder == null)\n+        {\n+            m_objAssetsHolder = new AssetsHolder(_assetService,\n+                    \"/org/apache/tapestry/workbench/tree/examples/fsmodel/computer.gif\",\n+                    \"/org/apache/tapestry/workbench/tree/examples/fsmodel/computer.gif\");\n+        }\n+        return m_objAssetsHolder;\n+    }\n+\n+    /**\n+     * @see org.apache.tapestry.workbench.tree.examples.fsmodel.IFileSystemTreeNode#getObjectDate()\n+     */\n+    public Date getDate()\n+    {\n+        return null;\n+    }\n \n }"
            },
            {
                "sha": "1cdc2349d064eeb13d812f41a26a3c4721c6f315",
                "filename": "examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FileSystemStateManager.java",
                "status": "modified",
                "additions": 20,
                "deletions": 10,
                "changes": 30,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FileSystemStateManager.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FileSystemStateManager.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FileSystemStateManager.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -22,47 +22,57 @@\n import org.apache.tapestry.contrib.tree.model.ITreeSessionStateManager;\n import org.apache.tapestry.contrib.tree.model.ITreeStateModel;\n import org.apache.tapestry.contrib.tree.simple.SimpleTreeModel;\n+import org.apache.tapestry.engine.IEngineService;\n \n /**\n  * @author ceco\n  */\n-public class FileSystemStateManager implements ITreeSessionStateManager {\n+public class FileSystemStateManager implements ITreeSessionStateManager\n+{\n     private String m_strRootDir;\n \n+    private final IEngineService _assetService;\n+\n     /**\n      * Constructor for FileSystemStateManager.\n      */\n-    public FileSystemStateManager(String strRootDir) {\n+    public FileSystemStateManager(String strRootDir, IEngineService assetService)\n+    {\n         super();\n         m_strRootDir = strRootDir;\n+        _assetService = assetService;\n     }\n \n     /**\n      * @see org.apache.tapestry.contrib.tree.model.ITreeSessionStateManager#getSessionState(ITreeModel)\n      */\n-    public Object getSessionState(ITreeModel objModel) {\n+    public Object getSessionState(ITreeModel objModel)\n+    {\n         return objModel.getTreeStateModel();\n     }\n \n     /**\n      * @see org.apache.tapestry.contrib.tree.model.ITreeSessionStateManager#getModel(Object)\n      */\n-    public ITreeModel getModel(Object objSessionState) {\n+    public ITreeModel getModel(Object objSessionState)\n+    {\n         ITreeStateModel objStateModel = (ITreeStateModel) objSessionState;\n \n         ITreeNode objParent;\n \n-        if (m_strRootDir == null || \"\".equals(m_strRootDir)) {\n-            objParent = new FileSystem();\n-        } else {\n-            FolderObject objFolder = new FolderObject(null, new File(m_strRootDir), true);\n+        if (m_strRootDir == null || \"\".equals(m_strRootDir))\n+        {\n+            objParent = new FileSystem(_assetService);\n+        }\n+        else\n+        {\n+            FolderObject objFolder = new FolderObject(null, new File(m_strRootDir), true, _assetService);\n             objFolder.reload();\n             objParent = objFolder;\n         }\n \n         ITreeDataModel objDataModel = new FileSystemDataModel(objParent);\n-        ITreeModel objModel = new SimpleTreeModel(objDataModel,\n-                                                    objStateModel);\n+        ITreeModel objModel = new SimpleTreeModel(objDataModel, objStateModel);\n \n         return objModel;\n     }"
            },
            {
                "sha": "0482d0a90fb341ded5c89e5eb039310e4cda370c",
                "filename": "examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FolderObject.java",
                "status": "modified",
                "additions": 59,
                "deletions": 32,
                "changes": 91,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FolderObject.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FolderObject.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/examples/Workbench/src/java/org/apache/tapestry/workbench/tree/examples/fsmodel/FolderObject.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -20,12 +20,12 @@\n import java.util.Vector;\n \n import org.apache.tapestry.contrib.tree.model.ITreeNode;\n+import org.apache.tapestry.engine.IEngineService;\n \n public class FolderObject extends SFObject\n {\n-    private static final long serialVersionUID = 8237515756497487278L;\n \n-\t/**\n+    /**\n      * @associates <{File}>\n      * @supplierCardinality 0..*\n      * @link aggregation\n@@ -38,55 +38,77 @@\n      * @link aggregation\n      */\n     private Vector m_vFolders = null;\n+\n     private boolean m_bShared;\n \n-    public FolderObject(ITreeNode objParent, File objFile, boolean bInvokeInit) {\n+    private final IEngineService _assetService;\n+\n+    public FolderObject(ITreeNode objParent, File objFile, boolean bInvokeInit,\n+            IEngineService assetService)\n+    {\n         super(objParent, objFile);\n-        if(bInvokeInit)\n-        \tinit();\n+\n+        _assetService = assetService;\n+\n+        if (bInvokeInit)\n+            init();\n     }\n \n-    public void reload() {\n+    public void reload()\n+    {\n         m_vFolders = new Vector();\n         m_vFiles = new Vector();\n \n         File[] arrFiles = getFile().listFiles();\n \n-        if (arrFiles == null) {\n+        if (arrFiles == null)\n+        {\n             return;\n         }\n \n-        for (int i=0; i<arrFiles.length; i++) {\n-            if (arrFiles[i].isDirectory()) {\n-                m_vFolders.addElement(new FolderObject(this, arrFiles[i], true));\n-            } else {\n-                m_vFiles.addElement(new FileObject(this, arrFiles[i]));\n+        for (int i = 0; i < arrFiles.length; i++)\n+        {\n+            if (arrFiles[i].isDirectory())\n+            {\n+                m_vFolders.addElement(new FolderObject(this, arrFiles[i], true, _assetService));\n+            }\n+            else\n+            {\n+                m_vFiles.addElement(new FileObject(this, arrFiles[i], _assetService));\n             }\n         }\n     }\n \n-    public boolean isShared() {\n+    public boolean isShared()\n+    {\n         return m_bShared;\n     }\n \n-    public Vector getFolders() {\n-        if (m_vFolders == null) {\n+    public Vector getFolders()\n+    {\n+        if (m_vFolders == null)\n+        {\n             reload();\n         }\n         return m_vFolders;\n     }\n \n-    public Vector getFiles() {\n-        if (m_vFiles == null) {\n+    public Vector getFiles()\n+    {\n+        if (m_vFiles == null)\n+        {\n             reload();\n         }\n         return m_vFiles;\n     }\n \n-    public int getChildNumber(Object objChild) {\n-        for(int i = 0; i < m_vFolders.size(); i++) {\n+    public int getChildNumber(Object objChild)\n+    {\n+        for (int i = 0; i < m_vFolders.size(); i++)\n+        {\n             Object objChildFolder = m_vFolders.elementAt(i);\n-            if (objChildFolder.equals(objChild)) {\n+            if (objChildFolder.equals(objChild))\n+            {\n                 return i;\n             }\n         }\n@@ -96,28 +118,32 @@ public int getChildNumber(Object objChild) {\n     /**\n      * @see org.apache.tapestry.contrib.tree.model.ITreeNode#containsChild(ITreeNode)\n      */\n-    public boolean containsChild(ITreeNode node) {\n+    public boolean containsChild(ITreeNode node)\n+    {\n         return true;\n     }\n \n     /**\n      * @see org.apache.tapestry.contrib.tree.model.ITreeNode#getAllowsChildren()\n      */\n-    public boolean getAllowsChildren() {\n+    public boolean getAllowsChildren()\n+    {\n         return true;\n     }\n \n     /**\n      * @see org.apache.tapestry.contrib.tree.model.ITreeNode#getChildCount()\n      */\n-    public int getChildCount() {\n+    public int getChildCount()\n+    {\n         return getFolders().size() + getFiles().size();\n     }\n \n     /**\n      * @see org.apache.tapestry.contrib.tree.model.ITreeNode#getChildren()\n      */\n-    public Collection getChildren() {\n+    public Collection getChildren()\n+    {\n         ArrayList arrChildrens = new ArrayList();\n         arrChildrens.addAll(getFolders());\n         arrChildrens.addAll(getFiles());\n@@ -127,19 +153,20 @@ public Collection getChildren() {\n     /**\n      * @see org.apache.tapestry.contrib.tree.model.ITreeNode#isLeaf()\n      */\n-    public boolean isLeaf() {\n+    public boolean isLeaf()\n+    {\n         return false;\n     }\n \n-    private final static String openImage =\n-        \"/org/apache/tapestry/workbench/tree/examples/fsmodel/TreeOpen.gif\";\n+    private final static String openImage = \"/org/apache/tapestry/workbench/tree/examples/fsmodel/TreeOpen.gif\";\n \n-    private final static String closedImage =\n-        \"/org/apache/tapestry/workbench/tree/examples/fsmodel/TreeClosed.gif\";\n+    private final static String closedImage = \"/org/apache/tapestry/workbench/tree/examples/fsmodel/TreeClosed.gif\";\n \n-    public AssetsHolder getAssets() {\n-        if (m_objAssetsHolder == null) {\n-            m_objAssetsHolder = new AssetsHolder(openImage, closedImage);\n+    public AssetsHolder getAssets()\n+    {\n+        if (m_objAssetsHolder == null)\n+        {\n+            m_objAssetsHolder = new AssetsHolder(_assetService, openImage, closedImage);\n         }\n         return m_objAssetsHolder;\n     }"
            },
            {
                "sha": "a9157650858cf9c6b411315a745077f6152ec9ad",
                "filename": "framework/src/java/org/apache/tapestry/resolver/PageSpecificationResolverImpl.java",
                "status": "modified",
                "additions": 16,
                "deletions": 5,
                "changes": 21,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/java/org/apache/tapestry/resolver/PageSpecificationResolverImpl.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/java/org/apache/tapestry/resolver/PageSpecificationResolverImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/java/org/apache/tapestry/resolver/PageSpecificationResolverImpl.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -15,6 +15,7 @@\n package org.apache.tapestry.resolver;\n \n import org.apache.commons.logging.Log;\n+import org.apache.hivemind.ApplicationRuntimeException;\n import org.apache.hivemind.Resource;\n import org.apache.hivemind.impl.LocationImpl;\n import org.apache.tapestry.INamespace;\n@@ -60,6 +61,8 @@\n public class PageSpecificationResolverImpl extends AbstractSpecificationResolver implements\n         PageSpecificationResolver\n {\n+    private static final String WEB_INF = \"/WEB-INF/\";\n+\n     /** set by container */\n     private Log _log;\n \n@@ -149,6 +152,12 @@ private void searchForPage(IRequestCycle cycle)\n         if (_log.isDebugEnabled())\n             _log.debug(ResolverMessages.resolvingPage(_simpleName, namespace));\n \n+        // Check with and without the leading slash\n+\n+        if (_simpleName.regionMatches(true, 0, WEB_INF, 0, WEB_INF.length())\n+                || _simpleName.regionMatches(true, 0, WEB_INF, 1, WEB_INF.length() - 1))\n+            throw new ApplicationRuntimeException(ResolverMessages.webInfNotAllowed(_simpleName));\n+\n         String expectedName = _simpleName + \".page\";\n \n         Resource namespaceLocation = namespace.getSpecificationLocation();\n@@ -157,21 +166,21 @@ private void searchForPage(IRequestCycle cycle)\n         // as the library or application specification that's\n         // supposed to contain the page.\n \n-        if (found(namespaceLocation.getRelativeResource(expectedName)))\n+        if (found(namespaceLocation, expectedName))\n             return;\n \n         if (namespace.isApplicationNamespace())\n         {\n \n             // The application namespace gets some extra searching.\n \n-            if (found(getWebInfAppLocation().getRelativeResource(expectedName)))\n+            if (found(getWebInfAppLocation(), expectedName))\n                 return;\n \n-            if (found(getWebInfLocation().getRelativeResource(expectedName)))\n+            if (found(getWebInfLocation(), expectedName))\n                 return;\n \n-            if (found(getContextRoot().getRelativeResource(expectedName)))\n+            if (found(getContextRoot(), expectedName))\n                 return;\n \n             // The wierd one ... where we see if there's a template in the application root\n@@ -247,8 +256,10 @@ private void setupImplicitPage(Resource resource, Resource namespaceLocation)\n         install();\n     }\n \n-    private boolean found(Resource resource)\n+    private boolean found(Resource baseResource, String expectedName)\n     {\n+        Resource resource = baseResource.getRelativeResource(expectedName);\n+\n         if (_log.isDebugEnabled())\n             _log.debug(ResolverMessages.checkingResource(resource));\n "
            },
            {
                "sha": "46a7b64b4799305304833043f92c4242f987e410",
                "filename": "framework/src/java/org/apache/tapestry/resolver/ResolverMessages.java",
                "status": "modified",
                "additions": 5,
                "deletions": 0,
                "changes": 5,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/java/org/apache/tapestry/resolver/ResolverMessages.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/java/org/apache/tapestry/resolver/ResolverMessages.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/java/org/apache/tapestry/resolver/ResolverMessages.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -83,4 +83,9 @@ public static String componentIsDeprecated(String componentType, Location locati\n         return _formatter.format(\"component-is-deprecated\", componentType, HiveMind\n                 .getLocationString(location));\n     }\n+\n+    static String webInfNotAllowed(String simpleName)\n+    {\n+        return _formatter.format(\"web-inf-not-allowed\", simpleName);\n+    }\n }\n\\ No newline at end of file"
            },
            {
                "sha": "f2d8f5f221bdcc867e082f361ee0f2ee3d67408a",
                "filename": "framework/src/java/org/apache/tapestry/resolver/ResolverStrings.properties",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/java/org/apache/tapestry/resolver/ResolverStrings.properties",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/java/org/apache/tapestry/resolver/ResolverStrings.properties",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/java/org/apache/tapestry/resolver/ResolverStrings.properties?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -21,4 +21,5 @@ installing-component=Installing component type ''{0}'' into {1} as {2}.\n installing-page=Installing page ''{0}'' into {1} as {2}.\n found-framework-page=Found page ''{0}'' in framework namespace.\n found-html-template=Found HTML template at {0}.\n-component-is-deprecated=Component ''{0}'' (at {1}) is deprecated, and will likely be removed in a later release. Consult its documentation to find a replacement component.\n\\ No newline at end of file\n+component-is-deprecated=Component ''{0}'' (at {1}) is deprecated, and will likely be removed in a later release. Consult its documentation to find a replacement component.\n+web-inf-not-allowed=Page name ''{0}'' is not valid, as it directly references a file stored in the WEB-INF folder.\n\\ No newline at end of file"
            },
            {
                "sha": "75dfd943ad9350ccebe1bff46efdb12ebb054267",
                "filename": "framework/src/java/org/apache/tapestry/services/impl/EngineServiceInnerProxy.java",
                "status": "modified",
                "additions": 4,
                "deletions": 1,
                "changes": 5,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/java/org/apache/tapestry/services/impl/EngineServiceInnerProxy.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/java/org/apache/tapestry/services/impl/EngineServiceInnerProxy.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/java/org/apache/tapestry/services/impl/EngineServiceInnerProxy.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -15,6 +15,7 @@\n package org.apache.tapestry.services.impl;\n \n import java.io.IOException;\n+import java.io.Serializable;\n \n import org.apache.hivemind.util.Defense;\n import org.apache.tapestry.IRequestCycle;\n@@ -30,8 +31,10 @@\n  * @since 4.0\n  * @see org.apache.tapestry.services.impl.EngineServiceOuterProxy\n  */\n-public class EngineServiceInnerProxy implements IEngineService\n+public class EngineServiceInnerProxy implements IEngineService, Serializable\n {\n+    private static final long serialVersionUID = -8128030027597659447L;\n+\n     private final String _serviceName;\n \n     private final EngineServiceOuterProxy _outerProxy;"
            },
            {
                "sha": "dd8609609c77fa630a65f79c339677e4cff16cfc",
                "filename": "framework/src/java/org/apache/tapestry/services/impl/EngineServiceOuterProxy.java",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/java/org/apache/tapestry/services/impl/EngineServiceOuterProxy.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/java/org/apache/tapestry/services/impl/EngineServiceOuterProxy.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/java/org/apache/tapestry/services/impl/EngineServiceOuterProxy.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -15,6 +15,7 @@\n package org.apache.tapestry.services.impl;\n \n import java.io.IOException;\n+import java.io.Serializable;\n \n import org.apache.hivemind.util.Defense;\n import org.apache.tapestry.IRequestCycle;\n@@ -32,7 +33,7 @@\n  * @author Howard M. Lewis Ship\n  * @since 4.0\n  */\n-public class EngineServiceOuterProxy implements IEngineService\n+public class EngineServiceOuterProxy implements IEngineService, Serializable\n {\n     private final String _serviceName;\n "
            },
            {
                "sha": "5543f62b285210d5ab40933fa66252dd3bff2033",
                "filename": "framework/src/java/org/apache/tapestry/services/impl/EngineServiceSource.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/java/org/apache/tapestry/services/impl/EngineServiceSource.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/java/org/apache/tapestry/services/impl/EngineServiceSource.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/java/org/apache/tapestry/services/impl/EngineServiceSource.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -17,11 +17,11 @@\n import org.apache.tapestry.engine.IEngineService;\n \n /**\n- * Interface exposed to XXX that allows {@link IEngineService}&nbsp;proxies to be converted to real\n- * instances.\n+ * Interface that allows {@link IEngineService} proxies to be converted to real instances.\n  * \n  * @author Howard M. Lewis Ship\n  * @since 4.0\n+ * @see org.apache.tapestry.services.impl.EngineServiceInnerProxy\n  */\n public interface EngineServiceSource\n {"
            },
            {
                "sha": "da57e8ba4c6eb193941b25a18674ae0cdb047b17",
                "filename": "framework/src/test/org/apache/tapestry/resolver/AbstractSpecificationResolverTestCase.java",
                "status": "modified",
                "additions": 79,
                "deletions": 2,
                "changes": 81,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/test/org/apache/tapestry/resolver/AbstractSpecificationResolverTestCase.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/test/org/apache/tapestry/resolver/AbstractSpecificationResolverTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/test/org/apache/tapestry/resolver/AbstractSpecificationResolverTestCase.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -20,7 +20,9 @@\n import org.apache.hivemind.Resource;\n import org.apache.hivemind.test.HiveMindTestCase;\n import org.apache.hivemind.util.URLResource;\n+import org.apache.tapestry.INamespace;\n import org.apache.tapestry.IRequestCycle;\n+import org.apache.tapestry.engine.ISpecificationSource;\n import org.apache.tapestry.spec.IComponentSpecification;\n import org.easymock.MockControl;\n \n@@ -64,12 +66,87 @@ protected Resource newResource(String path)\n         return new URLResource(newURL(path));\n     }\n \n-    protected void train(Log log, MockControl control, String message)\n+    protected void train(Log log, String message)\n     {\n         log.isDebugEnabled();\n-        control.setReturnValue(true);\n+        setReturnValue(log, true);\n \n         log.debug(message);\n     }\n \n+    protected Log newLog()\n+    {\n+        return (Log) newMock(Log.class);\n+    }\n+\n+    protected INamespace newNamespace()\n+    {\n+        return (INamespace) newMock(INamespace.class);\n+    }\n+\n+    protected ISpecificationSource newSource()\n+    {\n+        return (ISpecificationSource) newMock(ISpecificationSource.class);\n+    }\n+\n+    protected void trainContainsPage(INamespace namespace, String pageName, boolean containsPage)\n+    {\n+        namespace.containsPage(pageName);\n+        setReturnValue(namespace, containsPage);\n+    }\n+\n+    protected void trainFindPageSpecification(ISpecificationResolverDelegate delegate, IRequestCycle cycle, INamespace application, String pageName, IComponentSpecification spec)\n+    {\n+        delegate.findPageSpecification(cycle, application, pageName);\n+        setReturnValue(delegate, spec);\n+    }\n+\n+    protected void trainGetApplicationNamespace(ISpecificationSource source, INamespace application)\n+    {\n+        source.getApplicationNamespace();\n+        setReturnValue(source, application);\n+    }\n+\n+    protected void trainGetChildNamespace(INamespace child, String name, INamespace application)\n+    {\n+        application.getChildNamespace(name);\n+        setReturnValue(application, child);\n+    }\n+\n+    protected void trainGetFrameworkNamespace(ISpecificationSource source, INamespace framework)\n+    {\n+        source.getFrameworkNamespace();\n+        setReturnValue(source, framework);\n+    }\n+\n+    protected void trainGetNamespaceId(INamespace namespace, String namespaceId)\n+    {\n+        namespace.getNamespaceId();\n+        setReturnValue(namespace, namespaceId);\n+    }\n+\n+    protected void trainGetSpecificationLocation(INamespace namespace, Resource resource)\n+    {\n+        namespace.getSpecificationLocation();\n+        setReturnValue(namespace, resource);\n+    }\n+\n+    protected void trainGetSpecificationLocation(INamespace namespace, Resource root, String path)\n+    {\n+        namespace.getSpecificationLocation();\n+        setReturnValue(namespace, root.getRelativeResource(path));\n+    }\n+\n+    protected void trainIsApplicationNamespace(INamespace namespace, boolean isApplicationNamespace)\n+    {\n+        namespace.isApplicationNamespace();\n+        setReturnValue(namespace, isApplicationNamespace);\n+    }\n+\n+    protected void trainIsDebugEnabled(Log log, boolean isDebugEnabled)\n+    {\n+        log.isDebugEnabled();\n+        setReturnValue(log, isDebugEnabled);\n+    }\n+\n }\n\\ No newline at end of file"
            },
            {
                "sha": "a5912ae3cfcdffc171b48501d9fbbd659998b509",
                "filename": "framework/src/test/org/apache/tapestry/resolver/PageSpecificationResolverTest.java",
                "status": "renamed",
                "additions": 352,
                "deletions": 365,
                "changes": 717,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/test/org/apache/tapestry/resolver/PageSpecificationResolverTest.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/test/org/apache/tapestry/resolver/PageSpecificationResolverTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/test/org/apache/tapestry/resolver/PageSpecificationResolverTest.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -17,6 +17,7 @@\n import java.util.List;\n \n import org.apache.commons.logging.Log;\n+import org.apache.hivemind.ApplicationRuntimeException;\n import org.apache.hivemind.Location;\n import org.apache.hivemind.Resource;\n import org.apache.tapestry.INamespace;\n@@ -28,90 +29,99 @@\n import org.apache.tapestry.spec.ComponentSpecification;\n import org.apache.tapestry.spec.IComponentSpecification;\n import org.apache.tapestry.spec.ILibrarySpecification;\n-import org.easymock.MockControl;\n \n /**\n  * Tests for {@link org.apache.tapestry.resolver.PageSpecificationResolverImpl}.\n  * \n  * @author Howard M. Lewis Ship\n  * @since 4.0\n  */\n-public class TestPageSpecificationResolver extends AbstractSpecificationResolverTestCase\n+public class PageSpecificationResolverTest extends AbstractSpecificationResolverTestCase\n {\n     private static class MockApplicationNamespace implements INamespace\n     {\n-        private Resource _specificationLocation;\n-\n         String _pageName;\n \n         IComponentSpecification _specification;\n \n+        private Resource _specificationLocation;\n+\n         MockApplicationNamespace(Resource specificationLocation)\n         {\n             _specificationLocation = specificationLocation;\n         }\n \n-        public String getId()\n+        public String constructQualifiedName(String pageName)\n         {\n             return null;\n         }\n \n-        public String getExtendedId()\n+        public boolean containsComponentType(String type)\n+        {\n+            return false;\n+        }\n+\n+        public boolean containsPage(String name)\n+        {\n+            return false;\n+        }\n+\n+        public List getChildIds()\n         {\n             return null;\n         }\n \n-        public String getNamespaceId()\n+        public INamespace getChildNamespace(String id)\n         {\n             return null;\n         }\n \n-        public INamespace getParentNamespace()\n+        public IComponentSpecification getComponentSpecification(String type)\n         {\n             return null;\n         }\n \n-        public INamespace getChildNamespace(String id)\n+        public String getExtendedId()\n         {\n             return null;\n         }\n \n-        public List getChildIds()\n+        public String getId()\n         {\n             return null;\n         }\n \n-        public IComponentSpecification getPageSpecification(String name)\n+        public Location getLocation()\n         {\n             return null;\n         }\n \n-        public boolean containsPage(String name)\n+        public String getNamespaceId()\n         {\n-            return false;\n+            return null;\n         }\n \n         public List getPageNames()\n         {\n             return null;\n         }\n \n-        public IComponentSpecification getComponentSpecification(String type)\n+        public IComponentSpecification getPageSpecification(String name)\n         {\n             return null;\n         }\n \n-        public boolean containsComponentType(String type)\n+        public INamespace getParentNamespace()\n         {\n-            return false;\n+            return null;\n         }\n \n-        public ILibrarySpecification getSpecification()\n+        public String getPropertyValue(String propertyName)\n         {\n             return null;\n         }\n \n-        public String constructQualifiedName(String pageName)\n+        public ILibrarySpecification getSpecification()\n         {\n             return null;\n         }\n@@ -121,9 +131,8 @@ public Resource getSpecificationLocation()\n             return _specificationLocation;\n         }\n \n-        public boolean isApplicationNamespace()\n+        public void installComponentSpecification(String type, IComponentSpecification specification)\n         {\n-            return true;\n         }\n \n         public void installPageSpecification(String pageName, IComponentSpecification specification)\n@@ -132,122 +141,96 @@ public void installPageSpecification(String pageName, IComponentSpecification sp\n             _specification = specification;\n         }\n \n-        public void installComponentSpecification(String type, IComponentSpecification specification)\n-        {\n-        }\n-\n-        public Location getLocation()\n+        public boolean isApplicationNamespace()\n         {\n-            return null;\n+            return true;\n         }\n \n-        public String getPropertyValue(String propertyName)\n-        {\n-            return null;\n-        }\n+    }\n \n+    private ISpecificationResolverDelegate newDelegate()\n+    {\n+        return (ISpecificationResolverDelegate) newMock(ISpecificationResolverDelegate.class);\n     }\n \n-    private ISpecificationSource newSource(INamespace application, INamespace framework)\n+    private INamespace newNamespace(String pageName, IComponentSpecification spec)\n     {\n-        MockControl control = newControl(ISpecificationSource.class);\n-        ISpecificationSource source = (ISpecificationSource) control.getMock();\n+        INamespace namespace = newNamespace();\n \n-        trainGetApplicationNamespace(control, source, application);\n+        trainContainsPage(namespace, pageName, spec != null);\n \n-        trainGetFrameworkNamespace(control, source, framework);\n+        if (spec != null)\n+            trainGetPageSpecification(namespace, pageName, spec);\n \n-        return source;\n+        return namespace;\n     }\n \n-    private void trainGetFrameworkNamespace(MockControl control, ISpecificationSource source,\n-            INamespace framework)\n+    private ComponentPropertySource newPropertySource(INamespace namespace)\n     {\n-        source.getFrameworkNamespace();\n-        control.setReturnValue(framework);\n-    }\n+        ComponentPropertySource source = (ComponentPropertySource) newMock(ComponentPropertySource.class);\n \n-    private void trainGetApplicationNamespace(MockControl control, ISpecificationSource source,\n-            INamespace application)\n-    {\n-        source.getApplicationNamespace();\n-        control.setReturnValue(application);\n+        source.getNamespaceProperty(namespace, Tapestry.TEMPLATE_EXTENSION_PROPERTY);\n+        setReturnValue(source, \"html\");\n+\n+        return source;\n     }\n \n-    private ISpecificationSource newSource(INamespace application, INamespace framework,\n-            Resource resource, IComponentSpecification pageSpec)\n+    private ISpecificationSource newSource(INamespace application, INamespace framework)\n     {\n-        MockControl control = newControl(ISpecificationSource.class);\n-        ISpecificationSource source = (ISpecificationSource) control.getMock();\n-\n-        source.getApplicationNamespace();\n-        control.setReturnValue(application);\n+        ISpecificationSource source = newSource();\n \n-        source.getFrameworkNamespace();\n-        control.setReturnValue(framework);\n+        trainGetApplicationNamespace(source, application);\n \n-        source.getPageSpecification(resource);\n-        control.setReturnValue(pageSpec);\n+        trainGetFrameworkNamespace(source, framework);\n \n         return source;\n     }\n \n-    private INamespace newNamespace()\n-    {\n-        return (INamespace) newMock(INamespace.class);\n-    }\n-\n-    private INamespace newNamespace(String pageName, IComponentSpecification spec)\n+    private ISpecificationSource newSource(INamespace application, INamespace framework,\n+            Resource resource, IComponentSpecification pageSpec)\n     {\n-        MockControl control = newControl(INamespace.class);\n-        INamespace namespace = (INamespace) control.getMock();\n+        ISpecificationSource source = newSource();\n \n-        namespace.containsPage(pageName);\n-        control.setReturnValue(spec != null);\n+        trainGetApplicationNamespace(source, application);\n \n-        if (spec != null)\n-        {\n-            namespace.getPageSpecification(pageName);\n-            control.setReturnValue(spec);\n-        }\n-\n-        return namespace;\n-    }\n-\n-    private ComponentPropertySource newPropertySource(INamespace namespace)\n-    {\n-        MockControl control = newControl(ComponentPropertySource.class);\n-        ComponentPropertySource source = (ComponentPropertySource) control.getMock();\n+        trainGetFrameworkNamespace(source, framework);\n \n-        source.getNamespaceProperty(namespace, Tapestry.TEMPLATE_EXTENSION_PROPERTY);\n-        control.setReturnValue(\"html\");\n+        trainGetPageSpecification(source, resource, pageSpec);\n \n         return source;\n     }\n \n-    public void testFoundInApplicationNamespace()\n+    public void testExplicitlyInApplicationNamespace()\n     {\n         Resource contextRoot = newResource(\"context/\");\n         IComponentSpecification spec = newSpecification();\n         INamespace application = newNamespace(\"ExistingPage\", spec);\n         INamespace framework = newNamespace();\n-        ISpecificationSource source = newSource(application, framework);\n+\n+        ISpecificationSource source = newSource();\n+\n+        trainGetApplicationNamespace(source, application);\n+        trainGetFrameworkNamespace(source, framework);\n+\n         IRequestCycle cycle = newCycle();\n \n+        trainGetApplicationNamespace(source, application);\n+\n         replayControls();\n \n         PageSpecificationResolverImpl resolver = new PageSpecificationResolverImpl();\n         resolver.setContextRoot(contextRoot);\n         resolver.setSpecificationSource(source);\n         resolver.initializeService();\n \n-        resolver.resolve(cycle, \"ExistingPage\");\n+        resolver.resolve(cycle, \"application:ExistingPage\");\n \n         assertEquals(\"ExistingPage\", resolver.getSimplePageName());\n         assertSame(spec, resolver.getSpecification());\n         assertSame(application, resolver.getNamespace());\n \n         verifyControls();\n+\n     }\n \n     public void testExplicitlyInFrameworkNamespace()\n@@ -257,15 +240,14 @@ public void testExplicitlyInFrameworkNamespace()\n         INamespace application = newNamespace();\n         INamespace framework = newNamespace(\"ExistingPage\", spec);\n \n-        MockControl sourcec = newControl(ISpecificationSource.class);\n-        ISpecificationSource source = (ISpecificationSource) sourcec.getMock();\n+        ISpecificationSource source = newSource();\n \n-        trainGetApplicationNamespace(sourcec, source, application);\n-        trainGetFrameworkNamespace(sourcec, source, framework);\n+        trainGetApplicationNamespace(source, application);\n+        trainGetFrameworkNamespace(source, framework);\n \n         IRequestCycle cycle = newCycle();\n \n-        trainGetFrameworkNamespace(sourcec, source, framework);\n+        trainGetFrameworkNamespace(source, framework);\n \n         replayControls();\n \n@@ -283,38 +265,107 @@ public void testExplicitlyInFrameworkNamespace()\n         verifyControls();\n     }\n \n-    public void testExplicitlyInApplicationNamespace()\n+    public void testFoundAsTemplate()\n     {\n+        Log log = newLog();\n+\n         Resource contextRoot = newResource(\"context/\");\n-        IComponentSpecification spec = newSpecification();\n-        INamespace application = newNamespace(\"ExistingPage\", spec);\n-        INamespace framework = newNamespace();\n \n-        MockControl sourcec = newControl(ISpecificationSource.class);\n-        ISpecificationSource source = (ISpecificationSource) sourcec.getMock();\n+        Resource resource = contextRoot.getRelativeResource(\"TemplatePage.html\");\n \n-        trainGetApplicationNamespace(sourcec, source, application);\n-        trainGetFrameworkNamespace(sourcec, source, framework);\n+        MockApplicationNamespace application = new MockApplicationNamespace(contextRoot\n+                .getRelativeResource(\"WEB-INF/\"));\n \n+        INamespace framework = newNamespace();\n+        ISpecificationSource source = newSource(application, framework);\n         IRequestCycle cycle = newCycle();\n \n-        trainGetApplicationNamespace(sourcec, source, application);\n+        ComponentPropertySource propertySource = newPropertySource(application);\n+\n+        train(log, ResolverMessages.resolvingPage(\"TemplatePage\", application));\n+\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"WEB-INF/TemplatePage.page\")));\n+\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"WEB-INF/myapp/TemplatePage.page\")));\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"WEB-INF/TemplatePage.page\")));\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"TemplatePage.page\")));\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"TemplatePage.html\")));\n+\n+        train(log, ResolverMessages.foundHTMLTemplate(resource));\n+\n+        IComponentSpecification expectedSpec = new ComponentSpecification();\n+        expectedSpec.setPageSpecification(true);\n+        expectedSpec.setSpecificationLocation(resource);\n+\n+        // The toString() on ComponentSpecification means we can't predict\n+        // what the string would be.\n+\n+        trainIsDebugEnabled(log, false);\n \n         replayControls();\n \n         PageSpecificationResolverImpl resolver = new PageSpecificationResolverImpl();\n         resolver.setContextRoot(contextRoot);\n         resolver.setSpecificationSource(source);\n+        resolver.setLog(log);\n+        resolver.setApplicationId(\"myapp\");\n+        resolver.setComponentPropertySource(propertySource);\n+\n         resolver.initializeService();\n \n-        resolver.resolve(cycle, \"application:ExistingPage\");\n+        resolver.resolve(cycle, \"TemplatePage\");\n+\n+        IComponentSpecification spec = application._specification;\n+\n+        assertEquals(true, spec.isPageSpecification());\n+\n+        // The specification location is used to find relative assets and the like, and is baesd\n+        // on the page name and the namespace location.\n+\n+        assertEquals(contextRoot.getRelativeResource(\"WEB-INF/TemplatePage.page\"), spec\n+                .getSpecificationLocation());\n+\n+        // The Location is used for any error reporting, and should be the actual file\n+        // located, the template.\n+\n+        assertEquals(resource, spec.getLocation().getResource());\n+        assertEquals(\"TemplatePage\", resolver.getSimplePageName());\n+        assertEquals(\"TemplatePage\", application._pageName);\n \n-        assertEquals(\"ExistingPage\", resolver.getSimplePageName());\n         assertSame(spec, resolver.getSpecification());\n         assertSame(application, resolver.getNamespace());\n \n         verifyControls();\n+    }\n+\n+    public void testFoundInApplicationNamespace()\n+    {\n+        Resource contextRoot = newResource(\"context/\");\n+        IComponentSpecification spec = newSpecification();\n+        INamespace application = newNamespace(\"ExistingPage\", spec);\n+        INamespace framework = newNamespace();\n+        ISpecificationSource source = newSource(application, framework);\n+        IRequestCycle cycle = newCycle();\n+\n+        replayControls();\n+\n+        PageSpecificationResolverImpl resolver = new PageSpecificationResolverImpl();\n+        resolver.setContextRoot(contextRoot);\n+        resolver.setSpecificationSource(source);\n+        resolver.initializeService();\n+\n+        resolver.resolve(cycle, \"ExistingPage\");\n \n+        assertEquals(\"ExistingPage\", resolver.getSimplePageName());\n+        assertSame(spec, resolver.getSpecification());\n+        assertSame(application, resolver.getNamespace());\n+\n+        verifyControls();\n     }\n \n     public void testFoundInChildNamespace()\n@@ -323,12 +374,9 @@ public void testFoundInChildNamespace()\n         IComponentSpecification spec = newSpecification();\n \n         INamespace child = newNamespace(\"ChildPage\", spec);\n+        INamespace application = newNamespace();\n \n-        MockControl control = newControl(INamespace.class);\n-        INamespace application = (INamespace) control.getMock();\n-\n-        application.getChildNamespace(\"foo.bar\");\n-        control.setReturnValue(child);\n+        trainGetChildNamespace(child, \"foo.bar\", application);\n \n         INamespace framework = newNamespace();\n         ISpecificationSource source = newSource(application, framework);\n@@ -350,96 +398,100 @@ public void testFoundInChildNamespace()\n         verifyControls();\n     }\n \n-    public void testFoundInNamespaceFolder()\n+    public void testFoundInContextRootFolder()\n     {\n-        MockControl logc = newControl(Log.class);\n-        Log log = (Log) logc.getMock();\n+        Log log = newLog();\n \n         Resource contextRoot = newResource(\"context/\");\n         IComponentSpecification spec = newSpecification();\n \n-        Resource resource = contextRoot.getRelativeResource(\"WEB-INF/NamespacePage.page\");\n+        Resource resource = contextRoot.getRelativeResource(\"ContextRootPage.page\");\n \n-        MockControl applicationc = newControl(INamespace.class);\n-        INamespace application = (INamespace) applicationc.getMock();\n+        INamespace application = newNamespace();\n \n         INamespace framework = newNamespace();\n         ISpecificationSource source = newSource(application, framework, resource, spec);\n         IRequestCycle cycle = newCycle();\n \n-        trainContainsPage(applicationc, application, \"NamespacePage\", false);\n+        trainContainsPage(application, \"ContextRootPage\", false);\n \n-        train(log, logc, ResolverMessages.resolvingPage(\"NamespacePage\", application));\n+        train(log, ResolverMessages.resolvingPage(\"ContextRootPage\", application));\n \n         // Pretend the app spec is in the WEB-INF folder\n \n-        trainGetSpecLocation(applicationc, application, contextRoot, \"WEB-INF/\");\n+        trainGetSpecificationLocation(application, contextRoot, \"WEB-INF/\");\n \n-        train(log, logc, ResolverMessages.checkingResource(resource));\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"WEB-INF/ContextRootPage.page\")));\n \n-        train(log, logc, ResolverMessages.installingPage(\"NamespacePage\", application, spec));\n+        trainIsApplicationNamespace(application, true);\n \n-        application.installPageSpecification(\"NamespacePage\", spec);\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"WEB-INF/myapp/ContextRootPage.page\")));\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"WEB-INF/ContextRootPage.page\")));\n+        train(log, ResolverMessages.checkingResource(resource));\n+\n+        train(log, ResolverMessages.installingPage(\"ContextRootPage\", application, spec));\n+\n+        application.installPageSpecification(\"ContextRootPage\", spec);\n \n         replayControls();\n \n         PageSpecificationResolverImpl resolver = new PageSpecificationResolverImpl();\n         resolver.setContextRoot(contextRoot);\n         resolver.setSpecificationSource(source);\n-        resolver.initializeService();\n         resolver.setLog(log);\n+        resolver.setApplicationId(\"myapp\");\n \n-        resolver.resolve(cycle, \"NamespacePage\");\n+        resolver.initializeService();\n \n-        assertEquals(\"NamespacePage\", resolver.getSimplePageName());\n+        resolver.resolve(cycle, \"ContextRootPage\");\n+\n+        assertEquals(\"ContextRootPage\", resolver.getSimplePageName());\n         assertSame(spec, resolver.getSpecification());\n         assertSame(application, resolver.getNamespace());\n \n         verifyControls();\n     }\n \n-    private void trainGetSpecLocation(MockControl control, INamespace namespace, Resource root,\n-            String path)\n-    {\n-        namespace.getSpecificationLocation();\n-        control.setReturnValue(root.getRelativeResource(path));\n-    }\n-\n-    public void testFoundInWebInfAppFolder()\n+    public void testFoundInFramework()\n     {\n-        MockControl logc = newControl(Log.class);\n-        Log log = (Log) logc.getMock();\n+        Log log = newLog();\n+        INamespace application = newNamespace();\n \n         Resource contextRoot = newResource(\"context/\");\n         IComponentSpecification spec = newSpecification();\n \n-        Resource resource = contextRoot.getRelativeResource(\"WEB-INF/myapp/MyAppPage.page\");\n-\n-        MockControl applicationc = newControl(INamespace.class);\n-        INamespace application = (INamespace) applicationc.getMock();\n+        ComponentPropertySource propertySource = newPropertySource(application);\n \n-        INamespace framework = newNamespace();\n-        ISpecificationSource source = newSource(application, framework, resource, spec);\n+        INamespace framework = newNamespace(\"FrameworkPage\", spec);\n+        ISpecificationSource source = newSource(application, framework);\n         IRequestCycle cycle = newCycle();\n \n-        trainContainsPage(applicationc, application, \"MyAppPage\", false);\n+        trainContainsPage(application, \"FrameworkPage\", false);\n \n-        train(log, logc, ResolverMessages.resolvingPage(\"MyAppPage\", application));\n+        train(log, ResolverMessages.resolvingPage(\"FrameworkPage\", application));\n \n         // Pretend the app spec is in the WEB-INF folder\n \n-        trainGetSpecLocation(applicationc, application, contextRoot, \"WEB-INF/\");\n+        trainGetSpecificationLocation(application, contextRoot, \"WEB-INF/\");\n \n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"WEB-INF/MyAppPage.page\")));\n-\n-        trainIsApplicationNamespace(applicationc, application, true);\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"WEB-INF/FrameworkPage.page\")));\n \n-        train(log, logc, ResolverMessages.checkingResource(resource));\n+        trainIsApplicationNamespace(application, true);\n \n-        train(log, logc, ResolverMessages.installingPage(\"MyAppPage\", application, spec));\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"WEB-INF/myapp/FrameworkPage.page\")));\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"WEB-INF/FrameworkPage.page\")));\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"FrameworkPage.page\")));\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"FrameworkPage.html\")));\n \n-        application.installPageSpecification(\"MyAppPage\", spec);\n+        train(log, ResolverMessages.foundFrameworkPage(\"FrameworkPage\"));\n \n         replayControls();\n \n@@ -448,127 +500,98 @@ public void testFoundInWebInfAppFolder()\n         resolver.setSpecificationSource(source);\n         resolver.setLog(log);\n         resolver.setApplicationId(\"myapp\");\n+        resolver.setComponentPropertySource(propertySource);\n \n         resolver.initializeService();\n \n-        resolver.resolve(cycle, \"MyAppPage\");\n+        resolver.resolve(cycle, \"FrameworkPage\");\n \n-        assertEquals(\"MyAppPage\", resolver.getSimplePageName());\n+        assertEquals(\"FrameworkPage\", resolver.getSimplePageName());\n         assertSame(spec, resolver.getSpecification());\n-        assertSame(application, resolver.getNamespace());\n+        assertSame(framework, resolver.getNamespace());\n \n         verifyControls();\n     }\n \n-    private void trainIsApplicationNamespace(MockControl control, INamespace namespace,\n-            boolean isApplicationNamespace)\n-    {\n-        namespace.isApplicationNamespace();\n-        control.setReturnValue(isApplicationNamespace);\n-    }\n-\n-    public void testFoundInWebInfFolder()\n+    public void testFoundInNamespaceFolder()\n     {\n-        MockControl logc = newControl(Log.class);\n-        Log log = (Log) logc.getMock();\n+        Log log = newLog();\n \n         Resource contextRoot = newResource(\"context/\");\n         IComponentSpecification spec = newSpecification();\n \n-        Resource resource = contextRoot.getRelativeResource(\"WEB-INF/MyWebInfPage.page\");\n+        Resource resource = contextRoot.getRelativeResource(\"WEB-INF/NamespacePage.page\");\n \n-        MockControl applicationc = newControl(INamespace.class);\n-        INamespace application = (INamespace) applicationc.getMock();\n+        INamespace application = newNamespace();\n \n         INamespace framework = newNamespace();\n         ISpecificationSource source = newSource(application, framework, resource, spec);\n         IRequestCycle cycle = newCycle();\n \n-        application.containsPage(\"MyWebInfPage\");\n-        applicationc.setReturnValue(false);\n-\n-        train(log, logc, ResolverMessages.resolvingPage(\"MyWebInfPage\", application));\n+        trainContainsPage(application, \"NamespacePage\", false);\n \n-        // Pretend the app spec is in the context root folder\n-        // Which isn't really something that happens in a real application\n-        // but is necessary to keep from finding the file too early.\n-\n-        application.getSpecificationLocation();\n-        applicationc.setReturnValue(contextRoot);\n-\n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"MyWebInfPage.page\")));\n+        train(log, ResolverMessages.resolvingPage(\"NamespacePage\", application));\n \n-        application.isApplicationNamespace();\n-        applicationc.setReturnValue(true);\n+        // Pretend the app spec is in the WEB-INF folder\n \n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"WEB-INF/myapp/MyWebInfPage.page\")));\n+        trainGetSpecificationLocation(application, contextRoot, \"WEB-INF/\");\n \n-        train(log, logc, ResolverMessages.checkingResource(resource));\n+        train(log, ResolverMessages.checkingResource(resource));\n \n-        train(log, logc, ResolverMessages.installingPage(\"MyWebInfPage\", application, spec));\n+        train(log, ResolverMessages.installingPage(\"NamespacePage\", application, spec));\n \n-        application.installPageSpecification(\"MyWebInfPage\", spec);\n+        application.installPageSpecification(\"NamespacePage\", spec);\n \n         replayControls();\n \n         PageSpecificationResolverImpl resolver = new PageSpecificationResolverImpl();\n         resolver.setContextRoot(contextRoot);\n         resolver.setSpecificationSource(source);\n-        resolver.setLog(log);\n-        resolver.setApplicationId(\"myapp\");\n-\n         resolver.initializeService();\n+        resolver.setLog(log);\n \n-        resolver.resolve(cycle, \"MyWebInfPage\");\n+        resolver.resolve(cycle, \"NamespacePage\");\n \n-        assertEquals(\"MyWebInfPage\", resolver.getSimplePageName());\n+        assertEquals(\"NamespacePage\", resolver.getSimplePageName());\n         assertSame(spec, resolver.getSpecification());\n         assertSame(application, resolver.getNamespace());\n \n         verifyControls();\n     }\n \n-    public void testFoundInContextRootFolder()\n+    public void testFoundInWebInfAppFolder()\n     {\n-        MockControl logc = newControl(Log.class);\n-        Log log = (Log) logc.getMock();\n+        Log log = newLog();\n \n         Resource contextRoot = newResource(\"context/\");\n         IComponentSpecification spec = newSpecification();\n \n-        Resource resource = contextRoot.getRelativeResource(\"ContextRootPage.page\");\n+        Resource resource = contextRoot.getRelativeResource(\"WEB-INF/myapp/MyAppPage.page\");\n \n-        MockControl applicationc = newControl(INamespace.class);\n-        INamespace application = (INamespace) applicationc.getMock();\n+        INamespace application = newNamespace();\n \n         INamespace framework = newNamespace();\n         ISpecificationSource source = newSource(application, framework, resource, spec);\n         IRequestCycle cycle = newCycle();\n \n-        trainContainsPage(applicationc, application, \"ContextRootPage\", false);\n+        trainContainsPage(application, \"MyAppPage\", false);\n \n-        train(log, logc, ResolverMessages.resolvingPage(\"ContextRootPage\", application));\n+        train(log, ResolverMessages.resolvingPage(\"MyAppPage\", application));\n \n         // Pretend the app spec is in the WEB-INF folder\n \n-        trainGetSpecLocation(applicationc, application, contextRoot, \"WEB-INF/\");\n+        trainGetSpecificationLocation(application, contextRoot, \"WEB-INF/\");\n \n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"WEB-INF/ContextRootPage.page\")));\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"WEB-INF/MyAppPage.page\")));\n \n-        trainIsApplicationNamespace(applicationc, application, true);\n+        trainIsApplicationNamespace(application, true);\n \n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"WEB-INF/myapp/ContextRootPage.page\")));\n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"WEB-INF/ContextRootPage.page\")));\n-        train(log, logc, ResolverMessages.checkingResource(resource));\n+        train(log, ResolverMessages.checkingResource(resource));\n \n-        train(log, logc, ResolverMessages.installingPage(\"ContextRootPage\", application, spec));\n+        train(log, ResolverMessages.installingPage(\"MyAppPage\", application, spec));\n \n-        application.installPageSpecification(\"ContextRootPage\", spec);\n+        application.installPageSpecification(\"MyAppPage\", spec);\n \n         replayControls();\n \n@@ -580,64 +603,53 @@ public void testFoundInContextRootFolder()\n \n         resolver.initializeService();\n \n-        resolver.resolve(cycle, \"ContextRootPage\");\n+        resolver.resolve(cycle, \"MyAppPage\");\n \n-        assertEquals(\"ContextRootPage\", resolver.getSimplePageName());\n+        assertEquals(\"MyAppPage\", resolver.getSimplePageName());\n         assertSame(spec, resolver.getSpecification());\n         assertSame(application, resolver.getNamespace());\n \n         verifyControls();\n     }\n \n-    private void trainContainsPage(MockControl control, INamespace namespace, String pageName,\n-            boolean containsPage)\n-    {\n-        namespace.containsPage(pageName);\n-        control.setReturnValue(containsPage);\n-    }\n-\n-    public void testFoundAsTemplate()\n+    public void testFoundInWebInfFolder()\n     {\n-        MockControl logc = newControl(Log.class);\n-        Log log = (Log) logc.getMock();\n+        Log log = newLog();\n \n         Resource contextRoot = newResource(\"context/\");\n+        IComponentSpecification spec = newSpecification();\n \n-        Resource resource = contextRoot.getRelativeResource(\"TemplatePage.html\");\n+        Resource resource = contextRoot.getRelativeResource(\"WEB-INF/MyWebInfPage.page\");\n \n-        MockApplicationNamespace application = new MockApplicationNamespace(contextRoot\n-                .getRelativeResource(\"WEB-INF/\"));\n+        INamespace application = newNamespace();\n \n         INamespace framework = newNamespace();\n-        ISpecificationSource source = newSource(application, framework);\n+        ISpecificationSource source = newSource(application, framework, resource, spec);\n         IRequestCycle cycle = newCycle();\n \n-        ComponentPropertySource propertySource = newPropertySource(application);\n+        trainContainsPage(application, \"MyWebInfPage\", false);\n \n-        train(log, logc, ResolverMessages.resolvingPage(\"TemplatePage\", application));\n+        train(log, ResolverMessages.resolvingPage(\"MyWebInfPage\", application));\n \n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"WEB-INF/TemplatePage.page\")));\n+        // Pretend the app spec is in the context root folder\n+        // Which isn't really something that happens in a real application\n+        // but is necessary to keep from finding the file too early.\n \n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"WEB-INF/myapp/TemplatePage.page\")));\n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"WEB-INF/TemplatePage.page\")));\n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"TemplatePage.page\")));\n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"TemplatePage.html\")));\n+        trainGetSpecificationLocation(application, contextRoot);\n \n-        train(log, logc, ResolverMessages.foundHTMLTemplate(resource));\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"MyWebInfPage.page\")));\n \n-        IComponentSpecification expectedSpec = new ComponentSpecification();\n-        expectedSpec.setPageSpecification(true);\n-        expectedSpec.setSpecificationLocation(resource);\n+        trainIsApplicationNamespace(application, true);\n \n-        // The toString() on ComponentSpecification means we can't predict\n-        // what the string would be.\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"WEB-INF/myapp/MyWebInfPage.page\")));\n \n-        trainIsDebugEnabled(logc, log, false);\n+        train(log, ResolverMessages.checkingResource(resource));\n+\n+        train(log, ResolverMessages.installingPage(\"MyWebInfPage\", application, spec));\n+\n+        application.installPageSpecification(\"MyWebInfPage\", spec);\n \n         replayControls();\n \n@@ -646,141 +658,107 @@ public void testFoundAsTemplate()\n         resolver.setSpecificationSource(source);\n         resolver.setLog(log);\n         resolver.setApplicationId(\"myapp\");\n-        resolver.setComponentPropertySource(propertySource);\n \n         resolver.initializeService();\n \n-        resolver.resolve(cycle, \"TemplatePage\");\n-\n-        IComponentSpecification spec = application._specification;\n-\n-        assertEquals(true, spec.isPageSpecification());\n-\n-        // The specification location is used to find relative assets and the like, and is baesd\n-        // on the page name and the namespace location.\n-\n-        assertEquals(contextRoot.getRelativeResource(\"WEB-INF/TemplatePage.page\"), spec\n-                .getSpecificationLocation());\n-\n-        // The Location is used for any error reporting, and should be the actual file\n-        // located, the template.\n-\n-        assertEquals(resource, spec.getLocation().getResource());\n-        assertEquals(\"TemplatePage\", resolver.getSimplePageName());\n-        assertEquals(\"TemplatePage\", application._pageName);\n+        resolver.resolve(cycle, \"MyWebInfPage\");\n \n+        assertEquals(\"MyWebInfPage\", resolver.getSimplePageName());\n         assertSame(spec, resolver.getSpecification());\n         assertSame(application, resolver.getNamespace());\n \n         verifyControls();\n     }\n \n-    private void trainIsDebugEnabled(MockControl control, Log log, boolean isDebugEnabled)\n-    {\n-        log.isDebugEnabled();\n-        control.setReturnValue(isDebugEnabled);\n-    }\n-\n-    public void testFoundInFramework()\n+    public void testWebInf()\n     {\n-        MockControl logc = newControl(Log.class);\n-        Log log = (Log) logc.getMock();\n-\n-        Resource contextRoot = newResource(\"context/\");\n-        IComponentSpecification spec = newSpecification();\n-\n-        MockControl applicationc = newControl(INamespace.class);\n-        INamespace application = (INamespace) applicationc.getMock();\n-\n-        ComponentPropertySource propertySource = newPropertySource(application);\n+        Log log = newLog();\n+        INamespace application = newNamespace();\n+        INamespace framework = newNamespace();\n \n-        INamespace framework = newNamespace(\"FrameworkPage\", spec);\n         ISpecificationSource source = newSource(application, framework);\n         IRequestCycle cycle = newCycle();\n+        Resource contextRoot = newResource(\"context/\");\n \n-        trainContainsPage(applicationc, application, \"FrameworkPage\", false);\n-\n-        train(log, logc, ResolverMessages.resolvingPage(\"FrameworkPage\", application));\n-\n-        // Pretend the app spec is in the WEB-INF folder\n-\n-        trainGetSpecLocation(applicationc, application, contextRoot, \"WEB-INF/\");\n+        trainContainsPage(application, \"/WEB-Inf/BadName\", false);\n \n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"WEB-INF/FrameworkPage.page\")));\n-\n-        trainIsApplicationNamespace(applicationc, application, true);\n-\n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"WEB-INF/myapp/FrameworkPage.page\")));\n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"WEB-INF/FrameworkPage.page\")));\n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"FrameworkPage.page\")));\n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"FrameworkPage.html\")));\n-\n-        train(log, logc, ResolverMessages.foundFrameworkPage(\"FrameworkPage\"));\n+        trainIsDebugEnabled(log, false);\n \n         replayControls();\n \n         PageSpecificationResolverImpl resolver = new PageSpecificationResolverImpl();\n-        resolver.setContextRoot(contextRoot);\n+\n         resolver.setSpecificationSource(source);\n+        resolver.setContextRoot(contextRoot);\n         resolver.setLog(log);\n-        resolver.setApplicationId(\"myapp\");\n-        resolver.setComponentPropertySource(propertySource);\n \n         resolver.initializeService();\n \n-        resolver.resolve(cycle, \"FrameworkPage\");\n+        try\n+        {\n+            resolver.resolve(cycle, \"/WEB-Inf/BadName\");\n+            unreachable();\n+        }\n+        catch (ApplicationRuntimeException ex)\n+        {\n+            assertEquals(\n+                    \"Page name '/WEB-Inf/BadName' is not valid, as it directly references a file stored in the WEB-INF folder.\",\n+                    ex.getMessage());\n+        }\n \n-        assertEquals(\"FrameworkPage\", resolver.getSimplePageName());\n-        assertSame(spec, resolver.getSpecification());\n-        assertSame(framework, resolver.getNamespace());\n+        verifyControls();\n+\n+        trainContainsPage(application, \"web-inf/BadName\", false);\n+\n+        trainIsDebugEnabled(log, false);\n+\n+        replayControls();\n+\n+        try\n+        {\n+            resolver.resolve(cycle, \"web-inf/BadName\");\n+            unreachable();\n+        }\n+        catch (ApplicationRuntimeException ex)\n+        {\n+            assertEquals(\n+                    \"Page name 'web-inf/BadName' is not valid, as it directly references a file stored in the WEB-INF folder.\",\n+                    ex.getMessage());\n+        }\n \n         verifyControls();\n+\n     }\n \n-    public void testProvidedByDelegate()\n+    public void testNotFoundAnywhere()\n     {\n-        MockControl logc = newControl(Log.class);\n-        Log log = (Log) logc.getMock();\n+        Log log = newLog();\n+        INamespace application = newNamespace();\n \n         Resource contextRoot = newResource(\"context/\");\n-        IComponentSpecification spec = newSpecification();\n-\n-        MockControl applicationc = newControl(INamespace.class);\n-        INamespace application = (INamespace) applicationc.getMock();\n \n         INamespace framework = newNamespace();\n         ISpecificationSource source = newSource(application, framework);\n         IRequestCycle cycle = newCycle();\n \n-        trainContainsPage(applicationc, application, \"DelegatePage\", false);\n+        trainContainsPage(application, \"MissingPage\", false);\n \n-        train(log, logc, ResolverMessages.resolvingPage(\"DelegatePage\", application));\n+        train(log, ResolverMessages.resolvingPage(\"MissingPage\", application));\n \n         // Pretend the app spec is in the WEB-INF folder\n \n-        trainGetSpecLocation(applicationc, application, contextRoot, \"WEB-INF/\");\n+        trainGetSpecificationLocation(application, contextRoot, \"WEB-INF/\");\n \n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"WEB-INF/DelegatePage.page\")));\n-\n-        application.isApplicationNamespace();\n-        applicationc.setReturnValue(false);\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"WEB-INF/MissingPage.page\")));\n \n-        MockControl delegatec = newControl(ISpecificationResolverDelegate.class);\n-        ISpecificationResolverDelegate delegate = (ISpecificationResolverDelegate) delegatec\n-                .getMock();\n+        trainIsApplicationNamespace(application, false);\n \n-        delegate.findPageSpecification(cycle, application, \"DelegatePage\");\n-        delegatec.setReturnValue(spec);\n+        ISpecificationResolverDelegate delegate = newDelegate();\n \n-        trainIsDebugEnabled(logc, log, false);\n+        trainFindPageSpecification(delegate, cycle, application, \"MissingPage\", null);\n \n-        application.installPageSpecification(\"DelegatePage\", spec);\n+        trainGetNamespaceId(application, \"<application namespace>\");\n \n         replayControls();\n \n@@ -793,52 +771,52 @@ public void testProvidedByDelegate()\n \n         resolver.initializeService();\n \n-        resolver.resolve(cycle, \"DelegatePage\");\n-\n-        assertEquals(\"DelegatePage\", resolver.getSimplePageName());\n-        assertSame(spec, resolver.getSpecification());\n-        assertSame(application, resolver.getNamespace());\n+        try\n+        {\n+            resolver.resolve(cycle, \"MissingPage\");\n+            unreachable();\n+        }\n+        catch (PageNotFoundException ex)\n+        {\n+            assertEquals(\"Page 'MissingPage' not found in <application namespace>.\", ex\n+                    .getMessage());\n+        }\n \n         verifyControls();\n     }\n \n-    public void testNotFoundAnywhere()\n+    public void testProvidedByDelegate()\n     {\n-        MockControl logc = newControl(Log.class);\n-        Log log = (Log) logc.getMock();\n+        Log log = newLog();\n+        INamespace application = newNamespace();\n \n         Resource contextRoot = newResource(\"context/\");\n-\n-        MockControl applicationc = newControl(INamespace.class);\n-        INamespace application = (INamespace) applicationc.getMock();\n+        IComponentSpecification spec = newSpecification();\n \n         INamespace framework = newNamespace();\n         ISpecificationSource source = newSource(application, framework);\n         IRequestCycle cycle = newCycle();\n \n-        trainContainsPage(applicationc, application, \"MissingPage\", false);\n+        trainContainsPage(application, \"DelegatePage\", false);\n \n-        train(log, logc, ResolverMessages.resolvingPage(\"MissingPage\", application));\n+        train(log, ResolverMessages.resolvingPage(\"DelegatePage\", application));\n \n         // Pretend the app spec is in the WEB-INF folder\n \n-        trainGetSpecLocation(applicationc, application, contextRoot, \"WEB-INF/\");\n+        trainGetSpecificationLocation(application, contextRoot, \"WEB-INF/\");\n \n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n-                .getRelativeResource(\"WEB-INF/MissingPage.page\")));\n+        train(log, ResolverMessages.checkingResource(contextRoot\n+                .getRelativeResource(\"WEB-INF/DelegatePage.page\")));\n \n-        application.isApplicationNamespace();\n-        applicationc.setReturnValue(false);\n+        trainIsApplicationNamespace(application, false);\n \n-        MockControl delegatec = newControl(ISpecificationResolverDelegate.class);\n-        ISpecificationResolverDelegate delegate = (ISpecificationResolverDelegate) delegatec\n-                .getMock();\n+        ISpecificationResolverDelegate delegate = newDelegate();\n \n-        delegate.findPageSpecification(cycle, application, \"MissingPage\");\n-        delegatec.setReturnValue(null);\n+        trainFindPageSpecification(delegate, cycle, application, \"DelegatePage\", spec);\n \n-        application.getNamespaceId();\n-        applicationc.setReturnValue(\"<application namespace>\");\n+        trainIsDebugEnabled(log, false);\n+\n+        application.installPageSpecification(\"DelegatePage\", spec);\n \n         replayControls();\n \n@@ -851,17 +829,26 @@ public void testNotFoundAnywhere()\n \n         resolver.initializeService();\n \n-        try\n-        {\n-            resolver.resolve(cycle, \"MissingPage\");\n-            unreachable();\n-        }\n-        catch (PageNotFoundException ex)\n-        {\n-            assertEquals(\"Page 'MissingPage' not found in <application namespace>.\", ex\n-                    .getMessage());\n-        }\n+        resolver.resolve(cycle, \"DelegatePage\");\n+\n+        assertEquals(\"DelegatePage\", resolver.getSimplePageName());\n+        assertSame(spec, resolver.getSpecification());\n+        assertSame(application, resolver.getNamespace());\n \n         verifyControls();\n     }\n+\n+    private void trainGetPageSpecification(INamespace namespace, String pageName,\n+            IComponentSpecification spec)\n+    {\n+        namespace.getPageSpecification(pageName);\n+        setReturnValue(namespace, spec);\n+    }\n+\n+    private void trainGetPageSpecification(ISpecificationSource source, Resource resource,\n+            IComponentSpecification pageSpec)\n+    {\n+        source.getPageSpecification(resource);\n+        setReturnValue(source, pageSpec);\n+    }\n }\n\\ No newline at end of file",
                "previous_filename": "framework/src/test/org/apache/tapestry/resolver/TestPageSpecificationResolver.java"
            },
            {
                "sha": "7ea17591757562b7b3b4e3a91844a3b2ed59efb5",
                "filename": "framework/src/test/org/apache/tapestry/resolver/TestComponentSpecificationResolver.java",
                "status": "modified",
                "additions": 25,
                "deletions": 25,
                "changes": 50,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/test/org/apache/tapestry/resolver/TestComponentSpecificationResolver.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/framework/src/test/org/apache/tapestry/resolver/TestComponentSpecificationResolver.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/test/org/apache/tapestry/resolver/TestComponentSpecificationResolver.java?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -203,13 +203,13 @@ public void testSearchFoundRelative()\n         namespace.containsComponentType(\"MyComponent\");\n         namespacec.setReturnValue(false);\n \n-        train(log, logc, ResolverMessages.resolvingComponent(\"MyComponent\", namespace));\n+        train(log, ResolverMessages.resolvingComponent(\"MyComponent\", namespace));\n \n         namespace.getSpecificationLocation();\n         namespacec.setReturnValue(namespaceLocation);\n \n-        train(log, logc, ResolverMessages.checkingResource(specLocation));\n-        train(log, logc, ResolverMessages.installingComponent(\"MyComponent\", namespace, spec));\n+        train(log, ResolverMessages.checkingResource(specLocation));\n+        train(log, ResolverMessages.installingComponent(\"MyComponent\", namespace, spec));\n \n         namespace.installComponentSpecification(\"MyComponent\", spec);\n \n@@ -251,12 +251,12 @@ public void testFoundInFrameworkNamespace()\n         namespace.containsComponentType(\"FrameworkComponent\");\n         namespacec.setReturnValue(false);\n \n-        train(log, logc, ResolverMessages.resolvingComponent(\"FrameworkComponent\", namespace));\n+        train(log, ResolverMessages.resolvingComponent(\"FrameworkComponent\", namespace));\n \n         namespace.getSpecificationLocation();\n         namespacec.setReturnValue(namespaceLocation);\n \n-        train(log, logc, ResolverMessages.checkingResource(namespaceLocation\n+        train(log, ResolverMessages.checkingResource(namespaceLocation\n                 .getRelativeResource(\"FrameworkComponent.jwc\")));\n \n         namespace.isApplicationNamespace();\n@@ -273,7 +273,7 @@ public void testFoundInFrameworkNamespace()\n         framework.getComponentSpecification(\"FrameworkComponent\");\n         frameworkc.setReturnValue(spec);\n \n-        train(log, logc, ResolverMessages\n+        train(log, ResolverMessages\n                 .installingComponent(\"FrameworkComponent\", namespace, spec));\n         namespace.installComponentSpecification(\"FrameworkComponent\", spec);\n \n@@ -322,12 +322,12 @@ public void testProvidedByDelegate()\n         namespace.containsComponentType(\"DelegateComponent\");\n         namespacec.setReturnValue(false);\n \n-        train(log, logc, ResolverMessages.resolvingComponent(\"DelegateComponent\", namespace));\n+        train(log, ResolverMessages.resolvingComponent(\"DelegateComponent\", namespace));\n \n         namespace.getSpecificationLocation();\n         namespacec.setReturnValue(namespaceLocation);\n \n-        train(log, logc, ResolverMessages.checkingResource(namespaceLocation\n+        train(log, ResolverMessages.checkingResource(namespaceLocation\n                 .getRelativeResource(\"DelegateComponent.jwc\")));\n \n         namespace.isApplicationNamespace();\n@@ -406,12 +406,12 @@ public void testNotFound()\n         namespace.containsComponentType(\"NotFoundComponent\");\n         namespacec.setReturnValue(false);\n \n-        train(log, logc, ResolverMessages.resolvingComponent(\"NotFoundComponent\", namespace));\n+        train(log, ResolverMessages.resolvingComponent(\"NotFoundComponent\", namespace));\n \n         namespace.getSpecificationLocation();\n         namespacec.setReturnValue(namespaceLocation);\n \n-        train(log, logc, ResolverMessages.checkingResource(namespaceLocation\n+        train(log, ResolverMessages.checkingResource(namespaceLocation\n                 .getRelativeResource(\"NotFoundComponent.jwc\")));\n \n         namespace.isApplicationNamespace();\n@@ -478,19 +478,19 @@ public void testFoundInAppFolder()\n         namespace.containsComponentType(\"MyAppComponent\");\n         namespacec.setReturnValue(false);\n \n-        train(log, logc, ResolverMessages.resolvingComponent(\"MyAppComponent\", namespace));\n+        train(log, ResolverMessages.resolvingComponent(\"MyAppComponent\", namespace));\n \n         namespace.getSpecificationLocation();\n         namespacec.setReturnValue(namespaceLocation);\n \n-        train(log, logc, ResolverMessages.checkingResource(namespaceLocation\n+        train(log, ResolverMessages.checkingResource(namespaceLocation\n                 .getRelativeResource(\"MyAppComponent.jwc\")));\n \n         namespace.isApplicationNamespace();\n         namespacec.setReturnValue(true);\n \n-        train(log, logc, ResolverMessages.checkingResource(specLocation));\n-        train(log, logc, ResolverMessages.installingComponent(\"MyAppComponent\", namespace, spec));\n+        train(log, ResolverMessages.checkingResource(specLocation));\n+        train(log, ResolverMessages.installingComponent(\"MyAppComponent\", namespace, spec));\n \n         namespace.installComponentSpecification(\"MyAppComponent\", spec);\n \n@@ -537,21 +537,21 @@ public void testFoundInWebInfFolder()\n         namespace.containsComponentType(\"MyWebInfComponent\");\n         namespacec.setReturnValue(false);\n \n-        train(log, logc, ResolverMessages.resolvingComponent(\"MyWebInfComponent\", namespace));\n+        train(log, ResolverMessages.resolvingComponent(\"MyWebInfComponent\", namespace));\n \n         namespace.getSpecificationLocation();\n         namespacec.setReturnValue(namespaceLocation);\n \n-        train(log, logc, ResolverMessages.checkingResource(namespaceLocation\n+        train(log, ResolverMessages.checkingResource(namespaceLocation\n                 .getRelativeResource(\"MyWebInfComponent.jwc\")));\n \n         namespace.isApplicationNamespace();\n         namespacec.setReturnValue(true);\n \n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n+        train(log, ResolverMessages.checkingResource(contextRoot\n                 .getRelativeResource(\"WEB-INF/myapp/MyWebInfComponent.jwc\")));\n-        train(log, logc, ResolverMessages.checkingResource(specLocation));\n-        train(log, logc, ResolverMessages.installingComponent(\"MyWebInfComponent\", namespace, spec));\n+        train(log, ResolverMessages.checkingResource(specLocation));\n+        train(log, ResolverMessages.installingComponent(\"MyWebInfComponent\", namespace, spec));\n \n         namespace.installComponentSpecification(\"MyWebInfComponent\", spec);\n \n@@ -598,23 +598,23 @@ public void testFoundInContextRoot()\n         namespace.containsComponentType(\"ContextRootComponent\");\n         namespacec.setReturnValue(false);\n \n-        train(log, logc, ResolverMessages.resolvingComponent(\"ContextRootComponent\", namespace));\n+        train(log, ResolverMessages.resolvingComponent(\"ContextRootComponent\", namespace));\n \n         namespace.getSpecificationLocation();\n         namespacec.setReturnValue(namespaceLocation);\n \n-        train(log, logc, ResolverMessages.checkingResource(namespaceLocation\n+        train(log, ResolverMessages.checkingResource(namespaceLocation\n                 .getRelativeResource(\"ContextRootComponent.jwc\")));\n \n         namespace.isApplicationNamespace();\n         namespacec.setReturnValue(true);\n \n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n+        train(log, ResolverMessages.checkingResource(contextRoot\n                 .getRelativeResource(\"WEB-INF/myapp/ContextRootComponent.jwc\")));\n-        train(log, logc, ResolverMessages.checkingResource(contextRoot\n+        train(log, ResolverMessages.checkingResource(contextRoot\n                 .getRelativeResource(\"WEB-INF/ContextRootComponent.jwc\")));\n-        train(log, logc, ResolverMessages.checkingResource(specLocation));\n-        train(log, logc, ResolverMessages.installingComponent(\n+        train(log, ResolverMessages.checkingResource(specLocation));\n+        train(log, ResolverMessages.installingComponent(\n                 \"ContextRootComponent\",\n                 namespace,\n                 spec));"
            },
            {
                "sha": "72424b8df350da253b0c980a066183d4f7c0a57a",
                "filename": "status.xml",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/status.xml",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa15f2eead1418e9e83c3ccc862b1ce5d56e076a/status.xml",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/status.xml?ref=fa15f2eead1418e9e83c3ccc862b1ce5d56e076a",
                "patch": "@@ -82,6 +82,8 @@\n         ListenerMapSource.createListenerMethodInvoker()</action>\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-387\" due-to=\"Kevin J. Menard, Jr.\">Typographical Errors in\n         Documentation</action>\n+      <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-724\">Tapestry may, in some cases, look for a page class in the wrong package</action>\n+      <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-783\">contrib:Tree fails with NullPointerException</action>\n     </release>\n     <release version=\"4.0-beta-13\" date=\"Nov 12 2005\">\n       <action type=\"update\" dev=\"HLS\">Switch to HiveMind 1.1 (final)</action>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/8a660425ea9b716a75b24eb83cbd3c07713aba97",
        "message": "TAPESTRY-361: Using @Asset annotation causes NullPointerException\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@244367 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_2",
        "file": [
            {
                "sha": "18478a4e0606034609283a6b3bf003e4ddce065d",
                "filename": "annotations/src/descriptor/META-INF/hivemodule.xml",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/tapestry4/blob/d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf/annotations/src/descriptor/META-INF/hivemodule.xml",
                "raw_url": "https://github.com/apache/tapestry4/raw/d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf/annotations/src/descriptor/META-INF/hivemodule.xml",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/annotations/src/descriptor/META-INF/hivemodule.xml?ref=d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf",
                "patch": "@@ -101,14 +101,14 @@\n     <worker annotation=\"InjectObject\" object=\"service:InjectObjectAnnotationWorker\"/>\n     <worker annotation=\"InjectComponent\" object=\"instance:InjectComponentAnnotationWorker\"/>\n     <worker annotation=\"InjectState\" object=\"service:InjectStateAnnotationWorker\"/>\n-    <worker annotation=\"InjectAsset\" object=\"instance:InjectAssetAnnotationWorker\"/>\n     <worker annotation=\"Message\" object=\"instance:MessageAnnotationWorker\"/>\n     \n     <!-- These update the component specification with new sub-elements. Later, the \n          existing enhancement workers perform the work, as if the sub-elements were\n          specified in the XML. This is actually a lot easier and just as powerful, and\n          the delegating style will probably go pretty soon.  -->\n          \n+    <worker annotation=\"InjectAsset\" object=\"instance:InjectAssetAnnotationWorker\"/>\n     <worker annotation=\"Persist\" object=\"instance:PersistAnnotationWorker\"/>\n     <worker annotation=\"Bean\" object=\"instance:BeanAnnotationWorker\"/>\n     <worker annotation=\"Asset\" object=\"instance:AssetAnnotationWorker\"/>"
            },
            {
                "sha": "037545ef1dd6cb1aea314a7dc115453fc32836e4",
                "filename": "annotations/src/java/org/apache/tapestry/annotations/AssetAnnotationWorker.java",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/apache/tapestry4/blob/d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf/annotations/src/java/org/apache/tapestry/annotations/AssetAnnotationWorker.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf/annotations/src/java/org/apache/tapestry/annotations/AssetAnnotationWorker.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/annotations/src/java/org/apache/tapestry/annotations/AssetAnnotationWorker.java?ref=d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf",
                "patch": "@@ -16,6 +16,7 @@\n \n import java.lang.reflect.Method;\n \n+import org.apache.hivemind.impl.LocationImpl;\n import org.apache.tapestry.enhance.EnhancementOperation;\n import org.apache.tapestry.spec.AssetSpecification;\n import org.apache.tapestry.spec.IAssetSpecification;\n@@ -42,6 +43,11 @@ public void performEnhancement(EnhancementOperation op, IComponentSpecification\n         as.setPath(asset.value());\n         as.setPropertyName(propertyName);\n \n+        // Very important for assets, as they need a location (really, the Resource\n+        // of a location) to figure out what kind of asset they are.\n+\n+        as.setLocation(new LocationImpl(spec.getSpecificationLocation()));\n+\n         spec.addAsset(propertyName, as);\n     }\n "
            },
            {
                "sha": "eb9f357f2c12e929079a236208c7caaa5a62583d",
                "filename": "annotations/src/test/org/apache/tapestry/annotations/TestAssetAnnotationWorker.java",
                "status": "modified",
                "additions": 6,
                "deletions": 1,
                "changes": 7,
                "blob_url": "https://github.com/apache/tapestry4/blob/d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf/annotations/src/test/org/apache/tapestry/annotations/TestAssetAnnotationWorker.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf/annotations/src/test/org/apache/tapestry/annotations/TestAssetAnnotationWorker.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/annotations/src/test/org/apache/tapestry/annotations/TestAssetAnnotationWorker.java?ref=d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf",
                "patch": "@@ -16,6 +16,9 @@\n \n import java.lang.reflect.Method;\n \n+import org.apache.hivemind.Location;\n+import org.apache.hivemind.Resource;\n+import org.apache.hivemind.impl.LocationImpl;\n import org.apache.tapestry.enhance.EnhancementOperation;\n import org.apache.tapestry.spec.ComponentSpecification;\n import org.apache.tapestry.spec.IAssetSpecification;\n@@ -32,8 +35,10 @@\n {\n     public void testSuccess()\n     {\n+        Resource r = (Resource) newMock(Resource.class);\n         EnhancementOperation op = newOp();\n         IComponentSpecification spec = new ComponentSpecification();\n+        spec.setSpecificationLocation(r);\n \n         replayControls();\n \n@@ -45,7 +50,7 @@ public void testSuccess()\n \n         IAssetSpecification as = spec.getAsset(\"globalStylesheet\");\n         assertEquals(\"/style/global.css\", as.getPath());\n-        assertNull(as.getLocation());\n+        assertEquals(new LocationImpl(r), as.getLocation());\n         assertEquals(\"globalStylesheet\", as.getPropertyName());\n     }\n }"
            },
            {
                "sha": "9de8c53d46c904c6b9b1bfa8cfa86a3b8f16b87f",
                "filename": "examples/Workbench/src/context/WEB-INF/Border.jwc",
                "status": "modified",
                "additions": 0,
                "deletions": 4,
                "changes": 4,
                "blob_url": "https://github.com/apache/tapestry4/blob/d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf/examples/Workbench/src/context/WEB-INF/Border.jwc",
                "raw_url": "https://github.com/apache/tapestry4/raw/d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf/examples/Workbench/src/context/WEB-INF/Border.jwc",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/examples/Workbench/src/context/WEB-INF/Border.jwc?ref=d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf",
                "patch": "@@ -49,10 +49,6 @@\n     </binding>\n   </component>\n \n-  <asset name=\"activeLeft\" path=\"images/tab-active-left.gif\"/>\n-  <asset name=\"activeMid\" path=\"images/tab-active-mid.gif\"/>\n-  <asset name=\"activeRight\" path=\"images/tab-active-right.gif\"/>\n-\n   <asset name=\"inactiveLeft\" path=\"images/tab-inactive-left.gif\"/>\n   <asset name=\"inactiveMid\" path=\"images/tab-inactive-mid.gif\"/>\n   <asset name=\"inactiveRight\" path=\"images/tab-inactive-right.gif\"/>"
            },
            {
                "sha": "6806324450c1383a96a9683f56ca6bc1be14948a",
                "filename": "examples/Workbench/src/java/org/apache/tapestry/workbench/components/Border.java",
                "status": "modified",
                "additions": 26,
                "deletions": 9,
                "changes": 35,
                "blob_url": "https://github.com/apache/tapestry4/blob/d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf/examples/Workbench/src/java/org/apache/tapestry/workbench/components/Border.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf/examples/Workbench/src/java/org/apache/tapestry/workbench/components/Border.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/examples/Workbench/src/java/org/apache/tapestry/workbench/components/Border.java?ref=d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf",
                "patch": "@@ -18,6 +18,8 @@\n import org.apache.tapestry.IAsset;\n import org.apache.tapestry.IRequestCycle;\n import org.apache.tapestry.TapestryUtils;\n+import org.apache.tapestry.annotations.Asset;\n+import org.apache.tapestry.annotations.InjectAsset;\n import org.apache.tapestry.annotations.InjectState;\n import org.apache.tapestry.annotations.Message;\n import org.apache.tapestry.event.PageBeginRenderListener;\n@@ -88,25 +90,40 @@ public String getPageTitle()\n         return getMessages().getMessage(getPageName());\n     }\n \n+    // Arbitrary mix of @Asset and @InjectAsset just to\n+    // test the annotations.\n+\n+    @Asset(\"images/tab-active-left.gif\")\n+    public abstract IAsset getActiveLeft();\n+\n+    @InjectAsset(\"inactiveLeft\")\n+    public abstract IAsset getInactiveLeft();\n+\n+    @Asset(\"images/tab-active-mid.gif\")\n+    public abstract IAsset getActiveMid();\n+\n+    @InjectAsset(\"inactiveMid\")\n+    public abstract IAsset getInactiveMid();\n+\n+    @Asset(\"images/tab-active-right.gif\")\n+    public abstract IAsset getActiveRight();\n+\n+    @InjectAsset(\"inactiveRight\")\n+    public abstract IAsset getInactiveRight();\n+\n     public IAsset getLeftTabAsset()\n     {\n-        String name = isActivePage() ? \"activeLeft\" : \"inactiveLeft\";\n-\n-        return getAsset(name);\n+        return isActivePage() ? getActiveLeft() : getInactiveLeft();\n     }\n \n     public IAsset getMidTabAsset()\n     {\n-        String name = isActivePage() ? \"activeMid\" : \"inactiveMid\";\n-\n-        return getAsset(name);\n+        return isActivePage() ? getActiveMid() : getInactiveMid();\n     }\n \n     public IAsset getRightTabAsset()\n     {\n-        String name = isActivePage() ? \"activeRight\" : \"inactiveRight\";\n-\n-        return getAsset(name);\n+        return isActivePage() ? getActiveRight() : getInactiveRight();\n     }\n \n     public void selectPage(IRequestCycle cycle, String newPageName)"
            },
            {
                "sha": "05538714b2e8042f7ee7d40cf0c82bc2a3161573",
                "filename": "status.xml",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/tapestry4/blob/d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf/status.xml",
                "raw_url": "https://github.com/apache/tapestry4/raw/d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf/status.xml",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/status.xml?ref=d0e0eb05030c4aa8a3d58ede44a79c7deb5c5abf",
                "patch": "@@ -55,6 +55,7 @@\n     <release version=\"4.0-beta-2\" date=\"unreleased\">\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-356\">FormConditional extends BaseComponent but has no template</action>\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-357\">AbstractComponent: getMessages() and format() were removed, but should have been deprecated</action>\n+      <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-361\">Using @Asset annotation causes NullPointerException</action>\n     </release>\n     <release version=\"4.0-beta-1\" date=\"Jun 24 2005\">\n        <action type=\"add\" dev=\"HLS\">Add InvokeListener component.</action>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/0d67c85ead7a787abf95078155856faebcc971d6",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/2445cb6f46c09efdd029ccc21205cb476d01b737",
        "message": "Remove the \"is rewinding\" check from RenderTemplateHTML ... just rely on the use\nof a NullResponseWriter when rewinding.\nDeprecate the immediate submit option for the SelectPropertySelectionRenderer.\nFix minor errors in inspector/ShowLogging.html template.\nFix JavaDoc comments in InsertText component.\n[132729] AbstractComponent.getBindingNames() doesn't return all names\n[132726] Script component with no bindings throws NullPointerException\n[133265] ImageSubmit NullPointerException if disabled\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@242124 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_3",
        "file": [
            {
                "sha": "5cb9a430df56617035202a28ac3d854f3a8b5eb9",
                "filename": "framework/ChangeLog",
                "status": "modified",
                "additions": 11,
                "deletions": 0,
                "changes": 11,
                "blob_url": "https://github.com/apache/tapestry4/blob/0d67c85ead7a787abf95078155856faebcc971d6/framework/ChangeLog",
                "raw_url": "https://github.com/apache/tapestry4/raw/0d67c85ead7a787abf95078155856faebcc971d6/framework/ChangeLog",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/ChangeLog?ref=0d67c85ead7a787abf95078155856faebcc971d6",
                "patch": "@@ -1,3 +1,14 @@\n+* Feb 23 2001 hship\n+\n+Remove the \"is rewinding\" check from RenderTemplateHTML ... just rely on the use\n+of a NullResponseWriter when rewinding.\n+Deprecate the immediate submit option for the SelectPropertySelectionRenderer.\n+Fix minor errors in inspector/ShowLogging.html template.\n+Fix JavaDoc comments in InsertText component.\n+[132729] AbstractComponent.getBindingNames() doesn't return all names\n+[132726] Script component with no bindings throws NullPointerException\n+[133265] ImageSubmit NullPointerException if disabled \n+\n * Feb 12 2001 hship\n \n Fix some bad JavaDoc comments."
            },
            {
                "sha": "aee8332166062af83ec5c19c94412fd8677c9474",
                "filename": "framework/src/com/primix/tapestry/AbstractComponent.java",
                "status": "modified",
                "additions": 15,
                "deletions": 20,
                "changes": 35,
                "blob_url": "https://github.com/apache/tapestry4/blob/0d67c85ead7a787abf95078155856faebcc971d6/framework/src/com/primix/tapestry/AbstractComponent.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/0d67c85ead7a787abf95078155856faebcc971d6/framework/src/com/primix/tapestry/AbstractComponent.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/AbstractComponent.java?ref=0d67c85ead7a787abf95078155856faebcc971d6",
                "patch": "@@ -102,19 +102,19 @@\n \t \n \tprivate Map bindings;\n \t\n-\t/**\n-\t *  An unmodifiable {@link Collection} of the names of all bindings (the\n-\t *  keys of the bindings map).\n-\t *\n-\t */\n-\t \n-\tprivate Collection bindingNames;\n-\n \tprivate Map components;\n \tprivate Map safeComponents;\n \n \tprivate static final int WRAPPED_INIT_SIZE = 5;\n \n+\t/**\n+\t *  Used in place of JDK 1.3's Collections.EMPTY_MAP (which is not\n+\t *  available in JDK 1.2).\n+\t *\n+\t */\n+\t \n+\tprivate static final Map EMPTY_MAP = Collections.unmodifiableMap(new HashMap(1));\n+\t\n \t/**\n \t*  The number of {@link IRender} objects wrapped by\n \t*  this component.\n@@ -764,11 +764,8 @@ public String toString()\n \t \n \tpublic Map getComponents()\n \t{\n-\t\t// Note: Collections.EMPTY_MAP not available until JDK 1.3 ... and\n-\t\t// we're trying for JDK 1.2 compatibility.\n-\n \t\tif (components == null)\n-\t\t\treturn new HashMap(1);\t\n+\t\t\treturn EMPTY_MAP;\t\n \t\t\n \t\tif (safeComponents == null)\n \t\t\tsafeComponents = Collections.unmodifiableMap(components);\n@@ -778,11 +775,8 @@ public Map getComponents()\n \t\n \tpublic Map getAssets()\n \t{\n-    \t// Note: Collections.EMPTY_MAP not available until JDK 1.3 ... and\n-        // we're trying for JDK 1.2 compatibility.\n-        \n     \tif (assets == null)\n-            return new HashMap(1);\n+            return EMPTY_MAP;\n             \t\t        \n \t\tif (safeAssets == null)\n \t\t\tsafeAssets = Collections.unmodifiableMap(assets);\n@@ -792,12 +786,13 @@ public Map getAssets()\n \t\n \tpublic Collection getBindingNames()\n \t{\n-\t\tif (bindings == null)\n+\t\t// If no conainer, i.e. a page, then no bindings.\n+\t\t\n+\t\tif (container == null)\n \t\t\treturn null;\n \t\t\n-\t\tif (bindingNames == null)\n-\t\t\tbindingNames = Collections.unmodifiableCollection(bindings.keySet());\n+\t\tContainedComponent contained = container.getSpecification().getComponent(id);\n \t\t\n-\t\treturn bindingNames;\t\n+\t\treturn contained.getBindingNames();\t\n \t}\t\n }"
            },
            {
                "sha": "12f32fee828d968ff8bfdffb17c2d6ce949b6581",
                "filename": "framework/src/com/primix/tapestry/IComponent.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/tapestry4/blob/0d67c85ead7a787abf95078155856faebcc971d6/framework/src/com/primix/tapestry/IComponent.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/0d67c85ead7a787abf95078155856faebcc971d6/framework/src/com/primix/tapestry/IComponent.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/IComponent.java?ref=0d67c85ead7a787abf95078155856faebcc971d6",
                "patch": "@@ -97,8 +97,8 @@\n      *  Returns a {@link Collection} of the names of all bindings (which includes\n      *  bindings for both formal and informal parameters).\n      *\n-     *  <P>The return value is unmodifiable, and may be null if the component has\n-     *  no parameters bound.\n+     *  <p>The return value is unmodifiable.  It will be null for a {@link IPage page},\n+\t *  or may simply be empty for a component with no bindings.\n      *\n      */\n "
            },
            {
                "sha": "8a1461a54116d003b872962d1ceaf7ed3f7a86b0",
                "filename": "framework/src/com/primix/tapestry/form/ImageSubmit.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/tapestry4/blob/0d67c85ead7a787abf95078155856faebcc971d6/framework/src/com/primix/tapestry/form/ImageSubmit.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/0d67c85ead7a787abf95078155856faebcc971d6/framework/src/com/primix/tapestry/form/ImageSubmit.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/form/ImageSubmit.java?ref=0d67c85ead7a787abf95078155856faebcc971d6",
                "patch": "@@ -299,8 +299,8 @@ public void render(IResponseWriter writer, IRequestCycle cycle)\n \n \t\t// Not rewinding, do the real render\n \n-\t\tif (disabled)\n-\t\t\timage = (IAsset)disabledImageBinding.getObject(\"disabled\", IAsset.class);\n+\t\tif (disabled && disabledImageBinding != null)\n+\t\t\timage = (IAsset)disabledImageBinding.getObject(\"disabledImage\", IAsset.class);\n \n \t\tif (image == null)\n \t\t{"
            },
            {
                "sha": "9a08d43ea44ec274b3e7fa05aae4ab5d3ade3666",
                "filename": "framework/src/com/primix/tapestry/form/SelectPropertySelectionRenderer.java",
                "status": "modified",
                "additions": 15,
                "deletions": 2,
                "changes": 17,
                "blob_url": "https://github.com/apache/tapestry4/blob/0d67c85ead7a787abf95078155856faebcc971d6/framework/src/com/primix/tapestry/form/SelectPropertySelectionRenderer.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/0d67c85ead7a787abf95078155856faebcc971d6/framework/src/com/primix/tapestry/form/SelectPropertySelectionRenderer.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/form/SelectPropertySelectionRenderer.java?ref=0d67c85ead7a787abf95078155856faebcc971d6",
                "patch": "@@ -49,6 +49,15 @@ public SelectPropertySelectionRenderer()\n \t\tsuper();\n \t}\n \n+\t/**\n+\t *  This method is deprecated; the behavior can be better\n+\t *  achieved by using a {@link com.primix.tapestry.script.Script} component\n+\t *  to provide the necessary <code>onChange</code> handler.\n+\t *\n+\t *  @deprecated\n+\t *\n+\t */\n+\t \n \tpublic SelectPropertySelectionRenderer(boolean immediateSubmit)\n \t{\n \t\tthis.immediateSubmit = immediateSubmit;\n@@ -59,6 +68,7 @@ public SelectPropertySelectionRenderer(boolean immediateSubmit)\n \t *  If so, changing the value of the &lt;select&gt; causes the form containing\n \t *  it to be submitted.\n \t *\n+\t *  @deprecated\n \t */\n \n \tpublic boolean getImmediateSubmit()\n@@ -70,7 +80,7 @@ public boolean getImmediateSubmit()\n \t *  Writes the &lt;select&gt; element.  If the\n \t *  {@link PropertySelection} is {@link PropertySelection#isDisabled() disabled}\n \t *  then a <code>disabled</code> attribute is written into the tag\n-\t *  (though Navigator may ignore this).\n+\t *  (though Navigator will ignore this).\n \t *\n \t */\n \n@@ -84,6 +94,8 @@ public void beginRender(PropertySelection component, IResponseWriter writer,\n \t\tif (component.isDisabled())\n \t\t\twriter.attribute(\"disabled\");\n \t\t\t\n+\t\t// We're in the process of removing this immediateSubmit business.\n+\t\t\n \t\tif (immediateSubmit)\n \t\t\twriter.attribute(\"onChange\", \"javascript:this.form.submit();\");\n \t\t\n@@ -95,7 +107,8 @@ public void beginRender(PropertySelection component, IResponseWriter writer,\n \t *\n \t */\n \n-\tpublic void endRender(PropertySelection component, IResponseWriter writer, IRequestCycle cycle) throws RequestCycleException\n+\tpublic void endRender(PropertySelection component, IResponseWriter writer, IRequestCycle cycle)\n+\tthrows RequestCycleException\n \t{\n \t\twriter.end(); // <select>\n \t}"
            },
            {
                "sha": "51a66b8a11c0666c85036cca4306b81608022eee",
                "filename": "framework/src/com/primix/tapestry/html/InsertText.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/tapestry4/blob/0d67c85ead7a787abf95078155856faebcc971d6/framework/src/com/primix/tapestry/html/InsertText.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/0d67c85ead7a787abf95078155856faebcc971d6/framework/src/com/primix/tapestry/html/InsertText.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/html/InsertText.java?ref=0d67c85ead7a787abf95078155856faebcc971d6",
                "patch": "@@ -54,6 +54,7 @@\n  *  <tr>\n  *      <td>mode</td>\n  *      <td>{@link InsertTextMode}</td>\n+ *\t\t<td>R</td>\n  *      <td>no</td>\n  *      <td>{@link InsertTextMode#BREAK}</td>\n  *      <td>Defines how each line will be emitted."
            },
            {
                "sha": "082bd73e2ef092c7e1d426b782aee0a792bfb444",
                "filename": "framework/src/com/primix/tapestry/inspector/ShowLogging.html",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/tapestry4/blob/0d67c85ead7a787abf95078155856faebcc971d6/framework/src/com/primix/tapestry/inspector/ShowLogging.html",
                "raw_url": "https://github.com/apache/tapestry4/raw/0d67c85ead7a787abf95078155856faebcc971d6/framework/src/com/primix/tapestry/inspector/ShowLogging.html",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/inspector/ShowLogging.html?ref=0d67c85ead7a787abf95078155856faebcc971d6",
                "patch": "@@ -11,7 +11,7 @@ <h1>Log4J Logging Controls</h1>\n \t</tr>\n \t\t\n \t<tr class=\"even\">\n-\t\t<td><em>Root Category</eh>\n+\t\t<td><em>Root Category</em></td>\n \t\t<td><jwc id=\"inputRootLevel\"/></td>\n \t</tr>\n "
            },
            {
                "sha": "81f68397d5c6aca85f3fd6dd546f63f83e2ab90f",
                "filename": "framework/src/com/primix/tapestry/parse/RenderTemplateHTML.java",
                "status": "modified",
                "additions": 8,
                "deletions": 3,
                "changes": 11,
                "blob_url": "https://github.com/apache/tapestry4/blob/0d67c85ead7a787abf95078155856faebcc971d6/framework/src/com/primix/tapestry/parse/RenderTemplateHTML.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/0d67c85ead7a787abf95078155856faebcc971d6/framework/src/com/primix/tapestry/parse/RenderTemplateHTML.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/parse/RenderTemplateHTML.java?ref=0d67c85ead7a787abf95078155856faebcc971d6",
                "patch": "@@ -60,9 +60,14 @@ public void render(IResponseWriter writer, IRequestCycle cycle)\n \t\t\t\n \t\tif (length == 0)\n \t\t\treturn;\n-\t\t\t\n-\t\tif (!cycle.isRewinding())\n-\t\t\twriter.printRaw(templateData, offset, length);\n+\n+\t\t// At one time, we would check to see if the cycle was rewinding and\n+\t\t// only invoke printRaw() if it was.  However, that slows down\n+\t\t// normal rendering (microscopically) and, with the new\n+\t\t// NullResponseWriter class, the \"cost\" of invoking cycle.isRewinding()\n+\t\t// is approximately the same as the \"cost\" of invoking writer.printRaw().\n+\t\t\t\t\t\n+\t\twriter.printRaw(templateData, offset, length);\n \t}\n \t\n \t/**"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/aa25ef696d09f79fd4bf0c8222f30cbd061ac261",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/877cbc0b2406f524886327435196fc663c18dc78",
        "message": "Fix the Hidden component to not throw NullPointerException if the listener parameter\nis not bound.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@241925 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_4",
        "file": [
            {
                "sha": "ba83bcde746c1cbe6579f58f3930174a0745b183",
                "filename": "framework/ChangeLog",
                "status": "modified",
                "additions": 5,
                "deletions": 0,
                "changes": 5,
                "blob_url": "https://github.com/apache/tapestry4/blob/aa25ef696d09f79fd4bf0c8222f30cbd061ac261/framework/ChangeLog",
                "raw_url": "https://github.com/apache/tapestry4/raw/aa25ef696d09f79fd4bf0c8222f30cbd061ac261/framework/ChangeLog",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/ChangeLog?ref=aa25ef696d09f79fd4bf0c8222f30cbd061ac261",
                "patch": "@@ -1,5 +1,10 @@\n * Oct 6 2000 hship\n \n+Fix the Hidden component to not throw NullPointerException if the listener parameter\n+is not bound.\n+\n+* Oct 6 2000 hship\n+\n Re-introduce support for automatic onLoad method for the Body component.\n Rename the TextField parameter \"maximumWidth\" to \"maximumLength\".\n Make the Form component emit a name attribute, to faciliate JavaScript access"
            },
            {
                "sha": "7534d9d1fbb5e5c30e3b4ad530e408644d03062d",
                "filename": "framework/src/com/primix/tapestry/components/Hidden.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/tapestry4/blob/aa25ef696d09f79fd4bf0c8222f30cbd061ac261/framework/src/com/primix/tapestry/components/Hidden.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/aa25ef696d09f79fd4bf0c8222f30cbd061ac261/framework/src/com/primix/tapestry/components/Hidden.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/components/Hidden.java?ref=aa25ef696d09f79fd4bf0c8222f30cbd061ac261",
                "patch": "@@ -150,6 +150,9 @@ public void render(IResponseWriter writer, IRequestCycle cycle)\n \n \t\tvalueBinding.setString(value);\n \t\t\n+        if (listenerBinding == null)\n+            return;\n+\n         try\n         {\n             listener = (IActionListener)listenerBinding.getValue();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/e673815d0ab3702b4a710d45b8af52868b2f6e09",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/4bb7c2aeb907a93d8c59b80fea3d4a58467ccd79",
        "message": "TAPESTRY-1915: handle NPE and StringIndexOOBE in assetencoder\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry4/trunk@642446 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_5",
        "file": [
            {
                "sha": "87cc4df7bc8ca991bb43b27ddc62ee27b9eb03ec",
                "filename": "tapestry-framework/src/java/org/apache/tapestry/engine/encoders/AssetEncoder.java",
                "status": "modified",
                "additions": 13,
                "deletions": 5,
                "changes": 18,
                "blob_url": "https://github.com/apache/tapestry4/blob/e673815d0ab3702b4a710d45b8af52868b2f6e09/tapestry-framework/src/java/org/apache/tapestry/engine/encoders/AssetEncoder.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/e673815d0ab3702b4a710d45b8af52868b2f6e09/tapestry-framework/src/java/org/apache/tapestry/engine/encoders/AssetEncoder.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/tapestry-framework/src/java/org/apache/tapestry/engine/encoders/AssetEncoder.java?ref=e673815d0ab3702b4a710d45b8af52868b2f6e09",
                "patch": "@@ -67,16 +67,24 @@ public void decode(ServiceEncoding encoding)\n     {\n         if (!encoding.getServletPath().equals(_path))\n             return;\n-        \n+        encoding.setParameterValue(ServiceConstants.SERVICE, Tapestry.ASSET_SERVICE);\n         String pathInfo = encoding.getPathInfo();\n+        if (pathInfo == null)\n+            pathInfo = \"/\";\n         \n         // The lead character is a slash, so find the next slash (the divider between the\n         // digest and the path).\n         int slashx = pathInfo.indexOf('/', 1);\n-        \n-        encoding.setParameterValue(ServiceConstants.SERVICE, Tapestry.ASSET_SERVICE);\n-        encoding.setParameterValue(AssetService.DIGEST, pathInfo.substring(1, slashx));\n-        encoding.setParameterValue(AssetService.PATH, pathInfo.substring(slashx));\n+        if (slashx < 0) \n+        {\n+            encoding.setParameterValue(AssetService.DIGEST, \"\");\n+            encoding.setParameterValue(AssetService.PATH, \"\");\n+        }\n+        else\n+        {\n+            encoding.setParameterValue(AssetService.DIGEST, pathInfo.substring(1, slashx));\n+            encoding.setParameterValue(AssetService.PATH, pathInfo.substring(slashx));\n+        }\n     }\n     \n }"
            },
            {
                "sha": "3574387a170734e60b5cc6d5364727ab5f8c4af2",
                "filename": "tapestry-framework/src/test/org/apache/tapestry/engine/encoders/AssetEncoderTest.java",
                "status": "modified",
                "additions": 42,
                "deletions": 0,
                "changes": 42,
                "blob_url": "https://github.com/apache/tapestry4/blob/e673815d0ab3702b4a710d45b8af52868b2f6e09/tapestry-framework/src/test/org/apache/tapestry/engine/encoders/AssetEncoderTest.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/e673815d0ab3702b4a710d45b8af52868b2f6e09/tapestry-framework/src/test/org/apache/tapestry/engine/encoders/AssetEncoderTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/tapestry-framework/src/test/org/apache/tapestry/engine/encoders/AssetEncoderTest.java?ref=e673815d0ab3702b4a710d45b8af52868b2f6e09",
                "patch": "@@ -189,4 +189,46 @@ public void test_Decode_Unprotected()\n \n         verify();\n     }\n+\n+    public void test_Decode_Null_Pathinfo()\n+    {\n+        ServiceEncoding encoding = newEncoding();\n+\n+        trainGetServletPath(encoding, \"/assets\");\n+        trainGetPathInfo(encoding, null);\n+\n+        encoding.setParameterValue(ServiceConstants.SERVICE, Tapestry.ASSET_SERVICE);\n+        encoding.setParameterValue(AssetService.DIGEST, \"\");\n+        encoding.setParameterValue(AssetService.PATH, \"\");\n+\n+        replay();\n+\n+        AssetEncoder encoder = new AssetEncoder();\n+        encoder.setPath(\"/assets\");\n+\n+        encoder.decode(encoding);\n+\n+        verify();\n+    }\n+    \n+    public void test_Decode_Empty_Pathinfo()\n+    {\n+        ServiceEncoding encoding = newEncoding();\n+\n+        trainGetServletPath(encoding, \"/assets\");\n+        trainGetPathInfo(encoding, \"/\");\n+\n+        encoding.setParameterValue(ServiceConstants.SERVICE, Tapestry.ASSET_SERVICE);\n+        encoding.setParameterValue(AssetService.DIGEST, \"\");\n+        encoding.setParameterValue(AssetService.PATH, \"\");         \n+\n+        replay();\n+\n+        AssetEncoder encoder = new AssetEncoder();\n+        encoder.setPath(\"/assets\");\n+\n+        encoder.decode(encoding);\n+\n+        verify();\n+    }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/268a85714cc64daa2d50582c9632ae0889eda3bc",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/142eefacf6a50f9cd30f4b9efa69ef16a673b466",
        "message": "[ 25585 ] ValidationDelegate throws NPE for some new FieldLabel/ValidField\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243678 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_6",
        "file": [
            {
                "sha": "8d015a18c84ac319a80cbb11c1584bbfc8a67000",
                "filename": "framework/src/org/apache/tapestry/valid/ValidationDelegate.java",
                "status": "modified",
                "additions": 8,
                "deletions": 1,
                "changes": 9,
                "blob_url": "https://github.com/apache/tapestry4/blob/268a85714cc64daa2d50582c9632ae0889eda3bc/framework/src/org/apache/tapestry/valid/ValidationDelegate.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/268a85714cc64daa2d50582c9632ae0889eda3bc/framework/src/org/apache/tapestry/valid/ValidationDelegate.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/valid/ValidationDelegate.java?ref=268a85714cc64daa2d50582c9632ae0889eda3bc",
                "patch": "@@ -62,6 +62,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.tapestry.IForm;\n import org.apache.tapestry.IMarkupWriter;\n import org.apache.tapestry.IRender;\n import org.apache.tapestry.IRequestCycle;\n@@ -432,7 +433,13 @@ protected boolean isInError(IFormComponent component)\n         if (_trackingMap == null)\n             return false;\n \n-        String formName = component.getForm().getName();\n+        IForm form = component.getForm();\n+        // if there is no form, the component cannot have been rewound or rendered into a form yet\n+        // so assume it cannot have errors.\n+        if (form == null)\n+            return false;\n+        \n+        String formName = form.getName();\n         Map formMap = (Map) _trackingMap.get(formName);\n \n         if (formMap == null)"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/60f37294052072f87557264172305cb58cc395cc",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/46f26f58cc257ab8665acdf33b3c0cc1615b88e2",
        "message": "[ 627332 ] NPE in BaseValidator (form without body)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243003 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_7",
        "file": [
            {
                "sha": "7ac909b73472eeb88f5297d6c7d88b56be89e467",
                "filename": "framework/src/net/sf/tapestry/TapestryStrings.properties",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/framework/src/net/sf/tapestry/TapestryStrings.properties",
                "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/framework/src/net/sf/tapestry/TapestryStrings.properties",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/TapestryStrings.properties?ref=60f37294052072f87557264172305cb58cc395cc",
                "patch": "@@ -368,6 +368,7 @@ FieldLabel.no-display-name=Display name not specified and not provided by field\n \n ValidField.no-delegate=No IValidationDelegate is available to ValidField {0}; it is specified as the delegate parameter of Form {1}.\n ValidField.no-type=The type parameter for field {0} was not specified and is required by the field''s validator.\n+ValidField.must-be-contained-by-body=A ValidField using client-side validation must be wrapped by a Body component.\n \n NumberValidator.no-adaptor-for-field=Unable to provide validation for field {0} (value type {1}).\n "
            },
            {
                "sha": "db6daeb04373957b27edf89e5503bac0d53572bb",
                "filename": "framework/src/net/sf/tapestry/valid/BaseValidator.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/framework/src/net/sf/tapestry/valid/BaseValidator.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/framework/src/net/sf/tapestry/valid/BaseValidator.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/valid/BaseValidator.java?ref=60f37294052072f87557264172305cb58cc395cc",
                "patch": "@@ -266,6 +266,9 @@ protected void processValidatorScript(String scriptPath, IRequestCycle cycle, IF\n \n         Body body = Body.get(cycle);\n \n+        if (body == null)\n+            throw new RequestCycleException(Tapestry.getString(\"ValidField.must-be-contained-by-body\"), field);\n+\n         body.process(session);\n \n         String functionName = (String) finalSymbols.get(FUNCTION_SYMBOL);"
            },
            {
                "sha": "da095ad846955a393f90fb90ec2a1d54d8c1d4c3",
                "filename": "junit/src/net/sf/tapestry/junit/mock/MockTestCase.java",
                "status": "modified",
                "additions": 12,
                "deletions": 0,
                "changes": 12,
                "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/MockTestCase.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/MockTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/MockTestCase.java?ref=60f37294052072f87557264172305cb58cc395cc",
                "patch": "@@ -159,4 +159,16 @@ public void testStrings()\n     {\n         attempt(\"/net/sf/tapestry/junit/mock/TestStrings.xml\");\n     }\n+    \n+    /**\n+     *  Test case for a ValidField with a validator and client-side scripting, but\n+     *  no Body.\n+     * \n+     **/\n+    \n+    public void testValidFieldNoBody()\n+    throws Exception\n+    {\n+        attempt(\"/net/sf/tapestry/junit/mock/TestValidFieldNoBody.xml\");\n+    }\n }"
            },
            {
                "sha": "b3c72dab2438a5f98fd43b818289756f62a6aa81",
                "filename": "junit/src/net/sf/tapestry/junit/mock/TestStrings.xml",
                "status": "modified",
                "additions": 0,
                "deletions": 4,
                "changes": 4,
                "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/TestStrings.xml",
                "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/TestStrings.xml",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/TestStrings.xml?ref=60f37294052072f87557264172305cb58cc395cc",
                "patch": "@@ -3,8 +3,6 @@\n <!-- $Id$ -->\n \n \n-<!-- Tests stale session exception with a DirectLink. -->\n-\n <mock-test>\n     <context name=\"mock\"/>\n     \n@@ -14,8 +12,6 @@\n   \t\t\tvalue=\"/net/sf/tapestry/junit/mock/app/Mock.application\"/>\n   \t</servlet>  \t\n   \t\n-  \t<!-- Simulate clicking the link, which should send the\n-  \t     user to the Protected page.  -->\n   \t     \n   \t<request>\n   \t\t<parameter name=\"service\" value=\"page\"/>"
            },
            {
                "sha": "1be189a2f73630c2bac0689eb51eb1d9de5c4b37",
                "filename": "junit/src/net/sf/tapestry/junit/mock/TestValidFieldNoBody.xml",
                "status": "added",
                "additions": 36,
                "deletions": 0,
                "changes": 36,
                "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/TestValidFieldNoBody.xml",
                "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/TestValidFieldNoBody.xml",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/TestValidFieldNoBody.xml?ref=60f37294052072f87557264172305cb58cc395cc",
                "patch": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!-- $Id$ -->\n+\n+\n+\n+<mock-test>\n+    <context name=\"mock\"/>\n+    \n+    <servlet name=\"app\" class=\"net.sf.tapestry.ApplicationServlet\">\n+  \t\t<init-parameter\n+  \t\t\tname=\"net.sf.tapestry.application-specification\"\n+  \t\t\tvalue=\"/net/sf/tapestry/junit/mock/app/Mock.application\"/>\n+  \t</servlet>  \t\n+  \t\n+  \t     \n+  \t<request>\n+  \t\t<parameter name=\"service\" value=\"page\"/>\n+  \t\t<parameter name=\"context\" value=\"ValidFieldNoBody\"/>\n+  \t\t\n+\t\n+\t\t<!-- Should get an Exception -->\n+\t\n+\t\t<assert-output name=\"Title\">\n+<![CDATA[\n+<title>Exception</title>\n+]]>\t\t\n+\t\t</assert-output>\n+\t\n+\t\t<assert-output name=\"Message\">\n+\t\tA ValidField using client-side validation must be wrapped by a Body component.\n+\t\t</assert-output>\n+\t\n+\t</request>\n+\t\t  \t\n+</mock-test>\n\\ No newline at end of file"
            },
            {
                "sha": "edd73db0f3bbda13aa0d28bd546e60850eb063d0",
                "filename": "junit/src/net/sf/tapestry/junit/mock/app/Mock.application",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/Mock.application",
                "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/Mock.application",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/app/Mock.application?ref=60f37294052072f87557264172305cb58cc395cc",
                "patch": "@@ -22,6 +22,8 @@\n \n \t<page name=\"Stale\" specification-path=\"/net/sf/tapestry/junit/mock/app/Stale.page\"/>\n \n+\t<page name=\"ValidFieldNoBody\" specification-path=\"/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.page\"/>\n+\n \t\t\n \t<library id=\"lib\" specification-path=\"/net/sf/tapestry/junit/mock/lib/MockLibrary.library\"/>\n \t"
            },
            {
                "sha": "ee9401332055d3b21d068f558fa4266b369a90ea",
                "filename": "junit/src/net/sf/tapestry/junit/mock/app/Strings.page",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/Strings.page",
                "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/Strings.page",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/app/Strings.page?ref=60f37294052072f87557264172305cb58cc395cc",
                "patch": "@@ -7,7 +7,7 @@\n <page-specification class=\"net.sf.tapestry.html.BasePage\">\n \n   <component id=\"border\" type=\"lib:Border\">\n-  \t<static-binding name=\"title\">StaleSession Test Page</static-binding>\n+  \t<static-binding name=\"title\">Insert Localized Key Test Page</static-binding>\n   </component>\n \n </page-specification>\t\n\\ No newline at end of file"
            },
            {
                "sha": "65f5752f60c5cadd367c8de0168958c8b8e87510",
                "filename": "junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.html",
                "status": "added",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.html",
                "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.html",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.html?ref=60f37294052072f87557264172305cb58cc395cc",
                "patch": "@@ -0,0 +1,17 @@\n+<!-- $Id$ -->\n+\n+<span jwcid=\"Shell\">\n+\n+<body>\n+\n+<form jwcid=\"form\">\n+\n+<input jwcid=\"inputNumber\"/>\n+\n+<input type=\"submit\"/>\n+\n+</form>\n+\n+</body>\n+\n+</span>\n\\ No newline at end of file"
            },
            {
                "sha": "e0c8209a9f64835aba54ccadf98892a779136bd8",
                "filename": "junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.java",
                "status": "added",
                "additions": 58,
                "deletions": 0,
                "changes": 58,
                "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.java?ref=60f37294052072f87557264172305cb58cc395cc",
                "patch": "@@ -0,0 +1,58 @@\n+//\n+// Tapestry Web Application Framework\n+// Copyright (c) 2002 by Howard Lewis Ship\n+//\n+// Howard Lewis Ship\n+// http://sf.net/projects/tapestry\n+// mailto:hship@users.sf.net\n+//\n+// This library is free software.\n+//\n+// You may redistribute it and/or modify it under the terms of the GNU\n+// Lesser General Public License as published by the Free Software Foundation.\n+//\n+// Version 2.1 of the license should be included with this distribution in\n+// the file LICENSE, as well as License.html. If the license is not\n+// included with this distribution, you may find a copy at the FSF web\n+// site at 'www.gnu.org' or 'www.fsf.org', or you may write to the\n+// Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139 USA.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied waranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+\n+package net.sf.tapestry.junit.mock.app;\n+\n+import net.sf.tapestry.html.BasePage;\n+\n+/**\n+ *  Page for testing a validator, with client side validation, but no Body.\n+ *\n+ *  @author Howard Lewis Ship\n+ *  @version $Id$\n+ *  @since 2.3\n+ * \n+ **/\n+\n+public class ValidFieldNoBody extends BasePage\n+{\n+    private int _intValue;        \n+    \n+    protected void initialize()\n+    {\n+        _intValue = 10;\n+    }\n+        \n+    public int getIntValue()\n+    {\n+        return _intValue;\n+    }\n+\n+    public void setIntValue(int intValue)\n+    {\n+        _intValue = intValue;\n+    }\n+\n+}"
            },
            {
                "sha": "ba6d45112838b70d6799e08259c5ed64b202f13c",
                "filename": "junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.page",
                "status": "added",
                "additions": 34,
                "deletions": 0,
                "changes": 34,
                "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.page",
                "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.page",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.page?ref=60f37294052072f87557264172305cb58cc395cc",
                "patch": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- $Id$ -->\n+<!DOCTYPE page-specification PUBLIC \n+\t\"-//Howard Lewis Ship//Tapestry Specification 1.3//EN\" \n+\t\"http://tapestry.sf.net/dtd/Tapestry_1_3.dtd\">\n+\t\n+<page-specification class=\"net.sf.tapestry.junit.mock.app.ValidFieldNoBody\">\n+\n+  <bean name=\"delegate\" class=\"net.sf.tapestry.valid.ValidationDelegate\"/>\n+\n+  <bean name=\"intValidator\" lifecycle=\"render\" class=\"net.sf.tapestry.valid.NumberValidator\">\n+  \t<set-property name=\"required\" expression=\"true\"/>\n+  \t<set-property name=\"clientScriptingEnabled\" expression=\"true\"/>\n+  </bean>\n+  \n+  <component id=\"Shell\" type=\"Shell\">\n+  \t<static-binding name=\"title\">ValidField w/o Body Test Page</static-binding>\n+  </component>\n+\n+  <component id=\"form\" type=\"Form\">\n+  \t<binding name=\"delegate\" expression=\"beans.delegate\"/>\n+  </component>\n+  \n+\n+  <component id=\"inputNumber\" type=\"ValidField\">\n+    <binding name=\"validator\" expression=\"beans.intValidator\"/>\n+    <binding name=\"value\" expression=\"intValue\"/>\n+    <static-binding name=\"displayName\">Integer Field</static-binding>\n+    <static-binding name=\"type\">Integer</static-binding>\n+  </component>  \n+  \n+  \n+\n+</page-specification>\t\n\\ No newline at end of file"
            },
            {
                "sha": "a3952749d0b203899017bdbdd13f99c5559b2099",
                "filename": "web/new.html",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/web/new.html",
                "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/web/new.html",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/web/new.html?ref=60f37294052072f87557264172305cb58cc395cc",
                "patch": "@@ -39,6 +39,7 @@ <h3>Release 2.3-alpha-1</h3>\n [ 619481 ] use jakarta commons lang Enum\n [ 627478 ] Don't require servlet subclass\n [ 614324 ] Add a param \"raw\" in addition to \"key\"\n+[ 627332 ] NPE in BaseValidator (form without body)\n </pre>\n \n <h3>Release 2.2</h3>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/6a366c85d9f70216dca1f82f64ac665d5ce2f9b2",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/f8b156da1273cb46921d9f4082abbb52dc826c76",
        "message": "[ 618342 ] NPE in AbstractComponent toString\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@242972 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_8",
        "file": [
            {
                "sha": "7da50b4e7ed41b6e42163e94502ed4082fdde6b1",
                "filename": "framework/src/net/sf/tapestry/AbstractComponent.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/tapestry4/blob/6a366c85d9f70216dca1f82f64ac665d5ce2f9b2/framework/src/net/sf/tapestry/AbstractComponent.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/6a366c85d9f70216dca1f82f64ac665d5ce2f9b2/framework/src/net/sf/tapestry/AbstractComponent.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/AbstractComponent.java?ref=6a366c85d9f70216dca1f82f64ac665d5ce2f9b2",
                "patch": "@@ -596,6 +596,9 @@ public void setContainer(IComponent value)\n \n     public String getExtendedId()\n     {\n+        if (page == null)\n+            return null;\n+            \n         return page.getName() + \"/\" + getIdPath();\n     }\n "
            },
            {
                "sha": "3136993716c9833f34ea23c8d493502020f0c495",
                "filename": "web/new.html",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/tapestry4/blob/6a366c85d9f70216dca1f82f64ac665d5ce2f9b2/web/new.html",
                "raw_url": "https://github.com/apache/tapestry4/raw/6a366c85d9f70216dca1f82f64ac665d5ce2f9b2/web/new.html",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/web/new.html?ref=6a366c85d9f70216dca1f82f64ac665d5ce2f9b2",
                "patch": "@@ -21,6 +21,7 @@ <h3>Release 2.2-rc-1</h3>\n [ 616851 ] Can't redirect to a library page\n [ 617867 ] ImageSubmit null image\n [ 618317 ] Contrib:NumericField missing type param\n+[ 618342 ] NPE in AbstractComponent toString\n </pre>\n \n <h3>Release 2.2-beta-3</h3>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/da42fb0784c6b709280df9f0d2792c868a69734b",
        "message": " [ 566158 ] ValidField NPE if no delegate\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@242590 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_9",
        "file": [
            {
                "sha": "a5b004991110db2c115ba61b9c6b6773954c47cb",
                "filename": "framework/src/net/sf/tapestry/RequestContext.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/RequestContext.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/RequestContext.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/RequestContext.java?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf",
                "patch": "@@ -819,7 +819,7 @@ public void write(IMarkupWriter writer)\n \n             writer.begin(\"tr\");\n             writer.attribute(\"class\", getRowClass());\n-            writer.begin(\"td\");\n+            writer.begin(\"th\");\n             writer.print(name);\n             writer.end();\n             writer.begin(\"td\");"
            },
            {
                "sha": "066ad9165839549c3d607d75376a18c3c61f0cd8",
                "filename": "framework/src/net/sf/tapestry/TapestryStrings.properties",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/TapestryStrings.properties",
                "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/TapestryStrings.properties",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/TapestryStrings.properties?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf",
                "patch": "@@ -331,7 +331,7 @@ AbstractDocumentParser.invalid-identifier={0} is not a valid identifier (in elem\n # net.sf.tapestry.valid\n \n FieldLabel.no-display-name=Display name not specified and not provided by field {0}.\n-\n+ValidField.no-delegate=No IValidationDelegate is available to ValidField {0}; it is specified as the delegate parameter of Form {1}.\n \n \n "
            },
            {
                "sha": "835dde12f93543f85b6daa8b19677ad8e9afdb5c",
                "filename": "framework/src/net/sf/tapestry/html/ExceptionDisplay.html",
                "status": "modified",
                "additions": 45,
                "deletions": 26,
                "changes": 71,
                "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/html/ExceptionDisplay.html",
                "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/html/ExceptionDisplay.html",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/html/ExceptionDisplay.html?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf",
                "patch": "@@ -1,51 +1,70 @@\n <!-- $Id$ -->\n+<html>\n+<link rel=\"stylesheet\" type=\"text/css\" href=\"../pages/Exception.css\">\n \n+<body>\n+\n+<span jwcid=\"$content$\">\n <p>\n \n <table class=\"exception-display\">\n \n-<jwc id=\"e-exception\">\n+<span jwcid=\"e-exception\">\n \t\n-\t\t<tr class=\"property\">\n-\t\t\t<th>Name:</th>\n-\t\t\t<td><jwc id=\"insertClass\"/></td>\n+\t\t<tr class=\"exception-name\">\n+\t\t\t<td colspan=\"2\"><span jwcid=\"insertClass\">some.exception.Class</span></td>\n \t\t</tr>\n \t\t\n-\t\t<tr class=\"property\">\n-\t\t\t<th>Message:</th>\n-\t\t\t<td><jwc id=\"insertMessage\"/></td>\n+\t\t<tr class=\"exception-message\">\n+\t\t\t<td colspan=\"2\"><span jwcid=\"insertMessage\">A message describing the exception.</span></td>\n \t\t</tr>\n-\n-<jwc id=\"e-property\">\n \t\t\n-\t\t<tr class=\"property\">\n-\t\t\t<th><jwc id=\"insertPropertyName\"/>:</th>\n-\t\t\t<td><jwc id=\"insertPropertyValue\"/></td>\n+\t\t<tr jwcid=\"e-property\">\n+\t\t\t<th><span jwcid=\"insertPropertyName\">Property Name</span>:</th>\n+\t\t\t<td><span jwcid=\"insertPropertyValue\">Property Value</span></td>\n+\t\t</tr>\n+\n+\t\t<tr jwcid=\"$remove$\" class=\"odd\">\n+\t\t\t<th>Property Name 2:</th>\n+\t\t\t<td>Property Value 2</td>\n+\t\t</tr>\n+\n+\t\t<tr jwcid=\"$remove$\" class=\"even\">\n+\t\t\t<th>Property Name 3:</th>\n+\t\t\t<td>Property Value 3</td>\n \t\t</tr>\n+\n+\t\t<tr jwcid=\"$remove$\" class=\"odd\">\n+\t\t\t<th>Property Name 4:</th>\n+\t\t\t<td>Property Value 4</td>\n+\t\t</tr>\t\t\n \t\t\n-</jwc>\t\n-\t\n-<jwc id=\"ifNotLast\">\n+<span jwcid=\"ifNotLast\">\n \t\t<tr> <td colspan=2> &nbsp; </td> </tr>\n-</jwc>\n+</span>\n \t\n-<jwc id=\"ifLast\">\n-\t\t<tr class=\"property\">\n-\t\t\t<th>Trace:</th> <td>&nbsp;</td>\n+<span jwcid=\"ifLast\">\n+\t\t<tr class=\"stack-trace-label\">\n+\t\t\t<td colspan=\"2\">Stack Trace:</td>\n \t\t</tr>\n \n \t\t<tr class=\"stack-trace\">\n \t\t\t<td colspan=2>\n \t\t\t\t<ul>\n-\t\t\t\t<jwc id=\"e-stack\">\n-\t\t\t\t\t<li><jwc id=\"insertStackTrace\"/>\n-\t\t\t\t</jwc>\n+\t\t\t\t\t<li jwcid=\"e-stack\"><span jwcid=\"insertStackTrace\">foo.bar.baz(Line:xyz)</span></li>\n+\t\t\t\t\t<li jwcid=\"$remove$\">foo.bar.baz(Line:xyz)</li>\n+\t\t\t\t\t<li jwcid=\"$remove$\">foo.bar.baz(Line:xyz)</li>\n+\t\t\t\t\t<li jwcid=\"$remove$\">foo.bar.baz(Line:xyz)</li>\t\t\t\t\t\n+\t\t\t\t\t<li jwcid=\"$remove$\">foo.bar.baz(Line:xyz)</li>\n \t\t\t\t</ul>\n-\n-\n \t\t\t</td>\n \t\t</tr>\n-</jwc>\n-</jwc>\n+</span> <!-- ifLast -->\n+</span> <!-- e-exception -->\n \n </table>\n+\n+</span> <!-- $content$ -->\n+\n+</body>\n+</html>"
            },
            {
                "sha": "1e33579e8e56a8a37717e7fd07b2485688ec407a",
                "filename": "framework/src/net/sf/tapestry/html/ExceptionDisplay.java",
                "status": "modified",
                "additions": 22,
                "deletions": 2,
                "changes": 24,
                "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/html/ExceptionDisplay.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/html/ExceptionDisplay.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/html/ExceptionDisplay.java?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf",
                "patch": "@@ -30,6 +30,7 @@\n import net.sf.tapestry.IMarkupWriter;\n import net.sf.tapestry.IRequestCycle;\n import net.sf.tapestry.RequestCycleException;\n+import net.sf.tapestry.bean.EvenOdd;\n import net.sf.tapestry.util.exception.ExceptionDescription;\n \n /**\n@@ -46,6 +47,7 @@\n     private ExceptionDescription exception;\n     private int count;\n     private int index;\n+    private EvenOdd evenOdd;\n \n     public void setExceptionsBinding(IBinding value)\n     {\n@@ -57,9 +59,17 @@ public IBinding getExceptionsBinding()\n         return exceptionsBinding;\n     }\n \n+    /**\n+     *  Each time the current exception is set, as a side effect,\n+     *  the evenOdd helper bean is reset to even.\n+     * \n+     **/\n+    \n     public void setException(ExceptionDescription value)\n     {\n         exception = value;\n+        \n+        evenOdd.setEven(true);\n     }\n \n     public ExceptionDescription getException()\n@@ -76,8 +86,18 @@ protected void renderComponent(IMarkupWriter writer, IRequestCycle cycle)\n                 ExceptionDescription[].class);\n \n         count = exceptions.length;\n-\n-        super.renderComponent(writer, cycle);\n+        \n+        try\n+        {\n+            evenOdd = (EvenOdd)getBeans().getBean(\"evenOdd\");\n+            \n+            super.renderComponent(writer, cycle);\n+        }\n+        finally\n+        {\n+            exception = null;\n+            evenOdd = null;\n+        }\n     }\n \n     public void setIndex(int value)"
            },
            {
                "sha": "362413735414d5a5d26e647decdd818255374edf",
                "filename": "framework/src/net/sf/tapestry/html/ExceptionDisplay.jwc",
                "status": "modified",
                "additions": 9,
                "deletions": 1,
                "changes": 10,
                "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/html/ExceptionDisplay.jwc",
                "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/html/ExceptionDisplay.jwc",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/html/ExceptionDisplay.jwc?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf",
                "patch": "@@ -1,6 +1,9 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!-- $Id$ -->\n-<!DOCTYPE specification PUBLIC \"-//Howard Ship//Tapestry Specification 1.1//EN\" \"http://tapestry.sf.net/dtd/Tapestry_1_1.dtd\">\n+<!DOCTYPE specification PUBLIC \n+\t\"-//Howard Lewis Ship//Tapestry Specification 1.2//EN\" \n+\t\t\"http://tapestry.sf.net/dtd/Tapestry_1_2.dtd\">\n+\t\t\n <specification class=\"net.sf.tapestry.html.ExceptionDisplay\" \n \tallow-body=\"no\" \n \tallow-informal-parameters=\"no\">\n@@ -15,6 +18,8 @@\n     </description>\n   </parameter>\n   \n+  <bean name=\"evenOdd\" class=\"net.sf.tapestry.bean.EvenOdd\"/>\n+    \n   <component id=\"e-exception\" type=\"Foreach\">\n     <inherited-binding name=\"source\" parameter-name=\"exceptions\"/>\n     <binding name=\"value\" property-path=\"exception\"/>\n@@ -30,6 +35,8 @@\n   </component>\n   \n   <component id=\"e-property\" type=\"Foreach\">\n+  \t<static-binding name=\"element\">tr</static-binding>\n+  \t<binding name=\"class\" property-path=\"beans.evenOdd.next\"/>\n     <binding name=\"source\" property-path=\"exception.properties\"/>\n   </component>\n   \n@@ -51,6 +58,7 @@\n   </component>\n   \n   <component id=\"e-stack\" type=\"Foreach\">\n+    <static-binding name=\"element\">li</static-binding>\n     <binding name=\"source\" property-path=\"exception.stackTrace\"/>\n   </component>\n   "
            },
            {
                "sha": "4d02c3d519fcf7b8f86c27baa27a233faa437b24",
                "filename": "framework/src/net/sf/tapestry/inspector/Inspector.css",
                "status": "modified",
                "additions": 23,
                "deletions": 7,
                "changes": 30,
                "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/inspector/Inspector.css",
                "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/inspector/Inspector.css",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/inspector/Inspector.css?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf",
                "patch": "@@ -120,24 +120,24 @@ SPAN.request-context-object  {\n TR.request-context-section TH  {\n \ttext-align : center;\n \tcolor : White;\n-\tbackground-color : \"#330066\";\n+\tbackground-color : Blue;\n }\n \n TR.request-context-header TH  {\n \ttext-align : center;\n \tcolor : White;\n-\tbackground-color : \"#330066\";\n+\tbackground-color : Blue;\n }\n \n TABLE.request-context-object TR.odd TD  {\n \ttext-align : left;\n \tcolor : Black;\n-\tbackground-color : Silver;\n+\tbackground-color : #C0C0FF;\n }\n \n TABLE.request-context-object TR.odd TH  {\n \tcolor : Black;\n-\tbackground-color : Silver;\n+\tbackground-color : #C0C0FF;\n \ttext-align : right;\n }\n \n@@ -158,16 +158,32 @@ TABLE.request-context-object TR  {\n \tvertical-align : text-top;\n }\n \n-TABLE.exception-display TR.property  {\n+TABLE.exception-display TR.even  {\n \ttop : auto;\n }\n \n-TABLE.exception-display TR.property TH  {\n+TABLE.exception-displaY TD\n+{\n+\twidth: 100%;\n+}\n+\n+TABLE.exception-display TR.even TH  {\n+\ttext-align : right;\n+\tfont-weight : bold;\n+}\n+\n+TABLE.exception-display TR.odd TD  {\n+\ttext-align : left;\n+\tbackground-color : #C0C0FF;\n+}\n+\n+TABLE.exception-display TR.odd TH  {\n \ttext-align : right;\n \tfont-weight : bold;\n+\tbackground-color : #C0C0FF;\t\n }\n \n-TABLE.exception-display TR.property TD  {\n+TABLE.exception-display TR.even TD  {\n \ttext-align : left;\n }\n "
            },
            {
                "sha": "e6f19213aa864a1a212398afd30b38af466dc8a4",
                "filename": "framework/src/net/sf/tapestry/pages/Exception.css",
                "status": "modified",
                "additions": 54,
                "deletions": 14,
                "changes": 68,
                "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/pages/Exception.css",
                "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/pages/Exception.css",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/pages/Exception.css?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf",
                "patch": "@@ -16,18 +16,23 @@ A:Hover  {}\n \n BODY  {}\n \n-TABLE.exception-display TR.property  {\n+TABLE.exception-display TR.even  {\n \ttop : auto;\n-\tbackground-color : Silver;\n }\n \n-TABLE.exception-display TR.property TH  {\n+TABLE.exception-display TR.odd  {\n+\ttop : auto;\n+\tbackground-color : #C0C0FF;\n+}\n+\n+TABLE.exception-display TH  {\n \ttext-align : right;\n \tfont-weight : bold;\n }\n \n-TABLE.exception-display TR.property TD  {\n+TABLE.exception-display TD  {\n \ttext-align : left;\n+\twidth : 100%;\t\n }\n \n TABLE.exception-display TR.stack-trace  {\n@@ -60,7 +65,7 @@ TR.request-context-section TH  {\n \tfont-weight : bold;\n \ttext-align : center;\n \tcolor : White;\n-\tbackground-color : Black;\n+\tbackground-color : Blue;\n }\n \n TR.request-context-header TH  {\n@@ -69,18 +74,24 @@ TR.request-context-header TH  {\n \tfont-weight : bold;\n \ttext-align : center;\n \tcolor : White;\n-\tbackground-color : Black;\n+\tbackground-color : Blue;\n+}\n+\n+TABLE.request-context-object TD\n+{\n+\twidth: 100%;\n }\n \n TABLE.request-context-object TR.odd TD  {\n \ttext-align : left;\n \tcolor : Black;\n-\tbackground-color : Silver;\n+\tbackground-color : #C0C0FF;\n+\twidth: 100%;\n }\n \n TABLE.request-context-object TR.odd TH  {\n \tcolor : Black;\n-\tbackground-color : Silver;\n+\tbackground-color : #C0C0FF;\n \ttext-align : right;\n }\n \n@@ -100,9 +111,38 @@ TABLE.request-context-object TR  {\n \tvertical-align : text-top;\n }\n \n-UL \n-{\n-\tmargin-top: 0px;\n-\tmargin-bottom: 0px;\n-\tmargin-left: 20px;\n-}\n\\ No newline at end of file\n+UL  {\n+\tmargin-top : 0px;\n+\tmargin-bottom : 0px;\n+\tmargin-left : 20px;\n+}\n+\n+TABLE.exception-display TR.exception-name TD  {\n+\tfont-size : larger;\n+\tfont-weight : bold;\n+\ttext-align : center;\n+\tbackground-color : Blue;\n+\tcolor : White;\n+}\n+\n+TABLE.exception-display  {\n+\twidth : 100%;\n+}\n+\n+TABLE.exception-display TR.exception-message TD  {\n+\tborder-width : 1;\n+\tborder-color : Black;\n+\tborder-style : solid;\n+\tpadding : 2;\n+\ttext-align : left;\n+\tfont-style : italic;\n+}\n+\n+TABLE.exception-display TR.strack-trace-label TD  {\n+\tmargin : 2;\n+\tborder-width : 1;\n+\tborder-color : Black;\n+\tborder-style : solid;\n+\ttext-align : center;\n+}\n+"
            },
            {
                "sha": "0c774de9953a4a0b046c0c57ddd5a7e14dc8dbd0",
                "filename": "framework/src/net/sf/tapestry/valid/ValidField.java",
                "status": "modified",
                "additions": 12,
                "deletions": 10,
                "changes": 22,
                "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/valid/ValidField.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/valid/ValidField.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/valid/ValidField.java?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf",
                "patch": "@@ -150,9 +150,7 @@\n  *\n  **/\n \n-public class ValidField\n-    extends AbstractTextField\n-    implements IField, IFormComponent\n+public class ValidField extends AbstractTextField implements IField, IFormComponent\n {\n     private IBinding valueBinding;\n \n@@ -190,7 +188,7 @@ public void setDisplayNameBinding(IBinding value)\n      *  is direction custom, allowing it to be resolved even when not renderring.\n      * \n      **/\n-    \n+\n     public String getDisplayName()\n     {\n         // Return the static value, if known.\n@@ -203,15 +201,14 @@ public String getDisplayName()\n         return displayNameBinding.getString();\n     }\n \n-\n     /**\n      *\n-     * Renders the component, which involves the {@link IValidationDelegate delegate}.\n+     *  Renders the component, which involves the {@link IValidationDelegate delegate}.\n      *\n-     * <p>During a render, the <em>first</em> field rendered that is either\n-     * in error, or required but null gets special treatment.  JavaScript is added\n-     * to select that field (such that the cursor jumps right to the field when the\n-     * page loads).\n+     *  <p>During a render, the <em>first</em> field rendered that is either\n+     *  in error, or required but null gets special treatment.  JavaScript is added\n+     *  to select that field (such that the cursor jumps right to the field when the\n+     *  page loads).\n      *\n      **/\n \n@@ -220,6 +217,11 @@ protected void renderComponent(IMarkupWriter writer, IRequestCycle cycle)\n     {\n         IValidationDelegate delegate = getForm().getDelegate();\n \n+        if (delegate == null)\n+            throw new RequestCycleException(\n+                Tapestry.getString(\"ValidField.no-delegate\", getExtendedId(), getForm().getExtendedId()),\n+                this);\n+\n         String displayName = null;\n \n         boolean rendering = !cycle.isRewinding();"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/2ceec2df4ad58a7df7bfdf3b6f9e23c8f6b80efe",
        "message": "[ 549482 ] NPE in RequestCycle.observeChange()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@242522 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_10",
        "file": [
            {
                "sha": "783eaad5803c56888cee0dac4a9bd47600c6613b",
                "filename": "config/Version.properties",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/tapestry4/blob/c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2/config/Version.properties",
                "raw_url": "https://github.com/apache/tapestry4/raw/c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2/config/Version.properties",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/config/Version.properties?ref=c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2",
                "patch": "@@ -2,4 +2,4 @@\n #\n # Stores the version number of the framework.\n \n-framework.version=2.0.2\n+framework.version=2.0.2a"
            },
            {
                "sha": "5624edb1fe7d7e7249852bc84503a41ed257e023",
                "filename": "framework/src/com/primix/tapestry/engine/RequestCycle.java",
                "status": "modified",
                "additions": 34,
                "deletions": 7,
                "changes": 41,
                "blob_url": "https://github.com/apache/tapestry4/blob/c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2/framework/src/com/primix/tapestry/engine/RequestCycle.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2/framework/src/com/primix/tapestry/engine/RequestCycle.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/engine/RequestCycle.java?ref=c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2",
                "patch": "@@ -304,6 +304,34 @@ protected IPageRecorder getPageRecorder(String name)\n \t\treturn result;\n \t}\n \n+\t/** \n+\t * \n+\t *  Gets the page recorder from the loadedRecorders cache, or from the engine\n+\t *  (putting it into loadedRecorders).  If the recorder does not yet exist,\n+\t *  it is created.\n+\t * \n+\t *  @see IEngine#createPageRecorder(String, IRequestCycle)\n+\t *  @since 2.0.3\n+\t * \n+\t **/\n+\n+\tprivate IPageRecorder createPageRecorder(String name)\n+\t{\n+\t\tIPageRecorder result = getPageRecorder(name);\n+\n+\t\tif (result == null)\n+\t\t{\n+\t\t\tresult = engine.createPageRecorder(name, this);\n+\n+\t\t\tif (loadedRecorders == null)\n+\t\t\t\tloadedRecorders = new HashMap();\n+\n+\t\t\tloadedRecorders.put(name, result);\n+\t\t}\n+\n+\t\treturn result;\n+\t}\n+\n \tpublic RequestContext getRequestContext()\n \t{\n \t\treturn requestContext;\n@@ -633,14 +661,13 @@ public void observeChange(ObservedChangeEvent event)\n \t\tif (CAT.isDebugEnabled())\n \t\t\tCAT.debug(\"Observed change in page \" + pageName + \"; creating page recorder.\");\n \n-\t\tIPageRecorder recorder = getPageRecorder(pageName);\n-         \n+\t\tIPageRecorder recorder = createPageRecorder(pageName);\n+\n \t\tpage.setChangeObserver(recorder);\n \n \t\trecorder.observeChange(event);\n \t}\n \n-\n \t/**\n \t *  Finds the page and its page recorder, creating the page recorder if necessary.\n \t *  The page recorder is marked for discard regardless of its current state.\n@@ -656,17 +683,17 @@ public void observeChange(ObservedChangeEvent event)\n \n \tpublic void discardPage(String name)\n \t{\n-        if (CAT.isDebugEnabled())\n-            CAT.debug(\"Discarding page \" + name);\n-            \n+\t\tif (CAT.isDebugEnabled())\n+\t\t\tCAT.debug(\"Discarding page \" + name);\n+\n \t\tIPageRecorder recorder = engine.getPageRecorder(name);\n \n \t\tif (recorder == null)\n \t\t{\n \n \t\t\tpage = getPage(name);\n \n-\t\t\trecorder = engine.createPageRecorder(name, this);\n+\t\t\trecorder = createPageRecorder(name);\n \n \t\t\tpage.setChangeObserver(recorder);\n \t\t}"
            },
            {
                "sha": "5541f149d9f3b34c40556120f7bd170f795b9d99",
                "filename": "web/new.html",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/apache/tapestry4/blob/c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2/web/new.html",
                "raw_url": "https://github.com/apache/tapestry4/raw/c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2/web/new.html",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/web/new.html?ref=c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2",
                "patch": "@@ -11,6 +11,10 @@\n \t<tr>\n \t\t<td valign=\"top\" align=\"left\"><img height=\"44\" src=\"images/ico_t.gif\" alt=\"[Tapestry Logo]\" width=\"44\" align=\"absMiddle\" border=\"0\">&nbsp;<img height=\"22\" alt=\"Tapestry\" src=\"images/hd_tapestry.gif\" width=\"100\" align=\"absMiddle\" vspace=\"17\" border=\"0\">\n \n+<h3>Release 2.0.2a</h3>\n+\n+[ 549482 ] NPE in RequestCycle.observeChange()\n+\n <h3>Release 2.0.2</h3>\n \n Changed the inspector icon into an animated GIF for compatiblility with more browsers."
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/fa1d223e7783eb1fd3e4500023ba3775b868c337",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/7913ff033feac8e7e419f550817cd191473e2618",
        "message": "[ 532562 ] Submit.jwc contains error\n[ 532587 ] Submit throws NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@242454 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_11",
        "file": [
            {
                "sha": "18b9da8552ec19a460ec33fa74021f398d69a669",
                "filename": "framework/src/com/primix/tapestry/form/Submit.java",
                "status": "modified",
                "additions": 21,
                "deletions": 10,
                "changes": 31,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa1d223e7783eb1fd3e4500023ba3775b868c337/framework/src/com/primix/tapestry/form/Submit.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa1d223e7783eb1fd3e4500023ba3775b868c337/framework/src/com/primix/tapestry/form/Submit.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/form/Submit.java?ref=fa1d223e7783eb1fd3e4500023ba3775b868c337",
                "patch": "@@ -215,16 +215,27 @@ public void render(IResponseWriter writer, IRequestCycle cycle)\n \t\t\tif (value == null)\n \t\t\t\treturn;\n \n-\t\t\t// OK, now to notify the application code (via the parameters)\n-\t\t\t// that *this* Submit was selected.  We do this by applying\n-\t\t\t// a tag (presumably, specific to the Submit in question)\n-\t\t\t// to the selected binding.\n-\n-\t\t\tif (tagValue == null)\n-\t\t\t\ttagValue = tagBinding.getObject();\n-\n-\t\t\tif (tagValue != null)\n-\t\t\t\tselectedBinding.setObject(tagValue);\n+\t\t\tif (selectedBinding != null)\n+    \t\t\t{\n+    \t\t\t// OK, now to notify the application code (via the parameters)\n+    \t\t\t// that *this* Submit was selected.  We do this by applying\n+    \t\t\t// a tag (presumably, specific to the Submit in question)\n+    \t\t\t// to the selected binding.\n+    \n+\t\t\t\tif (tagBinding == null)\n+\t\t\t\t\tthrow new RequestCycleException(\n+\t\t\t\t\t\t\"The tag parameter is required if the selected parameter is bound.\",\n+\t\t\t\t\t\tthis);\n+\n+    \t\t\tif (tagValue == null)\n+    \t\t\t\ttagValue = tagBinding.getObject();\n+    \n+ \t\t\t\tif (tagValue == null)\n+\t\t\t\t\tthrow new RequiredParameterException(this, \"tag\", tagBinding);\n+\n+\t   \t\t\tif (tagValue != null)\n+    \t\t\t\tselectedBinding.setObject(tagValue);\n+\t\t\t}\n \n \t\t\tif (listenerBinding != null)\n \t\t\t{"
            },
            {
                "sha": "064c6d4fc05697b1797b27ddff16d3ad1ba215d7",
                "filename": "framework/src/com/primix/tapestry/form/Submit.jwc",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/tapestry4/blob/fa1d223e7783eb1fd3e4500023ba3775b868c337/framework/src/com/primix/tapestry/form/Submit.jwc",
                "raw_url": "https://github.com/apache/tapestry4/raw/fa1d223e7783eb1fd3e4500023ba3775b868c337/framework/src/com/primix/tapestry/form/Submit.jwc",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/form/Submit.jwc?ref=fa1d223e7783eb1fd3e4500023ba3775b868c337",
                "patch": "@@ -4,8 +4,8 @@\n <specification class=\"com.primix.tapestry.form.Submit\" allow-body=\"no\">\n   <parameter name=\"label\" java-type=\"java.lang.String\"/>\n   <parameter name=\"disabled\"/>\n-  <parameter name=\"selected\">\n-  <parameter name=\"tag\">\n+  <parameter name=\"selected\"/>\n+  <parameter name=\"tag\"/>\n   <parameter name=\"listener\" java-type=\"com.primix.tapestry.IActionListener\"/>\n   \n   <reserved-parameter name=\"name\"/>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/362f9cf7e6a4e1dae65f9d656666d35add4c301c",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/a8e9a47a6a52791554c67933fb041adf82e3b86a",
        "message": "Fix a NullPointerException in SimpleApplication.cleanupAfterRequest().  The exception may be thrown\nif another exception is thrown earlier in the request cycle (before any page recoders are accessed).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@241921 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_12",
        "file": [
            {
                "sha": "700360f7bcdb363c6380fe2519921ee81b540c7e",
                "filename": "framework/ChangeLog",
                "status": "modified",
                "additions": 5,
                "deletions": 0,
                "changes": 5,
                "blob_url": "https://github.com/apache/tapestry4/blob/362f9cf7e6a4e1dae65f9d656666d35add4c301c/framework/ChangeLog",
                "raw_url": "https://github.com/apache/tapestry4/raw/362f9cf7e6a4e1dae65f9d656666d35add4c301c/framework/ChangeLog",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/ChangeLog?ref=362f9cf7e6a4e1dae65f9d656666d35add4c301c",
                "patch": "@@ -1,5 +1,10 @@\n * Oct 4 2000 hship\n \n+Fix a NullPointerException in SimpleApplication.cleanupAfterRequest().  The exception may be thrown\n+if another exception is thrown earlier in the request cycle (before any page recoders are accessed).\n+\n+* Oct 4 2000 hship\n+\n Revise Submit and ImageButton components to set a property if clicked, remove\n listener parameters from Form-related components.\n "
            },
            {
                "sha": "02190fd7709259601b27938374fc0b9569961082",
                "filename": "framework/src/com/primix/tapestry/app/SimpleApplication.java",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/tapestry4/blob/362f9cf7e6a4e1dae65f9d656666d35add4c301c/framework/src/com/primix/tapestry/app/SimpleApplication.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/362f9cf7e6a4e1dae65f9d656666d35add4c301c/framework/src/com/primix/tapestry/app/SimpleApplication.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/app/SimpleApplication.java?ref=362f9cf7e6a4e1dae65f9d656666d35add4c301c",
                "patch": "@@ -85,6 +85,9 @@ protected void cleanupAfterRequest(IRequestCycle cycle)\n \t\tMap.Entry entry;\n \t\tIPageRecorder recorder;\n \t\t\n+        if (recorders == null)\n+            return;\n+\n \t\ti = recorders.entrySet().iterator();\n \t\t\n \t\twhile (i.hasNext())"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/d4a3651ed863531de57db48d14f0c509ed7adf3a",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/293a592c2344ceb4c380f622b302cea88de25fcd",
        "message": "Fix NullPointerException when the Home page does NOT throw an exception inside validate().\nChange the signature for AbstractApplication.cleanupAfterRequest to include the IRequestCycle.\nUndo the [114878] fix, since it uses servlet 2.2 only API.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@241917 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_13",
        "file": [
            {
                "sha": "65a05fd8e86500c9f6e735d3472fb099810f9faa",
                "filename": "framework/ChangeLog",
                "status": "modified",
                "additions": 13,
                "deletions": 0,
                "changes": 13,
                "blob_url": "https://github.com/apache/tapestry4/blob/d4a3651ed863531de57db48d14f0c509ed7adf3a/framework/ChangeLog",
                "raw_url": "https://github.com/apache/tapestry4/raw/d4a3651ed863531de57db48d14f0c509ed7adf3a/framework/ChangeLog",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/ChangeLog?ref=d4a3651ed863531de57db48d14f0c509ed7adf3a",
                "patch": "@@ -1,3 +1,16 @@\n+* Sep 26 2000 hship\n+\n+Fix NullPointerException when the Home page does NOT throw an exception inside validate().\n+\n+* Sep 25 2000 hship\n+\n+Change the signature for AbstractApplication.cleanupAfterRequest to include the IRequestCycle.\n+Undo the [114878] fix, since it uses servlet 2.2 only API.\n+\n+* Sep 24 2000 hship\n+\n+[114878] com.primix.tapestry.context-path should be for context \n+\n * Sep 24 2000 hship\n \n [115140] Home service must validate()"
            },
            {
                "sha": "22fca4b69612e5c2c239ed73acd0210450b0fc5d",
                "filename": "framework/src/com/primix/tapestry/app/AbstractApplication.java",
                "status": "modified",
                "additions": 26,
                "deletions": 25,
                "changes": 51,
                "blob_url": "https://github.com/apache/tapestry4/blob/d4a3651ed863531de57db48d14f0c509ed7adf3a/framework/src/com/primix/tapestry/app/AbstractApplication.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/d4a3651ed863531de57db48d14f0c509ed7adf3a/framework/src/com/primix/tapestry/app/AbstractApplication.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/app/AbstractApplication.java?ref=d4a3651ed863531de57db48d14f0c509ed7adf3a",
                "patch": "@@ -107,7 +107,7 @@\n \n \t/**\n \t*  Servlet context attribute name for the default {@link ITemplateSource}\n-\t*  instance.\n+\t*  instance.  The application's name is appended.\n \t*\n \t*/\n \n@@ -116,7 +116,7 @@\n \n \t/**\n \t*  Servlet context attribute name for the default {@link ISpecificationSource}\n-\t*  instance.\n+\t*  instance.  The application's name is appended.\n \t*\n \t*/\n \n@@ -233,8 +233,9 @@ public void service(IRequestCycle cycle, ResponseOutputStream output)\n \n \t\t\thome.validate(cycle);\n \n-\t\t\t// If that worked, then render it.\n+\t\t\t// If it validates, then redner it.\n \n+\t\t\tcycle.setPage(home);\n \t\t\trender(cycle, output);\n \n \t\t\tif (monitor != null)\n@@ -496,7 +497,7 @@ protected void reportException(String reportTitle, Throwable e)\n \t*\n \t*/\n \n-\tprotected abstract void cleanupAfterRequest();\n+\tprotected abstract void cleanupAfterRequest(IRequestCycle cycle);\n \n \t/**\n \t*  Invoked by {@link #getService(String)} to construct a named service.  This method\n@@ -564,10 +565,7 @@ protected IApplicationService constructService(String name)\n \n \tpublic void extendDescription(StringBuffer buffer)\n \t{\n-\t\tif (specification == null)\n-\t\t\tbuffer.append(\"<specification not loaded>\");\n-\t\telse\n-\t\t\tbuffer.append(specification.getName());\n+\t\tbuffer.append(specification.getName());\n \n \t\tif (sessionId != null)\n \t\t{\n@@ -899,7 +897,7 @@ public void service(RequestContext context) throws ServletException, IOException\n \t\t\tif (output != null)\n \t\t\t\toutput.forceClose();\n \t\t\t\t\n-\t\t\tcleanupAfterRequest();\n+\t\t\tcleanupAfterRequest(cycle);\n \n \t\t}\n \n@@ -1125,6 +1123,7 @@ private void reset(IRequestCycle cycle)\n \t\tRequestContext context;\n \t\tServletContext servletContext;\n \t\tIMonitor monitor;\n+\t\tString name;\n \n \t\tmonitor = cycle.getMonitor();\n \n@@ -1135,8 +1134,10 @@ private void reset(IRequestCycle cycle)\n \n \t\tservletContext = context.getServlet().getServletContext();\n \n-\t\tservletContext.removeAttribute(TEMPLATE_SOURCE_NAME);\n-\t\tservletContext.removeAttribute(SPECIFICATION_SOURCE_NAME);\n+\t\tname = specification.getName();\n+\n+\t\tservletContext.removeAttribute(TEMPLATE_SOURCE_NAME + \".\" + name);\n+\t\tservletContext.removeAttribute(SPECIFICATION_SOURCE_NAME + \".\" + name);\n \t\tservletContext.removeAttribute(PAGE_SOURCE_NAME + \".\" + specification.getName());\n \n \t\trestart(cycle);\n@@ -1172,7 +1173,7 @@ public void setLocale(Locale value)\n \t*  <p>The context path is only defined under Servlet API 2.2.  It can\n \t*  be accessed via the method {@link HttpServletRequest#getContextPath()}.\n \t*  Since Tapestry is designed to work with Servlet API 2.1, we don't use this.\n-\t*  Instead, we require that the servlet initial parameter\n+\t*  Instead, we require that the <i>context</i> initial parameter\n \t* <code>com.primix.tapestry.context-path</code> be defined with the\n \t* correct value, typically \"/<i>webapp</i>\".\n \t*\n@@ -1201,6 +1202,7 @@ protected void setupForRequest(RequestContext context)\n \t\tServletContext servletContext = null;\n \t\tString name;\n \t\tString servletPath;\n+\t\tString applicationName;\n \n \t\tservlet = context.getServlet();\n \t\t\n@@ -1210,49 +1212,48 @@ protected void setupForRequest(RequestContext context)\n \t\t{\n \t\t\tservletPath = context.getRequest().getServletPath();\n \n-\t\t\tcontextPath = servlet.getInitParameter(\"com.primix.tapestry.context-path\");\n+\t\t\tcontextPath = servlet.getInitParameter(\n+\t\t\t\t\"com.primix.tapestry.context-path\");\n \t\t\t\n \t\t\tif (contextPath == null)\n \t\t\t\tservletPrefix = servletPath;\n \t\t\telse\n \t\t\t\tservletPrefix = contextPath + servletPath;\n \t\t}\t\n \n-\t\t// Need to redo a bunch of this because of class loader issues related\n-\t\t// to IResourceResolver.  Each Tapestry app will need its own template source\n-\t\t// and page source.  Possibly, there should be chaining, such that templates\n-\t\t// and specifications provided by the framework can come from dedicated\n-\t\t// sources .. this allows greater sharing.  Somewhat academic though, since\n-\t\t// typically only a single Tapestry application will be running within\n-\t\t// a single servlet container or ServletContext.\n+\t\tapplicationName = specification.getName();\n \n \t\tif (templateSource == null)\n \t\t{\n+\t\t\tname = TEMPLATE_SOURCE_NAME + \".\" + applicationName;\n+\n \t\t\ttemplateSource = \n-\t\t\t\t(ITemplateSource)servletContext.getAttribute(TEMPLATE_SOURCE_NAME);\n+\t\t\t\t(ITemplateSource)servletContext.getAttribute(name);\n \n \t\t\tif (templateSource == null)\n \t\t\t\ttemplateSource = new DefaultTemplateSource(getResourceResolver());\n \n-\t\t\tservletContext.setAttribute(TEMPLATE_SOURCE_NAME, templateSource);\n+\t\t\tservletContext.setAttribute(name, templateSource);\n \t\t}\n \n \t\tif (specificationSource == null)\n \t\t{\n+\t\t\tname = SPECIFICATION_SOURCE_NAME + \".\" + applicationName;\n+\n \t\t\tspecificationSource = \n-\t\t\t\t(ISpecificationSource)servletContext.getAttribute(SPECIFICATION_SOURCE_NAME);\n+\t\t\t\t(ISpecificationSource)servletContext.getAttribute(name);\n \n \t\t\tif (specificationSource == null)\n \t\t\t\tspecificationSource = \n \t\t\t\tnew DefaultSpecificationSource(getResourceResolver(), \n                 \tspecification);\n \n-\t\t\tservletContext.setAttribute(SPECIFICATION_SOURCE_NAME, specificationSource);\n+\t\t\tservletContext.setAttribute(name, specificationSource);\n \t\t}\n \n \t\tif (pageSource == null)\n \t\t{\n-\t\t\tname = PAGE_SOURCE_NAME + \".\" + specification.getName();\n+\t\t\tname = PAGE_SOURCE_NAME + \".\" + applicationName;\n \n \t\t\tpageSource = (PageSource)servletContext.getAttribute(name);\n "
            },
            {
                "sha": "88c317a54fadd1e147dd2b3d85d125e5dfb0c1a2",
                "filename": "framework/src/com/primix/tapestry/app/SimpleApplication.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/tapestry4/blob/d4a3651ed863531de57db48d14f0c509ed7adf3a/framework/src/com/primix/tapestry/app/SimpleApplication.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/d4a3651ed863531de57db48d14f0c509ed7adf3a/framework/src/com/primix/tapestry/app/SimpleApplication.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/app/SimpleApplication.java?ref=d4a3651ed863531de57db48d14f0c509ed7adf3a",
                "patch": "@@ -79,7 +79,7 @@ public SimpleApplication(RequestContext context, Locale locale)\n \t*\n \t*/\n \n-\tprotected void cleanupAfterRequest()\n+\tprotected void cleanupAfterRequest(IRequestCycle cycle)\n \t{\n \t\tIterator i;\n \t\tMap.Entry entry;"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/36043f294e52ddc61ff16409be64acb452aa3ee1",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/d2c4a3e7821ecec9d6f2f69b9b27122bf33ac8bb",
        "message": "TAPESTRY-701: NPE creating a link from pageValidate() when there are client-persistent properties with page scope\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@348184 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_14",
        "file": [
            {
                "sha": "9380aa67b1783dda1d7e96d3af06f821abf40bfd",
                "filename": "framework/src/java/org/apache/tapestry/record/PageClientPropertyPersistenceScope.java",
                "status": "modified",
                "additions": 14,
                "deletions": 2,
                "changes": 16,
                "blob_url": "https://github.com/apache/tapestry4/blob/36043f294e52ddc61ff16409be64acb452aa3ee1/framework/src/java/org/apache/tapestry/record/PageClientPropertyPersistenceScope.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/36043f294e52ddc61ff16409be64acb452aa3ee1/framework/src/java/org/apache/tapestry/record/PageClientPropertyPersistenceScope.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/java/org/apache/tapestry/record/PageClientPropertyPersistenceScope.java?ref=36043f294e52ddc61ff16409be64acb452aa3ee1",
                "patch": "@@ -14,6 +14,7 @@\n \n package org.apache.tapestry.record;\n \n+import org.apache.tapestry.IPage;\n import org.apache.tapestry.IRequestCycle;\n import org.apache.tapestry.engine.ServiceEncoding;\n \n@@ -29,7 +30,7 @@\n         AbstractPrefixedClientPropertyPersistenceScope\n {\n     private IRequestCycle _requestCycle;\n-    \n+\n     public PageClientPropertyPersistenceScope()\n     {\n         super(\"state:\");\n@@ -43,7 +44,18 @@ public PageClientPropertyPersistenceScope()\n     public boolean shouldEncodeState(ServiceEncoding encoding, String pageName,\n             PersistentPropertyData data)\n     {\n-        return pageName.equals(_requestCycle.getPage().getPageName());\n+        IPage page = _requestCycle.getPage();\n+\n+        // TAPESTRY-701: if you try to generate a link using, say, page or external service,\n+        // from inside PageValidateListener.pageValidate(), then there may not be an active\n+        // page yet. Seems like the right thing to do is hold onto any properties until\n+        // we know what the active page is.  I know this one is going to cause a fight\n+        // since its not clear whether keeping or discarding is the right way to go.\n+        \n+        if (page == null)\n+            return true;\n+\n+        return pageName.equals(page.getPageName());\n     }\n \n     public void setRequestCycle(IRequestCycle requestCycle)"
            },
            {
                "sha": "e9bc66ac6845c2948ab3d373ab359dfb7891a2b1",
                "filename": "framework/src/test/org/apache/tapestry/record/ClientPropertyPersistenceStrategyTest.java",
                "status": "renamed",
                "additions": 122,
                "deletions": 87,
                "changes": 209,
                "blob_url": "https://github.com/apache/tapestry4/blob/36043f294e52ddc61ff16409be64acb452aa3ee1/framework/src/test/org/apache/tapestry/record/ClientPropertyPersistenceStrategyTest.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/36043f294e52ddc61ff16409be64acb452aa3ee1/framework/src/test/org/apache/tapestry/record/ClientPropertyPersistenceStrategyTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/test/org/apache/tapestry/record/ClientPropertyPersistenceStrategyTest.java?ref=36043f294e52ddc61ff16409be64acb452aa3ee1",
                "patch": "@@ -23,58 +23,66 @@\n import org.apache.tapestry.IRequestCycle;\n import org.apache.tapestry.engine.ServiceEncoding;\n import org.apache.tapestry.web.WebRequest;\n-import org.easymock.MockControl;\n \n /**\n  * Tests for {@link org.apache.tapestry.record.ClientPropertyPersistenceStrategy}.\n  * \n  * @author Howard M. Lewis Ship\n  * @since 4.0\n  */\n-public class TestClientPropertyPersistenceStrategy extends HiveMindTestCase\n+public class ClientPropertyPersistenceStrategyTest extends HiveMindTestCase\n {\n-    public void testInitialize()\n+    private IRequestCycle newCycle()\n     {\n-        MockControl requestc = newControl(WebRequest.class);\n-        WebRequest request = (WebRequest) requestc.getMock();\n+        return (IRequestCycle) newMock(IRequestCycle.class);\n+    }\n \n-        request.getParameterNames();\n-        requestc.setReturnValue(Arrays.asList(new Object[]\n-        { \"foo\", \"state:MyPage\" }));\n+    private PersistentPropertyDataEncoder newEncoder()\n+    {\n+        PersistentPropertyDataEncoderImpl encoder = new PersistentPropertyDataEncoderImpl();\n+        encoder.setClassResolver(getClassResolver());\n \n-        MockControl scopec = newControl(ClientPropertyPersistenceScope.class);\n-        ClientPropertyPersistenceScope scope = (ClientPropertyPersistenceScope) scopec.getMock();\n+        return encoder;\n+    }\n \n-        scope.isParameterForScope(\"foo\");\n-        scopec.setReturnValue(false);\n+    private IPage newPage()\n+    {\n+        return (IPage) newMock(IPage.class);\n+    }\n+\n+    private WebRequest newRequest()\n+    {\n+        return (WebRequest) newMock(WebRequest.class);\n+    }\n \n-        scope.isParameterForScope(\"state:MyPage\");\n-        scopec.setReturnValue(true);\n+    private ClientPropertyPersistenceScope newScope()\n+    {\n+        return (ClientPropertyPersistenceScope) newMock(ClientPropertyPersistenceScope.class);\n+    }\n \n-        scope.extractPageName(\"state:MyPage\");\n-        scopec.setReturnValue(\"MyPage\");\n+    public void testAddParametersForPersistentProperties()\n+    {\n+        WebRequest request = newRequest();\n \n-        request.getParameterValue(\"state:MyPage\");\n-        requestc.setReturnValue(\"ENCODED\");\n+        ServiceEncoding encoding = (ServiceEncoding) newMock(ServiceEncoding.class);\n \n-        MockControl encoderc = newControl(PersistentPropertyDataEncoder.class);\n-        PersistentPropertyDataEncoder encoder = (PersistentPropertyDataEncoder) encoderc.getMock();\n+        trainGetParameterNames(request, new String[]\n+        { \"bar\", \"appstate:MyPage\" });\n \n-        List changes = Collections.singletonList(new PropertyChangeImpl(\"foo\", \"bar\", \"baz\"));\n+        trainGetParameterValue(request, \"appstate:MyPage\", \"ENCODED\");\n \n-        encoder.decodePageChanges(\"ENCODED\");\n-        encoderc.setReturnValue(changes);\n+        encoding.setParameterValue(\"appstate:MyPage\", \"ENCODED\");\n \n         replayControls();\n \n         ClientPropertyPersistenceStrategy strategy = new ClientPropertyPersistenceStrategy();\n         strategy.setRequest(request);\n-        strategy.setScope(scope);\n-        strategy.setEncoder(encoder);\n+        strategy.setScope(new AppClientPropertyPersistenceScope());\n+        strategy.setEncoder(newEncoder());\n \n         strategy.initializeService();\n \n-        assertSame(changes, strategy.getStoredChanges(\"MyPage\"));\n+        strategy.addParametersForPersistentProperties(encoding, false);\n \n         verifyControls();\n     }\n@@ -86,96 +94,62 @@ public void testGetChangesUnknownPage()\n         assertTrue(strategy.getStoredChanges(\"UnknownPage\").isEmpty());\n     }\n \n-    public void testStoreAndRetrieve()\n+    public void testInitialize()\n     {\n-        PropertyChange pc = new PropertyChangeImpl(\"foo\", \"bar\", \"baz\");\n-\n-        ClientPropertyPersistenceStrategy strategy = new ClientPropertyPersistenceStrategy();\n-        strategy.setEncoder(newEncoder());\n-\n-        strategy.store(\"MyPage\", \"foo\", \"bar\", \"baz\");\n+        WebRequest request = newRequest();\n+        ClientPropertyPersistenceScope scope = newScope();\n+        PersistentPropertyDataEncoder encoder = (PersistentPropertyDataEncoder) newMock(PersistentPropertyDataEncoder.class);\n \n-        assertEquals(Collections.singletonList(pc), strategy.getStoredChanges(\"MyPage\"));\n+        trainGetParameterNames(request, new String[]\n+        { \"foo\", \"state:MyPage\" });\n \n-        strategy.discardStoredChanges(\"MyPage\");\n+        trainIsParameterForScope(scope, \"foo\", false);\n+        trainIsParameterForScope(scope, \"state:MyPage\", true);\n \n-        assertEquals(Collections.EMPTY_LIST, strategy.getStoredChanges(\"MyPage\"));\n-    }\n+        trainExtractPageName(scope, \"state:MyPage\", \"MyPage\");\n \n-    public void testAddParametersForPersistentProperties()\n-    {\n-        MockControl requestc = newControl(WebRequest.class);\n-        WebRequest request = (WebRequest) requestc.getMock();\n+        trainGetParameterValue(request, \"state:MyPage\", \"ENCODED\");\n \n-        ServiceEncoding encoding = (ServiceEncoding) newMock(ServiceEncoding.class);\n-\n-        request.getParameterNames();\n-        requestc.setReturnValue(Arrays.asList(new Object[]\n-        { \"bar\", \"appstate:MyPage\" }));\n+        List changes = Collections.singletonList(new PropertyChangeImpl(\"foo\", \"bar\", \"baz\"));\n \n-        request.getParameterValue(\"appstate:MyPage\");\n-        requestc.setReturnValue(\"ENCODED\");\n-\n-        encoding.setParameterValue(\"appstate:MyPage\", \"ENCODED\");\n+        trainDecodePageChanges(encoder, \"ENCODED\", changes);\n \n         replayControls();\n \n         ClientPropertyPersistenceStrategy strategy = new ClientPropertyPersistenceStrategy();\n         strategy.setRequest(request);\n-        strategy.setScope(new AppClientPropertyPersistenceScope());\n-        strategy.setEncoder(newEncoder());\n+        strategy.setScope(scope);\n+        strategy.setEncoder(encoder);\n \n         strategy.initializeService();\n \n-        strategy.addParametersForPersistentProperties(encoding, false);\n+        assertSame(changes, strategy.getStoredChanges(\"MyPage\"));\n \n         verifyControls();\n     }\n \n-    private PersistentPropertyDataEncoder newEncoder()\n-    {\n-        PersistentPropertyDataEncoderImpl encoder = new PersistentPropertyDataEncoderImpl();\n-        encoder.setClassResolver(getClassResolver());\n-\n-        return encoder;\n-    }\n-\n     public void testPageScope()\n     {\n-        MockControl requestc = newControl(WebRequest.class);\n-        WebRequest request = (WebRequest) requestc.getMock();\n-\n-        MockControl cyclec = newControl(IRequestCycle.class);\n-        IRequestCycle cycle = (IRequestCycle) cyclec.getMock();\n-\n-        MockControl pagec = newControl(IPage.class);\n-        IPage page = (IPage) pagec.getMock();\n+        WebRequest request = newRequest();\n+        IRequestCycle cycle = newCycle();\n+        IPage page = newPage();\n \n         ServiceEncoding encoding = (ServiceEncoding) newMock(ServiceEncoding.class);\n \n-        cycle.getPage();\n-        cyclec.setReturnValue(page);\n-\n-        cycle.getPage();\n-        cyclec.setReturnValue(page);\n+        trainGetPage(cycle, page);\n \n-        page.getPageName();\n-        pagec.setReturnValue(\"MyPage\");\n-\n-        page.getPageName();\n-        pagec.setReturnValue(\"MyPage\");\n+        trainGetPageName(page, \"MyPage\");\n \n-        request.getParameterNames();\n-        requestc.setReturnValue(Arrays.asList(new Object[]\n-        { \"foo\", \"state:MyPage\", \"state:OtherPage\" }));\n+        trainGetPage(cycle, page);\n+        trainGetPageName(page, \"MyPage\");\n \n-        request.getParameterValue(\"state:MyPage\");\n-        requestc.setReturnValue(\"ENCODED\");\n+        trainGetParameterNames(request, new String[]\n+        { \"foo\", \"state:MyPage\", \"state:OtherPage\" });\n \n-        request.getParameterValue(\"state:OtherPage\");\n-        requestc.setReturnValue(\"ENCODED\");\n+        trainGetParameterValue(request, \"state:MyPage\", \"ENCODED1\");\n+        trainGetParameterValue(request, \"state:OtherPage\", \"ENCODED2\");\n \n-        encoding.setParameterValue(\"state:MyPage\", \"ENCODED\");\n+        encoding.setParameterValue(\"state:MyPage\", \"ENCODED1\");\n \n         replayControls();\n \n@@ -194,4 +168,65 @@ public void testPageScope()\n         verifyControls();\n \n     }\n+\n+    public void testStoreAndRetrieve()\n+    {\n+        PropertyChange pc = new PropertyChangeImpl(\"foo\", \"bar\", \"baz\");\n+\n+        ClientPropertyPersistenceStrategy strategy = new ClientPropertyPersistenceStrategy();\n+        strategy.setEncoder(newEncoder());\n+\n+        strategy.store(\"MyPage\", \"foo\", \"bar\", \"baz\");\n+\n+        assertEquals(Collections.singletonList(pc), strategy.getStoredChanges(\"MyPage\"));\n+\n+        strategy.discardStoredChanges(\"MyPage\");\n+\n+        assertEquals(Collections.EMPTY_LIST, strategy.getStoredChanges(\"MyPage\"));\n+    }\n+\n+    private void trainDecodePageChanges(PersistentPropertyDataEncoder encoder, String encoded,\n+            List changes)\n+    {\n+        encoder.decodePageChanges(encoded);\n+        setReturnValue(encoder, changes);\n+    }\n+\n+    private void trainExtractPageName(ClientPropertyPersistenceScope scope, String parameterName,\n+            String pageName)\n+    {\n+        scope.extractPageName(parameterName);\n+        setReturnValue(scope, pageName);\n+    }\n+\n+    private void trainGetPage(IRequestCycle cycle, IPage page)\n+    {\n+        cycle.getPage();\n+        setReturnValue(cycle, page);\n+    }\n+\n+    private void trainGetPageName(IPage page, String pageName)\n+    {\n+        page.getPageName();\n+        setReturnValue(page, pageName);\n+    }\n+\n+    private void trainGetParameterNames(WebRequest request, String[] names)\n+    {\n+        request.getParameterNames();\n+        setReturnValue(request, Arrays.asList(names));\n+    }\n+\n+    private void trainGetParameterValue(WebRequest request, String parameterName, String value)\n+    {\n+        request.getParameterValue(parameterName);\n+        setReturnValue(request, value);\n+    }\n+\n+    private void trainIsParameterForScope(ClientPropertyPersistenceScope scope,\n+            String parameterName, boolean result)\n+    {\n+        scope.isParameterForScope(parameterName);\n+        setReturnValue(scope, result);\n+    }\n }\n\\ No newline at end of file",
                "previous_filename": "framework/src/test/org/apache/tapestry/record/TestClientPropertyPersistenceStrategy.java"
            },
            {
                "sha": "333f79030d96ed921503fdce0e5a1c3590942f00",
                "filename": "framework/src/test/org/apache/tapestry/record/PageClientPropertyPersistenceScopeTest.java",
                "status": "added",
                "additions": 128,
                "deletions": 0,
                "changes": 128,
                "blob_url": "https://github.com/apache/tapestry4/blob/36043f294e52ddc61ff16409be64acb452aa3ee1/framework/src/test/org/apache/tapestry/record/PageClientPropertyPersistenceScopeTest.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/36043f294e52ddc61ff16409be64acb452aa3ee1/framework/src/test/org/apache/tapestry/record/PageClientPropertyPersistenceScopeTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/test/org/apache/tapestry/record/PageClientPropertyPersistenceScopeTest.java?ref=36043f294e52ddc61ff16409be64acb452aa3ee1",
                "patch": "@@ -0,0 +1,128 @@\n+// Copyright 2005 The Apache Software Foundation\r\n+//\r\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+// you may not use this file except in compliance with the License.\r\n+// You may obtain a copy of the License at\r\n+//\r\n+//     http://www.apache.org/licenses/LICENSE-2.0\r\n+//\r\n+// Unless required by applicable law or agreed to in writing, software\r\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+// See the License for the specific language governing permissions and\r\n+// limitations under the License.\r\n+\r\n+package org.apache.tapestry.record;\r\n+\r\n+import org.apache.hivemind.test.HiveMindTestCase;\r\n+import org.apache.tapestry.IPage;\r\n+import org.apache.tapestry.IRequestCycle;\r\n+\r\n+/**\r\n+ * Tests for {@link org.apache.tapestry.record.PageClientPropertyPersistenceScope}.\r\n+ * \r\n+ * @author Howard M. Lewis Ship\r\n+ * @since 4.0\r\n+ */\r\n+public class PageClientPropertyPersistenceScopeTest extends HiveMindTestCase\r\n+{\r\n+    protected IRequestCycle newCycle()\r\n+    {\r\n+        return (IRequestCycle) newMock(IRequestCycle.class);\r\n+    }\r\n+\r\n+    protected IPage newPage()\r\n+    {\r\n+        return (IPage) newMock(IPage.class);\r\n+    }\r\n+\r\n+    public void testConstructParameterName()\r\n+    {\r\n+        PageClientPropertyPersistenceScope scope = new PageClientPropertyPersistenceScope();\r\n+\r\n+        assertEquals(\"state:MyPage\", scope.constructParameterName(\"MyPage\"));\r\n+    }\r\n+\r\n+    public void testIsParameterForScope()\r\n+    {\r\n+        PageClientPropertyPersistenceScope scope = new PageClientPropertyPersistenceScope();\r\n+\r\n+        assertEquals(true, scope.isParameterForScope(\"state:MyPage\"));\r\n+        assertEquals(false, scope.isParameterForScope(\"foo\"));\r\n+        assertEquals(false, scope.isParameterForScope(\"appstate:Foo\"));\r\n+    }\r\n+\r\n+    public void testExtractPageName()\r\n+    {\r\n+        PageClientPropertyPersistenceScope scope = new PageClientPropertyPersistenceScope();\r\n+\r\n+        assertEquals(\"MyPage\", scope.extractPageName(\"state:MyPage\"));\r\n+    }\r\n+\r\n+    public void testShouldEncodeState()\r\n+    {\r\n+        IRequestCycle cycle = newCycle();\r\n+        IPage page = newPage();\r\n+\r\n+        trainGetPage(cycle, page);\r\n+        trainGetPageName(page, \"MyPage\");\r\n+\r\n+        replayControls();\r\n+\r\n+        PageClientPropertyPersistenceScope scope = new PageClientPropertyPersistenceScope();\r\n+\r\n+        scope.setRequestCycle(cycle);\r\n+\r\n+        assertEquals(true, scope.shouldEncodeState(null, \"MyPage\", null));\r\n+\r\n+        verifyControls();\r\n+    }\r\n+\r\n+    public void testShouldEncodeStateDifferentPage()\r\n+    {\r\n+        IRequestCycle cycle = newCycle();\r\n+        IPage page = newPage();\r\n+\r\n+        trainGetPage(cycle, page);\r\n+        trainGetPageName(page, \"MyPage\");\r\n+\r\n+        replayControls();\r\n+\r\n+        PageClientPropertyPersistenceScope scope = new PageClientPropertyPersistenceScope();\r\n+\r\n+        scope.setRequestCycle(cycle);\r\n+\r\n+        assertEquals(false, scope.shouldEncodeState(null, \"OtherPage\", null));\r\n+\r\n+        verifyControls();\r\n+    }\r\n+\r\n+    public void testShouldEncodeStateNoActivePage()\r\n+    {\r\n+        IRequestCycle cycle = newCycle();\r\n+\r\n+        trainGetPage(cycle, null);\r\n+\r\n+        replayControls();\r\n+\r\n+        PageClientPropertyPersistenceScope scope = new PageClientPropertyPersistenceScope();\r\n+\r\n+        scope.setRequestCycle(cycle);\r\n+\r\n+        assertEquals(true, scope.shouldEncodeState(null, \"MyPage\", null));\r\n+\r\n+        verifyControls();\r\n+    }\r\n+\r\n+    private void trainGetPageName(IPage page, String pageName)\r\n+    {\r\n+        page.getPageName();\r\n+        setReturnValue(page, pageName);\r\n+    }\r\n+\r\n+    private void trainGetPage(IRequestCycle cycle, IPage page)\r\n+    {\r\n+        cycle.getPage();\r\n+        setReturnValue(cycle, page);\r\n+    }\r\n+}\r"
            },
            {
                "sha": "784e447f2c3978397421239c020056530a776004",
                "filename": "status.xml",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/tapestry4/blob/36043f294e52ddc61ff16409be64acb452aa3ee1/status.xml",
                "raw_url": "https://github.com/apache/tapestry4/raw/36043f294e52ddc61ff16409be64acb452aa3ee1/status.xml",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/status.xml?ref=36043f294e52ddc61ff16409be64acb452aa3ee1",
                "patch": "@@ -67,6 +67,7 @@\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-769\">StateBinding doesn't override isInvariant()</action>\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-768\">FormMessages class has typo in message key for fieldAlreadyPrerendered()</action>\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-275\" due-to=\"Igor Grimaylo\">Single quotes in a localization of DatePicker strings causes a failure</action>\n+      <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-701\">NPE creating a link from pageValidate() when there are client-persistent properties with page scope</action>\n     </release>\n     <release version=\"4.0-beta-13\" date=\"Nov 12 2005\">\n       <action type=\"update\" dev=\"HLS\">Switch to HiveMind 1.1 (final)</action>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/7c467b766690f98567701b5a8df67f642f7f5e63",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/dc15d3911e6b4a8aa86e6846127c46eb9479a7f0",
        "message": "TAPESTRY-719: If an engine service returns null from getName(), an NPE occurs\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@332812 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_15",
        "file": [
            {
                "sha": "d5be72c97b93d98a008340024e6af643952314ce",
                "filename": "framework/src/java/org/apache/tapestry/services/impl/ServiceMapImpl.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/tapestry4/blob/7c467b766690f98567701b5a8df67f642f7f5e63/framework/src/java/org/apache/tapestry/services/impl/ServiceMapImpl.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/7c467b766690f98567701b5a8df67f642f7f5e63/framework/src/java/org/apache/tapestry/services/impl/ServiceMapImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/java/org/apache/tapestry/services/impl/ServiceMapImpl.java?ref=7c467b766690f98567701b5a8df67f642f7f5e63",
                "patch": "@@ -128,7 +128,7 @@ public IEngineService resolveEngineService(String name)\n         IEngineService service = contribution.getService();\n         String serviceName = service.getName();\n \n-        if (!serviceName.equals(name))\n+        if (!name.equals(serviceName))\n             throw new ApplicationRuntimeException(ImplMessages.serviceNameMismatch(\n                     service,\n                     name,"
            },
            {
                "sha": "7dbaaf1afd6f3b0138bc63fc47873fc427be8290",
                "filename": "status.xml",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/tapestry4/blob/7c467b766690f98567701b5a8df67f642f7f5e63/status.xml",
                "raw_url": "https://github.com/apache/tapestry4/raw/7c467b766690f98567701b5a8df67f642f7f5e63/status.xml",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/status.xml?ref=7c467b766690f98567701b5a8df67f642f7f5e63",
                "patch": "@@ -66,6 +66,7 @@\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-652\">Checkbox does not support FieldLabel</action>\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-328\">When an engine implementation is missing Tapestry does not throw an appropriate error</action>\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-720\">Tapestry should validate that all engine services provide a non-null service parameter</action>\n+      <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-719\">If an engine service returns null from getName(), an NPE occurs</action>\n     </release>\n     <release version=\"4.0-beta-12\" date=\"Oct 30 2005\">\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-718\">Asset injection makes assets appear as null inside finishLoad()</action>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/23031202a9ebf8455dbe637192e13cc03b9a64ff",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/7d7c4042249a27cc94a4df759647ecdd961f7b68",
        "message": "TAPESTRY-526: Tapestry throws a NPE if you try to configure an asset without an extension\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@329628 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_16",
        "file": [
            {
                "sha": "2afefc38bdee17ba3cbfd79aac980b5d087dc68d",
                "filename": "framework/src/java/org/apache/tapestry/web/LocalizedWebContextResourceFinder.java",
                "status": "modified",
                "additions": 12,
                "deletions": 2,
                "changes": 14,
                "blob_url": "https://github.com/apache/tapestry4/blob/23031202a9ebf8455dbe637192e13cc03b9a64ff/framework/src/java/org/apache/tapestry/web/LocalizedWebContextResourceFinder.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/23031202a9ebf8455dbe637192e13cc03b9a64ff/framework/src/java/org/apache/tapestry/web/LocalizedWebContextResourceFinder.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/java/org/apache/tapestry/web/LocalizedWebContextResourceFinder.java?ref=23031202a9ebf8455dbe637192e13cc03b9a64ff",
                "patch": "@@ -46,8 +46,18 @@ public LocalizedWebContextResourceFinder(WebContext context)\n     public LocalizedResource resolve(String contextPath, Locale locale)\n     {\n         int dotx = contextPath.lastIndexOf('.');\n-        String basePath = contextPath.substring(0, dotx);\n-        String suffix = contextPath.substring(dotx);\n+        String basePath;\n+        String suffix;\n+        if (dotx >= 0) {\n+        \tbasePath = contextPath.substring(0, dotx);\n+        \tsuffix = contextPath.substring(dotx);\n+        }\n+        else\n+        {\n+        \t// Resource without extension\n+        \tbasePath = contextPath;\n+        \tsuffix = \"\";\n+        }\n \n         LocalizedNameGenerator generator = new LocalizedNameGenerator(basePath, locale, suffix);\n "
            },
            {
                "sha": "b05e511edeb597735e1be6b8cafecefc9c283f0d",
                "filename": "framework/src/test/org/apache/tapestry/web/WebContextResourceTest.java",
                "status": "renamed",
                "additions": 33,
                "deletions": 22,
                "changes": 55,
                "blob_url": "https://github.com/apache/tapestry4/blob/23031202a9ebf8455dbe637192e13cc03b9a64ff/framework/src/test/org/apache/tapestry/web/WebContextResourceTest.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/23031202a9ebf8455dbe637192e13cc03b9a64ff/framework/src/test/org/apache/tapestry/web/WebContextResourceTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/test/org/apache/tapestry/web/WebContextResourceTest.java?ref=23031202a9ebf8455dbe637192e13cc03b9a64ff",
                "patch": "@@ -19,17 +19,14 @@\n \n import org.apache.hivemind.Resource;\n import org.apache.hivemind.test.HiveMindTestCase;\n-import org.apache.tapestry.web.WebContextResource;\n-import org.apache.tapestry.web.WebContext;\n-import org.easymock.MockControl;\n \n /**\n  * Tests for {@link org.apache.tapestry.web.WebContextResource}.\n  * \n  * @author Howard M. Lewis Ship\n  * @since 4.0\n  */\n-public class TestWebContextResource extends HiveMindTestCase\n+public class WebContextResourceTest extends HiveMindTestCase\n {\n     private WebContext newContext()\n     {\n@@ -57,11 +54,9 @@ public void testConstructor()\n \n     public void testLocalizationExists() throws Exception\n     {\n-        MockControl control = newControl(WebContext.class);\n-        WebContext context = (WebContext) control.getMock();\n+        WebContext context = newContext();\n \n-        context.getResource(\"/foo/bar/baz_en.html\");\n-        control.setReturnValue(new URL(\"http://foo.com\"));\n+        trainGetResource(context, \"/foo/bar/baz_en.html\", new URL(\"http://foo.com\"));\n \n         replayControls();\n \n@@ -75,16 +70,18 @@ public void testLocalizationExists() throws Exception\n         verifyControls();\n     }\n \n-    public void testLocalizationSame() throws Exception\n+    private void trainGetResource(WebContext context, String path, URL url)\n     {\n-        MockControl control = newControl(WebContext.class);\n-        WebContext context = (WebContext) control.getMock();\n+        context.getResource(path);\n+        setReturnValue(context, url);\n+    }\n \n-        context.getResource(\"/foo/bar/baz_en.html\");\n-        control.setReturnValue(null);\n+    public void testLocalizationSame() throws Exception\n+    {\n+        WebContext context = newContext();\n \n-        context.getResource(\"/foo/bar/baz.html\");\n-        control.setReturnValue(new URL(\"http://foo.com\"));\n+        trainGetResource(context, \"/foo/bar/baz_en.html\", null);\n+        trainGetResource(context, \"/foo/bar/baz.html\", new URL(\"http://foo.com\"));\n \n         replayControls();\n \n@@ -99,14 +96,10 @@ public void testLocalizationSame() throws Exception\n \n     public void testLocalizationMissing() throws Exception\n     {\n-        MockControl control = newControl(WebContext.class);\n-        WebContext context = (WebContext) control.getMock();\n-\n-        context.getResource(\"/foo/bar/baz_en.html\");\n-        control.setReturnValue(null);\n+        WebContext context = newContext();\n \n-        context.getResource(\"/foo/bar/baz.html\");\n-        control.setReturnValue(null);\n+        trainGetResource(context, \"/foo/bar/baz_en.html\", null);\n+        trainGetResource(context, \"/foo/bar/baz.html\", null);\n \n         replayControls();\n \n@@ -130,4 +123,22 @@ public void testGetRelativeResource()\n \n         verifyControls();\n     }\n+\n+    public void testGetExtensionlessResource() throws Exception\n+    {\n+        WebContext context = newContext();\n+\n+        trainGetResource(context, \"/foo/bar/baz_en\", new URL(\"http://foo.com\"));\n+\n+        replayControls();\n+\n+        Resource r1 = new WebContextResource(context, \"/foo/bar/baz\");\n+\n+        Resource r2 = r1.getLocalization(Locale.ENGLISH);\n+\n+        assertEquals(\"/foo/bar/baz_en\", r2.getPath());\n+        assertEquals(Locale.ENGLISH, r2.getLocale());\n+\n+        verifyControls();\n+    }\n }\n\\ No newline at end of file",
                "previous_filename": "framework/src/test/org/apache/tapestry/web/TestWebContextResource.java"
            },
            {
                "sha": "8802b82c317598fec816e558772fe8942f3e0beb",
                "filename": "status.xml",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/tapestry4/blob/23031202a9ebf8455dbe637192e13cc03b9a64ff/status.xml",
                "raw_url": "https://github.com/apache/tapestry4/raw/23031202a9ebf8455dbe637192e13cc03b9a64ff/status.xml",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/status.xml?ref=23031202a9ebf8455dbe637192e13cc03b9a64ff",
                "patch": "@@ -61,6 +61,7 @@\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-715\">LinkSubmit component should render its body, even when disabled</action>\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-602\">Add annotation to define default value of property</action>\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-723\">The \"empty\" property of StringTranslator is broken</action>\n+      <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-526\" due-to=\"Marcus Brito\">Tapestry throws a NPE if you try to configure an asset without an extension</action>\n     </release>\n     <release version=\"4.0-beta-11\" date=\"Oct 16 2005\">\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-650\">ClassNotFoundException thrown when deserializing an object from a client persistent property</action>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/83c0e2643427a253787b99b088b8b39793fa4db7",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/f976404502d1b737498509696926e2f6782a89b2",
        "message": "Fix bug 28177 (NPE in org.apache.tapestry.form.LinkSubmit). Thanks to sito@htf.highway.ne.jp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243875 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_17",
        "file": [
            {
                "sha": "07acee631dacb64e34f0bfa4ec46e116a40efdfb",
                "filename": "framework/src/org/apache/tapestry/form/LinkSubmit.java",
                "status": "modified",
                "additions": 7,
                "deletions": 0,
                "changes": 7,
                "blob_url": "https://github.com/apache/tapestry4/blob/83c0e2643427a253787b99b088b8b39793fa4db7/framework/src/org/apache/tapestry/form/LinkSubmit.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/83c0e2643427a253787b99b088b8b39793fa4db7/framework/src/org/apache/tapestry/form/LinkSubmit.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/form/LinkSubmit.java?ref=83c0e2643427a253787b99b088b8b39793fa4db7",
                "patch": "@@ -81,6 +81,13 @@ protected void renderComponent(IMarkupWriter writer, IRequestCycle cycle)\n             {\n                 Body body = Body.get(cycle);\n \n+\t\t\t\tif (body == null)\n+\t\t\t\t    throw new ApplicationRuntimeException(\n+\t\t\t\t        Tapestry.format(\"must-be-contained-by-body\", \"LinkSubmit\"),\n+\t\t\t\t        this,\n+\t\t\t\t        null,\n+\t\t\t\t        null);\n+\t\t\t\t        \t\t\t\t\n                 // make sure the submit function is on the page (once)\n                 if (cycle.getAttribute(ATTRIBUTE_FUNCTION_NAME) == null)\n                 {"
            },
            {
                "sha": "282c50be3b0e936ce614192b914a7a2e2bc73290",
                "filename": "status.xml",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/tapestry4/blob/83c0e2643427a253787b99b088b8b39793fa4db7/status.xml",
                "raw_url": "https://github.com/apache/tapestry4/raw/83c0e2643427a253787b99b088b8b39793fa4db7/status.xml",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/status.xml?ref=83c0e2643427a253787b99b088b8b39793fa4db7",
                "patch": "@@ -240,6 +240,9 @@ NextGen) be released as version number 3.0.\n   <action type=\"fix\" dev=\"HLS\" fixes-bug=\"28010\">\n      ExpressionBinding optimizes expressions incorrectly  \t\n   </action>\n+  <action type=\"fix\" dev=\"DS\" fixes-bug=\"28177\" due-to=\"sito@htf.highway.ne.jp\">\n+     NPE in org.apache.tapestry.form.LinkSubmit.\n+  </action>\n \n  </release>\n   "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/3d22aaa2e573ffe36a5522b22eb15320376c4c12",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/81cb012aa3758af4d7125dcd9a7e838ae2d3afc4",
        "message": "[27954] NPE as follow-up to a ClassNotFoundException caused by a wrongly stuffed OGNL context\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243860 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_18",
        "file": [
            {
                "sha": "1aaab8710d7d712ac912f8d8e86ca53458a546a7",
                "filename": "status.xml",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "blob_url": "https://github.com/apache/tapestry4/blob/3d22aaa2e573ffe36a5522b22eb15320376c4c12/status.xml",
                "raw_url": "https://github.com/apache/tapestry4/raw/3d22aaa2e573ffe36a5522b22eb15320376c4c12/status.xml",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/status.xml?ref=3d22aaa2e573ffe36a5522b22eb15320376c4c12",
                "patch": "@@ -209,9 +209,13 @@ NextGen) be released as version number 3.0.\n <!-- Use due-to to give acknowledgement for patches. -->\n   \n  <release version=\"3.0-rc-2\" date=\"unreleased\">\n- \t<action type=\"fix\" dev=\"HLS\" fixed-bug=\"28057\">\n+ \t<action type=\"fix\" dev=\"HLS\" fixes-bug=\"28057\">\n  \t\tFix problems in the binary distribution.\n  \t</action>\t\n+ \t<action type=\"fix\" dev=\"HLS\" fixes-bug=\"27954\">\n+ \t\tCreate proper OGNL context when checking for invariant OGNL expressions\n+ \t\t(when initializing component properties).\n+ \t</action>\n  </release>\n   \n  <release version=\"3.0-rc-1\" date=\"Mar 15 2004\">"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/81cb012aa3758af4d7125dcd9a7e838ae2d3afc4",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/b24d25a075abc1fcf7383e8767ae29e06177e727",
        "message": "[27954 ] NPE as follow-up to a ClassNotFoundException caused by a wrongly stuffed OGNL context\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243859 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_19",
        "file": [
            {
                "sha": "2d3d9ebec098fddcd4412d7a6e5a5d4bbd14544e",
                "filename": "framework/src/org/apache/tapestry/pageload/PropertyInitializer.java",
                "status": "modified",
                "additions": 13,
                "deletions": 9,
                "changes": 22,
                "blob_url": "https://github.com/apache/tapestry4/blob/81cb012aa3758af4d7125dcd9a7e838ae2d3afc4/framework/src/org/apache/tapestry/pageload/PropertyInitializer.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/81cb012aa3758af4d7125dcd9a7e838ae2d3afc4/framework/src/org/apache/tapestry/pageload/PropertyInitializer.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/pageload/PropertyInitializer.java?ref=81cb012aa3758af4d7125dcd9a7e838ae2d3afc4",
                "patch": "@@ -58,13 +58,14 @@ public PropertyInitializer(\n         _propertyName = propertyName;\n         _expression = expression;\n         _location = location;\n-        \n+\n         prepareInvariant();\n     }\n \n     public void prepareInvariant()\n     {\n         _invariant = false;\n+\n         try\n         {\n             // If no initial value expression is provided, then read the current\n@@ -76,12 +77,13 @@ public void prepareInvariant()\n                 _invariant = true;\n                 _value = OgnlUtils.get(_propertyName, _resolver, _component);\n             }\n-            else if (Ognl.isConstant(_expression))\n-            {\n-                // If the expression is a constant, evaluate it and remember the value \n-                _invariant = true;\n-                _value = OgnlUtils.get(_expression, _resolver, _component);\n-            }\n+            else\n+                if (Ognl.isConstant(_expression, Ognl.createDefaultContext(_component, _resolver)))\n+                {\n+                    // If the expression is a constant, evaluate it and remember the value \n+                    _invariant = true;\n+                    _value = OgnlUtils.get(_expression, _resolver, _component);\n+                }\n         }\n         catch (Exception ex)\n         {\n@@ -98,10 +100,12 @@ else if (Ognl.isConstant(_expression))\n \n     public void pageDetached(PageEvent event)\n     {\n-        try {\n+        try\n+        {\n             if (_invariant)\n                 OgnlUtils.set(_propertyName, _resolver, _component, _value);\n-            else {\n+            else\n+            {\n                 Object value = OgnlUtils.get(_expression, _resolver, _component);\n                 OgnlUtils.set(_propertyName, _resolver, _component, value);\n             }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/909723a2759dc41524d42e1563ddcad2655b1281",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/528d4e2cb9db38f43a61e07d213d15624dd943aa",
        "message": "Fixed Bug: 26599; NPE in toString() reported by Michael.Frericks@sparkassen-informatik.de\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243762 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_20",
        "file": [
            {
                "sha": "98b8eadd2a675caf78b833494411ce0c16efdc9a",
                "filename": "framework/src/org/apache/tapestry/valid/PatternValidator.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/tapestry4/blob/909723a2759dc41524d42e1563ddcad2655b1281/framework/src/org/apache/tapestry/valid/PatternValidator.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/909723a2759dc41524d42e1563ddcad2655b1281/framework/src/org/apache/tapestry/valid/PatternValidator.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/valid/PatternValidator.java?ref=909723a2759dc41524d42e1563ddcad2655b1281",
                "patch": "@@ -291,6 +291,6 @@ public String toString()\n             + \"; Script Path: \"\n             + _scriptPath\n             + \"; Pattern Delegate: \"\n-            + _patternDelegate.toString();\n+            + _patternDelegate;\n     }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/7ac9c0af04e7fe4166f7ae47e3ea3857a68056f7",
        "message": "Fix minor errors in AbstractEngine exception messages.\nEliminate NPE in Image component when binding value is null.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243291 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_21",
        "file": [
            {
                "sha": "1c9cb693a62642bcd00ca6c067e12c4d4303635f",
                "filename": "framework/src/org/apache/tapestry/IEngine.java",
                "status": "modified",
                "additions": 2,
                "deletions": 5,
                "changes": 7,
                "blob_url": "https://github.com/apache/tapestry4/blob/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/IEngine.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/IEngine.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/IEngine.java?ref=1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4",
                "patch": "@@ -242,11 +242,8 @@\n     /**\n      *  Method invoked from the {@link org.apache.tapestry.ApplicationServlet} \n      *  to perform processing of the\n-     *  request.  The return value for this method indicates whether the state of the engine\n-     *  could possibly change during processing; in most cases this is true.  In a few\n-     *  possible cases, this is false.  The ApplicationServlet sometimes performs extra\n-     *  work to ensure that the engine is properly replicated in a clustering environment; if\n-     *  this method returns false, it can skip that extra work.\n+     *  request.  In release 2.4, this has become more of a dirty flag, indicating\n+     *  if any state stored by the engine instance itself has changed.\n      *\n      *  @return true if the state of the engine was, or could have been, changed during\n      *  processing."
            },
            {
                "sha": "c61247e0be924de9e28dfde5c1a8e09cd817d7c1",
                "filename": "framework/src/org/apache/tapestry/TapestryStrings.properties",
                "status": "modified",
                "additions": 1,
                "deletions": 4,
                "changes": 5,
                "blob_url": "https://github.com/apache/tapestry4/blob/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/TapestryStrings.properties",
                "raw_url": "https://github.com/apache/tapestry4/raw/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/TapestryStrings.properties",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/TapestryStrings.properties?ref=1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4",
                "patch": "@@ -121,11 +121,10 @@ AbstractEngine.unknown-specification=<Unknown specification>\n AbstractEngine.unknown-service=Engine does not implement a service name {0}.\n AbstractEngine.unable-to-begin-request=Tapestry unable to begin processing request.\n AbstractEngine.unable-to-cleanup-page=Unable to cleanup page {0}.\n-AbstractEngine.visit-class-property-not-specified=Could not create visit object because property {0} was not configured.\n AbstractEngine.unable-to-instantiate-visit=Unable to instantiate visit object from class {0}.\n AbstractEngine.unable-to-instantiate-global=Unable to instantiate global object from class {0}.\n AbstractEngine.unable-to-redirect=Unable to redirect to {0}.\n-AbstractEngine.service-name-mismatch=Class {1} is registerred as service {0} but provides service {2} instead.\n+AbstractEngine.service-name-mismatch=Class {1} is registered as service {0} but provides service {2} instead.\n AbstractEngine.unable-to-instantiate-service=Unable to instantiate class {1} as service {0}.\n AbstractEngine.unable-to-find-dispatcher=Unable to find a request dispatcher for local resource ''{0}''.\n AbstractEngine.unable-to-forward=Unable to forward to local resource ''{0}''.\n@@ -318,8 +317,6 @@ PageRecorder.null-property-name=A change event for component {0} failed to speci\n \n RollbackException.message=Unable to set property {0} of component {1} to {2}.\n \n-DefaultValuePersister.no-value-copier-for-class=No value copier has been registerred for class {0}.\n-\n # net.sf.tapestry.resource\n \n ContextResourceLocation.unable-to-reference-context-path=Unable to reference context path ''{0}''."
            },
            {
                "sha": "91d7a16cca32dc63508e399e03e015ae6ddb25a3",
                "filename": "framework/src/org/apache/tapestry/engine/AbstractEngine.java",
                "status": "modified",
                "additions": 138,
                "deletions": 31,
                "changes": 169,
                "blob_url": "https://github.com/apache/tapestry4/blob/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/engine/AbstractEngine.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/engine/AbstractEngine.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/engine/AbstractEngine.java?ref=1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4",
                "patch": "@@ -75,6 +75,8 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.servlet.http.HttpSession;\n+import javax.servlet.http.HttpSessionBindingEvent;\n+import javax.servlet.http.HttpSessionBindingListener;\n \n import org.apache.tapestry.ApplicationRuntimeException;\n import org.apache.tapestry.ApplicationServlet;\n@@ -107,6 +109,7 @@\n import org.apache.tapestry.util.pool.Pool;\n import org.apache.tapestry.util.prop.OgnlUtils;\n import org.apache.bsf.BSFManager;\n+import org.apache.commons.lang.builder.ToStringBuilder;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n@@ -162,7 +165,8 @@\n  * \n  **/\n \n-public abstract class AbstractEngine implements IEngine, IEngineServiceView, Externalizable\n+public abstract class AbstractEngine\n+    implements IEngine, IEngineServiceView, Externalizable, HttpSessionBindingListener\n {\n     private static final Log LOG = LogFactory.getLog(AbstractEngine.class);\n \n@@ -312,7 +316,8 @@\n      *\n      **/\n \n-    protected static final String SPECIFICATION_SOURCE_NAME = \"org.apache.tapestry.SpecificationSource\";\n+    protected static final String SPECIFICATION_SOURCE_NAME =\n+        \"org.apache.tapestry.SpecificationSource\";\n \n     /**\n      *  Servlet context attribute name for the {@link IPageSource}\n@@ -431,6 +436,18 @@\n \n     private transient IComponentClassEnhancer _enhancer;\n \n+    /**\n+     *  Set to true when there is a (potential)\n+     *  change to the internal state of the engine, set\n+     *  to false when the engine is stored into the\n+     *  {@link HttpSession}.  \n+     * \n+     *  @since 2.4\n+     * \n+     **/\n+\n+    private transient boolean _dirty;\n+\n     /**\n      *  Sets the Exception page's exception property, then renders the Exception page.\n      *\n@@ -515,23 +532,16 @@ public void reportException(String reportTitle, Throwable ex)\n     /**\n      *  Extends the description of the class generated by {@link #toString()}.\n      *  If a subclass adds additional instance variables that should be described\n-     *  in the instance description, it may overide this method.  Subclasses\n-     *  should invoke this implementation first.  They should append a space\n-     *  before each value.\n+     *  in the instance description, it may overide this method. This implementation\n+     *  does nothing.\n      *\n      *  @see #toString()\n+     * \n      **/\n \n-    public void extendDescription(StringBuffer buffer)\n+    protected void extendDescription(ToStringBuilder builder)\n     {\n-        // In rare cases, toString() may be invoked before\n-        // the engine has a change to obtain the specification\n-        // from the servlet.\n \n-        if (_specification == null)\n-            buffer.append(Tapestry.getString(\"AbstractEngine.unknown-specification\"));\n-        else\n-            buffer.append(_specification.getName());\n     }\n \n     /**\n@@ -850,7 +860,16 @@ public boolean service(RequestContext context) throws ServletException, IOExcept\n \n                 monitor.serviceBegin(serviceName, context.getRequestURI());\n \n-                return service.service(this, cycle, output);\n+                // Invoke the service, which returns true if it may have changed\n+                // the state of the engine (most do return true).\n+\n+                boolean serviceResult = service.service(this, cycle, output);\n+\n+                // Return true only if the engine is actually dirty.  This cuts down\n+                // on the number of times the engine is stored into the\n+                // session unceccesarily.\n+\n+                return serviceResult && _dirty;\n             }\n             catch (PageRedirectException ex)\n             {\n@@ -930,7 +949,7 @@ public boolean service(RequestContext context) throws ServletException, IOExcept\n         // When in doubt, assume that the request did cause some change\n         // to the engine.\n \n-        return true;\n+        return _dirty;\n     }\n \n     /**\n@@ -1049,6 +1068,7 @@ public void setLocale(Locale value)\n         {\n             _locale = value;\n             _localeChanged = true;\n+            markDirty();\n         }\n     }\n \n@@ -1379,23 +1399,28 @@ public IResourceResolver getResourceResolver()\n      *  Invokes {@link #extendDescription(StringBuffer)}\n      *  to fill in details about the instance.\n      *\n-     *  @see #extendDescription(StringBuffer)\n+     *  @see #extendDescription(ToStringB)\n      *\n      **/\n \n     public String toString()\n     {\n-        StringBuffer buffer;\n+        ToStringBuilder builder = new ToStringBuilder(this);\n \n-        buffer = new StringBuffer(super.toString());\n+        builder.append(\n+            \"name\",\n+            _specification == null\n+                ? Tapestry.getString(\"AbstractEngine.unknown-specification\")\n+                : _specification.getName());\n \n-        buffer.append('[');\n+        builder.append(\"dirty\", _dirty);\n+        builder.append(\"locale\", _locale);\n+        builder.append(\"stateful\", _stateful);\n+        builder.append(\"visit\", _visit);\n \n-        extendDescription(buffer);\n+        extendDescription(builder);\n \n-        buffer.append(']');\n-\n-        return buffer.toString();\n+        return builder.toString();\n     }\n \n     /**\n@@ -1420,10 +1445,19 @@ public boolean isResetServiceEnabled()\n     /**\n      *  Gets the visit object, if it has been created already.\n      *\n+     *  <p>\n+     *  If the visit is non-null then\n+     *  the {@link #isDirty()} flag is set (because\n+     *  the engine can't tell what the caller will\n+     *  <i>do</i> with the visit).\n+     * \n      **/\n \n     public Object getVisit()\n     {\n+        if (_visit != null)\n+            markDirty();\n+\n         return _visit;\n     }\n \n@@ -1435,6 +1469,10 @@ public Object getVisit()\n      *  After creating the visit, but before returning,\n      *  the {@link HttpSession} will be created, and\n      *  {@link #setStateful()} will be invoked.\n+     * \n+     *  <p>\n+     *  Sets the {@link #isDirty()} flag, if the return value\n+     *  is not null.\n      *\n      *\n      **/\n@@ -1453,12 +1491,23 @@ public Object getVisit(IRequestCycle cycle)\n             setStateful();\n         }\n \n+        if (_visit != null)\n+            markDirty();\n+\n         return _visit;\n     }\n \n+    /**\n+     *  Updates the visit object and\n+     *  sets the {@link #isDirty() dirty flag}.\n+     * \n+     **/\n+\n     public void setVisit(Object value)\n     {\n         _visit = value;\n+\n+        markDirty();\n     }\n \n     public boolean getHasVisit()\n@@ -1483,11 +1532,6 @@ protected Object createVisit(IRequestCycle cycle)\n         Object result = null;\n \n         visitClassName = _propertySource.getPropertyValue(VISIT_CLASS_PROPERTY_NAME);\n-        if (visitClassName == null)\n-            throw new ApplicationRuntimeException(\n-                Tapestry.getString(\n-                    \"AbstractEngine.visit-class-property-not-specified\",\n-                    VISIT_CLASS_PROPERTY_NAME));\n \n         if (LOG.isDebugEnabled())\n             LOG.debug(\"Creating visit object as instance of \" + visitClassName);\n@@ -1744,7 +1788,7 @@ private Map createServiceMap()\n                         Tapestry.getString(\n                             \"AbstractEngine.service-name-mismatch\",\n                             name,\n-                            serviceClass,\n+                            className,\n                             serviceName));\n \n                 // Replace the class name with an instance\n@@ -1914,7 +1958,8 @@ public IPropertySource getPropertySource()\n      * \n      **/\n \n-    private static final String EXTENSION_PROPERTY_SOURCE_NAME = \"org.apache.tapestry.property-source\";\n+    private static final String EXTENSION_PROPERTY_SOURCE_NAME =\n+        \"org.apache.tapestry.property-source\";\n \n     /**\n      *  The name of an application extension that implements {@link IMonitor}.\n@@ -1972,7 +2017,8 @@ protected IPropertySource createPropertySource(RequestContext context)\n \n         // Lastly, add a final source to handle \"factory defaults\".\n \n-        ResourceBundle bundle = ResourceBundle.getBundle(\"org.apache.tapestry.ConfigurationDefaults\");\n+        ResourceBundle bundle =\n+            ResourceBundle.getBundle(\"org.apache.tapestry.ConfigurationDefaults\");\n \n         result.addSource(new ResourceBundlePropertySource(bundle));\n \n@@ -2072,4 +2118,65 @@ public IComponentClassEnhancer getComponentClassEnhancer()\n         return _enhancer;\n     }\n \n+    /**\n+     *  Returns true if the engine has (potentially) changed\n+     *  state since the last time it was stored\n+     *  into the {@link javax.servlet.http.HttpSession}.  Various\n+     *  events set this property to true.\n+     * \n+     *  @since 2.4\n+     * \n+     **/\n+\n+    public boolean isDirty()\n+    {\n+        return _dirty;\n+    }\n+\n+    /**\n+     *  Invoked to set the dirty flag, indicating that the\n+     *  engine should be stored into the \n+     *  {@link javax.servlet.http.HttpSession}.\n+     * \n+     * \n+     *  @since 2.4\n+     * \n+     **/\n+\n+    protected void markDirty()\n+    {\n+        if (!_dirty)\n+            LOG.debug(\"Setting dirty flag.\");\n+\n+        _dirty = true;\n+    }\n+\n+    /** \n+     * \n+     *  Clears the dirty flag when a engine is stored into the \n+     *  {@link HttpSession}.\n+     * \n+     * \n+     *  @since 2.4 \n+     * \n+     **/\n+\n+    public void valueBound(HttpSessionBindingEvent arg0)\n+    {\n+        LOG.debug(_dirty ? \"Clearing dirty flag.\" : \"Dirty flag already cleared.\");\n+\n+        _dirty = false;\n+    }\n+\n+    /**\n+     *  Does nothing.\n+     * \n+     *  @since 2.4\n+     * \n+     **/\n+\n+    public void valueUnbound(HttpSessionBindingEvent arg0)\n+    {\n+    }\n+\n }\n\\ No newline at end of file"
            },
            {
                "sha": "5ee61c81845cc39d5230d3469eec372173ec6944",
                "filename": "framework/src/org/apache/tapestry/engine/BaseEngine.java",
                "status": "modified",
                "additions": 17,
                "deletions": 0,
                "changes": 17,
                "blob_url": "https://github.com/apache/tapestry4/blob/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/engine/BaseEngine.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/engine/BaseEngine.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/engine/BaseEngine.java?ref=1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4",
                "patch": "@@ -65,6 +65,7 @@\n import java.util.Map;\n import java.util.*;\n \n+import org.apache.commons.lang.builder.ToStringBuilder;\n import org.apache.tapestry.ApplicationRuntimeException;\n import org.apache.tapestry.IRequestCycle;\n import org.apache.tapestry.Tapestry;\n@@ -104,6 +105,7 @@ protected void cleanupAfterRequest(IRequestCycle cycle)\n         if (Tapestry.isEmpty(_recorders))\n             return;\n \n+\t\tboolean markDirty = false;\n         Iterator i = _recorders.entrySet().iterator();\n \n         while (i.hasNext())\n@@ -119,8 +121,13 @@ protected void cleanupAfterRequest(IRequestCycle cycle)\n                 i.remove();\n \n                 _activePageNames.remove(pageName);\n+      \t\n+      \t\t\tmarkDirty = true;\n             }\n         }\n+        \n+        if (markDirty)\n+        \tmarkDirty();\n     }\n \n     public void forgetPage(String name)\n@@ -139,6 +146,8 @@ public void forgetPage(String name)\n         recorder.discard();\n         _recorders.remove(name);\n         _activePageNames.remove(name);\n+        \n+        markDirty();\n     }\n \n     /**\n@@ -190,6 +199,7 @@ public IPageRecorder createPageRecorder(String pageName, IRequestCycle cycle)\n \n         cycle.getRequestContext().createSession();\n         setStateful();\n+       \n \n         IPageRecorder result = new SessionPageRecorder();\n         result.initialize(pageName, cycle);\n@@ -200,6 +210,8 @@ public IPageRecorder createPageRecorder(String pageName, IRequestCycle cycle)\n             _activePageNames = new HashSet();\n \n         _activePageNames.add(pageName);\n+        \n+        markDirty();\n \n         return result;\n     }\n@@ -259,4 +271,9 @@ public void writeExternal(ObjectOutput out) throws IOException\n         }\n     }\n \n+    public void extendDescription(ToStringBuilder builder)\n+    {\n+\t\tbuilder.append(\"activePageNames\", _activePageNames);\n+    }\n+\n }\n\\ No newline at end of file"
            },
            {
                "sha": "a24d23c033d7d2fdf76f0689fb9d54724f0905c5",
                "filename": "framework/src/org/apache/tapestry/html/Image.java",
                "status": "modified",
                "additions": 8,
                "deletions": 2,
                "changes": 10,
                "blob_url": "https://github.com/apache/tapestry4/blob/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/html/Image.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/html/Image.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/html/Image.java?ref=1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4",
                "patch": "@@ -60,6 +60,7 @@\n import org.apache.tapestry.IMarkupWriter;\n import org.apache.tapestry.IRequestCycle;\n import org.apache.tapestry.RequestCycleException;\n+import org.apache.tapestry.RequiredParameterException;\n \n /**\n  *  Used to insert an image.  To create a rollover image, use the\n@@ -91,7 +92,12 @@ protected void renderComponent(IMarkupWriter writer, IRequestCycle cycle)\n         if (cycle.isRewinding())\n             return;\n \n-        String imageURL = getImage().buildURL(cycle);\n+        IAsset imageAsset = getImage();\n+\n+        if (imageAsset == null)\n+            throw new RequiredParameterException(this, \"image\", getBinding(\"image\"));\n+\n+        String imageURL = imageAsset.buildURL(cycle);\n \n         writer.beginEmpty(\"img\");\n \n@@ -106,6 +112,6 @@ protected void renderComponent(IMarkupWriter writer, IRequestCycle cycle)\n     }\n \n     public abstract IAsset getImage();\n-    \n+\n     public abstract int getBorder();\n }\n\\ No newline at end of file"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/1ab692d8e68386f40c9426a8d00a652e5e7ec39c",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/8ffab5ec3ef3fc38fb685c4a2399fe03c9de56d7",
        "message": "Fix a bug where NPE was thrown when HttpSession timed out.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243205 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_22",
        "file": [
            {
                "sha": "e67639d08f46a51d9f4189b6254fae378c111bae",
                "filename": "framework/src/net/sf/tapestry/engine/AbstractEngine.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/tapestry4/blob/1ab692d8e68386f40c9426a8d00a652e5e7ec39c/framework/src/net/sf/tapestry/engine/AbstractEngine.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/1ab692d8e68386f40c9426a8d00a652e5e7ec39c/framework/src/net/sf/tapestry/engine/AbstractEngine.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/engine/AbstractEngine.java?ref=1ab692d8e68386f40c9426a8d00a652e5e7ec39c",
                "patch": "@@ -1418,7 +1418,6 @@ protected void cleanupEngine()\n         if (activePageNames.isEmpty())\n             return;\n \n-        ISpecificationSource specSource = getSpecificationSource();\n         IPageSource source = getPageSource();\n \n         // A bit of a hack, used only when cleaning up the engine and any pages\n@@ -1439,7 +1438,7 @@ protected void cleanupEngine()\n             return;\n         }\n \n-        IRequestCycle fakeCycle = new RequestCycle(this, fakeContext, null);\n+        IRequestCycle fakeCycle = new RequestCycle(this, fakeContext, new NullMonitor());\n \n         Iterator i = activePageNames.iterator();\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/235e9c7e6f304ebd66338fbb92db278d943bcd36",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/fa1d223e7783eb1fd3e4500023ba3775b868c337",
        "message": "Changed the build to include debugging symbols with the frameworks.\n\n[ 532562 ] Submit.jwc contains error\n[ 532587 ] Submit throws NPE\n[ 532815 ] ValidationDelegate errors\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@242455 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_23",
        "file": [
            {
                "sha": "b487b24cf2ae83d6ba4df08dad4e524b104edbe9",
                "filename": "web/ex_new.html",
                "status": "modified",
                "additions": 8,
                "deletions": 0,
                "changes": 8,
                "blob_url": "https://github.com/apache/tapestry4/blob/235e9c7e6f304ebd66338fbb92db278d943bcd36/web/ex_new.html",
                "raw_url": "https://github.com/apache/tapestry4/raw/235e9c7e6f304ebd66338fbb92db278d943bcd36/web/ex_new.html",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/web/ex_new.html?ref=235e9c7e6f304ebd66338fbb92db278d943bcd36",
                "patch": "@@ -42,6 +42,14 @@\n \t<IMG height=44 src=\"images/ico_t.gif\" width=44 align=absMiddle border=0>&nbsp;\n \t  <IMG height=22 alt=\"\" src=\"images/hd_tapestry.gif\" width=100 align=absMiddle vspace=17 border=0> \n \t\n+<h3>Release 1.0.10</h3>\n+\n+Changed the build to include debugging symbols with the frameworks.\n+\n+[ 532562 ] Submit.jwc contains error\n+[ 532587 ] Submit throws NPE\n+[ 532815 ] ValidationDelegate errors\n+\n <h3>Release 1.0.9</h3>\n \n <p>The framework and contrib jar files are now named with the release number (i.e.,"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/tapestry4/commit/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba",
        "repo": "tapestry4",
        "parent": "https://github.com/apache/tapestry4/commit/618bae503b4c52bc550413051fd2e3fabf4ffb86",
        "message": "TAPESTRY-2570: Fixed NPE issue when trying to report an exception involving an instance that returns null for toString() + move around some variables definition to improve readability\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry4/trunk@833891 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "tapestry4_24",
        "file": [
            {
                "sha": "1ba34a976df9eade1c2abeb85d17c24cc549ca62",
                "filename": "tapestry-framework/src/java/org/apache/tapestry/util/exception/ExceptionAnalyzer.java",
                "status": "modified",
                "additions": 22,
                "deletions": 28,
                "changes": 50,
                "blob_url": "https://github.com/apache/tapestry4/blob/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba/tapestry-framework/src/java/org/apache/tapestry/util/exception/ExceptionAnalyzer.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba/tapestry-framework/src/java/org/apache/tapestry/util/exception/ExceptionAnalyzer.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/tapestry-framework/src/java/org/apache/tapestry/util/exception/ExceptionAnalyzer.java?ref=02b9cfe88da6501b9075f8ad2c89c97fed00b3ba",
                "patch": "@@ -101,30 +101,15 @@ public void setExhaustive(boolean value)\n     }\n \n     protected Throwable buildDescription(Throwable exception)\n-    {\n-        BeanInfo info;\n-        Class exceptionClass;\n-        ExceptionProperty property;\n-        PropertyDescriptor[] descriptors;\n-        PropertyDescriptor descriptor;\n-        Throwable next = null;\n-        int i;\n-        Object value;\n-        Method method;\n-        ExceptionProperty[] properties;\n-        ExceptionDescription description;\n-        String stringValue;\n-        String message;\n-        String[] stackTrace = null;\n-\n+    {   \n         propertyDescriptions.clear();\n-\n-        message = exception.getMessage();\n-        exceptionClass = exception.getClass();\n+        \n+        Class exceptionClass = exception.getClass();\n \n         // Get properties, ignoring those in Throwable and higher\n         // (including the 'message' property).\n \n+        BeanInfo info;\n         try\n         {\n             info = Introspector.getBeanInfo(exceptionClass, Throwable.class);\n@@ -134,13 +119,16 @@ protected Throwable buildDescription(Throwable exception)\n             return null;\n         }\n \n-        descriptors = info.getPropertyDescriptors();\n+        Object value;\n+        Throwable next = null;\n+        String message = exception.getMessage();\n+        PropertyDescriptor[] descriptors = info.getPropertyDescriptors();\n \n-        for (i = 0; i < descriptors.length; i++)\n+        for (int i = 0; i < descriptors.length; i++)\n         {\n-            descriptor = descriptors[i];\n+        \tPropertyDescriptor descriptor = descriptors[i];\n \n-            method = descriptor.getReadMethod();\n+            Method method = descriptor.getReadMethod();\n             if (method == null)\n                 continue;\n \n@@ -175,29 +163,35 @@ protected Throwable buildDescription(Throwable exception)\n                 continue;\n             }\n \n-            stringValue = value.toString().trim();\n+            String stringValue = value.toString();\n+            \n+            if (stringValue == null)\n+            \tcontinue;\n+            \n+            stringValue = stringValue.trim();            \n \n             if (stringValue.length() == 0)\n                 continue;\n \n-            property = new ExceptionProperty(descriptor.getDisplayName(), value);\n+            ExceptionProperty property = new ExceptionProperty(descriptor.getDisplayName(), value);\n \n             propertyDescriptions.add(property);\n         }\n \n         // If exhaustive, or in the deepest exception (where there's no next)\n         // the extract the stack trace.\n-\n+        String[] stackTrace = null;\n+        \n         if (next == null || exhaustive)\n             stackTrace = getStackTrace(exception);\n \n         // Would be nice to sort the properties here.\n \n-        properties = new ExceptionProperty[propertyDescriptions.size()];\n+        ExceptionProperty[] properties = new ExceptionProperty[propertyDescriptions.size()];\n \n         ExceptionProperty[] propArray = (ExceptionProperty[]) propertyDescriptions.toArray(properties);\n \n-        description = new ExceptionDescription(exceptionClass.getName(), message, propArray, stackTrace);\n+        ExceptionDescription description = new ExceptionDescription(exceptionClass.getName(), message, propArray, stackTrace);\n \n         exceptionDescriptions.add(description);\n "
            },
            {
                "sha": "ccc3595474418d1e7f801cc27e5010bf8340e20e",
                "filename": "tapestry-framework/src/test/org/apache/tapestry/util/exception/TestExceptionAnalyzer.java",
                "status": "added",
                "additions": 52,
                "deletions": 0,
                "changes": 52,
                "blob_url": "https://github.com/apache/tapestry4/blob/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba/tapestry-framework/src/test/org/apache/tapestry/util/exception/TestExceptionAnalyzer.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba/tapestry-framework/src/test/org/apache/tapestry/util/exception/TestExceptionAnalyzer.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/tapestry-framework/src/test/org/apache/tapestry/util/exception/TestExceptionAnalyzer.java?ref=02b9cfe88da6501b9075f8ad2c89c97fed00b3ba",
                "patch": "@@ -0,0 +1,52 @@\n+package org.apache.tapestry.util.exception;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+\n+import org.apache.hivemind.ApplicationRuntimeException;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+@Test\n+public class TestExceptionAnalyzer extends Assert {\n+\t\n+\tpublic void test_report_exception() {\n+\t\tApplicationRuntimeException ex = new ApplicationRuntimeException(\"TAPerrorSTRY\");\t\t\n+\t\t\n+\t\tByteArrayOutputStream stream = new ByteArrayOutputStream();\n+\t\t\n+\t\tnew ExceptionAnalyzer().reportException(ex, new PrintStream(stream));\n+\t\t\n+\t\tString output = stream.toString();\n+\t\t\t\n+\t\tassertTrue(output.contains(\"org.apache.hivemind.ApplicationRuntimeException\"));\n+\t\tassertTrue(output.contains(\"TAPerrorSTRY\"));\n+\t}\n+\t\n+\t// test for TAPESTRY-2570\n+\tpublic void test_with_null_tostring_exception() {\n+\t\tException dummyException = new Exception(\"TAPerrorSTRY\"){\n+\t\t\tpublic Object getDummy() {\n+\t\t\t\treturn new Object(){\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic String toString() {\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t};\n+\t\t\t}\n+\t\t};\n+\t\tApplicationRuntimeException ex = new ApplicationRuntimeException(dummyException);\n+\t\t\n+\t\tByteArrayOutputStream stream = new ByteArrayOutputStream();\n+\t\t\n+\t\tnew ExceptionAnalyzer().reportException(ex, new PrintStream(stream));\n+\t\t\n+\t\tString output = stream.toString();\n+\t\t\n+\t\tassertTrue(output.contains(\"org.apache.hivemind.ApplicationRuntimeException\"));\n+\t\tassertTrue(output.contains(\"TAPerrorSTRY\"));\n+\t\t\n+\t}\n+\t\n+\t\n+}"
            }
        ]
    }
]
