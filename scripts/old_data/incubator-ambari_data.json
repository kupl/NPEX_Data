[
    {
        "commit": "https://github.com/apache/incubator-ambari/commit/45a53ede17c6a1f451bbf0a795a5cac6dec04298",
        "repo": "incubator-ambari",
        "parent": "https://github.com/apache/incubator-ambari/commit/ceb2fc41299cf172b898a02a2581d55a1109ffe3",
        "message": "AMBARI-3119. NullPointerException thrown while retrieving ganglia properties. (swagle)",
        "bug_id": "incubator-ambari_1",
        "file": [
            {
                "sha": "6cc981ccba3381269f53a6d90fd942a9f6b93fe7",
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java",
                "status": "modified",
                "additions": 3,
                "deletions": 1,
                "changes": 4,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/45a53ede17c6a1f451bbf0a795a5cac6dec04298/ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/45a53ede17c6a1f451bbf0a795a5cac6dec04298/ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java?ref=45a53ede17c6a1f451bbf0a795a5cac6dec04298",
                "patch": "@@ -222,7 +222,9 @@ public StreamProvider getStreamProvider() {\n           Map<String, PropertyInfo> componentMetricMap =\n             getComponentMetrics().get(getComponentName(resource));\n \n-          if (!componentMetricMap.containsKey(id)) {\n+          // Not all components have metrics\n+          if (componentMetricMap != null &&\n+              !componentMetricMap.containsKey(id)) {\n             updateComponentMetricMap(componentMetricMap, id);\n           }\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-ambari/commit/9496abdd25f5c93afd9d866d4f1626d6c547d2c2",
        "repo": "incubator-ambari",
        "parent": "https://github.com/apache/incubator-ambari/commit/f8e59976d7ab96e1407b40795ebf2b6295169f71",
        "message": "AMBARI-3110. NullPointerException when trying to access a service that does not exist (dlysnichenko)",
        "bug_id": "incubator-ambari_2",
        "file": [
            {
                "sha": "d1de2a2fd37442953294c5b60139a9ff4ec75709",
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java",
                "status": "modified",
                "additions": 8,
                "deletions": 4,
                "changes": 12,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/9496abdd25f5c93afd9d866d4f1626d6c547d2c2/ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/9496abdd25f5c93afd9d866d4f1626d6c547d2c2/ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java?ref=9496abdd25f5c93afd9d866d4f1626d6c547d2c2",
                "patch": "@@ -275,8 +275,10 @@ public RepositoryInfo getRepository(String stackName,\n   public boolean isSupportedStack(String stackName, String version) throws AmbariException {\n     boolean exist = false;\n     try {\n-      getStackInfo(stackName, version);\n-      exist = true;\n+      StackInfo stackInfo = getStackInfo(stackName, version);\n+      if (stackInfo != null) {\n+        exist = true;\n+      }\n     } catch (ObjectNotFoundException e) {\n     }\n     return exist;\n@@ -290,8 +292,10 @@ public boolean isValidService(String stackName, String version,\n \n     boolean exist = false;\n     try {\n-      getServiceInfo(stackName, version, serviceName);\n-      exist = true;\n+      ServiceInfo info= getServiceInfo(stackName, version, serviceName);\n+      if (info != null) {\n+        exist = true;\n+      }\n     } catch (ObjectNotFoundException e) {\n     }\n     return exist;"
            },
            {
                "sha": "56d24d322c47f01df5f44eaae1b8bdcc8ae0f5d7",
                "filename": "ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/9496abdd25f5c93afd9d866d4f1626d6c547d2c2/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/9496abdd25f5c93afd9d866d4f1626d6c547d2c2/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java?ref=9496abdd25f5c93afd9d866d4f1626d6c547d2c2",
                "patch": "@@ -134,7 +134,7 @@ public void isValidService() throws AmbariException {\n         SERVICE_NAME_HDFS);\n     assertTrue(valid);\n \n-    boolean invalid = metaInfo.isValidService(STACK_NAME_HDP, NON_EXT_VALUE, NON_EXT_VALUE);\n+    boolean invalid = metaInfo.isValidService(STACK_NAME_HDP, STACK_VERSION_HDP, NON_EXT_VALUE);\n     assertFalse(invalid);\n   }\n "
            },
            {
                "sha": "7a63a85cd16c56c9ca0076b9049fe326f377f83f",
                "filename": "ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/9496abdd25f5c93afd9d866d4f1626d6c547d2c2/ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/9496abdd25f5c93afd9d866d4f1626d6c547d2c2/ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java?ref=9496abdd25f5c93afd9d866d4f1626d6c547d2c2",
                "patch": "@@ -606,7 +606,7 @@ public void testCreateServicesMultiple() throws AmbariException {\n     controller.createServices(set1);\n \n     try {\n-      valid1 = new ServiceRequest(\"foo\", \"bar\", null, null);\n+      valid1 = new ServiceRequest(\"foo\", \"PIG\", null, null);\n       valid2 = new ServiceRequest(\"foo\", \"MAPREDUCE\", null, null);\n       set1.add(valid1);\n       set1.add(valid2);"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-ambari/commit/978f4cd86a62f5b70b4af6bf9ab9e761928e2055",
        "repo": "incubator-ambari",
        "parent": "https://github.com/apache/incubator-ambari/commit/9ab6227eb342c8215baae9998feaded9ecbea922",
        "message": "AMBARI-2747 - NPE in GSInstaller provider",
        "bug_id": "incubator-ambari_3",
        "file": [
            {
                "sha": "948b7f59efee1cf05fb9f738e1e504e98f4f0913",
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java",
                "status": "modified",
                "additions": 19,
                "deletions": 0,
                "changes": 19,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/978f4cd86a62f5b70b4af6bf9ab9e761928e2055/ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/978f4cd86a62f5b70b4af6bf9ab9e761928e2055/ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java?ref=978f4cd86a62f5b70b4af6bf9ab9e761928e2055",
                "patch": "@@ -21,11 +21,18 @@\n import org.apache.ambari.server.controller.spi.Request;\n import org.apache.ambari.server.controller.spi.Resource;\n \n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n /**\n  * A NO-OP resource provider for a gsInstaller defined cluster.\n  */\n public class GSInstallerNoOpProvider extends GSInstallerResourceProvider{\n \n+  private final Map<Resource.Type, String> keyPropertyIds = new HashMap<Resource.Type, String>();\n+\n   // ----- GSInstallerResourceProvider ---------------------------------------\n \n   @Override\n@@ -37,5 +44,17 @@ public void updateProperties(Resource resource, Request request, Predicate predi\n \n   public GSInstallerNoOpProvider(Resource.Type type, ClusterDefinition clusterDefinition) {\n     super(type, clusterDefinition);\n+    keyPropertyIds.put(type, \"id\");\n+  }\n+\n+\n+  @Override\n+  public Map<Resource.Type, String> getKeyPropertyIds() {\n+    return keyPropertyIds;\n+  }\n+\n+  @Override\n+  public Set<String> checkPropertyIds(Set<String> propertyIds) {\n+    return Collections.emptySet();\n   }\n }"
            },
            {
                "sha": "539978ed345f9f443ac96cf075ea8bfc74758ffe",
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerResourceProvider.java",
                "status": "modified",
                "additions": 10,
                "deletions": 1,
                "changes": 11,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/978f4cd86a62f5b70b4af6bf9ab9e761928e2055/ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerResourceProvider.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/978f4cd86a62f5b70b4af6bf9ab9e761928e2055/ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerResourceProvider.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerResourceProvider.java?ref=978f4cd86a62f5b70b4af6bf9ab9e761928e2055",
                "patch": "@@ -140,8 +140,17 @@ protected ClusterDefinition getClusterDefinition() {\n     return clusterDefinition;\n   }\n \n+  /**\n+   * Get the resource provider type.\n+   *\n+   * @return the type\n+   */\n+  public Resource.Type getType() {\n+    return type;\n+  }\n+\n \n-  // ----- helper methods ----------------------------------------------------\n+// ----- helper methods ----------------------------------------------------\n \n   /**\n    * Get the set of property ids required to satisfy the given request."
            },
            {
                "sha": "f0e66cd8c5910160aa14f1cb074dddf8b884e332",
                "filename": "ambari-server/src/test/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProviderTest.java",
                "status": "added",
                "additions": 27,
                "deletions": 0,
                "changes": 27,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/978f4cd86a62f5b70b4af6bf9ab9e761928e2055/ambari-server/src/test/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProviderTest.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/978f4cd86a62f5b70b4af6bf9ab9e761928e2055/ambari-server/src/test/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProviderTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/test/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProviderTest.java?ref=978f4cd86a62f5b70b4af6bf9ab9e761928e2055",
                "patch": "@@ -0,0 +1,27 @@\n+package org.apache.ambari.server.controller.gsinstaller;\n+\n+import junit.framework.Assert;\n+import org.apache.ambari.server.controller.spi.Resource;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+\n+/**\n+ * GSInstallerNoOpProvider tests.\n+ */\n+public class GSInstallerNoOpProviderTest {\n+\n+  @Test\n+  public void testGetKeyPropertyIds() throws Exception {\n+    ClusterDefinition clusterDefinition = new ClusterDefinition(new TestGSInstallerStateProvider());\n+    GSInstallerNoOpProvider provider = new GSInstallerNoOpProvider(Resource.Type.Workflow, clusterDefinition);\n+    Assert.assertNotNull(provider.getKeyPropertyIds());\n+  }\n+\n+  @Test\n+  public void testCheckPropertyIds() throws Exception {\n+    ClusterDefinition clusterDefinition = new ClusterDefinition(new TestGSInstallerStateProvider());\n+    GSInstallerNoOpProvider provider = new GSInstallerNoOpProvider(Resource.Type.Workflow, clusterDefinition);\n+    Assert.assertTrue(provider.checkPropertyIds(Collections.singleton(\"id\")).isEmpty());\n+  }\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-ambari/commit/69a97d479ac972a65b34f7f9bae68578a1b25853",
        "repo": "incubator-ambari",
        "parent": "https://github.com/apache/incubator-ambari/commit/3f688723b716d5b3f52922ce913c6db05d559dae",
        "message": "AMBARI-3199. NPE during opening UI on cluster w/o Ganglia. (odiachenko)",
        "bug_id": "incubator-ambari_4",
        "file": [
            {
                "sha": "d7272dfb72a2c75452e21f6157d54b13247f17be",
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java",
                "status": "modified",
                "additions": 9,
                "deletions": 3,
                "changes": 12,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/69a97d479ac972a65b34f7f9bae68578a1b25853/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/69a97d479ac972a65b34f7f9bae68578a1b25853/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java?ref=69a97d479ac972a65b34f7f9bae68578a1b25853",
                "patch": "@@ -266,14 +266,16 @@ public boolean isGangliaCollectorHostLive(String clusterName) throws SystemExcep\n         public boolean evaluate(Object hostResponse) {\n           return ((HostResponse) hostResponse).getHostname().equals(gangliaCollectorHostName);\n         }\n-      });      \n+      });\n     } catch (AmbariException e) {\n       LOG.debug(\"Error checking of Ganglia server host live status: \", e);\n       return false;\n     }\n     \n-    LOG.debug(\"Host state: \" + gangliaCollectorHost.getHostState());\n-    \n+    //Cluster without Ganglia\n+    if (gangliaCollectorHost == null)\n+      return false;\n+\n     return !gangliaCollectorHost.getHostState().equals(HostState.HEARTBEAT_LOST.name());\n   }\n   \n@@ -303,6 +305,10 @@ public boolean evaluate(Object arg0) {\n       return false;\n     }\n     \n+    //Cluster without Ganglia\n+    if (gangliaCollectorHostComponent == null)\n+      return false;\n+    \n     return gangliaCollectorHostComponent.getLiveState().equals(State.STARTED.name());\n   }\n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-ambari/commit/ad26dc34f55a82319383831f5b9fd19a88fa111f",
        "repo": "incubator-ambari",
        "parent": "https://github.com/apache/incubator-ambari/commit/22ff085f16689cebf020a1374d1c46d973c6fc4d",
        "message": "AMBARI-2943. Oozie smoke tests fail on Ambari with NPE in Oozie Server. (mahadev)",
        "bug_id": "incubator-ambari_5",
        "file": [
            {
                "sha": "f27d20f110c8176a52ca09ecba582e1b35cbbaa6",
                "filename": "ambari-agent/src/main/puppet/modules/hdp-oozie/files/oozieSmoke2.sh",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/ad26dc34f55a82319383831f5b9fd19a88fa111f/ambari-agent/src/main/puppet/modules/hdp-oozie/files/oozieSmoke2.sh",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/ad26dc34f55a82319383831f5b9fd19a88fa111f/ambari-agent/src/main/puppet/modules/hdp-oozie/files/oozieSmoke2.sh",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-agent/src/main/puppet/modules/hdp-oozie/files/oozieSmoke2.sh?ref=ad26dc34f55a82319383831f5b9fd19a88fa111f",
                "patch": "@@ -74,6 +74,7 @@ sed -i \"s|nameNode=hdfs://localhost:8020|nameNode=$NAMENODE|g\"  examples/apps/ma\n sed -i \"s|nameNode=hdfs://localhost:9000|nameNode=$NAMENODE|g\"  examples/apps/map-reduce/job.properties\n sed -i \"s|jobTracker=localhost:8021|jobTracker=$JOBTRACKER|g\" examples/apps/map-reduce/job.properties\n sed -i \"s|jobTracker=localhost:9001|jobTracker=$JOBTRACKER|g\" examples/apps/map-reduce/job.properties\n+sed -i \"s|jobTracker=localhost:8032|jobTracker=$JOBTRACKER|g\" examples/apps/map-reduce/job.properties\n sed -i \"s|oozie.wf.application.path=hdfs://localhost:9000|oozie.wf.application.path=$NAMENODE|g\" examples/apps/map-reduce/job.properties\n \n if [[ $security_enabled == \"true\" ]]; then"
            },
            {
                "sha": "94fe814db41e20a65677af92fedd432657e259d9",
                "filename": "ambari-server/src/main/resources/stacks/HDP/2.0.5/services/OOZIE/configuration/oozie-site.xml",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/ad26dc34f55a82319383831f5b9fd19a88fa111f/ambari-server/src/main/resources/stacks/HDP/2.0.5/services/OOZIE/configuration/oozie-site.xml",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/ad26dc34f55a82319383831f5b9fd19a88fa111f/ambari-server/src/main/resources/stacks/HDP/2.0.5/services/OOZIE/configuration/oozie-site.xml",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/resources/stacks/HDP/2.0.5/services/OOZIE/configuration/oozie-site.xml?ref=ad26dc34f55a82319383831f5b9fd19a88fa111f",
                "patch": "@@ -31,7 +31,7 @@\n \n   <property>\n     <name>oozie.system.id</name>\n-    <value>oozie-${mapreduce.job.user.name}</value>\n+    <value>oozie-${user.name}</value>\n     <description>\n     The Oozie system ID.\n     </description>\n@@ -133,7 +133,7 @@\n \n     <property>\n       <name>oozie.service.WorkflowAppService.system.libpath</name>\n-      <value>/user/${mapreduce.job.user.name}/share/lib</value>\n+      <value>/user/${user.name}/share/lib</value>\n       <description>\n       System library path to use for workflow applications.\n       This path is added to workflow application if their job properties sets"
            },
            {
                "sha": "94fe814db41e20a65677af92fedd432657e259d9",
                "filename": "ambari-server/src/main/resources/stacks/HDPLocal/2.0.5/services/OOZIE/configuration/oozie-site.xml",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/ad26dc34f55a82319383831f5b9fd19a88fa111f/ambari-server/src/main/resources/stacks/HDPLocal/2.0.5/services/OOZIE/configuration/oozie-site.xml",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/ad26dc34f55a82319383831f5b9fd19a88fa111f/ambari-server/src/main/resources/stacks/HDPLocal/2.0.5/services/OOZIE/configuration/oozie-site.xml",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/resources/stacks/HDPLocal/2.0.5/services/OOZIE/configuration/oozie-site.xml?ref=ad26dc34f55a82319383831f5b9fd19a88fa111f",
                "patch": "@@ -31,7 +31,7 @@\n \n   <property>\n     <name>oozie.system.id</name>\n-    <value>oozie-${mapreduce.job.user.name}</value>\n+    <value>oozie-${user.name}</value>\n     <description>\n     The Oozie system ID.\n     </description>\n@@ -133,7 +133,7 @@\n \n     <property>\n       <name>oozie.service.WorkflowAppService.system.libpath</name>\n-      <value>/user/${mapreduce.job.user.name}/share/lib</value>\n+      <value>/user/${user.name}/share/lib</value>\n       <description>\n       System library path to use for workflow applications.\n       This path is added to workflow application if their job properties sets"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-ambari/commit/af3cb35229d53803231e395df0df989a0cb9ebb9",
        "repo": "incubator-ambari",
        "parent": "https://github.com/apache/incubator-ambari/commit/3c41f89722616a2c79f55ecfa7dac9f855f0bfaa",
        "message": "AMBARI-100. Fixes couple of NPE bugs during heartbeat processing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/ambari/trunk@1195038 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "incubator-ambari_6",
        "file": [
            {
                "sha": "eb19876996d1c3c78d7222c521d382052648f969",
                "filename": "client/src/main/java/org/apache/ambari/event/AsyncDispatcher.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/af3cb35229d53803231e395df0df989a0cb9ebb9/client/src/main/java/org/apache/ambari/event/AsyncDispatcher.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/af3cb35229d53803231e395df0df989a0cb9ebb9/client/src/main/java/org/apache/ambari/event/AsyncDispatcher.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/client/src/main/java/org/apache/ambari/event/AsyncDispatcher.java?ref=af3cb35229d53803231e395df0df989a0cb9ebb9",
                "patch": "@@ -76,6 +76,7 @@ public void run() {\n     };\n   }\n \n+  @Override\n   public void start() {\n     eventHandlingThread = new Thread(createThread());\n     eventHandlingThread.start();"
            },
            {
                "sha": "5bb4cf07b1ef035dd5506096b1068269f00c2f47",
                "filename": "client/src/main/java/org/apache/ambari/event/Dispatcher.java",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/af3cb35229d53803231e395df0df989a0cb9ebb9/client/src/main/java/org/apache/ambari/event/Dispatcher.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/af3cb35229d53803231e395df0df989a0cb9ebb9/client/src/main/java/org/apache/ambari/event/Dispatcher.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/client/src/main/java/org/apache/ambari/event/Dispatcher.java?ref=af3cb35229d53803231e395df0df989a0cb9ebb9",
                "patch": "@@ -28,5 +28,7 @@\n   EventHandler getEventHandler();\n \n   void register(Class<? extends Enum> eventType, EventHandler handler);\n+  \n+  void start();\n \n }"
            },
            {
                "sha": "e3592a8c78cc3fbad2f928348e299e2748294d17",
                "filename": "controller/src/main/java/org/apache/ambari/components/impl/XmlComponentDefinition.java",
                "status": "modified",
                "additions": 2,
                "deletions": 2,
                "changes": 4,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/components/impl/XmlComponentDefinition.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/components/impl/XmlComponentDefinition.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/controller/src/main/java/org/apache/ambari/components/impl/XmlComponentDefinition.java?ref=af3cb35229d53803231e395df0df989a0cb9ebb9",
                "patch": "@@ -89,7 +89,7 @@\n   @XmlAccessorType(XmlAccessType.FIELD)\n   @XmlType(name = \"prestart\")\n   public static class Prestart extends ScriptCommand {\n-    @XmlAttribute String runPrestartOn;\n+    @XmlAttribute String runOn;\n   }\n   \n   @XmlAccessorType(XmlAccessType.FIELD)\n@@ -284,7 +284,7 @@ private static String getUser(ScriptCommand cmd, String user) {\n         checkRole = null;\n       }\n       if (component.prestart != null) {\n-        prestartRole = component.prestart.runPrestartOn;\n+        prestartRole = component.prestart.runOn;\n       } else {\n         prestartRole = null;\n       }"
            },
            {
                "sha": "c70b45a0e03daa637fd918be5f0855c5389bfc1c",
                "filename": "controller/src/main/java/org/apache/ambari/controller/HeartbeatHandler.java",
                "status": "modified",
                "additions": 118,
                "deletions": 81,
                "changes": 199,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/controller/HeartbeatHandler.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/controller/HeartbeatHandler.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/controller/src/main/java/org/apache/ambari/controller/HeartbeatHandler.java?ref=af3cb35229d53803231e395df0df989a0cb9ebb9",
                "patch": "@@ -20,6 +20,7 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n@@ -77,43 +78,49 @@ public ControllerResponse processHeartBeat(HeartBeat heartbeat)\n     Nodes.getInstance().checkAndUpdateNode(hostname, heartbeatTime);\n \n     List<Action> allActions = new ArrayList<Action>();\n-\n-    clusterName = Nodes.getInstance().getNode(hostname)\n-        .getNodeState().getClusterName();\n-    if (clusterName != null) {\n-      clusterRev = Clusters.getInstance().\n-          getClusterByName(clusterName).getLatestRevision(); \n-    }\n-    \n-    ComponentAndRoleStates componentStates = \n-        new ComponentAndRoleStates();\n-    //create some datastructures by looking at agent state\n-    inspectAgentState(heartbeat, componentStates);\n     \n-    //get the clusters the node belongs to\n-    Set<ClusterIdAndRev> clustersNodeBelongsTo = \n-        componentStates.getClustersNodeBelongsTo();\n     \n     //if the command-execution takes longer than one heartbeat interval\n     //the check for idleness will prevent the same node getting the same \n     //command more than once. In the future this could be improved\n     //to reflect the command execution state more accurately.\n-    if (heartbeat.getIdle()) {  \n-      for (ClusterIdAndRev clusterIdAndRev : clustersNodeBelongsTo) {\n+    if (heartbeat.getIdle()) {\n+      clusterName = Nodes.getInstance().getNode(hostname)\n+          .getNodeState().getClusterName();\n+      if (clusterName != null) {\n+        clusterRev = Clusters.getInstance().\n+            getClusterByName(clusterName).getLatestRevision(); \n+      }\n+      \n+      ComponentAndRoleStates componentStates = \n+          new ComponentAndRoleStates();\n+      //create some datastructures by looking at agent state\n+      inspectAgentState(heartbeat, componentStates);\n+      \n+      //get the clusters the node belongs to\n+      Set<ClusterNameAndRev> clustersNodeBelongsTo = \n+          componentStates.getClustersNodeBelongsTo();\n+      boolean newNode = false;\n+      //add the clusters the node *should* belong to\n+      if (clusterName != null) {\n+        newNode = checkAndAddClusterIds(clustersNodeBelongsTo, clusterName, \n+            clusterRev);\n+      }\n+      for (ClusterNameAndRev clusterIdAndRev : clustersNodeBelongsTo) {\n         //check whether this node is out-of-sync w.r.t what's running &\n         //installed, or is it compatible\n-        if (!isCompatible(clusterIdAndRev.getClusterId(), \n+        if (!isCompatible(clusterIdAndRev.getClusterName(), \n             clusterIdAndRev.getRevision(), clusterName, clusterRev)) {\n           createStopAndUninstallActions(componentStates, allActions, \n               clusterIdAndRev, true);\n           continue;\n         }\n         //get the cluster object corresponding to the clusterId\n         Cluster cluster = Clusters.getInstance()\n-            .getClusterByName(clusterIdAndRev.getClusterId());\n+            .getClusterByName(clusterIdAndRev.getClusterName());\n         //get the state machine reference to the cluster\n         ClusterFSM clusterFsm = StateMachineInvoker\n-            .getStateMachineClusterInstance(clusterIdAndRev.getClusterId());\n+            .getStateMachineClusterInstance(clusterIdAndRev.getClusterName());\n \n         //the state machine references to the services\n         List<ServiceFSM> clusterServices = clusterFsm.getServices();\n@@ -127,20 +134,25 @@ public ControllerResponse processHeartBeat(HeartBeat heartbeat)\n             boolean nodePlayingRole = \n                 nodePlayingRole(hostname, role.getRoleName());\n             if (nodePlayingRole) {\n-              boolean roleInstalled = componentStates.isInstalled(\n-                  clusterIdAndRev,\n-                  role.getAssociatedService().getServiceName(), \n-                  role.getRoleName());     \n-              boolean roleServerRunning = componentStates.isStarted(\n-                  clusterIdAndRev,\n-                  role.getAssociatedService().getServiceName(),\n-                  role.getRoleName()) \n-                  || componentStates.isStartInProgress(clusterIdAndRev,\n-                      role.getAssociatedService().getServiceName(), \n-                      role.getRoleName());\n-              boolean agentRoleStateChanged = componentStates.hasStateChanged(\n-                  clusterIdAndRev, role.getAssociatedService().getServiceName(), \n-                  role.getRoleName());\n+              boolean roleInstalled = false;\n+              boolean roleServerRunning = false;\n+              boolean agentRoleStateChanged = false;\n+              if (!newNode) {\n+                componentStates.isInstalled(\n+                    clusterIdAndRev,\n+                    role.getAssociatedService().getServiceName(), \n+                    role.getRoleName());     \n+                roleServerRunning = componentStates.isStarted(\n+                    clusterIdAndRev,\n+                    role.getAssociatedService().getServiceName(),\n+                    role.getRoleName()) \n+                    || componentStates.isStartInProgress(clusterIdAndRev,\n+                        role.getAssociatedService().getServiceName(), \n+                        role.getRoleName());\n+                agentRoleStateChanged = componentStates.hasStateChanged(\n+                    clusterIdAndRev, role.getAssociatedService().getServiceName(), \n+                    role.getRoleName());\n+              }\n               ComponentPlugin plugin = \n                   cluster.getComponentDefinition(service.getServiceName());\n               \n@@ -194,8 +206,8 @@ public ControllerResponse processHeartBeat(HeartBeat heartbeat)\n             }\n             //check/create the special component/service-level \n             //actions (like safemode check)\n-            checkAndCreateActions(cluster, clusterFsm,clusterIdAndRev, service, heartbeat, \n-                allActions, componentStates);\n+            checkAndCreateActions(cluster, clusterFsm,clusterIdAndRev, newNode,\n+                service, heartbeat, allActions, componentStates);\n           }\n         }\n         createStopAndUninstallActions(componentStates, allActions, clusterIdAndRev, false);\n@@ -208,11 +220,22 @@ public ControllerResponse processHeartBeat(HeartBeat heartbeat)\n     return r;\n   }\n   \n-  private void createInstallAction(ClusterIdAndRev clusterIdAndRev, \n+  private boolean checkAndAddClusterIds(Set<ClusterNameAndRev> clustersNodeBelongsTo, \n+      String clusterName, long clusterRev) {\n+    ClusterNameAndRev clusterNameAndRev = new ClusterNameAndRev(clusterName,\n+        clusterRev);\n+    if (!clustersNodeBelongsTo.contains(clusterNameAndRev)) {\n+      clustersNodeBelongsTo.add(clusterNameAndRev);\n+      return true;\n+    }\n+    return false;\n+  }\n+  \n+  private void createInstallAction(ClusterNameAndRev clusterIdAndRev, \n       String cluster, String component, String role, ComponentPlugin plugin, \n       List<Action> allActions) throws IOException {\n-    String clusterId = clusterIdAndRev.getClusterId();\n-    long clusterRev = clusterIdAndRev.getRevision();\n+    String clusterId = clusterIdAndRev.getClusterName();\n+    long clusterRev = clusterIdAndRev.getRevision();   \n     //action for creating dir structure\n     Action action = new Action();\n     action.setKind(Kind.CREATE_STRUCTURE_ACTION);\n@@ -232,7 +255,7 @@ private void createInstallAction(ClusterIdAndRev clusterIdAndRev,\n   }\n   \n   private void createStopAndUninstallActions(ComponentAndRoleStates componentAndRoleStates, \n-      List<Action> allActions, ClusterIdAndRev clusterIdAndRev, boolean forceUninstall) {\n+      List<Action> allActions, ClusterNameAndRev clusterIdAndRev, boolean forceUninstall) {\n     Map<String, \n         Map<String,RoleStateTracker>>\n     entrySet = componentAndRoleStates.getAllRoles(clusterIdAndRev);\n@@ -244,22 +267,22 @@ private void createStopAndUninstallActions(ComponentAndRoleStates componentAndRo\n       for (Map.Entry<String,RoleStateTracker> entryVal : roleSet) {\n         String roleName = entryVal.getKey();\n         if (forceUninstall) {\n-          addAction(getStopRoleAction(clusterIdAndRev.getClusterId(), \n+          addAction(getStopRoleAction(clusterIdAndRev.getClusterName(), \n               clusterIdAndRev.getRevision(), \n               componentName, roleName), allActions);\n-          addAction(getUninstallRoleAction(clusterIdAndRev.getClusterId(), \n+          addAction(getUninstallRoleAction(clusterIdAndRev.getClusterName(), \n               clusterIdAndRev.getRevision(), \n               componentName, roleName), allActions);\n         } else {\n           RoleStateTracker stateTracker = entryVal.getValue();\n           if (stateTracker.continueRunning) continue;\n \n-          addAction(getStopRoleAction(clusterIdAndRev.getClusterId(), \n+          addAction(getStopRoleAction(clusterIdAndRev.getClusterName(), \n               clusterIdAndRev.getRevision(), \n               componentName, roleName), allActions);\n \n           if (stateTracker.uninstall)\n-            addAction(getUninstallRoleAction(clusterIdAndRev.getClusterId(), \n+            addAction(getUninstallRoleAction(clusterIdAndRev.getClusterName(), \n                 clusterIdAndRev.getRevision(), \n                 componentName, roleName), allActions);\n         }\n@@ -268,8 +291,8 @@ private void createStopAndUninstallActions(ComponentAndRoleStates componentAndRo\n   }\n   private static class ComponentAndRoleStates {\n     //Convenience class to aid in heartbeat processing\n-    private Map<ClusterIdAndRev, Map<String, Map<String, RoleStateTracker>>>\n-    componentRoleMap = new HashMap<ClusterIdAndRev, \n+    private Map<ClusterNameAndRev, Map<String, Map<String, RoleStateTracker>>>\n+    componentRoleMap = new HashMap<ClusterNameAndRev, \n                            Map<String, Map<String, RoleStateTracker>>>();\n     \n     private Map<String, ActionResult> actionIds = \n@@ -278,17 +301,17 @@ private void createStopAndUninstallActions(ComponentAndRoleStates componentAndRo\n     private static Map<String, List<AgentRoleState>> previousStateMap =\n         new ConcurrentHashMap<String, List<AgentRoleState>>();\n     \n-    private Set<ClusterIdAndRev> clusterNodeBelongsTo = \n-        new TreeSet<ClusterIdAndRev>();\n+    private Set<ClusterNameAndRev> clusterNodeBelongsTo = \n+        new TreeSet<ClusterNameAndRev>();\n     \n     Map<String,Map<String,RoleStateTracker>> getAllRoles(\n-        ClusterIdAndRev clusterIdAndRev) {\n+        ClusterNameAndRev clusterIdAndRev) {\n       return componentRoleMap.get(clusterIdAndRev);\n     }\n     \n     void recordRoleState(String host, AgentRoleState state) {\n-      ClusterIdAndRev clusterIdAndRev = \n-          new ClusterIdAndRev(state.getClusterId(),\n+      ClusterNameAndRev clusterIdAndRev = \n+          new ClusterNameAndRev(state.getClusterId(),\n               state.getClusterDefinitionRevision());\n       clusterNodeBelongsTo.add(clusterIdAndRev);\n       \n@@ -319,7 +342,7 @@ void recordRoleState(String host, AgentRoleState state) {\n       }\n     }\n     \n-    boolean isRoleInstalled(ClusterIdAndRev clusterIdAndRev, String role) {\n+    boolean isRoleInstalled(ClusterNameAndRev clusterIdAndRev, String role) {\n       //problematic in the case where role is not unique (like 'client')\n       //TODO: no iteration please\n       Set<Map.Entry<String, Map<String, RoleStateTracker>>> entrySet = \n@@ -332,7 +355,7 @@ boolean isRoleInstalled(ClusterIdAndRev clusterIdAndRev, String role) {\n       return false;\n     }\n     \n-    boolean isStarted(ClusterIdAndRev clusterIdAndRev, String component, \n+    boolean isStarted(ClusterNameAndRev clusterIdAndRev, String component, \n         String role) {\n       Map<String,Map<String,RoleStateTracker>> componentsMap = \n           componentRoleMap.get(clusterIdAndRev);\n@@ -349,7 +372,7 @@ boolean isStarted(ClusterIdAndRev clusterIdAndRev, String component,\n       return false;\n     }\n     \n-    boolean isStartInProgress(ClusterIdAndRev clusterIdAndRev, \n+    boolean isStartInProgress(ClusterNameAndRev clusterIdAndRev, \n         String component, String role) {\n       Map<String,Map<String,RoleStateTracker>> componentsMap = \n           componentRoleMap.get(clusterIdAndRev);\n@@ -367,7 +390,7 @@ boolean isStartInProgress(ClusterIdAndRev clusterIdAndRev,\n       return false;\n     }\n     \n-    boolean isInstalled(ClusterIdAndRev clusterIdAndRev, \n+    boolean isInstalled(ClusterNameAndRev clusterIdAndRev, \n         String component, String role) {\n       Map<String,Map<String,RoleStateTracker>> componentsMap = \n           componentRoleMap.get(clusterIdAndRev);\n@@ -388,7 +411,7 @@ void recordActionId(String actionId, ActionResult actionResult) {\n     ActionResult getActionResult(String id) {\n       return actionIds.get(id);\n     }\n-    private void recordState(ClusterIdAndRev clusterIdAndRev, String component,\n+    private void recordState(ClusterNameAndRev clusterIdAndRev, String component,\n         String roleServer, AgentRoleState state) {\n       Map<String, Map<String, RoleStateTracker>> componentMap = null;\n       \n@@ -414,20 +437,20 @@ private void recordState(ClusterIdAndRev clusterIdAndRev, String component,\n               state.getClusterId(), state.getClusterDefinitionRevision()));\n       componentMap.put(component, roleMap);\n     }\n-    boolean hasStateChanged(ClusterIdAndRev clusterIdAndRev, String component,\n+    boolean hasStateChanged(ClusterNameAndRev clusterIdAndRev, String component,\n         String roleServer) {\n       return componentRoleMap.get(clusterIdAndRev).get(component)\n           .get(roleServer).stateChanged;\n     }\n-    Set<ClusterIdAndRev> getClustersNodeBelongsTo() {\n+    Set<ClusterNameAndRev> getClustersNodeBelongsTo() {\n       return clusterNodeBelongsTo;\n     }\n-    private void setStateChanged(ClusterIdAndRev clusterIdAndRev, \n+    private void setStateChanged(ClusterNameAndRev clusterIdAndRev, \n         String component, String roleServer) {\n       componentRoleMap.get(clusterIdAndRev).get(component)\n          .get(roleServer).stateChanged = true;\n     }\n-    private void continueRunning(ClusterIdAndRev clusterIdAndRev, \n+    private void continueRunning(ClusterNameAndRev clusterIdAndRev, \n         String component, String roleServer) {\n       componentRoleMap.get(clusterIdAndRev).get(component)\n          .get(roleServer).continueRunning = true;\n@@ -439,22 +462,26 @@ private void continueRunning(ClusterIdAndRev clusterIdAndRev,\n       SERVICE_AVAILABILITY_CHECK_ID, SERVICE_PRESTART_CHECK_ID\n   }  \n   \n-  private static class ClusterIdAndRev {\n-    String clusterId;\n+  private static class ClusterNameAndRev implements \n+  Comparable<ClusterNameAndRev> {\n+    String clusterName;\n     long revision;\n-    ClusterIdAndRev(String clusterId, long revision) {\n-      this.clusterId = clusterId;\n+    ClusterNameAndRev(String clusterName, long revision) {\n+      this.clusterName = clusterName;\n       this.revision = revision;\n     }\n-    String getClusterId() {\n-      return clusterId;\n+    String getClusterName() {\n+      return clusterName;\n     }\n     long getRevision() {\n       return revision;\n     }\n     @Override\n     public int hashCode() {\n-      return (clusterId + String.valueOf(revision)).hashCode();\n+      //note we only consider cluster names (one node can't have\n+      //more than one version of components of the same cluster name \n+      //installed)\n+      return clusterName.hashCode();\n     }\n     @Override\n     public boolean equals(Object obj) {\n@@ -465,8 +492,14 @@ public boolean equals(Object obj) {\n       if (obj == null || getClass() != obj.getClass()) {\n         return false;\n       }\n-      return this.clusterId.equals(((ClusterIdAndRev)obj).getClusterId()) &&\n-          this.clusterId.equals(((ClusterIdAndRev)obj).getRevision());\n+      //note we only compare cluster names (one node can't have\n+      //more than one version of components of the same cluster name \n+      //installed)\n+      return this.clusterName.equals(((ClusterNameAndRev)obj).getClusterName());\n+    }\n+    @Override\n+    public int compareTo(ClusterNameAndRev o) {\n+      return o.getClusterName().compareTo(getClusterName());\n     }\n   }\n \n@@ -498,10 +531,10 @@ private boolean isCompatible(String nodeClusterId, long nodeClusterRev,\n     }\n     return true;\n   }\n-  private static String getSpecialActionID(ClusterIdAndRev clusterIdAndRev, \n+  private static String getSpecialActionID(ClusterNameAndRev clusterIdAndRev, \n       ServiceFSM service, boolean availabilityChecker, \n       boolean prestartCheck) {\n-    String id = clusterIdAndRev.getClusterId() + clusterIdAndRev.getRevision() \n+    String id = clusterIdAndRev.getClusterName() + clusterIdAndRev.getRevision() \n         + service.getServiceName();\n     if (prestartCheck) {\n       id += SpecialServiceIDs.SERVICE_PRESTART_CHECK_ID.toString();\n@@ -549,10 +582,11 @@ private void checkActionResults(HeartBeat heartbeat,\n   }\n   \n   private void checkAndCreateActions(Cluster cluster,\n-      ClusterFSM clusterFsm, ClusterIdAndRev clusterIdAndRev, \n-      ServiceFSM service, HeartBeat heartbeat, List<Action> allActions, \n+      ClusterFSM clusterFsm, ClusterNameAndRev clusterIdAndRev, \n+      boolean newNode, ServiceFSM service, HeartBeat heartbeat, \n+      List<Action> allActions, \n       ComponentAndRoleStates installedOrStartedComponents) \n-          throws IOException {\n+          throws Exception {\n     //see whether the service is in the STARTED state, and if so,\n     //check whether there is any action-result that indicates success\n     //of the availability check (safemode, etc.)\n@@ -580,7 +614,7 @@ private void checkAndCreateActions(Cluster cluster,\n         if (installedOrStartedComponents.isRoleInstalled(clusterIdAndRev,\n             role)) {\n           Action action = plugin.checkService(cluster.getName(), role);\n-          fillActionDetails(action, clusterIdAndRev.getClusterId(),\n+          fillActionDetails(action, clusterIdAndRev.getClusterName(),\n               clusterIdAndRev.getRevision(),service.getServiceName(), role);\n           action.setId(id);\n           action.setKind(Action.Kind.RUN_ACTION);\n@@ -607,14 +641,17 @@ private void checkAndCreateActions(Cluster cluster,\n         ComponentPlugin plugin = \n             cluster.getComponentDefinition(service.getServiceName());\n         String role = plugin.runPreStartRole();\n-        if (!installedOrStartedComponents.isRoleInstalled(clusterIdAndRev,\n-            role)) {\n-          createInstallAction(clusterIdAndRev, cluster.getName(), \n-              service.getServiceName(), role, plugin,\n-              allActions);\n+        if (nodePlayingRole(heartbeat.getHostname(), role)) {\n+          if (newNode || \n+              !installedOrStartedComponents.isRoleInstalled(clusterIdAndRev,\n+              role)) {\n+            createInstallAction(clusterIdAndRev, cluster.getName(), \n+                service.getServiceName(), role, plugin,\n+                allActions);\n+          }\n         }\n         Action action = plugin.preStartAction(cluster.getName(), role);\n-        fillActionDetails(action, clusterIdAndRev.getClusterId(),\n+        fillActionDetails(action, clusterIdAndRev.getClusterName(),\n             clusterIdAndRev.getRevision(),service.getServiceName(), role);\n         action.setId(id);\n         action.setKind(Action.Kind.RUN_ACTION);"
            },
            {
                "sha": "483bf6a2053a52a32676953755f1bd2e08c3a852",
                "filename": "controller/src/main/java/org/apache/ambari/resource/statemachine/ClusterImpl.java",
                "status": "modified",
                "additions": 6,
                "deletions": 2,
                "changes": 8,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/resource/statemachine/ClusterImpl.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/resource/statemachine/ClusterImpl.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/controller/src/main/java/org/apache/ambari/resource/statemachine/ClusterImpl.java?ref=af3cb35229d53803231e395df0df989a0cb9ebb9",
                "patch": "@@ -49,7 +49,7 @@\n    *                                --START_FAILURE from any service--> FAIL\n    * ACTIVE --STOP--> STOPPING --STOP_SUCCESS from all services--> INACTIVE\n    *                             --STOP_FAILURE from any service--> UNCLEAN_STOP\n-   * FAIL --STOP--> STOPPING --STOP_SUCCESS--> INACTIVE\n+   * FAIL --STOP--> STOPPING --STOP_SUCCESS--> STOPPED\n    *                           --STOP_FAILURE--> UNCLEAN_STOP\n    * INACTIVE --RELEASE_NODES--> ATTIC\n    * ATTIC --ADD_NODES--> INACTIVE\n@@ -83,7 +83,10 @@\n   .addTransition(ClusterStateFSM.FAIL, ClusterStateFSM.STOPPING, \n       ClusterEventType.STOP)\n       \n-  .addTransition(ClusterStateFSM.STOPPING, ClusterStateFSM.INACTIVE, \n+  .addTransition(ClusterStateFSM.STOPPING, ClusterStateFSM.STOPPED, \n+      ClusterEventType.STOP_SUCCESS)\n+      \n+  .addTransition(ClusterStateFSM.STOPPED, ClusterStateFSM.STOPPED, \n       ClusterEventType.STOP_SUCCESS)\n       \n   .addTransition(ClusterStateFSM.STOPPING, ClusterStateFSM.UNCLEAN_STOP, \n@@ -120,6 +123,7 @@ public ClusterImpl(Cluster cluster, long revision,\n       serviceImpls.add(serviceImpl);\n     }\n     this.services = serviceImpls;\n+    this.clusterState = clusterState;\n   }\n   \n   public ClusterStateFSM getState() {"
            },
            {
                "sha": "8afa5e5afe86b2d7fa4a4b185741c00a0f0ae82f",
                "filename": "controller/src/main/java/org/apache/ambari/resource/statemachine/ClusterStateFSM.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/resource/statemachine/ClusterStateFSM.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/resource/statemachine/ClusterStateFSM.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/controller/src/main/java/org/apache/ambari/resource/statemachine/ClusterStateFSM.java?ref=af3cb35229d53803231e395df0df989a0cb9ebb9",
                "patch": "@@ -18,5 +18,5 @@\n package org.apache.ambari.resource.statemachine;\n \n public enum ClusterStateFSM {\n-  INACTIVE, STARTING, ACTIVE, FAIL, ATTIC, STOPPING, UNCLEAN_STOP\n+  INACTIVE, STARTING, ACTIVE, FAIL, ATTIC, STOPPING, UNCLEAN_STOP, STOPPED\n }\n\\ No newline at end of file"
            },
            {
                "sha": "010867fbc3ad742f1d642abe43b98b5175932d7d",
                "filename": "controller/src/main/java/org/apache/ambari/resource/statemachine/RoleImpl.java",
                "status": "modified",
                "additions": 7,
                "deletions": 4,
                "changes": 11,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/resource/statemachine/RoleImpl.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/resource/statemachine/RoleImpl.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/controller/src/main/java/org/apache/ambari/resource/statemachine/RoleImpl.java?ref=af3cb35229d53803231e395df0df989a0cb9ebb9",
                "patch": "@@ -40,7 +40,7 @@\n    *                                --S_START_FAILURE--> FAIL\n    * ACTIVE --S_STOP--> STOPPING --S_STOP_SUCCESS--> INACTIVE\n    *                             --S_STOP_FAILURE--> UNCLEAN_STOP\n-   * FAIL --S_STOP--> STOPPING --S_STOP_SUCCESS--> INACTIVE\n+   * FAIL --S_STOP--> STOPPING --S_STOP_SUCCESS--> STOPPED\n    *                           --S_STOP_FAILURE--> UNCLEAN_STOP\n    */\n   \n@@ -52,6 +52,9 @@\n          .addTransition(RoleState.INACTIVE, RoleState.STARTING, \n              RoleEventType.START)\n              \n+         .addTransition(RoleState.STOPPED, RoleState.STARTING, \n+             RoleEventType.START)\n+             \n          .addTransition(RoleState.STARTING, \n              EnumSet.of(RoleState.ACTIVE, RoleState.STARTING),\n              RoleEventType.START_SUCCESS, new SuccessfulStartTransition())\n@@ -77,10 +80,10 @@\n              \n          .addTransition(RoleState.FAIL, RoleState.STOPPING, RoleEventType.STOP)\n          \n-         .addTransition(RoleState.STOPPING, RoleState.INACTIVE, \n+         .addTransition(RoleState.STOPPING, RoleState.STOPPED, \n              RoleEventType.STOP_SUCCESS)\n              \n-         .addTransition(RoleState.INACTIVE, RoleState.INACTIVE,\n+         .addTransition(RoleState.STOPPED, RoleState.STOPPED,\n              RoleEventType.STOP_SUCCESS)\n              \n          .addTransition(RoleState.STOPPING, RoleState.UNCLEAN_STOP, \n@@ -199,7 +202,7 @@ public void deactivate() {\n \n   @Override\n   public boolean shouldStop() {\n-    return myState == RoleState.STOPPING || myState == RoleState.INACTIVE;\n+    return myState == RoleState.STOPPING || myState == RoleState.STOPPED;\n   }\n \n   @Override"
            },
            {
                "sha": "571aa19b0318cc4308b232e24f3c9eb1febb865f",
                "filename": "controller/src/main/java/org/apache/ambari/resource/statemachine/RoleState.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/resource/statemachine/RoleState.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/resource/statemachine/RoleState.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/controller/src/main/java/org/apache/ambari/resource/statemachine/RoleState.java?ref=af3cb35229d53803231e395df0df989a0cb9ebb9",
                "patch": "@@ -18,5 +18,5 @@\n package org.apache.ambari.resource.statemachine;\n \n public enum RoleState {\n-  INACTIVE, STARTING, ACTIVE, FAIL, STOPPING, UNCLEAN_STOP\n+  INACTIVE, STARTING, ACTIVE, FAIL, STOPPING, UNCLEAN_STOP, STOPPED\n }\n\\ No newline at end of file"
            },
            {
                "sha": "5a220e13228c22cae9168f91351a41829206c14c",
                "filename": "controller/src/main/java/org/apache/ambari/resource/statemachine/ServiceImpl.java",
                "status": "modified",
                "additions": 9,
                "deletions": 5,
                "changes": 14,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/resource/statemachine/ServiceImpl.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/resource/statemachine/ServiceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/controller/src/main/java/org/apache/ambari/resource/statemachine/ServiceImpl.java?ref=af3cb35229d53803231e395df0df989a0cb9ebb9",
                "patch": "@@ -33,7 +33,6 @@\n \n public class ServiceImpl implements ServiceFSM, EventHandler<ServiceEvent> {\n \n-  private ServiceState myState;\n   private ClusterFSM clusterFsm;\n   private ComponentPlugin plugin;\n   \n@@ -46,7 +45,7 @@\n    * STARTED --S_UNAVAILABLE--> FAIL\n    * ACTIVE --S_STOP--> STOPPING --S_STOP_SUCCESS--> INACTIVE\n    *                             --S_STOP_FAILURE--> UNCLEAN_STOP\n-   * FAIL --S_STOP--> STOPPING --S_STOP_SUCCESS--> INACTIVE\n+   * FAIL --S_STOP--> STOPPING --S_STOP_SUCCESS--> STOPPED\n    *                           --S_STOP_FAILURE--> UNCLEAN_STOP\n    */\n   \n@@ -59,6 +58,9 @@\n          .addTransition(ServiceState.INACTIVE, ServiceState.PRESTART, \n              ServiceEventType.START)\n              \n+         .addTransition(ServiceState.STOPPED, ServiceState.PRESTART, \n+             ServiceEventType.START)\n+             \n          .addTransition(ServiceState.PRESTART, ServiceState.FAIL, \n              ServiceEventType.PRESTART_FAILURE)  \n              \n@@ -100,7 +102,10 @@\n          .addTransition(ServiceState.FAIL, ServiceState.STOPPING, \n              ServiceEventType.STOP)\n              \n-         .addTransition(ServiceState.STOPPING, ServiceState.INACTIVE, \n+         .addTransition(ServiceState.STOPPING, ServiceState.STOPPED, \n+             ServiceEventType.STOP_SUCCESS)\n+             \n+         .addTransition(ServiceState.STOPPED, ServiceState.STOPPED, \n              ServiceEventType.STOP_SUCCESS)\n              \n          .addTransition(ServiceState.STOPPING, ServiceState.UNCLEAN_STOP,\n@@ -118,7 +123,6 @@ public ServiceImpl(Cluster cluster, ClusterFSM clusterFsm, String serviceName)\n       throws IOException {\n     this.clusterFsm = clusterFsm;\n     this.serviceName = serviceName;\n-    this.myState = ServiceState.INACTIVE;\n     //load plugin and get the roles and create them\n     this.plugin = cluster.getComponentDefinition(serviceName);\n     String[] roles = this.plugin.getActiveRoles();\n@@ -293,7 +297,7 @@ public void deactivate() {\n \n   @Override\n   public boolean isActive() {\n-    return myState == ServiceState.ACTIVE;\n+    return getServiceState() == ServiceState.ACTIVE;\n   }\n \n   @Override"
            },
            {
                "sha": "b605060cfaa408005d11dceeb78815f27db1f4b5",
                "filename": "controller/src/main/java/org/apache/ambari/resource/statemachine/ServiceState.java",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/resource/statemachine/ServiceState.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/resource/statemachine/ServiceState.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/controller/src/main/java/org/apache/ambari/resource/statemachine/ServiceState.java?ref=af3cb35229d53803231e395df0df989a0cb9ebb9",
                "patch": "@@ -18,5 +18,5 @@\n package org.apache.ambari.resource.statemachine;\n \n public enum ServiceState {\n-  INACTIVE, PRESTART, STARTING, STARTED, ACTIVE, FAIL, STOPPING, UNCLEAN_STOP\n+  INACTIVE, PRESTART, STARTING, STARTED, ACTIVE, FAIL, STOPPING, UNCLEAN_STOP, STOPPED\n }\n\\ No newline at end of file"
            },
            {
                "sha": "3d1358b4a17bd4ddebd90eb8bd13bcd741a7eecc",
                "filename": "controller/src/main/java/org/apache/ambari/resource/statemachine/StateMachineInvoker.java",
                "status": "modified",
                "additions": 1,
                "deletions": 2,
                "changes": 3,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/resource/statemachine/StateMachineInvoker.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/java/org/apache/ambari/resource/statemachine/StateMachineInvoker.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/controller/src/main/java/org/apache/ambari/resource/statemachine/StateMachineInvoker.java?ref=af3cb35229d53803231e395df0df989a0cb9ebb9",
                "patch": "@@ -21,10 +21,8 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n-import org.apache.ambari.common.rest.entities.ClusterDefinition;\n import org.apache.ambari.common.rest.entities.ClusterState;\n import org.apache.ambari.controller.Cluster;\n-import org.apache.ambari.controller.HeartbeatHandler;\n import org.apache.ambari.event.AsyncDispatcher;\n import org.apache.ambari.event.Dispatcher;\n import org.apache.ambari.event.EventHandler;\n@@ -40,6 +38,7 @@\n     dispatcher.register(ClusterEventType.class, new ClusterEventDispatcher());\n     dispatcher.register(ServiceEventType.class, new ServiceEventDispatcher());\n     dispatcher.register(RoleEventType.class, new RoleEventDispatcher());\n+    dispatcher.start();\n   }\n   private static Log LOG = LogFactory.getLog(StateMachineInvoker.class);\n   public Dispatcher getAMBARIDispatcher() {"
            },
            {
                "sha": "323f6279b95927fcfa8b1e2bca377018349e0615",
                "filename": "controller/src/main/resources/org/apache/ambari/acd/hadoop-hdfs-0.1.0.acd",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/resources/org/apache/ambari/acd/hadoop-hdfs-0.1.0.acd",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/af3cb35229d53803231e395df0df989a0cb9ebb9/controller/src/main/resources/org/apache/ambari/acd/hadoop-hdfs-0.1.0.acd",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/controller/src/main/resources/org/apache/ambari/acd/hadoop-hdfs-0.1.0.acd?ref=af3cb35229d53803231e395df0df989a0cb9ebb9",
                "patch": "@@ -28,11 +28,15 @@ import sys\n os.execl(\"stack/bin/hadoop\", \"stack/bin/hadoop\", role)\n ]]>\n   </start>\n-  <check run_on=\"namenode\" user=\"${hdfs.user}\">\n+  <check runOn=\"namenode\" user=\"${hdfs.user}\">\n <![CDATA[\n import os\n \n os.exec('stack/bin/hadoop', 'stack/bin/hadoop', 'dfsadmin', '-get')\n ]]>\n   </check>\n+\n+  <prestart runOn=\"namenode\" user=\"{hdfs.user}\">\n+<![CDATA[]]>\n+  </prestart>\n </component>"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-ambari/commit/d4a2b2b9eb0864dd26327c896547868f16a56f6e",
        "repo": "incubator-ambari",
        "parent": "https://github.com/apache/incubator-ambari/commit/2b671a163da30ae9693726c0d6e5ce1b9f880ae2",
        "message": "AMBARI-2526. NPE in the ambari log4j when the threads are shutting down. (smohanty)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/ambari/trunk@1498603 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "incubator-ambari_7",
        "file": [
            {
                "sha": "55934d42dc64997a244ff0b43a7efe7c99886eee",
                "filename": "contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java",
                "status": "modified",
                "additions": 4,
                "deletions": 2,
                "changes": 6,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/d4a2b2b9eb0864dd26327c896547868f16a56f6e/contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/d4a2b2b9eb0864dd26327c896547868f16a56f6e/contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java?ref=d4a2b2b9eb0864dd26327c896547868f16a56f6e",
                "patch": "@@ -96,10 +96,12 @@ public void persist(LoggingEvent originalEvent, Object parsedEvent)\n   @Override\n   public void close() throws IOException {\n     try {\n-      connection.close();\n+      if (this.initialized && this.connection != null) {\n+        connection.close();\n+      }\n     } catch (SQLException sqle) {\n       throw new IOException(\n-          \"Failed to close connectionto database \" + this.database, sqle);\n+          \"Failed to close connection to database \" + this.database, sqle);\n     }\n   }\n }"
            },
            {
                "sha": "bafe16c041f5377012e8d8083630f27c8f672faa",
                "filename": "contrib/ambari-log4j/src/test/java/org/apache/ambari/log4j/common/store/TestDatabaseStore.java",
                "status": "added",
                "additions": 42,
                "deletions": 0,
                "changes": 42,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/d4a2b2b9eb0864dd26327c896547868f16a56f6e/contrib/ambari-log4j/src/test/java/org/apache/ambari/log4j/common/store/TestDatabaseStore.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/d4a2b2b9eb0864dd26327c896547868f16a56f6e/contrib/ambari-log4j/src/test/java/org/apache/ambari/log4j/common/store/TestDatabaseStore.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/contrib/ambari-log4j/src/test/java/org/apache/ambari/log4j/common/store/TestDatabaseStore.java?ref=d4a2b2b9eb0864dd26327c896547868f16a56f6e",
                "patch": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ambari.log4j.common.store;\n+\n+import junit.framework.TestCase;\n+import org.apache.ambari.log4j.common.LogStoreUpdateProvider;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+\n+public class TestDatabaseStore extends TestCase {\n+\n+  class SampleLogStoreUpdateProvider implements LogStoreUpdateProvider {\n+    public void init(Connection connection) throws IOException {\n+    }\n+\n+    public void update(LoggingEvent originalEvent, Object parsedEvent)\n+        throws IOException {\n+    }\n+  }\n+\n+  public void testDatabaseStore() throws IOException {\n+    DatabaseStore store = new DatabaseStore(TestDatabaseStore.class.getName(), \"\", \"\", \"\",\n+        new SampleLogStoreUpdateProvider());\n+    store.close();\n+  }\n+}"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-ambari/commit/eb5f09c8b637835e7b836b5a08ba469df7078d16",
        "repo": "incubator-ambari",
        "parent": "https://github.com/apache/incubator-ambari/commit/28ebbafbc422be37d07fcf4b13fce96bab1797d4",
        "message": "AMBARI-2511. NPE in AmbariServer startup with HTTPS configured. (Dmitry Sen via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/ambari/trunk@1497482 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "incubator-ambari_8",
        "file": [
            {
                "sha": "dc65747a86fd5d19f1d3697cf94f7b9a4a7974b0",
                "filename": "ambari-server/src/main/python/ambari-server.py",
                "status": "modified",
                "additions": 25,
                "deletions": 7,
                "changes": 32,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/eb5f09c8b637835e7b836b5a08ba469df7078d16/ambari-server/src/main/python/ambari-server.py",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/eb5f09c8b637835e7b836b5a08ba469df7078d16/ambari-server/src/main/python/ambari-server.py",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/python/ambari-server.py?ref=eb5f09c8b637835e7b836b5a08ba469df7078d16",
                "patch": "@@ -39,6 +39,7 @@\n import datetime\n import socket\n import tempfile\n+import random\n \n # debug settings\n VERBOSE = False\n@@ -93,6 +94,7 @@\n \n # openssl command\n EXPRT_KSTR_CMD = \"openssl pkcs12 -export -in {0} -inkey {1} -certfile {0} -out {3} -password pass:{2} -passin pass:{2}\"\n+CHANGE_KEY_PWD_CND = 'openssl rsa -in {0} -des3 -out {0}.secured -passout pass:{1}'\n \n # constants\n STACK_NAME_VER_SEP = \"-\"\n@@ -161,6 +163,7 @@\n SSL_KEY_FILE_NAME = \"ca.key\"\n SSL_KEYSTORE_FILE_NAME = \"keystore.p12\"\n SSL_KEY_PASSWORD_FILE_NAME = \"pass.txt\"\n+SSL_KEY_PASSWORD_LENGTH = 50\n DEFAULT_SSL_API_PORT = 8443\n \n JDBC_RCA_PASSWORD_ALIAS = \"ambari.db.password\"\n@@ -2707,12 +2710,24 @@ def import_cert_and_key(security_server_keys_dir):\n   import_key_path  =  get_validated_filepath_input(\\\n                       \"Please enter path to Private Key: \", \"Private Key not found\")\n   pem_password = get_validated_string_input(\"Please enter password for private key: \", \"\", None, None, True)\n-  keystoreFilePath = os.path.join(security_server_keys_dir,\\\n-                                  SSL_KEYSTORE_FILE_NAME)\n-  passFilePath = os.path.join(security_server_keys_dir,\\\n-                              SSL_KEY_PASSWORD_FILE_NAME)\n-  retcode, out, err = run_os_command(EXPRT_KSTR_CMD.format(import_cert_path,\\\n-  import_key_path, pem_password, keystoreFilePath))\n+\n+  #jetty requires private key files with non-empty key passwords\n+  retcode = 0\n+  err = ''\n+  if not pem_password:\n+    #print message here\n+    pem_password = generate_random_string()\n+    retcode, out, err = run_os_command(CHANGE_KEY_PWD_CND.format(\n+      import_key_path, pem_password))\n+    import_key_path += '.secured'\n+\n+  if retcode == 0:\n+    keystoreFilePath = os.path.join(security_server_keys_dir,\\\n+                                    SSL_KEYSTORE_FILE_NAME)\n+    passFilePath = os.path.join(security_server_keys_dir,\\\n+                                SSL_KEY_PASSWORD_FILE_NAME)\n+    retcode, out, err = run_os_command(EXPRT_KSTR_CMD.format(import_cert_path,\\\n+    import_key_path, pem_password, keystoreFilePath))\n \n   if retcode == 0:\n    print 'Importing and saving certificate...done.'\n@@ -2734,7 +2749,10 @@ def import_cert_and_key(security_server_keys_dir):\n def import_file_to_keystore(source, destination):\n   shutil.copy(source, destination)\n   set_file_permissions(destination, \"660\", read_ambari_user(), \"root\", False)\n- \n+\n+def generate_random_string(length=SSL_KEY_PASSWORD_LENGTH):\n+  chars = string.digits + string.ascii_letters\n+  return ''.join(random.choice(chars) for x in range(length))\n  \n def get_validated_filepath_input(prompt, description, default=None):\n   input = False"
            },
            {
                "sha": "0aca4d3134d2adefc54f9c50a43cc0fcf8a6bd00",
                "filename": "ambari-server/src/test/python/TestAmbaryServer.py",
                "status": "modified",
                "additions": 58,
                "deletions": 13,
                "changes": 71,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/eb5f09c8b637835e7b836b5a08ba469df7078d16/ambari-server/src/test/python/TestAmbaryServer.py",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/eb5f09c8b637835e7b836b5a08ba469df7078d16/ambari-server/src/test/python/TestAmbaryServer.py",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/test/python/TestAmbaryServer.py?ref=eb5f09c8b637835e7b836b5a08ba469df7078d16",
                "patch": "@@ -1116,26 +1116,63 @@ def test_import_cert_and_key(self, get_validated_string_input_mock,\\\n                                os_path_join_mock, run_os_command_mock,\\\n                                open_mock, import_file_to_keystore_mock,\\\n                                set_file_permissions_mock, read_ambari_user_mock):\n-  \tget_validated_string_input_mock.return_value = \"password\"\n-  \tget_validated_filepath_input_mock.side_effect = \\\n+    get_validated_string_input_mock.return_value = \"password\"\n+    get_validated_filepath_input_mock.side_effect = \\\n                                             [\"cert_file_path\",\"key_file_path\"]\n-  \tos_path_join_mock.side_effect = [\"cert_file_path\",\"key_file_path\",\\\n+    os_path_join_mock.side_effect = [\"cert_file_path\",\"key_file_path\",\\\n                                         \"keystore_cert_file_path\",\\\n                                         \"keystore_cert_key_file_path\",]\n-  \trun_os_command_mock.return_value = (0, \"\",\t\"\") \n-  \tom = open_mock.return_value\n-  \texpect_import_file_to_keystore = \"[call('cert_file_path',\"+\\\n+    run_os_command_mock.return_value = (0, \"\",\t\"\")\n+    om = open_mock.return_value\n+    expect_import_file_to_keystore = \"[call('cert_file_path',\"+\\\n                                           \" 'keystore_cert_file_path'),\\n\"+\\\n                                           \" call('key_file_path',\"+\\\n                                           \" 'keystore_cert_key_file_path')]\"\n \n-  \tambari_server.import_cert_and_key(\"key_dir\")\n-  \tself.assertTrue(get_validated_filepath_input_mock.call_count == 2)\n-  \tself.assertTrue(get_validated_string_input_mock.called)\n-  \tself.assertTrue(os_path_join_mock.call_count == 4)\n-  \tself.assertTrue(set_file_permissions_mock.call_count == 2)\n-  \tself.assertEqual(str(import_file_to_keystore_mock.call_args_list),\\\n-                         expect_import_file_to_keystore)      \n+    ambari_server.import_cert_and_key(\"key_dir\")\n+    self.assertTrue(get_validated_filepath_input_mock.call_count == 2)\n+    self.assertTrue(get_validated_string_input_mock.called)\n+    self.assertTrue(os_path_join_mock.call_count == 4)\n+    self.assertTrue(set_file_permissions_mock.call_count == 2)\n+    self.assertEqual(str(import_file_to_keystore_mock.call_args_list),\\\n+                         expect_import_file_to_keystore)\n+\n+  @patch.object(ambari_server, \"generate_random_string\")\n+  @patch.object(ambari_server, \"read_ambari_user\")\n+  @patch.object(ambari_server, \"set_file_permissions\")\n+  @patch.object(ambari_server, \"import_file_to_keystore\")\n+  @patch(\"__builtin__.open\")\n+  @patch.object(ambari_server, \"run_os_command\")\n+  @patch(\"os.path.join\")\n+  @patch.object(ambari_server, \"get_validated_filepath_input\")\n+  @patch.object(ambari_server, \"get_validated_string_input\")\n+  def test_import_cert_and_key_with_empty_password(self, \\\n+    get_validated_string_input_mock, get_validated_filepath_input_mock,\\\n+    os_path_join_mock, run_os_command_mock, open_mock, \\\n+    import_file_to_keystore_mock, set_file_permissions_mock,\n+    read_ambari_user_mock, generate_random_string_mock):\n+\n+    get_validated_string_input_mock.return_value = \"\"\n+    get_validated_filepath_input_mock.side_effect =\\\n+    [\"cert_file_path\",\"key_file_path\"]\n+    os_path_join_mock.side_effect = [\"cert_file_path\",\"key_file_path\",\\\n+                                     \"keystore_cert_file_path\",\\\n+                                     \"keystore_cert_key_file_path\",]\n+    run_os_command_mock.return_value = (0, \"\",\t\"\")\n+\n+    expect_import_file_to_keystore = \"[call('cert_file_path',\"+\\\n+                                     \" 'keystore_cert_file_path'),\\n\"+\\\n+                                     \" call('key_file_path.secured',\"+\\\n+                                     \" 'keystore_cert_key_file_path')]\"\n+\n+    ambari_server.import_cert_and_key(\"key_dir\")\n+    self.assertEquals(get_validated_filepath_input_mock.call_count, 2)\n+    self.assertTrue(get_validated_string_input_mock.called)\n+    self.assertEquals(os_path_join_mock.call_count, 4)\n+    self.assertEquals(set_file_permissions_mock.call_count, 2)\n+    self.assertEqual(str(import_file_to_keystore_mock.call_args_list),\\\n+      expect_import_file_to_keystore)\n+    self.assertTrue(generate_random_string_mock.called)\n \n   @patch.object(ambari_server, \"run_os_command\")\n   @patch(\"__builtin__.open\")\n@@ -3021,6 +3058,14 @@ def test_configure_ldap_password(self, read_password_method):\n     self.assertTrue(read_password_method.called)\n \n     sys.stdout = sys.__stdout__\n+    \n+  def test_generate_random_string(self):\n+    random_str_len = 100\n+    str1 = ambari_server.generate_random_string(random_str_len)\n+    self.assertTrue(len(str1) == random_str_len)\n+    \n+    str2 = ambari_server.generate_random_string(random_str_len)\n+    self.assertTrue(str1 != str2)\n \n \n "
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-ambari/commit/96cf16f195c35aa6617e74e9c2893c53bea1a8b5",
        "repo": "incubator-ambari",
        "parent": "https://github.com/apache/incubator-ambari/commit/947a9d5acc9e22aa1b9613bfdc5cdab74a3e78e0",
        "message": "AMBARI-845. Fix NPE in the server to be able to run the server api's. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/ambari/branches/AMBARI-666@1396501 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "incubator-ambari_9",
        "file": [
            {
                "sha": "794ecf116fc80b0935be22a697f7ac4c16af8ae6",
                "filename": "AMBARI-666-CHANGES.txt",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/96cf16f195c35aa6617e74e9c2893c53bea1a8b5/AMBARI-666-CHANGES.txt",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/96cf16f195c35aa6617e74e9c2893c53bea1a8b5/AMBARI-666-CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/AMBARI-666-CHANGES.txt?ref=96cf16f195c35aa6617e74e9c2893c53bea1a8b5",
                "patch": "@@ -12,6 +12,9 @@ AMBARI-666 branch (unreleased changes)\n \n   NEW FEATURES\n \n+  AMBARI-845. Fix NPE in the server to be able to run the server api's.\n+  (mahadev)\n+\n   AMBARI-844. Mock JMX provider for manual tests. (Tom Beerbower via mahadev)\n \n   AMBARI-841. Fix comparison predicates in case where resource does not have"
            },
            {
                "sha": "529e55449840a146f8d8e300c5803a694cd85668",
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
                "status": "modified",
                "additions": 9,
                "deletions": 5,
                "changes": 14,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/96cf16f195c35aa6617e74e9c2893c53bea1a8b5/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/96cf16f195c35aa6617e74e9c2893c53bea1a8b5/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java?ref=96cf16f195c35aa6617e74e9c2893c53bea1a8b5",
                "patch": "@@ -251,7 +251,7 @@ public TrackActionResponse createHost(HostRequest request)\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Received a createHost request\"\n           + \", hostname=\" + request.getHostname()\n-          + \", request=\" + request);\n+          );\n     }\n \n     Host h = clusters.getHost(request.getHostname());\n@@ -283,23 +283,27 @@ public TrackActionResponse createHostComponent(ServiceComponentHostRequest\n       request) throws AmbariException {\n     if (request.getClusterName() == null\n         || request.getClusterName().isEmpty()\n-        || request.getServiceName() == null\n-        || request.getServiceName().isEmpty()\n         || request.getComponentName() == null\n         || request.getComponentName().isEmpty()\n         || request.getHostname() == null\n         || request.getHostname().isEmpty()) {\n       // FIXME throw correct error\n       throw new AmbariException(\"Invalid arguments\");\n     }\n-\n+    \n+    // FIXME Hard coded stuff --- needs to be fixed.\n+    if (request.getServiceName() == null\n+        || request.getServiceName().isEmpty()\n+      ) {\n+      request.setServiceName(\"HDFS\");\n+    }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Received a createHostComponent request\"\n           + \", clusterName=\" + request.getClusterName()\n           + \", serviceName=\" + request.getServiceName()\n           + \", componentName=\" + request.getComponentName()\n           + \", hostname=\" + request.getHostname()\n-          + \", request=\" + request);\n+          );\n     }\n \n     final Cluster cluster = clusters.getCluster(request.getClusterName());"
            },
            {
                "sha": "3621919f652a912ac7074c640206aabd156016df",
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
                "status": "modified",
                "additions": 14,
                "deletions": 8,
                "changes": 22,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/96cf16f195c35aa6617e74e9c2893c53bea1a8b5/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/96cf16f195c35aa6617e74e9c2893c53bea1a8b5/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java?ref=96cf16f195c35aa6617e74e9c2893c53bea1a8b5",
                "patch": "@@ -32,7 +32,6 @@\n import org.mortbay.jetty.security.SslSocketConnector;\n import org.mortbay.jetty.servlet.Context;\n import org.mortbay.jetty.servlet.DefaultServlet;\n-import org.mortbay.jetty.servlet.FilterHolder;\n import org.mortbay.jetty.servlet.ServletHolder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -71,7 +70,12 @@\n   CertificateManager certMan;\n   @Inject\n   Injector injector;\n-\n+  private static AmbariManagementController clusterController = null;\n+  \n+  public static AmbariManagementController getController() {\n+    return clusterController;\n+  }\n+  \n   public void run() {\n     server = new Server(CLIENT_API_PORT);\n     serverForAgent = new Server();\n@@ -113,7 +117,7 @@ public void run() {\n       //Spring Security Filter initialization\n       DelegatingFilterProxy springSecurityFilter = new DelegatingFilterProxy();\n       springSecurityFilter.setTargetBeanName(\"springSecurityFilterChain\");\n-      root.addFilter(new FilterHolder(springSecurityFilter), \"/*\", 1);\n+      //root.addFilter(new FilterHolder(springSecurityFilter), \"/*\", 1);\n \n       //Secured connector for 2-way auth\n       SslSocketConnector sslConnectorTwoWay = new SslSocketConnector();\n@@ -155,7 +159,8 @@ public void run() {\n       sh.setInitParameter(\"com.sun.jersey.config.property.resourceConfigClass\",\n               \"com.sun.jersey.api.core.PackagesResourceConfig\");\n       sh.setInitParameter(\"com.sun.jersey.config.property.packages\",\n-              \"org.apache.ambari.server.api.rest\");\n+              \"org.apache.ambari.server.api.rest;\" +\n+              \"org.apache.ambari.server.api.services\");\n       root.addServlet(sh, \"/api/*\");\n       sh.setInitOrder(2);\n \n@@ -197,7 +202,8 @@ public void run() {\n       AmbariManagementController controller = injector.getInstance(\n           AmbariManagementController.class);\n \n-\n+      clusterController = controller;\n+      \n       // FIXME need to figure out correct order of starting things to\n       // handle restart-recovery correctly\n \n@@ -211,9 +217,9 @@ public void run() {\n       manager.start();\n       LOG.info(\"********* Started ActionManager **********\");\n \n-      RequestInjectorForTest testInjector = new RequestInjectorForTest(controller, clusters);\n-      Thread testInjectorThread = new Thread(testInjector);\n-      testInjectorThread.start();\n+      //RequestInjectorForTest testInjector = new RequestInjectorForTest(controller, clusters);\n+      //Thread testInjectorThread = new Thread(testInjector);\n+      //testInjectorThread.start();\n       \n       server.join();\n       LOG.info(\"Joined the Server\");"
            },
            {
                "sha": "f2a7689d5980ef8b1c847a8e5fea9d2fee04254c",
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/96cf16f195c35aa6617e74e9c2893c53bea1a8b5/ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/96cf16f195c35aa6617e74e9c2893c53bea1a8b5/ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java?ref=96cf16f195c35aa6617e74e9c2893c53bea1a8b5",
                "patch": "@@ -28,6 +28,7 @@\n import org.apache.ambari.server.state.cluster.ClustersImpl;\n \n import com.google.inject.AbstractModule;\n+import com.google.inject.Injector;\n import com.google.inject.name.Names;\n \n /**"
            },
            {
                "sha": "3fd5672018043573bc49dd8839bab087b0f1ecb5",
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java",
                "status": "modified",
                "additions": 8,
                "deletions": 11,
                "changes": 19,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/96cf16f195c35aa6617e74e9c2893c53bea1a8b5/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/96cf16f195c35aa6617e74e9c2893c53bea1a8b5/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java?ref=96cf16f195c35aa6617e74e9c2893c53bea1a8b5",
                "patch": "@@ -18,31 +18,28 @@\n \n package org.apache.ambari.server.controller.internal;\n \n-import org.apache.ambari.server.controller.spi.ProviderModule;\n-import org.apache.ambari.server.controller.utilities.PropertyHelper;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n import org.apache.ambari.server.controller.AmbariManagementController;\n-import org.apache.ambari.server.controller.AmbariManagementControllerImpl;\n+import org.apache.ambari.server.controller.AmbariServer;\n import org.apache.ambari.server.controller.spi.PropertyProvider;\n+import org.apache.ambari.server.controller.spi.ProviderModule;\n import org.apache.ambari.server.controller.spi.Resource;\n import org.apache.ambari.server.controller.spi.ResourceProvider;\n-\n-import java.util.LinkedList;\n-import java.util.List;\n-\n+import org.apache.ambari.server.controller.utilities.PropertyHelper;\n /**\n  *\n  */\n public class DefaultProviderModule implements ProviderModule {\n \n   private static final List<PropertyProvider> PROPERTY_PROVIDERS =\n       new LinkedList<PropertyProvider>();\n-\n+ \n   @Override\n   public ResourceProvider getResourceProvider(Resource.Type type) {\n-    AmbariManagementController managementController =\n-        new AmbariManagementControllerImpl(null, null);\n     return ResourceProviderImpl.getResourceProvider(type,\n         PROPERTY_PROVIDERS, PropertyHelper.getPropertyIds(type, \"DB\"),\n-        PropertyHelper.getKeyPropertyIds(type), managementController);\n+        PropertyHelper.getKeyPropertyIds(type), AmbariServer.getController());\n   }\n }"
            }
        ]
    },
    {
        "commit": "https://github.com/apache/incubator-ambari/commit/dfb7f03927aee48e81597a1dad0b270067c68563",
        "repo": "incubator-ambari",
        "parent": "https://github.com/apache/incubator-ambari/commit/ff66974b8912a037662212052cbd05b96c11f6e3",
        "message": "AMBARI-801. Fix heartbeat message from the agent which is causing NPE at the server. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/ambari/branches/AMBARI-666@1393810 13f79535-47bb-0310-9956-ffa450edef68",
        "bug_id": "incubator-ambari_10",
        "file": [
            {
                "sha": "4ccfd6238b92c5c35bcdc33f8f48d5c23cce5d7d",
                "filename": "AMBARI-666-CHANGES.txt",
                "status": "modified",
                "additions": 3,
                "deletions": 0,
                "changes": 3,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/dfb7f03927aee48e81597a1dad0b270067c68563/AMBARI-666-CHANGES.txt",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/dfb7f03927aee48e81597a1dad0b270067c68563/AMBARI-666-CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/AMBARI-666-CHANGES.txt?ref=dfb7f03927aee48e81597a1dad0b270067c68563",
                "patch": "@@ -12,6 +12,9 @@ AMBARI-666 branch (unreleased changes)\n \n   NEW FEATURES\n \n+  AMBARI-801. Fix heartbeat message from the agent which is causing NPE at the\n+  server. (mahadev)\n+\n   AMBARI-778. Ensure data flows across all steps in installer wizard.\n   (Jaimin Jetly via yusaku)\n "
            },
            {
                "sha": "445399cc7340282bfaf8737dc207bf23cf892e3a",
                "filename": "ambari-agent/src/main/python/ambari_agent/Controller.py",
                "status": "modified",
                "additions": 2,
                "deletions": 1,
                "changes": 3,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/dfb7f03927aee48e81597a1dad0b270067c68563/ambari-agent/src/main/python/ambari_agent/Controller.py",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/dfb7f03927aee48e81597a1dad0b270067c68563/ambari-agent/src/main/python/ambari_agent/Controller.py",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-agent/src/main/python/ambari_agent/Controller.py?ref=dfb7f03927aee48e81597a1dad0b270067c68563",
                "patch": "@@ -107,7 +107,8 @@ def heartbeatWithServer(self):\n       try:\n         if retry==False:\n           data = json.dumps(self.heartbeat.build(id))\n-\n+          pass\n+        logger.info(\"Sending HeartBeat \" + pprint.pformat(data))\n         req = urllib2.Request(self.heartbeatUrl, data, {'Content-Type': 'application/json'})\n         \n         logger.info(data)"
            },
            {
                "sha": "e9215f766fa187c951ee8b0e9937cf8debc83bf6",
                "filename": "ambari-agent/src/main/python/ambari_agent/Heartbeat.py",
                "status": "modified",
                "additions": 6,
                "deletions": 2,
                "changes": 8,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/dfb7f03927aee48e81597a1dad0b270067c68563/ambari-agent/src/main/python/ambari_agent/Heartbeat.py",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/dfb7f03927aee48e81597a1dad0b270067c68563/ambari-agent/src/main/python/ambari_agent/Heartbeat.py",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-agent/src/main/python/ambari_agent/Heartbeat.py?ref=dfb7f03927aee48e81597a1dad0b270067c68563",
                "patch": "@@ -39,11 +39,15 @@ def build(self, id='-1'):\n     timestamp = int(time.time()*1000)\n     queueResult = self.actionQueue.result()\n     installedRoleStates = serverStatus.build()\n+    nodeStatus = { \"status\" : \"HEALTHY\",\n+                   \"cause\" : \"NONE\"}\n+    \n     heartbeat = { 'responseId'        : int(id),\n                   'timestamp'         : timestamp,\n                   'hostname'          : socket.gethostname(),\n-                  'reports'           : self.reports,\n-                  'componentStatus'   : self.componentStatus\n+                 # 'reports'           : self.reports,\n+                 # 'componentStatus'   : self.componentStatus,\n+                  'nodeStatus'        : nodeStatus\n                 }\n   \n     "
            },
            {
                "sha": "baa3df8fe89260b0fd093c6416863b726f005cad",
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java",
                "status": "modified",
                "additions": 7,
                "deletions": 1,
                "changes": 8,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/dfb7f03927aee48e81597a1dad0b270067c68563/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/dfb7f03927aee48e81597a1dad0b270067c68563/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java?ref=dfb7f03927aee48e81597a1dad0b270067c68563",
                "patch": "@@ -21,8 +21,13 @@\n \n import org.apache.ambari.server.agent.ActionQueue;\n import org.apache.ambari.server.agent.CommandReport;\n+import org.apache.ambari.server.agent.rest.AgentResource;\n import org.apache.ambari.server.state.live.Clusters;\n import org.apache.ambari.server.utils.StageUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.google.inject.Inject;\n import com.google.inject.Singleton;\n@@ -38,7 +43,8 @@\n   private final ActionDBAccessor db;\n   private final ActionQueue actionQueue;\n   private final Clusters fsm;\n-\n+  private static Logger LOG = LoggerFactory.getLogger(ActionManager.class);\n+  \n   @Inject\n   public ActionManager(@Named(\"schedulerSleeptime\") long schedulerSleepTime,\n       @Named(\"actionTimeout\") long actionTimeout,"
            }
        ]
    }
]
