{
    "sling-org-apache-sling-auth-core_4e16a9c": {
        "bug_id": "sling-org-apache-sling-auth-core_4e16a9c",
        "commit": "https://github.com/apache/sling-org-apache-sling-auth-core/commit/4e16a9cfa6e7279fbd6469342dc9e79c2c1fd384",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-auth-core/blob/4e16a9cfa6e7279fbd6469342dc9e79c2c1fd384/src/main/java/org/apache/sling/auth/core/impl/SlingAuthenticator.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-auth-core/contents/src/main/java/org/apache/sling/auth/core/impl/SlingAuthenticator.java?ref=4e16a9cfa6e7279fbd6469342dc9e79c2c1fd384",
                "deletions": 16,
                "filename": "src/main/java/org/apache/sling/auth/core/impl/SlingAuthenticator.java",
                "patch": "@@ -489,7 +489,7 @@ private boolean doHandleSecurity(HttpServletRequest request, HttpServletResponse\n             postProcess(authInfo, request, response);\n         } catch (LoginException e) {\n         \tpostLoginFailedEvent(request, authInfo, e);\n-        \t\n+\n             handleLoginFailure(request, response, authInfo, e);\n             return false;\n         }\n@@ -945,30 +945,30 @@ private boolean isNodeRequiresAuthHandler(String path, String holderPath) {\n         if (path == null || holderPath == null) {\n             return false;\n         }\n-        \n+\n         if ((\"/\").equals(holderPath)) {\n             return true;\n         }\n-        \n+\n         int holderPathLength = holderPath.length();\n-        \n+\n         if (path.length() < holderPathLength) {\n             return false;\n         }\n-        \n+\n         if (path.equals(holderPath)) {\n             return true;\n         }\n-        \n+\n         if (path.startsWith(holderPath)) {\n             if (path.charAt(holderPathLength) == '/' || path.charAt(holderPathLength) == '.') {\n                 return true;\n             }\n         }\n         return false;\n     }\n-    \n-    \n+\n+\n     /**\n      * Returns credentials to use for anonymous resource access. If an anonymous\n      * user is configued, this returns an {@link AuthenticationInfo} instance\n@@ -1094,10 +1094,10 @@ private boolean handleLoginFailure(final HttpServletRequest request,\n             \tcode = AuthenticationHandler.FAILURE_REASON_CODES.INVALID_LOGIN;\n             }\n         }\n-        \n+\n         return code;\n     }\n-    \n+\n     /**\n      * Tries to request credentials from the client. The following mechanisms\n      * are implemented by this method:\n@@ -1538,10 +1538,14 @@ private void postLoginFailedEvent(final HttpServletRequest request, final Authen\n         //if reason_code is null, it is problem some non-login related failure, so don't send the event\n         if (reason_code != null) {\n         \tfinal Dictionary<String, Object> properties = new Hashtable<String, Object>();\n-            properties.put(SlingConstants.PROPERTY_USERID, authInfo.getUser());\n-            properties.put(AuthenticationInfo.AUTH_TYPE, authInfo.getAuthType());\n+            if (authInfo.getUser() != null) {\n+                properties.put(SlingConstants.PROPERTY_USERID, authInfo.getUser());\n+            }\n+            if (authInfo.getAuthType() != null) {\n+                properties.put(AuthenticationInfo.AUTH_TYPE, authInfo.getAuthType());\n+            }\n            \tproperties.put(\"reason_code\", reason_code.name());\n-            \n+\n             EventAdmin localEA = this.eventAdmin;\n             if (localEA != null) {\n                 localEA.postEvent(new Event(AuthConstants.TOPIC_LOGIN_FAILED, properties));\n@@ -1615,19 +1619,19 @@ static String unquoteCookieValue(String value) {\n         if (value == null || value.length() == 0) {\n             return value;\n         }\n-        \n+\n         if (value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")) {\n             value = value.substring(1, value.length()-1);\n         }\n-        \n+\n         StringBuilder builder = new StringBuilder();\n         String [] values = value.split(\"\\\\\\\\\");\n         for (String v:values) {\n             try {\n                 builder.append(URLDecoder.decode(v, \"UTF-8\"));\n             } catch (UnsupportedEncodingException e) {\n                 builder.append(v);\n-            } \n+            }\n         }\n         return builder.toString();\n     }",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-auth-core/raw/4e16a9cfa6e7279fbd6469342dc9e79c2c1fd384/src/main/java/org/apache/sling/auth/core/impl/SlingAuthenticator.java",
                "sha": "12d1b34b5136b1cf32b4a374e42ead5ffe83ab10",
                "status": "modified"
            }
        ],
        "message": "SLING-8711 : NPE when auth failed event is sent",
        "parent": "https://github.com/apache/sling-org-apache-sling-auth-core/commit/efd290e6b4732314e0f8806a69c8b6a52e4e2682",
        "patched_files": [
            "SlingAuthenticator.java"
        ],
        "repo": "sling-org-apache-sling-auth-core",
        "unit_tests": [
            "SlingAuthenticatorTest.java"
        ]
    }
}