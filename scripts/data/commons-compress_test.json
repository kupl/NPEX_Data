{
    "commons-compress_0317b95": {
        "bug_id": "commons-compress_0317b95",
        "commit": "https://github.com/apache/commons-compress/commit/0317b955b296f0e0db08c1a12ac17ae1d943a502",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/commons-compress/blob/0317b955b296f0e0db08c1a12ac17ae1d943a502/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java?ref=0317b955b296f0e0db08c1a12ac17ae1d943a502",
                "deletions": 3,
                "filename": "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java",
                "patch": "@@ -113,7 +113,9 @@ public void setCreationDate(long ntfsCreationDate) {\n     \n     public void setCreationDate(Date creationDate) {\n         hasCreationDate = creationDate != null;\n-        this.creationDate = javaTimeToNtfsTime(creationDate);\n+        if (hasCreationDate) {\n+            this.creationDate = javaTimeToNtfsTime(creationDate);\n+        }\n     }\n \n     public boolean getHasLastModifiedDate() {\n@@ -139,7 +141,9 @@ public void setLastModifiedDate(long ntfsLastModifiedDate) {\n     \n     public void setLastModifiedDate(Date lastModifiedDate) {\n         hasLastModifiedDate = lastModifiedDate != null;\n-        this.lastModifiedDate = javaTimeToNtfsTime(lastModifiedDate);\n+        if (hasLastModifiedDate) {\n+            this.lastModifiedDate = javaTimeToNtfsTime(lastModifiedDate);\n+        }\n     }\n     \n     public boolean getHasAccessDate() {\n@@ -165,7 +169,9 @@ public void setAccessDate(long ntfsAccessDate) {\n     \n     public void setAccessDate(Date accessDate) {\n         hasAccessDate = accessDate != null;\n-        this.accessDate = javaTimeToNtfsTime(accessDate);\n+        if (hasAccessDate) {\n+            this.accessDate = javaTimeToNtfsTime(accessDate);\n+        }\n     }\n \n     public boolean getHasWindowsAttributes() {",
                "raw_url": "https://github.com/apache/commons-compress/raw/0317b955b296f0e0db08c1a12ac17ae1d943a502/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java",
                "sha": "9041d0b329126c0be2bb36f8df53fc0652c37129",
                "status": "modified"
            }
        ],
        "message": "avoid NullPointerExceptions if Date is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1529672 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-compress/commit/70dc5e0be0a53eac0139e3cbd87dca3ed616df7b",
        "patched_files": [
            "SevenZArchiveEntry.java"
        ],
        "repo": "commons-compress",
        "unit_tests": [
            "SevenZArchiveEntryTest.java"
        ]
    },
    "commons-compress_109a7a8": {
        "bug_id": "commons-compress_109a7a8",
        "commit": "https://github.com/apache/commons-compress/commit/109a7a8090b8254ce41fbef153e19938f36f6467",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-compress/blob/109a7a8090b8254ce41fbef153e19938f36f6467/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java?ref=109a7a8090b8254ce41fbef153e19938f36f6467",
                "deletions": 5,
                "filename": "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
                "patch": "@@ -755,20 +755,22 @@ private void calculateStreamMap(final Archive archive) throws IOException {\n         final StreamMap streamMap = new StreamMap();\n         \n         int nextFolderPackStreamIndex = 0;\n-        streamMap.folderFirstPackStreamIndex = new int[archive.folders.length];\n-        for (int i = 0; i < archive.folders.length; i++) {\n+        final int numFolders = (archive.folders != null) ? archive.folders.length : 0;\n+        streamMap.folderFirstPackStreamIndex = new int[numFolders];\n+        for (int i = 0; i < numFolders; i++) {\n             streamMap.folderFirstPackStreamIndex[i] = nextFolderPackStreamIndex;\n             nextFolderPackStreamIndex += archive.folders[i].packedStreams.length;\n         }\n         \n         long nextPackStreamOffset = 0;\n-        streamMap.packStreamOffsets = new long[archive.packSizes.length];\n-        for (int i = 0; i < archive.packSizes.length; i++) {\n+        final int numPackSizes = (archive.packSizes != null) ? archive.packSizes.length : 0;\n+        streamMap.packStreamOffsets = new long[numPackSizes];\n+        for (int i = 0; i < numPackSizes; i++) {\n             streamMap.packStreamOffsets[i] = nextPackStreamOffset;\n             nextPackStreamOffset += archive.packSizes[i]; \n         }\n         \n-        streamMap.folderFirstFileIndex = new int[archive.folders.length];\n+        streamMap.folderFirstFileIndex = new int[numFolders];\n         streamMap.fileFolderIndex = new int[archive.files.length];\n         int nextFolderIndex = 0;\n         int nextFolderUnpackStreamIndex = 0;",
                "raw_url": "https://github.com/apache/commons-compress/raw/109a7a8090b8254ce41fbef153e19938f36f6467/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
                "sha": "c067b7ea732c29ee9ac8981ffa7fc2905f464d26",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/commons-compress/blob/109a7a8090b8254ce41fbef153e19938f36f6467/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java?ref=109a7a8090b8254ce41fbef153e19938f36f6467",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java",
                "patch": "@@ -20,6 +20,15 @@\n import org.apache.commons.compress.AbstractTestCase;\n \n public class SevenZFileTest extends AbstractTestCase {\n+    public void testAllEmptyFilesArchive() throws Exception {\n+        SevenZFile archive = new SevenZFile(getFile(\"7z-empty-mhc-off.7z\"));\n+        try {\n+            assertNotNull(archive.getNextEntry());\n+        } finally {\n+            archive.close();\n+        }\n+    }\n+    \n     public void testHelloWorldHeaderCompressionOffCopy() throws Exception {\n         checkHelloWorld(\"7z-hello-mhc-off-copy.7z\");\n     }",
                "raw_url": "https://github.com/apache/commons-compress/raw/109a7a8090b8254ce41fbef153e19938f36f6467/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java",
                "sha": "82ee431fab23981d140e65a2634c38017f81f421",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/commons-compress/blob/109a7a8090b8254ce41fbef153e19938f36f6467/src/test/resources/7z-empty-mhc-off.7z",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/test/resources/7z-empty-mhc-off.7z?ref=109a7a8090b8254ce41fbef153e19938f36f6467",
                "deletions": 0,
                "filename": "src/test/resources/7z-empty-mhc-off.7z",
                "raw_url": "https://github.com/apache/commons-compress/raw/109a7a8090b8254ce41fbef153e19938f36f6467/src/test/resources/7z-empty-mhc-off.7z",
                "sha": "8e00c4353e29bc71e8e4d586def13eccd039fb69",
                "status": "added"
            }
        ],
        "message": "Don't NPE on archives of all empty files.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1482498 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-compress/commit/57b74321479f42741d3f0f34233b4a343174a59e",
        "patched_files": [
            "SevenZFile.java",
            "7z-empty-mhc-off.java"
        ],
        "repo": "commons-compress",
        "unit_tests": [
            "SevenZFileTest.java"
        ]
    },
    "commons-compress_1dcab3f": {
        "bug_id": "commons-compress_1dcab3f",
        "commit": "https://github.com/apache/commons-compress/commit/1dcab3f854e6fffa16c842b8a10a6fa2163795ea",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-compress/blob/1dcab3f854e6fffa16c842b8a10a6fa2163795ea/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java?ref=1dcab3f854e6fffa16c842b8a10a6fa2163795ea",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java",
                "patch": "@@ -865,9 +865,9 @@ public boolean isFIFO() {\n         }\n \n         String[]   list = file.list();\n-        TarArchiveEntry[] result = new TarArchiveEntry[list.length];\n+        TarArchiveEntry[] result = new TarArchiveEntry[list == null ? 0 : list.length];\n \n-        for (int i = 0; i < list.length; ++i) {\n+        for (int i = 0; i < result.length; ++i) {\n             result[i] = new TarArchiveEntry(new File(file, list[i]));\n         }\n ",
                "raw_url": "https://github.com/apache/commons-compress/raw/1dcab3f854e6fffa16c842b8a10a6fa2163795ea/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java",
                "sha": "cdbc80f3b8f559c9250de1ebaa578e146b1f8167",
                "status": "modified"
            }
        ],
        "message": "newer version of findbugs has detected a potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1696471 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-compress/commit/b1e2a02c09936e604d8f5259ad7a0cf9ab99e55d",
        "patched_files": [
            "TarArchiveEntry.java"
        ],
        "repo": "commons-compress",
        "unit_tests": [
            "TarArchiveEntryTest.java"
        ]
    },
    "commons-compress_277d6a0": {
        "bug_id": "commons-compress_277d6a0",
        "commit": "https://github.com/apache/commons-compress/commit/277d6a0c2820548fd97748ec6aff92ceceb1fd35",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/commons-compress/blob/277d6a0c2820548fd97748ec6aff92ceceb1fd35/src/changes/changes.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/changes/changes.xml?ref=277d6a0c2820548fd97748ec6aff92ceceb1fd35",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -50,6 +50,11 @@ The <action> type attribute can be add,update,fix,remove.\n       <action type=\"update\" date=\"2019-08-27\">\n         Update tests from org.apache.felix:org.apache.felix.framework 6.0.2 to 6.0.3.\n       </action>\n+      <action issue=\"COMPRESS-492\" type=\"fix\" date=\"2019-08-28\">\n+        SevenZFile could throw NullPointerException rather than\n+        IOException for certain archives. In addition it now handles\n+        certain empty archives more gracefully.\n+      </action>\n     </release>\n     <release version=\"1.19\" date=\"2019-08-27\"\n              description=\"Release 1.19",
                "raw_url": "https://github.com/apache/commons-compress/raw/277d6a0c2820548fd97748ec6aff92ceceb1fd35/src/changes/changes.xml",
                "sha": "5a3cc09e4bf1ffb9bd3151245989fdc485986738",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-compress/blob/277d6a0c2820548fd97748ec6aff92ceceb1fd35/src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java?ref=277d6a0c2820548fd97748ec6aff92ceceb1fd35",
                "deletions": 3,
                "filename": "src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java",
                "patch": "@@ -23,17 +23,17 @@\n     /// Offset from beginning of file + SIGNATURE_HEADER_SIZE to packed streams.\n     long packPos;\n     /// Size of each packed stream.\n-    long[] packSizes;\n+    long[] packSizes = new long[0];\n     /// Whether each particular packed streams has a CRC.\n     BitSet packCrcsDefined;\n     /// CRCs for each packed stream, valid only if that packed stream has one.\n     long[] packCrcs;\n     /// Properties of solid compression blocks.\n-    Folder[] folders;\n+    Folder[] folders = new Folder[0];\n     /// Temporary properties for non-empty files (subsumed into the files array later).\n     SubStreamsInfo subStreamsInfo;\n     /// The files and directories in the archive.\n-    SevenZArchiveEntry[] files;\n+    SevenZArchiveEntry[] files = new SevenZArchiveEntry[0];\n     /// Mapping between folders, files and streams.\n     StreamMap streamMap;\n ",
                "raw_url": "https://github.com/apache/commons-compress/raw/277d6a0c2820548fd97748ec6aff92ceceb1fd35/src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java",
                "sha": "00ca8b4b9085ce9e34c66a3f7691f7900aac93eb",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/commons-compress/blob/277d6a0c2820548fd97748ec6aff92ceceb1fd35/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java?ref=277d6a0c2820548fd97748ec6aff92ceceb1fd35",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
                "patch": "@@ -1002,6 +1002,9 @@ private void readFilesInfo(final ByteBuffer header, final Archive archive) throw\n         for (int i = 0; i < files.length; i++) {\n             files[i].setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n             if (files[i].hasStream()) {\n+                if (archive.subStreamsInfo == null) {\n+                    throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n+                }\n                 files[i].setDirectory(false);\n                 files[i].setAntiItem(false);\n                 files[i].setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n@@ -1074,6 +1077,9 @@ private void calculateStreamMap(final Archive archive) throws IOException {\n     }\n \n     private void buildDecodingStream() throws IOException {\n+        if (archive.streamMap == null) {\n+            throw new IOException(\"Archive doesn't contain stream information to read entries\");\n+        }\n         final int folderIndex = archive.streamMap.fileFolderIndex[currentEntryIndex];\n         if (folderIndex < 0) {\n             deferredBlockStreams.clear();",
                "raw_url": "https://github.com/apache/commons-compress/raw/277d6a0c2820548fd97748ec6aff92ceceb1fd35/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
                "sha": "7a02d7892fb672fefd1b678d6365af6cc6718e6b",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/commons-compress/blob/277d6a0c2820548fd97748ec6aff92ceceb1fd35/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java?ref=277d6a0c2820548fd97748ec6aff92ceceb1fd35",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java",
                "patch": "@@ -370,6 +370,31 @@ public void givenNameWinsOverDefaultName() throws Exception {\n         }\n     }\n \n+    /**\n+     * @see https://issues.apache.org/jira/browse/COMPRESS-492\n+     */\n+    @Test\n+    public void handlesEmptyArchiveWithFilesInfo() throws Exception {\n+        File f = new File(dir, \"empty.7z\");\n+        try (SevenZOutputFile s = new SevenZOutputFile(f)) {\n+        }\n+        try (SevenZFile z = new SevenZFile(f)) {\n+            assertFalse(z.getEntries().iterator().hasNext());\n+            assertNull(z.getNextEntry());\n+        }\n+    }\n+\n+    /**\n+     * @see https://issues.apache.org/jira/browse/COMPRESS-492\n+     */\n+    @Test\n+    public void handlesEmptyArchiveWithoutFilesInfo() throws Exception {\n+        try (SevenZFile z = new SevenZFile(getFile(\"COMPRESS-492.7z\"))) {\n+            assertFalse(z.getEntries().iterator().hasNext());\n+            assertNull(z.getNextEntry());\n+        }\n+    }\n+\n     private void test7zUnarchive(final File f, final SevenZMethod m, final byte[] password) throws Exception {\n         try (SevenZFile sevenZFile = new SevenZFile(f, password)) {\n             test7zUnarchive(sevenZFile, m);",
                "raw_url": "https://github.com/apache/commons-compress/raw/277d6a0c2820548fd97748ec6aff92ceceb1fd35/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java",
                "sha": "db4fe1d5fe2f7030f71e1a35dfc6b7b74ba7610f",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/commons-compress/blob/277d6a0c2820548fd97748ec6aff92ceceb1fd35/src/test/resources/COMPRESS-492.7z",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/test/resources/COMPRESS-492.7z?ref=277d6a0c2820548fd97748ec6aff92ceceb1fd35",
                "deletions": 0,
                "filename": "src/test/resources/COMPRESS-492.7z",
                "raw_url": "https://github.com/apache/commons-compress/raw/277d6a0c2820548fd97748ec6aff92ceceb1fd35/src/test/resources/COMPRESS-492.7z",
                "sha": "53edfbc920bfae73c13d89c14910025d7d00242f",
                "status": "added"
            }
        ],
        "message": "COMPRESS-492 eliminate a bunch of potential NPEs in SevenZFile",
        "parent": "https://github.com/apache/commons-compress/commit/ab7809b5c3de7a370a70f8236ec3f5c10c6383e2",
        "patched_files": [
            "SevenZFile.java",
            "COMPRESS-492.java",
            "Archive.java",
            "changes.java"
        ],
        "repo": "commons-compress",
        "unit_tests": [
            "SevenZFileTest.java"
        ]
    },
    "commons-compress_38118ec": {
        "bug_id": "commons-compress_38118ec",
        "commit": "https://github.com/apache/commons-compress/commit/38118ec54482b76c0e1eac150597d13b5c8c8413",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-compress/blob/38118ec54482b76c0e1eac150597d13b5c8c8413/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java?ref=38118ec54482b76c0e1eac150597d13b5c8c8413",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
                "patch": "@@ -254,6 +254,10 @@ public void closeArchiveEntry() throws IOException {\n         \n         ensureOpen();\n \n+        if (entry == null) {\n+            throw new IOException(\"Trying to close non-existent entry\");\n+        }\n+\n         if (this.entry.getSize() != this.written) {\n             throw new IOException(\"invalid entry size (expected \"\n                     + this.entry.getSize() + \" but got \" + this.written",
                "raw_url": "https://github.com/apache/commons-compress/raw/38118ec54482b76c0e1eac150597d13b5c8c8413/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
                "sha": "88c0f41a230ce5fc1830a3676432035212263ea1",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if closeArchiveEntry called with no active entry\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@769146 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-compress/commit/9b7db4ed2007e0e651a967e499db7cb3ce6ed83b",
        "patched_files": [
            "CpioArchiveOutputStream.java"
        ],
        "repo": "commons-compress",
        "unit_tests": [
            "CpioArchiveOutputStreamTest.java"
        ]
    },
    "commons-compress_5499fa0": {
        "bug_id": "commons-compress_5499fa0",
        "commit": "https://github.com/apache/commons-compress/commit/5499fa02b08b8546827a1a055c5af3f0245257d9",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-compress/blob/5499fa02b08b8546827a1a055c5af3f0245257d9/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java?ref=5499fa02b08b8546827a1a055c5af3f0245257d9",
                "deletions": 1,
                "filename": "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java",
                "patch": "@@ -38,7 +38,8 @@\n \n     static {\n         final String version = org.tukaani.xz.XZ.class.getPackage().getImplementationVersion();\n-        XZ_BCJ_IS_BUGGY=version.equals(\"1.4\");\n+\n+        XZ_BCJ_IS_BUGGY= version != null && version.equals(\"1.4\");\n         if (XZ_BCJ_IS_BUGGY) {\n             System.out.println(\"XZ version is \" + version + \" - skipping BCJ tests\");\n         }",
                "raw_url": "https://github.com/apache/commons-compress/raw/5499fa02b08b8546827a1a055c5af3f0245257d9/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java",
                "sha": "058c9e338275342a1dabce5cf3576335086cdf56",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when running against pre-release xz's (which are by definition not 1.4)\n\nSigned-off-by: Simon Spero <sesuncedu@gmail.com>",
        "parent": "https://github.com/apache/commons-compress/commit/31ac0e5f3594a4517ba2be1735b1219cf85c715a",
        "patched_files": [
            "SevenZOutputFile.java"
        ],
        "repo": "commons-compress",
        "unit_tests": [
            "SevenZOutputFileTest.java"
        ]
    },
    "commons-compress_6f37913": {
        "bug_id": "commons-compress_6f37913",
        "commit": "https://github.com/apache/commons-compress/commit/6f379134ae1807cd404ed6c9579707e5dc6a6df0",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/commons-compress/blob/6f379134ae1807cd404ed6c9579707e5dc6a6df0/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java?ref=6f379134ae1807cd404ed6c9579707e5dc6a6df0",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java",
                "patch": "@@ -31,6 +31,15 @@\n     private final Checksum checksum;\n \n     public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n+\n+        if ( checksum == null ){\n+            throw new NullPointerException(\"Parameter checksum must not be null\");\n+        }\n+\n+        if ( in == null ){\n+            throw new NullPointerException(\"Parameter in must not be null\");\n+        }\n+\n         this.checksum = checksum;\n         this.in = in;\n     }",
                "raw_url": "https://github.com/apache/commons-compress/raw/6f379134ae1807cd404ed6c9579707e5dc6a6df0/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java",
                "sha": "4a408a564ce5deeee3027d0a8aa4861e0a6a9d85",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/commons-compress/blob/6f379134ae1807cd404ed6c9579707e5dc6a6df0/src/test/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStreamTest.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/test/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStreamTest.java?ref=6f379134ae1807cd404ed6c9579707e5dc6a6df0",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStreamTest.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.util.zip.Adler32;\n+import java.util.zip.CRC32;\n \n import static org.junit.Assert.*;\n \n@@ -106,5 +107,30 @@ public void testReadTakingByteArray() throws IOException {\n     }\n \n \n+    @Test(expected = NullPointerException.class)\n+    public void testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionOne() {\n+\n+        ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream(null,null);\n+\n+\n+    }\n+\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionTwo() {\n+\n+        ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream(null,new ByteArrayInputStream(new byte[1]));\n+\n+\n+    }\n+\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionThree() {\n+\n+        ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream(new CRC32(),null);\n+\n+    }\n+\n \n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/commons-compress/raw/6f379134ae1807cd404ed6c9579707e5dc6a6df0/src/test/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStreamTest.java",
                "sha": "a9e52464c707bc7cae519c49bdddaadf48824f5f",
                "status": "modified"
            }
        ],
        "message": "COMPRESS-412 NullPointerException defect in ChecksumCalculatingInputStream#getValue() fixed.",
        "parent": "https://github.com/apache/commons-compress/commit/b53ead4b43c6c248b1a39f4a1cce7a0c4062285d",
        "patched_files": [
            "ChecksumCalculatingInputStream.java"
        ],
        "repo": "commons-compress",
        "unit_tests": [
            "ChecksumCalculatingInputStreamTest.java"
        ]
    },
    "commons-compress_8896a5c": {
        "bug_id": "commons-compress_8896a5c",
        "commit": "https://github.com/apache/commons-compress/commit/8896a5ceeea1a3b87851873b4e4edc7000e9cd4f",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-compress/blob/8896a5ceeea1a3b87851873b4e4edc7000e9cd4f/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java?ref=8896a5ceeea1a3b87851873b4e4edc7000e9cd4f",
                "deletions": 1,
                "filename": "src/test/java/org/apache/commons/compress/archivers/LongPathTest.java",
                "patch": "@@ -24,6 +24,7 @@\n import java.io.FileInputStream;\n import java.io.FileReader;\n import java.io.IOException;\n+import java.net.URL;\n import java.util.ArrayList;\n \n import junit.framework.AssertionFailedError;\n@@ -63,7 +64,9 @@ private LongPathTest(String name, File file){\n     \n     public static TestSuite suite() throws IOException{\n         TestSuite suite = new TestSuite(\"LongPathTests\");\n-        File arcdir =new File(classLoader.getResource(\"longpath\").getFile());\n+        URL resource = classLoader.getResource(\"longpath\");\n+        assertNotNull(\"Cannot find 'longpath' resource\",resource);\n+        File arcdir =new File(resource.getFile());\n         assertTrue(arcdir.exists());\n         File listing= new File(arcdir,\"files.txt\");\n         assertTrue(\"File listing is readable\",listing.canRead());",
                "raw_url": "https://github.com/apache/commons-compress/raw/8896a5ceeea1a3b87851873b4e4edc7000e9cd4f/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java",
                "sha": "bbf77c30acbdb0ce0b34ca761e9e3d6b8833bfd4",
                "status": "modified"
            }
        ],
        "message": "Add specific check for incorrect classpath, rather than relying on NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1159981 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-compress/commit/4525a60d3c0755f0c5eb2d71388e79fb8fc8bc6d",
        "patched_files": [],
        "repo": "commons-compress",
        "unit_tests": [
            "LongPathTest.java"
        ]
    },
    "commons-compress_b2f97b2": {
        "bug_id": "commons-compress_b2f97b2",
        "commit": "https://github.com/apache/commons-compress/commit/b2f97b2460747c82329e1247c59e74d2cfee1cbd",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-compress/blob/b2f97b2460747c82329e1247c59e74d2cfee1cbd/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java?ref=b2f97b2460747c82329e1247c59e74d2cfee1cbd",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
                "patch": "@@ -393,10 +393,10 @@ private void processZip64Extra(final ZipLong size, final ZipLong cSize) {\n         current.usesZip64 = z64 != null;\n         if (!current.hasDataDescriptor) {\n             if (z64 != null // same as current.usesZip64 but avoids NPE warning\n-                    && (cSize.equals(ZipLong.ZIP64_MAGIC) || size.equals(ZipLong.ZIP64_MAGIC)) ) {\n+                    && (ZipLong.ZIP64_MAGIC.equals(cSize) || ZipLong.ZIP64_MAGIC.equals(size)) ) {\n                 current.entry.setCompressedSize(z64.getCompressedSize().getLongValue());\n                 current.entry.setSize(z64.getSize().getLongValue());\n-            } else {\n+            } else if (cSize != null && size != null) {\n                 current.entry.setCompressedSize(cSize.getValue());\n                 current.entry.setSize(size.getValue());\n             }",
                "raw_url": "https://github.com/apache/commons-compress/raw/b2f97b2460747c82329e1247c59e74d2cfee1cbd/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
                "sha": "5b711dd781cf5a6e1b2d283c733a50bc9966e838",
                "status": "modified"
            }
        ],
        "message": "avoid NPE warning in Sonar",
        "parent": "https://github.com/apache/commons-compress/commit/4ad5d80a6272e007f64a6ac66829ca189a8093b9",
        "patched_files": [
            "ZipArchiveInputStream.java"
        ],
        "repo": "commons-compress",
        "unit_tests": [
            "ZipArchiveInputStreamTest.java"
        ]
    },
    "commons-compress_d4baeb1": {
        "bug_id": "commons-compress_d4baeb1",
        "commit": "https://github.com/apache/commons-compress/commit/d4baeb15bae488bb7cf534457a9ef65922cb3564",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/commons-compress/blob/d4baeb15bae488bb7cf534457a9ef65922cb3564/src/changes/changes.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/changes/changes.xml?ref=d4baeb15bae488bb7cf534457a9ef65922cb3564",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -44,6 +44,11 @@ The <action> type attribute can be add,update,fix,remove.\n   <body>\n     <release version=\"1.6\" date=\"not released, yet\"\n              description=\"Release 1.6\">\n+      <action type=\"fix\" date=\"2013-04-25\" issue=\"COMPRESS-223\"\n+              due-to=\"Jeremy Gustie\">\n+        TarBuffer.tryToConsumeSecondEOFRecord could throw a\n+        NullPointerException\n+      </action>\n     </release>\n     <release version=\"1.5\" date=\"2013-03-14\"\n              description=\"Release 1.5\">",
                "raw_url": "https://github.com/apache/commons-compress/raw/d4baeb15bae488bb7cf534457a9ef65922cb3564/src/changes/changes.xml",
                "sha": "9d2dc1c7923938e432484b1b0ba3e3e137a2abfd",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-compress/blob/d4baeb15bae488bb7cf534457a9ef65922cb3564/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java?ref=d4baeb15bae488bb7cf534457a9ef65922cb3564",
                "deletions": 4,
                "filename": "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
                "patch": "@@ -311,11 +311,11 @@ public TarArchiveEntry getNextTarEntry() throws IOException {\n \n         byte[] headerBuf = buffer.readRecord();\n \n-        if (headerBuf == null) {\n+        if (buffer.isEOFRecord(headerBuf)) {\n             hasHitEOF = true;\n-        } else if (buffer.isEOFRecord(headerBuf)) {\n-            hasHitEOF = true;\n-            buffer.tryToConsumeSecondEOFRecord();\n+            if (headerBuf != null) {\n+                buffer.tryToConsumeSecondEOFRecord();\n+            }\n         }\n \n         return hasHitEOF ? null : headerBuf;",
                "raw_url": "https://github.com/apache/commons-compress/raw/d4baeb15bae488bb7cf534457a9ef65922cb3564/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
                "sha": "d20d039e9b7238332f95b6f6a9ca5adae456816d",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/commons-compress/blob/d4baeb15bae488bb7cf534457a9ef65922cb3564/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java?ref=d4baeb15bae488bb7cf534457a9ef65922cb3564",
                "deletions": 7,
                "filename": "src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java",
                "patch": "@@ -153,12 +153,13 @@ public int getRecordSize() {\n      * @return true if the record data is an End of Archive\n      */\n     public boolean isEOFRecord(byte[] record) {\n-        for (int i = 0, sz = getRecordSize(); i < sz; ++i) {\n-            if (record[i] != 0) {\n-                return false;\n+        if (record != null) {\n+            for (int i = 0, sz = getRecordSize(); i < sz; ++i) {\n+                if (record[i] != 0) {\n+                    return false;\n+                }\n             }\n         }\n-\n         return true;\n     }\n \n@@ -181,7 +182,7 @@ public void skipRecord() throws IOException {\n     /**\n      * Read a record from the input stream and return the data.\n      *\n-     * @return The record data.\n+     * @return The record data or null if EOF has been hit.\n      * @throws IOException on error\n      */\n     public byte[] readRecord() throws IOException {\n@@ -407,12 +408,12 @@ public void close() throws IOException {\n     }\n \n     /**\n-     * Tries to read the next record rewinding the stream if if is not a EOF record.\n+     * Tries to read the next record rewinding the stream if it is not a EOF record.\n      *\n      * <p>This is meant to protect against cases where a tar\n      * implemenation has written only one EOF record when two are\n      * expected.  Actually this won't help since a non-conforming\n-     * implementation likely won't fill full blocks consisting of - be\n+     * implementation likely won't fill full blocks consisting of - by\n      * default - ten records either so we probably have already read\n      * beyond the archive anyway.</p>\n      */",
                "raw_url": "https://github.com/apache/commons-compress/raw/d4baeb15bae488bb7cf534457a9ef65922cb3564/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java",
                "sha": "4e13f54252be75632f00eb8c90a2ede773d7d152",
                "status": "modified"
            }
        ],
        "message": "COMPRESS-223 fix NPE in TarBuffer.tryToConsumeSecondEOFRecord - patch by Jeremy Gustie\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1475758 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-compress/commit/e7587c19b29db21a2cad65ff2ce7b07d88f41f03",
        "patched_files": [
            "TarArchiveInputStream.java"
        ],
        "repo": "commons-compress",
        "unit_tests": [
            "TarArchiveInputStreamTest.java"
        ]
    },
    "commons-compress_df8b3b2": {
        "bug_id": "commons-compress_df8b3b2",
        "commit": "https://github.com/apache/commons-compress/commit/df8b3b2e51a9385e02eba25e72f3927fd1e3ea63",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-compress/blob/df8b3b2e51a9385e02eba25e72f3927fd1e3ea63/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java?ref=df8b3b2e51a9385e02eba25e72f3927fd1e3ea63",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
                "patch": "@@ -334,10 +334,11 @@ private void processZip64Extra(ZipLong size, ZipLong cSize) {\n                                         .HEADER_ID);\n         current.usesZip64 = z64 != null;\n         if (!current.hasDataDescriptor) {\n-            if (current.usesZip64 && (cSize.equals(ZipLong.ZIP64_MAGIC)\n+            if (z64 != null // same as current.usesZip64 but avoids NPE warning\n+                    && (cSize.equals(ZipLong.ZIP64_MAGIC)\n                                       || size.equals(ZipLong.ZIP64_MAGIC))\n                 ) {\n-                current.entry.setCompressedSize(z64.getCompressedSize() // z64 cannot be null here\n+                current.entry.setCompressedSize(z64.getCompressedSize()\n                                                 .getLongValue());\n                 current.entry.setSize(z64.getSize().getLongValue());\n             } else {",
                "raw_url": "https://github.com/apache/commons-compress/raw/df8b3b2e51a9385e02eba25e72f3927fd1e3ea63/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
                "sha": "40a7ed644fd67859888c4ec1e7283ce7333eb5a6",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1482156 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-compress/commit/e1379e2ad42d116c6f2efdba19043d515716c0b6",
        "patched_files": [
            "ZipArchiveInputStream.java"
        ],
        "repo": "commons-compress",
        "unit_tests": [
            "ZipArchiveInputStreamTest.java"
        ]
    },
    "commons-compress_e1379e2": {
        "bug_id": "commons-compress_e1379e2",
        "commit": "https://github.com/apache/commons-compress/commit/e1379e2ad42d116c6f2efdba19043d515716c0b6",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/commons-compress/blob/e1379e2ad42d116c6f2efdba19043d515716c0b6/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java?ref=e1379e2ad42d116c6f2efdba19043d515716c0b6",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
                "patch": "@@ -609,11 +609,17 @@ private void readFilesInfo(final DataInput header, final Archive archive) throws\n                 }\n                 case NID.kEmptyFile: {\n                     debug(\"  kEmptyFile\");\n+                    if (isEmptyStream == null) { // protect against NPE\n+                        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n+                    }\n                     isEmptyFile = readBits(header, isEmptyStream.cardinality());\n                     break;\n                 }\n                 case NID.kAnti: {\n                     debug(\"  kAnti\");\n+                    if (isEmptyStream == null) { // protect against NPE\n+                        throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n+                    }\n                     isAnti = readBits(header, isEmptyStream.cardinality());\n                     break;\n                 }",
                "raw_url": "https://github.com/apache/commons-compress/raw/e1379e2ad42d116c6f2efdba19043d515716c0b6/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
                "sha": "887b97a8e0036c72b0d9278642cdf55f3efce290",
                "status": "modified"
            }
        ],
        "message": "Protect against NPE; throw more specific exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1482155 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-compress/commit/9ad93a932d19c46edf40d8e48f843877fa60de48",
        "patched_files": [
            "SevenZFile.java"
        ],
        "repo": "commons-compress",
        "unit_tests": [
            "SevenZFileTest.java"
        ]
    }
}