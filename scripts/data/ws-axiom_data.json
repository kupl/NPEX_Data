[
    {
        "commit": "https://github.com/apache/ws-axiom/commit/d7dc3c48e004afd623fc806dbcac0dc9052fc268",
        "file": [
            {
                "patch": "@@ -38,6 +38,13 @@\n     public DefaultOMMetaFactoryLocator() {\n         ClassLoader classLoader = DefaultOMMetaFactoryLocator.class.getClassLoader();\n         \n+        // Fall back to the system class loader if Axiom is loaded form the bootstrap\n+        // class loader (There is no good reason to do that, but we don't want people to\n+        // blame Axiom if things break).\n+        if (classLoader == null) {\n+            classLoader = ClassLoader.getSystemClassLoader();\n+        }\n+        \n         Loader loader = new DefaultLoader(classLoader);\n         \n         List<Implementation> implementations = new ArrayList<Implementation>();",
                "additions": 7,
                "raw_url": "https://github.com/apache/ws-axiom/raw/d7dc3c48e004afd623fc806dbcac0dc9052fc268/axiom-api/src/main/java/org/apache/axiom/locator/DefaultOMMetaFactoryLocator.java",
                "status": "modified",
                "changes": 7,
                "deletions": 0,
                "sha": "dd3c68dd19f431c28b6319c154e31af25c5ab170",
                "blob_url": "https://github.com/apache/ws-axiom/blob/d7dc3c48e004afd623fc806dbcac0dc9052fc268/axiom-api/src/main/java/org/apache/axiom/locator/DefaultOMMetaFactoryLocator.java",
                "filename": "axiom-api/src/main/java/org/apache/axiom/locator/DefaultOMMetaFactoryLocator.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/axiom-api/src/main/java/org/apache/axiom/locator/DefaultOMMetaFactoryLocator.java?ref=d7dc3c48e004afd623fc806dbcac0dc9052fc268"
            }
        ],
        "bug_id": "ws-axiom_1",
        "parent": "https://github.com/apache/ws-axiom/commit/ee5eb6ad929038d5ae84faa309a3a60baf0b7df0",
        "message": "Avoid NullPointerException in DefaultOMMetaFactoryLocator in weird deployment scenarios.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba",
        "file": [
            {
                "patch": "@@ -141,6 +141,9 @@ public static void addChild(IContainer container, OMNode omNode, boolean fromBui\n     }\n     \n     public static void build(IContainer container) {\n+        if (container.getState() == IContainer.DISCARDED) {\n+            throw new NodeUnavailableException();\n+        }\n         OMXMLParserWrapper builder = container.getBuilder();\n         if (builder != null && builder.isCompleted()) {\n             log.debug(\"Builder is already complete.\");",
                "additions": 3,
                "raw_url": "https://github.com/apache/ws-axiom/raw/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-common-impl/src/main/java/org/apache/axiom/om/impl/common/OMContainerHelper.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "6c42ae9e9b7b3dd93b077686f3baca5ab486e68b",
                "blob_url": "https://github.com/apache/ws-axiom/blob/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-common-impl/src/main/java/org/apache/axiom/om/impl/common/OMContainerHelper.java",
                "filename": "modules/axiom-common-impl/src/main/java/org/apache/axiom/om/impl/common/OMContainerHelper.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-common-impl/src/main/java/org/apache/axiom/om/impl/common/OMContainerHelper.java?ref=838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba"
            },
            {
                "patch": "@@ -166,10 +166,12 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.om.element.TestAddAttributeWithoutNamespace(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddChild(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddChild2(metaFactory));\n+        addTest(new org.apache.axiom.ts.om.element.TestAddChildDiscarded(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddChildIncomplete(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddChildWithParent(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddChildWithSameParent(metaFactory, true));\n         addTest(new org.apache.axiom.ts.om.element.TestAddChildWithSameParent(metaFactory, false));\n+        addTest(new org.apache.axiom.ts.om.element.TestBuildDiscarded(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestChildReDeclaringGrandParentsDefaultNSWithPrefix(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestChildReDeclaringParentsDefaultNSWithPrefix(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestCloneOMElement(metaFactory));",
                "additions": 2,
                "raw_url": "https://github.com/apache/ws-axiom/raw/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "8b4d51d4a07929dcdfa98a1eb4bc808599731e8a",
                "blob_url": "https://github.com/apache/ws-axiom/blob/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java?ref=838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba"
            },
            {
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.element;\n+\n+import java.io.StringReader;\n+\n+import org.apache.axiom.om.NodeUnavailableException;\n+import org.apache.axiom.om.OMContainer;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.om.OMNode;\n+import org.apache.axiom.om.OMXMLBuilderFactory;\n+import org.apache.axiom.ts.AxiomTestCase;\n+\n+/**\n+ * Tests the behavior of {@link OMContainer#addChild(OMNode)} if the parent has been discarded. In\n+ * this case the method is expected to throw a {@link NodeUnavailableException}.\n+ */\n+public class TestAddChildDiscarded extends AxiomTestCase {\n+    public TestAddChildDiscarded(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        OMFactory factory = metaFactory.getOMFactory();\n+        OMElement parent = OMXMLBuilderFactory.createOMBuilder(factory, new StringReader(\"<root><a/><b/></root>\")).getDocumentElement();\n+        // Partially build the parent\n+        parent.getFirstOMChild();\n+        parent.discard();\n+        try {\n+            parent.addChild(factory.createOMElement(\"c\", null));\n+            fail(\"Expected NodeUnavailableException\");\n+        } catch (NodeUnavailableException ex) {\n+            // Expected\n+        }\n+    }\n+}",
                "additions": 54,
                "raw_url": "https://github.com/apache/ws-axiom/raw/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddChildDiscarded.java",
                "status": "added",
                "changes": 54,
                "deletions": 0,
                "sha": "9b00f5e82691e2931d4cb7bdcc7a64a8156655a1",
                "blob_url": "https://github.com/apache/ws-axiom/blob/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddChildDiscarded.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddChildDiscarded.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddChildDiscarded.java?ref=838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba"
            },
            {
                "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.element;\n+\n+import java.io.StringReader;\n+\n+import org.apache.axiom.om.NodeUnavailableException;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.om.OMSerializable;\n+import org.apache.axiom.om.OMXMLBuilderFactory;\n+import org.apache.axiom.ts.AxiomTestCase;\n+\n+/**\n+ * Tests the behavior of {@link OMSerializable#build()} on an {@link OMElement} that has been\n+ * discarded. In this case the method is expected to throw a {@link NodeUnavailableException}.\n+ */\n+public class TestBuildDiscarded extends AxiomTestCase {\n+    public TestBuildDiscarded(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        OMFactory factory = metaFactory.getOMFactory();\n+        OMElement parent = OMXMLBuilderFactory.createOMBuilder(factory, new StringReader(\"<root><a/><b/></root>\")).getDocumentElement();\n+        // Partially build the parent\n+        parent.getFirstOMChild();\n+        parent.discard();\n+        try {\n+            parent.build();\n+            fail(\"Expected NodeUnavailableException\");\n+        } catch (NodeUnavailableException ex) {\n+            // Expected\n+        }\n+    }\n+}",
                "additions": 53,
                "raw_url": "https://github.com/apache/ws-axiom/raw/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestBuildDiscarded.java",
                "status": "added",
                "changes": 53,
                "deletions": 0,
                "sha": "735fec5eeb3e9bace007402286a5aa68d69510a8",
                "blob_url": "https://github.com/apache/ws-axiom/blob/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestBuildDiscarded.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestBuildDiscarded.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestBuildDiscarded.java?ref=838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba"
            }
        ],
        "bug_id": "ws-axiom_2",
        "parent": "https://github.com/apache/ws-axiom/commit/03075b3cff67c791e8d09079e6a866e6acbb0aaa",
        "message": "Fixed a NullPointerException.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/65bdfc79283d62052adef2da5a04096af8a1e05a",
        "file": [
            {
                "patch": "@@ -39,6 +39,7 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.dom.attr.TestGetFirstChild(dbf));\n         addTest(new org.apache.axiom.ts.dom.attr.TestGetValueWithMultipleChildren(dbf));\n         addTest(new org.apache.axiom.ts.dom.attr.TestLookupNamespaceURI(dbf));\n+        addTest(new org.apache.axiom.ts.dom.attr.TestLookupNamespaceURIWithoutOwnerElement(dbf));\n         addTest(new org.apache.axiom.ts.dom.attr.TestSetPrefixNotNullWithNamespace(dbf));\n         addTest(new org.apache.axiom.ts.dom.attr.TestSetPrefixNotNullWithoutNamespace(dbf));\n         addTest(new org.apache.axiom.ts.dom.builder.TestParseURI(dbf));",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/65bdfc79283d62052adef2da5a04096af8a1e05a/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "8d2899f04e77e2b4c9effe62b2cc0d52baf887e8",
                "blob_url": "https://github.com/apache/ws-axiom/blob/65bdfc79283d62052adef2da5a04096af8a1e05a/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java",
                "filename": "modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java?ref=65bdfc79283d62052adef2da5a04096af8a1e05a"
            },
            {
                "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.dom.attr;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import org.apache.axiom.ts.dom.DOMTestCase;\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+\n+/**\n+ * Tests the behavior of {@link Node#lookupNamespaceURI(String)} on an attribute node that has no\n+ * owner element.\n+ */\n+public class TestLookupNamespaceURIWithoutOwnerElement extends DOMTestCase {\n+    public TestLookupNamespaceURIWithoutOwnerElement(DocumentBuilderFactory dbf) {\n+        super(dbf);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        Document document = dbf.newDocumentBuilder().newDocument();\n+        Attr attr = document.createAttributeNS(\"urn:test\", \"p:attr\");\n+        assertNull(attr.lookupNamespaceURI(\"p\"));\n+    }\n+}",
                "additions": 42,
                "raw_url": "https://github.com/apache/ws-axiom/raw/65bdfc79283d62052adef2da5a04096af8a1e05a/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/attr/TestLookupNamespaceURIWithoutOwnerElement.java",
                "status": "added",
                "changes": 42,
                "deletions": 0,
                "sha": "62cd46f96c3fea2c3cf5afb3f86451703618f393",
                "blob_url": "https://github.com/apache/ws-axiom/blob/65bdfc79283d62052adef2da5a04096af8a1e05a/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/attr/TestLookupNamespaceURIWithoutOwnerElement.java",
                "filename": "modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/attr/TestLookupNamespaceURIWithoutOwnerElement.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/attr/TestLookupNamespaceURIWithoutOwnerElement.java?ref=65bdfc79283d62052adef2da5a04096af8a1e05a"
            },
            {
                "patch": "@@ -309,12 +309,8 @@ public String lookupNamespaceURI(String specifiedPrefix) {\n             // type is unknown\n             return null;\n         case Node.ATTRIBUTE_NODE: {\n-            NodeImpl ownerNode = (NodeImpl) ((Attr) this).getOwnerElement();\n-            if (ownerNode.getNodeType() == Node.ELEMENT_NODE) {\n-                return ownerNode.lookupNamespaceURI(specifiedPrefix);\n-\n-            }\n-            return null;\n+            Element ownerElement = ((Attr) this).getOwnerElement();\n+            return ownerElement == null ? null : ownerElement.lookupNamespaceURI(specifiedPrefix);\n         }\n         default: {\n             NodeImpl ancestor = (NodeImpl) getElementAncestor(this);",
                "additions": 2,
                "raw_url": "https://github.com/apache/ws-axiom/raw/65bdfc79283d62052adef2da5a04096af8a1e05a/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java",
                "status": "modified",
                "changes": 8,
                "deletions": 6,
                "sha": "f9399866ac49ed0d02991c95e35ab1e51f34ded8",
                "blob_url": "https://github.com/apache/ws-axiom/blob/65bdfc79283d62052adef2da5a04096af8a1e05a/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java?ref=65bdfc79283d62052adef2da5a04096af8a1e05a"
            }
        ],
        "bug_id": "ws-axiom_3",
        "parent": "https://github.com/apache/ws-axiom/commit/faf1ec9f0ffc125f90492ee0adab00e911bee3c6",
        "message": "AXIOM-423: Fixed a NullPointerException.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/9567e52059e79fe3dddbe89c567d7c9e9275aaab",
        "file": [
            {
                "patch": "@@ -198,10 +198,11 @@ public int next() throws OMException {\n                 return token;\n             }\n            \n-            // The current token should be the same as the \n-            // one just obtained.  This bit of code is used to \n-            // detect invalid parser state.\n-            if (doTrace) {\n+            // Note: if autoClose is enabled, then the parser may be null at this point\n+            if (doTrace && parser != null) {\n+                // The current token should be the same as the \n+                // one just obtained.  This bit of code is used to \n+                // detect invalid parser state.\n                 int currentParserToken = parser.getEventType();\n                 if (currentParserToken != token) {\n \n@@ -218,10 +219,8 @@ public int next() throws OMException {\n                                      \"The parser is \" + parser);\n                      */\n                 }\n-            }\n             \n-            // Now log the current state of the parser\n-            if (doTrace) {\n+                // Now log the current state of the parser\n                 logParserState();\n             }\n            ",
                "additions": 6,
                "raw_url": "https://github.com/apache/ws-axiom/raw/9567e52059e79fe3dddbe89c567d7c9e9275aaab/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java",
                "status": "modified",
                "changes": 13,
                "deletions": 7,
                "sha": "7d76af589f7a791c71b0e11552e569f095ce06de",
                "blob_url": "https://github.com/apache/ws-axiom/blob/9567e52059e79fe3dddbe89c567d7c9e9275aaab/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java?ref=9567e52059e79fe3dddbe89c567d7c9e9275aaab"
            }
        ],
        "bug_id": "ws-axiom_4",
        "parent": "https://github.com/apache/ws-axiom/commit/35876c9717b2e6f5240c2e152fdecbce6d51d0b7",
        "message": "Fixed a potential NullPointerException when debug logs are enabled.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/376edbc63759e008571d7c1a36a09331acbfe5c8",
        "file": [
            {
                "patch": "@@ -54,25 +54,28 @@ private static int getEncodedSize(int unencodedSize) {\n         return (unencodedSize+2) / 3 * 4;\n     }\n     \n+    private static int getBufferSize(DataHandler dh) {\n+        long size = DataSourceUtils.getSize(dh.getDataSource());\n+        if (size == -1) {\n+            // Use a reasonable default capacity.\n+            return 4096;\n+        } else if (size > Integer.MAX_VALUE) {\n+            throw new IllegalArgumentException(\"DataHandler is too large to encode to string\");\n+        } else {\n+            return getEncodedSize((int)size);\n+        }\n+    }\n+    \n     /**\n-     * Get a base64 representation of the content of a given {@link DataHandler}.\n+     * Get a base64 representation of the content of a given {@link DataHandler} as a string.\n      * This method will try to carry out the encoding operation in the most efficient way.\n      * \n      * @param dh the data handler with the content to encode\n      * @return the base64 encoded content\n      * @throws IOException if an I/O error occurs when reading the content of the data handler\n      */\n     public static String encode(DataHandler dh) throws IOException {\n-        long size = DataSourceUtils.getSize(dh.getDataSource());\n-        StringBuilder buffer;\n-        if (size == -1) {\n-            // Use a reasonable default capacity (better than the default of 16).\n-            buffer = new StringBuilder(4096);\n-        } else if (size > Integer.MAX_VALUE) {\n-            throw new IllegalArgumentException(\"DataHandler is too large to encode to string\");\n-        } else {\n-            buffer = new StringBuilder(getEncodedSize((int)size));\n-        }\n+        StringBuilder buffer = new StringBuilder(getBufferSize(dh));\n         Base64EncodingStringBufferOutputStream out = new Base64EncodingStringBufferOutputStream(buffer);\n         // Always prefer writeTo, because getInputStream will create a thread and a pipe if\n         // the DataHandler was constructed using an object instead of a DataSource\n@@ -81,6 +84,22 @@ public static String encode(DataHandler dh) throws IOException {\n         return buffer.toString();\n     }\n \n+    /**\n+     * Get a base64 representation of the content of a given {@link DataHandler} as a char array.\n+     * This method will try to carry out the encoding operation in the most efficient way.\n+     * \n+     * @param dh the data handler with the content to encode\n+     * @return the base64 encoded content\n+     * @throws IOException if an I/O error occurs when reading the content of the data handler\n+     */\n+    public static char[] encodeToCharArray(DataHandler dh) throws IOException {\n+        NoCopyCharArrayWriter buffer = new NoCopyCharArrayWriter(getBufferSize(dh));\n+        Base64EncodingWriterOutputStream out = new Base64EncodingWriterOutputStream(buffer);\n+        dh.writeTo(out);\n+        out.complete();\n+        return buffer.toCharArray();\n+    }\n+\n     private static int decode0(char[] ibuf, byte[] obuf, int wp) {\n         int outlen = 3;\n         if (ibuf[3] == S_BASE64PAD)",
                "additions": 30,
                "raw_url": "https://github.com/apache/ws-axiom/raw/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-api/src/main/java/org/apache/axiom/util/base64/Base64Utils.java",
                "status": "modified",
                "changes": 41,
                "deletions": 11,
                "sha": "56fdcb399c39dbc6f96cd31d8e90ab4285ccfb3a",
                "blob_url": "https://github.com/apache/ws-axiom/blob/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-api/src/main/java/org/apache/axiom/util/base64/Base64Utils.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/util/base64/Base64Utils.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/util/base64/Base64Utils.java?ref=376edbc63759e008571d7c1a36a09331acbfe5c8"
            },
            {
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.util.base64;\n+\n+import java.io.CharArrayWriter;\n+\n+/**\n+ * Modified {@link CharArrayWriter} that returns the internal buffer (instead of a copy) if the\n+ * buffer has just the right size, i.e. if the size of the buffer is equal to the number of\n+ * characters that have been written.\n+ */\n+class NoCopyCharArrayWriter extends CharArrayWriter {\n+    NoCopyCharArrayWriter(int expectedSize) {\n+        super(expectedSize);\n+    }\n+\n+    public char[] toCharArray() {\n+        return count == buf.length ? buf : super.toCharArray();\n+    }\n+}",
                "additions": 36,
                "raw_url": "https://github.com/apache/ws-axiom/raw/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-api/src/main/java/org/apache/axiom/util/base64/NoCopyCharArrayWriter.java",
                "status": "added",
                "changes": 36,
                "deletions": 0,
                "sha": "8a275d8320de59dd2f77fb46d1bd5d8f7c302dd5",
                "blob_url": "https://github.com/apache/ws-axiom/blob/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-api/src/main/java/org/apache/axiom/util/base64/NoCopyCharArrayWriter.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/util/base64/NoCopyCharArrayWriter.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/util/base64/NoCopyCharArrayWriter.java?ref=376edbc63759e008571d7c1a36a09331acbfe5c8"
            },
            {
                "patch": "@@ -269,7 +269,17 @@ public String getData() throws DOMException {\n     }\n \n     public char[] getTextCharacters() {\n-        return charArray != null ? charArray : this.textValue.toCharArray();\n+        if (charArray != null) {\n+            return charArray;\n+        } else if (textValue != null) {\n+            return textValue.toCharArray();\n+        } else {\n+            try {\n+                return Base64Utils.encodeToCharArray((DataHandler)getDataHandler());\n+            } catch (IOException ex) {\n+                throw new OMException(ex);\n+            }\n+        }\n     }\n \n     public boolean isCharacters() {",
                "additions": 11,
                "raw_url": "https://github.com/apache/ws-axiom/raw/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/TextNodeImpl.java",
                "status": "modified",
                "changes": 12,
                "deletions": 1,
                "sha": "5b056cccc14376253ef24e5c310f57fe5928a96c",
                "blob_url": "https://github.com/apache/ws-axiom/blob/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/TextNodeImpl.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/TextNodeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/TextNodeImpl.java?ref=376edbc63759e008571d7c1a36a09331acbfe5c8"
            },
            {
                "patch": "@@ -255,7 +255,17 @@ public String getText() throws OMException {\n     }\n \n     public char[] getTextCharacters() {\n-        return charArray != null ? charArray : value.toCharArray();\n+        if (charArray != null) {\n+            return charArray;\n+        } else if (value != null) {\n+            return value.toCharArray();\n+        } else {\n+            try {\n+                return Base64Utils.encodeToCharArray((DataHandler)getDataHandler());\n+            } catch (IOException ex) {\n+                throw new OMException(ex);\n+            }\n+        }\n     }\n \n     public boolean isCharacters() {",
                "additions": 11,
                "raw_url": "https://github.com/apache/ws-axiom/raw/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMTextImpl.java",
                "status": "modified",
                "changes": 12,
                "deletions": 1,
                "sha": "0b29242e11bcb634d649b063c12eb862e9dfa6b0",
                "blob_url": "https://github.com/apache/ws-axiom/blob/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMTextImpl.java",
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMTextImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMTextImpl.java?ref=376edbc63759e008571d7c1a36a09331acbfe5c8"
            },
            {
                "patch": "@@ -475,6 +475,7 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.om.pi.TestDigest(metaFactory));\n         addTest(new org.apache.axiom.ts.om.text.TestBase64Streaming(metaFactory));\n         addTest(new org.apache.axiom.ts.om.text.TestDigest(metaFactory));\n+        addTest(new org.apache.axiom.ts.om.text.TestGetTextCharactersFromDataHandler(metaFactory));\n         Method[] methods = AXIOMXPathTestCase.class.getMethods();\n         for (int i=0; i<methods.length; i++) {\n             String methodName = methods[i].getName();",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "12d27d322a5df29b6f7a068b900ac5ced54e0e51",
                "blob_url": "https://github.com/apache/ws-axiom/blob/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java?ref=376edbc63759e008571d7c1a36a09331acbfe5c8"
            },
            {
                "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.text;\n+\n+import javax.activation.DataHandler;\n+\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.om.OMText;\n+import org.apache.axiom.ts.AxiomTestCase;\n+import org.apache.axiom.util.base64.Base64Utils;\n+\n+/**\n+ * Tests that {@link OMText#getTextCharacters()} returns the expected result for an {@link OMText}\n+ * node backed by a {@link DataHandler}. This is a regression test for <a\n+ * href=\"https://issues.apache.org/jira/browse/AXIOM-442\">AXIOM-442</a>.\n+ */\n+public class TestGetTextCharactersFromDataHandler extends AxiomTestCase {\n+    public TestGetTextCharactersFromDataHandler(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        DataHandler dh = new DataHandler(\"test content\", \"text/plain; charset=utf-8\");\n+        OMText text = metaFactory.getOMFactory().createOMText(dh, true);\n+        char[] chars = text.getTextCharacters();\n+        byte[] decoded = Base64Utils.decode(chars, 0, chars.length);\n+        assertEquals(\"test content\", new String(decoded, \"utf-8\"));\n+    }\n+}",
                "additions": 45,
                "raw_url": "https://github.com/apache/ws-axiom/raw/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/text/TestGetTextCharactersFromDataHandler.java",
                "status": "added",
                "changes": 45,
                "deletions": 0,
                "sha": "aafeb8d49a79a1f28f51372cf3a3cfbf6ac46026",
                "blob_url": "https://github.com/apache/ws-axiom/blob/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/text/TestGetTextCharactersFromDataHandler.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/text/TestGetTextCharactersFromDataHandler.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/text/TestGetTextCharactersFromDataHandler.java?ref=376edbc63759e008571d7c1a36a09331acbfe5c8"
            }
        ],
        "bug_id": "ws-axiom_5",
        "parent": "https://github.com/apache/ws-axiom/commit/70ab6086f8ae92d72679b2dc1b7c5d94f08a1d6c",
        "message": "AXIOM-442: Fixed a NullPointerException in OMText#getTextCharacters().",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/2599637bb2555d78197546772192a3a0b04bd125",
        "file": [
            {
                "patch": "@@ -65,6 +65,7 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.dom.document.TestGetDomConfigDefaults(dbf));\n         addTest(new org.apache.axiom.ts.dom.document.TestGetOwnerDocument(dbf));\n         addTest(new org.apache.axiom.ts.dom.document.TestLookupNamespaceURI(dbf));\n+        addTest(new org.apache.axiom.ts.dom.document.TestLookupNamespaceURIWithEmptyDocument(dbf));\n         addTest(new org.apache.axiom.ts.dom.document.TestNormalizeDocumentNamespace(dbf));\n         addTest(new org.apache.axiom.ts.dom.document.TestTransformerWithIdentityStylesheet(dbf, org.apache.xalan.processor.TransformerFactoryImpl.class));\n         addTest(new org.apache.axiom.ts.dom.document.TestTransformerWithIdentityStylesheet(dbf, net.sf.saxon.TransformerFactoryImpl.class));",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "329973a9a4e3831368a1aeb94e1f28ae18f95ac8",
                "blob_url": "https://github.com/apache/ws-axiom/blob/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java",
                "filename": "modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java?ref=2599637bb2555d78197546772192a3a0b04bd125"
            },
            {
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.dom.document;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import org.apache.axiom.ts.dom.DOMTestCase;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+\n+/**\n+ * Tests the behavior of {@link Node#lookupNamespaceURI(String)} on an empty {@link Document}.\n+ */\n+public class TestLookupNamespaceURIWithEmptyDocument extends DOMTestCase {\n+    public TestLookupNamespaceURIWithEmptyDocument(DocumentBuilderFactory dbf) {\n+        super(dbf);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        Document document = dbf.newDocumentBuilder().newDocument();\n+        assertNull(document.lookupNamespaceURI(\"p\"));\n+    }\n+}",
                "additions": 39,
                "raw_url": "https://github.com/apache/ws-axiom/raw/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/document/TestLookupNamespaceURIWithEmptyDocument.java",
                "status": "added",
                "changes": 39,
                "deletions": 0,
                "sha": "40166970f3d6ddeecac262b54ddbff2ff777fc99",
                "blob_url": "https://github.com/apache/ws-axiom/blob/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/document/TestLookupNamespaceURIWithEmptyDocument.java",
                "filename": "modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/document/TestLookupNamespaceURIWithEmptyDocument.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/document/TestLookupNamespaceURIWithEmptyDocument.java?ref=2599637bb2555d78197546772192a3a0b04bd125"
            },
            {
                "patch": "@@ -23,13 +23,18 @@\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.axiom.ts.dom.document.TestLookupNamespaceURIWithEmptyDocument;\n import org.apache.xerces.jaxp.DocumentBuilderFactoryImpl;\n \n public class XercesTest extends TestCase {\n     public static TestSuite suite() {\n         DocumentBuilderFactory dbf = new DocumentBuilderFactoryImpl();\n         dbf.setNamespaceAware(true);\n         DOMTestSuiteBuilder builder = new DOMTestSuiteBuilder(dbf);\n+        \n+        // XERCESJ-1582\n+        builder.exclude(TestLookupNamespaceURIWithEmptyDocument.class);\n+        \n         return builder.build();\n     }\n }",
                "additions": 5,
                "raw_url": "https://github.com/apache/ws-axiom/raw/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom-testsuite/src/test/java/org/apache/axiom/ts/dom/XercesTest.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "348d85c2f66bf3ae07a8b047af1b30c1f9728ff3",
                "blob_url": "https://github.com/apache/ws-axiom/blob/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom-testsuite/src/test/java/org/apache/axiom/ts/dom/XercesTest.java",
                "filename": "modules/axiom-dom-testsuite/src/test/java/org/apache/axiom/ts/dom/XercesTest.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom-testsuite/src/test/java/org/apache/axiom/ts/dom/XercesTest.java?ref=2599637bb2555d78197546772192a3a0b04bd125"
            },
            {
                "patch": "@@ -34,6 +34,7 @@\n import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;\n import org.w3c.dom.DOMException;\n import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n import org.w3c.dom.NamedNodeMap;\n import org.w3c.dom.Node;\n import org.w3c.dom.UserDataHandler;\n@@ -297,8 +298,9 @@ public String lookupNamespaceURI(String specifiedPrefix) {\n \n         }\n         case Node.DOCUMENT_NODE: {\n-            return ((NodeImpl) ((Document) this).getDocumentElement())\n-                    .lookupNamespaceURI(specifiedPrefix);\n+            Element documentElement = ((Document) this).getDocumentElement();\n+            return documentElement == null ? null\n+                    : documentElement.lookupNamespaceURI(specifiedPrefix);\n         }\n         case Node.ENTITY_NODE:\n         case Node.NOTATION_NODE:",
                "additions": 4,
                "raw_url": "https://github.com/apache/ws-axiom/raw/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "56590eedb0296df9cc8dc05935e6a12e994d0972",
                "blob_url": "https://github.com/apache/ws-axiom/blob/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java?ref=2599637bb2555d78197546772192a3a0b04bd125"
            }
        ],
        "bug_id": "ws-axiom_6",
        "parent": "https://github.com/apache/ws-axiom/commit/5854cbc4bbb84a7473cc5be293d4417e09d28f6f",
        "message": "AXIOM-423: Fixed a NullPointerException in the lookupNamespaceURI implementation.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/e64eac41178b38d59ff987703c7f2dce2caf17d9",
        "file": [
            {
                "patch": "@@ -35,7 +35,7 @@\n \n     protected OMAttribute langAttr;\n \n-    protected OMNamespace langNamespace = null;\n+    protected final OMNamespace langNamespace;\n \n     protected SOAPFaultTextImpl(SOAPFaultReason parent, SOAPFactory factory)\n             throws SOAPProcessingException {\n@@ -49,6 +49,9 @@ protected SOAPFaultTextImpl(SOAPFaultReason parent,\n                                 OMXMLParserWrapper builder, SOAPFactory factory) {\n         super(parent, SOAP12Constants.SOAP_FAULT_TEXT_LOCAL_NAME, builder,\n               factory);\n+        this.langNamespace = factory.createOMNamespace(\n+                SOAP12Constants.SOAP_FAULT_TEXT_LANG_ATTR_NS_URI,\n+                SOAP12Constants.SOAP_FAULT_TEXT_LANG_ATTR_NS_PREFIX);\n     }\n \n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/ws-axiom/raw/e64eac41178b38d59ff987703c7f2dce2caf17d9/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPFaultTextImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "622f845c0600c17dada6ac5e34c227f638ff2b4b",
                "blob_url": "https://github.com/apache/ws-axiom/blob/e64eac41178b38d59ff987703c7f2dce2caf17d9/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPFaultTextImpl.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPFaultTextImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPFaultTextImpl.java?ref=e64eac41178b38d59ff987703c7f2dce2caf17d9"
            }
        ],
        "bug_id": "ws-axiom_7",
        "parent": "https://github.com/apache/ws-axiom/commit/0e0c9cd97de8f7e1b7a1cb2d96f19660306e1451",
        "message": "SOAPFaultTextImpl (DOOM): Added missing initialization for langNamespace causing NullPointerException in getLang().",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/4704afa414da45df1efc10813d4bf7cccab00fa6",
        "file": [
            {
                "patch": "@@ -632,8 +632,11 @@ public static boolean isAssociated(String prefix, String namespace, XMLStreamWri\n             // It is possible that the namespace is associated with multiple prefixes,\n             // So try getting the namespace as a second step.\n             if (writerPrefix != null) {\n-                String writerNS = writer.getNamespaceContext().getNamespaceURI(prefix);\n-                return namespace.equals(writerNS);\n+                NamespaceContext nsContext = writer.getNamespaceContext();\n+                if(nsContext != null) {\n+                    String writerNS = nsContext.getNamespaceURI(prefix);\n+                    return namespace.equals(writerNS);\n+                }\n             }\n             return false;\n         } else {\n@@ -664,9 +667,12 @@ public static boolean isAssociated(String prefix, String namespace, XMLStreamWri\n             \n             \n             // Fallback to using the namespace context\n-            String writerNS = writer.getNamespaceContext().getNamespaceURI(\"\");\n-            if (writerNS != null && writerNS.length() > 0) {\n-                return false;\n+            NamespaceContext nsContext = writer.getNamespaceContext();\n+            if (nsContext != null) {\n+                String writerNS = nsContext.getNamespaceURI(\"\");\n+                if (writerNS != null && writerNS.length() > 0) {\n+                    return false;\n+                }\n             }\n             return true;\n         }",
                "additions": 11,
                "raw_url": "https://github.com/apache/ws-axiom/raw/4704afa414da45df1efc10813d4bf7cccab00fa6/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/util/OMSerializerUtil.java",
                "status": "modified",
                "changes": 16,
                "deletions": 5,
                "sha": "77a1b4445af7e5358cdf68f2e1d741a7876411f9",
                "blob_url": "https://github.com/apache/ws-axiom/blob/4704afa414da45df1efc10813d4bf7cccab00fa6/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/util/OMSerializerUtil.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/impl/util/OMSerializerUtil.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/util/OMSerializerUtil.java?ref=4704afa414da45df1efc10813d4bf7cccab00fa6"
            }
        ],
        "bug_id": "ws-axiom_8",
        "parent": "https://github.com/apache/ws-axiom/commit/69b72b7e76f0c1cb9d97ef086697458eb6784e34",
        "message": "Fix for AXIS2-3369 - NullPointerException in org.apache.axiom.om.impl.util.OMSerializerUtil",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/2c490458d11248097ec5e52136da3811ef307549",
        "file": [
            {
                "patch": "@@ -167,12 +167,13 @@ private static StAXDialect detectDialect(URL rootUrl) {\n         }\n         // For the moment, the dialect detection is quite simple, but in the future we will probably\n         // have to differentiate by version number\n-        if (vendor.toLowerCase().indexOf(\"woodstox\") != -1) {\n-            return WoodstoxDialect.INSTANCE;\n-        } else if (title.indexOf(\"SJSXP\") != -1) {\n-            return SJSXPDialect.INSTANCE;\n-        } else {\n-            return UnknownStAXDialect.INSTANCE;\n+        if(vendor != null) {\n+            if (vendor.toLowerCase().indexOf(\"woodstox\") != -1) {\n+                return WoodstoxDialect.INSTANCE;\n+            } else if (title.indexOf(\"SJSXP\") != -1) {\n+                return SJSXPDialect.INSTANCE;\n+            } \n         }\n+        return UnknownStAXDialect.INSTANCE;\n     }\n }",
                "additions": 7,
                "raw_url": "https://github.com/apache/ws-axiom/raw/2c490458d11248097ec5e52136da3811ef307549/modules/axiom-api/src/main/java/org/apache/axiom/util/stax/dialect/StAXDialectDetector.java",
                "status": "modified",
                "changes": 13,
                "deletions": 6,
                "sha": "e7eae19ce23652f7b2ff9c784263a8f83183d4a0",
                "blob_url": "https://github.com/apache/ws-axiom/blob/2c490458d11248097ec5e52136da3811ef307549/modules/axiom-api/src/main/java/org/apache/axiom/util/stax/dialect/StAXDialectDetector.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/util/stax/dialect/StAXDialectDetector.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/util/stax/dialect/StAXDialectDetector.java?ref=2c490458d11248097ec5e52136da3811ef307549"
            }
        ],
        "bug_id": "ws-axiom_9",
        "parent": "https://github.com/apache/ws-axiom/commit/3fdfa935adb55c41adf6fb6cb4cac1312e97efb4",
        "message": "fix NPE",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/e5341a76c6f3d17e46067af2546551fe63627a35",
        "file": [
            {
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.axiom.om.util.ElementHelper;\n import org.w3c.dom.Attr;\n import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.w3c.dom.NamedNodeMap;\n import org.w3c.dom.Node;\n@@ -1277,6 +1278,7 @@ public NamedNodeMap getAttributes() {\n                 // check if the parent of this element has the same namespace\n                 // as the default and if NOT add the attr\n                 boolean parentHasSameDefaultNS = this.parentNode != null &&\n+                        this.parentNode.getNamespaceURI() != null &&\n                         this.parentNode.getNamespaceURI().equals(this.getNamespaceURI()) &&\n                         (this.parentNode.getPrefix() == null ||\n                                 this.parentNode.getPrefix().equals(\"\"));",
                "additions": 2,
                "raw_url": "https://github.com/apache/ws-axiom/raw/e5341a76c6f3d17e46067af2546551fe63627a35/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "1250427d395fd2354eed7387611f60efa9809e7c",
                "blob_url": "https://github.com/apache/ws-axiom/blob/e5341a76c6f3d17e46067af2546551fe63627a35/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java?ref=e5341a76c6f3d17e46067af2546551fe63627a35"
            }
        ],
        "bug_id": "ws-axiom_10",
        "parent": "https://github.com/apache/ws-axiom/commit/60f861511f93b48d0c28054444fc3102881c06c4",
        "message": "Prevent NPE",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/a1ab8a52cdfe4f23c3a0c2bbf3aaad4c296c041f",
        "file": [
            {
                "patch": "@@ -40,7 +40,8 @@ public CharacterImpl(DocumentImpl ownerNode, OMFactory factory) {\n \n \tpublic CharacterImpl(DocumentImpl ownerNode, String value, OMFactory factory){\n \t\tsuper(ownerNode, factory);\n-\t\tthis.textValue = new StringBuffer(value);\n+        this.textValue = (value != null) ? new StringBuffer(value)\n+                : new StringBuffer(\"\");\n \t}\n \t\n \t///\n@@ -111,7 +112,7 @@ public String getData() throws DOMException {\n \t * Inserts a string at the specified offset.\n \t */\n \tpublic void insertData(int offset, String data) throws DOMException {\n-\t\tint length = this.textValue.length();\n+\t\tint length = this.getLength();\n \t\t\n \t\tif (this.isReadonly()) {\n \t\t\tthrow new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,\n@@ -136,7 +137,7 @@ public void insertData(int offset, String data) throws DOMException {\n \t */\n \tpublic void setData(String data) throws DOMException {\n \t\tif (!this.isReadonly()) {\n-\t\t\tthis.textValue.replace(0,textValue.length(), data);\n+\t\t\tthis.textValue.replace(0,this.getLength(), data);\n \t\t} else {\n \t\t\tthrow new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,\n \t\t\t\t\tDOMMessageFormatter.formatMessage(\n@@ -152,7 +153,7 @@ public void setData(String data) throws DOMException {\n      * returned.\n \t */\n \tpublic String substringData(int offset, int count) throws DOMException {\n-\t\tif(offset < 0 || offset > this.textValue.length() || count < 0) {\n+\t\tif(offset < 0 || offset > this.getLength() || count < 0) {\n \t\t\tthrow new DOMException(DOMException.INDEX_SIZE_ERR,\n \t\t\t\t\tDOMMessageFormatter.formatMessage(\n \t\t\t\t\t\t\tDOMMessageFormatter.DOM_DOMAIN,\n@@ -167,7 +168,7 @@ public String substringData(int offset, int count) throws DOMException {\n \t * Returns the length of the string value.\n \t */\n \tpublic int getLength() {\n-\t\treturn this.textValue.length();\n+\t\treturn (this.textValue != null) ? this.textValue.length() : 0;\n \t}\n \t\t\n }",
                "additions": 6,
                "raw_url": "https://github.com/apache/ws-axiom/raw/a1ab8a52cdfe4f23c3a0c2bbf3aaad4c296c041f/src/org/apache/axiom/om/impl/dom/CharacterImpl.java",
                "status": "modified",
                "changes": 11,
                "deletions": 5,
                "sha": "a026b1d2e03bbf9d1b6f665c30053209e8f2a22f",
                "blob_url": "https://github.com/apache/ws-axiom/blob/a1ab8a52cdfe4f23c3a0c2bbf3aaad4c296c041f/src/org/apache/axiom/om/impl/dom/CharacterImpl.java",
                "filename": "src/org/apache/axiom/om/impl/dom/CharacterImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/src/org/apache/axiom/om/impl/dom/CharacterImpl.java?ref=a1ab8a52cdfe4f23c3a0c2bbf3aaad4c296c041f"
            },
            {
                "patch": "@@ -83,7 +83,8 @@\n      */\n     public TextImpl(String text, OMFactory factory) {\n         super(factory);\n-        this.textValue = new StringBuffer(text);\n+        this.textValue = (text != null) ? new StringBuffer(text)\n+                : new StringBuffer(\"\");\n         this.done = true;\n         this.ns = XOP_NS;\n     }",
                "additions": 2,
                "raw_url": "https://github.com/apache/ws-axiom/raw/a1ab8a52cdfe4f23c3a0c2bbf3aaad4c296c041f/src/org/apache/axiom/om/impl/dom/TextImpl.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "070e85e62dde06ed28e84b3019f7d01d5d6a66a4",
                "blob_url": "https://github.com/apache/ws-axiom/blob/a1ab8a52cdfe4f23c3a0c2bbf3aaad4c296c041f/src/org/apache/axiom/om/impl/dom/TextImpl.java",
                "filename": "src/org/apache/axiom/om/impl/dom/TextImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/src/org/apache/axiom/om/impl/dom/TextImpl.java?ref=a1ab8a52cdfe4f23c3a0c2bbf3aaad4c296c041f"
            }
        ],
        "bug_id": "ws-axiom_11",
        "parent": "https://github.com/apache/ws-axiom/commit/c41a0fc4a70908c8a21cb46ab7e368567b549a2a",
        "message": "Preventing NPEs",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/a77608c93d7f15d75dbace2e4ad27ef0e2cedebd",
        "file": [
            {
                "patch": "@@ -51,7 +51,7 @@ public String getContentType() {\n     }\r\n \r\n     public InputStream getInputStream() throws IOException {\r\n-        return new ByteArrayInputStream(data);\r\n+        return new ByteArrayInputStream(data == null ? new byte[0] : data);\r\n     }\r\n \r\n     public String getName() {\r",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/a77608c93d7f15d75dbace2e4ad27ef0e2cedebd/modules/axiom-api/src/main/java/org/apache/axiom/attachments/ByteArrayDataSource.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "74587bedad4d046ea747e92b85c376c7a77aa969",
                "blob_url": "https://github.com/apache/ws-axiom/blob/a77608c93d7f15d75dbace2e4ad27ef0e2cedebd/modules/axiom-api/src/main/java/org/apache/axiom/attachments/ByteArrayDataSource.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/attachments/ByteArrayDataSource.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/attachments/ByteArrayDataSource.java?ref=a77608c93d7f15d75dbace2e4ad27ef0e2cedebd"
            }
        ],
        "bug_id": "ws-axiom_12",
        "parent": "https://github.com/apache/ws-axiom/commit/770fe9903c897705391b55ff7b33af94bd95f4f5",
        "message": "Fix potential NPE",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/1af44f02795573efbe96d5a97820ace3873a6c03",
        "file": [
            {
                "patch": "@@ -191,8 +191,10 @@ public void writeStartDocument(String string, String string1) throws XMLStreamEx\n     }\n \n     public void writeCharacters(String string) throws XMLStreamException {\n-        char[] array = string.toCharArray();\n-        xmlWriter.writeCharacters(array, 0, array.length);\n+        if (string != null) {\n+            char[] array = string.toCharArray();\n+            xmlWriter.writeCharacters(array, 0, array.length);\n+        }\n     }\n \n     public void writeCharacters(char[] chars, int i, int i1) throws XMLStreamException {",
                "additions": 4,
                "raw_url": "https://github.com/apache/ws-axiom/raw/1af44f02795573efbe96d5a97820ace3873a6c03/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/MTOMXMLStreamWriter.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "0cd59e30e2c46eaa6d0662db0664a640da2831d2",
                "blob_url": "https://github.com/apache/ws-axiom/blob/1af44f02795573efbe96d5a97820ace3873a6c03/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/MTOMXMLStreamWriter.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/impl/MTOMXMLStreamWriter.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/MTOMXMLStreamWriter.java?ref=1af44f02795573efbe96d5a97820ace3873a6c03"
            }
        ],
        "bug_id": "ws-axiom_13",
        "parent": "https://github.com/apache/ws-axiom/commit/e6d08723c4406054d65819062dfed2610bdfca57",
        "message": "Ficing a possible NPE",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/94f4e5fb411f40d4f63d3751e9d041ab223ae4c7",
        "file": [
            {
                "patch": "@@ -110,8 +110,11 @@ public RolePlayerChecker(RolePlayer rolePlayer, String namespace) {\n \r\n     public boolean checkHeader(SOAPHeaderBlock header) {\r\n         // If we're filtering on namespace, check that first since the compare is simpler.\r\n-        if ((namespace != null) && !namespace.equals(header.getNamespace().getNamespaceURI())) {\r\n-            return false;\r\n+        if (namespace != null) {\r\n+            OMNamespace headerNamespace = header.getNamespace();\r\n+            if (headerNamespace == null || !namespace.equals(headerNamespace.getNamespaceURI())) {\r\n+                return false;\r\n+            }\r\n         }\r\n \r\n         String role = header.getRole();\r",
                "additions": 5,
                "raw_url": "https://github.com/apache/ws-axiom/raw/94f4e5fb411f40d4f63d3751e9d041ab223ae4c7/modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPHeaderImpl.java",
                "status": "modified",
                "changes": 7,
                "deletions": 2,
                "sha": "285cf71e08366adafb69ac27a9e57a49176b2d7d",
                "blob_url": "https://github.com/apache/ws-axiom/blob/94f4e5fb411f40d4f63d3751e9d041ab223ae4c7/modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPHeaderImpl.java",
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPHeaderImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPHeaderImpl.java?ref=94f4e5fb411f40d4f63d3751e9d041ab223ae4c7"
            }
        ],
        "bug_id": "ws-axiom_14",
        "parent": "https://github.com/apache/ws-axiom/commit/7c5a9051ad063fe84f62819078f028f098519f48",
        "message": "Protect against potential NPE on headers w/no namespace.  Really, we should be complaining about such headers anyway, but this at least stops the NPE.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/330f8eb884f26d0aa8e99db0a2cffc0e4a89135b",
        "file": [
            {
                "patch": "@@ -1284,7 +1284,9 @@ private Map getAllNamespaces(Object contextNode) {\n             while (i != null && i.hasNext()) {\r\n                 addNamespaceToMap((OMNamespace) i.next(),  nsMap);\r\n             }\r\n-            addNamespaceToMap(element.getNamespace(),  nsMap);\r\n+            if (element.getNamespace() != null) {\r\n+                addNamespaceToMap(element.getNamespace(),  nsMap);\r\n+            }\r\n             for (Iterator iter = element.getAllAttributes();\r\n                  iter != null && iter.hasNext();) {\r\n                 OMAttribute attr = (OMAttribute) iter.next();\r",
                "additions": 3,
                "raw_url": "https://github.com/apache/ws-axiom/raw/330f8eb884f26d0aa8e99db0a2cffc0e4a89135b/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMStAXWrapper.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "34d3afc851cca9ca53e7695ccd7ab428cfd9775a",
                "blob_url": "https://github.com/apache/ws-axiom/blob/330f8eb884f26d0aa8e99db0a2cffc0e4a89135b/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMStAXWrapper.java",
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMStAXWrapper.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMStAXWrapper.java?ref=330f8eb884f26d0aa8e99db0a2cffc0e4a89135b"
            }
        ],
        "bug_id": "ws-axiom_15",
        "parent": "https://github.com/apache/ws-axiom/commit/99c8743bb9c21746aa33b9795cb0ee7e220aa895",
        "message": "WSCOMMONS-130\nContributor:Rich Scheuerle\nNPE fix",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/1ca604fbc1876eaa23027c20ce7c413f1a9af2e3",
        "file": [
            {
                "patch": "@@ -134,7 +134,7 @@ public OMDocumentImpl(OMElement documentElement, OMXMLParserWrapper parserWrappe\n      * @return Returns OMElement.\n      */\n     public OMElement getOMDocumentElement() {\n-        while (documentElement == null) {\n+        while (documentElement == null && parserWrapper != null) {\n             parserWrapper.next();\n         }\n         return documentElement;\n@@ -173,8 +173,9 @@ public void setComplete(boolean state) {\n      * Forces the parser to proceed, if parser has not yet finished with the XML input.\n      */\n     public void buildNext() {\n-        if (!parserWrapper.isCompleted())\n+        if (parserWrapper != null && !parserWrapper.isCompleted()) {\n             parserWrapper.next();\n+        }\n     }\n \n     /**",
                "additions": 3,
                "raw_url": "https://github.com/apache/ws-axiom/raw/1ca604fbc1876eaa23027c20ce7c413f1a9af2e3/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMDocumentImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 2,
                "sha": "4948f1f27a2ea871b7b6a28b2d043f5beee477a8",
                "blob_url": "https://github.com/apache/ws-axiom/blob/1ca604fbc1876eaa23027c20ce7c413f1a9af2e3/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMDocumentImpl.java",
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMDocumentImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMDocumentImpl.java?ref=1ca604fbc1876eaa23027c20ce7c413f1a9af2e3"
            }
        ],
        "bug_id": "ws-axiom_16",
        "parent": "https://github.com/apache/ws-axiom/commit/c4d5cbc5effefb9c0e6d1e66aed91590adcebf00",
        "message": "Fix for WSCOMMONS-117 - NPE in OMDocumentImpl",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/524972570108b7acc60999b351b058229f6605a8",
        "file": [
            {
                "patch": "@@ -200,7 +200,10 @@ private void setDeferredNamespace(OMDataSource source, String uri, String prefix\n      * @return name\r\n      */\r\n     private String getPrintableName() {\r\n-        String uri = getNamespace().getNamespaceURI();\r\n+        String uri = null;\r\n+        if (getNamespace() != null) {\r\n+            uri = getNamespace().getNamespaceURI();\r\n+        }\r\n         if (uri == null || uri.length() == 0) {\r\n             return getLocalName();\r\n         } else {\r",
                "additions": 4,
                "raw_url": "https://github.com/apache/ws-axiom/raw/524972570108b7acc60999b351b058229f6605a8/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMSourcedElementImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "b63523af377a6c26f9c69b0683778f1a654229e3",
                "blob_url": "https://github.com/apache/ws-axiom/blob/524972570108b7acc60999b351b058229f6605a8/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMSourcedElementImpl.java",
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMSourcedElementImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMSourcedElementImpl.java?ref=524972570108b7acc60999b351b058229f6605a8"
            }
        ],
        "bug_id": "ws-axiom_17",
        "parent": "https://github.com/apache/ws-axiom/commit/5f52cba901b02a8e68d8a5a9b0d5d27e85c94ea8",
        "message": "Fixing a situation that leades to a NPE.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/a3e2fce5d115ac85da31839738cb4d52315a1312",
        "file": [
            {
                "patch": "@@ -1157,7 +1157,7 @@ public Iterator getChildElements() {\n     /** @see org.apache.axiom.om.OMElement#getAllDeclaredNamespaces() */\n     public Iterator getAllDeclaredNamespaces() throws OMException {\n         if (namespaces == null) {\n-            return null;\n+            return EMPTY_ITERATOR;\n         }\n         return namespaces.values().iterator();\n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/a3e2fce5d115ac85da31839738cb4d52315a1312/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "ae26660df460140b87cd142338cd24a72957a827",
                "blob_url": "https://github.com/apache/ws-axiom/blob/a3e2fce5d115ac85da31839738cb4d52315a1312/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java?ref=a3e2fce5d115ac85da31839738cb4d52315a1312"
            }
        ],
        "bug_id": "ws-axiom_18",
        "parent": "https://github.com/apache/ws-axiom/commit/60b2ddf84bc56b0805626a1c3cc3be9dd6e155af",
        "message": "prevent NPE's in calling code, example AXIS2-2868",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/33d3839f7d3ca6e2a17207b8151f5f66d6c7049e",
        "file": [
            {
                "patch": "@@ -1290,7 +1290,9 @@ private Map getAllNamespaces(Object contextNode) {\n             for (Iterator iter = element.getAllAttributes();\r\n                  iter != null && iter.hasNext();) {\r\n                 OMAttribute attr = (OMAttribute) iter.next();\r\n-                addNamespaceToMap(attr.getNamespace(),  nsMap);\r\n+                if (attr.getNamespace() != null) {\r\n+                    addNamespaceToMap(attr.getNamespace(),  nsMap);\r\n+                }\r\n             }\r\n         }\r\n         return nsMap;\r",
                "additions": 3,
                "raw_url": "https://github.com/apache/ws-axiom/raw/33d3839f7d3ca6e2a17207b8151f5f66d6c7049e/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMStAXWrapper.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "bd1a14d16455b0a6024a6534231bc38594f159db",
                "blob_url": "https://github.com/apache/ws-axiom/blob/33d3839f7d3ca6e2a17207b8151f5f66d6c7049e/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMStAXWrapper.java",
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMStAXWrapper.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMStAXWrapper.java?ref=33d3839f7d3ca6e2a17207b8151f5f66d6c7049e"
            }
        ],
        "bug_id": "ws-axiom_19",
        "parent": "https://github.com/apache/ws-axiom/commit/6aeb15f13718465c2859467b3eac33fbed6a830c",
        "message": "WSCOMMONS-146\nContributor:Rich Scheuerle\nSimple NPE fix",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/a4d7ffc90241916e19e88346ce7597c28311409b",
        "file": [
            {
                "patch": "@@ -87,7 +87,7 @@ protected void processAttributes(OMElement node) {\n         for (int i = 0; i < attribCount; i++) {\r\n             OMNamespace ns = null;\r\n             String uri = parser.getAttributeNamespace(i);\r\n-            if (uri.hashCode() != 0) {\r\n+            if (uri != null && uri.hashCode() != 0) {\r\n                 ns = node.findNamespace(uri,\r\n                         parser.getAttributePrefix(i));\r\n             }\r",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/a4d7ffc90241916e19e88346ce7597c28311409b/modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/SOAPBuilderHelper.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "eaab17194019aeeaf850c43e71444b959ffd4046",
                "blob_url": "https://github.com/apache/ws-axiom/blob/a4d7ffc90241916e19e88346ce7597c28311409b/modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/SOAPBuilderHelper.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/SOAPBuilderHelper.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/SOAPBuilderHelper.java?ref=a4d7ffc90241916e19e88346ce7597c28311409b"
            }
        ],
        "bug_id": "ws-axiom_20",
        "parent": "https://github.com/apache/ws-axiom/commit/e44fb2ba4aa874b0566c775100c8561a4e068612",
        "message": "Fix broken attribute handling code (NPE when no namespace)",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/5bc00b8dcbc83969438e48eef765e5cf1bd89373",
        "file": [
            {
                "patch": "@@ -92,9 +92,8 @@ public static void serializeNamespace(OMNamespace namespace, XMLStreamWriter wri\n         String uri = namespace.getName();\r\n         String prefix = namespace.getPrefix();\r\n \r\n-        String prefixFromWriter = writer.getPrefix(uri);\r\n-\r\n         if (uri != null && !\"\".equals(uri)) {\r\n+            String prefixFromWriter = writer.getPrefix(uri);\r\n             // lets see whether we have default namespace now\r\n             if (prefix != null && \"\".equals(prefix) && prefixFromWriter == null) {\r\n                 // this has not been declared earlier\r\n@@ -124,9 +123,9 @@ public static void serializeNamespace(OMNamespace namespace, XMLStreamWriter wri\n         String prefix;\r\n         if (element.getNamespace() != null) {\r\n             nameSpaceName = element.getNamespace().getName();\r\n-            writer_prefix = writer.getPrefix(nameSpaceName);\r\n             prefix = element.getNamespace().getPrefix();\r\n             if (nameSpaceName != null) {\r\n+                writer_prefix = writer.getPrefix(nameSpaceName);\r\n                 if (writer_prefix != null) {\r\n                     writer.writeStartElement(nameSpaceName,\r\n                             element.getLocalName());\r",
                "additions": 2,
                "raw_url": "https://github.com/apache/ws-axiom/raw/5bc00b8dcbc83969438e48eef765e5cf1bd89373/src/org/apache/axiom/om/impl/util/OMSerializerUtil.java",
                "status": "modified",
                "changes": 5,
                "deletions": 3,
                "sha": "d0ffbd58e0b135830a258133803ba92c32ac7b19",
                "blob_url": "https://github.com/apache/ws-axiom/blob/5bc00b8dcbc83969438e48eef765e5cf1bd89373/src/org/apache/axiom/om/impl/util/OMSerializerUtil.java",
                "filename": "src/org/apache/axiom/om/impl/util/OMSerializerUtil.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/src/org/apache/axiom/om/impl/util/OMSerializerUtil.java?ref=5bc00b8dcbc83969438e48eef765e5cf1bd89373"
            }
        ],
        "bug_id": "ws-axiom_21",
        "parent": "https://github.com/apache/ws-axiom/commit/4ec56383d23cbe6c7d720e40737b7e1129ce8f5f",
        "message": "Watch out for NPEs - this also fixes theEchoRawSWATest in axis2",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/c7de27908ac6a1162d7bff7435ba57938f6c5854",
        "file": [
            {
                "patch": "@@ -76,14 +76,16 @@ public boolean hasFault() {\n         } else {\n             OMElement element = getFirstElement();\n             if (element != null\n-                    && SOAPConstants.SOAPFAULT_LOCAL_NAME.equals(element\n-                    .getLocalName())\n-                    && (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI\n-                    .equals(element.getNamespace().getNamespaceURI()) ||\n-                    SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI\n-                            .equals(element.getNamespace().getNamespaceURI()))) { //added this line\n-                hasSOAPFault = true;\n-                return true;\n+                    && SOAPConstants.SOAPFAULT_LOCAL_NAME.equals(element.getLocalName())) {\n+                OMNamespace ns = element.getNamespace();\n+                if (ns != null &&\n+                        (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(ns.getNamespaceURI()) ||\n+                         SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(ns.getNamespaceURI()))) {\n+                    hasSOAPFault = true;\n+                    return true;\n+                } else {\n+                    return false;\n+                }\n             } else {\n                 return false;\n             }\n@@ -100,17 +102,19 @@ public SOAPFault getFault() {\n         if (hasSOAPFault) {\n             return (SOAPFault) element;\n         } else if (element != null\n-                && SOAPConstants.SOAPFAULT_LOCAL_NAME.equals(element\n-                .getLocalName())\n-                && (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(element\n-                .getNamespace().getNamespaceURI()) || SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI\n-                .equals(element.getNamespace().getNamespaceURI()))) { //added this line\n-            hasSOAPFault = true;\n-            return (SOAPFault) element;\n+                && SOAPConstants.SOAPFAULT_LOCAL_NAME.equals(element.getLocalName())) {\n+            OMNamespace ns = element.getNamespace();\n+            if (ns != null &&\n+                    (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(ns.getNamespaceURI()) ||\n+                     SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(ns.getNamespaceURI()))) {\n+                hasSOAPFault = true;\n+                return (SOAPFault) element;\n+            } else {\n+                return null;\n+            }\n         } else {\n             return null;\n         }\n-\n     }\n \n     /**",
                "additions": 20,
                "raw_url": "https://github.com/apache/ws-axiom/raw/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPBodyImpl.java",
                "status": "modified",
                "changes": 36,
                "deletions": 16,
                "sha": "66a435e1ee95cf01772f322e2d78a71e3d10388c",
                "blob_url": "https://github.com/apache/ws-axiom/blob/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPBodyImpl.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPBodyImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPBodyImpl.java?ref=c7de27908ac6a1162d7bff7435ba57938f6c5854"
            },
            {
                "patch": "@@ -125,21 +125,19 @@ public SOAPFault getFault() {\n         if (hasSOAPFault) {\n             return (SOAPFault) element;\n         } else if (element != null\n-                &&\n-                SOAPConstants.SOAPFAULT_LOCAL_NAME.equals(\n-                        element.getLocalName())\n-                &&\n-                (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(\n-                        element.getNamespace().getNamespaceURI())\n-                        ||\n-                        SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(\n-                                element.getNamespace().getNamespaceURI()))) {     //added this line\n-            hasSOAPFault = true;\n-            return (SOAPFault) element;\n+                && SOAPConstants.SOAPFAULT_LOCAL_NAME.equals(element.getLocalName())) {\n+            OMNamespace ns = element.getNamespace();\n+            if (ns != null &&\n+                    (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(ns.getNamespaceURI()) ||\n+                     SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(ns.getNamespaceURI()))) {\n+                hasSOAPFault = true;\n+                return (SOAPFault) element;\n+            } else {\n+                return null;\n+            }\n         } else {\n             return null;\n         }\n-\n     }\n \n     /**",
                "additions": 10,
                "raw_url": "https://github.com/apache/ws-axiom/raw/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPBodyImpl.java",
                "status": "modified",
                "changes": 22,
                "deletions": 12,
                "sha": "5c87ed078d945ea19ed841362bd16039acaf1e8e",
                "blob_url": "https://github.com/apache/ws-axiom/blob/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPBodyImpl.java",
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPBodyImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPBodyImpl.java?ref=c7de27908ac6a1162d7bff7435ba57938f6c5854"
            },
            {
                "patch": "@@ -23,6 +23,9 @@\n import org.apache.axiom.om.OMMetaFactory;\n import org.apache.axiom.om.OMSourcedElement;\n import org.apache.axiom.om.TestConstants;\n+import org.apache.axiom.soap.SOAP11Constants;\n+import org.apache.axiom.soap.SOAP12Constants;\n+import org.apache.axiom.soap.SOAPConstants;\n import org.apache.axiom.testutils.suite.TestSuiteBuilder;\n \n public class SOAPTestSuiteBuilder extends TestSuiteBuilder {\n@@ -35,11 +38,20 @@\n         TestConstants.EMPTY_BODY_MESSAGE, \"soap/soap11/soapfault.xml\", \"soap/soap11/bodyNotQualified.xml\",\n         \"soap/soap11/faultstring-with-comment.xml\"};\n     \n-    private static final QName[] qnames = {\n+    private static final QName[] generalQNames = {\n         new QName(\"root\"),\n         new QName(\"urn:test\", \"root\", \"p\"),\n         new QName(\"urn:test\", \"root\") };\n     \n+    private static final QName[] noFaultQNames = {\n+        new QName(\"root\"),\n+        new QName(\"urn:test\", \"root\", \"p\"),\n+        new QName(\"urn:test\", \"root\"),\n+        new QName(\"Fault\"),\n+        new QName(\"urn:test\", \"Fault\", \"p\"),\n+        new QName(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI, \"NoFault\", SOAPConstants.SOAP_DEFAULT_NAMESPACE_PREFIX),\n+        new QName(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI, \"NoFault\", SOAPConstants.SOAP_DEFAULT_NAMESPACE_PREFIX) };\n+    \n     private final OMMetaFactory metaFactory;\n     private final boolean supportsOMSourcedElement;\n     private final boolean supportsBodyElementNameOptimization;\n@@ -65,12 +77,17 @@ private void addTests(SOAPSpec spec) {\n         addTest(new org.apache.axiom.ts.soap.body.TestAddFault2(metaFactory, spec));\n         addTest(new org.apache.axiom.ts.soap.body.TestGetFault(metaFactory, spec));\n         addTest(new org.apache.axiom.ts.soap.body.TestGetFaultWithParser(metaFactory, spec));\n-        for (int i=0; i<qnames.length; i++) {\n-            QName qname = qnames[i];\n+        for (int i=0; i<generalQNames.length; i++) {\n+            QName qname = generalQNames[i];\n             addTest(new org.apache.axiom.ts.soap.body.TestGetFirstElementLocalNameWithParser(metaFactory, spec,\n                     qname, supportsBodyElementNameOptimization));\n             addTest(new org.apache.axiom.ts.soap.body.TestGetFirstElementNSWithParser(metaFactory, spec,\n                     qname, supportsBodyElementNameOptimization));\n+        }\n+        for (int i=0; i<noFaultQNames.length; i++) {\n+            QName qname = noFaultQNames[i];\n+            addTest(new org.apache.axiom.ts.soap.body.TestGetFaultNoFault(metaFactory, spec, qname));\n+            addTest(new org.apache.axiom.ts.soap.body.TestHasFaultNoFault(metaFactory, spec, qname));\n             addTest(new org.apache.axiom.ts.soap.body.TestHasFaultWithParserNoFault(metaFactory, spec,\n                     qname, supportsBodyElementNameOptimization));\n         }\n@@ -98,8 +115,8 @@ private void addTests(SOAPSpec spec) {\n         addTest(new org.apache.axiom.ts.soap.envelope.TestGetBodyWithParser(metaFactory, spec));\n         addTest(new org.apache.axiom.ts.soap.envelope.TestGetHeader(metaFactory, spec));\n         addTest(new org.apache.axiom.ts.soap.envelope.TestGetHeaderWithParser(metaFactory, spec));\n-        for (int i=0; i<qnames.length; i++) {\n-            QName qname = qnames[i];\n+        for (int i=0; i<generalQNames.length; i++) {\n+            QName qname = generalQNames[i];\n             addTest(new org.apache.axiom.ts.soap.envelope.TestGetSOAPBodyFirstElementLocalNameAndNS(metaFactory, spec, qname));\n             addTest(new org.apache.axiom.ts.soap.envelope.TestGetSOAPBodyFirstElementLocalNameAndNSWithParser(metaFactory, spec, qname));\n         }",
                "additions": 22,
                "raw_url": "https://github.com/apache/ws-axiom/raw/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/SOAPTestSuiteBuilder.java",
                "status": "modified",
                "changes": 27,
                "deletions": 5,
                "sha": "04d802e4a7e08bca183b544738d7b428e5c12960",
                "blob_url": "https://github.com/apache/ws-axiom/blob/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/SOAPTestSuiteBuilder.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/SOAPTestSuiteBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/SOAPTestSuiteBuilder.java?ref=c7de27908ac6a1162d7bff7435ba57938f6c5854"
            },
            {
                "patch": "@@ -49,6 +49,7 @@ public FirstElementNameWithParserTestCase(OMMetaFactory metaFactory,\n         this.qname = qname;\n         addTestProperty(\"prefix\", qname.getPrefix());\n         addTestProperty(\"uri\", qname.getNamespaceURI());\n+        addTestProperty(\"localName\", qname.getLocalPart());\n         this.supportsOptimization = supportsOptimization;\n     }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/FirstElementNameWithParserTestCase.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "d38304d37eb90fd539b41054a65ed9d1efb86c5d",
                "blob_url": "https://github.com/apache/ws-axiom/blob/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/FirstElementNameWithParserTestCase.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/FirstElementNameWithParserTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/FirstElementNameWithParserTestCase.java?ref=c7de27908ac6a1162d7bff7435ba57938f6c5854"
            },
            {
                "patch": "@@ -0,0 +1,27 @@\n+package org.apache.axiom.ts.soap.body;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.soap.SOAPBody;\n+import org.apache.axiom.ts.soap.SOAPSpec;\n+import org.apache.axiom.ts.soap.SOAPTestCase;\n+\n+public class TestGetFaultNoFault extends SOAPTestCase {\n+    private final QName qname;\n+    \n+    public TestGetFaultNoFault(OMMetaFactory metaFactory, SOAPSpec spec, QName qname) {\n+        super(metaFactory, spec);\n+        this.qname = qname;\n+        addTestProperty(\"prefix\", qname.getPrefix());\n+        addTestProperty(\"uri\", qname.getNamespaceURI());\n+        addTestProperty(\"localName\", qname.getLocalPart());\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        SOAPBody body = soapFactory.getDefaultEnvelope().getBody();\n+        body.addChild(soapFactory.createOMElement(\n+                qname.getLocalPart(), qname.getNamespaceURI(), qname.getPrefix()));\n+        assertNull(body.getFault());\n+    }\n+}",
                "additions": 27,
                "raw_url": "https://github.com/apache/ws-axiom/raw/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestGetFaultNoFault.java",
                "status": "added",
                "changes": 27,
                "deletions": 0,
                "sha": "422534b18ea1e3125e246069f2fe27ced27c6945",
                "blob_url": "https://github.com/apache/ws-axiom/blob/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestGetFaultNoFault.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestGetFaultNoFault.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestGetFaultNoFault.java?ref=c7de27908ac6a1162d7bff7435ba57938f6c5854"
            },
            {
                "patch": "@@ -0,0 +1,27 @@\n+package org.apache.axiom.ts.soap.body;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.soap.SOAPBody;\n+import org.apache.axiom.ts.soap.SOAPSpec;\n+import org.apache.axiom.ts.soap.SOAPTestCase;\n+\n+public class TestHasFaultNoFault extends SOAPTestCase {\n+    private final QName qname;\n+    \n+    public TestHasFaultNoFault(OMMetaFactory metaFactory, SOAPSpec spec, QName qname) {\n+        super(metaFactory, spec);\n+        this.qname = qname;\n+        addTestProperty(\"prefix\", qname.getPrefix());\n+        addTestProperty(\"uri\", qname.getNamespaceURI());\n+        addTestProperty(\"localName\", qname.getLocalPart());\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        SOAPBody body = soapFactory.getDefaultEnvelope().getBody();\n+        body.addChild(soapFactory.createOMElement(\n+                qname.getLocalPart(), qname.getNamespaceURI(), qname.getPrefix()));\n+        assertFalse(body.hasFault());\n+    }\n+}",
                "additions": 27,
                "raw_url": "https://github.com/apache/ws-axiom/raw/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestHasFaultNoFault.java",
                "status": "added",
                "changes": 27,
                "deletions": 0,
                "sha": "a0183a89b9f8fe3f5cd002daf99574b6e69d6d1e",
                "blob_url": "https://github.com/apache/ws-axiom/blob/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestHasFaultNoFault.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestHasFaultNoFault.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestHasFaultNoFault.java?ref=c7de27908ac6a1162d7bff7435ba57938f6c5854"
            }
        ],
        "bug_id": "ws-axiom_22",
        "parent": "https://github.com/apache/ws-axiom/commit/5231ed5429fd47dee9c7818c2fa47cf6160f4c0c",
        "message": "Fixed a couple of potential NPEs in the hasFault and getFault methods of the SOAPBody implementations.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/39f1b33605414684db925c34b9dc53508ac5c915",
        "file": [
            {
                "patch": "@@ -214,7 +214,7 @@ public String getNextContentId() {\n      * @return Returns encoding string.\n      */\n     public String getCharSetEncoding() {\n-        return this.charSetEncoding;\n+        return (this.charSetEncoding != null)?this.charSetEncoding:DEFAULT_CHAR_SET_ENCODING;\n     }\n \n     public void setCharSetEncoding(String charSetEncoding) {",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/39f1b33605414684db925c34b9dc53508ac5c915/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "31c388b242abaea62caf68df4312a165c2ee10c9",
                "blob_url": "https://github.com/apache/ws-axiom/blob/39f1b33605414684db925c34b9dc53508ac5c915/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java?ref=39f1b33605414684db925c34b9dc53508ac5c915"
            },
            {
                "patch": "@@ -139,7 +139,15 @@ public void testByteArrayDS() throws Exception {\n         String payload = new String(bytes, \"utf-16\");\n         assertTrue(\"The obtained bytes did not match the payload\",\n                    payload1.equals(payload));\n-        \n+\n+        // Test getting the raw bytes with the default encoding\n+        OMOutputFormat outputFormat = new OMOutputFormat();\n+        baos = new ByteArrayOutputStream();\n+        ds.serialize(baos, outputFormat);\n+        output = baos.toString(OMOutputFormat.DEFAULT_CHAR_SET_ENCODING);\n+        System.out.println(output);\n+        assertTrue(\"The obtained bytes did not match the payload\",\n+                   payload1.equals(output));     \n     }\n     \n     /**",
                "additions": 9,
                "raw_url": "https://github.com/apache/ws-axiom/raw/39f1b33605414684db925c34b9dc53508ac5c915/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "status": "modified",
                "changes": 10,
                "deletions": 1,
                "sha": "e0c7f744906721abc13068046c829c38666f8f20",
                "blob_url": "https://github.com/apache/ws-axiom/blob/39f1b33605414684db925c34b9dc53508ac5c915/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java?ref=39f1b33605414684db925c34b9dc53508ac5c915"
            }
        ],
        "bug_id": "ws-axiom_23",
        "parent": "https://github.com/apache/ws-axiom/commit/e1b5c240c8c3e31a6636c2e52926e9c89972d9ac",
        "message": "Fix potential NPE during serialization if an encoding has not been set for the OMOutputFormat.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/d2e6787bf63672a0daae581e7f0394496ac78701",
        "file": [
            {
                "patch": "@@ -214,6 +214,9 @@ private static StAXDialect detectDialectFromJarManifest(URL rootUrl) {\n \n     private static Class loadClass(ClassLoader classLoader, URL rootUrl, String name) {\n         try {\n+            if (classLoader == null) {\n+                classLoader = ClassLoader.getSystemClassLoader();\n+            }\n             Class cls = classLoader.loadClass(name);\n             // Cross check if the class was loaded from the same location (JAR)\n             return rootUrl.equals(getRootUrlForClass(cls)) ? cls : null;",
                "additions": 3,
                "raw_url": "https://github.com/apache/ws-axiom/raw/d2e6787bf63672a0daae581e7f0394496ac78701/modules/axiom-api/src/main/java/org/apache/axiom/util/stax/dialect/StAXDialectDetector.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "b2f1e2e1aafb381c51baedcb8b762db849fa5c97",
                "blob_url": "https://github.com/apache/ws-axiom/blob/d2e6787bf63672a0daae581e7f0394496ac78701/modules/axiom-api/src/main/java/org/apache/axiom/util/stax/dialect/StAXDialectDetector.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/util/stax/dialect/StAXDialectDetector.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/util/stax/dialect/StAXDialectDetector.java?ref=d2e6787bf63672a0daae581e7f0394496ac78701"
            }
        ],
        "bug_id": "ws-axiom_24",
        "parent": "https://github.com/apache/ws-axiom/commit/2264c2628e397edc35df474a02f032c8fb57dcb8",
        "message": "Avoid NPE in StAX dialect detector if StAX implementation is part of the JRE.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/6eb0aa87e44e1e6cb1eb94855010d94cc4a8bddd",
        "file": [
            {
                "patch": "@@ -532,4 +532,8 @@ public boolean lookahead()  {\n             throw new OMException(e);\r\n         }\r\n     }\r\n+    \r\n+    public boolean isLookahead() {\r\n+        return lookAheadToken >= 0;\r\n+    }\r\n }\r",
                "additions": 4,
                "raw_url": "https://github.com/apache/ws-axiom/raw/6eb0aa87e44e1e6cb1eb94855010d94cc4a8bddd/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "2e1a5df8725c97e6b55589b9411989d7e9eaba68",
                "blob_url": "https://github.com/apache/ws-axiom/blob/6eb0aa87e44e1e6cb1eb94855010d94cc4a8bddd/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java?ref=6eb0aa87e44e1e6cb1eb94855010d94cc4a8bddd"
            },
            {
                "patch": "@@ -202,6 +202,7 @@ protected OMNode createNextOMElement() {\n      * @throws OMException\r\n      */\r\n     protected OMNode createOMElement() throws OMException {\r\n+        \r\n         OMElement node;\r\n         String elementName = parser.getLocalName();\r\n         if (lastNode == null) {\r\n@@ -354,7 +355,6 @@ protected OMElement constructNode(OMElement parent, String elementName,\n         } else if ((elementLevel == 3) &&\r\n                 parent.getLocalName().equals(SOAPConstants.BODY_LOCAL_NAME) &&\r\n                 elementName.equals(SOAPConstants.BODY_FAULT_LOCAL_NAME)) {\r\n-\r\n             // this is a headerblock\r\n             element = soapFactory.createSOAPFault((SOAPBody) parent, this);\r\n             processNamespaceData(element, false);\r\n@@ -373,7 +373,6 @@ protected OMElement constructNode(OMElement parent, String elementName,\n         } else if (elementLevel > 3 && processingFault) {\r\n             element = builderHelper.handleEvent(parser, parent, elementLevel);\r\n         } else {\r\n-\r\n             // this is neither of above. Just create an element\r\n             element = soapFactory.createOMElement(elementName, null,\r\n                                                   parent, this);\r",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/6eb0aa87e44e1e6cb1eb94855010d94cc4a8bddd/modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/StAXSOAPModelBuilder.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "d47157907ba3613b7e623fc1ba74fff072bcf623",
                "blob_url": "https://github.com/apache/ws-axiom/blob/6eb0aa87e44e1e6cb1eb94855010d94cc4a8bddd/modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/StAXSOAPModelBuilder.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/StAXSOAPModelBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/StAXSOAPModelBuilder.java?ref=6eb0aa87e44e1e6cb1eb94855010d94cc4a8bddd"
            },
            {
                "patch": "@@ -713,6 +713,11 @@ public XMLStreamReader getXMLStreamReaderWithoutCaching() {\n      * @return Returns reader.\r\n      */\r\n     private XMLStreamReader getXMLStreamReader(boolean cache) {\r\n+        if (builder != null && this.builder instanceof StAXOMBuilder) {\r\n+            if (((StAXOMBuilder) builder).isLookahead()) {\r\n+                this.buildNext();\r\n+            }\r\n+        }\r\n         // The om tree was built by hand and is already complete\r\n         if ((builder == null) && done) {\r\n             return new OMStAXWrapper(null, this, false);\r",
                "additions": 5,
                "raw_url": "https://github.com/apache/ws-axiom/raw/6eb0aa87e44e1e6cb1eb94855010d94cc4a8bddd/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "c0be0f3ee26786562aed81c16456073e2269a3c2",
                "blob_url": "https://github.com/apache/ws-axiom/blob/6eb0aa87e44e1e6cb1eb94855010d94cc4a8bddd/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java?ref=6eb0aa87e44e1e6cb1eb94855010d94cc4a8bddd"
            },
            {
                "patch": "@@ -191,7 +191,9 @@ private boolean hasLookahead() {\n             lookAheadSuccessful = soapBuilder.lookahead();\r\n             if (lookAheadSuccessful) {\r\n                 this.lookAheadLocalName = soapBuilder.getName();\r\n-                this.lookAheadNS = factory.createOMNamespace(soapBuilder.getNamespace(), \r\n+                String ns = soapBuilder.getNamespace();\r\n+                ns = (ns == null) ? \"\" : ns;\r\n+                this.lookAheadNS = factory.createOMNamespace(ns, \r\n                                                              soapBuilder.getPrefix());\r\n             }\r\n         }\r",
                "additions": 3,
                "raw_url": "https://github.com/apache/ws-axiom/raw/6eb0aa87e44e1e6cb1eb94855010d94cc4a8bddd/modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPBodyImpl.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "64f1e0851cb28cc7ff2b77a3b45419276ebbf3c1",
                "blob_url": "https://github.com/apache/ws-axiom/blob/6eb0aa87e44e1e6cb1eb94855010d94cc4a8bddd/modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPBodyImpl.java",
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPBodyImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPBodyImpl.java?ref=6eb0aa87e44e1e6cb1eb94855010d94cc4a8bddd"
            }
        ],
        "bug_id": "ws-axiom_25",
        "parent": "https://github.com/apache/ws-axiom/commit/1fd2634df0e3d30f207884b6b03aaa7f79e78861",
        "message": "WSCOMMONS-303\nContributor: Rich Scheuerle\nFix for NPE and SOAPFaultException revealed by Axis2 Continuum",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/6c68926bf2d299baac01428ceef9dd7b3d8b2896",
        "file": [
            {
                "patch": "@@ -33,6 +33,7 @@\n import javax.xml.stream.XMLStreamConstants;\r\n import javax.xml.stream.XMLStreamException;\r\n import javax.xml.stream.XMLStreamReader;\r\n+import javax.xml.stream.Location;\r\n import java.io.FileInputStream;\r\n import java.io.FileNotFoundException;\r\n import java.io.InputStream;\r\n@@ -222,7 +223,10 @@ private void populateOMElement(OMElement node) {\n         processNamespaceData(node);\r\n         // fill in the attributes\r\n         processAttributes(node);\r\n-        node.setLineNumber(parser.getLocation().getLineNumber());\r\n+        Location location = parser.getLocation();\r\n+        if(location != null) {\r\n+            node.setLineNumber(location.getLineNumber());\r\n+        }\r\n     }\r\n \r\n     /**\r",
                "additions": 5,
                "raw_url": "https://github.com/apache/ws-axiom/raw/6c68926bf2d299baac01428ceef9dd7b3d8b2896/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "42701d1a7578d626c5179a8b2a331ed9d707eee5",
                "blob_url": "https://github.com/apache/ws-axiom/blob/6c68926bf2d299baac01428ceef9dd7b3d8b2896/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java?ref=6c68926bf2d299baac01428ceef9dd7b3d8b2896"
            }
        ],
        "bug_id": "ws-axiom_26",
        "parent": "https://github.com/apache/ws-axiom/commit/f95a98853d88bb6c20912b3d5da191959c562688",
        "message": "Fix for WSCOMMONS-196 - NPE in StAXOMBuilder when parsing from DOMSource",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/4807980ec7572437eb76624b8b68ddc214acc5bb",
        "file": [
            {
                "patch": "@@ -27,7 +27,7 @@\n      * Use ThreadLocal to determine whether or not DOOM implementation is required.\n      * By default (isDOOMRequired() == false), we will use the one from JDK (Crimson)\n      */\n-    private static DocumentBuilderFactory originalDocumentBuilderFactory = null;\n+    private static DocumentBuilderFactory originalDocumentBuilderFactory = DocumentBuilderFactory.newInstance();\n     private static String originalDocumentBuilderFactoryClassName = null;\n     private static ThreadLocal documentBuilderFactoryTracker = new ThreadLocal();\n     ",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/4807980ec7572437eb76624b8b68ddc214acc5bb/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/jaxp/DocumentBuilderFactoryImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "dab4ffead4055193f0ee14012057004f5bec0778",
                "blob_url": "https://github.com/apache/ws-axiom/blob/4807980ec7572437eb76624b8b68ddc214acc5bb/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/jaxp/DocumentBuilderFactoryImpl.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/jaxp/DocumentBuilderFactoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/jaxp/DocumentBuilderFactoryImpl.java?ref=4807980ec7572437eb76624b8b68ddc214acc5bb"
            }
        ],
        "bug_id": "ws-axiom_27",
        "parent": "https://github.com/apache/ws-axiom/commit/e9c906b632f978d8a69d9f778f1737d7cddbd71b",
        "message": "Prevent NPE as reported in http://marc.theaimsgroup.com/?l=axis-user&m=116230600519847&w=2",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/af15fab5b2aa038f895d005cf06652f90ee2e2a3",
        "file": [
            {
                "patch": "@@ -1,299 +1,300 @@\n-/*\r\n- * Copyright 2004,2005 The Apache Software Foundation.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package org.apache.axiom.om.impl;\r\n-\r\n-import org.apache.axiom.om.OMOutputFormat;\r\n-import org.apache.axiom.om.OMText;\r\n-import org.apache.axiom.soap.SOAP11Constants;\r\n-import org.apache.axiom.soap.SOAP12Constants;\r\n-\r\n-import javax.xml.namespace.NamespaceContext;\r\n-import javax.xml.stream.FactoryConfigurationError;\r\n-import javax.xml.stream.XMLOutputFactory;\r\n-import javax.xml.stream.XMLStreamException;\r\n-import javax.xml.stream.XMLStreamWriter;\r\n-import java.io.OutputStream;\r\n-import java.io.OutputStreamWriter;\r\n-import java.io.StringWriter;\r\n-import java.io.UnsupportedEncodingException;\r\n-import java.util.LinkedList;\r\n-\r\n-\r\n-/**\r\n- * For the moment this assumes that transport takes the decision of whether\r\n- * to optimize or not by looking at whether the MTOM optimize is enabled &\r\n- * also looking at the OM tree whether it has any optimizable content.\r\n- */\r\n-public class MTOMXMLStreamWriter implements XMLStreamWriter {\r\n-    private static XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\r\n-    private XMLStreamWriter xmlWriter;\r\n-    private OutputStream outStream;\r\n-    private LinkedList binaryNodeList = new LinkedList();\r\n-    private StringWriter bufferedSOAPBody;\r\n-    private OMOutputFormat format = new OMOutputFormat();\r\n-\r\n-    public MTOMXMLStreamWriter(XMLStreamWriter xmlWriter) {\r\n-        this.xmlWriter = xmlWriter;\r\n-    }\r\n-\r\n-    /**\r\n-     * Creates a new MTOMXMLStreamWriter with specified encoding.\r\n-     *\r\n-     * @param outStream\r\n-     * @param format\r\n-     * @throws XMLStreamException\r\n-     * @throws FactoryConfigurationError\r\n-     * @see OMOutputFormat#DEFAULT_CHAR_SET_ENCODING\r\n-     */\r\n-    public MTOMXMLStreamWriter(OutputStream outStream, OMOutputFormat format)\r\n-            throws XMLStreamException, FactoryConfigurationError {\r\n-        this.format = format;\r\n-        this.outStream = outStream;\r\n-\r\n-        if (format.getCharSetEncoding() == null) //Default encoding is UTF-8\r\n-            format.setCharSetEncoding(OMOutputFormat.DEFAULT_CHAR_SET_ENCODING);\r\n-\r\n-        if (format.isOptimized()) {\r\n-            bufferedSOAPBody = new StringWriter();\r\n-            xmlWriter = outputFactory.createXMLStreamWriter(bufferedSOAPBody);\r\n-        } else {\r\n-            try {\r\n-                xmlWriter = outputFactory.createXMLStreamWriter(new java.io.BufferedWriter(new OutputStreamWriter(outStream,\r\n-                        format.getCharSetEncoding())));\r\n-            } catch (UnsupportedEncodingException e) {\r\n-                throw new XMLStreamException(e);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    public void writeStartElement(String string) throws XMLStreamException {\r\n-        xmlWriter.writeStartElement(string);\r\n-    }\r\n-\r\n-    public void writeStartElement(String string, String string1) throws XMLStreamException {\r\n-        xmlWriter.writeStartElement(string, string1);\r\n-    }\r\n-\r\n-    public void writeStartElement(String string, String string1, String string2) throws XMLStreamException {\r\n-        xmlWriter.writeStartElement(string, string1, string2);\r\n-    }\r\n-\r\n-    public void writeEmptyElement(String string, String string1) throws XMLStreamException {\r\n-        xmlWriter.writeStartElement(string, string1);\r\n-    }\r\n-\r\n-    public void writeEmptyElement(String string, String string1, String string2) throws XMLStreamException {\r\n-        xmlWriter.writeStartElement(string, string1, string2);\r\n-    }\r\n-\r\n-    public void writeEmptyElement(String string) throws XMLStreamException {\r\n-        xmlWriter.writeStartElement(string);\r\n-    }\r\n-\r\n-    public void writeEndElement() throws XMLStreamException {\r\n-        xmlWriter.writeEndElement();\r\n-    }\r\n-\r\n-    public void writeEndDocument() throws XMLStreamException {\r\n-        xmlWriter.writeEndDocument();\r\n-    }\r\n-\r\n-    public void close() throws XMLStreamException {\r\n-        xmlWriter.close();\r\n-    }\r\n-\r\n-    public void flush() throws XMLStreamException {\r\n-        xmlWriter.flush();\r\n-        String SOAPContentType;\r\n-        if (format.isOptimized()) {\r\n-            if (format.isSOAP11()) {\r\n-                SOAPContentType = SOAP11Constants.SOAP_11_CONTENT_TYPE;\r\n-            } else {\r\n-                SOAPContentType = SOAP12Constants.SOAP_12_CONTENT_TYPE;\r\n-            }\r\n-            MIMEOutputUtils.complete(\r\n-                    outStream,\r\n-                    bufferedSOAPBody,\r\n-                    binaryNodeList,\r\n-                    format.getMimeBoundary(),\r\n-                    format.getRootContentId(),\r\n-                    format.getCharSetEncoding(), SOAPContentType);\r\n-        }\r\n-    }\r\n-\r\n-    public void writeAttribute(String string, String string1) throws XMLStreamException {\r\n-        xmlWriter.writeAttribute(string, string1);\r\n-    }\r\n-\r\n-    public void writeAttribute(String string, String string1, String string2, String string3) throws XMLStreamException {\r\n-        xmlWriter.writeAttribute(string, string1, string2, string3);\r\n-    }\r\n-\r\n-    public void writeAttribute(String string, String string1, String string2) throws XMLStreamException {\r\n-        xmlWriter.writeAttribute(string, string1, string2);\r\n-    }\r\n-\r\n-    public void writeNamespace(String string, String string1) throws XMLStreamException {\r\n-        xmlWriter.writeNamespace(string, string1);\r\n-    }\r\n-\r\n-    public void writeDefaultNamespace(String string) throws XMLStreamException {\r\n-        xmlWriter.writeDefaultNamespace(string);\r\n-    }\r\n-\r\n-    public void writeComment(String string) throws XMLStreamException {\r\n-        xmlWriter.writeComment(string);\r\n-    }\r\n-\r\n-    public void writeProcessingInstruction(String string) throws XMLStreamException {\r\n-        xmlWriter.writeProcessingInstruction(string);\r\n-    }\r\n-\r\n-    public void writeProcessingInstruction(String string, String string1) throws XMLStreamException {\r\n-        xmlWriter.writeProcessingInstruction(string, string1);\r\n-    }\r\n-\r\n-    public void writeCData(String string) throws XMLStreamException {\r\n-        xmlWriter.writeCData(string);\r\n-    }\r\n-\r\n-    public void writeDTD(String string) throws XMLStreamException {\r\n-        xmlWriter.writeDTD(string);\r\n-    }\r\n-\r\n-    public void writeEntityRef(String string) throws XMLStreamException {\r\n-        xmlWriter.writeEntityRef(string);\r\n-    }\r\n-\r\n-    public void writeStartDocument() throws XMLStreamException {\r\n-        xmlWriter.writeStartDocument();\r\n-    }\r\n-\r\n-    public void writeStartDocument(String string) throws XMLStreamException {\r\n-        xmlWriter.writeStartDocument(string);\r\n-    }\r\n-\r\n-    public void writeStartDocument(String string, String string1) throws XMLStreamException {\r\n-        xmlWriter.writeStartDocument(string, string1);\r\n-    }\r\n-\r\n-    public void writeCharacters(String string) throws XMLStreamException {\r\n-        xmlWriter.writeCharacters(string);\r\n-    }\r\n-\r\n-    public void writeCharacters(char[] chars, int i, int i1) throws XMLStreamException {\r\n-        xmlWriter.writeCharacters(chars, i, i1);\r\n-    }\r\n-\r\n-    public String getPrefix(String string) throws XMLStreamException {\r\n-        return xmlWriter.getPrefix(string);\r\n-    }\r\n-\r\n-    public void setPrefix(String string, String string1) throws XMLStreamException {\r\n-        xmlWriter.setPrefix(string, string1);\r\n-    }\r\n-\r\n-    public void setDefaultNamespace(String string) throws XMLStreamException {\r\n-        xmlWriter.setDefaultNamespace(string);\r\n-    }\r\n-\r\n-    public void setNamespaceContext(NamespaceContext namespaceContext) throws XMLStreamException {\r\n-        xmlWriter.setNamespaceContext(namespaceContext);\r\n-    }\r\n-\r\n-    public NamespaceContext getNamespaceContext() {\r\n-        return xmlWriter.getNamespaceContext();\r\n-    }\r\n-\r\n-    public Object getProperty(String string) throws IllegalArgumentException {\r\n-        return xmlWriter.getProperty(string);\r\n-    }\r\n-\r\n-    public boolean isOptimized() {\r\n-        return format.isOptimized();\r\n-    }\r\n-\r\n-    public String getContentType() {\r\n-        return format.getContentType();\r\n-    }\r\n-\r\n-    public void writeOptimized(OMText node) {\r\n-        binaryNodeList.add(node);\r\n-    }\r\n-\r\n-    public void setXmlStreamWriter(XMLStreamWriter xmlWriter) {\r\n-        this.xmlWriter = xmlWriter;\r\n-    }\r\n-\r\n-    public XMLStreamWriter getXmlStreamWriter() {\r\n-        return xmlWriter;\r\n-    }\r\n-\r\n-    public String getMimeBoundary() {\r\n-        return format.getMimeBoundary();\r\n-    }\r\n-\r\n-    public String getRootContentId() {\r\n-        return format.getRootContentId();\r\n-    }\r\n-\r\n-    public String getNextContentId() {\r\n-        return format.getNextContentId();\r\n-    }\r\n-\r\n-    /**\r\n-     * Returns the character set encoding scheme. If the value of the\r\n-     * charSetEncoding is not set then the default will be returned.\r\n-     *\r\n-     * @return Returns encoding.\r\n-     */\r\n-    public String getCharSetEncoding() {\r\n-        return format.getCharSetEncoding();\r\n-    }\r\n-\r\n-    public void setCharSetEncoding(String charSetEncoding) {\r\n-        format.setCharSetEncoding(charSetEncoding);\r\n-    }\r\n-\r\n-    public String getXmlVersion() {\r\n-        return format.getXmlVersion();\r\n-    }\r\n-\r\n-    public void setXmlVersion(String xmlVersion) {\r\n-        format.setXmlVersion(xmlVersion);\r\n-    }\r\n-\r\n-    public void setSoap11(boolean b) {\r\n-        format.setSOAP11(b);\r\n-    }\r\n-\r\n-    public boolean isIgnoreXMLDeclaration() {\r\n-        return format.isIgnoreXMLDeclaration();\r\n-    }\r\n-\r\n-    public void setIgnoreXMLDeclaration(boolean ignoreXMLDeclaration) {\r\n-        format.setIgnoreXMLDeclaration(ignoreXMLDeclaration);\r\n-    }\r\n-\r\n-    public void setDoOptimize(boolean b) {\r\n-        format.setDoOptimize(b);\r\n-    }\r\n-\r\n-    public void setOutputFormat(OMOutputFormat format) {\r\n-        this.format = format;\r\n-    }\r\n-}\r\n+/*\n+ * Copyright 2004,2005 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.axiom.om.impl;\n+\n+import org.apache.axiom.om.OMOutputFormat;\n+import org.apache.axiom.om.OMText;\n+import org.apache.axiom.soap.SOAP11Constants;\n+import org.apache.axiom.soap.SOAP12Constants;\n+\n+import javax.xml.namespace.NamespaceContext;\n+import javax.xml.stream.FactoryConfigurationError;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.StringWriter;\n+import java.io.UnsupportedEncodingException;\n+import java.util.LinkedList;\n+\n+\n+/**\n+ * For the moment this assumes that transport takes the decision of whether\n+ * to optimize or not by looking at whether the MTOM optimize is enabled &\n+ * also looking at the OM tree whether it has any optimizable content.\n+ */\n+public class MTOMXMLStreamWriter implements XMLStreamWriter {\n+    private static XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+    private XMLStreamWriter xmlWriter;\n+    private OutputStream outStream;\n+    private LinkedList binaryNodeList = new LinkedList();\n+    private StringWriter bufferedSOAPBody;\n+    private OMOutputFormat format = new OMOutputFormat();\n+\n+    public MTOMXMLStreamWriter(XMLStreamWriter xmlWriter) {\n+        this.xmlWriter = xmlWriter;\n+    }\n+\n+    /**\n+     * Creates a new MTOMXMLStreamWriter with specified encoding.\n+     *\n+     * @param outStream\n+     * @param format\n+     * @throws XMLStreamException\n+     * @throws FactoryConfigurationError\n+     * @see OMOutputFormat#DEFAULT_CHAR_SET_ENCODING\n+     */\n+    public MTOMXMLStreamWriter(OutputStream outStream, OMOutputFormat format)\n+            throws XMLStreamException, FactoryConfigurationError {\n+        this.format = format;\n+        this.outStream = outStream;\n+\n+        if (format.getCharSetEncoding() == null) //Default encoding is UTF-8\n+            format.setCharSetEncoding(OMOutputFormat.DEFAULT_CHAR_SET_ENCODING);\n+\n+        if (format.isOptimized()) {\n+            bufferedSOAPBody = new StringWriter();\n+            xmlWriter = outputFactory.createXMLStreamWriter(bufferedSOAPBody);\n+        } else {\n+            try {\n+                xmlWriter = outputFactory.createXMLStreamWriter(new java.io.BufferedWriter(new OutputStreamWriter(outStream,\n+                        format.getCharSetEncoding())));\n+            } catch (UnsupportedEncodingException e) {\n+                throw new XMLStreamException(e);\n+            }\n+        }\n+    }\n+\n+    public void writeStartElement(String string) throws XMLStreamException {\n+        xmlWriter.writeStartElement(string);\n+    }\n+\n+    public void writeStartElement(String string, String string1) throws XMLStreamException {\n+        xmlWriter.writeStartElement(string, string1);\n+    }\n+\n+    public void writeStartElement(String string, String string1, String string2) throws XMLStreamException {\n+        xmlWriter.writeStartElement(string, string1, string2);\n+    }\n+\n+    public void writeEmptyElement(String string, String string1) throws XMLStreamException {\n+        xmlWriter.writeStartElement(string, string1);\n+    }\n+\n+    public void writeEmptyElement(String string, String string1, String string2) throws XMLStreamException {\n+        xmlWriter.writeStartElement(string, string1, string2);\n+    }\n+\n+    public void writeEmptyElement(String string) throws XMLStreamException {\n+        xmlWriter.writeStartElement(string);\n+    }\n+\n+    public void writeEndElement() throws XMLStreamException {\n+        xmlWriter.writeEndElement();\n+    }\n+\n+    public void writeEndDocument() throws XMLStreamException {\n+        xmlWriter.writeEndDocument();\n+    }\n+\n+    public void close() throws XMLStreamException {\n+        xmlWriter.close();\n+    }\n+\n+    public void flush() throws XMLStreamException {\n+        xmlWriter.flush();\n+        String SOAPContentType;\n+        if (format.isOptimized()) {\n+            if (format.isSOAP11()) {\n+                SOAPContentType = SOAP11Constants.SOAP_11_CONTENT_TYPE;\n+            } else {\n+                SOAPContentType = SOAP12Constants.SOAP_12_CONTENT_TYPE;\n+            }\n+            MIMEOutputUtils.complete(\n+                    outStream,\n+                    bufferedSOAPBody,\n+                    binaryNodeList,\n+                    format.getMimeBoundary(),\n+                    format.getRootContentId(),\n+                    format.getCharSetEncoding(), SOAPContentType);\n+        }\n+    }\n+\n+    public void writeAttribute(String string, String string1) throws XMLStreamException {\n+        xmlWriter.writeAttribute(string, string1);\n+    }\n+\n+    public void writeAttribute(String string, String string1, String string2, String string3) throws XMLStreamException {\n+        xmlWriter.writeAttribute(string, string1, string2, string3);\n+    }\n+\n+    public void writeAttribute(String string, String string1, String string2) throws XMLStreamException {\n+        xmlWriter.writeAttribute(string, string1, string2);\n+    }\n+\n+    public void writeNamespace(String string, String string1) throws XMLStreamException {\n+        xmlWriter.writeNamespace(string, string1);\n+    }\n+\n+    public void writeDefaultNamespace(String string) throws XMLStreamException {\n+        xmlWriter.writeDefaultNamespace(string);\n+    }\n+\n+    public void writeComment(String string) throws XMLStreamException {\n+        xmlWriter.writeComment(string);\n+    }\n+\n+    public void writeProcessingInstruction(String string) throws XMLStreamException {\n+        xmlWriter.writeProcessingInstruction(string);\n+    }\n+\n+    public void writeProcessingInstruction(String string, String string1) throws XMLStreamException {\n+        xmlWriter.writeProcessingInstruction(string, string1);\n+    }\n+\n+    public void writeCData(String string) throws XMLStreamException {\n+        xmlWriter.writeCData(string);\n+    }\n+\n+    public void writeDTD(String string) throws XMLStreamException {\n+        xmlWriter.writeDTD(string);\n+    }\n+\n+    public void writeEntityRef(String string) throws XMLStreamException {\n+        xmlWriter.writeEntityRef(string);\n+    }\n+\n+    public void writeStartDocument() throws XMLStreamException {\n+        xmlWriter.writeStartDocument();\n+    }\n+\n+    public void writeStartDocument(String string) throws XMLStreamException {\n+        xmlWriter.writeStartDocument(string);\n+    }\n+\n+    public void writeStartDocument(String string, String string1) throws XMLStreamException {\n+        xmlWriter.writeStartDocument(string, string1);\n+    }\n+\n+    public void writeCharacters(String string) throws XMLStreamException {\n+        char[] array = string.toCharArray();\n+        xmlWriter.writeCharacters(array, 0, array.length);\n+    }\n+\n+    public void writeCharacters(char[] chars, int i, int i1) throws XMLStreamException {\n+        xmlWriter.writeCharacters(chars, i, i1);\n+    }\n+\n+    public String getPrefix(String string) throws XMLStreamException {\n+        return xmlWriter.getPrefix(string);\n+    }\n+\n+    public void setPrefix(String string, String string1) throws XMLStreamException {\n+        xmlWriter.setPrefix(string, string1);\n+    }\n+\n+    public void setDefaultNamespace(String string) throws XMLStreamException {\n+        xmlWriter.setDefaultNamespace(string);\n+    }\n+\n+    public void setNamespaceContext(NamespaceContext namespaceContext) throws XMLStreamException {\n+        xmlWriter.setNamespaceContext(namespaceContext);\n+    }\n+\n+    public NamespaceContext getNamespaceContext() {\n+        return xmlWriter.getNamespaceContext();\n+    }\n+\n+    public Object getProperty(String string) throws IllegalArgumentException {\n+        return xmlWriter.getProperty(string);\n+    }\n+\n+    public boolean isOptimized() {\n+        return format.isOptimized();\n+    }\n+\n+    public String getContentType() {\n+        return format.getContentType();\n+    }\n+\n+    public void writeOptimized(OMText node) {\n+        binaryNodeList.add(node);\n+    }\n+\n+    public void setXmlStreamWriter(XMLStreamWriter xmlWriter) {\n+        this.xmlWriter = xmlWriter;\n+    }\n+\n+    public XMLStreamWriter getXmlStreamWriter() {\n+        return xmlWriter;\n+    }\n+\n+    public String getMimeBoundary() {\n+        return format.getMimeBoundary();\n+    }\n+\n+    public String getRootContentId() {\n+        return format.getRootContentId();\n+    }\n+\n+    public String getNextContentId() {\n+        return format.getNextContentId();\n+    }\n+\n+    /**\n+     * Returns the character set encoding scheme. If the value of the\n+     * charSetEncoding is not set then the default will be returned.\n+     *\n+     * @return Returns encoding.\n+     */\n+    public String getCharSetEncoding() {\n+        return format.getCharSetEncoding();\n+    }\n+\n+    public void setCharSetEncoding(String charSetEncoding) {\n+        format.setCharSetEncoding(charSetEncoding);\n+    }\n+\n+    public String getXmlVersion() {\n+        return format.getXmlVersion();\n+    }\n+\n+    public void setXmlVersion(String xmlVersion) {\n+        format.setXmlVersion(xmlVersion);\n+    }\n+\n+    public void setSoap11(boolean b) {\n+        format.setSOAP11(b);\n+    }\n+\n+    public boolean isIgnoreXMLDeclaration() {\n+        return format.isIgnoreXMLDeclaration();\n+    }\n+\n+    public void setIgnoreXMLDeclaration(boolean ignoreXMLDeclaration) {\n+        format.setIgnoreXMLDeclaration(ignoreXMLDeclaration);\n+    }\n+\n+    public void setDoOptimize(boolean b) {\n+        format.setDoOptimize(b);\n+    }\n+\n+    public void setOutputFormat(OMOutputFormat format) {\n+        this.format = format;\n+    }\n+}",
                "additions": 300,
                "raw_url": "https://github.com/apache/ws-axiom/raw/af15fab5b2aa038f895d005cf06652f90ee2e2a3/src/org/apache/axiom/om/impl/MTOMXMLStreamWriter.java",
                "status": "modified",
                "changes": 599,
                "deletions": 299,
                "sha": "e5c427a5258461f702703541ef32cc15819ad9e7",
                "blob_url": "https://github.com/apache/ws-axiom/blob/af15fab5b2aa038f895d005cf06652f90ee2e2a3/src/org/apache/axiom/om/impl/MTOMXMLStreamWriter.java",
                "filename": "src/org/apache/axiom/om/impl/MTOMXMLStreamWriter.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/src/org/apache/axiom/om/impl/MTOMXMLStreamWriter.java?ref=af15fab5b2aa038f895d005cf06652f90ee2e2a3"
            },
            {
                "patch": "@@ -92,9 +92,9 @@ public static void serializeNamespace(OMNamespace namespace, XMLStreamWriter wri\n         String uri = namespace.getName();\r\n         String prefix = namespace.getPrefix();\r\n \r\n-        String prefixFromWriter = writer.getPrefix(uri);\r\n-\r\n         if (uri != null && !\"\".equals(uri)) {\r\n+            String prefixFromWriter = writer.getPrefix(uri);\r\n+\r\n             // lets see whether we have default namespace now\r\n             if (prefix != null && \"\".equals(prefix) && prefixFromWriter == null) {\r\n                 // this has not been declared earlier\r\n@@ -124,9 +124,9 @@ public static void serializeNamespace(OMNamespace namespace, XMLStreamWriter wri\n         String prefix;\r\n         if (element.getNamespace() != null) {\r\n             nameSpaceName = element.getNamespace().getName();\r\n-            writer_prefix = writer.getPrefix(nameSpaceName);\r\n             prefix = element.getNamespace().getPrefix();\r\n             if (nameSpaceName != null) {\r\n+                writer_prefix = writer.getPrefix(nameSpaceName);\r\n                 if (writer_prefix != null) {\r\n                     writer.writeStartElement(nameSpaceName,\r\n                             element.getLocalName());\r",
                "additions": 3,
                "raw_url": "https://github.com/apache/ws-axiom/raw/af15fab5b2aa038f895d005cf06652f90ee2e2a3/src/org/apache/axiom/om/impl/llom/OMSerializerUtil.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "0b75b7cd9827b6b287c3973797ca60faf77d9315",
                "blob_url": "https://github.com/apache/ws-axiom/blob/af15fab5b2aa038f895d005cf06652f90ee2e2a3/src/org/apache/axiom/om/impl/llom/OMSerializerUtil.java",
                "filename": "src/org/apache/axiom/om/impl/llom/OMSerializerUtil.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/src/org/apache/axiom/om/impl/llom/OMSerializerUtil.java?ref=af15fab5b2aa038f895d005cf06652f90ee2e2a3"
            }
        ],
        "bug_id": "ws-axiom_28",
        "parent": "https://github.com/apache/ws-axiom/commit/0410803ae39ebb6e135a874b8d28351588eb9a30",
        "message": "- Prevent NPE's\n- temporary fix for speeding up serialization (char[] serialization is faster than String)",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/d49ab202444f0184e2757c398c60aa7a0a079ba7",
        "file": [
            {
                "patch": "@@ -387,13 +387,17 @@ public OMProcessingInstruction createOMProcessingInstruction(\n             OMContainer parent, String piTarget, String piData) {\n         ProcessingInstructionImpl pi =\n             new ProcessingInstructionImpl(getDocumentFromParent(parent), piTarget, piData, this);\n-        parent.addChild(pi);\n+        if (parent != null) {\n+            parent.addChild(pi);\n+        }\n         return pi;\n     }\n \n     public OMComment createOMComment(OMContainer parent, String content) {\n         CommentImpl comment = new CommentImpl(getDocumentFromParent(parent), content, this);\n-        parent.addChild(comment);\n+        if (parent != null) {\n+            parent.addChild(comment);\n+        }\n         return comment;\n     }\n \n@@ -407,7 +411,10 @@ public OMDocument createOMDocument(OMXMLParserWrapper builder) {\n     }\n \n     private DocumentImpl getDocumentFromParent(OMContainer parent) {\n-        if (parent instanceof DocumentImpl) {\n+        if (parent == null) {\n+            // TODO: this is really a hack; we should make OMDOMFactory stateless\n+            return (DocumentImpl)createOMDocument();\n+        } else if (parent instanceof DocumentImpl) {\n             return (DocumentImpl) parent;\n         } else {\n             return (DocumentImpl) ((ParentNode) parent).getOwnerDocument();",
                "additions": 10,
                "raw_url": "https://github.com/apache/ws-axiom/raw/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/factory/OMDOMFactory.java",
                "status": "modified",
                "changes": 13,
                "deletions": 3,
                "sha": "7deeeb5b3cdd671d0db277a922aa3d79c9320685",
                "blob_url": "https://github.com/apache/ws-axiom/blob/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/factory/OMDOMFactory.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/factory/OMDOMFactory.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/factory/OMDOMFactory.java?ref=d49ab202444f0184e2757c398c60aa7a0a079ba7"
            },
            {
                "patch": "@@ -85,9 +85,6 @@ public static TestSuite suite() {\n         // TODO: investigate why this is not working with DOOM\n         builder.exclude(TestGetChildrenWithName4.class);\n \n-        // TODO: there seems to be an issue with OMFactory in this case\n-        builder.exclude(org.apache.axiom.ts.om.pi.TestDigest.class);\n-        \n         // TODO: if there is a comment node surrounded by text, then these text nodes need to be merged\n         builder.exclude(TestDigest.class, \"(|(file=digest3.xml)(file=digest4.xml))\");\n         ",
                "additions": 0,
                "raw_url": "https://github.com/apache/ws-axiom/raw/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-dom/src/test/java/org/apache/axiom/om/impl/dom/OMImplementationTest.java",
                "status": "modified",
                "changes": 3,
                "deletions": 3,
                "sha": "a5d7af9c2985c8380ca192246da66e04aa253431",
                "blob_url": "https://github.com/apache/ws-axiom/blob/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-dom/src/test/java/org/apache/axiom/om/impl/dom/OMImplementationTest.java",
                "filename": "modules/axiom-dom/src/test/java/org/apache/axiom/om/impl/dom/OMImplementationTest.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/test/java/org/apache/axiom/om/impl/dom/OMImplementationTest.java?ref=d49ab202444f0184e2757c398c60aa7a0a079ba7"
            },
            {
                "patch": "@@ -188,6 +188,7 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.om.element.TestSetTextQNameWithEmptyPrefix(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestSetTextQNameWithoutNamespace(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestUndeclarePrefix(metaFactory));\n+        addTest(new org.apache.axiom.ts.om.factory.TestCreateOMCommentWithoutParent(metaFactory));\n         for (int i=0; i<OMElementCreator.INSTANCES.length; i++) {\n             OMElementCreator creator = OMElementCreator.INSTANCES[i];\n             if (creator.isSupportsDefaultNamespace()) {\n@@ -204,6 +205,7 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.om.factory.TestCreateOMElementWithNullURIAndPrefix(metaFactory));\n         addTest(new org.apache.axiom.ts.om.factory.TestCreateOMNamespace(metaFactory));\n         addTest(new org.apache.axiom.ts.om.factory.TestCreateOMNamespaceWithNullURI(metaFactory));\n+        addTest(new org.apache.axiom.ts.om.factory.TestCreateOMProcessingInstructionWithoutParent(metaFactory));\n         addTest(new org.apache.axiom.ts.om.factory.TestCreateOMText(metaFactory));\n         addTest(new org.apache.axiom.ts.om.factory.TestCreateOMTextFromDataHandlerProvider(metaFactory));\n         addTest(new org.apache.axiom.ts.om.namespace.TestEquals(metaFactory));",
                "additions": 2,
                "raw_url": "https://github.com/apache/ws-axiom/raw/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/OMTestSuiteBuilder.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "9beb9659cbff564a9b15e94dcca38aaeab642372",
                "blob_url": "https://github.com/apache/ws-axiom/blob/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/OMTestSuiteBuilder.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/OMTestSuiteBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/OMTestSuiteBuilder.java?ref=d49ab202444f0184e2757c398c60aa7a0a079ba7"
            },
            {
                "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.factory;\n+\n+import org.apache.axiom.om.OMComment;\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.ts.AxiomTestCase;\n+\n+public class TestCreateOMCommentWithoutParent extends AxiomTestCase {\n+    public TestCreateOMCommentWithoutParent(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        OMComment comment = metaFactory.getOMFactory().createOMComment(null, \"my comment\");\n+        assertNull(comment.getParent());\n+        assertEquals(\"my comment\", comment.getValue());\n+    }\n+}",
                "additions": 35,
                "raw_url": "https://github.com/apache/ws-axiom/raw/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMCommentWithoutParent.java",
                "status": "added",
                "changes": 35,
                "deletions": 0,
                "sha": "d965dab6a910836fcdc8ae96ac79cb6debb1674e",
                "blob_url": "https://github.com/apache/ws-axiom/blob/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMCommentWithoutParent.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMCommentWithoutParent.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMCommentWithoutParent.java?ref=d49ab202444f0184e2757c398c60aa7a0a079ba7"
            },
            {
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.factory;\n+\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.om.OMProcessingInstruction;\n+import org.apache.axiom.ts.AxiomTestCase;\n+\n+public class TestCreateOMProcessingInstructionWithoutParent extends AxiomTestCase {\n+    public TestCreateOMProcessingInstructionWithoutParent(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        OMProcessingInstruction pi = metaFactory.getOMFactory().createOMProcessingInstruction(null, \"mypi\", \"data\");\n+        assertNull(pi.getParent());\n+        assertEquals(\"mypi\", pi.getTarget());\n+        assertEquals(\"data\", pi.getValue());\n+    }\n+}",
                "additions": 36,
                "raw_url": "https://github.com/apache/ws-axiom/raw/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMProcessingInstructionWithoutParent.java",
                "status": "added",
                "changes": 36,
                "deletions": 0,
                "sha": "53cbf3d21577cff7eeda59f8beff4772076df4c4",
                "blob_url": "https://github.com/apache/ws-axiom/blob/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMProcessingInstructionWithoutParent.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMProcessingInstructionWithoutParent.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMProcessingInstructionWithoutParent.java?ref=d49ab202444f0184e2757c398c60aa7a0a079ba7"
            }
        ],
        "bug_id": "ws-axiom_29",
        "parent": "https://github.com/apache/ws-axiom/commit/46577906748ab74078363b193c67dd5495228b7e",
        "message": "Fixed an issue in DOOM causing a NPE when attempting to create an OMComment or OMProcessingInstruction without a parent.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1",
        "file": [
            {
                "patch": "@@ -208,10 +208,9 @@ public String getNextContentId() {\n     }\n \n     /**\n-     * Returns the character set encoding scheme. If the value of the charSetEncoding is not set\n-     * then the default will be returned.\n+     * Returns the character set encoding scheme.\n      *\n-     * @return Returns encoding string.\n+     * @return Returns encoding string or null if it has not been set.\n      */\n     public String getCharSetEncoding() {\n         return this.charSetEncoding;",
                "additions": 2,
                "raw_url": "https://github.com/apache/ws-axiom/raw/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "status": "modified",
                "changes": 5,
                "deletions": 3,
                "sha": "86a96a6cb8859241179f9bc84f11844dde024604",
                "blob_url": "https://github.com/apache/ws-axiom/blob/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java?ref=a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1"
            },
            {
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.axiom.om.ds;\n \n import org.apache.axiom.om.OMDataSourceExt;\n+import org.apache.axiom.om.OMOutputFormat;\n import org.apache.axiom.om.util.StAXUtils;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -77,9 +78,15 @@ public boolean isDestructiveWrite() {\n     }\n \n     public byte[] getXMLBytes(String encoding) throws UnsupportedEncodingException {\n+        if (encoding == null)\n+        {\n+          encoding = OMOutputFormat.DEFAULT_CHAR_SET_ENCODING;\n+        }\n+\n         if (DEBUG_ENABLED) {\n             log.debug(\"getXMLBytes encoding=\"+encoding);\n         }\n+\n         // Return the byte array directly if it is the same encoding\n         // Otherwise convert the bytes to the proper encoding\n         if (!byteArray.encoding.equalsIgnoreCase(encoding)) {",
                "additions": 7,
                "raw_url": "https://github.com/apache/ws-axiom/raw/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-api/src/main/java/org/apache/axiom/om/ds/ByteArrayDataSource.java",
                "status": "modified",
                "changes": 7,
                "deletions": 0,
                "sha": "361f707dc2a90c2e26cdfae80726e1c125417939",
                "blob_url": "https://github.com/apache/ws-axiom/blob/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-api/src/main/java/org/apache/axiom/om/ds/ByteArrayDataSource.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/ds/ByteArrayDataSource.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/ds/ByteArrayDataSource.java?ref=a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1"
            },
            {
                "patch": "@@ -140,6 +140,15 @@ public void testByteArrayDS() throws Exception {\n         assertTrue(\"The obtained bytes did not match the payload\",\n                    payload1.equals(payload));\n         \n+       \n+        // Test getting the raw bytes with the default encoding\n+        OMOutputFormat outputFormat = new OMOutputFormat();\n+        baos = new ByteArrayOutputStream();\n+        ds.serialize(baos, outputFormat);\n+        output = baos.toString(OMOutputFormat.DEFAULT_CHAR_SET_ENCODING);\n+        System.out.println(output);\n+        assertTrue(\"The obtained bytes did not match the payload\",\n+                   payload1.equals(output));     \n     }\n     \n     /**",
                "additions": 9,
                "raw_url": "https://github.com/apache/ws-axiom/raw/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "status": "modified",
                "changes": 9,
                "deletions": 0,
                "sha": "8e2b7810f43cac260db0671be9da773d8f1ef4bf",
                "blob_url": "https://github.com/apache/ws-axiom/blob/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java?ref=a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1"
            }
        ],
        "bug_id": "ws-axiom_30",
        "parent": "https://github.com/apache/ws-axiom/commit/943bf918ac8dfc7f11945eb21753b2f3829ace43",
        "message": "Revised patch for fixing potential NPE during serialization if an encoding has not been set for the OMOutputFormat.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/6729a678ed7e91d0cd39d9f38275bfceb259d728",
        "file": [
            {
                "patch": "@@ -53,6 +53,14 @@\n     private static final Attributes.Name IMPLEMENTATION_VERSION =\n             new Attributes.Name(\"Implementation-Version\");\n     \n+    /**\n+     * Map that stores detected dialects by location. The location is the URL corresponding to the\n+     * root folder of the classpath entry from which the StAX implementation is loaded. Note that\n+     * in the case of a JAR file, this is not the URL pointing to the JAR, but a <tt>jar:</tt>\n+     * URL that points to the root folder of the archive. The <code>null</code> location is used\n+     * to represent StAX implementations that are loaded from the bootstrap class loader, i.e.\n+     * which are part of the JRE.\n+     */\n     private static final Map/*<URL,StAXDialect>*/ dialectByUrl =\n             Collections.synchronizedMap(new HashMap());\n \n@@ -119,15 +127,21 @@ public static XMLOutputFactory normalize(XMLOutputFactory factory) {\n      * @return the detected dialect\n      */\n     public static StAXDialect getDialect(Class implementationClass) {\n-        URL rootUrl = getRootUrlForResource(implementationClass.getClassLoader(),\n-                implementationClass.getName().replace('.', '/') + \".class\");\n-        if (rootUrl == null) {\n-            log.warn(\"Unable to determine location of StAX implementation containing class \"\n-                    + implementationClass.getName() + \"; using default dialect\");\n-            return UnknownStAXDialect.INSTANCE;\n+        URL rootUrl;\n+        ClassLoader classLoader = implementationClass.getClassLoader();\n+        if (classLoader == null) {\n+            // null means bootstrap classloader; represent this location as null\n+            rootUrl = null;\n         } else {\n-            return getDialect(rootUrl);\n+            rootUrl = getRootUrlForResource(classLoader,\n+                    implementationClass.getName().replace('.', '/') + \".class\");\n+            if (rootUrl == null) {\n+                log.warn(\"Unable to determine location of StAX implementation containing class \"\n+                        + implementationClass.getName() + \"; using default dialect\");\n+                return UnknownStAXDialect.INSTANCE;\n+            }\n         }\n+        return getDialect(rootUrl);\n     }\n \n     private static StAXDialect getDialect(URL rootUrl) {\n@@ -142,6 +156,35 @@ private static StAXDialect getDialect(URL rootUrl) {\n     }\n     \n     private static StAXDialect detectDialect(URL rootUrl) {\n+        StAXDialect dialect;\n+        if (rootUrl == null) {\n+            dialect = detectDialectFromJRE();\n+        } else {\n+            dialect = detectDialectFromJar(rootUrl);\n+        }\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Detected StAX dialect: \" + dialect.getName());\n+        }\n+        return dialect;\n+    }\n+    \n+    private static StAXDialect detectDialectFromJRE() {\n+        String vendor = System.getProperty(\"java.vendor\");\n+        String version = System.getProperty(\"java.version\");\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"StAX implementation is part of the JRE:\\n\" +\n+                    \"  Vendor:  \" + vendor + \"\\n\" +\n+                    \"  Version: \" + version);\n+        }\n+        if (vendor.startsWith(\"Sun\") || vendor.startsWith(\"Apple\")) {\n+            return SJSXPDialect.INSTANCE;\n+        } else {\n+            log.warn(\"Unable to determine dialect of StAX implementation provided by the JRE\");\n+            return UnknownStAXDialect.INSTANCE;\n+        }\n+    }\n+    \n+    private static StAXDialect detectDialectFromJar(URL rootUrl) {\n         Manifest manifest;\n         try {\n             URL metaInfUrl = new URL(rootUrl, \"META-INF/MANIFEST.MF\");\n@@ -167,13 +210,14 @@ private static StAXDialect detectDialect(URL rootUrl) {\n         }\n         // For the moment, the dialect detection is quite simple, but in the future we will probably\n         // have to differentiate by version number\n-        if(vendor != null) {\n-            if (vendor.toLowerCase().indexOf(\"woodstox\") != -1) {\n-                return WoodstoxDialect.INSTANCE;\n-            } else if (title.indexOf(\"SJSXP\") != -1) {\n-                return SJSXPDialect.INSTANCE;\n-            } \n+        if (vendor != null && vendor.toLowerCase().indexOf(\"woodstox\") != -1) {\n+            return WoodstoxDialect.INSTANCE;\n+        } else if (title != null && title.indexOf(\"SJSXP\") != -1) {\n+            return SJSXPDialect.INSTANCE;\n+        } else {\n+            log.warn(\"Unable to determine dialect of the StAX implementation at \" + rootUrl\n+                    + \" (using JAR manifest)\");\n+            return UnknownStAXDialect.INSTANCE;\n         }\n-        return UnknownStAXDialect.INSTANCE;\n     }\n }",
                "additions": 58,
                "raw_url": "https://github.com/apache/ws-axiom/raw/6729a678ed7e91d0cd39d9f38275bfceb259d728/modules/axiom-api/src/main/java/org/apache/axiom/util/stax/dialect/StAXDialectDetector.java",
                "status": "modified",
                "changes": 72,
                "deletions": 14,
                "sha": "436380cc874436cc9b8f3a915b7fe724ad7810e3",
                "blob_url": "https://github.com/apache/ws-axiom/blob/6729a678ed7e91d0cd39d9f38275bfceb259d728/modules/axiom-api/src/main/java/org/apache/axiom/util/stax/dialect/StAXDialectDetector.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/util/stax/dialect/StAXDialectDetector.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/util/stax/dialect/StAXDialectDetector.java?ref=6729a678ed7e91d0cd39d9f38275bfceb259d728"
            }
        ],
        "bug_id": "ws-axiom_31",
        "parent": "https://github.com/apache/ws-axiom/commit/2c490458d11248097ec5e52136da3811ef307549",
        "message": "Some improvements of the StAX dialect detection:\n* Avoid NPE if the StAX implementation is part of the JRE (in which case getClassLoader may return null).\n* Detect the StAX implementation on Sun's JRE 1.6.\n* Fixed another potential NPE when the manifest file doesn't have all expected attributes.\n* Added more logging to warn the user if the StAX implementation can't be detected.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/e991deb22f02f9197e7c2f751c29390448e70114",
        "file": [
            {
                "patch": "@@ -1110,8 +1110,24 @@ public QName resolveQName(String qname) {\n     }\r\n \r\n     public OMElement cloneOMElement() {\r\n+        \r\n+        if (log.isDebugEnabled()) {\r\n+            log.debug(\"cloneOMElement start\");\r\n+            log.debug(\"  element string =\" + this.toString());\r\n+            log.debug(\" isComplete = \" + isComplete());\r\n+            log.debug(\"  builder = \" + builder);\r\n+        }\r\n+        // Make sure the source (this node) is completed\r\n+        if (!isComplete()) {\r\n+            this.build();\r\n+        }\r\n+        \r\n+        // Now get a parser for the full tree\r\n+        XMLStreamReader xmlStreamReader = this.getXMLStreamReader(true);\r\n+        \r\n+        // Build the (target) clonedElement from the parser\r\n         OMElement clonedElement =\r\n-                new StAXOMBuilder(this.getXMLStreamReader(true)).getDocumentElement();\r\n+                new StAXOMBuilder(xmlStreamReader).getDocumentElement();\r\n         clonedElement.build();\r\n         return clonedElement;\r\n     }\r",
                "additions": 17,
                "raw_url": "https://github.com/apache/ws-axiom/raw/e991deb22f02f9197e7c2f751c29390448e70114/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "status": "modified",
                "changes": 18,
                "deletions": 1,
                "sha": "b8b0c93629857065e3696fc4d7fcd355e62ebc81",
                "blob_url": "https://github.com/apache/ws-axiom/blob/e991deb22f02f9197e7c2f751c29390448e70114/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java?ref=e991deb22f02f9197e7c2f751c29390448e70114"
            },
            {
                "patch": "@@ -323,8 +323,14 @@ public void setPreviousOMSibling(OMNode previousSibling) {\n      * @throws OMException\r\n      */\r\n     public void build() throws OMException {\r\n+        if (builder != null && builder.isCompleted()) {\r\n+            if (DEBUG_ENABLED) {\r\n+                log.debug(\"Builder is already complete.\");\r\n+            }\r\n+        }\r\n         while (!done) {\r\n-            builder.next();\r\n+\r\n+            builder.next();    \r\n             if (builder.isCompleted() && !done) {\r\n                 if (DEBUG_ENABLED) {\r\n                     log.debug(\"Builder is complete.  Setting OMNode to complete.\");\r",
                "additions": 7,
                "raw_url": "https://github.com/apache/ws-axiom/raw/e991deb22f02f9197e7c2f751c29390448e70114/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMNodeImpl.java",
                "status": "modified",
                "changes": 8,
                "deletions": 1,
                "sha": "624e289e2dfb88f64cb47203f1c118e8d9162d7e",
                "blob_url": "https://github.com/apache/ws-axiom/blob/e991deb22f02f9197e7c2f751c29390448e70114/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMNodeImpl.java",
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMNodeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMNodeImpl.java?ref=e991deb22f02f9197e7c2f751c29390448e70114"
            },
            {
                "patch": "@@ -1096,10 +1096,10 @@ private void updateNextNode() {\n             nextNode = navigator.next();\r\n         } else {\r\n             if (!switchingAllowed) {\r\n-                if (navigator.isCompleted() || builder.isCompleted()) {\r\n+                if (navigator.isCompleted() || builder == null || builder.isCompleted()) {\r\n                     nextNode = null;\r\n                     if (DEBUG_ENABLED) {\r\n-                        if (builder.isCompleted()) {\r\n+                        if (builder == null || builder.isCompleted()) {\r\n                             log.debug(\"Builder is complete.  Next node is set to null.\");\r\n                         }\r\n                     }\r\n@@ -1117,7 +1117,9 @@ private void updateNextNode() {\n                 } else {\r\n                     // reset caching (the default is ON so it was not needed in the\r\n                     // earlier case!\r\n-                    builder.setCache(false);\r\n+                    if (builder != null) {\r\n+                        builder.setCache(false);\r\n+                    }\r\n                     state = SWITCH_AT_NEXT;\r\n                 }\r\n             }\r\n@@ -1265,6 +1267,13 @@ public String getPIData() {\n      */\r\n     private int generateEvents(OMNode node) {\r\n         int returnEvent = 0;\r\n+        if (node == null) {\r\n+            if (log.isDebugEnabled()) {\r\n+                log.debug(\"Node is null...returning END_DOCUMENT\");\r\n+            }\r\n+            returnEvent = END_DOCUMENT;\r\n+            return returnEvent;\r\n+        }\r\n         int nodeType = node.getType();\r\n         switch (nodeType) {\r\n             case OMNode.ELEMENT_NODE:\r",
                "additions": 12,
                "raw_url": "https://github.com/apache/ws-axiom/raw/e991deb22f02f9197e7c2f751c29390448e70114/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMStAXWrapper.java",
                "status": "modified",
                "changes": 15,
                "deletions": 3,
                "sha": "b50a1ade200db2992e43ddbbdf41c2cd7324bbc9",
                "blob_url": "https://github.com/apache/ws-axiom/blob/e991deb22f02f9197e7c2f751c29390448e70114/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMStAXWrapper.java",
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMStAXWrapper.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMStAXWrapper.java?ref=e991deb22f02f9197e7c2f751c29390448e70114"
            }
        ],
        "bug_id": "ws-axiom_32",
        "parent": "https://github.com/apache/ws-axiom/commit/a072d7cfad5d5ca0f41ed14c32cc6664c5a08651",
        "message": "Quick Fix for an NPE\nAdded protection in the OMStAXWrapper.generateEvents method if the current node is null.\nAlso added more logging to OMElementImpl and OMNodeImpl.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/2c4299360c46cc7bc1fbd990495676b63a99871d",
        "file": [
            {
                "patch": "@@ -235,7 +235,11 @@ protected void serializeElement(XMLStreamReader reader,\n                 String prefix = (String) writePrefixList.get(i);\n                 String namespace = (String) writeNSList.get(i);\n                 if (prefix != null) {\n-                    writer.writeNamespace(prefix, namespace);\n+                    if (namespace == null) {\n+                        writer.writeNamespace(prefix, \"\");\n+                    } else {\n+                        writer.writeNamespace(prefix, namespace);\n+                    }\n                 } else {\n                     writer.writeDefaultNamespace(namespace);\n                 }",
                "additions": 5,
                "raw_url": "https://github.com/apache/ws-axiom/raw/2c4299360c46cc7bc1fbd990495676b63a99871d/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/serialize/StreamingOMSerializer.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "bbd85a4e1a9b4f166a33a2e81cb4a997cd167056",
                "blob_url": "https://github.com/apache/ws-axiom/blob/2c4299360c46cc7bc1fbd990495676b63a99871d/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/serialize/StreamingOMSerializer.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/impl/serialize/StreamingOMSerializer.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/serialize/StreamingOMSerializer.java?ref=2c4299360c46cc7bc1fbd990495676b63a99871d"
            },
            {
                "patch": "@@ -0,0 +1,112 @@\n+package org.apache.axiom.om.impl.serializer;\r\n+\r\n+import org.apache.axiom.om.AbstractTestCase;\r\n+import org.apache.axiom.om.OMXMLParserWrapper;\r\n+import org.apache.axiom.om.OMAbstractFactory;\r\n+import org.apache.axiom.om.impl.serialize.StreamingOMSerializer;\r\n+import org.apache.axiom.om.impl.llom.factory.OMXMLBuilderFactory;\r\n+import org.apache.axiom.om.impl.builder.StAXOMBuilder;\r\n+import org.apache.axiom.soap.SOAPEnvelope;\r\n+import org.apache.axiom.soap.SOAPBody;\r\n+import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;\r\n+import org.custommonkey.xmlunit.XMLTestCase;\r\n+\r\n+import javax.xml.stream.*;\r\n+import java.io.*;\r\n+\r\n+public class OMSerializerTest2 extends XMLTestCase {\r\n+    private XMLStreamReader reader;\r\n+    private XMLStreamWriter writer;\r\n+    private static final String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\r\n+            \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\" +\r\n+            \"<soapenv:Header/>\" +\r\n+            \"<soapenv:Body>\" +\r\n+            \"<ReportService_GetOlapServers_1_0_Response xmlns=\\\"http://reportservice.type\\\">\" +\r\n+            \"<status>\" +\r\n+            \"<returnCode xmlns=\\\"\\\">\" +\r\n+            \"<returnCode>0</returnCode>\" +\r\n+            \"</returnCode>\" +\r\n+            \"</status>\" +\r\n+            \"<olapServerId xmlns=\\\"http://type.ws.analyzer.jrisk.appl.net\\\">jnp://192.168.111.66:1234</olapServerId>\" +\r\n+            \"</ReportService_GetOlapServers_1_0_Response>\" +\r\n+            \"</soapenv:Body>\" +\r\n+            \"</soapenv:Envelope>\";\r\n+\r\n+    public OMSerializerTest2(String testName) {\r\n+        super(testName);\r\n+    }\r\n+\r\n+    protected void setUp() throws Exception {\r\n+        reader =\r\n+                XMLInputFactory.newInstance().\r\n+                        createXMLStreamReader(\r\n+                                new StringReader(xml));\r\n+    }\r\n+\r\n+    public void testRawSerializer() throws Exception {\r\n+        StreamingOMSerializer serializer = new StreamingOMSerializer();\r\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n+        writer =\r\n+                XMLOutputFactory.newInstance().\r\n+                        createXMLStreamWriter(byteArrayOutputStream);\r\n+        serializer.serialize(reader, writer);\r\n+        writer.flush();\r\n+\r\n+        String outputString = new String(byteArrayOutputStream.toByteArray());\r\n+        assertXMLEqual(xml, outputString);\r\n+\r\n+    }\r\n+\r\n+    public void testElementPullStream1() throws Exception {\r\n+        OMXMLParserWrapper builder = OMXMLBuilderFactory.createStAXSOAPModelBuilder(\r\n+                OMAbstractFactory.getSOAP11Factory(),\r\n+                reader);\r\n+        SOAPEnvelope env = (SOAPEnvelope) builder.getDocumentElement();\r\n+        StreamingOMSerializer serializer = new StreamingOMSerializer();\r\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n+        writer =\r\n+                XMLOutputFactory.newInstance().\r\n+                        createXMLStreamWriter(byteArrayOutputStream);\r\n+\r\n+        serializer.serialize(env.getXMLStreamReaderWithoutCaching(), writer);\r\n+        writer.flush();\r\n+\r\n+        String outputString = new String(byteArrayOutputStream.toByteArray());\r\n+        assertXMLEqual(xml, outputString);\r\n+    }\r\n+\r\n+    public void testElementPullStream1WithCacheOff() throws Exception {\r\n+\r\n+        StAXSOAPModelBuilder soapBuilder = new StAXSOAPModelBuilder(reader, null);\r\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n+        writer =\r\n+                XMLOutputFactory.newInstance().\r\n+                        createXMLStreamWriter(byteArrayOutputStream);\r\n+\r\n+        SOAPEnvelope env = (SOAPEnvelope) soapBuilder.getDocumentElement();\r\n+        env.serializeAndConsume(writer);\r\n+        writer.flush();\r\n+\r\n+        String outputString = new String(byteArrayOutputStream.toByteArray());\r\n+        assertTrue(outputString != null && !\"\".equals(outputString) && outputString.length() > 1);\r\n+\r\n+        writer =\r\n+                XMLOutputFactory.newInstance().\r\n+                        createXMLStreamWriter(byteArrayOutputStream);\r\n+\r\n+        StringWriter stringWriter = new StringWriter();\r\n+\r\n+        //now we should not be able to serilaize anything ! this should throw\r\n+        //an error\r\n+        try {\r\n+            env.serializeAndConsume(writer);\r\n+            fail();\r\n+        } catch (XMLStreamException e) {\r\n+            e.printStackTrace(new PrintWriter(stringWriter, true));\r\n+            assertTrue(stringWriter.toString()\r\n+                    .indexOf(\"problem accessing the parser. Parser already accessed!\") > -1);\r\n+        } catch (Exception e) {\r\n+            fail(\"Expecting an XMLStreamException \" + e.getMessage());\r\n+        }\r\n+    }\r\n+}\r",
                "additions": 112,
                "raw_url": "https://github.com/apache/ws-axiom/raw/2c4299360c46cc7bc1fbd990495676b63a99871d/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/serializer/OMSerializerTest2.java",
                "status": "added",
                "changes": 112,
                "deletions": 0,
                "sha": "b26cc1652cbc771edeed6f7b5c3e442e7c3fe962",
                "blob_url": "https://github.com/apache/ws-axiom/blob/2c4299360c46cc7bc1fbd990495676b63a99871d/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/serializer/OMSerializerTest2.java",
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/serializer/OMSerializerTest2.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/serializer/OMSerializerTest2.java?ref=2c4299360c46cc7bc1fbd990495676b63a99871d"
            }
        ],
        "bug_id": "ws-axiom_33",
        "parent": "https://github.com/apache/ws-axiom/commit/a4b6d710c93e683d841068c7ce07985b6cbbec38",
        "message": "Fix for WSCOMMONS-172 [Default Namespace NPE] and AXIS2-1964 [Null Pointer Exception in Service STUB class at _operationClient.execute(true); line for AXIS2 1.1.1]",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/4da471a1b1ce74c0c35972f2e6705b65d0433acf",
        "file": [
            {
                "patch": "@@ -268,7 +268,8 @@ private void forceExpand() {\n             }\r\n             String readerURI = readerFromDS.getNamespaceURI();\r\n             readerURI = (readerURI == null) ? \"\" : readerURI;\r\n-            String uri = getNamespace().getNamespaceURI();\r\n+            String uri = (getNamespace() == null) ? \"\" : \r\n+                ((getNamespace().getNamespaceURI() == null) ? \"\" : getNamespace().getNamespaceURI());\r\n             if (!readerURI.equals(uri)) {\r\n                 log.error(\"forceExpand: expected element namespace \" +\r\n                         getLocalName() + \", found \" + uri);\r\n@@ -282,7 +283,7 @@ private void forceExpand() {\n             String prefix = null;\r\n             \r\n             OMNamespace ns = getNamespace();\r\n-            if (ns instanceof DeferredNamespace) {\r\n+            if (ns == null || ns instanceof DeferredNamespace) {\r\n                 // prefix is not available until after expansion\r\n             } else {\r\n                 prefix = ns.getPrefix();\r\n@@ -1134,4 +1135,4 @@ public boolean equals(Object obj) {\n         }\r\n         \r\n     }\r\n-}\n\\ No newline at end of file\n+}\r",
                "additions": 4,
                "raw_url": "https://github.com/apache/ws-axiom/raw/4da471a1b1ce74c0c35972f2e6705b65d0433acf/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMSourcedElementImpl.java",
                "status": "modified",
                "changes": 7,
                "deletions": 3,
                "sha": "c34e9b9e66f8f95c5360230e5684c1939bc84088",
                "blob_url": "https://github.com/apache/ws-axiom/blob/4da471a1b1ce74c0c35972f2e6705b65d0433acf/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMSourcedElementImpl.java",
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMSourcedElementImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMSourcedElementImpl.java?ref=4da471a1b1ce74c0c35972f2e6705b65d0433acf"
            }
        ],
        "bug_id": "ws-axiom_34",
        "parent": "https://github.com/apache/ws-axiom/commit/f3d6fc493990adaa2cec0610b0c8ede6d987282a",
        "message": "The forceExpand method assumed that the namespace returned by getNamespace() would never be null. However, in theory a namespace is not mandatory for the creation of an OMElement. This causes an NPE, which I have fixed here.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/b19aff8f97575f08f27842cdf1df000fcddb09a4",
        "file": [
            {
                "patch": "@@ -283,7 +283,8 @@ protected OMNode createWithCustomBuilder(CustomBuilder customBuilder, OMFactory\n             } else {\r\n                 parent = (OMContainer)lastNode;\r\n             }\r\n-                \r\n+        } else {\r\n+            parent = document;\r\n         }\r\n         return customBuilder.create(namespace, localPart, parent, parser, factory);\r\n         \r",
                "additions": 2,
                "raw_url": "https://github.com/apache/ws-axiom/raw/b19aff8f97575f08f27842cdf1df000fcddb09a4/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "5e9ee156c89b1cf50669725674e84dc35b9be1e2",
                "blob_url": "https://github.com/apache/ws-axiom/blob/b19aff8f97575f08f27842cdf1df000fcddb09a4/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/builder/StAXOMBuilder.java?ref=b19aff8f97575f08f27842cdf1df000fcddb09a4"
            }
        ],
        "bug_id": "ws-axiom_35",
        "parent": "https://github.com/apache/ws-axiom/commit/8637d0d10366e1d9a160692acc1b6a0d7dc763ed",
        "message": "Quick Fix\nContributor:Rich Scheuerle\nNPE in the custom builder code if the custom object is the root.\nThis is a one line change to use the document as the parent in such cases.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/24b680b32ff99e6ced264fb28384147134faf025",
        "file": [
            {
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.axiom.om.OMElement;\n import org.apache.axiom.om.OMNamespace;\n import org.apache.axiom.om.OMNode;\n+import org.apache.axiom.om.OMConstants;\n import org.apache.axiom.om.impl.serialize.StreamingOMSerializer;\n \n import javax.xml.namespace.NamespaceContext;\n@@ -379,6 +380,9 @@ public static void serializeStartpart(OMElement element, String localName,\n                 }\n             }\n             if (namespace != null) {\n+                if(prefix == null && OMConstants.XMLNS_URI.equals(namespace)){\n+                    prefix = OMConstants.XMLNS_PREFIX;\n+                }\n                 // Qualified attribute\n                 writer.writeAttribute(prefix, namespace,\n                                       attr.getLocalName(),",
                "additions": 4,
                "raw_url": "https://github.com/apache/ws-axiom/raw/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/util/OMSerializerUtil.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "3a00cec6fc371f5057d122db8deb5e43e7ab3e5b",
                "blob_url": "https://github.com/apache/ws-axiom/blob/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/util/OMSerializerUtil.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/impl/util/OMSerializerUtil.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/util/OMSerializerUtil.java?ref=24b680b32ff99e6ced264fb28384147134faf025"
            },
            {
                "patch": "@@ -43,8 +43,12 @@ public abstract OMElement handleEvent(XMLStreamReader parser,\n     protected void processNamespaceData(OMElement node, boolean checkSOAPNamespace) {\r\n         int namespaceCount = parser.getNamespaceCount();\r\n         for (int i = 0; i < namespaceCount; i++) {\r\n-            node.declareNamespace(parser.getNamespaceURI(i),\r\n-                                  parser.getNamespacePrefix(i));\r\n+            String nsp = parser.getNamespaceURI(i);\r\n+            String prefix = parser.getNamespacePrefix(i);\r\n+            if(nsp != null && prefix != null) {\r\n+                node.declareNamespace(nsp,\r\n+                        prefix);\r\n+            }\r\n         }\r\n \r\n         // set the own namespace\r\n@@ -62,8 +66,6 @@ protected void processNamespaceData(OMElement node, boolean checkSOAPNamespace)\n                 namespace = node.findNamespace(namespaceURI, prefix);\r\n             }\r\n             node.setNamespace(namespace);\r\n-        } else {\r\n-\r\n         }\r\n \r\n         // TODO we got to have this to make sure OM reject mesagess that are not name space qualified\r",
                "additions": 6,
                "raw_url": "https://github.com/apache/ws-axiom/raw/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/SOAPBuilderHelper.java",
                "status": "modified",
                "changes": 10,
                "deletions": 4,
                "sha": "b163817f0c456fa983fde8ad87877843dd6306a0",
                "blob_url": "https://github.com/apache/ws-axiom/blob/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/SOAPBuilderHelper.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/SOAPBuilderHelper.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/SOAPBuilderHelper.java?ref=24b680b32ff99e6ced264fb28384147134faf025"
            },
            {
                "patch": "@@ -23,9 +23,11 @@\n \r\n import java.io.File;\r\n \r\n+import org.custommonkey.xmlunit.XMLTestCase;\r\n+\r\n /** Abstract base class for test cases. */\r\n public abstract class AbstractTestCase\r\n-        extends TestCase {\r\n+        extends XMLTestCase {\r\n     protected String testDir = \"test\" + File.separator;\r\n     protected String sampleDir = \"samples\" + File.separator;\r\n     protected String outDir = \"target\" + File.separator + \"generated\" +\r",
                "additions": 3,
                "raw_url": "https://github.com/apache/ws-axiom/raw/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/om/AbstractTestCase.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "aba813929de4d1edf01de61a9780a9af6bb6eb14",
                "blob_url": "https://github.com/apache/ws-axiom/blob/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/om/AbstractTestCase.java",
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/AbstractTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/AbstractTestCase.java?ref=24b680b32ff99e6ced264fb28384147134faf025"
            },
            {
                "patch": "@@ -73,7 +73,7 @@ protected void setUp() throws Exception {\n         OMElement data = new OMElementImpl(\"data\", dataName, fac);\r\n \r\n         OMNamespaceImpl mime = new OMNamespaceImpl(\r\n-                \"http://www.w3.org/2003/06/xmlmime\", \"m\");\r\n+                \"http://www.w3.org/2003/06/xmlmime\", \"mime\");\r\n \r\n         OMElement text = new OMElementImpl(\"name\", dataName, fac);\r\n         OMAttribute cType1 = new OMAttributeImpl(\"contentType\", mime,\r",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMOutputTest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "be3cf4ca37ac9de81763622d934c117ff4326d7e",
                "blob_url": "https://github.com/apache/ws-axiom/blob/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMOutputTest.java",
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMOutputTest.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMOutputTest.java?ref=24b680b32ff99e6ced264fb28384147134faf025"
            },
            {
                "patch": "@@ -139,12 +139,12 @@ public void testSerializeToStream() throws Exception {\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n         element.serialize(bos);\r\n         String newText = new String(bos.toByteArray());\r\n-        assertEquals(\"Serialized text error\", testDocument, newText);\r\n+        assertXMLEqual(\"Serialized text error\", testDocument, newText);\r\n         assertTrue(\"Element not expanded when serializing\", element.isExpanded());\r\n \r\n         bos = new ByteArrayOutputStream();\r\n         element.serialize(bos);\r\n-        assertEquals(\"Serialized text error\", testDocument,\r\n+        assertXMLEqual(\"Serialized text error\", testDocument,\r\n                      new String(bos.toByteArray()));\r\n         assertTrue(\"Element not expanded when serializing\", element.isExpanded());\r\n     }\r\n@@ -171,13 +171,13 @@ public void testSerializeToWriter() throws Exception {\n         StringWriter writer = new StringWriter();\r\n         element.serialize(writer);\r\n         String result = writer.toString();\r\n-        assertEquals(\"Serialized text error\", testDocument, result);\r\n+        assertXMLEqual(\"Serialized text error\", testDocument, result);\r\n         assertTrue(\"Element not expanded when serializing\", element.isExpanded());\r\n \r\n         writer = new StringWriter();\r\n         element.serialize(writer);\r\n         result = writer.toString();\r\n-        assertEquals(\"Serialized text error\", testDocument, result);\r\n+        assertXMLEqual(\"Serialized text error\", testDocument, result);\r\n         assertTrue(\"Element not expanded when serializing\", element.isExpanded());\r\n     }\r\n \r\n@@ -190,7 +190,7 @@ public void testSerializeAndConsumeToWriter() throws Exception {\n         StringWriter writer = new StringWriter();\r\n         element.serializeAndConsume(writer);\r\n         String result = writer.toString();\r\n-        assertEquals(\"Serialized text error\", testDocument, result);\r\n+        assertXMLEqual(\"Serialized text error\", testDocument, result);\r\n         assertFalse(\"Element expansion when serializing\", element.isExpanded());\r\n     }\r\n \r\n@@ -204,14 +204,14 @@ public void testSerializeToXMLWriter() throws Exception {\n         XMLStreamWriter xmlwriter = XMLOutputFactory.newInstance().createXMLStreamWriter(writer);\r\n         element.serialize(writer);\r\n         xmlwriter.flush();\r\n-        assertEquals(\"Serialized text error\", testDocument, writer.toString());\r\n+        assertXMLEqual(\"Serialized text error\", testDocument, writer.toString());\r\n         assertTrue(\"Element not expanded when serializing\", element.isExpanded());\r\n \r\n         writer = new StringWriter();\r\n         xmlwriter = XMLOutputFactory.newInstance().createXMLStreamWriter(writer);\r\n         element.serialize(writer);\r\n         xmlwriter.flush();\r\n-        assertEquals(\"Serialized text error\", testDocument, writer.toString());\r\n+        assertXMLEqual(\"Serialized text error\", testDocument, writer.toString());\r\n         assertTrue(\"Element not expanded when serializing\", element.isExpanded());\r\n     }\r\n \r\n@@ -225,7 +225,7 @@ public void testSerializeAndConsumeToXMLWriter() throws Exception {\n         XMLStreamWriter xmlwriter = XMLOutputFactory.newInstance().createXMLStreamWriter(writer);\r\n         element.serializeAndConsume(writer);\r\n         xmlwriter.flush();\r\n-        assertEquals(\"Serialized text error\", testDocument, writer.toString());\r\n+        assertXMLEqual(\"Serialized text error\", testDocument, writer.toString());\r\n         assertFalse(\"Element expansion when serializing\", element.isExpanded());\r\n     }\r\n \r",
                "additions": 8,
                "raw_url": "https://github.com/apache/ws-axiom/raw/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMSourcedElementTest.java",
                "status": "modified",
                "changes": 16,
                "deletions": 8,
                "sha": "8d45201a20e537731136151f3afc47788c0e33fe",
                "blob_url": "https://github.com/apache/ws-axiom/blob/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMSourcedElementTest.java",
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMSourcedElementTest.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMSourcedElementTest.java?ref=24b680b32ff99e6ced264fb28384147134faf025"
            },
            {
                "patch": "@@ -35,7 +35,9 @@\n     public void testConversion() {\n         try {\n             InputStream is = new FileInputStream(soap11FaulXmlPath);\n-            XMLStreamReader reader = XMLInputFactory.newInstance().createXMLStreamReader(is);\n+            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n+            xmlInputFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, Boolean.TRUE) ;\n+            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(is);\n \n             SOAPEnvelope env = new StAXSOAPModelBuilder(reader, null).getSOAPEnvelope();\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/ws-axiom/raw/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/soap/SOAP11FaultImplConversionTest.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "350cd9b4a58944da065e8d5cc93eed6505895219",
                "blob_url": "https://github.com/apache/ws-axiom/blob/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/soap/SOAP11FaultImplConversionTest.java",
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/soap/SOAP11FaultImplConversionTest.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/soap/SOAP11FaultImplConversionTest.java?ref=24b680b32ff99e6ced264fb28384147134faf025"
            }
        ],
        "bug_id": "ws-axiom_36",
        "parent": "https://github.com/apache/ws-axiom/commit/89d731e097a2cbc22d2efe1acc6431ab7fb72ffa",
        "message": "- Prevent NPE in SOAPBuilderHelper\n- Special case for XMLNS_PREFIX since sjsxp does not seem to turn the correct prefix for xml uri in OMSerializerUtil\n- Check for xml being equal instead of explicit byte-by-byte in OMSourcedElementTest\n- add a new prefix in OMOutputTest since the same prefix was being used in 2 spots.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1",
        "file": [
            {
                "patch": "@@ -149,7 +149,7 @@ public String getValue() {\n     // /\n     public String getName() {\n         return (this.namespace == null) ? this.attrName\n-                : OMConstants.XMLNS_NS_PREFIX + \":\" + this.attrName;\n+                : (OMConstants.XMLNS_NS_PREFIX.equals(this.attrName) ? this.attrName : OMConstants.XMLNS_NS_PREFIX + \":\" + this.attrName);\n     }\n \n     /**",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/AttrImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "05358c865d42a1944d9d53ebfacc8e32cca0f790",
                "blob_url": "https://github.com/apache/ws-axiom/blob/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/AttrImpl.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/AttrImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/AttrImpl.java?ref=2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1"
            },
            {
                "patch": "@@ -42,7 +42,7 @@ protected ChildNode(OMFactory factory) {\n     }\n \n     public OMNode getNextOMSibling() throws OMException {\n-        while ((nextSibling == null) && !this.parentNode.done) {\n+        while (nextSibling == null && this.parentNode != null && !this.parentNode.done) {\n             this.parentNode.buildNext();\n         }\n         return nextSibling;",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ChildNode.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "bffb5cfabfcd8032ac3f5241df0a2e90d57b9e64",
                "blob_url": "https://github.com/apache/ws-axiom/blob/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ChildNode.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ChildNode.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ChildNode.java?ref=2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1"
            },
            {
                "patch": "@@ -31,6 +31,7 @@\n      */\n     public DocumentFragmentimpl(DocumentImpl ownerDocument, OMFactory factory) {\n         super(ownerDocument, factory);\n+        this.done = true;\n     }\n \n     /*",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/DocumentFragmentimpl.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "fc4cab7f6be69721a98daf9c3453adce986af826",
                "blob_url": "https://github.com/apache/ws-axiom/blob/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/DocumentFragmentimpl.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/DocumentFragmentimpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/DocumentFragmentimpl.java?ref=2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1"
            },
            {
                "patch": "@@ -296,14 +296,18 @@ public Node replaceChild(Node newChild, Node oldChild) throws DOMException {\n         ChildNode newDomChild = (ChildNode) newChild;\n         ChildNode oldDomChild = (ChildNode) oldChild;\n \n+        if(newChild == null) {\n+            return this.removeChild(oldChild);\n+        }\n+        \n         if (this == newChild || !isAncestor(newChild)) {\n             throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,\n                     DOMMessageFormatter.formatMessage(\n                             DOMMessageFormatter.DOM_DOMAIN,\n                             \"HIERARCHY_REQUEST_ERR\", null));\n         }\n \n-        if (!this.ownerNode.equals(newDomChild.ownerNode)) {\n+        if (newDomChild != null && !this.ownerNode.equals(newDomChild.ownerNode)) {\n             throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,\n                     DOMMessageFormatter.formatMessage(\n                             DOMMessageFormatter.DOM_DOMAIN,\n@@ -326,13 +330,13 @@ public Node replaceChild(Node newChild, Node oldChild) throws DOMException {\n                     DocumentFragmentimpl docFrag = \n                                             (DocumentFragmentimpl) newDomChild;\n                     ChildNode child = (ChildNode) docFrag.getFirstChild();\n-                    child.parentNode = this;\n                     this.replaceChild(child, oldChild);\n+                    if(child != null) {\n+                        child.parentNode = this;\n+                    }\n                 } else {\n                     if (this.firstChild == oldDomChild) {\n                         \n-                        newDomChild.parentNode = this;\n-                        \n                         if(this.firstChild.nextSibling != null) {\n                             this.firstChild.nextSibling.previousSibling = newDomChild;\n                             newDomChild.nextSibling = this.firstChild.nextSibling;\n@@ -358,10 +362,9 @@ public Node replaceChild(Node newChild, Node oldChild) throws DOMException {\n                             this.lastChild = newDomChild;\n                         }\n \n-                        if (newDomChild.parentNode == null) {\n-                            newDomChild.parentNode = this;\n-                        }\n                     }\n+                \n+                    newDomChild.parentNode = this;\n                 }\n                 found = true;\n ",
                "additions": 10,
                "raw_url": "https://github.com/apache/ws-axiom/raw/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ParentNode.java",
                "status": "modified",
                "changes": 17,
                "deletions": 7,
                "sha": "50b699bda313c6f20e188b96d151af0d3bfb8c29",
                "blob_url": "https://github.com/apache/ws-axiom/blob/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ParentNode.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ParentNode.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ParentNode.java?ref=2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1"
            },
            {
                "patch": "@@ -76,46 +76,4 @@ public SOAPFaultSubCode getSubCode() {\n                 SOAP12Constants.SOAP_FAULT_SUB_CODE_LOCAL_NAME);\n     }\n \n-    protected void internalSerialize(XMLStreamWriter writer, boolean cache) throws XMLStreamException {\n-        // select the builder\n-        short builderType = PULL_TYPE_BUILDER;    // default is pull type\n-        if (builder != null) {\n-            builderType = this.builder.getBuilderType();\n-        }\n-        if ((builderType == PUSH_TYPE_BUILDER)\n-                && (builder.getRegisteredContentHandler() == null)) {\n-            builder.registerExternalContentHandler(new StreamWriterToContentHandlerConverter(writer));\n-        }\n-\n-        if (!cache) {\n-            //No caching\n-            if (this.firstChild != null) {\n-                OMSerializerUtil.serializeStartpart(this, writer);\n-                firstChild.internalSerializeAndConsume(writer);\n-                OMSerializerUtil.serializeEndpart(writer);\n-            } else if (!this.done) {\n-                if (builderType == PULL_TYPE_BUILDER) {\n-                    OMSerializerUtil.serializeByPullStream(this, writer);\n-                } else {\n-                    OMSerializerUtil.serializeStartpart(this, writer);\n-                    builder.setCache(cache);\n-                    builder.next();\n-                    OMSerializerUtil.serializeEndpart(writer);\n-                }\n-            } else {\n-                OMSerializerUtil.serializeNormal(this, writer, cache);\n-            }\n-            // do not serialise the siblings\n-\n-\n-        } else {\n-            //Cached\n-            OMSerializerUtil.serializeNormal(this, writer, cache);\n-\n-            // do not serialise the siblings\n-        }\n-\n-\n-    }\n-\n }",
                "additions": 0,
                "raw_url": "https://github.com/apache/ws-axiom/raw/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPFaultCodeImpl.java",
                "status": "modified",
                "changes": 42,
                "deletions": 42,
                "sha": "5f7a49025cd42058b402262ed9ae934d88cb4764",
                "blob_url": "https://github.com/apache/ws-axiom/blob/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPFaultCodeImpl.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPFaultCodeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPFaultCodeImpl.java?ref=2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1"
            },
            {
                "patch": "@@ -40,6 +40,7 @@ public void testAllMessagesInSOAP() throws OMException, Exception {\n         if (files != null) {\r\n             for (int i = 0; i < files.length; i++) {\r\n                 if (files[i].isFile() && files[i].getName().endsWith(\".xml\") && !files[i].getName().startsWith(\"wrong\")) {\r\n+                    System.out.println(files[i].getAbsolutePath());\r\n                     SOAPEnvelope soapEnvelope = (SOAPEnvelope) OMTestUtils.getOMBuilder(\r\n                             files[i])\r\n                             .getDocumentElement();\r",
                "additions": 1,
                "raw_url": "https://github.com/apache/ws-axiom/raw/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-tests/src/test/java/org/apache/axiom/om/CompareOMWithDOMTest.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "d5c473e7a755bb5a86b8515b34bb11cc2e877e76",
                "blob_url": "https://github.com/apache/ws-axiom/blob/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-tests/src/test/java/org/apache/axiom/om/CompareOMWithDOMTest.java",
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/CompareOMWithDOMTest.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/CompareOMWithDOMTest.java?ref=2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1"
            }
        ],
        "bug_id": "ws-axiom_37",
        "parent": "https://github.com/apache/ws-axiom/commit/c9fe635b0929d1a065e63e3e7fb33772b7db453e",
        "message": "Make sure a created DocumentFragment is \"done\"\nPrevent NPE in child node by checking for a null parent before checking its completness\nFix for WSCOMMONS-105 - Thanks C Corvin\nSerialize a soap 12 fault with normally with serilization logic inherited from ElementImpl - possible fix for WSCOMMONS-106",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/3ec91cf1fe2c5a20223e9700d8ac2efff80924a6",
        "file": [
            {
                "patch": "@@ -782,7 +782,10 @@ public OMNamespace findNamespace(String uri, String prefix) {\n     }\n \n     public OMNamespace findNamespaceURI(String prefix) {\n-        OMNamespace ns = (OMNamespace) this.namespaces.get(prefix);\n+        OMNamespace ns =  this.namespaces==null?\n+                null:\n+                (OMNamespace)this.namespaces.get(prefix);\n+\n         if (ns == null && this.parentNode instanceof OMElement) {\n             // try with the parent\n             ns = ((OMElement) this.parentNode).findNamespaceURI(prefix);",
                "additions": 4,
                "raw_url": "https://github.com/apache/ws-axiom/raw/3ec91cf1fe2c5a20223e9700d8ac2efff80924a6/src/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "5f59b04f39eb502623b4a89e5955e78e637ed6db",
                "blob_url": "https://github.com/apache/ws-axiom/blob/3ec91cf1fe2c5a20223e9700d8ac2efff80924a6/src/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "filename": "src/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/src/org/apache/axiom/om/impl/dom/ElementImpl.java?ref=3ec91cf1fe2c5a20223e9700d8ac2efff80924a6"
            },
            {
                "patch": "@@ -244,7 +244,7 @@ private void addChild(OMNodeImpl child) {\n             child.previousSibling = null;\n         } else {\n             child.previousSibling = (OMNodeImpl) lastChild;\n-             ((OMNodeImpl) lastChild).nextSibling = child;\n+            ((OMNodeImpl) lastChild).nextSibling = child;\n         }\n \n         child.nextSibling = null;\n@@ -369,7 +369,10 @@ public OMNamespace findNamespace(String uri, String prefix) {\n     }\n \n     public OMNamespace findNamespaceURI(String prefix) {\n-        OMNamespace ns = (OMNamespace) this.namespaces.get(prefix);\n+        OMNamespace ns =  this.namespaces==null?\n+                null:\n+                (OMNamespace)this.namespaces.get(prefix);\n+\n         if (ns == null && this.parent instanceof OMElement) {\n             // try with the parent\n             ns = ((OMElement) this.parent).findNamespaceURI(prefix);",
                "additions": 5,
                "raw_url": "https://github.com/apache/ws-axiom/raw/3ec91cf1fe2c5a20223e9700d8ac2efff80924a6/src/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "status": "modified",
                "changes": 7,
                "deletions": 2,
                "sha": "8c80db0fb8ef6592ef03bbfbde3e6369130fddd0",
                "blob_url": "https://github.com/apache/ws-axiom/blob/3ec91cf1fe2c5a20223e9700d8ac2efff80924a6/src/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "filename": "src/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/src/org/apache/axiom/om/impl/llom/OMElementImpl.java?ref=3ec91cf1fe2c5a20223e9700d8ac2efff80924a6"
            },
            {
                "patch": "@@ -64,7 +64,7 @@\n      * Field nodeType\n      */\n     protected int nodeType;\n-    \n+\n     protected OMFactory factory;\n \n     /**\n@@ -112,11 +112,15 @@ public void setParent(OMContainer element) {\n \n         //If we are asked to assign a new parent in place \n         //of an existing one. We should detach this node\n-        //from the aegis of previous parent.\n-        if (this.parent != null) {\n-            this.detach();\n+        //from the previous parent.\n+        if (element!=null){\n+            if (this.parent != null) {\n+                this.detach();\n+            }\n+            this.parent = (OMContainerEx) element;\n+        }else{\n+            this.parent = null;\n         }\n-        this.parent = (OMContainerEx) element;\n     }\n \n     /**",
                "additions": 9,
                "raw_url": "https://github.com/apache/ws-axiom/raw/3ec91cf1fe2c5a20223e9700d8ac2efff80924a6/src/org/apache/axiom/om/impl/llom/OMNodeImpl.java",
                "status": "modified",
                "changes": 14,
                "deletions": 5,
                "sha": "9a2a69f88d1e93bf6286ddd2a68ed61157a049d3",
                "blob_url": "https://github.com/apache/ws-axiom/blob/3ec91cf1fe2c5a20223e9700d8ac2efff80924a6/src/org/apache/axiom/om/impl/llom/OMNodeImpl.java",
                "filename": "src/org/apache/axiom/om/impl/llom/OMNodeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/src/org/apache/axiom/om/impl/llom/OMNodeImpl.java?ref=3ec91cf1fe2c5a20223e9700d8ac2efff80924a6"
            }
        ],
        "bug_id": "ws-axiom_38",
        "parent": "https://github.com/apache/ws-axiom/commit/0c2f13bd9673908876105af666d1bbda8612bf0e",
        "message": "1. Findnamespace implementation throws a NPE if there are no declared namespaces in the current elements. Fixed this by skipping the search in the current element if the namespaces map is null.\n2. The setParent(null) caused the element to be completely built. The intention of the user when calling setparent with null is to remove the parent. Hence specialcased the setParent implementation for null.",
        "repo": "ws-axiom"
    },
    {
        "commit": "https://github.com/apache/ws-axiom/commit/959af604b36b92ffcc79058495ab631ee8d193da",
        "file": [
            {
                "patch": "@@ -365,9 +365,11 @@\n      *            the given attribute value can be serialized directly as an XML value. The caller\n      *            may, for example, pass a string with the character 0x01.\n      * @param ns\n-     *            The namespace has to be one of the in scope namespace. i.e. the passed namespace\n-     *            must be declared in the parent element of this attribute or ancestors of the\n-     *            parent element of the attribute.\n+     *            The namespace for the attribute. If no corresponding namespace declaration is in\n+     *            scope, then a new namespace declaration will be added to the element. The\n+     *            {@link OMNamespace} may have a <code>null</code> prefix, in which case the method\n+     *            will generate a prefix (if no namespace declaration for the given namespace URI is\n+     *            in scope) or use an existing one.\n      * @return Returns the added attribute.\n      * @throws IllegalArgumentException\n      *             if an attempt is made to create a prefixed attribute with an empty namespace name",
                "additions": 5,
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-api/src/main/java/org/apache/axiom/om/OMElement.java",
                "status": "modified",
                "changes": 8,
                "deletions": 3,
                "sha": "2d62079a500f2fb7cd63a526fe37db6c3fd30602",
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-api/src/main/java/org/apache/axiom/om/OMElement.java",
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/OMElement.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/OMElement.java?ref=959af604b36b92ffcc79058495ab631ee8d193da"
            },
            {
                "patch": "@@ -59,6 +59,7 @@\n import javax.xml.namespace.NamespaceContext;\n import javax.xml.namespace.QName;\n import javax.xml.stream.XMLStreamException;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.Reader;\n@@ -531,17 +532,16 @@ public OMAttribute addAttribute(OMAttribute attr) {\n \n     public OMAttribute addAttribute(String localName, String value,\n                                     OMNamespace ns) {\n+        OMNamespace namespace = null;\n         if (ns != null) {\n-            String uri = ns.getNamespaceURI();\n-            if (uri.length() > 0) {\n-                String prefix = ns.getPrefix();\n-                OMNamespace ns2 = findNamespaceURI(prefix);\n-                if (ns2 == null || !uri.equals(ns2.getNamespaceURI())) {\n-                    declareNamespace(uri, prefix);\n-                }\n+            String namespaceURI = ns.getNamespaceURI();\n+            String prefix = ns.getPrefix();\n+            namespace = findNamespace(namespaceURI, prefix);\n+            if (namespace == null) {\n+                namespace = new OMNamespaceImpl(namespaceURI, prefix != null ? prefix : OMSerializerUtil.getNextNSPrefix());\n             }\n         }\n-        return addAttribute(new AttrImpl(null, localName, ns, value, factory));\n+        return addAttribute(new AttrImpl(null, localName, namespace, value, factory));\n     }\n \n     public OMNamespace addNamespaceDeclaration(String uri, String prefix) {",
                "additions": 8,
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "status": "modified",
                "changes": 16,
                "deletions": 8,
                "sha": "045a0c1ff54348dc04b36513c246ecd5bc016580",
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java?ref=959af604b36b92ffcc79058495ab631ee8d193da"
            },
            {
                "patch": "@@ -593,18 +593,18 @@ public void removeAttribute(OMAttribute attr) {\n         attributes.remove(attr.getQName());\n     }\n \n-    public OMAttribute addAttribute(String attributeName, String value,\n+    public OMAttribute addAttribute(String localName, String value,\n                                     OMNamespace ns) {\n         OMNamespace namespace = null;\n         if (ns != null) {\n             String namespaceURI = ns.getNamespaceURI();\n             String prefix = ns.getPrefix();\n             namespace = findNamespace(namespaceURI, prefix);\n             if (namespace == null) {\n-                namespace = new OMNamespaceImpl(namespaceURI, prefix);\n+                namespace = new OMNamespaceImpl(namespaceURI, prefix != null ? prefix : OMSerializerUtil.getNextNSPrefix());\n             }\n         }\n-        return addAttribute(new OMAttributeImpl(attributeName, namespace, value, this.factory));\n+        return addAttribute(new OMAttributeImpl(localName, namespace, value, this.factory));\n     }\n \n     /**",
                "additions": 3,
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "21f0c5b4ff96a883a6232400f3ab29b39a677d9c",
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java?ref=959af604b36b92ffcc79058495ab631ee8d193da"
            },
            {
                "patch": "@@ -198,6 +198,8 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.om.document.sr.TestDTDReaderFromParser(metaFactory, false, false));\n         addTest(new org.apache.axiom.ts.om.element.TestAddAttributeAlreadyOwnedByElement(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddAttributeAlreadyOwnedByOtherElement(metaFactory));\n+        addTest(new org.apache.axiom.ts.om.element.TestAddAttributeGeneratedPrefix(metaFactory));\n+        addTest(new org.apache.axiom.ts.om.element.TestAddAttributeReuseExistingPrefix(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddAttributeWithInvalidNamespace1(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddAttributeWithInvalidNamespace2(metaFactory));\n         for (int i=0; i<addAttributeStrategies.length; i++) {",
                "additions": 2,
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "1e1c967dd0acf98ef24f600c71939cdd7aba74a0",
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java?ref=959af604b36b92ffcc79058495ab631ee8d193da"
            },
            {
                "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.element;\n+\n+import java.util.Iterator;\n+\n+import org.apache.axiom.om.OMAttribute;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.axiom.ts.AxiomTestCase;\n+\n+/**\n+ * Tests that when {@link OMElement#addAttribute(String, String, OMNamespace)} is called with an\n+ * {@link OMNamespace} with a <code>null</code> prefix and no namespace declaration for the given\n+ * namespace URI is in scope, the method generates a prefix.\n+ */\n+public class TestAddAttributeGeneratedPrefix extends AxiomTestCase {\n+    public TestAddAttributeGeneratedPrefix(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        OMFactory factory = metaFactory.getOMFactory();\n+        OMElement element = factory.createOMElement(\"test\", null);\n+        OMAttribute attr = element.addAttribute(\"attr\", \"value\", factory.createOMNamespace(\"urn:test\", null));\n+        OMNamespace ns = attr.getNamespace();\n+        assertTrue(ns.getPrefix().length() > 0);\n+        Iterator it = element.getAllDeclaredNamespaces();\n+        assertTrue(it.hasNext());\n+        assertEquals(ns, it.next());\n+        assertFalse(it.hasNext());\n+    }\n+}",
                "additions": 51,
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeGeneratedPrefix.java",
                "status": "added",
                "changes": 51,
                "deletions": 0,
                "sha": "aef7015a4623b2ae6601dee901a048196ad727c2",
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeGeneratedPrefix.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeGeneratedPrefix.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeGeneratedPrefix.java?ref=959af604b36b92ffcc79058495ab631ee8d193da"
            },
            {
                "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.element;\n+\n+import org.apache.axiom.om.OMAttribute;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.axiom.ts.AxiomTestCase;\n+\n+/**\n+ * Tests that when {@link OMElement#addAttribute(String, String, OMNamespace)} is called with an\n+ * {@link OMNamespace} with a <code>null</code> prefix and a namespace declaration for the given\n+ * namespace URI is in scope, the method reuses the existing prefix instead of generating one.\n+ */\n+public class TestAddAttributeReuseExistingPrefix extends AxiomTestCase {\n+    public TestAddAttributeReuseExistingPrefix(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        OMFactory factory = metaFactory.getOMFactory();\n+        OMElement parent = factory.createOMElement(\"parent\", null);\n+        OMElement element = factory.createOMElement(\"element\", null, parent);\n+        parent.declareNamespace(\"urn:test\", \"p\");\n+        OMAttribute attr = element.addAttribute(\"attr\", \"test\", factory.createOMNamespace(\"urn:test\", null));\n+        assertEquals(\"p\", attr.getPrefix());\n+        assertFalse(element.getAllDeclaredNamespaces().hasNext());\n+    }\n+}",
                "additions": 47,
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeReuseExistingPrefix.java",
                "status": "added",
                "changes": 47,
                "deletions": 0,
                "sha": "1819b88d52f8e05fdb68ef3ea135666cb0fba6cd",
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeReuseExistingPrefix.java",
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeReuseExistingPrefix.java",
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeReuseExistingPrefix.java?ref=959af604b36b92ffcc79058495ab631ee8d193da"
            }
        ],
        "bug_id": "ws-axiom_39",
        "parent": "https://github.com/apache/ws-axiom/commit/8ea27174a675ae98f161571df4e246561af5c0da",
        "message": "Improve consistency of the OMElement#addAttribute(String, String, OMNamespace) API:\n* Let LLOM's addAttribute implementation generate a prefix (instead of throwing a NPE) if the prefix is null and no namespace declaration for the given namespace URI is found.\n* Add test coverage for the scenario where the prefix is null and a namespace declaration for the given URI is found (in which case the corresponding prefix is reused). This worked correctly in LLOM.\n* Make DOOM's behavior consistent with LLOM.\n* Update Javadoc of the addAttribute method.",
        "repo": "ws-axiom"
    }
]