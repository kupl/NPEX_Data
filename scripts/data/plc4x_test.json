{
    "plc4x_06a7c56": {
        "bug_id": "plc4x_06a7c56",
        "commit": "https://github.com/apache/plc4x/commit/06a7c5617f16c4c30983861aedfb6324aeb59501",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/plc4x/blob/06a7c5617f16c4c30983861aedfb6324aeb59501/plc4j/protocols/s7/src/main/java/org/apache/plc4x/java/s7/netty/S7Protocol.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/plc4x/contents/plc4j/protocols/s7/src/main/java/org/apache/plc4x/java/s7/netty/S7Protocol.java?ref=06a7c5617f16c4c30983861aedfb6324aeb59501",
                "deletions": 2,
                "filename": "plc4j/protocols/s7/src/main/java/org/apache/plc4x/java/s7/netty/S7Protocol.java",
                "patch": "@@ -619,8 +619,8 @@ else if ((readWriteVarParameter.getType() == ParameterType.READ_VAR) && isRespon\n                 payloadItems.add(payload);\n                 i += S7SizeHelper.getPayloadLength(payload);\n \n-                // It seems that one-byte payloads require a fill byte, but only if it's not the last item.\n-                if((length == 1) && (userData.readableBytes() > 0)) {\n+                // It seems that odd-byte payloads require a fill byte, but only if it's not the last item.\n+                if((length % 2== 1) && (userData.readableBytes() > 0)) {\n                     userData.readByte();\n                     i++;\n                 }",
                "raw_url": "https://github.com/apache/plc4x/raw/06a7c5617f16c4c30983861aedfb6324aeb59501/plc4j/protocols/s7/src/main/java/org/apache/plc4x/java/s7/netty/S7Protocol.java",
                "sha": "b3b5a878f073d20827b90b79b74f2b8f4fa283ab",
                "status": "modified"
            }
        ],
        "message": "- fixed NPE when reading odd-length array of one-byte base types",
        "parent": "https://github.com/apache/plc4x/commit/4cc87d5347aa67cb8569ea0f208daeb93326a546",
        "patched_files": [
            "S7Protocol.java"
        ],
        "repo": "plc4x",
        "unit_tests": [
            "S7ProtocolTest.java"
        ]
    },
    "plc4x_451c49d": {
        "bug_id": "plc4x_451c49d",
        "commit": "https://github.com/apache/plc4x/commit/451c49d86cdbdbd6185f4508b7b465324fb8292a",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/plc4x/blob/451c49d86cdbdbd6185f4508b7b465324fb8292a/plc4j/protocols/driver-bases/base/src/main/java/org/apache/plc4x/java/base/messages/DefaultPlcUnsubscriptionRequest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/plc4x/contents/plc4j/protocols/driver-bases/base/src/main/java/org/apache/plc4x/java/base/messages/DefaultPlcUnsubscriptionRequest.java?ref=451c49d86cdbdbd6185f4508b7b465324fb8292a",
                "deletions": 2,
                "filename": "plc4j/protocols/driver-bases/base/src/main/java/org/apache/plc4x/java/base/messages/DefaultPlcUnsubscriptionRequest.java",
                "patch": "@@ -70,13 +70,13 @@ public Builder(PlcSubscriber subscriber) {\n         public PlcUnsubscriptionRequest.Builder addHandle(PlcSubscriptionHandle plcSubscriptionHandle1, PlcSubscriptionHandle... plcSubscriptionHandles) {\n             this.plcSubscriptionHandles.add((InternalPlcSubscriptionHandle) plcSubscriptionHandle1);\n             this.plcSubscriptionHandles.addAll(Arrays.stream(plcSubscriptionHandles).map(InternalPlcSubscriptionHandle.class::cast).collect(Collectors.toList()));\n-            return null;\n+            return this;\n         }\n \n         @Override\n         public PlcUnsubscriptionRequest.Builder addHandles(Collection<PlcSubscriptionHandle> plcSubscriptionHandles) {\n             this.plcSubscriptionHandles.addAll(plcSubscriptionHandles.stream().map(InternalPlcSubscriptionHandle.class::cast).collect(Collectors.toList()));\n-            return null;\n+            return this;\n         }\n \n         @Override",
                "raw_url": "https://github.com/apache/plc4x/raw/451c49d86cdbdbd6185f4508b7b465324fb8292a/plc4j/protocols/driver-bases/base/src/main/java/org/apache/plc4x/java/base/messages/DefaultPlcUnsubscriptionRequest.java",
                "sha": "6fe3cfb905fb905ada7458b94e345db26124b6c7",
                "status": "modified"
            }
        ],
        "message": "[GENERAL] fix npe on unsubscription",
        "parent": "https://github.com/apache/plc4x/commit/514719c971214bd660440045cc900f0690f1a9e6",
        "patched_files": [
            "DefaultPlcUnsubscriptionRequest.java"
        ],
        "repo": "plc4x",
        "unit_tests": [
            "DefaultPlcUnsubscriptionRequestTest.java"
        ]
    },
    "plc4x_78f84b4": {
        "bug_id": "plc4x_78f84b4",
        "commit": "https://github.com/apache/plc4x/commit/78f84b413db76959e4732d2eedb431389ce55bc5",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/plc4x/blob/78f84b413db76959e4732d2eedb431389ce55bc5/plc4j/protocols/s7/src/main/java/org/apache/plc4x/java/s7/netty/S7Protocol.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/plc4x/contents/plc4j/protocols/s7/src/main/java/org/apache/plc4x/java/s7/netty/S7Protocol.java?ref=78f84b413db76959e4732d2eedb431389ce55bc5",
                "deletions": 1,
                "filename": "plc4j/protocols/s7/src/main/java/org/apache/plc4x/java/s7/netty/S7Protocol.java",
                "patch": "@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one\n import org.apache.commons.lang3.reflect.FieldUtils;\n import org.apache.plc4x.java.api.exceptions.PlcProtocolException;\n import org.apache.plc4x.java.api.exceptions.PlcProtocolPayloadTooBigException;\n+import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;\n import org.apache.plc4x.java.isotp.protocol.IsoTPProtocol;\n import org.apache.plc4x.java.isotp.protocol.events.IsoTPConnectedEvent;\n import org.apache.plc4x.java.isotp.protocol.model.IsoTPMessage;\n@@ -757,7 +758,11 @@ private CpuServicesParameter decodeCpuServicesParameter(ByteBuf in) {\n                 TransportSize dataType = TransportSize.valueOf(in.readByte());\n                 short length = in.readShort();\n                 short dbNumber = in.readShort();\n-                MemoryArea memoryArea = MemoryArea.valueOf(in.readByte());\n+                byte memoryAreaCode = in.readByte();\n+                MemoryArea memoryArea = MemoryArea.valueOf(memoryAreaCode);\n+                if(memoryArea == null) {\n+                    throw new PlcRuntimeException(\"Unknown memory area '\" + memoryAreaCode + \"'\");\n+                }\n                 short byteAddress = (short) (in.readShort() << 5);\n                 byte tmp = in.readByte();\n                 // Only the least 3 bits are the bit address, the",
                "raw_url": "https://github.com/apache/plc4x/raw/78f84b413db76959e4732d2eedb431389ce55bc5/plc4j/protocols/s7/src/main/java/org/apache/plc4x/java/s7/netty/S7Protocol.java",
                "sha": "17214ca8afbdf907b0a1a6870aaec0747e10a06e",
                "status": "modified"
            }
        ],
        "message": "PLC4X-84 - NPE when reading Marker\n\n- Made the protocol throw an exception if an unknown memory area is referenced.",
        "parent": "https://github.com/apache/plc4x/commit/9410ae3246404efafbabd296c39ebd05b6323901",
        "patched_files": [
            "S7Protocol.java"
        ],
        "repo": "plc4x",
        "unit_tests": [
            "S7ProtocolTest.java"
        ]
    }
}