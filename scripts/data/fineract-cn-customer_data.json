[
    {
        "commit": "https://github.com/apache/fineract-cn-customer/commit/48bfd66f9f7851aad38ac0a04bd4a73c35f6a8da",
        "file": [
            {
                "patch": "@@ -120,6 +120,10 @@ public void shouldListNonMandatoryTasks() throws Exception{\n     final List<TaskDefinition> tasksForCustomer = this.customerManager.findTasksForCustomer(randomCustomer.getIdentifier(), false);\n \n     Assert.assertEquals(1, tasksForCustomer.size());\n+\n+    taskDefinition.setPredefined(false);\n+    this.customerManager.updateTask(taskDefinition.getIdentifier(), taskDefinition);\n+    this.eventRecorder.wait(CustomerEventConstants.PUT_TASK, taskDefinition.getIdentifier());\n   }\n \n   @Test\n@@ -197,7 +201,34 @@ public void shouldUnlockCustomerMultipleTasks() throws Exception{\n     this.eventRecorder.wait(CustomerEventConstants.PUT_TASK, customTask1.getIdentifier());\n \n     customTask2.setPredefined(false);\n-    this.customerManager.updateTask(customTask2.getIdentifier(), customTask1);\n+    this.customerManager.updateTask(customTask2.getIdentifier(), customTask2);\n     this.eventRecorder.wait(CustomerEventConstants.PUT_TASK, customTask2.getIdentifier());\n   }\n+\n+  @Test(expected = TaskExecutionException.class)\n+  public void shouldNotProceedFourEyesWrongSigner() throws Exception {\n+    final TaskDefinition fourEyesTask = new TaskDefinition();\n+    fourEyesTask.setIdentifier(\"4-eyes-task-1\");\n+    fourEyesTask.setType(TaskDefinition.Type.FOUR_EYES.name());\n+    fourEyesTask.setName(\"Do the barrel roll\");\n+    fourEyesTask.setCommands(\n+        TaskDefinition.Command.ACTIVATE.name()\n+    );\n+    fourEyesTask.setPredefined(Boolean.TRUE);\n+    fourEyesTask.setMandatory(Boolean.TRUE);\n+\n+    this.customerManager.createTask(fourEyesTask);\n+    this.eventRecorder.wait(CustomerEventConstants.POST_TASK, fourEyesTask.getIdentifier());\n+\n+    final Customer randomCustomer = CustomerGenerator.createRandomCustomer();\n+    this.customerManager.createCustomer(randomCustomer);\n+    this.eventRecorder.wait(CustomerEventConstants.POST_CUSTOMER, randomCustomer.getIdentifier());\n+\n+    this.customerManager.taskForCustomerExecuted(randomCustomer.getIdentifier(), fourEyesTask.getIdentifier());\n+    this.eventRecorder.wait(CustomerEventConstants.PUT_CUSTOMER, randomCustomer.getIdentifier());\n+\n+    fourEyesTask.setPredefined(false);\n+    this.customerManager.updateTask(fourEyesTask.getIdentifier(), fourEyesTask);\n+    this.eventRecorder.wait(CustomerEventConstants.PUT_TASK, fourEyesTask.getIdentifier());\n+  }\n }",
                "additions": 32,
                "raw_url": "https://github.com/apache/fineract-cn-customer/raw/48bfd66f9f7851aad38ac0a04bd4a73c35f6a8da/component-test/src/main/java/io/mifos/customer/TestTaskInstance.java",
                "status": "modified",
                "changes": 33,
                "deletions": 1,
                "sha": "53a6ba6e2ac41317958c72f187841bb78766871e",
                "blob_url": "https://github.com/apache/fineract-cn-customer/blob/48bfd66f9f7851aad38ac0a04bd4a73c35f6a8da/component-test/src/main/java/io/mifos/customer/TestTaskInstance.java",
                "filename": "component-test/src/main/java/io/mifos/customer/TestTaskInstance.java",
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-customer/contents/component-test/src/main/java/io/mifos/customer/TestTaskInstance.java?ref=48bfd66f9f7851aad38ac0a04bd4a73c35f6a8da"
            },
            {
                "patch": "@@ -307,10 +307,12 @@ public CustomerRestController(@Qualifier(ServiceConstants.LOGGER_NAME) final Log\n   @ResponseBody\n   ResponseEntity<Void> taskForCustomerExecuted(@PathVariable(\"identifier\") final String identifier,\n                                                @PathVariable(\"taskIdentifier\") final String taskIdentifier) {\n-    if (this.customerService.customerExists(identifier)) {\n-      if (this.taskService.taskDefinitionExists(taskIdentifier)) {\n-        final TaskDefinition taskDefinition = this.taskService.findByIdentifier(taskIdentifier).get();\n-        final Customer customer;\n+    final Optional<Customer> optionalCustomer = this.customerService.findCustomer(identifier);\n+    if (optionalCustomer.isPresent()) {\n+      final Customer customer = optionalCustomer.get();\n+      final Optional<TaskDefinition> optionalTaskDefinition = this.taskService.findByIdentifier(taskIdentifier);\n+      if (optionalTaskDefinition.isPresent()) {\n+        final TaskDefinition taskDefinition = optionalTaskDefinition.get();\n         switch (TaskDefinition.Type.valueOf(taskDefinition.getType())) {\n           case ID_CARD:\n             final List<IdentificationCard> identificationCards = this.customerService.fetchIdentificationCardsByCustomer(identifier);\n@@ -319,8 +321,7 @@ public CustomerRestController(@Qualifier(ServiceConstants.LOGGER_NAME) final Log\n             }\n             break;\n           case FOUR_EYES:\n-            customer = this.customerService.findCustomer(identifier).get();\n-            if (customer.getAssignedEmployee().equals(UserContextHolder.checkedGetUser())) {\n+            if (customer.getCreatedBy().equals(UserContextHolder.checkedGetUser())) {\n               throw ServiceException.conflict(\"Signing user must be different than creator.\");\n             }\n             break;",
                "additions": 7,
                "raw_url": "https://github.com/apache/fineract-cn-customer/raw/48bfd66f9f7851aad38ac0a04bd4a73c35f6a8da/service/src/main/java/io/mifos/customer/service/rest/controller/CustomerRestController.java",
                "status": "modified",
                "changes": 13,
                "deletions": 6,
                "sha": "d07124e59e68325767692d8c2462bda30e53f842",
                "blob_url": "https://github.com/apache/fineract-cn-customer/blob/48bfd66f9f7851aad38ac0a04bd4a73c35f6a8da/service/src/main/java/io/mifos/customer/service/rest/controller/CustomerRestController.java",
                "filename": "service/src/main/java/io/mifos/customer/service/rest/controller/CustomerRestController.java",
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-customer/contents/service/src/main/java/io/mifos/customer/service/rest/controller/CustomerRestController.java?ref=48bfd66f9f7851aad38ac0a04bd4a73c35f6a8da"
            }
        ],
        "bug_id": "fineract-cn-customer_1",
        "parent": "https://github.com/apache/fineract-cn-customer/commit/9f5e721b3d4f93b4ef5047395142ec1cd2cb8bdd",
        "message": "fixed NPE when checking four eye task",
        "repo": "fineract-cn-customer"
    },
    {
        "commit": "https://github.com/apache/fineract-cn-customer/commit/5184b15bf1f636fa81b643c1852e2995c33b8221",
        "file": [
            {
                "patch": "@@ -120,6 +120,10 @@ public void shouldListNonMandatoryTasks() throws Exception{\n     final List<TaskDefinition> tasksForCustomer = this.customerManager.findTasksForCustomer(randomCustomer.getIdentifier(), false);\n \n     Assert.assertEquals(1, tasksForCustomer.size());\n+\n+    taskDefinition.setPredefined(false);\n+    this.customerManager.updateTask(taskDefinition.getIdentifier(), taskDefinition);\n+    this.eventRecorder.wait(CustomerEventConstants.PUT_TASK, taskDefinition.getIdentifier());\n   }\n \n   @Test\n@@ -197,7 +201,34 @@ public void shouldUnlockCustomerMultipleTasks() throws Exception{\n     this.eventRecorder.wait(CustomerEventConstants.PUT_TASK, customTask1.getIdentifier());\n \n     customTask2.setPredefined(false);\n-    this.customerManager.updateTask(customTask2.getIdentifier(), customTask1);\n+    this.customerManager.updateTask(customTask2.getIdentifier(), customTask2);\n     this.eventRecorder.wait(CustomerEventConstants.PUT_TASK, customTask2.getIdentifier());\n   }\n+\n+  @Test(expected = TaskExecutionException.class)\n+  public void shouldNotProceedFourEyesWrongSigner() throws Exception {\n+    final TaskDefinition fourEyesTask = new TaskDefinition();\n+    fourEyesTask.setIdentifier(\"4-eyes-task-1\");\n+    fourEyesTask.setType(TaskDefinition.Type.FOUR_EYES.name());\n+    fourEyesTask.setName(\"Do the barrel roll\");\n+    fourEyesTask.setCommands(\n+        TaskDefinition.Command.ACTIVATE.name()\n+    );\n+    fourEyesTask.setPredefined(Boolean.TRUE);\n+    fourEyesTask.setMandatory(Boolean.TRUE);\n+\n+    this.customerManager.createTask(fourEyesTask);\n+    this.eventRecorder.wait(CustomerEventConstants.POST_TASK, fourEyesTask.getIdentifier());\n+\n+    final Customer randomCustomer = CustomerGenerator.createRandomCustomer();\n+    this.customerManager.createCustomer(randomCustomer);\n+    this.eventRecorder.wait(CustomerEventConstants.POST_CUSTOMER, randomCustomer.getIdentifier());\n+\n+    this.customerManager.taskForCustomerExecuted(randomCustomer.getIdentifier(), fourEyesTask.getIdentifier());\n+    this.eventRecorder.wait(CustomerEventConstants.PUT_CUSTOMER, randomCustomer.getIdentifier());\n+\n+    fourEyesTask.setPredefined(false);\n+    this.customerManager.updateTask(fourEyesTask.getIdentifier(), fourEyesTask);\n+    this.eventRecorder.wait(CustomerEventConstants.PUT_TASK, fourEyesTask.getIdentifier());\n+  }\n }",
                "additions": 32,
                "raw_url": "https://github.com/apache/fineract-cn-customer/raw/5184b15bf1f636fa81b643c1852e2995c33b8221/component-test/src/main/java/io/mifos/customer/TestTaskInstance.java",
                "status": "modified",
                "changes": 33,
                "deletions": 1,
                "sha": "53a6ba6e2ac41317958c72f187841bb78766871e",
                "blob_url": "https://github.com/apache/fineract-cn-customer/blob/5184b15bf1f636fa81b643c1852e2995c33b8221/component-test/src/main/java/io/mifos/customer/TestTaskInstance.java",
                "filename": "component-test/src/main/java/io/mifos/customer/TestTaskInstance.java",
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-customer/contents/component-test/src/main/java/io/mifos/customer/TestTaskInstance.java?ref=5184b15bf1f636fa81b643c1852e2995c33b8221"
            },
            {
                "patch": "@@ -307,10 +307,12 @@ public CustomerRestController(@Qualifier(ServiceConstants.LOGGER_NAME) final Log\n   @ResponseBody\n   ResponseEntity<Void> taskForCustomerExecuted(@PathVariable(\"identifier\") final String identifier,\n                                                @PathVariable(\"taskIdentifier\") final String taskIdentifier) {\n-    if (this.customerService.customerExists(identifier)) {\n-      if (this.taskService.taskDefinitionExists(taskIdentifier)) {\n-        final TaskDefinition taskDefinition = this.taskService.findByIdentifier(taskIdentifier).get();\n-        final Customer customer;\n+    final Optional<Customer> optionalCustomer = this.customerService.findCustomer(identifier);\n+    if (optionalCustomer.isPresent()) {\n+      final Customer customer = optionalCustomer.get();\n+      final Optional<TaskDefinition> optionalTaskDefinition = this.taskService.findByIdentifier(taskIdentifier);\n+      if (optionalTaskDefinition.isPresent()) {\n+        final TaskDefinition taskDefinition = optionalTaskDefinition.get();\n         switch (TaskDefinition.Type.valueOf(taskDefinition.getType())) {\n           case ID_CARD:\n             final List<IdentificationCard> identificationCards = this.customerService.fetchIdentificationCardsByCustomer(identifier);\n@@ -319,8 +321,7 @@ public CustomerRestController(@Qualifier(ServiceConstants.LOGGER_NAME) final Log\n             }\n             break;\n           case FOUR_EYES:\n-            customer = this.customerService.findCustomer(identifier).get();\n-            if (customer.getAssignedEmployee().equals(UserContextHolder.checkedGetUser())) {\n+            if (customer.getCreatedBy().equals(UserContextHolder.checkedGetUser())) {\n               throw ServiceException.conflict(\"Signing user must be different than creator.\");\n             }\n             break;",
                "additions": 7,
                "raw_url": "https://github.com/apache/fineract-cn-customer/raw/5184b15bf1f636fa81b643c1852e2995c33b8221/service/src/main/java/io/mifos/customer/service/rest/controller/CustomerRestController.java",
                "status": "modified",
                "changes": 13,
                "deletions": 6,
                "sha": "d07124e59e68325767692d8c2462bda30e53f842",
                "blob_url": "https://github.com/apache/fineract-cn-customer/blob/5184b15bf1f636fa81b643c1852e2995c33b8221/service/src/main/java/io/mifos/customer/service/rest/controller/CustomerRestController.java",
                "filename": "service/src/main/java/io/mifos/customer/service/rest/controller/CustomerRestController.java",
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-customer/contents/service/src/main/java/io/mifos/customer/service/rest/controller/CustomerRestController.java?ref=5184b15bf1f636fa81b643c1852e2995c33b8221"
            }
        ],
        "bug_id": "fineract-cn-customer_2",
        "parent": "https://github.com/apache/fineract-cn-customer/commit/9f5e721b3d4f93b4ef5047395142ec1cd2cb8bdd",
        "message": "Merge pull request #10 from markusgeiss/develop\n\nfixed NPE when checking four eye task",
        "repo": "fineract-cn-customer"
    },
    {
        "commit": "https://github.com/apache/fineract-cn-customer/commit/5e05d4a57244184ef3b92757dc79b975cc489dad",
        "file": [
            {
                "patch": "@@ -411,17 +411,17 @@ public void shouldDeletePortrait() throws Exception {\n \n     this.customerManager.createCustomer(customer);\n \n-    this.eventRecorder.wait(CustomerEventConstants.POST_CUSTOMER, customer.getIdentifier());\n+    Assert.assertTrue(this.eventRecorder.wait(CustomerEventConstants.POST_CUSTOMER, customer.getIdentifier()));\n \n     final MockMultipartFile firstFile = new MockMultipartFile(\"portrait\", \"test.png\", MediaType.IMAGE_PNG_VALUE, \"i don't care\".getBytes());\n \n     this.customerManager.postPortrait(customer.getIdentifier(), firstFile);\n \n-    this.eventRecorder.wait(CustomerEventConstants.POST_PORTRAIT, customer.getIdentifier());\n+    Assert.assertTrue(this.eventRecorder.wait(CustomerEventConstants.POST_PORTRAIT, customer.getIdentifier()));\n \n     this.customerManager.deletePortrait(customer.getIdentifier());\n \n-    this.eventRecorder.wait(CustomerEventConstants.DELETE_PORTRAIT, customer.getIdentifier());\n+    Assert.assertTrue(this.eventRecorder.wait(CustomerEventConstants.DELETE_PORTRAIT, customer.getIdentifier()));\n \n     this.customerManager.getPortrait(customer.getIdentifier());\n   }",
                "additions": 3,
                "raw_url": "https://github.com/apache/fineract-cn-customer/raw/5e05d4a57244184ef3b92757dc79b975cc489dad/component-test/src/main/java/io/mifos/customer/TestCustomer.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "5ce3f66009f4679fe7c5cf28acb1820a8ed8c7f2",
                "blob_url": "https://github.com/apache/fineract-cn-customer/blob/5e05d4a57244184ef3b92757dc79b975cc489dad/component-test/src/main/java/io/mifos/customer/TestCustomer.java",
                "filename": "component-test/src/main/java/io/mifos/customer/TestCustomer.java",
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-customer/contents/component-test/src/main/java/io/mifos/customer/TestCustomer.java?ref=5e05d4a57244184ef3b92757dc79b975cc489dad"
            },
            {
                "patch": "@@ -25,53 +25,11 @@\n import io.mifos.customer.api.v1.domain.Command;\n import io.mifos.customer.api.v1.domain.Customer;\n import io.mifos.customer.api.v1.events.ScanEvent;\n-import io.mifos.customer.catalog.service.internal.repository.CatalogEntity;\n-import io.mifos.customer.catalog.service.internal.repository.CatalogRepository;\n-import io.mifos.customer.catalog.service.internal.repository.FieldEntity;\n-import io.mifos.customer.catalog.service.internal.repository.FieldRepository;\n-import io.mifos.customer.catalog.service.internal.repository.FieldValueEntity;\n-import io.mifos.customer.catalog.service.internal.repository.FieldValueRepository;\n-import io.mifos.customer.service.ServiceConstants;\n-import io.mifos.customer.service.internal.command.ActivateCustomerCommand;\n-import io.mifos.customer.service.internal.command.CloseCustomerCommand;\n-import io.mifos.customer.service.internal.command.CreateCustomerCommand;\n-import io.mifos.customer.service.internal.command.CreateIdentificationCardCommand;\n-import io.mifos.customer.service.internal.command.CreateIdentificationCardScanCommand;\n-import io.mifos.customer.service.internal.command.CreatePortraitCommand;\n-import io.mifos.customer.service.internal.command.DeleteIdentificationCardCommand;\n-import io.mifos.customer.service.internal.command.DeleteIdentificationCardScanCommand;\n-import io.mifos.customer.service.internal.command.DeletePortraitCommand;\n-import io.mifos.customer.service.internal.command.LockCustomerCommand;\n-import io.mifos.customer.service.internal.command.ReopenCustomerCommand;\n-import io.mifos.customer.service.internal.command.UnlockCustomerCommand;\n-import io.mifos.customer.service.internal.command.UpdateAddressCommand;\n-import io.mifos.customer.service.internal.command.UpdateContactDetailsCommand;\n-import io.mifos.customer.service.internal.command.UpdateCustomerCommand;\n-import io.mifos.customer.service.internal.command.UpdateIdentificationCardCommand;\n-import io.mifos.customer.service.internal.mapper.AddressMapper;\n-import io.mifos.customer.service.internal.mapper.CommandMapper;\n-import io.mifos.customer.service.internal.mapper.ContactDetailMapper;\n-import io.mifos.customer.service.internal.mapper.CustomerMapper;\n-import io.mifos.customer.service.internal.mapper.FieldValueMapper;\n-import io.mifos.customer.service.internal.mapper.IdentificationCardMapper;\n-import io.mifos.customer.service.internal.mapper.IdentificationCardScanMapper;\n-import io.mifos.customer.service.internal.mapper.PortraitMapper;\n-import io.mifos.customer.service.internal.repository.AddressEntity;\n-import io.mifos.customer.service.internal.repository.AddressRepository;\n-import io.mifos.customer.service.internal.repository.CommandRepository;\n-import io.mifos.customer.service.internal.repository.ContactDetailEntity;\n-import io.mifos.customer.service.internal.repository.ContactDetailRepository;\n-import io.mifos.customer.service.internal.repository.CustomerEntity;\n-import io.mifos.customer.service.internal.repository.CustomerRepository;\n-import io.mifos.customer.service.internal.repository.IdentificationCardEntity;\n-import io.mifos.customer.service.internal.repository.IdentificationCardRepository;\n-import io.mifos.customer.service.internal.repository.IdentificationCardScanEntity;\n-import io.mifos.customer.service.internal.repository.IdentificationCardScanRepository;\n-import io.mifos.customer.service.internal.repository.PortraitEntity;\n-import io.mifos.customer.service.internal.repository.PortraitRepository;\n-import org.slf4j.Logger;\n+import io.mifos.customer.catalog.service.internal.repository.*;\n+import io.mifos.customer.service.internal.command.*;\n+import io.mifos.customer.service.internal.mapper.*;\n+import io.mifos.customer.service.internal.repository.*;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.multipart.MultipartFile;\n \n@@ -84,11 +42,9 @@\n import java.util.Optional;\n import java.util.stream.Collectors;\n \n-@SuppressWarnings(\"unused\")\n+@SuppressWarnings({\"unused\", \"UnusedReturnValue\"})\n @Aggregate\n public class CustomerAggregate {\n-\n-  private final Logger logger;\n   private final AddressRepository addressRepository;\n   private final CustomerRepository customerRepository;\n   private final IdentificationCardRepository identificationCardRepository;\n@@ -102,8 +58,7 @@\n   private final TaskAggregate taskAggregate;\n \n   @Autowired\n-  public CustomerAggregate(@Qualifier(ServiceConstants.LOGGER_NAME) final Logger logger,\n-                           final AddressRepository addressRepository,\n+  public CustomerAggregate(final AddressRepository addressRepository,\n                            final CustomerRepository customerRepository,\n                            final IdentificationCardRepository identificationCardRepository,\n                            final IdentificationCardScanRepository identificationCardScanRepository,\n@@ -115,7 +70,6 @@ public CustomerAggregate(@Qualifier(ServiceConstants.LOGGER_NAME) final Logger l\n                            final CommandRepository commandRepository,\n                            final TaskAggregate taskAggregate) {\n     super();\n-    this.logger = logger;\n     this.addressRepository = addressRepository;\n     this.customerRepository = customerRepository;\n     this.identificationCardRepository = identificationCardRepository;\n@@ -170,7 +124,7 @@ public String createCustomer(final CreateCustomerCommand createCustomerCommand)\n   public String updateCustomer(final UpdateCustomerCommand updateCustomerCommand) {\n     final Customer customer = updateCustomerCommand.customer();\n \n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(customer.getIdentifier());\n+    final CustomerEntity customerEntity = findCustomerEntityOrThrow(customer.getIdentifier());\n \n     customerEntity.setGivenName(customer.getGivenName());\n     customerEntity.setMiddleName(customer.getMiddleName());\n@@ -218,7 +172,7 @@ public String updateCustomer(final UpdateCustomerCommand updateCustomerCommand)\n   @CommandHandler\n   @EventEmitter(selectorName = CustomerEventConstants.SELECTOR_NAME, selectorValue = CustomerEventConstants.ACTIVATE_CUSTOMER)\n   public String activateCustomer(final ActivateCustomerCommand activateCustomerCommand) {\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(activateCustomerCommand.identifier());\n+    final CustomerEntity customerEntity = findCustomerEntityOrThrow(activateCustomerCommand.identifier());\n \n     if (this.taskAggregate.openTasksForCustomerExist(customerEntity, Command.Action.ACTIVATE.name())) {\n       throw ServiceException.conflict(\"Open Tasks for customer {0} exists.\", activateCustomerCommand.identifier());\n@@ -241,7 +195,8 @@ public String activateCustomer(final ActivateCustomerCommand activateCustomerCom\n   @CommandHandler\n   @EventEmitter(selectorName = CustomerEventConstants.SELECTOR_NAME, selectorValue = CustomerEventConstants.LOCK_CUSTOMER)\n   public String lockCustomer(final LockCustomerCommand lockCustomerCommand) {\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(lockCustomerCommand.identifier());\n+    final CustomerEntity customerEntity = findCustomerEntityOrThrow(lockCustomerCommand.identifier());\n+\n     customerEntity.setCurrentState(Customer.State.LOCKED.name());\n     customerEntity.setLastModifiedBy(UserContextHolder.checkedGetUser());\n     customerEntity.setLastModifiedOn(LocalDateTime.now(Clock.systemUTC()));\n@@ -261,7 +216,7 @@ public String lockCustomer(final LockCustomerCommand lockCustomerCommand) {\n   @CommandHandler\n   @EventEmitter(selectorName = CustomerEventConstants.SELECTOR_NAME, selectorValue = CustomerEventConstants.UNLOCK_CUSTOMER)\n   public String unlockCustomer(final UnlockCustomerCommand unlockCustomerCommand) {\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(unlockCustomerCommand.identifier());\n+    final CustomerEntity customerEntity = findCustomerEntityOrThrow(unlockCustomerCommand.identifier());\n \n     if (this.taskAggregate.openTasksForCustomerExist(customerEntity, Command.Action.UNLOCK.name())) {\n       throw ServiceException.conflict(\"Open Tasks for customer {0} exists.\", unlockCustomerCommand.identifier());\n@@ -284,7 +239,8 @@ public String unlockCustomer(final UnlockCustomerCommand unlockCustomerCommand)\n   @CommandHandler\n   @EventEmitter(selectorName = CustomerEventConstants.SELECTOR_NAME, selectorValue = CustomerEventConstants.CLOSE_CUSTOMER)\n   public String closeCustomer(final CloseCustomerCommand closeCustomerCommand) {\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(closeCustomerCommand.identifier());\n+    final CustomerEntity customerEntity = findCustomerEntityOrThrow(closeCustomerCommand.identifier());\n+\n     customerEntity.setCurrentState(Customer.State.CLOSED.name());\n     customerEntity.setLastModifiedBy(UserContextHolder.checkedGetUser());\n     customerEntity.setLastModifiedOn(LocalDateTime.now(Clock.systemUTC()));\n@@ -304,7 +260,7 @@ public String closeCustomer(final CloseCustomerCommand closeCustomerCommand) {\n   @CommandHandler\n   @EventEmitter(selectorName = CustomerEventConstants.SELECTOR_NAME, selectorValue = CustomerEventConstants.REOPEN_CUSTOMER)\n   public String reopenCustomer(final ReopenCustomerCommand reopenCustomerCommand) {\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(reopenCustomerCommand.identifier());\n+    final CustomerEntity customerEntity = findCustomerEntityOrThrow(reopenCustomerCommand.identifier());\n \n     if (this.taskAggregate.openTasksForCustomerExist(customerEntity, Command.Action.REOPEN.name())) {\n       throw ServiceException.conflict(\"Open Tasks for customer {0} exists.\", reopenCustomerCommand.identifier());\n@@ -327,7 +283,7 @@ public String reopenCustomer(final ReopenCustomerCommand reopenCustomerCommand)\n   @CommandHandler\n   @EventEmitter(selectorName = CustomerEventConstants.SELECTOR_NAME, selectorValue = CustomerEventConstants.PUT_ADDRESS)\n   public String updateAddress(final UpdateAddressCommand updateAddressCommand) {\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(updateAddressCommand.identifier());\n+    final CustomerEntity customerEntity = findCustomerEntityOrThrow(updateAddressCommand.identifier());\n     customerEntity.setLastModifiedBy(UserContextHolder.checkedGetUser());\n     customerEntity.setLastModifiedOn(LocalDateTime.now(Clock.systemUTC()));\n \n@@ -347,7 +303,7 @@ public String updateAddress(final UpdateAddressCommand updateAddressCommand) {\n   @CommandHandler\n   @EventEmitter(selectorName = CustomerEventConstants.SELECTOR_NAME, selectorValue = CustomerEventConstants.PUT_CONTACT_DETAILS)\n   public String updateContactDetails(final UpdateContactDetailsCommand updateContactDetailsCommand) {\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(updateContactDetailsCommand.identifier());\n+    final CustomerEntity customerEntity = findCustomerEntityOrThrow(updateContactDetailsCommand.identifier());\n     customerEntity.setLastModifiedBy(UserContextHolder.checkedGetUser());\n     customerEntity.setLastModifiedOn(LocalDateTime.now(Clock.systemUTC()));\n \n@@ -374,7 +330,7 @@ public String updateContactDetails(final UpdateContactDetailsCommand updateConta\n   @CommandHandler\n   @EventEmitter(selectorName = CustomerEventConstants.SELECTOR_NAME, selectorValue = CustomerEventConstants.POST_IDENTIFICATION_CARD)\n   public String createIdentificationCard(final CreateIdentificationCardCommand createIdentificationCardCommand) {\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(createIdentificationCardCommand.identifier());\n+    final CustomerEntity customerEntity = findCustomerEntityOrThrow(createIdentificationCardCommand.identifier());\n \n     final IdentificationCardEntity identificationCardEntity = IdentificationCardMapper.map(createIdentificationCardCommand.identificationCard());\n \n@@ -507,7 +463,7 @@ public String createPortrait(final CreatePortraitCommand createPortraitCommand)\n       return null;\n     }\n \n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(createPortraitCommand.identifier());\n+    final CustomerEntity customerEntity = findCustomerEntityOrThrow(createPortraitCommand.identifier());\n \n     final PortraitEntity portraitEntity = PortraitMapper.map(createPortraitCommand.portrait());\n     portraitEntity.setCustomer(customerEntity);\n@@ -525,7 +481,7 @@ public String createPortrait(final CreatePortraitCommand createPortraitCommand)\n   @CommandHandler\n   @EventEmitter(selectorName = CustomerEventConstants.SELECTOR_NAME, selectorValue = CustomerEventConstants.DELETE_PORTRAIT)\n   public String deletePortrait(final DeletePortraitCommand deletePortraitCommand) throws IOException {\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(deletePortraitCommand.identifier());\n+    final CustomerEntity customerEntity = findCustomerEntityOrThrow(deletePortraitCommand.identifier());\n \n     this.portraitRepository.deleteByCustomer(customerEntity);\n \n@@ -557,4 +513,9 @@ private void setCustomValues(final Customer customer, final CustomerEntity saved\n             .collect(Collectors.toList())\n     );\n   }\n+\n+  private CustomerEntity findCustomerEntityOrThrow(String identifier) {\n+    return this.customerRepository.findByIdentifier(identifier)\n+        .orElseThrow(() -> ServiceException.notFound(\"Customer ''{0}'' not found\", identifier));\n+  }\n }",
                "additions": 24,
                "raw_url": "https://github.com/apache/fineract-cn-customer/raw/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/command/handler/CustomerAggregate.java",
                "status": "modified",
                "changes": 87,
                "deletions": 63,
                "sha": "07e5ebcf89d4c6b3fa34ba507334aa559920b87a",
                "blob_url": "https://github.com/apache/fineract-cn-customer/blob/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/command/handler/CustomerAggregate.java",
                "filename": "service/src/main/java/io/mifos/customer/service/internal/command/handler/CustomerAggregate.java",
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-customer/contents/service/src/main/java/io/mifos/customer/service/internal/command/handler/CustomerAggregate.java?ref=5e05d4a57244184ef3b92757dc79b975cc489dad"
            },
            {
                "patch": "@@ -71,11 +71,9 @@ public DocumentPageEvent process(final CreateDocumentPageCommand command) throws\n   @CommandHandler\n   @EventEmitter(selectorName = CustomerEventConstants.SELECTOR_NAME, selectorValue = CustomerEventConstants.POST_DOCUMENT)\n   public DocumentEvent process(final CreateDocumentCommand command) throws IOException {\n-\n-\n-    final CustomerEntity customerEntity = customerRepository.findByIdentifier(command.getCustomerIdentifier());\n-    final DocumentEntity documentEntity = DocumentMapper.map(command.getCustomerDocument(), customerEntity);\n-    documentRepository.save(documentEntity);\n+    customerRepository.findByIdentifier(command.getCustomerIdentifier())\n+        .map(customerEntity -> DocumentMapper.map(command.getCustomerDocument(), customerEntity))\n+        .ifPresent(documentRepository::save);\n \n     return new DocumentEvent(command.getCustomerIdentifier(), command.getCustomerDocument().getIdentifier());\n   }\n@@ -90,10 +88,12 @@ public DocumentEvent process(final ChangeDocumentCommand command) throws IOExcep\n             ServiceException.notFound(\"Document ''{0}'' for customer ''{1}'' not found\",\n                 command.getCustomerDocument().getIdentifier(), command.getCustomerIdentifier()));\n \n-    final CustomerEntity customerEntity = customerRepository.findByIdentifier(command.getCustomerIdentifier());\n-    final DocumentEntity documentEntity = DocumentMapper.map(command.getCustomerDocument(), customerEntity);\n-    documentEntity.setId(existingDocument.getId());\n-    documentRepository.save(documentEntity);\n+    customerRepository.findByIdentifier(command.getCustomerIdentifier())\n+        .map(customerEntity -> DocumentMapper.map(command.getCustomerDocument(), customerEntity))\n+        .ifPresent(documentEntity -> {\n+          documentEntity.setId(existingDocument.getId());\n+          documentRepository.save(documentEntity);\n+        });\n \n     return new DocumentEvent(command.getCustomerIdentifier(), command.getCustomerDocument().getIdentifier());\n   }",
                "additions": 9,
                "raw_url": "https://github.com/apache/fineract-cn-customer/raw/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/command/handler/DocumentCommandHandler.java",
                "status": "modified",
                "changes": 18,
                "deletions": 9,
                "sha": "c91fcc04492aca9c9fa95b0ac2611aa2ed63e1fb",
                "blob_url": "https://github.com/apache/fineract-cn-customer/blob/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/command/handler/DocumentCommandHandler.java",
                "filename": "service/src/main/java/io/mifos/customer/service/internal/command/handler/DocumentCommandHandler.java",
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-customer/contents/service/src/main/java/io/mifos/customer/service/internal/command/handler/DocumentCommandHandler.java?ref=5e05d4a57244184ef3b92757dc79b975cc489dad"
            },
            {
                "patch": "@@ -19,6 +19,7 @@\n import io.mifos.core.command.annotation.Aggregate;\n import io.mifos.core.command.annotation.CommandHandler;\n import io.mifos.core.command.annotation.EventEmitter;\n+import io.mifos.core.lang.ServiceException;\n import io.mifos.customer.api.v1.CustomerEventConstants;\n import io.mifos.customer.api.v1.domain.Command;\n import io.mifos.customer.api.v1.domain.TaskDefinition;\n@@ -95,8 +96,7 @@ public String addTaskToCustomer(final AddTaskDefinitionToCustomerCommand addTask\n     final TaskDefinitionEntity taskDefinitionEntity =\n         this.taskDefinitionRepository.findByIdentifier(addTaskDefinitionToCustomerCommand.taskIdentifier());\n \n-    final CustomerEntity customerEntity =\n-        this.customerRepository.findByIdentifier(addTaskDefinitionToCustomerCommand.customerIdentifier());\n+    final CustomerEntity customerEntity = findCustomerEntityOrThrow(addTaskDefinitionToCustomerCommand.customerIdentifier());\n \n     this.taskInstanceRepository.save(TaskInstanceMapper.create(taskDefinitionEntity, customerEntity));\n \n@@ -107,8 +107,7 @@ public String addTaskToCustomer(final AddTaskDefinitionToCustomerCommand addTask\n   @CommandHandler\n   @EventEmitter(selectorName = CustomerEventConstants.SELECTOR_NAME, selectorValue = CustomerEventConstants.PUT_CUSTOMER)\n   public String executeTaskForCustomer(final ExecuteTaskForCustomerCommand executeTaskForCustomerCommand) {\n-    final CustomerEntity customerEntity =\n-        this.customerRepository.findByIdentifier(executeTaskForCustomerCommand.customerIdentifier());\n+    final CustomerEntity customerEntity = findCustomerEntityOrThrow(executeTaskForCustomerCommand.customerIdentifier());\n     final List<TaskInstanceEntity> taskInstanceEntities = this.taskInstanceRepository.findByCustomer(customerEntity);\n     if (taskInstanceEntities != null) {\n       final Optional<TaskInstanceEntity> taskInstanceEntityOptional = taskInstanceEntities\n@@ -160,4 +159,9 @@ public Boolean openTasksForCustomerExist(final CustomerEntity customerEntity, fi\n       return false;\n     }\n   }\n+\n+  private CustomerEntity findCustomerEntityOrThrow(String identifier) {\n+    return this.customerRepository.findByIdentifier(identifier)\n+        .orElseThrow(() -> ServiceException.notFound(\"Customer ''{0}'' not found\", identifier));\n+  }\n }",
                "additions": 8,
                "raw_url": "https://github.com/apache/fineract-cn-customer/raw/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/command/handler/TaskAggregate.java",
                "status": "modified",
                "changes": 12,
                "deletions": 4,
                "sha": "ab4cb4193b080834fe00d6e6b57b0fa6f46bea92",
                "blob_url": "https://github.com/apache/fineract-cn-customer/blob/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/command/handler/TaskAggregate.java",
                "filename": "service/src/main/java/io/mifos/customer/service/internal/command/handler/TaskAggregate.java",
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-customer/contents/service/src/main/java/io/mifos/customer/service/internal/command/handler/TaskAggregate.java?ref=5e05d4a57244184ef3b92757dc79b975cc489dad"
            },
            {
                "patch": "@@ -17,9 +17,9 @@\n \n import org.springframework.data.jpa.repository.JpaRepository;\n \n-import java.util.List;\n+import java.util.stream.Stream;\n \n public interface CommandRepository extends JpaRepository<CommandEntity, Long> {\n \n-  List<CommandEntity> findByCustomer(final CustomerEntity customerEntity);\n+  Stream<CommandEntity> findByCustomer(final CustomerEntity customerEntity);\n }",
                "additions": 2,
                "raw_url": "https://github.com/apache/fineract-cn-customer/raw/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/repository/CommandRepository.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "1d69ea9276a4e196336c1686d24d6cf8d0bcd13b",
                "blob_url": "https://github.com/apache/fineract-cn-customer/blob/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/repository/CommandRepository.java",
                "filename": "service/src/main/java/io/mifos/customer/service/internal/repository/CommandRepository.java",
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-customer/contents/service/src/main/java/io/mifos/customer/service/internal/repository/CommandRepository.java?ref=5e05d4a57244184ef3b92757dc79b975cc489dad"
            },
            {
                "patch": "@@ -22,6 +22,8 @@\n import org.springframework.data.repository.query.Param;\n import org.springframework.stereotype.Repository;\n \n+import java.util.Optional;\n+\n @Repository\n public interface CustomerRepository extends JpaRepository<CustomerEntity, Long> {\n \n@@ -31,7 +33,7 @@\n   Page<CustomerEntity> findByIdentifierContainingOrGivenNameContainingOrSurnameContaining(\n       final String identifier, final String givenName, final String surname, final Pageable pageable);\n \n-  CustomerEntity findByIdentifier(final String identifier);\n+  Optional<CustomerEntity> findByIdentifier(final String identifier);\n \n   Page<CustomerEntity> findByCurrentStateNot(final String state, final Pageable pageable);\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/fineract-cn-customer/raw/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/repository/CustomerRepository.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "61391ad8b35960dcc9907656d32714f3d7d282d9",
                "blob_url": "https://github.com/apache/fineract-cn-customer/blob/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/repository/CustomerRepository.java",
                "filename": "service/src/main/java/io/mifos/customer/service/internal/repository/CustomerRepository.java",
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-customer/contents/service/src/main/java/io/mifos/customer/service/internal/repository/CustomerRepository.java?ref=5e05d4a57244184ef3b92757dc79b975cc489dad"
            },
            {
                "patch": "@@ -20,8 +20,8 @@\n import org.springframework.data.repository.query.Param;\n import org.springframework.stereotype.Repository;\n \n-import java.util.List;\n import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Repository\n public interface IdentificationCardRepository extends JpaRepository<IdentificationCardEntity, Long> {\n@@ -31,5 +31,5 @@\n \n   Optional<IdentificationCardEntity> findByNumber(final String number);\n \n-  List<IdentificationCardEntity> findByCustomer(final CustomerEntity customerEntity);\n+  Stream<IdentificationCardEntity> findByCustomer(final CustomerEntity customerEntity);\n }",
                "additions": 2,
                "raw_url": "https://github.com/apache/fineract-cn-customer/raw/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/repository/IdentificationCardRepository.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "7903e825fcc39a9c6173f30e2df62ec80196b229",
                "blob_url": "https://github.com/apache/fineract-cn-customer/blob/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/repository/IdentificationCardRepository.java",
                "filename": "service/src/main/java/io/mifos/customer/service/internal/repository/IdentificationCardRepository.java",
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-customer/contents/service/src/main/java/io/mifos/customer/service/internal/repository/IdentificationCardRepository.java?ref=5e05d4a57244184ef3b92757dc79b975cc489dad"
            },
            {
                "patch": "@@ -15,42 +15,14 @@\n  */\n package io.mifos.customer.service.internal.service;\n \n-import io.mifos.customer.api.v1.domain.Command;\n-import io.mifos.customer.api.v1.domain.Customer;\n-import io.mifos.customer.api.v1.domain.CustomerPage;\n-import io.mifos.customer.api.v1.domain.IdentificationCard;\n-import io.mifos.customer.api.v1.domain.IdentificationCardScan;\n-import io.mifos.customer.api.v1.domain.ProcessStep;\n-import io.mifos.customer.api.v1.domain.TaskDefinition;\n+import io.mifos.customer.api.v1.domain.*;\n import io.mifos.customer.catalog.api.v1.domain.Value;\n import io.mifos.customer.catalog.service.internal.repository.FieldEntity;\n import io.mifos.customer.catalog.service.internal.repository.FieldValueEntity;\n import io.mifos.customer.catalog.service.internal.repository.FieldValueRepository;\n-import io.mifos.customer.service.ServiceConstants;\n-import io.mifos.customer.service.internal.mapper.AddressMapper;\n-import io.mifos.customer.service.internal.mapper.CommandMapper;\n-import io.mifos.customer.service.internal.mapper.ContactDetailMapper;\n-import io.mifos.customer.service.internal.mapper.CustomerMapper;\n-import io.mifos.customer.service.internal.mapper.IdentificationCardMapper;\n-import io.mifos.customer.service.internal.mapper.IdentificationCardScanMapper;\n-import io.mifos.customer.service.internal.mapper.TaskDefinitionMapper;\n-import io.mifos.customer.service.internal.repository.CommandEntity;\n-import io.mifos.customer.service.internal.repository.CommandRepository;\n-import io.mifos.customer.service.internal.repository.ContactDetailEntity;\n-import io.mifos.customer.service.internal.repository.ContactDetailRepository;\n-import io.mifos.customer.service.internal.repository.CustomerEntity;\n-import io.mifos.customer.service.internal.repository.CustomerRepository;\n-import io.mifos.customer.service.internal.repository.IdentificationCardEntity;\n-import io.mifos.customer.service.internal.repository.IdentificationCardRepository;\n-import io.mifos.customer.service.internal.repository.IdentificationCardScanEntity;\n-import io.mifos.customer.service.internal.repository.IdentificationCardScanRepository;\n-import io.mifos.customer.service.internal.repository.PortraitEntity;\n-import io.mifos.customer.service.internal.repository.PortraitRepository;\n-import io.mifos.customer.service.internal.repository.TaskDefinitionRepository;\n-import io.mifos.customer.service.internal.repository.TaskInstanceRepository;\n-import org.slf4j.Logger;\n+import io.mifos.customer.service.internal.mapper.*;\n+import io.mifos.customer.service.internal.repository.*;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Service;\n@@ -60,11 +32,11 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n @Service\n public class CustomerService {\n \n-  private final Logger logger;\n   private final CustomerRepository customerRepository;\n   private final IdentificationCardRepository identificationCardRepository;\n   private final IdentificationCardScanRepository identificationCardScanRepository;\n@@ -76,8 +48,7 @@\n   private final TaskInstanceRepository taskInstanceRepository;\n \n   @Autowired\n-  public CustomerService(@Qualifier(ServiceConstants.LOGGER_NAME) final Logger logger,\n-                         final CustomerRepository customerRepository,\n+  public CustomerService(final CustomerRepository customerRepository,\n                          final IdentificationCardRepository identificationCardRepository,\n                          final IdentificationCardScanRepository identificationCardScanRepository,\n                          final PortraitRepository portraitRepository,\n@@ -87,7 +58,6 @@ public CustomerService(@Qualifier(ServiceConstants.LOGGER_NAME) final Logger log\n                          final TaskDefinitionRepository taskDefinitionRepository,\n                          final TaskInstanceRepository taskInstanceRepository) {\n     super();\n-    this.logger = logger;\n     this.customerRepository = customerRepository;\n     this.identificationCardRepository = identificationCardRepository;\n     this.identificationCardScanRepository = identificationCardScanRepository;\n@@ -103,10 +73,6 @@ public Boolean customerExists(final String identifier) {\n     return this.customerRepository.existsByIdentifier(identifier);\n   }\n \n-  public Boolean portraitExists(final String identifier) {\n-    return this.portraitRepository.existsByIdentifier(identifier);\n-  }\n-\n   public Boolean identificationCardExists(final String number) {\n     return this.identificationCardRepository.existsByNumber(number);\n   }\n@@ -118,41 +84,39 @@ public Boolean identificationCardScanExists(final String number, final String id\n   }\n \n   public Optional<Customer> findCustomer(final String identifier) {\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(identifier);\n-    if (customerEntity != null) {\n-      final Customer customer = CustomerMapper.map(customerEntity);\n-      customer.setAddress(AddressMapper.map(customerEntity.getAddress()));\n-\n-      final List<ContactDetailEntity> contactDetailEntities = this.contactDetailRepository.findByCustomer(customerEntity);\n-      if (contactDetailEntities != null) {\n-        customer.setContactDetails(\n-            contactDetailEntities\n-                .stream()\n-                  .map(ContactDetailMapper::map)\n-                  .collect(Collectors.toList())\n-        );\n-      }\n-\n-      final List<FieldValueEntity> fieldValueEntities = this.fieldValueRepository.findByCustomer(customerEntity);\n-      if (fieldValueEntities != null) {\n-        customer.setCustomValues(\n-            fieldValueEntities\n-                .stream()\n-                .map(fieldValueEntity -> {\n-                  final Value value = new Value();\n-                  value.setValue(fieldValueEntity.getValue());\n-                  final FieldEntity fieldEntity = fieldValueEntity.getField();\n-                  value.setCatalogIdentifier(fieldEntity.getCatalog().getIdentifier());\n-                  value.setFieldIdentifier(fieldEntity.getIdentifier());\n-                  return value;\n-                }).collect(Collectors.toList())\n-        );\n-      }\n-\n-      return Optional.of(customer);\n-    } else {\n-      return Optional.empty();\n-    }\n+    return customerRepository.findByIdentifier(identifier)\n+        .map(customerEntity -> {\n+          final Customer customer = CustomerMapper.map(customerEntity);\n+          customer.setAddress(AddressMapper.map(customerEntity.getAddress()));\n+\n+          final List<ContactDetailEntity> contactDetailEntities = this.contactDetailRepository.findByCustomer(customerEntity);\n+          if (contactDetailEntities != null) {\n+            customer.setContactDetails(\n+                contactDetailEntities\n+                    .stream()\n+                    .map(ContactDetailMapper::map)\n+                    .collect(Collectors.toList())\n+            );\n+          }\n+\n+          final List<FieldValueEntity> fieldValueEntities = this.fieldValueRepository.findByCustomer(customerEntity);\n+          if (fieldValueEntities != null) {\n+            customer.setCustomValues(\n+                fieldValueEntities\n+                    .stream()\n+                    .map(fieldValueEntity -> {\n+                      final Value value = new Value();\n+                      value.setValue(fieldValueEntity.getValue());\n+                      final FieldEntity fieldEntity = fieldValueEntity.getField();\n+                      value.setCatalogIdentifier(fieldEntity.getCatalog().getIdentifier());\n+                      value.setFieldIdentifier(fieldEntity.getIdentifier());\n+                      return value;\n+                    }).collect(Collectors.toList())\n+            );\n+          }\n+\n+          return customer;\n+        });\n   }\n \n   public CustomerPage fetchCustomer(final String term, final Boolean includeClosed, final Pageable pageable) {\n@@ -186,31 +150,23 @@ public CustomerPage fetchCustomer(final String term, final Boolean includeClosed\n     return customerPage;\n   }\n \n-  public final List<Command> fetchCommandsByCustomer(final String identifier) {\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(identifier);\n-    final List<CommandEntity> commands = this.commandRepository.findByCustomer(customerEntity);\n-    if (commands != null) {\n-      return commands.stream().map(CommandMapper::map).collect(Collectors.toList());\n-    } else {\n-      return Collections.emptyList();\n-    }\n+  public final Stream<Command> fetchCommandsByCustomer(final String identifier) {\n+    return customerRepository.findByIdentifier(identifier)\n+        .map(commandRepository::findByCustomer)\n+        .orElse(Stream.empty())\n+        .map(CommandMapper::map);\n   }\n \n-  public final PortraitEntity findPortrait(final String identifier) {\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(identifier);\n-\n-    return this.portraitRepository.findByCustomer(customerEntity);\n+  public final Optional<PortraitEntity> findPortrait(final String identifier) {\n+    return customerRepository.findByIdentifier(identifier)\n+        .map(portraitRepository::findByCustomer);\n   }\n \n-  public final List<IdentificationCard> fetchIdentificationCardsByCustomer(final String identifier) {\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(identifier);\n-    final List<IdentificationCardEntity> identificationCards = this.identificationCardRepository.findByCustomer(customerEntity);\n-\n-    if (identificationCards != null) {\n-      return identificationCards.stream().map(IdentificationCardMapper::map).collect(Collectors.toList());\n-    } else {\n-      return Collections.emptyList();\n-    }\n+  public final Stream<IdentificationCard> fetchIdentificationCardsByCustomer(final String identifier) {\n+    return customerRepository.findByIdentifier(identifier)\n+        .map(identificationCardRepository::findByCustomer)\n+        .orElse(Stream.empty())\n+        .map(IdentificationCardMapper::map);\n   }\n \n   public Optional<IdentificationCard> findIdentificationCard(final String number) {\n@@ -229,8 +185,7 @@ public final PortraitEntity findPortrait(final String identifier) {\n \n   private Optional<IdentificationCardScanEntity> findIdentificationCardEntity(final String number, final String identifier) {\n     final Optional<IdentificationCardEntity> cardEntity = this.identificationCardRepository.findByNumber(number);\n-    final Optional<IdentificationCardScanEntity> cardScanEntity = cardEntity.flatMap(card -> this.identificationCardScanRepository.findByIdentifierAndIdentificationCard(identifier, card));\n-    return cardScanEntity;\n+    return cardEntity.flatMap(card -> this.identificationCardScanRepository.findByIdentifierAndIdentificationCard(identifier, card));\n   }\n \n   public Optional<IdentificationCardScan> findIdentificationCardScan(final String number, final String identifier) {\n@@ -242,29 +197,32 @@ public final PortraitEntity findPortrait(final String identifier) {\n   }\n \n   public List<ProcessStep> getProcessSteps(final String customerIdentifier) {\n-    final ArrayList<ProcessStep> processSteps = new ArrayList<>();\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(customerIdentifier);\n-\n-    final Customer.State state = Customer.State.valueOf(customerEntity.getCurrentState());\n-    switch (state) {\n-      case PENDING:\n-        processSteps.add(this.buildProcessStep(customerEntity, Command.Action.ACTIVATE));\n-        processSteps.add(this.buildProcessStep(customerEntity, Command.Action.CLOSE));\n-        break;\n-      case ACTIVE:\n-        processSteps.add(this.buildProcessStep(customerEntity, Command.Action.LOCK));\n-        processSteps.add(this.buildProcessStep(customerEntity, Command.Action.CLOSE));\n-        break;\n-      case LOCKED:\n-        processSteps.add(this.buildProcessStep(customerEntity, Command.Action.UNLOCK));\n-        processSteps.add(this.buildProcessStep(customerEntity, Command.Action.CLOSE));\n-        break;\n-      case CLOSED:\n-        processSteps.add(this.buildProcessStep(customerEntity, Command.Action.REOPEN));\n-        break;\n-    }\n-\n-    return processSteps;\n+    return customerRepository.findByIdentifier(customerIdentifier)\n+        .map(customerEntity -> {\n+          final List<ProcessStep> processSteps = new ArrayList<>();\n+\n+          final Customer.State state = Customer.State.valueOf(customerEntity.getCurrentState());\n+          switch (state) {\n+            case PENDING:\n+              processSteps.add(this.buildProcessStep(customerEntity, Command.Action.ACTIVATE));\n+              processSteps.add(this.buildProcessStep(customerEntity, Command.Action.CLOSE));\n+              break;\n+            case ACTIVE:\n+              processSteps.add(this.buildProcessStep(customerEntity, Command.Action.LOCK));\n+              processSteps.add(this.buildProcessStep(customerEntity, Command.Action.CLOSE));\n+              break;\n+            case LOCKED:\n+              processSteps.add(this.buildProcessStep(customerEntity, Command.Action.UNLOCK));\n+              processSteps.add(this.buildProcessStep(customerEntity, Command.Action.CLOSE));\n+              break;\n+            case CLOSED:\n+              processSteps.add(this.buildProcessStep(customerEntity, Command.Action.REOPEN));\n+              break;\n+          }\n+\n+          return processSteps;\n+        })\n+        .orElse(Collections.emptyList());\n   }\n \n   private ProcessStep buildProcessStep(final CustomerEntity customerEntity, final Command.Action action) {\n@@ -276,14 +234,13 @@ private ProcessStep buildProcessStep(final CustomerEntity customerEntity, final\n \n     final ArrayList<TaskDefinition> taskDefinitions = new ArrayList<>();\n     this.taskDefinitionRepository.findByAssignedCommandsContaining(action.name())\n-        .forEach(taskDefinitionEntity -> {\n-          this.taskInstanceRepository.findByCustomerAndTaskDefinition(customerEntity, taskDefinitionEntity)\n-              .forEach(taskInstanceEntity -> {\n-                if (taskInstanceEntity.getExecutedBy() == null) {\n-                  taskDefinitions.add(TaskDefinitionMapper.map(taskDefinitionEntity));\n-                }\n-              });\n-        });\n+        .forEach(taskDefinitionEntity ->\n+            this.taskInstanceRepository.findByCustomerAndTaskDefinition(customerEntity, taskDefinitionEntity)\n+            .forEach(taskInstanceEntity -> {\n+              if (taskInstanceEntity.getExecutedBy() == null) {\n+                taskDefinitions.add(TaskDefinitionMapper.map(taskDefinitionEntity));\n+              }\n+            }));\n     processStep.setTaskDefinitions(taskDefinitions);\n \n     return processStep;",
                "additions": 85,
                "raw_url": "https://github.com/apache/fineract-cn-customer/raw/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/service/CustomerService.java",
                "status": "modified",
                "changes": 213,
                "deletions": 128,
                "sha": "280b5097b95d97c65eee35887ffe0c1d5b89547d",
                "blob_url": "https://github.com/apache/fineract-cn-customer/blob/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/service/CustomerService.java",
                "filename": "service/src/main/java/io/mifos/customer/service/internal/service/CustomerService.java",
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-customer/contents/service/src/main/java/io/mifos/customer/service/internal/service/CustomerService.java?ref=5e05d4a57244184ef3b92757dc79b975cc489dad"
            },
            {
                "patch": "@@ -17,14 +17,14 @@\n \n import io.mifos.customer.api.v1.domain.TaskDefinition;\n import io.mifos.customer.service.internal.mapper.TaskDefinitionMapper;\n-import io.mifos.customer.service.internal.repository.CustomerEntity;\n import io.mifos.customer.service.internal.repository.CustomerRepository;\n import io.mifos.customer.service.internal.repository.TaskDefinitionEntity;\n import io.mifos.customer.service.internal.repository.TaskDefinitionRepository;\n import io.mifos.customer.service.internal.repository.TaskInstanceRepository;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n+import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n@@ -67,8 +67,9 @@ public Boolean taskDefinitionExists(final String identifier) {\n   }\n \n   public List<TaskDefinition> findTasksByCustomer(final String customerIdentifier, Boolean includeExecuted) {\n-    final CustomerEntity customerEntity = this.customerRepository.findByIdentifier(customerIdentifier);\n-    return this.taskInstanceRepository.findByCustomer(customerEntity)\n+    return customerRepository.findByIdentifier(customerIdentifier)\n+        .map(taskInstanceRepository::findByCustomer)\n+        .orElse(Collections.emptyList())\n         .stream()\n         .filter(taskInstanceEntity -> (includeExecuted ? true : taskInstanceEntity.getExecutedBy() == null))\n         .map(taskInstanceEntity -> TaskDefinitionMapper.map(taskInstanceEntity.getTaskDefinition()))",
                "additions": 4,
                "raw_url": "https://github.com/apache/fineract-cn-customer/raw/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/service/TaskService.java",
                "status": "modified",
                "changes": 7,
                "deletions": 3,
                "sha": "a751601eb3f5bd634757a637f91f9ffcb4be3f60",
                "blob_url": "https://github.com/apache/fineract-cn-customer/blob/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/internal/service/TaskService.java",
                "filename": "service/src/main/java/io/mifos/customer/service/internal/service/TaskService.java",
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-customer/contents/service/src/main/java/io/mifos/customer/service/internal/service/TaskService.java?ref=5e05d4a57244184ef3b92757dc79b975cc489dad"
            },
            {
                "patch": "@@ -79,6 +79,8 @@\n import javax.validation.constraints.Size;\n import java.util.List;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n @RestController\n @RequestMapping(\"/\")\n@@ -267,7 +269,7 @@ public CustomerRestController(@Qualifier(ServiceConstants.LOGGER_NAME) final Log\n   @ResponseBody\n   ResponseEntity<List<Command>> fetchCustomerCommands(@PathVariable(\"identifier\") final String identifier) {\n     if (this.customerService.customerExists(identifier)) {\n-      return ResponseEntity.ok(this.customerService.fetchCommandsByCustomer(identifier));\n+      return ResponseEntity.ok(this.customerService.fetchCommandsByCustomer(identifier).collect(Collectors.toList()));\n     } else {\n       throw ServiceException.notFound(\"Customer {0} not found.\", identifier);\n     }\n@@ -315,8 +317,8 @@ public CustomerRestController(@Qualifier(ServiceConstants.LOGGER_NAME) final Log\n         final TaskDefinition taskDefinition = optionalTaskDefinition.get();\n         switch (TaskDefinition.Type.valueOf(taskDefinition.getType())) {\n           case ID_CARD:\n-            final List<IdentificationCard> identificationCards = this.customerService.fetchIdentificationCardsByCustomer(identifier);\n-            if (identificationCards.isEmpty()) {\n+            final Stream<IdentificationCard> identificationCards = this.customerService.fetchIdentificationCardsByCustomer(identifier);\n+            if (!identificationCards.findAny().isPresent()) {\n               throw ServiceException.conflict(\"No identification cards for customer found.\");\n             }\n             break;\n@@ -401,7 +403,7 @@ public CustomerRestController(@Qualifier(ServiceConstants.LOGGER_NAME) final Log\n   )\n   public @ResponseBody ResponseEntity<List<IdentificationCard>> fetchIdentificationCards(@PathVariable(\"identifier\") final String identifier) {\n     this.throwIfCustomerNotExists(identifier);\n-    return ResponseEntity.ok(this.customerService.fetchIdentificationCardsByCustomer(identifier));\n+    return ResponseEntity.ok(this.customerService.fetchIdentificationCardsByCustomer(identifier).collect(Collectors.toList()));\n   }\n \n   @Permittable(value = AcceptedTokenType.TENANT, groupId = PermittableGroupIds.IDENTIFICATIONS)\n@@ -612,9 +614,8 @@ public CustomerRestController(@Qualifier(ServiceConstants.LOGGER_NAME) final Log\n       consumes = MediaType.ALL_VALUE\n   )\n   public ResponseEntity<byte[]> getPortrait(@PathVariable(\"identifier\") final String identifier) {\n-    this.throwIfPortraitNotExists(identifier);\n-\n-    final PortraitEntity portrait = this.customerService.findPortrait(identifier);\n+    final PortraitEntity portrait = this.customerService.findPortrait(identifier)\n+        .orElseThrow(() -> ServiceException.notFound(\"Portrait for Customer ''{0}'' not found.\", identifier));\n \n     return ResponseEntity\n             .ok()\n@@ -759,12 +760,6 @@ private void throwIfCustomerNotExists(final String identifier) {\n     }\n   }\n \n-  private void throwIfPortraitNotExists(final String identifier) {\n-    if (!this.customerService.portraitExists(identifier)) {\n-      throw ServiceException.notFound(\"Portrait for Customer {0} not found.\", identifier);\n-    }\n-  }\n-\n   private void throwIfIdentificationCardNotExists(final String number) {\n     if (!this.customerService.identificationCardExists(number)) {\n       throw ServiceException.notFound(\"Identification card {0} not found.\", number);",
                "additions": 8,
                "raw_url": "https://github.com/apache/fineract-cn-customer/raw/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/rest/controller/CustomerRestController.java",
                "status": "modified",
                "changes": 21,
                "deletions": 13,
                "sha": "d5010f5c7b30280ab1215346e20216cd26210f51",
                "blob_url": "https://github.com/apache/fineract-cn-customer/blob/5e05d4a57244184ef3b92757dc79b975cc489dad/service/src/main/java/io/mifos/customer/service/rest/controller/CustomerRestController.java",
                "filename": "service/src/main/java/io/mifos/customer/service/rest/controller/CustomerRestController.java",
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-customer/contents/service/src/main/java/io/mifos/customer/service/rest/controller/CustomerRestController.java?ref=5e05d4a57244184ef3b92757dc79b975cc489dad"
            }
        ],
        "bug_id": "fineract-cn-customer_3",
        "parent": "https://github.com/apache/fineract-cn-customer/commit/41749c5927fd9066710ad2757184b46d54b34cdc",
        "message": "TestCustomer.shouldDeletePortrait was failing intermittently with an\nInternalServerError resulting from a NullPointerException in the GET\nendpoint implementation.  The delete transaction was getting committed\nbetween the query if the portrait exits and the actually acquisition of\nthe portrait in the rest implementation.  I changed the repository to\nreturn an Optional.empty instead of a null if the identifier doesn't\ncorrespond to a customer.  This enabled me to replace two calls with one\nand eliminate the potential for a race condition.  This in turn probably\neliminated several other potential NullPointerExceptions.",
        "repo": "fineract-cn-customer"
    }
]