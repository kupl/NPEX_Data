[
    {
        "commit": "https://github.com/apache/commons-logging/commit/6b15ddfe75266526ef3fec00df317ebcdb926dd2",
        "file": [
            {
                "patch": "@@ -1,7 +1,7 @@\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//logging/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java,v 1.10 2002/06/11 22:35:33 rsitze Exp $\n- * $Revision: 1.10 $\n- * $Date: 2002/06/11 22:35:33 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//logging/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java,v 1.11 2002/06/11 22:47:21 rsitze Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2002/06/11 22:47:21 $\n  *\n  * ====================================================================\n  *\n@@ -104,7 +104,7 @@\n  *\n  * @author Rod Waldhoff\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.10 $ $Date: 2002/06/11 22:35:33 $\n+ * @version $Revision: 1.11 $ $Date: 2002/06/11 22:47:21 $\n  */\n \n public class LogFactoryImpl extends LogFactory {\n@@ -403,6 +403,10 @@ protected Constructor getLogConstructor()\n         Class logClass = null;\n         try {\n             logClass = loadClass(logClassName);\n+            if (logClass == null) {\n+                throw new LogConfigurationException\n+                    (\"No suitable Log implementation for \" + logClassName);\n+            }\n             if (!Log.class.isAssignableFrom(logClass)) {\n                 throw new LogConfigurationException\n                     (\"Class \" + logClassName + \" does not implement Log\");\n@@ -438,21 +442,29 @@ static Class loadClass( String name )\n         throws ClassNotFoundException\n     {\n         ClassLoader threadCL = getContextClassLoader();\n-        try {\n-            return threadCL.loadClass(name);\n-        } catch( ClassNotFoundException ex ) {\n-            return Class.forName( name );\n+        \n+        if (threadCL != null) {\n+            try {\n+                return threadCL.loadClass(name);\n+            } catch( ClassNotFoundException ex ) {\n+                return Class.forName( name );\n+            }\n         }\n+\n+        return null;\n     }\n \n     protected void guessConfig() {\n         if( isLog4JAvailable() ) {\n+            proxyFactory = null;\n             try {\n                 Class proxyClass=\n                     loadClass( \"org.apache.commons.logging.impl.Log4jFactory\" );\n-                proxyFactory=(LogFactory)proxyClass.newInstance();\n+                if (proxyClass != null) {\n+                    proxyFactory = (LogFactory)proxyClass.newInstance();\n+                }\n             } catch( Throwable t ) {\n-                proxyFactory=null;\n+                ; // ignore\n             }\n         }\n         // other logger specific initialization",
                "additions": 22,
                "raw_url": "https://github.com/apache/commons-logging/raw/6b15ddfe75266526ef3fec00df317ebcdb926dd2/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java",
                "status": "modified",
                "changes": 32,
                "deletions": 10,
                "sha": "2458b148ba57253c37089610982b0570369d1efc",
                "blob_url": "https://github.com/apache/commons-logging/blob/6b15ddfe75266526ef3fec00df317ebcdb926dd2/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java",
                "filename": "src/java/org/apache/commons/logging/impl/LogFactoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/commons-logging/contents/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java?ref=6b15ddfe75266526ef3fec00df317ebcdb926dd2"
            }
        ],
        "bug_id": "commons-logging_1",
        "parent": "https://github.com/apache/commons-logging/commit/2a26463d6096651dc3a013590ab992844781f93a",
        "message": "Resolve NullPointerExceptions\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/logging/trunk@138893 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-logging"
    },
    {
        "commit": "https://github.com/apache/commons-logging/commit/329f05ee4fcda216ca9c447ac60c1bde664b59bb",
        "file": [
            {
                "patch": "@@ -1,7 +1,7 @@\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//logging/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java,v 1.8 2002/06/06 22:09:09 costin Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/06/06 22:09:09 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//logging/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java,v 1.9 2002/06/11 22:34:32 rsitze Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/06/11 22:34:32 $\n  *\n  * ====================================================================\n  *\n@@ -104,7 +104,7 @@\n  *\n  * @author Rod Waldhoff\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.8 $ $Date: 2002/06/06 22:09:09 $\n+ * @version $Revision: 1.9 $ $Date: 2002/06/11 22:34:32 $\n  */\n \n public class LogFactoryImpl extends LogFactory {\n@@ -518,6 +518,4 @@ protected Log newInstance(String name)\n         }\n \n     }\n-    \n-\n-}\n+}\n\\ No newline at end of file",
                "additions": 5,
                "raw_url": "https://github.com/apache/commons-logging/raw/329f05ee4fcda216ca9c447ac60c1bde664b59bb/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java",
                "status": "modified",
                "changes": 12,
                "deletions": 7,
                "sha": "3bc2064dd143028255eb98a5494eac7af9cfb9ee",
                "blob_url": "https://github.com/apache/commons-logging/blob/329f05ee4fcda216ca9c447ac60c1bde664b59bb/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java",
                "filename": "src/java/org/apache/commons/logging/impl/LogFactoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/commons-logging/contents/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java?ref=329f05ee4fcda216ca9c447ac60c1bde664b59bb"
            }
        ],
        "bug_id": "commons-logging_2",
        "parent": "https://github.com/apache/commons-logging/commit/470f3338d0d72a4fdb1763abafced392dad93814",
        "message": "Resolve NullPointerExceptions, remove redundant checks, minor refactoring to facilitate readability.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/logging/trunk@138891 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-logging"
    },
    {
        "commit": "https://github.com/apache/commons-logging/commit/470f3338d0d72a4fdb1763abafced392dad93814",
        "file": [
            {
                "patch": "@@ -1,7 +1,7 @@\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//logging/src/java/org/apache/commons/logging/LogFactory.java,v 1.7 2002/05/04 19:50:29 sanders Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/05/04 19:50:29 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//logging/src/java/org/apache/commons/logging/LogFactory.java,v 1.8 2002/06/11 22:29:14 rsitze Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/06/11 22:29:14 $\n  *\n  * ====================================================================\n  *\n@@ -71,6 +71,7 @@\n import java.util.Enumeration;\n import java.util.Hashtable;\n import java.util.Properties;\n+import java.lang.SecurityException;\n \n \n /**\n@@ -84,7 +85,7 @@\n  *\n  * @author Craig R. McClanahan\n  * @author Costin Manolache\n- * @version $Revision: 1.7 $ $Date: 2002/05/04 19:50:29 $\n+ * @version $Revision: 1.8 $ $Date: 2002/06/11 22:29:14 $\n  */\n \n public abstract class LogFactory {\n@@ -257,22 +258,21 @@ public abstract Log getInstance(String name)\n     public static LogFactory getFactory() throws LogConfigurationException {\n \n         // Identify the class loader we will be using\n-        ClassLoader classLoader = findClassLoader();\n+        ClassLoader contextClassLoader = getContextClassLoader();\n \n         // Return any previously registered factory for this class loader\n-        LogFactory factory = (LogFactory) factories.get(classLoader);\n-        if (factory != null) {\n-            return (factory);\n-        }\n-        \n+        LogFactory factory = getCachedFactory(contextClassLoader);\n+        if (factory != null)\n+            return factory;\n+\n         // First, try the system property\n         try {\n             String factoryClass = System.getProperty(FACTORY_PROPERTY);\n             if (factoryClass != null) {\n-                factory = newFactory(factoryClass, classLoader);\n+                factory = newFactory(factoryClass, contextClassLoader);\n             }\n         } catch (SecurityException e) {\n-            ;\n+            ;  // ignore\n         }\n \n         // Second, try to find a service by using the JDK1.3 jar\n@@ -281,14 +281,11 @@ public static LogFactory getFactory() throws LogConfigurationException {\n         // CLASSPATH or equivalent ). This is similar with the second\n         // step, except that it uses the (standard?) jdk1.3 location in the jar.\n \n-        if( factory==null ) {\n+        if (factory == null) {\n             try {\n-                InputStream is=null;\n-                if (classLoader == null) {\n-                    is=ClassLoader.getSystemResourceAsStream( SERVICE_ID );\n-                } else {\n-                    is=classLoader.getResourceAsStream( SERVICE_ID );\n-                }\n+                InputStream is = (contextClassLoader == null\n+                                  ? ClassLoader.getSystemResourceAsStream( SERVICE_ID )\n+                                  : contextClassLoader.getResourceAsStream( SERVICE_ID ));\n \n                 if( is != null ) {\n                     // This code is needed by EBCDIC and other strange systems.\n@@ -306,7 +303,7 @@ public static LogFactory getFactory() throws LogConfigurationException {\n                     if (factoryClassName != null &&\n                         ! \"\".equals(factoryClassName)) {\n                         \n-                        factory= newFactory( factoryClassName, classLoader );\n+                        factory= newFactory( factoryClassName, contextClassLoader );\n                     }\n                 }\n             } catch( Exception ex ) {\n@@ -327,7 +324,7 @@ public static LogFactory getFactory() throws LogConfigurationException {\n \n         try {\n             InputStream stream =\n-                classLoader.getResourceAsStream(FACTORY_PROPERTIES);\n+                contextClassLoader.getResourceAsStream(FACTORY_PROPERTIES);\n             if (stream != null) {\n                 props = new Properties();\n                 props.load(stream);\n@@ -337,7 +334,7 @@ public static LogFactory getFactory() throws LogConfigurationException {\n                     if (factoryClass == null) {\n                         factoryClass = FACTORY_DEFAULT;\n                     }\n-                    factory = newFactory(factoryClass, classLoader);\n+                    factory = newFactory(factoryClass, contextClassLoader);\n                 }\n             }\n             // the properties will be set at the end.\n@@ -359,10 +356,7 @@ public static LogFactory getFactory() throws LogConfigurationException {\n             }\n         }\n         \n-        // Cache and return the new factory instance\n-        factories.put(classLoader, factory);\n-        return (factory);\n-\n+        return factory;\n     }\n \n \n@@ -428,51 +422,92 @@ public static void releaseAll() {\n \n \n     /**\n-     * Return the class loader to be used for loading the selected\n-     * <code>LogFactory</code> implementation class.  On a JDK 1.2 or later\n-     * system, the context class loader for the current thread will be used\n-     * if it is present.\n+     * Return the thread context class loader if available.\n+     * Otherwise return null.\n+     * \n+     * The thread context class loader is available for JDK 1.2\n+     * or later, if certain security conditions are met.\n      *\n      * @exception LogConfigurationException if a suitable class loader\n-     *  cannot be identified\n+     * cannot be identified.\n      */\n-    protected static ClassLoader findClassLoader()\n-        throws LogConfigurationException {\n+    protected static ClassLoader getContextClassLoader()\n+        throws LogConfigurationException\n+    {\n+        ClassLoader classLoader = null;\n \n-        // Are we running on a JDK 1.2 or later system?\n-        Method method = null;\n         try {\n-            method = Thread.class.getMethod(\"getContextClassLoader\", null);\n-        } catch (NoSuchMethodException e) {\n-            // Assume we are running on JDK 1.1\n-            return (LogFactory.class.getClassLoader());\n-        }\n+            // Are we running on a JDK 1.2 or later system?\n+            Method method = Thread.class.getMethod(\"getContextClassLoader\", null);\n \n-        // Get the thread context class loader (if there is one)\n-        ClassLoader classLoader = null;\n-        try {\n-            classLoader = (ClassLoader)\n-                method.invoke(Thread.currentThread(), null);\n-            if (classLoader == null) {\n-                classLoader = LogFactory.class.getClassLoader();\n+            // Get the thread context class loader (if there is one)\n+            try {\n+                classLoader = (ClassLoader)method.invoke(Thread.currentThread(), null);\n+            } catch (IllegalAccessException e) {\n+                throw new LogConfigurationException\n+                    (\"Unexpected IllegalAccessException\", e);\n+            } catch (InvocationTargetException e) {\n+                /**\n+                 * InvocationTargetException is thrown by 'invoke' when\n+                 * the method being invoked (getContextClassLoader) throws\n+                 * an exception.\n+                 * \n+                 * getContextClassLoader() throws SecurityException when\n+                 * the context class loader isn't an ancestor of the\n+                 * calling class's class loader, or if security\n+                 * permissions are restricted.\n+                 * \n+                 * In the first case (not related), we want to ignore and\n+                 * keep going.  We cannot help but also ignore the second\n+                 * with the logic below, but other calls elsewhere (to\n+                 * obtain a class loader) will trigger this exception where\n+                 * we can make a distinction.\n+                 */\n+                if (e.getTargetException() instanceof SecurityException) {\n+                    ;  // ignore\n+                } else {\n+                    // Capture 'e.getTargetException()' exception for details\n+                    // alternate: log 'e.getTargetException()', and pass back 'e'.\n+                    throw new LogConfigurationException\n+                        (\"Unexpected InvocationTargetException\", e.getTargetException());\n+                }\n             }\n-        } catch (IllegalAccessException e) {\n-            throw new LogConfigurationException\n-                (\"Unexpected IllegalAccessException\", e);\n-        } catch (InvocationTargetException e) {\n-            throw new LogConfigurationException\n-                (\"Unexpected InvocationTargetException\", e);\n+        } catch (NoSuchMethodException e) {\n+            // Assume we are running on JDK 1.1\n+            classLoader = LogFactory.class.getClassLoader();\n         }\n \n         // Return the selected class loader\n-        return (classLoader);\n-\n+        return classLoader;\n     }\n \n+    /**\n+     * Check cached factories (keyed by classLoader)\n+     */\n+    private static LogFactory getCachedFactory(ClassLoader contextClassLoader)\n+    {\n+        LogFactory factory = null;\n+        \n+        if (contextClassLoader != null)\n+            factory = (LogFactory) factories.get(contextClassLoader);\n+            \n+        if (factory==null)\n+            factory = (LogFactory) factories.get(LogFactory.class.getClassLoader());\n+        \n+        return factory;\n+    }\n+    \n+    private static void cacheFactory(ClassLoader classLoader, LogFactory factory)\n+    {\n+        if (classLoader != null && factory != null)\n+            factories.put(classLoader, factory);\n+    }\n \n     /**\n      * Return a new instance of the specified <code>LogFactory</code>\n      * implementation class, loaded by the specified class loader.\n+     * If that fails, try the class loader used to load this\n+     * (abstract) LogFactory.\n      *\n      * @param factoryClass Fully qualified name of the <code>LogFactory</code>\n      *  implementation class\n@@ -487,24 +522,32 @@ protected static LogFactory newFactory(String factoryClass,\n     {\n         \n         try {\n+            if (classLoader == null)\n+                classLoader = LogFactory.class.getClassLoader();\n+\n             Class clazz = null;\n-            if (classLoader == null) {\n-                clazz = Class.forName(factoryClass);\n-            } else {\n-                try {\n-                    // first the thread class loader\n+            try {\n+                // first the thread class loader\n+                clazz = classLoader.loadClass(factoryClass);\n+            } catch (ClassNotFoundException ex) {\n+                // if this failed (i.e. no implementation is\n+                // found in the webapp), try the caller's loader\n+                // if we haven't already...\n+                if (classLoader != LogFactory.class.getClassLoader()) {\n+                    classLoader = LogFactory.class.getClassLoader();\n                     clazz = classLoader.loadClass(factoryClass);\n-                } catch( ClassNotFoundException ex ) {\n-                    // if this failed ( i.e. no implementation is\n-                    // found in the webapp itself ) try the\n-                    // caller's loader \n-                    clazz = Class.forName( factoryClass );\n                 }\n             }\n-            return ((LogFactory) clazz.newInstance());\n+            \n+            LogFactory factory = (LogFactory)clazz.newInstance();\n+            \n+            // Cache using correct classLoader\n+            cacheFactory(classLoader, factory);\n+            \n+            return factory;\n         } catch (Exception e) {\n             throw new LogConfigurationException(e);\n         }\n \n     }\n-}\n+}\n\\ No newline at end of file",
                "additions": 110,
                "raw_url": "https://github.com/apache/commons-logging/raw/470f3338d0d72a4fdb1763abafced392dad93814/src/java/org/apache/commons/logging/LogFactory.java",
                "status": "modified",
                "changes": 177,
                "deletions": 67,
                "sha": "917964754bebc8ab5c360ab02f946996f036d5dc",
                "blob_url": "https://github.com/apache/commons-logging/blob/470f3338d0d72a4fdb1763abafced392dad93814/src/java/org/apache/commons/logging/LogFactory.java",
                "filename": "src/java/org/apache/commons/logging/LogFactory.java",
                "contents_url": "https://api.github.com/repos/apache/commons-logging/contents/src/java/org/apache/commons/logging/LogFactory.java?ref=470f3338d0d72a4fdb1763abafced392dad93814"
            }
        ],
        "bug_id": "commons-logging_3",
        "parent": "https://github.com/apache/commons-logging/commit/83e704b9102cabd92c3b13c16870052bccbfdc1a",
        "message": "Resolve NullPointerExceptions, remove redundant checks, minor refactoring to facilitate readability.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/logging/trunk@138890 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-logging"
    },
    {
        "commit": "https://github.com/apache/commons-logging/commit/850fbd475bc02faba5581bf1105e42e7f5a2510c",
        "file": [
            {
                "patch": "@@ -19,6 +19,7 @@\n \n TODO - rework notes to incorporate: Changes since 1.1.1\n LOGGING-130 - Potential missing privileged block for class loader\n+LOGGING-145 - LogFactoryImpl.setAttribute - possible NPE\n \n $Id$\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/commons-logging/raw/850fbd475bc02faba5581bf1105e42e7f5a2510c/RELEASE-NOTES.txt",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "490914b193d8f669bcadd8de249643e93554b8bc",
                "blob_url": "https://github.com/apache/commons-logging/blob/850fbd475bc02faba5581bf1105e42e7f5a2510c/RELEASE-NOTES.txt",
                "filename": "RELEASE-NOTES.txt",
                "contents_url": "https://api.github.com/repos/apache/commons-logging/contents/RELEASE-NOTES.txt?ref=850fbd475bc02faba5581bf1105e42e7f5a2510c"
            },
            {
                "patch": "@@ -406,7 +406,7 @@ public void setAttribute(String name, Object value) {\n         }\n         \n         if (name.equals(TCCL_KEY)) {\n-            useTCCL = Boolean.valueOf(value.toString()).booleanValue();\n+            useTCCL = value != null && Boolean.valueOf(value.toString()).booleanValue();\n         }\n \n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/commons-logging/raw/850fbd475bc02faba5581bf1105e42e7f5a2510c/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "ea891cb1464a33756c06f5129d83bf1ac630c78f",
                "blob_url": "https://github.com/apache/commons-logging/blob/850fbd475bc02faba5581bf1105e42e7f5a2510c/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java",
                "filename": "src/java/org/apache/commons/logging/impl/LogFactoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/commons-logging/contents/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java?ref=850fbd475bc02faba5581bf1105e42e7f5a2510c"
            }
        ],
        "bug_id": "commons-logging_4",
        "parent": "https://github.com/apache/commons-logging/commit/e2adf3571accedc9d2e5082cc7c576211c45a471",
        "message": "LOGGING-145 - LogFactoryImpl.setAttribute - possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/logging/trunk@1362996 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-logging"
    },
    {
        "commit": "https://github.com/apache/commons-logging/commit/52ba50f028a60c48705fa9027d3db64aacbc99f5",
        "file": [
            {
                "patch": "@@ -1,7 +1,7 @@\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//logging/src/java/org/apache/commons/logging/impl/Jdk14Logger.java,v 1.3 2002/05/06 21:32:37 costin Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/05/06 21:32:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//logging/src/java/org/apache/commons/logging/impl/Jdk14Logger.java,v 1.4 2002/07/17 16:42:40 rsitze Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/07/17 16:42:40 $\n  *\n  * ====================================================================\n  *\n@@ -77,7 +77,7 @@\n  * @author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\n  * @author <a href=\"mailto:bloritsch@apache.org\">Berin Loritsch</a>\n  * @author <a href=\"mailto:donaldp@apache.org\">Peter Donald</a>\n- * @version $Revision: 1.3 $ $Date: 2002/05/06 21:32:37 $\n+ * @version $Revision: 1.4 $ $Date: 2002/07/17 16:42:40 $\n  */\n \n public final class Jdk14Logger implements Log {\n@@ -133,189 +133,151 @@ private void log( Level level, String msg, Throwable ex ) {\n      * Log a message with debug log level.\n      */\n     public void debug(Object message) {\n-\n-        log(Level.FINE, message.toString(), null);\n-\n+        log(Level.FINE, String.valueOf(message), null);\n     }\n \n \n     /**\n      * Log a message and exception with debug log level.\n      */\n     public void debug(Object message, Throwable exception) {\n-\n-        log(Level.FINE, message.toString(), exception);\n-\n+        log(Level.FINE, String.valueOf(message), exception);\n     }\n \n \n     /**\n      * Log a message with error log level.\n      */\n     public void error(Object message) {\n-\n-        log(Level.SEVERE, message.toString(), null);\n-\n+        log(Level.SEVERE, String.valueOf(message), null);\n     }\n \n \n     /**\n      * Log a message and exception with error log level.\n      */\n     public void error(Object message, Throwable exception) {\n-\n-        log(Level.SEVERE, message.toString(), exception);\n-\n+        log(Level.SEVERE, String.valueOf(message), exception);\n     }\n \n \n     /**\n      * Log a message with fatal log level.\n      */\n     public void fatal(Object message) {\n-\n-        log(Level.SEVERE, message.toString(), null);\n-\n+        log(Level.SEVERE, String.valueOf(message), null);\n     }\n \n \n     /**\n      * Log a message and exception with fatal log level.\n      */\n     public void fatal(Object message, Throwable exception) {\n-\n-        log(Level.SEVERE, message.toString(), exception);\n-\n+        log(Level.SEVERE, String.valueOf(message), exception);\n     }\n \n \n     /**\n      * Return the native Logger instance we are using.\n      */\n     public Logger getLogger() {\n-\n         return (this.logger);\n-\n     }\n \n \n     /**\n      * Log a message with info log level.\n      */\n     public void info(Object message) {\n-\n-        log(Level.INFO, message.toString(), null);\n-\n+        log(Level.INFO, String.valueOf(message), null);\n     }\n \n \n     /**\n      * Log a message and exception with info log level.\n      */\n     public void info(Object message, Throwable exception) {\n-\n-        log(Level.INFO, message.toString(), exception);\n-\n+        log(Level.INFO, String.valueOf(message), exception);\n     }\n \n \n     /**\n      * Is debug logging currently enabled?\n      */\n     public boolean isDebugEnabled() {\n-\n         return (logger.isLoggable(Level.FINE));\n-\n     }\n \n \n     /**\n      * Is error logging currently enabled?\n      */\n     public boolean isErrorEnabled() {\n-\n         return (logger.isLoggable(Level.SEVERE));\n-\n     }\n \n \n     /**\n      * Is fatal logging currently enabled?\n      */\n     public boolean isFatalEnabled() {\n-\n         return (logger.isLoggable(Level.SEVERE));\n-\n     }\n \n \n     /**\n      * Is info logging currently enabled?\n      */\n     public boolean isInfoEnabled() {\n-\n         return (logger.isLoggable(Level.INFO));\n-\n     }\n \n \n     /**\n      * Is tace logging currently enabled?\n      */\n     public boolean isTraceEnabled() {\n-\n         return (logger.isLoggable(Level.FINEST));\n-\n     }\n \n \n     /**\n      * Is warning logging currently enabled?\n      */\n     public boolean isWarnEnabled() {\n-\n         return (logger.isLoggable(Level.WARNING));\n-\n     }\n \n \n     /**\n      * Log a message with trace log level.\n      */\n     public void trace(Object message) {\n-\n-        log(Level.FINEST, message.toString(), null);\n-\n+        log(Level.FINEST, String.valueOf(message), null);\n     }\n \n \n     /**\n      * Log a message and exception with trace log level.\n      */\n     public void trace(Object message, Throwable exception) {\n-\n-        log(Level.FINEST, message.toString(), exception);\n-\n+        log(Level.FINEST, String.valueOf(message), exception);\n     }\n \n \n     /**\n      * Log a message with warn log level.\n      */\n     public void warn(Object message) {\n-\n-        log(Level.WARNING, message.toString(), null);\n-\n+        log(Level.WARNING, String.valueOf(message), null);\n     }\n \n \n     /**\n      * Log a message and exception with warn log level.\n      */\n     public void warn(Object message, Throwable exception) {\n-\n-        log(Level.WARNING, message.toString(), exception);\n-\n+        log(Level.WARNING, String.valueOf(message), exception);\n     }\n \n ",
                "additions": 16,
                "raw_url": "https://github.com/apache/commons-logging/raw/52ba50f028a60c48705fa9027d3db64aacbc99f5/src/java/org/apache/commons/logging/impl/Jdk14Logger.java",
                "status": "modified",
                "changes": 70,
                "deletions": 54,
                "sha": "1b835986fc03e793a87860e53f0637a9c35e5acf",
                "blob_url": "https://github.com/apache/commons-logging/blob/52ba50f028a60c48705fa9027d3db64aacbc99f5/src/java/org/apache/commons/logging/impl/Jdk14Logger.java",
                "filename": "src/java/org/apache/commons/logging/impl/Jdk14Logger.java",
                "contents_url": "https://api.github.com/repos/apache/commons-logging/contents/src/java/org/apache/commons/logging/impl/Jdk14Logger.java?ref=52ba50f028a60c48705fa9027d3db64aacbc99f5"
            },
            {
                "patch": "@@ -1,7 +1,7 @@\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//logging/src/java/org/apache/commons/logging/impl/LogKitLogger.java,v 1.1 2002/02/03 01:31:29 sanders Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/02/03 01:31:29 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//logging/src/java/org/apache/commons/logging/impl/LogKitLogger.java,v 1.2 2002/07/17 16:42:40 rsitze Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/07/17 16:42:40 $\n  *\n  * ====================================================================\n  *\n@@ -77,7 +77,7 @@\n  *\n  * @author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\n  * @author Robert Burrell Donkin                                 *\n- * @version $Id: LogKitLogger.java,v 1.1 2002/02/03 01:31:29 sanders Exp $\n+ * @version $Id: LogKitLogger.java,v 1.2 2002/07/17 16:42:40 rsitze Exp $\n  */\n \n public final class LogKitLogger implements Log {\n@@ -128,7 +128,7 @@ public void trace(Object message, Throwable t) {\n      */\n     public void debug(Object message) {\n         if (message != null) {\n-            logger.debug(message.toString());\n+            logger.debug(String.valueOf(message));\n         }\n     }\n \n@@ -138,7 +138,7 @@ public void debug(Object message) {\n      */\n     public void debug(Object message, Throwable t) {\n         if (message != null) {\n-            logger.debug(message.toString(), t);\n+            logger.debug(String.valueOf(message), t);\n         }\n     }\n \n@@ -148,7 +148,7 @@ public void debug(Object message, Throwable t) {\n      */\n     public void info(Object message) {\n         if (message != null) {\n-            logger.info(message.toString());\n+            logger.info(String.valueOf(message));\n         }\n     }\n \n@@ -158,7 +158,7 @@ public void info(Object message) {\n      */\n     public void info(Object message, Throwable t) {\n         if (message != null) {\n-            logger.info(message.toString(), t);\n+            logger.info(String.valueOf(message), t);\n         }\n     }\n \n@@ -168,7 +168,7 @@ public void info(Object message, Throwable t) {\n      */\n     public void warn(Object message) {\n         if (message != null) {\n-            logger.warn(message.toString());\n+            logger.warn(String.valueOf(message));\n         }\n     }\n \n@@ -178,7 +178,7 @@ public void warn(Object message) {\n      */\n     public void warn(Object message, Throwable t) {\n         if (message != null) {\n-            logger.warn(message.toString(), t);\n+            logger.warn(String.valueOf(message), t);\n         }\n     }\n \n@@ -188,7 +188,7 @@ public void warn(Object message, Throwable t) {\n      */\n     public void error(Object message) {\n         if (message != null) {\n-            logger.error(message.toString());\n+            logger.error(String.valueOf(message));\n         }\n     }\n \n@@ -198,7 +198,7 @@ public void error(Object message) {\n      */\n     public void error(Object message, Throwable t) {\n         if (message != null) {\n-            logger.error(message.toString(), t);\n+            logger.error(String.valueOf(message), t);\n         }\n     }\n \n@@ -208,7 +208,7 @@ public void error(Object message, Throwable t) {\n      */\n     public void fatal(Object message) {\n         if (message != null) {\n-            logger.fatalError(message.toString());\n+            logger.fatalError(String.valueOf(message));\n         }\n     }\n \n@@ -218,7 +218,7 @@ public void fatal(Object message) {\n      */\n     public void fatal(Object message, Throwable t) {\n         if (message != null) {\n-            logger.fatalError(message.toString(), t);\n+            logger.fatalError(String.valueOf(message), t);\n         }\n     }\n ",
                "additions": 14,
                "raw_url": "https://github.com/apache/commons-logging/raw/52ba50f028a60c48705fa9027d3db64aacbc99f5/src/java/org/apache/commons/logging/impl/LogKitLogger.java",
                "status": "modified",
                "changes": 28,
                "deletions": 14,
                "sha": "fb978bd3df5577d37408216c967db26fd41e2437",
                "blob_url": "https://github.com/apache/commons-logging/blob/52ba50f028a60c48705fa9027d3db64aacbc99f5/src/java/org/apache/commons/logging/impl/LogKitLogger.java",
                "filename": "src/java/org/apache/commons/logging/impl/LogKitLogger.java",
                "contents_url": "https://api.github.com/repos/apache/commons-logging/contents/src/java/org/apache/commons/logging/impl/LogKitLogger.java?ref=52ba50f028a60c48705fa9027d3db64aacbc99f5"
            }
        ],
        "bug_id": "commons-logging_5",
        "parent": "https://github.com/apache/commons-logging/commit/d3b8b85e48e9f6744e038d8c0f38a2a54c995399",
        "message": "bug 10480: handle null message without throwing NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/logging/trunk@138897 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-logging"
    },
    {
        "commit": "https://github.com/apache/commons-logging/commit/256ada0e80958796017e98339724c718482b5a6f",
        "file": [
            {
                "patch": "@@ -109,9 +109,14 @@ public Log4JLogger(String name) {\n         this.logger = getLogger();\n     }\n \n-    /** For use with a log4j factory.\n+    /** \n+     * For use with a log4j factory.\n      */\n     public Log4JLogger(Logger logger ) {\n+        if (logger == null) {\n+            throw new IllegalArgumentException(\n+                \"Warning - null logger in constructor; possible log4j misconfiguration.\");\n+        }\n         this.name = logger.getName();\n         this.logger=logger;\n     }",
                "additions": 6,
                "raw_url": "https://github.com/apache/commons-logging/raw/256ada0e80958796017e98339724c718482b5a6f/src/java/org/apache/commons/logging/impl/Log4JLogger.java",
                "status": "modified",
                "changes": 7,
                "deletions": 1,
                "sha": "b5f18b56106c9933966da2fa8c7be9137c5a9003",
                "blob_url": "https://github.com/apache/commons-logging/blob/256ada0e80958796017e98339724c718482b5a6f/src/java/org/apache/commons/logging/impl/Log4JLogger.java",
                "filename": "src/java/org/apache/commons/logging/impl/Log4JLogger.java",
                "contents_url": "https://api.github.com/repos/apache/commons-logging/contents/src/java/org/apache/commons/logging/impl/Log4JLogger.java?ref=256ada0e80958796017e98339724c718482b5a6f"
            }
        ],
        "bug_id": "commons-logging_6",
        "parent": "https://github.com/apache/commons-logging/commit/342bbe7a7a67a2faecd2c6d05e1985b24fb3f049",
        "message": "Handle null log4j logger param to constructor better than just causing NullPointerException.\nThanks to Lilianne E. Blaze for the patch; see jira LOGGING-111.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/logging/trunk@476774 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-logging"
    },
    {
        "commit": "https://github.com/apache/commons-logging/commit/7539845c43fbfc08e001824f69001cef1556348f",
        "file": [
            {
                "patch": "@@ -3,7 +3,7 @@\n \n <!--\n         \"Logging\" component of the Jakarta Commons Subproject\n-        $Id: build.xml,v 1.36 2003/05/07 16:02:20 rdonkin Exp $\n+        $Id: build.xml,v 1.37 2003/05/14 11:12:58 rdonkin Exp $\n -->\n \n \n@@ -264,6 +264,39 @@\n     </jar>\n   </target>\n \n+  <target name='compile.jdk1.4.tests' if='jdk.1.4.present'>\n+    <javac  srcdir=\"${test.home}\"\n+           destdir=\"${build.home}/tests\"\n+             debug=\"${compile.debug}\"\n+       deprecation=\"${compile.deprecation}\"\n+          optimize=\"${compile.optimize}\">\n+      <classpath refid=\"test.classpath\"/>\n+        <include name='**/jdk14/**'/>\n+    </javac>\n+  </target>\n+\n+  <target name='compile.log4j.tests' if='log4j.present'>\n+    <javac  srcdir=\"${test.home}\"\n+           destdir=\"${build.home}/tests\"\n+             debug=\"${compile.debug}\"\n+       deprecation=\"${compile.deprecation}\"\n+          optimize=\"${compile.optimize}\">\n+      <classpath refid=\"test.classpath\"/>\n+        <include name='**/log4j/**'/>\n+    </javac>\n+  </target>\n+\n+\n+  <target name='compile.avalon.tests' if='avalon-framework.present'>\n+    <javac  srcdir=\"${test.home}\"\n+           destdir=\"${build.home}/tests\"\n+             debug=\"${compile.debug}\"\n+       deprecation=\"${compile.deprecation}\"\n+          optimize=\"${compile.optimize}\">\n+      <classpath refid=\"test.classpath\"/>\n+        <include name='**/avalon/**'/>\n+    </javac>\n+  </target>\n \n   <target name=\"compile.tests\" depends=\"compile\"\n    description=\"Compile unit test cases\">\n@@ -273,7 +306,13 @@\n        deprecation=\"${compile.deprecation}\"\n           optimize=\"${compile.optimize}\">\n       <classpath refid=\"test.classpath\"/>\n+      <exclude name='**/jdk14/**'/>\n+      <exclude name='**/log4j/**'/>\n+      <exclude name='**/avalon/**'/>\n     </javac>\n+    <antcall target='compile.log4j.tests'/>\n+    <antcall target='compile.jdk1.4.tests'/>\n+    <antcall target='compile.avalon.tests'/>\n     <copy    todir=\"${build.home}/tests\" filtering=\"on\">\n       <fileset dir=\"${test.home}\" excludes=\"**/*.java\"/>\n     </copy>\n@@ -355,7 +394,7 @@\n <!-- ========== Unit Test Targets ========================================= -->\n \n \n-  <target name=\"test\"  depends=\"compile.tests,test.jdk14,test.log4j\n+  <target name=\"test\"  depends=\"compile.tests,test.jdk14,test.log4j,test.avalon\n           \" if=\"test.entry\"\n    description=\"Run all unit test cases\">\n       <java classname=\"${test.runner}\" fork=\"yes\" failonerror=\"${test.failonerror}\">\n@@ -605,5 +644,14 @@\n \n   </target>\n \n+  <target name=\"test.avalon\" depends=\"compile.tests\" if=\"avalon-framework.present\"\n+   description=\"Run unit tests specific to Avalon (Framework) logging\">\n+\n+    <echo message=\"Avalon Tests\"/>\n+    <java classname=\"${test.runner}\" fork=\"yes\" failonerror=\"${test.failonerror}\">\n+      <arg value=\"org.apache.commons.logging.avalon.AvalonLoggerTest\"/>\n+      <classpath refid=\"test.classpath\"/>\n+    </java>\n+  </target>\n \n </project>",
                "additions": 50,
                "raw_url": "https://github.com/apache/commons-logging/raw/7539845c43fbfc08e001824f69001cef1556348f/build.xml",
                "status": "modified",
                "changes": 52,
                "deletions": 2,
                "sha": "409c3c92cb5418607967ce2c10ded5236f3be95b",
                "blob_url": "https://github.com/apache/commons-logging/blob/7539845c43fbfc08e001824f69001cef1556348f/build.xml",
                "filename": "build.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-logging/contents/build.xml?ref=7539845c43fbfc08e001824f69001cef1556348f"
            },
            {
                "patch": "@@ -1,7 +1,7 @@\n /*\n- * /home/cvs/jakarta-commons-sandbox/jelly/jelly-tags/avalon/src/java/org/apache/commons/jelly/avalon/JellyService.java,v 1.1 2003/01/22 09:19:30 jstrachan Exp\n- * 1.1\n- * 2003/01/22 09:19:30\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//logging/src/java/org/apache/commons/logging/impl/AvalonLogger.java,v 1.2 2003/05/14 11:12:58 rdonkin Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2003/05/14 11:12:58 $\n  *\n  * ====================================================================\n  *\n@@ -57,7 +57,6 @@\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  *\n- * JellyServiceImpl.java,v 1.1 2003/01/22 09:19:30 jstrachan Exp\n  */\n \n package org.apache.commons.logging.impl;\n@@ -70,6 +69,7 @@\n  * logging calls to Avalon logging abstraction: the Logger interface.\n  * \n  * @author <a href=\"mailto:neeme@apache.org\">Neeme Praks</a>\n+ * @version $Revision: 1.2 $ $Date: 2003/05/14 11:12:58 $\n  */\n public class AvalonLogger implements Log {\n \n@@ -87,6 +87,8 @@ public AvalonLogger(Logger logger) {\n      * @param logger the avalon logger implementation to delegate to \n      */\n     public AvalonLogger(String name) {\n+        if (defaultLogger == null) \n+            throw new NullPointerException(\"default logger has to be specified if this constructor is used!\");\n         this.logger = defaultLogger.getChildLogger(name);\n     }\n \n@@ -108,56 +110,56 @@ public static void setDefaultLogger(Logger logger) {\n      * @see org.apache.commons.logging.Log#debug(java.lang.Object, java.lang.Throwable)\n      */\n     public void debug(Object o, Throwable t) {\n-        if (this.logger.isDebugEnabled()) this.logger.debug(o.toString(), t);\n+        if (this.logger.isDebugEnabled()) this.logger.debug(String.valueOf(o), t);\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#debug(java.lang.Object)\n      */\n     public void debug(Object o) {\n-        if (this.logger.isDebugEnabled()) this.logger.debug(o.toString());\n+        if (this.logger.isDebugEnabled()) this.logger.debug(String.valueOf(o));\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#error(java.lang.Object, java.lang.Throwable)\n      */\n     public void error(Object o, Throwable t) {\n-        if (this.logger.isErrorEnabled()) this.logger.error(o.toString(), t);\n+        if (this.logger.isErrorEnabled()) this.logger.error(String.valueOf(o), t);\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#error(java.lang.Object)\n      */\n     public void error(Object o) {\n-        if (this.logger.isErrorEnabled()) this.logger.error(o.toString());\n+        if (this.logger.isErrorEnabled()) this.logger.error(String.valueOf(o));\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#fatal(java.lang.Object, java.lang.Throwable)\n      */\n     public void fatal(Object o, Throwable t) {\n-        if (this.logger.isFatalErrorEnabled()) this.logger.fatalError(o.toString(), t);\n+        if (this.logger.isFatalErrorEnabled()) this.logger.fatalError(String.valueOf(o), t);\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#fatal(java.lang.Object)\n      */\n     public void fatal(Object o) {\n-        if (this.logger.isFatalErrorEnabled()) this.logger.fatalError(o.toString());\n+        if (this.logger.isFatalErrorEnabled()) this.logger.fatalError(String.valueOf(o));\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#info(java.lang.Object, java.lang.Throwable)\n      */\n     public void info(Object o, Throwable t) {\n-        if (this.logger.isInfoEnabled()) this.logger.info(o.toString(), t);\n+        if (this.logger.isInfoEnabled()) this.logger.info(String.valueOf(o), t);\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#info(java.lang.Object)\n      */\n     public void info(Object o) {\n-        if (this.logger.isInfoEnabled()) this.logger.info(o.toString());\n+        if (this.logger.isInfoEnabled()) this.logger.info(String.valueOf(o));\n     }\n \n     /**\n@@ -206,28 +208,28 @@ public boolean isWarnEnabled() {\n      * @see org.apache.commons.logging.Log#trace(java.lang.Object, java.lang.Throwable)\n      */\n     public void trace(Object o, Throwable t) {\n-        if (this.logger.isDebugEnabled()) this.logger.debug(o.toString(), t);\n+        if (this.logger.isDebugEnabled()) this.logger.debug(String.valueOf(o), t);\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#trace(java.lang.Object)\n      */\n     public void trace(Object o) {\n-        if (this.logger.isDebugEnabled()) this.logger.debug(o.toString());\n+        if (this.logger.isDebugEnabled()) this.logger.debug(String.valueOf(o));\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#warn(java.lang.Object, java.lang.Throwable)\n      */\n     public void warn(Object o, Throwable t) {\n-        if (this.logger.isWarnEnabled()) this.logger.warn(o.toString(), t);\n+        if (this.logger.isWarnEnabled()) this.logger.warn(String.valueOf(o), t);\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#warn(java.lang.Object)\n      */\n     public void warn(Object o) {\n-        if (this.logger.isWarnEnabled()) this.logger.warn(o.toString());\n+        if (this.logger.isWarnEnabled()) this.logger.warn(String.valueOf(o));\n     }\n \n }",
                "additions": 18,
                "raw_url": "https://github.com/apache/commons-logging/raw/7539845c43fbfc08e001824f69001cef1556348f/src/java/org/apache/commons/logging/impl/AvalonLogger.java",
                "status": "modified",
                "changes": 34,
                "deletions": 16,
                "sha": "465c24dfad9b98d0dee96fce737259863e7ed6b0",
                "blob_url": "https://github.com/apache/commons-logging/blob/7539845c43fbfc08e001824f69001cef1556348f/src/java/org/apache/commons/logging/impl/AvalonLogger.java",
                "filename": "src/java/org/apache/commons/logging/impl/AvalonLogger.java",
                "contents_url": "https://api.github.com/repos/apache/commons-logging/contents/src/java/org/apache/commons/logging/impl/AvalonLogger.java?ref=7539845c43fbfc08e001824f69001cef1556348f"
            },
            {
                "patch": "@@ -0,0 +1,96 @@\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//logging/src/test/org/apache/commons/logging/avalon/AvalonLoggerTest.java,v 1.1 2003/05/14 11:14:24 rdonkin Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/05/14 11:14:24 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.logging.avalon;\n+\n+import org.apache.avalon.framework.logger.ConsoleLogger;\n+import org.apache.commons.logging.impl.AvalonLogger;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.AbstractLogTest;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @author <a href=\"mailto:neeme@apache.org\">Neeme Praks</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/05/14 11:14:24 $\n+ */\n+public class AvalonLoggerTest extends AbstractLogTest {\n+\n+    public static void main(String[] args) {\n+        String[] testCaseName = { AvalonLoggerTest.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\t\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.addTestSuite(AvalonLoggerTest.class);\n+        return suite;\n+    }\n+\n+    public AvalonLoggerTest(String testName) {\n+\t\tsuper(testName);\n+\t}\n+\n+    public Log getLogObject() {\n+        Log log = new AvalonLogger(new ConsoleLogger());\n+\t\treturn log;\n+\t}\n+}\n\\ No newline at end of file",
                "additions": 96,
                "raw_url": "https://github.com/apache/commons-logging/raw/7539845c43fbfc08e001824f69001cef1556348f/src/test/org/apache/commons/logging/avalon/AvalonLoggerTest.java",
                "status": "added",
                "changes": 96,
                "deletions": 0,
                "sha": "cfdb969567bf8f4b7166261f30d1079ae2895351",
                "blob_url": "https://github.com/apache/commons-logging/blob/7539845c43fbfc08e001824f69001cef1556348f/src/test/org/apache/commons/logging/avalon/AvalonLoggerTest.java",
                "filename": "src/test/org/apache/commons/logging/avalon/AvalonLoggerTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-logging/contents/src/test/org/apache/commons/logging/avalon/AvalonLoggerTest.java?ref=7539845c43fbfc08e001824f69001cef1556348f"
            }
        ],
        "bug_id": "commons-logging_7",
        "parent": "https://github.com/apache/commons-logging/commit/b1f47cf55f4c85659d824d6853754235141ee6e1",
        "message": "Made implementation of AvalonLogger more robust (avoiding NPEs when nulls are passed in) together with a testcase. Improved build by compiling tests for only those optional components whose dependencies are present. Submitted by Neeme Praks.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/logging/trunk@138983 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-logging"
    }
]