{
    "shindig_021047b": {
        "bug_id": "shindig_021047b",
        "commit": "https://github.com/apache/shindig/commit/021047b4ee5a2efd3f877009e76192444748e0fa",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/shindig/blob/021047b4ee5a2efd3f877009e76192444748e0fa/java/common/src/main/java/org/apache/shindig/expressions/OpensocialFunctions.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/main/java/org/apache/shindig/expressions/OpensocialFunctions.java?ref=021047b4ee5a2efd3f877009e76192444748e0fa",
                "deletions": 0,
                "filename": "java/common/src/main/java/org/apache/shindig/expressions/OpensocialFunctions.java",
                "patch": "@@ -61,6 +61,10 @@ public static Object parseJson(String text) {\n    */\n   @Functions.Expose(prefix = \"osx\", names = {\"decodeBase64\"})\n   public static String decodeBase64(String text) {\n+    if (text == null) {\n+      return null;\n+    }\n+    \n     try {\n       // TODO: allow a charset to be passed in?\n       return new String(Base64.decodeBase64(text.getBytes(\"UTF-8\")),\n@@ -76,6 +80,10 @@ public static String decodeBase64(String text) {\n    */\n   @Functions.Expose(prefix = \"osx\", names = {\"urlEncode\"})\n   public static String formEncode(String text) {\n+    if (text == null) {\n+      return null;\n+    }\n+    \n     return Utf8UrlCoder.encode(text);\n   }\n \n@@ -86,6 +94,10 @@ public static String formEncode(String text) {\n    */\n   @Functions.Expose(prefix = \"osx\", names = {\"urlDecode\"})\n   public static String formDecode(String text) {\n+    if (text == null) {\n+      return null;\n+    }\n+    \n     return Utf8UrlCoder.decode(text);\n   }\n }",
                "raw_url": "https://github.com/apache/shindig/raw/021047b4ee5a2efd3f877009e76192444748e0fa/java/common/src/main/java/org/apache/shindig/expressions/OpensocialFunctions.java",
                "sha": "b72d63479b3bb8fcc32099fcc6656a3ce59d7f57",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/shindig/blob/021047b4ee5a2efd3f877009e76192444748e0fa/java/common/src/test/java/org/apache/shindig/expressions/OpensocialFunctionsTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/test/java/org/apache/shindig/expressions/OpensocialFunctionsTest.java?ref=021047b4ee5a2efd3f877009e76192444748e0fa",
                "deletions": 0,
                "filename": "java/common/src/test/java/org/apache/shindig/expressions/OpensocialFunctionsTest.java",
                "patch": "@@ -79,4 +79,28 @@ public void testUrlDecode() throws Exception {\n       expressions.parse(\"${osx:urlDecode(encoded)}\", String.class);\n     assertEquals(\"He He\", testUrlDecode.getValue(context));\n   }\n+\n+  public void testParseJsonNull() throws Exception {\n+    ValueExpression testUrlEncode =\n+      expressions.parse(\"${osx:parseJson(null)}\", String.class);\n+    assertEquals(\"\", testUrlEncode.getValue(context));\n+  }\n+\n+  public void testDecodeBase64Null() throws Exception {\n+    ValueExpression testUrlEncode =\n+      expressions.parse(\"${osx:decodeBase64(null)}\", String.class);\n+    assertEquals(\"\", testUrlEncode.getValue(context));\n+  }\n+\n+  public void testUrlEncodeNull() throws Exception {\n+    ValueExpression testUrlEncode =\n+      expressions.parse(\"${osx:urlEncode(null)}\", String.class);\n+    assertEquals(\"\", testUrlEncode.getValue(context));\n+  }\n+\n+  public void testUrlDecodeNull() throws Exception {\n+    ValueExpression testUrlDecode =\n+      expressions.parse(\"${osx:urlDecode(null)}\", String.class);\n+    assertEquals(\"\", testUrlDecode.getValue(context));\n+  }\n }",
                "raw_url": "https://github.com/apache/shindig/raw/021047b4ee5a2efd3f877009e76192444748e0fa/java/common/src/test/java/org/apache/shindig/expressions/OpensocialFunctionsTest.java",
                "sha": "a8291f5203e413b0051d6beed1a6196291446e3f",
                "status": "modified"
            }
        ],
        "message": "Don't NPE if functions are passed null - just return null.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@783086 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/217448bb09af206d41b047be5f769ba12001214f",
        "patched_files": [
            "OpensocialFunctions.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "OpensocialFunctionsTest.java"
        ]
    },
    "shindig_1be03ff": {
        "bug_id": "shindig_1be03ff",
        "commit": "https://github.com/apache/shindig/commit/1be03fffc280051646d722518e91fbaf6938291e",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/shindig/blob/1be03fffc280051646d722518e91fbaf6938291e/java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java?ref=1be03fffc280051646d722518e91fbaf6938291e",
                "deletions": 4,
                "filename": "java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java",
                "patch": "@@ -112,10 +112,12 @@ public RestHandler getRestHandler(String path, String method) {\n     Map<String, SortedSet<RestPath>> methods = serviceMethodPathMap.get(pathParts[0]);\n     if (methods != null) {\n       SortedSet<RestPath> paths = methods.get(method);\n-      for (RestPath restPath : paths) {\n-        RestHandler handler = restPath.accept(pathParts);\n-        if (handler != null) {\n-          return handler;\n+      if (paths != null) {\n+        for (RestPath restPath : paths) {\n+          RestHandler handler = restPath.accept(pathParts);\n+          if (handler != null) {\n+            return handler;\n+          }\n         }\n       }\n     }",
                "raw_url": "https://github.com/apache/shindig/raw/1be03fffc280051646d722518e91fbaf6938291e/java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java",
                "sha": "41b93b46c5d099f947503c153340c24800477a00",
                "status": "modified"
            }
        ],
        "message": "avoid NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@746034 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/22a06925697a972b4767ec72c1f91dba8dd86d1d",
        "patched_files": [
            "DefaultHandlerRegistry.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "DefaultHandlerRegistryTest.java"
        ]
    },
    "shindig_1e8d0dc": {
        "bug_id": "shindig_1e8d0dc",
        "commit": "https://github.com/apache/shindig/commit/1e8d0dc34570f2ed09f9ed6b86bbb61b5a820305",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/shindig/blob/1e8d0dc34570f2ed09f9ed6b86bbb61b5a820305/java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java?ref=1e8d0dc34570f2ed09f9ed6b86bbb61b5a820305",
                "deletions": 4,
                "filename": "java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java",
                "patch": "@@ -317,9 +317,7 @@ private SourceMappings(int[][] lines, String[] mappings, List<JsContent> content\n           int nextMapping = lines[line][col];\n           codePos++;\n           if (nextMapping != curMapping && curMapping != -1) {\n-            JsContent sourceJs = orig.get(getRootSrc(mappings[curMapping]));\n-            compiledOut.add(JsContent.fromFeature(compiled.substring(codeStart, codePos),\n-                sourceJs.getSource(), sourceJs.getFeature(), null));\n+            appendJsContent(compiledOut, codeStart, codePos, compiled, curMapping);\n             codeStart = codePos;\n           }\n           curMapping = nextMapping;\n@@ -332,8 +330,14 @@ private SourceMappings(int[][] lines, String[] mappings, List<JsContent> content\n     private void appendJsContent(List<JsContent> out, int startPos, int codePos, \n         String compiled, int mapping) {\n       JsContent sourceJs = orig.get(getRootSrc(mappings[mapping]));\n+      String sourceName = \"[closure-compiler-synthesized]\";\n+      String featureName = \"[closure-compiler]\";\n+      if (sourceJs != null) {\n+        sourceName = sourceJs.getSource() != null ? sourceJs.getSource() : \"\";\n+        featureName = sourceJs.getFeature() != null ? sourceJs.getFeature() : \"\";\n+      }\n       out.add(JsContent.fromFeature(compiled.substring(startPos, codePos),\n-          sourceJs.getSource(), sourceJs.getFeature(), null));\n+          sourceName, featureName, null));\n     }\n     \n     private static final String BEGIN_COMMENT = \"/*\";",
                "raw_url": "https://github.com/apache/shindig/raw/1e8d0dc34570f2ed09f9ed6b86bbb61b5a820305/java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java",
                "sha": "3b43eb30f92721257676499e97b2a319e163c207",
                "status": "modified"
            }
        ],
        "message": "sourceMapping NPE fixes to ClosureJsCompiler.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/shindig/trunk@1086813 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/bb279b37ebbd91405beb72715d39feaafa7a3646",
        "patched_files": [
            "ClosureJsCompiler.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "ClosureJsCompilerTest.java"
        ]
    },
    "shindig_1f6e591": {
        "bug_id": "shindig_1f6e591",
        "commit": "https://github.com/apache/shindig/commit/1f6e5911c971349aeee8e0f4c6f9c24c7a5cc3f7",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/shindig/blob/1f6e5911c971349aeee8e0f4c6f9c24c7a5cc3f7/java/gadgets/src/main/java/org/apache/shindig/gadgets/BasicGadgetSpecFactory.java",
                "changes": 88,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/BasicGadgetSpecFactory.java?ref=1f6e5911c971349aeee8e0f4c6f9c24c7a5cc3f7",
                "deletions": 68,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/BasicGadgetSpecFactory.java",
                "patch": "@@ -25,34 +25,37 @@\n import org.apache.shindig.gadgets.http.HttpRequest;\n import org.apache.shindig.gadgets.http.HttpResponse;\n import org.apache.shindig.gadgets.spec.GadgetSpec;\n-import org.apache.shindig.gadgets.spec.View;\n \n import com.google.inject.Inject;\n import com.google.inject.Singleton;\n import com.google.inject.name.Named;\n \n import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.ExecutorService;\n import java.util.logging.Logger;\n \n /**\n  * Basic implementation of a gadget spec factory.\n  */\n @Singleton\n public class BasicGadgetSpecFactory implements GadgetSpecFactory {\n-  public static final String RAW_GADGETSPEC_XML_PARAM_NAME = \"rawxml\";\n-  public static final URI RAW_GADGET_URI = getRawGadgetUri();\n-  \n+  static final String RAW_GADGETSPEC_XML_PARAM_NAME = \"rawxml\";\n+  static final URI RAW_GADGET_URI = URI.create(\"http://localhost/raw.xml\");\n+\n   static final Logger logger = Logger.getLogger(BasicGadgetSpecFactory.class.getName());\n \n   private final HttpFetcher fetcher;\n-  private final ExecutorService executor;\n   private final TtlCache<URI, GadgetSpec> ttlCache;\n \n+   @Inject\n+  public BasicGadgetSpecFactory(HttpFetcher fetcher,\n+                                CacheProvider cacheProvider,\n+                                @Named(\"shindig.gadget-spec.cache.capacity\") int capacity,\n+                                @Named(\"shindig.gadget-spec.cache.minTTL\") long minTtl,\n+                                @Named(\"shindig.gadget-spec.cache.maxTTL\") long maxTtl) {\n+    this.fetcher = fetcher;\n+    this.ttlCache = new TtlCache<URI, GadgetSpec>(cacheProvider, capacity, minTtl, maxTtl);\n+  }\n+\n   public GadgetSpec getGadgetSpec(GadgetContext context) throws GadgetException {\n     String rawxml = context.getParameter(RAW_GADGETSPEC_XML_PARAM_NAME);\n     if (rawxml != null) {\n@@ -63,20 +66,20 @@ public GadgetSpec getGadgetSpec(GadgetContext context) throws GadgetException {\n     }\n     return getGadgetSpec(context.getUrl(), context.getIgnoreCache());\n   }\n-  \n+\n   /**\n    * Retrieves a gadget specification from the cache or from the Internet.\n    */\n-  public GadgetSpec getGadgetSpec(URI gadgetUri, boolean ignoreCache) throws GadgetException {     \n+  public GadgetSpec getGadgetSpec(URI gadgetUri, boolean ignoreCache) throws GadgetException {\n     if (ignoreCache) {\n       return fetchObjectAndCache(gadgetUri, ignoreCache);\n     }\n-    \n+\n     TtlCache.CachedObject<GadgetSpec> cached = null;\n     synchronized(ttlCache) {\n       cached = ttlCache.getElementWithExpiration(gadgetUri);\n     }\n-    \n+\n     if (cached.obj == null || cached.isExpired) {\n       try {\n         return fetchObjectAndCache(gadgetUri, ignoreCache);\n@@ -89,7 +92,7 @@ public GadgetSpec getGadgetSpec(URI gadgetUri, boolean ignoreCache) throws Gadge\n         }\n       }\n     }\n-    \n+\n     return cached.obj;\n   }\n \n@@ -105,62 +108,11 @@ private GadgetSpec fetchObjectAndCache(URI url, boolean ignoreCache) throws Gadg\n                                 \"Unable to retrieve gadget xml. HTTP error \" +\n                                 response.getHttpStatusCode());\n     }\n-    GadgetSpec spec = new GadgetSpec(url, response.getResponseAsString());\n \n-    // Find the type=HTML views that link to their content externally.\n-    List<View> hrefViewList = new ArrayList<View>();\n-    for (View v : spec.getViews().values()) {\n-      if (v.getType() != View.ContentType.URL && v.getHref() != null) {\n-        hrefViewList.add(v);\n-      }\n-    }\n-\n-    // Retrieve all external view contents simultaneously.\n-    CountDownLatch latch = new CountDownLatch(hrefViewList.size());\n-    for (View v : hrefViewList) {\n-      executor.execute(new ViewContentFetcher(v, latch, fetcher, ignoreCache));\n-    }\n-    try {\n-      latch.await();\n-    } catch (InterruptedException e) {\n-      throw new RuntimeException(e);\n-    }\n-\n-    for (View v : spec.getViews().values()) {\n-      if (v.getType() != View.ContentType.URL) {\n-        // A non-null href at this point indicates that the retrieval of remote\n-        // content has failed.\n-        if (v.getHref() != null) {\n-          throw new GadgetException(GadgetException.Code.FAILED_TO_RETRIEVE_CONTENT,\n-                                    \"Unable to retrieve remote gadget content.\");\n-        }\n-      }\n-    }\n+    GadgetSpec spec = new GadgetSpec(url, response.getResponseAsString());\n \n     ttlCache.addElement(url, spec, response.getCacheExpiration());\n-    \n-    return spec;\n-  }\n-  \n-  private static URI getRawGadgetUri() {\n-    try {\n-      return new URI(\"http\", \"localhost\", \"/raw.xml\", null);\n-    } catch (URISyntaxException e) {\n-      // Never happens\n-    }\n-    return null;\n-  }\n \n-  @Inject\n-  public BasicGadgetSpecFactory(HttpFetcher fetcher,\n-      CacheProvider cacheProvider,\n-      ExecutorService executor,\n-      @Named(\"shindig.gadget-spec.cache.capacity\")int gadgetSpecCacheCapacity,\n-      @Named(\"shindig.gadget-spec.cache.minTTL\")long minTtl,\n-      @Named(\"shindig.gadget-spec.cache.maxTTL\")long maxTtl) {\n-    this.fetcher = fetcher;\n-    this.executor = executor;\n-    this.ttlCache =\n-        new TtlCache<URI, GadgetSpec>(cacheProvider, gadgetSpecCacheCapacity, minTtl, maxTtl);\n+    return spec;\n   }\n }",
                "raw_url": "https://github.com/apache/shindig/raw/1f6e5911c971349aeee8e0f4c6f9c24c7a5cc3f7/java/gadgets/src/main/java/org/apache/shindig/gadgets/BasicGadgetSpecFactory.java",
                "sha": "5425adc846dd61a5a75ebc2faefafc2ff629691d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/shindig/blob/1f6e5911c971349aeee8e0f4c6f9c24c7a5cc3f7/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/HtmlRenderer.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/HtmlRenderer.java?ref=1f6e5911c971349aeee8e0f4c6f9c24c7a5cc3f7",
                "deletions": 1,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/render/HtmlRenderer.java",
                "patch": "@@ -71,13 +71,14 @@ public String render(Gadget gadget) throws RenderingException {\n       GadgetSpec spec = gadget.getSpec();\n \n       Preloads preloads = preloader.preload(context, spec);\n+      gadget.setPreloads(preloads);\n \n       if (view.getHref() == null) {\n-        gadget.setPreloads(preloads);\n         return rewriter.rewriteGadget(gadget, view.getContent());\n       } else {\n         // TODO: Add current url to GadgetContext to support transitive proxying.\n         HttpRequest request = new HttpRequest(Uri.fromJavaUri(view.getHref()))\n+            .setIgnoreCache(context.getIgnoreCache())\n             .setOAuthArguments(new OAuthArguments(view))\n             .setAuthType(view.getAuthType())\n             .setSecurityToken(context.getToken())",
                "raw_url": "https://github.com/apache/shindig/raw/1f6e5911c971349aeee8e0f4c6f9c24c7a5cc3f7/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/HtmlRenderer.java",
                "sha": "6af75ecc820564797475e01d69abef46b136e9dd",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/shindig/blob/1f6e5911c971349aeee8e0f4c6f9c24c7a5cc3f7/java/gadgets/src/test/java/org/apache/shindig/gadgets/BasicGadgetSpecFactoryTest.java",
                "changes": 93,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/BasicGadgetSpecFactoryTest.java?ref=1f6e5911c971349aeee8e0f4c6f9c24c7a5cc3f7",
                "deletions": 64,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/BasicGadgetSpecFactoryTest.java",
                "patch": "@@ -18,24 +18,23 @@\n  */\n package org.apache.shindig.gadgets;\n \n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.classextension.EasyMock.replay;\n+import static org.junit.Assert.assertEquals;\n+\n import org.apache.shindig.common.cache.CacheProvider;\n import org.apache.shindig.common.cache.DefaultCacheProvider;\n import org.apache.shindig.common.uri.Uri;\n-import org.apache.shindig.common.testing.TestExecutorService;\n import org.apache.shindig.gadgets.http.HttpFetcher;\n import org.apache.shindig.gadgets.http.HttpRequest;\n import org.apache.shindig.gadgets.http.HttpResponse;\n import org.apache.shindig.gadgets.http.HttpResponseBuilder;\n import org.apache.shindig.gadgets.spec.GadgetSpec;\n \n import org.easymock.EasyMock;\n-import static org.easymock.EasyMock.expect;\n-import static org.easymock.classextension.EasyMock.replay;\n-import static org.junit.Assert.assertEquals;\n import org.junit.Test;\n \n import java.net.URI;\n-import java.util.concurrent.ExecutorService;\n \n /**\n  * Tests for BasicGadgetSpecFactory\n@@ -45,33 +44,27 @@\n   private final static Uri REMOTE_URL = Uri.parse(\"http://example.org/remote.html\");\n   private final static String LOCAL_CONTENT = \"Hello, local content!\";\n   private final static String ALT_LOCAL_CONTENT = \"Hello, local content!\";\n-  private final static String REMOTE_CONTENT = \"Hello, remote content!\";\n   private final static String RAWXML_CONTENT = \"Hello, rawxml content!\";\n   private final static String LOCAL_SPEC_XML\n-  = \"<Module>\" +\n-  \"  <ModulePrefs title='GadgetSpecFactoryTest'/>\" +\n-  \"  <Content type='html'>\" + LOCAL_CONTENT + \"</Content>\" +\n-  \"</Module>\";\n+      = \"<Module>\" +\n+        \"  <ModulePrefs title='GadgetSpecFactoryTest'/>\" +\n+        \"  <Content type='html'>\" + LOCAL_CONTENT + \"</Content>\" +\n+        \"</Module>\";\n   private final static String ALT_LOCAL_SPEC_XML\n-  = \"<Module>\" +\n-  \"  <ModulePrefs title='GadgetSpecFactoryTest'/>\" +\n-  \"  <Content type='html'>\" + ALT_LOCAL_CONTENT + \"</Content>\" +\n-  \"</Module>\";\n-  private final static String REMOTE_SPEC_XML\n-  = \"<Module>\" +\n-  \"  <ModulePrefs title='GadgetSpecFactoryTest'/>\" +\n-  \"  <Content type='html' href='\" + REMOTE_URL + \"'/>\" +\n-  \"</Module>\";\n+      = \"<Module>\" +\n+        \"  <ModulePrefs title='GadgetSpecFactoryTest'/>\" +\n+        \"  <Content type='html'>\" + ALT_LOCAL_CONTENT + \"</Content>\" +\n+        \"</Module>\";\n   private final static String RAWXML_SPEC_XML\n-  = \"<Module>\" +\n-  \"  <ModulePrefs title='GadgetSpecFactoryTest'/>\" +\n-  \"  <Content type='html'>\" + RAWXML_CONTENT + \"</Content>\" +\n-  \"</Module>\";\n+      = \"<Module>\" +\n+        \"  <ModulePrefs title='GadgetSpecFactoryTest'/>\" +\n+        \"  <Content type='html'>\" + RAWXML_CONTENT + \"</Content>\" +\n+        \"</Module>\";\n   private final static String URL_SPEC_XML\n-  = \"<Module>\" +\n-  \"  <ModulePrefs title='GadgetSpecFactoryTest'/>\" +\n-  \"  <Content type='url' href='\" + REMOTE_URL + \"'/>\" +\n-  \"</Module>\";\n+      = \"<Module>\" +\n+        \"  <ModulePrefs title='GadgetSpecFactoryTest'/>\" +\n+        \"  <Content type='url' href='\" + REMOTE_URL + \"'/>\" +\n+        \"</Module>\";\n \n   private final static GadgetContext NO_CACHE_CONTEXT = new GadgetContext() {\n     @Override\n@@ -83,19 +76,19 @@ public URI getUrl() {\n       return SPEC_URL.toJavaUri();\n     }\n   };\n-  \n+\n   private final static GadgetContext RAWXML_GADGET_CONTEXT = new GadgetContext() {\n     @Override\n     public boolean getIgnoreCache() {\n       // This should be ignored by calling code.\n       return false;\n     }\n-    \n+\n     @Override\n     public URI getUrl() {\n       return SPEC_URL.toJavaUri();\n     }\n-    \n+\n     @Override\n     public String getParameter(String param) {\n       if (param.equals(BasicGadgetSpecFactory.RAW_GADGETSPEC_XML_PARAM_NAME)) {\n@@ -104,14 +97,13 @@ public String getParameter(String param) {\n       return null;\n     }\n   };\n-  private final static ExecutorService FAKE_EXECUTOR = new TestExecutorService();\n \n   private final HttpFetcher fetcher = EasyMock.createNiceMock(HttpFetcher.class);\n-  \n+\n   private final CacheProvider cacheProvider = new DefaultCacheProvider();\n \n   private final BasicGadgetSpecFactory specFactory\n-      = new BasicGadgetSpecFactory(fetcher, cacheProvider, FAKE_EXECUTOR, 5, -1000, 1000);\n+      = new BasicGadgetSpecFactory(fetcher, cacheProvider, 5, -1000, 1000);\n \n   @Test\n   public void specFetched() throws Exception {\n@@ -136,7 +128,7 @@ public void specFetchedWithContext() throws Exception {\n \n     assertEquals(LOCAL_CONTENT, spec.getView(GadgetSpec.DEFAULT_VIEW).getContent());\n   }\n-  \n+\n   @Test\n   public void specFetchedFromParam() throws Exception {\n     // Set up request as if it's a regular spec request, and ensure that\n@@ -145,9 +137,9 @@ public void specFetchedFromParam() throws Exception {\n     HttpResponse response = new HttpResponse(LOCAL_SPEC_XML);\n     expect(fetcher.fetch(request)).andReturn(response);\n     replay(fetcher);\n-    \n+\n     GadgetSpec spec = specFactory.getGadgetSpec(RAWXML_GADGET_CONTEXT);\n-    \n+\n     assertEquals(RAWXML_CONTENT, spec.getView(GadgetSpec.DEFAULT_VIEW).getContent());\n     assertEquals(BasicGadgetSpecFactory.RAW_GADGET_URI, spec.getUrl());\n   }\n@@ -174,7 +166,7 @@ public void staleSpecIsRefetched() throws Exception {\n   @Test\n   public void staleSpecReturnedFromCacheOnError() throws Exception {\n     HttpRequest request = new HttpRequest(SPEC_URL).setIgnoreCache(true);\n-    HttpRequest retriedRequest = new HttpRequest(SPEC_URL).setIgnoreCache(false);    \n+    HttpRequest retriedRequest = new HttpRequest(SPEC_URL).setIgnoreCache(false);\n     HttpResponse expiredResponse = new HttpResponseBuilder()\n         .setResponse(LOCAL_SPEC_XML.getBytes(\"UTF-8\"))\n         .addHeader(\"Pragma\", \"no-cache\")\n@@ -189,21 +181,6 @@ public void staleSpecReturnedFromCacheOnError() throws Exception {\n     assertEquals(ALT_LOCAL_CONTENT, spec.getView(GadgetSpec.DEFAULT_VIEW).getContent());\n   }\n \n-  @Test\n-  public void externalContentFetched() throws Exception {\n-    HttpRequest request = new HttpRequest(SPEC_URL).setIgnoreCache(true);\n-    HttpResponse response = new HttpResponse(REMOTE_SPEC_XML);\n-    HttpRequest viewRequest = new HttpRequest(REMOTE_URL).setIgnoreCache(true);\n-    HttpResponse viewResponse = new HttpResponse(REMOTE_CONTENT);\n-    expect(fetcher.fetch(request)).andReturn(response);\n-    expect(fetcher.fetch(viewRequest)).andReturn(viewResponse);\n-    replay(fetcher);\n-\n-    GadgetSpec spec = specFactory.getGadgetSpec(SPEC_URL.toJavaUri(), true);\n-\n-    assertEquals(REMOTE_CONTENT, spec.getView(GadgetSpec.DEFAULT_VIEW).getContent());\n-  }\n-\n   @Test\n   public void typeUrlNotFetchedRemote() throws Exception {\n     HttpRequest request = new HttpRequest(SPEC_URL).setIgnoreCache(true);\n@@ -226,18 +203,6 @@ public void badFetchThrows() throws Exception {\n     specFactory.getGadgetSpec(SPEC_URL.toJavaUri(), true);\n   }\n \n-  @Test(expected = GadgetException.class)\n-  public void badRemoteContentThrows() throws Exception {\n-    HttpRequest request = new HttpRequest(SPEC_URL).setIgnoreCache(true);\n-    HttpResponse response = new HttpResponse(REMOTE_SPEC_XML);\n-    HttpRequest viewRequest = new HttpRequest(REMOTE_URL).setIgnoreCache(true);\n-    expect(fetcher.fetch(request)).andReturn(response);\n-    expect(fetcher.fetch(viewRequest)).andReturn(HttpResponse.error());\n-    replay(fetcher);\n-\n-    specFactory.getGadgetSpec(SPEC_URL.toJavaUri(), true);\n-  }\n-\n   @Test(expected = GadgetException.class)\n   public void throwingFetcherRethrows() throws Exception {\n     HttpRequest request = new HttpRequest(SPEC_URL).setIgnoreCache(true);",
                "raw_url": "https://github.com/apache/shindig/raw/1f6e5911c971349aeee8e0f4c6f9c24c7a5cc3f7/java/gadgets/src/test/java/org/apache/shindig/gadgets/BasicGadgetSpecFactoryTest.java",
                "sha": "b17c04be6f5371fc3ffca6ab53f5edd8d4821d33",
                "status": "modified"
            }
        ],
        "message": "Removed unneeded external view resolution being done in GadgetSpecFactory. This is now done in renderer anyway.\n\nAlso fixed a potential NPE in renderer when using proxied rendering. This isn't the correct long term answer here, since this data is supposed to get sent to the remote site.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@700867 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/d11813a3ad461c7bb411e5a25d5a5dfbc3f2f819",
        "patched_files": [
            "HtmlRenderer.java",
            "BasicGadgetSpecFactory.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "HtmlRendererTest.java",
            "BasicGadgetSpecFactoryTest.java"
        ]
    },
    "shindig_27455f1": {
        "bug_id": "shindig_27455f1",
        "commit": "https://github.com/apache/shindig/commit/27455f1379596a1d8ac6d47fbe480f1b7e5577d7",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/shindig/blob/27455f1379596a1d8ac6d47fbe480f1b7e5577d7/java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java?ref=27455f1379596a1d8ac6d47fbe480f1b7e5577d7",
                "deletions": 1,
                "filename": "java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java",
                "patch": "@@ -330,11 +330,13 @@ private void appendJsContent(List<JsContent> out, int startPos, int codePos,\n         String compiled, int mapping) {\n       JsContent sourceJs = orig.get(getRootSrc(mappings[mapping]));\n       String sourceName = \"[closure-compiler-synthesized]\";\n+      FeatureBundle bundle = null;\n       if (sourceJs != null) {\n         sourceName = sourceJs.getSource() != null ? sourceJs.getSource() : \"\";\n+        bundle = sourceJs.getFeatureBundle();\n       }\n       out.add(JsContent.fromFeature(compiled.substring(startPos, codePos),\n-          sourceName, sourceJs.getFeatureBundle(), null));\n+          sourceName, bundle, null));\n     }\n     \n     private static final String BEGIN_COMMENT = \"/*\";",
                "raw_url": "https://github.com/apache/shindig/raw/27455f1379596a1d8ac6d47fbe480f1b7e5577d7/java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java",
                "sha": "22f830bbe5adf9d5f82020c8bf2e65c9a8b2c652",
                "status": "modified"
            }
        ],
        "message": "Fix NPE for profiled JS generating from text-type JsContent.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/shindig/trunk@1097217 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/4b4b520cd2ea44ddfe68d43c287a560baf0ac841",
        "patched_files": [
            "ClosureJsCompiler.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "ClosureJsCompilerTest.java"
        ]
    },
    "shindig_2eb8661": {
        "bug_id": "shindig_2eb8661",
        "commit": "https://github.com/apache/shindig/commit/2eb866142354c3a5d3f16e080c60f79e9a2d0c06",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/shindig/blob/2eb866142354c3a5d3f16e080c60f79e9a2d0c06/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/BasicHttpFetcher.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/BasicHttpFetcher.java?ref=2eb866142354c3a5d3f16e080c60f79e9a2d0c06",
                "deletions": 11,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/http/BasicHttpFetcher.java",
                "patch": "@@ -513,17 +513,24 @@ private HttpResponse makeResponse(org.apache.http.HttpResponse response) throws\n         buffer.append(tmp, 0, l);\n       }\n     } catch (EOFException eofe) {\n-      // Ref: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4040920\n-      // Due to a bug in JDK ZLIB (InflaterInputStream), unexpected EOF error can occur.\n-      // In such cases, even if the input stream is finished reading, the\n-      // 'Inflater.finished()' call erroneously returns 'false' and\n-      // 'java.util.zip.InflaterInputStream.fill' throws the 'EOFException'.\n-      // So for such case, ignore the Exception in case Exception Cause is\n-      // 'Unexpected end of ZLIB input stream'.\n-      // For all other cases, re-throw the (EOF) Exception.\n-      if ((instream.available() == 0) &&\n-           eofe.getMessage().equals(\"Unexpected end of ZLIB input stream\")) {\n-        // Ignore\n+      /**\n+       * Ref: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4040920\n+       * Due to a bug in JDK ZLIB (InflaterInputStream), unexpected EOF error can occur.\n+       * In such cases, even if the input stream is finished reading, the\n+       * 'Inflater.finished()' call erroneously returns 'false' and\n+       * 'java.util.zip.InflaterInputStream.fill' throws the 'EOFException'.\n+       * So for such case, ignore the Exception in case Exception Cause is\n+       * 'Unexpected end of ZLIB input stream'.\n+       *\n+       * Also, ignore this exception in case the exception has no message\n+       * body as this is the case where {@link GZIPInputStream#readUByte}\n+       * throws EOFException with empty message. A bug has been filed with Sun\n+       * and will be mentioned here once it is accepted.\n+       */\n+      if (instream.available() == 0 &&\n+          (eofe.getMessage() == null ||\n+           eofe.getMessage().equals(\"Unexpected end of ZLIB input stream\"))) {\n+        LOG.log(Level.FINE, \"EOFException: \", eofe);\n       } else {\n         throw eofe;\n       }",
                "raw_url": "https://github.com/apache/shindig/raw/2eb866142354c3a5d3f16e080c60f79e9a2d0c06/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/BasicHttpFetcher.java",
                "sha": "90454f4161781572e2c3fd957bb426c52140e4a7",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/shindig/blob/2eb866142354c3a5d3f16e080c60f79e9a2d0c06/java/gadgets/src/test/java/org/apache/shindig/gadgets/http/BasicHttpFetcherTest.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/http/BasicHttpFetcherTest.java?ref=2eb866142354c3a5d3f16e080c60f79e9a2d0c06",
                "deletions": 8,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/http/BasicHttpFetcherTest.java",
                "patch": "@@ -17,21 +17,22 @@\n  */\n package org.apache.shindig.gadgets.http;\n \n-import java.io.InputStream;\n-import java.io.EOFException;\n-import java.io.IOException;\n-\n import org.apache.http.HttpEntity;\n import org.apache.shindig.common.uri.Uri;\n import org.apache.shindig.common.uri.UriBuilder;\n import org.easymock.EasyMock;\n+import org.junit.AfterClass;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n import org.junit.Before;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n \n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n public class BasicHttpFetcherTest {\n   private static final int ECHO_PORT = 9003;\n   protected static final Uri BASE_URL = Uri.parse(\"http://localhost:9003/\");\n@@ -59,13 +60,12 @@ public void setUp() throws Exception {\n     fetcher = new BasicHttpFetcher(BASE_URL.getAuthority());\n \n     mockInputStream = EasyMock.createMock(InputStream.class);\n-    //EasyMock.expect(mockInputStream.available()).andReturn(0).anyTimes();\n     EasyMock.expect(mockInputStream.available()).andReturn(0);\n     mockInputStream.close();\n \n     mockEntity = EasyMock.createMock(HttpEntity.class);\n     EasyMock.expect(mockEntity.getContent()).andReturn(mockInputStream);\n-    EasyMock.expect(mockEntity.getContentLength()).andReturn(new Long(16384)).anyTimes();\n+    EasyMock.expect(mockEntity.getContentLength()).andReturn(16384L).anyTimes();\n   }\n \n   @Test\n@@ -83,17 +83,24 @@ public void testWithProxy() throws Exception {\n \n   @Test\n   public void testToByteArraySafeThrowsException1() throws Exception {\n+    EasyMock.reset(mockInputStream);\n+    mockInputStream.close();\n+\n     String exceptionMessage = \"IO Exception and Any Random Cause\";\n     IOException e = new IOException(exceptionMessage);\n     EasyMock.expect(mockInputStream.read(EasyMock.isA(byte[].class))).andThrow(e).anyTimes();\n \n     EasyMock.replay(mockEntity, mockInputStream);\n+    boolean exceptionCaught = false;\n \n     try {\n       fetcher.toByteArraySafe(mockEntity);\n     } catch (IOException ioe) {\n       assertEquals(exceptionMessage, ioe.getMessage());\n+      exceptionCaught = true;\n     }\n+    assertTrue(exceptionCaught);\n+    EasyMock.verify(mockEntity, mockInputStream);\n   }\n \n   @Test\n@@ -103,29 +110,40 @@ public void testToByteArraySafeThrowsException2() throws Exception {\n     EasyMock.expect(mockInputStream.read(EasyMock.isA(byte[].class))).andThrow(e).anyTimes();\n \n     EasyMock.replay(mockEntity, mockInputStream);\n+    boolean exceptionCaught = false;\n \n     try {\n       fetcher.toByteArraySafe(mockEntity);\n     } catch (EOFException eofe) {\n       assertEquals(exceptionMessage, eofe.getMessage());\n+      exceptionCaught = true;\n     }\n+    assertTrue(exceptionCaught);\n+    EasyMock.verify(mockEntity, mockInputStream);\n   }\n \n   @Test\n   public void testToByteArraySafeThrowsException3() throws Exception {\n+    EasyMock.reset(mockInputStream);\n+    mockInputStream.close();\n+\n     // Return non-zero for 'InputStream.available()'. This should violate the other condition.\n     EasyMock.expect(mockInputStream.available()).andReturn(1);\n     String exceptionMessage = \"Unexpected end of ZLIB input stream\";\n     EOFException e = new EOFException(exceptionMessage);\n     EasyMock.expect(mockInputStream.read(EasyMock.isA(byte[].class))).andThrow(e).anyTimes();\n \n     EasyMock.replay(mockEntity, mockInputStream);\n+    boolean exceptionCaught = false;\n \n     try {\n       fetcher.toByteArraySafe(mockEntity);\n     } catch (EOFException eofe) {\n       assertEquals(exceptionMessage, eofe.getMessage());\n+      exceptionCaught = true;\n     }\n+    EasyMock.verify(mockEntity, mockInputStream);\n+    assertTrue(exceptionCaught);\n   }\n \n   @Test\n@@ -141,5 +159,21 @@ public void testToByteArraySafeHandleException() throws Exception {\n     } catch (EOFException eofe) {\n       fail(\"Exception Should have been caught\");\n     }\n+    EasyMock.verify(mockEntity, mockInputStream);\n+  }\n+\n+  @Test\n+  public void testToByteArraySafeHandlesExceptionWithNoMessage() throws Exception {\n+    EOFException e = new EOFException();\n+    EasyMock.expect(mockInputStream.read(EasyMock.isA(byte[].class))).andThrow(e).anyTimes();\n+\n+    EasyMock.replay(mockEntity, mockInputStream);\n+\n+    try {\n+      fetcher.toByteArraySafe(mockEntity);\n+    } catch (EOFException eofe) {\n+      fail(\"Exception Should have been caught\");\n+    }\n+    EasyMock.verify(mockEntity, mockInputStream);\n   }\n }",
                "raw_url": "https://github.com/apache/shindig/raw/2eb866142354c3a5d3f16e080c60f79e9a2d0c06/java/gadgets/src/test/java/org/apache/shindig/gadgets/http/BasicHttpFetcherTest.java",
                "sha": "29eeed6a89fad5fe464dda6d8a1df4c159c9b06c",
                "status": "modified"
            }
        ],
        "message": "Fix NPE for ZLIB inflater workaround, when the exception thrown by the underlying inflater has e.getMessage() == null.\n\nPatch provided by Gagan Singh and Vikas Arora.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/shindig/trunk@979922 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/be19485694f9896c1e8fafb5d9e1c48ca27de478",
        "patched_files": [
            "BasicHttpFetcher.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "BasicHttpFetcherTest.java"
        ]
    },
    "shindig_38a6856": {
        "bug_id": "shindig_38a6856",
        "commit": "https://github.com/apache/shindig/commit/38a685619ce5b7228b64985f59473a1f9a9a0670",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/shindig/blob/38a685619ce5b7228b64985f59473a1f9a9a0670/java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java?ref=38a685619ce5b7228b64985f59473a1f9a9a0670",
                "deletions": 0,
                "filename": "java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java",
                "patch": "@@ -40,6 +40,7 @@\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -229,6 +230,9 @@ private Object convertToEnum(String value, Class<?> type) {\n \n   private Map<String, Object> convertToMap(JSONObject in, Type type) {\n     Map<String, Object> out = new HashMap<String, Object>(in.length(), 1);\n+    if(in.length() == 0)\n+      return Collections.emptyMap();\n+\n     for (String name : JSONObject.getNames(in)) {\n       out.put(name, convertToObject(in.opt(name), type));\n     }",
                "raw_url": "https://github.com/apache/shindig/raw/38a685619ce5b7228b64985f59473a1f9a9a0670/java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java",
                "sha": "af5d430afdd3b2cb1c762505b67047528394faac",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/shindig/blob/38a685619ce5b7228b64985f59473a1f9a9a0670/java/common/src/test/java/org/apache/shindig/protocol/conversion/BeanJsonConverterTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/test/java/org/apache/shindig/protocol/conversion/BeanJsonConverterTest.java?ref=38a685619ce5b7228b64985f59473a1f9a9a0670",
                "deletions": 0,
                "filename": "java/common/src/test/java/org/apache/shindig/protocol/conversion/BeanJsonConverterTest.java",
                "patch": "@@ -174,4 +174,11 @@ public void testJsonToNestedGeneric() throws Exception {\n     assertEquals(Arrays.asList(0, 1, 2), data.get(\"key0\"));\n     assertEquals(Arrays.asList(3, 4, 5), data.get(\"key1\"));\n   }\n+\n+  public void testEmptyJsonMap() throws Exception {\n+    String emptyMap = \"{}\";\n+    Map<String, String> data = beanJsonConverter.convertToObject(emptyMap, \n+         new TypeLiteral<Map<String,String>>(){}.getType());\n+    assertTrue(data.size() == 0);\n+  }\n }",
                "raw_url": "https://github.com/apache/shindig/raw/38a685619ce5b7228b64985f59473a1f9a9a0670/java/common/src/test/java/org/apache/shindig/protocol/conversion/BeanJsonConverterTest.java",
                "sha": "c194c5732a43c26d9af5fa49057e6538d3948ff3",
                "status": "modified"
            }
        ],
        "message": "SHINDIG-993 | Patch from Aaron Evans | beanJsonConverter throws NPE when converting empty map to object\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@758115 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/65d05e9a10db572aa516563cdf877b37deacd60e",
        "patched_files": [
            "BeanJsonConverter.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "BeanJsonConverterTest.java"
        ]
    },
    "shindig_3bccc91": {
        "bug_id": "shindig_3bccc91",
        "commit": "https://github.com/apache/shindig/commit/3bccc913e23abc3eddb63f4f89e3cdc5c76a98f7",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/shindig/blob/3bccc913e23abc3eddb63f4f89e3cdc5c76a98f7/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/DomUtil.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/DomUtil.java?ref=3bccc913e23abc3eddb63f4f89e3cdc5c76a98f7",
                "deletions": 3,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/DomUtil.java",
                "patch": "@@ -19,7 +19,9 @@\n package org.apache.shindig.gadgets.parse;\n \n import com.google.common.collect.Lists;\n+\n import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n import org.w3c.dom.Node;\n import org.w3c.dom.traversal.DocumentTraversal;\n import org.w3c.dom.traversal.NodeFilter;\n@@ -46,9 +48,9 @@ public static Node getFirstNamedChildNode(Node root, String nodeName) {\n     return null;\n   }\n \n-  public static List<Node> getElementsByTagNameCaseInsensitive(Document doc,\n+  public static List<Element> getElementsByTagNameCaseInsensitive(Document doc,\n       final Set<String> lowerCaseNames) {\n-    final List<Node> result = Lists.newArrayList();\n+    final List<Element> result = Lists.newArrayList();\n     NodeIterator nodeIterator = ((DocumentTraversal) doc)\n         .createNodeIterator(doc, NodeFilter.SHOW_ELEMENT,\n             new NodeFilter() {\n@@ -60,7 +62,7 @@ public short acceptNode(Node n) {\n               }\n             }, false);\n     for (Node n = nodeIterator.nextNode(); n != null ; n = nodeIterator.nextNode()) {\n-      result.add(n);\n+      result.add((Element)n);\n     }\n     return result;\n   }",
                "raw_url": "https://github.com/apache/shindig/raw/3bccc913e23abc3eddb63f4f89e3cdc5c76a98f7/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/DomUtil.java",
                "sha": "a5aec89adfcc4298d4183cc84d3dbe5c3f3534c1",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/shindig/blob/3bccc913e23abc3eddb63f4f89e3cdc5c76a98f7/java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/HTMLContentRewriter.java",
                "changes": 114,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/HTMLContentRewriter.java?ref=3bccc913e23abc3eddb63f4f89e3cdc5c76a98f7",
                "deletions": 58,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/HTMLContentRewriter.java",
                "patch": "@@ -115,22 +115,23 @@ protected RewriterResults rewriteImpl(ContentRewriterFeature feature, Uri gadget\n     }\n \n     // Get ALL interesting tags\n-    List<Node> nodeList =\n+    List<Element> tagList =\n         DomUtil.getElementsByTagNameCaseInsensitive(content.getDocument(), TAGS);\n \n-    Node head = DomUtil.getFirstNamedChildNode(content.getDocument().getDocumentElement(), \"head\");\n+    Element head = (Element)DomUtil.getFirstNamedChildNode(\n+        content.getDocument().getDocumentElement(), \"head\");\n \n     boolean mutated = false;\n \n \n     // 1st step. Rewrite links in all embedded style tags. Convert @import statements into\n-    // links and add them to the node list.\n+    // links and add them to the tag list.\n     // Move all style and link tags into head and concat the link tags\n-    mutated = rewriteStyleTags(head, nodeList, feature, gadgetUri, contentBase);\n+    mutated = rewriteStyleTags(head, tagList, feature, gadgetUri, contentBase);\n     // Concat script links\n-    mutated |= rewriteJsTags(nodeList, feature, gadgetUri, contentBase);\n+    mutated |= rewriteJsTags(tagList, feature, gadgetUri, contentBase);\n     // Rewrite links in images, embeds etc\n-    mutated |= rewriteContentReferences(nodeList, feature, gadgetUri, contentBase);\n+    mutated |= rewriteContentReferences(tagList, feature, gadgetUri, contentBase);\n \n     if (mutated) {\n       MutableContent.notifyEdit(content.getDocument());\n@@ -139,40 +140,41 @@ protected RewriterResults rewriteImpl(ContentRewriterFeature feature, Uri gadget\n     return RewriterResults.cacheableIndefinitely();\n   }\n \n-  protected boolean rewriteStyleTags(Node head, List<Node> nodeList,\n+  protected boolean rewriteStyleTags(Element head, List<Element> elementList,\n       ContentRewriterFeature feature, Uri gadgetUri, Uri contentBase) {\n     if (!feature.getIncludedTags().contains(\"style\")) {\n       return false;\n     }\n     boolean mutated = false;\n \n     // Filter to just style tags\n-    Iterable<Node> styleTags = Lists.newArrayList(Iterables.filter(nodeList, new Predicate<Node>() {\n-      public boolean apply(@Nullable Node node) {\n-        return node.getNodeName().equalsIgnoreCase(\"style\");\n+    Iterable<Element> styleTags = Lists.newArrayList(Iterables.filter(elementList,\n+        new Predicate<Element>() {\n+      public boolean apply(@Nullable Element element) {\n+        return element.getNodeName().equalsIgnoreCase(\"style\");\n       }\n     }));\n \n     LinkRewriter linkRewriter = createLinkRewriter(gadgetUri, feature);\n \n-    for (Node styleNode : styleTags) {\n+    for (Element styleTag : styleTags) {\n       mutated |= true;\n-      if (styleNode.getParentNode() != head) {\n-        styleNode.getParentNode().removeChild(styleNode);\n-        head.appendChild(styleNode);\n+      if (styleTag.getParentNode() != head) {\n+        styleTag.getParentNode().removeChild(styleTag);\n+        head.appendChild(styleTag);\n       }\n-      String styleText = styleNode.getTextContent();\n+      String styleText = styleTag.getTextContent();\n       StringWriter sw = new StringWriter(styleText.length());\n       List<String> extractedUrls = CssRewriter.rewrite(new StringReader(styleText),\n           contentBase, linkRewriter, sw, true);\n       styleText = sw.toString().trim();\n       if (styleText.length() == 0 || (styleText.length() < 25 &&\n         styleText.replace(\"<!--\", \"\").replace(\"//-->\", \"\").\n             replace(\"-->\", \"\").trim().length() == 0)) {\n-        styleNode.getParentNode().removeChild(styleNode);\n-        nodeList.remove(styleNode);\n+        styleTag.getParentNode().removeChild(styleTag);\n+        elementList.remove(styleTag);\n       } else {\n-        styleNode.setTextContent(styleText);\n+        styleTag.setTextContent(styleText);\n       }\n       for (String extractedUrl : extractedUrls) {\n         // Add extracted urls as link elements to head\n@@ -181,20 +183,19 @@ public boolean apply(@Nullable Node node) {\n         newLink.setAttribute(\"type\", \"text/css\");\n         newLink.setAttribute(\"href\", extractedUrl);\n         head.appendChild(newLink);\n-        nodeList.add(newLink);\n+        elementList.add(newLink);\n       }\n     }\n \n     // Filter to just stylesheet link tags\n-    List<Node> linkTags = Lists.newArrayList(Iterables.filter(nodeList, new Predicate<Node>() {\n-      public boolean apply(@Nullable Node node) {\n-         return node.getNodeName().equalsIgnoreCase(\"link\") &&\n-          (node.getAttributes().getNamedItem(\"rel\").\n-              getNodeValue().equalsIgnoreCase(\"stylesheet\") ||\n-           node.getAttributes().getNamedItem(\"type\").\n-               getNodeValue().toLowerCase().contains(\"css\"));\n-      }\n-    }));\n+    List<Element> linkTags = Lists.newArrayList(Iterables.filter(elementList,\n+        new Predicate<Element>() {\n+          public boolean apply(@Nullable Element element) {\n+            return element.getNodeName().equalsIgnoreCase(\"link\") &&\n+                (\"stylesheet\".equalsIgnoreCase(element.getAttribute(\"rel\")) ||\n+                    element.getAttribute(\"type\").toLowerCase().contains(\"css\"));\n+          }\n+        }));\n \n     String concatBase = getConcatBase(gadgetUri.toJavaUri(), feature,\n       \"text/css\");\n@@ -216,30 +217,31 @@ protected String getConcatBase(URI gadgetUri, ContentRewriterFeature feature, St\n            \"&fp=\" + feature.getFingerprint() +'&';\n   }\n \n-  protected boolean rewriteJsTags(List<Node> nodeList, ContentRewriterFeature feature,\n+  protected boolean rewriteJsTags(List<Element> elementList, ContentRewriterFeature feature,\n       Uri gadgetUri, Uri contentBase) {\n     if (!feature.getIncludedTags().contains(\"script\")) {\n       return false;\n     }\n     boolean mutated = false;\n \n     // Filter to just script tags\n-    List<Node> scriptNodes = Lists.newArrayList(Iterables.filter(nodeList, new Predicate<Node>() {\n-      public boolean apply(@Nullable Node node) {\n+    List<Element> scriptTags = Lists.newArrayList(Iterables.filter(elementList,\n+        new Predicate<Element>() {\n+      public boolean apply(@Nullable Element node) {\n         return node.getNodeName().equalsIgnoreCase(\"script\");\n       }\n     }));\n \n     String concatBase = getConcatBase(gadgetUri.toJavaUri(), feature, \"text/javascript\");\n-    List<Node> concatenateable = new ArrayList<Node>();\n-    for (int i = 0; i < scriptNodes.size(); i++) {\n-      Node scriptTag = scriptNodes.get(i);\n-      Node nextSciptTag = null;\n-      if (i + 1 < scriptNodes.size()) {\n-        nextSciptTag = scriptNodes.get(i+1);\n+    List<Element> concatenateable = new ArrayList<Element>();\n+    for (int i = 0; i < scriptTags.size(); i++) {\n+      Element scriptTag = scriptTags.get(i);\n+      Element nextSciptTag = null;\n+      if (i + 1 < scriptTags.size()) {\n+        nextSciptTag = scriptTags.get(i+1);\n       }\n-      Node src = scriptTag.getAttributes().getNamedItem(\"src\");\n-      if (src != null && feature.shouldRewriteURL(src.getNodeValue())) {\n+      if (scriptTag.hasAttribute(\"src\") &&\n+          feature.shouldRewriteURL(scriptTag.getAttribute(\"src\"))) {\n         mutated = true;\n         concatenateable.add(scriptTag);\n         if (nextSciptTag == null ||\n@@ -257,22 +259,22 @@ public boolean apply(@Nullable Node node) {\n     return mutated;\n   }\n \n-  protected boolean rewriteContentReferences(List<Node> nodeList, ContentRewriterFeature feature,\n-      Uri gadgetUri, Uri contentBase) {\n+  protected boolean rewriteContentReferences(List<Element> elementList,\n+      ContentRewriterFeature feature, Uri gadgetUri, Uri contentBase) {\n     boolean mutated = false;\n     LinkRewriter rewriter = createLinkRewriter(gadgetUri, feature);\n \n     final Set<String> tagNames = Sets.newHashSet(LINKING_TAG_ATTRS.keySet());\n     tagNames.retainAll(feature.getIncludedTags());\n \n     // Filter to just style tags\n-    Iterable<Node> tags = Iterables.filter(nodeList, new Predicate<Node>() {\n-      public boolean apply(@Nullable Node node) {\n+    Iterable<Element> tags = Iterables.filter(elementList, new Predicate<Element>() {\n+      public boolean apply(@Nullable Element node) {\n         return tagNames.contains(node.getNodeName().toLowerCase());\n       }\n     });\n \n-    for (Node node : tags) {\n+    for (Element node : tags) {\n       NamedNodeMap attributes = node.getAttributes();\n       Set<String> rewriteable = LINKING_TAG_ATTRS.get(node.getNodeName().toLowerCase());\n       for (int i = 0; i < attributes.getLength(); i++) {\n@@ -287,23 +289,20 @@ public boolean apply(@Nullable Node node) {\n   }\n \n   private static void concatenateTags(final ContentRewriterFeature feature,\n-                               List<Node> tags, String concatBase, Uri contentBase,\n+                               List<Element> tags, String concatBase, Uri contentBase,\n                                final String attr) {\n     // Filter out excluded URLs\n-    tags = Lists.newArrayList(Iterables.filter(tags, new Predicate<Node>() {\n-      public boolean apply(@Nullable Node node) {\n-        Node item = node.getAttributes().getNamedItem(attr);\n-        return (item != null && feature.shouldRewriteURL(item.getNodeValue()));\n+    tags = Lists.newArrayList(Iterables.filter(tags, new Predicate<Element>() {\n+      public boolean apply(@Nullable Element element) {\n+        return (element.hasAttribute(attr) && feature.shouldRewriteURL(element.getAttribute(attr)));\n       }\n     }));\n \n     // Eliminate duplicates while maintaining order\n     LinkedHashSet<Uri> nodeRefList = Sets.newLinkedHashSet();\n-    for (Node tag : tags) {\n+    for (Element tag : tags) {\n       try {\n-        nodeRefList.add(\n-            contentBase.resolve(\n-                Uri.parse(tag.getAttributes().getNamedItem(attr).getNodeValue())));\n+        nodeRefList.add(contentBase.resolve(Uri.parse(tag.getAttribute(attr))));\n       } catch (IllegalArgumentException e) {\n         // Same behavior as JavascriptTagMerger\n         // Perhaps switch to ignoring script src instead?\n@@ -315,8 +314,7 @@ public boolean apply(@Nullable Node node) {\n     for (int i = 0; i < tags.size(); i++) {\n       if (i < concatented.size()) {\n         // Set new URLs into existing tags\n-        tags.get(i).getAttributes().getNamedItem(attr).setNodeValue(\n-            concatented.get(i).toString());\n+        tags.get(i).setAttribute(attr, concatented.get(i).toString());\n       } else {\n         // Remove remainder\n         tags.get(i).getParentNode().removeChild(tags.get(i));\n@@ -357,12 +355,12 @@ public boolean apply(@Nullable Node node) {\n   }\n \n \n-  private Node getNextSiblingElement(Node n) {\n+  private Element getNextSiblingElement(Element elem) {\n+    Node n = elem;\n     n = n.getNextSibling();\n     while (n != null && n.getNodeType() != Node.ELEMENT_NODE) {\n       n = n.getNextSibling();\n     }\n-    return n;\n+    return (Element)n;\n   }\n-\n }",
                "raw_url": "https://github.com/apache/shindig/raw/3bccc913e23abc3eddb63f4f89e3cdc5c76a98f7/java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/HTMLContentRewriter.java",
                "sha": "69fdec97f29f2d2b105aa1a218544934ea9682a1",
                "status": "modified"
            }
        ],
        "message": "Fix NullPointerException reading non existent attribute on script tags. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@719144 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/0a4a23f49480c882c7857a6a1f48e43b4a69a88a",
        "patched_files": [
            "DomUtil.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "DomUtilTest.java"
        ]
    },
    "shindig_3f29b5e": {
        "bug_id": "shindig_3f29b5e",
        "commit": "https://github.com/apache/shindig/commit/3f29b5e3453e0a7c6af2fa620eb31d59e8c42bf4",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/shindig/blob/3f29b5e3453e0a7c6af2fa620eb31d59e8c42bf4/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/RenderingGadgetRewriter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/RenderingGadgetRewriter.java?ref=3f29b5e3453e0a7c6af2fa620eb31d59e8c42bf4",
                "deletions": 1,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/render/RenderingGadgetRewriter.java",
                "patch": "@@ -325,7 +325,8 @@ private void injectFeatureLibraries(Gadget gadget, Node headTag) throws GadgetEx\n       Iterator<String> missingIter = unsupported.iterator();\n       while (missingIter.hasNext()) {\n         String missing = missingIter.next();\n-        if (!features.get(missing).getRequired()) {\n+        Feature feature = features.get(missing);\n+        if (feature == null || !feature.getRequired()) {\n           missingIter.remove();\n         }\n       }",
                "raw_url": "https://github.com/apache/shindig/raw/3f29b5e3453e0a7c6af2fa620eb31d59e8c42bf4/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/RenderingGadgetRewriter.java",
                "sha": "ea90332223ebfb5a27cd242618a7a949ababfea8",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/shindig/blob/3f29b5e3453e0a7c6af2fa620eb31d59e8c42bf4/java/gadgets/src/test/java/org/apache/shindig/gadgets/render/RenderingGadgetRewriterTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/render/RenderingGadgetRewriterTest.java?ref=3f29b5e3453e0a7c6af2fa620eb31d59e8c42bf4",
                "deletions": 0,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/render/RenderingGadgetRewriterTest.java",
                "patch": "@@ -298,6 +298,8 @@ public void featuresInjectedWhenAdded() throws Exception {\n \n     Gadget gadget = makeGadgetWithSpec(gadgetXml);\n     gadget.addFeature(\"foo\");\n+    // add non existing feature,\n+    gadget.addFeature(\"do-not-exists\");\n \n     featureRegistry.addInline(\"foo\", \"foo_content();\");\n ",
                "raw_url": "https://github.com/apache/shindig/raw/3f29b5e3453e0a7c6af2fa620eb31d59e8c42bf4/java/gadgets/src/test/java/org/apache/shindig/gadgets/render/RenderingGadgetRewriterTest.java",
                "sha": "016ab0a305434341bff2c950697cdd5e8ee54206",
                "status": "modified"
            }
        ],
        "message": "SHINDIG-1133 | Patch from Gilles DEVAUX | NullPointerException in RenderingGadgetRewriter\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@799035 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/91fdfa0ab9a1f61cac20a8c21e50037942d028d1",
        "patched_files": [
            "RenderingGadgetRewriter.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "RenderingGadgetRewriterTest.java"
        ]
    },
    "shindig_4bc38d7": {
        "bug_id": "shindig_4bc38d7",
        "commit": "https://github.com/apache/shindig/commit/4bc38d778b18272664f4dc23af21ea5cc87d5996",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/shindig/blob/4bc38d778b18272664f4dc23af21ea5cc87d5996/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetContext.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetContext.java?ref=4bc38d778b18272664f4dc23af21ea5cc87d5996",
                "deletions": 2,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetContext.java",
                "patch": "@@ -132,18 +132,25 @@ public UserPrefs getUserPrefs() {\n   public SecurityToken getToken() {\n     return delegate == null ? null : delegate.getToken();\n   }\n-  \n+\n   /**\n    * @return The user agent string, or null if not present.\n    */\n   public String getUserAgent() {\n     return delegate == null ? null : delegate.getUserAgent();\n   }\n-  \n+\n   /**\n    * @return Whether the gadget output should be sanitized.\n    */\n   public boolean getSanitize() {\n     return delegate == null ? false : delegate.getSanitize();\n   }\n+\n+  /**\n+   * @return Whether the gadget output should be cajoled.\n+   */\n+  public boolean getCajoled() {\n+    return delegate == null ? false : delegate.getCajoled();\n+  }\n }",
                "raw_url": "https://github.com/apache/shindig/raw/4bc38d778b18272664f4dc23af21ea5cc87d5996/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetContext.java",
                "sha": "a8b3309d0fd55a2fb48be8e9599c4644c7d0f8ad",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/shindig/blob/4bc38d778b18272664f4dc23af21ea5cc87d5996/java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/GadgetsHandlerService.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/GadgetsHandlerService.java?ref=4bc38d778b18272664f4dc23af21ea5cc87d5996",
                "deletions": 3,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/GadgetsHandlerService.java",
                "patch": "@@ -163,9 +163,12 @@ public GadgetsHandlerService(TimeSource timeSource, Processor processor,\n \n     GadgetContext context = new MetadataGadgetContext(request);\n     Gadget gadget = processor.process(context);\n-    String iframeUrl =\n-        isFieldIncluded(fields, \"iframeurl\")  ?\n-            iframeUriManager.makeRenderingUri(gadget).toString() : null;\n+    boolean needIfrUrl = isFieldIncluded(fields, \"iframeurl\");\n+    if (needIfrUrl && gadget.getCurrentView() == null) {\n+      throw new ProcessingException(\"View \" + request.getView() + \" does not exist\",\n+          HttpResponse.SC_BAD_REQUEST);\n+    }\n+    String iframeUrl = needIfrUrl ? iframeUriManager.makeRenderingUri(gadget).toString() : null;\n     Boolean needsTokenRefresh =\n         isFieldIncluded(fields, \"needstokenrefresh\") ?\n             gadget.getAllFeatures().contains(\"auth-refresh\") : null;\n@@ -402,6 +405,11 @@ public SecurityToken getToken() {\n     public boolean getSanitize() {\n       return (request.getRenderingType() == GadgetsHandlerApi.RenderingType.SANITIZED);\n     }\n+\n+    @Override\n+    public boolean getCajoled() {\n+      return (request.getRenderingType() == GadgetsHandlerApi.RenderingType.IFRAME_CAJOLED);\n+    }\n   }\n \n   private SecurityToken convertAuthContext(GadgetsHandlerApi.AuthContext authContext,",
                "raw_url": "https://github.com/apache/shindig/raw/4bc38d778b18272664f4dc23af21ea5cc87d5996/java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/GadgetsHandlerService.java",
                "sha": "1be9e88824a95161ed17bfe984997ca7e6152b16",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/shindig/blob/4bc38d778b18272664f4dc23af21ea5cc87d5996/java/gadgets/src/main/java/org/apache/shindig/gadgets/uri/DefaultIframeUriManager.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/uri/DefaultIframeUriManager.java?ref=4bc38d778b18272664f4dc23af21ea5cc87d5996",
                "deletions": 1,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/uri/DefaultIframeUriManager.java",
                "patch": "@@ -140,7 +140,7 @@ public Uri makeRenderingUri(Gadget gadget) {\n       } else {\n         uri.setAuthority(gadgetUri.getAuthority());\n         uri.setScheme(gadgetUri.getScheme());\n-      }      \n+      }\n \n       // 4. Add the URL.\n       uri.addQueryParameter(Param.URL.getKey(), context.getUrl().toString());\n@@ -157,6 +157,9 @@ public Uri makeRenderingUri(Gadget gadget) {\n     addParam(uri, Param.DEBUG.getKey(), context.getDebug() ? \"1\" : \"0\", useTpl, false);\n     addParam(uri, Param.NO_CACHE.getKey(), context.getIgnoreCache() ? \"1\" : \"0\", useTpl, false);\n     addParam(uri, Param.SANITIZE.getKey(), context.getSanitize() ? \"1\" : \"0\", useTpl, false);\n+    if (context.getCajoled()) {\n+      addParam(uri, Param.CAJOLE.getKey(), \"1\", useTpl, false);\n+    }\n \n     // Add all UserPrefs\n     UserPrefs prefs = context.getUserPrefs();",
                "raw_url": "https://github.com/apache/shindig/raw/4bc38d778b18272664f4dc23af21ea5cc87d5996/java/gadgets/src/main/java/org/apache/shindig/gadgets/uri/DefaultIframeUriManager.java",
                "sha": "c8ff3291ab01968c3536ee9fb184e1e471eff9af",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/shindig/blob/4bc38d778b18272664f4dc23af21ea5cc87d5996/java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/FakeProcessor.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/FakeProcessor.java?ref=4bc38d778b18272664f4dc23af21ea5cc87d5996",
                "deletions": 0,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/FakeProcessor.java",
                "patch": "@@ -36,6 +36,7 @@\n   protected final Map<Uri, String> gadgets = Maps.newHashMap();\n   public static final Uri SPEC_URL = Uri.parse(\"http://example.org/g.xml\");\n   public static final Uri SPEC_URL2 = Uri.parse(\"http://example.org/g2.xml\");\n+  public static final Uri SPEC_URL3 = Uri.parse(\"http://example.org/g3.xml\");\n   public static final String SPEC_TITLE = \"JSON-TEST\";\n   public static final String SPEC_TITLE2 = \"JSON-TEST2\";\n   public static final int PREFERRED_HEIGHT = 100;\n@@ -65,6 +66,12 @@\n           \"<Content type=\\\"html\\\">Hello, world</Content>\" +\n           \"</Module>\";\n \n+  public static final String SPEC_XML3 =\n+      \"<Module>\" +\n+      \"<ModulePrefs title=\\\"\" + SPEC_TITLE2 + \"\\\"/>\" +\n+      \"<Content name=\\\"canvas\\\">Hello, world</Content>\" +\n+      \"</Module>\";\n+\n   private final FeatureRegistry featureRegistry;\n \n   public FakeProcessor() {\n@@ -75,6 +82,7 @@ public FakeProcessor(FeatureRegistry featureRegistry) {\n     super(null, null, null, null, null);\n     this.gadgets.put(FakeProcessor.SPEC_URL, FakeProcessor.SPEC_XML);\n     this.gadgets.put(FakeProcessor.SPEC_URL2, FakeProcessor.SPEC_XML2);\n+    this.gadgets.put(FakeProcessor.SPEC_URL3, FakeProcessor.SPEC_XML3);\n     this.featureRegistry = featureRegistry;\n   }\n ",
                "raw_url": "https://github.com/apache/shindig/raw/4bc38d778b18272664f4dc23af21ea5cc87d5996/java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/FakeProcessor.java",
                "sha": "9adf980881db264985a7c74c480fd774ef6e78bd",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/shindig/blob/4bc38d778b18272664f4dc23af21ea5cc87d5996/java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/GadgetsHandlerServiceTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/GadgetsHandlerServiceTest.java?ref=4bc38d778b18272664f4dc23af21ea5cc87d5996",
                "deletions": 2,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/GadgetsHandlerServiceTest.java",
                "patch": "@@ -105,7 +105,7 @@ public void testHandlerDataDelegation() throws Exception {\n   @Test\n   public void testGetMetadata() throws Exception {\n     GadgetsHandlerApi.MetadataRequest request = createMetadataRequest(\n-        FakeProcessor.SPEC_URL, CONTAINER, \"view\",\n+        FakeProcessor.SPEC_URL, CONTAINER, \"default\",\n         createAuthContext(null, null), ImmutableList.of(\"*\"));\n     EasyMock.expect(mockRegistry.getFeatures(EasyMock.isA(List.class)))\n         .andReturn(Lists.newArrayList(\"auth-refresh\"));\n@@ -144,6 +144,16 @@ public void testGetMetadataOnlyView() throws Exception {\n     verify();\n   }\n \n+  @Test(expected = ProcessingException.class)\n+  public void testGetMetadataNoView() throws Exception {\n+    GadgetsHandlerApi.MetadataRequest request = createMetadataRequest(\n+        FakeProcessor.SPEC_URL3, CONTAINER, \"invalid_view\",\n+        createAuthContext(null, null), ImmutableList.of(\"*\"));\n+    replay();\n+    GadgetsHandlerApi.MetadataResponse response =\n+        gadgetHandler.getMetadata(request);\n+  }\n+\n   @Test(expected = ProcessingException.class)\n   public void testGetMetadataNoContainer() throws Exception {\n     GadgetsHandlerApi.MetadataRequest request = createMetadataRequest(\n@@ -185,7 +195,7 @@ public void testGetMetadataBadGadget() throws Exception {\n   @Test\n   public void testGetMetadataNoToken() throws Exception {\n     GadgetsHandlerApi.MetadataRequest request = createMetadataRequest(\n-        FakeProcessor.SPEC_URL, CONTAINER, \"view\", null, ImmutableList.of(\"*\"));\n+        FakeProcessor.SPEC_URL, CONTAINER, \"default\", null, ImmutableList.of(\"*\"));\n     EasyMock.expect(mockRegistry.getFeatures(EasyMock.isA(List.class)))\n         .andReturn(Lists.newArrayList(\"auth-refresh\"));\n     replay();",
                "raw_url": "https://github.com/apache/shindig/raw/4bc38d778b18272664f4dc23af21ea5cc87d5996/java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/GadgetsHandlerServiceTest.java",
                "sha": "d52bcc08e1138cec4acb385bb8d1cf855b7b60ed",
                "status": "modified"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/shindig/blob/4bc38d778b18272664f4dc23af21ea5cc87d5996/java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/DefaultIframeUriManagerTest.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/DefaultIframeUriManagerTest.java?ref=4bc38d778b18272664f4dc23af21ea5cc87d5996",
                "deletions": 2,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/DefaultIframeUriManagerTest.java",
                "patch": "@@ -88,6 +88,7 @@ public void typeHtmlBasicOptions() throws Exception {\n         false,  // isDebug\n         false,  // ignoreCache\n         false,  // sanitize\n+        false,  // cajoled\n         prefs,  // spec-contained prefs\n         prefs,  // prefs supplied by the requester, same k/v as spec w/ default val for simplicity\n         false,  // no pref substitution needed, ergo prefs in fragment\n@@ -126,6 +127,51 @@ public void typeHtmlBasicOptions() throws Exception {\n     assertTrue(manager.addExtrasCalled());\n   }\n \n+  @Test\n+  public void typeHtmlCajoled() throws Exception {\n+    String prefKey = \"prefKey\";\n+    String prefVal = \"prefVal\";\n+    Map<String, String> prefs = Maps.newHashMap();\n+    prefs.put(prefKey, prefVal);\n+    List<String> features = Lists.newArrayList();\n+\n+    // Make the gadget.\n+    Gadget gadget = mockGadget(\n+        SPEC_URI.toString(),\n+        false,  // not type=url\n+        false,  // isDebug\n+        false,  // ignoreCache\n+        false,  // sanitize\n+        true,  // cajoled\n+        prefs,  // spec-contained prefs\n+        prefs,  // prefs supplied by the requester, same k/v as spec w/ default val for simplicity\n+        false,  // no pref substitution needed, ergo prefs in fragment\n+        features);\n+\n+    // Generate a default-option manager\n+    TestDefaultIframeUriManager manager = makeManager(\n+        false,   // security token beacon not required\n+        false);  // locked domain not required\n+\n+    // Generate URI, turn into UriBuilder for validation\n+    Uri result = manager.makeRenderingUri(gadget);\n+    assertNotNull(result);\n+\n+    UriBuilder uri = new UriBuilder(result);\n+    assertEquals(\"0\", uri.getQueryParameter(Param.SANITIZE.getKey()));\n+    assertEquals(\"1\", uri.getQueryParameter(Param.CAJOLE.getKey()));\n+    assertEquals(prefVal, uri.getFragmentParameter(\"up_\" + prefKey));\n+\n+    // Cajoled is and added param\n+    assertEquals(TYPE_HTML_NUM_BASE_PARAMS + 1, uri.getQueryParameters().size());\n+    assertEquals(1, uri.getFragmentParameters().size());\n+\n+    assertFalse(manager.tokenForRenderingCalled());\n+    assertTrue(manager.schemeCalled());\n+    assertTrue(manager.ldExclusionCalled());\n+    assertTrue(manager.addExtrasCalled());\n+  }\n+\n   @Test\n   public void typeHtmlBasicOptionsTpl() throws Exception {\n     String prefKey = \"prefKey\";\n@@ -141,6 +187,7 @@ public void typeHtmlBasicOptionsTpl() throws Exception {\n         false,  // isDebug\n         false,  // ignoreCache\n         false,  // sanitize\n+        false,  // cajoled\n         prefs,  // spec-contained prefs\n         prefs,  // prefs supplied by the requester, same k/v as spec w/ default val for simplicity\n         false,  // no pref substitution needed, ergo prefs in fragment\n@@ -198,6 +245,7 @@ public void typeUrlDefaultOptions() throws Exception {\n         true,   // isDebug\n         true,   // ignoreCache\n         true,   // sanitize\n+        false,  // cajoled\n         prefs,  // spec-contained prefs\n         prefs,  // prefs supplied by the requester, same k/v as spec w/ default val for simplicity\n         false,  // no pref substitution needed, ergo prefs in fragment\n@@ -252,6 +300,7 @@ public void typeUrlDefaultOptionsTpl() throws Exception {\n         true,   // isDebug\n         true,   // ignoreCache\n         true,   // sanitize\n+        false,  // cajoled\n         prefs,  // spec-contained prefs\n         prefs,  // prefs supplied by the requester, same k/v as spec w/ default val for simplicity\n         false,  // no pref substitution needed, ergo prefs in fragment\n@@ -596,15 +645,15 @@ public void containerConfigurationChanges() throws Exception {\n \n     Uri testUri = Uri.parse(\"http://foobar\" + LD_SUFFIX + \"/?url=http://example.com\");\n     assertEquals(UriStatus.INVALID_DOMAIN, manager.validateRenderingUri(testUri));\n-    \n+\n     config.newTransaction().addContainer(ImmutableMap\n         .<String, Object>builder()\n         .put(ContainerConfig.CONTAINER_KEY, ContainerConfig.DEFAULT_CONTAINER)\n         .put(LOCKED_DOMAIN_SUFFIX_KEY, LD_SUFFIX_ALT)\n         .build()).commit();\n     assertEquals(UriStatus.VALID_UNVERSIONED, manager.validateRenderingUri(testUri));\n   }\n-  \n+\n   private Uri makeValidationTestUri(String domain, String version) {\n     UriBuilder uri = new UriBuilder();\n     uri.setAuthority(domain);",
                "raw_url": "https://github.com/apache/shindig/raw/4bc38d778b18272664f4dc23af21ea5cc87d5996/java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/DefaultIframeUriManagerTest.java",
                "sha": "da6c94c8bfba1407d99b21bfb0009512a38d0885",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/shindig/blob/4bc38d778b18272664f4dc23af21ea5cc87d5996/java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/UriManagerTestBase.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/UriManagerTestBase.java?ref=4bc38d778b18272664f4dc23af21ea5cc87d5996",
                "deletions": 6,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/UriManagerTestBase.java",
                "patch": "@@ -51,35 +51,35 @@\n   // Used for \"feature-focused\" tests, eg. security token and locked domain\n   protected Gadget mockGadget(String... features) {\n     Map<String, String> prefs = Maps.newHashMap();\n-    return mockGadget(SPEC_URI.toString(), false, false, false, false, prefs, prefs,\n+    return mockGadget(SPEC_URI.toString(), false, false, false, false, false, prefs, prefs,\n         false, Lists.newArrayList(features));\n   }\n \n   // Used for prefs-focused tests\n   protected Gadget mockGadget(boolean prefsForRendering, Map<String, String> specPrefs,\n       Map<String, String> inPrefs) {\n-    return mockGadget(SPEC_URI.toString(), false, false, false, false, specPrefs,\n+    return mockGadget(SPEC_URI.toString(), false, false, false, false, false, specPrefs,\n         inPrefs, prefsForRendering, Lists.<String>newArrayList());\n   }\n \n   // Used for \"base\" tests.\n   protected Gadget mockGadget(String targetUrl, boolean isTypeUrl, boolean isDebug,\n-      boolean ignoreCache, boolean sanitize, Map<String, String> specPrefs,\n+      boolean ignoreCache, boolean sanitize, boolean cajoled, Map<String, String> specPrefs,\n       Map<String, String> inPrefs, boolean needsPrefSubst, List<String> features) {\n     return mockGadget(targetUrl, isTypeUrl, VIEW, LANG, COUNTRY, isDebug, ignoreCache,\n-        sanitize, specPrefs, inPrefs, needsPrefSubst, features);\n+        sanitize, cajoled, specPrefs, inPrefs, needsPrefSubst, features);\n   }\n \n   // Used for tests that don't care much about prefs or gadget type.\n   protected Gadget mockGadget(boolean isDebug, boolean ignoreCache) {\n     return mockGadget(SPEC_URI.toString(), false, isDebug, ignoreCache,\n-        false, Maps.<String, String>newHashMap(),\n+        false, false, Maps.<String, String>newHashMap(),\n         Maps.<String, String>newHashMap(), false, Lists.<String>newArrayList());\n   }\n \n   // Actually generates the mock gadget. Used for error (null value) tests.\n   protected Gadget mockGadget(String targetUrl, boolean isTypeUrl, String viewStr, String lang,\n-      String country, boolean isDebug, boolean ignoreCache, boolean sanitize,\n+      String country, boolean isDebug, boolean ignoreCache, boolean sanitize, boolean cajoled,\n       Map<String, String> specPrefs, Map<String, String> inPrefs, boolean needsPrefSubst, List<String> features) {\n     View view = createMock(View.class);\n     ModulePrefs modulePrefs = createMock(ModulePrefs.class);\n@@ -107,6 +107,7 @@ protected Gadget mockGadget(String targetUrl, boolean isTypeUrl, String viewStr,\n     expect(context.getIgnoreCache()).andReturn(ignoreCache).anyTimes();\n     expect(context.getToken()).andReturn(null).anyTimes();\n     expect(context.getSanitize()).andReturn(sanitize).anyTimes();\n+    expect(context.getCajoled()).andReturn(cajoled).anyTimes();\n \n     // All Features (doesn't distinguish between transitive and not)\n     expect(gadget.getAllFeatures()).andReturn(features).anyTimes();",
                "raw_url": "https://github.com/apache/shindig/raw/4bc38d778b18272664f4dc23af21ea5cc87d5996/java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/UriManagerTestBase.java",
                "sha": "06043e57333f4ff1d2b744ddb2a36aaebb49c3af",
                "status": "modified"
            }
        ],
        "message": "Support caja santization for GadgetHandler metadata | http://codereview.appspot.com/4252069/\nAnd fix NPE for metadata request for view that does not exists\n\ngit-svn-id: https://svn.apache.org/repos/asf/shindig/trunk@1080807 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/f77da8de5587c7f3dc5e31ce8da99aa5646e36b4",
        "patched_files": [
            "GadgetsHandlerService.java",
            "UriManagerTestBase.java",
            "GadgetContext.java",
            "DefaultIframeUriManager.java",
            "FakeProcessor.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "GadgetsHandlerServiceTest.java",
            "DefaultIframeUriManagerTest.java"
        ]
    },
    "shindig_51efa53": {
        "bug_id": "shindig_51efa53",
        "commit": "https://github.com/apache/shindig/commit/51efa538c83adde41d17e2b1c176055f290b9315",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/shindig/blob/51efa538c83adde41d17e2b1c176055f290b9315/java/gadgets/src/main/java/org/apache/shindig/gadgets/uri/DefaultProxyUriManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/uri/DefaultProxyUriManager.java?ref=51efa538c83adde41d17e2b1c176055f290b9315",
                "deletions": 1,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/uri/DefaultProxyUriManager.java",
                "patch": "@@ -95,7 +95,7 @@ public void setUseStrictParsing(@Named(\"shindig.uri.proxy.use-strict-parsing\") S\n     Map<Uri, String> versions = Maps.newHashMap();\n     if (versioner != null) {\n       List<String> versionList = versioner.version(resourceUris, resources.get(0).getContainer());\n-      if (versionList.size() == resources.size()) {\n+      if (versionList != null && versionList.size() == resources.size()) {\n         // This should always be the case.\n         // Should we error if not, or just WARNING?\n         Iterator<String> versionIt = versionList.iterator();",
                "raw_url": "https://github.com/apache/shindig/raw/51efa538c83adde41d17e2b1c176055f290b9315/java/gadgets/src/main/java/org/apache/shindig/gadgets/uri/DefaultProxyUriManager.java",
                "sha": "e5b8ebd3c66d46fa623bbf53edb261cb86b9a6a5",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/shindig/blob/51efa538c83adde41d17e2b1c176055f290b9315/java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/DefaultProxyUriManagerTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/DefaultProxyUriManagerTest.java?ref=51efa538c83adde41d17e2b1c176055f290b9315",
                "deletions": 2,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/DefaultProxyUriManagerTest.java",
                "patch": "@@ -231,6 +231,18 @@ public void batchedProxyChainedStyle() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void batchedProxyChainedStyleNoVerisons() throws Exception {\n+    String host = \"host.com\";\n+    String path = \"/proxy/\" + DefaultProxyUriManager.CHAINED_PARAMS_TOKEN + \"/path\";\n+    List<Uri> resources = ImmutableList.<Uri>of(RESOURCE_1, RESOURCE_2, RESOURCE_3);\n+    List<Uri> uris = makeAndGet(host, path, true, true, resources);\n+    assertEquals(3, uris.size());\n+    for (int i = 0; i < 3; ++i) {\n+      verifyChainedUri(resources.get(i), uris.get(i), true, true, null, false, host, path);\n+    }\n+  }\n+\n   @Test\n   public void validateQueryStyleUnversioned() throws Exception {\n     // Validate tests also serve as end-to-end tests: create, unpack.\n@@ -453,8 +465,13 @@ private DefaultProxyUriManager makeManager(String host, String path,\n   @SuppressWarnings(\"unchecked\")\n   private ProxyUriManager.Versioner makeVersioner(UriStatus status, String... versions) {\n     ProxyUriManager.Versioner versioner = createMock(ProxyUriManager.Versioner.class);\n-    expect(versioner.version(isA(List.class), eq(CONTAINER)))\n-        .andReturn(Lists.newArrayList(versions)).anyTimes();\n+    if (versions.length > 0) {\n+      expect(versioner.version(isA(List.class), eq(CONTAINER)))\n+          .andReturn(Lists.newArrayList(versions)).anyTimes();\n+    } else {\n+      expect(versioner.version(isA(List.class), eq(CONTAINER)))\n+          .andReturn(null).anyTimes();\n+    }\n     expect(versioner.validate(isA(Uri.class), eq(CONTAINER), isA(String.class)))\n         .andReturn(status).anyTimes();\n     replay(versioner);",
                "raw_url": "https://github.com/apache/shindig/raw/51efa538c83adde41d17e2b1c176055f290b9315/java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/DefaultProxyUriManagerTest.java",
                "sha": "4e9c8bff5d5dad4faa1f1f7b45da00e9eed2c7e1",
                "status": "modified"
            }
        ],
        "message": "NPE safety for DefaultProxyUriManager.\n\nPatch supplied by Ziv Horesh.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/shindig/trunk@937101 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/c519c3eb19b38412b2920f39c0b9bede63dc7d6d",
        "patched_files": [
            "DefaultProxyUriManager.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "DefaultProxyUriManagerTest.java"
        ]
    },
    "shindig_5224ecc": {
        "bug_id": "shindig_5224ecc",
        "commit": "https://github.com/apache/shindig/commit/5224ecc97e97fb53ff2997cd72bd7bc245fe0586",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/shindig/blob/5224ecc97e97fb53ff2997cd72bd7bc245fe0586/java/common/src/main/java/org/apache/shindig/common/uri/Uri.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/main/java/org/apache/shindig/common/uri/Uri.java?ref=5224ecc97e97fb53ff2997cd72bd7bc245fe0586",
                "deletions": 2,
                "filename": "java/common/src/main/java/org/apache/shindig/common/uri/Uri.java",
                "patch": "@@ -171,8 +171,9 @@ public Uri resolve(Uri relative) {\n         result.setPath(relativePath);\n       } else {\n         // resolve a relative reference\n-        int endindex = path.lastIndexOf('/') + 1;\n-        result.setPath(normalizePath(path.substring(0, endindex) + relativePath));\n+        String basePath = path != null ? path : \"/\";\n+        int endindex = basePath.lastIndexOf('/') + 1;\n+        result.setPath(normalizePath(basePath.substring(0, endindex) + relativePath));\n       }\n     }\n     Uri resolved = result.toUri();",
                "raw_url": "https://github.com/apache/shindig/raw/5224ecc97e97fb53ff2997cd72bd7bc245fe0586/java/common/src/main/java/org/apache/shindig/common/uri/Uri.java",
                "sha": "58ad73011a95f36d027be56f6ab811d15833b8fb",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/shindig/blob/5224ecc97e97fb53ff2997cd72bd7bc245fe0586/java/common/src/test/java/org/apache/shindig/common/uri/UriTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/test/java/org/apache/shindig/common/uri/UriTest.java?ref=5224ecc97e97fb53ff2997cd72bd7bc245fe0586",
                "deletions": 0,
                "filename": "java/common/src/test/java/org/apache/shindig/common/uri/UriTest.java",
                "patch": "@@ -199,6 +199,14 @@ public void resolvePathRelative() throws Exception {\n \n     assertEquals(\"http://example.org/foo/bar/wee\", base.resolve(other).toString());\n   }\n+  \n+  @Test\n+  public void resolvePathRelativeToNullPath() throws Exception {\n+    Uri base = new UriBuilder().setScheme(\"http\").setAuthority(\"example.org\").toUri();\n+    Uri other = Uri.parse(\"dir\");\n+    \n+    assertEquals(\"http://example.org/dir\", base.resolve(other).toString());\n+  }\n \n   @Test\n   public void resolvePathAbsolute() throws Exception {",
                "raw_url": "https://github.com/apache/shindig/raw/5224ecc97e97fb53ff2997cd72bd7bc245fe0586/java/common/src/test/java/org/apache/shindig/common/uri/UriTest.java",
                "sha": "c9f5a465b22808970bf4b61335925a7f4657e57d",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/shindig/blob/5224ecc97e97fb53ff2997cd72bd7bc245fe0586/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/GadgetHtmlParser.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/GadgetHtmlParser.java?ref=5224ecc97e97fb53ff2997cd72bd7bc245fe0586",
                "deletions": 1,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/GadgetHtmlParser.java",
                "patch": "@@ -236,7 +236,15 @@ public final void parseFragment(String source, Node result) throws GadgetExcepti\n         return;\n       }\n     }\n-    DocumentFragment fragment = parseFragmentImpl(source);\n+    \n+    DocumentFragment fragment = null;\n+    try {\n+      fragment = parseFragmentImpl(source);\n+    } catch (Exception e) {\n+      // DOMException is a RuntimeException\n+      throw new GadgetException(Code.HTML_PARSE_ERROR, e);\n+    }\n+    \n     reprocessScriptForOpenSocial(fragment);\n     if (shouldCache) {\n       fragmentCache.addElement(key, fragment);",
                "raw_url": "https://github.com/apache/shindig/raw/5224ecc97e97fb53ff2997cd72bd7bc245fe0586/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/GadgetHtmlParser.java",
                "sha": "3be7fd2a6e9773c5cbe51fc501d387e0ca6a7d77",
                "status": "modified"
            }
        ],
        "message": "1. Fix subtle NPE occurring when UriBuilder-generated Uri with null path is base in a relative resolution.\n2. Catch Runtime DOMException in fragment parser API.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@905859 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/f0c83221b71279dc917ac3be8ed28e4e117e9a11",
        "patched_files": [
            "Uri.java",
            "GadgetHtmlParser.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "UriTest.java"
        ]
    },
    "shindig_523ce10": {
        "bug_id": "shindig_523ce10",
        "commit": "https://github.com/apache/shindig/commit/523ce105dd231488a7c07015175a088d3c6fe329",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/shindig/blob/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java?ref=523ce105dd231488a7c07015175a088d3c6fe329",
                "deletions": 9,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java",
                "patch": "@@ -135,11 +135,13 @@ public String getTitle() {\n    */\n   public URL getTitleURL() {\n     URL ret = null;\n-    String urlStr = baseSpec.getTitleURL().toString();\n-    try {\n-      ret = new URL(substitutions.substitute(urlStr));\n-    } catch (MalformedURLException e) {\n-      return null;\n+    if (baseSpec.getTitleURL() != null) {\n+      String urlStr = baseSpec.getTitleURL().toString();\n+      try {\n+        ret = new URL(substitutions.substitute(urlStr));\n+      } catch (MalformedURLException e) {\n+        return null;\n+      }\n     }\n     return ret;\n   }\n@@ -264,12 +266,9 @@ public ContentType getContentType() {\n \n   /**\n    * @return URL of gadget to render of type == URL; null if malformed/missing\n+   * @throws IllegalStateException if contentType is not URL.\n    */\n   public URL getContentHref() {\n-    if (getContentType() != ContentType.URL) {\n-      return null;\n-    }\n-\n     URL ret = null;\n     String urlStr = baseSpec.getContentHref().toString();\n     try {\n@@ -282,6 +281,7 @@ public URL getContentHref() {\n \n   /**\n    * @return Gadget contents with all substitutions applied\n+   * @throws IllegalStateException if contentType is not HTML.\n    */\n   public String getContentData() {\n     return substitutions.substitute(baseSpec.getContentData());",
                "raw_url": "https://github.com/apache/shindig/raw/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java",
                "sha": "6f31f2cbd4ee8a7fc9ea61e157da51b9bb017fe1",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/shindig/blob/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpec.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpec.java?ref=523ce105dd231488a7c07015175a088d3c6fe329",
                "deletions": 0,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpec.java",
                "patch": "@@ -77,7 +77,19 @@\n   }\n \n   public ContentType getContentType();\n+\n+  /**\n+   * Must be a URL type gadget.\n+   *\n+   * @return The URL for this gadget spec.\n+   * @throws IllegalStateException if contentType is not URL.\n+   */\n   public URL getContentHref();\n+\n+  /**\n+   * @return The HTML content for this gadget spec.\n+   * @throws IllegalStateException if contentType is not HTML.\n+   */\n   public String getContentData();\n \n   /**",
                "raw_url": "https://github.com/apache/shindig/raw/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpec.java",
                "sha": "988b0ac9ebb2591f874b9df4875247ed00ef91b2",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/shindig/blob/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpecParser.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpecParser.java?ref=523ce105dd231488a7c07015175a088d3c6fe329",
                "deletions": 0,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpecParser.java",
                "patch": "@@ -507,10 +507,16 @@ public ContentType getContentType() {\n     }\n \n     public URL getContentHref() {\n+      if (contentType != ContentType.URL) {\n+        throw new IllegalStateException(\"contentType must be URL\");\n+      }\n       return contentHref;\n     }\n \n     public String getContentData() {\n+      if (contentType != ContentType.HTML) {\n+        throw new IllegalStateException(\"contentType must be HTML\");\n+      }\n       return contentData;\n     }\n   }",
                "raw_url": "https://github.com/apache/shindig/raw/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpecParser.java",
                "sha": "8e5c7f55eb741b0faa54522bbd0e70108a8aa5ec",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/shindig/blob/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/Substitutions.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/Substitutions.java?ref=523ce105dd231488a7c07015175a088d3c6fe329",
                "deletions": 7,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/Substitutions.java",
                "patch": "@@ -106,19 +106,21 @@ public void addSubstitutions(Type type, Map<String, String> entries) {\n    *\n    * @param input\n    *        The base string, with substitution markers.\n-   * @return The substituted string.\n+   * @return The substituted string or null if {@code input} is null.\n    */\n   public String substitute(String input) {\n-    for (Type type : Type.values()) {\n-      input = substituteType(type, input);\n+    if (input != null) {\n+      for (Type type : Type.values()) {\n+        input = substituteType(type, input);\n+      }\n     }\n     return input;\n   }\n \n   /**\n    * Performs string substitution only for the specified type. If no\n-   * substitution for the given string was provided, the output is left\n-   * untouched.\n+   * substitution for {@code input} was provided or {@code input} is null,\n+   * the output is left untouched.\n    *\n    * @param type\n    *        The type you wish to perform substitutions for.\n@@ -127,8 +129,8 @@ public String substitute(String input) {\n    * @return The substituted string.\n    */\n   public String substituteType(Type type, String input) {\n-    if (!input.contains(type.prefix) ||\n-         substitutions.get(type).size() == 0) {\n+    if (input == null || substitutions.get(type).size() == 0 ||\n+        !input.contains(type.prefix)) {\n       return input;\n     }\n ",
                "raw_url": "https://github.com/apache/shindig/raw/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/Substitutions.java",
                "sha": "54b4a84272f3fcd40e8363b576ac36858eb5efb5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/shindig/blob/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/Utf8InputStream.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/Utf8InputStream.java?ref=523ce105dd231488a7c07015175a088d3c6fe329",
                "deletions": 2,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/Utf8InputStream.java",
                "patch": "@@ -13,7 +13,6 @@\n  */\n package org.apache.shindig.gadgets;\n \n-import java.io.IOException;\n import java.io.InputStream;\n \n /**\n@@ -24,8 +23,9 @@\n   private int position = 0;\n \n   @Override\n-  public int read() throws IOException {\n+  public int read() {\n     if (position == 0\n+        && content.length >= 3\n         && content[0] == (byte)0xEF\n         && content[1] == (byte)0xBB\n         && content[2] == (byte)0xBF) {",
                "raw_url": "https://github.com/apache/shindig/raw/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/Utf8InputStream.java",
                "sha": "f349abd9d16fbbb5517099d1004f527676ba05f8",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/shindig/blob/26be495c579c134237976ae4643fc064e2766915/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/JsonpProxyServlet.java",
                "changes": 146,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/JsonpProxyServlet.java?ref=26be495c579c134237976ae4643fc064e2766915",
                "deletions": 146,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/http/JsonpProxyServlet.java",
                "patch": "@@ -1,146 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.shindig.gadgets.http;\n-\n-import org.apache.shindig.gadgets.BasicRemoteContentFetcher;\n-import org.apache.shindig.gadgets.RemoteContent;\n-\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.util.Date;\n-\n-public class JsonpProxyServlet extends HttpServlet {\n-  private static final String UNPARSEABLE_CRUFT = \"throw 1; < don't be evil' >\";\n-  private static final int TWO_HOURS_IN_MS = 7200000;\n-  private static final int ONE_HOUR_IN_SECS = 3600;\n-\n-  @Override\n-  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n-      throws ServletException, IOException {\n-    // TODO: If this request is coming in on a Host: that does not match\n-    // the configured gadget rendering host, we should check for edit tokens\n-    // somehow.\n-\n-    // Validate url= parameter\n-    URL origin_url = extractAndValidateUrl(request);\n-\n-    // Fetch the content and convert it into JSON.\n-    BasicRemoteContentFetcher fetcher = new BasicRemoteContentFetcher(1024*1024);\n-    RemoteContent results = fetcher.fetch(origin_url);\n-    String response_template = buildResponse(origin_url.toString(), results);\n-\n-    // Fill out the response.\n-    setCachingHeaders(response);\n-    PrintWriter pw = response.getWriter();\n-    pw.write(response_template);\n-  }\n-\n-  /**\n-   * Gets the url= parameter from the request and applies some basic sanity\n-   * checking.\n-   *\n-   * @param request The HTTP request from the browser.\n-   * @return A URL object of the URL\n-   * @throws ServletException if the URL fails security checks or is malformed.\n-   */\n-  private URL extractAndValidateUrl(HttpServletRequest request)\n-      throws ServletException {\n-    String url = request.getParameter(\"url\");\n-    if (url == null) {\n-      throw new ServletException(\"Missing url= parameter\");\n-    }\n-\n-    if (!url.startsWith(\"http://\")) {\n-      throw new ServletException(\"url= parameter does not start with http://\");\n-    }\n-\n-    URL origin_url;\n-    try {\n-      origin_url = new URL(url);\n-    } catch (MalformedURLException e) {\n-      throw new ServletException(\"malformed url= parameter\");\n-    }\n-    return origin_url;\n-  }\n-\n-  /**\n-   * Sets HTTP headers that instruct the browser to cache for 2 hours.\n-   *\n-   * @param response The HTTP response\n-   */\n-  private void setCachingHeaders(HttpServletResponse response) {\n-    // TODO: figure out why we're not using the same amount of time for these\n-    // headers.\n-    response.setHeader(\"Cache-Control\", \"public,max-age=\" + ONE_HOUR_IN_SECS);\n-    response.setDateHeader(\"Expires\", new Date().getTime() + TWO_HOURS_IN_MS);\n-  }\n-\n-  /**\n-   * Converts the results of the fetch into a response suitable for parsing by\n-   * JavaScript.\n-   *\n-   * @param url             Canonical representation of the URL\n-   * @param origin_response The results of the fetch\n-   * @return A string suitable for writing to the browser.\n-   */\n-  private String buildResponse(String url,\n-                               RemoteContent origin_response) {\n-    String escaped_output =\n-        javaScriptStringEscape(new String(origin_response.getByteArray()));\n-\n-    String response_template = UNPARSEABLE_CRUFT +\n-        \"{ '{{URL}}' : \" +\n-        \"{ 'body': '{{CONTENT}}', \" +\n-        \"  'rc': {{HTTP_STATUS_CODE}} } }\";\n-\n-    response_template =\n-        response_template.replace(\"{{URL}}\", javaScriptStringEscape(url));\n-    response_template =\n-        response_template.replace(\"{{CONTENT}}\", escaped_output);\n-    response_template = response_template\n-        .replace(\"{{HTTP_STATUS_CODE}}\",\n-            Integer.toString(origin_response.getHttpStatusCode()));\n-    return response_template;\n-  }\n-\n-  /**\n-   * Escapes a string so that it can be used as a JavaScript literal.\n-   * <p/>\n-   * TODO: fix this to support proper JS escaping.  This doesn't handle Unicode\n-   * characters correctly.\n-   *\n-   * @param unescaped The unescaped string.\n-   * @return a string with all JavaScript metacharacters escaped\n-   */\n-  private String javaScriptStringEscape(String unescaped) {\n-    StringBuilder escaped = new StringBuilder();\n-    for (int i = 0; i < unescaped.length(); i++) {\n-      char c = unescaped.charAt(i);\n-      if (Character.isDigit(c) || Character.isLetter(c) ||\n-          Character.isWhitespace(c)) {\n-        escaped.append(c);\n-      } else {\n-        escaped.append(\"\\\\x\");\n-        escaped.append(Integer.toHexString(c));\n-      }\n-    }\n-    return escaped.toString();\n-  }\n-}",
                "raw_url": "https://github.com/apache/shindig/raw/26be495c579c134237976ae4643fc064e2766915/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/JsonpProxyServlet.java",
                "sha": "db99943c4e2b86f25f22d9c0f9ce78b42907aa1d",
                "status": "removed"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/shindig/blob/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/ProxyServlet.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/ProxyServlet.java?ref=523ce105dd231488a7c07015175a088d3c6fe329",
                "deletions": 1,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/http/ProxyServlet.java",
                "patch": "@@ -28,7 +28,8 @@\n   private final static ProxyHandler handler = new ProxyHandler();\n   protected void doGet(HttpServletRequest request, HttpServletResponse response)\n       throws ServletException, IOException {\n-    if (request.getServletPath().equals(\"/gadgets/jsonp\")) {\n+    String output = request.getParameter(\"output\");\n+    if (output != null && output.equals(\"js\")) {\n       handler.fetchJson(request, response);\n     } else {\n       handler.fetch(request, response);",
                "raw_url": "https://github.com/apache/shindig/raw/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/ProxyServlet.java",
                "sha": "f0ff6940e58aec7dbe937dd7c296ee93507b9ed6",
                "status": "modified"
            }
        ],
        "message": "      * Fixed NPE in substitute() and  substituteType() when input is null, and\n          check if there are no subs for that type before checking input for\n          its prefix since that is much faster.\n      * GadgetSpec.getContentData/Href() throw ISE if not correct type.\n      * Gadget and ParsedGadgetSpec honor this contract.\n\n      * Resolved proxy handler confusion by adding an explicit output parameter to /proxy and eliminating /jsonp. Fixed a potenatial runtime exception in Utf8InputStream.\n\n      * Fix handling of null title-url.\n\nContributors: dharkness@google.com, lryan@google.com, etnu@google.com (still getting SVN access set up; I'm proxying in the meantime)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@604358 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/26be495c579c134237976ae4643fc064e2766915",
        "patched_files": [
            "Gadget.java",
            "ProxyServlet.java",
            "Substitutions.java",
            "GadgetSpec.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "GadgetSpecTest.java",
            "SubstitutionsTest.java",
            "ProxyServletTest.java",
            "GadgetTest.java"
        ]
    },
    "shindig_63fcba3": {
        "bug_id": "shindig_63fcba3",
        "commit": "https://github.com/apache/shindig/commit/63fcba3b4299de5708347abdeb8634ae9e8fa0c7",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/shindig/blob/63fcba3b4299de5708347abdeb8634ae9e8fa0c7/features/src/main/javascript/features/globals/globals.js",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/features/src/main/javascript/features/globals/globals.js?ref=63fcba3b4299de5708347abdeb8634ae9e8fa0c7",
                "deletions": 2,
                "filename": "features/src/main/javascript/features/globals/globals.js",
                "patch": "@@ -2,10 +2,10 @@\n  * @namespace The global gadgets namespace\n  * @type {Object} \n  */\n-var gadgets = {}; \n+var gadgets = gadgets || {}; \n \n /** \n  * @namespace The global shindig namespace, used for shindig specific extensions and data\n  * @type {Object} \n  */\n-var shindig = {};\n+var shindig = shindig || {};",
                "raw_url": "https://github.com/apache/shindig/raw/63fcba3b4299de5708347abdeb8634ae9e8fa0c7/features/src/main/javascript/features/globals/globals.js",
                "sha": "5285a9936f67f210212126e2d3413db632fa8e6d",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/shindig/blob/63fcba3b4299de5708347abdeb8634ae9e8fa0c7/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/GadgetHtmlParser.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/GadgetHtmlParser.java?ref=63fcba3b4299de5708347abdeb8634ae9e8fa0c7",
                "deletions": 5,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/GadgetHtmlParser.java",
                "patch": "@@ -21,7 +21,6 @@\n import org.apache.shindig.common.cache.CacheProvider;\n import org.apache.shindig.common.util.HashUtil;\n import org.apache.shindig.gadgets.GadgetException;\n-import org.apache.shindig.gadgets.GadgetException.Code;\n import org.apache.shindig.gadgets.parse.nekohtml.NekoSimplifiedHtmlParser;\n \n import com.google.common.collect.BiMap;\n@@ -31,8 +30,10 @@\n import com.google.inject.Inject;\n import com.google.inject.Provider;\n import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMImplementation;\n import org.w3c.dom.Document;\n import org.w3c.dom.DocumentFragment;\n+import org.w3c.dom.DOMException;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n \n@@ -50,6 +51,7 @@\n   private Cache<String, Document> documentCache;\n   private Cache<String, DocumentFragment> fragmentCache;\n   private Provider<HtmlSerializer> serializerProvider = new DefaultSerializerProvider();\n+  protected final DOMImplementation documentFactory;\n \n   /**\n    * Allowed tag names for OpenSocial Data and template blocks.\n@@ -62,6 +64,10 @@\n    */\n   public static final BiMap<String, String> SCRIPT_TYPE_TO_OSML_TAG = ImmutableBiMap.of(\n       \"text/os-data\", OSML_DATA_TAG, \"text/os-template\", OSML_TEMPLATE_TAG);\n+  \n+  protected GadgetHtmlParser(DOMImplementation documentFactory) {\n+    this.documentFactory = documentFactory;\n+  }\n \n   @Inject\n   public void setCacheProvider(CacheProvider cacheProvider) {\n@@ -99,9 +105,9 @@ public final Document parseDom(String source) throws GadgetException {\n         document = parseDomImpl(source);\n       } catch (GadgetException e) {\n         throw e;\n-      } catch (Exception e) {\n+      } catch (DOMException e) {\n         // DOMException is a RuntimeException\n-        throw new GadgetException(Code.HTML_PARSE_ERROR, e);\n+        return errorDom(e);\n       }\n \n       HtmlSerialization.attach(document, serializerProvider.get(), source);\n@@ -240,9 +246,10 @@ public final void parseFragment(String source, Node result) throws GadgetExcepti\n     DocumentFragment fragment = null;\n     try {\n       fragment = parseFragmentImpl(source);\n-    } catch (Exception e) {\n+    } catch (DOMException e) {\n       // DOMException is a RuntimeException\n-      throw new GadgetException(Code.HTML_PARSE_ERROR, e);\n+      appendParseException(result, e);\n+      return;\n     }\n     \n     reprocessScriptForOpenSocial(fragment);\n@@ -261,6 +268,27 @@ private void copyFragment(DocumentFragment source, Node dest) {\n     }    \n   }\n   \n+  protected Document errorDom(DOMException e) {\n+    // Create a bare-bones DOM whose body is just error text.\n+    // We do this to echo information to the developer that originally\n+    // supplied the data, since doing so is more useful than simply\n+    // returning a black-box HTML error code stemming from an NPE or other condition downstream.\n+    // The method is protected to allow overriding of this behavior.\n+    Document doc = documentFactory.createDocument(null, null, null);\n+    Node html = doc.createElement(\"html\");\n+    html.appendChild(doc.createElement(\"head\"));\n+    Node body = doc.createElement(\"body\");\n+    appendParseException(body, e);\n+    html.appendChild(body);\n+    doc.appendChild(html);\n+    return doc;\n+  }\n+  \n+  private void appendParseException(Node node, DOMException e) {\n+    node.appendChild(node.getOwnerDocument().createTextNode(\n+        GadgetException.Code.HTML_PARSE_ERROR.toString() + \": \" + e.toString()));\n+  }\n+  \n   protected boolean shouldCache() {\n     return documentCache != null && documentCache.getCapacity() != 0;\n   }",
                "raw_url": "https://github.com/apache/shindig/raw/63fcba3b4299de5708347abdeb8634ae9e8fa0c7/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/GadgetHtmlParser.java",
                "sha": "e832e6b2d0ab7294f7fc1f3157ed47f33a043db7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/shindig/blob/63fcba3b4299de5708347abdeb8634ae9e8fa0c7/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/caja/CajaHtmlParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/caja/CajaHtmlParser.java?ref=63fcba3b4299de5708347abdeb8634ae9e8fa0c7",
                "deletions": 3,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/caja/CajaHtmlParser.java",
                "patch": "@@ -40,11 +40,9 @@\n import org.w3c.dom.Node;\n \n public class CajaHtmlParser extends GadgetHtmlParser {\n-  private final DOMImplementation documentFactory;\n-\n   @Inject\n   public CajaHtmlParser(DOMImplementation documentFactory) {\n-    this.documentFactory = documentFactory;\n+    super(documentFactory);\n   }\n   \n   @Override",
                "raw_url": "https://github.com/apache/shindig/raw/63fcba3b4299de5708347abdeb8634ae9e8fa0c7/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/caja/CajaHtmlParser.java",
                "sha": "7936e1159e41e95a5e6496c26a075468512cd09b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/shindig/blob/63fcba3b4299de5708347abdeb8634ae9e8fa0c7/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/nekohtml/NekoSimplifiedHtmlParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/nekohtml/NekoSimplifiedHtmlParser.java?ref=63fcba3b4299de5708347abdeb8634ae9e8fa0c7",
                "deletions": 3,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/nekohtml/NekoSimplifiedHtmlParser.java",
                "patch": "@@ -88,11 +88,9 @@\n   private static final Map<String, HTMLElements.Element> OSML_ELEMENTS = ImmutableMap.of(\n       OSML_TEMPLATE_TAG, OSML_TEMPLATE_ELEMENT, OSML_DATA_TAG, OSML_DATA_ELEMENT);\n \n-  private final DOMImplementation documentFactory;\n-\n   @Inject\n   public NekoSimplifiedHtmlParser(DOMImplementation documentFactory) {\n-    this.documentFactory = documentFactory;\n+    super(documentFactory);\n   }\n \n   @Override",
                "raw_url": "https://github.com/apache/shindig/raw/63fcba3b4299de5708347abdeb8634ae9e8fa0c7/java/gadgets/src/main/java/org/apache/shindig/gadgets/parse/nekohtml/NekoSimplifiedHtmlParser.java",
                "sha": "3107255f52240001c88ace8ccf1790ab162868ab",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/shindig/blob/63fcba3b4299de5708347abdeb8634ae9e8fa0c7/java/gadgets/src/test/java/org/apache/shindig/gadgets/parse/AbstractSocialMarkupHtmlParserTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/parse/AbstractSocialMarkupHtmlParserTest.java?ref=63fcba3b4299de5708347abdeb8634ae9e8fa0c7",
                "deletions": 13,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/parse/AbstractSocialMarkupHtmlParserTest.java",
                "patch": "@@ -20,22 +20,19 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n \n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Lists;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.shindig.common.xml.DomUtil;\n-import org.apache.shindig.gadgets.GadgetException;\n import org.apache.shindig.gadgets.parse.GadgetHtmlParser;\n import org.apache.shindig.gadgets.parse.HtmlSerialization;\n import org.apache.shindig.gadgets.spec.PipelinedData;\n \n import org.junit.Before;\n import org.junit.Test;\n import org.w3c.dom.Attr;\n-import org.w3c.dom.DOMException;\n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.w3c.dom.Node;\n@@ -149,16 +146,14 @@ public void testCommentOrdering() {\n   public void testInvalid() throws Exception {\n     String content =\n         \"<html><div id=\\\"div_super\\\" class=\\\"div_super\\\" valign:\\\"middle\\\"></div></html>\";\n-    try {\n-      parser.parseDom(content);\n-      fail(\"No exception caught on invalid character\");\n-    } catch (DOMException e) {\n-      assertTrue(e.getMessage().contains(\"INVALID_CHARACTER_ERR\"));\n-      assertTrue(e.getMessage().contains(\n-          \"Around ...<div id=\\\"div_super\\\" class=\\\"div_super\\\"...\"));\n-    } catch (GadgetException e) {\n-      assertEquals(GadgetException.Code.HTML_PARSE_ERROR, e.getCode());\n-    }\n+    Document doc = parser.parseDom(content);\n+    \n+    // Returns a bare Document with error text in it.\n+    Node body = doc.getElementsByTagName(\"body\").item(0);\n+    \n+    assertTrue(body.getTextContent().contains(\"INVALID_CHARACTER_ERR\"));\n+    assertTrue(body.getTextContent().contains(\n+        \"Around ...<div id=\\\"div_super\\\" class=\\\"div_super\\\"...\"));\n   }\n \n   private void assertEmpty(Node n) {",
                "raw_url": "https://github.com/apache/shindig/raw/63fcba3b4299de5708347abdeb8634ae9e8fa0c7/java/gadgets/src/test/java/org/apache/shindig/gadgets/parse/AbstractSocialMarkupHtmlParserTest.java",
                "sha": "eed22326f9a94478a4de4b7a1a22ab1444dec7d1",
                "status": "modified"
            }
        ],
        "message": "Emit DOMException information in output code rather than simply returning a null which NPEs downstream. Further clean-up may be warranted to return a non-200 status response in this case, but this should be better than status quo.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@906650 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/c061a9db9f6883eb967afa07673aeabb2d196325",
        "patched_files": [
            "CajaHtmlParser.java",
            "GadgetHtmlParser.java",
            "NekoSimplifiedHtmlParser.java",
            "globals.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "AbstractSocialMarkupHtmlParserTest.java"
        ]
    },
    "shindig_645431d": {
        "bug_id": "shindig_645431d",
        "commit": "https://github.com/apache/shindig/commit/645431d6dd7e14190997f766ec621412dc19dda8",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/shindig/blob/645431d6dd7e14190997f766ec621412dc19dda8/java/gadgets/src/main/java/org/apache/shindig/gadgets/DefaultGadgetSpecFactory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/DefaultGadgetSpecFactory.java?ref=645431d6dd7e14190997f766ec621412dc19dda8",
                "deletions": 1,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/DefaultGadgetSpecFactory.java",
                "patch": "@@ -90,7 +90,8 @@ public GadgetSpec getGadgetSpec(GadgetContext context) throws GadgetException {\n   protected GadgetSpec parse(String content, Query query) throws XmlException, GadgetException {\n     // Allow BOM entity as first item on stream and ignore it:\n     final String BOM_ENTITY = \"&#xFEFF;\";\n-    if (content.substring(0, BOM_ENTITY.length()).equalsIgnoreCase(BOM_ENTITY)) {\n+    if (content.length() >= BOM_ENTITY.length() && \n+        content.substring(0, BOM_ENTITY.length()).equalsIgnoreCase(BOM_ENTITY)) {\n       content = content.substring(BOM_ENTITY.length());\n     }\n     Element element = XmlUtil.parse(content);",
                "raw_url": "https://github.com/apache/shindig/raw/645431d6dd7e14190997f766ec621412dc19dda8/java/gadgets/src/main/java/org/apache/shindig/gadgets/DefaultGadgetSpecFactory.java",
                "sha": "a1631f1060e7b1a0dafd447219a05314d86e7922",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/shindig/blob/645431d6dd7e14190997f766ec621412dc19dda8/java/gadgets/src/test/java/org/apache/shindig/gadgets/DefaultGadgetSpecFactoryTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/DefaultGadgetSpecFactoryTest.java?ref=645431d6dd7e14190997f766ec621412dc19dda8",
                "deletions": 0,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/DefaultGadgetSpecFactoryTest.java",
                "patch": "@@ -145,6 +145,25 @@ public void specFetchedWithBom() throws Exception {\n     assertEquals(LOCAL_CONTENT, spec.getView(GadgetSpec.DEFAULT_VIEW).getContent());\n   }\n \n+  @Test(expected = GadgetException.class)\n+  public void specFetchedEmptyContent() throws Exception {\n+    HttpRequest request = createIgnoreCacheRequest();\n+    HttpResponse response = new HttpResponse(\"\");\n+    expect(pipeline.execute(request)).andReturn(response);\n+    replay(pipeline);\n+\n+    GadgetSpec spec = specFactory.getGadgetSpec(createContext(SPEC_URL, true));\n+  }\n+\n+  @Test(expected = GadgetException.class)\n+  public void malformedGadgetSpecIsCachedAndThrows2() throws Exception {\n+    HttpRequest request = createIgnoreCacheRequest();\n+    expect(pipeline.execute(request)).andReturn(new HttpResponse(\"\")).once();\n+    replay(pipeline);\n+\n+    specFactory.getGadgetSpec(createContext(SPEC_URL, true));\n+  }\n+\n   @Test\n   public void specFetchedWithBomChar() throws Exception {\n     HttpRequest request = createIgnoreCacheRequest();",
                "raw_url": "https://github.com/apache/shindig/raw/645431d6dd7e14190997f766ec621412dc19dda8/java/gadgets/src/test/java/org/apache/shindig/gadgets/DefaultGadgetSpecFactoryTest.java",
                "sha": "1d4a5a7dffa0b2f460742287526be5dc1b78fd3a",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE in DefaultGadgetSpecFactory.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/shindig/trunk@925444 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/d14106c5dbb083908c47d88679bf6876319c0492",
        "patched_files": [
            "DefaultGadgetSpecFactory.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "DefaultGadgetSpecFactoryTest.java"
        ]
    },
    "shindig_668fef8": {
        "bug_id": "shindig_668fef8",
        "commit": "https://github.com/apache/shindig/commit/668fef80d08834bda3cadc14681ef6fdfde7e0c4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/shindig/blob/668fef80d08834bda3cadc14681ef6fdfde7e0c4/java/gadgets/src/main/java/org/apache/shindig/gadgets/oauth/GadgetOAuthTokenStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/oauth/GadgetOAuthTokenStore.java?ref=668fef80d08834bda3cadc14681ef6fdfde7e0c4",
                "deletions": 1,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/oauth/GadgetOAuthTokenStore.java",
                "patch": "@@ -111,7 +111,7 @@ public AccessorInfo getOAuthAccessor(SecurityToken securityToken,\n     // if owner == viewer.\n     if (arguments.mayUseToken()\n         && securityToken.getOwnerId() != null\n-        && securityToken.getViewerId().equals(securityToken.getOwnerId())) {\n+        && securityToken.getOwnerId().equals(securityToken.getViewerId())) {\n       lookupToken(securityToken, consumer, arguments, clientState, accessorBuilder, responseParams);\n     }\n ",
                "raw_url": "https://github.com/apache/shindig/raw/668fef80d08834bda3cadc14681ef6fdfde7e0c4/java/gadgets/src/main/java/org/apache/shindig/gadgets/oauth/GadgetOAuthTokenStore.java",
                "sha": "ed389325c741cf7295ca28b3cef7d8d55f13f879",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/shindig/blob/668fef80d08834bda3cadc14681ef6fdfde7e0c4/java/gadgets/src/test/java/org/apache/shindig/gadgets/oauth/OAuthRequestTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/oauth/OAuthRequestTest.java?ref=668fef80d08834bda3cadc14681ef6fdfde7e0c4",
                "deletions": 0,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/oauth/OAuthRequestTest.java",
                "patch": "@@ -400,6 +400,17 @@ public void testOAuthFlow_unauthUser() throws Exception {\n     assertEquals(OAuthError.UNAUTHENTICATED.toString(), response.getMetadata().get(\"oauthError\"));\n   }\n \n+  @Test\n+  public void testOAuthFlow_noViewer() throws Exception {\n+    MakeRequestClient client = makeNonSocialClient(\"owner\", null, GADGET_URL);\n+\n+    HttpResponse response = client.sendGet(FakeOAuthServiceProvider.RESOURCE_URL);\n+    assertEquals(\"\", response.getResponseAsString());\n+    assertEquals(403, response.getHttpStatusCode());\n+    assertEquals(-1, response.getCacheTtl());\n+    assertEquals(OAuthError.NOT_OWNER.toString(), response.getMetadata().get(\"oauthError\"));\n+  }\n+\n   @Test\n   public void testOAuthFlow_noSpec() throws Exception {\n     fetcherConfig = new OAuthFetcherConfig(",
                "raw_url": "https://github.com/apache/shindig/raw/668fef80d08834bda3cadc14681ef6fdfde7e0c4/java/gadgets/src/test/java/org/apache/shindig/gadgets/oauth/OAuthRequestTest.java",
                "sha": "e7ac668a10fb77fb4834d6c7db3bc67cc36c3ec1",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when no viewer is present in token.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@785385 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/65c1a842aaf29bf47330c54c23ef7621ce989592",
        "patched_files": [
            "GadgetOAuthTokenStore.java",
            "OAuthRequest.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "OAuthRequestTest.java"
        ]
    },
    "shindig_7358bff": {
        "bug_id": "shindig_7358bff",
        "commit": "https://github.com/apache/shindig/commit/7358bff524b19643c66c22879d91462c6cf58f73",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/shindig/blob/7358bff524b19643c66c22879d91462c6cf58f73/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/Renderer.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/Renderer.java?ref=7358bff524b19643c66c22879d91462c6cf58f73",
                "deletions": 14,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/render/Renderer.java",
                "patch": "@@ -19,7 +19,6 @@\n package org.apache.shindig.gadgets.render;\n \n import org.apache.shindig.common.ContainerConfig;\n-import org.apache.shindig.common.uri.Uri;\n import org.apache.shindig.gadgets.Gadget;\n import org.apache.shindig.gadgets.GadgetContext;\n import org.apache.shindig.gadgets.GadgetException;\n@@ -82,12 +81,12 @@ public RenderingResults render(GadgetContext context) {\n       }\n \n       if (gadget.getCurrentView().getType() == View.ContentType.URL) {\n-        return RenderingResults.mustRedirect(getRedirect(gadget));\n+        return RenderingResults.mustRedirect(gadget.getCurrentView().getHref());\n       }\n \n       GadgetSpec spec = gadget.getSpec();\n       if (!lockedDomainService.gadgetCanRender(context.getHost(), spec, context.getContainer())) {\n-        return RenderingResults.mustRedirect(getRedirect(gadget));\n+        return RenderingResults.error(\"Invalid domain\");\n       }\n \n       return RenderingResults.ok(renderer.render(gadget));\n@@ -139,15 +138,4 @@ private boolean validateParent(GadgetContext context) {\n     }\n     return false;\n   }\n-\n-  private Uri getRedirect(Gadget gadget) {\n-    // TODO: This should probably just call UrlGenerator.getIframeUrl(), but really it should\n-    // never happen.\n-    View view = gadget.getCurrentView();\n-    if (view.getType() == View.ContentType.URL) {\n-      return gadget.getCurrentView().getHref();\n-    }\n-    // TODO\n-    return null;\n-  }\n }",
                "raw_url": "https://github.com/apache/shindig/raw/7358bff524b19643c66c22879d91462c6cf58f73/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/Renderer.java",
                "sha": "54b0c8da59af088f87703d0b4b91dceee6325611",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/shindig/blob/7358bff524b19643c66c22879d91462c6cf58f73/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/RenderingResults.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/RenderingResults.java?ref=7358bff524b19643c66c22879d91462c6cf58f73",
                "deletions": 0,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/render/RenderingResults.java",
                "patch": "@@ -21,6 +21,8 @@\n import org.apache.shindig.common.uri.Uri;\n import org.apache.shindig.common.util.Check;\n \n+import com.google.common.base.Preconditions;\n+\n /**\n  * Contains the results of a rendering operation.\n  */\n@@ -46,6 +48,7 @@ public static RenderingResults error(String errorMessage) {\n   }\n \n   public static RenderingResults mustRedirect(Uri redirect) {\n+    Preconditions.checkNotNull(redirect);\n     return new RenderingResults(Status.MUST_REDIRECT, null, null, redirect);\n   }\n ",
                "raw_url": "https://github.com/apache/shindig/raw/7358bff524b19643c66c22879d91462c6cf58f73/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/RenderingResults.java",
                "sha": "8b1b24d59338aa62d270e18f87017cd29b27183b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/shindig/blob/7358bff524b19643c66c22879d91462c6cf58f73/java/gadgets/src/test/java/org/apache/shindig/gadgets/render/RendererTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/render/RendererTest.java?ref=7358bff524b19643c66c22879d91462c6cf58f73",
                "deletions": 5,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/render/RendererTest.java",
                "patch": "@@ -20,7 +20,6 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n import org.apache.shindig.common.ContainerConfigException;\n@@ -162,12 +161,10 @@ public void verifyLockedDomain() throws Exception {\n   }\n \n   @Test\n-  public void wrongDomainRedirects() throws Exception {\n+  public void wrongDomainFails() throws Exception {\n     lockedDomainService.canRender = false;\n     RenderingResults results = renderer.render(makeContext(\"html\"));\n-    assertEquals(RenderingResults.Status.MUST_REDIRECT, results.getStatus());\n-    // TODO: Verify the real url for redirection.\n-    assertNull(results.getRedirect());\n+    assertEquals(RenderingResults.Status.ERROR, results.getStatus());\n   }\n \n   private static class FakeContainerConfig extends JsonContainerConfig {",
                "raw_url": "https://github.com/apache/shindig/raw/7358bff524b19643c66c22879d91462c6cf58f73/java/gadgets/src/test/java/org/apache/shindig/gadgets/render/RendererTest.java",
                "sha": "07d216a7c13fb2d1d6513b15c28f7c7ba184f8e0",
                "status": "modified"
            }
        ],
        "message": "SHINDIG-859 | Patch from Adam Winer | NullPointerException when locked domain verification fails\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@734771 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/8158a209b20c040de7dd4d24d67caa97e576f230",
        "patched_files": [
            "RenderingResults.java",
            "Renderer.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "RendererTest.java"
        ]
    },
    "shindig_779a5e6": {
        "bug_id": "shindig_779a5e6",
        "commit": "https://github.com/apache/shindig/commit/779a5e60b1bbeb82d95a07edc74b1d68059c5b18",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/shindig/blob/779a5e60b1bbeb82d95a07edc74b1d68059c5b18/java/common/src/main/java/org/apache/shindig/protocol/BaseRequestItem.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/main/java/org/apache/shindig/protocol/BaseRequestItem.java?ref=779a5e60b1bbeb82d95a07edc74b1d68059c5b18",
                "deletions": 1,
                "filename": "java/common/src/main/java/org/apache/shindig/protocol/BaseRequestItem.java",
                "patch": "@@ -198,7 +198,11 @@ public SecurityToken getToken() {\n \n   public <T> T getTypedParameter(String parameterName, Class<T> dataTypeClass) {\n     try {\n-      return converter.convertToObject(getParameter(parameterName), dataTypeClass);\n+      String json = getParameter(parameterName);\n+      if (json == null) {\n+        throw new ProtocolException(HttpServletResponse.SC_BAD_REQUEST, \"missing data for \" + parameterName);\n+      }\n+      return converter.convertToObject(json, dataTypeClass);\n     } catch (RuntimeException e) {\n       if (e.getCause() instanceof JSONException)\n         throw new ProtocolException(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());",
                "raw_url": "https://github.com/apache/shindig/raw/779a5e60b1bbeb82d95a07edc74b1d68059c5b18/java/common/src/main/java/org/apache/shindig/protocol/BaseRequestItem.java",
                "sha": "2737f137832d3ffeb18438b64655de158d5c35e7",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/shindig/blob/779a5e60b1bbeb82d95a07edc74b1d68059c5b18/java/common/src/test/java/org/apache/shindig/protocol/BaseRequestItemTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/test/java/org/apache/shindig/protocol/BaseRequestItemTest.java?ref=779a5e60b1bbeb82d95a07edc74b1d68059c5b18",
                "deletions": 0,
                "filename": "java/common/src/test/java/org/apache/shindig/protocol/BaseRequestItemTest.java",
                "patch": "@@ -115,6 +115,11 @@ public void testGetTypedParameter() throws Exception {\n     assertEquals(1234, input.id);\n   }\n \n+  @Test(expected = ProtocolException.class)\n+  public void testGetTypedParameterEmpty() throws Exception {\n+    request.getTypedParameter(\"empty\", InputData.class);\n+  }\n+\n   @Test\n   public void testGetParameters() throws Exception {\n     request.setParameter(\"anykey\", \"{name: 'Bob', id: '1234'}\");",
                "raw_url": "https://github.com/apache/shindig/raw/779a5e60b1bbeb82d95a07edc74b1d68059c5b18/java/common/src/test/java/org/apache/shindig/protocol/BaseRequestItemTest.java",
                "sha": "ada0a9b45453c3940ff7a0a8e2c2e497847f62cb",
                "status": "modified"
            }
        ],
        "message": "SHINDIG-1527 | Replace NPE with proper protocol error\n\ngit-svn-id: https://svn.apache.org/repos/asf/shindig/trunk@1100888 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/ac497dd772db637321c2f58898747390483f09fb",
        "patched_files": [
            "BaseRequestItem.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "BaseRequestItemTest.java"
        ]
    },
    "shindig_7838dcd": {
        "bug_id": "shindig_7838dcd",
        "commit": "https://github.com/apache/shindig/commit/7838dcd8bac0b1bf06d8eae11f445c1b1db052ed",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/shindig/blob/7838dcd8bac0b1bf06d8eae11f445c1b1db052ed/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/SanitizingRequestRewriter.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/SanitizingRequestRewriter.java?ref=7838dcd8bac0b1bf06d8eae11f445c1b1db052ed",
                "deletions": 2,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/render/SanitizingRequestRewriter.java",
                "patch": "@@ -18,6 +18,7 @@\n  */\n package org.apache.shindig.gadgets.render;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.sanselan.ImageFormat;\n import org.apache.sanselan.ImageReadException;\n import org.apache.sanselan.Sanselan;\n@@ -64,14 +65,19 @@ public boolean rewrite(HttpRequest request, HttpResponse resp, MutableContent co\n     if (request.isSanitizationRequested()) {\n       ContentRewriterFeature rewriterFeature =\n         rewriterFeatureFactory.createRewriteAllFeature(request.getCacheTtl());\n-      if (request.getRewriteMimeType().equalsIgnoreCase(\"text/css\")) {\n+      if (StringUtils.isEmpty(request.getRewriteMimeType())) {\n+        logger.log(Level.WARNING, \"Request to sanitize without content type for \"\n+            + request.getUri());\n+        content.setContent(\"\");\n+        return true;\n+      } else if (request.getRewriteMimeType().equalsIgnoreCase(\"text/css\")) {\n         return rewriteProxiedCss(request, resp, content, rewriterFeature);\n       } else if (request.getRewriteMimeType().toLowerCase().startsWith(\"image/\")) {\n         return rewriteProxiedImage(request, resp, content);\n       } else {\n         logger.log(Level.WARNING, \"Request to sanitize unknown content type \"\n             + request.getRewriteMimeType()\n-            + \" for \" + request.getUri().toString());\n+            + \" for \" + request.getUri());\n         content.setContent(\"\");\n         return true;\n       }",
                "raw_url": "https://github.com/apache/shindig/raw/7838dcd8bac0b1bf06d8eae11f445c1b1db052ed/java/gadgets/src/main/java/org/apache/shindig/gadgets/render/SanitizingRequestRewriter.java",
                "sha": "f396257e33a06f86d935786e3ed3924befde2054",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/shindig/blob/7838dcd8bac0b1bf06d8eae11f445c1b1db052ed/java/gadgets/src/test/java/org/apache/shindig/gadgets/render/SanitizingRequestRewriterTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/render/SanitizingRequestRewriterTest.java?ref=7838dcd8bac0b1bf06d8eae11f445c1b1db052ed",
                "deletions": 0,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/render/SanitizingRequestRewriterTest.java",
                "patch": "@@ -105,4 +105,23 @@ public void validProxiedImageAccepted() throws Exception {\n             \"org/apache/shindig/gadgets/rewrite/image/inefficient.png\"))).create();\n     assertNull(rewrite(req, response));\n   }\n+\n+  @Test\n+  public void enforceUnknownMimeTypeRejected() throws Exception {\n+    HttpRequest req = new HttpRequest(CONTENT_URI);\n+    req.setRewriteMimeType(\"text/foo\");\n+    HttpResponse response = new HttpResponseBuilder().setResponseString(\"doEvil()\").create();\n+    String sanitized = \"\";\n+    assertEquals(sanitized, rewrite(req, response));\n+  }\n+\n+  @Test\n+  public void enforceMissingMimeTypeRejected() throws Exception {\n+    HttpRequest req = new HttpRequest(CONTENT_URI);\n+    // A request without a mime type, but requesting sanitization, should be rejected\n+    req.setRewriteMimeType(null);\n+    HttpResponse response = new HttpResponseBuilder().setResponseString(\"doEvil()\").create();\n+    String sanitized = \"\";\n+    assertEquals(sanitized, rewrite(req, response));\n+  }\n }",
                "raw_url": "https://github.com/apache/shindig/raw/7838dcd8bac0b1bf06d8eae11f445c1b1db052ed/java/gadgets/src/test/java/org/apache/shindig/gadgets/render/SanitizingRequestRewriterTest.java",
                "sha": "ac8ad491d3c9b463ee4c395ce6de9589725a6d84",
                "status": "modified"
            }
        ],
        "message": "Fix NPE if sanitized proxy requests fail to include a mime type\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@806676 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/fcc3374207bb5e06d9becba30e74fce8c1c7c766",
        "patched_files": [
            "SanitizingRequestRewriter.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "SanitizingRequestRewriterTest.java"
        ]
    },
    "shindig_90f5746": {
        "bug_id": "shindig_90f5746",
        "commit": "https://github.com/apache/shindig/commit/90f5746c44abeca76d6557db5fb534a84f67cb7b",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/shindig/blob/90f5746c44abeca76d6557db5fb534a84f67cb7b/java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java?ref=90f5746c44abeca76d6557db5fb534a84f67cb7b",
                "deletions": 12,
                "filename": "java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java",
                "patch": "@@ -140,18 +140,20 @@ public RpcHandler getRpcHandler(JSONObject rpc) {\n    */\n   public RestHandler getRestHandler(String path, String method) {\n     method = method.toUpperCase();\n-    if (path.startsWith(\"/\")) {\n-      path = path.substring(1);\n-    }\n-    String[] pathParts = path.split(\"/\");\n-    Map<String, SortedSet<RestPath>> methods = serviceMethodPathMap.get(pathParts[0]);\n-    if (methods != null) {\n-      SortedSet<RestPath> paths = methods.get(method);\n-      if (paths != null) {\n-        for (RestPath restPath : paths) {\n-          RestHandler handler = restPath.accept(pathParts);\n-          if (handler != null) {\n-            return handler;\n+    if (path != null) {\n+      if (path.startsWith(\"/\")) {\n+        path = path.substring(1);\n+      }\n+      String[] pathParts = path.split(\"/\");\n+      Map<String, SortedSet<RestPath>> methods = serviceMethodPathMap.get(pathParts[0]);\n+      if (methods != null) {\n+        SortedSet<RestPath> paths = methods.get(method);\n+        if (paths != null) {\n+          for (RestPath restPath : paths) {\n+            RestHandler handler = restPath.accept(pathParts);\n+            if (handler != null) {\n+              return handler;\n+            }\n           }\n         }\n       }",
                "raw_url": "https://github.com/apache/shindig/raw/90f5746c44abeca76d6557db5fb534a84f67cb7b/java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java",
                "sha": "e098d00faf2bb3f033c050c63b094bd97f2f872a",
                "status": "modified"
            }
        ],
        "message": "SHINDIG-1075 | DefaultHandlerRegistry.getRestHandler throws an NPE for unregistered paths\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@782159 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/587c6029f7b5f72c645278bebadadaef5866e92a",
        "patched_files": [
            "DefaultHandlerRegistry.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "DefaultHandlerRegistryTest.java"
        ]
    },
    "shindig_9896000": {
        "bug_id": "shindig_9896000",
        "commit": "https://github.com/apache/shindig/commit/9896000e78ed4108604b02d7bd2c21bd4c15a0fd",
        "file": [
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/shindig/blob/9896000e78ed4108604b02d7bd2c21bd4c15a0fd/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponse.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponse.java?ref=9896000e78ed4108604b02d7bd2c21bd4c15a0fd",
                "deletions": 6,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponse.java",
                "patch": "@@ -73,6 +73,7 @@\n   private final byte[] responseBytes;\n   private final Map<String, List<String>> headers;\n   private final Map<String, String> metadata;\n+  private final long date;\n \n   private HttpResponse rewritten;\n \n@@ -119,10 +120,9 @@ public HttpResponse(int httpStatusCode, byte[] responseBytes,\n         }\n       }\n     }\n-    // Force Last-Modified header -- caches should be sure to store this value.\n-    if (tmpHeaders.get(\"Date\") == null) {\n-      tmpHeaders.put(\"Date\", Arrays.asList(DateUtil.formatDate(System.currentTimeMillis())));\n-    }\n+\n+    date = getValidDate(tmpHeaders);\n+\n     this.headers = tmpHeaders;\n \n     this.metadata = new HashMap<String, String>();\n@@ -151,6 +151,31 @@ public static HttpResponse notFound() {\n     return new HttpResponse(SC_NOT_FOUND);\n   }\n \n+  /**\n+   * Tries to find a valid date from the input headers. If one can't be found, the current time is\n+   * used.\n+   *\n+   * @param headers Input headers. If the Date header is missing or invalid, it will be set with the\n+   *                current time.\n+   * @return The value of the date header, in milliseconds.\n+   */\n+  private long getValidDate(Map<String, List<String>> headers) {\n+    // Validate the Date header. Must conform to the HTTP date format.\n+    long timestamp = -1;\n+    String dateStr = headers.get(\"Date\") == null ? null : headers.get(\"Date\").get(0);\n+    if (dateStr != null) {\n+      Date d = DateUtil.parseDate(dateStr);\n+      if (d != null) {\n+        timestamp = d.getTime();\n+      }\n+    }\n+    if (timestamp == -1) {\n+      timestamp = System.currentTimeMillis();\n+      headers.put(\"Date\", Arrays.asList(DateUtil.formatDate(timestamp)));\n+    }\n+    return timestamp;\n+  }\n+\n   /**\n    * Attempts to determine the encoding of the body. If it can't be determined,\n    * we use DEFAULT_ENCODING instead.\n@@ -355,8 +380,7 @@ public boolean isStrictNoCache() {\n    * @return The value of the HTTP Date header.\n    */\n   protected long getDate() {\n-    String date = getHeader(\"Date\");\n-    return DateUtil.parseDate(date).getTime();\n+    return date;\n   }\n \n   /**",
                "raw_url": "https://github.com/apache/shindig/raw/9896000e78ed4108604b02d7bd2c21bd4c15a0fd/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponse.java",
                "sha": "b36d933f5bcfced8fa0eee8af7659fc411318849",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/shindig/blob/9896000e78ed4108604b02d7bd2c21bd4c15a0fd/java/gadgets/src/test/java/org/apache/shindig/gadgets/http/HttpResponseTest.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/http/HttpResponseTest.java?ref=9896000e78ed4108604b02d7bd2c21bd4c15a0fd",
                "deletions": 7,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/http/HttpResponseTest.java",
                "patch": "@@ -175,14 +175,22 @@ public void testStrictPragmaJunk() throws Exception {\n     assertTrue(response.getCacheTtl() <= HttpResponse.DEFAULT_TTL && response.getCacheTtl() > 0);\n   }\n \n+  /**\n+   * Verifies that the cache TTL is within acceptable ranges.\n+   * This always rounds down due to timing, so actual verification will be against maxAge - 1.\n+   */\n+  private void assertTtlOk(int maxAge, HttpResponse response) {\n+    assertEquals(maxAge - 1, roundToSeconds(response.getCacheTtl() - 1));\n+  }\n+\n   public void testExpires() throws Exception {\n-    int ttl = 10;\n-    int time = roundToSeconds(System.currentTimeMillis()) + ttl;\n+    int maxAge = 10;\n+    int time = roundToSeconds(System.currentTimeMillis()) + maxAge;\n     addHeader(\"Expires\", DateUtil.formatDate(1000L * time));\n     HttpResponse response = new HttpResponse(200, null, headers);\n     assertEquals(time, roundToSeconds(response.getCacheExpiration()));\n-    // 9 because of rounding.\n-    assertEquals(9, roundToSeconds(response.getCacheTtl()));\n+    // Second rounding makes this n-1.\n+    assertTtlOk(maxAge, response);\n   }\n \n   public void testMaxAgeNoDate() throws Exception {\n@@ -194,8 +202,20 @@ public void testMaxAgeNoDate() throws Exception {\n     int expiration = roundToSeconds(response.getCacheExpiration());\n \n     assertEquals(expected, expiration);\n-    // Second rounding makes this n-1.\n-    assertEquals(maxAge - 1 , roundToSeconds(response.getCacheTtl()));\n+    assertTtlOk(maxAge, response);\n+  }\n+\n+  public void testMaxAgeInvalidDate() throws Exception {\n+    int maxAge = 10;\n+    // Guess time.\n+    int expected = roundToSeconds(System.currentTimeMillis()) + maxAge;\n+    addHeader(\"Date\", \"Wed, 09 Jul 2008 19:18:33 EDT\");\n+    addHeader(\"Cache-Control\", \"public, max-age=\" + maxAge);\n+    HttpResponse response = new HttpResponse(200, null, headers);\n+    int expiration = roundToSeconds(response.getCacheExpiration());\n+\n+    assertEquals(expected, expiration);\n+    assertTtlOk(maxAge, response);\n   }\n \n   public void testMaxAgeWithDate() throws Exception {\n@@ -206,7 +226,7 @@ public void testMaxAgeWithDate() throws Exception {\n     HttpResponse response = new HttpResponse(200, null, headers);\n \n     assertEquals(now + maxAge, roundToSeconds(response.getCacheExpiration()));\n-    assertEquals(maxAge - 1, roundToSeconds(response.getCacheTtl()));\n+    assertTtlOk(maxAge, response);\n   }\n \n   public void testFixedDate() throws Exception {\n@@ -216,6 +236,7 @@ public void testFixedDate() throws Exception {\n     assertEquals(time, roundToSeconds(response.getDate()));\n     assertEquals(time + roundToSeconds(HttpResponse.DEFAULT_TTL),\n         roundToSeconds(response.getCacheExpiration()));\n+    assertTtlOk(roundToSeconds(HttpResponse.DEFAULT_TTL), response);\n   }\n \n   public void testNegativeCaching() {",
                "raw_url": "https://github.com/apache/shindig/raw/9896000e78ed4108604b02d7bd2c21bd4c15a0fd/java/gadgets/src/test/java/org/apache/shindig/gadgets/http/HttpResponseTest.java",
                "sha": "82034c0a22c00b3cf2c42d88bb01612287d01ec7",
                "status": "modified"
            }
        ],
        "message": "Added logic to deal with invalid HTTP date headers in responses better. Previously an invalid header would result in an NPE here.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@675389 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/3240e09d386edc8a64bfe65270403d62783c95b3",
        "patched_files": [
            "HttpResponse.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "HttpResponseTest.java"
        ]
    },
    "shindig_9cd9964": {
        "bug_id": "shindig_9cd9964",
        "commit": "https://github.com/apache/shindig/commit/9cd99644a15ea7668228ccfa45985c1926870b3a",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/shindig/blob/9cd99644a15ea7668228ccfa45985c1926870b3a/java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java?ref=9cd99644a15ea7668228ccfa45985c1926870b3a",
                "deletions": 1,
                "filename": "java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java",
                "patch": "@@ -116,8 +116,10 @@ private static String getPropertyName(Method setter) {\n     }\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n+  // Class.cast() would be better - but the Class object may be null\n   public <T> T convertToObject(String string, Class<T> clazz) {\n-    return clazz.cast(convertToObject(string, (Type) clazz));\n+    return (T)convertToObject(string, (Type) clazz);\n   }\n \n   @SuppressWarnings(\"unchecked\")",
                "raw_url": "https://github.com/apache/shindig/raw/9cd99644a15ea7668228ccfa45985c1926870b3a/java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java",
                "sha": "525c5f4fd2134ac43fed842526748625af0767a5",
                "status": "modified"
            }
        ],
        "message": "Thank you Kevin, for paying attention: fix NPE (re-)introduced by previous checkin\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@758813 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/37e7b5a84eacf27f88d7d7bffb096344207c3cf1",
        "patched_files": [
            "BeanJsonConverter.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "BeanJsonConverterTest.java"
        ]
    },
    "shindig_a6afa24": {
        "bug_id": "shindig_a6afa24",
        "commit": "https://github.com/apache/shindig/commit/a6afa24a9007426dd54d01af0b674ed8a67c4d2e",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/shindig/blob/a6afa24a9007426dd54d01af0b674ed8a67c4d2e/java/common/src/main/java/org/apache/shindig/config/JsonContainerConfig.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/main/java/org/apache/shindig/config/JsonContainerConfig.java?ref=a6afa24a9007426dd54d01af0b674ed8a67c4d2e",
                "deletions": 1,
                "filename": "java/common/src/main/java/org/apache/shindig/config/JsonContainerConfig.java",
                "patch": "@@ -100,7 +100,12 @@ public Object getProperty(String container, String property) {\n         return null;\n       }\n     }\n-    return config.get(container).get(property);\n+\n+    Map<String, Object> containerData = config.get(container);\n+    if (containerData == null) {\n+      return null;\n+    }\n+    return containerData.get(property);\n   }\n \n   /**",
                "raw_url": "https://github.com/apache/shindig/raw/a6afa24a9007426dd54d01af0b674ed8a67c4d2e/java/common/src/main/java/org/apache/shindig/config/JsonContainerConfig.java",
                "sha": "27fd62ddace720ff7895127c25afd31216bb3496",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/shindig/blob/a6afa24a9007426dd54d01af0b674ed8a67c4d2e/java/common/src/test/java/org/apache/shindig/config/JsonContainerConfigTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/test/java/org/apache/shindig/config/JsonContainerConfigTest.java?ref=a6afa24a9007426dd54d01af0b674ed8a67c4d2e",
                "deletions": 4,
                "filename": "java/common/src/test/java/org/apache/shindig/config/JsonContainerConfigTest.java",
                "patch": "@@ -23,10 +23,7 @@\n import static org.apache.shindig.config.JsonContainerConfig.CONTAINER_KEY;\n import static org.apache.shindig.config.JsonContainerConfig.PARENT_KEY;\n import static org.junit.Assert.assertEquals;\n-\n-import org.apache.shindig.config.ContainerConfig;\n-import org.apache.shindig.config.ContainerConfigException;\n-import org.apache.shindig.config.JsonContainerConfig;\n+import static org.junit.Assert.assertNull;\n \n import org.json.JSONObject;\n import org.junit.Test;\n@@ -155,6 +152,12 @@ public void parseWithDefaultInheritance() throws Exception {\n     assertEquals(expected, actual);\n   }\n \n+  @Test\n+  public void invalidContainerReturnsNull() throws Exception {\n+    ContainerConfig config = new JsonContainerConfig(createDefaultContainer().getAbsolutePath());\n+    assertNull(\"Did not return null for invalid container.\", config.getString(\"fake\", PARENT_KEY));\n+  }\n+\n   @Test(expected = ContainerConfigException.class)\n   public void badConfigThrows() throws Exception {\n     JSONObject json = new JSONObject();",
                "raw_url": "https://github.com/apache/shindig/raw/a6afa24a9007426dd54d01af0b674ed8a67c4d2e/java/common/src/test/java/org/apache/shindig/config/JsonContainerConfigTest.java",
                "sha": "e647df1f39874d370115064453f06a55e277d71c",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE when accessing an invalid container.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@738043 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/dbf4d9dc678b00fb01396953e9012b8f6c8031e7",
        "patched_files": [
            "JsonContainerConfig.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "JsonContainerConfigTest.java"
        ]
    },
    "shindig_a87bdb7": {
        "bug_id": "shindig_a87bdb7",
        "commit": "https://github.com/apache/shindig/commit/a87bdb7043c82fc353ca1a8ef937c42ed544d916",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/shindig/blob/a87bdb7043c82fc353ca1a8ef937c42ed544d916/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponse.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponse.java?ref=a87bdb7043c82fc353ca1a8ef937c42ed544d916",
                "deletions": 1,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponse.java",
                "patch": "@@ -24,10 +24,13 @@\n import com.google.inject.name.Named;\n import com.ibm.icu.text.CharsetDetector;\n import com.ibm.icu.text.CharsetMatch;\n+\n+import org.apache.commons.lang.ArrayUtils;\n import org.apache.shindig.common.util.DateUtil;\n \n import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n+import java.io.UnsupportedEncodingException;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.util.Arrays;\n@@ -121,7 +124,18 @@\n   private HttpResponse(int httpStatusCode, String body) {\n     this(new HttpResponseBuilder()\n       .setHttpStatusCode(httpStatusCode)\n-      .setResponse(body.getBytes(Charset.forName(\"UTF-8\"))));\n+      .setResponse(getUtf8Bytes(body)));\n+  }\n+  \n+  private static byte[] getUtf8Bytes(String body) {\n+    try {\n+      if (body == null) {\n+        return ArrayUtils.EMPTY_BYTE_ARRAY;\n+      }\n+      return body.getBytes(DEFAULT_ENCODING);\n+    } catch (UnsupportedEncodingException e) {\n+      throw new RuntimeException(e);\n+    }\n   }\n \n   public HttpResponse(String body) {",
                "raw_url": "https://github.com/apache/shindig/raw/a87bdb7043c82fc353ca1a8ef937c42ed544d916/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponse.java",
                "sha": "298f237852993dc0e0e82f481414c71911bb248f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/shindig/blob/a87bdb7043c82fc353ca1a8ef937c42ed544d916/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponseBuilder.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponseBuilder.java?ref=a87bdb7043c82fc353ca1a8ef937c42ed544d916",
                "deletions": 0,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponseBuilder.java",
                "patch": "@@ -63,6 +63,9 @@ public HttpResponse create() {\n    * @param responseBytes The response body. Copied when set.\n    */\n   public HttpResponseBuilder setResponse(byte[] responseBytes) {\n+    if (responseBytes == null) {\n+      responseBytes = ArrayUtils.EMPTY_BYTE_ARRAY;\n+    }\n     this.responseBytes = new byte[responseBytes.length];\n     System.arraycopy(responseBytes, 0, this.responseBytes, 0, responseBytes.length);\n     return this;",
                "raw_url": "https://github.com/apache/shindig/raw/a87bdb7043c82fc353ca1a8ef937c42ed544d916/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponseBuilder.java",
                "sha": "6ba3abe477321992d48c6d94374c4802ce15b7d5",
                "status": "modified"
            }
        ],
        "message": "Fix an NPE on HttpResponseBuilder.setBytes(null), and get this compiling under\njava 1.5.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@688232 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/f8c7009efe433e4fbd1bff41e5a14bfc27ae9b4d",
        "patched_files": [
            "HttpResponse.java",
            "HttpResponseBuilder.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "HttpResponseTest.java",
            "HttpResponseBuilderTest.java"
        ]
    },
    "shindig_a9489d1": {
        "bug_id": "shindig_a9489d1",
        "commit": "https://github.com/apache/shindig/commit/a9489d18c53483a14af9b105294b927e5f5f554f",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/shindig/blob/a9489d18c53483a14af9b105294b927e5f5f554f/java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java?ref=a9489d18c53483a14af9b105294b927e5f5f554f",
                "deletions": 2,
                "filename": "java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java",
                "patch": "@@ -265,8 +265,11 @@ private Object convertToClass(JSONObject in, Class<?> type) {\n      * will support arbitrary mappings to JSON & XML.\n      */\n     if (ExtendableBean.class.isAssignableFrom(type)) {\n-      for (String name : JSONObject.getNames(in)) {\n-        ((ExtendableBean) out).put(name, convertToObject(in.opt(name), null));\n+      String[] names = JSONObject.getNames(in);\n+      if (names != null) {\n+        for (String name : names) {\n+          ((ExtendableBean) out).put(name, convertToObject(in.opt(name), null));\n+        }\n       }\n     }\n ",
                "raw_url": "https://github.com/apache/shindig/raw/a9489d18c53483a14af9b105294b927e5f5f554f/java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java",
                "sha": "d7efc74283cb4dcd4994a074507cedacf6fdca69",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/shindig/blob/a9489d18c53483a14af9b105294b927e5f5f554f/java/common/src/test/java/org/apache/shindig/protocol/conversion/BeanJsonConverterTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/test/java/org/apache/shindig/protocol/conversion/BeanJsonConverterTest.java?ref=a9489d18c53483a14af9b105294b927e5f5f554f",
                "deletions": 0,
                "filename": "java/common/src/test/java/org/apache/shindig/protocol/conversion/BeanJsonConverterTest.java",
                "patch": "@@ -18,6 +18,7 @@\n  */\n package org.apache.shindig.protocol.conversion;\n \n+import org.apache.shindig.protocol.model.ExtendableBean;\n import org.apache.shindig.protocol.model.Model;\n \n import com.google.common.collect.ImmutableMap;\n@@ -32,6 +33,7 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n@@ -76,6 +78,10 @@ public void setTestEnum(TestEnum testEnum) {\n     }\n   }\n \n+  public static class ExtendableTestObject extends HashMap<String, Object> implements ExtendableBean {\n+    private static final long serialVersionUID = 1L;\n+  }\n+  \n   @Test\n   public void testJsonToObject() throws Exception {\n     String json = '{' +\n@@ -188,4 +194,12 @@ public void testEmptyJsonMap() throws Exception {\n          new TypeLiteral<Map<String,String>>(){}.getType());\n     assertTrue(data.isEmpty());\n   }\n+ \n+  @Test\n+  public void testEmptyExtendableBean() throws Exception {\n+    String emptyMap = \"{}\";\n+    ExtendableTestObject data = beanJsonConverter.convertToObject(emptyMap,\n+         ExtendableTestObject.class);\n+    assertTrue(data.isEmpty());\n+  }\n }",
                "raw_url": "https://github.com/apache/shindig/raw/a9489d18c53483a14af9b105294b927e5f5f554f/java/common/src/test/java/org/apache/shindig/protocol/conversion/BeanJsonConverterTest.java",
                "sha": "970036f3b4ea9eee452d6e8a5416d10bc30ec54e",
                "status": "modified"
            }
        ],
        "message": "BeanJsonConverter fails with NullPointerException for empty ExtendableBeans\nSHINDIG-1941\nCommitted For Andreas Kohn\n\ngit-svn-id: https://svn.apache.org/repos/asf/shindig/trunk@1541274 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/c097fe1e778993c2a07e42409a2671c2d658d873",
        "patched_files": [
            "BeanJsonConverter.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "BeanJsonConverterTest.java"
        ]
    },
    "shindig_af9664c": {
        "bug_id": "shindig_af9664c",
        "commit": "https://github.com/apache/shindig/commit/af9664c572834851959cfb39b9d5d9fc23b9ef70",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/shindig/blob/af9664c572834851959cfb39b9d5d9fc23b9ef70/java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java?ref=af9664c572834851959cfb39b9d5d9fc23b9ef70",
                "deletions": 2,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java",
                "patch": "@@ -138,7 +138,8 @@ public void removeFeature(String name) {\n    * @return\n    */\n   public boolean sanitizeOutput() {\n-    return (getCurrentView().getType() == View.ContentType.X_HTML_SANITIZED ||\n-        \"1\".equals(getContext().getParameter(ProxyBase.SANITIZE_CONTENT_PARAM)));\n+    return (getCurrentView() != null &&\n+        getCurrentView().getType() == View.ContentType.X_HTML_SANITIZED) ||\n+        \"1\".equals(getContext().getParameter(ProxyBase.SANITIZE_CONTENT_PARAM));\n   }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/shindig/raw/af9664c572834851959cfb39b9d5d9fc23b9ef70/java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java",
                "sha": "25f1adf80b85c168f766b03889f923b40188c91b",
                "status": "modified"
            }
        ],
        "message": "Fix for NPE in check to determine whether content output should be sanitized. SHINDIG-958\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@749439 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/455ae89fe3c7fbec593da7206dc9806c4a5dbcf8",
        "patched_files": [
            "Gadget.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "GadgetTest.java"
        ]
    },
    "shindig_ba48e4e": {
        "bug_id": "shindig_ba48e4e",
        "commit": "https://github.com/apache/shindig/commit/ba48e4ead618a34625fbb4e884e39e817722f7af",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/shindig/blob/ba48e4ead618a34625fbb4e884e39e817722f7af/java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/ProxyHandler.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/ProxyHandler.java?ref=ba48e4ead618a34625fbb4e884e39e817722f7af",
                "deletions": 0,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/ProxyHandler.java",
                "patch": "@@ -143,6 +143,10 @@ protected void doFetch(HttpServletRequest request, HttpServletResponse response)\n     }\n \n     HttpRequest rcr = buildHttpRequest(request, URL_PARAM);\n+    if (rcr == null) {\n+      throw new GadgetException(GadgetException.Code.INVALID_PARAMETER,\n+          \"No url paramater in request\");      \n+    }\n     HttpResponse results = requestPipeline.execute(rcr);\n     \n     if (results.isError()) {",
                "raw_url": "https://github.com/apache/shindig/raw/ba48e4ead618a34625fbb4e884e39e817722f7af/java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/ProxyHandler.java",
                "sha": "0b3b1d3ae36967cda38e7bb42395884dc2525de2",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/shindig/blob/ba48e4ead618a34625fbb4e884e39e817722f7af/java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/ProxyHandlerTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/ProxyHandlerTest.java?ref=ba48e4ead618a34625fbb4e884e39e817722f7af",
                "deletions": 0,
                "filename": "java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/ProxyHandlerTest.java",
                "patch": "@@ -91,6 +91,21 @@ public void testLockedDomainEmbed() throws Exception {\n     assertTrue(rewriter.responseWasRewritten());\n   }\n \n+  public void testNoUrl() throws Exception {\n+    setupProxyRequestMock(\"www.example.com\", null);\n+    expect(lockedDomainService.isSafeForOpenProxy(\"www.example.com\")).andReturn(true);\n+    replay();\n+\n+    try {\n+      proxyHandler.doFetch(request, recorder);\n+      fail(\"Proxy should raise exception if there is no url\");\n+    } catch (GadgetException e) {\n+      // Good!\n+    }\n+  }\n+\n+\n+  \n   public void testHttpRequestFillsParentAndContainer() throws Exception {\n     setupProxyRequestMock(\"www.example.com\", URL_ONE);\n     expect(lockedDomainService.isSafeForOpenProxy(\"www.example.com\")).andReturn(true);",
                "raw_url": "https://github.com/apache/shindig/raw/ba48e4ead618a34625fbb4e884e39e817722f7af/java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/ProxyHandlerTest.java",
                "sha": "390e153dbd0a34b6a7cfdf3327ced8b0c0629b86",
                "status": "modified"
            }
        ],
        "message": "Avoid an NPE from ProxyHandler. Thanks to Ziv Horesh for the patch!\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@886914 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/a840120a3f5568b50e481a398ca86b7340874170",
        "patched_files": [
            "ProxyHandler.java"
        ],
        "repo": "shindig",
        "unit_tests": [
            "ProxyHandlerTest.java"
        ]
    }
}