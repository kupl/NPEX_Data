[
    {
        "parent": "https://github.com/apache/pulsar/commit/d74c1acb0227939279696704b14e078d4942407f",
        "bug_id": "pulsar_1",
        "file": [
            {
                "additions": 1,
                "sha": "82d01de10318a14d83355ce26a200cd9bc78ac2e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a695cdd98c2d5aa804445601693adb30de75d07/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ClientCnx.java",
                "deletions": 1,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ClientCnx.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ClientCnx.java?ref=3a695cdd98c2d5aa804445601693adb30de75d07",
                "patch": "@@ -308,7 +308,7 @@ protected void handleConnected(CommandConnected connected) {\n     @Override\n     protected void handleAuthChallenge(CommandAuthChallenge authChallenge) {\n         checkArgument(authChallenge.hasChallenge());\n-        checkArgument(authChallenge.getChallenge().hasAuthData() && authChallenge.getChallenge().hasAuthData());\n+        checkArgument(authChallenge.getChallenge().hasAuthData());\n \n         // mutual authn. If auth not complete, continue auth; if auth complete, complete connectionFuture.\n         try {",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/3a695cdd98c2d5aa804445601693adb30de75d07/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ClientCnx.java"
            },
            {
                "additions": 4,
                "sha": "d5c60091d293cd671b37b92179c4401ab14a851f",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a695cdd98c2d5aa804445601693adb30de75d07/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerImpl.java",
                "deletions": 2,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerImpl.java?ref=3a695cdd98c2d5aa804445601693adb30de75d07",
                "patch": "@@ -947,7 +947,8 @@ protected boolean verifyLocalBufferIsNotCorrupted(OpSendMsg op) {\n             }\n             return true;\n         } else {\n-            log.warn(\"[{}] Failed while casting {} into ByteBufPair\", producerName, op.cmd.getClass().getName());\n+            log.warn(\"[{}] Failed while casting {} into ByteBufPair\", producerName,\n+                    (op.cmd == null ? null : op.cmd.getClass().getName()));\n             return false;\n         }\n     }\n@@ -1253,7 +1254,8 @@ private void stripChecksum(OpSendMsg op) {\n                 headerFrame.resetReaderIndex();\n             }\n         } else {\n-            log.warn(\"[{}] Failed while casting {} into ByteBufPair\", producerName, op.cmd.getClass().getName());\n+            log.warn(\"[{}] Failed while casting {} into ByteBufPair\", producerName,\n+                    (op.cmd == null ? null : op.cmd.getClass().getName()));\n         }\n     }\n ",
                "changes": 6,
                "blob_url": "https://github.com/apache/pulsar/blob/3a695cdd98c2d5aa804445601693adb30de75d07/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerImpl.java"
            }
        ],
        "repo": "pulsar",
        "message": "fix potential NPE and repeated conditional test (#5776)\n\n### Motivation\r\n\r\nfix potential NPE and repeated conditional test\r\n\r\n### Modifications\r\n\r\nlocal changes",
        "commit": "https://github.com/apache/pulsar/commit/3a695cdd98c2d5aa804445601693adb30de75d07"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/ddf5429efb91e43386d506061b196330cbaae473",
        "bug_id": "pulsar_2",
        "file": [
            {
                "additions": 3,
                "sha": "346b97700adc0d5e0b1ad980368b967b28e12ecd",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/84a519fa7389c3d2609d7445c72c2b6750c607f0/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java",
                "deletions": 2,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java?ref=84a519fa7389c3d2609d7445c72c2b6750c607f0",
                "patch": "@@ -99,6 +99,7 @@\n import org.apache.pulsar.broker.service.BrokerServiceException.ServerMetadataException;\n import org.apache.pulsar.broker.service.BrokerServiceException.ServiceUnitNotReadyException;\n import org.apache.pulsar.broker.service.nonpersistent.NonPersistentTopic;\n+import org.apache.pulsar.broker.service.persistent.DispatchRateLimiter;\n import org.apache.pulsar.broker.service.persistent.PersistentDispatcherMultipleConsumers;\n import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n import org.apache.pulsar.broker.stats.ClusterReplicationMetrics;\n@@ -1372,8 +1373,8 @@ private void updateSubscriptionMessageDispatchRate() {\n             forEachTopic(topic -> {\n                 topic.getSubscriptions().forEach((subName, persistentSubscription) -> {\n                     Dispatcher dispatcher = persistentSubscription.getDispatcher();\n-                    if (dispatcher.getRateLimiter().isPresent()) {\n-                        dispatcher.getRateLimiter().get().updateDispatchRate();\n+                    if (dispatcher != null) {\n+                        dispatcher.getRateLimiter().ifPresent(DispatchRateLimiter::updateDispatchRate);\n                     }\n                 });\n             });",
                "changes": 5,
                "blob_url": "https://github.com/apache/pulsar/blob/84a519fa7389c3d2609d7445c72c2b6750c607f0/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java"
            },
            {
                "additions": 10,
                "sha": "d541d0a734c56484a3140814c6a32025ef6b3282",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/84a519fa7389c3d2609d7445c72c2b6750c607f0/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java",
                "deletions": 4,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java?ref=84a519fa7389c3d2609d7445c72c2b6750c607f0",
                "patch": "@@ -63,6 +63,7 @@\n import org.apache.pulsar.broker.service.BrokerServiceException.TopicTerminatedException;\n import org.apache.pulsar.broker.service.BrokerServiceException.UnsupportedVersionException;\n import org.apache.pulsar.broker.service.Consumer;\n+import org.apache.pulsar.broker.service.Dispatcher;\n import org.apache.pulsar.broker.service.Producer;\n import org.apache.pulsar.broker.service.Replicator;\n import org.apache.pulsar.broker.service.ServerCnx;\n@@ -269,8 +270,12 @@ private void initializeDispatchRateLimiterIfNeeded(Optional<Policies> policies)\n             }\n \n             // dispatch rate limiter for each subscription\n-            subscriptions.forEach((name, subscription) ->\n-                subscription.getDispatcher().initializeDispatchRateLimiterIfNeeded(policies));\n+            subscriptions.forEach((name, subscription) -> {\n+                Dispatcher dispatcher = subscription.getDispatcher();\n+                if (dispatcher != null) {\n+                    dispatcher.initializeDispatchRateLimiterIfNeeded(policies);\n+                }\n+            });\n \n             // dispatch rate limiter for each replicator\n             replicators.forEach((name, replicator) ->\n@@ -1673,8 +1678,9 @@ private boolean shouldTopicBeRetained() {\n         });\n         subscriptions.forEach((subName, sub) -> {\n             sub.getConsumers().forEach(Consumer::checkPermissions);\n-            if (sub.getDispatcher().getRateLimiter().isPresent()) {\n-                sub.getDispatcher().getRateLimiter().get().onPoliciesUpdate(data);\n+            Dispatcher dispatcher = sub.getDispatcher();\n+            if (dispatcher != null) {\n+                dispatcher.getRateLimiter().ifPresent(rateLimiter -> rateLimiter.onPoliciesUpdate(data));\n             }\n         });\n         replicators.forEach((name, replicator) ->",
                "changes": 14,
                "blob_url": "https://github.com/apache/pulsar/blob/84a519fa7389c3d2609d7445c72c2b6750c607f0/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java"
            }
        ],
        "repo": "pulsar",
        "message": "[pulsar-broker] Fix bug that namespace policies does not take effect due to NPE (#5408)\n\n* Fix bug that namespace policies does not take effect due to NPE\r\n\r\n* Prevent NPE if Dispatcher and DispatchRateLimiter return to null",
        "commit": "https://github.com/apache/pulsar/commit/84a519fa7389c3d2609d7445c72c2b6750c607f0"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/5a9d35ca4fc9623d3615dbbb0ac23160e5dc9a32",
        "bug_id": "pulsar_3",
        "file": [
            {
                "additions": 4,
                "sha": "698acfd33e74d63f45e3961b0e268245c8029f27",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/c635d08a448f7b2a4868bb6aefc13dd5f17000a1/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedgerException.java",
                "deletions": 0,
                "filename": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedgerException.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedgerException.java?ref=c635d08a448f7b2a4868bb6aefc13dd5f17000a1",
                "patch": "@@ -71,6 +71,10 @@ public ManagedLedgerFencedException(Exception e) {\n         public ManagedLedgerNotFoundException(Exception e) {\n             super(e);\n         }\n+\n+        public ManagedLedgerNotFoundException(String message) {\n+            super(message);\n+        }\n     }\n \n     public static class ManagedLedgerTerminatedException extends ManagedLedgerException {",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/c635d08a448f7b2a4868bb6aefc13dd5f17000a1/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedgerException.java"
            },
            {
                "additions": 7,
                "sha": "3a803864f5ecd2e505318ca7cfd7bee91fb65efc",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/c635d08a448f7b2a4868bb6aefc13dd5f17000a1/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java",
                "deletions": 2,
                "filename": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java?ref=c635d08a448f7b2a4868bb6aefc13dd5f17000a1",
                "patch": "@@ -1790,8 +1790,13 @@ void updateCursor(ManagedCursorImpl cursor, PositionImpl newPosition) {\n         }\n     }\n \n-    PositionImpl startReadOperationOnLedger(PositionImpl position) {\n-        long ledgerId = ledgers.ceilingKey(position.getLedgerId());\n+    PositionImpl startReadOperationOnLedger(PositionImpl position, OpReadEntry opReadEntry) {\n+        Long ledgerId = ledgers.ceilingKey(position.getLedgerId());\n+        if (null == ledgerId) {\n+            opReadEntry.readEntriesFailed(new ManagedLedgerException.NoMoreEntriesToReadException(\"The ceilingKey(K key) method is used to return the \" +\n+                    \"least key greater than or equal to the given key, or null if there is no such key\"), null);\n+        }\n+\n         if (ledgerId != position.getLedgerId()) {\n             // The ledger pointed by this position does not exist anymore. It was deleted because it was empty. We need\n             // to skip on the next available ledger",
                "changes": 9,
                "blob_url": "https://github.com/apache/pulsar/blob/c635d08a448f7b2a4868bb6aefc13dd5f17000a1/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java"
            },
            {
                "additions": 3,
                "sha": "c881eb1de5e9b66428d67623b8b783cc8cc01ecf",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/c635d08a448f7b2a4868bb6aefc13dd5f17000a1/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/OpReadEntry.java",
                "deletions": 3,
                "filename": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/OpReadEntry.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/OpReadEntry.java?ref=c635d08a448f7b2a4868bb6aefc13dd5f17000a1",
                "patch": "@@ -49,7 +49,7 @@\n     public static OpReadEntry create(ManagedCursorImpl cursor, PositionImpl readPositionRef, int count,\n             ReadEntriesCallback callback, Object ctx) {\n         OpReadEntry op = RECYCLER.get();\n-        op.readPosition = cursor.ledger.startReadOperationOnLedger(readPositionRef);\n+        op.readPosition = cursor.ledger.startReadOperationOnLedger(readPositionRef, op);\n         op.cursor = cursor;\n         op.count = count;\n         op.callback = callback;\n@@ -128,12 +128,12 @@ void checkReadCompletion() {\n         if (entries.size() < count && cursor.hasMoreEntries()) {\n             // We still have more entries to read from the next ledger, schedule a new async operation\n             if (nextReadPosition.getLedgerId() != readPosition.getLedgerId()) {\n-                cursor.ledger.startReadOperationOnLedger(nextReadPosition);\n+                cursor.ledger.startReadOperationOnLedger(nextReadPosition, OpReadEntry.this);\n             }\n \n             // Schedule next read in a different thread\n             cursor.ledger.getExecutor().execute(safeRun(() -> {\n-                readPosition = cursor.ledger.startReadOperationOnLedger(nextReadPosition);\n+                readPosition = cursor.ledger.startReadOperationOnLedger(nextReadPosition, OpReadEntry.this);\n                 cursor.ledger.asyncReadEntries(OpReadEntry.this);\n             }));\n         } else {",
                "changes": 6,
                "blob_url": "https://github.com/apache/pulsar/blob/c635d08a448f7b2a4868bb6aefc13dd5f17000a1/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/OpReadEntry.java"
            }
        ],
        "repo": "pulsar",
        "message": "[Issue:5669] Fix the ledgerID not found cause NPE (#5809)\n\n## Motivation\r\nwhen ledgers.ceilingKey return a NULL value, we need to process the ledgerId is NUll case.\r\n\r\n## Modifications\r\nchange long ledgerId to Long ledgerId and check if ledgerId is NULL.",
        "commit": "https://github.com/apache/pulsar/commit/c635d08a448f7b2a4868bb6aefc13dd5f17000a1"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/520f9aa955de81fe2df45958db568b03879a2958",
        "bug_id": "pulsar_4",
        "file": [
            {
                "additions": 2,
                "sha": "3e219d6c40df5b8de0a34dbbb394b0d87913c3ed",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/9b74e9dc734f3c24290b2c81d3f492928fec7484/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionsStatsGenerator.java",
                "deletions": 1,
                "filename": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionsStatsGenerator.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionsStatsGenerator.java?ref=9b74e9dc734f3c24290b2c81d3f492928fec7484",
                "patch": "@@ -38,7 +38,8 @@\n     private static final Logger log = LoggerFactory.getLogger(FunctionsStatsGenerator.class);\n \n     public static void generate(WorkerService workerService, String cluster, SimpleTextOutputStream out) {\n-        if (workerService != null) {\n+        // only when worker service is initialized, we generate the stats. otherwise we will get bunch of NPE.\n+        if (workerService != null && workerService.isInitialized()) {\n             Map<String, FunctionRuntimeInfo> functionRuntimes\n                     = workerService.getFunctionRuntimeManager().getFunctionRuntimeInfos();\n ",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/9b74e9dc734f3c24290b2c81d3f492928fec7484/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionsStatsGenerator.java"
            },
            {
                "additions": 15,
                "sha": "849d05d5043126f1e04f8e7a70b7ebe9ca02eb0f",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/9b74e9dc734f3c24290b2c81d3f492928fec7484/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/FunctionStatsGeneratorTest.java",
                "deletions": 0,
                "filename": "pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/FunctionStatsGeneratorTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/FunctionStatsGeneratorTest.java?ref=9b74e9dc734f3c24290b2c81d3f492928fec7484",
                "patch": "@@ -20,6 +20,7 @@\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n import lombok.ToString;\n import org.apache.pulsar.common.util.SimpleTextOutputStream;\n import org.apache.pulsar.functions.proto.Function;\n@@ -41,10 +42,23 @@\n import static com.google.common.base.Preconditions.checkArgument;\n import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import static org.testng.Assert.assertEquals;\n \n public class FunctionStatsGeneratorTest {\n \n+    @Test\n+    public void testGenerateFunctionStatsWhenWorkerServiceIsNotInitialized() {\n+        WorkerService workerService = mock(WorkerService.class);\n+        when(workerService.isInitialized()).thenReturn(false);\n+        FunctionsStatsGenerator.generate(\n+            workerService, \"test-cluster\", new SimpleTextOutputStream(Unpooled.buffer()));\n+        verify(workerService, times(1)).isInitialized();\n+        verify(workerService, times(0)).getFunctionRuntimeManager();\n+    }\n+\n     @Test\n     public void testFunctionsStatsGenerate() {\n         FunctionRuntimeManager functionRuntimeManager = mock(FunctionRuntimeManager.class);\n@@ -53,6 +67,7 @@ public void testFunctionsStatsGenerate() {\n         WorkerService workerService = mock(WorkerService.class);\n         doReturn(functionRuntimeManager).when(workerService).getFunctionRuntimeManager();\n         doReturn(new WorkerConfig()).when(workerService).getWorkerConfig();\n+        when(workerService.isInitialized()).thenReturn(true);\n \n         CompletableFuture<InstanceCommunication.MetricsData> metricsDataCompletableFuture = new CompletableFuture<>();\n         InstanceCommunication.MetricsData metricsData = InstanceCommunication.MetricsData.newBuilder()",
                "changes": 15,
                "blob_url": "https://github.com/apache/pulsar/blob/9b74e9dc734f3c24290b2c81d3f492928fec7484/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/FunctionStatsGeneratorTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "[functions][stats] NPE in FunctionStatsGenerator when worker service is not ready (#2723)\n\n* [functions][stats] NPE in FunctionStatsGenerator when worker service is not ready\r\n\r\n*Motivation*\r\n\r\nNullPointerException was thrown when function worker is running as part of broker and metrics collection kicks in\r\nbefore worker service completes initialization\r\n\r\n*Changes*\r\n\r\nOnly generate functions when worker service is ready\r\n\r\n* Fix FunctionSTatsGeneratorTest",
        "commit": "https://github.com/apache/pulsar/commit/9b74e9dc734f3c24290b2c81d3f492928fec7484"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/23dd38f3108a0456cedb56452ac39aaa57a2ae81",
        "bug_id": "pulsar_5",
        "file": [
            {
                "additions": 1,
                "sha": "57e8044ad87edad4ec547a773d63cfaaf00192a3",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ac10b006cf59308ae1a0bf8307ddcb2f5745cc11/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/OpFindNewest.java",
                "deletions": 1,
                "filename": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/OpFindNewest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/OpFindNewest.java?ref=ac10b006cf59308ae1a0bf8307ddcb2f5745cc11",
                "patch": "@@ -64,7 +64,7 @@ public void readEntryComplete(Entry entry, Object ctx) {\n         switch (state) {\n         case checkFirst:\n             if (!condition.apply(entry)) {\n-                callback.findEntryComplete(null, OpFindNewest.this.ctx);\n+                callback.findEntryComplete(startPosition, OpFindNewest.this.ctx);\n                 return;\n             } else {\n                 lastMatchedPosition = position;",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/ac10b006cf59308ae1a0bf8307ddcb2f5745cc11/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/OpFindNewest.java"
            },
            {
                "additions": 5,
                "sha": "fc3a8cb129c2e10f1f0c6a4c2d5b465be329edf0",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ac10b006cf59308ae1a0bf8307ddcb2f5745cc11/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedCursorTest.java",
                "deletions": 2,
                "filename": "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedCursorTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedCursorTest.java?ref=ac10b006cf59308ae1a0bf8307ddcb2f5745cc11",
                "patch": "@@ -1645,7 +1645,7 @@ void testFindNewestMatching() throws Exception {\n         ledger.addEntry(\"not-expired\".getBytes(Encoding));\n         ledger.addEntry(\"not-expired\".getBytes(Encoding));\n \n-        assertNull(\n+        assertEquals(c1.readPosition,\n                 c1.findNewestMatching(entry -> Arrays.equals(entry.getDataAndRelease(), \"expired\".getBytes(Encoding))));\n     }\n \n@@ -2108,7 +2108,7 @@ void internalTestFindNewestMatchingAllEntries(final String name, final int entri\n         ManagedLedger ledger = factory.open(ledgerAndCursorName, config);\n         ManagedCursorImpl c1 = (ManagedCursorImpl) ledger.openCursor(ledgerAndCursorName);\n \n-        ledger.addEntry(getEntryPublishTime(\"retained1\"));\n+        Position firstPosition = ledger.addEntry(getEntryPublishTime(\"retained1\"));\n         // space apart message publish times\n         Thread.sleep(100);\n         ledger.addEntry(getEntryPublishTime(\"retained2\"));\n@@ -2135,6 +2135,9 @@ void internalTestFindNewestMatchingAllEntries(final String name, final int entri\n         PositionImpl found = (PositionImpl) findPositionFromAllEntries(c1, timestamp);\n         assertEquals(found.getLedgerId(), ledgerId);\n         assertEquals(found.getEntryId(), expectedEntryId);\n+\n+        found = (PositionImpl) findPositionFromAllEntries(c1, 0);\n+        assertEquals(found, firstPosition);\n     }\n \n     @Test(timeOut = 20000)",
                "changes": 7,
                "blob_url": "https://github.com/apache/pulsar/blob/ac10b006cf59308ae1a0bf8307ddcb2f5745cc11/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedCursorTest.java"
            },
            {
                "additions": 1,
                "sha": "377e0ec1b765a3640174ceab8ade564ba541cda5",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ac10b006cf59308ae1a0bf8307ddcb2f5745cc11/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/PersistentMessageFinderTest.java",
                "deletions": 1,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/PersistentMessageFinderTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/PersistentMessageFinderTest.java?ref=ac10b006cf59308ae1a0bf8307ddcb2f5745cc11",
                "patch": "@@ -154,7 +154,7 @@ void testPersistentMessageFinder() throws Exception {\n         future = findMessage(result, c1, beginTimestamp);\n         future.get();\n         assertEquals(result.exception, null);\n-        assertEquals(result.position, null);\n+        assertEquals(result.position, c1.getFirstPosition());\n \n         result.reset();\n         future = findMessage(result, c1, endTimestamp);",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/ac10b006cf59308ae1a0bf8307ddcb2f5745cc11/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/PersistentMessageFinderTest.java"
            },
            {
                "additions": 7,
                "sha": "486bea0e64daffd077eb8ef1dea6e383c8ef15df",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ac10b006cf59308ae1a0bf8307ddcb2f5745cc11/tests/integration/pom.xml",
                "deletions": 0,
                "filename": "tests/integration/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/pom.xml?ref=ac10b006cf59308ae1a0bf8307ddcb2f5745cc11",
                "patch": "@@ -137,6 +137,13 @@\n       <scope>test</scope>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.facebook.presto</groupId>\n+      <artifactId>presto-jdbc</artifactId>\n+      <version>${presto.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+\n   </dependencies>\n \n   <build>",
                "changes": 7,
                "blob_url": "https://github.com/apache/pulsar/blob/ac10b006cf59308ae1a0bf8307ddcb2f5745cc11/tests/integration/pom.xml"
            },
            {
                "additions": 5,
                "sha": "71ebb48e7eb3825e6d9c7141009fec752d214336",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ac10b006cf59308ae1a0bf8307ddcb2f5745cc11/tests/integration/src/test/java/org/apache/pulsar/tests/integration/containers/PrestoWorkerContainer.java",
                "deletions": 0,
                "filename": "tests/integration/src/test/java/org/apache/pulsar/tests/integration/containers/PrestoWorkerContainer.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/java/org/apache/pulsar/tests/integration/containers/PrestoWorkerContainer.java?ref=ac10b006cf59308ae1a0bf8307ddcb2f5745cc11",
                "patch": "@@ -37,6 +37,7 @@ public PrestoWorkerContainer(String clusterName, String hostname) {\n                 -1,\n                 PRESTO_HTTP_PORT,\n                 \"/v1/node\");\n+\n     }\n \n     @Override\n@@ -50,4 +51,8 @@ protected void beforeStop() {\n             );\n         }\n     }\n+\n+    public String getUrl() {\n+        return String.format(\"%s:%s\",  getContainerIpAddress(), getMappedPort(PrestoWorkerContainer.PRESTO_HTTP_PORT));\n+    }\n }",
                "changes": 5,
                "blob_url": "https://github.com/apache/pulsar/blob/ac10b006cf59308ae1a0bf8307ddcb2f5745cc11/tests/integration/src/test/java/org/apache/pulsar/tests/integration/containers/PrestoWorkerContainer.java"
            },
            {
                "additions": 90,
                "sha": "093f3eb5a675d8dbfa46fbf0c294444c89cd9183",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ac10b006cf59308ae1a0bf8307ddcb2f5745cc11/tests/integration/src/test/java/org/apache/pulsar/tests/integration/presto/TestBasicPresto.java",
                "deletions": 2,
                "filename": "tests/integration/src/test/java/org/apache/pulsar/tests/integration/presto/TestBasicPresto.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/java/org/apache/pulsar/tests/integration/presto/TestBasicPresto.java?ref=ac10b006cf59308ae1a0bf8307ddcb2f5745cc11",
                "patch": "@@ -32,6 +32,15 @@\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n import static org.assertj.core.api.Assertions.assertThat;\n \n @Slf4j\n@@ -84,7 +93,12 @@ public void testSimpleSQLQuery(boolean isBatched) throws Exception {\n                                     .serviceUrl(pulsarCluster.getPlainTextServiceUrl())\n                                     .build();\n \n-        final String stocksTopic = \"stocks\";\n+        String stocksTopic;\n+        if (isBatched) {\n+            stocksTopic = \"stocks_batched\";\n+        } else {\n+            stocksTopic = \"stocks_nonbatched\";\n+        }\n \n         @Cleanup\n         Producer<Stock> producer = pulsarClient.newProducer(JSONSchema.of(Stock.class))\n@@ -96,6 +110,7 @@ public void testSimpleSQLQuery(boolean isBatched) throws Exception {\n             final Stock stock = new Stock(i,\"STOCK_\" + i , 100.0 + i * 10);\n             producer.send(stock);\n         }\n+        producer.flush();\n \n         result = execQuery(\"show schemas in pulsar;\");\n         assertThat(result.getExitCode()).isEqualTo(0);\n@@ -105,7 +120,7 @@ public void testSimpleSQLQuery(boolean isBatched) throws Exception {\n         assertThat(result.getExitCode()).isEqualTo(0);\n         assertThat(result.getStdout()).contains(\"stocks\");\n \n-        ContainerExecResult containerExecResult = execQuery(\"select * from pulsar.\\\"public/default\\\".stocks order by entryid;\");\n+        ContainerExecResult containerExecResult = execQuery(String.format(\"select * from pulsar.\\\"public/default\\\".%s order by entryid;\", stocksTopic));\n         assertThat(containerExecResult.getExitCode()).isEqualTo(0);\n         log.info(\"select sql query output \\n{}\", containerExecResult.getStdout());\n         String[] split = containerExecResult.getStdout().split(\"\\n\");\n@@ -119,6 +134,67 @@ public void testSimpleSQLQuery(boolean isBatched) throws Exception {\n             assertThat(split2).contains(\"\\\"\" + (100.0 + i * 10) + \"\\\"\");\n         }\n \n+        // test predicate pushdown\n+\n+        String url = String.format(\"jdbc:presto://%s\",  pulsarCluster.getPrestoWorkerContainer().getUrl());\n+        Connection connection = DriverManager.getConnection(url, \"test\", null);\n+\n+        String query = String.format(\"select * from pulsar\" +\n+                \".\\\"public/default\\\".%s order by __publish_time__\", stocksTopic);\n+        log.info(\"Executing query: {}\", query);\n+        ResultSet res = connection.createStatement().executeQuery(query);\n+\n+        List<Timestamp> timestamps = new LinkedList<>();\n+        while (res.next()) {\n+            printCurrent(res);\n+            timestamps.add(res.getTimestamp(\"__publish_time__\"));\n+        }\n+\n+        assertThat(timestamps.size()).isGreaterThan(NUM_OF_STOCKS - 2);\n+\n+        query = String.format(\"select * from pulsar\" +\n+                \".\\\"public/default\\\".%s where __publish_time__ > timestamp '%s' order by __publish_time__\", stocksTopic, timestamps.get(timestamps.size() / 2));\n+        log.info(\"Executing query: {}\", query);\n+        res = connection.createStatement().executeQuery(query);\n+\n+        List<Timestamp> returnedTimestamps = new LinkedList<>();\n+        while (res.next()) {\n+            printCurrent(res);\n+            returnedTimestamps.add(res.getTimestamp(\"__publish_time__\"));\n+        }\n+\n+        assertThat(returnedTimestamps.size()).isEqualTo(timestamps.size() / 2);\n+\n+        // Try with a predicate that has a earlier time than any entry\n+        // Should return all rows\n+        query = String.format(\"select * from pulsar\" +\n+                \".\\\"public/default\\\".%s where __publish_time__ > from_unixtime(%s) order by __publish_time__\", stocksTopic, 0);\n+        log.info(\"Executing query: {}\", query);\n+        res = connection.createStatement().executeQuery(query);\n+\n+        returnedTimestamps = new LinkedList<>();\n+        while (res.next()) {\n+            printCurrent(res);\n+            returnedTimestamps.add(res.getTimestamp(\"__publish_time__\"));\n+        }\n+\n+        assertThat(returnedTimestamps.size()).isEqualTo(timestamps.size());\n+\n+        // Try with a predicate that has a latter time than any entry\n+        // Should return no rows\n+\n+        query = String.format(\"select * from pulsar\" +\n+                \".\\\"public/default\\\".%s where __publish_time__ > from_unixtime(%s) order by __publish_time__\", stocksTopic, 99999999999L);\n+        log.info(\"Executing query: {}\", query);\n+        res = connection.createStatement().executeQuery(query);\n+\n+        returnedTimestamps = new LinkedList<>();\n+        while (res.next()) {\n+            printCurrent(res);\n+            returnedTimestamps.add(res.getTimestamp(\"__publish_time__\"));\n+        }\n+\n+        assertThat(returnedTimestamps.size()).isEqualTo(0);\n     }\n \n     @AfterSuite\n@@ -137,4 +213,16 @@ public static ContainerExecResult execQuery(final String query) throws Exception\n \n     }\n \n+    private static void printCurrent(ResultSet rs) throws SQLException {\n+        ResultSetMetaData rsmd = rs.getMetaData();\n+        int columnsNumber = rsmd.getColumnCount();\n+        for (int i = 1; i <= columnsNumber; i++) {\n+            if (i > 1) System.out.print(\",  \");\n+            String columnValue = rs.getString(i);\n+            System.out.print(columnValue + \" \" + rsmd.getColumnName(i));\n+        }\n+        System.out.println(\"\");\n+\n+    }\n+\n }",
                "changes": 92,
                "blob_url": "https://github.com/apache/pulsar/blob/ac10b006cf59308ae1a0bf8307ddcb2f5745cc11/tests/integration/src/test/java/org/apache/pulsar/tests/integration/presto/TestBasicPresto.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix: predicate pushdown for Pulsar SQL NPE (#4744)\n\n* Fix: predicate pushdown for Pulsar SQL NPE\r\n\r\n* fix unit test",
        "commit": "https://github.com/apache/pulsar/commit/ac10b006cf59308ae1a0bf8307ddcb2f5745cc11"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/a43a9339da886cc51c57465770dd2c71b83358d4",
        "bug_id": "pulsar_6",
        "file": [
            {
                "additions": 33,
                "sha": "d9cab2399a50f779c7ccf289fbdd49d65a05b0f4",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/412c8fdb5ea61593017c395a7c8e291c922d6bf5/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/LoadManagerShared.java",
                "deletions": 33,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/LoadManagerShared.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/LoadManagerShared.java?ref=412c8fdb5ea61593017c395a7c8e291c922d6bf5",
                "patch": "@@ -21,6 +21,7 @@\n import static com.google.common.base.Preconditions.checkArgument;\n import static org.apache.pulsar.broker.cache.ConfigurationCacheService.POLICIES;\n import static org.apache.pulsar.broker.web.PulsarWebResource.path;\n+import static org.apache.pulsar.common.stats.JvmMetrics.getJvmDirectMemoryUsed;\n \n import java.io.IOException;\n import java.net.MalformedURLException;\n@@ -41,12 +42,13 @@\n import org.apache.pulsar.broker.ServiceConfiguration;\n import org.apache.pulsar.broker.loadbalance.BrokerHostUsage;\n import org.apache.pulsar.broker.loadbalance.LoadData;\n-import static org.apache.pulsar.common.stats.JvmMetrics.getJvmDirectMemoryUsed;\n import org.apache.pulsar.common.naming.NamespaceBundle;\n import org.apache.pulsar.common.naming.NamespaceName;\n import org.apache.pulsar.common.naming.ServiceUnitId;\n import org.apache.pulsar.common.policies.data.Policies;\n import org.apache.pulsar.common.util.FutureUtil;\n+import org.apache.pulsar.common.util.collections.ConcurrentOpenHashMap;\n+import org.apache.pulsar.common.util.collections.ConcurrentOpenHashSet;\n import org.apache.pulsar.policies.data.loadbalancer.SystemResourceUsage;\n import org.apache.pulsar.zookeeper.ZooKeeperDataCache;\n import org.slf4j.Logger;\n@@ -195,11 +197,12 @@ public static void applyNamespacePolicies(final ServiceUnitId serviceUnit,\n      * @param target\n      *            Map to fill.\n      */\n-    public static void fillNamespaceToBundlesMap(final Set<String> bundles, final Map<String, Set<String>> target) {\n+    public static void fillNamespaceToBundlesMap(final Set<String> bundles,\n+            final ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>> target) {\n         bundles.forEach(bundleName -> {\n             final String namespaceName = getNamespaceNameFromBundleName(bundleName);\n             final String bundleRange = getBundleRangeFromBundleName(bundleName);\n-            target.computeIfAbsent(namespaceName, k -> new HashSet<>()).add(bundleRange);\n+            target.computeIfAbsent(namespaceName, k -> new ConcurrentOpenHashSet<>()).add(bundleRange);\n         });\n     }\n \n@@ -258,41 +261,32 @@ public static boolean isLoadSheddingEnabled(final PulsarService pulsar) {\n      *            Map from brokers to namespaces to bundle ranges.\n      */\n     public static void removeMostServicingBrokersForNamespace(final String assignedBundleName,\n-            final Set<String> candidates, final Map<String, Map<String, Set<String>>> brokerToNamespaceToBundleRange) {\n+            final Set<String> candidates,\n+            final ConcurrentOpenHashMap<String, ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>>> brokerToNamespaceToBundleRange) {\n         if (candidates.isEmpty()) {\n             return;\n         }\n+\n         final String namespaceName = getNamespaceNameFromBundleName(assignedBundleName);\n         int leastBundles = Integer.MAX_VALUE;\n+\n         for (final String broker : candidates) {\n-            if (brokerToNamespaceToBundleRange.containsKey(broker)) {\n-                final Set<String> bundleRanges = brokerToNamespaceToBundleRange.get(broker).get(namespaceName);\n-                if (bundleRanges == null) {\n-                    // Assume that when the namespace is absent, there are no bundles for this namespace assigned to\n-                    // that broker.\n-                    leastBundles = 0;\n-                    break;\n-                }\n-                leastBundles = Math.min(leastBundles, bundleRanges.size());\n-            } else {\n-                // Assume non-present brokers have 0 bundles.\n-                leastBundles = 0;\n+            int bundles = (int) brokerToNamespaceToBundleRange\n+                    .computeIfAbsent(broker, k -> new ConcurrentOpenHashMap<>())\n+                    .computeIfAbsent(namespaceName, k -> new ConcurrentOpenHashSet<>()).size();\n+            leastBundles = Math.min(leastBundles, bundles);\n+            if (leastBundles == 0) {\n                 break;\n             }\n         }\n-        if (leastBundles == 0) {\n-            // By assumption, the namespace name will not be present if there are no bundles in the namespace\n-            // assigned to the broker.\n-            candidates.removeIf(broker -> brokerToNamespaceToBundleRange.containsKey(broker)\n-                    && brokerToNamespaceToBundleRange.get(broker).containsKey(namespaceName));\n-        } else {\n-            final int finalLeastBundles = leastBundles;\n-            // We may safely assume that each broker has at least one bundle for this namespace.\n-            // Note that this case is far less likely since it implies that there are at least as many bundles for this\n-            // namespace as brokers.\n-            candidates.removeIf(broker -> brokerToNamespaceToBundleRange.get(broker).get(namespaceName)\n-                    .size() != finalLeastBundles);\n-        }\n+\n+        // Since `brokerToNamespaceToBundleRange` can be updated by other threads,\n+        // `leastBundles` may differ from the actual value.\n+\n+        final int finalLeastBundles = leastBundles;\n+        candidates.removeIf(\n+                broker -> brokerToNamespaceToBundleRange.computeIfAbsent(broker, k -> new ConcurrentOpenHashMap<>())\n+                        .computeIfAbsent(namespaceName, k -> new ConcurrentOpenHashSet<>()).size() > finalLeastBundles);\n     }\n \n     /**\n@@ -324,7 +318,8 @@ public static void removeMostServicingBrokersForNamespace(final String assignedB\n      * @param brokerToNamespaceToBundleRange\n      */\n     public static void filterAntiAffinityGroupOwnedBrokers(final PulsarService pulsar, final String assignedBundleName,\n-            final Set<String> candidates, final Map<String, Map<String, Set<String>>> brokerToNamespaceToBundleRange,\n+            final Set<String> candidates,\n+            final ConcurrentOpenHashMap<String, ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>>> brokerToNamespaceToBundleRange,\n             Map<String, String> brokerToDomainMap) {\n         if (candidates.isEmpty()) {\n             return;\n@@ -424,8 +419,8 @@ private static void filterDomainsNotHavingLeastNumberAntiAffinityNamespaces(\n      * @return\n      */\n     public static CompletableFuture<Map<String, Integer>> getAntiAffinityNamespaceOwnedBrokers(\n-            final PulsarService pulsar, String namespaceName,\n-            Map<String, Map<String, Set<String>>> brokerToNamespaceToBundleRange) {\n+            final PulsarService pulsar, final String namespaceName,\n+            final ConcurrentOpenHashMap<String, ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>>> brokerToNamespaceToBundleRange) {\n \n         CompletableFuture<Map<String, Integer>> antiAffinityNsBrokersResult = new CompletableFuture<>();\n         ZooKeeperDataCache<Policies> policiesCache = pulsar.getConfigurationCache().policiesCache();\n@@ -440,6 +435,10 @@ private static void filterDomainsNotHavingLeastNumberAntiAffinityNamespaces(\n             final List<CompletableFuture<Void>> futures = Lists.newArrayList();\n             brokerToNamespaceToBundleRange.forEach((broker, nsToBundleRange) -> {\n                 nsToBundleRange.forEach((ns, bundleRange) -> {\n+                    if (bundleRange.isEmpty()) {\n+                        return;\n+                    }\n+\n                     CompletableFuture<Void> future = new CompletableFuture<>();\n                     futures.add(future);\n                     policiesCache.getAsync(path(POLICIES, ns)).thenAccept(nsPolicies -> {\n@@ -481,7 +480,8 @@ private static void filterDomainsNotHavingLeastNumberAntiAffinityNamespaces(\n      * @throws Exception\n      */\n     public static boolean shouldAntiAffinityNamespaceUnload(String namespace, String bundle, String currentBroker,\n-            final PulsarService pulsar, Map<String, Map<String, Set<String>>> brokerToNamespaceToBundleRange,\n+            final PulsarService pulsar,\n+            final ConcurrentOpenHashMap<String, ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>>> brokerToNamespaceToBundleRange,\n             Set<String> candidateBroekrs) throws Exception {\n \n         Map<String, Integer> brokerNamespaceCount = getAntiAffinityNamespaceOwnedBrokers(pulsar, namespace,",
                "changes": 66,
                "blob_url": "https://github.com/apache/pulsar/blob/412c8fdb5ea61593017c395a7c8e291c922d6bf5/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/LoadManagerShared.java"
            },
            {
                "additions": 12,
                "sha": "0b174790864a04b42b07a533aa1197a527f43c81",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/412c8fdb5ea61593017c395a7c8e291c922d6bf5/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/ModularLoadManagerImpl.java",
                "deletions": 6,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/ModularLoadManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/ModularLoadManagerImpl.java?ref=412c8fdb5ea61593017c395a7c8e291c922d6bf5",
                "patch": "@@ -69,6 +69,8 @@\n import org.apache.pulsar.common.policies.data.Policies;\n import org.apache.pulsar.common.policies.data.ResourceQuota;\n import org.apache.pulsar.common.util.ObjectMapperFactory;\n+import org.apache.pulsar.common.util.collections.ConcurrentOpenHashMap;\n+import org.apache.pulsar.common.util.collections.ConcurrentOpenHashSet;\n import org.apache.pulsar.policies.data.loadbalancer.LocalBrokerData;\n import org.apache.pulsar.policies.data.loadbalancer.NamespaceBundleStats;\n import org.apache.pulsar.policies.data.loadbalancer.SystemResourceUsage;\n@@ -125,7 +127,7 @@\n \n     // Map from brokers to namespaces to the bundle ranges in that namespace assigned to that broker.\n     // Used to distribute bundles within a namespace evely across brokers.\n-    private final Map<String, Map<String, Set<String>>> brokerToNamespaceToBundleRange;\n+    private final ConcurrentOpenHashMap<String, ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>>> brokerToNamespaceToBundleRange;\n \n     // Path to the ZNode containing the LocalBrokerData json for this broker.\n     private String brokerZnodePath;\n@@ -189,7 +191,7 @@\n      */\n     public ModularLoadManagerImpl() {\n         brokerCandidateCache = new HashSet<>();\n-        brokerToNamespaceToBundleRange = new HashMap<>();\n+        brokerToNamespaceToBundleRange = new ConcurrentOpenHashMap<>();\n         defaultStats = new NamespaceBundleStats();\n         filterPipeline = new ArrayList<>();\n         loadData = new LoadData();\n@@ -544,8 +546,8 @@ private void updateBundleData() {\n \n             // Using the newest data, update the aggregated time-average data for the current broker.\n             brokerData.getTimeAverageData().reset(statsMap.keySet(), bundleData, defaultStats);\n-            final Map<String, Set<String>> namespaceToBundleRange = brokerToNamespaceToBundleRange\n-                    .computeIfAbsent(broker, k -> new HashMap<>());\n+            final ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>> namespaceToBundleRange = brokerToNamespaceToBundleRange\n+                    .computeIfAbsent(broker, k -> new ConcurrentOpenHashMap<>());\n             synchronized (namespaceToBundleRange) {\n                 namespaceToBundleRange.clear();\n                 LoadManagerShared.fillNamespaceToBundlesMap(statsMap.keySet(), namespaceToBundleRange);\n@@ -769,8 +771,12 @@ public void onUpdate(final String path, final LocalBrokerData data, final Stat s\n \n             final String namespaceName = LoadManagerShared.getNamespaceNameFromBundleName(bundle);\n             final String bundleRange = LoadManagerShared.getBundleRangeFromBundleName(bundle);\n-            brokerToNamespaceToBundleRange.get(broker.get()).computeIfAbsent(namespaceName, k -> new HashSet<>())\n-                    .add(bundleRange);\n+            final ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>> namespaceToBundleRange = brokerToNamespaceToBundleRange\n+                    .computeIfAbsent(broker.get(), k -> new ConcurrentOpenHashMap<>());\n+            synchronized (namespaceToBundleRange) {\n+                namespaceToBundleRange.computeIfAbsent(namespaceName, k -> new ConcurrentOpenHashSet<>())\n+                        .add(bundleRange);\n+            }\n             return broker;\n         }\n     }",
                "changes": 18,
                "blob_url": "https://github.com/apache/pulsar/blob/412c8fdb5ea61593017c395a7c8e291c922d6bf5/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/ModularLoadManagerImpl.java"
            },
            {
                "additions": 9,
                "sha": "36102097d51fb24afde941033c0716be8e1d62ba",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/412c8fdb5ea61593017c395a7c8e291c922d6bf5/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/SimpleLoadManagerImpl.java",
                "deletions": 6,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/SimpleLoadManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/SimpleLoadManagerImpl.java?ref=412c8fdb5ea61593017c395a7c8e291c922d6bf5",
                "patch": "@@ -54,6 +54,8 @@\n import org.apache.pulsar.common.policies.data.ResourceQuota;\n import org.apache.pulsar.common.stats.Metrics;\n import org.apache.pulsar.common.util.ObjectMapperFactory;\n+import org.apache.pulsar.common.util.collections.ConcurrentOpenHashMap;\n+import org.apache.pulsar.common.util.collections.ConcurrentOpenHashSet;\n import org.apache.pulsar.policies.data.loadbalancer.LoadReport;\n import org.apache.pulsar.policies.data.loadbalancer.NamespaceBundleStats;\n import org.apache.pulsar.policies.data.loadbalancer.ResourceUnitRanking;\n@@ -113,7 +115,7 @@\n \n     // Map from brokers to namespaces to the bundle ranges in that namespace assigned to that broker.\n     // Used to distribute bundles within a namespace evely across brokers.\n-    private final Map<String, Map<String, Set<String>>> brokerToNamespaceToBundleRange;\n+    private final ConcurrentOpenHashMap<String, ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>>> brokerToNamespaceToBundleRange;\n \n     // CPU usage per msg/sec\n     private double realtimeCpuLoadFactor = 0.025;\n@@ -199,7 +201,7 @@ public SimpleLoadManagerImpl() {\n         bundleLossesCache = new HashSet<>();\n         brokerCandidateCache = new HashSet<>();\n         availableBrokersCache = new HashSet<>();\n-        brokerToNamespaceToBundleRange = new HashMap<>();\n+        brokerToNamespaceToBundleRange = new ConcurrentOpenHashMap<>();\n         this.brokerTopicLoadingPredicate = new BrokerTopicLoadingPredicate() {\n             @Override\n             public boolean isEnablePersistentTopics(String brokerUrl) {\n@@ -899,8 +901,9 @@ private synchronized ResourceUnit findBrokerForPlacement(Multimap<Long, Resource\n                 // Add preallocated bundle range so incoming bundles from the same namespace are not assigned to the\n                 // same broker.\n                 brokerToNamespaceToBundleRange\n-                        .computeIfAbsent(selectedRU.getResourceId().replace(\"http://\", \"\"), k -> new HashMap<>())\n-                        .computeIfAbsent(namespaceName, k -> new HashSet<>()).add(bundleRange);\n+                        .computeIfAbsent(selectedRU.getResourceId().replace(\"http://\", \"\"),\n+                                k -> new ConcurrentOpenHashMap<>())\n+                        .computeIfAbsent(namespaceName, k -> new ConcurrentOpenHashSet<>()).add(bundleRange);\n                 ranking.addPreAllocatedServiceUnit(serviceUnitId, quota);\n                 resourceUnitRankings.put(selectedRU, ranking);\n             }\n@@ -1322,8 +1325,8 @@ private synchronized void updateBrokerToNamespaceToBundle() {\n             final String broker = resourceUnit.getResourceId();\n             final Set<String> loadedBundles = ranking.getLoadedBundles();\n             final Set<String> preallocatedBundles = resourceUnitRankings.get(resourceUnit).getPreAllocatedBundles();\n-            final Map<String, Set<String>> namespaceToBundleRange = brokerToNamespaceToBundleRange\n-                    .computeIfAbsent(broker.replace(\"http://\", \"\"), k -> new HashMap<>());\n+            final ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>> namespaceToBundleRange = brokerToNamespaceToBundleRange\n+                    .computeIfAbsent(broker.replace(\"http://\", \"\"), k -> new ConcurrentOpenHashMap<>());\n             namespaceToBundleRange.clear();\n             LoadManagerShared.fillNamespaceToBundlesMap(loadedBundles, namespaceToBundleRange);\n             LoadManagerShared.fillNamespaceToBundlesMap(preallocatedBundles, namespaceToBundleRange);",
                "changes": 15,
                "blob_url": "https://github.com/apache/pulsar/blob/412c8fdb5ea61593017c395a7c8e291c922d6bf5/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/SimpleLoadManagerImpl.java"
            },
            {
                "additions": 11,
                "sha": "4059b1892784bafc2e52da128608ca8aa727d666",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/412c8fdb5ea61593017c395a7c8e291c922d6bf5/pulsar-broker/src/test/java/org/apache/pulsar/broker/loadbalance/AntiAffinityNamespaceGroupTest.java",
                "deletions": 6,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/broker/loadbalance/AntiAffinityNamespaceGroupTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/broker/loadbalance/AntiAffinityNamespaceGroupTest.java?ref=412c8fdb5ea61593017c395a7c8e291c922d6bf5",
                "patch": "@@ -52,6 +52,8 @@\n import org.apache.pulsar.common.policies.data.FailureDomain;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n import org.apache.pulsar.common.util.ObjectMapperFactory;\n+import org.apache.pulsar.common.util.collections.ConcurrentOpenHashMap;\n+import org.apache.pulsar.common.util.collections.ConcurrentOpenHashSet;\n import org.apache.pulsar.zookeeper.LocalBookkeeperEnsemble;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.ZooDefs.Ids;\n@@ -236,7 +238,7 @@ public void testAntiAffinityNamespaceFilteringWithDomain() throws Exception {\n         brokerToDomainMap.put(\"brokerName-3\", \"domain-1\");\n \n         Set<String> candidate = Sets.newHashSet();\n-        Map<String, Map<String, Set<String>>> brokerToNamespaceToBundleRange = Maps.newHashMap();\n+        ConcurrentOpenHashMap<String, ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>>> brokerToNamespaceToBundleRange = new ConcurrentOpenHashMap<>();\n \n         assertEquals(brokers.size(), totalBrokers);\n \n@@ -322,7 +324,7 @@ public void testAntiAffinityNamespaceFilteringWithoutDomain() throws Exception {\n \n         Set<String> brokers = Sets.newHashSet();\n         Set<String> candidate = Sets.newHashSet();\n-        Map<String, Map<String, Set<String>>> brokerToNamespaceToBundleRange = Maps.newHashMap();\n+        ConcurrentOpenHashMap<String, ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>>> brokerToNamespaceToBundleRange = new ConcurrentOpenHashMap<>();\n         brokers.add(\"broker-0\");\n         brokers.add(\"broker-1\");\n         brokers.add(\"broker-2\");\n@@ -366,10 +368,13 @@ public void testAntiAffinityNamespaceFilteringWithoutDomain() throws Exception {\n         assertEquals(candidate.size(), 3);\n     }\n \n-    private void selectBrokerForNamespace(Map<String, Map<String, Set<String>>> brokerToNamespaceToBundleRange,\n+    private void selectBrokerForNamespace(\n+            ConcurrentOpenHashMap<String, ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>>> brokerToNamespaceToBundleRange,\n             String broker, String namespace, String assignedBundleName) {\n-        Map<String, Set<String>> nsToBundleMap = Maps.newHashMap();\n-        nsToBundleMap.put(namespace, Sets.newHashSet(assignedBundleName));\n+        ConcurrentOpenHashSet<String> bundleSet = new ConcurrentOpenHashSet<>();\n+        bundleSet.add(assignedBundleName);\n+        ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>> nsToBundleMap = new ConcurrentOpenHashMap<>();\n+        nsToBundleMap.put(namespace, bundleSet);\n         brokerToNamespaceToBundleRange.put(broker, nsToBundleMap);\n     }\n \n@@ -458,7 +463,7 @@ public void testLoadSheddingUtilWithAntiAffinityNamespace() throws Exception {\n \n         Set<String> brokers = Sets.newHashSet();\n         Set<String> candidate = Sets.newHashSet();\n-        Map<String, Map<String, Set<String>>> brokerToNamespaceToBundleRange = Maps.newHashMap();\n+        ConcurrentOpenHashMap<String, ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>>> brokerToNamespaceToBundleRange = new ConcurrentOpenHashMap<>();\n         brokers.add(\"broker-0\");\n         brokers.add(\"broker-1\");\n         brokers.add(\"broker-2\");",
                "changes": 17,
                "blob_url": "https://github.com/apache/pulsar/blob/412c8fdb5ea61593017c395a7c8e291c922d6bf5/pulsar-broker/src/test/java/org/apache/pulsar/broker/loadbalance/AntiAffinityNamespaceGroupTest.java"
            },
            {
                "additions": 86,
                "sha": "b0df1bf7c17230434bc285a2dc4d5350bd064347",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/412c8fdb5ea61593017c395a7c8e291c922d6bf5/pulsar-broker/src/test/java/org/apache/pulsar/broker/loadbalance/impl/LoadManagerSharedTest.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/broker/loadbalance/impl/LoadManagerSharedTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/broker/loadbalance/impl/LoadManagerSharedTest.java?ref=412c8fdb5ea61593017c395a7c8e291c922d6bf5",
                "patch": "@@ -0,0 +1,86 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.loadbalance.impl;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.Sets;\n+\n+import org.apache.pulsar.common.util.collections.ConcurrentOpenHashMap;\n+import org.apache.pulsar.common.util.collections.ConcurrentOpenHashSet;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class LoadManagerSharedTest {\n+\n+    @Test\n+    public void testRemoveMostServicingBrokersForNamespace() throws Exception {\n+        String namespace = \"tenant1/ns1\";\n+        String assignedBundle = namespace + \"/0x00000000_0x40000000\";\n+\n+        Set<String> candidates = Sets.newHashSet();\n+        ConcurrentOpenHashMap<String, ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>>> map = new ConcurrentOpenHashMap<>();\n+        LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle, candidates, map);\n+        Assert.assertEquals(candidates.size(), 0);\n+\n+        candidates = Sets.newHashSet(\"broker1\");\n+        LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle, candidates, map);\n+        Assert.assertEquals(candidates.size(), 1);\n+        Assert.assertTrue(candidates.contains(\"broker1\"));\n+\n+        candidates = Sets.newHashSet(\"broker1\");\n+        fillBrokerToNamespaceToBundleMap(map, \"broker1\", namespace, \"0x40000000_0x80000000\");\n+        LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle, candidates, map);\n+        Assert.assertEquals(candidates.size(), 1);\n+        Assert.assertTrue(candidates.contains(\"broker1\"));\n+\n+        candidates = Sets.newHashSet(\"broker1\", \"broker2\");\n+        LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle, candidates, map);\n+        Assert.assertEquals(candidates.size(), 1);\n+        Assert.assertTrue(candidates.contains(\"broker2\"));\n+\n+        candidates = Sets.newHashSet(\"broker1\", \"broker2\");\n+        fillBrokerToNamespaceToBundleMap(map, \"broker2\", namespace, \"0x80000000_0xc0000000\");\n+        LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle, candidates, map);\n+        Assert.assertEquals(candidates.size(), 2);\n+        Assert.assertTrue(candidates.contains(\"broker1\"));\n+        Assert.assertTrue(candidates.contains(\"broker2\"));\n+\n+        candidates = Sets.newHashSet(\"broker1\", \"broker2\");\n+        fillBrokerToNamespaceToBundleMap(map, \"broker2\", namespace, \"0xc0000000_0xd0000000\");\n+        LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle, candidates, map);\n+        Assert.assertEquals(candidates.size(), 1);\n+        Assert.assertTrue(candidates.contains(\"broker1\"));\n+\n+        candidates = Sets.newHashSet(\"broker1\", \"broker2\", \"broker3\");\n+        fillBrokerToNamespaceToBundleMap(map, \"broker3\", namespace, \"0xd0000000_0xffffffff\");\n+        LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle, candidates, map);\n+        Assert.assertEquals(candidates.size(), 2);\n+        Assert.assertTrue(candidates.contains(\"broker1\"));\n+        Assert.assertTrue(candidates.contains(\"broker3\"));\n+    }\n+\n+    private static void fillBrokerToNamespaceToBundleMap(\n+            ConcurrentOpenHashMap<String, ConcurrentOpenHashMap<String, ConcurrentOpenHashSet<String>>> map,\n+            String broker, String namespace, String bundle) {\n+        map.computeIfAbsent(broker, k -> new ConcurrentOpenHashMap<>())\n+                .computeIfAbsent(namespace, k -> new ConcurrentOpenHashSet<>()).add(bundle);\n+    }\n+\n+}",
                "changes": 86,
                "blob_url": "https://github.com/apache/pulsar/blob/412c8fdb5ea61593017c395a7c8e291c922d6bf5/pulsar-broker/src/test/java/org/apache/pulsar/broker/loadbalance/impl/LoadManagerSharedTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix bug that fails to search namespace bundle due to NPE (#5191)\n\nFixes #5176\r\n\r\n### Motivation\r\n\r\nAs mentioned in #5176, NPE may occur in the load manager and fail to search for namespace bundles. This is because multiple threads may update a map named `brokerToNamespaceToBundleRange` at the same time.\r\n\r\n### Modifications\r\n\r\n- Changed `brokerToNamespaceToBundleRange` to ConcurrentOpenHashMap instead of HashMap which is not thread safe.\r\n- Fixed `LoadManagerShared.removeMostServicingBrokersForNamespace()` logic so that NPE does not occur.",
        "commit": "https://github.com/apache/pulsar/commit/412c8fdb5ea61593017c395a7c8e291c922d6bf5"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/33441ea0d13322f3d444de8781e8c4c655e6a61e",
        "bug_id": "pulsar_7",
        "file": [
            {
                "additions": 1,
                "sha": "2967236e1f7c14439a63ae6dda5a67c46dbb175f",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/41bc407e1642aec3805d0f077694edd835b3ea1c/pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/ServiceUnitZkUtils.java",
                "deletions": 1,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/ServiceUnitZkUtils.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/ServiceUnitZkUtils.java?ref=41bc407e1642aec3805d0f077694edd835b3ea1c",
                "patch": "@@ -153,7 +153,7 @@ private static final void cleanupSingleNamespaceNode(ZooKeeper zkc, String path,\n         String brokerUrl = null;\n         try {\n             byte[] data = zkc.getData(path, false, null);\n-            if (data.length == 0) {\n+            if (data == null || data.length == 0) {\n                 // skip, ephemeral node will not have zero byte\n                 return;\n             }",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/41bc407e1642aec3805d0f077694edd835b3ea1c/pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/ServiceUnitZkUtils.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix: NPE while cleaning up namespace node (#4965)",
        "commit": "https://github.com/apache/pulsar/commit/41bc407e1642aec3805d0f077694edd835b3ea1c"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/b4168a7016e4150680398f5d4a85ae664e470fc9",
        "bug_id": "pulsar_8",
        "file": [
            {
                "additions": 5,
                "sha": "b0c116abf4904c01dd4890539ca787c86f7512b8",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/c94247971765febc594cd60aa762f248624c2bc8/pulsar-client/src/main/java/org/apache/pulsar/client/impl/TypedMessageBuilderImpl.java",
                "deletions": 0,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/TypedMessageBuilderImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/TypedMessageBuilderImpl.java?ref=c94247971765febc594cd60aa762f248624c2bc8",
                "patch": "@@ -76,19 +76,24 @@ public MessageId send() throws PulsarClientException {\n \n     @Override\n     public TypedMessageBuilder<T> value(T value) {\n+        checkArgument(value != null, \"Need Non-Null content value\");\n         this.content = ByteBuffer.wrap(schema.encode(value));\n         return this;\n     }\n \n     @Override\n     public TypedMessageBuilder<T> property(String name, String value) {\n+        checkArgument(name != null, \"Need Non-Null name\");\n+        checkArgument(value != null, \"Need Non-Null value for name: \" + name);\n         msgMetadataBuilder.addProperties(KeyValue.newBuilder().setKey(name).setValue(value).build());\n         return this;\n     }\n \n     @Override\n     public TypedMessageBuilder<T> properties(Map<String, String> properties) {\n         for (Map.Entry<String, String> entry : properties.entrySet()) {\n+            checkArgument(entry.getKey() != null, \"Need Non-Null key\");\n+            checkArgument(entry.getValue() != null, \"Need Non-Null value for key: \" + entry.getKey());\n             msgMetadataBuilder\n                     .addProperties(KeyValue.newBuilder().setKey(entry.getKey()).setValue(entry.getValue()).build());\n         }",
                "changes": 5,
                "blob_url": "https://github.com/apache/pulsar/blob/c94247971765febc594cd60aa762f248624c2bc8/pulsar-client/src/main/java/org/apache/pulsar/client/impl/TypedMessageBuilderImpl.java"
            },
            {
                "additions": 4,
                "sha": "bca9762c2fbe15fc3269a40a12d340362dff3e24",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/c94247971765febc594cd60aa762f248624c2bc8/pulsar-websocket/src/main/java/org/apache/pulsar/websocket/ProducerHandler.java",
                "deletions": 0,
                "filename": "pulsar-websocket/src/main/java/org/apache/pulsar/websocket/ProducerHandler.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-websocket/src/main/java/org/apache/pulsar/websocket/ProducerHandler.java?ref=c94247971765febc594cd60aa762f248624c2bc8",
                "patch": "@@ -163,6 +163,10 @@ public void onWebSocketText(String message) {\n             String msg = format(\"Invalid Base64 message-payload error=%s\", e.getMessage());\n             sendAckResponse(new ProducerAck(PayloadEncodingError, msg, null, requestContext));\n             return;\n+        } catch (NullPointerException e) {\n+            // Null payload\n+            sendAckResponse(new ProducerAck(PayloadEncodingError, e.getMessage(), null, requestContext));\n+            return;\n         }\n \n         final long msgSize = rawPayload.length;",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/c94247971765febc594cd60aa762f248624c2bc8/pulsar-websocket/src/main/java/org/apache/pulsar/websocket/ProducerHandler.java"
            }
        ],
        "repo": "pulsar",
        "message": "Issue #2751: Add check to fix NPE (#3034)\n\nMotivation\r\nWe may meet NPE like this:\r\n```\r\njava.lang.NullPointerException: null\r\nat org.apache.pulsar.common.api.proto.PulsarApi$KeyValue$Builder.setValue(PulsarApi.java:1923) ~[org.apache.pulsar-pulsar-common-2.1.1-incubating.jar:2.1.1-incubating]\r\n```\r\nThis is related to protobuf, it does not support null-able field directly.\r\nprotocolbuffers/protobuf#1606\r\n\r\nIn this fix we try to avoid this by add checking before this method is called.",
        "commit": "https://github.com/apache/pulsar/commit/c94247971765febc594cd60aa762f248624c2bc8"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/0e807f15c357476059383c80870abd9b8a59826c",
        "bug_id": "pulsar_9",
        "file": [
            {
                "additions": 1,
                "sha": "d18527462985ad31c464c75e3f311777533e1c6c",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/b306552ff0756f0b555c125286cc4b8ed4b11c1e/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java",
                "deletions": 1,
                "filename": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java?ref=b306552ff0756f0b555c125286cc4b8ed4b11c1e",
                "patch": "@@ -231,7 +231,7 @@ public MarkDeleteEntry(PositionImpl newPosition, Map<String, Long> properties,\n \n     @Override\n     public Map<String, Long> getProperties() {\n-        return lastMarkDeleteEntry.properties;\n+        return lastMarkDeleteEntry != null ? lastMarkDeleteEntry.properties : Collections.emptyMap();\n     }\n \n     /**",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/b306552ff0756f0b555c125286cc4b8ed4b11c1e/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java"
            }
        ],
        "repo": "pulsar",
        "message": "[pulsar-broker] fix NPE at managed-ledger when fetch reader internal-stats (#4615)\n\n### Motivation\r\n\r\nBroker throws NPE when pulsar-admin tries to fetch stats-internal for topic with reader.\r\n\r\n```\r\nCaused by: java.lang.NullPointerException\r\n\tat org.apache.bookkeeper.mledger.impl.ManagedCursorImpl.getProperties(ManagedCursorImpl.java:234) ~[classes/:?]\r\n\tat org.apache.pulsar.broker.service.persistent.PersistentTopic.lambda$getInternalStats$48(PersistentTopic.java:1461) ~[classes/:?]\r\n\tat java.lang.Iterable.forEach(Iterable.java:75) ~[?:1.8.0_92]\r\n\tat org.apache.pulsar.broker.service.persistent.PersistentTopic.getInternalStats(PersistentTopic.java:1446) ~[classes/:?]\r\n\tat org.apache.pulsar.broker.admin.impl.PersistentTopicsBase.internalGetInternalStats(PersistentTopicsBase.java:621) ~[classes/:?]\r\n\tat org.apache.pulsar.broker.admin.v2.PersistentTopics.getInternalStats(PersistentTopics.java:430) ~[classes/:?]\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_92]\r\n```",
        "commit": "https://github.com/apache/pulsar/commit/b306552ff0756f0b555c125286cc4b8ed4b11c1e"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/dd5b4d08ead655dd4917944779bff1702f48f52c",
        "bug_id": "pulsar_10",
        "file": [
            {
                "additions": 1,
                "sha": "f8054bb894c3ab653b72f8f5cebdde30f79f4988",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MessageImpl.java",
                "deletions": 1,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MessageImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MessageImpl.java?ref=a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62",
                "patch": "@@ -253,7 +253,7 @@ public boolean isExpired(int messageTTLInSeconds) {\n \n     @Override\n     public T getValue() {\n-        if (SchemaType.KEY_VALUE == schema.getSchemaInfo().getType()) {\n+        if (schema.getSchemaInfo() != null && SchemaType.KEY_VALUE == schema.getSchemaInfo().getType()) {\n             if (schema.supportSchemaVersioning()) {\n                 return getKeyValueBySchemaVersion();\n             } else {",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MessageImpl.java"
            },
            {
                "additions": 7,
                "sha": "4a8b487e736eefa19a5a46ddd99c455ced6018c7",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62/pulsar-client/src/main/java/org/apache/pulsar/client/impl/PulsarClientImpl.java",
                "deletions": 4,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/PulsarClientImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/PulsarClientImpl.java?ref=a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62",
                "patch": "@@ -79,6 +79,7 @@\n import org.apache.pulsar.common.naming.TopicName;\n import org.apache.pulsar.common.partition.PartitionedTopicMetadata;\n import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.common.schema.SchemaType;\n import org.apache.pulsar.common.util.FutureUtil;\n import org.apache.pulsar.common.util.netty.EventLoopUtil;\n import org.slf4j.Logger;\n@@ -742,10 +743,12 @@ private SchemaInfoProvider newSchemaProvider(String topicName) {\n             if (schema.requireFetchingSchemaInfo()) {\n                 return schemaInfoProvider.getLatestSchema().thenCompose(schemaInfo -> {\n                     if (null == schemaInfo) {\n-                        // no schema info is found\n-                        return FutureUtil.failedFuture(\n-                            new PulsarClientException.NotFoundException(\n-                                \"No latest schema found for topic \" + topicName));\n+                        if (!(schema instanceof AutoConsumeSchema)) {\n+                            // no schema info is found\n+                            return FutureUtil.failedFuture(\n+                                    new PulsarClientException.NotFoundException(\n+                                            \"No latest schema found for topic \" + topicName));\n+                        }\n                     }\n                     try {\n                         log.info(\"Configuring schema for topic {} : {}\", topicName, schemaInfo);",
                "changes": 11,
                "blob_url": "https://github.com/apache/pulsar/blob/a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62/pulsar-client/src/main/java/org/apache/pulsar/client/impl/PulsarClientImpl.java"
            },
            {
                "additions": 45,
                "sha": "27e8e6e7aa085328148d7c17a1796608c6ab935d",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62/pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/AutoConsumeSchema.java",
                "deletions": 8,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/AutoConsumeSchema.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/AutoConsumeSchema.java?ref=a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62",
                "patch": "@@ -22,6 +22,7 @@\n \n import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Schema;\n+import org.apache.pulsar.client.api.SchemaSerializationException;\n import org.apache.pulsar.client.api.schema.GenericRecord;\n import org.apache.pulsar.client.api.schema.GenericSchema;\n import org.apache.pulsar.client.api.schema.SchemaInfoProvider;\n@@ -30,6 +31,8 @@\n import org.apache.pulsar.common.schema.SchemaInfo;\n import org.apache.pulsar.common.schema.SchemaType;\n \n+import java.util.concurrent.ExecutionException;\n+\n /**\n  * Auto detect schema.\n  */\n@@ -38,6 +41,12 @@\n \n     private Schema<GenericRecord> schema;\n \n+    private String topicName;\n+\n+    private String componentName;\n+\n+    private SchemaInfoProvider schemaInfoProvider;\n+\n     public void setSchema(Schema<GenericRecord> schema) {\n         this.schema = schema;\n     }\n@@ -67,20 +76,40 @@ public boolean supportSchemaVersioning() {\n \n     @Override\n     public GenericRecord decode(byte[] bytes, byte[] schemaVersion) {\n+        if (schema == null) {\n+            SchemaInfo schemaInfo = null;\n+            try {\n+                schemaInfo = schemaInfoProvider.getLatestSchema().get();\n+            } catch (InterruptedException | ExecutionException e ) {\n+                if (e instanceof InterruptedException) {\n+                    Thread.currentThread().interrupt();\n+                }\n+                log.error(\"Con't get last schema for topic {} use AutoConsumeSchema\", topicName);\n+                throw new SchemaSerializationException(e.getCause());\n+            }\n+            schema = generateSchema(schemaInfo);\n+            schema.setSchemaInfoProvider(schemaInfoProvider);\n+            log.info(\"Configure {} schema for topic {} : {}\",\n+                    componentName, topicName, schemaInfo.getSchemaDefinition());\n+        }\n         ensureSchemaInitialized();\n-\n         return schema.decode(bytes, schemaVersion);\n     }\n \n     @Override\n     public void setSchemaInfoProvider(SchemaInfoProvider schemaInfoProvider) {\n-        schema.setSchemaInfoProvider(schemaInfoProvider);\n+        if (schema == null) {\n+            this.schemaInfoProvider = schemaInfoProvider;\n+        } else {\n+            schema.setSchemaInfoProvider(schemaInfoProvider);\n+        }\n     }\n \n     @Override\n     public SchemaInfo getSchemaInfo() {\n-        ensureSchemaInitialized();\n-\n+        if (schema == null) {\n+            return null;\n+        }\n         return schema.getSchemaInfo();\n     }\n \n@@ -93,16 +122,24 @@ public boolean requireFetchingSchemaInfo() {\n     public void configureSchemaInfo(String topicName,\n                                     String componentName,\n                                     SchemaInfo schemaInfo) {\n+        this.topicName = topicName;\n+        this.componentName = componentName;\n+        if (schemaInfo != null) {\n+            GenericSchema genericSchema = generateSchema(schemaInfo);\n+            setSchema(genericSchema);\n+            log.info(\"Configure {} schema for topic {} : {}\",\n+                    componentName, topicName, schemaInfo.getSchemaDefinition());\n+        }\n+    }\n+\n+    private GenericSchema generateSchema(SchemaInfo schemaInfo) {\n         if (schemaInfo.getType() != SchemaType.AVRO\n             && schemaInfo.getType() != SchemaType.JSON) {\n             throw new RuntimeException(\"Currently auto consume only works for topics with avro or json schemas\");\n         }\n         // when using `AutoConsumeSchema`, we use the schema associated with the messages as schema reader\n         // to decode the messages.\n-        GenericSchema genericSchema = GenericSchemaImpl.of(schemaInfo, false /*useProvidedSchemaAsReaderSchema*/);\n-        setSchema(genericSchema);\n-        log.info(\"Configure {} schema for topic {} : {}\",\n-            componentName, topicName, schemaInfo.getSchemaDefinition());\n+        return GenericSchemaImpl.of(schemaInfo, false /*useProvidedSchemaAsReaderSchema*/);\n     }\n \n     public static Schema<?> getSchema(SchemaInfo schemaInfo) {",
                "changes": 53,
                "blob_url": "https://github.com/apache/pulsar/blob/a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62/pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/AutoConsumeSchema.java"
            },
            {
                "additions": 82,
                "sha": "7d0ffa845a94f3e061ba490dbbf1c5ad6641d7de",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62/tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/SchemaTest.java",
                "deletions": 39,
                "filename": "tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/SchemaTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/SchemaTest.java?ref=a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62",
                "patch": "@@ -25,6 +25,7 @@\n import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.admin.PulsarAdmin;\n import org.apache.pulsar.client.api.*;\n+import org.apache.pulsar.client.api.schema.GenericRecord;\n import org.apache.pulsar.client.api.schema.SchemaDefinition;\n import org.apache.pulsar.common.naming.TopicDomain;\n import org.apache.pulsar.common.naming.TopicName;\n@@ -131,37 +132,36 @@ public void testMultiVersionSchema() throws Exception {\n                 Sets.newHashSet(pulsarCluster.getClusterName())\n         );\n \n-        // Create a topic with `Person`\n-        try (Producer<Person> producer = client.newProducer(Schema.AVRO(\n+        Producer<Person> producer = client.newProducer(Schema.AVRO(\n                 SchemaDefinition.<Person>builder().withAlwaysAllowNull\n                         (false).withSupportSchemaVersioning(true).\n                         withPojo(Person.class).build()))\n                 .topic(fqtn)\n-                .create()\n-        ) {\n-            Person person = new Person();\n-            person.setName(\"Tom Hanks\");\n-            person.setAge(60);\n-\n-            producer.send(person);\n+                .create();\n \n-            log.info(\"Successfully published person : {}\", person);\n-        }\n+        Person person = new Person();\n+        person.setName(\"Tom Hanks\");\n+        person.setAge(60);\n \n-        //Create a consumer for MultiVersionSchema\n-        try (Consumer<PersonConsumeSchema> consumer = client.newConsumer(Schema.AVRO(\n+        Consumer<PersonConsumeSchema> consumer = client.newConsumer(Schema.AVRO(\n                 SchemaDefinition.<PersonConsumeSchema>builder().withAlwaysAllowNull\n                         (false).withSupportSchemaVersioning(true).\n                         withPojo(PersonConsumeSchema.class).build()))\n+                .subscriptionName(\"test\")\n                 .topic(fqtn)\n                 .subscribe();\n-        ) {\n-            PersonConsumeSchema personConsumeSchema = consumer.receive().getValue();\n-            assertEquals(\"Tom Hanks\", personConsumeSchema.getName());\n-            assertEquals(60, personConsumeSchema.getAge());\n-            assertEquals(\"man\", personConsumeSchema.getGender());\n-            log.info(\"Successfully consumer personConsumeSchema : {}\", personConsumeSchema);\n-        }\n+\n+        producer.send(person);\n+        log.info(\"Successfully published person : {}\", person);\n+\n+        PersonConsumeSchema personConsumeSchema = consumer.receive().getValue();\n+        assertEquals(\"Tom Hanks\", personConsumeSchema.getName());\n+        assertEquals(60, personConsumeSchema.getAge());\n+        assertEquals(\"male\", personConsumeSchema.getGender());\n+\n+        producer.close();\n+        consumer.close();\n+        log.info(\"Successfully consumer personConsumeSchema : {}\", personConsumeSchema);\n     }\n \n     @Test\n@@ -190,32 +190,75 @@ public void testAvroLogicalType() throws Exception {\n                 .date(LocalDate.now())\n                 .build();\n \n-        try (Producer<AvroLogicalType> producer = client\n+        Producer<AvroLogicalType> producer = client\n                 .newProducer(Schema.AVRO(AvroLogicalType.class))\n                 .topic(fqtn)\n-                .create()\n-        ) {\n-            producer.send(messageForSend);\n-            log.info(\"Successfully published avro logical type message : {}\", messageForSend);\n-        }\n+                .create();\n \n-        try (Consumer<AvroLogicalType> consumer = client\n+        Consumer<AvroLogicalType> consumer = client\n                 .newConsumer(Schema.AVRO(AvroLogicalType.class))\n                 .topic(fqtn)\n-                .subscribe()\n-        ) {\n-            AvroLogicalType received = consumer.receive().getValue();\n-            assertEquals(messageForSend.getDecimal(), received.getDecimal());\n-            assertEquals(messageForSend.getTimeMicros(), received.getTimeMicros());\n-            assertEquals(messageForSend.getTimeMillis(), received.getTimeMillis());\n-            assertEquals(messageForSend.getTimestampMicros(), received.getTimestampMicros());\n-            assertEquals(messageForSend.getTimestampMillis(), received.getTimestampMillis());\n-            assertEquals(messageForSend.getDate(), received.getDate());\n-\n-            log.info(\"Successfully consumer avro logical type message : {}\", received);\n-        }\n+                .subscriptionName(\"test\")\n+                .subscribe();\n+\n+        producer.send(messageForSend);\n+        log.info(\"Successfully published avro logical type message : {}\", messageForSend);\n+\n+        AvroLogicalType received = consumer.receive().getValue();\n+        assertEquals(messageForSend.getDecimal(), received.getDecimal());\n+        assertEquals(messageForSend.getTimeMicros(), received.getTimeMicros());\n+        assertEquals(messageForSend.getTimeMillis(), received.getTimeMillis());\n+        assertEquals(messageForSend.getTimestampMicros(), received.getTimestampMicros());\n+        assertEquals(messageForSend.getTimestampMillis(), received.getTimestampMillis());\n+        assertEquals(messageForSend.getDate(), received.getDate());\n \n+        producer.close();\n+        consumer.close();\n \n+        log.info(\"Successfully consumer avro logical type message : {}\", received);\n+    }\n+\n+    @Test\n+    public void testAutoConsumeSchemaSubscribeFirst() throws Exception {\n+        final String tenant = PUBLIC_TENANT;\n+        final String namespace = \"test-namespace-\" + randomName(16);\n+        final String topic = \"test-auto-consume-schema\";\n+        final String fqtn = TopicName.get(\n+                TopicDomain.persistent.value(),\n+                tenant,\n+                namespace,\n+                topic\n+        ).toString();\n+\n+        admin.namespaces().createNamespace(\n+                tenant + \"/\" + namespace,\n+                Sets.newHashSet(pulsarCluster.getClusterName())\n+        );\n+\n+        Consumer<GenericRecord> consumer = client\n+                .newConsumer(Schema.AUTO_CONSUME())\n+                .topic(fqtn)\n+                .subscriptionName(\"test\")\n+                .subscribe();\n+\n+        Producer<Person> producer = client\n+                .newProducer(Schema.AVRO(Person.class))\n+                .topic(fqtn)\n+                .create();\n+\n+        Person person = new Person();\n+        person.setName(\"Tom Hanks\");\n+        person.setAge(60);\n+        producer.send(person);\n+\n+        GenericRecord genericRecord = consumer.receive().getValue();\n+\n+        assertEquals(genericRecord.getField(\"name\"), \"Tom Hanks\");\n+        assertEquals(genericRecord.getField(\"age\"), 60);\n+\n+        consumer.close();\n+        producer.close();\n     }\n \n }\n+",
                "changes": 121,
                "blob_url": "https://github.com/apache/pulsar/blob/a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62/tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/SchemaTest.java"
            },
            {
                "additions": 6,
                "sha": "babb3c7858bc9159e9f617154674963e410d74ec",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62/tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/Schemas.java",
                "deletions": 0,
                "filename": "tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/Schemas.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/Schemas.java?ref=a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62",
                "patch": "@@ -31,10 +31,12 @@\n  */\n package org.apache.pulsar.tests.integration.schema;\n \n+import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.Getter;\n+import lombok.NoArgsConstructor;\n import lombok.Setter;\n import lombok.ToString;\n import org.apache.avro.reflect.AvroDefault;\n@@ -99,7 +101,11 @@\n     }\n \n     @Data\n+    @Getter\n+    @Setter\n     @ToString\n+    @NoArgsConstructor\n+    @AllArgsConstructor\n     @EqualsAndHashCode\n     @Builder\n     public static class AvroLogicalType{",
                "changes": 6,
                "blob_url": "https://github.com/apache/pulsar/blob/a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62/tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/Schemas.java"
            }
        ],
        "repo": "pulsar",
        "message": "Consumer subscribe with AutoConsumeSchema will throw npe  (#4960)\n\n### Motivation\r\nTo fix #4838",
        "commit": "https://github.com/apache/pulsar/commit/a3609ef0947a0d2c3fe7c2ad3a8f9cda7d4ebd62"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/04e5fee6e5490ba40c102edfa0377f76993f3ca3",
        "bug_id": "pulsar_11",
        "file": [
            {
                "additions": 28,
                "sha": "c079d6590d9cad410e15523d43dd8de7fdb5025d",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/2285f0d65de293a41cb964b8045871e4a530b529/pulsar-broker/src/test/java/org/apache/pulsar/client/api/InterceptorsTest.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/InterceptorsTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/client/api/InterceptorsTest.java?ref=2285f0d65de293a41cb964b8045871e4a530b529",
                "patch": "@@ -117,6 +117,34 @@ public void onSendAcknowledgement(Producer<String> producer, Message<String> mes\n         producer.close();\n     }\n \n+    @Test\n+    public void testProducerInterceptorsWithExceptions() throws PulsarClientException {\n+        ProducerInterceptor<String> interceptor = new ProducerInterceptor<String>() {\n+            @Override\n+            public void close() {\n+\n+            }\n+\n+            @Override\n+            public Message<String> beforeSend(Producer<String> producer, Message<String> message) {\n+                throw new NullPointerException();\n+            }\n+\n+            @Override\n+            public void onSendAcknowledgement(Producer<String> producer, Message<String> message, MessageId msgId, Throwable exception) {\n+                throw new NullPointerException();\n+            }\n+        };\n+        Producer<String> producer = pulsarClient.newProducer(Schema.STRING)\n+            .topic(\"persistent://my-property/my-ns/my-topic\")\n+            .intercept(interceptor)\n+            .create();\n+\n+        MessageId messageId = producer.newMessage().value(\"Hello Pulsar!\").send();\n+        Assert.assertNotNull(messageId);\n+        producer.close();\n+    }\n+\n     @Test\n     public void testConsumerInterceptorWithSingleTopicSubscribe() throws PulsarClientException {\n         ConsumerInterceptor<String> interceptor = new ConsumerInterceptor<String>() {",
                "changes": 28,
                "blob_url": "https://github.com/apache/pulsar/blob/2285f0d65de293a41cb964b8045871e4a530b529/pulsar-broker/src/test/java/org/apache/pulsar/client/api/InterceptorsTest.java"
            },
            {
                "additions": 2,
                "sha": "c70e4a3aa38361c9b4be2da6697f0748159db24b",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/2285f0d65de293a41cb964b8045871e4a530b529/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerInterceptors.java",
                "deletions": 2,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerInterceptors.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerInterceptors.java?ref=2285f0d65de293a41cb964b8045871e4a530b529",
                "patch": "@@ -64,8 +64,8 @@ public ProducerInterceptors(List<ProducerInterceptor<T>> interceptors) {\n             try {\n                 interceptorMessage = interceptors.get(i).beforeSend(producer, interceptorMessage);\n             } catch (Exception e) {\n-                if (message != null && producer != null) {\n-                    log.warn(\"Error executing interceptor beforeSend callback for messageId: {}, topicName:{} \", message.getMessageId(), producer.getTopic(), e);\n+                if (producer != null) {\n+                    log.warn(\"Error executing interceptor beforeSend callback for topicName:{} \", producer.getTopic(), e);\n                 } else {\n                     log.warn(\"Error Error executing interceptor beforeSend callback \", e);\n                 }",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/2285f0d65de293a41cb964b8045871e4a530b529/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerInterceptors.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix NPE of ProducerInterceptors (#4517)\n\n* Fix ProducerInterceptors NPE issue.\r\n\r\n* Add UT test for ProducerInterceptors while interceptor cause exceptions.",
        "commit": "https://github.com/apache/pulsar/commit/2285f0d65de293a41cb964b8045871e4a530b529"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/200f97a54cea8d68b4a8506804cfef3ea56e74f1",
        "bug_id": "pulsar_12",
        "file": [
            {
                "additions": 1,
                "sha": "800545cfefc34c07e930cefb4294f2ecd83eb2c9",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/634726dcaf8d25673868e0db638193fc7a89ab80/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java?ref=634726dcaf8d25673868e0db638193fc7a89ab80",
                "patch": "@@ -835,6 +835,7 @@ protected void internalCreateSubscription(String subscriptionName, MessageIdImpl\n         if (topicName.isGlobal()) {\n             validateGlobalNamespaceOwnership(namespaceName);\n         }\n+        messageId = messageId == null ? (MessageIdImpl) MessageId.earliest : messageId;\n         log.info(\"[{}][{}] Creating subscription {} at message id {}\", clientAppId(), topicName,\n                 subscriptionName, messageId);\n ",
                "changes": 1,
                "blob_url": "https://github.com/apache/pulsar/blob/634726dcaf8d25673868e0db638193fc7a89ab80/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix: NPE if messageId not present on create-sub admin-api call (#2636)\n\n### Motivation\r\n\r\nRight now, while creating subscription if user doesn't pass message-id then broker doesn't handle it properly which gives NPE and gives internal-server error to user.\r\n\r\n```\r\nMessage: null\r\n\r\nStacktrace:\r\n\r\njava.lang.NullPointerException\r\n        at org.apache.pulsar.broker.admin. PersistentTopicsBase.internalCreateSubscription(PersistentTopicsBase.java:885)\r\n        at sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)\r\n```\r\n\r\n### Modifications\r\n\r\n- take earliest-message id while creating subscription if user doesn't provide message-id.",
        "commit": "https://github.com/apache/pulsar/commit/634726dcaf8d25673868e0db638193fc7a89ab80"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/0fd988d32f64ba7a8fde5f74ba18056af35d302c",
        "bug_id": "pulsar_13",
        "file": [
            {
                "additions": 43,
                "sha": "508de46482db0123b05c061691714cdaf0848686",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/f452e6f817b5a613ded49a20ab2549fd5e34718c/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/PerMessageUnAcknowledgedRedeliveryTest.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/PerMessageUnAcknowledgedRedeliveryTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/PerMessageUnAcknowledgedRedeliveryTest.java?ref=f452e6f817b5a613ded49a20ab2549fd5e34718c",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.pulsar.client.impl;\n \n import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n \n import java.util.concurrent.TimeUnit;\n \n@@ -150,6 +151,48 @@ public void testSharedAckedNormalTopic() throws Exception {\n         assertEquals(size, 5);\n     }\n \n+    @Test(timeOut = testTimeout)\n+    public void testUnAckedMessageTrackerSize() throws Exception {\n+        String key = \"testUnAckedMessageTrackerSize\";\n+        final String topicName = \"persistent://prop/use/ns-abc/topic-\" + key;\n+        final String subscriptionName = \"my-ex-subscription-\" + key;\n+        final String messagePredicate = \"my-message-\" + key + \"-\";\n+        final int totalMessages = 15;\n+\n+        // 1. producer connect\n+        Producer<byte[]> producer = pulsarClient.newProducer().topic(topicName)\n+            .enableBatching(false)\n+            .messageRoutingMode(MessageRoutingMode.SinglePartition)\n+            .create();\n+\n+        // 2. Create consumer,doesn't set the ackTimeout\n+        Consumer<byte[]> consumer = pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName)\n+                .receiverQueueSize(50).subscriptionType(SubscriptionType.Shared).subscribe();\n+\n+        // 3. producer publish messages\n+        for (int i = 0; i < totalMessages / 3; i++) {\n+            String message = messagePredicate + i;\n+            log.info(\"Producer produced: \" + message);\n+            producer.send(message.getBytes());\n+        }\n+\n+        // 4. Receiver receives the message, doesn't ack\n+        Message<byte[]> message = consumer.receive();\n+        while (message != null) {\n+            String data = new String(message.getData());\n+            log.info(\"Consumer received : \" + data);\n+            message = consumer.receive(100, TimeUnit.MILLISECONDS);\n+        }\n+        UnAckedMessageTracker unAckedMessageTracker = ((ConsumerImpl<byte[]>) consumer).getUnAckedMessageTracker();\n+        long size = unAckedMessageTracker.size();\n+        log.info(key + \" Unacked Message Tracker size is \" + size);\n+        // 5. If ackTimeout is not set, UnAckedMessageTracker is a disabled method\n+        assertEquals(size, 0);\n+        assertTrue(unAckedMessageTracker.add(null));\n+        assertTrue(unAckedMessageTracker.remove(null));\n+        assertEquals(unAckedMessageTracker.removeMessagesTill(null), 0);\n+    }\n+\n     @Test(timeOut = testTimeout)\n     public void testExclusiveAckedNormalTopic() throws Exception {\n         String key = \"testExclusiveAckedNormalTopic\";",
                "changes": 43,
                "blob_url": "https://github.com/apache/pulsar/blob/f452e6f817b5a613ded49a20ab2549fd5e34718c/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/PerMessageUnAcknowledgedRedeliveryTest.java"
            },
            {
                "additions": 5,
                "sha": "0ab17d98b7d6d5354763f470579f2cad2e83eded",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/f452e6f817b5a613ded49a20ab2549fd5e34718c/pulsar-client/src/main/java/org/apache/pulsar/client/impl/UnAckedMessageTracker.java",
                "deletions": 0,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/UnAckedMessageTracker.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/UnAckedMessageTracker.java?ref=f452e6f817b5a613ded49a20ab2549fd5e34718c",
                "patch": "@@ -54,6 +54,11 @@\n         public void clear() {\n         }\n \n+        @Override\n+        long size() {\n+            return 0;\n+        }\n+\n         @Override\n         public boolean add(MessageId m) {\n             return true;",
                "changes": 5,
                "blob_url": "https://github.com/apache/pulsar/blob/f452e6f817b5a613ded49a20ab2549fd5e34718c/pulsar-client/src/main/java/org/apache/pulsar/client/impl/UnAckedMessageTracker.java"
            }
        ],
        "repo": "pulsar",
        "message": "NPE in UnAckedMessageTrackerDisabled#size (#4535) (#4536)",
        "commit": "https://github.com/apache/pulsar/commit/f452e6f817b5a613ded49a20ab2549fd5e34718c"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/9bc0d268608bce7957dbc9a3207c90ccae697c39",
        "bug_id": "pulsar_14",
        "file": [
            {
                "additions": 10,
                "sha": "ae6bbe4705a5ebad3326af5652eb415a0242f31e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/eefb5a8352a54ce9f0e6f93fba8f05d57f4077eb/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerStatsRecorderImpl.java",
                "deletions": 10,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerStatsRecorderImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerStatsRecorderImpl.java?ref=eefb5a8352a54ce9f0e6f93fba8f05d57f4077eb",
                "patch": "@@ -63,16 +63,16 @@\n     private static final DecimalFormat THROUGHPUT_FORMAT = new DecimalFormat(\"0.00\");\n \n     public ConsumerStatsRecorderImpl() {\n-        numMsgsReceived = null;\n-        numBytesReceived = null;\n-        numReceiveFailed = null;\n-        numAcksSent = null;\n-        numAcksFailed = null;\n-        totalMsgsReceived = null;\n-        totalBytesReceived = null;\n-        totalReceiveFailed = null;\n-        totalAcksSent = null;\n-        totalAcksFailed = null;\n+        numMsgsReceived = new LongAdder();\n+        numBytesReceived = new LongAdder();\n+        numReceiveFailed = new LongAdder();\n+        numAcksSent = new LongAdder();\n+        numAcksFailed = new LongAdder();\n+        totalMsgsReceived = new LongAdder();\n+        totalBytesReceived = new LongAdder();\n+        totalReceiveFailed = new LongAdder();\n+        totalAcksSent = new LongAdder();\n+        totalAcksFailed = new LongAdder();\n     }\n \n     public ConsumerStatsRecorderImpl(PulsarClientImpl pulsarClient, ConsumerConfigurationData<?> conf,",
                "changes": 20,
                "blob_url": "https://github.com/apache/pulsar/blob/eefb5a8352a54ce9f0e6f93fba8f05d57f4077eb/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerStatsRecorderImpl.java"
            },
            {
                "additions": 9,
                "sha": "15e8f53679e535563454ff63dbff2d1c646156fd",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/eefb5a8352a54ce9f0e6f93fba8f05d57f4077eb/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerStatsRecorderImpl.java",
                "deletions": 9,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerStatsRecorderImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerStatsRecorderImpl.java?ref=eefb5a8352a54ce9f0e6f93fba8f05d57f4077eb",
                "patch": "@@ -64,15 +64,15 @@\n     private static final double[] PERCENTILES = { 0.5, 0.75, 0.95, 0.99, 0.999, 1.0 };\n \n     public ProducerStatsRecorderImpl() {\n-        numMsgsSent = null;\n-        numBytesSent = null;\n-        numSendFailed = null;\n-        numAcksReceived = null;\n-        totalMsgsSent = null;\n-        totalBytesSent = null;\n-        totalSendFailed = null;\n-        totalAcksReceived = null;\n-        ds = null;\n+        numMsgsSent = new LongAdder();\n+        numBytesSent = new LongAdder();\n+        numSendFailed = new LongAdder();\n+        numAcksReceived = new LongAdder();\n+        totalMsgsSent = new LongAdder();\n+        totalBytesSent = new LongAdder();\n+        totalSendFailed = new LongAdder();\n+        totalAcksReceived = new LongAdder();\n+        ds = DoublesSketch.builder().build(256);\n     }\n \n     public ProducerStatsRecorderImpl(PulsarClientImpl pulsarClient, ProducerConfigurationData conf,",
                "changes": 18,
                "blob_url": "https://github.com/apache/pulsar/blob/eefb5a8352a54ce9f0e6f93fba8f05d57f4077eb/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerStatsRecorderImpl.java"
            },
            {
                "additions": 65,
                "sha": "816dc85c76d76682209e8006fd5bc17b76ec478b",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/eefb5a8352a54ce9f0e6f93fba8f05d57f4077eb/pulsar-client/src/test/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImplTest.java",
                "deletions": 0,
                "filename": "pulsar-client/src/test/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/test/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImplTest.java?ref=eefb5a8352a54ce9f0e6f93fba8f05d57f4077eb",
                "patch": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.client.impl;\n+\n+import com.google.common.collect.Sets;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.util.concurrent.DefaultThreadFactory;\n+import org.apache.pulsar.client.impl.conf.ClientConfigurationData;\n+import org.apache.pulsar.client.impl.conf.ConsumerConfigurationData;\n+import org.apache.pulsar.common.util.netty.EventLoopUtil;\n+import org.testng.annotations.Test;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+/**\n+ * Unit Tests of {@link MultiTopicsConsumerImpl}.\n+ */\n+public class MultiTopicsConsumerImplTest {\n+\n+    @Test\n+    public void testGetStats() throws Exception {\n+        String topicName = \"test-stats\";\n+        ClientConfigurationData conf = new ClientConfigurationData();\n+        conf.setServiceUrl(\"pulsar://localhost:6650\");\n+        conf.setStatsIntervalSeconds(100);\n+\n+        ThreadFactory threadFactory = new DefaultThreadFactory(\"client-test-stats\", Thread.currentThread().isDaemon());\n+        EventLoopGroup eventLoopGroup = EventLoopUtil.newEventLoopGroup(conf.getNumIoThreads(), threadFactory);\n+        ExecutorService listenerExecutor = Executors.newSingleThreadScheduledExecutor(threadFactory);\n+\n+        PulsarClientImpl clientImpl = new PulsarClientImpl(conf, eventLoopGroup);\n+\n+        ConsumerConfigurationData consumerConfData = new ConsumerConfigurationData();\n+        consumerConfData.setTopicNames(Sets.newHashSet(topicName));\n+\n+        assertEquals(Long.parseLong(\"100\"), clientImpl.getConfiguration().getStatsIntervalSeconds());\n+\n+        MultiTopicsConsumerImpl impl = new MultiTopicsConsumerImpl(\n+            clientImpl, consumerConfData,\n+            listenerExecutor, null, null, null);\n+\n+        impl.getStats();\n+    }\n+\n+}",
                "changes": 65,
                "blob_url": "https://github.com/apache/pulsar/blob/eefb5a8352a54ce9f0e6f93fba8f05d57f4077eb/pulsar-client/src/test/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImplTest.java"
            },
            {
                "additions": 36,
                "sha": "65e8df3a218ae89df104978a75319bbd3504ad5a",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/eefb5a8352a54ce9f0e6f93fba8f05d57f4077eb/pulsar-client/src/test/java/org/apache/pulsar/client/impl/PartitionedProducerImplTest.java",
                "deletions": 1,
                "filename": "pulsar-client/src/test/java/org/apache/pulsar/client/impl/PartitionedProducerImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/test/java/org/apache/pulsar/client/impl/PartitionedProducerImplTest.java?ref=eefb5a8352a54ce9f0e6f93fba8f05d57f4077eb",
                "patch": "@@ -18,19 +18,29 @@\n  */\n package org.apache.pulsar.client.impl;\n \n+import io.netty.channel.EventLoopGroup;\n import io.netty.util.Timer;\n \n-import org.apache.pulsar.client.api.*;\n+import io.netty.util.concurrent.DefaultThreadFactory;\n+import org.apache.pulsar.client.api.Message;\n+import org.apache.pulsar.client.api.MessageRouter;\n+import org.apache.pulsar.client.api.MessageRoutingMode;\n+import org.apache.pulsar.client.api.Producer;\n+import org.apache.pulsar.client.api.Schema;\n+import org.apache.pulsar.client.api.TopicMetadata;\n import org.apache.pulsar.client.impl.conf.ClientConfigurationData;\n import org.apache.pulsar.client.impl.conf.ProducerConfigurationData;\n+import org.apache.pulsar.common.util.netty.EventLoopUtil;\n import org.testng.annotations.BeforeTest;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Field;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ThreadFactory;\n \n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n+import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n \n@@ -111,4 +121,29 @@ public int choosePartition(Message<?> msg, TopicMetadata metadata) {\n         }\n     }\n \n+    @Test\n+    public void testGetStats() throws Exception {\n+        String topicName = \"test-stats\";\n+        ClientConfigurationData conf = new ClientConfigurationData();\n+        conf.setServiceUrl(\"pulsar://localhost:6650\");\n+        conf.setStatsIntervalSeconds(100);\n+\n+        ThreadFactory threadFactory = new DefaultThreadFactory(\"client-test-stats\", Thread.currentThread().isDaemon());\n+        EventLoopGroup eventLoopGroup = EventLoopUtil.newEventLoopGroup(conf.getNumIoThreads(), threadFactory);\n+\n+        PulsarClientImpl clientImpl = new PulsarClientImpl(conf, eventLoopGroup);\n+\n+        ProducerConfigurationData producerConfData = new ProducerConfigurationData();\n+        producerConfData.setMessageRoutingMode(MessageRoutingMode.CustomPartition);\n+        producerConfData.setCustomMessageRouter(new CustomMessageRouter());\n+\n+        assertEquals(Long.parseLong(\"100\"), clientImpl.getConfiguration().getStatsIntervalSeconds());\n+\n+        PartitionedProducerImpl impl = new PartitionedProducerImpl(\n+            clientImpl, topicName, producerConfData,\n+            1, null, null, null);\n+\n+        impl.getStats();\n+    }\n+\n }",
                "changes": 37,
                "blob_url": "https://github.com/apache/pulsar/blob/eefb5a8352a54ce9f0e6f93fba8f05d57f4077eb/pulsar-client/src/test/java/org/apache/pulsar/client/impl/PartitionedProducerImplTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "[Issue 3806] Fix NPE while call PartitionedProducerImpl.getStats() (#3829)\n\n* Fix NPE while call PartitionedProducerImpl.getStats().\r\n\r\n* Add unit tests and fix NPE while call MultiTopicsConsumerImpl.getStats()",
        "commit": "https://github.com/apache/pulsar/commit/eefb5a8352a54ce9f0e6f93fba8f05d57f4077eb"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/c73c71eb7e681b79845dde11b7cee7a5cb3aa79d",
        "bug_id": "pulsar_15",
        "file": [
            {
                "additions": 2,
                "sha": "7e7f8652616dc66ac77cf481c742f3d95c330806",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/2a5b772e229692302c051f2de8928a007ad7713b/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerImpl.java",
                "deletions": 1,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerImpl.java?ref=2a5b772e229692302c051f2de8928a007ad7713b",
                "patch": "@@ -1322,11 +1322,12 @@ private void batchMessageAndSend() {\n \n                 pendingMessages.put(op);\n \n+                ClientCnx cnx = cnx();\n                 if (isConnected()) {\n                     // If we do have a connection, the message is sent immediately, otherwise we'll try again once a new\n                     // connection is established\n                     cmd.retain();\n-                    cnx().ctx().channel().eventLoop().execute(WriteInEventLoopCallback.create(this, cnx(), op));\n+                    cnx.ctx().channel().eventLoop().execute(WriteInEventLoopCallback.create(this, cnx, op));\n                     stats.updateNumMsgsSent(numMessagesInBatch, op.batchSizeByte);\n                 } else {\n                     if (log.isDebugEnabled()) {",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/2a5b772e229692302c051f2de8928a007ad7713b/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerImpl.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fixed NPE when closing batch during a reconnection (#4427)",
        "commit": "https://github.com/apache/pulsar/commit/2a5b772e229692302c051f2de8928a007ad7713b"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/3cbf3c32f24326d09006c8c2898dd8797f17ab65",
        "bug_id": "pulsar_16",
        "file": [
            {
                "additions": 5,
                "sha": "ce86f893028aef197a41b827ebd65818988feb54",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/cb7ec46cb9c6d888f4d6665c3c076b84d20ca24b/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdmin.java",
                "deletions": 0,
                "filename": "pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdmin.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdmin.java?ref=cb7ec46cb9c6d888f4d6665c3c076b84d20ca24b",
                "patch": "@@ -28,6 +28,7 @@\n import javax.ws.rs.client.ClientBuilder;\n import javax.ws.rs.client.WebTarget;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.pulsar.client.admin.internal.BookiesImpl;\n import org.apache.pulsar.client.admin.internal.BrokerStatsImpl;\n import org.apache.pulsar.client.admin.internal.BrokersImpl;\n@@ -155,6 +156,10 @@ public PulsarAdmin(String serviceUrl,\n         if (auth != null) {\n             auth.start();\n         }\n+        \n+        if (StringUtils.isBlank(clientConfigData.getServiceUrl())) {\n+            clientConfigData.setServiceUrl(serviceUrl);\n+        }\n \n         AsyncHttpConnectorProvider asyncConnectorProvider = new AsyncHttpConnectorProvider(clientConfigData);\n ",
                "changes": 5,
                "blob_url": "https://github.com/apache/pulsar/blob/cb7ec46cb9c6d888f4d6665c3c076b84d20ca24b/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdmin.java"
            }
        ],
        "repo": "pulsar",
        "message": "[pulsar-admin] fix NPE on admin creation (#4410)",
        "commit": "https://github.com/apache/pulsar/commit/cb7ec46cb9c6d888f4d6665c3c076b84d20ca24b"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/fd8aa4fadb0702758e9086411689e4dbe67115b6",
        "bug_id": "pulsar_17",
        "file": [
            {
                "additions": 1,
                "sha": "9552541be2412c057e5c3cfc1ef358aef27da391",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/52659ae7680db4f9d2bdc6468dcc3b135a915be5/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
                "deletions": 1,
                "filename": "pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java?ref=52659ae7680db4f9d2bdc6468dcc3b135a915be5",
                "patch": "@@ -100,7 +100,7 @@ public void write(Record<byte[]> record) {\n     }\n \n     public KeyValue<String, byte[]> extractKeyValue(Record<byte[]> record) {\n-        String key = record.getKey().orElseGet(null);\n+        String key = record.getKey().orElse(\"\");\n         return new KeyValue<>(key, record.getValue());\n     }\n ",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/52659ae7680db4f9d2bdc6468dcc3b135a915be5/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java"
            }
        ],
        "repo": "pulsar",
        "message": "[Issue 3896] [pulsar-io] Fix NPE in ElasticSearchSink (#3899)\n\n* Fix NPE in ElasticSearchSink.\r\n\r\n* Init by an empty string",
        "commit": "https://github.com/apache/pulsar/commit/52659ae7680db4f9d2bdc6468dcc3b135a915be5"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/93d3c5ef52ec65fcec5bd92c872726ae827aacbf",
        "bug_id": "pulsar_18",
        "file": [
            {
                "additions": 5,
                "sha": "2b88ad2b874fb3396d2dd446b5bf9f93b6825da5",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/0c8e15fb13461bbe6042695e23f5ac73be7c2997/pulsar-broker/src/test/java/org/apache/pulsar/functions/worker/PulsarFunctionE2ESecurityTest.java",
                "deletions": 2,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/functions/worker/PulsarFunctionE2ESecurityTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/functions/worker/PulsarFunctionE2ESecurityTest.java?ref=0c8e15fb13461bbe6042695e23f5ac73be7c2997",
                "patch": "@@ -46,6 +46,8 @@\n import org.apache.pulsar.common.policies.data.ClusterData;\n import org.apache.pulsar.common.policies.data.SubscriptionStats;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n+import org.apache.pulsar.common.util.FutureUtil;\n+import org.apache.pulsar.functions.utils.functioncache.FunctionCacheEntry;\n import org.apache.pulsar.io.PulsarFunctionE2ETest;\n import org.apache.pulsar.zookeeper.LocalBookkeeperEnsemble;\n import org.slf4j.Logger;\n@@ -195,8 +197,6 @@ void setup(Method method) throws Exception {\n         superUserAdmin.tenants().createTenant(TENANT2, propAdmin);\n         superUserAdmin.namespaces().createNamespace( TENANT2 + \"/\" + NAMESPACE);\n \n-        System.setProperty(JAVA_INSTANCE_JAR_PROPERTY, \"\");\n-\n         Thread.sleep(100);\n     }\n \n@@ -212,6 +212,9 @@ void shutdown() throws Exception {\n \n     private WorkerService createPulsarFunctionWorker(ServiceConfiguration config) {\n \n+        System.setProperty(JAVA_INSTANCE_JAR_PROPERTY,\n+                FutureUtil.class.getProtectionDomain().getCodeSource().getLocation().getPath());\n+        \n         workerConfig = new WorkerConfig();\n         workerConfig.setPulsarFunctionsNamespace(pulsarFunctionsNamespace);\n         workerConfig.setSchedulerClassName(",
                "changes": 7,
                "blob_url": "https://github.com/apache/pulsar/blob/0c8e15fb13461bbe6042695e23f5ac73be7c2997/pulsar-broker/src/test/java/org/apache/pulsar/functions/worker/PulsarFunctionE2ESecurityTest.java"
            },
            {
                "additions": 3,
                "sha": "afc7cf70f8572d000fa2f768f1ddecaaee2d23a0",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/0c8e15fb13461bbe6042695e23f5ac73be7c2997/pulsar-broker/src/test/java/org/apache/pulsar/functions/worker/PulsarFunctionPublishTest.java",
                "deletions": 1,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/functions/worker/PulsarFunctionPublishTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/functions/worker/PulsarFunctionPublishTest.java?ref=0c8e15fb13461bbe6042695e23f5ac73be7c2997",
                "patch": "@@ -45,6 +45,7 @@\n import org.apache.pulsar.common.policies.data.FunctionStats;\n import org.apache.pulsar.common.policies.data.SubscriptionStats;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n+import org.apache.pulsar.common.util.FutureUtil;\n import org.apache.pulsar.zookeeper.LocalBookkeeperEnsemble;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -215,7 +216,8 @@ public boolean accept(File dir, String name) {\n         propAdmin.setAllowedClusters(Sets.newHashSet(Lists.newArrayList(\"use\")));\n         admin.tenants().updateTenant(tenant, propAdmin);\n \n-        System.setProperty(JAVA_INSTANCE_JAR_PROPERTY, \"\");\n+        System.setProperty(JAVA_INSTANCE_JAR_PROPERTY,\n+                FutureUtil.class.getProtectionDomain().getCodeSource().getLocation().getPath());\n \n     }\n ",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/0c8e15fb13461bbe6042695e23f5ac73be7c2997/pulsar-broker/src/test/java/org/apache/pulsar/functions/worker/PulsarFunctionPublishTest.java"
            },
            {
                "additions": 3,
                "sha": "70f5cf743084faafb04e4da2e986b8c3b4d5a460",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/0c8e15fb13461bbe6042695e23f5ac73be7c2997/pulsar-broker/src/test/java/org/apache/pulsar/functions/worker/PulsarFunctionStateTest.java",
                "deletions": 1,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/functions/worker/PulsarFunctionStateTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/functions/worker/PulsarFunctionStateTest.java?ref=0c8e15fb13461bbe6042695e23f5ac73be7c2997",
                "patch": "@@ -51,6 +51,7 @@\n import org.apache.pulsar.common.policies.data.FunctionStatus;\n import org.apache.pulsar.common.policies.data.SubscriptionStats;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n+import org.apache.pulsar.common.util.FutureUtil;\n import org.apache.pulsar.functions.instance.InstanceUtils;\n import org.apache.pulsar.functions.utils.FunctionCommon;\n import org.apache.pulsar.zookeeper.LocalBookkeeperEnsemble;\n@@ -238,7 +239,8 @@ public boolean accept(File dir, String name) {\n         propAdmin.setAllowedClusters(Sets.newHashSet(Lists.newArrayList(\"use\")));\n         admin.tenants().updateTenant(tenant, propAdmin);\n \n-        System.setProperty(JAVA_INSTANCE_JAR_PROPERTY, \"\");\n+        System.setProperty(JAVA_INSTANCE_JAR_PROPERTY,\n+                FutureUtil.class.getProtectionDomain().getCodeSource().getLocation().getPath());\n \n     }\n ",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/0c8e15fb13461bbe6042695e23f5ac73be7c2997/pulsar-broker/src/test/java/org/apache/pulsar/functions/worker/PulsarFunctionStateTest.java"
            },
            {
                "additions": 4,
                "sha": "9ae5384ad71963e46c2bc2ff1a4a2cb7be7f30ab",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/0c8e15fb13461bbe6042695e23f5ac73be7c2997/pulsar-broker/src/test/java/org/apache/pulsar/io/PulsarFunctionE2ETest.java",
                "deletions": 2,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/io/PulsarFunctionE2ETest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/io/PulsarFunctionE2ETest.java?ref=0c8e15fb13461bbe6042695e23f5ac73be7c2997",
                "patch": "@@ -52,6 +52,7 @@\n import org.apache.pulsar.common.policies.data.SubscriptionStats;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n import org.apache.pulsar.common.policies.data.TopicStats;\n+import org.apache.pulsar.common.util.FutureUtil;\n import org.apache.pulsar.functions.instance.InstanceUtils;\n import org.apache.pulsar.functions.utils.FunctionCommon;\n import org.apache.pulsar.functions.worker.FunctionRuntimeManager;\n@@ -237,8 +238,6 @@ public boolean accept(File dir, String name) {\n         propAdmin.setAllowedClusters(Sets.newHashSet(Lists.newArrayList(\"use\")));\n         admin.tenants().updateTenant(tenant, propAdmin);\n \n-        System.setProperty(JAVA_INSTANCE_JAR_PROPERTY, \"\");\n-\n         // setting up simple web sever to test submitting function via URL\n         fileServerThread = new Thread(() -> {\n             try {\n@@ -313,6 +312,9 @@ void shutdown() throws Exception {\n \n     private WorkerService createPulsarFunctionWorker(ServiceConfiguration config) {\n \n+        System.setProperty(JAVA_INSTANCE_JAR_PROPERTY,\n+                FutureUtil.class.getProtectionDomain().getCodeSource().getLocation().getPath());\n+        \n         workerConfig = new WorkerConfig();\n         workerConfig.setPulsarFunctionsNamespace(pulsarFunctionsNamespace);\n         workerConfig.setSchedulerClassName(",
                "changes": 6,
                "blob_url": "https://github.com/apache/pulsar/blob/0c8e15fb13461bbe6042695e23f5ac73be7c2997/pulsar-broker/src/test/java/org/apache/pulsar/io/PulsarFunctionE2ETest.java"
            },
            {
                "additions": 11,
                "sha": "c55111ff0165604e07bf00f336c6d2b322b621ee",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/0c8e15fb13461bbe6042695e23f5ac73be7c2997/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/functioncache/FunctionCacheEntry.java",
                "deletions": 1,
                "filename": "pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/functioncache/FunctionCacheEntry.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/functioncache/FunctionCacheEntry.java?ref=0c8e15fb13461bbe6042695e23f5ac73be7c2997",
                "patch": "@@ -33,6 +33,9 @@\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n+import static org.apache.commons.lang3.StringUtils.isNoneBlank;\n+import static org.apache.pulsar.functions.utils.functioncache.FunctionCacheEntry.JAVA_INSTANCE_JAR_PROPERTY;\n+\n import org.apache.pulsar.common.nar.NarClassLoader;\n \n /**\n@@ -67,9 +70,16 @@\n         this.executionHolders = new HashSet<>(Collections.singleton(initialInstanceId));\n     }\n \n-    private static final Set<String> JAVA_INSTANCE_ADDITIONAL_JARS = Collections.singleton(System.getProperty(JAVA_INSTANCE_JAR_PROPERTY));\n+    private static final Set<String> JAVA_INSTANCE_ADDITIONAL_JARS = isNoneBlank(\n+            System.getProperty(JAVA_INSTANCE_JAR_PROPERTY))\n+                    ? Collections.singleton(System.getProperty(JAVA_INSTANCE_JAR_PROPERTY))\n+                    : Collections.emptySet();\n \n     FunctionCacheEntry(String narArchive, String initialInstanceId) throws IOException {\n+        if (JAVA_INSTANCE_ADDITIONAL_JARS.isEmpty()) {\n+            log.warn(\"java-instance jar path not set in system-property= {} \", JAVA_INSTANCE_JAR_PROPERTY);\n+            throw new IllegalStateException(JAVA_INSTANCE_JAR_PROPERTY + \" system property not set\");\n+        }\n         this.classLoader = NarClassLoader.getFromArchive(new File(narArchive), JAVA_INSTANCE_ADDITIONAL_JARS);\n         this.classpaths = Collections.emptySet();\n         this.jarFiles = Collections.singleton(narArchive);",
                "changes": 12,
                "blob_url": "https://github.com/apache/pulsar/blob/0c8e15fb13461bbe6042695e23f5ac73be7c2997/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/functioncache/FunctionCacheEntry.java"
            }
        ],
        "repo": "pulsar",
        "message": "[pulsar-function] Fix NPE and log error when java-instance jar path not set (#4090)\n\n* [pulsar-function] Fix NPE and log error when java-instance jar path not set\r\n\r\n* fix tests\r\n\r\n* fix test",
        "commit": "https://github.com/apache/pulsar/commit/0c8e15fb13461bbe6042695e23f5ac73be7c2997"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/e4fc42da737f5d62bb4d19e2d306a1d7101ba9bf",
        "bug_id": "pulsar_19",
        "file": [
            {
                "additions": 34,
                "sha": "667e449bf51fdf5440d0617773905388b0ba8526",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/dfc0e0e9c521a212f11cdf8b3384005008c9c605/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java",
                "deletions": 31,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java?ref=dfc0e0e9c521a212f11cdf8b3384005008c9c605",
                "patch": "@@ -532,43 +532,46 @@ public void resetMetrics() {\n \n     private Builder createMetricsDataBuilder() {\n         InstanceCommunication.MetricsData.Builder bldr = InstanceCommunication.MetricsData.newBuilder();\n-\n-        bldr.setProcessedSuccessfullyTotal((long) stats.getTotalProcessedSuccessfully());\n-        bldr.setSystemExceptionsTotal((long) stats.getTotalSysExceptions());\n-        bldr.setUserExceptionsTotal((long) stats.getTotalUserExceptions());\n-        bldr.setReceivedTotal((long) stats.getTotalRecordsReceived());\n-        bldr.setAvgProcessLatency(stats.getAvgProcessLatency());\n-        bldr.setLastInvocation((long) stats.getLastInvocation());\n-\n-        bldr.setProcessedSuccessfullyTotal1Min((long) stats.getTotalProcessedSuccessfully1min());\n-        bldr.setSystemExceptionsTotal1Min((long) stats.getTotalSysExceptions1min());\n-        bldr.setUserExceptionsTotal1Min((long) stats.getTotalUserExceptions1min());\n-        bldr.setReceivedTotal1Min((long) stats.getTotalRecordsReceived1min());\n-        bldr.setAvgProcessLatency1Min(stats.getAvgProcessLatency1min());\n+        if (stats != null) {\n+            bldr.setProcessedSuccessfullyTotal((long) stats.getTotalProcessedSuccessfully());\n+            bldr.setSystemExceptionsTotal((long) stats.getTotalSysExceptions());\n+            bldr.setUserExceptionsTotal((long) stats.getTotalUserExceptions());\n+            bldr.setReceivedTotal((long) stats.getTotalRecordsReceived());\n+            bldr.setAvgProcessLatency(stats.getAvgProcessLatency());\n+            bldr.setLastInvocation((long) stats.getLastInvocation());\n+\n+            bldr.setProcessedSuccessfullyTotal1Min((long) stats.getTotalProcessedSuccessfully1min());\n+            bldr.setSystemExceptionsTotal1Min((long) stats.getTotalSysExceptions1min());\n+            bldr.setUserExceptionsTotal1Min((long) stats.getTotalUserExceptions1min());\n+            bldr.setReceivedTotal1Min((long) stats.getTotalRecordsReceived1min());\n+            bldr.setAvgProcessLatency1Min(stats.getAvgProcessLatency1min());\n+        }\n \n         return bldr;\n     }\n \n     public InstanceCommunication.FunctionStatus.Builder getFunctionStatus() {\n         InstanceCommunication.FunctionStatus.Builder functionStatusBuilder = InstanceCommunication.FunctionStatus.newBuilder();\n-        functionStatusBuilder.setNumReceived((long)stats.getTotalRecordsReceived());\n-        functionStatusBuilder.setNumSuccessfullyProcessed((long) stats.getTotalProcessedSuccessfully());\n-        functionStatusBuilder.setNumUserExceptions((long) stats.getTotalUserExceptions());\n-        stats.getLatestUserExceptions().forEach(ex -> {\n-            functionStatusBuilder.addLatestUserExceptions(ex);\n-        });\n-        functionStatusBuilder.setNumSystemExceptions((long) stats.getTotalSysExceptions());\n-        stats.getLatestSystemExceptions().forEach(ex -> {\n-            functionStatusBuilder.addLatestSystemExceptions(ex);\n-        });\n-        stats.getLatestSourceExceptions().forEach(ex -> {\n-            functionStatusBuilder.addLatestSourceExceptions(ex);\n-        });\n-        stats.getLatestSinkExceptions().forEach(ex -> {\n-            functionStatusBuilder.addLatestSinkExceptions(ex);\n-        });\n-        functionStatusBuilder.setAverageLatency(stats.getAvgProcessLatency());\n-        functionStatusBuilder.setLastInvocationTime((long) stats.getLastInvocation());\n+        if (stats != null) {\n+            functionStatusBuilder.setNumReceived((long) stats.getTotalRecordsReceived());\n+            functionStatusBuilder.setNumSuccessfullyProcessed((long) stats.getTotalProcessedSuccessfully());\n+            functionStatusBuilder.setNumUserExceptions((long) stats.getTotalUserExceptions());\n+            stats.getLatestUserExceptions().forEach(ex -> {\n+                functionStatusBuilder.addLatestUserExceptions(ex);\n+            });\n+            functionStatusBuilder.setNumSystemExceptions((long) stats.getTotalSysExceptions());\n+            stats.getLatestSystemExceptions().forEach(ex -> {\n+                functionStatusBuilder.addLatestSystemExceptions(ex);\n+            });\n+            stats.getLatestSourceExceptions().forEach(ex -> {\n+                functionStatusBuilder.addLatestSourceExceptions(ex);\n+            });\n+            stats.getLatestSinkExceptions().forEach(ex -> {\n+                functionStatusBuilder.addLatestSinkExceptions(ex);\n+            });\n+            functionStatusBuilder.setAverageLatency(stats.getAvgProcessLatency());\n+            functionStatusBuilder.setLastInvocationTime((long) stats.getLastInvocation());\n+        }\n         return functionStatusBuilder;\n     }\n ",
                "changes": 65,
                "blob_url": "https://github.com/apache/pulsar/blob/dfc0e0e9c521a212f11cdf8b3384005008c9c605/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java"
            },
            {
                "additions": 15,
                "sha": "56d80ae56363b08868f78f3ba9e9e947b64abcf6",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/dfc0e0e9c521a212f11cdf8b3384005008c9c605/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/JavaInstanceRunnableTest.java",
                "deletions": 3,
                "filename": "pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/JavaInstanceRunnableTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/JavaInstanceRunnableTest.java?ref=dfc0e0e9c521a212f11cdf8b3384005008c9c605",
                "patch": "@@ -25,6 +25,9 @@\n import org.apache.pulsar.functions.api.SerDe;\n import org.apache.pulsar.functions.proto.Function.FunctionDetails;\n import org.apache.pulsar.functions.proto.Function.SinkSpec;\n+import org.apache.pulsar.functions.proto.InstanceCommunication;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n \n@@ -42,7 +45,7 @@ public Integer deserialize(byte[] input) {\n         }\n     }\n \n-    private static InstanceConfig createInstanceConfig(boolean addCustom, String outputSerde) {\n+    private static InstanceConfig createInstanceConfig(String outputSerde) {\n         FunctionDetails.Builder functionDetailsBuilder = FunctionDetails.newBuilder();\n         if (outputSerde != null) {\n             functionDetailsBuilder.setSink(SinkSpec.newBuilder().setSerDeClassName(outputSerde).build());\n@@ -53,8 +56,8 @@ private static InstanceConfig createInstanceConfig(boolean addCustom, String out\n         return instanceConfig;\n     }\n \n-    private JavaInstanceRunnable createRunnable(boolean addCustom, String outputSerde) throws Exception {\n-        InstanceConfig config = createInstanceConfig(addCustom, outputSerde);\n+    private JavaInstanceRunnable createRunnable(String outputSerde) throws Exception {\n+        InstanceConfig config = createInstanceConfig(outputSerde);\n         JavaInstanceRunnable javaInstanceRunnable = new JavaInstanceRunnable(\n                 config, null, null, null, null, null, null);\n         return javaInstanceRunnable;\n@@ -105,4 +108,13 @@ public Void process(String input, Context context) throws Exception {\n             return null;\n         }\n     }\n+\n+    @Test\n+    public void testStatsManagerNull() throws Exception {\n+        JavaInstanceRunnable javaInstanceRunnable = createRunnable(null);\n+\n+        Assert.assertEquals(javaInstanceRunnable.getFunctionStatus().build(), InstanceCommunication.FunctionStatus.newBuilder().build());\n+\n+        Assert.assertEquals(javaInstanceRunnable.getMetrics(), InstanceCommunication.MetricsData.newBuilder().build());\n+    }\n }",
                "changes": 18,
                "blob_url": "https://github.com/apache/pulsar/blob/dfc0e0e9c521a212f11cdf8b3384005008c9c605/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/JavaInstanceRunnableTest.java"
            },
            {
                "additions": 230,
                "sha": "660775d721e77fe0a6c75572e6c03225d079b2a8",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/dfc0e0e9c521a212f11cdf8b3384005008c9c605/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/rest/api/FunctionsImplTest.java",
                "deletions": 0,
                "filename": "pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/rest/api/FunctionsImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/rest/api/FunctionsImplTest.java?ref=dfc0e0e9c521a212f11cdf8b3384005008c9c605",
                "patch": "@@ -0,0 +1,230 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.worker.rest.api;\n+\n+import org.apache.distributedlog.api.namespace.Namespace;\n+import org.apache.pulsar.client.admin.Namespaces;\n+import org.apache.pulsar.client.admin.PulsarAdmin;\n+import org.apache.pulsar.client.admin.Tenants;\n+import org.apache.pulsar.common.functions.FunctionConfig;\n+import org.apache.pulsar.common.policies.data.FunctionStats;\n+import org.apache.pulsar.common.policies.data.TenantInfo;\n+import org.apache.pulsar.functions.api.Context;\n+import org.apache.pulsar.functions.instance.InstanceConfig;\n+import org.apache.pulsar.functions.instance.JavaInstanceRunnable;\n+import org.apache.pulsar.functions.proto.Function;\n+import org.apache.pulsar.functions.proto.InstanceCommunication;\n+import org.apache.pulsar.functions.runtime.Runtime;\n+import org.apache.pulsar.functions.runtime.RuntimeFactory;\n+import org.apache.pulsar.functions.runtime.RuntimeSpawner;\n+import org.apache.pulsar.functions.source.TopicSchema;\n+import org.apache.pulsar.functions.utils.FunctionConfigUtils;\n+import org.apache.pulsar.functions.worker.FunctionMetaDataManager;\n+import org.apache.pulsar.functions.worker.FunctionRuntimeInfo;\n+import org.apache.pulsar.functions.worker.FunctionRuntimeManager;\n+import org.apache.pulsar.functions.worker.Utils;\n+import org.apache.pulsar.functions.worker.WorkerConfig;\n+import org.apache.pulsar.functions.worker.WorkerService;\n+import org.glassfish.jersey.media.multipart.FormDataContentDisposition;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.apache.pulsar.functions.utils.Utils.ComponentType.FUNCTION;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.api.mockito.PowerMockito.doReturn;\n+\n+public class FunctionsImplTest {\n+\n+    private static final class TestFunction implements org.apache.pulsar.functions.api.Function<String, String> {\n+\n+        @Override\n+        public String process(String input, Context context) {\n+            return input;\n+        }\n+    }\n+\n+    private static final String tenant = \"test-tenant\";\n+    private static final String namespace = \"test-namespace\";\n+    private static final String function = \"test-function\";\n+    private static final String outputTopic = \"test-output-topic\";\n+    private static final String outputSerdeClassName = TopicSchema.DEFAULT_SERDE;\n+    private static final String className = TestFunction.class.getName();\n+    private Function.SubscriptionType subscriptionType = Function.SubscriptionType.FAILOVER;\n+    private static final Map<String, String> topicsToSerDeClassName = new HashMap<>();\n+    static {\n+        topicsToSerDeClassName.put(\"persistent://sample/standalone/ns1/test_src\", TopicSchema.DEFAULT_SERDE);\n+    }\n+    private static final int parallelism = 1;\n+    private static final String workerId = \"worker-0\";\n+\n+    private WorkerService mockedWorkerService;\n+    private PulsarAdmin mockedPulsarAdmin;\n+    private Tenants mockedTenants;\n+    private Namespaces mockedNamespaces;\n+    private TenantInfo mockedTenantInfo;\n+    private List<String> namespaceList = new LinkedList<>();\n+    private FunctionMetaDataManager mockedManager;\n+    private FunctionRuntimeManager mockedFunctionRunTimeManager;\n+    private RuntimeFactory mockedRuntimeFactory;\n+    private Namespace mockedNamespace;\n+    private FunctionsImpl resource;\n+    private InputStream mockedInputStream;\n+    private FormDataContentDisposition mockedFormData;\n+    private Function.FunctionMetaData mockedFunctionMetadata;\n+\n+    @BeforeMethod\n+    public void setup() throws Exception {\n+        this.mockedManager = mock(FunctionMetaDataManager.class);\n+        this.mockedFunctionRunTimeManager = mock(FunctionRuntimeManager.class);\n+        this.mockedTenantInfo = mock(TenantInfo.class);\n+        this.mockedRuntimeFactory = mock(RuntimeFactory.class);\n+        this.mockedInputStream = mock(InputStream.class);\n+        this.mockedNamespace = mock(Namespace.class);\n+        this.mockedFormData = mock(FormDataContentDisposition.class);\n+        when(mockedFormData.getFileName()).thenReturn(\"test\");\n+        this.mockedPulsarAdmin = mock(PulsarAdmin.class);\n+        this.mockedTenants = mock(Tenants.class);\n+        this.mockedNamespaces = mock(Namespaces.class);\n+        this.mockedFunctionMetadata = Function.FunctionMetaData.newBuilder().setFunctionDetails(createDefaultFunctionDetails()).build();\n+        namespaceList.add(tenant + \"/\" + namespace);\n+\n+        this.mockedWorkerService = mock(WorkerService.class);\n+        when(mockedWorkerService.getFunctionMetaDataManager()).thenReturn(mockedManager);\n+        when(mockedWorkerService.getFunctionRuntimeManager()).thenReturn(mockedFunctionRunTimeManager);\n+        when(mockedFunctionRunTimeManager.getRuntimeFactory()).thenReturn(mockedRuntimeFactory);\n+        when(mockedWorkerService.getDlogNamespace()).thenReturn(mockedNamespace);\n+        when(mockedWorkerService.isInitialized()).thenReturn(true);\n+        when(mockedWorkerService.getBrokerAdmin()).thenReturn(mockedPulsarAdmin);\n+        when(mockedPulsarAdmin.tenants()).thenReturn(mockedTenants);\n+        when(mockedPulsarAdmin.namespaces()).thenReturn(mockedNamespaces);\n+        when(mockedTenants.getTenantInfo(any())).thenReturn(mockedTenantInfo);\n+        when(mockedNamespaces.getNamespaces(any())).thenReturn(namespaceList);\n+        when(mockedManager.getFunctionMetaData(any(), any(), any())).thenReturn(mockedFunctionMetadata);\n+        when(mockedManager.containsFunction(tenant, namespace, function)).thenReturn(true);\n+        when(mockedFunctionRunTimeManager.findFunctionAssignment(eq(tenant), eq(namespace), eq(function), anyInt()))\n+                .thenReturn(Function.Assignment.newBuilder()\n+                        .setWorkerId(workerId)\n+                        .build());\n+\n+        Function.FunctionDetails.Builder functionDetailsBuilder =  createDefaultFunctionDetails().toBuilder();\n+        InstanceConfig instanceConfig = new InstanceConfig();\n+        instanceConfig.setFunctionDetails(functionDetailsBuilder.build());\n+        instanceConfig.setMaxBufferedTuples(1024);\n+\n+        JavaInstanceRunnable javaInstanceRunnable = new JavaInstanceRunnable(\n+                instanceConfig, null, null, null, null, null, null);\n+        CompletableFuture<InstanceCommunication.MetricsData> metricsDataCompletableFuture = new CompletableFuture<InstanceCommunication.MetricsData>();\n+        metricsDataCompletableFuture.complete(javaInstanceRunnable.getMetrics());\n+        Runtime runtime = mock(Runtime.class);\n+        doReturn(metricsDataCompletableFuture).when(runtime).getMetrics(anyInt());\n+\n+        CompletableFuture<InstanceCommunication.FunctionStatus> functionStatusCompletableFuture = new CompletableFuture<>();\n+        functionStatusCompletableFuture.complete(javaInstanceRunnable.getFunctionStatus().build());\n+\n+        RuntimeSpawner runtimeSpawner = mock(RuntimeSpawner.class);\n+        when(runtimeSpawner.getFunctionStatus(anyInt())).thenReturn(functionStatusCompletableFuture);\n+        doReturn(runtime).when(runtimeSpawner).getRuntime();\n+\n+        FunctionRuntimeInfo functionRuntimeInfo = mock(FunctionRuntimeInfo.class);\n+        doReturn(runtimeSpawner).when(functionRuntimeInfo).getRuntimeSpawner();\n+\n+        when(mockedFunctionRunTimeManager.getFunctionRuntimeInfo(any())).thenReturn(functionRuntimeInfo);\n+\n+        // worker config\n+        WorkerConfig workerConfig = new WorkerConfig()\n+                .setWorkerId(workerId)\n+                .setWorkerPort(8080)\n+                .setDownloadDirectory(\"/tmp/pulsar/functions\")\n+                .setFunctionMetadataTopicName(\"pulsar/functions\")\n+                .setNumFunctionPackageReplicas(3)\n+                .setPulsarServiceUrl(\"pulsar://localhost:6650/\");\n+        when(mockedWorkerService.getWorkerConfig()).thenReturn(workerConfig);\n+\n+        this.resource = spy(new FunctionsImpl(() -> mockedWorkerService));\n+        doReturn(FUNCTION).when(this.resource).calculateSubjectType(any());\n+    }\n+\n+    @Test\n+    public void testStatusEmpty() {\n+        Assert.assertTrue(this.resource.getFunctionInstanceStatus(tenant, namespace, function, \"0\", null) !=null);\n+    }\n+\n+    @Test\n+    public void testMetricsEmpty() {\n+        Function.FunctionDetails.Builder functionDetailsBuilder =  createDefaultFunctionDetails().toBuilder();\n+        InstanceConfig instanceConfig = new InstanceConfig();\n+        instanceConfig.setFunctionDetails(functionDetailsBuilder.build());\n+        instanceConfig.setMaxBufferedTuples(1024);\n+\n+        JavaInstanceRunnable javaInstanceRunnable = new JavaInstanceRunnable(\n+                instanceConfig, null, null, null, null, null, null);\n+        CompletableFuture<InstanceCommunication.MetricsData> completableFuture = new CompletableFuture<InstanceCommunication.MetricsData>();\n+        completableFuture.complete(javaInstanceRunnable.getMetrics());\n+        Runtime runtime = mock(Runtime.class);\n+        doReturn(completableFuture).when(runtime).getMetrics(anyInt());\n+        RuntimeSpawner runtimeSpawner = mock(RuntimeSpawner.class);\n+        doReturn(runtime).when(runtimeSpawner).getRuntime();\n+\n+        FunctionRuntimeInfo functionRuntimeInfo = mock(FunctionRuntimeInfo.class);\n+        doReturn(runtimeSpawner).when(functionRuntimeInfo).getRuntimeSpawner();\n+\n+        FunctionStats.FunctionInstanceStats instanceStats1 = Utils\n+                .getFunctionInstanceStats(\"public/default/test\", functionRuntimeInfo, 0);\n+        FunctionStats.FunctionInstanceStats instanceStats2 = Utils\n+                .getFunctionInstanceStats(\"public/default/test\", functionRuntimeInfo, 1);\n+\n+        FunctionStats functionStats = new FunctionStats();\n+        functionStats.addInstance(instanceStats1);\n+        functionStats.addInstance(instanceStats2);\n+\n+        Assert.assertTrue(functionStats.calculateOverall() != null);\n+    }\n+\n+    public static FunctionConfig createDefaultFunctionConfig() {\n+        FunctionConfig functionConfig = new FunctionConfig();\n+        functionConfig.setTenant(tenant);\n+        functionConfig.setNamespace(namespace);\n+        functionConfig.setName(function);\n+        functionConfig.setClassName(className);\n+        functionConfig.setParallelism(parallelism);\n+        functionConfig.setCustomSerdeInputs(topicsToSerDeClassName);\n+        functionConfig.setOutput(outputTopic);\n+        functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n+        functionConfig.setRuntime(FunctionConfig.Runtime.JAVA);\n+        return functionConfig;\n+    }\n+\n+    public static Function.FunctionDetails createDefaultFunctionDetails() {\n+        FunctionConfig functionConfig = createDefaultFunctionConfig();\n+        return FunctionConfigUtils.convert(functionConfig, null);\n+    }\n+}",
                "changes": 230,
                "blob_url": "https://github.com/apache/pulsar/blob/dfc0e0e9c521a212f11cdf8b3384005008c9c605/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/rest/api/FunctionsImplTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "fix: NPE when stats manager not initialized (#3891)\n\n* fix: NPE when stats manager not initialized\r\n\r\n* remove unnecessary imports\r\n\r\n* add test",
        "commit": "https://github.com/apache/pulsar/commit/dfc0e0e9c521a212f11cdf8b3384005008c9c605"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/f7f218494d96cb82fa0062f47debb3c605b79665",
        "bug_id": "pulsar_20",
        "file": [
            {
                "additions": 7,
                "sha": "ed059bfa794fc5c73fe74e7da138de08fdebd0c5",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/06076009e0cba36581730bb64781bfad825fa133/pulsar-io/kafka-connect-adaptor/src/main/java/org/apache/pulsar/io/kafka/connect/KafkaConnectSource.java",
                "deletions": 1,
                "filename": "pulsar-io/kafka-connect-adaptor/src/main/java/org/apache/pulsar/io/kafka/connect/KafkaConnectSource.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-io/kafka-connect-adaptor/src/main/java/org/apache/pulsar/io/kafka/connect/KafkaConnectSource.java?ref=06076009e0cba36581730bb64781bfad825fa133",
                "patch": "@@ -142,7 +142,13 @@ public void open(Map<String, Object> config, SourceContext sourceContext) throws\n                 currentBatch = recordList.iterator();\n             }\n             if (currentBatch.hasNext()) {\n-                return processSourceRecord(currentBatch.next());\n+                Record<KeyValue<byte[], byte[]>> processRecord = processSourceRecord(currentBatch.next());\n+                if (processRecord.getValue().getValue() == null) {\n+                    outstandingRecords.decrementAndGet();\n+                    continue;\n+                } else {\n+                    return processRecord;\n+                }\n             } else {\n                 // there is no records any more, then waiting for the batch to complete writing\n                 // to sink and the offsets are committed as well, then do next round read.",
                "changes": 8,
                "blob_url": "https://github.com/apache/pulsar/blob/06076009e0cba36581730bb64781bfad825fa133/pulsar-io/kafka-connect-adaptor/src/main/java/org/apache/pulsar/io/kafka/connect/KafkaConnectSource.java"
            },
            {
                "additions": 57,
                "sha": "8fc5e927fe9618925a48e35f86509ea8b27f183e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/06076009e0cba36581730bb64781bfad825fa133/tests/integration/src/test/java/org/apache/pulsar/tests/integration/functions/PulsarFunctionsTest.java",
                "deletions": 3,
                "filename": "tests/integration/src/test/java/org/apache/pulsar/tests/integration/functions/PulsarFunctionsTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/java/org/apache/pulsar/tests/integration/functions/PulsarFunctionsTest.java?ref=06076009e0cba36581730bb64781bfad825fa133",
                "patch": "@@ -2117,7 +2117,25 @@ private  void testDebeziumMySqlConnect()\n                 waitForProcessingSourceMessages(tenant, namespace, sourceName, numMessages));\n \n         // validate the source result\n-        sourceTester.validateSourceResult(consumer, 9);\n+        sourceTester.validateSourceResult(consumer, 9, null);\n+\n+        // prepare insert event\n+        sourceTester.prepareInsertEvent();\n+\n+        // validate the source insert event\n+        sourceTester.validateSourceResult(consumer, 1, SourceTester.INSERT);\n+\n+        // prepare update event\n+        sourceTester.prepareUpdateEvent();\n+\n+        // validate the source update event\n+        sourceTester.validateSourceResult(consumer, 1, SourceTester.UPDATE);\n+\n+        // prepare delete event\n+        sourceTester.prepareDeleteEvent();\n+\n+        // validate the source delete event\n+        sourceTester.validateSourceResult(consumer, 1, SourceTester.DELETE);\n \n         // delete the source\n         deleteSource(tenant, namespace, sourceName);\n@@ -2189,7 +2207,25 @@ private  void testDebeziumPostgreSqlConnect() throws Exception {\n                 waitForProcessingSourceMessages(tenant, namespace, sourceName, numMessages));\n \n         // validate the source result\n-        sourceTester.validateSourceResult(consumer, 9);\n+        sourceTester.validateSourceResult(consumer, 9, null);\n+\n+        // prepare insert event\n+        sourceTester.prepareInsertEvent();\n+\n+        // validate the source insert event\n+        sourceTester.validateSourceResult(consumer, 1, SourceTester.INSERT);\n+\n+        // prepare update event\n+        sourceTester.prepareUpdateEvent();\n+\n+        // validate the source update event\n+        sourceTester.validateSourceResult(consumer, 1, SourceTester.UPDATE);\n+\n+        // prepare delete event\n+        sourceTester.prepareDeleteEvent();\n+\n+        // validate the source delete event\n+        sourceTester.validateSourceResult(consumer, 1, SourceTester.DELETE);\n \n         // delete the source\n         deleteSource(tenant, namespace, sourceName);\n@@ -2260,7 +2296,25 @@ private  void testDebeziumMongoDbConnect() throws Exception {\n                 waitForProcessingSourceMessages(tenant, namespace, sourceName, numMessages));\n \n         // validate the source result\n-        sourceTester.validateSourceResult(consumer, 9);\n+        sourceTester.validateSourceResult(consumer, 9, null);\n+\n+        // prepare insert event\n+        sourceTester.prepareInsertEvent();\n+\n+        // validate the source insert event\n+        sourceTester.validateSourceResult(consumer, 1, SourceTester.INSERT);\n+\n+        // prepare update event\n+        sourceTester.prepareUpdateEvent();\n+\n+        // validate the source update event\n+        sourceTester.validateSourceResult(consumer, 1, SourceTester.UPDATE);\n+\n+        // prepare delete event\n+        sourceTester.prepareDeleteEvent();\n+\n+        // validate the source delete event\n+        sourceTester.validateSourceResult(consumer, 1, SourceTester.DELETE);\n \n         // delete the source\n         deleteSource(tenant, namespace, sourceName);",
                "changes": 60,
                "blob_url": "https://github.com/apache/pulsar/blob/06076009e0cba36581730bb64781bfad825fa133/tests/integration/src/test/java/org/apache/pulsar/tests/integration/functions/PulsarFunctionsTest.java"
            },
            {
                "additions": 37,
                "sha": "23b5db43134e46f94e0a1cb1d60fe174829e207e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/06076009e0cba36581730bb64781bfad825fa133/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/DebeziumMongoDbSourceTester.java",
                "deletions": 0,
                "filename": "tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/DebeziumMongoDbSourceTester.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/DebeziumMongoDbSourceTester.java?ref=06076009e0cba36581730bb64781bfad825fa133",
                "patch": "@@ -65,6 +65,43 @@ public void prepareSource() throws Exception {\n         log.info(\"debezium mongodb server already contains preconfigured data.\");\n     }\n \n+    @Override\n+    public void prepareInsertEvent() throws Exception {\n+        this.debeziumMongoDbContainer.execCmd(\"/bin/bash\", \"-c\",\n+                \"mongo -u debezium -p dbz --authenticationDatabase admin localhost:27017/inventory \" +\n+                        \"--eval 'db.products.find()'\");\n+        this.debeziumMongoDbContainer.execCmd(\"/bin/bash\", \"-c\",\n+                \"mongo -u debezium -p dbz --authenticationDatabase admin localhost:27017/inventory \" +\n+                        \"--eval 'db.products.insert({ \" +\n+                        \"_id : NumberLong(\\\"110\\\"),\" +\n+                        \"name : \\\"test-debezium\\\",\" +\n+                        \"description: \\\"24 inch spare tire\\\",\" +\n+                        \"weight : 22.2,\" +\n+                        \"quantity : NumberInt(\\\"5\\\")})'\");\n+    }\n+\n+    @Override\n+    public void prepareDeleteEvent() throws Exception {\n+        this.debeziumMongoDbContainer.execCmd(\"/bin/bash\", \"-c\",\n+                \"mongo -u debezium -p dbz --authenticationDatabase admin localhost:27017/inventory \" +\n+                        \"--eval 'db.products.find()'\");\n+        this.debeziumMongoDbContainer.execCmd(\"/bin/bash\", \"-c\",\n+                \"mongo -u debezium -p dbz --authenticationDatabase admin localhost:27017/inventory \" +\n+                        \"--eval 'db.products.deleteOne({name : \\\"test-debezium-update\\\"})'\");\n+    }\n+\n+    @Override\n+    public void prepareUpdateEvent() throws Exception {\n+        this.debeziumMongoDbContainer.execCmd(\"/bin/bash\", \"-c\",\n+                \"mongo -u debezium -p dbz --authenticationDatabase admin localhost:27017/inventory \" +\n+                        \"--eval 'db.products.find()'\");\n+        this.debeziumMongoDbContainer.execCmd(\"/bin/bash\", \"-c\",\n+                \"mongo -u debezium -p dbz --authenticationDatabase admin localhost:27017/inventory \" +\n+                        \"--eval 'db.products.update({\" +\n+                        \"_id : 110},\" +\n+                        \"{$set:{name:\\\"test-debezium-update\\\", description: \\\"this is update description\\\"}})'\");\n+    }\n+\n     @Override\n     public Map<String, String> produceSourceMessages(int numMessages) throws Exception {\n         log.info(\"debezium mongodb server already contains preconfigured data.\");",
                "changes": 37,
                "blob_url": "https://github.com/apache/pulsar/blob/06076009e0cba36581730bb64781bfad825fa133/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/DebeziumMongoDbSourceTester.java"
            },
            {
                "additions": 37,
                "sha": "3287e2b0750c2f3951929f0fd45ac21e6bd488fe",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/06076009e0cba36581730bb64781bfad825fa133/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/DebeziumMySqlSourceTester.java",
                "deletions": 6,
                "filename": "tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/DebeziumMySqlSourceTester.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/DebeziumMySqlSourceTester.java?ref=06076009e0cba36581730bb64781bfad825fa133",
                "patch": "@@ -20,17 +20,12 @@\n \n import java.io.Closeable;\n import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n+\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n-import org.apache.pulsar.client.api.Consumer;\n-import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.impl.schema.ByteSchema;\n-import org.apache.pulsar.common.schema.KeyValue;\n import org.apache.pulsar.tests.integration.containers.DebeziumMySQLContainer;\n import org.apache.pulsar.tests.integration.containers.PulsarContainer;\n import org.apache.pulsar.tests.integration.topologies.PulsarCluster;\n-import org.testng.Assert;\n \n /**\n  * A tester for testing Debezium MySQL source.\n@@ -80,6 +75,42 @@ public void prepareSource() throws Exception {\n         log.info(\"debezium mysql server already contains preconfigured data.\");\n     }\n \n+    @Override\n+    public void prepareInsertEvent() throws Exception {\n+        this.debeziumMySqlContainer.execCmd(\n+                \"/bin/bash\", \"-c\",\n+                \"mysql -h 127.0.0.1 -u root -pdebezium -e 'SELECT * FROM inventory.products'\");\n+        this.debeziumMySqlContainer.execCmd(\n+                \"/bin/bash\", \"-c\",\n+                \"mysql -h 127.0.0.1 -u root -pdebezium \" +\n+                        \"-e \\\"INSERT INTO inventory.products(name, description, weight) \" +\n+                        \"values('test-debezium', 'This is description', 2.0)\\\"\");\n+    }\n+\n+    @Override\n+    public void prepareUpdateEvent() throws Exception {\n+        this.debeziumMySqlContainer.execCmd(\n+                \"/bin/bash\", \"-c\",\n+                \"mysql -h 127.0.0.1 -u root -pdebezium \" +\n+                        \"-e \\\"UPDATE inventory.products set description='update description', weight=10 \" +\n+                        \"WHERE name='test-debezium'\\\"\");\n+    }\n+\n+    @Override\n+    public void prepareDeleteEvent() throws Exception {\n+        this.debeziumMySqlContainer.execCmd(\n+                \"/bin/bash\", \"-c\",\n+                \"mysql -h 127.0.0.1 -u root -pdebezium -e 'SELECT * FROM inventory.products'\");\n+        this.debeziumMySqlContainer.execCmd(\n+                \"/bin/bash\", \"-c\",\n+                \"mysql -h 127.0.0.1 -u root -pdebezium \" +\n+                        \"-e \\\"DELETE FROM inventory.products WHERE name='test-debezium'\\\"\");\n+        this.debeziumMySqlContainer.execCmd(\n+                \"/bin/bash\", \"-c\",\n+                \"mysql -h 127.0.0.1 -u root -pdebezium -e 'SELECT * FROM inventory.products'\");\n+    }\n+\n+\n     @Override\n     public Map<String, String> produceSourceMessages(int numMessages) throws Exception {\n         log.info(\"debezium mysql server already contains preconfigured data.\");",
                "changes": 43,
                "blob_url": "https://github.com/apache/pulsar/blob/06076009e0cba36581730bb64781bfad825fa133/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/DebeziumMySqlSourceTester.java"
            },
            {
                "additions": 29,
                "sha": "e0efff2df11151e7cd51198346cc911e3b1ec011",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/06076009e0cba36581730bb64781bfad825fa133/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/DebeziumPostgreSqlSourceTester.java",
                "deletions": 5,
                "filename": "tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/DebeziumPostgreSqlSourceTester.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/DebeziumPostgreSqlSourceTester.java?ref=06076009e0cba36581730bb64781bfad825fa133",
                "patch": "@@ -20,17 +20,12 @@\n \n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n-import org.apache.pulsar.client.api.Consumer;\n-import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.common.schema.KeyValue;\n import org.apache.pulsar.tests.integration.containers.DebeziumPostgreSqlContainer;\n import org.apache.pulsar.tests.integration.containers.PulsarContainer;\n import org.apache.pulsar.tests.integration.topologies.PulsarCluster;\n-import org.testng.Assert;\n \n import java.io.Closeable;\n import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n \n /**\n  * A tester for testing Debezium Postgresql source.\n@@ -82,6 +77,35 @@ public void prepareSource() {\n         log.info(\"debezium postgresql server already contains preconfigured data.\");\n     }\n \n+    @Override\n+    public void prepareInsertEvent() throws Exception {\n+        this.debeziumPostgresqlContainer.execCmd(\"/bin/bash\", \"-c\",\n+                \"psql -h 127.0.0.1 -U postgres -d postgres -c \\\"select * from inventory.products;\\\"\");\n+        this.debeziumPostgresqlContainer.execCmd(\"/bin/bash\", \"-c\",\n+                \"psql -h 127.0.0.1 -U postgres -d postgres \" +\n+                        \"-c \\\"insert into inventory.products(name, description, weight) \" +\n+                        \"values('test-debezium', 'description', 10);\\\"\");\n+    }\n+\n+    @Override\n+    public void prepareDeleteEvent() throws Exception {\n+        this.debeziumPostgresqlContainer.execCmd(\"/bin/bash\", \"-c\",\n+                \"psql -h 127.0.0.1 -U postgres -d postgres -c \\\"select * from inventory.products;\\\"\");\n+        this.debeziumPostgresqlContainer.execCmd(\"/bin/bash\", \"-c\",\n+                \"psql -h 127.0.0.1 -U postgres -d postgres \" +\n+                        \"-c \\\"delete from inventory.products where name='test-debezium';\\\"\");\n+    }\n+\n+    @Override\n+    public void prepareUpdateEvent() throws Exception {\n+        this.debeziumPostgresqlContainer.execCmd(\"/bin/bash\", \"-c\",\n+                \"psql -h 127.0.0.1 -U postgres -d postgres -c \\\"select * from inventory.products;\\\"\");\n+        this.debeziumPostgresqlContainer.execCmd(\"/bin/bash\", \"-c\",\n+                \"psql -h 127.0.0.1 -U postgres -d postgres \" +\n+                        \"-c \\\"update inventory.products \" +\n+                        \"set description='test-update-description', weight='20' where name='test-debezium';\\\"\");\n+    }\n+\n     @Override\n     public Map<String, String> produceSourceMessages(int numMessages) {\n         log.info(\"debezium postgresql server already contains preconfigured data.\");",
                "changes": 34,
                "blob_url": "https://github.com/apache/pulsar/blob/06076009e0cba36581730bb64781bfad825fa133/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/DebeziumPostgreSqlSourceTester.java"
            },
            {
                "additions": 15,
                "sha": "759af05ad898ab1905dab2bc0e631fd31b2366e4",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/06076009e0cba36581730bb64781bfad825fa133/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/KafkaSourceTester.java",
                "deletions": 0,
                "filename": "tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/KafkaSourceTester.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/KafkaSourceTester.java?ref=06076009e0cba36581730bb64781bfad825fa133",
                "patch": "@@ -101,6 +101,21 @@ public void prepareSource() throws Exception {\n         log.info(\"Successfully subscribe to kafka topic {}\", kafkaTopicName);\n     }\n \n+    @Override\n+    public void prepareInsertEvent() throws Exception {\n+        // pass\n+    }\n+\n+    @Override\n+    public void prepareDeleteEvent() throws Exception {\n+        // pass\n+    }\n+\n+    @Override\n+    public void prepareUpdateEvent() throws Exception {\n+        // pass\n+    }\n+\n     @Override\n     public Map<String, String> produceSourceMessages(int numMessages) throws Exception{\n         KafkaProducer<String, String> producer = new KafkaProducer<>(",
                "changes": 15,
                "blob_url": "https://github.com/apache/pulsar/blob/06076009e0cba36581730bb64781bfad825fa133/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/KafkaSourceTester.java"
            },
            {
                "additions": 26,
                "sha": "5040de5577e3b33741b081a505c950483fd0af17",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/06076009e0cba36581730bb64781bfad825fa133/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/SourceTester.java",
                "deletions": 1,
                "filename": "tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/SourceTester.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/SourceTester.java?ref=06076009e0cba36581730bb64781bfad825fa133",
                "patch": "@@ -37,6 +37,12 @@\n @Slf4j\n public abstract class SourceTester<ServiceContainerT extends GenericContainer> {\n \n+    public final static String INSERT = \"INSERT\";\n+\n+    public final static String DELETE = \"DELETE\";\n+\n+    public final static String UPDATE = \"UPDATE\";\n+\n     protected final String sourceType;\n     protected final Map<String, Object> sourceConfig;\n \n@@ -57,9 +63,15 @@ public String sourceType() {\n \n     public abstract void prepareSource() throws Exception;\n \n+    public abstract void prepareInsertEvent() throws Exception;\n+\n+    public abstract void prepareDeleteEvent() throws Exception;\n+\n+    public abstract void prepareUpdateEvent() throws Exception;\n+\n     public abstract Map<String, String> produceSourceMessages(int numMessages) throws Exception;\n \n-    public void validateSourceResult(Consumer<KeyValue<byte[], byte[]>> consumer, int number) throws Exception {\n+    public void validateSourceResult(Consumer<KeyValue<byte[], byte[]>> consumer, int number, String eventType) throws Exception {\n         int recordsNumber = 0;\n         Message<KeyValue<byte[], byte[]>> msg = consumer.receive(2, TimeUnit.SECONDS);\n         while(msg != null) {\n@@ -69,6 +81,9 @@ public void validateSourceResult(Consumer<KeyValue<byte[], byte[]>> consumer, in\n             log.info(\"Received message: key = {}, value = {}.\", key, value);\n             Assert.assertTrue(key.contains(this.keyContains()));\n             Assert.assertTrue(value.contains(this.valueContains()));\n+            if (eventType != null) {\n+                Assert.assertTrue(value.contains(this.eventContains(eventType)));\n+            }\n             consumer.acknowledge(msg);\n             msg = consumer.receive(1, TimeUnit.SECONDS);\n         }\n@@ -82,4 +97,14 @@ public String keyContains(){\n     public String valueContains(){\n         return \"dbserver1.inventory.products.Value\";\n     }\n+\n+    public String eventContains(String eventType) {\n+        if (eventType.equals(INSERT)) {\n+            return \"\\\"op\\\":\\\"c\\\"\";\n+        } else if (eventType.equals(UPDATE)) {\n+            return \"\\\"op\\\":\\\"u\\\"\";\n+        } else {\n+            return \"\\\"op\\\":\\\"d\\\"\";\n+        }\n+    }\n }",
                "changes": 27,
                "blob_url": "https://github.com/apache/pulsar/blob/06076009e0cba36581730bb64781bfad825fa133/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/SourceTester.java"
            }
        ],
        "repo": "pulsar",
        "message": "[Issue 5832][Pulsar IO]Fix npe of debezium delete event (#5876)\n\nFixes https://github.com/apache/pulsar/issues/5832\r\n\r\nMaster Issue: https://github.com/apache/pulsar/issues/5832\r\n\r\n### Motivation\r\n\r\nCurrently, in debezium, for delete events, in order to be compatible with Kafka's compaction, each delete event will be followed by a record with a null value. For records with a null value, the null value is not currently processed in pulsar, resulting in an exception of throwing a null pointer. Now, we considered to ignore the null value or use it in combination with pulsar's compaction feature in the future.\r\n\r\n![image](https://user-images.githubusercontent.com/1907867/70976050-21cef680-20e6-11ea-963f-56471c915c98.png)\r\nhttps://debezium.io/documentation/reference/0.10/connectors/mysql.html\r\n\r\n### Modifications\r\n\r\n* Ignore the record of the null value.\r\n* Add more integrations, such as insert, delete, update.",
        "commit": "https://github.com/apache/pulsar/commit/06076009e0cba36581730bb64781bfad825fa133"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/634726dcaf8d25673868e0db638193fc7a89ab80",
        "bug_id": "pulsar_21",
        "file": [
            {
                "additions": 4,
                "sha": "6e8a393b8dc4fb29e077cf6e9d8342d7f6071989",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/6481a4e0722a4f8860090440584b00f2871b8ca6/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ThreadRuntime.java",
                "deletions": 1,
                "filename": "pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ThreadRuntime.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ThreadRuntime.java?ref=6481a4e0722a4f8860090440584b00f2871b8ca6",
                "patch": "@@ -104,7 +104,10 @@ public void stop() {\n         if (!isAlive()) {\n             FunctionStatus.Builder functionStatusBuilder = FunctionStatus.newBuilder();\n             functionStatusBuilder.setRunning(false);\n-            functionStatusBuilder.setFailureException(getDeathException().getMessage());\n+            Throwable ex = getDeathException();\n+            if (ex != null && ex.getMessage() != null) {\n+                functionStatusBuilder.setFailureException(ex.getMessage());\n+            }\n             statsFuture.complete(functionStatusBuilder.build());\n             return statsFuture;\n         }",
                "changes": 5,
                "blob_url": "https://github.com/apache/pulsar/blob/6481a4e0722a4f8860090440584b00f2871b8ca6/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ThreadRuntime.java"
            }
        ],
        "repo": "pulsar",
        "message": "fix NPE while setting stats (#2633)\n\n### Motivation\r\n\r\nIt fixes below NPE\r\n```\r\n java.lang.NullPointerException: null\r\n\tat org.apache.pulsar.functions.proto.InstanceCommunication$FunctionStatus$Builder.setFailureException(InstanceCommunication.java:2155) ~[classes/:?]\r\n\tat org.apache.pulsar.functions.runtime.ThreadRuntime.getFunctionStatus(ThreadRuntime.java:107) ~[classes/:?]\r\n\tat org.apache.pulsar.functions.runtime.RuntimeSpawner.getFunctionStatus(RuntimeSpawner.java:107) ~[classes/:?]\r\n\tat org.apache.pulsar.functions.worker.FunctionRuntimeManager.getFunctionInstanceStatus(FunctionRuntimeManager.java:260) ~[classes/:?]\r\n\tat org.apache.pulsar.functions.worker.FunctionRuntimeManager.getAllFunctionStatus(FunctionRuntimeManager.java:435) ~[classes/:?]\r\n\tat org.apache.pulsar.functions.worker.rest.api.FunctionsImpl.getFunctionStatus(FunctionsImpl.java:490) [classes/:?]\r\n\tat org.apache.pulsar.functions.worker.rest.api.v2.FunctionApiV2Resource.getFunctionStatus(FunctionApiV2Resource.java:115) [classes/:?]\r\n```",
        "commit": "https://github.com/apache/pulsar/commit/6481a4e0722a4f8860090440584b00f2871b8ca6"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/1f3732624bf8c398385175a4095fca8a3bcbf829",
        "bug_id": "pulsar_22",
        "file": [
            {
                "additions": 7,
                "sha": "b48a0813829da8b3f737e6b01044e5fdc3f33d8b",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/fe04ce8453b4da5dc6be6541cd039989495a7fd7/pulsar-zookeeper/src/main/java/org/apache/pulsar/zookeeper/ZooKeeperServerAspect.java",
                "deletions": 1,
                "filename": "pulsar-zookeeper/src/main/java/org/apache/pulsar/zookeeper/ZooKeeperServerAspect.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-zookeeper/src/main/java/org/apache/pulsar/zookeeper/ZooKeeperServerAspect.java?ref=fe04ce8453b4da5dc6be6541cd039989495a7fd7",
                "patch": "@@ -20,6 +20,7 @@\n \n import io.prometheus.client.Gauge;\n \n+import org.apache.zookeeper.server.ServerCnxnFactory;\n import org.apache.zookeeper.server.ZooKeeperServer;\n import org.aspectj.lang.JoinPoint;\n import org.aspectj.lang.annotation.After;\n@@ -71,7 +72,12 @@ public double get() {\n                 .setChild(new Gauge.Child() {\n                     @Override\n                     public double get() {\n-                        return zkServer.serverStats().getNumAliveClientConnections();\n+                        ServerCnxnFactory cnxFactory = zkServer.getServerCnxnFactory();\n+                        if (cnxFactory != null) {\n+                            return cnxFactory.getNumAliveConnections();\n+                        } else {\n+                            return -1;\n+                        }\n                     }\n                 }).register();\n ",
                "changes": 8,
                "blob_url": "https://github.com/apache/pulsar/blob/fe04ce8453b4da5dc6be6541cd039989495a7fd7/pulsar-zookeeper/src/main/java/org/apache/pulsar/zookeeper/ZooKeeperServerAspect.java"
            }
        ],
        "repo": "pulsar",
        "message": "Avoid NullPointerException in ZK server stats collection (#2710)",
        "commit": "https://github.com/apache/pulsar/commit/fe04ce8453b4da5dc6be6541cd039989495a7fd7"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/6658891eaa49189a431cf4aede0e35453b737ca7",
        "bug_id": "pulsar_23",
        "file": [
            {
                "additions": 26,
                "sha": "826d9773fdbdf2459a5465e70a0c076fc3993c3e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/a4d162448d63b4eea8edcdde0797dce877bba2f2/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java",
                "deletions": 18,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java?ref=a4d162448d63b4eea8edcdde0797dce877bba2f2",
                "patch": "@@ -689,32 +689,40 @@ public void connectionFailed(PulsarClientException exception) {\n         acknowledgmentsGroupingTracker.close();\n \n         long requestId = client.newRequestId();\n-        ByteBuf cmd = Commands.newCloseConsumer(consumerId, requestId);\n \n         CompletableFuture<Void> closeFuture = new CompletableFuture<>();\n         ClientCnx cnx = cnx();\n-        cnx.sendRequestWithId(cmd, requestId).handle((v, exception) -> {\n-            cnx.removeConsumer(consumerId);\n-            if (exception == null || !cnx.ctx().channel().isActive()) {\n-                log.info(\"[{}] [{}] Closed consumer\", topic, subscription);\n-                setState(State.Closed);\n-                unAckedMessageTracker.close();\n-                if (possibleSendToDeadLetterTopicMessages != null) {\n-                    possibleSendToDeadLetterTopicMessages.clear();\n+        if (null == cnx) {\n+            cleanupAtClose(closeFuture);\n+        } else {\n+            ByteBuf cmd = Commands.newCloseConsumer(consumerId, requestId);\n+            cnx.sendRequestWithId(cmd, requestId).handle((v, exception) -> {\n+                cnx.removeConsumer(consumerId);\n+                if (exception == null || !cnx.ctx().channel().isActive()) {\n+                    cleanupAtClose(closeFuture);\n+                } else {\n+                    closeFuture.completeExceptionally(exception);\n                 }\n-                closeFuture.complete(null);\n-                client.cleanupConsumer(this);\n-                // fail all pending-receive futures to notify application\n-                failPendingReceive();\n-            } else {\n-                closeFuture.completeExceptionally(exception);\n-            }\n-            return null;\n-        });\n+                return null;\n+            });\n+        }\n \n         return closeFuture;\n     }\n \n+    private void cleanupAtClose(CompletableFuture<Void> closeFuture) {\n+        log.info(\"[{}] [{}] Closed consumer\", topic, subscription);\n+        setState(State.Closed);\n+        unAckedMessageTracker.close();\n+        if (possibleSendToDeadLetterTopicMessages != null) {\n+            possibleSendToDeadLetterTopicMessages.clear();\n+        }\n+        closeFuture.complete(null);\n+        client.cleanupConsumer(this);\n+        // fail all pending-receive futures to notify application\n+        failPendingReceive();\n+    }\n+\n     private void failPendingReceive() {\n         lock.readLock().lock();\n         try {",
                "changes": 44,
                "blob_url": "https://github.com/apache/pulsar/blob/a4d162448d63b4eea8edcdde0797dce877bba2f2/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java"
            }
        ],
        "repo": "pulsar",
        "message": "[tests] Issue 2639: NullPointerException at closing consumer (#2640)\n\n* [tests] Issue 2639: NullPointerException at closing consumer\r\n\r\n*Motivation*\r\n\r\nConnection can be null when closing consumer.\r\n\r\n*Changes*\r\n\r\nCheck if the connection is null or not during closing.\r\n\r\n* Address comments",
        "commit": "https://github.com/apache/pulsar/commit/a4d162448d63b4eea8edcdde0797dce877bba2f2"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/878362c2f08055dedf11477fd434ad83b98a4faf",
        "bug_id": "pulsar_24",
        "file": [
            {
                "additions": 5,
                "sha": "ec0ec66f75e53b965463e5ab5883b560fbdce96d",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3ac67de0a2d023f372be27fc04055196ed224996/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/Consumer.java",
                "deletions": 2,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/Consumer.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/Consumer.java?ref=3ac67de0a2d023f372be27fc04055196ed224996",
                "patch": "@@ -581,8 +581,11 @@ private void removePendingAcks(PositionImpl position) {\n         }\n \n         // remove pending message from appropriate consumer and unblock unAckMsg-flow if requires\n-        if (ackOwnedConsumer != null) {\n-            int totalAckedMsgs = (int) ackOwnedConsumer.getPendingAcks().get(position.getLedgerId(), position.getEntryId()).first;\n+        LongPair ackedPosition = ackOwnedConsumer != null\n+                ? ackOwnedConsumer.getPendingAcks().get(position.getLedgerId(), position.getEntryId())\n+                : null;\n+        if (ackedPosition != null) {\n+            int totalAckedMsgs = (int) ackedPosition.first;\n             if (!ackOwnedConsumer.getPendingAcks().remove(position.getLedgerId(), position.getEntryId())) {\n                 // Message was already removed by the other consumer\n                 return;",
                "changes": 7,
                "blob_url": "https://github.com/apache/pulsar/blob/3ac67de0a2d023f372be27fc04055196ed224996/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/Consumer.java"
            }
        ],
        "repo": "pulsar",
        "message": "[pulsar-broker] fix: npe while acking message (#3687)",
        "commit": "https://github.com/apache/pulsar/commit/3ac67de0a2d023f372be27fc04055196ed224996"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/dedeb33a3637621b4a99211d5e7070cd080566ea",
        "bug_id": "pulsar_25",
        "file": [
            {
                "additions": 1,
                "sha": "16352a4f496206c092ea3eba810ee69c649815d1",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/c60cf47b9928feca31eef294df2fd0228469c8ca/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java",
                "deletions": 1,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java?ref=c60cf47b9928feca31eef294df2fd0228469c8ca",
                "patch": "@@ -427,7 +427,7 @@ public void close() throws IOException {\n     public void unloadNamespaceBundlesGracefully() {\n         try {\n             // make broker-node unavailable from the cluster\n-            if (pulsar.getLoadManager() != null) {\n+            if (pulsar.getLoadManager() != null && pulsar.getLoadManager().get() != null) {\n                 try {\n                     pulsar.getLoadManager().get().disableBroker();\n                 } catch (PulsarServerException.NotFoundException ne) {",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/c60cf47b9928feca31eef294df2fd0228469c8ca/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java"
            }
        ],
        "repo": "pulsar",
        "message": "Exception Handling for Null Pointer Exception in BrokerService (#3108)\n\n### Motivation\r\nIn a unit test under pulsar-broker, I have found that some NullPointerExceptions were thrown, although the tests had passed. I decided it will be best if we minimized the number of such exceptions as they are usually not intentionally thrown.\r\n\r\n### Result\r\nThe NullPointerException will no longer occur.",
        "commit": "https://github.com/apache/pulsar/commit/c60cf47b9928feca31eef294df2fd0228469c8ca"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/49e51db04b7a5a0cf701f870c6ea58a4655ecd07",
        "bug_id": "pulsar_26",
        "file": [
            {
                "additions": 10,
                "sha": "6195027ea76163affc5f77cb98af088b6adc1d60",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/05ec310daaca60d16e20b10019ab732f12b10bfa/pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ClientConfigurationData.java",
                "deletions": 0,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ClientConfigurationData.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ClientConfigurationData.java?ref=05ec310daaca60d16e20b10019ab732f12b10bfa",
                "patch": "@@ -74,6 +74,16 @@\n     private long defaultBackoffIntervalNanos = TimeUnit.MILLISECONDS.toNanos(100);\n     private long maxBackoffIntervalNanos = TimeUnit.SECONDS.toNanos(30);\n \n+    public boolean isUseTls() {\n+        if (useTls)\n+            return true;\n+        if (getServiceUrl() != null && (this.getServiceUrl().startsWith(\"pulsar+ssl\") || this.getServiceUrl().startsWith(\"https\"))) {\n+            this.useTls = true;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     public ClientConfigurationData clone() {\n         try {\n             return (ClientConfigurationData) super.clone();",
                "changes": 10,
                "blob_url": "https://github.com/apache/pulsar/blob/05ec310daaca60d16e20b10019ab732f12b10bfa/pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ClientConfigurationData.java"
            },
            {
                "additions": 1,
                "sha": "4995706d6643bcda33761e0e356c9836f1c955b7",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/05ec310daaca60d16e20b10019ab732f12b10bfa/pulsar-client/src/test/java/org/apache/pulsar/client/impl/BuildersTest.java",
                "deletions": 1,
                "filename": "pulsar-client/src/test/java/org/apache/pulsar/client/impl/BuildersTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/test/java/org/apache/pulsar/client/impl/BuildersTest.java?ref=05ec310daaca60d16e20b10019ab732f12b10bfa",
                "patch": "@@ -66,7 +66,7 @@ public void enableTlsTest() {\n         assertEquals(builder.conf.getServiceUrl(), \"pulsar://service:6650\");\n \n         builder = (ClientBuilderImpl)PulsarClient.builder().serviceUrl(\"pulsar+ssl://service:6650\").enableTls(false);\n-        assertEquals(builder.conf.isUseTls(), false);\n+        assertEquals(builder.conf.isUseTls(), true);\n         assertEquals(builder.conf.getServiceUrl(), \"pulsar+ssl://service:6650\");\n     }\n }",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/05ec310daaca60d16e20b10019ab732f12b10bfa/pulsar-client/src/test/java/org/apache/pulsar/client/impl/BuildersTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "[Issue 4441][client]Deduce ClientConfigurationData.isUseTls from protocol (#4451)\n\n* Deduce tls from protocol in service url\r\n\r\n* fixed failing test\r\n\r\n* fixed NPE\r\n\r\nCo-Authored-By: Matteo Merli <mmerli@apache.org>",
        "commit": "https://github.com/apache/pulsar/commit/05ec310daaca60d16e20b10019ab732f12b10bfa"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/db26946520d3fe2c66bc0bc7c87815a8ef3754f4",
        "bug_id": "pulsar_27",
        "file": [
            {
                "additions": 8,
                "sha": "ff41dc846db5905e73a0ab1c4173297069072031",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/90f6b9ed550347b1e3bfe07c67833987b27087e7/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java",
                "deletions": 6,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java?ref=90f6b9ed550347b1e3bfe07c67833987b27087e7",
                "patch": "@@ -142,12 +142,14 @@ public void received(Consumer<T> consumer, Message<T> message) {\n \n     @Override\n     public void close() throws Exception {\n-        inputConsumers.forEach(consumer -> {\n-            try {\n-                consumer.close();\n-            } catch (PulsarClientException e) {\n-            }\n-        });\n+        if (inputConsumers != null ) {\n+            inputConsumers.forEach(consumer -> {\n+                try {\n+                    consumer.close();\n+                } catch (PulsarClientException e) {\n+                }\n+            });\n+        }\n     }\n \n     @SuppressWarnings(\"unchecked\")",
                "changes": 14,
                "blob_url": "https://github.com/apache/pulsar/blob/90f6b9ed550347b1e3bfe07c67833987b27087e7/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix: NPE in pulsar source close (#3246)",
        "commit": "https://github.com/apache/pulsar/commit/90f6b9ed550347b1e3bfe07c67833987b27087e7"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/372575a9877bf50e8f55a9568ef6c07fcae86644",
        "bug_id": "pulsar_28",
        "file": [
            {
                "additions": 39,
                "sha": "2588741ba7a5c9eb484dcc6170c1f95ce12d5d02",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/12de91fb231c3e609137de60bbdbc29c5c2f2e13/pulsar-storm/src/main/java/org/apache/pulsar/storm/PulsarSpout.java",
                "deletions": 15,
                "filename": "pulsar-storm/src/main/java/org/apache/pulsar/storm/PulsarSpout.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-storm/src/main/java/org/apache/pulsar/storm/PulsarSpout.java?ref=12de91fb231c3e609137de60bbdbc29c5c2f2e13",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.pulsar.client.impl.conf.ClientConfigurationData;\n import org.apache.pulsar.client.impl.conf.ConsumerConfigurationData;\n import org.apache.storm.metric.api.IMetric;\n+import org.apache.storm.shade.org.eclipse.jetty.util.log.Log;\n import org.apache.storm.spout.SpoutOutputCollector;\n import org.apache.storm.task.TopologyContext;\n import org.apache.storm.topology.OutputFieldsDeclarer;\n@@ -124,6 +125,8 @@ public void ack(Object msgId) {\n             }\n             consumer.acknowledgeAsync(msg);\n             pendingMessageRetries.remove(msg.getMessageId());\n+            // we should also remove message from failedMessages but it will be eventually removed while emitting next\n+            // tuple\n             --pendingAcks;\n         }\n     }\n@@ -172,25 +175,12 @@ public void nextTuple() {\n      * emit.\n      */\n     public void emitNextAvailableTuple() {\n-        Message<byte[]> msg;\n-\n         // check if there are any failed messages to re-emit in the topology\n-        msg = failedMessages.peek();\n-        if (msg != null) {\n-            MessageRetries messageRetries = pendingMessageRetries.get(msg.getMessageId());\n-            if (Backoff.shouldBackoff(messageRetries.getTimeStamp(), TimeUnit.NANOSECONDS,\n-                    messageRetries.getNumRetries(), clientConf.getDefaultBackoffIntervalNanos(), \n-                    clientConf.getMaxBackoffIntervalNanos())) {\n-                Utils.sleep(TimeUnit.NANOSECONDS.toMillis(clientConf.getDefaultBackoffIntervalNanos()));\n-            } else {\n-                // remove the message from the queue and emit to the topology, only if it should not be backedoff\n-                LOG.info(\"[{}] Retrying failed message {}\", spoutId, msg.getMessageId());\n-                failedMessages.remove();\n-                mapToValueAndEmit(msg);\n-            }\n+        if(emitFailedMessage()) {\n             return;\n         }\n \n+        Message<byte[]> msg;\n         // receive from consumer if no failed messages\n         if (consumer != null) {\n             if (LOG.isDebugEnabled()) {\n@@ -215,6 +205,40 @@ public void emitNextAvailableTuple() {\n         }\n     }\n \n+    private boolean emitFailedMessage() {\n+        Message<byte[]> msg;\n+\n+        while ((msg = failedMessages.peek()) != null) {\n+            MessageRetries messageRetries = pendingMessageRetries.get(msg.getMessageId());\n+            if (messageRetries != null) {\n+                // emit the tuple if retry doesn't need backoff else sleep with backoff time and return without doing\n+                // anything\n+                if (Backoff.shouldBackoff(messageRetries.getTimeStamp(), TimeUnit.NANOSECONDS,\n+                        messageRetries.getNumRetries(), clientConf.getDefaultBackoffIntervalNanos(),\n+                        clientConf.getMaxBackoffIntervalNanos())) {\n+                    Utils.sleep(TimeUnit.NANOSECONDS.toMillis(clientConf.getDefaultBackoffIntervalNanos()));\n+                } else {\n+                    // remove the message from the queue and emit to the topology, only if it should not be backedoff\n+                    LOG.info(\"[{}] Retrying failed message {}\", spoutId, msg.getMessageId());\n+                    failedMessages.remove();\n+                    mapToValueAndEmit(msg);\n+                }\n+                return true;\n+            }\n+\n+            // messageRetries is null because messageRetries is already acked and removed from pendingMessageRetries\n+            // then remove it from failed message queue as well.\n+            if(LOG.isDebugEnabled()) {\n+                LOG.debug(\"[{}]-{} removing {} from failedMessage because it's already acked\",\n+                        pulsarSpoutConf.getTopic(), spoutId, msg.getMessageId());\n+            }\n+            failedMessages.remove();\n+            // try to find out next failed message\n+            continue;\n+        }\n+        return false;\n+    }\n+\n     @Override\n     @SuppressWarnings({ \"rawtypes\" })\n     public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {",
                "changes": 54,
                "blob_url": "https://github.com/apache/pulsar/blob/12de91fb231c3e609137de60bbdbc29c5c2f2e13/pulsar-storm/src/main/java/org/apache/pulsar/storm/PulsarSpout.java"
            },
            {
                "additions": 88,
                "sha": "588c5a039052a308c525c7d1840d8d978326fd24",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/12de91fb231c3e609137de60bbdbc29c5c2f2e13/pulsar-storm/src/test/java/org/apache/pulsar/storm/PulsarSpoutTest.java",
                "deletions": 0,
                "filename": "pulsar-storm/src/test/java/org/apache/pulsar/storm/PulsarSpoutTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-storm/src/test/java/org/apache/pulsar/storm/PulsarSpoutTest.java?ref=12de91fb231c3e609137de60bbdbc29c5c2f2e13",
                "patch": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.storm;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Mockito.atLeast;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+import java.lang.reflect.Field;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.apache.pulsar.client.api.ClientBuilder;\n+import org.apache.pulsar.client.api.Consumer;\n+import org.apache.pulsar.client.api.Message;\n+import org.apache.pulsar.client.api.Schema;\n+import org.apache.pulsar.client.api.SubscriptionType;\n+import org.apache.pulsar.client.impl.ClientBuilderImpl;\n+import org.apache.pulsar.client.impl.MessageImpl;\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+import org.apache.storm.tuple.Values;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.collect.Maps;\n+\n+public class PulsarSpoutTest {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PulsarSpoutTest.class);\n+    \n+    @Test\n+    public void testAckFailedMessage() throws Exception {\n+        \n+        PulsarSpoutConfiguration conf = new PulsarSpoutConfiguration();\n+        conf.setServiceUrl(\"http://localhost:8080\");\n+        conf.setSubscriptionName(\"sub1\");\n+        conf.setTopic(\"persistent://prop/ns1/topic1\");\n+        conf.setSubscriptionType(SubscriptionType.Exclusive);\n+        conf.setMessageToValuesMapper(new MessageToValuesMapper() {\n+            @Override\n+            public Values toValues(Message<byte[]> msg) {\n+                return null;\n+            }\n+\n+            @Override\n+            public void declareOutputFields(OutputFieldsDeclarer declarer) {\n+            }\n+            \n+        });\n+        \n+        ClientBuilder builder = spy(new ClientBuilderImpl());\n+        PulsarSpout spout = spy(new PulsarSpout(conf, builder));\n+        \n+        Message<byte[]> msg = new MessageImpl<>(conf.getTopic(), \"1:1\", Maps.newHashMap(), null, Schema.BYTES);\n+        Consumer<byte[]> consumer = mock(Consumer.class);\n+        CompletableFuture<Void> future = new CompletableFuture<>();\n+        future.complete(null);\n+        doReturn(future).when(consumer).acknowledgeAsync(msg.getMessageId());\n+        Field consField = PulsarSpout.class.getDeclaredField(\"consumer\");\n+        consField.setAccessible(true);\n+        consField.set(spout, consumer);\n+        \n+        spout.fail(msg);\n+        spout.ack(msg);\n+        spout.emitNextAvailableTuple();\n+        verify(consumer, atLeast(1)).receive(anyInt(), any());\n+    }\n+}",
                "changes": 88,
                "blob_url": "https://github.com/apache/pulsar/blob/12de91fb231c3e609137de60bbdbc29c5c2f2e13/pulsar-storm/src/test/java/org/apache/pulsar/storm/PulsarSpoutTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "[pulsar-storm] Fix NPE while emitting next tuple (#3991)\n\n### Motivation\r\n\r\n[PulsarSpout] removes messages from [pendingMessageRetries](https://github.com/apache/pulsar/blob/master/pulsar-storm/src/main/java/org/apache/pulsar/storm/PulsarSpout.java#L126) but it doesn't remove from the `failedMessages` queue because of that PulsarSpout throws NPE while [emitting next tuple](https://github.com/apache/pulsar/blob/master/pulsar-storm/src/main/java/org/apache/pulsar/storm/PulsarSpout.java#L181)\r\n\r\n````\r\nstack-trace with old pulsar-storm lib: 1.20\r\n2019-04-05 18:49:58.240 b.s.util CmsSpout_[1 1] [INFO] Async loop Stacktrace is: {} java.lang.NullPointerException\r\n    at org.apache.pulsar.storm.PulsarSpout.emitNextAvailableTuple(PulsarSpout.java:176)\r\n    at org.apache.pulsar.storm.PulsarSpout.nextTuple(PulsarSpout.java:160)\r\n    at backtype.storm.daemon.executor$fn__7365$fn__7380$fn__7411.invoke(executor.clj:577)\r\n    at backtype.storm.util$async_loop$fn__551.invoke(util.clj:491)\r\n    at clojure.lang.AFn.run(AFn.java:22)\r\n    at java.lang.Thread.run(Thread.java:748)\r\n```",
        "commit": "https://github.com/apache/pulsar/commit/12de91fb231c3e609137de60bbdbc29c5c2f2e13"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/2e30c086b2461531c62164d09ea148928a0e3ae6",
        "bug_id": "pulsar_29",
        "file": [
            {
                "additions": 5,
                "sha": "d4772cef1b38803606a481075c058bfa2fcd4e29",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ecf779210c31d1051f9cd2c823a1a7d078cdfd75/pulsar-client/src/main/java/org/apache/pulsar/client/impl/BatchMessageContainerImpl.java",
                "deletions": 11,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/BatchMessageContainerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/BatchMessageContainerImpl.java?ref=ecf779210c31d1051f9cd2c823a1a7d078cdfd75",
                "patch": "@@ -162,7 +162,6 @@ public void discard(Exception ex) {\n             log.warn(\"[{}] [{}] Got exception while completing the callback for msg {}:\", topicName, producerName,\n                     lowestSequenceId, t);\n         }\n-        ReferenceCountUtil.safeRelease(batchedMessageMetadataAndPayload);\n         clear();\n     }\n \n@@ -174,6 +173,11 @@ public boolean isMultiBatches() {\n     @Override\n     public OpSendMsg createOpSendMsg() throws IOException {\n         ByteBuf encryptedPayload = producer.encryptMessage(messageMetadata, getCompressedBatchMetadataAndPayload());\n+        if (encryptedPayload.readableBytes() > ClientCnx.getMaxMessageSize()) {\n+            discard(new PulsarClientException.InvalidMessageException(\n+                    \"Message size is bigger than \" + ClientCnx.getMaxMessageSize() + \" bytes\"));\n+            return null;\n+        }\n         messageMetadata.setNumMessagesInBatch(numMessagesInBatch);\n         messageMetadata.setHighestSequenceId(highestSequenceId);\n         ByteBufPair cmd = producer.sendMessage(producer.producerId, messageMetadata.getSequenceId(),\n@@ -182,16 +186,6 @@ public OpSendMsg createOpSendMsg() throws IOException {\n         OpSendMsg op = OpSendMsg.create(messages, cmd, messageMetadata.getSequenceId(),\n                 messageMetadata.getHighestSequenceId(), firstCallback);\n \n-        if (encryptedPayload.readableBytes() > ClientCnx.getMaxMessageSize()) {\n-            cmd.release();\n-            discard(new PulsarClientException.InvalidMessageException(\n-                    \"Message size is bigger than \" + ClientCnx.getMaxMessageSize() + \" bytes\"));\n-            if (op != null) {\n-                op.recycle();\n-            }\n-            return null;\n-        }\n-\n         op.setNumMessagesInBatch(numMessagesInBatch);\n         op.setBatchSizeByte(currentBatchSizeBytes);\n         lowestSequenceId = -1L;",
                "changes": 16,
                "blob_url": "https://github.com/apache/pulsar/blob/ecf779210c31d1051f9cd2c823a1a7d078cdfd75/pulsar-client/src/main/java/org/apache/pulsar/client/impl/BatchMessageContainerImpl.java"
            },
            {
                "additions": 6,
                "sha": "c9328c87e2736a88a0ac4cac591a6961c9f61958",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ecf779210c31d1051f9cd2c823a1a7d078cdfd75/pulsar-client/src/main/java/org/apache/pulsar/client/impl/BatchMessageKeyBasedContainer.java",
                "deletions": 10,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/BatchMessageKeyBasedContainer.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/BatchMessageKeyBasedContainer.java?ref=ecf779210c31d1051f9cd2c823a1a7d078cdfd75",
                "patch": "@@ -109,6 +109,12 @@ public boolean isMultiBatches() {\n \n     private ProducerImpl.OpSendMsg createOpSendMsg(KeyedBatch keyedBatch) throws IOException {\n         ByteBuf encryptedPayload = producer.encryptMessage(keyedBatch.messageMetadata, keyedBatch.getCompressedBatchMetadataAndPayload());\n+        if (encryptedPayload.readableBytes() > ClientCnx.getMaxMessageSize()) {\n+            keyedBatch.discard(new PulsarClientException.InvalidMessageException(\n+                    \"Message size is bigger than \" + ClientCnx.getMaxMessageSize() + \" bytes\"));\n+            return null;\n+        }\n+\n         final int numMessagesInBatch = keyedBatch.messages.size();\n         long currentBatchSizeBytes = 0;\n         for (MessageImpl<?> message : keyedBatch.messages) {\n@@ -120,15 +126,6 @@ public boolean isMultiBatches() {\n \n         ProducerImpl.OpSendMsg op = ProducerImpl.OpSendMsg.create(keyedBatch.messages, cmd, keyedBatch.sequenceId, keyedBatch.firstCallback);\n \n-        if (encryptedPayload.readableBytes() > ClientCnx.getMaxMessageSize()) {\n-            cmd.release();\n-            keyedBatch.discard(new PulsarClientException.InvalidMessageException(\n-                    \"Message size is bigger than \" + ClientCnx.getMaxMessageSize() + \" bytes\"));\n-            if (op != null) {\n-                op.recycle();\n-            }\n-            return null;\n-        }\n         op.setNumMessagesInBatch(numMessagesInBatch);\n         op.setBatchSizeByte(currentBatchSizeBytes);\n         return op;\n@@ -241,7 +238,6 @@ public void discard(Exception ex) {\n                 log.warn(\"[{}] [{}] Got exception while completing the callback for msg {}:\", topicName, producerName,\n                         sequenceId, t);\n             }\n-            ReferenceCountUtil.safeRelease(batchedMessageMetadataAndPayload);\n             clear();\n         }\n ",
                "changes": 16,
                "blob_url": "https://github.com/apache/pulsar/blob/ecf779210c31d1051f9cd2c823a1a7d078cdfd75/pulsar-client/src/main/java/org/apache/pulsar/client/impl/BatchMessageKeyBasedContainer.java"
            },
            {
                "additions": 3,
                "sha": "4bc95a2755722da3b247bbe8825f0dd135492c3d",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ecf779210c31d1051f9cd2c823a1a7d078cdfd75/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerImpl.java",
                "deletions": 0,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerImpl.java?ref=ecf779210c31d1051f9cd2c823a1a7d078cdfd75",
                "patch": "@@ -1442,6 +1442,9 @@ private void batchMessageAndSend() {\n     }\n \n     private void processOpSendMsg(OpSendMsg op) {\n+        if (op == null) {\n+            return;\n+        }\n         try {\n             if (op.msg != null && isBatchMessagingEnabled()) {\n                 batchMessageAndSend();",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/ecf779210c31d1051f9cd2c823a1a7d078cdfd75/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ProducerImpl.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix NPE when send a large message and don't release batchedMessageMetadataAndPayload when discard in batch message container. (#5748)\n\nFixes #5746 #5747\r\n\r\n### Motivation\r\n\r\nFix NPE and release an already released ByteBuf when publish an oversize message.\r\n\r\nHere is error log:\r\n```\r\nio.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1\r\n\tat io.netty.util.internal.ReferenceCountUpdater.toLiveRealRefCnt(ReferenceCountUpdater.java:74) ~[netty-common-4.1.43.Final.jar:4.1.43.Final]\r\n\tat io.netty.util.internal.ReferenceCountUpdater.release(ReferenceCountUpdater.java:138) ~[netty-common-4.1.43.Final.jar:4.1.43.Final]\r\n\tat io.netty.buffer.AbstractReferenceCountedByteBuf.release(AbstractReferenceCountedByteBuf.java:100) ~[netty-buffer-4.1.43.Final.jar:4.1.43.Final]\r\n\tat io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:88) ~[netty-common-4.1.43.Final.jar:4.1.43.Final]\r\n\tat io.netty.util.ReferenceCountUtil.safeRelease(ReferenceCountUtil.java:113) [netty-common-4.1.43.Final.jar:4.1.43.Final]\r\n\tat org.apache.pulsar.client.impl.BatchMessageKeyBasedContainer$KeyedBatch.discard(BatchMessageKeyBasedContainer.java:244) [classes/:?]\r\n\tat org.apache.pulsar.client.impl.BatchMessageKeyBasedContainer.createOpSendMsg(BatchMessageKeyBasedContainer.java:125) [classes/:?]\r\n\tat org.apache.pulsar.client.impl.BatchMessageKeyBasedContainer.createOpSendMsgs(BatchMessageKeyBasedContainer.java:145) [classes/:?]\r\n\tat org.apache.pulsar.client.impl.ProducerImpl.batchMessageAndSend(ProducerImpl.java:1426) [classes/:?]\r\n\tat org.apache.pulsar.client.impl.ProducerImpl.triggerFlush(ProducerImpl.java:1411) [classes/:?]\r\n\tat org.apache.pulsar.client.impl.ProducerBase.send(ProducerBase.java:112) [classes/:?]\r\n\tat org.apache.pulsar.client.impl.TypedMessageBuilderImpl.send(TypedMessageBuilderImpl.java:89) [classes/:?]\r\n\tat org.apache.pulsar.client.impl.ProducerBase.send(ProducerBase.java:63) [classes/:?]\r\n\tat org.apache.pulsar.broker.service.BatchMessageTest.testSendOverSizeMessage(BatchMessageTest.java:875) [test-classes/:?]\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]\r\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124) [testng-6.14.3.jar:?]\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:583) [testng-6.14.3.jar:?]\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719) [testng-6.14.3.jar:?]\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989) [testng-6.14.3.jar:?]\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125) [testng-6.14.3.jar:?]\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109) [testng-6.14.3.jar:?]\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:648) [testng-6.14.3.jar:?]\r\n\tat org.testng.TestRunner.run(TestRunner.java:505) [testng-6.14.3.jar:?]\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:455) [testng-6.14.3.jar:?]\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450) [testng-6.14.3.jar:?]\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:415) [testng-6.14.3.jar:?]\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:364) [testng-6.14.3.jar:?]\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52) [testng-6.14.3.jar:?]\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84) [testng-6.14.3.jar:?]\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1208) [testng-6.14.3.jar:?]\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1137) [testng-6.14.3.jar:?]\r\n\tat org.testng.TestNG.runSuites(TestNG.java:1049) [testng-6.14.3.jar:?]\r\n\tat org.testng.TestNG.run(TestNG.java:1017) [testng-6.14.3.jar:?]\r\n\tat org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:73) [testng-plugin.jar:?]\r\n\tat org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123) [testng-plugin.jar:?]\r\n\r\n\r\n\r\n16:19:13.850 [main:org.apache.pulsar.client.impl.ProducerImpl@1439] WARN  org.apache.pulsar.client.impl.ProducerImpl - [persistent://prop/ns-abc/testSendOverSizeMessage-623833fc-d9f7-4b28-aead-27955928fae9] [test-0-0] error while create opSendMsg by batch message container\r\njava.lang.NullPointerException: null\r\n\tat org.apache.pulsar.client.impl.ProducerImpl.releaseSemaphoreForSendOp(ProducerImpl.java:858) ~[classes/:?]\r\n\tat org.apache.pulsar.client.impl.ProducerImpl.processOpSendMsg(ProducerImpl.java:1477) ~[classes/:?]\r\n\tat org.apache.pulsar.client.impl.ProducerImpl.batchMessageAndSend(ProducerImpl.java:1432) [classes/:?]\r\n\tat org.apache.pulsar.client.impl.ProducerImpl.triggerFlush(ProducerImpl.java:1411) [classes/:?]\r\n\tat org.apache.pulsar.client.impl.ProducerBase.send(ProducerBase.java:112) [classes/:?]\r\n\tat org.apache.pulsar.client.impl.TypedMessageBuilderImpl.send(TypedMessageBuilderImpl.java:89) [classes/:?]\r\n\tat org.apache.pulsar.client.impl.ProducerBase.send(ProducerBase.java:63) [classes/:?]\r\n\tat org.apache.pulsar.broker.service.BatchMessageTest.testSendOverSizeMessage(BatchMessageTest.java:875) [test-classes/:?]\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]\r\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124) [testng-6.14.3.jar:?]\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:583) [testng-6.14.3.jar:?]\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719) [testng-6.14.3.jar:?]\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989) [testng-6.14.3.jar:?]\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125) [testng-6.14.3.jar:?]\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109) [testng-6.14.3.jar:?]\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:648) [testng-6.14.3.jar:?]\r\n\tat org.testng.TestRunner.run(TestRunner.java:505) [testng-6.14.3.jar:?]\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:455) [testng-6.14.3.jar:?]\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450) [testng-6.14.3.jar:?]\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:415) [testng-6.14.3.jar:?]\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:364) [testng-6.14.3.jar:?]\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52) [testng-6.14.3.jar:?]\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84) [testng-6.14.3.jar:?]\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1208) [testng-6.14.3.jar:?]\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1137) [testng-6.14.3.jar:?]\r\n\tat org.testng.TestNG.runSuites(TestNG.java:1049) [testng-6.14.3.jar:?]\r\n\tat org.testng.TestNG.run(TestNG.java:1017) [testng-6.14.3.jar:?]\r\n\tat org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:73) [testng-plugin.jar:?]\r\n\tat org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123) [testng-plugin.jar:?]\r\n```\r\n\r\n### Modifications\r\n\r\nAdd check for processOpSendMsg, if the op is null, just return.\r\nDon't release the batchedMessageMetadataAndPayload since it is already released in getCompressedBatchMetadataAndPayload() method.",
        "commit": "https://github.com/apache/pulsar/commit/ecf779210c31d1051f9cd2c823a1a7d078cdfd75"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/5dc90b413cbd9d97614dfe7cbca9c32e6e4457fb",
        "bug_id": "pulsar_30",
        "file": [
            {
                "additions": 18,
                "sha": "818fdb3fe90ad89b2e3d29e232692abd2dc05ac3",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/f24a0b191f178369b253642d89f28e5115008142/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/FunctionStatsManager.java",
                "deletions": 16,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/FunctionStatsManager.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/FunctionStatsManager.java?ref=f24a0b191f178369b253642d89f28e5115008142",
                "patch": "@@ -320,68 +320,70 @@ public void run() {\n \n     public void addUserException(Exception ex) {\n         long ts = System.currentTimeMillis();\n-        InstanceCommunication.FunctionStatus.ExceptionInformation info =\n-                    InstanceCommunication.FunctionStatus.ExceptionInformation.newBuilder()\n-                    .setExceptionString(ex.getMessage()).setMsSinceEpoch(ts).build();\n+        InstanceCommunication.FunctionStatus.ExceptionInformation info = getExceptionInfo(ex, ts);\n         latestUserExceptions.add(info);\n \n         // report exception throw prometheus\n         if (userExceptionRateLimiter.tryAcquire()) {\n             String[] exceptionMetricsLabels = Arrays.copyOf(metricsLabels, metricsLabels.length + 2);\n-            exceptionMetricsLabels[exceptionMetricsLabels.length - 2] = ex.getMessage();\n+            exceptionMetricsLabels[exceptionMetricsLabels.length - 2] = ex.getMessage() != null ? ex.getMessage() : \"\";\n             exceptionMetricsLabels[exceptionMetricsLabels.length - 1] = String.valueOf(ts);\n             userExceptions.labels(exceptionMetricsLabels).set(1.0);\n         }\n     }\n \n     public void addSystemException(Throwable ex) {\n         long ts = System.currentTimeMillis();\n-        InstanceCommunication.FunctionStatus.ExceptionInformation info =\n-                InstanceCommunication.FunctionStatus.ExceptionInformation.newBuilder()\n-                        .setExceptionString(ex.getMessage()).setMsSinceEpoch(ts).build();\n+        InstanceCommunication.FunctionStatus.ExceptionInformation info = getExceptionInfo(ex, ts);\n         latestSystemExceptions.add(info);\n \n         // report exception throw prometheus\n         if (sysExceptionRateLimiter.tryAcquire()) {\n             String[] exceptionMetricsLabels = Arrays.copyOf(metricsLabels, metricsLabels.length + 2);\n-            exceptionMetricsLabels[exceptionMetricsLabels.length - 2] = ex.getMessage();\n+            exceptionMetricsLabels[exceptionMetricsLabels.length - 2] = ex.getMessage() != null ? ex.getMessage() : \"\";\n             exceptionMetricsLabels[exceptionMetricsLabels.length - 1] = String.valueOf(ts);\n             sysExceptions.labels(exceptionMetricsLabels).set(1.0);\n         }\n     }\n \n     public void addSourceException(Throwable ex) {\n         long ts = System.currentTimeMillis();\n-        InstanceCommunication.FunctionStatus.ExceptionInformation info =\n-                InstanceCommunication.FunctionStatus.ExceptionInformation.newBuilder()\n-                        .setExceptionString(ex.getMessage()).setMsSinceEpoch(ts).build();\n+        InstanceCommunication.FunctionStatus.ExceptionInformation info = getExceptionInfo(ex, ts);\n         latestSourceExceptions.add(info);\n \n         // report exception throw prometheus\n         if (sourceExceptionRateLimiter.tryAcquire()) {\n             String[] exceptionMetricsLabels = Arrays.copyOf(metricsLabels, metricsLabels.length + 2);\n-            exceptionMetricsLabels[exceptionMetricsLabels.length - 2] = ex.getMessage();\n+            exceptionMetricsLabels[exceptionMetricsLabels.length - 2] = ex.getMessage() != null ? ex.getMessage() : \"\";\n             exceptionMetricsLabels[exceptionMetricsLabels.length - 1] = String.valueOf(ts);\n             sourceExceptions.labels(exceptionMetricsLabels).set(1.0);\n         }\n     }\n \n     public void addSinkException(Throwable ex) {\n         long ts = System.currentTimeMillis();\n-        InstanceCommunication.FunctionStatus.ExceptionInformation info =\n-                InstanceCommunication.FunctionStatus.ExceptionInformation.newBuilder()\n-                        .setExceptionString(ex.getMessage()).setMsSinceEpoch(ts).build();\n+        InstanceCommunication.FunctionStatus.ExceptionInformation info = getExceptionInfo(ex, ts);\n         latestSinkExceptions.add(info);\n \n         // report exception throw prometheus\n         if (sinkExceptionRateLimiter.tryAcquire()) {\n             String[] exceptionMetricsLabels = Arrays.copyOf(metricsLabels, metricsLabels.length + 2);\n-            exceptionMetricsLabels[exceptionMetricsLabels.length - 2] = ex.getMessage();\n+            exceptionMetricsLabels[exceptionMetricsLabels.length - 2] = ex.getMessage() != null ? ex.getMessage() : \"\";\n             exceptionMetricsLabels[exceptionMetricsLabels.length - 1] = String.valueOf(ts);\n             sinkExceptions.labels(exceptionMetricsLabels).set(1.0);\n         }\n     }\n \n+    private InstanceCommunication.FunctionStatus.ExceptionInformation getExceptionInfo(Throwable th, long ts) {\n+        InstanceCommunication.FunctionStatus.ExceptionInformation.Builder exceptionInfoBuilder =\n+                InstanceCommunication.FunctionStatus.ExceptionInformation.newBuilder().setMsSinceEpoch(ts);\n+        String msg = th.getMessage();\n+        if (msg != null) {\n+            exceptionInfoBuilder.setExceptionString(msg);\n+        }\n+        return exceptionInfoBuilder.build();\n+    }\n+\n     public void incrTotalReceived() {\n         _statTotalRecordsRecieved.inc();\n         _statTotalRecordsRecieved1min.inc();",
                "changes": 34,
                "blob_url": "https://github.com/apache/pulsar/blob/f24a0b191f178369b253642d89f28e5115008142/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/FunctionStatsManager.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix: Empty exception message in java functions can cause an NPE (#3245)\n\n* Fix: Empty exception message in java functions can cause an NPE\r\n\r\n* add additional exception message error null checking",
        "commit": "https://github.com/apache/pulsar/commit/f24a0b191f178369b253642d89f28e5115008142"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/915411b3c90153b9ef1949a9f49da88eae62a08d",
        "bug_id": "pulsar_31",
        "file": [
            {
                "additions": 12,
                "sha": "6083c6471a6066116d2fc3336d95892f4b680f15",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/9ecfb7da4a2b5bbf9e3d1dbd10753149f3c0826f/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java",
                "deletions": 10,
                "filename": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java?ref=9ecfb7da4a2b5bbf9e3d1dbd10753149f3c0826f",
                "patch": "@@ -2609,16 +2609,18 @@ public void activateCursor(ManagedCursor cursor) {\n     }\n \n     public void deactivateCursor(ManagedCursor cursor) {\n-        if (activeCursors.get(cursor.getName()) != null) {\n-            activeCursors.removeCursor(cursor.getName());\n-            if (activeCursors.isEmpty()) {\n-                // cleanup cache if there is no active subscription\n-                entryCache.clear();\n-            } else {\n-                // if removed subscription was the slowest subscription : update cursor and let it clear cache: till\n-                // new slowest-cursor's read-position\n-                discardEntriesFromCache((ManagedCursorImpl) activeCursors.getSlowestReader(),\n-                        getPreviousPosition((PositionImpl) activeCursors.getSlowestReader().getReadPosition()));\n+        synchronized (activeCursors) {\n+            if (activeCursors.get(cursor.getName()) != null) {\n+                activeCursors.removeCursor(cursor.getName());\n+                if (activeCursors.isEmpty()) {\n+                    // cleanup cache if there is no active subscription\n+                    entryCache.clear();\n+                } else {\n+                    // if removed subscription was the slowest subscription : update cursor and let it clear cache:\n+                    // till new slowest-cursor's read-position\n+                    discardEntriesFromCache((ManagedCursorImpl) activeCursors.getSlowestReader(),\n+                            getPreviousPosition((PositionImpl) activeCursors.getSlowestReader().getReadPosition()));\n+                }\n             }\n         }\n     }",
                "changes": 22,
                "blob_url": "https://github.com/apache/pulsar/blob/9ecfb7da4a2b5bbf9e3d1dbd10753149f3c0826f/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix NPE caused by the race condition (#2973)",
        "commit": "https://github.com/apache/pulsar/commit/9ecfb7da4a2b5bbf9e3d1dbd10753149f3c0826f"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/b6c509a561402b7e2acf64829e2b964a9197b5ea",
        "bug_id": "pulsar_32",
        "file": [
            {
                "additions": 21,
                "sha": "c7af055c658e28ba19346893d6ce73a84210fc2e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/e36ae702ea051913a723a7206e0bad7ae7e1949e/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
                "deletions": 20,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java?ref=e36ae702ea051913a723a7206e0bad7ae7e1949e",
                "patch": "@@ -1309,24 +1309,25 @@ protected OffloadProcessStatus internalOffloadStatus(boolean authoritative) {\n      */\n     private Topic getTopicReference(TopicName topicName) {\n         return pulsar().getBrokerService().getTopicIfExists(topicName.toString()).join()\n-                .orElseThrow(() -> {\n-                    if (topicName.toString().contains(TopicName.PARTITIONED_TOPIC_SUFFIX)) {\n-                        TopicName partitionTopicName = TopicName.get(topicName.getPartitionedTopicName());\n-                        PartitionedTopicMetadata partitionedTopicMetadata = getPartitionedTopicMetadata(partitionTopicName, false);\n-                        if (partitionedTopicMetadata == null || partitionedTopicMetadata.partitions == 0) {\n-                        \tfinal String errSrc;\n-                        \tif (partitionedTopicMetadata != null) {\n-                        \t\terrSrc = \" has zero partitions\";\n-                        \t} else {\n-                        \t\terrSrc = \" has no metadata\";\n-                        \t}\n-                            return new RestException(Status.NOT_FOUND, \"Partitioned Topic not found: \" + topicName.toString() + errSrc);\n-                        } else if (!internalGetList().contains(topicName.toString())) {\n-                            return new RestException(Status.NOT_FOUND, \"Topic partitions were not yet created\");\n-                        }\n-                    }\n-                    return new RestException(Status.NOT_FOUND, \"Topic not found\");\n-                });\n+                .orElseThrow(() -> topicNotFoundReason(topicName));\n+    }\n+\n+    private RestException topicNotFoundReason(TopicName topicName) {\n+        if (!topicName.isPartitioned()) {\n+            return new RestException(Status.NOT_FOUND, \"Topic not found\");\n+        }\n+\n+        PartitionedTopicMetadata partitionedTopicMetadata = getPartitionedTopicMetadata(\n+                TopicName.get(topicName.getPartitionedTopicName()), false);\n+        if (partitionedTopicMetadata == null || partitionedTopicMetadata.partitions == 0) {\n+            final String topicErrorType = partitionedTopicMetadata == null ?\n+                    \"has no metadata\" : \"has zero partitions\";\n+            return new RestException(Status.NOT_FOUND, String.format(\n+                    \"Partitioned Topic not found: %s %s\", topicName.toString(), topicErrorType));\n+        } else if (!internalGetList().contains(topicName.toString())) {\n+            return new RestException(Status.NOT_FOUND, \"Topic partitions were not yet created\");\n+        }\n+        return new RestException(Status.NOT_FOUND, \"Partitioned Topic not found\");\n     }\n \n     private Topic getOrCreateTopic(TopicName topicName) {\n@@ -1463,8 +1464,8 @@ protected void unloadTopic(TopicName topicName, boolean authoritative) {\n             log.error(\"[{}] topic {} not found\", clientAppId(), topicName);\n             throw new RestException(Status.NOT_FOUND, \"Topic does not exist\");\n         } catch (Exception e) {\n-            log.error(\"[{}] Failed to unload topic {}, {}\", clientAppId(), topicName, e.getCause().getMessage(), e);\n-            throw new RestException(e.getCause());\n+            log.error(\"[{}] Failed to unload topic {}, {}\", clientAppId(), topicName, e.getMessage(), e);\n+            throw new RestException(e);\n         }\n     }\n ",
                "changes": 41,
                "blob_url": "https://github.com/apache/pulsar/blob/e36ae702ea051913a723a7206e0bad7ae7e1949e/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java"
            },
            {
                "additions": 18,
                "sha": "79007867d3d261d981c06f65e233b7f5b39c64bd",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/e36ae702ea051913a723a7206e0bad7ae7e1949e/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java?ref=e36ae702ea051913a723a7206e0bad7ae7e1949e",
                "patch": "@@ -35,6 +35,7 @@\n import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n+import javax.ws.rs.core.Response;\n import javax.ws.rs.core.UriInfo;\n import java.lang.reflect.Field;\n import java.util.List;\n@@ -140,4 +141,21 @@ public void testCreateNonPartitionedTopic() {\n                 testTenant, testNamespace, topicName, true);\n         Assert.assertEquals(pMetadata.partitions, 0);\n     }\n+\n+    @Test\n+    public void testUnloadTopic() {\n+        final String topicName = \"standard-topic-to-be-unload\";\n+        persistentTopics.createNonPartitionedTopic(testTenant, testNamespace, topicName, true);\n+        persistentTopics.unloadTopic(testTenant, testNamespace, topicName, true);\n+    }\n+\n+    @Test(expectedExceptions = RestException.class)\n+    public void testUnloadTopicShallThrowNotFoundWhenTopicNotExist() {\n+        try {\n+            persistentTopics.unloadTopic(testTenant, testNamespace,\"non-existent-topic\", true);\n+        } catch (RestException e) {\n+            Assert.assertEquals(e.getResponse().getStatus(), Response.Status.NOT_FOUND.getStatusCode());\n+            throw e;\n+        }\n+    }\n }",
                "changes": 18,
                "blob_url": "https://github.com/apache/pulsar/blob/e36ae702ea051913a723a7206e0bad7ae7e1949e/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "Bugfix an unload non-existent topic (#3946)\n\n*Motivation*\r\n\r\nFixes #3935\r\n\r\nWhen an unload operation is being made to an non-existent topic a null pointer\r\nexception is thrown due to bad handling exception on general catch clause.\r\n\r\n*Modifications*\r\n\r\n  - Refactor getTopicReference() for a simplified version.\r\n  - Simplify exception thrown when partitioned topics was not found.\r\n  - Fix NPE when unload operation is being made with a non-existent topic.\r\n  - Add test in order to assert unload on normal situation.\r\n  - Add test to assert npe from unload with non existent topic.",
        "commit": "https://github.com/apache/pulsar/commit/e36ae702ea051913a723a7206e0bad7ae7e1949e"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/90d86c0fe31fd614c9aa9037f900305661ece879",
        "bug_id": "pulsar_33",
        "file": [
            {
                "additions": 9,
                "sha": "da04534d942bafd55f2d99372025e56145e65842",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/271c6ee56a007506020ecf317c88df95e4511714/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java",
                "deletions": 9,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java?ref=271c6ee56a007506020ecf317c88df95e4511714",
                "patch": "@@ -160,15 +160,6 @@\n         this.readCompacted = conf.isReadCompacted();\n         this.subscriptionInitialPosition = conf.getSubscriptionInitialPosition();\n \n-        TopicName topicName = TopicName.get(topic);\n-        if (topicName.isPersistent()) {\n-            this.acknowledgmentsGroupingTracker =\n-                new PersistentAcknowledgmentsGroupingTracker(this, conf, client.eventLoopGroup());\n-        } else {\n-            this.acknowledgmentsGroupingTracker =\n-                NonPersistentAcknowledgmentGroupingTracker.of();\n-        }\n-\n         if (client.getConfiguration().getStatsIntervalSeconds() > 0) {\n             stats = new ConsumerStatsRecorderImpl(client, conf, this);\n         } else {\n@@ -203,6 +194,15 @@\n             new Backoff(100, TimeUnit.MILLISECONDS, 60, TimeUnit.SECONDS, 0, TimeUnit.MILLISECONDS),\n             this);\n \n+        TopicName topicName = TopicName.get(topic);\n+        if (topicName.isPersistent()) {\n+            this.acknowledgmentsGroupingTracker =\n+                new PersistentAcknowledgmentsGroupingTracker(this, conf, client.eventLoopGroup());\n+        } else {\n+            this.acknowledgmentsGroupingTracker =\n+                NonPersistentAcknowledgmentGroupingTracker.of();\n+        }\n+\n         grabCnx();\n     }\n ",
                "changes": 18,
                "blob_url": "https://github.com/apache/pulsar/blob/271c6ee56a007506020ecf317c88df95e4511714/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fixed initialization order of acknowledgmentsGroupingTracker in ConsumerImpl (#2399)\n\n### Motivation\r\n\r\nWith delayed acks enabled (the default), there is a potential race condition that lead to a NPE:\r\n\r\n```\r\njava.lang.NullPointerException\r\n    at org.apache.pulsar.client.impl.ConsumerImpl.getClientCnx(ConsumerImpl.java:1446)\r\n    at org.apache.pulsar.client.impl.PersistentAcknowledgmentsGroupingTracker.flush(PersistentAcknowledgmentsGroupingTracker.java:154)\r\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n    ...\r\n```\r\n\r\nThe reason is that the delayed ack commit task gets scheduled (eg: in 100ms) and might be executed before the the main thread has finished initializing the `ConsumerImpl` instance.\r\n\r\n### Modifications\r\n\r\nReordered the initialization in `ConsumerImpl` constructor to make sure `connectionHandler` is already set when we create the `PersistentAcknowledgmentsGroupingTracker` instance.",
        "commit": "https://github.com/apache/pulsar/commit/271c6ee56a007506020ecf317c88df95e4511714"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/7c19bd220a82daeb5ff3f76b0387ed434fab66b2",
        "bug_id": "pulsar_34",
        "file": [
            {
                "additions": 2,
                "sha": "b0361f9cd0db847ae071327f3b6d6faf05de2550",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/915411b3c90153b9ef1949a9f49da88eae62a08d/pulsar-io/kafka-connect-adaptor/src/main/resources/debezium-mysql-source-config.yaml",
                "deletions": 0,
                "filename": "pulsar-io/kafka-connect-adaptor/src/main/resources/debezium-mysql-source-config.yaml",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-io/kafka-connect-adaptor/src/main/resources/debezium-mysql-source-config.yaml?ref=915411b3c90153b9ef1949a9f49da88eae62a08d",
                "patch": "@@ -20,6 +20,8 @@\n tenant: \"test\"\n namespace: \"test-namespace\"\n name: \"debezium-kafka-source\"\n+topicName: \"kafka-connect-topic\"\n+archive: \"connectors/pulsar-io-kafka-connect-adaptor-2.3.0-SNAPSHOT.nar\"\n \n ##autoAck: true\n parallelism: 1",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/915411b3c90153b9ef1949a9f49da88eae62a08d/pulsar-io/kafka-connect-adaptor/src/main/resources/debezium-mysql-source-config.yaml"
            }
        ],
        "repo": "pulsar",
        "message": "fix NPE for debezium-mysql-source-config.yaml (#2975)\n\nAdd missing configs",
        "commit": "https://github.com/apache/pulsar/commit/915411b3c90153b9ef1949a9f49da88eae62a08d"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/e32b45ae8468809d33cd84823cc2e0f06f57abe7",
        "bug_id": "pulsar_35",
        "file": [
            {
                "additions": 29,
                "sha": "d89018ea4741caf2ccce5629040cdec4ac017f7b",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/TenantsBase.java",
                "deletions": 2,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/TenantsBase.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/TenantsBase.java?ref=4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c",
                "patch": "@@ -19,6 +19,8 @@\n package org.apache.pulsar.broker.admin.impl;\n \n import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n@@ -84,10 +86,12 @@ public TenantInfo getTenantAdmin(@PathParam(\"tenant\") String tenant) {\n     @ApiOperation(value = \"Create a new tenant.\", notes = \"This operation requires Pulsar super-user privileges.\")\n     @ApiResponses(value = { @ApiResponse(code = 403, message = \"The requester doesn't have admin permissions\"),\n             @ApiResponse(code = 409, message = \"Tenant already exists\"),\n-            @ApiResponse(code = 412, message = \"Tenant name is not valid\") })\n+            @ApiResponse(code = 412, message = \"Tenant name is not valid\"),\n+            @ApiResponse(code = 412, message = \"Clusters do not exist\") })\n     public void createTenant(@PathParam(\"tenant\") String tenant, TenantInfo config) {\n         validateSuperUserAccess();\n         validatePoliciesReadOnlyAccess();\n+        validateClusters(config);\n \n         try {\n             NamedEntity.checkName(tenant);\n@@ -113,10 +117,12 @@ public void createTenant(@PathParam(\"tenant\") String tenant, TenantInfo config)\n     @ApiOperation(value = \"Update the admins for a tenant.\", notes = \"This operation requires Pulsar super-user privileges.\")\n     @ApiResponses(value = { @ApiResponse(code = 403, message = \"The requester doesn't have admin permissions\"),\n             @ApiResponse(code = 404, message = \"Tenant does not exist\"),\n-            @ApiResponse(code = 409, message = \"Tenant already exists\") })\n+            @ApiResponse(code = 409, message = \"Tenant already exists\"),\n+            @ApiResponse(code = 412, message = \"Clusters do not exist\") })\n     public void updateTenant(@PathParam(\"tenant\") String tenant, TenantInfo newTenantAdmin) {\n         validateSuperUserAccess();\n         validatePoliciesReadOnlyAccess();\n+        validateClusters(newTenantAdmin);\n \n         Stat nodeStat = new Stat();\n         try {\n@@ -202,5 +208,26 @@ public void deleteTenant(@PathParam(\"tenant\") String tenant) {\n         }\n     }\n \n+    private void validateClusters(TenantInfo info) {\n+        List<String> nonexistentClusters;\n+        try {\n+            if (info == null) {\n+                info = new TenantInfo();\n+            }\n+            Set<String> availableClusters = clustersListCache().get();\n+            Set<String> allowedClusters = info.getAllowedClusters();\n+            nonexistentClusters = allowedClusters.stream()\n+                .filter(cluster -> !availableClusters.contains(cluster))\n+                .collect(Collectors.toList());\n+        } catch (Exception e) {\n+            log.error(\"[{}] Failed to get available clusters\", clientAppId(), e);\n+            throw new RestException(e);\n+        }\n+        if (nonexistentClusters.size() > 0) {\n+            log.warn(\"[{}] Failed to validate due to clusters {} do not exist\", clientAppId(), nonexistentClusters);\n+            throw new RestException(Status.PRECONDITION_FAILED, \"Clusters do not exist\");\n+        }\n+    }\n+\n     private static final Logger log = LoggerFactory.getLogger(TenantsBase.class);\n }",
                "changes": 31,
                "blob_url": "https://github.com/apache/pulsar/blob/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/TenantsBase.java"
            },
            {
                "additions": 33,
                "sha": "5c39eec38390e91487d1ab4d1fcd96548a4bf904",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTest2.java",
                "deletions": 2,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTest2.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTest2.java?ref=4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c",
                "patch": "@@ -38,6 +38,7 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.Response.Status;\n \n import org.apache.bookkeeper.mledger.impl.ManagedCursorImpl;\n import org.apache.bookkeeper.mledger.impl.ManagedLedgerImpl;\n@@ -817,14 +818,44 @@ public void testTenantNameWithInvalidCharacters() throws Exception {\n             admin.tenants().createTenant(\"prop xyz\", tenantInfo);\n             fail(\"Should have failed\");\n         } catch (PulsarAdminException e) {\n-            // Expected\n+            assertEquals(e.getStatusCode(), Status.PRECONDITION_FAILED.getStatusCode());\n         }\n \n         try {\n             admin.tenants().createTenant(\"prop&xyz\", tenantInfo);\n             fail(\"Should have failed\");\n         } catch (PulsarAdminException e) {\n-            // Expected\n+            assertEquals(e.getStatusCode(), Status.PRECONDITION_FAILED.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void testTenantWithNonexistentClusters() throws Exception {\n+        // Check non-existing cluster\n+        assertTrue(!admin.clusters().getClusters().contains(\"cluster-non-existing\"));\n+\n+        Set<String> allowedClusters = Sets.newHashSet(\"cluster-non-existing\");\n+        TenantInfo tenantInfo = new TenantInfo(Sets.newHashSet(\"role1\", \"role2\"), allowedClusters);\n+\n+        // If we try to create tenant with nonexistent clusters, it should fail immediately\n+        try {\n+            admin.tenants().createTenant(\"test-tenant\", tenantInfo);\n+            fail(\"Should have failed\");\n+        } catch (PulsarAdminException e) {\n+            assertEquals(e.getStatusCode(), Status.PRECONDITION_FAILED.getStatusCode());\n+        }\n+\n+        assertTrue(!admin.tenants().getTenants().contains(\"test-tenant\"));\n+\n+        // Check existing tenant\n+        assertTrue(admin.tenants().getTenants().contains(\"prop-xyz\"));\n+\n+        // If we try to update existing tenant with nonexistent clusters, it should fail immediately\n+        try {\n+            admin.tenants().updateTenant(\"prop-xyz\", tenantInfo);\n+            fail(\"Should have failed\");\n+        } catch (PulsarAdminException e) {\n+            assertEquals(e.getStatusCode(), Status.PRECONDITION_FAILED.getStatusCode());\n         }\n     }\n ",
                "changes": 35,
                "blob_url": "https://github.com/apache/pulsar/blob/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTest2.java"
            },
            {
                "additions": 5,
                "sha": "e6623e5db62245099f42fccdc13eb78d08839653",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTlsAuthTest.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTlsAuthTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTlsAuthTest.java?ref=4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.pulsar.client.api.PulsarClient;\n import org.apache.pulsar.client.api.Schema;\n import org.apache.pulsar.common.policies.data.AuthAction;\n+import org.apache.pulsar.common.policies.data.ClusterData;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n import org.apache.pulsar.common.util.SecurityUtility;\n import org.glassfish.jersey.client.ClientConfig;\n@@ -80,6 +81,10 @@ public void setup() throws Exception {\n         conf.setBrokerClientTlsEnabled(true);\n \n         super.internalSetup();\n+\n+        PulsarAdmin admin = buildAdminClient(\"admin\");\n+        admin.clusters().createCluster(\"test\", new ClusterData(brokerUrl.toString()));\n+        admin.close();\n     }\n \n     @AfterMethod",
                "changes": 5,
                "blob_url": "https://github.com/apache/pulsar/blob/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTlsAuthTest.java"
            },
            {
                "additions": 6,
                "sha": "a9cea1f157231b5d76829e7754ff02c0b9b3c4cc",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BrokerAdminClientTlsAuthTest.java",
                "deletions": 27,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BrokerAdminClientTlsAuthTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BrokerAdminClientTlsAuthTest.java?ref=4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c",
                "patch": "@@ -19,48 +19,26 @@\n package org.apache.pulsar.broker.admin;\n \n import com.google.common.collect.ImmutableSet;\n-\n-import java.util.List;\n-\n-import static org.testng.Assert.fail;\n-\n-import java.lang.reflect.Method;\n-import java.security.cert.X509Certificate;\n-import javax.net.ssl.SSLContext;\n-import javax.ws.rs.NotAuthorizedException;\n-import javax.ws.rs.client.Client;\n-import javax.ws.rs.client.ClientBuilder;\n-import javax.ws.rs.client.WebTarget;\n-import javax.ws.rs.core.GenericType;\n-import javax.ws.rs.core.MediaType;\n-\n import lombok.extern.slf4j.Slf4j;\n-\n import org.apache.bookkeeper.test.PortManager;\n-import org.apache.http.conn.ssl.NoopHostnameVerifier;\n import org.apache.pulsar.broker.PulsarService;\n import org.apache.pulsar.broker.ServiceConfiguration;\n import org.apache.pulsar.broker.auth.MockedPulsarServiceBaseTest;\n import org.apache.pulsar.client.admin.PulsarAdmin;\n import org.apache.pulsar.client.admin.PulsarAdminException;\n-import org.apache.pulsar.client.admin.internal.JacksonConfigurator;\n import org.apache.pulsar.common.policies.data.AuthAction;\n-import org.apache.pulsar.common.policies.data.AuthPolicies;\n import org.apache.pulsar.common.policies.data.BundlesData;\n+import org.apache.pulsar.common.policies.data.ClusterData;\n import org.apache.pulsar.common.policies.data.Policies;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n-import org.apache.pulsar.common.util.SecurityUtility;\n-\n-import org.glassfish.jersey.client.ClientConfig;\n-import org.glassfish.jersey.client.ClientProperties;\n-import org.glassfish.jersey.jackson.JacksonFeature;\n-import org.glassfish.jersey.media.multipart.MultiPartFeature;\n-\n-import org.testng.Assert;\n import org.testng.annotations.AfterMethod;\n import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n+import java.lang.reflect.Method;\n+\n+import static org.testng.Assert.fail;\n+\n @Slf4j\n public class BrokerAdminClientTlsAuthTest extends MockedPulsarServiceBaseTest {\n     protected String methodName;\n@@ -143,6 +121,7 @@ public void testPersistentList() throws Exception {\n \n         /***** Broker 2 Started *****/\n         try (PulsarAdmin admin = buildAdminClient(\"superproxy\")) {\n+            admin.clusters().createCluster(\"test\", new ClusterData(brokerUrl.toString()));\n             admin.tenants().createTenant(\"tenant\",\n                                          new TenantInfo(ImmutableSet.of(\"admin\"),\n                                                         ImmutableSet.of(\"test\")));",
                "changes": 33,
                "blob_url": "https://github.com/apache/pulsar/blob/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BrokerAdminClientTlsAuthTest.java"
            },
            {
                "additions": 1,
                "sha": "e75078f65d806912138d7016feebead5d28c0e88",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java?ref=4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c",
                "patch": "@@ -79,6 +79,7 @@ protected void setup() throws Exception {\n         doNothing().when(persistentTopics).validateAdminAccessForTenant(this.testTenant);\n         doReturn(mock(AuthenticationDataHttps.class)).when(persistentTopics).clientAuthData();\n         admin.clusters().createCluster(\"use\", new ClusterData(\"http://broker-use.com:\" + BROKER_WEBSERVICE_PORT));\n+        admin.clusters().createCluster(\"test\", new ClusterData(\"http://broker-use.com:\" + BROKER_WEBSERVICE_PORT));\n         admin.tenants().createTenant(this.testTenant,\n                 new TenantInfo(Sets.newHashSet(\"role1\", \"role2\"), Sets.newHashSet(testLocalCluster, \"test\")));\n         admin.namespaces().createNamespace(testTenant + \"/\" + testNamespace, Sets.newHashSet(testLocalCluster, \"test\"));",
                "changes": 1,
                "blob_url": "https://github.com/apache/pulsar/blob/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java"
            },
            {
                "additions": 6,
                "sha": "af1281e9bc3f11bf36d383af902085f18be57694",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/client/api/AuthenticatedProducerConsumerTest.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/AuthenticatedProducerConsumerTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/client/api/AuthenticatedProducerConsumerTest.java?ref=4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c",
                "patch": "@@ -169,6 +169,8 @@ public void testTlsSyncProducerAndConsumer(int batchMessageDelayMs) throws Excep\n         authTls.configure(authParams);\n         internalSetup(authTls);\n \n+        admin.clusters().createCluster(\"test\", new ClusterData(brokerUrl.toString()));\n+\n         admin.tenants().createTenant(\"my-property\",\n                 new TenantInfo(Sets.newHashSet(\"appid1\", \"appid2\"), Sets.newHashSet(\"test\")));\n         admin.namespaces().createNamespace(\"my-property/my-ns\", Sets.newHashSet(\"test\"));\n@@ -185,6 +187,8 @@ public void testBasicCryptSyncProducerAndConsumer(int batchMessageDelayMs) throw\n         authPassword.configure(\"{\\\"userId\\\":\\\"superUser\\\",\\\"password\\\":\\\"supepass\\\"}\");\n         internalSetup(authPassword);\n \n+        admin.clusters().createCluster(\"test\", new ClusterData(brokerUrl.toString()));\n+\n         admin.tenants().createTenant(\"my-property\",\n                 new TenantInfo(Sets.newHashSet(), Sets.newHashSet(\"test\")));\n         admin.namespaces().createNamespace(\"my-property/my-ns\", Sets.newHashSet(\"test\"));\n@@ -201,6 +205,8 @@ public void testBasicArp1SyncProducerAndConsumer(int batchMessageDelayMs) throws\n         authPassword.configure(\"{\\\"userId\\\":\\\"superUser2\\\",\\\"password\\\":\\\"superpassword\\\"}\");\n         internalSetup(authPassword);\n \n+        admin.clusters().createCluster(\"test\", new ClusterData(brokerUrl.toString()));\n+\n         admin.tenants().createTenant(\"my-property\",\n                 new TenantInfo(Sets.newHashSet(), Sets.newHashSet(\"test\")));\n         admin.namespaces().createNamespace(\"my-property/my-ns\", Sets.newHashSet(\"test\"));",
                "changes": 6,
                "blob_url": "https://github.com/apache/pulsar/blob/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/client/api/AuthenticatedProducerConsumerTest.java"
            },
            {
                "additions": 3,
                "sha": "27f0c615ae6bfdc60e0cc8130d619bdad4024d41",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/client/api/AuthenticationTlsHostnameVerificationTest.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/AuthenticationTlsHostnameVerificationTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/client/api/AuthenticationTlsHostnameVerificationTest.java?ref=4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c",
                "patch": "@@ -34,6 +34,7 @@\n import org.apache.pulsar.broker.authentication.AuthenticationProviderTls;\n import org.apache.pulsar.client.admin.PulsarAdmin;\n import org.apache.pulsar.client.impl.auth.AuthenticationTls;\n+import org.apache.pulsar.common.policies.data.ClusterData;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -115,6 +116,8 @@ protected void setupClient() throws Exception {\n                 .authentication(authTls).enableTls(true).enableTlsHostnameVerification(hostnameVerificationEnabled)\n                 .build();\n \n+        admin.clusters().createCluster(\"test\", new ClusterData(brokerUrl.toString()));\n+\n         admin.tenants().createTenant(\"my-property\",\n                 new TenantInfo(Sets.newHashSet(\"appid1\", \"appid2\"), Sets.newHashSet(\"test\")));\n         admin.namespaces().createNamespace(\"my-property/my-ns\", Sets.newHashSet(\"test\"));",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/client/api/AuthenticationTlsHostnameVerificationTest.java"
            },
            {
                "additions": 7,
                "sha": "91cec494b895ccad593fb6537428bdfc45280403",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/client/api/AuthorizationProducerConsumerTest.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/AuthorizationProducerConsumerTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/client/api/AuthorizationProducerConsumerTest.java?ref=4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c",
                "patch": "@@ -45,6 +45,7 @@\n import org.apache.pulsar.common.naming.NamespaceName;\n import org.apache.pulsar.common.naming.TopicName;\n import org.apache.pulsar.common.policies.data.AuthAction;\n+import org.apache.pulsar.common.policies.data.ClusterData;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -117,6 +118,8 @@ public void testProducerAndConsumerAuthorization() throws Exception {\n         PulsarClient pulsarClientInvalidRole = PulsarClient.builder().serviceUrl(lookupUrl)\n                 .authentication(authenticationInvalidRole).build();\n \n+        admin.clusters().createCluster(\"test\", new ClusterData(brokerUrl.toString()));\n+\n         admin.tenants().createTenant(\"my-property\",\n                 new TenantInfo(Sets.newHashSet(\"appid1\", \"appid2\"), Sets.newHashSet(\"test\")));\n         admin.namespaces().createNamespace(\"my-property/my-ns\", Sets.newHashSet(\"test\"));\n@@ -180,6 +183,8 @@ public void testSubscriberPermission() throws Exception {\n \n         Authentication authentication = new ClientAuthentication(subscriptionRole);\n \n+        superAdmin.clusters().createCluster(\"test\", new ClusterData(brokerUrl.toString()));\n+\n         superAdmin.tenants().createTenant(\"my-property\",\n                 new TenantInfo(Sets.newHashSet(tenantRole), Sets.newHashSet(\"test\")));\n         superAdmin.namespaces().createNamespace(namespace, Sets.newHashSet(\"test\"));\n@@ -261,6 +266,8 @@ public void testSubscriptionPrefixAuthorization() throws Exception {\n \n         pulsarClient = PulsarClient.builder().serviceUrl(lookupUrl).authentication(authentication).build();\n \n+        admin.clusters().createCluster(\"test\", new ClusterData(brokerUrl.toString()));\n+\n         admin.tenants().createTenant(\"prop-prefix\",\n                 new TenantInfo(Sets.newHashSet(\"appid1\", \"appid2\"), Sets.newHashSet(\"test\")));\n         admin.namespaces().createNamespace(\"prop-prefix/ns\", Sets.newHashSet(\"test\"));",
                "changes": 7,
                "blob_url": "https://github.com/apache/pulsar/blob/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/client/api/AuthorizationProducerConsumerTest.java"
            },
            {
                "additions": 3,
                "sha": "433544eb91ac2b09568b8eca0d4cb90293ee13e7",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TopicsConsumerImplTest.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TopicsConsumerImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TopicsConsumerImplTest.java?ref=4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c",
                "patch": "@@ -50,6 +50,7 @@\n import org.apache.pulsar.client.api.ProducerConsumerBase;\n import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.SubscriptionType;\n+import org.apache.pulsar.common.policies.data.ClusterData;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -780,6 +781,8 @@ public void testDefaultBacklogTTL() throws Exception {\n         final String topicName = \"persistent://\" + namespace + \"/expiry\";\n         final String subName = \"expiredSub\";\n \n+        admin.clusters().createCluster(\"use\", new ClusterData(brokerUrl.toString()));\n+\n         admin.tenants().createTenant(\"prop\", new TenantInfo(null, Sets.newHashSet(\"use\")));\n         admin.namespaces().createNamespace(namespace);\n ",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TopicsConsumerImplTest.java"
            },
            {
                "additions": 3,
                "sha": "7faf848389b48f2f182e4d99c77af42c137f7a02",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/AuthedAdminProxyHandlerTest.java",
                "deletions": 0,
                "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/AuthedAdminProxyHandlerTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/AuthedAdminProxyHandlerTest.java?ref=4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.pulsar.client.admin.PulsarAdminException;\n import org.apache.pulsar.client.impl.auth.AuthenticationTls;\n import org.apache.pulsar.common.configuration.PulsarConfigurationLoader;\n+import org.apache.pulsar.common.policies.data.ClusterData;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n import org.apache.pulsar.policies.data.loadbalancer.LoadManagerReport;\n import org.apache.pulsar.policies.data.loadbalancer.LoadReport;\n@@ -151,6 +152,8 @@ public void testAuthenticatedProxyAsNonAdmin() throws Exception {\n                 // expected\n             }\n \n+            brokerAdmin.clusters().createCluster(configClusterName, new ClusterData(brokerUrl.toString()));\n+\n             brokerAdmin.tenants().createTenant(\"tenant1\",\n                                                new TenantInfo(ImmutableSet.of(\"user1\"),\n                                                               ImmutableSet.of(configClusterName)));",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/AuthedAdminProxyHandlerTest.java"
            },
            {
                "additions": 3,
                "sha": "d1df9461091c937a08836079e339c76f1e95dc96",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyWithAuthorizationNegTest.java",
                "deletions": 0,
                "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyWithAuthorizationNegTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyWithAuthorizationNegTest.java?ref=4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.pulsar.client.impl.auth.AuthenticationTls;\n import org.apache.pulsar.common.configuration.PulsarConfigurationLoader;\n import org.apache.pulsar.common.policies.data.AuthAction;\n+import org.apache.pulsar.common.policies.data.ClusterData;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n import org.mockito.Mockito;\n import org.slf4j.Logger;\n@@ -164,6 +165,8 @@ public void testProxyAuthorization() throws Exception {\n \n         String namespaceName = \"my-property/proxy-authorization-neg/my-ns\";\n \n+        admin.clusters().createCluster(\"proxy-authorization-neg\", new ClusterData(brokerUrl.toString()));\n+\n         admin.tenants().createTenant(\"my-property\",\n                 new TenantInfo(Sets.newHashSet(\"appid1\", \"appid2\"), Sets.newHashSet(\"proxy-authorization-neg\")));\n         admin.namespaces().createNamespace(namespaceName);",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyWithAuthorizationNegTest.java"
            },
            {
                "additions": 9,
                "sha": "dd1da64e8e2d9b41f581aadf2e416e8a433cefad",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyWithAuthorizationTest.java",
                "deletions": 0,
                "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyWithAuthorizationTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyWithAuthorizationTest.java?ref=4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c",
                "patch": "@@ -42,6 +42,7 @@\n import org.apache.pulsar.client.impl.auth.AuthenticationTls;\n import org.apache.pulsar.common.configuration.PulsarConfigurationLoader;\n import org.apache.pulsar.common.policies.data.AuthAction;\n+import org.apache.pulsar.common.policies.data.ClusterData;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n import org.mockito.Mockito;\n import org.slf4j.Logger;\n@@ -229,6 +230,8 @@ public void testProxyAuthorization() throws Exception {\n \n         String namespaceName = \"my-property/proxy-authorization/my-ns\";\n \n+        admin.clusters().createCluster(\"proxy-authorization\", new ClusterData(brokerUrl.toString()));\n+\n         admin.tenants().createTenant(\"my-property\",\n                 new TenantInfo(Sets.newHashSet(\"appid1\", \"appid2\"), Sets.newHashSet(\"proxy-authorization\")));\n         admin.namespaces().createNamespace(namespaceName);\n@@ -281,6 +284,8 @@ public void testTlsHostVerificationProxyToClient(boolean hostnameVerificationEna\n \n         String namespaceName = \"my-property/proxy-authorization/my-ns\";\n \n+        admin.clusters().createCluster(\"proxy-authorization\", new ClusterData(brokerUrl.toString()));\n+\n         admin.tenants().createTenant(\"my-property\",\n                 new TenantInfo(Sets.newHashSet(\"appid1\", \"appid2\"), Sets.newHashSet(\"proxy-authorization\")));\n         admin.namespaces().createNamespace(namespaceName);\n@@ -331,6 +336,8 @@ public void testTlsHostVerificationProxyToBroker(boolean hostnameVerificationEna\n \n         String namespaceName = \"my-property/proxy-authorization/my-ns\";\n \n+        admin.clusters().createCluster(\"proxy-authorization\", new ClusterData(brokerUrl.toString()));\n+\n         admin.tenants().createTenant(\"my-property\",\n                 new TenantInfo(Sets.newHashSet(\"appid1\", \"appid2\"), Sets.newHashSet(\"proxy-authorization\")));\n         admin.namespaces().createNamespace(namespaceName);\n@@ -366,6 +373,8 @@ public void tlsCiphersAndProtocols(Set<String> tlsCiphers, Set<String> tlsProtoc\n         String namespaceName = \"my-property/proxy-authorization/my-ns\";\n         createAdminClient();\n \n+        admin.clusters().createCluster(\"proxy-authorization\", new ClusterData(brokerUrl.toString()));\n+\n         admin.tenants().createTenant(\"my-property\",\n                 new TenantInfo(Sets.newHashSet(\"appid1\", \"appid2\"), Sets.newHashSet(\"proxy-authorization\")));\n         admin.namespaces().createNamespace(namespaceName);",
                "changes": 9,
                "blob_url": "https://github.com/apache/pulsar/blob/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyWithAuthorizationTest.java"
            },
            {
                "additions": 3,
                "sha": "78d0f0e52b33043c0921cbb4323a57f27139c12f",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyWithoutServiceDiscoveryTest.java",
                "deletions": 0,
                "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyWithoutServiceDiscoveryTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyWithoutServiceDiscoveryTest.java?ref=4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c",
                "patch": "@@ -38,6 +38,7 @@\n import org.apache.pulsar.client.api.Schema;\n import org.apache.pulsar.client.impl.auth.AuthenticationTls;\n import org.apache.pulsar.common.configuration.PulsarConfigurationLoader;\n+import org.apache.pulsar.common.policies.data.ClusterData;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n import org.mockito.Mockito;\n import org.slf4j.Logger;\n@@ -158,6 +159,8 @@ public void testDiscoveryService() throws Exception {\n         // create a client which connects to proxy over tls and pass authData\n         PulsarClient proxyClient = createPulsarClient(authTls, proxyServiceUrl);\n \n+        admin.clusters().createCluster(\"without-service-discovery\", new ClusterData(brokerUrl.toString()));\n+\n         admin.tenants().createTenant(\"my-property\", new TenantInfo(Sets.newHashSet(\"appid1\", \"appid2\"),\n                 Sets.newHashSet(\"without-service-discovery\")));\n         admin.namespaces().createNamespace(\"my-property/without-service-discovery/my-ns\");",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyWithoutServiceDiscoveryTest.java"
            },
            {
                "additions": 3,
                "sha": "0f4c4dd78916993204af5353c1b9cfcdfc359092",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/SuperUserAuthedAdminProxyHandlerTest.java",
                "deletions": 0,
                "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/SuperUserAuthedAdminProxyHandlerTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/SuperUserAuthedAdminProxyHandlerTest.java?ref=4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.pulsar.client.admin.PulsarAdminException;\n import org.apache.pulsar.client.impl.auth.AuthenticationTls;\n import org.apache.pulsar.common.configuration.PulsarConfigurationLoader;\n+import org.apache.pulsar.common.policies.data.ClusterData;\n import org.apache.pulsar.policies.data.loadbalancer.LoadManagerReport;\n import org.apache.pulsar.policies.data.loadbalancer.LoadReport;\n import org.eclipse.jetty.servlet.ServletHolder;\n@@ -133,6 +134,7 @@ PulsarAdmin getAdminClient(String user) throws Exception {\n     @Test\n     public void testAuthenticatedProxyAsAdmin() throws Exception {\n         try (PulsarAdmin adminAdmin = getAdminClient(\"admin\")) {\n+            adminAdmin.clusters().createCluster(configClusterName, new ClusterData(brokerUrl.toString()));\n             adminAdmin.tenants().createTenant(\"tenant1\",\n                                               new TenantInfo(ImmutableSet.of(\"randoUser\"),\n                                                              ImmutableSet.of(configClusterName)));\n@@ -150,6 +152,7 @@ public void testAuthenticatedProxyAsNonAdmin() throws Exception {\n             } catch (PulsarAdminException.NotAuthorizedException e) {\n                 // expected\n             }\n+            adminAdmin.clusters().createCluster(configClusterName, new ClusterData(brokerUrl.toString()));\n             adminAdmin.tenants().createTenant(\"tenant1\",\n                                               new TenantInfo(ImmutableSet.of(\"unknownUser\"),\n                                                              ImmutableSet.of(configClusterName)));",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/SuperUserAuthedAdminProxyHandlerTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "[Issue 3475][pulsar-client] Add cluster checking before operating tenants with it (#3476)\n\n* Add cluster checking before operating tenants with it.\r\n\r\n* Check on server side and add a unit test for this part of changes\r\n\r\n* Fix some unit tests to pass this change\r\n\r\n* Fix some unit tests to pass this change\r\n\r\n* Fix NPE when TenantInfo is null\r\n\r\n* Fix a unit test to pass this change",
        "commit": "https://github.com/apache/pulsar/commit/4eaff7a97a6c62dcf55f06067a75ea3fffaf7d2c"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/270132c55eaa6170edcb3448efe6472d5b184ac8",
        "bug_id": "pulsar_36",
        "file": [
            {
                "additions": 3,
                "sha": "d9a1ccf600177548d53e5e80751c062e15c43f36",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/a8509341cc8373e849a52bffdb140184371509a3/pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/NamespaceService.java",
                "deletions": 3,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/NamespaceService.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/NamespaceService.java?ref=a8509341cc8373e849a52bffdb140184371509a3",
                "patch": "@@ -593,7 +593,7 @@ void splitAndOwnBundleOnceAndRetry(NamespaceBundle bundle,\n                                        boolean unload,\n                                        AtomicInteger counter,\n                                        CompletableFuture<Void> unloadFuture) {\n-        CompletableFuture<NamespaceBundles> updateFuture = new CompletableFuture<>();\n+        CompletableFuture<List<NamespaceBundle>> updateFuture = new CompletableFuture<>();\n \n         final Pair<NamespaceBundles, List<NamespaceBundle>> splittedBundles = bundleFactory.splitBundles(bundle,\n             2 /* by default split into 2 */);\n@@ -622,7 +622,7 @@ void splitAndOwnBundleOnceAndRetry(NamespaceBundle bundle,\n                             // namespace bundle\n                             bundleFactory.invalidateBundleCache(bundle.getNamespaceObject());\n \n-                            updateFuture.complete(splittedBundles.getLeft());\n+                            updateFuture.complete(splittedBundles.getRight());\n                         } else if (rc == Code.BADVERSION.intValue()) {\n                             KeeperException keeperException = KeeperException.create(KeeperException.Code.get(rc));\n                             String msg = format(\"failed to update namespace policies [%s], NamespaceBundle: %s \" +\n@@ -680,7 +680,7 @@ void splitAndOwnBundleOnceAndRetry(NamespaceBundle bundle,\n \n                 if (unload) {\n                     // unload new split bundles\n-                    r.getBundles().forEach(splitBundle -> {\n+                    r.forEach(splitBundle -> {\n                         try {\n                             unloadNamespaceBundle(splitBundle);\n                         } catch (Exception e) {",
                "changes": 6,
                "blob_url": "https://github.com/apache/pulsar/blob/a8509341cc8373e849a52bffdb140184371509a3/pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/NamespaceService.java"
            },
            {
                "additions": 42,
                "sha": "2c51e16fb63b4286e69a74c0c7ab09193cf1984f",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/a8509341cc8373e849a52bffdb140184371509a3/pulsar-broker/src/test/java/org/apache/pulsar/broker/namespace/NamespaceServiceTest.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/broker/namespace/NamespaceServiceTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/broker/namespace/NamespaceServiceTest.java?ref=a8509341cc8373e849a52bffdb140184371509a3",
                "patch": "@@ -429,6 +429,48 @@ public void testCreateNamespaceWithDefaultNumberOfBundles() throws Exception {\n \n     }\n \n+    @Test\n+    public void testRemoveOwnershipAndSplitBundle() throws Exception {\n+        OwnershipCache ownershipCache = spy(pulsar.getNamespaceService().getOwnershipCache());\n+        doNothing().when(ownershipCache).disableOwnership(any(NamespaceBundle.class));\n+\n+        Field ownership = NamespaceService.class.getDeclaredField(\"ownershipCache\");\n+        ownership.setAccessible(true);\n+        ownership.set(pulsar.getNamespaceService(), ownershipCache);\n+\n+        NamespaceService namespaceService = pulsar.getNamespaceService();\n+        NamespaceName nsname = NamespaceName.get(\"pulsar/global/ns1\");\n+        TopicName topicName = TopicName.get(\"persistent://pulsar/global/ns1/topic-1\");\n+        NamespaceBundles bundles = namespaceService.getNamespaceBundleFactory().getBundles(nsname);\n+        NamespaceBundle originalBundle = bundles.findBundle(topicName);\n+\n+        CompletableFuture<Void> result1 = namespaceService.splitAndOwnBundle(originalBundle, false);\n+        try {\n+            result1.get();\n+        } catch (Exception e) {\n+            fail(\"split bundle faild\", e);\n+        }\n+\n+        NamespaceBundles updatedNsBundles = namespaceService.getNamespaceBundleFactory().getBundles(nsname);\n+        assertNotNull(updatedNsBundles);\n+        NamespaceBundle splittedBundle = updatedNsBundles.findBundle(topicName);\n+\n+        updatedNsBundles.getBundles().stream().filter(bundle -> !bundle.equals(splittedBundle)).forEach(bundle -> {\n+            try {\n+                ownershipCache.removeOwnership(bundle).get();\n+            } catch (Exception e) {\n+                fail(\"faild to remove ownership\", e);\n+            }\n+        });\n+\n+        CompletableFuture<Void> result2 = namespaceService.splitAndOwnBundle(splittedBundle, true);\n+        try {\n+            result2.get();\n+        } catch (Exception e) {\n+            // make sure: NPE does not occur\n+            fail(\"split bundle faild\", e);\n+        }\n+    }\n \n     @SuppressWarnings(\"unchecked\")\n     private Pair<NamespaceBundles, List<NamespaceBundle>> splitBundles(NamespaceBundleFactory utilityFactory,",
                "changes": 42,
                "blob_url": "https://github.com/apache/pulsar/blob/a8509341cc8373e849a52bffdb140184371509a3/pulsar-broker/src/test/java/org/apache/pulsar/broker/namespace/NamespaceServiceTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix NPE when splitting and unloading bundle (#2348)",
        "commit": "https://github.com/apache/pulsar/commit/a8509341cc8373e849a52bffdb140184371509a3"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/05dc8c88aba193d64002ff8cc229c01790fcef72",
        "bug_id": "pulsar_37",
        "file": [
            {
                "additions": 11,
                "sha": "b54b0c74a2a9af55b4f9640d3152eedb8033f0c0",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/8997375ef6a0b6c6286478b495c0ca785ae41710/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/SchemaRegistryServiceImpl.java",
                "deletions": 4,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/SchemaRegistryServiceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/SchemaRegistryServiceImpl.java?ref=8997375ef6a0b6c6286478b495c0ca785ae41710",
                "patch": "@@ -85,8 +85,12 @@\n     @NotNull\n     public CompletableFuture<SchemaVersion> putSchemaIfAbsent(String schemaId, SchemaData schema,\n                                                               SchemaCompatibilityStrategy strategy) {\n-        return getSchema(schemaId).thenApply(\n-                (existingSchema) -> existingSchema == null || isCompatible(existingSchema, schema, strategy))\n+        return getSchema(schemaId)\n+            .thenApply(\n+                (existingSchema) ->\n+                    existingSchema == null\n+                        || existingSchema.schema.isDeleted()\n+                        || isCompatible(existingSchema, schema, strategy))\n             .thenCompose(isCompatible -> {\n                     if (isCompatible) {\n                         byte[] context = hashFunction.hashBytes(schema.getData()).asBytes();\n@@ -151,8 +155,11 @@ private boolean isCompatible(SchemaAndMetadata existingSchema, SchemaData newSch\n \n     private CompletableFuture<Boolean> checkCompatibilityWithLatest(String schemaId, SchemaData schema,\n                                                                     SchemaCompatibilityStrategy strategy) {\n-        return getSchema(schemaId).thenApply(\n-                (existingSchema) -> existingSchema != null && isCompatible(existingSchema, schema, strategy));\n+        return getSchema(schemaId)\n+            .thenApply(\n+                (existingSchema) ->\n+                    !(existingSchema == null || existingSchema.schema.isDeleted())\n+                        && isCompatible(existingSchema, schema, strategy));\n     }\n \n     interface Functions {",
                "changes": 15,
                "blob_url": "https://github.com/apache/pulsar/blob/8997375ef6a0b6c6286478b495c0ca785ae41710/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/SchemaRegistryServiceImpl.java"
            },
            {
                "additions": 110,
                "sha": "fab2542a04b8d8c32f0c0ddada100569d6baaa8c",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/8997375ef6a0b6c6286478b495c0ca785ae41710/tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/SchemaTest.java",
                "deletions": 0,
                "filename": "tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/SchemaTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/SchemaTest.java?ref=8997375ef6a0b6c6286478b495c0ca785ae41710",
                "patch": "@@ -0,0 +1,110 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.tests.integration.schema;\n+\n+import static org.apache.pulsar.common.naming.TopicName.PUBLIC_TENANT;\n+\n+import com.google.common.collect.Sets;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.client.admin.PulsarAdmin;\n+import org.apache.pulsar.client.api.Producer;\n+import org.apache.pulsar.client.api.PulsarClient;\n+import org.apache.pulsar.client.api.Schema;\n+import org.apache.pulsar.common.naming.TopicDomain;\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.tests.integration.schema.Schemas.Person;\n+import org.apache.pulsar.tests.integration.schema.Schemas.Student;\n+import org.apache.pulsar.tests.integration.suites.PulsarTestSuite;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test Pulsar Schema.\n+ */\n+@Slf4j\n+public class SchemaTest extends PulsarTestSuite {\n+\n+    private PulsarClient client;\n+    private PulsarAdmin admin;\n+\n+    @BeforeMethod\n+    public void setup() throws Exception {\n+        this.client = PulsarClient.builder()\n+            .serviceUrl(pulsarCluster.getPlainTextServiceUrl())\n+            .build();\n+        this.admin = PulsarAdmin.builder()\n+            .serviceHttpUrl(pulsarCluster.getHttpServiceUrl())\n+            .build();\n+    }\n+\n+    @Test\n+    public void testCreateSchemaAfterDeletion() throws Exception {\n+        final String tenant = PUBLIC_TENANT;\n+        final String namespace = \"test-namespace-\" + randomName(16);\n+        final String topic = \"test-create-schema-after-deletion\";\n+        final String fqtn = TopicName.get(\n+             TopicDomain.persistent.value(),\n+             tenant,\n+             namespace,\n+             topic\n+         ).toString();\n+\n+        admin.namespaces().createNamespace(\n+            tenant + \"/\" + namespace,\n+            Sets.newHashSet(pulsarCluster.getClusterName())\n+        );\n+\n+        // Create a topic with `Person`\n+        try (Producer<Person> producer = client.newProducer(Schema.AVRO(Person.class))\n+             .topic(fqtn)\n+             .create()\n+        ) {\n+            Person person = new Person();\n+            person.setName(\"Tom Hanks\");\n+            person.setAge(60);\n+\n+            producer.send(person);\n+\n+            log.info(\"Successfully published person : {}\", person);\n+        }\n+\n+        log.info(\"Deleting schema of topic {}\", fqtn);\n+        // delete the schema\n+        admin.schemas().deleteSchema(fqtn);\n+        log.info(\"Successfully deleted schema of topic {}\", fqtn);\n+\n+        // after deleting the topic, try to create a topic with a different schema\n+        try (Producer<Student> producer = client.newProducer(Schema.AVRO(Student.class))\n+             .topic(fqtn)\n+             .create()\n+        ) {\n+            Student student = new Student();\n+            student.setName(\"Tom Jerry\");\n+            student.setAge(30);\n+            student.setGpa(6);\n+            student.setGpa(10);\n+\n+            producer.send(student);\n+\n+            log.info(\"Successfully published student : {}\", student);\n+        }\n+    }\n+\n+\n+}",
                "changes": 110,
                "blob_url": "https://github.com/apache/pulsar/blob/8997375ef6a0b6c6286478b495c0ca785ae41710/tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/SchemaTest.java"
            },
            {
                "additions": 79,
                "sha": "ebe798dc21743c1032aa265736654c518069ec2c",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/8997375ef6a0b6c6286478b495c0ca785ae41710/tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/Schemas.java",
                "deletions": 0,
                "filename": "tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/Schemas.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/Schemas.java?ref=8997375ef6a0b6c6286478b495c0ca785ae41710",
                "patch": "@@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/**\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.pulsar.tests.integration.schema;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+/**\n+ * Keep a list of schemas for testing.\n+ */\n+public final class Schemas {\n+\n+    /**\n+     * A Person Struct.\n+     */\n+    @Data\n+    @Getter\n+    @Setter\n+    @ToString\n+    @EqualsAndHashCode\n+    public static class Person {\n+\n+        private String name;\n+        private int age;\n+\n+    }\n+\n+    /**\n+     * A Student Struct.\n+     */\n+    @Data\n+    @Getter\n+    @Setter\n+    @ToString\n+    @EqualsAndHashCode\n+    public static class Student {\n+\n+        private String name;\n+        private int age;\n+        private int gpa;\n+        private int grade;\n+\n+    }\n+\n+    private Schemas() {}\n+\n+}",
                "changes": 79,
                "blob_url": "https://github.com/apache/pulsar/blob/8997375ef6a0b6c6286478b495c0ca785ae41710/tests/integration/src/test/java/org/apache/pulsar/tests/integration/schema/Schemas.java"
            }
        ],
        "repo": "pulsar",
        "message": "Issue #3211: Fix NPE when creating schema after deleting a schema (#3836)\n\nFixes #3211\r\nFixes #2786 \r\n\r\n*Motivation*\r\n\r\nWhen a schema is deleted, the schema is not removed directly.\r\nYou can still fetch the latest schema but its state is marked as `deleted`.\r\n\r\nSo when we apply schema compatibility check, we should ignore deleted schema.\r\n\r\n*Modifications*\r\n\r\nIgnore deleted schema when doing schema compatibility check",
        "commit": "https://github.com/apache/pulsar/commit/8997375ef6a0b6c6286478b495c0ca785ae41710"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/b2d6a80f9f92f24a0048b7f9c7f925b728771540",
        "bug_id": "pulsar_38",
        "file": [
            {
                "additions": 18,
                "sha": "28f5e99ec18b64da7a06546ef7a3260c8a8ebbb4",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/7e3203d686e8dd81a019c5cb7441501ada556792/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/SchedulerManager.java",
                "deletions": 3,
                "filename": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/SchedulerManager.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/SchedulerManager.java?ref=7e3203d686e8dd81a019c5cb7441501ada556792",
                "patch": "@@ -31,8 +31,10 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n+import lombok.Getter;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.pulsar.client.admin.PulsarAdmin;\n@@ -139,7 +141,7 @@ public SchedulerManager(WorkerConfig workerConfig, PulsarClient pulsarClient, Pu\n                         invokeScheduler();\n                     } catch (Exception e) {\n                         log.warn(\"Failed to invoke scheduler\", e);\n-                        schedule();\n+                        throw e;\n                     }\n                 }\n             }\n@@ -167,6 +169,7 @@ public void invokeScheduler() {\n         Map<String, Function.Instance> allInstances = computeAllInstances(allFunctions, functionRuntimeManager.getRuntimeFactory().externallyManaged());\n         Map<String, Map<String, Assignment>> workerIdToAssignments = this.functionRuntimeManager\n                 .getCurrentAssignments();\n+\n         //delete assignments of functions and instances that don't exist anymore\n         Iterator<Map.Entry<String, Map<String, Assignment>>> it = workerIdToAssignments.entrySet().iterator();\n         while (it.hasNext()) {\n@@ -199,8 +202,20 @@ public void invokeScheduler() {\n         }\n \n         List<Assignment> currentAssignments = workerIdToAssignments\n-                .entrySet().stream()\n-                .flatMap(stringMapEntry -> stringMapEntry.getValue().values().stream()).collect(Collectors.toList());\n+                .entrySet()\n+                .stream()\n+                .filter(workerIdToAssignmentEntry -> {\n+                    String workerId = workerIdToAssignmentEntry.getKey();\n+                    // remove assignments to workers that don't exist / died for now.\n+                    // wait for failure detector to unassign them in the future for re-scheduling\n+                    if (!currentMembership.contains(workerId)) {\n+                        return false;\n+                    }\n+\n+                    return true;\n+                })\n+                .flatMap(stringMapEntry -> stringMapEntry.getValue().values().stream())\n+                .collect(Collectors.toList());\n \n         Pair<List<Function.Instance>, List<Assignment>> unassignedInstances = this.getUnassignedFunctionInstances(workerIdToAssignments,\n                 allInstances);",
                "changes": 21,
                "blob_url": "https://github.com/apache/pulsar/blob/7e3203d686e8dd81a019c5cb7441501ada556792/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/SchedulerManager.java"
            },
            {
                "additions": 102,
                "sha": "3ec30729d80fc9d690a2831202d910c892a1669b",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/7e3203d686e8dd81a019c5cb7441501ada556792/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/SchedulerManagerTest.java",
                "deletions": 42,
                "filename": "pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/SchedulerManagerTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/SchedulerManagerTest.java?ref=7e3203d686e8dd81a019c5cb7441501ada556792",
                "patch": "@@ -18,32 +18,10 @@\n  */\n package org.apache.pulsar.functions.worker;\n \n-import static org.mockito.Matchers.any;\n-import static org.mockito.Matchers.anyBoolean;\n-import static org.mockito.Matchers.anyInt;\n-import static org.mockito.Matchers.anyString;\n-import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-import static org.testng.Assert.assertTrue;\n-\n-import java.lang.reflect.Method;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.TimeoutException;\n-\n+import com.google.common.collect.Sets;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import io.netty.util.concurrent.DefaultThreadFactory;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.CompressionType;\n import org.apache.pulsar.client.api.MessageId;\n import org.apache.pulsar.client.api.Producer;\n@@ -62,11 +40,31 @@\n import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n-import com.google.common.collect.Sets;\n-import com.google.protobuf.InvalidProtocolBufferException;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n \n-import io.netty.util.concurrent.DefaultThreadFactory;\n-import lombok.extern.slf4j.Slf4j;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.testng.Assert.assertTrue;\n \n @Slf4j\n public class SchedulerManagerTest {\n@@ -187,6 +185,9 @@ public void testNothingNewToSchedule() throws Exception {\n         functionMetaDataList.add(function1);\n         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();\n \n+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory(\"dummy\", null, \"dummy\");\n+        doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();\n+\n         // set assignments\n         Function.Assignment assignment1 = Function.Assignment.newBuilder()\n                 .setWorkerId(\"worker-1\")\n@@ -432,7 +433,7 @@ public void testScalingUp() throws Exception {\n         Assert.assertEquals(invocations.size(), 4);\n         invocations = getMethodInvocationDetails(message, TypedMessageBuilder.class.getMethod(\"value\",\n                 Object.class));\n-        \n+\n         Set<Assignment> allAssignments = Sets.newHashSet();\n         invocations.forEach(invocation -> {\n             try {\n@@ -499,7 +500,7 @@ public void testScalingDown() throws Exception {\n         Assignment assignments = Assignment.parseFrom(send);\n \n         log.info(\"assignments: {}\", assignments);\n-        \n+\n         Set<Assignment> allAssignments = Sets.newHashSet();\n         invocations.forEach(invocation -> {\n             try {\n@@ -525,11 +526,11 @@ public void testScalingDown() throws Exception {\n                 .setInstance(Function.Instance.newBuilder()\n                         .setFunctionMetaData(function2).setInstanceId(2).build())\n                 .build();\n-        \n+\n         assertTrue(allAssignments.contains(assignment2_1));\n         assertTrue(allAssignments.contains(assignment2_2));\n         assertTrue(allAssignments.contains(assignment2_3));\n-        \n+\n         // scale down\n \n         Function.FunctionMetaData function2Scaled = Function.FunctionMetaData.newBuilder()\n@@ -555,7 +556,7 @@ public void testScalingDown() throws Exception {\n                 Object.class));\n         send = (byte[]) invocations.get(0).getRawArguments()[0];\n         assignments = Assignment.parseFrom(send);\n-        \n+\n         Set<Assignment> allAssignments2 = Sets.newHashSet();\n         invocations.forEach(invocation -> {\n             try {\n@@ -623,7 +624,7 @@ public void testHeartbeatFunction() throws Exception {\n             }\n         });\n     }\n-    \n+\n     @Test\n     public void testUpdate() throws Exception {\n         List<Function.FunctionMetaData> functionMetaDataList = new LinkedList<>();\n@@ -694,14 +695,14 @@ public void testUpdate() throws Exception {\n                 .setInstance(Function.Instance.newBuilder()\n                         .setFunctionMetaData(function2).setInstanceId(2).build())\n                 .build();\n-        \n+\n         invocations = getMethodInvocationDetails(message, TypedMessageBuilder.class.getMethod(\"sendAsync\"));\n         Assert.assertEquals(invocations.size(), 3);\n         invocations = getMethodInvocationDetails(message, TypedMessageBuilder.class.getMethod(\"value\",\n                 Object.class));\n         send = (byte[]) invocations.get(0).getRawArguments()[0];\n         assignments = Assignment.parseFrom(send);\n-        \n+\n         Set<Assignment> allAssignments = Sets.newHashSet();\n         invocations.forEach(invocation -> {\n             try {\n@@ -710,11 +711,11 @@ public void testUpdate() throws Exception {\n                 throw new RuntimeException(e);\n             }\n         });\n-        \n+\n         assertTrue(allAssignments.contains(assignment2_1));\n         assertTrue(allAssignments.contains(assignment2_2));\n         assertTrue(allAssignments.contains(assignment2_3));\n-        \n+\n         // scale down\n \n         Function.FunctionMetaData function2Updated = Function.FunctionMetaData.newBuilder()\n@@ -751,7 +752,7 @@ public void testUpdate() throws Exception {\n                 Object.class));\n         send = (byte[]) invocations.get(0).getRawArguments()[0];\n         assignments = Assignment.parseFrom(send);\n-        \n+\n         Set<Assignment> allAssignments2 = Sets.newHashSet();\n         invocations.forEach(invocation -> {\n             try {\n@@ -760,12 +761,71 @@ public void testUpdate() throws Exception {\n                 throw new RuntimeException(e);\n             }\n         });\n-        \n+\n         assertTrue(allAssignments2.contains(assignment2Updated1));\n         assertTrue(allAssignments2.contains(assignment2Updated2));\n         assertTrue(allAssignments2.contains(assignment2Updated3));\n     }\n \n+    @Test\n+    public void testAssignmentWorkerDoesNotExist() throws InterruptedException, NoSuchMethodException, TimeoutException, ExecutionException, InvalidProtocolBufferException {\n+        List<Function.FunctionMetaData> functionMetaDataList = new LinkedList<>();\n+        long version = 5;\n+        Function.FunctionMetaData function1 = Function.FunctionMetaData.newBuilder()\n+                .setFunctionDetails(Function.FunctionDetails.newBuilder().setName(\"func-1\")\n+                        .setNamespace(\"namespace-1\").setTenant(\"tenant-1\").setParallelism(1)).setVersion(version)\n+                .build();\n+\n+        Function.FunctionMetaData function2 = Function.FunctionMetaData.newBuilder()\n+                .setFunctionDetails(Function.FunctionDetails.newBuilder().setName(\"func-2\")\n+                        .setNamespace(\"namespace-1\").setTenant(\"tenant-1\").setParallelism(1)).setVersion(version)\n+                .build();\n+        functionMetaDataList.add(function1);\n+        functionMetaDataList.add(function2);\n+        doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();\n+\n+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory(\"dummy\", null, \"dummy\");\n+        doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();\n+\n+        // set assignments\n+        Function.Assignment assignment1 = Function.Assignment.newBuilder()\n+                .setWorkerId(\"worker-1\")\n+                .setInstance(Function.Instance.newBuilder()\n+                        .setFunctionMetaData(function1).setInstanceId(0).build())\n+                .build();\n+\n+        // set assignment to worker that doesn't exist / died\n+        Function.Assignment assignment2 = Function.Assignment.newBuilder()\n+                .setWorkerId(\"worker-2\")\n+                .setInstance(Function.Instance.newBuilder()\n+                        .setFunctionMetaData(function2).setInstanceId(0).build())\n+                .build();\n+\n+        Map<String, Map<String, Function.Assignment>> currentAssignments = new HashMap<>();\n+        Map<String, Function.Assignment> assignmentEntry1 = new HashMap<>();\n+        assignmentEntry1.put(Utils.getFullyQualifiedInstanceId(assignment1.getInstance()), assignment1);\n+        currentAssignments.put(\"worker-1\", assignmentEntry1);\n+\n+        Map<String, Function.Assignment> assignmentEntry2 = new HashMap<>();\n+        assignmentEntry2.put(Utils.getFullyQualifiedInstanceId(assignment2.getInstance()), assignment2);\n+        currentAssignments.put(\"worker-2\", assignmentEntry2);\n+\n+        doReturn(currentAssignments).when(functionRuntimeManager).getCurrentAssignments();\n+\n+        // single node\n+        List<WorkerInfo> workerInfoList = new LinkedList<>();\n+        workerInfoList.add(WorkerInfo.of(\"worker-1\", \"workerHostname-1\", 5000));\n+        doReturn(workerInfoList).when(membershipManager).getCurrentMembership();\n+\n+        // i am leader\n+        doReturn(true).when(membershipManager).isLeader();\n+\n+        callSchedule();\n+\n+        List<Invocation> invocations = getMethodInvocationDetails(message, TypedMessageBuilder.class.getMethod(\"sendAsync\"));\n+        Assert.assertEquals(invocations.size(), 0);\n+    }\n+\n     private void callSchedule() throws NoSuchMethodException, InterruptedException,\n             TimeoutException, ExecutionException {\n         Future<?> complete = schedulerManager.schedule();",
                "changes": 144,
                "blob_url": "https://github.com/apache/pulsar/blob/7e3203d686e8dd81a019c5cb7441501ada556792/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/SchedulerManagerTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "fix: NPE when there are assignments for workers not in membership (#2744)\n\n### Motivation\r\n\r\nFixes #2743 \r\n\r\nNPE occurs when there are assignments for workers not currently in the membership.  This could happen if the worker crashed before failure detector unassigned the functions assign to it and the scheduler is triggered by other means.\r\n\r\n### Modifications\r\n\r\nFilter out the assignments for worker not in membership.",
        "commit": "https://github.com/apache/pulsar/commit/7e3203d686e8dd81a019c5cb7441501ada556792"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/6bce00bd177cc6c1d78dcbcf6cc3355d09456c6b",
        "bug_id": "pulsar_39",
        "file": [
            {
                "additions": 1,
                "sha": "d51b0d803a7d0464936fa98f101f0fa790814e05",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/372575a9877bf50e8f55a9568ef6c07fcae86644/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java",
                "deletions": 0,
                "filename": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java?ref=372575a9877bf50e8f55a9568ef6c07fcae86644",
                "patch": "@@ -193,6 +193,7 @@\n      * @return the new NonDurableCursor\n      */\n     ManagedCursor newNonDurableCursor(Position startCursorPosition) throws ManagedLedgerException;\n+    ManagedCursor newNonDurableCursor(Position startPosition, String subscriptionName) throws ManagedLedgerException;\n \n     /**\n      * Delete a ManagedCursor asynchronously.",
                "changes": 1,
                "blob_url": "https://github.com/apache/pulsar/blob/372575a9877bf50e8f55a9568ef6c07fcae86644/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java"
            },
            {
                "additions": 10,
                "sha": "7a4eb60ba2bbeb11f489d9aaee01f73bad2640a9",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/372575a9877bf50e8f55a9568ef6c07fcae86644/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java",
                "deletions": 0,
                "filename": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java?ref=372575a9877bf50e8f55a9568ef6c07fcae86644",
                "patch": "@@ -844,6 +844,16 @@ public ManagedCursor newNonDurableCursor(Position startCursorPosition) throws Ma\n         return new NonDurableCursorImpl(bookKeeper, config, this, null, (PositionImpl) startCursorPosition);\n     }\n \n+    @Override\n+    public ManagedCursor newNonDurableCursor(Position startCursorPosition, String cursorName)\n+            throws ManagedLedgerException {\n+        checkManagedLedgerIsOpen();\n+        checkFenced();\n+\n+        return new NonDurableCursorImpl(bookKeeper, config, this, cursorName,\n+                (PositionImpl) startCursorPosition);\n+    }\n+\n     @Override\n     public Iterable<ManagedCursor> getCursors() {\n         return cursors;",
                "changes": 10,
                "blob_url": "https://github.com/apache/pulsar/blob/372575a9877bf50e8f55a9568ef6c07fcae86644/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java"
            },
            {
                "additions": 1,
                "sha": "e1a050979e282a674c8660e6789806d557e3b5c9",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/372575a9877bf50e8f55a9568ef6c07fcae86644/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java",
                "deletions": 1,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java?ref=372575a9877bf50e8f55a9568ef6c07fcae86644",
                "patch": "@@ -641,7 +641,7 @@ public void openCursorFailed(ManagedLedgerException exception, Object ctx) {\n             Position startPosition = new PositionImpl(ledgerId, entryId);\n             ManagedCursor cursor = null;\n             try {\n-                cursor = ledger.newNonDurableCursor(startPosition);\n+                cursor = ledger.newNonDurableCursor(startPosition, subscriptionName);\n             } catch (ManagedLedgerException e) {\n                 subscriptionFuture.completeExceptionally(e);\n             }",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/372575a9877bf50e8f55a9568ef6c07fcae86644/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java"
            },
            {
                "additions": 27,
                "sha": "c1e93aa76b968f73a5315b5863ca6f5aae371d9e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/372575a9877bf50e8f55a9568ef6c07fcae86644/pulsar-broker/src/test/java/org/apache/pulsar/client/api/TopicReaderTest.java",
                "deletions": 1,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/TopicReaderTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/client/api/TopicReaderTest.java?ref=372575a9877bf50e8f55a9568ef6c07fcae86644",
                "patch": "@@ -34,7 +34,9 @@\n import java.util.concurrent.TimeUnit;\n import org.apache.pulsar.client.impl.BatchMessageIdImpl;\n import org.apache.pulsar.client.impl.MessageImpl;\n+import org.apache.pulsar.client.impl.ReaderImpl;\n import org.apache.pulsar.common.policies.data.TopicStats;\n+import org.apache.pulsar.common.util.RelativeTimeUtil;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.testng.Assert;\n@@ -479,9 +481,33 @@ public void testMessageAvailableAfterRestart() throws Exception {\n             assertTrue(reader.hasMessageAvailable());\n \n             String readOut = new String(reader.readNext().getData());\n-            assertTrue(readOut.equals(content));\n+            assertEquals(content, readOut);\n             assertFalse(reader.hasMessageAvailable());\n         }\n \n     }\n+\n+    @Test(timeOut = 10000)\n+    public void testReaderNonDurableIsAbleToSeekRelativeTime() throws Exception {\n+        final int numOfMessage = 10;\n+        final String topicName = \"persistent://my-property/my-ns/ReaderSeek\";\n+\n+        Producer<byte[]> producer = pulsarClient.newProducer()\n+                .topic(topicName).create();\n+\n+        for (int i = 0; i < numOfMessage; i++) {\n+            producer.send(String.format(\"msg num %d\", i).getBytes());\n+        }\n+\n+        Reader<byte[]> reader = pulsarClient.newReader().topic(topicName)\n+                .startMessageId(MessageId.earliest).create();\n+        assertTrue(reader.hasMessageAvailable());\n+\n+        ((ReaderImpl) reader).getConsumer().seek(RelativeTimeUtil.parseRelativeTimeInSeconds(\"-1m\"));\n+\n+        assertTrue(reader.hasMessageAvailable());\n+\n+        reader.close();\n+        producer.close();\n+    }\n }",
                "changes": 28,
                "blob_url": "https://github.com/apache/pulsar/blob/372575a9877bf50e8f55a9568ef6c07fcae86644/pulsar-broker/src/test/java/org/apache/pulsar/client/api/TopicReaderTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "[issue #3975] Bugfix NPE on non durable consumer (#3988)\n\n*Motivation*\r\n\r\nTrying to fix #3975\r\n\r\nWhen a reset of a cursor is performed with some timestamp on a non-durable\r\nconsumer the message finder will fail with null pointer exception due to\r\n`cursor.getName()` being null.\r\n\r\n*Modifications*\r\n\r\n  - Add method overloading for `newNonDurableCursor()` with subscription name.\r\n  - Fix method getNonDurableSubscription to call `newNonDurableCursor()` with\r\n    proper subscription name\r\n  - Add test to assert issue.",
        "commit": "https://github.com/apache/pulsar/commit/372575a9877bf50e8f55a9568ef6c07fcae86644"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/d5780ef1deeed6d24748f263a958e3212a603f89",
        "bug_id": "pulsar_40",
        "file": [
            {
                "additions": 2,
                "sha": "761c710fd206300511961bcea3e849618415707e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pom.xml",
                "deletions": 0,
                "filename": "pom.xml",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pom.xml?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -842,6 +842,7 @@ flexible messaging model and an intuitive client API.</description>\n             <exclude>**/*.key</exclude>\n             <exclude>**/*.csr</exclude>\n             <exclude>src/main/java/org/apache/bookkeeper/mledger/proto/MLDataFormats.java</exclude>\n+            <exclude>src/main/java/org/apache/pulsar/broker/service/schema/proto/SchemaRegistryFormat.java</exclude>\n             <exclude>src/main/java/org/apache/pulsar/common/api/proto/PulsarApi.java</exclude>\n             <exclude>bin/proto/*</exclude>\n             <exclude>**/*.patch</exclude>\n@@ -938,6 +939,7 @@ flexible messaging model and an intuitive client API.</description>\n                  and are included in source tree for convenience -->\n             <exclude>src/main/java/org/apache/bookkeeper/mledger/proto/MLDataFormats.java</exclude>\n             <exclude>src/main/java/org/apache/pulsar/common/api/proto/PulsarApi.java</exclude>\n+            <exclude>src/main/java/org/apache/pulsar/broker/service/schema/proto/SchemaRegistryFormat.java</exclude>\n             <exclude>bin/proto/MLDataFormats_pb2.py</exclude>\n \n             <!-- This is generated during maven build -->",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pom.xml"
            },
            {
                "additions": 8,
                "sha": "4fac97d2615d96f09edd162096705f2fef3b3b20",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java",
                "deletions": 10,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -722,16 +722,14 @@ protected void handleSubscribe(final CommandSubscribe subscribe) {\n \n     private static SchemaType getType(PulsarApi.Schema.Type protocolType) {\n         switch (protocolType) {\n-            case Json:\n-                return SchemaType.JSON;\n-            case Avro:\n-                return SchemaType.AVRO;\n-            case Thrift:\n-                return SchemaType.THRIFT;\n-            case Protobuf:\n-                return SchemaType.PROTOBUF;\n-            default:\n-                return SchemaType.NONE;\n+        case None:\n+            return SchemaType.NONE;\n+        case String:\n+            return SchemaType.STRING;\n+        case Json:\n+            return SchemaType.JSON;\n+        default:\n+            return SchemaType.NONE;\n         }\n     }\n ",
                "changes": 18,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java"
            },
            {
                "additions": 12,
                "sha": "30e9b4763c2a9716d349235a0647efa0a1b6b2a0",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/SchemaRegistryServiceImpl.java",
                "deletions": 16,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/SchemaRegistryServiceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/SchemaRegistryServiceImpl.java?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -148,29 +148,25 @@ public void close() throws Exception {\n     interface Functions {\n         static SchemaType convertToDomainType(SchemaRegistryFormat.SchemaInfo.SchemaType type) {\n             switch (type) {\n-                case AVRO:\n-                    return SchemaType.AVRO;\n-                case JSON:\n-                    return SchemaType.JSON;\n-                case PROTO:\n-                    return SchemaType.PROTOBUF;\n-                case THRIFT:\n-                    return SchemaType.THRIFT;\n-                default:\n-                    return SchemaType.NONE;\n+            case NONE:\n+                return SchemaType.NONE;\n+            case STRING:\n+                return SchemaType.STRING;\n+            case JSON:\n+                return SchemaType.JSON;\n+            default:\n+                return SchemaType.NONE;\n             }\n         }\n \n         static SchemaRegistryFormat.SchemaInfo.SchemaType convertFromDomainType(SchemaType type) {\n             switch (type) {\n-                case AVRO:\n-                    return SchemaRegistryFormat.SchemaInfo.SchemaType.AVRO;\n+                case NONE:\n+                    return SchemaRegistryFormat.SchemaInfo.SchemaType.NONE;\n+                case STRING:\n+                    return SchemaRegistryFormat.SchemaInfo.SchemaType.STRING;\n                 case JSON:\n                     return SchemaRegistryFormat.SchemaInfo.SchemaType.JSON;\n-                case THRIFT:\n-                    return SchemaRegistryFormat.SchemaInfo.SchemaType.THRIFT;\n-                case PROTOBUF:\n-                    return SchemaRegistryFormat.SchemaInfo.SchemaType.PROTO;\n                 default:\n                     return SchemaRegistryFormat.SchemaInfo.SchemaType.NONE;\n             }",
                "changes": 28,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/SchemaRegistryServiceImpl.java"
            },
            {
                "additions": 81,
                "sha": "cfd14cbef85d49d84d7fcf9acab5113dd384193e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/proto/SchemaRegistryFormat.java",
                "deletions": 105,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/proto/SchemaRegistryFormat.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/proto/SchemaRegistryFormat.java?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -1,21 +1,3 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n // Generated by the protocol buffer compiler.  DO NOT EDIT!\n // source: src/main/proto/SchemaRegistryFormat.proto\n \n@@ -39,7 +21,7 @@ public static void registerAllExtensions(\n     \n     // required .pulsar.schema.SchemaInfo.SchemaType type = 3;\n     boolean hasType();\n-    SchemaRegistryFormat.SchemaInfo.SchemaType getType();\n+    org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.SchemaType getType();\n     \n     // required bytes schema = 4;\n     boolean hasSchema();\n@@ -54,9 +36,9 @@ public static void registerAllExtensions(\n     boolean getDeleted();\n     \n     // repeated .pulsar.schema.SchemaInfo.KeyValuePair props = 7;\n-    java.util.List<SchemaRegistryFormat.SchemaInfo.KeyValuePair>\n+    java.util.List<org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair> \n         getPropsList();\n-    SchemaRegistryFormat.SchemaInfo.KeyValuePair getProps(int index);\n+    org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair getProps(int index);\n     int getPropsCount();\n   }\n   public static final class SchemaInfo extends\n@@ -80,28 +62,22 @@ public SchemaInfo getDefaultInstanceForType() {\n     public enum SchemaType\n         implements com.google.protobuf.Internal.EnumLite {\n       NONE(0, 1),\n-      THRIFT(1, 2),\n-      AVRO(2, 3),\n-      JSON(3, 4),\n-      PROTO(4, 5),\n+      STRING(1, 2),\n+      JSON(2, 3),\n       ;\n       \n       public static final int NONE_VALUE = 1;\n-      public static final int THRIFT_VALUE = 2;\n-      public static final int AVRO_VALUE = 3;\n-      public static final int JSON_VALUE = 4;\n-      public static final int PROTO_VALUE = 5;\n+      public static final int STRING_VALUE = 2;\n+      public static final int JSON_VALUE = 3;\n       \n       \n       public final int getNumber() { return value; }\n       \n       public static SchemaType valueOf(int value) {\n         switch (value) {\n           case 1: return NONE;\n-          case 2: return THRIFT;\n-          case 3: return AVRO;\n-          case 4: return JSON;\n-          case 5: return PROTO;\n+          case 2: return STRING;\n+          case 3: return JSON;\n           default: return null;\n         }\n       }\n@@ -278,41 +254,41 @@ public int getSerializedSize() {\n         return super.writeReplace();\n       }\n       \n-      public static SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(\n+      public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(\n           com.google.protobuf.ByteString data)\n           throws com.google.protobuf.InvalidProtocolBufferException {\n         return newBuilder().mergeFrom(data).buildParsed();\n       }\n-      public static SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(\n+      public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(\n           com.google.protobuf.ByteString data,\n           com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n           throws com.google.protobuf.InvalidProtocolBufferException {\n         return newBuilder().mergeFrom(data, extensionRegistry)\n                  .buildParsed();\n       }\n-      public static SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(byte[] data)\n+      public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(byte[] data)\n           throws com.google.protobuf.InvalidProtocolBufferException {\n         return newBuilder().mergeFrom(data).buildParsed();\n       }\n-      public static SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(\n+      public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(\n           byte[] data,\n           com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n           throws com.google.protobuf.InvalidProtocolBufferException {\n         return newBuilder().mergeFrom(data, extensionRegistry)\n                  .buildParsed();\n       }\n-      public static SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(java.io.InputStream input)\n+      public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(java.io.InputStream input)\n           throws java.io.IOException {\n         return newBuilder().mergeFrom(input).buildParsed();\n       }\n-      public static SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(\n+      public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(\n           java.io.InputStream input,\n           com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n           throws java.io.IOException {\n         return newBuilder().mergeFrom(input, extensionRegistry)\n                  .buildParsed();\n       }\n-      public static SchemaRegistryFormat.SchemaInfo.KeyValuePair parseDelimitedFrom(java.io.InputStream input)\n+      public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair parseDelimitedFrom(java.io.InputStream input)\n           throws java.io.IOException {\n         Builder builder = newBuilder();\n         if (builder.mergeDelimitedFrom(input)) {\n@@ -321,7 +297,7 @@ public int getSerializedSize() {\n           return null;\n         }\n       }\n-      public static SchemaRegistryFormat.SchemaInfo.KeyValuePair parseDelimitedFrom(\n+      public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair parseDelimitedFrom(\n           java.io.InputStream input,\n           com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n           throws java.io.IOException {\n@@ -332,12 +308,12 @@ public int getSerializedSize() {\n           return null;\n         }\n       }\n-      public static SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(\n+      public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(\n           com.google.protobuf.CodedInputStream input)\n           throws java.io.IOException {\n         return newBuilder().mergeFrom(input).buildParsed();\n       }\n-      public static SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(\n+      public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair parseFrom(\n           com.google.protobuf.CodedInputStream input,\n           com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n           throws java.io.IOException {\n@@ -347,15 +323,15 @@ public int getSerializedSize() {\n       \n       public static Builder newBuilder() { return Builder.create(); }\n       public Builder newBuilderForType() { return newBuilder(); }\n-      public static Builder newBuilder(SchemaRegistryFormat.SchemaInfo.KeyValuePair prototype) {\n+      public static Builder newBuilder(org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair prototype) {\n         return newBuilder().mergeFrom(prototype);\n       }\n       public Builder toBuilder() { return newBuilder(this); }\n       \n       public static final class Builder extends\n           com.google.protobuf.GeneratedMessageLite.Builder<\n-            SchemaRegistryFormat.SchemaInfo.KeyValuePair, Builder>\n-          implements SchemaRegistryFormat.SchemaInfo.KeyValuePairOrBuilder {\n+            org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair, Builder>\n+          implements org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePairOrBuilder {\n         // Construct using org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair.newBuilder()\n         private Builder() {\n           maybeForceBuilderInitialization();\n@@ -380,30 +356,30 @@ public Builder clone() {\n           return create().mergeFrom(buildPartial());\n         }\n         \n-        public SchemaRegistryFormat.SchemaInfo.KeyValuePair getDefaultInstanceForType() {\n-          return SchemaRegistryFormat.SchemaInfo.KeyValuePair.getDefaultInstance();\n+        public org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair getDefaultInstanceForType() {\n+          return org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair.getDefaultInstance();\n         }\n         \n-        public SchemaRegistryFormat.SchemaInfo.KeyValuePair build() {\n-          SchemaRegistryFormat.SchemaInfo.KeyValuePair result = buildPartial();\n+        public org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair build() {\n+          org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair result = buildPartial();\n           if (!result.isInitialized()) {\n             throw newUninitializedMessageException(result);\n           }\n           return result;\n         }\n         \n-        private SchemaRegistryFormat.SchemaInfo.KeyValuePair buildParsed()\n+        private org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair buildParsed()\n             throws com.google.protobuf.InvalidProtocolBufferException {\n-          SchemaRegistryFormat.SchemaInfo.KeyValuePair result = buildPartial();\n+          org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair result = buildPartial();\n           if (!result.isInitialized()) {\n             throw newUninitializedMessageException(\n               result).asInvalidProtocolBufferException();\n           }\n           return result;\n         }\n         \n-        public SchemaRegistryFormat.SchemaInfo.KeyValuePair buildPartial() {\n-          SchemaRegistryFormat.SchemaInfo.KeyValuePair result = new SchemaRegistryFormat.SchemaInfo.KeyValuePair(this);\n+        public org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair buildPartial() {\n+          org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair result = new org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair(this);\n           int from_bitField0_ = bitField0_;\n           int to_bitField0_ = 0;\n           if (((from_bitField0_ & 0x00000001) == 0x00000001)) {\n@@ -418,8 +394,8 @@ public Builder clone() {\n           return result;\n         }\n         \n-        public Builder mergeFrom(SchemaRegistryFormat.SchemaInfo.KeyValuePair other) {\n-          if (other == SchemaRegistryFormat.SchemaInfo.KeyValuePair.getDefaultInstance()) return this;\n+        public Builder mergeFrom(org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair other) {\n+          if (other == org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair.getDefaultInstance()) return this;\n           if (other.hasKey()) {\n             setKey(other.getKey());\n           }\n@@ -624,11 +600,11 @@ public String getUser() {\n     \n     // required .pulsar.schema.SchemaInfo.SchemaType type = 3;\n     public static final int TYPE_FIELD_NUMBER = 3;\n-    private SchemaRegistryFormat.SchemaInfo.SchemaType type_;\n+    private org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.SchemaType type_;\n     public boolean hasType() {\n       return ((bitField0_ & 0x00000004) == 0x00000004);\n     }\n-    public SchemaRegistryFormat.SchemaInfo.SchemaType getType() {\n+    public org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.SchemaType getType() {\n       return type_;\n     }\n     \n@@ -664,29 +640,29 @@ public boolean getDeleted() {\n     \n     // repeated .pulsar.schema.SchemaInfo.KeyValuePair props = 7;\n     public static final int PROPS_FIELD_NUMBER = 7;\n-    private java.util.List<SchemaRegistryFormat.SchemaInfo.KeyValuePair> props_;\n-    public java.util.List<SchemaRegistryFormat.SchemaInfo.KeyValuePair> getPropsList() {\n+    private java.util.List<org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair> props_;\n+    public java.util.List<org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair> getPropsList() {\n       return props_;\n     }\n-    public java.util.List<? extends SchemaRegistryFormat.SchemaInfo.KeyValuePairOrBuilder>\n+    public java.util.List<? extends org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePairOrBuilder> \n         getPropsOrBuilderList() {\n       return props_;\n     }\n     public int getPropsCount() {\n       return props_.size();\n     }\n-    public SchemaRegistryFormat.SchemaInfo.KeyValuePair getProps(int index) {\n+    public org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair getProps(int index) {\n       return props_.get(index);\n     }\n-    public SchemaRegistryFormat.SchemaInfo.KeyValuePairOrBuilder getPropsOrBuilder(\n+    public org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePairOrBuilder getPropsOrBuilder(\n         int index) {\n       return props_.get(index);\n     }\n     \n     private void initFields() {\n       schemaId_ = \"\";\n       user_ = \"\";\n-      type_ = SchemaRegistryFormat.SchemaInfo.SchemaType.NONE;\n+      type_ = org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.SchemaType.NONE;\n       schema_ = com.google.protobuf.ByteString.EMPTY;\n       timestamp_ = 0L;\n       deleted_ = false;\n@@ -802,41 +778,41 @@ public int getSerializedSize() {\n       return super.writeReplace();\n     }\n     \n-    public static SchemaRegistryFormat.SchemaInfo parseFrom(\n+    public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo parseFrom(\n         com.google.protobuf.ByteString data)\n         throws com.google.protobuf.InvalidProtocolBufferException {\n       return newBuilder().mergeFrom(data).buildParsed();\n     }\n-    public static SchemaRegistryFormat.SchemaInfo parseFrom(\n+    public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo parseFrom(\n         com.google.protobuf.ByteString data,\n         com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n         throws com.google.protobuf.InvalidProtocolBufferException {\n       return newBuilder().mergeFrom(data, extensionRegistry)\n                .buildParsed();\n     }\n-    public static SchemaRegistryFormat.SchemaInfo parseFrom(byte[] data)\n+    public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo parseFrom(byte[] data)\n         throws com.google.protobuf.InvalidProtocolBufferException {\n       return newBuilder().mergeFrom(data).buildParsed();\n     }\n-    public static SchemaRegistryFormat.SchemaInfo parseFrom(\n+    public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo parseFrom(\n         byte[] data,\n         com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n         throws com.google.protobuf.InvalidProtocolBufferException {\n       return newBuilder().mergeFrom(data, extensionRegistry)\n                .buildParsed();\n     }\n-    public static SchemaRegistryFormat.SchemaInfo parseFrom(java.io.InputStream input)\n+    public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo parseFrom(java.io.InputStream input)\n         throws java.io.IOException {\n       return newBuilder().mergeFrom(input).buildParsed();\n     }\n-    public static SchemaRegistryFormat.SchemaInfo parseFrom(\n+    public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo parseFrom(\n         java.io.InputStream input,\n         com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n         throws java.io.IOException {\n       return newBuilder().mergeFrom(input, extensionRegistry)\n                .buildParsed();\n     }\n-    public static SchemaRegistryFormat.SchemaInfo parseDelimitedFrom(java.io.InputStream input)\n+    public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo parseDelimitedFrom(java.io.InputStream input)\n         throws java.io.IOException {\n       Builder builder = newBuilder();\n       if (builder.mergeDelimitedFrom(input)) {\n@@ -845,7 +821,7 @@ public int getSerializedSize() {\n         return null;\n       }\n     }\n-    public static SchemaRegistryFormat.SchemaInfo parseDelimitedFrom(\n+    public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo parseDelimitedFrom(\n         java.io.InputStream input,\n         com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n         throws java.io.IOException {\n@@ -856,12 +832,12 @@ public int getSerializedSize() {\n         return null;\n       }\n     }\n-    public static SchemaRegistryFormat.SchemaInfo parseFrom(\n+    public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo parseFrom(\n         com.google.protobuf.CodedInputStream input)\n         throws java.io.IOException {\n       return newBuilder().mergeFrom(input).buildParsed();\n     }\n-    public static SchemaRegistryFormat.SchemaInfo parseFrom(\n+    public static org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo parseFrom(\n         com.google.protobuf.CodedInputStream input,\n         com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n         throws java.io.IOException {\n@@ -871,15 +847,15 @@ public int getSerializedSize() {\n     \n     public static Builder newBuilder() { return Builder.create(); }\n     public Builder newBuilderForType() { return newBuilder(); }\n-    public static Builder newBuilder(SchemaRegistryFormat.SchemaInfo prototype) {\n+    public static Builder newBuilder(org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo prototype) {\n       return newBuilder().mergeFrom(prototype);\n     }\n     public Builder toBuilder() { return newBuilder(this); }\n     \n     public static final class Builder extends\n         com.google.protobuf.GeneratedMessageLite.Builder<\n-          SchemaRegistryFormat.SchemaInfo, Builder>\n-        implements SchemaRegistryFormat.SchemaInfoOrBuilder {\n+          org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo, Builder>\n+        implements org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfoOrBuilder {\n       // Construct using org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.newBuilder()\n       private Builder() {\n         maybeForceBuilderInitialization();\n@@ -897,7 +873,7 @@ public Builder clear() {\n         bitField0_ = (bitField0_ & ~0x00000001);\n         user_ = \"\";\n         bitField0_ = (bitField0_ & ~0x00000002);\n-        type_ = SchemaRegistryFormat.SchemaInfo.SchemaType.NONE;\n+        type_ = org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.SchemaType.NONE;\n         bitField0_ = (bitField0_ & ~0x00000004);\n         schema_ = com.google.protobuf.ByteString.EMPTY;\n         bitField0_ = (bitField0_ & ~0x00000008);\n@@ -914,30 +890,30 @@ public Builder clone() {\n         return create().mergeFrom(buildPartial());\n       }\n       \n-      public SchemaRegistryFormat.SchemaInfo getDefaultInstanceForType() {\n-        return SchemaRegistryFormat.SchemaInfo.getDefaultInstance();\n+      public org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo getDefaultInstanceForType() {\n+        return org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.getDefaultInstance();\n       }\n       \n-      public SchemaRegistryFormat.SchemaInfo build() {\n-        SchemaRegistryFormat.SchemaInfo result = buildPartial();\n+      public org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo build() {\n+        org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo result = buildPartial();\n         if (!result.isInitialized()) {\n           throw newUninitializedMessageException(result);\n         }\n         return result;\n       }\n       \n-      private SchemaRegistryFormat.SchemaInfo buildParsed()\n+      private org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo buildParsed()\n           throws com.google.protobuf.InvalidProtocolBufferException {\n-        SchemaRegistryFormat.SchemaInfo result = buildPartial();\n+        org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo result = buildPartial();\n         if (!result.isInitialized()) {\n           throw newUninitializedMessageException(\n             result).asInvalidProtocolBufferException();\n         }\n         return result;\n       }\n       \n-      public SchemaRegistryFormat.SchemaInfo buildPartial() {\n-        SchemaRegistryFormat.SchemaInfo result = new SchemaRegistryFormat.SchemaInfo(this);\n+      public org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo buildPartial() {\n+        org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo result = new org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo(this);\n         int from_bitField0_ = bitField0_;\n         int to_bitField0_ = 0;\n         if (((from_bitField0_ & 0x00000001) == 0x00000001)) {\n@@ -973,8 +949,8 @@ public Builder clone() {\n         return result;\n       }\n       \n-      public Builder mergeFrom(SchemaRegistryFormat.SchemaInfo other) {\n-        if (other == SchemaRegistryFormat.SchemaInfo.getDefaultInstance()) return this;\n+      public Builder mergeFrom(org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo other) {\n+        if (other == org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.getDefaultInstance()) return this;\n         if (other.hasSchemaId()) {\n           setSchemaId(other.getSchemaId());\n         }\n@@ -1069,7 +1045,7 @@ public Builder mergeFrom(\n             }\n             case 24: {\n               int rawValue = input.readEnum();\n-              SchemaRegistryFormat.SchemaInfo.SchemaType value = SchemaRegistryFormat.SchemaInfo.SchemaType.valueOf(rawValue);\n+              org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.SchemaType value = org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.SchemaType.valueOf(rawValue);\n               if (value != null) {\n                 bitField0_ |= 0x00000004;\n                 type_ = value;\n@@ -1092,7 +1068,7 @@ public Builder mergeFrom(\n               break;\n             }\n             case 58: {\n-              SchemaRegistryFormat.SchemaInfo.KeyValuePair.Builder subBuilder = SchemaRegistryFormat.SchemaInfo.KeyValuePair.newBuilder();\n+              org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair.Builder subBuilder = org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair.newBuilder();\n               input.readMessage(subBuilder, extensionRegistry);\n               addProps(subBuilder.buildPartial());\n               break;\n@@ -1176,14 +1152,14 @@ void setUser(com.google.protobuf.ByteString value) {\n       }\n       \n       // required .pulsar.schema.SchemaInfo.SchemaType type = 3;\n-      private SchemaRegistryFormat.SchemaInfo.SchemaType type_ = SchemaRegistryFormat.SchemaInfo.SchemaType.NONE;\n+      private org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.SchemaType type_ = org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.SchemaType.NONE;\n       public boolean hasType() {\n         return ((bitField0_ & 0x00000004) == 0x00000004);\n       }\n-      public SchemaRegistryFormat.SchemaInfo.SchemaType getType() {\n+      public org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.SchemaType getType() {\n         return type_;\n       }\n-      public Builder setType(SchemaRegistryFormat.SchemaInfo.SchemaType value) {\n+      public Builder setType(org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.SchemaType value) {\n         if (value == null) {\n           throw new NullPointerException();\n         }\n@@ -1194,7 +1170,7 @@ public Builder setType(SchemaRegistryFormat.SchemaInfo.SchemaType value) {\n       }\n       public Builder clearType() {\n         bitField0_ = (bitField0_ & ~0x00000004);\n-        type_ = SchemaRegistryFormat.SchemaInfo.SchemaType.NONE;\n+        type_ = org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.SchemaType.NONE;\n         \n         return this;\n       }\n@@ -1266,26 +1242,26 @@ public Builder clearDeleted() {\n       }\n       \n       // repeated .pulsar.schema.SchemaInfo.KeyValuePair props = 7;\n-      private java.util.List<SchemaRegistryFormat.SchemaInfo.KeyValuePair> props_ =\n+      private java.util.List<org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair> props_ =\n         java.util.Collections.emptyList();\n       private void ensurePropsIsMutable() {\n         if (!((bitField0_ & 0x00000040) == 0x00000040)) {\n-          props_ = new java.util.ArrayList<SchemaRegistryFormat.SchemaInfo.KeyValuePair>(props_);\n+          props_ = new java.util.ArrayList<org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair>(props_);\n           bitField0_ |= 0x00000040;\n          }\n       }\n       \n-      public java.util.List<SchemaRegistryFormat.SchemaInfo.KeyValuePair> getPropsList() {\n+      public java.util.List<org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair> getPropsList() {\n         return java.util.Collections.unmodifiableList(props_);\n       }\n       public int getPropsCount() {\n         return props_.size();\n       }\n-      public SchemaRegistryFormat.SchemaInfo.KeyValuePair getProps(int index) {\n+      public org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair getProps(int index) {\n         return props_.get(index);\n       }\n       public Builder setProps(\n-          int index, SchemaRegistryFormat.SchemaInfo.KeyValuePair value) {\n+          int index, org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair value) {\n         if (value == null) {\n           throw new NullPointerException();\n         }\n@@ -1295,13 +1271,13 @@ public Builder setProps(\n         return this;\n       }\n       public Builder setProps(\n-          int index, SchemaRegistryFormat.SchemaInfo.KeyValuePair.Builder builderForValue) {\n+          int index, org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair.Builder builderForValue) {\n         ensurePropsIsMutable();\n         props_.set(index, builderForValue.build());\n         \n         return this;\n       }\n-      public Builder addProps(SchemaRegistryFormat.SchemaInfo.KeyValuePair value) {\n+      public Builder addProps(org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair value) {\n         if (value == null) {\n           throw new NullPointerException();\n         }\n@@ -1311,7 +1287,7 @@ public Builder addProps(SchemaRegistryFormat.SchemaInfo.KeyValuePair value) {\n         return this;\n       }\n       public Builder addProps(\n-          int index, SchemaRegistryFormat.SchemaInfo.KeyValuePair value) {\n+          int index, org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair value) {\n         if (value == null) {\n           throw new NullPointerException();\n         }\n@@ -1321,21 +1297,21 @@ public Builder addProps(\n         return this;\n       }\n       public Builder addProps(\n-          SchemaRegistryFormat.SchemaInfo.KeyValuePair.Builder builderForValue) {\n+          org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair.Builder builderForValue) {\n         ensurePropsIsMutable();\n         props_.add(builderForValue.build());\n         \n         return this;\n       }\n       public Builder addProps(\n-          int index, SchemaRegistryFormat.SchemaInfo.KeyValuePair.Builder builderForValue) {\n+          int index, org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair.Builder builderForValue) {\n         ensurePropsIsMutable();\n         props_.add(index, builderForValue.build());\n         \n         return this;\n       }\n       public Builder addAllProps(\n-          java.lang.Iterable<? extends SchemaRegistryFormat.SchemaInfo.KeyValuePair> values) {\n+          java.lang.Iterable<? extends org.apache.pulsar.broker.service.schema.proto.SchemaRegistryFormat.SchemaInfo.KeyValuePair> values) {\n         ensurePropsIsMutable();\n         super.addAll(values, props_);\n         ",
                "changes": 186,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/proto/SchemaRegistryFormat.java"
            },
            {
                "additions": 2,
                "sha": "08dd506372af66d2cc17a7ff83ea79ae0af775f4",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-broker/src/main/proto/SchemaRegistryFormat.proto",
                "deletions": 4,
                "filename": "pulsar-broker/src/main/proto/SchemaRegistryFormat.proto",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/proto/SchemaRegistryFormat.proto?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -25,10 +25,8 @@ option optimize_for = LITE_RUNTIME;\n message SchemaInfo {\n     enum SchemaType {\n         NONE = 1;\n-        THRIFT = 2;\n-        AVRO = 3;\n-        JSON = 4;\n-        PROTO = 5;\n+        STRING = 2;\n+        JSON = 3;\n     }\n     message KeyValuePair {\n         required string key = 1;",
                "changes": 6,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-broker/src/main/proto/SchemaRegistryFormat.proto"
            },
            {
                "additions": 4,
                "sha": "3c1a2d3cdd22d2d034995247ba32c4e00d7e3bd4",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/schema/SchemaServiceTest.java",
                "deletions": 4,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/schema/SchemaServiceTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/schema/SchemaServiceTest.java?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -44,23 +44,23 @@\n \n     private SchemaData schema1 = SchemaData.builder()\n         .user(userId)\n-        .type(SchemaType.PROTOBUF)\n+        .type(SchemaType.JSON)\n         .timestamp(MockClock.millis())\n         .isDeleted(false)\n         .data(\"message { required int64 a = 1};\".getBytes())\n         .build();\n \n     private SchemaData schema2 = SchemaData.builder()\n         .user(userId)\n-        .type(SchemaType.PROTOBUF)\n+        .type(SchemaType.JSON)\n         .timestamp(MockClock.millis())\n         .isDeleted(false)\n         .data(\"message { required int64 b = 1};\".getBytes())\n         .build();\n \n     private SchemaData schema3 = SchemaData.builder()\n         .user(userId)\n-        .type(SchemaType.PROTOBUF)\n+        .type(SchemaType.JSON)\n         .timestamp(MockClock.millis())\n         .isDeleted(false)\n         .data(\"message { required int64 c = 1};\".getBytes())\n@@ -243,7 +243,7 @@ private SchemaData randomSchema() {\n         UUID randomString = UUID.randomUUID();\n         return SchemaData.builder()\n             .user(userId)\n-            .type(SchemaType.PROTOBUF)\n+            .type(SchemaType.JSON)\n             .timestamp(MockClock.millis())\n             .isDeleted(false)\n             .data(randomString.toString().getBytes())",
                "changes": 8,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/schema/SchemaServiceTest.java"
            },
            {
                "additions": 63,
                "sha": "6b01cd6d8364e1f12c8f53500a9ec3b186b3c6ab",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-broker/src/test/java/org/apache/pulsar/client/api/SimpleSchemaTest.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/SimpleSchemaTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/client/api/SimpleSchemaTest.java?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.client.api;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+public class SimpleSchemaTest extends ProducerConsumerBase {\n+\n+    @BeforeMethod\n+    @Override\n+    protected void setup() throws Exception {\n+        super.internalSetup();\n+        super.producerBaseSetup();\n+    }\n+\n+    @AfterMethod\n+    @Override\n+    protected void cleanup() throws Exception {\n+        super.internalCleanup();\n+    }\n+\n+    @Test\n+    public void testString() throws Exception {\n+        Consumer<String> consumer = pulsarClient.newConsumer(Schema.STRING)\n+                .topic(\"persistent://my-property/my-ns/my-topic1\").subscriptionName(\"my-subscriber-name\").subscribe();\n+\n+        Producer<String> producer = pulsarClient.newProducer(Schema.STRING)\n+                .topic(\"persistent://my-property/my-ns/my-topic1\").create();\n+\n+        int N = 10;\n+\n+        for (int i = 0; i < N; i++) {\n+            producer.send(\"my-message-\" + i);\n+        }\n+\n+        for (int i = 0; i < N; i++) {\n+            Message<String> msg = consumer.receive();\n+            assertEquals(msg.getValue(), \"my-message-\" + i);\n+\n+            consumer.acknowledge(msg);\n+        }\n+    }\n+}",
                "changes": 63,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-broker/src/test/java/org/apache/pulsar/client/api/SimpleSchemaTest.java"
            },
            {
                "additions": 30,
                "sha": "c5ff14d92d9e54d672f7769760b91931d1fe0b6c",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-client/src/main/java/org/apache/pulsar/client/api/Schema.java",
                "deletions": 0,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/api/Schema.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/api/Schema.java?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -18,12 +18,37 @@\n  */\n package org.apache.pulsar.client.api;\n \n+import org.apache.pulsar.client.api.schemas.StringSchema;\n import org.apache.pulsar.common.schema.SchemaInfo;\n \n+/**\n+ * Message schema definition\n+ */\n public interface Schema<T> {\n+\n+    /**\n+     * Encode an object representing the message content into a byte array.\n+     *\n+     * @param message\n+     *            the message object\n+     * @return a byte array with the serialized content\n+     * @throws SchemaSerializationException\n+     *             if the serialization fails\n+     */\n     byte[] encode(T message) throws SchemaSerializationException;\n+\n+    /**\n+     * Decode a byte array into an object using the schema definition and deserializer implementation\n+     *\n+     * @param bytes\n+     *            the byte array to decode\n+     * @return the deserialized object\n+     */\n     T decode(byte[] bytes);\n \n+    /**\n+     * @return an object that represents the Schema associated metadata\n+     */\n     SchemaInfo getSchemaInfo();\n \n     Schema<byte[]> IDENTITY = new Schema<byte[]>() {\n@@ -42,4 +67,9 @@ public SchemaInfo getSchemaInfo() {\n             return null;\n         }\n     };\n+\n+    /**\n+     * Schema that can be used to encode/decode messages whose values are String. The payload is encoded with UTF-8.\n+     */\n+    Schema<String> STRING = new StringSchema();\n }",
                "changes": 30,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-client/src/main/java/org/apache/pulsar/client/api/Schema.java"
            },
            {
                "additions": 2,
                "sha": "5586d03b0835fabb2b7fcbd67d6851223a91265a",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-client/src/main/java/org/apache/pulsar/client/api/schemas/StringSchema.java",
                "deletions": 1,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/api/schemas/StringSchema.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/api/schemas/StringSchema.java?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -48,7 +48,8 @@ public String decode(byte[] bytes) {\n     public SchemaInfo getSchemaInfo() {\n         SchemaInfo schemaInfo = new SchemaInfo();\n         schemaInfo.setName(\"String\");\n-        schemaInfo.setType(SchemaType.NONE);\n+        schemaInfo.setType(SchemaType.STRING);\n+        schemaInfo.setSchema(new byte[0]);\n         return schemaInfo;\n     }\n }",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-client/src/main/java/org/apache/pulsar/client/api/schemas/StringSchema.java"
            },
            {
                "additions": 1,
                "sha": "d9bdc74faac512038cdb61128816e0020f5870e1",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConnectionHandler.java",
                "deletions": 0,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConnectionHandler.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConnectionHandler.java?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -71,6 +71,7 @@ protected void grabCnx() {\n     }\n \n     private Void handleConnectionError(Throwable exception) {\n+        exception.printStackTrace();\n         log.warn(\"[{}] [{}] Error connecting to broker: {}\", state.topic, state.getHandlerName(), exception.getMessage());\n         connection.connectionFailed(new PulsarClientException(exception));\n ",
                "changes": 1,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConnectionHandler.java"
            },
            {
                "additions": 5,
                "sha": "1228876cbabb1f026c3754bb7444a9217005d7a9",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-common/src/main/java/org/apache/pulsar/common/api/Commands.java",
                "deletions": 7,
                "filename": "pulsar-common/src/main/java/org/apache/pulsar/common/api/Commands.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-common/src/main/java/org/apache/pulsar/common/api/Commands.java?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -444,16 +444,14 @@ public static ByteBuf newProducer(String topic, long producerId, long requestId,\n \n     private static PulsarApi.Schema.Type getSchemaType(SchemaType type) {\n         switch (type) {\n-            case PROTOBUF:\n-                return PulsarApi.Schema.Type.Protobuf;\n-            case THRIFT:\n-                return PulsarApi.Schema.Type.Thrift;\n-            case AVRO:\n-                return PulsarApi.Schema.Type.Avro;\n+            case NONE:\n+                return PulsarApi.Schema.Type.None;\n+            case STRING:\n+                return PulsarApi.Schema.Type.String;\n             case JSON:\n                 return PulsarApi.Schema.Type.Json;\n             default:\n-                return null;\n+                return PulsarApi.Schema.Type.None;\n         }\n     }\n ",
                "changes": 12,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-common/src/main/java/org/apache/pulsar/common/api/Commands.java"
            },
            {
                "additions": 13,
                "sha": "e1253d9429bdd1b30cdb528eaf4ec69cdd16134a",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-common/src/main/java/org/apache/pulsar/common/api/proto/PulsarApi.java",
                "deletions": 16,
                "filename": "pulsar-common/src/main/java/org/apache/pulsar/common/api/proto/PulsarApi.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-common/src/main/java/org/apache/pulsar/common/api/proto/PulsarApi.java?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -318,26 +318,23 @@ public Schema getDefaultInstanceForType() {\n     \n     public enum Type\n         implements com.google.protobuf.Internal.EnumLite {\n-      Json(0, 1),\n-      Protobuf(1, 2),\n-      Thrift(2, 3),\n-      Avro(3, 4),\n+      None(0, 0),\n+      String(1, 1),\n+      Json(2, 2),\n       ;\n       \n-      public static final int Json_VALUE = 1;\n-      public static final int Protobuf_VALUE = 2;\n-      public static final int Thrift_VALUE = 3;\n-      public static final int Avro_VALUE = 4;\n+      public static final int None_VALUE = 0;\n+      public static final int String_VALUE = 1;\n+      public static final int Json_VALUE = 2;\n       \n       \n       public final int getNumber() { return value; }\n       \n       public static Type valueOf(int value) {\n         switch (value) {\n-          case 1: return Json;\n-          case 2: return Protobuf;\n-          case 3: return Thrift;\n-          case 4: return Avro;\n+          case 0: return None;\n+          case 1: return String;\n+          case 2: return Json;\n           default: return null;\n         }\n       }\n@@ -440,7 +437,7 @@ public int getPropertiesCount() {\n     private void initFields() {\n       name_ = \"\";\n       schemaData_ = com.google.protobuf.ByteString.EMPTY;\n-      type_ = org.apache.pulsar.common.api.proto.PulsarApi.Schema.Type.Json;\n+      type_ = org.apache.pulsar.common.api.proto.PulsarApi.Schema.Type.None;\n       properties_ = java.util.Collections.emptyList();\n     }\n     private byte memoizedIsInitialized = -1;\n@@ -631,7 +628,7 @@ public Builder clear() {\n         bitField0_ = (bitField0_ & ~0x00000001);\n         schemaData_ = com.google.protobuf.ByteString.EMPTY;\n         bitField0_ = (bitField0_ & ~0x00000002);\n-        type_ = org.apache.pulsar.common.api.proto.PulsarApi.Schema.Type.Json;\n+        type_ = org.apache.pulsar.common.api.proto.PulsarApi.Schema.Type.None;\n         bitField0_ = (bitField0_ & ~0x00000004);\n         properties_ = java.util.Collections.emptyList();\n         bitField0_ = (bitField0_ & ~0x00000008);\n@@ -849,7 +846,7 @@ public Builder clearSchemaData() {\n       }\n       \n       // required .pulsar.proto.Schema.Type type = 4;\n-      private org.apache.pulsar.common.api.proto.PulsarApi.Schema.Type type_ = org.apache.pulsar.common.api.proto.PulsarApi.Schema.Type.Json;\n+      private org.apache.pulsar.common.api.proto.PulsarApi.Schema.Type type_ = org.apache.pulsar.common.api.proto.PulsarApi.Schema.Type.None;\n       public boolean hasType() {\n         return ((bitField0_ & 0x00000004) == 0x00000004);\n       }\n@@ -867,7 +864,7 @@ public Builder setType(org.apache.pulsar.common.api.proto.PulsarApi.Schema.Type\n       }\n       public Builder clearType() {\n         bitField0_ = (bitField0_ & ~0x00000004);\n-        type_ = org.apache.pulsar.common.api.proto.PulsarApi.Schema.Type.Json;\n+        type_ = org.apache.pulsar.common.api.proto.PulsarApi.Schema.Type.None;\n         \n         return this;\n       }",
                "changes": 29,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-common/src/main/java/org/apache/pulsar/common/api/proto/PulsarApi.java"
            },
            {
                "additions": 3,
                "sha": "d97875f19a8e2daa90b59dfc2e84386f21a3a769",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-common/src/main/java/org/apache/pulsar/common/schema/SchemaInfo.java",
                "deletions": 1,
                "filename": "pulsar-common/src/main/java/org/apache/pulsar/common/schema/SchemaInfo.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-common/src/main/java/org/apache/pulsar/common/schema/SchemaInfo.java?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -18,13 +18,15 @@\n  */\n package org.apache.pulsar.common.schema;\n \n+import java.util.Collections;\n import java.util.Map;\n+\n import lombok.Data;\n \n @Data\n public class SchemaInfo {\n     private String name;\n     private byte[] schema;\n     private SchemaType type;\n-    private Map<String, String> properties;\n+    private Map<String, String> properties = Collections.emptyMap();\n }",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-common/src/main/java/org/apache/pulsar/common/schema/SchemaInfo.java"
            },
            {
                "additions": 17,
                "sha": "ad56bf29fe3762b6b116a17363559354fd2f22bc",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-common/src/main/java/org/apache/pulsar/common/schema/SchemaType.java",
                "deletions": 1,
                "filename": "pulsar-common/src/main/java/org/apache/pulsar/common/schema/SchemaType.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-common/src/main/java/org/apache/pulsar/common/schema/SchemaType.java?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -18,6 +18,22 @@\n  */\n package org.apache.pulsar.common.schema;\n \n+/**\n+ * Types of supported schema for Pulsar messages\n+ */\n public enum SchemaType {\n-    AVRO, PROTOBUF, THRIFT, JSON, NONE\n+    /**\n+     * No schema defined\n+     */\n+    NONE,\n+\n+    /**\n+     * Simple String encoding with UTF-8\n+     */\n+    STRING,\n+\n+    /**\n+     * JSON object encoding and validation\n+     */\n+    JSON\n }",
                "changes": 18,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-common/src/main/java/org/apache/pulsar/common/schema/SchemaType.java"
            },
            {
                "additions": 4,
                "sha": "7e76521b9b3c3437b74f3ba7ab31f7873d4d2ecf",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-common/src/main/proto/PulsarApi.proto",
                "deletions": 5,
                "filename": "pulsar-common/src/main/proto/PulsarApi.proto",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-common/src/main/proto/PulsarApi.proto?ref=3a6e0e205de7272585e9978e619dc80638da5cfc",
                "patch": "@@ -24,17 +24,16 @@ option optimize_for = LITE_RUNTIME;\n \n message Schema {\n \tenum Type {\n-\t\tJson = 1;\n-\t\tProtobuf = 2;\n-\t\tThrift = 3;\n-\t\tAvro = 4;\n+\t\tNone = 0;\n+\t\tString = 1;\n+\t\tJson = 2;\n \t}\n \n     required string name = 1;\n     required bytes schema_data = 3;\n \trequired Type type = 4;\n     repeated KeyValue properties = 5;\n-\t\n+\n }\n \n message MessageIdData {",
                "changes": 9,
                "blob_url": "https://github.com/apache/pulsar/blob/3a6e0e205de7272585e9978e619dc80638da5cfc/pulsar-common/src/main/proto/PulsarApi.proto"
            }
        ],
        "repo": "pulsar",
        "message": "Fixed NPE and added test for Schema.STRING (#1685)\n\n* Fixed NPE and added test for Schema.STRING\r\n\r\n* Added license exclusion for generated file SchemaRegistryFormat.java",
        "commit": "https://github.com/apache/pulsar/commit/3a6e0e205de7272585e9978e619dc80638da5cfc"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/adc4c1da340fe1ac285b1c91a211f48b90b7031e",
        "bug_id": "pulsar_41",
        "file": [
            {
                "additions": 3,
                "sha": "5660773ce3378818e424c15ec2cb92766d3087ff",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/85afd6e49912996e594047193811826031134f9a/pulsar-client-api/src/main/java/org/apache/pulsar/client/api/Schema.java",
                "deletions": 1,
                "filename": "pulsar-client-api/src/main/java/org/apache/pulsar/client/api/Schema.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client-api/src/main/java/org/apache/pulsar/client/api/Schema.java?ref=85afd6e49912996e594047193811826031134f9a",
                "patch": "@@ -196,7 +196,9 @@ default T decode(byte[] bytes, byte[] schemaVersion) {\n     /**\n      * Schema that can be used to encode/decode KeyValue.\n      */\n-    Schema<KeyValue<byte[], byte[]>> KV_BYTES = DefaultImplementation.newKeyValueSchema(BYTES, BYTES);\n+    static Schema<KeyValue<byte[], byte[]>> KV_BYTES() {\n+        return DefaultImplementation.newKeyValueBytesSchema();\n+    }\n \n     /**\n      * Key Value Schema whose underneath key and value schemas are JSONSchema.",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/85afd6e49912996e594047193811826031134f9a/pulsar-client-api/src/main/java/org/apache/pulsar/client/api/Schema.java"
            },
            {
                "additions": 8,
                "sha": "873b041bdf78b37c7420870fb3824cb85244e7f1",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/85afd6e49912996e594047193811826031134f9a/pulsar-client-api/src/main/java/org/apache/pulsar/client/internal/DefaultImplementation.java",
                "deletions": 2,
                "filename": "pulsar-client-api/src/main/java/org/apache/pulsar/client/internal/DefaultImplementation.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client-api/src/main/java/org/apache/pulsar/client/internal/DefaultImplementation.java?ref=85afd6e49912996e594047193811826031134f9a",
                "patch": "@@ -212,10 +212,16 @@ public static Authentication createAuthentication(String authPluginClassName, Ma\n                         .newInstance());\n     }\n \n+    public static Schema<KeyValue<byte[], byte[]>> newKeyValueBytesSchema() {\n+        return catchExceptions(\n+                () -> (Schema<KeyValue<byte[], byte[]>>) getStaticMethod(\"org.apache.pulsar.client.impl.schema.KeyValueSchema\",\n+                        \"kvBytes\").invoke(null));\n+    }\n+\n     public static <K, V> Schema<KeyValue<K, V>> newKeyValueSchema(Schema<K> keySchema, Schema<V> valueSchema) {\n         return catchExceptions(\n-                () -> (Schema<KeyValue<K, V>>) getConstructor(\"org.apache.pulsar.client.impl.schema.KeyValueSchema\",\n-                        Schema.class, Schema.class).newInstance(keySchema, valueSchema));\n+                () -> (Schema<KeyValue<K, V>>) getStaticMethod(\"org.apache.pulsar.client.impl.schema.KeyValueSchema\",\n+                        \"of\", Schema.class, Schema.class).invoke(null, keySchema, valueSchema));\n     }\n \n     public static <K, V> Schema<KeyValue<K, V>> newKeyValueSchema(Class<K> key, Class<V> value, SchemaType type) {",
                "changes": 10,
                "blob_url": "https://github.com/apache/pulsar/blob/85afd6e49912996e594047193811826031134f9a/pulsar-client-api/src/main/java/org/apache/pulsar/client/internal/DefaultImplementation.java"
            },
            {
                "additions": 14,
                "sha": "a268aeae3eee8592411d0e676e5b0ca097175b15",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/85afd6e49912996e594047193811826031134f9a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/KeyValueSchema.java",
                "deletions": 2,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/KeyValueSchema.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/KeyValueSchema.java?ref=85afd6e49912996e594047193811826031134f9a",
                "patch": "@@ -55,8 +55,20 @@\n         }\n     }\n \n-    public KeyValueSchema(Schema<K> keySchema,\n-                          Schema<V> valueSchema) {\n+    public static <K, V> Schema<KeyValue<K, V>> of(Schema<K> keySchema, Schema<V> valueSchema) {\n+        return new KeyValueSchema<>(keySchema, valueSchema);\n+    }\n+\n+    private static final Schema<KeyValue<byte[], byte[]>> KV_BYTES = new KeyValueSchema<>(\n+        BytesSchema.of(),\n+        BytesSchema.of());\n+\n+    public static Schema<KeyValue<byte[], byte[]>> kvBytes() {\n+        return KV_BYTES;\n+    }\n+\n+    private KeyValueSchema(Schema<K> keySchema,\n+                           Schema<V> valueSchema) {\n         this.keySchema = keySchema;\n         this.valueSchema = valueSchema;\n ",
                "changes": 16,
                "blob_url": "https://github.com/apache/pulsar/blob/85afd6e49912996e594047193811826031134f9a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/KeyValueSchema.java"
            },
            {
                "additions": 52,
                "sha": "9a2b6caf60c1cae17f792ba5dc3de882716baa1b",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/85afd6e49912996e594047193811826031134f9a/pulsar-client/src/test/java/org/apache/pulsar/client/impl/schema/BytesSchemaTest.java",
                "deletions": 0,
                "filename": "pulsar-client/src/test/java/org/apache/pulsar/client/impl/schema/BytesSchemaTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/test/java/org/apache/pulsar/client/impl/schema/BytesSchemaTest.java?ref=85afd6e49912996e594047193811826031134f9a",
                "patch": "@@ -0,0 +1,52 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.client.impl.schema;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.testng.Assert.assertSame;\n+\n+import org.apache.pulsar.client.api.Schema;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Unit test {@link BytesSchema}.\n+ */\n+public class BytesSchemaTest {\n+\n+    @Test\n+    public void testBytesSchemaOf() {\n+        testBytesSchema(BytesSchema.of());\n+    }\n+\n+    @Test\n+    public void testSchemaBYTES() {\n+        testBytesSchema(Schema.BYTES);\n+    }\n+\n+    private void testBytesSchema(Schema<byte[]> schema) {\n+        byte[] data = \"hello world\".getBytes(UTF_8);\n+\n+        byte[] serializedData = schema.encode(data);\n+        assertSame(data, serializedData);\n+\n+        byte[] deserializedData = schema.decode(serializedData);\n+        assertSame(data, deserializedData);\n+    }\n+\n+}",
                "changes": 52,
                "blob_url": "https://github.com/apache/pulsar/blob/85afd6e49912996e594047193811826031134f9a/pulsar-client/src/test/java/org/apache/pulsar/client/impl/schema/BytesSchemaTest.java"
            },
            {
                "additions": 2,
                "sha": "2963d622f737f0a153aa9d7fad611baf4baf817b",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/85afd6e49912996e594047193811826031134f9a/pulsar-client/src/test/java/org/apache/pulsar/client/impl/schema/KeyValueSchemaTest.java",
                "deletions": 2,
                "filename": "pulsar-client/src/test/java/org/apache/pulsar/client/impl/schema/KeyValueSchemaTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/test/java/org/apache/pulsar/client/impl/schema/KeyValueSchemaTest.java?ref=85afd6e49912996e594047193811826031134f9a",
                "patch": "@@ -137,8 +137,8 @@ public void testBytesSchemaEncodeAndDecode() {\n         byte[] fooBytes = fooAvroSchema.encode(foo);\n         byte[] barBytes = barAvroSchema.encode(bar);\n \n-        byte[] encodeBytes = Schema.KV_BYTES.encode(new KeyValue<>(fooBytes, barBytes));\n-        KeyValue<byte[], byte[]> decodeKV = Schema.KV_BYTES.decode(encodeBytes);\n+        byte[] encodeBytes = Schema.KV_BYTES().encode(new KeyValue<>(fooBytes, barBytes));\n+        KeyValue<byte[], byte[]> decodeKV = Schema.KV_BYTES().decode(encodeBytes);\n \n         Foo fooBack = fooAvroSchema.decode(decodeKV.getKey());\n         Bar barBack = barAvroSchema.decode(decodeKV.getValue());",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/85afd6e49912996e594047193811826031134f9a/pulsar-client/src/test/java/org/apache/pulsar/client/impl/schema/KeyValueSchemaTest.java"
            },
            {
                "additions": 1,
                "sha": "21f8b0024caf3638b3fe6fd60f9ee922eb6e777f",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/85afd6e49912996e594047193811826031134f9a/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/TopicSchema.java",
                "deletions": 1,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/TopicSchema.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/TopicSchema.java?ref=85afd6e49912996e594047193811826031134f9a",
                "patch": "@@ -130,7 +130,7 @@ private static SchemaType getDefaultSchemaType(Class<?> clazz) {\n             return JSONSchema.of(clazz);\n \n         case KEY_VALUE:\n-            return (Schema<T>)Schema.KV_BYTES;\n+            return (Schema<T>)Schema.KV_BYTES();\n \n         case PROTOBUF:\n             return ProtobufSchema.ofGenericClass(clazz, Collections.emptyMap());",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/85afd6e49912996e594047193811826031134f9a/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/TopicSchema.java"
            }
        ],
        "repo": "pulsar",
        "message": "NullPointerException at using BytesSchema.of() (#3754)\n\nFixes #3734\r\n\r\n*Motivation*\r\n\r\nException occurred when using `BytesSchema.of()`\r\n\r\n```\r\nException in thread \"main\" java.lang.ExceptionInInitializerError\r\n\tat org.apache.pulsar.examples.simple.ProducerExample.main(ProducerExample.java:32)\r\nCaused by: java.lang.RuntimeException: java.lang.reflect.InvocationTargetException\r\n\tat org.apache.pulsar.client.internal.ReflectionUtils.catchExceptions(ReflectionUtils.java:36)\r\n\tat org.apache.pulsar.client.internal.DefaultImplementation.newKeyValueSchema(DefaultImplementation.java:158)\r\n\tat org.apache.pulsar.client.api.Schema.<clinit>(Schema.java:123)\r\n\t... 1 more\r\nCaused by: java.lang.reflect.InvocationTargetException\r\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n\tat org.apache.pulsar.client.internal.DefaultImplementation.lambda$newKeyValueSchema$16(DefaultImplementation.java:160)\r\n\tat org.apache.pulsar.client.internal.ReflectionUtils.catchExceptions(ReflectionUtils.java:34)\r\n\t... 3 more\r\nCaused by: java.lang.NullPointerException\r\n\tat org.apache.pulsar.client.impl.schema.KeyValueSchema.<init>(KeyValueSchema.java:68)\r\n\t... 9 more\r\n```\r\n\r\nThe problem introduced because the weird class loading and reflection sequence.\r\n\r\nWhen accessing `BytesSchema`, `BytesSchema` will try to initialize `Schema`. When initializing Schema, it will attempts\r\nto initialize `KV_BYTES` using reflection, and initializing KV_BYTES requires `BytesSchema`. Hence it causes KV_BYTES not being\r\ninitialized correctly.\r\n\r\nThe change is to avoid this recursive class loading.",
        "commit": "https://github.com/apache/pulsar/commit/85afd6e49912996e594047193811826031134f9a"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/1473bda6329fcae97f476c351a84df7990b66b6e",
        "bug_id": "pulsar_42",
        "file": [
            {
                "additions": 11,
                "sha": "0e58796786b8b55108a2b13da75a55bdcd13affc",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-client/src/main/java/org/apache/pulsar/client/impl/PulsarClientImpl.java",
                "deletions": 0,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/PulsarClientImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/PulsarClientImpl.java?ref=17d2b4213ed401bc6dad14f4f76ef8ce270b0461",
                "patch": "@@ -44,6 +44,7 @@\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.pulsar.client.api.Consumer;\n import org.apache.pulsar.client.api.ConsumerBuilder;\n import org.apache.pulsar.client.api.Producer;\n@@ -57,6 +58,7 @@\n import org.apache.pulsar.client.api.SubscriptionType;\n import org.apache.pulsar.client.api.schema.GenericSchema;\n import org.apache.pulsar.client.api.schema.SchemaInfoProvider;\n+import org.apache.pulsar.client.api.AuthenticationFactory;\n import org.apache.pulsar.client.impl.ConsumerImpl.SubscriptionMode;\n import org.apache.pulsar.client.impl.conf.ClientConfigurationData;\n import org.apache.pulsar.client.impl.conf.ConsumerConfigurationData;\n@@ -127,6 +129,7 @@ public PulsarClientImpl(ClientConfigurationData conf, EventLoopGroup eventLoopGr\n             throw new PulsarClientException.InvalidConfigurationException(\"Invalid client configuration\");\n         }\n         this.eventLoopGroup = eventLoopGroup;\n+        setAuth(conf);\n         this.conf = conf;\n         conf.getAuthentication().start();\n         this.cnxPool = cnxPool;\n@@ -142,6 +145,14 @@ public PulsarClientImpl(ClientConfigurationData conf, EventLoopGroup eventLoopGr\n         state.set(State.Open);\n     }\n \n+    private void setAuth(ClientConfigurationData conf) throws PulsarClientException {\n+        if (StringUtils.isBlank(conf.getAuthPluginClassName()) || StringUtils.isBlank( conf.getAuthParams())) {\n+            return;\n+        }\n+\n+        conf.setAuthentication(AuthenticationFactory.create(conf.getAuthPluginClassName(), conf.getAuthParams()));\n+    }\n+\n     public ClientConfigurationData getConfiguration() {\n         return conf;\n     }",
                "changes": 11,
                "blob_url": "https://github.com/apache/pulsar/blob/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-client/src/main/java/org/apache/pulsar/client/impl/PulsarClientImpl.java"
            },
            {
                "additions": 9,
                "sha": "3ab86382c81f8d86593dcd7f45e9f6b8f3d5b6cd",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ClientConfigurationData.java",
                "deletions": 6,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ClientConfigurationData.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ClientConfigurationData.java?ref=17d2b4213ed401bc6dad14f4f76ef8ce270b0461",
                "patch": "@@ -28,14 +28,12 @@\n import org.apache.pulsar.client.impl.auth.AuthenticationDisabled;\n \n import java.io.Serializable;\n-import java.util.Map;\n import java.util.concurrent.TimeUnit;\n \n /**\n  * This is a simple holder of the client configuration values.\n  */\n @Data\n-@Builder\n @NoArgsConstructor\n @AllArgsConstructor\n public class ClientConfigurationData implements Serializable, Cloneable {\n@@ -47,10 +45,8 @@\n \n     @JsonIgnore\n     private transient Authentication authentication = new AuthenticationDisabled();\n-    @JsonIgnore\n-    private transient String authPluginClassName;\n-    @JsonIgnore\n-    private transient Map<String, String> authParams;\n+    private String authPluginClassName;\n+    private String authParams;\n \n     private long operationTimeoutMs = 30000;\n     private long statsIntervalSeconds = 60;\n@@ -74,6 +70,13 @@\n     private long defaultBackoffIntervalNanos = TimeUnit.MILLISECONDS.toNanos(100);\n     private long maxBackoffIntervalNanos = TimeUnit.SECONDS.toNanos(30);\n \n+    public Authentication getAuthentication() {\n+        if (authentication == null) {\n+            this.authentication = new AuthenticationDisabled();\n+        }\n+        return authentication;\n+    }\n+\n     public boolean isUseTls() {\n         if (useTls)\n             return true;",
                "changes": 15,
                "blob_url": "https://github.com/apache/pulsar/blob/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ClientConfigurationData.java"
            },
            {
                "additions": 0,
                "sha": "8aca7b2e7f0d4ec2df05fb133058ae19133ec269",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ConsumerConfigurationData.java",
                "deletions": 1,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ConsumerConfigurationData.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ConsumerConfigurationData.java?ref=17d2b4213ed401bc6dad14f4f76ef8ce270b0461",
                "patch": "@@ -45,7 +45,6 @@\n import org.apache.pulsar.client.api.SubscriptionType;\n \n @Data\n-@Builder\n @NoArgsConstructor\n @AllArgsConstructor\n public class ConsumerConfigurationData<T> implements Serializable, Cloneable {",
                "changes": 1,
                "blob_url": "https://github.com/apache/pulsar/blob/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ConsumerConfigurationData.java"
            },
            {
                "additions": 0,
                "sha": "7ec8f9051f31f2e1ee9124118f233bd000f28dd9",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ProducerConfigurationData.java",
                "deletions": 1,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ProducerConfigurationData.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ProducerConfigurationData.java?ref=17d2b4213ed401bc6dad14f4f76ef8ce270b0461",
                "patch": "@@ -42,7 +42,6 @@\n import lombok.Data;\n \n @Data\n-@Builder\n @NoArgsConstructor\n @AllArgsConstructor\n public class ProducerConfigurationData implements Serializable, Cloneable {",
                "changes": 1,
                "blob_url": "https://github.com/apache/pulsar/blob/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ProducerConfigurationData.java"
            },
            {
                "additions": 30,
                "sha": "e3a94ee8728306b08ddb62802299c6cd9b7731df",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-client/src/test/java/org/apache/pulsar/client/impl/auth/AuthenticationTokenTest.java",
                "deletions": 0,
                "filename": "pulsar-client/src/test/java/org/apache/pulsar/client/impl/auth/AuthenticationTokenTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/test/java/org/apache/pulsar/client/impl/auth/AuthenticationTokenTest.java?ref=17d2b4213ed401bc6dad14f4f76ef8ce270b0461",
                "patch": "@@ -29,7 +29,10 @@\n import java.util.Collections;\n \n import org.apache.commons.io.FileUtils;\n+import org.apache.pulsar.client.api.Authentication;\n import org.apache.pulsar.client.api.AuthenticationDataProvider;\n+import org.apache.pulsar.client.impl.PulsarClientImpl;\n+import org.apache.pulsar.client.impl.conf.ClientConfigurationData;\n import org.testng.annotations.Test;\n \n public class AuthenticationTokenTest {\n@@ -54,6 +57,33 @@ public void testAuthToken() throws Exception {\n         authToken.close();\n     }\n \n+    @Test\n+    public void testAuthTokenClientConfig() throws Exception {\n+        ClientConfigurationData clientConfig = new ClientConfigurationData();\n+        clientConfig.setServiceUrl(\"pulsar://service-url\");\n+        clientConfig.setAuthPluginClassName(AuthenticationToken.class.getName());\n+        clientConfig.setAuthParams(\"token-xyz\");\n+\n+        PulsarClientImpl pulsarClient = new PulsarClientImpl(clientConfig);\n+\n+        Authentication authToken = pulsarClient.getConfiguration().getAuthentication();\n+        assertEquals(authToken.getAuthMethodName(), \"token\");\n+\n+        AuthenticationDataProvider authData = authToken.getAuthData();\n+        assertTrue(authData.hasDataFromCommand());\n+        assertEquals(authData.getCommandData(), \"token-xyz\");\n+\n+        assertFalse(authData.hasDataForTls());\n+        assertNull(authData.getTlsCertificates());\n+        assertNull(authData.getTlsPrivateKey());\n+\n+        assertTrue(authData.hasDataForHttp());\n+        assertEquals(authData.getHttpHeaders(),\n+                Collections.singletonMap(\"Authorization\", \"Bearer token-xyz\").entrySet());\n+\n+        authToken.close();\n+    }\n+\n     @Test\n     public void testAuthTokenConfig() throws Exception {\n         AuthenticationToken authToken = new AuthenticationToken();",
                "changes": 30,
                "blob_url": "https://github.com/apache/pulsar/blob/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-client/src/test/java/org/apache/pulsar/client/impl/auth/AuthenticationTokenTest.java"
            },
            {
                "additions": 18,
                "sha": "626c501015fc1b7f8d205ea728e5cd9b5a9896fc",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-client/src/test/java/org/apache/pulsar/client/impl/conf/ConfigurationDataUtilsTest.java",
                "deletions": 0,
                "filename": "pulsar-client/src/test/java/org/apache/pulsar/client/impl/conf/ConfigurationDataUtilsTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/test/java/org/apache/pulsar/client/impl/conf/ConfigurationDataUtilsTest.java?ref=17d2b4213ed401bc6dad14f4f76ef8ce270b0461",
                "patch": "@@ -25,6 +25,9 @@\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n+\n+import org.apache.pulsar.client.api.PulsarClientException;\n+import org.apache.pulsar.client.impl.PulsarClientImpl;\n import org.testng.annotations.Test;\n \n /**\n@@ -108,4 +111,19 @@ public void testLoadConfigurationDataWithUnknownFields() {\n             assertTrue(re.getCause() instanceof IOException);\n         }\n     }\n+\n+    @Test\n+    public void testConfigBuilder() throws PulsarClientException {\n+        ClientConfigurationData clientConfig = new ClientConfigurationData();\n+        clientConfig.setServiceUrl(\"pulsar://unknown:6650\");\n+        clientConfig.setStatsIntervalSeconds(80);\n+\n+        PulsarClientImpl pulsarClient = new PulsarClientImpl(clientConfig);\n+        assertTrue(pulsarClient != null, \"Pulsar client built using config should not be null\");\n+\n+        assertTrue(pulsarClient.getConfiguration().getServiceUrl().equals(\"pulsar://unknown:6650\"));\n+        assertEquals(pulsarClient.getConfiguration().getNumListenerThreads(), 1, \"builder default not set properly\");\n+        assertEquals(pulsarClient.getConfiguration().getStatsIntervalSeconds(), 80,\n+                \"builder default should overrite if set explicitly\");\n+    }\n }",
                "changes": 18,
                "blob_url": "https://github.com/apache/pulsar/blob/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-client/src/test/java/org/apache/pulsar/client/impl/conf/ConfigurationDataUtilsTest.java"
            },
            {
                "additions": 1,
                "sha": "d4a25ee8dca9d791dfa44a099c501991b7aee20c",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/main/java/org/apache/flink/streaming/connectors/pulsar/PulsarSourceBuilder.java",
                "deletions": 1,
                "filename": "pulsar-flink/src/main/java/org/apache/flink/streaming/connectors/pulsar/PulsarSourceBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-flink/src/main/java/org/apache/flink/streaming/connectors/pulsar/PulsarSourceBuilder.java?ref=17d2b4213ed401bc6dad14f4f76ef8ce270b0461",
                "patch": "@@ -290,7 +290,7 @@ private void setTransientFields() throws PulsarClientException {\n \n     private void setAuth() throws PulsarClientException{\n         if (StringUtils.isBlank(this.clientConfigurationData.getAuthPluginClassName())\n-                && this.clientConfigurationData.getAuthParams() == null || this.clientConfigurationData.getAuthParams().isEmpty())\n+                || StringUtils.isBlank(this.clientConfigurationData.getAuthParams()))\n             return;\n \n         clientConfigurationData.setAuthentication(",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/main/java/org/apache/flink/streaming/connectors/pulsar/PulsarSourceBuilder.java"
            },
            {
                "additions": 20,
                "sha": "736c41751586da00d345cb94dc239870166297af",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarAvroOutputFormatTest.java",
                "deletions": 30,
                "filename": "pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarAvroOutputFormatTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarAvroOutputFormatTest.java?ref=17d2b4213ed401bc6dad14f4f76ef8ce270b0461",
                "patch": "@@ -61,65 +61,55 @@ public void testPulsarAvroOutputFormatConstructor() {\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarAvroOutputFormatConstructorV2WhenServiceUrlIsNull() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(null)\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(null);\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(\"testTopic\")\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(\"testTopic\");\n \n         new PulsarAvroOutputFormat(clientConf, producerConf);\n     }\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarAvroOutputFormatConstructorV2WhenTopicNameIsNull() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(\"testServiceUrl\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(null)\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(null);\n \n         new PulsarAvroOutputFormat(clientConf, producerConf);\n     }\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarAvroOutputFormatConstructorV2WhenTopicNameIsBlank() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(\"testServiceUrl\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(StringUtils.EMPTY)\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(StringUtils.EMPTY);\n \n         new PulsarAvroOutputFormat(clientConf, producerConf);\n     }\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarAvroOutputFormatConstructorV2WhenServiceUrlIsBlank() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(StringUtils.EMPTY)\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(StringUtils.EMPTY);\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(StringUtils.EMPTY)\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(StringUtils.EMPTY);\n \n         new PulsarAvroOutputFormat(clientConf, producerConf);\n     }\n \n     @Test\n     public void testPulsarAvroOutputFormatConstructorV2() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(\"testServiceUrl\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(\"testTopic\")\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(\"testTopic\");\n \n         PulsarAvroOutputFormat pulsarAvroOutputFormat = new PulsarAvroOutputFormat(clientConf, producerConf);\n         assertNotNull(pulsarAvroOutputFormat);",
                "changes": 50,
                "blob_url": "https://github.com/apache/pulsar/blob/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarAvroOutputFormatTest.java"
            },
            {
                "additions": 20,
                "sha": "713f867b81b7bcfeb4c35266966acb0c86f3dd40",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarCsvOutputFormatTest.java",
                "deletions": 30,
                "filename": "pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarCsvOutputFormatTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarCsvOutputFormatTest.java?ref=17d2b4213ed401bc6dad14f4f76ef8ce270b0461",
                "patch": "@@ -60,65 +60,55 @@ public void testPulsarCsvOutputFormatConstructor() {\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarCsvOutputFormatConstructorV2WhenServiceUrlIsNull() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(null)\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(null);\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(\"testTopic\")\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(\"testTopic\");\n \n         new PulsarAvroOutputFormat(clientConf, producerConf);\n     }\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarCsvOutputFormatConstructorV2WhenTopicNameIsNull() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(\"testServiceUrl\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(null)\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(null);\n \n         new PulsarAvroOutputFormat(clientConf, producerConf);\n     }\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarCsvOutputFormatConstructorV2WhenTopicNameIsBlank() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(\"testServiceUrl\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(StringUtils.EMPTY)\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(StringUtils.EMPTY);\n \n         new PulsarAvroOutputFormat(clientConf, producerConf);\n     }\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarCsvOutputFormatConstructorV2WhenServiceUrlIsBlank() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(StringUtils.EMPTY)\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(StringUtils.EMPTY);\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(\"testTopic\")\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(\"testTopic\");\n \n         new PulsarAvroOutputFormat(clientConf, producerConf);\n     }\n \n     @Test\n     public void testPulsarCsvOutputFormatConstructorV2() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(\"testServiceUrl\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(\"testTopic\")\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(\"testTopic\");\n \n         PulsarCsvOutputFormat pulsarCsvOutputFormat = new PulsarCsvOutputFormat(clientConf, producerConf);\n         assertNotNull(pulsarCsvOutputFormat);",
                "changes": 50,
                "blob_url": "https://github.com/apache/pulsar/blob/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarCsvOutputFormatTest.java"
            },
            {
                "additions": 20,
                "sha": "d45d9b14ba67264ec65ef44cfd159af79cc3c35f",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarJsonOutputFormatTest.java",
                "deletions": 30,
                "filename": "pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarJsonOutputFormatTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarJsonOutputFormatTest.java?ref=17d2b4213ed401bc6dad14f4f76ef8ce270b0461",
                "patch": "@@ -60,65 +60,55 @@ public void testPulsarJsonOutputFormatConstructor() {\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarJsonOutputFormatConstructorV2WhenServiceUrlIsNull() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(null)\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(null);\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(\"testTopic\")\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(\"testTopic\");\n \n         new PulsarAvroOutputFormat(clientConf, producerConf);\n     }\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarJsonROutputFormatConstructorV2WhenTopicNameIsNull() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(\"testServiceUrl\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(null)\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(null);\n \n         new PulsarAvroOutputFormat(clientConf, producerConf);\n     }\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarJsonOutputFormatConstructorV2WhenTopicNameIsBlank() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(\"testServiceUrl\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(StringUtils.EMPTY)\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(StringUtils.EMPTY);\n \n         new PulsarAvroOutputFormat(clientConf, producerConf);\n     }\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarJsonOutputFormatConstructorV2WhenServiceUrlIsBlank() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(StringUtils.EMPTY)\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(StringUtils.EMPTY);\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(\"testTopic\")\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(\"testTopic\");\n \n         new PulsarAvroOutputFormat(clientConf, producerConf);\n     }\n \n     @Test\n     public void testPulsarJsonOutputFormatConstructorV2() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(\"testServiceUrl\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(\"testTopic\")\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(\"testTopic\");\n \n         PulsarJsonOutputFormat pulsarJsonOutputFormat = new PulsarJsonOutputFormat(clientConf, producerConf);\n         assertNotNull(pulsarJsonOutputFormat);",
                "changes": 50,
                "blob_url": "https://github.com/apache/pulsar/blob/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarJsonOutputFormatTest.java"
            },
            {
                "additions": 25,
                "sha": "97b23b4868cc86830f0676711c11223fd38a6900",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarOutputFormatTest.java",
                "deletions": 36,
                "filename": "pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarOutputFormatTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarOutputFormatTest.java?ref=17d2b4213ed401bc6dad14f4f76ef8ce270b0461",
                "patch": "@@ -64,76 +64,65 @@ public void testPulsarOutputFormatConstructorWhenSerializationSchemaIsNull() {\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarOutputFormatConstructorV2WhenServiceUrlIsNull() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(null)\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(null);\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(\"testTopic\")\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(\"testTopic\");\n \n         new PulsarOutputFormat(clientConf, producerConf, text -> text.toString().getBytes());\n     }\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarOutputFormatConstructorV2WhenTopicNameIsNull() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(\"testServiceUrl\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(null)\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(null);\n \n         new PulsarOutputFormat(clientConf, producerConf, text -> text.toString().getBytes());\n     }\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarOutputFormatConstructorV2WhenTopicNameIsBlank() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(\"testServiceUrl\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(StringUtils.EMPTY)\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(StringUtils.EMPTY);\n \n         new PulsarOutputFormat(clientConf, producerConf, text -> text.toString().getBytes());\n     }\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testPulsarOutputFormatConstructorV2WhenServiceUrlIsBlank() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(StringUtils.EMPTY)\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(StringUtils.EMPTY);\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(\"testTopic\")\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(\"testTopic\");\n \n         new PulsarOutputFormat(clientConf, producerConf, text -> text.toString().getBytes());\n     }\n \n     @Test(expectedExceptions = NullPointerException.class)\n     public void testPulsarOutputFormatConstructorV2WhenSerializationSchemaIsNull() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(\"testServiceUrl\")\n-                .build();\n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(\"testTopic\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n+\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(\"testTopic\");\n         new PulsarOutputFormat(clientConf, producerConf, null);\n     }\n \n     @Test\n     public void testPulsarOutputFormatConstructorV2() {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(\"testServiceUrl\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n \n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(\"testTopic\")\n-                .build();\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(\"testTopic\");\n \n         PulsarCsvOutputFormat pulsarCsvOutputFormat = new PulsarCsvOutputFormat(clientConf, producerConf);\n         assertNotNull(pulsarCsvOutputFormat);",
                "changes": 61,
                "blob_url": "https://github.com/apache/pulsar/blob/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/test/java/org/apache/flink/batch/connectors/pulsar/PulsarOutputFormatTest.java"
            },
            {
                "additions": 5,
                "sha": "7fd48c2f15ab1ed2ee90af2f147e22fe53e98a0a",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarAvroTableSinkTest.java",
                "deletions": 6,
                "filename": "pulsar-flink/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarAvroTableSinkTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-flink/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarAvroTableSinkTest.java?ref=17d2b4213ed401bc6dad14f4f76ef8ce270b0461",
                "patch": "@@ -91,12 +91,11 @@ public void testEmitDataStream() throws Exception {\n \n     private PulsarAvroTableSink spySink() throws Exception {\n \n-        ClientConfigurationData clientConf = ClientConfigurationData.builder()\n-                .serviceUrl(SERVICE_URL)\n-                .build();\n-        ProducerConfigurationData producerConf = ProducerConfigurationData.builder()\n-                .topicName(TOPIC_NAME)\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(SERVICE_URL);\n+\n+        ProducerConfigurationData producerConf = new ProducerConfigurationData();\n+        producerConf.setTopicName(TOPIC_NAME);\n \n         PulsarAvroTableSink sink =\n                 new PulsarAvroTableSink(clientConf, producerConf, ROUTING_KEY, NasaMission.class);",
                "changes": 11,
                "blob_url": "https://github.com/apache/pulsar/blob/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarAvroTableSinkTest.java"
            },
            {
                "additions": 8,
                "sha": "668a8e5542f7e120e67fe1ef4e8f61c63672da45",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarJsonTableSinkTest.java",
                "deletions": 2,
                "filename": "pulsar-flink/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarJsonTableSinkTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-flink/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarJsonTableSinkTest.java?ref=17d2b4213ed401bc6dad14f4f76ef8ce270b0461",
                "patch": "@@ -85,10 +85,16 @@ public void testEmitDataStream() throws Exception {\n     }\n \n     private PulsarJsonTableSink spySink() throws Exception {\n+        ClientConfigurationData clientConfigurationData = new ClientConfigurationData();\n+        clientConfigurationData.setServiceUrl(SERVICE_URL);\n+\n+        ProducerConfigurationData producerConfigurationData = new ProducerConfigurationData();\n+        producerConfigurationData.setTopicName(TOPIC_NAME);\n+\n         PulsarJsonTableSink sink = new PulsarJsonTableSink(\n-                ClientConfigurationData.builder().serviceUrl(SERVICE_URL).build(),\n-                ProducerConfigurationData.builder().topicName(TOPIC_NAME).build(),\n+                clientConfigurationData, producerConfigurationData,\n                 ROUTING_KEY);\n+\n         FlinkPulsarProducer producer = Mockito.mock(FlinkPulsarProducer.class);\n         PowerMockito.whenNew(\n                 FlinkPulsarProducer.class",
                "changes": 10,
                "blob_url": "https://github.com/apache/pulsar/blob/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarJsonTableSinkTest.java"
            },
            {
                "additions": 37,
                "sha": "c89ad7e5569888fdd1e78e5c95259a2cfdf8dab0",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarSourceBuilderTest.java",
                "deletions": 47,
                "filename": "pulsar-flink/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarSourceBuilderTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-flink/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarSourceBuilderTest.java?ref=17d2b4213ed401bc6dad14f4f76ef8ce270b0461",
                "patch": "@@ -61,12 +61,14 @@ public void testBuild() throws PulsarClientException {\n \n     @Test\n     public void testBuildWithConfPojo() throws PulsarClientException {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder().serviceUrl(\"testServiceUrl\").build();\n-        ConsumerConfigurationData consumerConf = ConsumerConfigurationData.builder()\n-                .topicNames(new HashSet<>(Arrays.asList(\"testTopic\")))\n-                .subscriptionName(\"testSubscriptionName\")\n-                .subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n+\n+        ConsumerConfigurationData consumerConf = new ConsumerConfigurationData();\n+        consumerConf.setTopicNames(new HashSet<>(Arrays.asList(\"testTopic\")));\n+        consumerConf.setSubscriptionName(\"testSubscriptionName\");\n+        consumerConf.setSubscriptionInitialPosition(SubscriptionInitialPosition.Earliest);\n+\n         SourceFunction sourceFunction = pulsarSourceBuilder\n                 .pulsarAllClientConf(clientConf)\n                 .pulsarAllConsumerConf(consumerConf)\n@@ -160,11 +162,12 @@ public boolean isEndOfStream(T t) {\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testServiceUrlNullWithConfPojo() throws PulsarClientException {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder().serviceUrl(null).build();\n-        ConsumerConfigurationData consumerConf = ConsumerConfigurationData.builder()\n-                .topicNames(new HashSet<String>(Arrays.asList(\"testServiceUrl\")))\n-                .subscriptionName(\"testSubscriptionName\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(null);\n+\n+        ConsumerConfigurationData consumerConf = new ConsumerConfigurationData();\n+        consumerConf.setTopicNames(new HashSet<String>(Arrays.asList(\"testServiceUrl\")));\n+        consumerConf.setSubscriptionName(\"testSubscriptionName\");\n \n         pulsarSourceBuilder\n                 .pulsarAllClientConf(clientConf)\n@@ -174,11 +177,12 @@ public void testServiceUrlNullWithConfPojo() throws PulsarClientException {\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testServiceUrlWithBlankWithConfPojo() throws PulsarClientException {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder().serviceUrl(StringUtils.EMPTY).build();\n-        ConsumerConfigurationData consumerConf = ConsumerConfigurationData.builder()\n-                .topicNames(new HashSet<String>(Arrays.asList(\"testTopic\")))\n-                .subscriptionName(\"testSubscriptionName\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(StringUtils.EMPTY);\n+\n+        ConsumerConfigurationData consumerConf = new ConsumerConfigurationData();\n+        consumerConf.setTopicNames(new HashSet<String>(Arrays.asList(\"testTopic\")));\n+        consumerConf.setSubscriptionName(\"testSubscriptionName\");\n \n         pulsarSourceBuilder\n                 .pulsarAllClientConf(clientConf)\n@@ -188,11 +192,11 @@ public void testServiceUrlWithBlankWithConfPojo() throws PulsarClientException {\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testTopicPatternWithNullWithConfPojo() throws PulsarClientException {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder().serviceUrl(\"testServiceUrl\").build();\n-        ConsumerConfigurationData consumerConf = ConsumerConfigurationData.builder()\n-                .topicsPattern(null)\n-                .subscriptionName(\"testSubscriptionName\")\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n+        ConsumerConfigurationData consumerConf = new ConsumerConfigurationData();\n+        consumerConf.setTopicsPattern(null);\n+        consumerConf.setSubscriptionName(\"testSubscriptionName\");\n \n         pulsarSourceBuilder\n                 .pulsarAllClientConf(clientConf)\n@@ -202,11 +206,12 @@ public void testTopicPatternWithNullWithConfPojo() throws PulsarClientException\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testSubscriptionNameWithNullWithConfPojo() throws PulsarClientException {\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder().serviceUrl(\"testServiceUrl\").build();\n-        ConsumerConfigurationData consumerConf = ConsumerConfigurationData.builder()\n-                .topicNames(new HashSet<String>(Arrays.asList(\"testTopic\")))\n-                .subscriptionName(null)\n-                .build();\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n+\n+        ConsumerConfigurationData consumerConf = new ConsumerConfigurationData();\n+        consumerConf.setTopicNames(new HashSet<String>(Arrays.asList(\"testTopic\")));\n+        consumerConf.setSubscriptionName(null);\n \n         pulsarSourceBuilder\n                 .pulsarAllClientConf(clientConf)\n@@ -216,32 +221,17 @@ public void testSubscriptionNameWithNullWithConfPojo() throws PulsarClientExcept\n \n     @Test(expectedExceptions = IllegalArgumentException.class)\n     public void testSubscriptionNameWithBlankWithConfPojo() throws PulsarClientException {\n-        pulsarSourceBuilder.topic(null);\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder().serviceUrl(\"testServiceUrl\").build();\n-        ConsumerConfigurationData consumerConf = ConsumerConfigurationData.builder()\n-                .topicNames(new HashSet<String>(Arrays.asList(\"testTopic\")))\n-                .subscriptionName(StringUtils.EMPTY)\n-                .build();\n-\n-        pulsarSourceBuilder\n-                .pulsarAllClientConf(clientConf)\n-                .pulsarAllConsumerConf(consumerConf)\n-                .build();\n-    }\n+        ClientConfigurationData clientConf = new ClientConfigurationData();\n+        clientConf.setServiceUrl(\"testServiceUrl\");\n \n-    @Test(expectedExceptions = IllegalArgumentException.class)\n-    public void testSubscriptionInitialPositionWithConfPojo() throws PulsarClientException {\n-        pulsarSourceBuilder.topic(null);\n-        ClientConfigurationData clientConf = ClientConfigurationData.builder().serviceUrl(\"testServiceUrl\").build();\n-        ConsumerConfigurationData consumerConf = ConsumerConfigurationData.builder()\n-                .topicNames(new HashSet<String>(Arrays.asList(\"testTopic\")))\n-                .subscriptionName(\"testSubscriptionName\")\n-                .subscriptionInitialPosition(null)\n-                .build();\n+        ConsumerConfigurationData consumerConf = new ConsumerConfigurationData();\n+        consumerConf.setTopicNames(new HashSet<String>(Arrays.asList(\"testTopic\")));\n+        consumerConf.setSubscriptionName(StringUtils.EMPTY);\n \n         pulsarSourceBuilder\n                 .pulsarAllClientConf(clientConf)\n                 .pulsarAllConsumerConf(consumerConf)\n                 .build();\n     }\n+\n }",
                "changes": 84,
                "blob_url": "https://github.com/apache/pulsar/blob/17d2b4213ed401bc6dad14f4f76ef8ce270b0461/pulsar-flink/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarSourceBuilderTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "[Issue 4379] [Java Client] Build auth from class and params in PulsarClientImpl (#4381)\n\n* Flink client to accept all pulsar client conf\r\n\r\nIn this patch, we provide handles for flink connecotr to accept ClientConfigurationData, ProducerConfigurationData, ConsumerConfigurationData so flink client can:\r\n1. accept all params of client, producer and consumer\r\n2. Keep pace with pulsar-client\r\n\r\n* Flink client to accept all pulsar client conf\r\n\r\nAdded test cases\r\n\r\n* Removing commented code\r\n\r\n* flink: construct auth when building pulsarsource\r\n\r\n* fixed failing tests\r\n\r\n* removed unused import\r\n\r\n* Added builder defaults for lombok builder\r\nSet Auth from class and params (if set) in PulsarClientImpl.java\r\n\r\n* Remove @BUilder.default from attributes where no defaults exist\r\n\r\n* Added tests for ClientConfiguration Data builders\r\n\r\n* cosmetic changes in code\r\n\r\nCo-Authored-By: Sijie Guo <guosijie@gmail.com>\r\n\r\n* fixing typo\r\n\r\n* Removed test, not true anymore\r\n\r\n* Removed lombok builders\r\n\r\n* fixed the failing tests\r\n\r\n* Because the authentication field is transient, it is not serialized. On desirialization then its null and desirialization crashes with NPE",
        "commit": "https://github.com/apache/pulsar/commit/17d2b4213ed401bc6dad14f4f76ef8ce270b0461"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/124dfafeb3ab92f55ce5fb2de4220f3ea57a803c",
        "bug_id": "pulsar_43",
        "file": [
            {
                "additions": 12,
                "sha": "e2887bf37b65ebda2d7a282d6ea1ba7f4e1a6ed6",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/57668440104fb56ce932287190f5203e2073bd62/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/ContextImpl.java",
                "deletions": 4,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/ContextImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/ContextImpl.java?ref=57668440104fb56ce932287190f5203e2073bd62",
                "patch": "@@ -18,11 +18,8 @@\n  */\n package org.apache.pulsar.functions.instance;\n \n-import static com.google.common.base.Preconditions.checkState;\n-\n import com.google.gson.Gson;\n import com.google.gson.reflect.TypeToken;\n-import java.nio.ByteBuffer;\n import lombok.Getter;\n import lombok.Setter;\n import org.apache.commons.lang.StringUtils;\n@@ -36,22 +33,26 @@\n import org.apache.pulsar.functions.api.Context;\n import org.apache.pulsar.functions.api.SerDe;\n import org.apache.pulsar.functions.api.utils.DefaultSerDe;\n-import org.apache.pulsar.functions.proto.InstanceCommunication.MetricsData;\n import org.apache.pulsar.functions.instance.state.StateContextImpl;\n+import org.apache.pulsar.functions.proto.InstanceCommunication.MetricsData;\n import org.apache.pulsar.functions.utils.Reflections;\n import org.slf4j.Logger;\n \n import java.io.IOException;\n+import java.nio.ByteBuffer;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.LinkedList;\n import java.util.Map;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Preconditions.checkState;\n+\n /**\n  * This class implements the Context interface exposed to the user.\n  */\n@@ -141,6 +142,9 @@ public String getCurrentMessageTopicName() {\n \n     @Override\n     public Collection<String> getInputTopics() {\n+        if (inputConsumer == null) {\n+            return new LinkedList<>();\n+        }\n         if (inputConsumer instanceof MultiTopicsConsumerImpl) {\n             return ((MultiTopicsConsumerImpl) inputConsumer).getTopics();\n         } else {\n@@ -302,6 +306,10 @@ public ByteBuffer getState(String key) {\n     //TODO remove topic argument\n     @Override\n     public CompletableFuture<Void> ack(byte[] messageId) {\n+        // if inputConsumer is null, then ack is a no-op\n+        if (inputConsumer == null) {\n+            return CompletableFuture.completedFuture(null);\n+        }\n         MessageId actualMessageId = null;\n         try {\n             actualMessageId = MessageId.fromByteArray(messageId);",
                "changes": 16,
                "blob_url": "https://github.com/apache/pulsar/blob/57668440104fb56ce932287190f5203e2073bd62/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/ContextImpl.java"
            },
            {
                "additions": 5,
                "sha": "3bd563ebf5a22328a5f48399039671070bf77171",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/57668440104fb56ce932287190f5203e2073bd62/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstance.java",
                "deletions": 4,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstance.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstance.java?ref=57668440104fb56ce932287190f5203e2073bd62",
                "patch": "@@ -21,6 +21,7 @@\n import lombok.AccessLevel;\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.client.api.Consumer;\n import org.apache.pulsar.client.api.MessageId;\n import org.apache.pulsar.client.api.PulsarClient;\n import org.apache.pulsar.functions.api.Function;\n@@ -51,13 +52,13 @@ public JavaInstance(InstanceConfig config, Object userClassObject,\n         // TODO: cache logger instances by functions?\n         Logger instanceLog = LoggerFactory.getLogger(\"function-\" + config.getFunctionDetails().getName());\n \n+        Consumer consumer = null;\n         if (source instanceof PulsarSource) {\n-            this.context = new ContextImpl(config, instanceLog, pulsarClient, clsLoader,\n-                    ((PulsarSource) source).getInputConsumer());\n-        } else {\n-            this.context = null;\n+            consumer = ((PulsarSource) source).getInputConsumer();\n         }\n \n+        this.context = new ContextImpl(config, instanceLog, pulsarClient, clsLoader, consumer);\n+\n         // create the functions\n         if (userClassObject instanceof Function) {\n             this.function = (Function) userClassObject;",
                "changes": 9,
                "blob_url": "https://github.com/apache/pulsar/blob/57668440104fb56ce932287190f5203e2073bd62/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstance.java"
            }
        ],
        "repo": "pulsar",
        "message": "fix bug in concerning ContextImpl (#2052)\n\nNPE thrown when submitting a source because context is null",
        "commit": "https://github.com/apache/pulsar/commit/57668440104fb56ce932287190f5203e2073bd62"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/3bfa9d6efe53d8f1ecaf6ce8c8bdb6af7df20287",
        "bug_id": "pulsar_44",
        "file": [
            {
                "additions": 5,
                "sha": "58eb10113da24ac108b26129bc0e9a15dc9b70a6",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d116753a191546dccdc266d9afb9f3eeb4ae5e39/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java",
                "deletions": 2,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java?ref=d116753a191546dccdc266d9afb9f3eeb4ae5e39",
                "patch": "@@ -677,8 +677,11 @@ public void markTopicWithBatchMessagePublished() {\n \n     void topicTerminated() {\n         if (cursor.getNumberOfEntriesInBacklog() == 0) {\n-            // Immediately notify the consumer that there are no more available messages\n-            dispatcher.getConsumers().forEach(Consumer::reachedEndOfTopic);\n+            // notify the consumers if there are consumers connected to this topic.\n+            if (null != dispatcher) {\n+                // Immediately notify the consumer that there are no more available messages\n+                dispatcher.getConsumers().forEach(Consumer::reachedEndOfTopic);\n+            }\n         }\n     }\n ",
                "changes": 7,
                "blob_url": "https://github.com/apache/pulsar/blob/d116753a191546dccdc266d9afb9f3eeb4ae5e39/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java"
            },
            {
                "additions": 45,
                "sha": "30b05a1bdd99f009078feeecf56d5dc9fbbcdddb",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d116753a191546dccdc266d9afb9f3eeb4ae5e39/tests/integration/cli/src/test/java/org/apache/pulsar/tests/integration/TestCLI.java",
                "deletions": 0,
                "filename": "tests/integration/cli/src/test/java/org/apache/pulsar/tests/integration/TestCLI.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/cli/src/test/java/org/apache/pulsar/tests/integration/TestCLI.java?ref=d116753a191546dccdc266d9afb9f3eeb4ae5e39",
                "patch": "@@ -18,6 +18,8 @@\n  */\n package org.apache.pulsar.tests.integration;\n \n+import static org.testng.Assert.fail;\n+\n import com.github.dockerjava.api.DockerClient;\n \n import java.util.concurrent.TimeUnit;\n@@ -58,4 +60,47 @@ public void testDeprecatedCommands() throws Exception {\n                           .contains(\"compaction-test-cli\"));\n \n     }\n+\n+    @Test\n+    public void testTopicTerminationOnTopicsWithoutConnectedConsumers() throws Exception {\n+        String broker = PulsarClusterUtils.brokerSet(docker, clusterName).stream().findAny().get();\n+\n+        Assert.assertTrue(DockerUtils.runCommand(\n+            docker, broker,\n+            \"/pulsar/bin/pulsar-client\",\n+            \"produce\",\n+            \"-m\",\n+            \"\\\"test topic termination\\\"\",\n+            \"-n\",\n+            \"1\",\n+            \"persistent://public/default/test-topic-termination\"\n+        ).contains(\"1 messages successfully produced\"));\n+\n+        // terminate the topic\n+        Assert.assertTrue(DockerUtils.runCommand(\n+            docker, broker,\n+            \"/pulsar/bin/pulsar-admin\",\n+            \"persistent\",\n+            \"terminate\",\n+            \"persistent://public/default/test-topic-termination\"\n+        ).contains(\"Topic succesfully terminated at\"));\n+\n+        // try to produce should fail\n+\n+        try {\n+            DockerUtils.runCommand(\n+                docker, broker,\n+                \"/pulsar/bin/pulsar-client\",\n+                \"produce\",\n+                \"-m\",\n+                \"\\\"test topic termination\\\"\",\n+                \"-n\",\n+                \"1\",\n+                \"persistent://public/default/test-topic-termination\"\n+            );\n+            fail(\"Should fail to produce messages to a terminated topic\");\n+        } catch (RuntimeException re) {\n+            // expected\n+        }\n+    }\n }",
                "changes": 45,
                "blob_url": "https://github.com/apache/pulsar/blob/d116753a191546dccdc266d9afb9f3eeb4ae5e39/tests/integration/cli/src/test/java/org/apache/pulsar/tests/integration/TestCLI.java"
            }
        ],
        "repo": "pulsar",
        "message": "Topic termination should work with no consumers connected to (#1620)\n\n*Problem*\r\n\r\nTopic termination fails with NPE when there is no consumers connected to.\r\n\r\n*Solution*\r\n\r\nIf there is no consumers connected, we don't need to notify the consumers. This will prevent NPE.\r\n\r\n*Result*\r\n\r\nFix the NPE issue and add a test to cover this case.",
        "commit": "https://github.com/apache/pulsar/commit/d116753a191546dccdc266d9afb9f3eeb4ae5e39"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/b1fbd3a7abb7f745af0c2dfc47931f9c8584cebb",
        "bug_id": "pulsar_45",
        "file": [
            {
                "additions": 3,
                "sha": "b6e7481ae62c548c5fd9db7aacc70f5c08fd7553",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4bf44d98cb2744d7a314f8bc9b96113f6775e04a/pulsar-broker/src/main/java/org/apache/pulsar/broker/web/PulsarWebResource.java",
                "deletions": 1,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/web/PulsarWebResource.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/web/PulsarWebResource.java?ref=4bf44d98cb2744d7a314f8bc9b96113f6775e04a",
                "patch": "@@ -42,6 +42,7 @@\n import javax.ws.rs.core.UriBuilder;\n import javax.ws.rs.core.UriInfo;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.pulsar.broker.PulsarService;\n import org.apache.pulsar.broker.ServiceConfiguration;\n import org.apache.pulsar.broker.admin.AdminResource;\n@@ -264,7 +265,8 @@ protected void validateClusterOwnership(String cluster) throws WebApplicationExc\n \n     private URI getRedirectionUrl(ClusterData differentClusterData) throws MalformedURLException {\n         URL webUrl = null;\n-        if (pulsar.getConfiguration().isTlsEnabled() && !differentClusterData.getServiceUrlTls().isEmpty()) {\n+        if (isRequestHttps() && pulsar.getConfiguration().isTlsEnabled()\n+                && StringUtils.isNotBlank(differentClusterData.getServiceUrlTls())) {\n             webUrl = new URL(differentClusterData.getServiceUrlTls());\n         } else {\n             webUrl = new URL(differentClusterData.getServiceUrl());",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/4bf44d98cb2744d7a314f8bc9b96113f6775e04a/pulsar-broker/src/main/java/org/apache/pulsar/broker/web/PulsarWebResource.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix: NPE on http-lookup redirection (#1451)",
        "commit": "https://github.com/apache/pulsar/commit/4bf44d98cb2744d7a314f8bc9b96113f6775e04a"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/02eff26259b43d3fac646d80f8256f9308baba1d",
        "bug_id": "pulsar_46",
        "file": [
            {
                "additions": 3,
                "sha": "65f5f9763449c27712d6dc8a6e524979158e7a9d",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/8335d7cb0c85ebcd054b80f5da91cbc419d25121/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java",
                "deletions": 1,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java?ref=8335d7cb0c85ebcd054b80f5da91cbc419d25121",
                "patch": "@@ -542,7 +542,9 @@ public void closeFailed(ManagedLedgerException exception, Object ctx) {\n                     disconnectFuture.complete(null);\n                 }).exceptionally(exception -> {\n                     IS_FENCED_UPDATER.set(this, FALSE);\n-                    dispatcher.reset();\n+                    if (dispatcher != null) {\n+                        dispatcher.reset();\n+                    }\n                     log.error(\"[{}][{}] Error disconnecting consumers from subscription\", topicName, subName,\n                             exception);\n                     disconnectFuture.completeExceptionally(exception);",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/8335d7cb0c85ebcd054b80f5da91cbc419d25121/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix: NPE when cursor failed to close empty subscription (#1662)",
        "commit": "https://github.com/apache/pulsar/commit/8335d7cb0c85ebcd054b80f5da91cbc419d25121"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/c15c867c176be64fb2074ee7d40612cf510b9b42",
        "bug_id": "pulsar_47",
        "file": [
            {
                "additions": 31,
                "sha": "401436527e04c8308ebbe50ac9170b6b313d5096",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d77980d2a63236b132cfc6ca7f596de9fb0e7569/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/SchemaRegistryServiceImpl.java",
                "deletions": 11,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/SchemaRegistryServiceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/SchemaRegistryServiceImpl.java?ref=d77980d2a63236b132cfc6ca7f596de9fb0e7569",
                "patch": "@@ -68,7 +68,13 @@\n     @Override\n     @NotNull\n     public CompletableFuture<SchemaAndMetadata> getSchema(String schemaId) {\n-        return getSchema(schemaId, SchemaVersion.Latest);\n+        return getSchema(schemaId, SchemaVersion.Latest).thenApply((schema) -> {\n+                if (schema != null && schema.schema.isDeleted()) {\n+                    return null;\n+                } else {\n+                    return schema;\n+                }\n+            });\n     }\n \n     @Override\n@@ -184,21 +190,35 @@ private boolean isCompatible(SchemaAndMetadata existingSchema, SchemaData newSch\n                                                                     SchemaCompatibilityStrategy strategy) {\n         return getSchema(schemaId)\n             .thenApply(\n-                (existingSchema) ->\n-                    !(existingSchema == null || existingSchema.schema.isDeleted())\n-                        && isCompatible(existingSchema, schema, strategy));\n+                    (existingSchema) ->\n+                        !(existingSchema == null || existingSchema.schema.isDeleted())\n+                            && isCompatible(existingSchema, schema, strategy));\n     }\n \n     private CompletableFuture<Boolean> checkCompatibilityWithAll(String schemaId, SchemaData schema,\n                                                                  SchemaCompatibilityStrategy strategy) {\n         return getAllSchemas(schemaId)\n-                .thenCompose(FutureUtils::collect)\n-                .thenApply(schemaAndMetadataList -> schemaAndMetadataList\n-                        .stream()\n-                        .map(schemaAndMetadata -> schemaAndMetadata.schema)\n-                        .collect(Collectors.toList()))\n-                .thenApply(schemas -> compatibilityChecks.getOrDefault(schema.getType(), SchemaCompatibilityCheck.DEFAULT)\n-                        .isCompatible(schemas, schema, strategy));\n+            .thenCompose(FutureUtils::collect)\n+            .thenApply(list -> {\n+                    // Trim the prefix of schemas before the latest delete.\n+                    int lastIndex = list.size() - 1;\n+                    for (int i = lastIndex; i >= 0; i--) {\n+                        if (list.get(i).schema.isDeleted()) {\n+                            if (i == lastIndex) { // if the latest schema is a delete, there's no schemas to compare\n+                                return Collections.<SchemaAndMetadata>emptyList();\n+                            } else {\n+                                return list.subList(i + 1, list.size());\n+                            }\n+                        }\n+                    }\n+                    return list;\n+                })\n+            .thenApply(schemaAndMetadataList -> schemaAndMetadataList\n+                       .stream()\n+                       .map(schemaAndMetadata -> schemaAndMetadata.schema)\n+                       .collect(Collectors.toList()))\n+            .thenApply(schemas -> compatibilityChecks.getOrDefault(schema.getType(), SchemaCompatibilityCheck.DEFAULT)\n+                       .isCompatible(schemas, schema, strategy));\n     }\n \n     interface Functions {",
                "changes": 42,
                "blob_url": "https://github.com/apache/pulsar/blob/d77980d2a63236b132cfc6ca7f596de9fb0e7569/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/SchemaRegistryServiceImpl.java"
            },
            {
                "additions": 2,
                "sha": "ffe75325c2c2d7398eb4f5d9c5c9e8da4579159e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d77980d2a63236b132cfc6ca7f596de9fb0e7569/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/schema/SchemaServiceTest.java",
                "deletions": 3,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/schema/SchemaServiceTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/schema/SchemaServiceTest.java?ref=d77980d2a63236b132cfc6ca7f596de9fb0e7569",
                "patch": "@@ -20,6 +20,7 @@\n \n import static org.testng.AssertJUnit.assertEquals;\n import static org.testng.AssertJUnit.assertFalse;\n+import static org.testng.AssertJUnit.assertNull;\n import static org.testng.AssertJUnit.assertTrue;\n \n import java.time.Clock;\n@@ -106,9 +107,7 @@ public void writeReadBackDeleteSchemaEntry() throws Exception {\n \n         deleteSchema(schemaId1, version(1));\n \n-        SchemaData latest2 = getLatestSchema(schemaId1, version(1));\n-\n-        assertTrue(latest2.isDeleted());\n+        assertNull(schemaRegistryService.getSchema(schemaId1).get());\n     }\n \n     @Test",
                "changes": 5,
                "blob_url": "https://github.com/apache/pulsar/blob/d77980d2a63236b132cfc6ca7f596de9fb0e7569/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/schema/SchemaServiceTest.java"
            },
            {
                "additions": 97,
                "sha": "24380e10931abdfe40c3a3c4711e531bc495d24f",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/d77980d2a63236b132cfc6ca7f596de9fb0e7569/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/SchemaDeleteTest.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/SchemaDeleteTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/SchemaDeleteTest.java?ref=d77980d2a63236b132cfc6ca7f596de9fb0e7569",
                "patch": "@@ -0,0 +1,97 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.client.impl;\n+\n+import com.google.common.collect.Sets;\n+\n+import org.apache.pulsar.broker.auth.MockedPulsarServiceBaseTest;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.Producer;\n+import org.apache.pulsar.client.api.Reader;\n+import org.apache.pulsar.client.api.Schema;\n+\n+import org.apache.pulsar.common.policies.data.ClusterData;\n+import org.apache.pulsar.common.policies.data.SchemaAutoUpdateCompatibilityStrategy;\n+import org.apache.pulsar.common.policies.data.TenantInfo;\n+\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+public class SchemaDeleteTest extends MockedPulsarServiceBaseTest {\n+\n+    private static final String subscription = \"reader-sub\";\n+\n+    @BeforeMethod\n+    @Override\n+    protected void setup() throws Exception {\n+\n+        super.internalSetup();\n+        this.conf.setBrokerDeleteInactiveTopicsFrequencySeconds(5);\n+\n+        admin.clusters().createCluster(\"test\",\n+                new ClusterData(\"http://127.0.0.1:\" + BROKER_WEBSERVICE_PORT));\n+        admin.tenants().createTenant(\"my-property\",\n+                new TenantInfo(Sets.newHashSet(\"appid1\", \"appid2\"), Sets.newHashSet(\"test\")));\n+        admin.namespaces().createNamespace(\"my-property/my-ns\", Sets.newHashSet(\"test\"));\n+    }\n+\n+    @AfterMethod\n+    @Override\n+    protected void cleanup() throws Exception {\n+        super.internalCleanup();\n+    }\n+\n+    @Test\n+    public void createTopicDeleteTopicCreateTopic() throws Exception {\n+        String namespace = \"my-property/my-ns\";\n+        String topic = namespace + \"/topic1\";\n+        String foobar = \"foo\";\n+\n+        try (Producer<String> producer =\n+                pulsarClient.newProducer(Schema.STRING).topic(topic).create()) {\n+            producer.send(foobar);\n+        }\n+\n+        admin.topics().delete(topic);\n+        admin.schemas().deleteSchema(topic);\n+\n+        // creating a subscriber will check the schema against the latest\n+        // schema, which in this case should be a tombstone, which should\n+        // behave as if the schema never existed\n+        try (Reader<String> reader = pulsarClient.newReader(Schema.STRING)\n+                .topic(topic).startMessageId(MessageId.latest).create()) {\n+        }\n+\n+        admin.namespaces().setSchemaAutoUpdateCompatibilityStrategy(namespace,\n+                SchemaAutoUpdateCompatibilityStrategy.BackwardTransitive);\n+        admin.topics().delete(topic);\n+        admin.schemas().deleteSchema(topic);\n+\n+        // with a transitive policy we should check all previous schemas. But we\n+        // shouldn't check against those that were there before we deleted the schema.\n+        try (Reader<DummyPojo> reader = pulsarClient.newReader(Schema.AVRO(DummyPojo.class))\n+                .topic(topic).startMessageId(MessageId.latest).create()) {\n+        }\n+    }\n+\n+    public static class DummyPojo {\n+        int foobar;\n+    }\n+}",
                "changes": 97,
                "blob_url": "https://github.com/apache/pulsar/blob/d77980d2a63236b132cfc6ca7f596de9fb0e7569/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/SchemaDeleteTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "Don't consider deleted schema when checking compatibility (#4669)\n\nfeca5bb changed topic delete logic to delete the schema when the\r\ntopic is deleted (though this only seems to be enabled for idle topic\r\nGC). This exposed a bug in compatibility checking whereby if the a\r\nsubscription tries to attach to the topic, even if using the same\r\nschema as had been used previously, a compatibility exception will be\r\nthrown.\r\n\r\nThis is because the topic still appears to have a schema, even though\r\nthere is no actual schema data, just a tombstone. I've changed the logic\r\nto return no schema if the schema read back is a tombstone.\r\n\r\nThe issue doesn't affect producers because the check was already\r\ncorrect there.\r\n\r\nI've also updated the check for transitive compatibility to remove the\r\nprefix of schemas before the deleted schema. Previously this was\r\nthrowing an NPE on the broker as it couldn't decode the deleted\r\nschema.\r\n\r\nThis issue was discovered by failures in the healthcheck. The check\r\nperiod (5 minutes) was longer than the GC period (60 seconds). I would\r\nexpect it to hit quite often in other scenarios also.",
        "commit": "https://github.com/apache/pulsar/commit/d77980d2a63236b132cfc6ca7f596de9fb0e7569"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/44ace5262000b0892c019810908c5412a3a3a50a",
        "bug_id": "pulsar_48",
        "file": [
            {
                "additions": 1,
                "sha": "1fc9a492e0dd0a94138658295c1a8258eecc349e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/9d19a0ea112d192621d464e708910e2587705bd0/pulsar-functions/api-java/src/main/java/org/apache/pulsar/functions/api/utils/DefaultSerDe.java",
                "deletions": 0,
                "filename": "pulsar-functions/api-java/src/main/java/org/apache/pulsar/functions/api/utils/DefaultSerDe.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/api-java/src/main/java/org/apache/pulsar/functions/api/utils/DefaultSerDe.java?ref=9d19a0ea112d192621d464e708910e2587705bd0",
                "patch": "@@ -36,6 +36,7 @@\n             Integer.class,\n             Double.class,\n             Long.class,\n+            Boolean.class,\n             String.class,\n             Short.class,\n             Byte.class,",
                "changes": 1,
                "blob_url": "https://github.com/apache/pulsar/blob/9d19a0ea112d192621d464e708910e2587705bd0/pulsar-functions/api-java/src/main/java/org/apache/pulsar/functions/api/utils/DefaultSerDe.java"
            },
            {
                "additions": 1,
                "sha": "c8fecbf066960f816f19320b3d018323d9660165",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/9d19a0ea112d192621d464e708910e2587705bd0/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/processors/AtLeastOnceProcessor.java",
                "deletions": 1,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/processors/AtLeastOnceProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/processors/AtLeastOnceProcessor.java?ref=9d19a0ea112d192621d464e708910e2587705bd0",
                "patch": "@@ -54,7 +54,7 @@ protected void initializeOutputProducer(String outputTopic) throws Exception {\n \n     @Override\n     public void sendOutputMessage(InputMessage inputMsg, MessageBuilder outputMsgBuilder) {\n-        if (null == outputMsgBuilder) {\n+        if (null == outputMsgBuilder || null == producer) {\n             inputMsg.ack();\n             return;\n         }",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/9d19a0ea112d192621d464e708910e2587705bd0/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/processors/AtLeastOnceProcessor.java"
            }
        ],
        "repo": "pulsar",
        "message": "Handle NPE for output producer is null for function (#1590)",
        "commit": "https://github.com/apache/pulsar/commit/9d19a0ea112d192621d464e708910e2587705bd0"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/8376a2a292d18fcbfb7c93c500720b04fd85945c",
        "bug_id": "pulsar_49",
        "file": [
            {
                "additions": 17,
                "sha": "b3e4f6bb219ce73f9f20a0e1deb18b3bccf964bf",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java",
                "deletions": 18,
                "filename": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java?ref=ae096ebe3d34782aad817fa6d67ff4f997461165",
                "patch": "@@ -230,8 +230,6 @@ void processArguments() throws Exception {\n         protected String fnConfigFile;\n         @Parameter(names = \"--processingGuarantees\", description = \"The processing guarantees (aka delivery semantics) applied to the function\")\n         protected FunctionConfig.ProcessingGuarantees processingGuarantees;\n-        @Parameter(names = \"--subscriptionType\", description = \"The type of subscription used by the function when consuming messages from the input topic(s)\")\n-        protected FunctionConfig.SubscriptionType subscriptionType;\n         @Parameter(names = \"--userConfig\", description = \"User-defined config key/values\")\n         protected String userConfigString;\n         @Parameter(names = \"--parallelism\", description = \"The function's parallelism factor (i.e. the number of function instances to run)\")\n@@ -304,9 +302,6 @@ void processArguments() throws Exception {\n             if (null != processingGuarantees) {\n                 functionConfig.setProcessingGuarantees(processingGuarantees);\n             }\n-            if (null != subscriptionType) {\n-                functionConfig.setSubscriptionType(subscriptionType);\n-            }\n             if (null != userConfigString) {\n                 Type type = new TypeToken<Map<String, String>>(){}.getType();\n                 Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n@@ -491,10 +486,24 @@ protected FunctionDetails convert(FunctionConfig functionConfig)\n             functionConfig.getInputs().forEach(v -> topicToSerDeClassNameMap.put(v, \"\"));\n             sourceSpecBuilder.putAllTopicsToSerDeClassName(topicToSerDeClassNameMap);\n \n-            if (functionConfig.getSubscriptionType() != null) {\n-                sourceSpecBuilder\n-                        .setSubscriptionType(convertSubscriptionType(functionConfig.getSubscriptionType()));\n+            // Set subscription type based on processing semantics\n+            if (functionConfig.getProcessingGuarantees() != null) {\n+                switch (functionConfig.getProcessingGuarantees()) {\n+                    case ATMOST_ONCE:\n+                        sourceSpecBuilder.setSubscriptionType(SubscriptionType.SHARED);\n+                        break;\n+                    case ATLEAST_ONCE:\n+                        sourceSpecBuilder.setSubscriptionType(SubscriptionType.SHARED);\n+                        break;\n+                    case EFFECTIVELY_ONCE:\n+                        sourceSpecBuilder.setSubscriptionType(SubscriptionType.FAILOVER);\n+                        break;\n+                    default:\n+                        throw new RuntimeException(\"Unknown processing guarantee: \"\n+                                + functionConfig.getProcessingGuarantees().name());\n+                }\n             }\n+\n             if (typeArgs != null) {\n                 sourceSpecBuilder.setTypeClassName(typeArgs[0].getName());\n             }\n@@ -865,16 +874,6 @@ private static FunctionConfig loadConfig(File file) throws IOException {\n         throw new RuntimeException(\"Unrecognized runtime: \" + runtime.name());\n     }\n \n-    private static SubscriptionType convertSubscriptionType(\n-            FunctionConfig.SubscriptionType subscriptionType) {\n-        for (SubscriptionType type : SubscriptionType.values()) {\n-            if (type.name().equals(subscriptionType.name())) {\n-                return type;\n-            }\n-        }\n-        throw new RuntimeException(\"Unrecognized subscription type: \" + subscriptionType.name());\n-    }\n-\n     private static ProcessingGuarantees convertProcessingGuarantee(\n             FunctionConfig.ProcessingGuarantees processingGuarantees) {\n         for (ProcessingGuarantees type : ProcessingGuarantees.values()) {",
                "changes": 35,
                "blob_url": "https://github.com/apache/pulsar/blob/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java"
            },
            {
                "additions": 11,
                "sha": "10c93ec50eba58b3086480714f8bd8fb92714a69",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java",
                "deletions": 2,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java?ref=ae096ebe3d34782aad817fa6d67ff4f997461165",
                "patch": "@@ -51,6 +51,7 @@\n import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.pulsar.client.api.MessageId;\n import org.apache.pulsar.client.api.PulsarClient;\n+import org.apache.pulsar.client.api.SubscriptionType;\n import org.apache.pulsar.client.impl.PulsarClientImpl;\n import org.apache.pulsar.functions.api.Function;\n import org.apache.pulsar.functions.proto.InstanceCommunication;\n@@ -468,8 +469,16 @@ public void setupInput() throws Exception {\n             pulsarSourceConfig.setProcessingGuarantees(\n                     FunctionConfig.ProcessingGuarantees.valueOf(\n                             this.instanceConfig.getFunctionDetails().getProcessingGuarantees().name()));\n-            pulsarSourceConfig.setSubscriptionType(\n-                    FunctionConfig.SubscriptionType.valueOf(sourceSpec.getSubscriptionType().name()));\n+\n+            switch (sourceSpec.getSubscriptionType()) {\n+                case FAILOVER:\n+                    pulsarSourceConfig.setSubscriptionType(SubscriptionType.Failover);\n+                    break;\n+                default:\n+                    pulsarSourceConfig.setSubscriptionType(SubscriptionType.Shared);\n+                    break;\n+            }\n+\n             pulsarSourceConfig.setTypeClassName(sourceSpec.getTypeClassName());\n \n             Object[] params = {this.client, pulsarSourceConfig};",
                "changes": 13,
                "blob_url": "https://github.com/apache/pulsar/blob/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java"
            },
            {
                "additions": 0,
                "sha": "6f0385aeebbfde4a737e1f089e49e95b4436cebe",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/sink/PulsarSinkConfig.java",
                "deletions": 1,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/sink/PulsarSinkConfig.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/sink/PulsarSinkConfig.java?ref=ae096ebe3d34782aad817fa6d67ff4f997461165",
                "patch": "@@ -28,7 +28,6 @@\n @ToString\n public class PulsarSinkConfig {\n     private FunctionConfig.ProcessingGuarantees processingGuarantees;\n-    private FunctionConfig.SubscriptionType subscriptionType;\n     private String topic;\n     private String serDeClassName;\n     private String typeClassName;",
                "changes": 1,
                "blob_url": "https://github.com/apache/pulsar/blob/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/sink/PulsarSinkConfig.java"
            },
            {
                "additions": 1,
                "sha": "c27bda83785d96b14d818d4fdfa439eebeeed0c2",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java",
                "deletions": 1,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java?ref=ae096ebe3d34782aad817fa6d67ff4f997461165",
                "patch": "@@ -63,7 +63,7 @@ public void open(Map<String, Object> config) throws Exception {\n         this.inputConsumer = this.pulsarClient.newConsumer()\n                 .topics(new ArrayList<>(this.pulsarSourceConfig.getTopicSerdeClassNameMap().keySet()))\n                 .subscriptionName(this.pulsarSourceConfig.getSubscriptionName())\n-                .subscriptionType(this.pulsarSourceConfig.getSubscriptionType().get())\n+                .subscriptionType(this.pulsarSourceConfig.getSubscriptionType())\n                 .ackTimeout(1, TimeUnit.MINUTES)\n                 .subscribe();\n     }",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java"
            },
            {
                "additions": 3,
                "sha": "95c1001fe2798e71e2d986e397b1e530da1d339e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSourceConfig.java",
                "deletions": 1,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSourceConfig.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSourceConfig.java?ref=ae096ebe3d34782aad817fa6d67ff4f997461165",
                "patch": "@@ -22,6 +22,8 @@\n import lombok.Getter;\n import lombok.Setter;\n import lombok.ToString;\n+import org.apache.pulsar.client.api.SubscriptionType;\n+import org.apache.pulsar.functions.proto.Function;\n import org.apache.pulsar.functions.utils.FunctionConfig;\n \n import java.io.IOException;\n@@ -33,7 +35,7 @@\n public class PulsarSourceConfig {\n \n     private FunctionConfig.ProcessingGuarantees processingGuarantees;\n-    private FunctionConfig.SubscriptionType subscriptionType;\n+    SubscriptionType subscriptionType;\n     private String subscriptionName;\n     private Map<String, String> topicSerdeClassNameMap;\n     private String typeClassName;",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSourceConfig.java"
            },
            {
                "additions": 0,
                "sha": "df4e83b28bdbadcae17bd294f2ed4dacfcbaa140",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/sink/PulsarSinkTest.java",
                "deletions": 1,
                "filename": "pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/sink/PulsarSinkTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/sink/PulsarSinkTest.java?ref=ae096ebe3d34782aad817fa6d67ff4f997461165",
                "patch": "@@ -81,7 +81,6 @@ private static PulsarClient getPulsarClient() throws PulsarClientException {\n     private static PulsarSinkConfig getPulsarConfigs() {\n         PulsarSinkConfig pulsarConfig = new PulsarSinkConfig();\n         pulsarConfig.setProcessingGuarantees(FunctionConfig.ProcessingGuarantees.ATLEAST_ONCE);\n-        pulsarConfig.setSubscriptionType(FunctionConfig.SubscriptionType.FAILOVER);\n         pulsarConfig.setTopic(TOPIC);\n         pulsarConfig.setSerDeClassName(serDeClassName);\n         pulsarConfig.setTypeClassName(String.class.getName());",
                "changes": 1,
                "blob_url": "https://github.com/apache/pulsar/blob/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/sink/PulsarSinkTest.java"
            },
            {
                "additions": 0,
                "sha": "4c81016aa7729be25a2f24e270b0a932fc295af7",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/source/PulsarSourceTest.java",
                "deletions": 1,
                "filename": "pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/source/PulsarSourceTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/source/PulsarSourceTest.java?ref=ae096ebe3d34782aad817fa6d67ff4f997461165",
                "patch": "@@ -87,7 +87,6 @@ private static PulsarClient getPulsarClient() throws PulsarClientException {\n     private static PulsarSourceConfig getPulsarConfigs() {\n         PulsarSourceConfig pulsarConfig = new PulsarSourceConfig();\n         pulsarConfig.setProcessingGuarantees(FunctionConfig.ProcessingGuarantees.ATLEAST_ONCE);\n-        pulsarConfig.setSubscriptionType(FunctionConfig.SubscriptionType.FAILOVER);\n         pulsarConfig.setTopicSerdeClassNameMap(topicSerdeClassNameMap);\n         pulsarConfig.setTypeClassName(String.class.getName());\n         return pulsarConfig;",
                "changes": 1,
                "blob_url": "https://github.com/apache/pulsar/blob/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/source/PulsarSourceTest.java"
            },
            {
                "additions": 0,
                "sha": "742f5309a24ce19b3d5d40812e06399cbb082e86",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/FunctionConfig.java",
                "deletions": 15,
                "filename": "pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/FunctionConfig.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/FunctionConfig.java?ref=ae096ebe3d34782aad817fa6d67ff4f997461165",
                "patch": "@@ -55,20 +55,6 @@\n         EFFECTIVELY_ONCE\n     }\n \n-    public enum SubscriptionType {\n-        SHARED,\n-        FAILOVER;\n-\n-        public org.apache.pulsar.client.api.SubscriptionType get() {\n-            switch (this) {\n-                case FAILOVER:\n-                    return org.apache.pulsar.client.api.SubscriptionType.Failover;\n-                default:\n-                    return org.apache.pulsar.client.api.SubscriptionType.Shared;\n-            }\n-        }\n-    }\n-\n     public enum Runtime {\n         JAVA,\n         PYTHON\n@@ -98,7 +84,6 @@\n     private String logTopic;\n     private ProcessingGuarantees processingGuarantees;\n     private Map<String, Object> userConfig;\n-    private SubscriptionType subscriptionType;\n     private Runtime runtime;\n     private boolean autoAck;\n     @isPositiveNumber",
                "changes": 15,
                "blob_url": "https://github.com/apache/pulsar/blob/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/FunctionConfig.java"
            },
            {
                "additions": 0,
                "sha": "bc86c2d42ac76a3ca9430436e2e6dc831e56d45f",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ValidatorImpls.java",
                "deletions": 7,
                "filename": "pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ValidatorImpls.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ValidatorImpls.java?ref=ae096ebe3d34782aad817fa6d67ff4f997461165",
                "patch": "@@ -450,13 +450,6 @@ private static void doCommonChecks(FunctionConfig functionConfig) {\n             // Ensure that topics aren't being used as both input and output\n             verifyNoTopicClash(functionConfig.getInputs(), functionConfig.getOutput());\n \n-            if (functionConfig.getSubscriptionType() != null\n-                    && functionConfig.getSubscriptionType() != FunctionConfig.SubscriptionType.FAILOVER\n-                    && functionConfig.getProcessingGuarantees() != null\n-                    && functionConfig.getProcessingGuarantees() == FunctionConfig.ProcessingGuarantees.EFFECTIVELY_ONCE) {\n-                throw new IllegalArgumentException(\"Effectively-once processing semantics can only be achieved using a Failover subscription type\");\n-            }\n-\n             WindowConfig windowConfig = functionConfig.getWindowConfig();\n             if (windowConfig != null) {\n                 // set auto ack to false since windowing framework is responsible",
                "changes": 7,
                "blob_url": "https://github.com/apache/pulsar/blob/ae096ebe3d34782aad817fa6d67ff4f997461165/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ValidatorImpls.java"
            }
        ],
        "repo": "pulsar",
        "message": "removing allowing users set subscription type (#1880)\n\n* removing allowing users set subscription type\r\n\r\n* fix NPE",
        "commit": "https://github.com/apache/pulsar/commit/ae096ebe3d34782aad817fa6d67ff4f997461165"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/ab93a181876f588417613be4e45dcecbfea13ca2",
        "bug_id": "pulsar_50",
        "file": [
            {
                "additions": 28,
                "sha": "55a510090a6ca8a07ae2e08a2259a18304d9fa2d",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/2fe4a38d1d4b5c2b17fda22e80c957f4a73de1b3/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java",
                "deletions": 22,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java?ref=2fe4a38d1d4b5c2b17fda22e80c957f4a73de1b3",
                "patch": "@@ -231,20 +231,22 @@ public void run() {\n                     }\n                 }\n \n-                // before processing the message, we have a producer connection setup for producing results.\n-                Producer producer = null;\n-                while (null == producer) {\n-                    try {\n-                        producer = sinkProducer.getProducer(msg.getTopicName(), msg.getTopicPartition());\n-                    } catch (PulsarClientException e) {\n-                        // `ProducerBusy` is thrown when an producer with same name is still connected.\n-                        // This can happen when a active consumer is changed for a given source topic partition\n-                        // so we need to wait until the old active consumer release the produce connection.\n-                        if (!(e instanceof ProducerBusyException)) {\n-                            log.error(\"Failed to get a producer for producing results computed from source topic {}\",\n-                                msg.getTopicName());\n+                if (null != sinkProducer) {\n+                    // before processing the message, we have a producer connection setup for producing results.\n+                    Producer producer = null;\n+                    while (null == producer) {\n+                        try {\n+                            producer = sinkProducer.getProducer(msg.getTopicName(), msg.getTopicPartition());\n+                        } catch (PulsarClientException e) {\n+                            // `ProducerBusy` is thrown when an producer with same name is still connected.\n+                            // This can happen when a active consumer is changed for a given source topic partition\n+                            // so we need to wait until the old active consumer release the produce connection.\n+                            if (!(e instanceof ProducerBusyException)) {\n+                                log.error(\"Failed to get a producer for producing results computed from source topic {}\",\n+                                    msg.getTopicName());\n+                            }\n+                            TimeUnit.MILLISECONDS.sleep(500);\n                         }\n-                        TimeUnit.MILLISECONDS.sleep(500);\n                     }\n                 }\n \n@@ -320,20 +322,24 @@ private void loadJars() throws Exception {\n     public void becameActive(Consumer consumer, int partitionId) {\n         // if the instance becomes active for a given topic partition,\n         // open a producer for the results computed from this topic partition.\n-        try {\n-            this.sinkProducer.getProducer(consumer.getTopic(), partitionId);\n-        } catch (PulsarClientException e) {\n-            // this can be ignored, because producer can be lazily created when accessing it.\n-            log.warn(\"Fail to create a producer for results computed from messages of topic: {}, partition: {}\",\n-                consumer.getTopic(), partitionId);\n+        if (null != sinkProducer) {\n+            try {\n+                this.sinkProducer.getProducer(consumer.getTopic(), partitionId);\n+            } catch (PulsarClientException e) {\n+                // this can be ignored, because producer can be lazily created when accessing it.\n+                log.warn(\"Fail to create a producer for results computed from messages of topic: {}, partition: {}\",\n+                    consumer.getTopic(), partitionId);\n+            }\n         }\n     }\n \n     @Override\n     public void becameInactive(Consumer consumer, int partitionId) {\n-        // if I lost the ownership of a partition, close its corresponding topic partition.\n-        // this is to allow the new active consumer be able to produce to the result topic.\n-        this.sinkProducer.closeProducer(consumer.getTopic(), partitionId);\n+        if (null != sinkProducer) {\n+            // if I lost the ownership of a partition, close its corresponding topic partition.\n+            // this is to allow the new active consumer be able to produce to the result topic.\n+            this.sinkProducer.closeProducer(consumer.getTopic(), partitionId);\n+        }\n     }\n \n     private void setupStateTable() throws Exception {",
                "changes": 50,
                "blob_url": "https://github.com/apache/pulsar/blob/2fe4a38d1d4b5c2b17fda22e80c957f4a73de1b3/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java"
            },
            {
                "additions": 66,
                "sha": "affe68d2ca7ba61d5c295f1ef0609473f502ba57",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/2fe4a38d1d4b5c2b17fda22e80c957f4a73de1b3/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/JavaInstanceRunnableProcessTest.java",
                "deletions": 1,
                "filename": "pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/JavaInstanceRunnableProcessTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/JavaInstanceRunnableProcessTest.java?ref=2fe4a38d1d4b5c2b17fda22e80c957f4a73de1b3",
                "patch": "@@ -78,6 +78,7 @@\n import org.apache.pulsar.functions.api.utils.DefaultSerDe;\n import org.apache.pulsar.functions.proto.Function.FunctionConfig;\n import org.apache.pulsar.functions.proto.Function.FunctionConfig.ProcessingGuarantees;\n+import org.apache.pulsar.functions.utils.Reflections;\n import org.apache.pulsar.functions.utils.functioncache.FunctionCacheManager;\n import org.apache.pulsar.functions.instance.producers.Producers;\n import org.apache.pulsar.functions.instance.producers.SimpleOneSinkTopicProducers;\n@@ -86,6 +87,7 @@\n import org.powermock.api.mockito.PowerMockito;\n import org.powermock.core.classloader.annotations.PowerMockIgnore;\n import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.testng.PowerMockObjectFactory;\n import org.powermock.reflect.Whitebox;\n import org.testng.IObjectFactory;\n import org.testng.annotations.BeforeMethod;\n@@ -96,7 +98,7 @@\n  * Test the processing logic of a {@link JavaInstanceRunnable}.\n  */\n @Slf4j\n-@PrepareForTest({ JavaInstanceRunnable.class, StorageClientBuilder.class, MessageBuilder.class })\n+@PrepareForTest({ JavaInstanceRunnable.class, StorageClientBuilder.class, MessageBuilder.class, Reflections.class })\n @PowerMockIgnore({ \"javax.management.*\", \"org.apache.pulsar.common.api.proto.*\", \"org.apache.logging.log4j.*\" })\n public class JavaInstanceRunnableProcessTest {\n \n@@ -132,6 +134,16 @@ public String process(String input, Context context) throws Exception {\n         }\n     }\n \n+    private static class TestVoidFunction implements PulsarFunction<String, Void> {\n+\n+        @Override\n+        public Void process(String input, Context context) throws Exception {\n+            log.info(\"process input '{}'\", input);\n+            voidFunctionQueue.put(input);\n+            return null;\n+        }\n+    }\n+\n     @Data\n     private static class ConsumerInstance {\n         private final Consumer consumer;\n@@ -195,6 +207,7 @@ public synchronized void addSendFuture(CompletableFuture<MessageId> future) {\n \n \n     private static final String TEST_STORAGE_SERVICE_URL = \"127.0.0.1:4181\";\n+    private static final LinkedBlockingQueue<String> voidFunctionQueue = new LinkedBlockingQueue<>();\n \n     private FunctionConfig fnConfig;\n     private InstanceConfig config;\n@@ -938,4 +951,56 @@ public void testEffectivelyOnceProcessingFailures() throws Exception {\n                 .acknowledgeCumulativeAsync(same(msgs[1]));\n         }\n     }\n+\n+    @Test\n+    public void testVoidFunction() throws Exception {\n+        FunctionConfig newFnConfig = FunctionConfig.newBuilder(fnConfig)\n+            .setProcessingGuarantees(ProcessingGuarantees.ATLEAST_ONCE)\n+            .setClassName(TestVoidFunction.class.getName())\n+            .build();\n+        config.setFunctionConfig(newFnConfig);\n+\n+        @Cleanup(\"shutdown\")\n+        ExecutorService executorService = Executors.newSingleThreadExecutor();\n+\n+        try (JavaInstanceRunnable runnable = new JavaInstanceRunnable(\n+            config,\n+            fnCache,\n+            \"test-jar-file\",\n+            mockClient,\n+            null)) {\n+\n+            executorService.submit(runnable);\n+\n+            Pair<String, String> consumerId = Pair.of(\n+                newFnConfig.getInputs(0),\n+                FunctionConfigUtils.getFullyQualifiedName(newFnConfig));\n+            ConsumerInstance consumerInstance = mockConsumers.get(consumerId);\n+            while (null == consumerInstance) {\n+                TimeUnit.MILLISECONDS.sleep(20);\n+                consumerInstance = mockConsumers.get(consumerId);\n+            }\n+\n+            // once we get consumer id, simulate receiving 10 messages from consumer\n+            for (int i = 0; i < 10; i++) {\n+                Message msg = mock(Message.class);\n+                when(msg.getData()).thenReturn((\"message-\" + i).getBytes(UTF_8));\n+                when(msg.getMessageId())\n+                    .thenReturn(new MessageIdImpl(1L, i, 0));\n+                consumerInstance.addMessage(msg);\n+                consumerInstance.getConf().getMessageListener()\n+                    .received(consumerInstance.getConsumer(), msg);\n+            }\n+\n+            // wait until all the messages are published\n+            for (int i = 0; i < 10; i++) {\n+                String msg = voidFunctionQueue.take();\n+                log.info(\"Processed message {}\", msg);\n+                assertEquals(\"message-\" + i, msg);\n+            }\n+\n+            // no producer should be initialized\n+            assertTrue(mockProducers.isEmpty());\n+        }\n+    }\n }",
                "changes": 67,
                "blob_url": "https://github.com/apache/pulsar/blob/2fe4a38d1d4b5c2b17fda22e80c957f4a73de1b3/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/JavaInstanceRunnableProcessTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix NPE for void functions (#258)",
        "commit": "https://github.com/apache/pulsar/commit/2fe4a38d1d4b5c2b17fda22e80c957f4a73de1b3"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/fe6747b002aae29a5622c7d3b8d4edcc2bfa3d48",
        "bug_id": "pulsar_51",
        "file": [
            {
                "additions": 2,
                "sha": "9723c1aab2025f2cfa503b1d785ac98f7ac397df",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/64d2b18d2d511cb0a498d7d618fc6861c1064cee/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java",
                "deletions": 2,
                "filename": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java?ref=64d2b18d2d511cb0a498d7d618fc6861c1064cee",
                "patch": "@@ -57,7 +57,7 @@\n \n     private final String consumerName;\n     private final Consumer consumer;\n-    private WorkerConfig workerConfig;\n+    private final WorkerConfig workerConfig;\n     private PulsarAdmin pulsarAdminClient;\n     private final CompletableFuture<Void> firstConsumerEventFuture;\n     private final AtomicBoolean isLeader = new AtomicBoolean();\n@@ -71,6 +71,7 @@\n \n     MembershipManager(WorkerConfig workerConfig, PulsarClient client)\n             throws PulsarClientException {\n+        this.workerConfig = workerConfig;\n         consumerName = String.format(\n             \"%s:%s:%d\",\n             workerConfig.getWorkerId(),\n@@ -90,7 +91,6 @@\n                 .setConsumerName(consumerName)\n                 .setConsumerEventListener(this)\n         );\n-        this.workerConfig = workerConfig;\n     }\n \n     @Override",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/64d2b18d2d511cb0a498d7d618fc6861c1064cee/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix NPE on serializing MembershipManager (#235)\n\n\r\n\r\n*Problem*\r\n\r\nIf we assign workerConfig after setting consumer listener, when `ConsumerStats` tries to dump the consumer configuration,\r\nit will throw NPE.\r\n\r\n*Solution*\r\n\r\nhttps://github.com/apache/incubator-pulsar/pull/1260 tried to ignore listener fields for json serialization\r\n\r\nthis change focus on avoiding NPE on serializing MembershipManager",
        "commit": "https://github.com/apache/pulsar/commit/64d2b18d2d511cb0a498d7d618fc6861c1064cee"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/525239b12951cc68bac4a32706e2c3c405b15987",
        "bug_id": "pulsar_52",
        "file": [
            {
                "additions": 12,
                "sha": "5688411c600ec5908368c68561d1afe917b39c2c",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ea503da4b279d04de13ed676291e1b943f9f973f/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeSpawner.java",
                "deletions": 5,
                "filename": "pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeSpawner.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeSpawner.java?ref=ea503da4b279d04de13ed676291e1b943f9f973f",
                "patch": "@@ -32,6 +32,7 @@\n import lombok.extern.slf4j.Slf4j;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.apache.pulsar.common.util.FutureUtil;\n import org.apache.pulsar.functions.instance.InstanceConfig;\n import org.apache.pulsar.functions.proto.Function.FunctionDetails;\n import org.apache.pulsar.functions.proto.InstanceCommunication.FunctionStatus;\n@@ -82,7 +83,8 @@ public void start() throws Exception {\n             processLivenessCheckTimer.scheduleAtFixedRate(new TimerTask() {\n                 @Override\n                 public void run() {\n-                    if (!runtime.isAlive()) {\n+                    Runtime runtime = RuntimeSpawner.this.runtime;\n+                    if (runtime != null && !runtime.isAlive()) {\n                         log.error(\"{}/{}/{}-{} Function Container is dead with exception.. restarting\", details.getTenant(),\n                                 details.getNamespace(), details.getName(), runtime.getDeathException());\n                         // Just for the sake of sanity, just destroy the runtime\n@@ -108,6 +110,10 @@ public void join() throws Exception {\n     }\n \n     public CompletableFuture<FunctionStatus> getFunctionStatus(int instanceId) {\n+        Runtime runtime = this.runtime;\n+        if (null == runtime) {\n+            return FutureUtil.failedFuture(new IllegalStateException(\"Function runtime is not started yet\"));\n+        }\n         return runtime.getFunctionStatus(instanceId).thenApply(f -> {\n            FunctionStatus.Builder builder = FunctionStatus.newBuilder();\n            builder.mergeFrom(f).setNumRestarts(numRestarts).setInstanceId(String.valueOf(instanceId));\n@@ -131,6 +137,11 @@ public void join() throws Exception {\n \n     @Override\n     public void close() {\n+        // cancel liveness checker before stopping runtime.\n+        if (processLivenessCheckTimer != null) {\n+            processLivenessCheckTimer.cancel();\n+            processLivenessCheckTimer = null;\n+        }\n         if (null != runtime) {\n             try {\n                 runtime.stop();\n@@ -139,9 +150,5 @@ public void close() {\n             }\n             runtime = null;\n         }\n-        if (processLivenessCheckTimer != null) {\n-            processLivenessCheckTimer.cancel();\n-            processLivenessCheckTimer = null;\n-        }\n     }\n }",
                "changes": 17,
                "blob_url": "https://github.com/apache/pulsar/blob/ea503da4b279d04de13ed676291e1b943f9f973f/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeSpawner.java"
            }
        ],
        "repo": "pulsar",
        "message": "[function][runtime] NPE at RuntimeSpawner (#2728)\n\n*Motivation*\r\n\r\ngetFunctionStat call can happen before spanwer starts the runtime\r\n\r\n*Changes*\r\n\r\nAdd null checks and also change the order of closing sequence in RuntimeSpawner",
        "commit": "https://github.com/apache/pulsar/commit/ea503da4b279d04de13ed676291e1b943f9f973f"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/1e4f7695972c2ccd2f2b9566e5b9eefeec650b5f",
        "bug_id": "pulsar_53",
        "file": [
            {
                "additions": 37,
                "sha": "f576f952e702480606a45cd928f145edd094e728",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ea6f366997c7a693f926df4d340ff87e9177db1d/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java",
                "deletions": 33,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java?ref=ea6f366997c7a693f926df4d340ff87e9177db1d",
                "patch": "@@ -355,6 +355,9 @@ public void start() throws PulsarServerException {\n             // Start load management service (even if load balancing is disabled)\n             this.loadManager.set(LoadManager.create(this));\n \n+            // Start the leader election service\n+            startLeaderElectionService();\n+\n             // needs load management service\n             this.startNamespaceService();\n \n@@ -418,39 +421,6 @@ public Boolean get() {\n             // Register heartbeat and bootstrap namespaces.\n             this.nsservice.registerBootstrapNamespaces();\n \n-            // Start the leader election service\n-            this.leaderElectionService = new LeaderElectionService(this, new LeaderListener() {\n-                @Override\n-                public synchronized void brokerIsTheLeaderNow() {\n-                    if (getConfiguration().isLoadBalancerEnabled()) {\n-                        long loadSheddingInterval = TimeUnit.MINUTES\n-                                .toMillis(getConfiguration().getLoadBalancerSheddingIntervalMinutes());\n-                        long resourceQuotaUpdateInterval = TimeUnit.MINUTES\n-                                .toMillis(getConfiguration().getLoadBalancerResourceQuotaUpdateIntervalMinutes());\n-\n-                        loadSheddingTask = loadManagerExecutor.scheduleAtFixedRate(new LoadSheddingTask(loadManager),\n-                                loadSheddingInterval, loadSheddingInterval, TimeUnit.MILLISECONDS);\n-                        loadResourceQuotaTask = loadManagerExecutor.scheduleAtFixedRate(\n-                                new LoadResourceQuotaUpdaterTask(loadManager), resourceQuotaUpdateInterval,\n-                                resourceQuotaUpdateInterval, TimeUnit.MILLISECONDS);\n-                    }\n-                }\n-\n-                @Override\n-                public synchronized void brokerIsAFollowerNow() {\n-                    if (loadSheddingTask != null) {\n-                        loadSheddingTask.cancel(false);\n-                        loadSheddingTask = null;\n-                    }\n-                    if (loadResourceQuotaTask != null) {\n-                        loadResourceQuotaTask.cancel(false);\n-                        loadResourceQuotaTask = null;\n-                    }\n-                }\n-            });\n-\n-            leaderElectionService.start();\n-\n             schemaRegistryService = SchemaRegistryService.create(this);\n \n             webService.start();\n@@ -480,6 +450,40 @@ public synchronized void brokerIsAFollowerNow() {\n         }\n     }\n \n+    private void startLeaderElectionService() {\n+        this.leaderElectionService = new LeaderElectionService(this, new LeaderListener() {\n+            @Override\n+            public synchronized void brokerIsTheLeaderNow() {\n+                if (getConfiguration().isLoadBalancerEnabled()) {\n+                    long loadSheddingInterval = TimeUnit.MINUTES\n+                            .toMillis(getConfiguration().getLoadBalancerSheddingIntervalMinutes());\n+                    long resourceQuotaUpdateInterval = TimeUnit.MINUTES\n+                            .toMillis(getConfiguration().getLoadBalancerResourceQuotaUpdateIntervalMinutes());\n+\n+                    loadSheddingTask = loadManagerExecutor.scheduleAtFixedRate(new LoadSheddingTask(loadManager),\n+                            loadSheddingInterval, loadSheddingInterval, TimeUnit.MILLISECONDS);\n+                    loadResourceQuotaTask = loadManagerExecutor.scheduleAtFixedRate(\n+                            new LoadResourceQuotaUpdaterTask(loadManager), resourceQuotaUpdateInterval,\n+                            resourceQuotaUpdateInterval, TimeUnit.MILLISECONDS);\n+                }\n+            }\n+\n+            @Override\n+            public synchronized void brokerIsAFollowerNow() {\n+                if (loadSheddingTask != null) {\n+                    loadSheddingTask.cancel(false);\n+                    loadSheddingTask = null;\n+                }\n+                if (loadResourceQuotaTask != null) {\n+                    loadResourceQuotaTask.cancel(false);\n+                    loadResourceQuotaTask = null;\n+                }\n+            }\n+        });\n+\n+        leaderElectionService.start();\n+    }\n+\n     private void acquireSLANamespace() {\n         try {\n             // Namespace not created hence no need to unload it",
                "changes": 70,
                "blob_url": "https://github.com/apache/pulsar/blob/ea6f366997c7a693f926df4d340ff87e9177db1d/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix NPE: namespaceService need leaderElection service (#3238)\n\n### Motivation\r\n\r\nnamespace-service uses leaderElectionService so, leaderElectionService should start before namespace-service.\r\n\r\n```\r\nCaused by: java.lang.NullPointerException\r\n        at org.apache.pulsar.broker.namespace.NamespaceService.searchForCandidateBroker(NamespaceService.java:376) ~[pulsar-broker-2.2.jar]\r\n        ... 9 more\r\n\r\n\r\n                at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1977) ~[?:1.8.0_131]\r\n        at org.apache.pulsar.broker.namespace.NamespaceService.searchForCandidateBroker(NamespaceService.java:395) ~[pulsar-broker-2.2.jar]\r\n        at org.apache.pulsar.broker.namespace.NamespaceService.lambda$22(NamespaceService.java:335) ~[pulsar-broker-2.2.jar]\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_131]\r\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_131]\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_131]\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_131]\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_131]\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_131]\r\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [pulsar-functions-metrics-2.2.2-yahoo.jar:?]\r\n        at java.lang.Thread.run(Thread.java:748) [?:1.8.0_131]\r\n```",
        "commit": "https://github.com/apache/pulsar/commit/ea6f366997c7a693f926df4d340ff87e9177db1d"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/92802e9efafc487c9c336fd9c99989cf8e5c390c",
        "bug_id": "pulsar_54",
        "file": [
            {
                "additions": 6,
                "sha": "1cc239db6336d7496fef36e75ab558df274474b4",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/CmdFunctionsTest.java",
                "deletions": 1,
                "filename": "pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/CmdFunctionsTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/CmdFunctionsTest.java?ref=ecec9337094820c65fe5ecf128f8070a3538bddd",
                "patch": "@@ -86,7 +86,12 @@ public IObjectFactory getObjectFactory() {\n     private Functions functions;\n     private CmdFunctions cmd;\n \n-    public class DummyFunction implements Function<String, String> {\n+    public static class DummyFunction implements Function<String, String> {\n+\n+        public DummyFunction() {\n+\n+        }\n+\n         @Override\n         public String process(String input, Context context) throws Exception {\n             return null;",
                "changes": 7,
                "blob_url": "https://github.com/apache/pulsar/blob/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/CmdFunctionsTest.java"
            },
            {
                "additions": 65,
                "sha": "94e17ad17b390545acba833538d0b18f112fe045",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java",
                "deletions": 238,
                "filename": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java?ref=ecec9337094820c65fe5ecf128f8070a3538bddd",
                "patch": "@@ -18,14 +18,8 @@\n  */\n package org.apache.pulsar.admin.cli;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static java.util.Objects.isNull;\n-import static org.apache.bookkeeper.common.concurrent.FutureUtils.result;\n-import static org.apache.pulsar.common.naming.TopicName.DEFAULT_NAMESPACE;\n-import static org.apache.pulsar.common.naming.TopicName.PUBLIC_TENANT;\n-\n import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.ParameterException;\n import com.beust.jcommander.Parameters;\n import com.beust.jcommander.converters.StringConverter;\n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -35,31 +29,12 @@\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonParser;\n import com.google.gson.reflect.TypeToken;\n-\n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufUtil;\n import io.netty.buffer.Unpooled;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n-import java.net.MalformedURLException;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Timer;\n-import java.util.TimerTask;\n-import java.util.UUID;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.TimeUnit;\n-\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n-\n+import net.jodah.typetools.TypeResolver;\n import org.apache.bookkeeper.api.StorageClient;\n import org.apache.bookkeeper.api.kv.Table;\n import org.apache.bookkeeper.api.kv.result.KeyValue;\n@@ -70,10 +45,7 @@\n import org.apache.pulsar.client.admin.PulsarAdmin;\n import org.apache.pulsar.client.admin.internal.FunctionsImpl;\n import org.apache.pulsar.client.api.PulsarClientException;\n-import org.apache.pulsar.common.naming.TopicName;\n import org.apache.pulsar.functions.api.Function;\n-import org.apache.pulsar.functions.api.SerDe;\n-import org.apache.pulsar.functions.api.utils.DefaultSerDe;\n import org.apache.pulsar.functions.instance.InstanceConfig;\n import org.apache.pulsar.functions.proto.Function.FunctionDetails;\n import org.apache.pulsar.functions.proto.Function.ProcessingGuarantees;\n@@ -87,10 +59,33 @@\n import org.apache.pulsar.functions.utils.Reflections;\n import org.apache.pulsar.functions.utils.Utils;\n import org.apache.pulsar.functions.utils.WindowConfig;\n+import org.apache.pulsar.functions.utils.validation.ConfigValidation;\n import org.apache.pulsar.functions.windowing.WindowFunctionExecutor;\n import org.apache.pulsar.functions.windowing.WindowUtils;\n \n-import net.jodah.typetools.TypeResolver;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.net.MalformedURLException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.isNull;\n+import static org.apache.bookkeeper.common.concurrent.FutureUtils.result;\n+import static org.apache.pulsar.common.naming.TopicName.DEFAULT_NAMESPACE;\n+import static org.apache.pulsar.common.naming.TopicName.PUBLIC_TENANT;\n \n @Slf4j\n @Parameters(commandDescription = \"Interface for managing Pulsar Functions (lightweight, Lambda-style compute processes that work with Pulsar)\")\n@@ -228,7 +223,7 @@ void processArguments() throws Exception {\n         @Parameter(names = \"--userConfig\", description = \"User-defined config key/values\")\n         protected String userConfigString;\n         @Parameter(names = \"--parallelism\", description = \"The function's parallelism factor (i.e. the number of function instances to run)\")\n-        protected String parallelism;\n+        protected Integer parallelism;\n         @Parameter(names = \"--cpu\", description = \"The cpu in cores that need to be allocated per function instance(applicable only to docker runtime)\")\n         protected Double cpu;\n         @Parameter(names = \"--ram\", description = \"The ram in bytes that need to be allocated per function instance(applicable only to process/docker runtime)\")\n@@ -275,19 +270,14 @@ void processArguments() throws Exception {\n \n             if (null != inputs) {\n                 List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n-                inputTopics.forEach(this::validateTopicName);\n                 functionConfig.setInputs(inputTopics);\n             }\n             if (null != customSerdeInputString) {\n                 Type type = new TypeToken<Map<String, String>>(){}.getType();\n                 Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n-                customSerdeInputMap.forEach((topic, serde) -> {\n-                    validateTopicName(topic);\n-                });\n                 functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n             }\n             if (null != output) {\n-                validateTopicName(output);\n                 functionConfig.setOutput(output);\n             }\n             if (null != logTopic) {\n@@ -320,37 +310,12 @@ void processArguments() throws Exception {\n                 functionConfig.setUserConfig(new HashMap<>());\n             }\n \n-            if (functionConfig.getInputs().isEmpty() && functionConfig.getCustomSerdeInputs().isEmpty()) {\n-                throw new RuntimeException(\"No input topic(s) specified for the function\");\n-            }\n-\n-            // Ensure that topics aren't being used as both input and output\n-            verifyNoTopicClash(functionConfig.getInputs(), functionConfig.getOutput());\n-\n-            if (parallelism == null) {\n-                if (functionConfig.getParallelism() == 0) {\n-                    functionConfig.setParallelism(1);\n-                }\n-            } else {\n-                int num = Integer.parseInt(parallelism);\n-                if (num <= 0) {\n-                    throw new IllegalArgumentException(\"The parallelism factor (the number of instances) for the function must be positive\");\n-                }\n-                functionConfig.setParallelism(num);\n+            if (parallelism != null) {\n+                functionConfig.setParallelism(parallelism);\n             }\n \n-            com.google.common.base.Preconditions.checkArgument(cpu == null || cpu > 0, \"The cpu allocation for the function must be positive\");\n-            com.google.common.base.Preconditions.checkArgument(ram == null || ram > 0, \"The ram allocation for the function must be positive\");\n-            com.google.common.base.Preconditions.checkArgument(disk == null || disk > 0, \"The disk allocation for the function must be positive\");\n             functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n \n-            if (functionConfig.getSubscriptionType() != null\n-                    && functionConfig.getSubscriptionType() != FunctionConfig.SubscriptionType.FAILOVER\n-                    && functionConfig.getProcessingGuarantees() != null\n-                    && functionConfig.getProcessingGuarantees() == FunctionConfig.ProcessingGuarantees.EFFECTIVELY_ONCE) {\n-                throw new IllegalArgumentException(\"Effectively-once processing semantics can only be achieved using a Failover subscription type\");\n-            }\n-\n             // window configs\n             WindowConfig windowConfig = functionConfig.getWindowConfig();\n             if (null != windowLengthCount) {\n@@ -377,15 +342,7 @@ void processArguments() throws Exception {\n                 }\n                 windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n             }\n-            if (windowConfig != null) {\n-                WindowUtils.validateAndSetDefaultsWindowConfig(windowConfig);\n-                // set auto ack to false since windowing framework is responsible\n-                // for acking and not the function framework\n-                if (autoAck != null && autoAck == true) {\n-                    throw new IllegalArgumentException(\"Cannot enable auto ack when using windowing functionality\");\n-                }\n-                functionConfig.setAutoAck(false);\n-            }\n+\n             functionConfig.setWindowConfig(windowConfig);\n \n             if  (null != autoAck) {\n@@ -394,188 +351,43 @@ void processArguments() throws Exception {\n                 functionConfig.setAutoAck(true);\n             }\n \n-            inferMissingArguments(functionConfig);\n \n             if (null != jarFile) {\n-                doJavaSubmitChecks(functionConfig);\n                 functionConfig.setRuntime(FunctionConfig.Runtime.JAVA);\n                 userCodeFile = jarFile;\n             } else if (null != pyFile) {\n-                doPythonSubmitChecks(functionConfig);\n                 functionConfig.setRuntime(FunctionConfig.Runtime.PYTHON);\n                 userCodeFile = pyFile;\n             } else {\n                 throw new RuntimeException(\"Either a Java jar or a Python file needs to be specified for the function\");\n             }\n-        }\n \n-        private Class<?>[] getFunctionTypes(File file, FunctionConfig functionConfig) {\n-            assertClassExistsInJar(file);\n-\n-            Object userClass = Reflections.createInstance(functionConfig.getClassName(), file);\n-            Class<?>[] typeArgs;\n-            // if window function\n-            if (functionConfig.getWindowConfig() != null) {\n-                java.util.function.Function function = (java.util.function.Function) userClass;\n-                if (function == null) {\n-                    throw new IllegalArgumentException(String.format(\"The Java util function class %s could not be instantiated from jar %s\",\n-                            functionConfig.getClassName(), jarFile));\n-                }\n-                typeArgs = TypeResolver.resolveRawArguments(java.util.function.Function.class, function.getClass());\n-                if (!typeArgs[0].equals(Collection.class)) {\n-                    throw new IllegalArgumentException(\"Window function must take a collection as input\");\n-                }\n-                Type type = TypeResolver.resolveGenericType(java.util.function.Function.class, function.getClass());\n-                Type collectionType = ((ParameterizedType) type).getActualTypeArguments()[0];\n-                Type actualInputType = ((ParameterizedType) collectionType).getActualTypeArguments()[0];\n-                typeArgs[0] = (Class<?>) actualInputType;\n-            } else {\n-                if (userClass instanceof Function) {\n-                    Function pulsarFunction = (Function) userClass;\n-                    if (pulsarFunction == null) {\n-                        throw new IllegalArgumentException(String.format(\"The Pulsar function class %s could not be instantiated from jar %s\",\n-                                functionConfig.getClassName(), jarFile));\n-                    }\n-                    typeArgs = TypeResolver.resolveRawArguments(Function.class, pulsarFunction.getClass());\n-                } else {\n-                    java.util.function.Function function = (java.util.function.Function) userClass;\n-                    if (function == null) {\n-                        throw new IllegalArgumentException(String.format(\"The Java util function class %s could not be instantiated from jar %s\",\n-                                functionConfig.getClassName(), jarFile));\n-                    }\n-                    typeArgs = TypeResolver.resolveRawArguments(java.util.function.Function.class, function.getClass());\n-                }\n-            }\n+            // infer default vaues\n+            inferMissingArguments(functionConfig);\n \n-            return typeArgs;\n+            // check if function configs are valid\n+            validateFunctionConfigs(functionConfig);\n         }\n \n-        private void assertClassExistsInJar(File file) {\n-            if (!Reflections.classExistsInJar(file, functionConfig.getClassName())) {\n-                throw new IllegalArgumentException(String.format(\"Pulsar function class %s does not exist in jar %s\",\n-                        functionConfig.getClassName(), jarFile));\n-            } else if (!Reflections.classInJarImplementsIface(file, functionConfig.getClassName(), Function.class)\n-                    && !Reflections.classInJarImplementsIface(file, functionConfig.getClassName(), java.util.function.Function.class)) {\n-                throw new IllegalArgumentException(String.format(\"The Pulsar function class %s in jar %s implements neither org.apache.pulsar.functions.api.Function nor java.util.function.Function\",\n-                        functionConfig.getClassName(), jarFile));\n-            }\n-        }\n+        private void validateFunctionConfigs(FunctionConfig functionConfig) {\n \n-        private void doJavaSubmitChecks(FunctionConfig functionConfig) {\n-            if (isNull(functionConfig.getClassName())) {\n-                throw new IllegalArgumentException(\"You supplied a jar file but no main class\");\n-            }\n-\n-            File file = new File(jarFile);\n-            ClassLoader userJarLoader;\n-            try {\n-                userJarLoader = Reflections.loadJar(file);\n-            } catch (MalformedURLException e) {\n-                throw new RuntimeException(\"Failed to load user jar \" + file, e);\n-            }\n-            Class<?>[] typeArgs = getFunctionTypes(file, functionConfig);\n-            // Check if the Input serialization/deserialization class exists in jar or already loaded and that it\n-            // implements SerDe class\n-            functionConfig.getCustomSerdeInputs().forEach((topicName, inputSerializer) -> {\n-                if (!Reflections.classExists(inputSerializer)\n-                        && !Reflections.classExistsInJar(new File(jarFile), inputSerializer)) {\n-                    throw new IllegalArgumentException(\n-                            String.format(\"The input serialization/deserialization class %s does not exist\",\n-                                    inputSerializer));\n-                } else if (Reflections.classExists(inputSerializer)) {\n-                    if (!Reflections.classImplementsIface(inputSerializer, SerDe.class)) {\n-                        throw new IllegalArgumentException(String.format(\"The input serialization/deserialization class %s does not not implement %s\",\n-                                inputSerializer, SerDe.class.getCanonicalName()));\n-                    }\n-                } else if (Reflections.classExistsInJar(new File(jarFile), inputSerializer)) {\n-                    if (!Reflections.classInJarImplementsIface(new File(jarFile), inputSerializer, SerDe.class)) {\n-                        throw new IllegalArgumentException(String.format(\"The input serialization/deserialization class %s does not not implement %s\",\n-                                inputSerializer, SerDe.class.getCanonicalName()));\n-                    }\n-                }\n-                if (inputSerializer.equals(DefaultSerDe.class.getName())) {\n-                    if (!DefaultSerDe.IsSupportedType(typeArgs[0])) {\n-                        throw new RuntimeException(\"The default Serializer does not support type \" + typeArgs[0]);\n-                    }\n-                } else {\n-                    SerDe serDe = (SerDe) Reflections.createInstance(inputSerializer, file);\n-                    if (serDe == null) {\n-                        throw new IllegalArgumentException(String.format(\"The SerDe class %s does not exist in jar %s\",\n-                                inputSerializer, jarFile));\n-                    }\n-                    Class<?>[] serDeTypes = TypeResolver.resolveRawArguments(SerDe.class, serDe.getClass());\n-\n-                    // type inheritance information seems to be lost in generic type\n-                    // load the actual type class for verification\n-                    Class<?> fnInputClass;\n-                    Class<?> serdeInputClass;\n-                    try {\n-                        fnInputClass = Class.forName(typeArgs[0].getName(), true, userJarLoader);\n-                        serdeInputClass = Class.forName(serDeTypes[0].getName(), true, userJarLoader);\n-                    } catch (ClassNotFoundException e) {\n-                        throw new RuntimeException(\"Failed to load type class\", e);\n-                    }\n-\n-                    if (!fnInputClass.isAssignableFrom(serdeInputClass)) {\n-                        throw new RuntimeException(\"Serializer type mismatch \" + typeArgs[0] + \" vs \" + serDeTypes[0]);\n-                    }\n-                }\n-            });\n-            functionConfig.getInputs().forEach((topicName) -> {\n-                if (!DefaultSerDe.IsSupportedType(typeArgs[0])) {\n-                    throw new RuntimeException(\"Default Serializer does not support type \" + typeArgs[0]);\n-                }\n-            });\n-            if (!Void.class.equals(typeArgs[1])) {\n-                if (functionConfig.getOutputSerdeClassName() == null\n-                        || functionConfig.getOutputSerdeClassName().isEmpty()\n-                        || functionConfig.getOutputSerdeClassName().equals(DefaultSerDe.class.getName())) {\n-                    if (!DefaultSerDe.IsSupportedType(typeArgs[1])) {\n-                        throw new RuntimeException(\"Default Serializer does not support type \" + typeArgs[1]);\n-                    }\n-                } else {\n-                    SerDe serDe = (SerDe) Reflections.createInstance(functionConfig.getOutputSerdeClassName(), file);\n-                    if (serDe == null) {\n-                        throw new IllegalArgumentException(String.format(\"SerDe class %s does not exist in jar %s\",\n-                                functionConfig.getOutputSerdeClassName(), jarFile));\n-                    }\n-                    Class<?>[] serDeTypes = TypeResolver.resolveRawArguments(SerDe.class, serDe.getClass());\n-\n-                    // type inheritance information seems to be lost in generic type\n-                    // load the actual type class for verification\n-                    Class<?> fnOutputClass;\n-                    Class<?> serdeOutputClass;\n-                    try {\n-                        fnOutputClass = Class.forName(typeArgs[1].getName(), true, userJarLoader);\n-                        serdeOutputClass = Class.forName(serDeTypes[0].getName(), true, userJarLoader);\n-                    } catch (ClassNotFoundException e) {\n-                        throw new RuntimeException(\"Failed to load type class\", e);\n-                    }\n-\n-                    if (!serdeOutputClass.isAssignableFrom(fnOutputClass)) {\n-                        throw new RuntimeException(\"Serializer type mismatch \" + typeArgs[1] + \" vs \" + serDeTypes[0]);\n-                    }\n+            if (functionConfig.getRuntime() == FunctionConfig.Runtime.JAVA) {\n+                File file = new File(jarFile);\n+                ClassLoader userJarLoader;\n+                try {\n+                    userJarLoader = Reflections.loadJar(file);\n+                } catch (MalformedURLException e) {\n+                    throw new RuntimeException(\"Failed to load user jar \" + file, e);\n                 }\n-            }\n-        }\n-\n-        private void doPythonSubmitChecks(FunctionConfig functionConfig) {\n-            if (functionConfig.getClassName() == null) {\n-                throw new IllegalArgumentException(\"You specified a Python file but no main class name\");\n-            }\n-\n-            if (functionConfig.getProcessingGuarantees() == FunctionConfig.ProcessingGuarantees.EFFECTIVELY_ONCE) {\n-                throw new RuntimeException(\"Effectively-once processing guarantees not yet supported in Python\");\n+                // make sure the function class loader is accessible thread-locally\n+                Thread.currentThread().setContextClassLoader(userJarLoader);\n             }\n \n-            if (functionConfig.getWindowConfig() != null) {\n-                throw new IllegalArgumentException(\"There is currently no support windowing in python\");\n-            }\n-        }\n-\n-        private void validateTopicName(String topic) {\n-            if (!TopicName.isValid(topic)) {\n-                throw new IllegalArgumentException(String.format(\"The topic name %s is invalid\", topic));\n+            try {\n+                // Need to load jar and set context class loader before calling\n+                ConfigValidation.validateConfig(functionConfig);\n+            } catch (Exception e) {\n+                throw new ParameterException(e.getMessage());\n             }\n         }\n \n@@ -592,6 +404,21 @@ private void inferMissingArguments(FunctionConfig functionConfig) {\n             if (StringUtils.isEmpty(functionConfig.getOutput())) {\n                 inferMissingOutput(functionConfig);\n             }\n+\n+            if (functionConfig.getParallelism() == 0) {\n+                functionConfig.setParallelism(1);\n+            }\n+\n+            WindowConfig windowConfig = functionConfig.getWindowConfig();\n+            if (windowConfig != null) {\n+                WindowUtils.inferDefaultConfigs(windowConfig);\n+                // set auto ack to false since windowing framework is responsible\n+                // for acking and not the function framework\n+                if (autoAck != null && autoAck == true) {\n+                    throw new IllegalArgumentException(\"Cannot enable auto ack when using windowing functionality\");\n+                }\n+                functionConfig.setAutoAck(false);\n+            }\n         }\n \n         private void inferMissingFunctionName(FunctionConfig functionConfig) {\n@@ -649,7 +476,7 @@ protected FunctionDetails convert(FunctionConfig functionConfig)\n                 } catch (MalformedURLException e) {\n                     throw new RuntimeException(\"Failed to load user jar \" + file, e);\n                 }\n-                typeArgs = getFunctionTypes(file, functionConfig);\n+                typeArgs = Utils.getFunctionTypes(functionConfig);\n             }\n \n             FunctionDetails.Builder functionDetailsBuilder = FunctionDetails.newBuilder();",
                "changes": 303,
                "blob_url": "https://github.com/apache/pulsar/blob/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java"
            },
            {
                "additions": 4,
                "sha": "8f16eacd37685afcce7b6a528bf5b89914709997",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/windowing/WindowFunctionExecutor.java",
                "deletions": 1,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/windowing/WindowFunctionExecutor.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/windowing/WindowFunctionExecutor.java?ref=ecec9337094820c65fe5ecf128f8070a3538bddd",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.pulsar.functions.api.Function;\n import org.apache.pulsar.functions.utils.Reflections;\n import org.apache.pulsar.functions.utils.WindowConfig;\n+import org.apache.pulsar.functions.utils.validation.ValidatorImpls;\n import org.apache.pulsar.functions.windowing.evictors.CountEvictionPolicy;\n import org.apache.pulsar.functions.windowing.evictors.TimeEvictionPolicy;\n import org.apache.pulsar.functions.windowing.evictors.WatermarkCountEvictionPolicy;\n@@ -93,7 +94,9 @@ private WindowConfig getWindowConfigs(Context context) {\n                 (new Gson().toJson(context.getUserConfigValue(WindowConfig.WINDOW_CONFIG_KEY).get())),\n                 WindowConfig.class);\n \n-        WindowUtils.validateAndSetDefaultsWindowConfig(windowConfig);\n+\n+        WindowUtils.inferDefaultConfigs(windowConfig);\n+        ValidatorImpls.WindowConfigValidator.validateWindowConfig(windowConfig);\n         return windowConfig;\n     }\n ",
                "changes": 5,
                "blob_url": "https://github.com/apache/pulsar/blob/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/windowing/WindowFunctionExecutor.java"
            },
            {
                "additions": 3,
                "sha": "73dda87b616845713c70bd388b243560317514b4",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/windowing/WindowUtils.java",
                "deletions": 50,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/windowing/WindowUtils.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/windowing/WindowUtils.java?ref=ecec9337094820c65fe5ecf128f8070a3538bddd",
                "patch": "@@ -25,44 +25,7 @@ public static String getFullyQualifiedName(String tenant, String namespace, Stri\n         return String.format(\"%s/%s/%s\", tenant, namespace, name);\n     }\n \n-    public static void validateAndSetDefaultsWindowConfig(WindowConfig windowConfig) {\n-        if (windowConfig.getWindowLengthDurationMs() == null && windowConfig.getWindowLengthCount() == null) {\n-            throw new IllegalArgumentException(\"Window length is not specified\");\n-        }\n-\n-        if (windowConfig.getWindowLengthDurationMs() != null && windowConfig.getWindowLengthCount() != null) {\n-            throw new IllegalArgumentException(\n-                    \"Window length for time and count are set! Please set one or the other.\");\n-        }\n-\n-        if (windowConfig.getWindowLengthCount() != null) {\n-            if (windowConfig.getWindowLengthCount() <= 0) {\n-                throw new IllegalArgumentException(\n-                        \"Window length must be positive [\" + windowConfig.getWindowLengthCount() + \"]\");\n-            }\n-        }\n-\n-        if (windowConfig.getWindowLengthDurationMs() != null) {\n-            if (windowConfig.getWindowLengthDurationMs() <= 0) {\n-                throw new IllegalArgumentException(\n-                        \"Window length must be positive [\" + windowConfig.getWindowLengthDurationMs() + \"]\");\n-            }\n-        }\n-\n-        if (windowConfig.getSlidingIntervalCount() != null) {\n-            if (windowConfig.getSlidingIntervalCount() <= 0) {\n-                throw new IllegalArgumentException(\n-                        \"Sliding interval must be positive [\" + windowConfig.getSlidingIntervalCount() + \"]\");\n-            }\n-        }\n-\n-        if (windowConfig.getSlidingIntervalDurationMs() != null) {\n-            if (windowConfig.getSlidingIntervalDurationMs() <= 0) {\n-                throw new IllegalArgumentException(\n-                        \"Sliding interval must be positive [\" + windowConfig.getSlidingIntervalDurationMs() + \"]\");\n-            }\n-        }\n-\n+    public static void inferDefaultConfigs(WindowConfig windowConfig) {\n         if (windowConfig.getWindowLengthDurationMs() != null && windowConfig.getSlidingIntervalDurationMs() == null) {\n             windowConfig.setSlidingIntervalDurationMs(windowConfig.getWindowLengthDurationMs());\n         }\n@@ -72,20 +35,10 @@ public static void validateAndSetDefaultsWindowConfig(WindowConfig windowConfig)\n         }\n \n         if (windowConfig.getTimestampExtractorClassName() != null) {\n-            if (windowConfig.getMaxLagMs() != null) {\n-                if (windowConfig.getMaxLagMs() <= 0) {\n-                    throw new IllegalArgumentException(\n-                            \"Lag duration must be positive [\" + windowConfig.getMaxLagMs() + \"]\");\n-                }\n-            } else {\n+            if (windowConfig.getMaxLagMs() == null) {\n                 windowConfig.setMaxLagMs(WindowFunctionExecutor.DEFAULT_MAX_LAG_MS);\n             }\n-            if (windowConfig.getWatermarkEmitIntervalMs() != null) {\n-                if (windowConfig.getWatermarkEmitIntervalMs() <= 0) {\n-                    throw new IllegalArgumentException(\n-                            \"Watermark interval must be positive [\" + windowConfig.getWatermarkEmitIntervalMs() + \"]\");\n-                }\n-            } else {\n+            if (windowConfig.getWatermarkEmitIntervalMs() == null) {\n                 windowConfig.setWatermarkEmitIntervalMs(WindowFunctionExecutor.DEFAULT_WATERMARK_EVENT_INTERVAL_MS);\n             }\n         }",
                "changes": 53,
                "blob_url": "https://github.com/apache/pulsar/blob/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/windowing/WindowUtils.java"
            },
            {
                "additions": 2,
                "sha": "c5d5d4ac226495e294e71fb419fe4d6b76da5aa6",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/windowing/WindowFunctionExecutorTest.java",
                "deletions": 2,
                "filename": "pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/windowing/WindowFunctionExecutorTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/windowing/WindowFunctionExecutorTest.java?ref=ecec9337094820c65fe5ecf128f8070a3538bddd",
                "patch": "@@ -537,8 +537,8 @@ public void testSettingLagTime() throws Exception {\n                 if (arg0 == null) {\n                     Assert.assertEquals(testWindowedPulsarFunction.windowConfig.getMaxLagMs(),\n                             new Long(testWindowedPulsarFunction.DEFAULT_MAX_LAG_MS));\n-                } else if((Long) arg0 <= 0) {\n-                    fail(String.format(\"Window lag cannot be zero or less -- lagTime: %s\", arg0));\n+                } else if((Long) arg0 < 0) {\n+                    fail(String.format(\"Window lag cannot be less than zero -- lagTime: %s\", arg0));\n                 } else {\n                     Assert.assertEquals(testWindowedPulsarFunction.windowConfig.getMaxLagMs().longValue(),\n                             maxLagMs.longValue());",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/windowing/WindowFunctionExecutorTest.java"
            },
            {
                "additions": 5,
                "sha": "01710b1c5a6b67e20ca6b124ce8cf40d8f145d21",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/pom.xml",
                "deletions": 0,
                "filename": "pulsar-functions/utils/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/utils/pom.xml?ref=ecec9337094820c65fe5ecf128f8070a3538bddd",
                "patch": "@@ -82,6 +82,11 @@\n       <version>${project.version}</version>\n     </dependency>\n \n+    <dependency>\n+      <groupId>net.jodah</groupId>\n+      <artifactId>typetools</artifactId>\n+    </dependency>\n+\n   </dependencies>\n \n </project>",
                "changes": 5,
                "blob_url": "https://github.com/apache/pulsar/blob/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/pom.xml"
            },
            {
                "additions": 29,
                "sha": "2940e32da5db59558b0f057a1a77ed4b6d0dabc5",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/FunctionConfig.java",
                "deletions": 5,
                "filename": "pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/FunctionConfig.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/FunctionConfig.java?ref=ecec9337094820c65fe5ecf128f8070a3538bddd",
                "patch": "@@ -23,17 +23,29 @@\n import lombok.Getter;\n import lombok.Setter;\n import lombok.ToString;\n+import org.apache.pulsar.functions.api.Function;\n+import org.apache.pulsar.functions.api.SerDe;\n+import org.apache.pulsar.functions.utils.validation.ConfigValidationAnnotations.NotNull;\n+import org.apache.pulsar.functions.utils.validation.ConfigValidationAnnotations.isImplementationOfClass;\n+import org.apache.pulsar.functions.utils.validation.ConfigValidationAnnotations.isImplementationOfClasses;\n+import org.apache.pulsar.functions.utils.validation.ConfigValidationAnnotations.isListEntryCustom;\n+import org.apache.pulsar.functions.utils.validation.ConfigValidationAnnotations.isMapEntryCustom;\n+import org.apache.pulsar.functions.utils.validation.ConfigValidationAnnotations.isPositiveNumber;\n+import org.apache.pulsar.functions.utils.validation.ConfigValidationAnnotations.isValidFunctionConfig;\n+import org.apache.pulsar.functions.utils.validation.ConfigValidationAnnotations.isValidResources;\n+import org.apache.pulsar.functions.utils.validation.ConfigValidationAnnotations.isValidTopicName;\n+import org.apache.pulsar.functions.utils.validation.ConfigValidationAnnotations.isValidWindowConfig;\n+import org.apache.pulsar.functions.utils.validation.ValidatorImpls;\n \n import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n import java.util.Map;\n \n @Getter\n @Setter\n @Data\n @EqualsAndHashCode\n @ToString\n+@isValidFunctionConfig\n public class FunctionConfig {\n \n     public enum ProcessingGuarantees {\n@@ -61,25 +73,37 @@\n         PYTHON\n     }\n \n+\n+    @NotNull\n     private String tenant;\n+    @NotNull\n     private String namespace;\n+    @NotNull\n     private String name;\n+    @NotNull\n+    @isImplementationOfClasses(implementsClasses = {Function.class, java.util.function.Function.class})\n     private String className;\n-\n+    @isListEntryCustom(entryValidatorClasses = {ValidatorImpls.TopicNameValidator.class})\n     private Collection<String> inputs;\n+    @isMapEntryCustom(keyValidatorClasses = { ValidatorImpls.TopicNameValidator.class },\n+            valueValidatorClasses = { ValidatorImpls.SerdeValidator.class })\n     private Map<String, String> customSerdeInputs;\n-\n+    @isValidTopicName\n     private String output;\n+    @isImplementationOfClass(implementsClass = SerDe.class)\n     private String outputSerdeClassName;\n-\n+    @isValidTopicName\n     private String logTopic;\n     private ProcessingGuarantees processingGuarantees;\n     private Map<String, Object> userConfig;\n     private SubscriptionType subscriptionType;\n     private Runtime runtime;\n     private boolean autoAck;\n+    @isPositiveNumber\n     private int parallelism;\n+    @isValidResources\n     private Resources resources;\n     private String fqfn;\n+    @isValidWindowConfig\n     private WindowConfig windowConfig;\n }",
                "changes": 34,
                "blob_url": "https://github.com/apache/pulsar/blob/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/FunctionConfig.java"
            },
            {
                "additions": 73,
                "sha": "2963e571faa2ab45dcb677bebff7b0df3a5b2694",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/Utils.java",
                "deletions": 0,
                "filename": "pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/Utils.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/Utils.java?ref=ecec9337094820c65fe5ecf128f8070a3538bddd",
                "patch": "@@ -21,17 +21,28 @@\n import com.google.protobuf.AbstractMessage.Builder;\n import com.google.protobuf.MessageOrBuilder;\n import com.google.protobuf.util.JsonFormat;\n+\n import java.io.IOException;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n import java.net.ServerSocket;\n+import java.util.Collection;\n \n import lombok.AccessLevel;\n import lombok.NoArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.MessageId;\n import org.apache.pulsar.client.impl.MessageIdImpl;\n+import org.apache.pulsar.functions.api.Function;\n+\n+import net.jodah.typetools.TypeResolver;\n \n /**\n  * Utils used for runtime.\n  */\n+@Slf4j\n @NoArgsConstructor(access = AccessLevel.PRIVATE)\n public class Utils {\n \n@@ -76,4 +87,66 @@ public static int findAvailablePort() {\n             throw new RuntimeException(\"No free port found\", ex);\n         }\n     }\n+\n+    public static Class<?>[] getFunctionTypes(FunctionConfig functionConfig) {\n+\n+        Object userClass = createInstance(functionConfig.getClassName(), Thread.currentThread().getContextClassLoader());\n+\n+        Class<?>[] typeArgs;\n+        // if window function\n+        if (functionConfig.getWindowConfig() != null) {\n+            java.util.function.Function function = (java.util.function.Function) userClass;\n+            if (function == null) {\n+                throw new IllegalArgumentException(String.format(\"The Java util function class %s could not be instantiated\",\n+                        functionConfig.getClassName()));\n+            }\n+            typeArgs = TypeResolver.resolveRawArguments(java.util.function.Function.class, function.getClass());\n+            if (!typeArgs[0].equals(Collection.class)) {\n+                throw new IllegalArgumentException(\"Window function must take a collection as input\");\n+            }\n+            Type type = TypeResolver.resolveGenericType(java.util.function.Function.class, function.getClass());\n+            Type collectionType = ((ParameterizedType) type).getActualTypeArguments()[0];\n+            Type actualInputType = ((ParameterizedType) collectionType).getActualTypeArguments()[0];\n+            typeArgs[0] = (Class<?>) actualInputType;\n+        } else {\n+            if (userClass instanceof Function) {\n+                Function pulsarFunction = (Function) userClass;\n+                typeArgs = TypeResolver.resolveRawArguments(Function.class, pulsarFunction.getClass());\n+            } else {\n+                java.util.function.Function function = (java.util.function.Function) userClass;\n+                typeArgs = TypeResolver.resolveRawArguments(java.util.function.Function.class, function.getClass());\n+            }\n+        }\n+\n+        return typeArgs;\n+    }\n+\n+    public static Object createInstance(String userClassName, ClassLoader classLoader) {\n+        Class<?> theCls;\n+        try {\n+            theCls = Class.forName(userClassName);\n+        } catch (ClassNotFoundException cnfe) {\n+            try {\n+                theCls = Class.forName(userClassName, true, classLoader);\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(\"User class must be in class path\", cnfe);\n+            }\n+        }\n+        Object result;\n+        try {\n+            Constructor<?> meth = theCls.getDeclaredConstructor();\n+            meth.setAccessible(true);\n+            result = meth.newInstance();\n+        } catch (InstantiationException ie) {\n+            throw new RuntimeException(\"User class must be concrete\", ie);\n+        } catch (NoSuchMethodException e) {\n+            throw new RuntimeException(\"User class doesn't have such method\", e);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"User class must have a no-arg constructor\", e);\n+        } catch (InvocationTargetException e) {\n+            throw new RuntimeException(\"User class constructor throws exception\", e);\n+        }\n+        return result;\n+\n+    }\n }",
                "changes": 73,
                "blob_url": "https://github.com/apache/pulsar/blob/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/Utils.java"
            },
            {
                "additions": 119,
                "sha": "b665d1a69c419c7227a6c7108ae9bda1287a07b7",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ConfigValidation.java",
                "deletions": 0,
                "filename": "pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ConfigValidation.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ConfigValidation.java?ref=ecec9337094820c65fe5ecf128f8070a3538bddd",
                "patch": "@@ -0,0 +1,119 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.utils.validation;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Slf4j\n+public class ConfigValidation {\n+\n+    public static void validateConfig(Object config) {\n+        for (Field field : config.getClass().getDeclaredFields()) {\n+            Object value = null;\n+            field.setAccessible(true);\n+            try {\n+                value = field.get(config);\n+            } catch (IllegalAccessException e) {\n+               throw new RuntimeException(e);\n+            }\n+            validateField(field, value);\n+        }\n+        validateClass(config);\n+    }\n+\n+    private static void validateClass(Object config) {\n+        processAnnotations(config.getClass().getAnnotations(), config.getClass().getName(), config);\n+    }\n+\n+    private static void validateField(Field field, Object value) {\n+        processAnnotations(field.getAnnotations(), field.getName(), value);\n+    }\n+\n+    private static void processAnnotations(Annotation[] annotations, String fieldName, Object value) {\n+        try {\n+            for (Annotation annotation : annotations) {\n+\n+                String type = annotation.annotationType().getName();\n+                Class<?> validatorClass = null;\n+                Class<?>[] classes = ConfigValidationAnnotations.class.getDeclaredClasses();\n+                //check if annotation is one of our\n+                for (Class<?> clazz : classes) {\n+                    if (clazz.getName().equals(type)) {\n+                        validatorClass = clazz;\n+                        break;\n+                    }\n+                }\n+                if (validatorClass != null) {\n+                    Object v = validatorClass.cast(annotation);\n+                    @SuppressWarnings(\"unchecked\")\n+                    Class<Validator> clazz = (Class<Validator>) validatorClass\n+                            .getMethod(ConfigValidationAnnotations.ValidatorParams.VALIDATOR_CLASS).invoke(v);\n+                    Validator o = null;\n+                    Map<String, Object> params = getParamsFromAnnotation(validatorClass, v);\n+                    //two constructor signatures used to initialize validators.\n+                    //One constructor takes input a Map of arguments, the other doesn't take any arguments (default constructor)\n+                    //If validator has a constructor that takes a Map as an argument call that constructor\n+                    if (hasConstructor(clazz, Map.class)) {\n+                        o = clazz.getConstructor(Map.class).newInstance(params);\n+                    } else { //If not call default constructor\n+                        o = clazz.newInstance();\n+                    }\n+                    o.validateField(fieldName, value);\n+                }\n+            }\n+        } catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static Map<String, Object> getParamsFromAnnotation(Class<?> validatorClass, Object v)\n+            throws InvocationTargetException, IllegalAccessException {\n+        Map<String, Object> params = new HashMap<String, Object>();\n+        for (Method method : validatorClass.getDeclaredMethods()) {\n+\n+            Object value = null;\n+            try {\n+                value = (Object) method.invoke(v);\n+            } catch (IllegalArgumentException ex) {\n+                value = null;\n+            }\n+            if (value != null) {\n+                params.put(method.getName(), value);\n+            }\n+        }\n+        return params;\n+    }\n+\n+    public static boolean hasConstructor(Class<?> clazz, Class<?> paramClass) {\n+        Class<?>[] classes = { paramClass };\n+        try {\n+            clazz.getConstructor(classes);\n+        } catch (NoSuchMethodException e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+}",
                "changes": 119,
                "blob_url": "https://github.com/apache/pulsar/blob/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ConfigValidation.java"
            },
            {
                "additions": 183,
                "sha": "f08cbba3989586d0d8e9683d8da61d766e2edcfb",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ConfigValidationAnnotations.java",
                "deletions": 0,
                "filename": "pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ConfigValidationAnnotations.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ConfigValidationAnnotations.java?ref=ecec9337094820c65fe5ecf128f8070a3538bddd",
                "patch": "@@ -0,0 +1,183 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.utils.validation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+public class ConfigValidationAnnotations {\n+\n+    /**\n+     * Validates on object is not null\n+     */\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.FIELD)\n+    public @interface NotNull {\n+        Class<?> validatorClass() default ValidatorImpls.NotNullValidator.class;\n+    }\n+\n+    /**\n+     * Checks if a number is positive and whether zero inclusive Validator with fields: validatorClass, includeZero\n+     */\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.FIELD)\n+    public @interface isPositiveNumber {\n+        Class<?> validatorClass() default ValidatorImpls.PositiveNumberValidator.class;\n+\n+        boolean includeZero() default false;\n+    }\n+\n+\n+    /**\n+     * Checks if resources specified are valid\n+     */\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.FIELD)\n+    public @interface isValidResources {\n+\n+        Class<?> validatorClass() default ValidatorImpls.ResourcesValidator.class;\n+    }\n+\n+    /**\n+     * validates each entry in a list is of a certain type\n+     */\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.FIELD)\n+    public @interface isListEntryType {\n+        Class<?> validatorClass() default ValidatorImpls.ListEntryTypeValidator.class;\n+\n+        Class<?> type();\n+    }\n+\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.FIELD)\n+    public @interface isStringList {\n+        Class<?> validatorClass() default ValidatorImpls.ListEntryTypeValidator.class;\n+\n+        Class<?> type() default String.class;\n+    }\n+\n+    /**\n+     * Validates each entry in a list with a list of validators Validators with fields: validatorClass and entryValidatorClass\n+     */\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.FIELD)\n+    public @interface isListEntryCustom {\n+        Class<?> validatorClass() default ValidatorImpls.ListEntryCustomValidator.class;\n+\n+        Class<?>[] entryValidatorClasses();\n+    }\n+\n+\n+    /**\n+     * Validates the type of each key and value in a map Validator with fields: validatorClass, keyValidatorClass, valueValidatorClass\n+     */\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.FIELD)\n+    public @interface isMapEntryType {\n+        Class<?> validatorClass() default ValidatorImpls.MapEntryTypeValidator.class;\n+\n+        Class<?> keyType();\n+\n+        Class<?> valueType();\n+    }\n+\n+    /**\n+     * Checks if class name is assignable to the provided class/interfaces\n+     */\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.FIELD)\n+    public @interface isImplementationOfClass {\n+        Class<?> validatorClass() default ValidatorImpls.ImplementsClassValidator.class;\n+\n+        Class<?> implementsClass();\n+    }\n+\n+    /**\n+     * Checks if class name is assignable to ONE of the provided list class/interfaces\n+     */\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.FIELD)\n+    public @interface isImplementationOfClasses {\n+        Class<?> validatorClass() default ValidatorImpls.ImplementsClassesValidator.class;\n+\n+        Class<?>[] implementsClasses();\n+    }\n+\n+    /**\n+     * Validates a each key and value in a Map with a list of validators Validator with fields: validatorClass, keyValidatorClasses,\n+     * valueValidatorClasses\n+     */\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.FIELD)\n+    public @interface isMapEntryCustom {\n+        Class<?> validatorClass() default ValidatorImpls.MapEntryCustomValidator.class;\n+\n+        Class<?>[] keyValidatorClasses();\n+\n+        Class<?>[] valueValidatorClasses();\n+    }\n+\n+    /**\n+     * checks if the topic name is valid\n+     */\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.FIELD)\n+    public @interface isValidTopicName {\n+        Class<?> validatorClass() default ValidatorImpls.TopicNameValidator.class;\n+    }\n+\n+    /**\n+     * checks if window configs is valid\n+     */\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.FIELD)\n+    public @interface isValidWindowConfig {\n+        Class<?> validatorClass() default ValidatorImpls.WindowConfigValidator.class;\n+    }\n+\n+    /**\n+     * checks function config as a whole to make sure all fields are valid\n+     */\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target({ElementType.TYPE})\n+    public @interface isValidFunctionConfig {\n+        Class<?> validatorClass() default ValidatorImpls.FunctionConfigValidator.class;\n+    }\n+\n+    /**\n+     * Field names for annotations\n+     */\n+    public static class ValidatorParams {\n+        static final String VALIDATOR_CLASS = \"validatorClass\";\n+        static final String TYPE = \"type\";\n+        static final String BASE_TYPE = \"baseType\";\n+        static final String ENTRY_VALIDATOR_CLASSES = \"entryValidatorClasses\";\n+        static final String KEY_VALIDATOR_CLASSES = \"keyValidatorClasses\";\n+        static final String VALUE_VALIDATOR_CLASSES = \"valueValidatorClasses\";\n+        static final String KEY_TYPE = \"keyType\";\n+        static final String VALUE_TYPE = \"valueType\";\n+        static final String INCLUDE_ZERO = \"includeZero\";\n+        static final String ACCEPTED_VALUES = \"acceptedValues\";\n+        static final String IMPLEMENTS_CLASS = \"implementsClass\";\n+        static final String IMPLEMENTS_CLASSES = \"implementsClasses\";\n+    }\n+}",
                "changes": 183,
                "blob_url": "https://github.com/apache/pulsar/blob/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ConfigValidationAnnotations.java"
            },
            {
                "additions": 177,
                "sha": "f81cf068d6339ee92376da2ce938ff472eaa8200",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ConfigValidationUtils.java",
                "deletions": 0,
                "filename": "pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ConfigValidationUtils.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ConfigValidationUtils.java?ref=ecec9337094820c65fe5ecf128f8070a3538bddd",
                "patch": "@@ -0,0 +1,177 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.utils.validation;\n+\n+import java.util.Map;\n+\n+public class ConfigValidationUtils {\n+    /**\n+     * Returns a new NestableFieldValidator for a given class.\n+     *\n+     * @param cls     the Class the field should be a type of\n+     * @param notNull whether or not a value of null is valid\n+     * @return a NestableFieldValidator for that class\n+     */\n+    public static NestableFieldValidator fv(final Class cls, final boolean notNull) {\n+        return new NestableFieldValidator() {\n+            @Override\n+            public void validateField(String pd, String name, Object field)\n+                throws IllegalArgumentException {\n+                if (field == null) {\n+                    if (notNull) {\n+                        throw new IllegalArgumentException(\"Field \" + name + \" must not be null\");\n+                    } else {\n+                        return;\n+                    }\n+                }\n+                if (!cls.isInstance(field)) {\n+                    throw new IllegalArgumentException(\n+                        pd + name + \" must be a \" + cls.getName() + \". (\" + field + \")\");\n+                }\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Returns a new NestableFieldValidator for a List of the given Class.\n+     *\n+     * @param cls     the Class of elements composing the list\n+     * @param notNull whether or not a value of null is valid\n+     * @return a NestableFieldValidator for a list of the given class\n+     */\n+    public static NestableFieldValidator listFv(Class cls, boolean notNull) {\n+        return listFv(fv(cls, notNull), notNull);\n+    }\n+\n+    /**\n+     * Returns a new NestableFieldValidator for a List where each item is validated by validator.\n+     *\n+     * @param validator used to validate each item in the list\n+     * @param notNull   whether or not a value of null is valid\n+     * @return a NestableFieldValidator for a list with each item validated by a different validator.\n+     */\n+    public static NestableFieldValidator listFv(final NestableFieldValidator validator,\n+                                                final boolean notNull) {\n+        return new NestableFieldValidator() {\n+            @Override\n+            public void validateField(String pd, String name, Object field)\n+                throws IllegalArgumentException {\n+\n+                if (field == null) {\n+                    if (notNull) {\n+                        throw new IllegalArgumentException(\"Field \" + name + \" must not be null\");\n+                    } else {\n+                        return;\n+                    }\n+                }\n+                if (field instanceof Iterable) {\n+                    for (Object e : (Iterable) field) {\n+                        validator.validateField(pd + \"Each element of the list \", name, e);\n+                    }\n+                    return;\n+                }\n+                throw new IllegalArgumentException(\n+                    \"Field \" + name + \" must be an Iterable but was \" +\n+                    ((field == null) ? \"null\" : (\"a \" + field.getClass())));\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Returns a new NestableFieldValidator for a Map of key to val.\n+     *\n+     * @param key     the Class of keys in the map\n+     * @param val     the Class of values in the map\n+     * @param notNull whether or not a value of null is valid\n+     * @return a NestableFieldValidator for a Map of key to val\n+     */\n+    public static NestableFieldValidator mapFv(Class key, Class val,\n+                                               boolean notNull) {\n+        return mapFv(fv(key, false), fv(val, false), notNull);\n+    }\n+\n+    /**\n+     * Returns a new NestableFieldValidator for a Map.\n+     *\n+     * @param key     a validator for the keys in the map\n+     * @param val     a validator for the values in the map\n+     * @param notNull whether or not a value of null is valid\n+     * @return a NestableFieldValidator for a Map\n+     */\n+    public static NestableFieldValidator mapFv(final NestableFieldValidator key,\n+                                               final NestableFieldValidator val, final boolean notNull) {\n+        return new NestableFieldValidator() {\n+            @SuppressWarnings(\"unchecked\")\n+            @Override\n+            public void validateField(String pd, String name, Object field)\n+                throws IllegalArgumentException {\n+                if (field == null) {\n+                    if (notNull) {\n+                        throw new IllegalArgumentException(\"Field \" + name + \" must not be null\");\n+                    } else {\n+                        return;\n+                    }\n+                }\n+                if (field instanceof Map) {\n+                    for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) field).entrySet()) {\n+                        key.validateField(\"Each key of the map \", name, entry.getKey());\n+                        val.validateField(\"Each value in the map \", name, entry.getValue());\n+                    }\n+                    return;\n+                }\n+                throw new IllegalArgumentException(\n+                    \"Field \" + name + \" must be a Map\");\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Declares methods for validating configuration values.\n+     */\n+    public static interface FieldValidator {\n+        /**\n+         * Validates the given field.\n+         *\n+         * @param name  the name of the field.\n+         * @param field The field to be validated.\n+         * @throws IllegalArgumentException if the field fails validation.\n+         */\n+        public void validateField(String name, Object field) throws IllegalArgumentException;\n+    }\n+\n+    /**\n+     * Declares a method for validating configuration values that is nestable.\n+     */\n+    public static abstract class NestableFieldValidator implements FieldValidator {\n+        @Override\n+        public void validateField(String name, Object field) throws IllegalArgumentException {\n+            validateField(null, name, field);\n+        }\n+\n+        /**\n+         * Validates the given field.\n+         *\n+         * @param pd    describes the parent wrapping this validator.\n+         * @param name  the name of the field.\n+         * @param field The field to be validated.\n+         * @throws IllegalArgumentException if the field fails validation.\n+         */\n+        public abstract void validateField(String pd, String name, Object field) throws IllegalArgumentException;\n+    }\n+}",
                "changes": 177,
                "blob_url": "https://github.com/apache/pulsar/blob/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ConfigValidationUtils.java"
            },
            {
                "additions": 31,
                "sha": "59410482a137ba166290363eccf88bf54aceeee1",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/Validator.java",
                "deletions": 0,
                "filename": "pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/Validator.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/Validator.java?ref=ecec9337094820c65fe5ecf128f8070a3538bddd",
                "patch": "@@ -0,0 +1,31 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.utils.validation;\n+\n+import java.util.Map;\n+\n+public abstract class Validator {\n+    public Validator(Map<String, Object> params) {\n+    }\n+\n+    public Validator() {\n+    }\n+\n+    public abstract void validateField(String name, Object o);\n+}",
                "changes": 31,
                "blob_url": "https://github.com/apache/pulsar/blob/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/Validator.java"
            },
            {
                "additions": 655,
                "sha": "64c23f537b6af357dc003307110951fc06ab09b7",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ValidatorImpls.java",
                "deletions": 0,
                "filename": "pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ValidatorImpls.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ValidatorImpls.java?ref=ecec9337094820c65fe5ecf128f8070a3538bddd",
                "patch": "@@ -0,0 +1,655 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.utils.validation;\n+\n+import lombok.NoArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import net.jodah.typetools.TypeResolver;\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.functions.api.SerDe;\n+import org.apache.pulsar.functions.api.utils.DefaultSerDe;\n+import org.apache.pulsar.functions.utils.FunctionConfig;\n+import org.apache.pulsar.functions.utils.Reflections;\n+import org.apache.pulsar.functions.utils.Resources;\n+import org.apache.pulsar.functions.utils.Utils;\n+import org.apache.pulsar.functions.utils.WindowConfig;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+\n+@Slf4j\n+public class ValidatorImpls {\n+    /**\n+     * Validates a positive number.\n+     */\n+    public static class PositiveNumberValidator extends Validator {\n+\n+        private boolean includeZero;\n+\n+        public PositiveNumberValidator() {\n+            this.includeZero = false;\n+        }\n+\n+        public PositiveNumberValidator(Map<String, Object> params) {\n+            this.includeZero = (boolean) params.get(ConfigValidationAnnotations.ValidatorParams.INCLUDE_ZERO);\n+        }\n+\n+        public static void validateField(String name, boolean includeZero, Object o) {\n+            if (o == null) {\n+                return;\n+            }\n+            if (o instanceof Number) {\n+                if (includeZero) {\n+                    if (((Number) o).doubleValue() >= 0.0) {\n+                        return;\n+                    }\n+                } else {\n+                    if (((Number) o).doubleValue() > 0.0) {\n+                        return;\n+                    }\n+                }\n+            }\n+            throw new IllegalArgumentException(String.format(\"Field '%s' must be a Positive Number\", name));\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            validateField(name, this.includeZero, o);\n+        }\n+    }\n+\n+    /**\n+     * Validates if an object is not null.\n+     */\n+\n+    public static class NotNullValidator extends Validator {\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o == null) {\n+                throw new IllegalArgumentException(String.format(\"Field '%s' cannot be null!\", name));\n+            }\n+        }\n+    }\n+\n+    @NoArgsConstructor\n+    public static class ResourcesValidator extends Validator {\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o == null) {\n+               throw new IllegalArgumentException(String.format(\"Field '%s' cannot be null!\", name));\n+            }\n+\n+            if (o instanceof Resources) {\n+                Resources resources = (Resources) o;\n+                Double cpu = resources.getCpu();\n+                Long ram = resources.getRam();\n+                Long disk = resources.getDisk();\n+                com.google.common.base.Preconditions.checkArgument(cpu == null || cpu > 0.0,\n+                        \"The cpu allocation for the function must be positive\");\n+                com.google.common.base.Preconditions.checkArgument(ram == null || ram > 0L,\n+                        \"The ram allocation for the function must be positive\");\n+                com.google.common.base.Preconditions.checkArgument(disk == null || disk > 0L,\n+                        \"The disk allocation for the function must be positive\");\n+            } else {\n+                throw new IllegalArgumentException(String.format(\"Field '%s' must be of Resource type!\", name));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Validates each entry in a list.\n+     */\n+    public static class ListEntryTypeValidator extends Validator {\n+\n+        private Class<?> type;\n+\n+        public ListEntryTypeValidator(Map<String, Object> params) {\n+            this.type = (Class<?>) params.get(ConfigValidationAnnotations.ValidatorParams.TYPE);\n+        }\n+\n+        public static void validateField(String name, Class<?> type, Object o) {\n+            ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.listFv(type, false);\n+            validator.validateField(name, o);\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            validateField(name, this.type, o);\n+        }\n+    }\n+\n+    /**\n+     * validates each key and value in a map of a certain type.\n+     */\n+    public static class MapEntryTypeValidator extends Validator {\n+\n+        private Class<?> keyType;\n+        private Class<?> valueType;\n+\n+        public MapEntryTypeValidator(Map<String, Object> params) {\n+            this.keyType = (Class<?>) params.get(ConfigValidationAnnotations.ValidatorParams.KEY_TYPE);\n+            this.valueType = (Class<?>) params.get(ConfigValidationAnnotations.ValidatorParams.VALUE_TYPE);\n+        }\n+\n+        public static void validateField(String name, Class<?> keyType, Class<?> valueType, Object o) {\n+            ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(keyType, valueType, false);\n+            validator.validateField(name, o);\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            validateField(name, this.keyType, this.valueType, o);\n+        }\n+    }\n+\n+    public static class ImplementsClassValidator extends Validator {\n+\n+        Class<?> classImplements;\n+\n+        public ImplementsClassValidator(Map<String, Object> params) {\n+            this.classImplements = (Class<?>) params.get(ConfigValidationAnnotations.ValidatorParams.IMPLEMENTS_CLASS);\n+        }\n+\n+        public ImplementsClassValidator(Class<?> classImplements) {\n+            this.classImplements = classImplements;\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o == null) {\n+                return;\n+            }\n+            SimpleTypeValidator.validateField(name, String.class, o);\n+            String className = (String) o;\n+            try {\n+                ClassLoader clsLoader = Thread.currentThread().getContextClassLoader();\n+                Class<?> objectClass = clsLoader.loadClass(className);\n+                if (!this.classImplements.isAssignableFrom(objectClass)) {\n+                    throw new IllegalArgumentException(\n+                            String.format(\"Field '%s' with value '%s' does not implement %s \",\n+                                    name, o, this.classImplements.getName()));\n+                }\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * validates class implements one of these classes\n+     */\n+    public static class ImplementsClassesValidator extends Validator {\n+\n+        Class<?>[] classesImplements;\n+\n+        public ImplementsClassesValidator(Map<String, Object> params) {\n+            this.classesImplements = (Class<?>[]) params.get(ConfigValidationAnnotations.ValidatorParams.IMPLEMENTS_CLASSES);\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o == null) {\n+                return;\n+            }\n+            SimpleTypeValidator.validateField(name, String.class, o);\n+            String className = (String) o;\n+            int count = 0;\n+            for (Class<?> classImplements : classesImplements) {\n+                Class<?> objectClass = null;\n+                try {\n+                    objectClass = loadClass(className);\n+                } catch (ClassNotFoundException e) {\n+                    throw new IllegalArgumentException(\"Cannot find/load class \" + className);\n+                }\n+\n+                if (classImplements.isAssignableFrom(objectClass)) {\n+                    count++;\n+                }\n+            }\n+            if (count == 0) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"Field '%s' with value '%s' does not implement any of these classes %s\",\n+                                name, o, classesImplements));\n+            }\n+        }\n+    }\n+\n+    @NoArgsConstructor\n+    public static class SerdeValidator extends Validator {\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            new ValidatorImpls.ImplementsClassValidator(SerDe.class).validateField(name, o);\n+        }\n+    }\n+\n+    /**\n+     * validates each key and each value against the respective arrays of validators.\n+     */\n+    public static class MapEntryCustomValidator extends Validator {\n+\n+        private Class<?>[] keyValidators;\n+        private Class<?>[] valueValidators;\n+\n+        public MapEntryCustomValidator(Map<String, Object> params) {\n+            this.keyValidators = (Class<?>[]) params.get(ConfigValidationAnnotations.ValidatorParams.KEY_VALIDATOR_CLASSES);\n+            this.valueValidators = (Class<?>[]) params.get(ConfigValidationAnnotations.ValidatorParams.VALUE_VALIDATOR_CLASSES);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static void validateField(String name, Class<?>[] keyValidators, Class<?>[] valueValidators, Object o)\n+                throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n+            if (o == null) {\n+                return;\n+            }\n+            //check if Map\n+            SimpleTypeValidator.validateField(name, Map.class, o);\n+            for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) o).entrySet()) {\n+                for (Class<?> kv : keyValidators) {\n+                    Object keyValidator = kv.getConstructor().newInstance();\n+                    if (keyValidator instanceof Validator) {\n+                        ((Validator) keyValidator).validateField(name + \" Map key\", entry.getKey());\n+                    } else {\n+                        log.warn(\n+                                \"validator: {} cannot be used in MapEntryCustomValidator to validate keys.  Individual entry validators must \" +\n+                                        \"a instance of Validator class\",\n+                                kv.getName());\n+                    }\n+                }\n+                for (Class<?> vv : valueValidators) {\n+                    Object valueValidator = vv.getConstructor().newInstance();\n+                    if (valueValidator instanceof Validator) {\n+                        ((Validator) valueValidator).validateField(name + \" Map value\", entry.getValue());\n+                    } else {\n+                        log.warn(\n+                                \"validator: {} cannot be used in MapEntryCustomValidator to validate values.  Individual entry validators \" +\n+                                        \"must a instance of Validator class\",\n+                                vv.getName());\n+                    }\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            try {\n+                validateField(name, this.keyValidators, this.valueValidators, o);\n+            } catch (IllegalAccessException | InstantiationException | NoSuchMethodException | InvocationTargetException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    @NoArgsConstructor\n+    public static class StringValidator extends Validator {\n+\n+        private HashSet<String> acceptedValues = null;\n+\n+        public StringValidator(Map<String, Object> params) {\n+\n+            this.acceptedValues =\n+                    new HashSet<String>(Arrays.asList((String[]) params.get(ConfigValidationAnnotations.ValidatorParams.ACCEPTED_VALUES)));\n+\n+            if (this.acceptedValues.isEmpty() || (this.acceptedValues.size() == 1 && this.acceptedValues.contains(\"\"))) {\n+                this.acceptedValues = null;\n+            }\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            SimpleTypeValidator.validateField(name, String.class, o);\n+            if (this.acceptedValues != null) {\n+                if (!this.acceptedValues.contains((String) o)) {\n+                    throw new IllegalArgumentException(\n+                            \"Field \" + name + \" is not an accepted value. Value: \" + o + \" Accepted values: \" + this.acceptedValues);\n+                }\n+            }\n+        }\n+    }\n+    @NoArgsConstructor\n+    public static class FunctionConfigValidator extends Validator {\n+\n+        private static void doJavaChecks(FunctionConfig functionConfig, String name) {\n+            Class<?>[] typeArgs = Utils.getFunctionTypes(functionConfig);\n+\n+            ClassLoader clsLoader = Thread.currentThread().getContextClassLoader();\n+            // Check if the Input serialization/deserialization class exists in jar or already loaded and that it\n+            // implements SerDe class\n+            functionConfig.getCustomSerdeInputs().forEach((topicName, inputSerializer) -> {\n+\n+\n+                Class<?> serdeClass;\n+                try {\n+                    serdeClass = loadClass(inputSerializer);\n+                } catch (ClassNotFoundException e) {\n+                    throw new IllegalArgumentException(\n+                            String.format(\"The input serialization/deserialization class %s does not exist\",\n+                                    inputSerializer));\n+                }\n+\n+                try {\n+                    new ValidatorImpls.ImplementsClassValidator(SerDe.class).validateField(name, inputSerializer);\n+                } catch (IllegalArgumentException ex) {\n+                    throw new IllegalArgumentException(\n+                            String.format(\"The input serialization/deserialization class %s does not not implement %s\",\n+\n+                                    inputSerializer, SerDe.class.getCanonicalName()));\n+                }\n+\n+                if (inputSerializer.equals(DefaultSerDe.class.getName())) {\n+                    if (!DefaultSerDe.IsSupportedType(typeArgs[0])) {\n+                        throw new IllegalArgumentException(\"The default Serializer does not support type \" +\n+                                typeArgs[0]);\n+                    }\n+                } else {\n+                    SerDe serDe = (SerDe) Reflections.createInstance(inputSerializer, clsLoader);\n+                    if (serDe == null) {\n+                        throw new IllegalArgumentException(String.format(\"The SerDe class %s does not exist\",\n+                                inputSerializer));\n+                    }\n+                    Class<?>[] serDeTypes = TypeResolver.resolveRawArguments(SerDe.class, serDe.getClass());\n+\n+                    // type inheritance information seems to be lost in generic type\n+                    // load the actual type class for verification\n+                    Class<?> fnInputClass;\n+                    Class<?> serdeInputClass;\n+                    try {\n+                        fnInputClass = Class.forName(typeArgs[0].getName(), true, clsLoader);\n+                        serdeInputClass = Class.forName(serDeTypes[0].getName(), true, clsLoader);\n+                    } catch (ClassNotFoundException e) {\n+                        throw new IllegalArgumentException(\"Failed to load type class\", e);\n+                    }\n+\n+                    if (!fnInputClass.isAssignableFrom(serdeInputClass)) {\n+                        throw new IllegalArgumentException(\"Serializer type mismatch \" + typeArgs[0] + \" vs \" + serDeTypes[0]);\n+                    }\n+                }\n+            });\n+            functionConfig.getInputs().forEach((topicName) -> {\n+                if (!DefaultSerDe.IsSupportedType(typeArgs[0])) {\n+                    throw new RuntimeException(\"Default Serializer does not support type \" + typeArgs[0]);\n+                }\n+            });\n+            if (!Void.class.equals(typeArgs[1])) {\n+                if (functionConfig.getOutputSerdeClassName() == null\n+                        || functionConfig.getOutputSerdeClassName().isEmpty()\n+                        || functionConfig.getOutputSerdeClassName().equals(DefaultSerDe.class.getName())) {\n+                    if (!DefaultSerDe.IsSupportedType(typeArgs[1])) {\n+                        throw new RuntimeException(\"Default Serializer does not support type \" + typeArgs[1]);\n+                    }\n+                } else {\n+                    SerDe serDe = (SerDe) Reflections.createInstance(functionConfig.getOutputSerdeClassName(),\n+                            clsLoader);\n+                    if (serDe == null) {\n+                        throw new IllegalArgumentException(String.format(\"SerDe class %s does not exist\",\n+                                functionConfig.getOutputSerdeClassName()));\n+                    }\n+                    Class<?>[] serDeTypes = TypeResolver.resolveRawArguments(SerDe.class, serDe.getClass());\n+\n+                    // type inheritance information seems to be lost in generic type\n+                    // load the actual type class for verification\n+                    Class<?> fnOutputClass;\n+                    Class<?> serdeOutputClass;\n+                    try {\n+                        fnOutputClass = Class.forName(typeArgs[1].getName(), true, clsLoader);\n+                        serdeOutputClass = Class.forName(serDeTypes[0].getName(), true, clsLoader);\n+                    } catch (ClassNotFoundException e) {\n+                        throw new RuntimeException(\"Failed to load type class\", e);\n+                    }\n+\n+                    if (!serdeOutputClass.isAssignableFrom(fnOutputClass)) {\n+                        throw new RuntimeException(\"Serializer type mismatch \" + typeArgs[1] + \" vs \" + serDeTypes[0]);\n+                    }\n+                }\n+            }\n+        }\n+\n+        private static void doPythonChecks(FunctionConfig functionConfig, String name) {\n+            if (functionConfig.getProcessingGuarantees() == FunctionConfig.ProcessingGuarantees.EFFECTIVELY_ONCE) {\n+                throw new RuntimeException(\"Effectively-once processing guarantees not yet supported in Python\");\n+            }\n+\n+            if (functionConfig.getWindowConfig() != null) {\n+                throw new IllegalArgumentException(\"There is currently no support windowing in python\");\n+            }\n+        }\n+\n+        private static void verifyNoTopicClash(Collection<String> inputTopics, String outputTopic) throws IllegalArgumentException {\n+            if (inputTopics.contains(outputTopic)) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"Output topic %s is also being used as an input topic (topics must be one or the other)\",\n+                                outputTopic));\n+            }\n+        }\n+\n+        private static void doCommonChecks(FunctionConfig functionConfig) {\n+            if (functionConfig.getInputs().isEmpty() && functionConfig.getCustomSerdeInputs().isEmpty()) {\n+                throw new RuntimeException(\"No input topic(s) specified for the function\");\n+            }\n+\n+            // Ensure that topics aren't being used as both input and output\n+            verifyNoTopicClash(functionConfig.getInputs(), functionConfig.getOutput());\n+\n+            if (functionConfig.getSubscriptionType() != null\n+                    && functionConfig.getSubscriptionType() != FunctionConfig.SubscriptionType.FAILOVER\n+                    && functionConfig.getProcessingGuarantees() != null\n+                    && functionConfig.getProcessingGuarantees() == FunctionConfig.ProcessingGuarantees.EFFECTIVELY_ONCE) {\n+                throw new IllegalArgumentException(\"Effectively-once processing semantics can only be achieved using a Failover subscription type\");\n+            }\n+\n+            WindowConfig windowConfig = functionConfig.getWindowConfig();\n+            if (windowConfig != null) {\n+                // set auto ack to false since windowing framework is responsible\n+                // for acking and not the function framework\n+                if (functionConfig.isAutoAck() == true) {\n+                    throw new IllegalArgumentException(\"Cannot enable auto ack when using windowing functionality\");\n+                }\n+                functionConfig.setAutoAck(false);\n+            }\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            FunctionConfig functionConfig = (FunctionConfig) o;\n+            doCommonChecks(functionConfig);\n+            if (functionConfig.getRuntime() == FunctionConfig.Runtime.JAVA) {\n+                doJavaChecks(functionConfig, name);\n+            } else {\n+                doPythonChecks(functionConfig, name);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Validates each entry in a list against a list of custom Validators. Each validator in the list of validators must inherit or be an\n+     * instance of Validator class\n+     */\n+    public static class ListEntryCustomValidator extends Validator {\n+\n+        private Class<?>[] entryValidators;\n+\n+        public ListEntryCustomValidator(Map<String, Object> params) {\n+            this.entryValidators = (Class<?>[]) params.get(ConfigValidationAnnotations.ValidatorParams.ENTRY_VALIDATOR_CLASSES);\n+        }\n+\n+        public static void validateField(String name, Class<?>[] validators, Object o)\n+                throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n+            if (o == null) {\n+                return;\n+            }\n+            //check if iterable\n+            SimpleTypeValidator.validateField(name, Iterable.class, o);\n+            for (Object entry : (Iterable<?>) o) {\n+                for (Class<?> validator : validators) {\n+                    Object v = validator.getConstructor().newInstance();\n+                    if (v instanceof Validator) {\n+                        ((Validator) v).validateField(name + \" list entry\", entry);\n+                    } else {\n+                        log.warn(\n+                                \"validator: {} cannot be used in ListEntryCustomValidator.  Individual entry validators must a instance of \" +\n+                                        \"Validator class\",\n+                                validator.getName());\n+                    }\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            try {\n+                validateField(name, this.entryValidators, o);\n+            } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    @NoArgsConstructor\n+    public static class TopicNameValidator extends Validator {\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o == null) {\n+                return;\n+            }\n+            new StringValidator().validateField(name, o);\n+            String topic = (String) o;\n+            if (!TopicName.isValid(topic)) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"The topic name %s is invalid for field '%s'\", topic, name));\n+            }\n+        }\n+    }\n+\n+    public static class WindowConfigValidator extends Validator{\n+\n+        public static void validateWindowConfig(WindowConfig windowConfig) {\n+            if (windowConfig.getWindowLengthDurationMs() == null && windowConfig.getWindowLengthCount() == null) {\n+                throw new IllegalArgumentException(\"Window length is not specified\");\n+            }\n+\n+            if (windowConfig.getWindowLengthDurationMs() != null && windowConfig.getWindowLengthCount() != null) {\n+                throw new IllegalArgumentException(\n+                        \"Window length for time and count are set! Please set one or the other.\");\n+            }\n+\n+            if (windowConfig.getWindowLengthCount() != null) {\n+                if (windowConfig.getWindowLengthCount() <= 0) {\n+                    throw new IllegalArgumentException(\n+                            \"Window length must be positive [\" + windowConfig.getWindowLengthCount() + \"]\");\n+                }\n+            }\n+\n+            if (windowConfig.getWindowLengthDurationMs() != null) {\n+                if (windowConfig.getWindowLengthDurationMs() <= 0) {\n+                    throw new IllegalArgumentException(\n+                            \"Window length must be positive [\" + windowConfig.getWindowLengthDurationMs() + \"]\");\n+                }\n+            }\n+\n+            if (windowConfig.getSlidingIntervalCount() != null) {\n+                if (windowConfig.getSlidingIntervalCount() <= 0) {\n+                    throw new IllegalArgumentException(\n+                            \"Sliding interval must be positive [\" + windowConfig.getSlidingIntervalCount() + \"]\");\n+                }\n+            }\n+\n+            if (windowConfig.getSlidingIntervalDurationMs() != null) {\n+                if (windowConfig.getSlidingIntervalDurationMs() <= 0) {\n+                    throw new IllegalArgumentException(\n+                            \"Sliding interval must be positive [\" + windowConfig.getSlidingIntervalDurationMs() + \"]\");\n+                }\n+            }\n+\n+            if (windowConfig.getTimestampExtractorClassName() != null) {\n+                if (windowConfig.getMaxLagMs() != null) {\n+                    if (windowConfig.getMaxLagMs() < 0) {\n+                        throw new IllegalArgumentException(\n+                                \"Lag duration must be positive [\" + windowConfig.getMaxLagMs() + \"]\");\n+                    }\n+                }\n+                if (windowConfig.getWatermarkEmitIntervalMs() != null) {\n+                    if (windowConfig.getWatermarkEmitIntervalMs() <= 0) {\n+                        throw new IllegalArgumentException(\n+                                \"Watermark interval must be positive [\" + windowConfig.getWatermarkEmitIntervalMs() + \"]\");\n+                    }\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o == null) {\n+                return;\n+            }\n+            if (!(o instanceof WindowConfig)) {\n+                throw new IllegalArgumentException(String.format(\"Field '%s' must be of WindowConfig type!\", name));\n+            }\n+            WindowConfig windowConfig = (WindowConfig) o;\n+            validateWindowConfig(windowConfig);\n+        }\n+    }\n+\n+    /**\n+     * Validates basic types.\n+     */\n+    public static class SimpleTypeValidator extends Validator {\n+\n+        private Class<?> type;\n+\n+        public SimpleTypeValidator(Map<String, Object> params) {\n+            this.type = (Class<?>) params.get(ConfigValidationAnnotations.ValidatorParams.TYPE);\n+        }\n+\n+        public static void validateField(String name, Class<?> type, Object o) {\n+            if (o == null) {\n+                return;\n+            }\n+            if (type.isInstance(o)) {\n+                return;\n+            }\n+            throw new IllegalArgumentException(\n+                    \"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            validateField(name, this.type, o);\n+        }\n+    }\n+\n+    private static Class<?> loadClass(String className) throws ClassNotFoundException {\n+        Class<?> objectClass;\n+        try {\n+            objectClass = Class.forName(className);\n+        } catch (ClassNotFoundException e) {\n+            ClassLoader clsLoader = Thread.currentThread().getContextClassLoader();\n+            if (clsLoader != null) {\n+                objectClass = clsLoader.loadClass(className);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        return objectClass;\n+    }\n+}",
                "changes": 655,
                "blob_url": "https://github.com/apache/pulsar/blob/ecec9337094820c65fe5ecf128f8070a3538bddd/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/validation/ValidatorImpls.java"
            }
        ],
        "repo": "pulsar",
        "message": "improving config validation (#1859)\n\n* improving config validation\r\n\r\n* removing unnecessary file\r\n\r\n* removing unnecessary log\r\n\r\n* fix bug\r\n\r\n* fix potential NPE",
        "commit": "https://github.com/apache/pulsar/commit/ecec9337094820c65fe5ecf128f8070a3538bddd"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/d7ab96d3ecb84e3e1e8ff83a1d6a9bceab38eaf6",
        "bug_id": "pulsar_55",
        "file": [
            {
                "additions": 4,
                "sha": "65a1db2e3c7781c2b40ebb70c3db62af3d07f6d0",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/46f3829b1fce7a633ea41834760c42ad754af8ce/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java",
                "deletions": 0,
                "filename": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java?ref=46f3829b1fce7a633ea41834760c42ad754af8ce",
                "patch": "@@ -582,6 +582,10 @@ private void inferMissingArguments(FunctionConfig functionConfig) {\n         }\n \n         private void inferMissingFunctionName(FunctionConfig functionConfig) {\n+            if (isNull(functionConfig.getClassName())) {\n+                throw new IllegalArgumentException(\"You must specify a class name for the function\");\n+            }\n+\n             String [] domains = functionConfig.getClassName().split(\"\\\\.\");\n             if (domains.length == 0) {\n                 functionConfig.setName(functionConfig.getClassName());",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/46f3829b1fce7a633ea41834760c42ad754af8ce/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fix NPE in Pulsar Functions CLI  (#1776)\n\nAs it stands, an NPE is thrown if you try to `create` or `localrun` a function with neither a class name nor a function name supplied, as the CLI will attempt to infer a function name from a class name that is `null`.",
        "commit": "https://github.com/apache/pulsar/commit/46f3829b1fce7a633ea41834760c42ad754af8ce"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/f6a8cb073969d9f88d6065db0ee01ce1b9876709",
        "bug_id": "pulsar_56",
        "file": [
            {
                "additions": 4,
                "sha": "e0df5ea75b9b3f7a26f07fca8ba769cbe8b83982",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/5e541fc70d9e7989d41f24e76a9cad88ecddbceb/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentReplicator.java",
                "deletions": 5,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentReplicator.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentReplicator.java?ref=5e541fc70d9e7989d41f24e76a9cad88ecddbceb",
                "patch": "@@ -232,9 +232,8 @@ public void readEntriesComplete(List<Entry> entries, Object ctx) {\n \n                 if (msg.hasReplicateTo() && !msg.getReplicateTo().contains(remoteCluster)) {\n                     if (log.isDebugEnabled()) {\n-                        log.debug(\"[{}][{} -> {}] Skipping message at {} / msg-id: {}: replicateTo {}\", topicName,\n-                                localCluster, remoteCluster, entry.getPosition(), msg.getMessageId(),\n-                                msg.getReplicateTo());\n+                        log.debug(\"[{}][{} -> {}] Skipping message at position {}, replicateTo {}\", topicName,\n+                                localCluster, remoteCluster, entry.getPosition(), msg.getReplicateTo());\n                     }\n                     cursor.asyncDelete(entry.getPosition(), this, entry.getPosition());\n                     entry.release();\n@@ -245,8 +244,8 @@ public void readEntriesComplete(List<Entry> entries, Object ctx) {\n                 if (msg.isExpired(messageTTLInSeconds)) {\n                     msgExpired.recordEvent(0 /* no value stat */);\n                     if (log.isDebugEnabled()) {\n-                        log.debug(\"[{}][{} -> {}] Discarding expired message at {} / msg-id: {}\", topicName,\n-                                localCluster, remoteCluster, entry.getPosition(), msg.getMessageId());\n+                        log.debug(\"[{}][{} -> {}] Discarding expired message at position {}, replicateTo {}\", topicName,\n+                                localCluster, remoteCluster, entry.getPosition(), msg.getReplicateTo());\n                     }\n                     cursor.asyncDelete(entry.getPosition(), this, entry.getPosition());\n                     entry.release();",
                "changes": 9,
                "blob_url": "https://github.com/apache/pulsar/blob/5e541fc70d9e7989d41f24e76a9cad88ecddbceb/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentReplicator.java"
            }
        ],
        "repo": "pulsar",
        "message": "NPE in PersistentReplicator in Debug mode since messageId is not set during MessageImpl.deserialize (#1401)",
        "commit": "https://github.com/apache/pulsar/commit/5e541fc70d9e7989d41f24e76a9cad88ecddbceb"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/3008a4bd87b246eebbe1c7d187e19ffef86ccdbc",
        "bug_id": "pulsar_57",
        "file": [
            {
                "additions": 8,
                "sha": "c80f0a5471c93f435945db147cc363bf241982f0",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/7efce9845d2b5847e18ae7f51cae887f9a4d0668/pulsar-broker-common/src/main/java/org/apache/pulsar/common/configuration/VipStatus.java",
                "deletions": 2,
                "filename": "pulsar-broker-common/src/main/java/org/apache/pulsar/common/configuration/VipStatus.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker-common/src/main/java/org/apache/pulsar/common/configuration/VipStatus.java?ref=7efce9845d2b5847e18ae7f51cae887f9a4d0668",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.pulsar.common.configuration;\n \n import java.io.File;\n+import java.util.function.Supplier;\n \n import javax.servlet.ServletContext;\n import javax.ws.rs.GET;\n@@ -34,18 +35,23 @@\n public class VipStatus {\n \n     public static final String ATTRIBUTE_STATUS_FILE_PATH = \"statusFilePath\";\n+    public static final String ATTRIBUTE_IS_READY_PROBE = \"isReadyProbe\";\n \n     @Context\n     protected ServletContext servletContext;\n \n     @GET\n     @Context\n     public String checkStatus() {\n-\n         String statusFilePath = (String) servletContext.getAttribute(ATTRIBUTE_STATUS_FILE_PATH);\n+        @SuppressWarnings(\"unchecked\")\n+        Supplier<Boolean> isReadyProbe = (Supplier<Boolean>) servletContext.getAttribute(ATTRIBUTE_IS_READY_PROBE);\n+\n+        boolean isReady = isReadyProbe != null ? isReadyProbe.get() : true;\n+\n         if (statusFilePath != null) {\n             File statusFile = new File(statusFilePath);\n-            if (statusFile.exists() && statusFile.isFile()) {\n+            if (isReady && statusFile.exists() && statusFile.isFile()) {\n                 return \"OK\";\n             }\n         }",
                "changes": 10,
                "blob_url": "https://github.com/apache/pulsar/blob/7efce9845d2b5847e18ae7f51cae887f9a4d0668/pulsar-broker-common/src/main/java/org/apache/pulsar/common/configuration/VipStatus.java"
            },
            {
                "additions": 16,
                "sha": "8925c072d6bcf8bd6e9adf2a611458e0a37433e2",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/7efce9845d2b5847e18ae7f51cae887f9a4d0668/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java",
                "deletions": 6,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java?ref=7efce9845d2b5847e18ae7f51cae887f9a4d0668",
                "patch": "@@ -172,7 +172,7 @@\n         Init, Started, Closed\n     }\n \n-    private State state;\n+    private volatile State state;\n \n     private final ReentrantLock mutex = new ReentrantLock();\n     private final Condition isClosedCondition = mutex.newCondition();\n@@ -355,8 +355,6 @@ public void start() throws PulsarServerException {\n             // Start load management service (even if load balancing is disabled)\n             this.loadManager.set(LoadManager.create(this));\n \n-            this.startLoadManagementService();\n-\n             // needs load management service\n             this.startNamespaceService();\n \n@@ -369,6 +367,13 @@ public void start() throws PulsarServerException {\n             attributeMap.put(WebService.ATTRIBUTE_PULSAR_NAME, this);\n             Map<String, Object> vipAttributeMap = Maps.newHashMap();\n             vipAttributeMap.put(VipStatus.ATTRIBUTE_STATUS_FILE_PATH, this.config.getStatusFilePath());\n+            vipAttributeMap.put(VipStatus.ATTRIBUTE_IS_READY_PROBE, new Supplier<Boolean>() {\n+                @Override\n+                public Boolean get() {\n+                    // Ensure the VIP status is only visible when the broker is fully initialized\n+                    return state == State.Started;\n+                }\n+            });\n             this.webService.addRestResources(\"/\", VipStatus.class.getPackage().getName(), false, vipAttributeMap);\n             this.webService.addRestResources(\"/\", \"org.apache.pulsar.broker.web\", false, attributeMap);\n             this.webService.addRestResources(\"/admin\", \"org.apache.pulsar.broker.admin.v1\", true, attributeMap);\n@@ -446,11 +451,16 @@ public synchronized void brokerIsAFollowerNow() {\n \n             leaderElectionService.start();\n \n+            schemaRegistryService = SchemaRegistryService.create(this);\n+\n             webService.start();\n \n             this.metricsGenerator = new MetricsGenerator(this);\n \n-            schemaRegistryService = SchemaRegistryService.create(this);\n+            // By starting the Load manager service, the broker will also become visible\n+            // to the rest of the broker by creating the registration z-node. This needs\n+            // to be done only when the broker is fully operative.\n+            this.startLoadManagementService();\n \n             state = State.Started;\n \n@@ -810,12 +820,12 @@ public synchronized PulsarAdmin getAdminClient() throws PulsarServerException {\n                         .authentication( //\n                                 conf.getBrokerClientAuthenticationPlugin(), //\n                                 conf.getBrokerClientAuthenticationParameters());\n-                \n+\n                 if (conf.isBrokerClientTlsEnabled()) {\n                     builder.tlsTrustCertsFilePath(conf.getBrokerClientTrustCertsFilePath());\n                     builder.allowTlsInsecureConnection(conf.isTlsAllowInsecureConnection());\n                 }\n-                \n+\n                 this.adminClient = builder.build();\n                 LOG.info(\"Admin api url: \" + adminApiUrl);\n             } catch (Exception e) {",
                "changes": 22,
                "blob_url": "https://github.com/apache/pulsar/blob/7efce9845d2b5847e18ae7f51cae887f9a4d0668/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java"
            }
        ],
        "repo": "pulsar",
        "message": "Ensure broker is fully boostrapped before load manager register itself (#2935)\n\n### Motivation\r\n\r\nIn some cases the broker can immediately gets assigned traffic before it's fully boostrapped. \r\n\r\nThis happens because the load manager is registering the broker in ZK before some of the initialization steps are completed. \r\n\r\nThis results in NPE, like : \r\n\r\n```\r\nCaused by: java.lang.NullPointerException\r\n\tat org.apache.pulsar.broker.service.persistent.PersistentTopic.hasSchema(PersistentTopic.java:1815) ~[org.apache.pulsar-pulsar-broker-2.2.0-streamlio-22.jar:2.2.0-streamlio-22]\r\n\tat org.apache.pulsar.broker.service.ServerCnx.lambda$25(ServerCnx.java:836) ~[org.apache.pulsar-pulsar-broker-2.2.0-streamlio-22.jar:2.2.0-streamlio-22]\r\n\tat java.util.concurrent.CompletableFuture.uniAccept(CompletableFuture.java:656) ~[?:1.8.0_181]\r\n```\r\n\r\n### Modifications\r\n\r\n * Register the broker in ZK only after the full start sequence has been done. This will ensure other brokers will not discover this broker before it's ready.\r\n * Expose the \"is ready\" state in the VipStatus -- This will be used to make sure the load balancer will not direct any lookup request to the broker before it's ready.",
        "commit": "https://github.com/apache/pulsar/commit/7efce9845d2b5847e18ae7f51cae887f9a4d0668"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/aa40ebbe02f9b4f60b7f3910c293c50c18f35687",
        "bug_id": "pulsar_58",
        "file": [
            {
                "additions": 8,
                "sha": "12f76474c0f54ba59adf898bda3cfd96f6355b45",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/f8b051a6f732653ef26ee68d239c1ae005e85a4a/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/SimpleResourceUnit.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/SimpleResourceUnit.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/SimpleResourceUnit.java?ref=f8b051a6f732653ef26ee68d239c1ae005e85a4a",
                "patch": "@@ -21,6 +21,8 @@\n import org.apache.pulsar.broker.loadbalance.ResourceDescription;\n import org.apache.pulsar.broker.loadbalance.ResourceUnit;\n \n+import com.google.common.base.Objects;\n+\n public class SimpleResourceUnit implements ResourceUnit {\n \n     private String resourceId;\n@@ -66,4 +68,10 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return this.resourceId.hashCode();\n     }\n+\n+    @Override\n+    public String toString() {\n+        return Objects.toStringHelper(this).add(\"resourceId\", resourceId).toString();\n+    }\n+    \n }",
                "changes": 8,
                "blob_url": "https://github.com/apache/pulsar/blob/f8b051a6f732653ef26ee68d239c1ae005e85a4a/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/SimpleResourceUnit.java"
            },
            {
                "additions": 2,
                "sha": "71eb2cd86f77319343f98254a86cff320e0c82d6",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/f8b051a6f732653ef26ee68d239c1ae005e85a4a/pulsar-broker/src/main/java/org/apache/pulsar/broker/lookup/DestinationLookup.java",
                "deletions": 1,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/lookup/DestinationLookup.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/lookup/DestinationLookup.java?ref=f8b051a6f732653ef26ee68d239c1ae005e85a4a",
                "patch": "@@ -256,7 +256,8 @@ public String getNamespaceBundle(@PathParam(\"destination-domain\") String destina\n                             }\n \n                             if (!lookupResult.isPresent()) {\n-                                lookupfuture.complete(newLookupErrorResponse(ServerError.ServiceNotReady, \"Namespace bundle is not owned by any broker\", requestId));\n+                                lookupfuture.complete(newLookupErrorResponse(ServerError.ServiceNotReady,\n+                                        \"No broker was available to own \" + fqdn, requestId));\n                                 return;\n                             }\n ",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/f8b051a6f732653ef26ee68d239c1ae005e85a4a/pulsar-broker/src/main/java/org/apache/pulsar/broker/lookup/DestinationLookup.java"
            },
            {
                "additions": 19,
                "sha": "7c8ad491a7d81ecf354b635c066c932fb5bae1d8",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/f8b051a6f732653ef26ee68d239c1ae005e85a4a/pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/NamespaceService.java",
                "deletions": 7,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/NamespaceService.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/NamespaceService.java?ref=f8b051a6f732653ef26ee68d239c1ae005e85a4a",
                "patch": "@@ -48,6 +48,7 @@\n import org.apache.pulsar.broker.ServiceConfiguration;\n import org.apache.pulsar.broker.admin.AdminResource;\n import org.apache.pulsar.broker.loadbalance.LoadManager;\n+import org.apache.pulsar.broker.loadbalance.ResourceUnit;\n import org.apache.pulsar.broker.lookup.LookupResult;\n import org.apache.pulsar.broker.service.BrokerServiceException.ServiceUnitNotReadyException;\n import org.apache.pulsar.client.admin.PulsarAdmin;\n@@ -333,7 +334,12 @@ private void searchForCandidateBroker(NamespaceBundle bundle,\n \n             if (candidateBroker == null) {\n                 if (!this.loadManager.get().isCentralized() || pulsar.getLeaderElectionService().isLeader()) {\n-                    candidateBroker = getLeastLoadedFromLoadManager(bundle);\n+                    Optional<String> availableBroker = getLeastLoadedFromLoadManager(bundle);\n+                    if (!availableBroker.isPresent()) {\n+                        lookupFuture.complete(Optional.empty());\n+                        return;\n+                    }\n+                    candidateBroker = availableBroker.get();\n                 } else {\n                     if (authoritative) {\n                         // leader broker already assigned the current broker as owner\n@@ -452,13 +458,19 @@ private boolean isBrokerActive(String candidateBroker) throws KeeperException, I\n      * @return\n      * @throws Exception\n      */\n-    private String getLeastLoadedFromLoadManager(ServiceUnitId serviceUnit) throws Exception {\n-        String lookupAddress = loadManager.get().getLeastLoaded(serviceUnit).getResourceId();\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"{} : redirecting to the least loaded broker, lookup address={}\", pulsar.getWebServiceAddress(),\n-                    lookupAddress);\n+    private Optional<String> getLeastLoadedFromLoadManager(ServiceUnitId serviceUnit) throws Exception {\n+        ResourceUnit leastLoadedBroker = loadManager.get().getLeastLoaded(serviceUnit);\n+        if (leastLoadedBroker != null) {\n+            String lookupAddress = leastLoadedBroker.getResourceId();\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"{} : redirecting to the least loaded broker, lookup address={}\",\n+                        pulsar.getWebServiceAddress(), lookupAddress);\n+            }\n+            return Optional.of(lookupAddress);\n+        } else {\n+            LOG.warn(\"No broker is available for {}\", serviceUnit);\n+            return Optional.empty();\n         }\n-        return lookupAddress;\n     }\n \n     public void unloadNamespace(NamespaceName ns) throws Exception {",
                "changes": 26,
                "blob_url": "https://github.com/apache/pulsar/blob/f8b051a6f732653ef26ee68d239c1ae005e85a4a/pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/NamespaceService.java"
            }
        ],
        "repo": "pulsar",
        "message": "Handle NPE at load-manager when leader couldn't find available broker (#726)\n\n* Handle NPE at load-manager when leader couldn't find available broker\r\n\r\n* avoid throwing exception\r\n\r\n* return empty lookup-result if broker not found",
        "commit": "https://github.com/apache/pulsar/commit/f8b051a6f732653ef26ee68d239c1ae005e85a4a"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/07d2daf4871da7b280b60d7fc71188e6cb8a4858",
        "bug_id": "pulsar_59",
        "file": [
            {
                "additions": 2,
                "sha": "f01217d8b0f5553459ecab8735f940f03b62ef32",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/b4ad43e76d30605f13c372b59bb2a6ff11246d13/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/PulsarService.java",
                "deletions": 2,
                "filename": "pulsar-broker/src/main/java/com/yahoo/pulsar/broker/PulsarService.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/PulsarService.java?ref=b4ad43e76d30605f13c372b59bb2a6ff11246d13",
                "patch": "@@ -98,7 +98,7 @@\n     private ScheduledFuture<?> loadReportTask = null;\n     private ScheduledFuture<?> loadSheddingTask = null;\n     private ScheduledFuture<?> loadResourceQuotaTask = null;\n-    private AtomicReference<LoadManager> loadManager = null;\n+    private final AtomicReference<LoadManager> loadManager = new AtomicReference<>();\n     private PulsarAdmin adminClient = null;\n     private ZooKeeperClientFactory zkClientFactory = null;\n     private final String bindAddress;\n@@ -252,7 +252,7 @@ public void start() throws PulsarServerException {\n             this.brokerService = new BrokerService(this);\n \n             // Start load management service (even if load balancing is disabled)\n-            this.loadManager = new AtomicReference<>(LoadManager.create(this));\n+            this.loadManager.set(LoadManager.create(this));\n \n             this.startLoadManagementService();\n ",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/b4ad43e76d30605f13c372b59bb2a6ff11246d13/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/PulsarService.java"
            },
            {
                "additions": 8,
                "sha": "1dc1bf309f91a54d308e96e1a2036e28f0d1bb9d",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/b4ad43e76d30605f13c372b59bb2a6ff11246d13/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/loadbalance/impl/ModularLoadManagerImpl.java",
                "deletions": 3,
                "filename": "pulsar-broker/src/main/java/com/yahoo/pulsar/broker/loadbalance/impl/ModularLoadManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/loadbalance/impl/ModularLoadManagerImpl.java?ref=b4ad43e76d30605f13c372b59bb2a6ff11246d13",
                "patch": "@@ -655,9 +655,14 @@ public void start() throws PulsarServerException {\n      */\n     @Override\n     public void stop() throws PulsarServerException {\n-        availableActiveBrokers.close();\n-        brokerDataCache.close();\n-        brokerDataCache.clear();\n+        if (availableActiveBrokers != null) {\n+            availableActiveBrokers.close();\n+        }\n+\n+        if (brokerDataCache != null) {\n+            brokerDataCache.close();\n+            brokerDataCache.clear();\n+        }\n         scheduler.shutdown();\n     }\n ",
                "changes": 11,
                "blob_url": "https://github.com/apache/pulsar/blob/b4ad43e76d30605f13c372b59bb2a6ff11246d13/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/loadbalance/impl/ModularLoadManagerImpl.java"
            },
            {
                "additions": 4,
                "sha": "6ebc221eff9f28c2a8f38d296108027a8ef96fc5",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/b4ad43e76d30605f13c372b59bb2a6ff11246d13/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/loadbalance/impl/SimpleLoadManagerImpl.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/main/java/com/yahoo/pulsar/broker/loadbalance/impl/SimpleLoadManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/loadbalance/impl/SimpleLoadManagerImpl.java?ref=b4ad43e76d30605f13c372b59bb2a6ff11246d13",
                "patch": "@@ -434,6 +434,10 @@ private boolean getLoadBalancerAutoBundleSplitEnabled() {\n     private PulsarResourceDescription fromLoadReport(LoadReport report) {\n         SystemResourceUsage sru = report.getSystemResourceUsage();\n         PulsarResourceDescription resourceDescription = new PulsarResourceDescription();\n+        if (sru == null) {\n+            return resourceDescription;\n+        }\n+\n         if (sru.bandwidthIn != null)\n             resourceDescription.put(\"bandwidthIn\", sru.bandwidthIn);\n         if (sru.bandwidthOut != null)",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/b4ad43e76d30605f13c372b59bb2a6ff11246d13/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/loadbalance/impl/SimpleLoadManagerImpl.java"
            },
            {
                "additions": 15,
                "sha": "9c74cb7191f205240f29fd1db1b7d99ecedb72b8",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/b4ad43e76d30605f13c372b59bb2a6ff11246d13/pulsar-broker/src/test/java/com/yahoo/pulsar/broker/auth/MockedPulsarServiceBaseTest.java",
                "deletions": 6,
                "filename": "pulsar-broker/src/test/java/com/yahoo/pulsar/broker/auth/MockedPulsarServiceBaseTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/com/yahoo/pulsar/broker/auth/MockedPulsarServiceBaseTest.java?ref=b4ad43e76d30605f13c372b59bb2a6ff11246d13",
                "patch": "@@ -37,6 +37,8 @@\n import org.apache.zookeeper.MockZooKeeper;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.ACL;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.google.common.util.concurrent.MoreExecutors;\n import com.yahoo.pulsar.broker.BookKeeperClientFactory;\n@@ -119,12 +121,17 @@ protected final void init() throws Exception {\n     }\n \n     protected final void internalCleanup() throws Exception {\n-        admin.close();\n-        pulsarClient.close();\n-        pulsar.close();\n-        mockBookKeeper.reallyShutdow();\n-        mockZookKeeper.shutdown();\n-        sameThreadOrderedSafeExecutor.shutdown();\n+        try {\n+            admin.close();\n+            pulsarClient.close();\n+            pulsar.close();\n+            mockBookKeeper.reallyShutdow();\n+            mockZookKeeper.shutdown();\n+            sameThreadOrderedSafeExecutor.shutdown();\n+        } catch (Exception e) {\n+            log.warn(\"Failed to clean up mocked pulsar service:\", e);\n+            throw e;\n+        }\n     }\n \n     protected abstract void setup() throws Exception;\n@@ -222,4 +229,6 @@ public void close() {\n             // no-op\n         }\n     };\n+\n+    private static final Logger log = LoggerFactory.getLogger(MockedPulsarServiceBaseTest.class);\n }",
                "changes": 21,
                "blob_url": "https://github.com/apache/pulsar/blob/b4ad43e76d30605f13c372b59bb2a6ff11246d13/pulsar-broker/src/test/java/com/yahoo/pulsar/broker/auth/MockedPulsarServiceBaseTest.java"
            },
            {
                "additions": 15,
                "sha": "359be5e955c8db76fec4cd9686bb94bac2930a3f",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/b4ad43e76d30605f13c372b59bb2a6ff11246d13/pulsar-broker/src/test/java/com/yahoo/pulsar/broker/service/PersistentTopicTest.java",
                "deletions": 10,
                "filename": "pulsar-broker/src/test/java/com/yahoo/pulsar/broker/service/PersistentTopicTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/com/yahoo/pulsar/broker/service/PersistentTopicTest.java?ref=b4ad43e76d30605f13c372b59bb2a6ff11246d13",
                "patch": "@@ -161,7 +161,12 @@ public void setup() throws Exception {\n     public void teardown() throws Exception {\n         brokerService.getTopics().clear();\n         brokerService.close(); //to clear pulsarStats\n-        pulsar.close();\n+        try {\n+            pulsar.close();\n+        } catch (Exception e) {\n+            log.warn(\"Failed to close pulsar service\", e);\n+            throw e;\n+        }\n     }\n \n     @Test\n@@ -853,9 +858,9 @@ public void testFailoverSubscription() throws Exception {\n      * <p>\n      * 3. remove from replicator-list.\n      * <p>\n-     * \n+     *\n      * If we try to startReplicationProducer before step-c finish then it should not avoid restarting repl-producer.\n-     * \n+     *\n      * @throws Exception\n      */\n     @Test\n@@ -870,7 +875,7 @@ public void testAtomicReplicationRemoval() throws Exception {\n         PersistentTopic topic = new PersistentTopic(globalTopicName, ledgerMock, brokerService);\n         String remoteReplicatorName = topic.replicatorPrefix + \".\" + remoteCluster;\n         ConcurrentOpenHashMap<String, PersistentReplicator> replicatorMap = topic.getReplicators();\n-        \n+\n         final URL brokerUrl = new URL(\n                 \"http://\" + pulsar.getAdvertisedAddress() + \":\" + pulsar.getConfiguration().getBrokerServicePort());\n         PulsarClient client = PulsarClient.create(brokerUrl.toString());\n@@ -914,30 +919,30 @@ public void testClosingReplicationProducerTwice() throws Exception {\n \n         PersistentTopic topic = new PersistentTopic(globalTopicName, ledgerMock, brokerService);\n         String remoteReplicatorName = topic.replicatorPrefix + \".\" + localCluster;\n-        \n+\n         final URL brokerUrl = new URL(\n                 \"http://\" + pulsar.getAdvertisedAddress() + \":\" + pulsar.getConfiguration().getBrokerServicePort());\n         PulsarClient client =  spy( PulsarClient.create(brokerUrl.toString()) );\n         PulsarClientImpl clientImpl = (PulsarClientImpl) client;\n         Field conf = PersistentReplicator.class.getDeclaredField(\"producerConfiguration\");\n         conf.setAccessible(true);\n-        \n+\n         ManagedCursor cursor = mock(ManagedCursorImpl.class);\n         doReturn(remoteCluster).when(cursor).getName();\n         brokerService.getReplicationClients().put(remoteCluster, client);\n         PersistentReplicator replicator = new PersistentReplicator(topic, cursor, localCluster, remoteCluster, brokerService);\n \n         doReturn(new CompletableFuture<Producer>()).when(clientImpl).createProducerAsync(globalTopicName, (ProducerConfiguration) conf.get(replicator), remoteReplicatorName);\n-    \n+\n         replicator.startProducer();\n         verify(clientImpl).createProducerAsync(globalTopicName, (ProducerConfiguration) conf.get(replicator), remoteReplicatorName);\n-        \n+\n         replicator.disconnect(false);\n         replicator.disconnect(false);\n-        \n+\n         replicator.startProducer();\n \n-        verify(clientImpl, Mockito.times(2)).createProducerAsync(globalTopicName, (ProducerConfiguration) conf.get(replicator), remoteReplicatorName);       \n+        verify(clientImpl, Mockito.times(2)).createProducerAsync(globalTopicName, (ProducerConfiguration) conf.get(replicator), remoteReplicatorName);\n     }\n \n }",
                "changes": 25,
                "blob_url": "https://github.com/apache/pulsar/blob/b4ad43e76d30605f13c372b59bb2a6ff11246d13/pulsar-broker/src/test/java/com/yahoo/pulsar/broker/service/PersistentTopicTest.java"
            },
            {
                "additions": 11,
                "sha": "f6824d64483a090127cf327b6be6bcd30b0c46d7",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/b4ad43e76d30605f13c372b59bb2a6ff11246d13/pulsar-broker/src/test/java/com/yahoo/pulsar/client/api/DispatcherBlockConsumerTest.java",
                "deletions": 13,
                "filename": "pulsar-broker/src/test/java/com/yahoo/pulsar/client/api/DispatcherBlockConsumerTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/com/yahoo/pulsar/client/api/DispatcherBlockConsumerTest.java?ref=b4ad43e76d30605f13c372b59bb2a6ff11246d13",
                "patch": "@@ -65,7 +65,7 @@ protected void setup() throws Exception {\n     protected void cleanup() throws Exception {\n         super.internalCleanup();\n     }\n-    \n+\n     @DataProvider(name = \"gracefulUnload\")\n     public Object[][] bundleUnloading() {\n         return new Object[][] { { Boolean.TRUE }, { Boolean.FALSE } };\n@@ -74,7 +74,7 @@ protected void cleanup() throws Exception {\n     /**\n      * Verifies broker blocks dispatching after unack-msgs reaches to max-limit and start dispatching back once client\n      * ack messages.\n-     * \n+     *\n      * @throws Exception\n      */\n     @Test\n@@ -171,10 +171,10 @@ public void testConsumerBlockingWithUnAckedMessagesAtDispatcher() throws Excepti\n     }\n \n     /**\n-     * \n+     *\n      * Verifies: broker blocks dispatching once unack-msg reaches to max-limit. However, on redelivery it redelivers\n      * those already delivered-unacked messages again\n-     * \n+     *\n      * @throws Exception\n      */\n     @Test\n@@ -183,8 +183,6 @@ public void testConsumerBlockingWithUnAckedMessagesAndRedelivery() throws Except\n \n         int unAckedMessages = pulsar.getConfiguration().getMaxUnackedMessagesPerSubscription();\n         try {\n-            stopBroker();\n-            startBroker();\n             final int unackMsgAllowed = 100;\n             final int totalProducedMsgs = 200;\n             final int receiverQueueSize = 10;\n@@ -305,7 +303,7 @@ public void testConsumerBlockingWithUnAckedMessagesAndRedelivery() throws Except\n     /**\n      * It verifies that consumer1 attached to dispatcher will be blocked after reaching limit. But consumer2 connects\n      * and consumer1 will be closed: makes broker to dispatch all those consumer1's unack messages back to consumer2.\n-     * \n+     *\n      * @throws Exception\n      */\n     @Test\n@@ -385,7 +383,7 @@ public void testCloseConsumerBlockedDispatcher() throws Exception {\n     /**\n      * Verifies: old-client which does redelivery of all messages makes broker to redeliver all unacked messages for\n      * redelivery.\n-     * \n+     *\n      * @throws Exception\n      */\n     @Test\n@@ -518,7 +516,7 @@ public void testRedeliveryOnBlockedDistpatcher() throws Exception {\n             pulsar.getConfiguration().setMaxUnackedMessagesPerConsumer(unAckedMessages);\n         }\n     }\n-    \n+\n     @Test\n     public void testBlockDispatcherStats() throws Exception {\n \n@@ -586,12 +584,12 @@ public void testBlockDispatcherStats() throws Exception {\n \n     /**\n      * <pre>\n-     * It verifies that cursor-recovery \n+     * It verifies that cursor-recovery\n      * 1. recovers individualDeletedMessages\n      * 2. sets readPosition with last acked-message\n-     * 3. replay all unack messages \n+     * 3. replay all unack messages\n      * </pre>\n-     * \n+     *\n      * @throws Exception\n      */\n     @Test(dataProvider = \"gracefulUnload\")\n@@ -656,7 +654,7 @@ public void testBrokerSubscriptionRecovery(boolean unloadBundleGracefully) throw\n         receivedMsgs.removeAll(unackMsgs);\n         assertTrue(receivedMsgs.isEmpty());\n     }\n-    \n+\n     private void rolloverPerIntervalStats() {\n         try {\n             pulsar.getExecutor().submit(() -> pulsar.getBrokerService().updateRates()).get();",
                "changes": 24,
                "blob_url": "https://github.com/apache/pulsar/blob/b4ad43e76d30605f13c372b59bb2a6ff11246d13/pulsar-broker/src/test/java/com/yahoo/pulsar/client/api/DispatcherBlockConsumerTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fixed NPE on load manager shutdown (#491)",
        "commit": "https://github.com/apache/pulsar/commit/b4ad43e76d30605f13c372b59bb2a6ff11246d13"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/086cbbba0e8854ecbafc55bff9e93cb9a84ce797",
        "bug_id": "pulsar_60",
        "file": [
            {
                "additions": 7,
                "sha": "0d7e0eeab95ec28be03f64e31ec34d232995adcf",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/2d197b0e7e40106535d91ed6de82dd30241ff256/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
                "deletions": 2,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java?ref=2d197b0e7e40106535d91ed6de82dd30241ff256",
                "patch": "@@ -50,6 +50,7 @@\n import org.apache.pulsar.broker.PulsarServerException;\n import org.apache.pulsar.broker.ServiceConfiguration;\n import org.apache.pulsar.broker.admin.AdminResource;\n+import org.apache.pulsar.broker.authorization.AuthorizationService;\n import org.apache.pulsar.broker.service.BrokerServiceException.SubscriptionBusyException;\n import org.apache.pulsar.broker.service.Subscription;\n import org.apache.pulsar.broker.service.Topic;\n@@ -297,9 +298,13 @@ protected void internalGrantPermissionOnNamespace(String role, Set<AuthAction> a\n         validateAdminAccessForTenant(namespaceName.getTenant());\n \n         try {\n-            pulsar().getBrokerService().getAuthorizationService()\n-                    .grantPermissionAsync(namespaceName, actions, role, null/*additional auth-data json*/)\n+            AuthorizationService authService = pulsar().getBrokerService().getAuthorizationService();\n+            if (null != authService) {\n+                authService.grantPermissionAsync(namespaceName, actions, role, null/*additional auth-data json*/)\n                     .get();\n+            } else {\n+                throw new RestException(Status.NOT_IMPLEMENTED, \"Authorization is not enabled\");\n+            }\n         } catch (InterruptedException e) {\n             log.error(\"[{}] Failed to get permissions for namespace {}\", clientAppId(), namespaceName, e);\n             throw new RestException(e);",
                "changes": 9,
                "blob_url": "https://github.com/apache/pulsar/blob/2d197b0e7e40106535d91ed6de82dd30241ff256/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java"
            },
            {
                "additions": 2,
                "sha": "b08bfb5763ca3664bb66d159628747056c3b955a",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/2d197b0e7e40106535d91ed6de82dd30241ff256/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v1/Namespaces.java",
                "deletions": 1,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v1/Namespaces.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v1/Namespaces.java?ref=2d197b0e7e40106535d91ed6de82dd30241ff256",
                "patch": "@@ -218,7 +218,8 @@ public void deleteNamespaceBundle(@PathParam(\"property\") String property,\n     @ApiOperation(hidden = true, value = \"Grant a new permission to a role on a namespace.\")\n     @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n             @ApiResponse(code = 404, message = \"Property or cluster or namespace doesn't exist\"),\n-            @ApiResponse(code = 409, message = \"Concurrent modification\") })\n+            @ApiResponse(code = 409, message = \"Concurrent modification\"),\n+            @ApiResponse(code = 501, message = \"Authorization is not enabled\")})\n     public void grantPermissionOnNamespace(@PathParam(\"property\") String property, @PathParam(\"cluster\") String cluster,\n             @PathParam(\"namespace\") String namespace, @PathParam(\"role\") String role, Set<AuthAction> actions) {\n         validateNamespaceName(property, cluster, namespace);",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/2d197b0e7e40106535d91ed6de82dd30241ff256/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v1/Namespaces.java"
            },
            {
                "additions": 2,
                "sha": "f58ec1916c1c8d874b0dca46c4449599a3d57b24",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/2d197b0e7e40106535d91ed6de82dd30241ff256/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/Namespaces.java",
                "deletions": 1,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/Namespaces.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/Namespaces.java?ref=2d197b0e7e40106535d91ed6de82dd30241ff256",
                "patch": "@@ -160,7 +160,8 @@ public void deleteNamespaceBundle(@PathParam(\"tenant\") String tenant, @PathParam\n     @ApiOperation(value = \"Grant a new permission to a role on a namespace.\")\n     @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n             @ApiResponse(code = 404, message = \"Tenant or cluster or namespace doesn't exist\"),\n-            @ApiResponse(code = 409, message = \"Concurrent modification\") })\n+            @ApiResponse(code = 409, message = \"Concurrent modification\"),\n+            @ApiResponse(code = 501, message = \"Authorization is not enabled\")})\n     public void grantPermissionOnNamespace(@PathParam(\"tenant\") String tenant,\n             @PathParam(\"namespace\") String namespace, @PathParam(\"role\") String role, Set<AuthAction> actions) {\n         validateNamespaceName(tenant, namespace);",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/2d197b0e7e40106535d91ed6de82dd30241ff256/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/Namespaces.java"
            },
            {
                "additions": 14,
                "sha": "996145428316ded5cea3eb4419b33a7a56551cac",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/2d197b0e7e40106535d91ed6de82dd30241ff256/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdminException.java",
                "deletions": 4,
                "filename": "pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdminException.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdminException.java?ref=2d197b0e7e40106535d91ed6de82dd30241ff256",
                "patch": "@@ -47,25 +47,25 @@ private static String getReasonFromServer(WebApplicationException e) {\n \n     public PulsarAdminException(ClientErrorException e) {\n         super(getReasonFromServer(e), e);\n-        this.httpError = e.getMessage();\n+        this.httpError = getReasonFromServer(e);\n         this.statusCode = e.getResponse().getStatus();\n     }\n \n     public PulsarAdminException(ClientErrorException e, String message) {\n         super(message, e);\n-        this.httpError = e.getMessage();\n+        this.httpError = getReasonFromServer(e);\n         this.statusCode = e.getResponse().getStatus();\n     }\n \n     public PulsarAdminException(ServerErrorException e) {\n         super(getReasonFromServer(e), e);\n-        this.httpError = e.getMessage();\n+        this.httpError = getReasonFromServer(e);\n         this.statusCode = e.getResponse().getStatus();\n     }\n \n     public PulsarAdminException(ServerErrorException e, String message) {\n         super(message, e);\n-        this.httpError = e.getMessage();\n+        this.httpError = getReasonFromServer(e);\n         this.statusCode = e.getResponse().getStatus();\n     }\n \n@@ -75,6 +75,12 @@ public PulsarAdminException(Throwable t) {\n         statusCode = DEFAULT_STATUS_CODE;\n     }\n \n+    public PulsarAdminException(WebApplicationException e) {\n+        super(getReasonFromServer(e), e);\n+        this.httpError = getReasonFromServer(e);\n+        this.statusCode = e.getResponse().getStatus();\n+    }\n+\n     public PulsarAdminException(String message, Throwable t) {\n         super(message, t);\n         httpError = null;\n@@ -124,6 +130,10 @@ public PreconditionFailedException(ClientErrorException e) {\n     }\n \n     public static class ServerSideErrorException extends PulsarAdminException {\n+        public ServerSideErrorException(ServerErrorException e, String msg) {\n+            super(e, msg);\n+        }\n+\n         public ServerSideErrorException(ServerErrorException e) {\n             super(e, \"Some error occourred on the server\");\n         }",
                "changes": 18,
                "blob_url": "https://github.com/apache/pulsar/blob/2d197b0e7e40106535d91ed6de82dd30241ff256/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdminException.java"
            },
            {
                "additions": 2,
                "sha": "25d622bdfde7404ef63df7718e5a50647fbca043",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/2d197b0e7e40106535d91ed6de82dd30241ff256/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/BaseResource.java",
                "deletions": 3,
                "filename": "pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/BaseResource.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/BaseResource.java?ref=2d197b0e7e40106535d91ed6de82dd30241ff256",
                "patch": "@@ -159,7 +159,7 @@ public PulsarAdminException getApiException(Throwable e) {\n             // Handle 5xx exceptions\n             if (e instanceof ServerErrorException) {\n                 ServerErrorException see = (ServerErrorException) e;\n-                return new ServerSideErrorException(see);\n+                return new ServerSideErrorException(see, e.getMessage());\n             } else if (e instanceof ClientErrorException) {\n                 // Handle 4xx exceptions\n                 ClientErrorException cee = (ClientErrorException) e;\n@@ -176,12 +176,11 @@ public PulsarAdminException getApiException(Throwable e) {\n                         return new ConflictException(cee);\n                     case 412:\n                         return new PreconditionFailedException(cee);\n-\n                     default:\n                         return new PulsarAdminException(cee);\n                 }\n             } else {\n-                return new PulsarAdminException(e);\n+                return new PulsarAdminException((WebApplicationException) e);\n             }\n         } else {\n             return new PulsarAdminException(e);",
                "changes": 5,
                "blob_url": "https://github.com/apache/pulsar/blob/2d197b0e7e40106535d91ed6de82dd30241ff256/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/BaseResource.java"
            },
            {
                "additions": 24,
                "sha": "8526ded2e2d300e51670c90d139b79fb1915eb9e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/2d197b0e7e40106535d91ed6de82dd30241ff256/tests/integration/src/test/java/org/apache/pulsar/tests/integration/cli/CLITest.java",
                "deletions": 0,
                "filename": "tests/integration/src/test/java/org/apache/pulsar/tests/integration/cli/CLITest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/java/org/apache/pulsar/tests/integration/cli/CLITest.java?ref=2d197b0e7e40106535d91ed6de82dd30241ff256",
                "patch": "@@ -18,6 +18,7 @@\n  */\n package org.apache.pulsar.tests.integration.cli;\n \n+import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertFalse;\n import static org.testng.Assert.assertTrue;\n import static org.testng.Assert.fail;\n@@ -208,4 +209,27 @@ public void testSetInfiniteRetention() throws Exception {\n             result.getStdout());\n     }\n \n+    // authorization related tests\n+\n+    @Test\n+    public void testGrantPermissionsAuthorizationDisabled() throws Exception {\n+        ContainerExecResult result;\n+\n+        String namespace = \"grant-permissions-\" + randomName(8);\n+        result = pulsarCluster.createNamespace(namespace);\n+        assertEquals(0, result.getExitCode());\n+\n+        String[] grantCommand = {\n+            \"namespaces\", \"grant-permission\", \"public/\" + namespace,\n+            \"--actions\", \"produce\",\n+            \"--role\", \"test-role\"\n+        };\n+        try {\n+            pulsarCluster.runAdminCommandOnAnyBroker(grantCommand);\n+        } catch (ContainerExecException cee) {\n+            result = cee.getResult();\n+            assertTrue(result.getStderr().contains(\"HTTP 501 Not Implemented\"), result.getStderr());\n+        }\n+    }\n+\n }",
                "changes": 24,
                "blob_url": "https://github.com/apache/pulsar/blob/2d197b0e7e40106535d91ed6de82dd30241ff256/tests/integration/src/test/java/org/apache/pulsar/tests/integration/cli/CLITest.java"
            }
        ],
        "repo": "pulsar",
        "message": "Issue 2283: Improve error message if authorization is not enabled (#2382)\n\n### Motivation\r\n\r\n Fixes #2283.\r\n\r\n If authorizationEnabled is not enabled, authorization service is not set. All the accesses to this authorization service will throw NPE and clients will receive Internal Server Error. The message is meaningless. It is better to return a more meaningful message.\r\n\r\n ### Changes\r\n\r\n Return `Not implemented` if authorization is not enabled.",
        "commit": "https://github.com/apache/pulsar/commit/2d197b0e7e40106535d91ed6de82dd30241ff256"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/f5ffbbe1ed2b79be1caf4a59688eab006e932ced",
        "bug_id": "pulsar_61",
        "file": [
            {
                "additions": 17,
                "sha": "66b6f6a5ec63a77586ac49e3b743e27d650aa27e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/9bc5518062da1fec23f4bfdb19e65f31fc0d8210/pulsar-broker/src/test/java/org/apache/pulsar/broker/auth/MockedPulsarServiceBaseTest.java",
                "deletions": 6,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/broker/auth/MockedPulsarServiceBaseTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/broker/auth/MockedPulsarServiceBaseTest.java?ref=9bc5518062da1fec23f4bfdb19e65f31fc0d8210",
                "patch": "@@ -136,15 +136,26 @@ protected final void init() throws Exception {\n \n     protected final void internalCleanup() throws Exception {\n         try {\n-            admin.close();\n-            // There are some test cases where pulsarClient is not initialized.\n+            // if init fails, some of these could be null, and if so would throw\n+            // an NPE in shutdown, obscuring the real error\n+            if (admin != null) {\n+                admin.close();\n+            }\n             if (pulsarClient != null) {\n                 pulsarClient.close();\n             }\n-            pulsar.close();\n-            mockBookKeeper.reallyShutdow();\n-            mockZookKeeper.shutdown();\n-            sameThreadOrderedSafeExecutor.shutdown();\n+            if (pulsar != null) {\n+                pulsar.close();\n+            }\n+            if (mockBookKeeper != null) {\n+                mockBookKeeper.reallyShutdow();\n+            }\n+            if (mockZookKeeper != null) {\n+                mockZookKeeper.shutdown();\n+            }\n+            if (sameThreadOrderedSafeExecutor != null) {\n+                sameThreadOrderedSafeExecutor.shutdown();\n+            }\n         } catch (Exception e) {\n             log.warn(\"Failed to clean up mocked pulsar service:\", e);\n             throw e;",
                "changes": 23,
                "blob_url": "https://github.com/apache/pulsar/blob/9bc5518062da1fec23f4bfdb19e65f31fc0d8210/pulsar-broker/src/test/java/org/apache/pulsar/broker/auth/MockedPulsarServiceBaseTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "Null checks in MockedPulsarServiceBaseTest (#1420)\n\nIf initialization fails, any of the members could be null. If we try\r\nto do cleanup on null members we get a NullPointerException, which\r\nobscures the original error that caused the member to be null in the\r\nfirst place.",
        "commit": "https://github.com/apache/pulsar/commit/9bc5518062da1fec23f4bfdb19e65f31fc0d8210"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/002f34d171f4344d5ca08801b904d89b5e80f6ce",
        "bug_id": "pulsar_62",
        "file": [
            {
                "additions": 25,
                "sha": "a3ec2e5638e0cab12da4fcaa921c5dc961d7fe4a",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/66c8428c0c52810a1c834a55a8412e314fcbf387/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java",
                "deletions": 16,
                "filename": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java?ref=66c8428c0c52810a1c834a55a8412e314fcbf387",
                "patch": "@@ -1361,23 +1361,32 @@ void asyncReadEntries(OpReadEntry opReadEntry) {\n                 mbean.startDataLedgerOpenOp();\n \n                 CompletableFuture<ReadHandle> promise = new CompletableFuture<>();\n-                bookKeeper.newOpenLedgerOp()\n-                    .withRecovery(true)\n-                    .withLedgerId(ledgerId)\n-                    .withDigestType(config.getDigestType())\n-                    .withPassword(config.getPassword()).execute()\n-                    .whenCompleteAsync((res,ex) -> {\n-                            mbean.endDataLedgerOpenOp();\n-                            if (ex != null) {\n-                                ledgerCache.remove(ledgerId, promise);\n-                                promise.completeExceptionally(createManagedLedgerException(ex));\n-                            } else {\n-                                if (log.isDebugEnabled()) {\n-                                    log.debug(\"[{}] Successfully opened ledger {} for reading\", name, ledgerId);\n-                                }\n-                                promise.complete(res);\n+\n+                LedgerInfo info = ledgers.get(ledgerId);\n+                CompletableFuture<ReadHandle> openFuture = new CompletableFuture<>();\n+                if (info != null && info.hasOffloadContext() && info.getOffloadContext().getComplete()) {\n+                    UUID uid = new UUID(info.getOffloadContext().getUidMsb(),\n+                                        info.getOffloadContext().getUidLsb());\n+                    openFuture = config.getLedgerOffloader().readOffloaded(ledgerId, uid);\n+                } else {\n+                    openFuture = bookKeeper.newOpenLedgerOp()\n+                        .withRecovery(true)\n+                        .withLedgerId(ledgerId)\n+                        .withDigestType(config.getDigestType())\n+                        .withPassword(config.getPassword()).execute();\n+                }\n+                openFuture.whenCompleteAsync((res,ex) -> {\n+                        mbean.endDataLedgerOpenOp();\n+                        if (ex != null) {\n+                            ledgerCache.remove(ledgerId, promise);\n+                            promise.completeExceptionally(createManagedLedgerException(ex));\n+                        } else {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"[{}] Successfully opened ledger {} for reading\", name, ledgerId);\n                             }\n-                        }, executor.chooseThread(name));\n+                            promise.complete(res);\n+                        }\n+                    }, executor.chooseThread(name));\n                 return promise;\n             });\n     }",
                "changes": 41,
                "blob_url": "https://github.com/apache/pulsar/blob/66c8428c0c52810a1c834a55a8412e314fcbf387/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java"
            },
            {
                "additions": 289,
                "sha": "8bbb44ae4bc04e83de3e0cc4696effc6a529565c",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/66c8428c0c52810a1c834a55a8412e314fcbf387/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/OffloadPrefixReadTest.java",
                "deletions": 0,
                "filename": "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/OffloadPrefixReadTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/OffloadPrefixReadTest.java?ref=66c8428c0c52810a1c834a55a8412e314fcbf387",
                "patch": "@@ -0,0 +1,289 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.mledger.impl;\n+\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.anyObject;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Lists;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.bookkeeper.client.api.DigestType;\n+import org.apache.bookkeeper.client.api.LastConfirmedAndEntry;\n+import org.apache.bookkeeper.client.api.LedgerEntries;\n+import org.apache.bookkeeper.client.api.LedgerEntry;\n+import org.apache.bookkeeper.client.api.LedgerMetadata;\n+import org.apache.bookkeeper.client.api.ReadHandle;\n+import org.apache.bookkeeper.client.impl.LedgerEntriesImpl;\n+import org.apache.bookkeeper.client.impl.LedgerEntryImpl;\n+\n+import org.apache.bookkeeper.mledger.Entry;\n+import org.apache.bookkeeper.mledger.LedgerOffloader;\n+import org.apache.bookkeeper.mledger.ManagedCursor;\n+import org.apache.bookkeeper.mledger.ManagedLedgerConfig;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.bookkeeper.test.MockedBookKeeperTestCase;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class OffloadPrefixReadTest extends MockedBookKeeperTestCase {\n+    private static final Logger log = LoggerFactory.getLogger(OffloadPrefixReadTest.class);\n+\n+    @Test\n+    public void testOffloadRead() throws Exception {\n+        MockLedgerOffloader offloader = spy(new MockLedgerOffloader());\n+        ManagedLedgerConfig config = new ManagedLedgerConfig();\n+        config.setMaxEntriesPerLedger(10);\n+        config.setMinimumRolloverTime(0, TimeUnit.SECONDS);\n+        config.setRetentionTime(10, TimeUnit.MINUTES);\n+        config.setLedgerOffloader(offloader);\n+        ManagedLedgerImpl ledger = (ManagedLedgerImpl)factory.open(\"my_test_ledger\", config);\n+\n+        for (int i = 0; i < 25; i++) {\n+            String content = \"entry-\" + i;\n+            ledger.addEntry(content.getBytes());\n+        }\n+        Assert.assertEquals(ledger.getLedgersInfoAsList().size(), 3);\n+\n+        ledger.offloadPrefix(ledger.getLastConfirmedEntry());\n+\n+        Assert.assertEquals(ledger.getLedgersInfoAsList().size(), 3);\n+        Assert.assertEquals(ledger.getLedgersInfoAsList().stream()\n+                            .filter(e -> e.getOffloadContext().getComplete()).count(), 2);\n+        Assert.assertTrue(ledger.getLedgersInfoAsList().get(0).getOffloadContext().getComplete());\n+        Assert.assertTrue(ledger.getLedgersInfoAsList().get(1).getOffloadContext().getComplete());\n+\n+        UUID firstLedgerUUID = new UUID(ledger.getLedgersInfoAsList().get(0).getOffloadContext().getUidMsb(),\n+                                        ledger.getLedgersInfoAsList().get(0).getOffloadContext().getUidLsb());\n+        UUID secondLedgerUUID = new UUID(ledger.getLedgersInfoAsList().get(1).getOffloadContext().getUidMsb(),\n+                                         ledger.getLedgersInfoAsList().get(1).getOffloadContext().getUidLsb());\n+\n+        ManagedCursor cursor = ledger.newNonDurableCursor(PositionImpl.earliest);\n+        int i = 0;\n+        for (Entry e : cursor.readEntries(10)) {\n+            Assert.assertEquals(new String(e.getData()), \"entry-\" + i++);\n+        }\n+        verify(offloader, times(1)).readOffloaded(anyLong(), anyObject());\n+        verify(offloader).readOffloaded(anyLong(), eq(firstLedgerUUID));\n+\n+        for (Entry e : cursor.readEntries(10)) {\n+            Assert.assertEquals(new String(e.getData()), \"entry-\" + i++);\n+        }\n+        verify(offloader, times(2)).readOffloaded(anyLong(), anyObject());\n+        verify(offloader).readOffloaded(anyLong(), eq(secondLedgerUUID));\n+\n+        for (Entry e : cursor.readEntries(5)) {\n+            Assert.assertEquals(new String(e.getData()), \"entry-\" + i++);\n+        }\n+        verify(offloader, times(2)).readOffloaded(anyLong(), anyObject());\n+    }\n+\n+    static class MockLedgerOffloader implements LedgerOffloader {\n+        ConcurrentHashMap<UUID, ReadHandle> offloads = new ConcurrentHashMap<UUID, ReadHandle>();\n+\n+        @Override\n+        public CompletableFuture<Void> offload(ReadHandle ledger,\n+                                               UUID uuid,\n+                                               Map<String, String> extraMetadata) {\n+            CompletableFuture<Void> promise = new CompletableFuture<>();\n+            try {\n+                offloads.put(uuid, new MockOffloadReadHandle(ledger));\n+                promise.complete(null);\n+            } catch (Exception e) {\n+                promise.completeExceptionally(e);\n+            }\n+            return promise;\n+        }\n+\n+        @Override\n+        public CompletableFuture<ReadHandle> readOffloaded(long ledgerId, UUID uuid) {\n+            return CompletableFuture.completedFuture(offloads.get(uuid));\n+        }\n+\n+        @Override\n+        public CompletableFuture<Void> deleteOffloaded(long ledgerId, UUID uuid) {\n+            offloads.remove(uuid);\n+            return CompletableFuture.completedFuture(null);\n+        };\n+    }\n+\n+    static class MockOffloadReadHandle implements ReadHandle {\n+        final long id;\n+        final List<ByteBuf> entries = Lists.newArrayList();\n+        final LedgerMetadata metadata;\n+\n+        MockOffloadReadHandle(ReadHandle toCopy) throws Exception {\n+            id = toCopy.getId();\n+            long lac = toCopy.getLastAddConfirmed();\n+            try (LedgerEntries entries = toCopy.read(0, lac)) {\n+                for (LedgerEntry e : entries) {\n+                    this.entries.add(e.getEntryBuffer().retainedSlice());\n+                }\n+            }\n+            metadata = new MockMetadata(toCopy.getLedgerMetadata());\n+        }\n+\n+        @Override\n+        public long getId() { return id; }\n+\n+        @Override\n+        public LedgerMetadata getLedgerMetadata() {\n+            return metadata;\n+        }\n+\n+        @Override\n+        public CompletableFuture<Void> closeAsync() {\n+            return CompletableFuture.completedFuture(null);\n+        }\n+\n+        @Override\n+        public CompletableFuture<LedgerEntries> readAsync(long firstEntry, long lastEntry) {\n+            List<LedgerEntry> readEntries = Lists.newArrayList();\n+            for (long eid = firstEntry; eid <= lastEntry; eid++) {\n+                ByteBuf buf = entries.get((int)eid).retainedSlice();\n+                readEntries.add(LedgerEntryImpl.create(id, eid, buf.readableBytes(), buf));\n+            }\n+            return CompletableFuture.completedFuture(LedgerEntriesImpl.create(readEntries));\n+        }\n+\n+        @Override\n+        public CompletableFuture<LedgerEntries> readUnconfirmedAsync(long firstEntry, long lastEntry) {\n+            return unsupported();\n+        }\n+\n+        @Override\n+        public CompletableFuture<Long> readLastAddConfirmedAsync() {\n+            return unsupported();\n+        }\n+\n+        @Override\n+        public CompletableFuture<Long> tryReadLastAddConfirmedAsync() {\n+            return unsupported();\n+        }\n+\n+        @Override\n+        public long getLastAddConfirmed() {\n+            return entries.size() - 1;\n+        }\n+\n+        @Override\n+        public long getLength() {\n+            return metadata.getLength();\n+        }\n+\n+        @Override\n+        public boolean isClosed() {\n+            return metadata.isClosed();\n+        }\n+\n+        @Override\n+        public CompletableFuture<LastConfirmedAndEntry> readLastAddConfirmedAndEntryAsync(long entryId,\n+                                                                                          long timeOutInMillis,\n+                                                                                          boolean parallel) {\n+            return unsupported();\n+        }\n+\n+        private <T> CompletableFuture<T> unsupported() {\n+            CompletableFuture<T> future = new CompletableFuture<>();\n+            future.completeExceptionally(new UnsupportedOperationException());\n+            return future;\n+        }\n+    }\n+\n+    static class MockMetadata implements LedgerMetadata {\n+        private final int ensembleSize;\n+        private final int writeQuorumSize;\n+        private final int ackQuorumSize;\n+        private final long lastEntryId;\n+        private final long length;\n+        private final DigestType digestType;\n+        private final long ctime;\n+        private final boolean isClosed;\n+        private final Map<String, byte[]> customMetadata;\n+\n+        MockMetadata(LedgerMetadata toCopy) {\n+            ensembleSize = toCopy.getEnsembleSize();\n+            writeQuorumSize = toCopy.getWriteQuorumSize();\n+            ackQuorumSize = toCopy.getAckQuorumSize();\n+            lastEntryId = toCopy.getLastEntryId();\n+            length = toCopy.getLength();\n+            digestType = toCopy.getDigestType();\n+            ctime = toCopy.getCtime();\n+            isClosed = toCopy.isClosed();\n+\n+            customMetadata = ImmutableMap.copyOf(toCopy.getCustomMetadata());\n+        }\n+\n+        @Override\n+        public int getEnsembleSize() { return ensembleSize; }\n+\n+        @Override\n+        public int getWriteQuorumSize() { return writeQuorumSize; }\n+\n+        @Override\n+        public int getAckQuorumSize() { return ackQuorumSize; }\n+\n+        @Override\n+        public long getLastEntryId() { return lastEntryId; }\n+\n+        @Override\n+        public long getLength() { return length; }\n+\n+        @Override\n+        public DigestType getDigestType() { return digestType; }\n+\n+        @Override\n+        public long getCtime() { return ctime; }\n+\n+        @Override\n+        public boolean isClosed() { return isClosed; }\n+\n+        @Override\n+        public Map<String, byte[]> getCustomMetadata() { return customMetadata; }\n+\n+        @Override\n+        public List<BookieSocketAddress> getEnsembleAt(long entryId) {\n+            throw new UnsupportedOperationException(\"Pulsar shouldn't look at this\");\n+        }\n+\n+        @Override\n+        public NavigableMap<Long, ? extends List<BookieSocketAddress>> getAllEnsembles() {\n+            throw new UnsupportedOperationException(\"Pulsar shouldn't look at this\");\n+        }\n+    }\n+}",
                "changes": 289,
                "blob_url": "https://github.com/apache/pulsar/blob/66c8428c0c52810a1c834a55a8412e314fcbf387/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/OffloadPrefixReadTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "Read OffloadedLedger if available (#1640)\n\n* Read OffloadedLedger if available\r\n\r\nIf a ledger has been previously offloaded to long term storage, read\r\nthe ledger from long term storage, rather than from bookkeeper.\r\n\r\nMaster issue #1511\r\n\r\n* Fix NPE",
        "commit": "https://github.com/apache/pulsar/commit/66c8428c0c52810a1c834a55a8412e314fcbf387"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/d9c92e72da0c1462dda74ed96cc19d8a34605d7e",
        "bug_id": "pulsar_63",
        "file": [
            {
                "additions": 2,
                "sha": "8f448f74652556203b825e00aa285afc78897a64",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/02198296c266c1bd6c66f3f6c7c29a74e1e8c894/pulsar-client/src/main/java/com/yahoo/pulsar/client/impl/ProducerImpl.java",
                "deletions": 2,
                "filename": "pulsar-client/src/main/java/com/yahoo/pulsar/client/impl/ProducerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/com/yahoo/pulsar/client/impl/ProducerImpl.java?ref=02198296c266c1bd6c66f3f6c7c29a74e1e8c894",
                "patch": "@@ -406,7 +406,8 @@ protected WriteInEventLoopCallback newObject(Handle handle) {\n \n         stats.cancelStatsTimeout();\n \n-        if (getClientCnx() == null || currentState != State.Ready) {\n+        ClientCnx cnx = cnx();\n+        if (cnx == null || currentState != State.Ready) {\n             log.info(\"[{}] [{}] Closed Producer (not connected)\", topic, producerName);\n             synchronized (this) {\n                 setState(State.Closed);\n@@ -428,7 +429,6 @@ protected WriteInEventLoopCallback newObject(Handle handle) {\n         ByteBuf cmd = Commands.newCloseProducer(producerId, requestId);\n \n         CompletableFuture<Void> closeFuture = new CompletableFuture<>();\n-        ClientCnx cnx = cnx();\n         cnx.sendRequestWithId(cmd, requestId).handle((v, exception) -> {\n             cnx.removeProducer(producerId);\n             if (exception == null || !cnx.ctx().channel().isActive()) {",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/02198296c266c1bd6c66f3f6c7c29a74e1e8c894/pulsar-client/src/main/java/com/yahoo/pulsar/client/impl/ProducerImpl.java"
            }
        ],
        "repo": "pulsar",
        "message": "Fixed race condition with NPE on Producer.closeAsync() (#490)",
        "commit": "https://github.com/apache/pulsar/commit/02198296c266c1bd6c66f3f6c7c29a74e1e8c894"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/1061906b6a2313cfc23ed31eae984ad3b430c33e",
        "bug_id": "pulsar_64",
        "file": [
            {
                "additions": 2,
                "sha": "7862c14a3fbd52c83ee66230113b68cbaa6c3224",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/8d9f277cd4e3cb045ad971eb8fbe363d62d347b2/pulsar-client/src/main/java/org/apache/pulsar/client/api/ClientConfiguration.java",
                "deletions": 0,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/api/ClientConfiguration.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/api/ClientConfiguration.java?ref=8d9f277cd4e3cb045ad971eb8fbe363d62d347b2",
                "patch": "@@ -20,6 +20,7 @@\n \n import static com.google.common.base.Preconditions.checkArgument;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import java.io.Serializable;\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n@@ -37,6 +38,7 @@\n \n     private static final long serialVersionUID = 1L;\n \n+    @JsonIgnore\n     private Authentication authentication = new AuthenticationDisabled();\n     private long operationTimeoutMs = 30000;\n     private long statsIntervalSeconds = 60;",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/8d9f277cd4e3cb045ad971eb8fbe363d62d347b2/pulsar-client/src/main/java/org/apache/pulsar/client/api/ClientConfiguration.java"
            },
            {
                "additions": 4,
                "sha": "bd6236a158f00423634750b02f2269dd7d923fc8",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/8d9f277cd4e3cb045ad971eb8fbe363d62d347b2/pulsar-client/src/main/java/org/apache/pulsar/client/api/ConsumerConfiguration.java",
                "deletions": 0,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/api/ConsumerConfiguration.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/api/ConsumerConfiguration.java?ref=8d9f277cd4e3cb045ad971eb8fbe363d62d347b2",
                "patch": "@@ -21,6 +21,7 @@\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkNotNull;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n@@ -45,8 +46,10 @@\n \n     private SubscriptionType subscriptionType = SubscriptionType.Exclusive;\n \n+    @JsonIgnore\n     private MessageListener messageListener;\n \n+    @JsonIgnore\n     private ConsumerEventListener consumerEventListener;\n \n     private int receiverQueueSize = 1000;\n@@ -59,6 +62,7 @@\n \n     private int priorityLevel = 0;\n \n+    @JsonIgnore\n     private CryptoKeyReader cryptoKeyReader = null;\n     private ConsumerCryptoFailureAction cryptoFailureAction = ConsumerCryptoFailureAction.FAIL;\n ",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/8d9f277cd4e3cb045ad971eb8fbe363d62d347b2/pulsar-client/src/main/java/org/apache/pulsar/client/api/ConsumerConfiguration.java"
            },
            {
                "additions": 4,
                "sha": "fb098cf92c42f6ac30da6ebeb8da49c3534c8e1e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/8d9f277cd4e3cb045ad971eb8fbe363d62d347b2/pulsar-client/src/main/java/org/apache/pulsar/client/api/ProducerConfiguration.java",
                "deletions": 0,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/api/ProducerConfiguration.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/api/ProducerConfiguration.java?ref=8d9f277cd4e3cb045ad971eb8fbe363d62d347b2",
                "patch": "@@ -21,6 +21,7 @@\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkNotNull;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n@@ -48,12 +49,15 @@\n     private int maxPendingMessagesAcrossPartitions = 50000;\n     private MessageRoutingMode messageRouteMode = MessageRoutingMode.SinglePartition;\n     private HashingScheme hashingScheme = HashingScheme.JavaStringHash;\n+    @JsonIgnore\n     private MessageRouter customMessageRouter = null;\n     private long batchingMaxPublishDelayMs = 10;\n     private int batchingMaxMessages = 1000;\n     private boolean batchingEnabled = false; // disabled by default\n \n+    @JsonIgnore\n     private CryptoKeyReader cryptoKeyReader;\n+    @JsonIgnore\n     private ConcurrentOpenHashSet<String> encryptionKeys;\n \n     private CompressionType compressionType = CompressionType.NONE;",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/8d9f277cd4e3cb045ad971eb8fbe363d62d347b2/pulsar-client/src/main/java/org/apache/pulsar/client/api/ProducerConfiguration.java"
            },
            {
                "additions": 68,
                "sha": "2e7fd8006b4ed9b011fbdc1ef58c807f0c00df82",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/8d9f277cd4e3cb045ad971eb8fbe363d62d347b2/pulsar-client/src/test/java/org/apache/pulsar/client/api/ConsumerConfigurationTest.java",
                "deletions": 0,
                "filename": "pulsar-client/src/test/java/org/apache/pulsar/client/api/ConsumerConfigurationTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/test/java/org/apache/pulsar/client/api/ConsumerConfigurationTest.java?ref=8d9f277cd4e3cb045ad971eb8fbe363d62d347b2",
                "patch": "@@ -0,0 +1,68 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.client.api;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.testng.Assert.assertFalse;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Unit test of {@link ConsumerConfiguration}.\n+ */\n+public class ConsumerConfigurationTest {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ConsumerConfigurationTest.class);\n+\n+    @Test\n+    public void testJsonIgnore() throws Exception {\n+\n+        ConsumerConfiguration conf = new ConsumerConfiguration()\n+            .setConsumerEventListener(new ConsumerEventListener() {\n+\n+                @Override\n+                public void becameActive(Consumer consumer, int partitionId) {\n+                }\n+\n+                @Override\n+                public void becameInactive(Consumer consumer, int partitionId) {\n+                }\n+            })\n+            .setMessageListener((MessageListener) (consumer, msg) -> {\n+            })\n+            .setCryptoKeyReader(mock(CryptoKeyReader.class));\n+\n+        ObjectMapper m = new ObjectMapper();\n+        m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);\n+        ObjectWriter w = m.writerWithDefaultPrettyPrinter();\n+\n+        String confAsString = w.writeValueAsString(conf);\n+        log.info(\"conf : {}\", confAsString);\n+\n+        assertFalse(confAsString.contains(\"messageListener\"));\n+        assertFalse(confAsString.contains(\"consumerEventListener\"));\n+        assertFalse(confAsString.contains(\"cryptoKeyReader\"));\n+    }\n+\n+}",
                "changes": 68,
                "blob_url": "https://github.com/apache/pulsar/blob/8d9f277cd4e3cb045ad971eb8fbe363d62d347b2/pulsar-client/src/test/java/org/apache/pulsar/client/api/ConsumerConfigurationTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "Add JsonIgnore to a few fields in configuration objects (#1260)\n\n*Problem*\r\n\r\nWe have seen NPE thrown when `ConsumerStats` tries to dump the configuration object with a customized ConsumerEventsListener.\r\nThe problem came from initialization sequence and when jackson tried to serialize the customized ConsumerEventsListener,\r\nit fails with NPE.\r\n\r\nIn general, those customized implementation such as `MessageRouter`, `MessageListener` and `ConsumerEventsListener` are not\r\nreally needed to serialize as part of json.\r\n\r\n*Solution*\r\n\r\nAdd @JsonIgnore to those fields to bypass json serialization",
        "commit": "https://github.com/apache/pulsar/commit/8d9f277cd4e3cb045ad971eb8fbe363d62d347b2"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/c570fb18289c3183d28b5128df6759c84e6c5afd",
        "bug_id": "pulsar_65",
        "file": [
            {
                "additions": 16,
                "sha": "5d6cb4b0f926f432079406a9e1f41188006eda88",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/87440f54141978d401164bc94b02d48eeca7f5bb/conf/broker.conf",
                "deletions": 0,
                "filename": "conf/broker.conf",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/conf/broker.conf?ref=87440f54141978d401164bc94b02d48eeca7f5bb",
                "patch": "@@ -471,6 +471,22 @@ functionsWorkerEnabled=false\n # Enable topic level metrics\n exposePublisherStats=true\n \n+### --- Ledger Offloading --- ###\n+\n+# Driver to use to offload old data to long term storage (Possible values: S3)\n+managedLedgerOffloadDriver=\n+\n+# Maximum number of thread pool threads for ledger offloading\n+managedLedgerOffloadMaxThreads=2\n+\n+# For Amazon S3 ledger offload, AWS region\n+s3ManagedLedgerOffloadRegion=\n+\n+# For Amazon S3 ledger offload, Bucket to place offloaded ledger into\n+s3ManagedLedgerOffloadBucket=\n+\n+# For Amazon S3 ledger offload, Alternative endpoint to connect to (useful for testing)\n+s3ManagedLedgerOffloadServiceEndpoint=\n \n ### --- Deprecated config variables --- ###\n ",
                "changes": 16,
                "blob_url": "https://github.com/apache/pulsar/blob/87440f54141978d401164bc94b02d48eeca7f5bb/conf/broker.conf"
            },
            {
                "additions": 16,
                "sha": "18c0c0e14e161c2d1156e372def4e88ba3945c36",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/87440f54141978d401164bc94b02d48eeca7f5bb/pom.xml",
                "deletions": 0,
                "filename": "pom.xml",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pom.xml?ref=87440f54141978d401164bc94b02d48eeca7f5bb",
                "patch": "@@ -145,9 +145,11 @@ flexible messaging model and an intuitive client API.</description>\n     <aerospike-client.version>4.1.5</aerospike-client.version>\n     <kafka-client.version>0.10.2.1</kafka-client.version>\n     <rabbitmq-client.version>5.1.1</rabbitmq-client.version>\n+    <aws-sdk.version>1.11.297</aws-sdk.version>\n \n     <!-- test dependencies -->\n     <disruptor.version>3.4.0</disruptor.version>\n+    <s3mock.version>0.2.5</s3mock.version>\n   </properties>\n \n   <dependencyManagement>\n@@ -699,6 +701,14 @@ flexible messaging model and an intuitive client API.</description>\n         <version>${sketches.version}</version>\n       </dependency>\n \n+      <dependency>\n+        <groupId>com.amazonaws</groupId>\n+        <artifactId>aws-java-sdk-bom</artifactId>\n+        <version>${aws-sdk.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+\n       <!-- use shaded dependency util pulsar bump zookeeper version to 3.5 -->\n       <dependency>\n         <groupId>org.apache.distributedlog</groupId>\n@@ -713,6 +723,12 @@ flexible messaging model and an intuitive client API.</description>\n         <version>${disruptor.version}</version>\n       </dependency>\n \n+      <dependency>\n+        <groupId>io.findify</groupId>\n+        <artifactId>s3mock_2.12</artifactId>\n+        <version>${s3mock.version}</version>\n+        <scope>test</scope>\n+      </dependency>\n     </dependencies>\n   </dependencyManagement>\n ",
                "changes": 16,
                "blob_url": "https://github.com/apache/pulsar/blob/87440f54141978d401164bc94b02d48eeca7f5bb/pom.xml"
            },
            {
                "additions": 57,
                "sha": "43d929d58e902bbc1e3bbb24210775ff62955f4c",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/87440f54141978d401164bc94b02d48eeca7f5bb/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java",
                "deletions": 0,
                "filename": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java?ref=87440f54141978d401164bc94b02d48eeca7f5bb",
                "patch": "@@ -468,6 +468,22 @@\n     // If true, export publisher stats when returning topics stats from the admin rest api\n     private boolean exposePublisherStats = true;\n \n+    /**** --- Ledger Offloading --- ****/\n+    // Driver to use to offload old data to long term storage\n+    private String managedLedgerOffloadDriver = null;\n+\n+    // Maximum number of thread pool threads for ledger offloading\n+    private int managedLedgerOffloadMaxThreads = 2;\n+\n+    // For Amazon S3 ledger offload, AWS region\n+    private String s3ManagedLedgerOffloadRegion = null;\n+\n+    // For Amazon S3 ledger offload, Bucket to place offloaded ledger into\n+    private String s3ManagedLedgerOffloadBucket = null;\n+\n+    // For Amazon S3 ledger offload, Alternative endpoint to connect to (useful for testing)\n+    private String s3ManagedLedgerOffloadServiceEndpoint = null;\n+\n     public String getZookeeperServers() {\n         return zookeeperServers;\n     }\n@@ -1625,4 +1641,45 @@ public boolean isRunningStandalone() {\n     public void setRunningStandalone(boolean isRunningStandalone) {\n         this.isRunningStandalone = isRunningStandalone;\n     }\n+\n+    /**** --- Ledger Offload ---- ****/\n+    public void setManagedLedgerOffloadDriver(String driver) {\n+        this.managedLedgerOffloadDriver = driver;\n+    }\n+\n+    public String getManagedLedgerOffloadDriver() {\n+        return this.managedLedgerOffloadDriver;\n+    }\n+\n+    public void setManagedLedgerOffloadMaxThreads(int maxThreads) {\n+        this.managedLedgerOffloadMaxThreads = maxThreads;\n+    }\n+\n+    public int getManagedLedgerOffloadMaxThreads() {\n+        return this.managedLedgerOffloadMaxThreads;\n+    }\n+\n+    public void setS3ManagedLedgerOffloadRegion(String region) {\n+        this.s3ManagedLedgerOffloadRegion = region;\n+    }\n+\n+    public String getS3ManagedLedgerOffloadRegion() {\n+        return this.s3ManagedLedgerOffloadRegion;\n+    }\n+\n+    public void setS3ManagedLedgerOffloadBucket(String bucket) {\n+        this.s3ManagedLedgerOffloadBucket = bucket;\n+    }\n+\n+    public String getS3ManagedLedgerOffloadBucket() {\n+        return this.s3ManagedLedgerOffloadBucket;\n+    }\n+\n+    public void setS3ManagedLedgerOffloadServiceEndpoint(String endpoint) {\n+        this.s3ManagedLedgerOffloadServiceEndpoint = endpoint;\n+    }\n+\n+    public String getS3ManagedLedgerOffloadServiceEndpoint() {\n+        return this.s3ManagedLedgerOffloadServiceEndpoint;\n+    }\n }",
                "changes": 57,
                "blob_url": "https://github.com/apache/pulsar/blob/87440f54141978d401164bc94b02d48eeca7f5bb/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java"
            },
            {
                "additions": 11,
                "sha": "a830674bbe3ecb5c37c2bb2e71b85c6713b2f202",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/87440f54141978d401164bc94b02d48eeca7f5bb/pulsar-broker/pom.xml",
                "deletions": 0,
                "filename": "pulsar-broker/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/pom.xml?ref=87440f54141978d401164bc94b02d48eeca7f5bb",
                "patch": "@@ -137,6 +137,17 @@\n       <scope>test</scope>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.amazonaws</groupId>\n+      <artifactId>aws-java-sdk-s3</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.findify</groupId>\n+      <artifactId>s3mock_2.12</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+\n     <!-- functions related dependencies (begin) -->\n \n     <dependency>",
                "changes": 11,
                "blob_url": "https://github.com/apache/pulsar/blob/87440f54141978d401164bc94b02d48eeca7f5bb/pulsar-broker/pom.xml"
            },
            {
                "additions": 29,
                "sha": "38d8e849a95e60e91765b2925c7be799d72a7e84",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/87440f54141978d401164bc94b02d48eeca7f5bb/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java",
                "deletions": 1,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java?ref=87440f54141978d401164bc94b02d48eeca7f5bb",
                "patch": "@@ -62,6 +62,7 @@\n import org.apache.pulsar.broker.loadbalance.LoadSheddingTask;\n import org.apache.pulsar.broker.loadbalance.impl.LoadManagerShared;\n import org.apache.pulsar.broker.namespace.NamespaceService;\n+import org.apache.pulsar.broker.s3offload.S3ManagedLedgerOffloader;\n import org.apache.pulsar.broker.service.BrokerService;\n import org.apache.pulsar.broker.service.Topic;\n import org.apache.pulsar.broker.service.schema.SchemaRegistryService;\n@@ -136,6 +137,8 @@\n             .build();\n     private final ScheduledExecutorService loadManagerExecutor;\n     private ScheduledExecutorService compactorExecutor;\n+    private ScheduledExecutorService offloaderScheduler;\n+    private LedgerOffloader offloader;\n     private ScheduledFuture<?> loadReportTask = null;\n     private ScheduledFuture<?> loadSheddingTask = null;\n     private ScheduledFuture<?> loadResourceQuotaTask = null;\n@@ -259,6 +262,10 @@ public void close() throws PulsarServerException {\n                 compactorExecutor.shutdown();\n             }\n \n+            if (offloaderScheduler != null) {\n+                offloaderScheduler.shutdown();\n+            }\n+\n             // executor is not initialized in mocks even when real close method is called\n             // guard against null executors\n             if (executor != null) {\n@@ -327,6 +334,8 @@ public void start() throws PulsarServerException {\n             // needs load management service\n             this.startNamespaceService();\n \n+            this.offloader = createManagedLedgerOffloader(this.getConfiguration());\n+\n             LOG.info(\"Starting Pulsar Broker service; version: '{}'\", ( brokerVersion != null ? brokerVersion : \"unknown\" )  );\n             brokerService.start();\n \n@@ -638,7 +647,17 @@ public ManagedLedgerFactory getManagedLedgerFactory() {\n     }\n \n     public LedgerOffloader getManagedLedgerOffloader() {\n-        return NullLedgerOffloader.INSTANCE;\n+        return offloader;\n+    }\n+\n+    public synchronized LedgerOffloader createManagedLedgerOffloader(ServiceConfiguration conf)\n+            throws PulsarServerException {\n+        if (conf.getManagedLedgerOffloadDriver() != null\n+            && conf.getManagedLedgerOffloadDriver().equalsIgnoreCase(S3ManagedLedgerOffloader.DRIVER_NAME)) {\n+            return new S3ManagedLedgerOffloader(conf, getOffloaderScheduler(conf));\n+        } else {\n+            return NullLedgerOffloader.INSTANCE;\n+        }\n     }\n \n     public ZooKeeperCache getLocalZkCache() {\n@@ -701,6 +720,15 @@ public synchronized Compactor getCompactor() throws PulsarServerException {\n         return this.compactor;\n     }\n \n+    protected synchronized ScheduledExecutorService getOffloaderScheduler(ServiceConfiguration conf) {\n+        if (this.offloaderScheduler == null) {\n+            this.offloaderScheduler = Executors.newScheduledThreadPool(\n+                    conf.getManagedLedgerOffloadMaxThreads(),\n+                    new DefaultThreadFactory(\"offloader-\"));\n+        }\n+        return this.offloaderScheduler;\n+    }\n+\n     public synchronized PulsarClient getClient() throws PulsarServerException {\n         if (this.client == null) {\n             try {",
                "changes": 30,
                "blob_url": "https://github.com/apache/pulsar/blob/87440f54141978d401164bc94b02d48eeca7f5bb/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java"
            },
            {
                "additions": 97,
                "sha": "c11fb3d9ec099eea5dffe2b3dcfad78eb4833108",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/87440f54141978d401164bc94b02d48eeca7f5bb/pulsar-broker/src/main/java/org/apache/pulsar/broker/s3offload/S3ManagedLedgerOffloader.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/s3offload/S3ManagedLedgerOffloader.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/s3offload/S3ManagedLedgerOffloader.java?ref=87440f54141978d401164bc94b02d48eeca7f5bb",
                "patch": "@@ -0,0 +1,97 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.s3offload;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+import com.google.common.base.Strings;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import org.apache.bookkeeper.client.api.ReadHandle;\n+import org.apache.bookkeeper.mledger.LedgerOffloader;\n+import org.apache.pulsar.broker.PulsarServerException;\n+import org.apache.pulsar.broker.ServiceConfiguration;\n+\n+public class S3ManagedLedgerOffloader implements LedgerOffloader {\n+    public static final String DRIVER_NAME = \"S3\";\n+    private final ScheduledExecutorService scheduler;\n+    private final AmazonS3 s3client;\n+    private final String bucket;\n+\n+    public S3ManagedLedgerOffloader(ServiceConfiguration conf,\n+                                    ScheduledExecutorService scheduler)\n+            throws PulsarServerException {\n+        String region = conf.getS3ManagedLedgerOffloadRegion();\n+        String bucket = conf.getS3ManagedLedgerOffloadBucket();\n+        String endpoint = conf.getS3ManagedLedgerOffloadServiceEndpoint();\n+        if (Strings.isNullOrEmpty(region)) {\n+            throw new PulsarServerException(\"s3ManagedLedgerOffloadRegion cannot be empty is s3 offload enabled\");\n+        }\n+        if (Strings.isNullOrEmpty(bucket)) {\n+            throw new PulsarServerException(\"s3ManagedLedgerOffloadBucket cannot be empty is s3 offload enabled\");\n+        }\n+\n+        AmazonS3ClientBuilder builder = AmazonS3ClientBuilder.standard().withRegion(region);\n+        if (!Strings.isNullOrEmpty(endpoint)) {\n+            builder.setEndpointConfiguration(new EndpointConfiguration(endpoint, region));\n+            builder.setPathStyleAccessEnabled(true);\n+        }\n+        s3client = builder.build();\n+        this.bucket = bucket;\n+        this.scheduler = scheduler;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> offload(ReadHandle ledger,\n+                                           UUID uid,\n+                                           Map<String, String> extraMetadata) {\n+        CompletableFuture<Void> promise = new CompletableFuture<>();\n+        scheduler.submit(() -> {\n+                try {\n+                    s3client.putObject(bucket, uid.toString(), uid.toString());\n+                    promise.complete(null);\n+                } catch (Throwable t) {\n+                    promise.completeExceptionally(t);\n+                }\n+            });\n+        return promise;\n+    }\n+\n+    @Override\n+    public CompletableFuture<ReadHandle> readOffloaded(long ledgerId, UUID uid) {\n+        CompletableFuture<ReadHandle> promise = new CompletableFuture<>();\n+        promise.completeExceptionally(new UnsupportedOperationException());\n+        return promise;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> deleteOffloaded(long ledgerId, UUID uid) {\n+        CompletableFuture<Void> promise = new CompletableFuture<>();\n+        promise.completeExceptionally(new UnsupportedOperationException());\n+        return promise;\n+    }\n+}\n+\n+",
                "changes": 97,
                "blob_url": "https://github.com/apache/pulsar/blob/87440f54141978d401164bc94b02d48eeca7f5bb/pulsar-broker/src/main/java/org/apache/pulsar/broker/s3offload/S3ManagedLedgerOffloader.java"
            },
            {
                "additions": 151,
                "sha": "4291a2c022b88fb23b4c82583f3fb4f9fd526010",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/87440f54141978d401164bc94b02d48eeca7f5bb/pulsar-broker/src/test/java/org/apache/pulsar/broker/s3offload/S3ManagedLedgerOffloaderTest.java",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/broker/s3offload/S3ManagedLedgerOffloaderTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/broker/s3offload/S3ManagedLedgerOffloaderTest.java?ref=87440f54141978d401164bc94b02d48eeca7f5bb",
                "patch": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.s3offload;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+import io.findify.s3mock.S3Mock;\n+import io.netty.util.concurrent.DefaultThreadFactory;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.MockBookKeeper;\n+import org.apache.bookkeeper.client.api.DigestType;\n+import org.apache.bookkeeper.client.api.ReadHandle;\n+import org.apache.bookkeeper.mledger.LedgerOffloader;\n+\n+import org.apache.pulsar.broker.PulsarServerException;\n+import org.apache.pulsar.broker.ServiceConfiguration;\n+import org.apache.pulsar.broker.auth.MockedPulsarServiceBaseTest;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+class S3ManagedLedgerOffloaderTest {\n+\n+    final ScheduledExecutorService scheduler;\n+    final MockBookKeeper bk;\n+    S3Mock s3mock = null;\n+    String endpoint = null;\n+\n+    final static String REGION = \"foobar\";\n+    final static String BUCKET = \"foobar\";\n+\n+    S3ManagedLedgerOffloaderTest() throws Exception {\n+        scheduler = Executors.newScheduledThreadPool(1, new DefaultThreadFactory(\"offloader-\"));\n+        bk = new MockBookKeeper(MockedPulsarServiceBaseTest.createMockZooKeeper());\n+     }\n+\n+    @BeforeMethod\n+    public void start() throws Exception {\n+        s3mock = new S3Mock.Builder().withPort(0).withInMemoryBackend().build();\n+        int port = s3mock.start().localAddress().getPort();\n+        endpoint = \"http://localhost:\" + port;\n+\n+        AmazonS3 client = AmazonS3ClientBuilder.standard()\n+            .withRegion(REGION)\n+            .withEndpointConfiguration(new EndpointConfiguration(endpoint, REGION))\n+            .withPathStyleAccessEnabled(true).build();\n+        client.createBucket(BUCKET);\n+    }\n+\n+    @AfterMethod\n+    public void stop() throws Exception {\n+        if (s3mock != null) {\n+            s3mock.shutdown();\n+        }\n+    }\n+\n+    private ReadHandle buildReadHandle() throws Exception {\n+        LedgerHandle lh = bk.createLedger(1,1,1, BookKeeper.DigestType.CRC32, \"foobar\".getBytes());\n+        lh.addEntry(\"foobar\".getBytes());\n+        lh.close();\n+\n+        ReadHandle readHandle = bk.newOpenLedgerOp().withLedgerId(lh.getId())\n+            .withPassword(\"foobar\".getBytes()).withDigestType(DigestType.CRC32).execute().get();\n+        return lh;\n+    }\n+\n+    @Test\n+    public void testHappyCase() throws Exception {\n+        ServiceConfiguration conf = new ServiceConfiguration();\n+        conf.setManagedLedgerOffloadDriver(S3ManagedLedgerOffloader.DRIVER_NAME);\n+        conf.setS3ManagedLedgerOffloadBucket(BUCKET);\n+        conf.setS3ManagedLedgerOffloadRegion(REGION);\n+        conf.setS3ManagedLedgerOffloadServiceEndpoint(endpoint);\n+        LedgerOffloader offloader = new S3ManagedLedgerOffloader(conf, scheduler);\n+\n+        offloader.offload(buildReadHandle(), UUID.randomUUID(), new HashMap<>()).get();\n+    }\n+\n+    @Test\n+    public void testBucketDoesNotExist() throws Exception {\n+        ServiceConfiguration conf = new ServiceConfiguration();\n+        conf.setManagedLedgerOffloadDriver(S3ManagedLedgerOffloader.DRIVER_NAME);\n+        conf.setS3ManagedLedgerOffloadBucket(\"no-bucket\");\n+        conf.setS3ManagedLedgerOffloadRegion(REGION);\n+        conf.setS3ManagedLedgerOffloadServiceEndpoint(endpoint);\n+        LedgerOffloader offloader = new S3ManagedLedgerOffloader(conf, scheduler);\n+\n+        try {\n+            offloader.offload(buildReadHandle(), UUID.randomUUID(), new HashMap<>()).get();\n+            Assert.fail(\"Shouldn't be able to add to bucket\");\n+        } catch (ExecutionException e) {\n+            Assert.assertTrue(e.getMessage().contains(\"NoSuchBucket\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testNoRegionConfigured() throws Exception {\n+        ServiceConfiguration conf = new ServiceConfiguration();\n+        conf.setManagedLedgerOffloadDriver(S3ManagedLedgerOffloader.DRIVER_NAME);\n+        conf.setS3ManagedLedgerOffloadBucket(BUCKET);\n+\n+        try {\n+            new S3ManagedLedgerOffloader(conf, scheduler);\n+            Assert.fail(\"Should have thrown exception\");\n+        } catch (PulsarServerException pse) {\n+            // correct\n+        }\n+    }\n+\n+    @Test\n+    public void testNoBucketConfigured() throws Exception {\n+        ServiceConfiguration conf = new ServiceConfiguration();\n+        conf.setManagedLedgerOffloadDriver(S3ManagedLedgerOffloader.DRIVER_NAME);\n+        conf.setS3ManagedLedgerOffloadRegion(REGION);\n+\n+        try {\n+            new S3ManagedLedgerOffloader(conf, scheduler);\n+            Assert.fail(\"Should have thrown exception\");\n+        } catch (PulsarServerException pse) {\n+            // correct\n+        }\n+    }\n+}\n+",
                "changes": 151,
                "blob_url": "https://github.com/apache/pulsar/blob/87440f54141978d401164bc94b02d48eeca7f5bb/pulsar-broker/src/test/java/org/apache/pulsar/broker/s3offload/S3ManagedLedgerOffloaderTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "Skeleton code for S3 offload (#1723)\n\n* Skeleton code for S3 offload\r\n\r\nDoesn't implement any of the logic for putting a ledger into an\r\nobject, but does contain code to configure a S3 client and create an\r\nobject, albeit empty.\r\n\r\nAlso adds a s3mock implementation to test against.\r\n\r\nMaster issue: #1511\r\n\r\n* Fixed NPE\r\n\r\n* remove test dependent on local env\r\n\r\nTest only worked because I had aws configured locally. Removing for\r\nnow, we can bring something similar back later",
        "commit": "https://github.com/apache/pulsar/commit/87440f54141978d401164bc94b02d48eeca7f5bb"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/a123380327fbe95eef1066c4c456020c19136e07",
        "bug_id": "pulsar_66",
        "file": [
            {
                "additions": 8,
                "sha": "0e47dfe20b1fef0276b93735e3d557a91c53bb73",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/259275ba8df5750e64fa15781dc2a968959ce71f/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/BrokerClientIntegrationTest.java",
                "deletions": 4,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/BrokerClientIntegrationTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/BrokerClientIntegrationTest.java?ref=259275ba8df5750e64fa15781dc2a968959ce71f",
                "patch": "@@ -583,22 +583,26 @@ public void testMaxConcurrentTopicLoading() throws Exception {\n             ClientCnx cnx = producer.cnx();\n             assertTrue(cnx.channel().isActive());\n             ExecutorService executor = Executors.newFixedThreadPool(concurrentLookupRequests);\n-            List<CompletableFuture<Producer<byte[]>>> futures = Lists.newArrayList();\n+            final List<CompletableFuture<Producer<byte[]>>> futures = Lists.newArrayList();\n             final int totalProducers = 10;\n             CountDownLatch latch = new CountDownLatch(totalProducers);\n             for (int i = 0; i < totalProducers; i++) {\n                 executor.submit(() -> {\n                     final String randomTopicName1 = topicName + randomUUID().toString();\n                     final String randomTopicName2 = topicName + randomUUID().toString();\n                     // pass producer-name to avoid exception: producer is already connected to topic\n-                    futures.add(pulsarClient2.newProducer().topic(randomTopicName1).createAsync());\n-                    futures.add(pulsarClient.newProducer().topic(randomTopicName2).createAsync());\n+                    synchronized (futures) {\n+                        futures.add(pulsarClient2.newProducer().topic(randomTopicName1).createAsync());\n+                        futures.add(pulsarClient.newProducer().topic(randomTopicName2).createAsync());\n+                    }\n                     latch.countDown();\n                 });\n             }\n \n             latch.await();\n-            FutureUtil.waitForAll(futures).get();\n+            synchronized (futures) {\n+                FutureUtil.waitForAll(futures).get();\n+            }\n             pulsarClient.close();\n             pulsarClient2.close();\n         } finally {",
                "changes": 12,
                "blob_url": "https://github.com/apache/pulsar/blob/259275ba8df5750e64fa15781dc2a968959ce71f/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/BrokerClientIntegrationTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "[tests] Fix the synchronization problem at BrokerClientIntegrationTest.testMaxConcurrentTopicLoading (#2595)\n\n*Motivation*\r\n\r\nFollowing exception is observed in one of the CI jobs.\r\n\r\n```\r\njava.lang.NullPointerException\r\n\tat org.apache.pulsar.common.util.FutureUtil.waitForAll(FutureUtil.java:44)\r\n\tat org.apache.pulsar.client.impl.BrokerClientIntegrationTest.testMaxConcurrentTopicLoading(BrokerClientIntegrationTest.java:601)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)\r\n\tat org.testng.internal.InvokeMethodRunnable.runOne(InvokeMethodRunnable.java:54)\r\n\tat org.testng.internal.InvokeMethodRunnable.run(InvokeMethodRunnable.java:44)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\nThe problem seems to be coming from improper synchronization in the tests.\r\n\r\n*Changes*\r\n\r\nFix the synchronization problem in BrokerClientIntegrationTest.testMaxConcurrentTopicLoading",
        "commit": "https://github.com/apache/pulsar/commit/259275ba8df5750e64fa15781dc2a968959ce71f"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/e7930f3d97cf64292aa507afeca6da824d714c60",
        "bug_id": "pulsar_67",
        "file": [
            {
                "additions": 2,
                "sha": "ba892ad4498fe0cd87d10f3a87c79ada473280cb",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/conf/functions_worker.yml",
                "deletions": 0,
                "filename": "conf/functions_worker.yml",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/conf/functions_worker.yml?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -36,6 +36,8 @@ downloadDirectory: /tmp/pulsar_functions\n #  threadGroupName: \"Thread Function Container Group\"\n processContainerFactory:\n   logDirectory:\n+#kubernetesContainerFactory:\n+#  k8Uri:\n \n schedulerClassName: \"org.apache.pulsar.functions.worker.scheduler.RoundRobinScheduler\"\n functionAssignmentTopicName: \"assignments\"",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/conf/functions_worker.yml"
            },
            {
                "additions": 10,
                "sha": "2ce32cb72e8af7e4a9a862dc0fe555d9ed3fabe6",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/distribution/server/src/assemble/LICENSE.bin.txt",
                "deletions": 0,
                "filename": "distribution/server/src/assemble/LICENSE.bin.txt",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/distribution/server/src/assemble/LICENSE.bin.txt?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -450,6 +450,15 @@ The Apache Software License, Version 2.0\n     - org.xerial.snappy-snappy-java-1.1.1.3.jar\n   * Objenesis\n     - org.objenesis-objenesis-2.1.jar\n+  * Squareup\n+    - com.squareup.okhttp-logging-interceptor-2.7.5.jar\n+    - com.squareup.okhttp-okhttp-ws-2.7.5.jar\n+  * Kubernetes Client\n+    - io.kubernetes-client-java-2.0.0.jar\n+    - io.kubernetes-client-java-api-2.0.0.jar\n+    - io.kubernetes-client-java-proto-2.0.0.jar\n+  * Joda Time\n+    - joda-time-joda-time-2.9.3.jar\n \n \n BSD 3-clause \"New\" or \"Revised\" License\n@@ -523,6 +532,7 @@ Bouncy Castle License\n  * Bouncy Castle -- licenses/LICENSE-bouncycastle.txt\n     - org.bouncycastle-bcpkix-jdk15on-1.55.jar\n     - org.bouncycastle-bcprov-jdk15on-1.55.jar\n+    - org.bouncycastle-bcprov-ext-jdk15on-1.59.jar\n \n ------------------------\n ",
                "changes": 10,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/distribution/server/src/assemble/LICENSE.bin.txt"
            },
            {
                "additions": 3,
                "sha": "9e3c6e8ece0c6d6f024cb3088c63c063d7ee6c2b",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java",
                "deletions": 1,
                "filename": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -1264,6 +1264,7 @@ protected static void startLocalRun(org.apache.pulsar.functions.proto.Function.F\n                 RuntimeSpawner runtimeSpawner = new RuntimeSpawner(\n                         instanceConfig,\n                         userCodeFile,\n+                        null,\n                         containerFactory,\n                         30000);\n                 spawners.add(runtimeSpawner);\n@@ -1284,7 +1285,8 @@ public void run() {\n                         CompletableFuture<String>[] futures = new CompletableFuture[spawners.size()];\n                         int index = 0;\n                         for (RuntimeSpawner spawner : spawners) {\n-                            futures[index++] = spawner.getFunctionStatusAsJson();\n+                            futures[index] = spawner.getFunctionStatusAsJson(index);\n+                            index++;\n                         }\n                         try {\n                             CompletableFuture.allOf(futures).get(5, TimeUnit.SECONDS);",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java"
            },
            {
                "additions": 13,
                "sha": "728df0ee1c078e22316c8b6e8ce1274646371429",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/pom.xml",
                "deletions": 0,
                "filename": "pulsar-functions/runtime/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/pom.xml?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -55,6 +55,19 @@\n       <artifactId>jcommander</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>io.kubernetes</groupId>\n+      <artifactId>client-java</artifactId>\n+      <version>2.0.0</version>\n+      <scope>compile</scope>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>ch.qos.logback</groupId>\n+          <artifactId>logback-classic</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+\n   </dependencies>\n \n   <build>",
                "changes": 13,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/pom.xml"
            },
            {
                "additions": 2,
                "sha": "affa1198cc9c1799421800a92dc876e7c5834e0c",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/JavaInstanceMain.java",
                "deletions": 1,
                "filename": "pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/JavaInstanceMain.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/JavaInstanceMain.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -126,6 +126,7 @@ public void start() throws Exception {\n         runtimeSpawner = new RuntimeSpawner(\n                 instanceConfig,\n                 jarFile,\n+                null, // we really dont use this in thread container\n                 containerFactory,\n                 expectedHealthCheckInterval * 1000);\n \n@@ -218,7 +219,7 @@ public InstanceControlImpl(RuntimeSpawner runtimeSpawner) {\n         @Override\n         public void getFunctionStatus(Empty request, StreamObserver<InstanceCommunication.FunctionStatus> responseObserver) {\n             try {\n-                InstanceCommunication.FunctionStatus response = runtimeSpawner.getFunctionStatus().get();\n+                InstanceCommunication.FunctionStatus response = runtimeSpawner.getFunctionStatus(runtimeSpawner.getInstanceConfig().getInstanceId()).get();\n                 responseObserver.onNext(response);\n                 responseObserver.onCompleted();\n             } catch (Exception e) {",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/JavaInstanceMain.java"
            },
            {
                "additions": 551,
                "sha": "0573d88012ea750dcd203a1950c496dd78d5e4e9",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/KubernetesRuntime.java",
                "deletions": 0,
                "filename": "pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/KubernetesRuntime.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/KubernetesRuntime.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -0,0 +1,551 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pulsar.functions.runtime;\n+\n+import com.google.common.util.concurrent.FutureCallback;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.protobuf.Empty;\n+import com.squareup.okhttp.Response;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.kubernetes.client.apis.AppsV1Api;\n+import io.kubernetes.client.apis.CoreV1Api;\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.models.*;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.functions.instance.AuthenticationConfig;\n+import org.apache.pulsar.functions.instance.InstanceConfig;\n+import org.apache.pulsar.functions.proto.Function;\n+import org.apache.pulsar.functions.proto.InstanceCommunication;\n+import org.apache.pulsar.functions.proto.InstanceCommunication.FunctionStatus;\n+import org.apache.pulsar.functions.proto.InstanceControlGrpc;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static java.net.HttpURLConnection.HTTP_CONFLICT;\n+\n+/**\n+ * Kubernetes based runtime for running functions.\n+ * This runtime provides the usual methods to start/stop/getfunctionstatus\n+ * interfaces to control the kubernetes job running function.\n+ * We first create a headless service and then a statefulset for starting function pods\n+ * Each function instance runs as a pod itself. The reason using statefulset as opposed\n+ * to a regular deployment is that functions require a unique instance_id for each instance.\n+ * The service abstraction is used for getting functionstatus.\n+ */\n+@Slf4j\n+class KubernetesRuntime implements Runtime {\n+\n+    private static final String ENV_SHARD_ID = \"SHARD_ID\";\n+    private static final int maxJobNameSize = 63;\n+    private static final Integer GRPC_PORT = 9093;\n+    public static final Pattern VALID_POD_NAME_REGEX =\n+            Pattern.compile(\"[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\",\n+                    Pattern.CASE_INSENSITIVE);\n+\n+    private final AppsV1Api appsClient;\n+    private final CoreV1Api coreClient;\n+    static final List<String> TOLERATIONS = Collections.unmodifiableList(\n+            Arrays.asList(\n+                    \"node.kubernetes.io/not-ready\",\n+                    \"node.alpha.kubernetes.io/notReady\",\n+                    \"node.alpha.kubernetes.io/unreachable\"\n+            )\n+    );\n+\n+    // The thread that invokes the function\n+    @Getter\n+    private List<String> processArgs;\n+    @Getter\n+    private ManagedChannel[] channel;\n+    private InstanceControlGrpc.InstanceControlFutureStub[] stub;\n+    private InstanceConfig instanceConfig;\n+    private final String jobNamespace;\n+    private final String pulsarDockerImageName;\n+    private final String pulsarRootDir;\n+    private final String userCodePkgUrl;\n+    private final String originalCodeFileName;\n+    private final String pulsarAdminUrl;\n+    private boolean running;\n+\n+\n+    KubernetesRuntime(AppsV1Api appsClient,\n+                      CoreV1Api coreClient,\n+                      String jobNamespace,\n+                      String pulsarDockerImageName,\n+                      String pulsarRootDir,\n+                      InstanceConfig instanceConfig,\n+                      String instanceFile,\n+                      String logDirectory,\n+                      String userCodePkgUrl,\n+                      String originalCodeFileName,\n+                      String pulsarServiceUrl,\n+                      String pulsarAdminUrl,\n+                      String stateStorageServiceUrl,\n+                      AuthenticationConfig authConfig) throws Exception {\n+        this.appsClient = appsClient;\n+        this.coreClient = coreClient;\n+        this.instanceConfig = instanceConfig;\n+        this.jobNamespace = jobNamespace;\n+        this.pulsarDockerImageName = pulsarDockerImageName;\n+        this.pulsarRootDir = pulsarRootDir;\n+        this.userCodePkgUrl = userCodePkgUrl;\n+        this.originalCodeFileName = originalCodeFileName;\n+        this.pulsarAdminUrl = pulsarAdminUrl;\n+        this.processArgs = RuntimeUtils.composeArgs(instanceConfig, instanceFile, logDirectory, originalCodeFileName, pulsarServiceUrl, stateStorageServiceUrl,\n+                authConfig, \"$\" + ENV_SHARD_ID, GRPC_PORT, -1l, \"conf/log4j2.yaml\");\n+        running = false;\n+        doChecks(instanceConfig.getFunctionDetails());\n+    }\n+\n+    /**\n+     * The core logic that creates a service first followed by statefulset\n+     */\n+    @Override\n+    public void start() throws Exception {\n+        submitService();\n+        try {\n+            submitStatefulSet();\n+        } catch (Exception e) {\n+            deleteService();\n+        }\n+        running = true;\n+        if (channel == null && stub == null) {\n+            channel = new ManagedChannel[instanceConfig.getFunctionDetails().getParallelism()];\n+            stub = new InstanceControlGrpc.InstanceControlFutureStub[instanceConfig.getFunctionDetails().getParallelism()];\n+            for (int i = 0; i < instanceConfig.getFunctionDetails().getParallelism(); ++i) {\n+                String address = createJobName(instanceConfig.getFunctionDetails()) + \"-\" +\n+                        i + \".\" + createJobName(instanceConfig.getFunctionDetails());\n+                channel[i] = ManagedChannelBuilder.forAddress(address, GRPC_PORT)\n+                        .usePlaintext(true)\n+                        .build();\n+                stub[i] = InstanceControlGrpc.newFutureStub(channel[i]);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void join() throws Exception {\n+        // K8 functions never return\n+        this.wait();\n+    }\n+\n+    @Override\n+    public void stop() throws Exception {\n+        if (running) {\n+            deleteStatefulSet();\n+            deleteService();\n+        }\n+        if (channel != null) {\n+            for (ManagedChannel cn : channel) {\n+                cn.shutdown();\n+            }\n+        }\n+        channel = null;\n+        stub = null;\n+        running = false;\n+    }\n+\n+    @Override\n+    public Throwable getDeathException() {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<FunctionStatus> getFunctionStatus(int instanceId) {\n+        CompletableFuture<FunctionStatus> retval = new CompletableFuture<>();\n+        if (instanceId < 0 || instanceId >= stub.length) {\n+            if (stub == null) {\n+                retval.completeExceptionally(new RuntimeException(\"Invalid InstanceId\"));\n+                return retval;\n+            }\n+        }\n+        if (stub == null) {\n+            retval.completeExceptionally(new RuntimeException(\"Not alive\"));\n+            return retval;\n+        }\n+        ListenableFuture<FunctionStatus> response = stub[instanceId].getFunctionStatus(Empty.newBuilder().build());\n+        Futures.addCallback(response, new FutureCallback<FunctionStatus>() {\n+            @Override\n+            public void onFailure(Throwable throwable) {\n+                FunctionStatus.Builder builder = FunctionStatus.newBuilder();\n+                builder.setRunning(false);\n+                builder.setFailureException(throwable.getMessage());\n+                retval.complete(builder.build());\n+            }\n+\n+            @Override\n+            public void onSuccess(FunctionStatus t) {\n+                retval.complete(t);\n+            }\n+        });\n+        return retval;\n+    }\n+\n+    @Override\n+    public CompletableFuture<InstanceCommunication.MetricsData> getAndResetMetrics() {\n+        CompletableFuture<InstanceCommunication.MetricsData> retval = new CompletableFuture<>();\n+        retval.completeExceptionally(new RuntimeException(\"Kubernetes Runtime doesnt support getAndReset metrics via rest\"));\n+        return retval;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> resetMetrics() {\n+        CompletableFuture<Void> retval = new CompletableFuture<>();\n+        retval.completeExceptionally(new RuntimeException(\"Kubernetes Runtime doesnt support resetting metrics via rest\"));\n+        return retval;\n+    }\n+\n+    @Override\n+    public CompletableFuture<InstanceCommunication.MetricsData> getMetrics() {\n+        CompletableFuture<InstanceCommunication.MetricsData> retval = new CompletableFuture<>();\n+        retval.completeExceptionally(new RuntimeException(\"Kubernetes Runtime doesnt support getting metrics via rest\"));\n+        return retval;\n+    }\n+\n+    @Override\n+    public boolean isAlive() {\n+        return running;\n+    }\n+\n+    private void submitService() throws Exception {\n+        final V1Service service = createService();\n+        log.info(\"Submitting the following service to k8 {}\", coreClient.getApiClient().getJSON().serialize(service));\n+\n+        final Response response =\n+                coreClient.createNamespacedServiceCall(jobNamespace, service, null,\n+                        null, null).execute();\n+        if (!response.isSuccessful()) {\n+            if (response.code() == HTTP_CONFLICT) {\n+                log.warn(\"Service already created for function {}/{}/{}\",\n+                        instanceConfig.getFunctionDetails().getTenant(),\n+                        instanceConfig.getFunctionDetails().getNamespace(),\n+                        instanceConfig.getFunctionDetails().getName());\n+            } else {\n+                log.error(\"Error creating Service for function {}/{}/{}:- {}\",\n+                        instanceConfig.getFunctionDetails().getTenant(),\n+                        instanceConfig.getFunctionDetails().getNamespace(),\n+                        instanceConfig.getFunctionDetails().getName(),\n+                        response.message());\n+                // construct a message based on the k8s api server response\n+                throw new IllegalStateException(response.message());\n+            }\n+        } else {\n+            log.info(\"Service Created Successfully for function {}/{}/{}\",\n+                    instanceConfig.getFunctionDetails().getTenant(),\n+                    instanceConfig.getFunctionDetails().getNamespace(),\n+                    instanceConfig.getFunctionDetails().getName());\n+        }\n+    }\n+\n+    private V1Service createService() {\n+        final String jobName = createJobName(instanceConfig.getFunctionDetails());\n+\n+        final V1Service service = new V1Service();\n+\n+        // setup stateful set metadata\n+        final V1ObjectMeta objectMeta = new V1ObjectMeta();\n+        objectMeta.name(jobName);\n+        service.metadata(objectMeta);\n+\n+        // create the stateful set spec\n+        final V1ServiceSpec serviceSpec = new V1ServiceSpec();\n+\n+        serviceSpec.clusterIP(\"None\");\n+\n+        final V1ServicePort servicePort = new V1ServicePort();\n+        servicePort.name(\"grpc\").port(GRPC_PORT).protocol(\"TCP\");\n+        serviceSpec.addPortsItem(servicePort);\n+\n+        serviceSpec.selector(getLabels(instanceConfig.getFunctionDetails()));\n+\n+        service.spec(serviceSpec);\n+\n+        return service;\n+    }\n+\n+    private void submitStatefulSet() throws Exception {\n+        final V1StatefulSet statefulSet = createStatefulSet();\n+\n+        log.info(\"Submitting the following spec to k8 {}\", appsClient.getApiClient().getJSON().serialize(statefulSet));\n+\n+        final Response response =\n+                appsClient.createNamespacedStatefulSetCall(jobNamespace, statefulSet, null,\n+                        null, null).execute();\n+        if (!response.isSuccessful()) {\n+            if (response.code() == HTTP_CONFLICT) {\n+                log.warn(\"Statefulset already present for function {}/{}/{}\",\n+                        instanceConfig.getFunctionDetails().getTenant(),\n+                        instanceConfig.getFunctionDetails().getNamespace(),\n+                        instanceConfig.getFunctionDetails().getName());\n+            } else {\n+                log.error(\"Error creating statefulset for function {}/{}/{}:- {}\",\n+                        instanceConfig.getFunctionDetails().getTenant(),\n+                        instanceConfig.getFunctionDetails().getNamespace(),\n+                        instanceConfig.getFunctionDetails().getName(),\n+                        response.message());\n+                // construct a message based on the k8s api server response\n+                throw new IllegalStateException(response.message());\n+            }\n+        } else {\n+            log.info(\"Successfully created statefulset for function {}/{}/{}\",\n+                    instanceConfig.getFunctionDetails().getTenant(),\n+                    instanceConfig.getFunctionDetails().getNamespace(),\n+                    instanceConfig.getFunctionDetails().getName());\n+        }\n+    }\n+\n+    public void deleteStatefulSet() throws Exception {\n+        final V1DeleteOptions options = new V1DeleteOptions();\n+        options.setGracePeriodSeconds(0L);\n+        options.setPropagationPolicy(\"Foreground\");\n+        final Response response = appsClient.deleteNamespacedStatefulSetCall(\n+                createJobName(instanceConfig.getFunctionDetails()),\n+                jobNamespace, options, null, null, null, null, null, null)\n+                .execute();\n+\n+        if (!response.isSuccessful()) {\n+            throw new RuntimeException(String.format(\"Error deleting statefulset for function {}/{}/{} :- {} \",\n+                    instanceConfig.getFunctionDetails().getTenant(),\n+                    instanceConfig.getFunctionDetails().getNamespace(),\n+                    instanceConfig.getFunctionDetails().getName(),\n+                    response.message()));\n+        } else {\n+            log.info(\"Successfully deleted statefulset for function {}/{}/{}\",\n+                    instanceConfig.getFunctionDetails().getTenant(),\n+                    instanceConfig.getFunctionDetails().getNamespace(),\n+                    instanceConfig.getFunctionDetails().getName());\n+        }\n+    }\n+\n+    public void deleteService() throws Exception {\n+        final V1DeleteOptions options = new V1DeleteOptions();\n+        options.setGracePeriodSeconds(0L);\n+        options.setPropagationPolicy(\"Foreground\");\n+        final Response response = coreClient.deleteNamespacedServiceCall(\n+                createJobName(instanceConfig.getFunctionDetails()),\n+                jobNamespace, options, null, null, null, null, null, null)\n+                .execute();\n+\n+        if (!response.isSuccessful()) {\n+            throw new RuntimeException(String.format(\"Error deleting service for function {}/{}/{} :- {}\",\n+                    instanceConfig.getFunctionDetails().getTenant(),\n+                    instanceConfig.getFunctionDetails().getNamespace(),\n+                    instanceConfig.getFunctionDetails().getName(),\n+                    response.message()));\n+        } else {\n+            log.info(\"Service deleted successfully for function {}/{}/{}\",\n+                    instanceConfig.getFunctionDetails().getTenant(),\n+                    instanceConfig.getFunctionDetails().getNamespace(),\n+                    instanceConfig.getFunctionDetails().getName());\n+        }\n+    }\n+\n+    protected List<String> getExecutorCommand() {\n+        return Arrays.asList(\n+                \"sh\",\n+                \"-c\",\n+                String.join(\" \", getDownloadCommand(userCodePkgUrl, originalCodeFileName))\n+                        + \" && \" + setShardIdEnvironmentVariableCommand()\n+                        + \" && \" + String.join(\" \", processArgs)\n+        );\n+    }\n+\n+    private List<String> getDownloadCommand(String bkPath, String userCodeFilePath) {\n+        return Arrays.asList(\n+                pulsarRootDir + \"/bin/pulsar-admin\",\n+                \"--admin-url\",\n+                pulsarAdminUrl,\n+                \"functions\",\n+                \"download\",\n+                \"--path\",\n+                bkPath,\n+                \"--destination-file\",\n+                userCodeFilePath);\n+    }\n+\n+    private static String setShardIdEnvironmentVariableCommand() {\n+        return String.format(\"%s=${POD_NAME##*-} && echo shardId=${%s}\", ENV_SHARD_ID, ENV_SHARD_ID);\n+    }\n+\n+\n+    private V1StatefulSet createStatefulSet() {\n+        final String jobName = createJobName(instanceConfig.getFunctionDetails());\n+\n+        final V1StatefulSet statefulSet = new V1StatefulSet();\n+\n+        // setup stateful set metadata\n+        final V1ObjectMeta objectMeta = new V1ObjectMeta();\n+        objectMeta.name(jobName);\n+        statefulSet.metadata(objectMeta);\n+\n+        // create the stateful set spec\n+        final V1StatefulSetSpec statefulSetSpec = new V1StatefulSetSpec();\n+        statefulSetSpec.serviceName(jobName);\n+        statefulSetSpec.setReplicas(instanceConfig.getFunctionDetails().getParallelism());\n+\n+        // Parallel pod management tells the StatefulSet controller to launch or terminate\n+        // all Pods in parallel, and not to wait for Pods to become Running and Ready or completely\n+        // terminated prior to launching or terminating another Pod.\n+        statefulSetSpec.setPodManagementPolicy(\"Parallel\");\n+\n+        // add selector match labels\n+        // so the we know which pods to manage\n+        final V1LabelSelector selector = new V1LabelSelector();\n+        selector.matchLabels(getLabels(instanceConfig.getFunctionDetails()));\n+        statefulSetSpec.selector(selector);\n+\n+        // create a pod template\n+        final V1PodTemplateSpec podTemplateSpec = new V1PodTemplateSpec();\n+\n+        // set up pod meta\n+        final V1ObjectMeta templateMetaData = new V1ObjectMeta().labels(getLabels(instanceConfig.getFunctionDetails()));\n+        /*\n+        TODO:- Figure out the metrics collection later.\n+        templateMetaData.annotations(getPrometheusAnnotations());\n+        */\n+        podTemplateSpec.setMetadata(templateMetaData);\n+\n+        final List<String> command = getExecutorCommand();\n+        podTemplateSpec.spec(getPodSpec(command, instanceConfig.getFunctionDetails().hasResources() ? instanceConfig.getFunctionDetails().getResources() : null));\n+\n+        statefulSetSpec.setTemplate(podTemplateSpec);\n+\n+        statefulSet.spec(statefulSetSpec);\n+\n+        return statefulSet;\n+    }\n+\n+    private Map<String, String> getPrometheusAnnotations() {\n+        final Map<String, String> annotations = new HashMap<>();\n+        annotations.put(\"prometheus.io/scrape\", \"true\");\n+        annotations.put(\"prometheus.io/port\", \"8080\");\n+        return annotations;\n+    }\n+\n+    private Map<String, String> getLabels(Function.FunctionDetails functionDetails) {\n+        final Map<String, String> labels = new HashMap<>();\n+        labels.put(\"app\", createJobName(functionDetails));\n+        labels.put(\"namespace\", functionDetails.getNamespace());\n+        labels.put(\"tenant\", functionDetails.getTenant());\n+        return labels;\n+    }\n+\n+    private V1PodSpec getPodSpec(List<String> instanceCommand, Function.Resources resource) {\n+        final V1PodSpec podSpec = new V1PodSpec();\n+\n+        // set the termination period to 0 so pods can be deleted quickly\n+        podSpec.setTerminationGracePeriodSeconds(0L);\n+\n+        // set the pod tolerations so pods are rescheduled when nodes go down\n+        // https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/#taint-based-evictions\n+        podSpec.setTolerations(getTolerations());\n+\n+        podSpec.containers(Collections.singletonList(\n+                getContainer(instanceCommand, resource)));\n+\n+        return podSpec;\n+    }\n+\n+    private List<V1Toleration> getTolerations() {\n+        final List<V1Toleration> tolerations = new ArrayList<>();\n+        TOLERATIONS.forEach(t -> {\n+            final V1Toleration toleration =\n+                    new V1Toleration()\n+                            .key(t)\n+                            .operator(\"Exists\")\n+                            .effect(\"NoExecute\")\n+                            .tolerationSeconds(10L);\n+            tolerations.add(toleration);\n+        });\n+\n+        return tolerations;\n+    }\n+\n+    private V1Container getContainer(List<String> instanceCommand, Function.Resources resource) {\n+        final V1Container container = new V1Container().name(\"pulsarfunction\");\n+\n+        // set up the container images\n+        container.setImage(pulsarDockerImageName);\n+\n+        // set up the container command\n+        container.setCommand(instanceCommand);\n+\n+        // setup the environment variables for the container\n+        final V1EnvVar envVarPodName = new V1EnvVar();\n+        envVarPodName.name(\"POD_NAME\")\n+                .valueFrom(new V1EnvVarSource()\n+                        .fieldRef(new V1ObjectFieldSelector()\n+                                .fieldPath(\"metadata.name\")));\n+        container.setEnv(Arrays.asList(envVarPodName));\n+\n+\n+        // set container resources\n+        final V1ResourceRequirements resourceRequirements = new V1ResourceRequirements();\n+        final Map<String, Quantity> requests = new HashMap<>();\n+        requests.put(\"memory\", Quantity.fromString(Long.toString(resource != null && resource.getRam() != 0 ? resource.getRam() : 1073741824)));\n+        requests.put(\"cpu\", Quantity.fromString(Double.toString(resource != null && resource.getCpu() != 0 ? resource.getCpu() : 1)));\n+        resourceRequirements.setRequests(requests);\n+        container.setResources(resourceRequirements);\n+\n+        // set container ports\n+        container.setPorts(getContainerPorts());\n+\n+        return container;\n+    }\n+\n+    private List<V1ContainerPort> getContainerPorts() {\n+        List<V1ContainerPort> ports = new ArrayList<>();\n+        final V1ContainerPort port = new V1ContainerPort();\n+        port.setName(\"grpc\");\n+        port.setContainerPort(GRPC_PORT);\n+        ports.add(port);\n+        return ports;\n+    }\n+\n+    private static String createJobName(Function.FunctionDetails functionDetails) {\n+        return createJobName(functionDetails.getTenant(),\n+                functionDetails.getNamespace(),\n+                functionDetails.getName());\n+    }\n+\n+    private static String createJobName(String tenant, String namespace, String functionName) {\n+        return \"pf-\" + tenant + \"-\" + namespace + \"-\" + functionName;\n+    }\n+\n+    private static void doChecks(Function.FunctionDetails functionDetails) {\n+        final String jobName = createJobName(functionDetails);\n+        if (!jobName.equals(jobName.toLowerCase())) {\n+            throw new RuntimeException(\"Kubernetes does not allow upper case jobNames.\");\n+        }\n+        final Matcher matcher = VALID_POD_NAME_REGEX.matcher(jobName);\n+        if (!matcher.matches()) {\n+            throw new RuntimeException(\"Kubernetes only admits lower case and numbers.\");\n+        }\n+        if (jobName.length() > maxJobNameSize) {\n+            throw new RuntimeException(\"Kubernetes job name size should be less than \" + maxJobNameSize);\n+        }\n+    }\n+}",
                "changes": 551,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/KubernetesRuntime.java"
            },
            {
                "additions": 155,
                "sha": "c55935b0feafbb59897721c16b1f09c0d15bdd65",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/KubernetesRuntimeFactory.java",
                "deletions": 0,
                "filename": "pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/KubernetesRuntimeFactory.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/KubernetesRuntimeFactory.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -0,0 +1,155 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pulsar.functions.runtime;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.kubernetes.client.ApiClient;\n+import io.kubernetes.client.Configuration;\n+import io.kubernetes.client.apis.AppsV1Api;\n+import io.kubernetes.client.apis.CoreV1Api;\n+import io.kubernetes.client.util.Config;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.functions.instance.AuthenticationConfig;\n+import org.apache.pulsar.functions.instance.InstanceConfig;\n+\n+import static org.apache.commons.lang3.StringUtils.isEmpty;\n+\n+/**\n+ * Kubernetes based function container factory implementation.\n+ */\n+@Slf4j\n+public class KubernetesRuntimeFactory implements RuntimeFactory {\n+\n+    private final String k8Uri;\n+    private final String jobNamespace;\n+    private final String pulsarDockerImageName;\n+    private final String pulsarRootDir;\n+    private final Boolean submittingInsidePod;\n+    private final String pulsarAdminUri;\n+    private final String pulsarServiceUri;\n+    private final String stateStorageServiceUri;\n+    private final AuthenticationConfig authConfig;\n+    private final String javaInstanceJarFile;\n+    private final String pythonInstanceFile;\n+    private final String logDirectory = \"logs/functions\";\n+    private AppsV1Api appsClient;\n+    private CoreV1Api coreClient;\n+\n+    @VisibleForTesting\n+    public KubernetesRuntimeFactory(String k8Uri,\n+                                    String jobNamespace,\n+                                    String pulsarDockerImageName,\n+                                    String pulsarRootDir,\n+                                    Boolean submittingInsidePod,\n+                                    String pulsarServiceUri,\n+                                    String pulsarAdminUri,\n+                                    String stateStorageServiceUri,\n+                                    AuthenticationConfig authConfig) {\n+        this.k8Uri = k8Uri;\n+        if (!isEmpty(jobNamespace)) {\n+            this.jobNamespace = jobNamespace;\n+        } else {\n+            this.jobNamespace = \"default\";\n+        }\n+        if (!isEmpty(pulsarDockerImageName)) {\n+            this.pulsarDockerImageName = pulsarDockerImageName;\n+        } else {\n+            this.pulsarDockerImageName = \"apachepulsar/pulsar\";\n+        }\n+        if (!isEmpty(pulsarRootDir)) {\n+            this.pulsarRootDir = pulsarRootDir;\n+        } else {\n+            this.pulsarRootDir = \"/pulsar\";\n+        }\n+        this.submittingInsidePod = submittingInsidePod;\n+        this.pulsarServiceUri = pulsarServiceUri;\n+        this.pulsarAdminUri = pulsarAdminUri;\n+        this.stateStorageServiceUri = stateStorageServiceUri;\n+        this.authConfig = authConfig;\n+        this.javaInstanceJarFile = this.pulsarRootDir + \"/instances/java-instance.jar\";\n+        this.pythonInstanceFile = this.pulsarRootDir + \"/instances/python-instance/python_instance_main.py\";\n+    }\n+\n+    @Override\n+    public boolean externallyManaged() {\n+        return true;\n+    }\n+\n+    @Override\n+    public KubernetesRuntime createContainer(InstanceConfig instanceConfig, String codePkgUrl,\n+                                             String originalCodeFileName,\n+                                             Long expectedHealthCheckInterval) throws Exception {\n+        setupClient();\n+        String instanceFile;\n+        switch (instanceConfig.getFunctionDetails().getRuntime()) {\n+            case JAVA:\n+                instanceFile = javaInstanceJarFile;\n+                break;\n+            case PYTHON:\n+                instanceFile = pythonInstanceFile;\n+                break;\n+            default:\n+                throw new RuntimeException(\"Unsupported Runtime \" + instanceConfig.getFunctionDetails().getRuntime());\n+        }\n+        return new KubernetesRuntime(\n+            appsClient,\n+            coreClient,\n+            jobNamespace,\n+            pulsarDockerImageName,\n+            pulsarRootDir,\n+            instanceConfig,\n+            instanceFile,\n+            logDirectory,\n+            codePkgUrl,\n+            originalCodeFileName,\n+            pulsarServiceUri,\n+            pulsarAdminUri,\n+            stateStorageServiceUri,\n+            authConfig);\n+    }\n+\n+    @Override\n+    public void close() {\n+    }\n+\n+    private void setupClient() throws Exception {\n+        if (appsClient == null) {\n+            if (k8Uri == null) {\n+                log.info(\"k8Uri is null thus going by defaults\");\n+                ApiClient cli;\n+                if (submittingInsidePod) {\n+                    log.info(\"Looks like we are inside a k8 pod ourselves. Initializing as cluster\");\n+                    cli = Config.fromCluster();\n+                } else {\n+                    log.info(\"Using default cluster since we are not running inside k8\");\n+                    cli = Config.defaultClient();\n+                }\n+                Configuration.setDefaultApiClient(cli);\n+                appsClient = new AppsV1Api();\n+                coreClient = new CoreV1Api();\n+            } else {\n+                log.info(\"Setting up k8Client using uri \" + k8Uri);\n+                final ApiClient apiClient = new ApiClient().setBasePath(k8Uri);\n+                appsClient = new AppsV1Api(apiClient);\n+                coreClient = new CoreV1Api(apiClient);\n+            }\n+        }\n+    }\n+}",
                "changes": 155,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/KubernetesRuntimeFactory.java"
            },
            {
                "additions": 7,
                "sha": "2146376d7abae58bd40c90b82da6fac0821938af",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ProcessRuntime.java",
                "deletions": 104,
                "filename": "pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ProcessRuntime.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ProcessRuntime.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -23,31 +23,24 @@\n import com.google.common.util.concurrent.Futures;\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.protobuf.Empty;\n-import com.google.protobuf.util.JsonFormat;\n import io.grpc.ManagedChannel;\n import io.grpc.ManagedChannelBuilder;\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.functions.instance.AuthenticationConfig;\n import org.apache.pulsar.functions.instance.InstanceConfig;\n-import org.apache.pulsar.functions.proto.Function;\n import org.apache.pulsar.functions.proto.InstanceCommunication;\n import org.apache.pulsar.functions.proto.InstanceCommunication.FunctionStatus;\n import org.apache.pulsar.functions.proto.InstanceControlGrpc;\n-import org.apache.pulsar.functions.utils.FunctionDetailsUtils;\n-import org.apache.pulsar.functions.utils.functioncache.FunctionCacheEntry;\n \n import java.io.InputStream;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.TimerTask;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n-import static org.apache.commons.lang3.StringUtils.isNotBlank;\n-\n /**\n  * A function container implemented using java thread.\n  */\n@@ -66,6 +59,7 @@\n     private InstanceControlGrpc.InstanceControlFutureStub stub;\n     private ScheduledExecutorService timer;\n     private InstanceConfig instanceConfig;\n+    private final Long expectedHealthCheckInterval;\n \n     ProcessRuntime(InstanceConfig instanceConfig,\n                    String instanceFile,\n@@ -77,101 +71,10 @@\n                    Long expectedHealthCheckInterval) throws Exception {\n         this.instanceConfig = instanceConfig;\n         this.instancePort = instanceConfig.getPort();\n-        this.processArgs = composeArgs(instanceConfig, instanceFile, logDirectory, codeFile, pulsarServiceUrl, stateStorageServiceUrl,\n-                authConfig, expectedHealthCheckInterval);\n-    }\n-\n-    private List<String> composeArgs(InstanceConfig instanceConfig,\n-                                     String instanceFile,\n-                                     String logDirectory,\n-                                     String codeFile,\n-                                     String pulsarServiceUrl,\n-                                     String stateStorageServiceUrl,\n-                                     AuthenticationConfig authConfig,\n-                                     Long expectedHealthCheckInterval) throws Exception {\n-        List<String> args = new LinkedList<>();\n-        if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.JAVA) {\n-            args.add(\"java\");\n-            args.add(\"-cp\");\n-            args.add(instanceFile);\n-\n-            // Keep the same env property pointing to the Java instance file so that it can be picked up\n-            // by the child process and manually added to classpath\n-            args.add(String.format(\"-D%s=%s\", FunctionCacheEntry.JAVA_INSTANCE_JAR_PROPERTY, instanceFile));\n-            args.add(\"-Dlog4j.configurationFile=java_instance_log4j2.yml\");\n-            args.add(\"-Dpulsar.function.log.dir=\" + String.format(\n-                    \"%s/%s\",\n-                    logDirectory,\n-                    FunctionDetailsUtils.getFullyQualifiedName(instanceConfig.getFunctionDetails())));\n-            args.add(\"-Dpulsar.function.log.file=\" + String.format(\n-                    \"%s-%s\",\n-                    instanceConfig.getFunctionDetails().getName(),\n-                    instanceConfig.getInstanceId()));\n-            if (instanceConfig.getFunctionDetails().getResources() != null) {\n-                Function.Resources resources = instanceConfig.getFunctionDetails().getResources();\n-                if (resources.getRam() != 0) {\n-                    args.add(\"-Xmx\" + String.valueOf(resources.getRam()));\n-                }\n-            }\n-            args.add(JavaInstanceMain.class.getName());\n-            args.add(\"--jar\");\n-            args.add(codeFile);\n-        } else if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.PYTHON) {\n-            args.add(\"python\");\n-            args.add(instanceFile);\n-            args.add(\"--py\");\n-            args.add(codeFile);\n-            args.add(\"--logging_directory\");\n-            args.add(logDirectory);\n-            args.add(\"--logging_file\");\n-            args.add(instanceConfig.getFunctionDetails().getName());\n-            // TODO:- Find a platform independent way of controlling memory for a python application\n-        }\n-        args.add(\"--instance_id\");\n-        args.add(instanceConfig.getInstanceName());\n-        args.add(\"--function_id\");\n-        args.add(instanceConfig.getFunctionId());\n-        args.add(\"--function_version\");\n-        args.add(instanceConfig.getFunctionVersion());\n-        args.add(\"--function_details\");\n-        args.add(JsonFormat.printer().print(instanceConfig.getFunctionDetails()));\n-\n-        args.add(\"--pulsar_serviceurl\");\n-        args.add(pulsarServiceUrl);\n-        if (authConfig != null) {\n-            if (isNotBlank(authConfig.getClientAuthenticationPlugin())\n-                    && isNotBlank(authConfig.getClientAuthenticationParameters())) {\n-                args.add(\"--client_auth_plugin\");\n-                args.add(authConfig.getClientAuthenticationPlugin());\n-                args.add(\"--client_auth_params\");\n-                args.add(authConfig.getClientAuthenticationParameters());\n-            }\n-            args.add(\"--use_tls\");\n-            args.add(Boolean.toString(authConfig.isUseTls()));\n-            args.add(\"--tls_allow_insecure\");\n-            args.add(Boolean.toString(authConfig.isTlsAllowInsecureConnection()));\n-            args.add(\"--hostname_verification_enabled\");\n-            args.add(Boolean.toString(authConfig.isTlsHostnameVerificationEnable()));\n-            if(isNotBlank(authConfig.getTlsTrustCertsFilePath())) {\n-                args.add(\"--tls_trust_cert_path\");\n-                args.add(authConfig.getTlsTrustCertsFilePath());\n-            }\n-        }\n-        args.add(\"--max_buffered_tuples\");\n-        args.add(String.valueOf(instanceConfig.getMaxBufferedTuples()));\n-\n-        args.add(\"--port\");\n-        args.add(String.valueOf(instanceConfig.getPort()));\n-\n-        // state storage configs\n-        if (null != stateStorageServiceUrl\n-            && instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.JAVA) {\n-            args.add(\"--state_storage_serviceurl\");\n-            args.add(stateStorageServiceUrl);\n-        }\n-        args.add(\"--expected_healthcheck_interval\");\n-        args.add(String.valueOf(expectedHealthCheckInterval));\n-        return args;\n+        this.expectedHealthCheckInterval = expectedHealthCheckInterval;\n+        this.processArgs = RuntimeUtils.composeArgs(instanceConfig, instanceFile, logDirectory, codeFile, pulsarServiceUrl, stateStorageServiceUrl,\n+                authConfig, instanceConfig.getInstanceName(), instanceConfig.getPort(), expectedHealthCheckInterval,\n+                \"java_instance_log4j2.yml\");\n     }\n \n     /**\n@@ -201,7 +104,7 @@ public void run() {\n                                 instanceConfig.getInstanceId(), e);\n                     }\n                 }\n-            }, 30000, 30000, TimeUnit.MILLISECONDS);\n+            }, expectedHealthCheckInterval, expectedHealthCheckInterval, TimeUnit.SECONDS);\n         }\n     }\n \n@@ -226,7 +129,7 @@ public void stop() {\n     }\n \n     @Override\n-    public CompletableFuture<FunctionStatus> getFunctionStatus() {\n+    public CompletableFuture<FunctionStatus> getFunctionStatus(int instanceId) {\n         CompletableFuture<FunctionStatus> retval = new CompletableFuture<>();\n         if (stub == null) {\n             retval.completeExceptionally(new RuntimeException(\"Not alive\"));",
                "changes": 111,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ProcessRuntime.java"
            },
            {
                "additions": 1,
                "sha": "78b069cb69e813c6bb087f7a10f8f373412faaea",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ProcessRuntimeFactory.java",
                "deletions": 0,
                "filename": "pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ProcessRuntimeFactory.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ProcessRuntimeFactory.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -92,6 +92,7 @@ public ProcessRuntimeFactory(String pulsarServiceUrl,\n \n     @Override\n     public ProcessRuntime createContainer(InstanceConfig instanceConfig, String codeFile,\n+                                          String originalcodeFileName,\n                                           Long expectedHealthCheckInterval) throws Exception {\n         String instanceFile;\n         switch (instanceConfig.getFunctionDetails().getRuntime()) {",
                "changes": 1,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ProcessRuntimeFactory.java"
            },
            {
                "additions": 3,
                "sha": "ac1eceda7e1140f81309a7ced40046e114cc2710",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/Runtime.java",
                "deletions": 3,
                "filename": "pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/Runtime.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/Runtime.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -28,17 +28,17 @@\n  */\n public interface Runtime {\n \n-    void start();\n+    void start() throws Exception;\n \n     void join() throws Exception;\n \n-    void stop();\n+    void stop() throws Exception;\n \n     boolean isAlive();\n \n     Throwable getDeathException();\n \n-    CompletableFuture<InstanceCommunication.FunctionStatus> getFunctionStatus();\n+    CompletableFuture<InstanceCommunication.FunctionStatus> getFunctionStatus(int instanceId);\n \n     CompletableFuture<InstanceCommunication.MetricsData> getAndResetMetrics();\n     ",
                "changes": 6,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/Runtime.java"
            },
            {
                "additions": 3,
                "sha": "fd8a7bebb7a9f6006cd2e02f7734f98243b74c86",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeFactory.java",
                "deletions": 1,
                "filename": "pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeFactory.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeFactory.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -33,9 +33,11 @@\n      * @return function container to start/stop instance\n      */\n     Runtime createContainer(\n-            InstanceConfig instanceConfig, String codeFile,\n+            InstanceConfig instanceConfig, String codeFile, String originalCodeFileName,\n             Long expectedHealthCheckInterval) throws Exception;\n \n+    default boolean externallyManaged() { return false; }\n+\n     @Override\n     void close();\n ",
                "changes": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeFactory.java"
            },
            {
                "additions": 25,
                "sha": "d4d61e0b1c80466e4234a49cdea923f27df823a9",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeSpawner.java",
                "deletions": 12,
                "filename": "pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeSpawner.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeSpawner.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -41,9 +41,11 @@\n @Slf4j\n public class RuntimeSpawner implements AutoCloseable {\n \n+    @Getter\n     private final InstanceConfig instanceConfig;\n     private final RuntimeFactory runtimeFactory;\n     private final String codeFile;\n+    private final String originalCodeFileName;\n \n     @Getter\n     private Runtime runtime;\n@@ -55,10 +57,12 @@\n \n     public RuntimeSpawner(InstanceConfig instanceConfig,\n                           String codeFile,\n+                          String originalCodeFileName,\n                           RuntimeFactory containerFactory, long instanceLivenessCheckFreqMs) {\n         this.instanceConfig = instanceConfig;\n         this.runtimeFactory = containerFactory;\n         this.codeFile = codeFile;\n+        this.originalCodeFileName = originalCodeFileName;\n         this.numRestarts = 0;\n         this.instanceLivenessCheckFreqMs = instanceLivenessCheckFreqMs;\n     }\n@@ -68,12 +72,12 @@ public void start() throws Exception {\n         log.info(\"{}/{}/{}-{} RuntimeSpawner starting function\", details.getTenant(), details.getNamespace(),\n                 details.getName(), this.instanceConfig.getInstanceId());\n \n-        runtime = runtimeFactory.createContainer(this.instanceConfig, codeFile,\n+        runtime = runtimeFactory.createContainer(this.instanceConfig, codeFile, originalCodeFileName,\n                 instanceLivenessCheckFreqMs * 1000);\n         runtime.start();\n \n         // monitor function runtime to make sure it is running.  If not, restart the function runtime\n-        if (instanceLivenessCheckFreqMs > 0) {\n+        if (!runtimeFactory.externallyManaged() && instanceLivenessCheckFreqMs > 0) {\n             processLivenessCheckTimer = new Timer();\n             processLivenessCheckTimer.scheduleAtFixedRate(new TimerTask() {\n                 @Override\n@@ -82,9 +86,14 @@ public void run() {\n                         log.error(\"{}/{}/{}-{} Function Container is dead with exception.. restarting\", details.getTenant(),\n                                 details.getNamespace(), details.getName(), runtime.getDeathException());\n                         // Just for the sake of sanity, just destroy the runtime\n-                        runtime.stop();\n-                        runtimeDeathException = runtime.getDeathException();\n-                        runtime.start();\n+                        try {\n+                            runtime.stop();\n+                            runtimeDeathException = runtime.getDeathException();\n+                            runtime.start();\n+                        } catch (Exception e) {\n+                            log.error(\"{}/{}/{}-{} Function Restart failed\", details.getTenant(),\n+                                    details.getNamespace(), details.getName(), e);\n+                        }\n                         numRestarts++;\n                     }\n                 }\n@@ -98,19 +107,19 @@ public void join() throws Exception {\n         }\n     }\n \n-    public CompletableFuture<FunctionStatus> getFunctionStatus() {\n-        return runtime.getFunctionStatus().thenApply(f -> {\n-            FunctionStatus.Builder builder = FunctionStatus.newBuilder();\n-            builder.mergeFrom(f).setNumRestarts(numRestarts).setInstanceId(instanceConfig.getInstanceName());\n+    public CompletableFuture<FunctionStatus> getFunctionStatus(int instanceId) {\n+        return runtime.getFunctionStatus(instanceId).thenApply(f -> {\n+           FunctionStatus.Builder builder = FunctionStatus.newBuilder();\n+           builder.mergeFrom(f).setNumRestarts(numRestarts).setInstanceId(String.valueOf(instanceId));\n             if (!f.getRunning() && runtimeDeathException != null) {\n                 builder.setFailureException(runtimeDeathException.getMessage());\n             }\n            return builder.build();\n         });\n     }\n \n-    public CompletableFuture<String> getFunctionStatusAsJson() {\n-        return this.getFunctionStatus().thenApply(msg -> {\n+    public CompletableFuture<String> getFunctionStatusAsJson(int instanceId) {\n+        return this.getFunctionStatus(instanceId).thenApply(msg -> {\n             try {\n                 return Utils.printJson(msg);\n             } catch (IOException e) {\n@@ -123,7 +132,11 @@ public void join() throws Exception {\n     @Override\n     public void close() {\n         if (null != runtime) {\n-            runtime.stop();\n+            try {\n+                runtime.stop();\n+            } catch (Exception e) {\n+                // Ignore\n+            }\n             runtime = null;\n         }\n         if (processLivenessCheckTimer != null) {",
                "changes": 37,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeSpawner.java"
            },
            {
                "additions": 135,
                "sha": "fe2a88ee8effda5ab4c3d9c75cb44e77bdabfd4d",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeUtils.java",
                "deletions": 0,
                "filename": "pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeUtils.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeUtils.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -0,0 +1,135 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pulsar.functions.runtime;\n+\n+import com.google.protobuf.util.JsonFormat;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.functions.instance.AuthenticationConfig;\n+import org.apache.pulsar.functions.instance.InstanceConfig;\n+import org.apache.pulsar.functions.proto.Function;\n+import org.apache.pulsar.functions.utils.FunctionDetailsUtils;\n+import org.apache.pulsar.functions.utils.functioncache.FunctionCacheEntry;\n+\n+import java.util.*;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+\n+/**\n+ * Util class for common runtime functionality\n+ */\n+@Slf4j\n+class RuntimeUtils {\n+\n+    public static List<String> composeArgs(InstanceConfig instanceConfig,\n+                                           String instanceFile,\n+                                           String logDirectory,\n+                                           String originalCodeFileName,\n+                                           String pulsarServiceUrl,\n+                                           String stateStorageServiceUrl,\n+                                           AuthenticationConfig authConfig,\n+                                           String shardId,\n+                                           Integer grpcPort,\n+                                           Long expectedHealthCheckInterval,\n+                                           String javaLog4jFileName) throws Exception {\n+        List<String> args = new LinkedList<>();\n+        if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.JAVA) {\n+            args.add(\"java\");\n+            args.add(\"-cp\");\n+            args.add(instanceFile);\n+\n+            // Keep the same env property pointing to the Java instance file so that it can be picked up\n+            // by the child process and manually added to classpath\n+            args.add(String.format(\"-D%s=%s\", FunctionCacheEntry.JAVA_INSTANCE_JAR_PROPERTY, instanceFile));\n+            args.add(\"-Dlog4j.configurationFile=\" + javaLog4jFileName);\n+            args.add(\"-Dpulsar.function.log.dir=\" + String.format(\n+                    \"%s/%s\",\n+                    logDirectory,\n+                    FunctionDetailsUtils.getFullyQualifiedName(instanceConfig.getFunctionDetails())));\n+            args.add(\"-Dpulsar.function.log.file=\" + String.format(\n+                    \"%s-%s\",\n+                    instanceConfig.getFunctionDetails().getName(),\n+                    shardId));\n+            if (instanceConfig.getFunctionDetails().getResources() != null) {\n+                Function.Resources resources = instanceConfig.getFunctionDetails().getResources();\n+                if (resources.getRam() != 0) {\n+                    args.add(\"-Xmx\" + String.valueOf(resources.getRam()));\n+                }\n+            }\n+            args.add(JavaInstanceMain.class.getName());\n+            args.add(\"--jar\");\n+            args.add(originalCodeFileName);\n+        } else if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.PYTHON) {\n+            args.add(\"python\");\n+            args.add(instanceFile);\n+            args.add(\"--py\");\n+            args.add(originalCodeFileName);\n+            args.add(\"--logging_directory\");\n+            args.add(logDirectory);\n+            args.add(\"--logging_file\");\n+            args.add(instanceConfig.getFunctionDetails().getName());\n+            // TODO:- Find a platform independent way of controlling memory for a python application\n+        }\n+        args.add(\"--instance_id\");\n+        args.add(shardId);\n+        args.add(\"--function_id\");\n+        args.add(instanceConfig.getFunctionId());\n+        args.add(\"--function_version\");\n+        args.add(instanceConfig.getFunctionVersion());\n+        args.add(\"--function_details\");\n+        args.add(\"'\" + JsonFormat.printer().omittingInsignificantWhitespace().print(instanceConfig.getFunctionDetails()) + \"'\");\n+\n+        args.add(\"--pulsar_serviceurl\");\n+        args.add(pulsarServiceUrl);\n+        if (authConfig != null) {\n+            if (isNotBlank(authConfig.getClientAuthenticationPlugin())\n+                    && isNotBlank(authConfig.getClientAuthenticationParameters())) {\n+                args.add(\"--client_auth_plugin\");\n+                args.add(authConfig.getClientAuthenticationPlugin());\n+                args.add(\"--client_auth_params\");\n+                args.add(authConfig.getClientAuthenticationParameters());\n+            }\n+            args.add(\"--use_tls\");\n+            args.add(Boolean.toString(authConfig.isUseTls()));\n+            args.add(\"--tls_allow_insecure\");\n+            args.add(Boolean.toString(authConfig.isTlsAllowInsecureConnection()));\n+            args.add(\"--hostname_verification_enabled\");\n+            args.add(Boolean.toString(authConfig.isTlsHostnameVerificationEnable()));\n+            if (isNotBlank(authConfig.getTlsTrustCertsFilePath())) {\n+                args.add(\"--tls_trust_cert_path\");\n+                args.add(authConfig.getTlsTrustCertsFilePath());\n+            }\n+        }\n+        args.add(\"--max_buffered_tuples\");\n+        args.add(String.valueOf(instanceConfig.getMaxBufferedTuples()));\n+\n+        args.add(\"--port\");\n+        args.add(String.valueOf(grpcPort));\n+\n+        // state storage configs\n+        if (null != stateStorageServiceUrl\n+                && instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.JAVA) {\n+            args.add(\"--state_storage_serviceurl\");\n+            args.add(stateStorageServiceUrl);\n+        }\n+        args.add(\"--expected_healthcheck_interval\");\n+        args.add(String.valueOf(expectedHealthCheckInterval));\n+        return args;\n+    }\n+}",
                "changes": 135,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeUtils.java"
            },
            {
                "additions": 1,
                "sha": "05cb87ff801456ddd02ca250cc07e8bbebea4f8b",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ThreadRuntime.java",
                "deletions": 1,
                "filename": "pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ThreadRuntime.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ThreadRuntime.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -99,7 +99,7 @@ public void stop() {\n     }\n \n     @Override\n-    public CompletableFuture<FunctionStatus> getFunctionStatus() {\n+    public CompletableFuture<FunctionStatus> getFunctionStatus(int instanceId) {\n         CompletableFuture<FunctionStatus> statsFuture = new CompletableFuture<>();\n         if (!isAlive()) {\n             FunctionStatus.Builder functionStatusBuilder = FunctionStatus.newBuilder();",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ThreadRuntime.java"
            },
            {
                "additions": 2,
                "sha": "dfbbb64efa20442974e129c36485b0e101cf06a8",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ThreadRuntimeFactory.java",
                "deletions": 1,
                "filename": "pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ThreadRuntimeFactory.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ThreadRuntimeFactory.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -52,7 +52,7 @@ public ThreadRuntimeFactory(String threadGroupName, String pulsarServiceUrl, Str\n     }\n \n     @VisibleForTesting\n-    ThreadRuntimeFactory(String threadGroupName, PulsarClient pulsarClient, String storageServiceUrl) {\n+    public ThreadRuntimeFactory(String threadGroupName, PulsarClient pulsarClient, String storageServiceUrl) {\n         this.fnCache = new FunctionCacheManagerImpl();\n         this.threadGroup = new ThreadGroup(threadGroupName);\n         this.pulsarClient = pulsarClient;\n@@ -82,6 +82,7 @@ private static PulsarClient createPulsarClient(String pulsarServiceUrl, Authenti\n     \n     @Override\n     public ThreadRuntime createContainer(InstanceConfig instanceConfig, String jarFile,\n+                                         String originalCodeFileName,\n                                          Long expectedHealthCheckInterval) {\n         return new ThreadRuntime(\n             instanceConfig,",
                "changes": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/ThreadRuntimeFactory.java"
            },
            {
                "additions": 156,
                "sha": "274d9736597ba98d4b57e132eb6659a2dca97ef2",
                "status": "added",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/KubernetesRuntimeTest.java",
                "deletions": 0,
                "filename": "pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/KubernetesRuntimeTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/KubernetesRuntimeTest.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -0,0 +1,156 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pulsar.functions.runtime;\n+\n+import com.google.protobuf.util.JsonFormat;\n+import org.apache.pulsar.functions.instance.InstanceConfig;\n+import org.apache.pulsar.functions.proto.Function;\n+import org.apache.pulsar.functions.proto.Function.ConsumerSpec;\n+import org.apache.pulsar.functions.proto.Function.FunctionDetails;\n+import org.apache.pulsar.functions.utils.FunctionDetailsUtils;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+/**\n+ * Unit test of {@link ThreadRuntime}.\n+ */\n+public class KubernetesRuntimeTest {\n+\n+    private static final String TEST_TENANT = \"tenant\";\n+    private static final String TEST_NAMESPACE = \"namespace\";\n+    private static final String TEST_NAME = \"container\";\n+    private static final Map<String, String> topicsToSerDeClassName = new HashMap<>();\n+    private static final Map<String, ConsumerSpec> topicsToSchema = new HashMap<>();\n+    static {\n+        topicsToSerDeClassName.put(\"persistent://sample/standalone/ns1/test_src\", \"\");\n+        topicsToSchema.put(\"persistent://sample/standalone/ns1/test_src\",\n+                ConsumerSpec.newBuilder().setSerdeClassName(\"\").setIsRegexPattern(false).build());\n+    }\n+\n+    private final KubernetesRuntimeFactory factory;\n+    private final String userJarFile;\n+    private final String javaInstanceJarFile;\n+    private final String pythonInstanceFile;\n+    private final String pulsarServiceUrl;\n+    private final String pulsarAdminUrl;\n+    private final String stateStorageServiceUrl;\n+    private final String logDirectory;\n+\n+    public KubernetesRuntimeTest() throws Exception {\n+        this.userJarFile = \"/Users/user/UserJar.jar\";\n+        this.javaInstanceJarFile = \"/pulsar/instances/java-instance.jar\";\n+        this.pythonInstanceFile = \"/pulsar/instances/python-instance/python_instance_main.py\";\n+        this.pulsarServiceUrl = \"pulsar://localhost:6670\";\n+        this.pulsarAdminUrl = \"http://localhost:8080\";\n+        this.stateStorageServiceUrl = \"bk://localhost:4181\";\n+        this.logDirectory = \"logs/functions\";\n+        this.factory = new KubernetesRuntimeFactory(null, null, null, null,\n+            false, pulsarServiceUrl, pulsarAdminUrl, stateStorageServiceUrl, null);\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() {\n+        this.factory.close();\n+    }\n+\n+    FunctionDetails createFunctionDetails(FunctionDetails.Runtime runtime) {\n+        FunctionDetails.Builder functionDetailsBuilder = FunctionDetails.newBuilder();\n+        functionDetailsBuilder.setRuntime(runtime);\n+        functionDetailsBuilder.setTenant(TEST_TENANT);\n+        functionDetailsBuilder.setNamespace(TEST_NAMESPACE);\n+        functionDetailsBuilder.setName(TEST_NAME);\n+        functionDetailsBuilder.setClassName(\"org.apache.pulsar.functions.utils.functioncache.AddFunction\");\n+        functionDetailsBuilder.setSink(Function.SinkSpec.newBuilder()\n+                .setTopic(TEST_NAME + \"-output\")\n+                .setSerDeClassName(\"org.apache.pulsar.functions.runtime.serde.Utf8Serializer\")\n+                .setClassName(\"org.pulsar.pulsar.TestSink\")\n+                .setTypeClassName(String.class.getName())\n+                .build());\n+        functionDetailsBuilder.setLogTopic(TEST_NAME + \"-log\");\n+        functionDetailsBuilder.setSource(Function.SourceSpec.newBuilder()\n+                .setSubscriptionType(Function.SubscriptionType.FAILOVER)\n+                .putAllInputSpecs(topicsToSchema)\n+                .setClassName(\"org.pulsar.pulsar.TestSource\")\n+                .setTypeClassName(String.class.getName()));\n+        return functionDetailsBuilder.build();\n+    }\n+\n+    InstanceConfig createJavaInstanceConfig(FunctionDetails.Runtime runtime) {\n+        InstanceConfig config = new InstanceConfig();\n+\n+        config.setFunctionDetails(createFunctionDetails(runtime));\n+        config.setFunctionId(java.util.UUID.randomUUID().toString());\n+        config.setFunctionVersion(\"1.0\");\n+        config.setInstanceId(0);\n+        config.setMaxBufferedTuples(1024);\n+\n+        return config;\n+    }\n+\n+    @Test\n+    public void testJavaConstructor() throws Exception {\n+        InstanceConfig config = createJavaInstanceConfig(FunctionDetails.Runtime.JAVA);\n+\n+        KubernetesRuntime container = factory.createContainer(config, userJarFile, userJarFile, 30l);\n+        List<String> args = container.getProcessArgs();\n+        assertEquals(args.size(), 28);\n+        String expectedArgs = \"java -cp \" + javaInstanceJarFile\n+                + \" -Dpulsar.functions.java.instance.jar=\" + javaInstanceJarFile\n+                + \" -Dlog4j.configurationFile=conf/log4j2.yaml \"\n+                + \"-Dpulsar.function.log.dir=\" + logDirectory + \"/\" + FunctionDetailsUtils.getFullyQualifiedName(config.getFunctionDetails())\n+                + \" -Dpulsar.function.log.file=\" + config.getFunctionDetails().getName() + \"-$SHARD_ID\"\n+                + \" org.apache.pulsar.functions.runtime.JavaInstanceMain\"\n+                + \" --jar \" + userJarFile + \" --instance_id \"\n+                + \"$SHARD_ID\" + \" --function_id \" + config.getFunctionId()\n+                + \" --function_version \" + config.getFunctionVersion()\n+                + \" --function_details '\" + JsonFormat.printer().omittingInsignificantWhitespace().print(config.getFunctionDetails())\n+                + \"' --pulsar_serviceurl \" + pulsarServiceUrl\n+                + \" --max_buffered_tuples 1024 --port \" + args.get(23)\n+                + \" --state_storage_serviceurl \" + stateStorageServiceUrl\n+                + \" --expected_healthcheck_interval -1\";\n+        assertEquals(String.join(\" \", args), expectedArgs);\n+    }\n+\n+    @Test\n+    public void testPythonConstructor() throws Exception {\n+        InstanceConfig config = createJavaInstanceConfig(FunctionDetails.Runtime.PYTHON);\n+\n+        KubernetesRuntime container = factory.createContainer(config, userJarFile, userJarFile, 30l);\n+        List<String> args = container.getProcessArgs();\n+        assertEquals(args.size(), 24);\n+        String expectedArgs = \"python \" + pythonInstanceFile\n+                + \" --py \" + userJarFile + \" --logging_directory \"\n+                + logDirectory + \" --logging_file \" + config.getFunctionDetails().getName() + \" --instance_id \"\n+                + \"$SHARD_ID\" + \" --function_id \" + config.getFunctionId()\n+                + \" --function_version \" + config.getFunctionVersion()\n+                + \" --function_details '\" + JsonFormat.printer().omittingInsignificantWhitespace().print(config.getFunctionDetails())\n+                + \"' --pulsar_serviceurl \" + pulsarServiceUrl\n+                + \" --max_buffered_tuples 1024 --port \" + args.get(21)\n+                + \" --expected_healthcheck_interval -1\";\n+        assertEquals(String.join(\" \", args), expectedArgs);\n+    }\n+\n+}",
                "changes": 156,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/KubernetesRuntimeTest.java"
            },
            {
                "additions": 6,
                "sha": "b09b9af49262581215da90f202debe680272a192",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/ProcessRuntimeTest.java",
                "deletions": 6,
                "filename": "pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/ProcessRuntimeTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/ProcessRuntimeTest.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -114,7 +114,7 @@ InstanceConfig createJavaInstanceConfig(FunctionDetails.Runtime runtime) {\n     public void testJavaConstructor() throws Exception {\n         InstanceConfig config = createJavaInstanceConfig(FunctionDetails.Runtime.JAVA);\n \n-        ProcessRuntime container = factory.createContainer(config, userJarFile, 30l);\n+        ProcessRuntime container = factory.createContainer(config, userJarFile, null, 30l);\n         List<String> args = container.getProcessArgs();\n         assertEquals(args.size(), 28);\n         String expectedArgs = \"java -cp \" + javaInstanceJarFile\n@@ -126,8 +126,8 @@ public void testJavaConstructor() throws Exception {\n                 + \" --jar \" + userJarFile + \" --instance_id \"\n                 + config.getInstanceId() + \" --function_id \" + config.getFunctionId()\n                 + \" --function_version \" + config.getFunctionVersion()\n-                + \" --function_details \" + JsonFormat.printer().print(config.getFunctionDetails())\n-                + \" --pulsar_serviceurl \" + pulsarServiceUrl\n+                + \" --function_details '\" + JsonFormat.printer().omittingInsignificantWhitespace().print(config.getFunctionDetails())\n+                + \"' --pulsar_serviceurl \" + pulsarServiceUrl\n                 + \" --max_buffered_tuples 1024 --port \" + args.get(23)\n                 + \" --state_storage_serviceurl \" + stateStorageServiceUrl\n                 + \" --expected_healthcheck_interval 30\";\n@@ -138,16 +138,16 @@ public void testJavaConstructor() throws Exception {\n     public void testPythonConstructor() throws Exception {\n         InstanceConfig config = createJavaInstanceConfig(FunctionDetails.Runtime.PYTHON);\n \n-        ProcessRuntime container = factory.createContainer(config, userJarFile, 30l);\n+        ProcessRuntime container = factory.createContainer(config, userJarFile, null, 30l);\n         List<String> args = container.getProcessArgs();\n         assertEquals(args.size(), 24);\n         String expectedArgs = \"python \" + pythonInstanceFile\n                 + \" --py \" + userJarFile + \" --logging_directory \"\n                 + logDirectory + \"/functions\" + \" --logging_file \" + config.getFunctionDetails().getName() + \" --instance_id \"\n                 + config.getInstanceId() + \" --function_id \" + config.getFunctionId()\n                 + \" --function_version \" + config.getFunctionVersion()\n-                + \" --function_details \" + JsonFormat.printer().print(config.getFunctionDetails())\n-                + \" --pulsar_serviceurl \" + pulsarServiceUrl\n+                + \" --function_details '\" + JsonFormat.printer().omittingInsignificantWhitespace().print(config.getFunctionDetails())\n+                + \"' --pulsar_serviceurl \" + pulsarServiceUrl\n                 + \" --max_buffered_tuples 1024 --port \" + args.get(21)\n                 + \" --expected_healthcheck_interval 30\";\n         assertEquals(String.join(\" \", args), expectedArgs);",
                "changes": 12,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/ProcessRuntimeTest.java"
            },
            {
                "additions": 11,
                "sha": "52af6897c7c8c252252d54aa29226e3d51381888",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionActioner.java",
                "deletions": 5,
                "filename": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionActioner.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionActioner.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -138,26 +138,31 @@ public void startFunction(FunctionRuntimeInfo functionRuntimeInfo) throws Except\n         FunctionDetails.Builder functionDetails = FunctionDetails.newBuilder(functionMetaData.getFunctionDetails());\n         log.info(\"{}/{}/{}-{} Starting function ...\", functionDetails.getTenant(), functionDetails.getNamespace(),\n                 functionDetails.getName(), instanceId);\n-        File pkgFile = null;\n+        String packageFile;\n \n         String pkgLocation = functionMetaData.getPackageLocation().getPackagePath();\n         boolean isPkgUrlProvided = isFunctionPackageUrlSupported(pkgLocation);\n \n         if (isPkgUrlProvided && pkgLocation.startsWith(FILE)) {\n             URL url = new URL(pkgLocation);\n-            pkgFile = new File(url.toURI());\n+            File pkgFile = new File(url.toURI());\n+            packageFile = pkgFile.getAbsolutePath();\n         } else if (isFunctionCodeBuiltin(functionDetails)) {\n-            pkgFile = getBuiltinArchive(functionDetails);\n+            File pkgFile = getBuiltinArchive(functionDetails);\n+            packageFile = pkgFile.getAbsolutePath();\n+        } else if (runtimeFactory.externallyManaged()) {\n+            packageFile = pkgLocation;\n         } else {\n             File pkgDir = new File(\n                     workerConfig.getDownloadDirectory(),\n                     getDownloadPackagePath(functionMetaData, instanceId));\n             pkgDir.mkdirs();\n \n-            pkgFile = new File(\n+            File pkgFile = new File(\n                     pkgDir,\n                     new File(FunctionDetailsUtils.getDownloadFileName(functionMetaData.getFunctionDetails(), functionMetaData.getPackageLocation())).getName());\n             downloadFile(pkgFile, isPkgUrlProvided, functionMetaData, instanceId);\n+            packageFile = pkgFile.getAbsolutePath();\n         }\n \n         InstanceConfig instanceConfig = new InstanceConfig();\n@@ -172,7 +177,8 @@ public void startFunction(FunctionRuntimeInfo functionRuntimeInfo) throws Except\n         log.info(\"{}/{}/{}-{} start process with instance config {}\", functionDetails.getTenant(), functionDetails.getNamespace(),\n                 functionDetails.getName(), instanceId, instanceConfig);\n \n-        RuntimeSpawner runtimeSpawner = new RuntimeSpawner(instanceConfig, pkgFile.getAbsolutePath(),\n+        RuntimeSpawner runtimeSpawner = new RuntimeSpawner(instanceConfig, packageFile,\n+                functionMetaData.getPackageLocation().getOriginalFileName(),\n                 runtimeFactory, workerConfig.getInstanceLivenessCheckFreqMs());\n \n         functionRuntimeInfo.setRuntimeSpawner(runtimeSpawner);",
                "changes": 16,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionActioner.java"
            },
            {
                "additions": 94,
                "sha": "992e5db23c493019d2d2d348a36f64bd31ea2ecd",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionRuntimeManager.java",
                "deletions": 31,
                "filename": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionRuntimeManager.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionRuntimeManager.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -18,7 +18,6 @@\n  */\n package org.apache.pulsar.functions.worker;\n \n-import java.io.IOException;\n import java.net.URI;\n import java.util.Collection;\n import java.util.HashMap;\n@@ -32,31 +31,26 @@\n import java.util.stream.Collectors;\n \n import javax.ws.rs.WebApplicationException;\n-import javax.ws.rs.client.Client;\n-import javax.ws.rs.client.ClientBuilder;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.Response.Status;\n import javax.ws.rs.core.UriBuilder;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.distributedlog.api.namespace.Namespace;\n import org.apache.pulsar.client.admin.PulsarAdmin;\n import org.apache.pulsar.client.admin.PulsarAdminException;\n-import org.apache.pulsar.client.api.MessageId;\n import org.apache.pulsar.common.policies.data.ErrorData;\n import org.apache.pulsar.functions.instance.AuthenticationConfig;\n import org.apache.pulsar.functions.proto.Function.Assignment;\n import org.apache.pulsar.functions.proto.InstanceCommunication;\n-import org.apache.pulsar.functions.runtime.ProcessRuntimeFactory;\n-import org.apache.pulsar.functions.runtime.Runtime;\n-import org.apache.pulsar.functions.runtime.RuntimeFactory;\n-import org.apache.pulsar.functions.runtime.RuntimeSpawner;\n-import org.apache.pulsar.functions.runtime.ThreadRuntimeFactory;\n+import org.apache.pulsar.functions.runtime.*;\n \n import com.google.common.annotations.VisibleForTesting;\n \n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.functions.runtime.Runtime;\n \n /**\n  * This class managers all aspects of functions assignments and running of function assignments for this worker\n@@ -85,6 +79,7 @@\n \n     private FunctionActioner functionActioner;\n \n+    @Getter\n     private RuntimeFactory runtimeFactory;\n \n     private MembershipManager membershipManager;\n@@ -123,8 +118,19 @@ public FunctionRuntimeManager(WorkerConfig workerConfig, WorkerService workerSer\n                     workerConfig.getProcessContainerFactory().getJavaInstanceJarLocation(),\n                     workerConfig.getProcessContainerFactory().getPythonInstanceLocation(),\n                     workerConfig.getProcessContainerFactory().getLogDirectory());\n+        } else if (workerConfig.getKubernetesContainerFactory() != null){\n+            this.runtimeFactory = new KubernetesRuntimeFactory(\n+                    workerConfig.getKubernetesContainerFactory().getK8Uri(),\n+                    workerConfig.getKubernetesContainerFactory().getJobNamespace(),\n+                    workerConfig.getKubernetesContainerFactory().getPulsarDockerImageName(),\n+                    workerConfig.getKubernetesContainerFactory().getPulsarRootDir(),\n+                    workerConfig.getKubernetesContainerFactory().getSubmittingInsidePod(),\n+                    StringUtils.isEmpty(workerConfig.getKubernetesContainerFactory().getPulsarServiceUrl()) ? workerConfig.getPulsarServiceUrl() : workerConfig.getKubernetesContainerFactory().getPulsarServiceUrl(),\n+                    StringUtils.isEmpty(workerConfig.getKubernetesContainerFactory().getPulsarAdminUrl()) ? workerConfig.getPulsarWebServiceUrl() : workerConfig.getKubernetesContainerFactory().getPulsarAdminUrl(),\n+                    workerConfig.getStateStorageServiceUrl(),\n+                    authConfig);\n         } else {\n-            throw new RuntimeException(\"Either Thread or Process Container Factory need to be set\");\n+            throw new RuntimeException(\"Either Thread, Process or Kubernetes Container Factory need to be set\");\n         }\n \n         this.actionQueue = new LinkedBlockingQueue<>();\n@@ -236,7 +242,12 @@ public synchronized void removeAssignments(Collection<Assignment> assignments) {\n      */\n     public InstanceCommunication.FunctionStatus getFunctionInstanceStatus(String tenant, String namespace,\n             String functionName, int instanceId, URI uri) {\n-        Assignment assignment = this.findAssignment(tenant, namespace, functionName, instanceId);\n+        Assignment assignment;\n+        if (runtimeFactory.externallyManaged()) {\n+            assignment = this.findAssignment(tenant, namespace, functionName, -1);\n+        } else {\n+            assignment = this.findAssignment(tenant, namespace, functionName, instanceId);\n+        }\n         final String assignedWorkerId = assignment.getWorkerId();\n         final String workerId = this.workerConfig.getWorkerId();\n         \n@@ -257,7 +268,7 @@ public synchronized void removeAssignments(Collection<Assignment> assignments) {\n             if (runtimeSpawner != null) {\n                 try {\n                     InstanceCommunication.FunctionStatus.Builder functionStatusBuilder = InstanceCommunication.FunctionStatus\n-                            .newBuilder(functionRuntimeInfo.getRuntimeSpawner().getFunctionStatus().get());\n+                            .newBuilder(functionRuntimeInfo.getRuntimeSpawner().getFunctionStatus(instanceId).get());\n                     functionStatusBuilder.setWorkerId(assignedWorkerId);\n                     functionStatus = functionStatusBuilder.build();\n                 } catch (InterruptedException | ExecutionException e) {\n@@ -302,6 +313,10 @@ public synchronized void removeAssignments(Collection<Assignment> assignments) {\n \n     public Response stopFunctionInstance(String tenant, String namespace, String functionName, int instanceId,\n             boolean restart, URI uri) throws Exception {\n+        if (runtimeFactory.externallyManaged()) {\n+            return Response.status(Status.NOT_IMPLEMENTED).type(MediaType.APPLICATION_JSON)\n+                    .entity(new ErrorData(\"Externally managed schedulers can't do per instance stop\")).build();\n+        }\n         Assignment assignment = this.findAssignment(tenant, namespace, functionName, instanceId);\n         final String fullFunctionName = String.format(\"%s/%s/%s/%s\", tenant, namespace, functionName, instanceId);\n         if (assignment == null) {\n@@ -343,7 +358,8 @@ public Response stopFunctionInstances(String tenant, String namespace, String fu\n             return Response.status(Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON)\n                     .entity(new ErrorData(fullFunctionName + \" has not been assigned yet\")).build();\n         }\n-        for (Assignment assignment : assignments) {\n+        if (runtimeFactory.externallyManaged()) {\n+            Assignment assignment = assignments.iterator().next();\n             final String assignedWorkerId = assignment.getWorkerId();\n             final String workerId = this.workerConfig.getWorkerId();\n             String fullyQualifiedInstanceId = Utils.getFullyQualifiedInstanceId(assignment.getInstance());\n@@ -361,14 +377,43 @@ public Response stopFunctionInstances(String tenant, String namespace, String fu\n                     if (log.isDebugEnabled()) {\n                         log.debug(\"[{}] has not been assigned yet\", fullyQualifiedInstanceId);\n                     }\n-                    continue;\n+                    return Response.status(Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON)\n+                            .entity(new ErrorData(fullFunctionName + \" has not been assigned yet\")).build();\n                 }\n                 if (restart) {\n-                    this.functionAdmin.functions().restartFunction(tenant, namespace, functionName,\n-                            assignment.getInstance().getInstanceId());\n+                    this.functionAdmin.functions().restartFunction(tenant, namespace, functionName);\n                 } else {\n-                    this.functionAdmin.functions().stopFunction(tenant, namespace, functionName,\n-                            assignment.getInstance().getInstanceId());\n+                    this.functionAdmin.functions().stopFunction(tenant, namespace, functionName);\n+                }\n+            }\n+        } else {\n+            for (Assignment assignment : assignments) {\n+                final String assignedWorkerId = assignment.getWorkerId();\n+                final String workerId = this.workerConfig.getWorkerId();\n+                String fullyQualifiedInstanceId = Utils.getFullyQualifiedInstanceId(assignment.getInstance());\n+                if (assignedWorkerId.equals(workerId)) {\n+                    stopFunction(fullyQualifiedInstanceId, restart);\n+                } else {\n+                    List<WorkerInfo> workerInfoList = this.membershipManager.getCurrentMembership();\n+                    WorkerInfo workerInfo = null;\n+                    for (WorkerInfo entry : workerInfoList) {\n+                        if (assignment.getWorkerId().equals(entry.getWorkerId())) {\n+                            workerInfo = entry;\n+                        }\n+                    }\n+                    if (workerInfo == null) {\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] has not been assigned yet\", fullyQualifiedInstanceId);\n+                        }\n+                        continue;\n+                    }\n+                    if (restart) {\n+                        this.functionAdmin.functions().restartFunction(tenant, namespace, functionName,\n+                                assignment.getInstance().getInstanceId());\n+                    } else {\n+                        this.functionAdmin.functions().stopFunction(tenant, namespace, functionName,\n+                                assignment.getInstance().getInstanceId());\n+                    }\n                 }\n             }\n         }\n@@ -379,7 +424,11 @@ public Response stopFunctionInstances(String tenant, String namespace, String fu\n      * It stops all functions instances owned by current worker\n      * @throws Exception\n      */\n-    public void stopAllOwnedFunctions() throws Exception {\n+    public void stopAllOwnedFunctions() {\n+        if (runtimeFactory.externallyManaged()) {\n+            log.warn(\"Will not stop any functions since they are externally managed\");\n+            return;\n+        }\n         final String workerId = this.workerConfig.getWorkerId();\n         Map<String, Assignment> assignments = workerIdToAssignments.get(workerId);\n         if (assignments != null) {\n@@ -401,7 +450,7 @@ private void stopFunction(String fullyQualifiedInstanceId, boolean restart) thro\n             this.functionActioner.stopFunction(functionRuntimeInfo);\n             try {\n                 if(restart) {\n-                    this.functionActioner.startFunction(functionRuntimeInfo);    \n+                    this.functionActioner.startFunction(functionRuntimeInfo);\n                 }\n             } catch (Exception ex) {\n                 log.info(\"{} Error re-starting function\", fullyQualifiedInstanceId, ex);\n@@ -429,24 +478,38 @@ private void stopFunction(String fullyQualifiedInstanceId, boolean restart) thro\n             return functionStatusListBuilder.build();\n         }\n \n-        for (Assignment assignment : assignments) {\n+        if (runtimeFactory.externallyManaged()) {\n+            Assignment assignment = assignments.iterator().next();\n             boolean isOwner = this.workerConfig.getWorkerId().equals(assignment.getWorkerId());\n-            InstanceCommunication.FunctionStatus functionStatus = isOwner\n-                    ? (getFunctionInstanceStatus(tenant, namespace, functionName,\n-                            assignment.getInstance().getInstanceId(), null))\n-                    : this.functionAdmin.functions().getFunctionStatus(\n-                            assignment.getInstance().getFunctionMetaData().getFunctionDetails().getTenant(),\n-                            assignment.getInstance().getFunctionMetaData().getFunctionDetails().getNamespace(),\n-                            assignment.getInstance().getFunctionMetaData().getFunctionDetails().getName(),\n-                            assignment.getInstance().getInstanceId());\n-            functionStatusListBuilder.addFunctionStatusList(functionStatus);\n+            if (isOwner) {\n+                int parallelism = assignment.getInstance().getFunctionMetaData().getFunctionDetails().getParallelism();\n+                for (int i = 0; i < parallelism; ++i) {\n+                    InstanceCommunication.FunctionStatus functionStatus = getFunctionInstanceStatus(tenant, namespace,\n+                            functionName, i, null);\n+                    functionStatusListBuilder.addFunctionStatusList(functionStatus);\n+                }\n+            } else {\n+                return this.functionAdmin.functions().getFunctionStatus(tenant, namespace, functionName);\n+            }\n+        } else {\n+            for (Assignment assignment : assignments) {\n+                boolean isOwner = this.workerConfig.getWorkerId().equals(assignment.getWorkerId());\n+                InstanceCommunication.FunctionStatus functionStatus = isOwner\n+                        ? (getFunctionInstanceStatus(tenant, namespace, functionName,\n+                        assignment.getInstance().getInstanceId(), null))\n+                        : this.functionAdmin.functions().getFunctionStatus(\n+                        assignment.getInstance().getFunctionMetaData().getFunctionDetails().getTenant(),\n+                        assignment.getInstance().getFunctionMetaData().getFunctionDetails().getNamespace(),\n+                        assignment.getInstance().getFunctionMetaData().getFunctionDetails().getName(),\n+                        assignment.getInstance().getInstanceId());\n+                functionStatusListBuilder.addFunctionStatusList(functionStatus);\n+            }\n         }\n         return functionStatusListBuilder.build();\n     }\n \n     /**\n      * Process an assignment update from the assignment topic\n-     * @param messageId the message id of the update assignment\n      * @param newAssignment the assignment\n      */\n     public synchronized void processAssignment(Assignment newAssignment) {",
                "changes": 125,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionRuntimeManager.java"
            },
            {
                "additions": 1,
                "sha": "03b9aead87e789c298f2a7c5bcca781ddbcb2d0d",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java",
                "deletions": 1,
                "filename": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -221,7 +221,7 @@ public void checkFailures(FunctionMetaDataManager functionMetaDataManager,\n                     .map(assignment -> assignment.getInstance())\n                     .collect(Collectors.toSet());\n \n-            Set<Function.Instance> instances = new HashSet<>(SchedulerManager.computeInstances(functionMetaData));\n+            Set<Function.Instance> instances = new HashSet<>(SchedulerManager.computeInstances(functionMetaData, functionRuntimeManager.getRuntimeFactory().externallyManaged()));\n \n             for (Function.Instance instance : instances) {\n                 if (!assignedInstances.contains(instance)) {",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java"
            },
            {
                "additions": 16,
                "sha": "608b2fcd4ad2856114b87e24676ccb38abebec7a",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/SchedulerManager.java",
                "deletions": 7,
                "filename": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/SchedulerManager.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/SchedulerManager.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -126,7 +126,7 @@ public void invokeScheduler() {\n                 .stream().map(workerInfo -> workerInfo.getWorkerId()).collect(Collectors.toList());\n \n         List<FunctionMetaData> allFunctions = this.functionMetaDataManager.getAllFunctionMetaData();\n-        Map<String, Function.Instance> allInstances = computeAllInstances(allFunctions);\n+        Map<String, Function.Instance> allInstances = computeAllInstances(allFunctions, functionRuntimeManager.getRuntimeFactory().externallyManaged());\n         Map<String, Map<String, Assignment>> workerIdToAssignments = this.functionRuntimeManager\n                 .getCurrentAssignments();\n         //delete assignments of functions and instances that don't exist anymore\n@@ -207,23 +207,32 @@ private void publishNewAssignment(Assignment assignment, boolean deleted) {\n         }\n     }\n \n-    public static Map<String, Function.Instance> computeAllInstances(List<FunctionMetaData> allFunctions) {\n+    public static Map<String, Function.Instance> computeAllInstances(List<FunctionMetaData> allFunctions,\n+                                                                     boolean externallyManagedRuntime) {\n         Map<String, Function.Instance> functionInstances = new HashMap<>();\n         for (FunctionMetaData functionMetaData : allFunctions) {\n-            for (Function.Instance instance : computeInstances(functionMetaData)) {\n+            for (Function.Instance instance : computeInstances(functionMetaData, externallyManagedRuntime)) {\n                 functionInstances.put(Utils.getFullyQualifiedInstanceId(instance), instance);\n             }\n         }\n         return functionInstances;\n     }\n \n-    public static List<Function.Instance> computeInstances(FunctionMetaData functionMetaData) {\n+    public static List<Function.Instance> computeInstances(FunctionMetaData functionMetaData,\n+                                                           boolean externallyManagedRuntime) {\n         List<Function.Instance> functionInstances = new LinkedList<>();\n-        int instances = functionMetaData.getFunctionDetails().getParallelism();\n-        for (int i = 0; i < instances; i++) {\n+        if (!externallyManagedRuntime) {\n+            int instances = functionMetaData.getFunctionDetails().getParallelism();\n+            for (int i = 0; i < instances; i++) {\n+                functionInstances.add(Function.Instance.newBuilder()\n+                        .setFunctionMetaData(functionMetaData)\n+                        .setInstanceId(i)\n+                        .build());\n+            }\n+        } else {\n             functionInstances.add(Function.Instance.newBuilder()\n                     .setFunctionMetaData(functionMetaData)\n-                    .setInstanceId(i)\n+                    .setInstanceId(-1)\n                     .build());\n         }\n         return functionInstances;",
                "changes": 23,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/SchedulerManager.java"
            },
            {
                "additions": 16,
                "sha": "81e9fd22ca8f876ee1a448f445e91960a0d3d577",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/WorkerConfig.java",
                "deletions": 0,
                "filename": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/WorkerConfig.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/WorkerConfig.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -125,6 +125,22 @@\n     }\n     private ProcessContainerFactory processContainerFactory;\n \n+    @Data\n+    @Setter\n+    @Getter\n+    @EqualsAndHashCode\n+    @ToString\n+    public static class KubernetesContainerFactory {\n+        private String k8Uri;\n+        private String jobNamespace;\n+        private String pulsarDockerImageName;\n+        private String pulsarRootDir;\n+        private Boolean submittingInsidePod;\n+        private String pulsarServiceUrl;\n+        private String pulsarAdminUrl;\n+    }\n+    private KubernetesContainerFactory kubernetesContainerFactory;\n+\n     public String getFunctionMetadataTopic() {\n         return String.format(\"persistent://%s/%s\", pulsarFunctionsNamespace, functionMetadataTopicName);\n     }",
                "changes": 16,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/WorkerConfig.java"
            },
            {
                "additions": 9,
                "sha": "b92ae2747465c496649a24198f112b960c894fbb",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/rest/api/FunctionsImpl.java",
                "deletions": 3,
                "filename": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/rest/api/FunctionsImpl.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/rest/api/FunctionsImpl.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -369,6 +369,13 @@ public Response getFunctionInstanceStatus(final String tenant, final String name\n             return Response.status(Status.NOT_FOUND).type(MediaType.APPLICATION_JSON)\n                     .entity(new ErrorData(String.format(\"Function %s doesn't exist\", functionName))).build();\n         }\n+        FunctionMetaData functionMetaData = functionMetaDataManager.getFunctionMetaData(tenant, namespace, functionName);\n+        int instanceIdInt = Integer.parseInt(instanceId);\n+        if (instanceIdInt < 0 || instanceIdInt >= functionMetaData.getFunctionDetails().getParallelism()) {\n+            log.error(\"instanceId in getFunctionStatus out of bounds @ /{}/{}/{}\", tenant, namespace, functionName);\n+            return Response.status(Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON)\n+                    .entity(new ErrorData(String.format(\"Invalid InstanceId\"))).build();\n+        }\n \n         FunctionRuntimeManager functionRuntimeManager = worker().getFunctionRuntimeManager();\n         FunctionStatus functionStatus = null;\n@@ -751,7 +758,7 @@ public Response uploadFunction(final InputStream uploadedInputStream, final Stri\n         try {\n             log.info(\"Uploading function package to {}\", path);\n \n-            Utils.uploadToBookeeper(worker().getDlogNamespace(), uploadedInputStream, Codec.encode(path));\n+            Utils.uploadToBookeeper(worker().getDlogNamespace(), uploadedInputStream, path);\n         } catch (IOException e) {\n             log.error(\"Error uploading file {}\", path, e);\n             return Response.serverError().type(MediaType.APPLICATION_JSON).entity(new ErrorData(e.getMessage()))\n@@ -778,7 +785,7 @@ public void write(final OutputStream output) throws IOException {\n                         throw new IllegalArgumentException(\"invalid file url path: \" + path);\n                     }\n                 } else {\n-                    Utils.downloadFromBookkeeper(worker().getDlogNamespace(), output, Codec.encode(path));\n+                    Utils.downloadFromBookkeeper(worker().getDlogNamespace(), output, path);\n                 }\n             }\n         }).build();\n@@ -799,7 +806,6 @@ private void validateGetFunctionInstanceRequestParams(String tenant, String name\n         validateGetFunctionRequestParams(tenant, namespace, functionName);\n         if (instanceId == null) {\n             throw new IllegalArgumentException(\"Function Instance Id is not provided\");\n-\n         }\n     }\n ",
                "changes": 12,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/rest/api/FunctionsImpl.java"
            },
            {
                "additions": 1,
                "sha": "bf4b4aafa533468397ce629155417dbc02ac5fea",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/FunctionActionerTest.java",
                "deletions": 1,
                "filename": "pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/FunctionActionerTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/FunctionActionerTest.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -103,7 +103,7 @@ public void testStartFunctionWithPkgUrl() throws Exception {\n \n         RuntimeFactory factory = mock(RuntimeFactory.class);\n         Runtime runtime = mock(Runtime.class);\n-        doReturn(runtime).when(factory).createContainer(any(), any(), any());\n+        doReturn(runtime).when(factory).createContainer(any(), any(), any(), any());\n         doNothing().when(runtime).start();\n         Namespace dlogNamespace = mock(Namespace.class);\n         final String exceptionMsg = \"dl namespace not-found\";",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/FunctionActionerTest.java"
            },
            {
                "additions": 22,
                "sha": "649cd3ef7353cf2863831b08b0ddab1140b9ec1a",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/SchedulerManagerTest.java",
                "deletions": 0,
                "filename": "pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/SchedulerManagerTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/SchedulerManagerTest.java?ref=d0858065b586344cb7b1b8a5a32e694bc6c004f4",
                "patch": "@@ -54,6 +54,7 @@\n import org.apache.pulsar.functions.proto.Function;\n import org.apache.pulsar.functions.proto.Function.Assignment;\n import org.apache.pulsar.functions.proto.Request;\n+import org.apache.pulsar.functions.runtime.ThreadRuntimeFactory;\n import org.apache.pulsar.functions.worker.scheduler.RoundRobinScheduler;\n import org.mockito.Mockito;\n import org.mockito.invocation.Invocation;\n@@ -153,6 +154,9 @@ public void testSchedule() throws Exception {\n         functionMetaDataList.add(function1);\n         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();\n \n+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory(\"dummy\", null, \"dummy\");\n+        doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();\n+\n         // set assignments\n         Function.Assignment assignment1 = Function.Assignment.newBuilder()\n                 .setWorkerId(\"worker-1\")\n@@ -240,6 +244,9 @@ public void testAddingFunctions() throws Exception {\n         functionMetaDataList.add(function2);\n         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();\n \n+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory(\"dummy\", null, \"dummy\");\n+        doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();\n+\n         // set assignments\n         Function.Assignment assignment1 = Function.Assignment.newBuilder()\n                 .setWorkerId(\"worker-1\")\n@@ -297,6 +304,9 @@ public void testDeletingFunctions() throws Exception {\n         functionMetaDataList.add(function1);\n         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();\n \n+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory(\"dummy\", null, \"dummy\");\n+        doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();\n+\n         // set assignments\n         Function.Assignment assignment1 = Function.Assignment.newBuilder()\n                 .setWorkerId(\"worker-1\")\n@@ -359,6 +369,9 @@ public void testScalingUp() throws Exception {\n         functionMetaDataList.add(function2);\n         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();\n \n+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory(\"dummy\", null, \"dummy\");\n+        doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();\n+\n         // set assignments\n         Function.Assignment assignment1 = Function.Assignment.newBuilder()\n                 .setWorkerId(\"worker-1\")\n@@ -464,6 +477,9 @@ public void testScalingDown() throws Exception {\n         functionMetaDataList.add(function2);\n         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();\n \n+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory(\"dummy\", null, \"dummy\");\n+        doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();\n+\n         // set assignments\n         Function.Assignment assignment1 = Function.Assignment.newBuilder()\n                 .setWorkerId(\"worker-1\")\n@@ -586,6 +602,9 @@ public void testHeartbeatFunction() throws Exception {\n         functionMetaDataList.add(function2);\n         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();\n \n+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory(\"dummy\", null, \"dummy\");\n+        doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();\n+\n         Map<String, Map<String, Function.Assignment>> currentAssignments = new HashMap<>();\n         Map<String, Function.Assignment> assignmentEntry1 = new HashMap<>();\n \n@@ -637,6 +656,9 @@ public void testUpdate() throws Exception {\n         functionMetaDataList.add(function2);\n         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();\n \n+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory(\"dummy\", null, \"dummy\");\n+        doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();\n+\n         // set assignments\n         Function.Assignment assignment1 = Function.Assignment.newBuilder()\n                 .setWorkerId(\"worker-1\")",
                "changes": 22,
                "blob_url": "https://github.com/apache/pulsar/blob/d0858065b586344cb7b1b8a5a32e694bc6c004f4/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/SchedulerManagerTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "Enable Pulsar Functions to be deployed on a kubernetes cluster (#1950)\n\n* Support submitting pulsar functions to kubernetes\r\n\r\n* Adjusted pom\r\n\r\n* Added helper function\r\n\r\n* Added port to instance config\r\n\r\n* Made things public\r\n\r\n* More fixes\r\n\r\n* Made changes to kubernetes controller\r\n\r\n* refactored jobname\r\n\r\n* Removed resource\r\n\r\n* Bumped to 2.1.0\r\n\r\n* Fix compilation bug\r\n\r\n* Fix compile bugs\r\n\r\n* Fixed compile\r\n\r\n* Compile fix\r\n\r\n* Some remant\r\n\r\n* Unnecessary imports\r\n\r\n* Added dep\r\n\r\n* Default values\r\n\r\n* Fix\r\n\r\n* Use kubectl proxy stuff\r\n\r\n* Corrected the path of pulsar-amin\r\n\r\n* Fixed bugs\r\n\r\n* No longer required\r\n\r\n* Download first\r\n\r\n* make shard id work\r\n\r\n* Removed using runtime\r\n\r\n* Fixed npe\r\n\r\n* Corrected command name\r\n\r\n* Fixed bugs\r\n\r\n* Removed commented sections\r\n\r\n* Uncommented some stuff\r\n\r\n* Address Jerry's comments\r\n\r\n* Change to 2.2\r\n\r\n* Use non camel case style for passing arguments\r\n\r\n* removed cmdline changes\r\n\r\n* Second set of changes\r\n\r\n* Next set of canges\r\n\r\n* no such module\r\n\r\n* Code complete\r\n\r\n* Fixed logic wrt packages\r\n\r\n* Do not stop externally managed functions upon exit\r\n\r\n* Modified to use AppV1 instead of beta\r\n\r\n* use lower case\r\n\r\n* Unpretty the function details\r\n\r\n* If the job exists, don't flag as error\r\n\r\n* Give ability to submit from inside a pod\r\n\r\n* remove encode/decode\r\n\r\n* Escape function details\r\n\r\n* Working copy with getstatus and stop. Restart needs some work\r\n\r\n* removed unused function\r\n\r\n* Fixed bugs\r\n\r\n* Fixed unittest\r\n\r\n* Fixed unittest\r\n\r\n* Fixed unittest\r\n\r\n* Fixed tests\r\n\r\n* Reverted conf changes\r\n\r\n* Minor nit\r\n\r\n* Exlcude logback\r\n\r\n* Updated comments\r\n\r\n* Changed jobname to include namespace/tenant\r\n\r\n* Fix unittest\r\n\r\n* Updated licenses\r\n\r\n* Use 2.0.0 instead of beta1",
        "commit": "https://github.com/apache/pulsar/commit/d0858065b586344cb7b1b8a5a32e694bc6c004f4"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/7f63ee985fd4bdae300d6e6b08f4c7e1eeae2f01",
        "bug_id": "pulsar_68",
        "file": [
            {
                "additions": 8,
                "sha": "b71a2ac9421bbcb03e9e678720fd43fae6b6186b",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/PulsarService.java",
                "deletions": 2,
                "filename": "pulsar-broker/src/main/java/com/yahoo/pulsar/broker/PulsarService.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/PulsarService.java?ref=09b6bb0c2e39e1418b4422c138bd0865cf8950bc",
                "patch": "@@ -95,6 +95,8 @@\n     private LocalZooKeeperConnectionService localZooKeeperConnectionProvider;\n     private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(20,\n             new DefaultThreadFactory(\"pulsar\"));\n+    private final ScheduledExecutorService cacheExecutor = Executors.newScheduledThreadPool(10,\n+            new DefaultThreadFactory(\"zk-cache-callback\"));\n     private final OrderedSafeExecutor orderedExecutor = new OrderedSafeExecutor(8, \"pulsar-ordered\");\n     private ScheduledExecutorService loadManagerExecutor = null;\n     private ScheduledFuture<?> loadReportTask = null;\n@@ -382,10 +384,10 @@ private void startZkCacheService() throws PulsarServerException {\n \n         LOG.info(\"starting configuration cache service\");\n \n-        this.localZkCache = new LocalZooKeeperCache(getZkClient(), getOrderedExecutor(), this.executor);\n+        this.localZkCache = new LocalZooKeeperCache(getZkClient(), getOrderedExecutor(), this.cacheExecutor);\n         this.globalZkCache = new GlobalZooKeeperCache(getZooKeeperClientFactory(),\n                 (int) config.getZooKeeperSessionTimeoutMillis(), config.getGlobalZookeeperServers(),\n-                getOrderedExecutor(), this.executor);\n+                getOrderedExecutor(), this.cacheExecutor);\n         try {\n             this.globalZkCache.start();\n         } catch (IOException e) {\n@@ -533,6 +535,10 @@ public ScheduledExecutorService getExecutor() {\n         return executor;\n     }\n \n+    public ScheduledExecutorService getCacheExecutor() {\n+        return cacheExecutor;\n+    }\n+\n     public ScheduledExecutorService getLoadManagerExecutor() {\n         return loadManagerExecutor;\n     }",
                "changes": 10,
                "blob_url": "https://github.com/apache/pulsar/blob/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/PulsarService.java"
            },
            {
                "additions": 6,
                "sha": "00b678d63cac8882a91b3b543257b09ff50e75ce",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/service/ServerCnx.java",
                "deletions": 6,
                "filename": "pulsar-broker/src/main/java/com/yahoo/pulsar/broker/service/ServerCnx.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/service/ServerCnx.java?ref=09b6bb0c2e39e1418b4422c138bd0865cf8950bc",
                "patch": "@@ -155,11 +155,11 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E\n     \n     @Override\n     protected void handleLookup(CommandLookupTopic lookup) {\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Received Lookup from {}\", remoteAddress);\n-        }\n         final long requestId = lookup.getRequestId();\n         final String topic = lookup.getTopic();\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[{}] Received Lookup from {} for {}\", topic, remoteAddress, requestId);\n+        }\n         final Semaphore lookupSemaphore = service.getLookupRequestSemaphore();\n         if (lookupSemaphore.tryAcquire()) {\n             lookupDestinationAsync(getBrokerService().pulsar(), DestinationName.get(topic), lookup.getAuthoritative(),\n@@ -187,11 +187,11 @@ protected void handleLookup(CommandLookupTopic lookup) {\n \n     @Override\n     protected void handlePartitionMetadataRequest(CommandPartitionedTopicMetadata partitionMetadata) {\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Received PartitionMetadataLookup from {}\", remoteAddress);\n-        }\n         final long requestId = partitionMetadata.getRequestId();\n         final String topic = partitionMetadata.getTopic();\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[{}] Received PartitionMetadataLookup from {} for {}\", topic, remoteAddress, requestId);\n+        }\n         final Semaphore lookupSemaphore = service.getLookupRequestSemaphore();\n         if (lookupSemaphore.tryAcquire()) {\n             getPartitionedTopicMetadata(getBrokerService().pulsar(), getRole(), DestinationName.get(topic))",
                "changes": 12,
                "blob_url": "https://github.com/apache/pulsar/blob/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-broker/src/main/java/com/yahoo/pulsar/broker/service/ServerCnx.java"
            },
            {
                "additions": 15,
                "sha": "ee4232871e2562966786fc7d36a8cc31fdd6b9c5",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-broker/src/test/java/com/yahoo/pulsar/broker/cache/ResourceQuotaCacheTest.java",
                "deletions": 2,
                "filename": "pulsar-broker/src/test/java/com/yahoo/pulsar/broker/cache/ResourceQuotaCacheTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/com/yahoo/pulsar/broker/cache/ResourceQuotaCacheTest.java?ref=09b6bb0c2e39e1418b4422c138bd0865cf8950bc",
                "patch": "@@ -19,8 +19,12 @@\n import static org.mockito.Mockito.mock;\n import static org.testng.Assert.assertEquals;\n \n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.apache.zookeeper.MockZooKeeper;\n+import org.testng.annotations.AfterMethod;\n import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n@@ -41,19 +45,28 @@\n     private ZooKeeperCache zkCache;\n     private LocalZooKeeperCacheService localCache;\n     private NamespaceBundleFactory bundleFactory;\n+    private OrderedSafeExecutor executor;\n+    private ScheduledExecutorService scheduledExecutor;\n \n     @BeforeMethod\n     public void setup() throws Exception {\n         pulsar = mock(PulsarService.class);\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(1, \"test\");\n-        zkCache = new LocalZooKeeperCache(MockZooKeeper.newInstance(), executor, null);\n+        executor = new OrderedSafeExecutor(1, \"test\");\n+        scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n+        zkCache = new LocalZooKeeperCache(MockZooKeeper.newInstance(), executor, scheduledExecutor);\n         localCache = new LocalZooKeeperCacheService(zkCache, null);\n         bundleFactory = new NamespaceBundleFactory(pulsar, Hashing.crc32());\n \n         doReturn(zkCache).when(pulsar).getLocalZkCache();\n         doReturn(localCache).when(pulsar).getLocalZkCacheService();\n     }\n \n+    @AfterMethod\n+    public void teardown() {\n+        executor.shutdown();\n+        scheduledExecutor.shutdown();\n+    }\n+\n     @Test\n     public void testGetSetDefaultQuota() throws Exception {\n         ResourceQuotaCache cache = new ResourceQuotaCache(zkCache);",
                "changes": 17,
                "blob_url": "https://github.com/apache/pulsar/blob/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-broker/src/test/java/com/yahoo/pulsar/broker/cache/ResourceQuotaCacheTest.java"
            },
            {
                "additions": 6,
                "sha": "d7381288ce3eacbde292348723c61488d50c9df5",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-broker/src/test/java/com/yahoo/pulsar/broker/namespace/OwnershipCacheTest.java",
                "deletions": 1,
                "filename": "pulsar-broker/src/test/java/com/yahoo/pulsar/broker/namespace/OwnershipCacheTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/com/yahoo/pulsar/broker/namespace/OwnershipCacheTest.java?ref=09b6bb0c2e39e1418b4422c138bd0865cf8950bc",
                "patch": "@@ -29,6 +29,8 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n \n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.apache.zookeeper.KeeperException;\n@@ -60,6 +62,7 @@\n     private NamespaceService nsService;\n     private BrokerService brokerService;\n     private OrderedSafeExecutor executor;\n+    private ScheduledExecutorService scheduledExecutor;\n \n     @BeforeMethod\n     public void setup() throws Exception {\n@@ -68,7 +71,8 @@ public void setup() throws Exception {\n         pulsar = mock(PulsarService.class);\n         config = mock(ServiceConfiguration.class);\n         executor = new OrderedSafeExecutor(1, \"test\");\n-        zkCache = new LocalZooKeeperCache(MockZooKeeper.newInstance(), executor, null);\n+        scheduledExecutor = Executors.newScheduledThreadPool(2);\n+        zkCache = new LocalZooKeeperCache(MockZooKeeper.newInstance(), executor, scheduledExecutor);\n         localCache = new LocalZooKeeperCacheService(zkCache, null);\n         bundleFactory = new NamespaceBundleFactory(pulsar, Hashing.crc32());\n         nsService = mock(NamespaceService.class);\n@@ -88,6 +92,7 @@ public void setup() throws Exception {\n     @AfterMethod\n     public void teardown() throws Exception {\n         executor.shutdown();\n+        scheduledExecutor.shutdown();\n     }\n \n     @Test",
                "changes": 7,
                "blob_url": "https://github.com/apache/pulsar/blob/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-broker/src/test/java/com/yahoo/pulsar/broker/namespace/OwnershipCacheTest.java"
            },
            {
                "additions": 4,
                "sha": "6d50b83b7863de6a660d13522e64312ec77bc478",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-discovery-service/src/main/java/com/yahoo/pulsar/discovery/service/BrokerDiscoveryProvider.java",
                "deletions": 1,
                "filename": "pulsar-discovery-service/src/main/java/com/yahoo/pulsar/discovery/service/BrokerDiscoveryProvider.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-discovery-service/src/main/java/com/yahoo/pulsar/discovery/service/BrokerDiscoveryProvider.java?ref=09b6bb0c2e39e1418b4422c138bd0865cf8950bc",
                "patch": "@@ -41,6 +41,8 @@\n import com.yahoo.pulsar.zookeeper.GlobalZooKeeperCache;\n import com.yahoo.pulsar.zookeeper.ZooKeeperClientFactory;\n \n+import io.netty.util.concurrent.DefaultThreadFactory;\n+\n /**\n  * Maintains available active broker list and returns next active broker in round-robin for discovery service.\n  *\n@@ -52,7 +54,8 @@\n     private final AtomicInteger counter = new AtomicInteger();\n \n     private final OrderedSafeExecutor orderedExecutor = new OrderedSafeExecutor(4, \"pulsar-discovery-ordered\");\n-    private final ScheduledExecutorService scheduledExecutorScheduler = Executors.newScheduledThreadPool(1);\n+    private final ScheduledExecutorService scheduledExecutorScheduler = Executors.newScheduledThreadPool(4,\n+            new DefaultThreadFactory(\"pulsar-discovery\"));\n \n     private static final String PARTITIONED_TOPIC_PATH_ZNODE = \"partitioned-topics\";\n ",
                "changes": 5,
                "blob_url": "https://github.com/apache/pulsar/blob/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-discovery-service/src/main/java/com/yahoo/pulsar/discovery/service/BrokerDiscoveryProvider.java"
            },
            {
                "additions": 9,
                "sha": "8913ca143d5455e5f44bc2fafc011ecebafaf618",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-discovery-service/src/main/java/com/yahoo/pulsar/discovery/service/web/ZookeeperCacheLoader.java",
                "deletions": 2,
                "filename": "pulsar-discovery-service/src/main/java/com/yahoo/pulsar/discovery/service/web/ZookeeperCacheLoader.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-discovery-service/src/main/java/com/yahoo/pulsar/discovery/service/web/ZookeeperCacheLoader.java?ref=09b6bb0c2e39e1418b4422c138bd0865cf8950bc",
                "patch": "@@ -19,6 +19,8 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n \n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.slf4j.Logger;\n@@ -33,6 +35,8 @@\n import com.yahoo.pulsar.zookeeper.ZooKeeperClientFactory;\n import com.yahoo.pulsar.zookeeper.ZooKeeperDataCache;\n \n+import io.netty.util.concurrent.DefaultThreadFactory;\n+\n /**\n  * Connects with ZooKeeper and sets watch to listen changes for active broker list.\n  *\n@@ -47,7 +51,9 @@\n \n     private volatile List<LoadReport> availableBrokers;\n \n-    private final OrderedSafeExecutor orderedExecutor = new OrderedSafeExecutor(8, \"pulsar-discovery\");\n+    private final OrderedSafeExecutor orderedExecutor = new OrderedSafeExecutor(8, \"pulsar-discovery-ordered-cache\");\n+    private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(8,\n+            new DefaultThreadFactory(\"pulsar-discovery-cache\"));\n \n     public static final String LOADBALANCE_BROKERS_ROOT = \"/loadbalance/brokers\";\n \n@@ -66,7 +72,7 @@ public ZookeeperCacheLoader(ZooKeeperClientFactory zkClientFactory, String zooke\n         });\n \n         this.localZkCache = new LocalZooKeeperCache(localZkConnectionSvc.getLocalZooKeeper(), this.orderedExecutor,\n-                null/* cache uses ForkJoinPool if provided scheduler is null to load data-async */);\n+                executor);\n         localZkConnectionSvc.start(exitCode -> {\n             try {\n                 localZkCache.getZooKeeper().close();\n@@ -106,6 +112,7 @@ public ZooKeeperCache getLocalZkCache() {\n     @Override\n     public void close() {\n         orderedExecutor.shutdown();\n+        executor.shutdown();\n     }\n \n     private void updateBrokerList(Set<String> brokerNodes) throws Exception {",
                "changes": 11,
                "blob_url": "https://github.com/apache/pulsar/blob/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-discovery-service/src/main/java/com/yahoo/pulsar/discovery/service/web/ZookeeperCacheLoader.java"
            },
            {
                "additions": 36,
                "sha": "6923ad3b8614809440ed6cded4da3d77d68fc302",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-zookeeper-utils/src/main/java/com/yahoo/pulsar/zookeeper/ZooKeeperCache.java",
                "deletions": 18,
                "filename": "pulsar-zookeeper-utils/src/main/java/com/yahoo/pulsar/zookeeper/ZooKeeperCache.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-zookeeper-utils/src/main/java/com/yahoo/pulsar/zookeeper/ZooKeeperCache.java?ref=09b6bb0c2e39e1418b4422c138bd0865cf8950bc",
                "patch": "@@ -29,6 +29,7 @@\n import java.util.concurrent.RejectedExecutionException;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n@@ -86,6 +87,8 @@\n     protected AtomicReference<ZooKeeper> zkSession = new AtomicReference<ZooKeeper>(null);\n \n     public ZooKeeperCache(ZooKeeper zkSession, OrderedSafeExecutor executor, ScheduledExecutorService scheduledExecutor) {\n+        checkNotNull(executor);\n+        checkNotNull(scheduledExecutor);\n         this.executor = executor;\n         this.scheduledExecutor = scheduledExecutor;\n         this.zkSession.set(zkSession);\n@@ -166,6 +169,10 @@ private void invalidateExists(String path) {\n         existsCache.invalidate(path);\n     }\n \n+    public void asyncInvalidate(String path) {\n+        scheduledExecutor.submit(() -> invalidate(path));\n+    }\n+\n     public void invalidate(final String path) {\n         invalidateData(path);\n         invalidateChildren(path);\n@@ -222,6 +229,7 @@ public Boolean call() throws Exception {\n         getDataAsync(path, this, deserializer).thenAccept(data -> {\n             future.complete(data.map(e -> e.getKey()));\n         }).exceptionally(ex -> {\n+            asyncInvalidate(path);\n             if (ex.getCause() instanceof NoNodeException) {\n                 future.complete(Optional.empty());\n             } else {\n@@ -249,18 +257,22 @@ public Boolean call() throws Exception {\n         try {\n             return getDataAsync(path, watcher, deserializer).get(cacheTimeOutInSec, TimeUnit.SECONDS);\n         } catch (ExecutionException e) {\n+            asyncInvalidate(path);\n             Throwable cause = e.getCause();\n             if (cause instanceof KeeperException) {\n                 throw (KeeperException) cause;\n             } else if (cause instanceof InterruptedException) {\n                 LOG.warn(\"Time-out while fetching {} zk-data in {} sec\", path, cacheTimeOutInSec);\n-                invalidate(path);\n                 throw (InterruptedException) cause;\n             } else if (cause instanceof RuntimeException) {\n                 throw (RuntimeException) cause;\n             } else {\n                 throw new RuntimeException(cause);\n             }\n+        } catch (TimeoutException e) {\n+            LOG.warn(\"Time-out while fetching {} zk-data in {} sec\", path, cacheTimeOutInSec);\n+            asyncInvalidate(path);\n+            throw e;\n         }\n     }\n \n@@ -275,24 +287,30 @@ public Boolean call() throws Exception {\n             // Return a future for the z-node to be fetched from ZK\n             CompletableFuture<Entry<Object, Stat>> zkFuture = new CompletableFuture<>();\n \n-            this.zkSession.get().getData(path, watcher, (rc, path1, ctx, content, stat) -> {\n-                Executor exec = scheduledExecutor != null ? scheduledExecutor : executor;\n-                if (rc == Code.OK.intValue()) {\n-                    try {\n-                        T obj = deserializer.deserialize(path, content);\n-                        // avoid using the zk-client thread to process the result\n-                        exec.execute(() -> zkFuture.complete(new SimpleImmutableEntry<Object, Stat>(obj, stat)));\n-                    } catch (Exception e) {\n-                        exec.execute(() -> zkFuture.completeExceptionally(e));\n+            // Broker doesn't restart on global-zk session lost: so handling unexpected exception\n+            try {\n+                this.zkSession.get().getData(path, watcher, (rc, path1, ctx, content, stat) -> {\n+                    Executor exec = scheduledExecutor != null ? scheduledExecutor : executor;\n+                    if (rc == Code.OK.intValue()) {\n+                        try {\n+                            T obj = deserializer.deserialize(path, content);\n+                            // avoid using the zk-client thread to process the result\n+                            exec.execute(() -> zkFuture.complete(new SimpleImmutableEntry<Object, Stat>(obj, stat)));\n+                        } catch (Exception e) {\n+                            exec.execute(() -> zkFuture.completeExceptionally(e));\n+                        }\n+                    } else if (rc == Code.NONODE.intValue()) {\n+                        // Return null values for missing z-nodes, as this is not \"exceptional\" condition\n+                        exec.execute(() -> zkFuture.complete(null));\n+                    } else {\n+                        exec.execute(() -> zkFuture.completeExceptionally(KeeperException.create(rc)));\n                     }\n-                } else if (rc == Code.NONODE.intValue()) {\n-                    // Return null values for missing z-nodes, as this is not \"exceptional\" condition\n-                    exec.execute(() -> zkFuture.complete(null));\n-                } else {\n-                    exec.execute(() -> zkFuture.completeExceptionally(KeeperException.create(rc)));\n-                }\n-            }, null);\n-\n+                }, null);                \n+            } catch (Exception e) {\n+                LOG.warn(\"Failed to access zkSession for {} {}\", path, e.getMessage(), e);\n+                zkFuture.completeExceptionally(e);\n+            }\n+            \n             return zkFuture;\n         }).thenAccept(result -> {\n             if (result != null) {",
                "changes": 54,
                "blob_url": "https://github.com/apache/pulsar/blob/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-zookeeper-utils/src/main/java/com/yahoo/pulsar/zookeeper/ZooKeeperCache.java"
            },
            {
                "additions": 2,
                "sha": "67989a85f6afd75f8d539b21eb6c70fd26e9257e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-zookeeper-utils/src/main/java/com/yahoo/pulsar/zookeeper/ZooKeeperDataCache.java",
                "deletions": 0,
                "filename": "pulsar-zookeeper-utils/src/main/java/com/yahoo/pulsar/zookeeper/ZooKeeperDataCache.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-zookeeper-utils/src/main/java/com/yahoo/pulsar/zookeeper/ZooKeeperDataCache.java?ref=09b6bb0c2e39e1418b4422c138bd0865cf8950bc",
                "patch": "@@ -24,6 +24,7 @@\n \n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.KeeperException.NoNodeException;\n import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -61,6 +62,7 @@ public ZooKeeperDataCache(final ZooKeeperCache cache) {\n         cache.getDataAsync(path, this, this).thenAccept(entry -> {\n             future.complete(entry.map(Entry::getKey));\n         }).exceptionally(ex -> {\n+            cache.asyncInvalidate(path);\n             future.completeExceptionally(ex);\n             return null;\n         });",
                "changes": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-zookeeper-utils/src/main/java/com/yahoo/pulsar/zookeeper/ZooKeeperDataCache.java"
            },
            {
                "additions": 3,
                "sha": "a663e3c0fb01d78dfa6935d05530c88d03fe34a6",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-zookeeper-utils/src/test/java/com/yahoo/pulsar/zookeeper/ZkBookieRackAffinityMappingTest.java",
                "deletions": 3,
                "filename": "pulsar-zookeeper-utils/src/test/java/com/yahoo/pulsar/zookeeper/ZkBookieRackAffinityMappingTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-zookeeper-utils/src/test/java/com/yahoo/pulsar/zookeeper/ZkBookieRackAffinityMappingTest.java?ref=09b6bb0c2e39e1418b4422c138bd0865cf8950bc",
                "patch": "@@ -77,7 +77,7 @@ public void testBasic() throws Exception {\n         // Case1: ZKCache is given\n         ZkBookieRackAffinityMapping mapping1 = new ZkBookieRackAffinityMapping();\n         ClientConfiguration bkClientConf1 = new ClientConfiguration();\n-        bkClientConf1.setProperty(ZooKeeperCache.ZK_CACHE_INSTANCE, new ZooKeeperCache(localZkc, null, null) {\n+        bkClientConf1.setProperty(ZooKeeperCache.ZK_CACHE_INSTANCE, new ZooKeeperCache(localZkc) {\n         });\n         mapping1.setConf(bkClientConf1);\n         List<String> racks1 = mapping1.resolve(Lists.newArrayList(BOOKIE1, BOOKIE2, BOOKIE3));\n@@ -104,7 +104,7 @@ public void testBasic() throws Exception {\n     public void testNoBookieInfo() throws Exception {\n         ZkBookieRackAffinityMapping mapping = new ZkBookieRackAffinityMapping();\n         ClientConfiguration bkClientConf = new ClientConfiguration();\n-        bkClientConf.setProperty(ZooKeeperCache.ZK_CACHE_INSTANCE, new ZooKeeperCache(localZkc, null, null) {\n+        bkClientConf.setProperty(ZooKeeperCache.ZK_CACHE_INSTANCE, new ZooKeeperCache(localZkc) {\n         });\n         mapping.setConf(bkClientConf);\n         List<String> racks = mapping.resolve(Lists.newArrayList(BOOKIE1, BOOKIE2, BOOKIE3));\n@@ -158,7 +158,7 @@ public void testBookieInfoChange() throws Exception {\n \n         ZkBookieRackAffinityMapping mapping = new ZkBookieRackAffinityMapping();\n         ClientConfiguration bkClientConf = new ClientConfiguration();\n-        bkClientConf.setProperty(ZooKeeperCache.ZK_CACHE_INSTANCE, new ZooKeeperCache(localZkc, null, null) {\n+        bkClientConf.setProperty(ZooKeeperCache.ZK_CACHE_INSTANCE, new ZooKeeperCache(localZkc) {\n         });\n         mapping.setConf(bkClientConf);\n         List<String> racks = mapping.resolve(Lists.newArrayList(BOOKIE1, BOOKIE2, BOOKIE3));",
                "changes": 6,
                "blob_url": "https://github.com/apache/pulsar/blob/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-zookeeper-utils/src/test/java/com/yahoo/pulsar/zookeeper/ZkBookieRackAffinityMappingTest.java"
            },
            {
                "additions": 3,
                "sha": "04cb5951ce593fbb1c0ed3d85242edb02a021fb2",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-zookeeper-utils/src/test/java/com/yahoo/pulsar/zookeeper/ZkIsolatedBookieEnsemblePlacementPolicyTest.java",
                "deletions": 3,
                "filename": "pulsar-zookeeper-utils/src/test/java/com/yahoo/pulsar/zookeeper/ZkIsolatedBookieEnsemblePlacementPolicyTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-zookeeper-utils/src/test/java/com/yahoo/pulsar/zookeeper/ZkIsolatedBookieEnsemblePlacementPolicyTest.java?ref=09b6bb0c2e39e1418b4422c138bd0865cf8950bc",
                "patch": "@@ -106,7 +106,7 @@ public void testBasic() throws Exception {\n \n         ZkIsolatedBookieEnsemblePlacementPolicy isolationPolicy = new ZkIsolatedBookieEnsemblePlacementPolicy();\n         ClientConfiguration bkClientConf = new ClientConfiguration();\n-        bkClientConf.setProperty(ZooKeeperCache.ZK_CACHE_INSTANCE, new ZooKeeperCache(localZkc, null, null) {\n+        bkClientConf.setProperty(ZooKeeperCache.ZK_CACHE_INSTANCE, new ZooKeeperCache(localZkc) {\n         });\n         bkClientConf.setProperty(ZkIsolatedBookieEnsemblePlacementPolicy.ISOLATION_BOOKIE_GROUPS, isolationGroups);\n         isolationPolicy.initialize(bkClientConf);\n@@ -176,7 +176,7 @@ public void testBasic() throws Exception {\n     public void testNoBookieInfo() throws Exception {\n         ZkIsolatedBookieEnsemblePlacementPolicy isolationPolicy = new ZkIsolatedBookieEnsemblePlacementPolicy();\n         ClientConfiguration bkClientConf = new ClientConfiguration();\n-        bkClientConf.setProperty(ZooKeeperCache.ZK_CACHE_INSTANCE, new ZooKeeperCache(localZkc, null, null) {\n+        bkClientConf.setProperty(ZooKeeperCache.ZK_CACHE_INSTANCE, new ZooKeeperCache(localZkc) {\n         });\n         bkClientConf.setProperty(ZkIsolatedBookieEnsemblePlacementPolicy.ISOLATION_BOOKIE_GROUPS, isolationGroups);\n         isolationPolicy.initialize(bkClientConf);\n@@ -296,7 +296,7 @@ public void testNoIsolationGroup() throws Exception {\n \n         ZkIsolatedBookieEnsemblePlacementPolicy isolationPolicy = new ZkIsolatedBookieEnsemblePlacementPolicy();\n         ClientConfiguration bkClientConf = new ClientConfiguration();\n-        bkClientConf.setProperty(ZooKeeperCache.ZK_CACHE_INSTANCE, new ZooKeeperCache(localZkc, null, null) {\n+        bkClientConf.setProperty(ZooKeeperCache.ZK_CACHE_INSTANCE, new ZooKeeperCache(localZkc) {\n         });\n         isolationPolicy.initialize(bkClientConf);\n         isolationPolicy.onClusterChanged(writableBookies, readOnlyBookies);",
                "changes": 6,
                "blob_url": "https://github.com/apache/pulsar/blob/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-zookeeper-utils/src/test/java/com/yahoo/pulsar/zookeeper/ZkIsolatedBookieEnsemblePlacementPolicyTest.java"
            },
            {
                "additions": 104,
                "sha": "71e7cd3096a8c84118aad6a7ad820f9efbcda41e",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-zookeeper-utils/src/test/java/com/yahoo/pulsar/zookeeper/ZookeeperCacheTest.java",
                "deletions": 5,
                "filename": "pulsar-zookeeper-utils/src/test/java/com/yahoo/pulsar/zookeeper/ZookeeperCacheTest.java",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-zookeeper-utils/src/test/java/com/yahoo/pulsar/zookeeper/ZookeeperCacheTest.java?ref=09b6bb0c2e39e1418b4422c138bd0865cf8950bc",
                "patch": "@@ -16,6 +16,7 @@\n package com.yahoo.pulsar.zookeeper;\n \n import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n import static org.testng.Assert.assertFalse;\n import static org.testng.Assert.fail;\n import static org.testng.AssertJUnit.assertNotNull;\n@@ -33,6 +34,7 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.bookkeeper.mledger.util.Pair;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.MockZooKeeper;\n@@ -67,7 +69,9 @@ void teardown() throws Exception {\n \n     @Test\n     void testSimpleCache() throws Exception {\n-        ZooKeeperCache zkCacheService = new LocalZooKeeperCache(zkClient, null, null /* no executors in unit test */);\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(1, \"test\");\n+        ScheduledExecutorService scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n+        ZooKeeperCache zkCacheService = new LocalZooKeeperCache(zkClient, executor, scheduledExecutor);\n         ZooKeeperDataCache<String> zkCache = new ZooKeeperDataCache<String>(zkCacheService) {\n             @Override\n             public String deserialize(String key, byte[] content) throws Exception {\n@@ -101,14 +105,18 @@ public String deserialize(String key, byte[] content) throws Exception {\n         } catch (Exception e) {\n             // Ok\n         }\n+        executor.shutdown();\n+        scheduledExecutor.shutdown();\n     }\n \n     @Test\n     void testChildrenCache() throws Exception {\n         OrderedSafeExecutor executor = new OrderedSafeExecutor(1, \"test\");\n+        ScheduledExecutorService scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n+        \n         zkClient.create(\"/test\", new byte[0], null, null);\n \n-        ZooKeeperCache zkCacheService = new LocalZooKeeperCache(zkClient, executor, null);\n+        ZooKeeperCache zkCacheService = new LocalZooKeeperCache(zkClient, executor, scheduledExecutor);\n         ZooKeeperChildrenCache cache = new ZooKeeperChildrenCache(zkCacheService, \"/test\");\n \n         // Create callback counter\n@@ -154,14 +162,19 @@ void testChildrenCache() throws Exception {\n         }\n \n         assertEquals(notificationCount.get(), 3);\n+        executor.shutdown();\n+        scheduledExecutor.shutdown();\n     }\n \n     @Test\n     void testExistsCache() throws Exception {\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(1, \"test\");\n+        ScheduledExecutorService scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n+        \n         // Check existence after creation of the node\n         zkClient.create(\"/test\", new byte[0], null, null);\n         Thread.sleep(20);\n-        ZooKeeperCache zkCacheService = new LocalZooKeeperCache(zkClient, null /* no executor in unit test */, null);\n+        ZooKeeperCache zkCacheService = new LocalZooKeeperCache(zkClient, executor, scheduledExecutor);\n         boolean exists = zkCacheService.exists(\"/test\");\n         Assert.assertTrue(exists, \"/test should exists in the cache\");\n \n@@ -170,15 +183,20 @@ void testExistsCache() throws Exception {\n         Thread.sleep(20);\n         boolean shouldNotExist = zkCacheService.exists(\"/test\");\n         Assert.assertFalse(shouldNotExist, \"/test should not exist in the cache\");\n+        executor.shutdown();\n+        scheduledExecutor.shutdown();\n     }\n \n     @Test\n     void testInvalidateCache() throws Exception {\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(1, \"test\");\n+        ScheduledExecutorService scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n+        \n         zkClient.create(\"/test\", new byte[0], null, null);\n         zkClient.create(\"/test/c1\", new byte[0], null, null);\n         zkClient.create(\"/test/c2\", new byte[0], null, null);\n         Thread.sleep(20);\n-        ZooKeeperCache zkCacheService = new LocalZooKeeperCache(zkClient, null /* no executor in unit test */, null);\n+        ZooKeeperCache zkCacheService = new LocalZooKeeperCache(zkClient, executor, scheduledExecutor);\n         boolean exists = zkCacheService.exists(\"/test\");\n         Assert.assertTrue(exists, \"/test should exists in the cache\");\n \n@@ -203,6 +221,8 @@ void testInvalidateCache() throws Exception {\n         assertNotNull(zkCacheService.getChildren(\"/test\"));\n         zkCacheService.invalidateRoot(\"/test\");\n         assertNull(zkCacheService.getChildrenIfPresent(\"/test\"));\n+        executor.shutdown();\n+        scheduledExecutor.shutdown();\n     }\n \n     @Test\n@@ -304,6 +324,7 @@ public String deserialize(String key, byte[] content) throws Exception {\n \n         zkCacheService.close();\n         executor.shutdown();\n+        scheduledExecutor.shutdown();\n \n         // Update shouldn't happen after the last check\n         assertEquals(notificationCount.get(), 1);\n@@ -317,11 +338,13 @@ public String deserialize(String key, byte[] content) throws Exception {\n      */\n     @Test(timeOut = 2000)\n     void testZkCallbackThreadStuck() throws Exception {\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(1, \"test\");\n+        ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(2);\n         ExecutorService zkExecutor = Executors.newSingleThreadExecutor(new DefaultThreadFactory(\"mockZk\"));\n         // add readOpDelayMs so, main thread will not serve zkCacahe-returned future and let zkExecutor-thread handle\n         // callback-result process\n         MockZooKeeper zkClient = MockZooKeeper.newInstance(zkExecutor, 100);\n-        ZooKeeperCache zkCacheService = new LocalZooKeeperCache(zkClient, null /* no executors in unit test */, null);\n+        ZooKeeperCache zkCacheService = new LocalZooKeeperCache(zkClient, executor, scheduledExecutor);\n         ZooKeeperDataCache<String> zkCache = new ZooKeeperDataCache<String>(zkCacheService) {\n             @Override\n             public String deserialize(String key, byte[] content) throws Exception {\n@@ -349,5 +372,81 @@ public String deserialize(String key, byte[] content) throws Exception {\n         });\n \n         latch.await();\n+        executor.shutdown();\n+        zkExecutor.shutdown();\n+        scheduledExecutor.shutdown();\n+    }\n+    \n+    /**\n+     * <pre>\n+     * Verifies that if {@link ZooKeeperCache} fails to fetch data into the cache then \n+     * (1) it invalidates failed future so, next time it helps to get fresh data from zk\n+     * (2) handles zk.getData() unexpected exception if zkSession is lost\n+     * </pre>\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testInvalidateCacheOnFailure() throws Exception {\n+        ExecutorService zkExecutor = Executors.newSingleThreadExecutor(new DefaultThreadFactory(\"mockZk\"));\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(1, \"test\");\n+        ScheduledExecutorService scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n+        // add readOpDelayMs so, main thread will not serve zkCacahe-returned future and let zkExecutor-thread handle\n+        // callback-result process\n+        MockZooKeeper zkClient = MockZooKeeper.newInstance(zkExecutor, 100);\n+        ZooKeeperCache zkCacheService = new LocalZooKeeperCache(zkClient, executor, scheduledExecutor);\n+\n+        final AtomicInteger count = new AtomicInteger(0);\n+        ZooKeeperDataCache<String> zkCache = new ZooKeeperDataCache<String>(zkCacheService) {\n+            @Override\n+            public String deserialize(String key, byte[] content) throws Exception {\n+                if (count.getAndIncrement() == 0) {\n+                    throw new NullPointerException(\"data is null\");\n+                } else {\n+                    return new String(content);\n+                }\n+            }\n+        };\n+\n+        String value = \"test\";\n+        String key1 = \"/zkDesrializationExceptionTest\";\n+        String key2 = \"/zkSessionExceptionTest\";\n+        zkClient.create(key1, value.getBytes(), null, null);\n+        zkClient.create(key2, value.getBytes(), null, null);\n+\n+        // (1) deserialization will fail so, result should be exception\n+        try {\n+            zkCache.getAsync(key1).get();\n+            fail(\"it should have failed with NPE\");\n+        } catch (Exception e) {\n+            assertTrue(e.getCause() instanceof NullPointerException);\n+        }\n+\n+        // (2) sleep to let cache to be invalidated async\n+        Thread.sleep(1000);\n+        // (3) now, cache should be invalidate failed-future and should refetch the data\n+        assertEquals(zkCache.getAsync(key1).get().get(), value);\n+\n+        // (4) make zk-session invalid\n+        ZooKeeper zkSession = zkCacheService.zkSession.get();\n+        zkCacheService.zkSession.set(null);\n+\n+        try {\n+            zkCache.getAsync(key2).get();\n+            fail(\"it should have failed with NPE\");\n+        } catch (Exception e) {\n+            assertTrue(e.getCause() instanceof NullPointerException);\n+        }\n+\n+        // global-Zk session is connected now\n+        zkCacheService.zkSession.set(zkSession);\n+        // (5) sleep to let cache to be invalidated async\n+        Thread.sleep(1000);\n+        // (6) now, cache should be invalidate failed-future and should refetch the data\n+        assertEquals(zkCache.getAsync(key1).get().get(), value);\n+        zkExecutor.shutdown();\n+        executor.shutdown();\n+        scheduledExecutor.shutdown();\n+\n     }\n }",
                "changes": 109,
                "blob_url": "https://github.com/apache/pulsar/blob/09b6bb0c2e39e1418b4422c138bd0865cf8950bc/pulsar-zookeeper-utils/src/test/java/com/yahoo/pulsar/zookeeper/ZookeeperCacheTest.java"
            }
        ],
        "repo": "pulsar",
        "message": "handle zkCache failure: invalidate cache and zk-getData failure (#377)\n\n* handle zkCache failure: invalidate cache and zk-getData failure\r\n\r\n* introduce separate executor to serve zkcache callback\r\n\r\n* add executor to discovery service\r\n\r\n* remove testing npe\r\n\r\n* add assetion on zkCache executor parameter and update tests\r\n\r\n* update executor thread in testcase for intermittent failure",
        "commit": "https://github.com/apache/pulsar/commit/09b6bb0c2e39e1418b4422c138bd0865cf8950bc"
    },
    {
        "parent": "https://github.com/apache/pulsar/commit/caba91c92bd8289c40eeab2d5d167540db8be16d",
        "bug_id": "pulsar_69",
        "file": [
            {
                "additions": 4,
                "sha": "91e8e73adae3ecb712aa3716642b0aaddec5ee1d",
                "status": "modified",
                "raw_url": "https://github.com/apache/pulsar/raw/4136b40031ba9d10d4e558e11809fdcd23f510ff/pom.xml",
                "deletions": 4,
                "filename": "pom.xml",
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pom.xml?ref=4136b40031ba9d10d4e558e11809fdcd23f510ff",
                "patch": "@@ -93,7 +93,7 @@ flexible messaging model and an intuitive client API.</description>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n \n-    <bookkeeper.version>4.3.1.42-yahoo</bookkeeper.version>\n+    <bookkeeper.version>4.3.1.45-yahoo</bookkeeper.version>\n \n     <netty.version>4.0.40.Final</netty.version>\n     <storm.version>0.9.5</storm.version>\n@@ -103,7 +103,7 @@ flexible messaging model and an intuitive client API.</description>\n \n   <dependencyManagement>\n     <dependencies>\n-    \n+\n       <dependency>\n         <groupId>org.asynchttpclient</groupId>\n         <artifactId>async-http-client</artifactId>\n@@ -139,7 +139,7 @@ flexible messaging model and an intuitive client API.</description>\n         <artifactId>powermock-module-testng</artifactId>\n         <version>1.6.5</version>\n       </dependency>\n-      \n+\n       <dependency>\n     \t<groupId>com.googlecode.jmockit</groupId>\n     \t<artifactId>jmockit</artifactId>\n@@ -310,7 +310,7 @@ flexible messaging model and an intuitive client API.</description>\n         <artifactId>jersey-container-servlet-core</artifactId>\n         <version>2.23.2</version>\n       </dependency>\n-      \n+\n       <dependency>\n         <groupId>org.glassfish.jersey.containers</groupId>\n         <artifactId>jersey-container-servlet</artifactId>",
                "changes": 8,
                "blob_url": "https://github.com/apache/pulsar/blob/4136b40031ba9d10d4e558e11809fdcd23f510ff/pom.xml"
            }
        ],
        "repo": "pulsar",
        "message": "Updated to BK-4.3.1.45-yahoo (#127)\n\nChanges included:\r\n * [a25b53] Removed unused SortedLruCache\r\n * [74cd2f] Removed unused DbLedgerStorage configuration keys\r\n * [fb279e] Reorder read operations based on Bookie availability\r\n * [d203c2] DataSketches metrics provider\r\n * [17ab66] Catch IndexOutOfBoundsException when reading entry log index map\r\n * [270b69] Fixed NPE when accessing readonly bookie list",
        "commit": "https://github.com/apache/pulsar/commit/4136b40031ba9d10d4e558e11809fdcd23f510ff"
    }
]