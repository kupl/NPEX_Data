{
    "myfaces_0e8e23a": {
        "bug_id": "myfaces_0e8e23a",
        "commit": "https://github.com/apache/myfaces/commit/0e8e23aeb9ffcdd9bc71a54bfa51684d73636162",
        "file": [
            {
                "additions": 95,
                "blob_url": "https://github.com/apache/myfaces/blob/0e8e23aeb9ffcdd9bc71a54bfa51684d73636162/shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java",
                "changes": 95,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java?ref=0e8e23aeb9ffcdd9bc71a54bfa51684d73636162",
                "deletions": 0,
                "filename": "shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java",
                "patch": "@@ -339,6 +339,101 @@ public static String getStringValue(FacesContext facesContext,\n             throw ex;\n         }\n     }\n+    \n+    public static String getStringFromSubmittedValueOrLocalValueReturnNull(FacesContext facesContext,\n+            UIComponent component)\n+    {\n+        try\n+        {\n+            if (!(component instanceof ValueHolder))\n+            {\n+                throw new IllegalArgumentException(\"Component : \"\n+                        + getPathToComponent(component)\n+                        + \"is not a ValueHolder\");\n+            }\n+\n+            if (component instanceof EditableValueHolder)\n+            {\n+                Object submittedValue = ((EditableValueHolder) component)\n+                        .getSubmittedValue();\n+                if (submittedValue != null)\n+                {\n+                    if (log.isLoggable(Level.FINE))\n+                        log.fine(\"returning 1 '\" + submittedValue + \"'\");\n+                    return submittedValue.toString();\n+                }\n+            }\n+\n+            Object value;\n+\n+            if (component instanceof EditableValueHolder)\n+            {\n+\n+                EditableValueHolder holder = (EditableValueHolder) component;\n+\n+                if (holder.isLocalValueSet())\n+                {\n+                    value = holder.getLocalValue();\n+                }\n+                else\n+                {\n+                    value = getValue(component);\n+                }\n+            }\n+            else\n+            {\n+                value = getValue(component);\n+            }\n+\n+            Converter converter = ((ValueHolder) component).getConverter();\n+            if (converter == null && value != null)\n+            {\n+\n+                try\n+                {\n+                    converter = facesContext.getApplication().createConverter(\n+                            value.getClass());\n+                    if (log.isLoggable(Level.FINE))\n+                        log.fine(\"the created converter is \" + converter);\n+                }\n+                catch (FacesException e)\n+                {\n+                    log.log(Level.SEVERE, \"No converter for class \"\n+                            + value.getClass().getName()\n+                            + \" found (component id=\" + component.getId()\n+                            + \").\", e);\n+                    // converter stays null\n+                }\n+            }\n+\n+            if (converter == null)\n+            {\n+                if (value == null)\n+                {\n+                    //if (log.isLoggable(Level.FINE))\n+                    //    log.fine(\"returning an empty string\");\n+                    return null;\n+                }\n+\n+                if (log.isLoggable(Level.FINE))\n+                    log.fine(\"returning an .toString\");\n+                return value.toString();\n+\n+            }\n+\n+            if (log.isLoggable(Level.FINE))\n+                log.fine(\"returning converter get as string \" + converter);\n+            return converter.getAsString(facesContext, component, value);\n+\n+        }\n+        catch (PropertyNotFoundException ex)\n+        {\n+            log.log(Level.SEVERE, \"Property not found - called by component : \"\n+                    + getPathToComponent(component), ex);\n+\n+            throw ex;\n+        }\n+    }\n \n     private static Object getValue(UIComponent component) {\n         Object value;",
                "raw_url": "https://github.com/apache/myfaces/raw/0e8e23aeb9ffcdd9bc71a54bfa51684d73636162/shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java",
                "sha": "fab6cfe5711bc7db40bcc5241e29559862cb8de7",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/myfaces/blob/0e8e23aeb9ffcdd9bc71a54bfa51684d73636162/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java?ref=0e8e23aeb9ffcdd9bc71a54bfa51684d73636162",
                "deletions": 2,
                "filename": "shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java",
                "patch": "@@ -115,7 +115,7 @@ else if (layout.equals(LINE_DIRECTION))\n         List selectItemList = org.apache.myfaces.shared.renderkit.RendererUtils.getSelectItemList(selectOne, facesContext);\n         converter = HtmlRendererUtils.findUIOutputConverterFailSafe(facesContext, selectOne);\n         \n-        Object currentValue = org.apache.myfaces.shared.renderkit.RendererUtils.getStringValue(facesContext, selectOne);\n+        Object currentValue = org.apache.myfaces.shared.renderkit.RendererUtils.getStringFromSubmittedValueOrLocalValueReturnNull(facesContext, selectOne);\n \n         int itemNum = 0;\n \n@@ -218,7 +218,11 @@ protected int renderGroupOrItemRadio(FacesContext facesContext,\n         else \n         {\n             String itemStrValue = org.apache.myfaces.shared.renderkit.RendererUtils.getConvertedStringValue(facesContext, selectOne, converter, selectItem.getValue());\n-            boolean itemChecked = itemStrValue.equals(currentValue);\n+            boolean itemChecked = (itemStrValue == null) ? \n+                    itemStrValue == currentValue : \n+                    \"\".equals(itemStrValue) ? \n+                            (currentValue == null || itemStrValue.equals(currentValue)) : \n+                            itemStrValue.equals(currentValue);\n             \n             // IF the hideNoSelectionOption attribute of the component is true\n             // AND this selectItem is the \"no selection option\"\n@@ -312,6 +316,10 @@ else if (renderId) {\n         {\n             writer.writeAttribute(HTML.VALUE_ATTR, value, null);\n         }\n+        else\n+        {\n+            writer.writeAttribute(HTML.VALUE_ATTR, \"\", null);\n+        }\n         \n         Map<String, List<ClientBehavior>> behaviors = null;\n         if (uiComponent instanceof ClientBehaviorHolder && JavascriptUtils.isJavascriptAllowed(facesContext.getExternalContext()))",
                "raw_url": "https://github.com/apache/myfaces/raw/0e8e23aeb9ffcdd9bc71a54bfa51684d73636162/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java",
                "sha": "0a8a1c698e1362b394d4de64d57044fd36ecef3c",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3304 NullPointerException using h:selectOneRadio with an enum",
        "parent": "https://github.com/apache/myfaces/commit/0cdb547f7caaf462ce285bf32434ba2e3d606025",
        "patched_files": [
            "RendererUtils.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "RendererUtilsTest.java"
        ]
    },
    "myfaces_0f8e87c": {
        "bug_id": "myfaces_0f8e87c",
        "commit": "https://github.com/apache/myfaces/commit/0f8e87cd65fb2825d5b24dc41cf1d62b7fd5aa8b",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/myfaces/blob/0f8e87cd65fb2825d5b24dc41cf1d62b7fd5aa8b/api/src/main/java/javax/faces/component/UIComponentBase.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIComponentBase.java?ref=0f8e87cd65fb2825d5b24dc41cf1d62b7fd5aa8b",
                "deletions": 1,
                "filename": "api/src/main/java/javax/faces/component/UIComponentBase.java",
                "patch": "@@ -1416,6 +1416,11 @@ public void setTransient(boolean transientFlag)\n      */\n     public static Object saveAttachedState(FacesContext context, Object attachedObject)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException (\"context\");\n+        }\n+        \n         if (attachedObject == null)\n             return null;\n         // StateHolder interface should take precedence over\n@@ -1506,6 +1511,11 @@ else if (stateObj instanceof _AttachedStateWrapper)\n      */\n     public Object saveState(FacesContext context)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException (\"context\");\n+        }\n+        \n         if (initialStateMarked())\n         {\n             //Delta\n@@ -1559,10 +1569,20 @@ public Object saveState(FacesContext context)\n     @SuppressWarnings(\"unchecked\")\n     public void restoreState(FacesContext context, Object state)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException (\"context\");\n+        }\n+        \n         if (state == null)\n         {\n             //Only happens if initialStateMarked return true\n-            return;\n+            //return;\n+            \n+            // Commenting the above out because Javadocs say that we need to\n+            // throw an NPE here.\n+            \n+            throw new NullPointerException (\"state\");\n         }\n         \n         Object values[] = (Object[]) state;",
                "raw_url": "https://github.com/apache/myfaces/raw/0f8e87cd65fb2825d5b24dc41cf1d62b7fd5aa8b/api/src/main/java/javax/faces/component/UIComponentBase.java",
                "sha": "ce78efc87bcc3c20383d4f293115377af6eecd9f",
                "status": "modified"
            }
        ],
        "message": "MYFACES-2508 - saveState()/restoreState() need to throw NPEs if args are null.",
        "parent": "https://github.com/apache/myfaces/commit/1b73275b33c07aad3f103a5db9405aabe1678797",
        "patched_files": [
            "UIComponentBase.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "UIComponentBaseTest.java"
        ]
    },
    "myfaces_14a2ebd": {
        "bug_id": "myfaces_14a2ebd",
        "commit": "https://github.com/apache/myfaces/commit/14a2ebd8058c5db5e6ef789da7843bf9040def42",
        "file": [
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/myfaces/blob/14a2ebd8058c5db5e6ef789da7843bf9040def42/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java?ref=14a2ebd8058c5db5e6ef789da7843bf9040def42",
                "deletions": 37,
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "patch": "@@ -1286,52 +1286,55 @@ private static void _writeAttributes(Writer writer, UIComponent c, boolean value\n                     && Arrays.binarySearch(IGNORE, pd[i].getName()) < 0)\n                 {\n                     m = pd[i].getReadMethod();\n-                    try\n+                    if (m != null)\n                     {\n-                        // first check if the property is a ValueExpression\n-                        valueExpression = c.getValueExpression(pd[i].getName());\n-                        if (valueExpressionValues && valueExpression != null)\n-                        {\n-                            String expressionString = valueExpression.getExpressionString();\n-                            if (null == expressionString)\n-                            {\n-                                expressionString = \"\";\n-                            }\n-                            _writeAttribute(writer, pd[i].getName(), expressionString);\n-                        }\n-                        else\n+                        try\n                         {\n-                            v = m.invoke(c, null);\n-                            if (v != null)\n+                            // first check if the property is a ValueExpression\n+                            valueExpression = c.getValueExpression(pd[i].getName());\n+                            if (valueExpressionValues && valueExpression != null)\n                             {\n-                                if (v instanceof Collection || v instanceof Map || v instanceof Iterator)\n-                                {\n-                                    continue;\n-                                }\n-                                if (v instanceof Expression)\n+                                String expressionString = valueExpression.getExpressionString();\n+                                if (null == expressionString)\n                                 {\n-                                    str = ((Expression)v).getExpressionString();\n+                                    expressionString = \"\";\n                                 }\n-                                else if (v instanceof ValueBinding)\n-                                {\n-                                    str = ((ValueBinding) v).getExpressionString();\n-                                }\n-                                else if (v instanceof MethodBinding)\n-                                {\n-                                    str = ((MethodBinding) v).getExpressionString();\n-                                }\n-                                else\n+                                _writeAttribute(writer, pd[i].getName(), expressionString);\n+                            }\n+                            else\n+                            {\n+                                v = m.invoke(c, null);\n+                                if (v != null)\n                                 {\n-                                    str = v.toString();\n-                                }\n+                                    if (v instanceof Collection || v instanceof Map || v instanceof Iterator)\n+                                    {\n+                                        continue;\n+                                    }\n+                                    if (v instanceof Expression)\n+                                    {\n+                                        str = ((Expression)v).getExpressionString();\n+                                    }\n+                                    else if (v instanceof ValueBinding)\n+                                    {\n+                                        str = ((ValueBinding) v).getExpressionString();\n+                                    }\n+                                    else if (v instanceof MethodBinding)\n+                                    {\n+                                        str = ((MethodBinding) v).getExpressionString();\n+                                    }\n+                                    else\n+                                    {\n+                                        str = v.toString();\n+                                    }\n \n-                                _writeAttribute(writer, pd[i].getName(), str);\n+                                    _writeAttribute(writer, pd[i].getName(), str);\n+                                }\n                             }\n                         }\n-                    }\n-                    catch (Exception e)\n-                    {\n-                        // do nothing\n+                        catch (Exception e)\n+                        {\n+                            // do nothing\n+                        }\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/myfaces/raw/14a2ebd8058c5db5e6ef789da7843bf9040def42/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "sha": "80fb859f71c4b6403e0480c252924320a30f9ca3",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3893 NullPointerException in ErrorPageWriter._writeAttributes [Line 1304] (thanks to Fabio for provide this patch)",
        "parent": "https://github.com/apache/myfaces/commit/de4d7e1fb10a112c8a75a6f573109c603042e00c",
        "patched_files": [
            "ErrorPageWriter.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "ErrorPageWriterTest.java"
        ]
    },
    "myfaces_1668829": {
        "bug_id": "myfaces_1668829",
        "commit": "https://github.com/apache/myfaces/commit/166882959f49c2ba714ad75f7b2babbbb72c8b25",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/myfaces/blob/166882959f49c2ba714ad75f7b2babbbb72c8b25/impl/src/main/java/org/apache/myfaces/application/FacesServletMappingUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/FacesServletMappingUtils.java?ref=166882959f49c2ba714ad75f7b2babbbb72c8b25",
                "deletions": 1,
                "filename": "impl/src/main/java/org/apache/myfaces/application/FacesServletMappingUtils.java",
                "patch": "@@ -48,7 +48,7 @@ public static FacesServletMapping getCurrentRequestFacesServletMapping(FacesCont\n         if (mapping == null)\r\n         {\r\n             ExternalContext externalContext = context.getExternalContext();\r\n-            mapping = FacesServletMappingUtils.calculateFacesServletMapping(\r\n+            mapping = calculateFacesServletMapping(\r\n                     context,\r\n                     externalContext.getRequestServletPath(),\r\n                     externalContext.getRequestPathInfo(),\r",
                "raw_url": "https://github.com/apache/myfaces/raw/166882959f49c2ba714ad75f7b2babbbb72c8b25/impl/src/main/java/org/apache/myfaces/application/FacesServletMappingUtils.java",
                "sha": "c6e0393a9b4fa20b79c14067b975441f8082eccc",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/myfaces/blob/166882959f49c2ba714ad75f7b2babbbb72c8b25/impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java?ref=166882959f49c2ba714ad75f7b2babbbb72c8b25",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java",
                "patch": "@@ -130,10 +130,16 @@ protected String deriveViewId(FacesContext context, String rawViewId, boolean ch\n             }\n             else if (mapping.isExactMapping())\n             {\n+                // if the current request is a exact mapping and the viewId equals the exact viewId\n                 if (rawViewId.equals(mapping.getExact()))\n                 {\n                     viewId = handleSuffixMapping(context, rawViewId + \".jsf\");\n                 }\n+                // otherwise lets try to resolve a possible mapping for the requested viewId\n+                else\n+                {\n+                    viewId = rawViewId;\n+                }\n             }\n             else if (mapping.isPrefixMapping())\n             {",
                "raw_url": "https://github.com/apache/myfaces/raw/166882959f49c2ba714ad75f7b2babbbb72c8b25/impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java",
                "sha": "a8131474dfda67399701ac275f10216cfc27977c",
                "status": "modified"
            }
        ],
        "message": "fixed NPE",
        "parent": "https://github.com/apache/myfaces/commit/120f4cf271d3caa437e79d88e13df19db0a0884f",
        "patched_files": [
            "ViewIdSupport.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "ViewIdSupportTest.java"
        ]
    },
    "myfaces_1ebb89d": {
        "bug_id": "myfaces_1ebb89d",
        "commit": "https://github.com/apache/myfaces/commit/1ebb89d2d87b38b164b6b52235e1068d6ec08253",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/myfaces/blob/1ebb89d2d87b38b164b6b52235e1068d6ec08253/impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java?ref=1ebb89d2d87b38b164b6b52235e1068d6ec08253",
                "deletions": 4,
                "filename": "impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java",
                "patch": "@@ -282,7 +282,7 @@ public void writeState(FacesContext context) throws IOException\n         Map<String, List<String>> viewParameters;\n         UIViewRoot viewRoot = context.getViewRoot();\n         String currentViewId = viewRoot.getViewId();\n-        Collection<UIViewParameter> toViewParams;\n+        Collection<UIViewParameter> toViewParams = null;\n         Collection<UIViewParameter> currentViewParams = ViewMetadata.getViewParameters(viewRoot);\n \n         if (currentViewId.equals(viewId))\n@@ -294,11 +294,15 @@ public void writeState(FacesContext context) throws IOException\n             String calculatedViewId = getViewHandlerSupport().calculateViewId(context, viewId);            \n             ViewDeclarationLanguage vdl = getViewDeclarationLanguage(context,calculatedViewId);\n             ViewMetadata viewMetadata = vdl.getViewMetadata(context, viewId);\n-            UIViewRoot viewFromMetaData = viewMetadata.createMetadataView(context);\n-            toViewParams = ViewMetadata.getViewParameters(viewFromMetaData);\n+            // getViewMetadata() returns null on JSP\n+            if (viewMetadata != null)\n+            {\n+                UIViewRoot viewFromMetaData = viewMetadata.createMetadataView(context);\n+                toViewParams = ViewMetadata.getViewParameters(viewFromMetaData);\n+            }\n         }\n \n-        if (toViewParams.isEmpty())\n+        if (toViewParams == null || toViewParams.isEmpty())\n         {\n             return parametersFromArg;\n         }",
                "raw_url": "https://github.com/apache/myfaces/raw/1ebb89d2d87b38b164b6b52235e1068d6ec08253/impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java",
                "sha": "809825871fba28ea4bb0f971f0f9f7344fd8ae63",
                "status": "modified"
            }
        ],
        "message": "MYFACES-2563 Trinidad 1.2.x generates on POSTBACK a NullPointerException on MyFAces2",
        "parent": "https://github.com/apache/myfaces/commit/e1b747bb02ab724b7a13e549e622249f5190abe6",
        "patched_files": [
            "ViewHandlerImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "ViewHandlerImplTest.java"
        ]
    },
    "myfaces_236130d": {
        "bug_id": "myfaces_236130d",
        "commit": "https://github.com/apache/myfaces/commit/236130dbf999fc1f10c9a374d7aec69ac953512c",
        "file": [
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/myfaces/blob/236130dbf999fc1f10c9a374d7aec69ac953512c/impl/src/main/java/org/apache/myfaces/view/facelets/DefaultFaceletsStateManagementStrategy.java",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/DefaultFaceletsStateManagementStrategy.java?ref=236130dbf999fc1f10c9a374d7aec69ac953512c",
                "deletions": 4,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/DefaultFaceletsStateManagementStrategy.java",
                "patch": "@@ -27,7 +27,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n+import javax.el.ValueExpression;\n import javax.faces.FacesException;\n import javax.faces.FactoryFinder;\n import javax.faces.application.ProjectStage;\n@@ -52,7 +52,6 @@\n import javax.faces.view.ViewDeclarationLanguage;\n import javax.faces.view.ViewDeclarationLanguageFactory;\n import javax.faces.view.ViewMetadata;\n-\n import org.apache.myfaces.application.StateManagerImpl;\n import org.apache.myfaces.buildtools.maven2.plugin.builder.annotation.JSFWebConfigParam;\n import org.apache.myfaces.context.RequestViewContext;\n@@ -309,7 +308,25 @@ public UIViewRoot restoreView (FacesContext context, String viewId, String rende\n                     }\n                     if (faceletViewState != null)\n                     {\n-                        view.getAttributes().put(ComponentSupport.FACELET_STATE_INSTANCE,  faceletViewState);\n+                        //if (skipBuildView)\n+                        //{\n+                            FaceletState newFaceletState = (FaceletState) view.getAttributes().get(\n+                                    ComponentSupport.FACELET_STATE_INSTANCE);\n+                            if (newFaceletState != null)\n+                            {\n+                                newFaceletState.restoreState(context, \n+                                        ((FaceletState)faceletViewState).saveState(context));\n+                                faceletViewState = newFaceletState;\n+                            }\n+                            else\n+                            {\n+                                view.getAttributes().put(ComponentSupport.FACELET_STATE_INSTANCE,  faceletViewState);\n+                            }\n+                        //}\n+                        //else\n+                        //{\n+                        //    view.getAttributes().put(ComponentSupport.FACELET_STATE_INSTANCE,  faceletViewState);\n+                        //}\n                     }\n                     if (state.length == 3)\n                     {\n@@ -373,6 +390,10 @@ public UIViewRoot restoreView (FacesContext context, String viewId, String rende\n                 states = (Map<String, Object>) state[1];\n                 //Save the last unique id counter key in UIViewRoot\n                 Integer lastUniqueIdCounter = (Integer) view.getAttributes().get(UNIQUE_ID_COUNTER_KEY);\n+                // Retrieve the facelet state before restore anything. The reason is\n+                // it could be necessary to restore the bindings map from here.\n+                FaceletState oldFaceletState = (FaceletState) view.getAttributes().get(\n+                        ComponentSupport.FACELET_STATE_INSTANCE);\n                 \n                 // Visit the children and restore their state.\n                 boolean emptyState = false;\n@@ -414,7 +435,36 @@ else if (states.size() == 1 &&\n                 }\n                 if (faceletViewState != null)\n                 {\n-                    view.getAttributes().put(ComponentSupport.FACELET_STATE_INSTANCE,  faceletViewState);\n+                    // Make sure binding map\n+                    if (oldFaceletState != null && oldFaceletState.getBindings() != null && \n+                            !oldFaceletState.getBindings().isEmpty())\n+                    {\n+                        // Be sure the new facelet state has the binding map filled from the old one.\n+                        // When vdl.buildView() is called by restoreView, FaceletState.bindings map is filled, but\n+                        // when view pool is enabled, vdl.buildView() could restore the view, but create an alternate\n+                        // FaceletState instance, different from the one restored. In this case, the restored instance\n+                        // has precedence, but we need to fill bindings map using the entries from the instance that\n+                        // comes from the view pool.\n+                        FaceletState newFaceletState = (FaceletState) faceletViewState;\n+                        for (Map.Entry<String, Map<String, ValueExpression> > entry : \n+                                oldFaceletState.getBindings().entrySet())\n+                        {\n+                            for (Map.Entry<String, ValueExpression> entry2 : entry.getValue().entrySet())\n+                            {\n+                                ValueExpression expr = newFaceletState.getBinding(entry.getKey(), entry2.getKey());\n+                                if (expr == null)\n+                                {\n+                                    newFaceletState.putBinding(entry.getKey(), entry2.getKey(), entry2.getValue());\n+                                }\n+                            }\n+                        }\n+                        view.getAttributes().put(ComponentSupport.FACELET_STATE_INSTANCE,  newFaceletState);\n+                    }\n+                    else\n+                    {\n+                        //restore bindings\n+                        view.getAttributes().put(ComponentSupport.FACELET_STATE_INSTANCE,  faceletViewState);\n+                    }\n                 }\n                 if (lastUniqueIdCounter != null)\n                 {",
                "raw_url": "https://github.com/apache/myfaces/raw/236130dbf999fc1f10c9a374d7aec69ac953512c/impl/src/main/java/org/apache/myfaces/view/facelets/DefaultFaceletsStateManagementStrategy.java",
                "sha": "10e5e69d1e6add191263a3388ed8f2c7f46814e5",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/myfaces/blob/236130dbf999fc1f10c9a374d7aec69ac953512c/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/FaceletState.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/FaceletState.java?ref=236130dbf999fc1f10c9a374d7aec69ac953512c",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/FaceletState.java",
                "patch": "@@ -147,6 +147,21 @@ public void putBinding(String uniqueId, String key, ValueExpression expr)\n         bindings.put(key, expr);\n     }\n     \n+    /**\n+     * A \"Facelet Binding ValueExpression\" is a ValueExpression used/generated by facelets algorithm\n+     * associated with an uniqueId, which usually is bound to the tagId. Components like c:forEach or\n+     * ui:param uses it and the reason behind this is avoid use VariableMapper to create EL Expressions\n+     * that later cannot be cached. Instead, the intention is make an indirection using 2 ValueExpression\n+     * instances. In that way, all EL Expressions can be cached, because VariableMapper will use an\n+     * instance that contains the uniqueId and the one stored in the map will have the real value or\n+     * EL Expression that points to the managed bean. (Remember each EL expression that uses a variable\n+     * stored in VariableMapper will copy the EL expression bound to the variable, so if the EL expression\n+     * value changes across views, all EL Expressions that contains a reference cannot be cached).\n+     * \n+     * This map is something special, because its content is related to the view structure. It does not need\n+     * to be saved fully into the state, and it does not have any delta state, but it \"evolves\" with the initial\n+     * state.\n+     */\n     public ValueExpression getBinding(String uniqueId, String key)\n     {\n         if (bindingsMap == null)",
                "raw_url": "https://github.com/apache/myfaces/raw/236130dbf999fc1f10c9a374d7aec69ac953512c/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/FaceletState.java",
                "sha": "21c6359686982ee67189a692af886ac46565df5e",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3978 NullPointerException in FaceletStateValueExpression when ViewPooling enabled",
        "parent": "https://github.com/apache/myfaces/commit/e0c0782777acd430b7260f886df9b6caae8edaa9",
        "patched_files": [
            "DefaultFaceletsStateManagementStrategy.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "DefaultFaceletsStateManagementStrategyTest.java"
        ]
    },
    "myfaces_2408e99": {
        "bug_id": "myfaces_2408e99",
        "commit": "https://github.com/apache/myfaces/commit/2408e99751892daa7935f2ce100e4e9dbc39765e",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/myfaces/blob/2408e99751892daa7935f2ce100e4e9dbc39765e/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java?ref=2408e99751892daa7935f2ce100e4e9dbc39765e",
                "deletions": 11,
                "filename": "impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "patch": "@@ -114,9 +114,10 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n                 // PartialViewContext.setRenderAll(true)...\". The effect is that ajax requests\n                 // are included on navigation.\n                 PartialViewContext partialViewContext = facesContext.getPartialViewContext();\n+                String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n                 if ( partialViewContext.isPartialRequest() && \n                      !partialViewContext.isRenderAll() && \n-                     !facesContext.getViewRoot().getViewId().equals(toViewId))\n+                     !toViewId.equals(viewId))\n                 {\n                     partialViewContext.setRenderAll(true);\n                 }\n@@ -143,9 +144,10 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n                 // PartialViewContext.setRenderAll(true)...\". The effect is that ajax requests\n                 // are included on navigation.\n                 PartialViewContext partialViewContext = facesContext.getPartialViewContext();\n+                String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n                 if ( partialViewContext.isPartialRequest() && \n                      !partialViewContext.isRenderAll() && \n-                     !facesContext.getViewRoot().getViewId().equals(newViewId))\n+                     !newViewId.equals(viewId))\n                 {\n                     partialViewContext.setRenderAll(true);\n                 }\n@@ -200,15 +202,20 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n      */\n     public NavigationCase getNavigationCase(FacesContext facesContext, String fromAction, String outcome)\n     {\n-        String viewId = facesContext.getViewRoot().getViewId();\n+        String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n+        \n         Map<String, Set<NavigationCase>> casesMap = getNavigationCases();\n         NavigationCase navigationCase = null;\n-\n-        Set<? extends NavigationCase> casesSet = casesMap.get(viewId);\n-        if (casesSet != null)\n+        \n+        Set<? extends NavigationCase> casesSet;\n+        if (viewId != null)\n         {\n-            // Exact match?\n-            navigationCase = calcMatchingNavigationCase(facesContext, casesSet, fromAction, outcome);\n+            casesSet = casesMap.get(viewId);\n+            if (casesSet != null)\n+            {\n+                // Exact match?\n+                navigationCase = calcMatchingNavigationCase(facesContext, casesSet, fromAction, outcome);\n+            }\n         }\n \n         if (navigationCase == null)\n@@ -273,7 +280,7 @@ private NavigationCase getOutcomeNavigationCase (FacesContext facesContext, Stri\n         boolean isRedirect = false;\n         String queryString = null;\n         NavigationCase result = null;\n-        String viewId = facesContext.getViewRoot().getViewId();\n+        String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n         String viewIdToTest = outcome;\n         \n         // If viewIdToTest contains a query string, remove it and set queryString with that value.\n@@ -300,7 +307,7 @@ private NavigationCase getOutcomeNavigationCase (FacesContext facesContext, Stri\n         \n         // If viewIdToTest does not have a \"file extension\", use the one from the current viewId.\n         index = viewIdToTest.indexOf (\".\");\n-        if (index == -1)\n+        if (index == -1 && viewId != null)\n         {\n             index = viewId.lastIndexOf(\".\");\n             \n@@ -313,7 +320,7 @@ private NavigationCase getOutcomeNavigationCase (FacesContext facesContext, Stri\n         // If viewIdToTest does not start with \"/\", look for the last \"/\" in viewId.  If not found, simply prepend \"/\".\n         // Otherwise, prepend everything before and including the last \"/\" in viewId.\n         \n-        if (!viewIdToTest.startsWith (\"/\"))\n+        if (!viewIdToTest.startsWith (\"/\") && viewId != null)\n         {\n             index = viewId.lastIndexOf (\"/\");\n             ",
                "raw_url": "https://github.com/apache/myfaces/raw/2408e99751892daa7935f2ce100e4e9dbc39765e/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "sha": "01f8e1850abc45726660c1fdf45889c331efa167",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/myfaces/blob/2408e99751892daa7935f2ce100e4e9dbc39765e/impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java?ref=2408e99751892daa7935f2ce100e4e9dbc39765e",
                "deletions": 0,
                "filename": "impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java",
                "patch": "@@ -18,6 +18,9 @@\n  */\n package org.apache.myfaces.application;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -565,4 +568,37 @@ public void testFacesRedirectAddsUrlParametersFacesIncludeViewParams()\n         Assert.assertTrue(\"redirect=true in the query String must \"\n                 + \"set redirect to true.\", navigationCase.isRedirect());\n     }\n+    \n+    /**\n+     * Test for MYFACES-3101\n+     */\n+    @Test\n+    public void testHandleViewExpiredExpcetion() throws Exception {\n+        NavigationHandlerImpl underTest = new NavigationHandlerImpl();\n+        // simulate no available ViewRoot (in case of VEE)\n+        facesContext.setViewRoot(null);\n+        // test is based on:\n+        // http://www.nfjsone.com/blog/ed_burns/2009/09/dealing_gracefully_with_viewexpiredexception_in_jsf2\n+        underTest.handleNavigation(facesContext, null, \"viewExpired\");\n+\n+        assertNotNull(facesContext.getViewRoot());\n+        assertEquals(\"viewExpired\", facesContext.getViewRoot().getViewId());\n+        \n+    }\n+    \n+    /**\n+     * Test for MYFACES-3101 - partial request (without redirect)\n+     */\n+    @Test\n+    public void testHandleViewExpiredExpcetionForPartial() throws Exception {\n+        NavigationHandlerImpl underTest = new NavigationHandlerImpl();\n+        // simulate no available ViewRoot (in case of VEE)\n+        facesContext.setViewRoot(null);\n+        facesContext.getPartialViewContext().setPartialRequest(true);\n+        \n+        underTest.handleNavigation(facesContext, null, \"/viewExpired.xhtml\");\n+        \n+        assertNotNull(facesContext.getViewRoot());\n+        assertEquals(\"/viewExpired.xhtml\", facesContext.getViewRoot().getViewId());\n+    }\n }",
                "raw_url": "https://github.com/apache/myfaces/raw/2408e99751892daa7935f2ce100e4e9dbc39765e/impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java",
                "sha": "acde9b650efc1333bb00464044ce66d58731226a",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3101: NavigationHandlerImpl throws NullpointerException if view is expired",
        "parent": "https://github.com/apache/myfaces/commit/0d9f2b086ae51cc6a3d0820e491508e20d0efaac",
        "patched_files": [
            "NavigationHandlerImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "NavigationHandlerImplTest.java"
        ]
    },
    "myfaces_24aa1a7": {
        "bug_id": "myfaces_24aa1a7",
        "commit": "https://github.com/apache/myfaces/commit/24aa1a73704a1a87fedaa1c7c2fe459b7b191f2b",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/myfaces/blob/24aa1a73704a1a87fedaa1c7c2fe459b7b191f2b/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java?ref=24aa1a73704a1a87fedaa1c7c2fe459b7b191f2b",
                "deletions": 4,
                "filename": "impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java",
                "patch": "@@ -392,14 +392,15 @@ public String encodeRedirectURL(String baseUrl, Map<String,List<String>> paramet\n     @Override\n     public String encodeWebsocketURL(String baseUrl)\n     {\n+        FacesContext facesContext = getCurrentFacesContext();\n         Integer port = WebConfigParamUtils.getIntegerInitParameter(\n-                _currentFacesContext.getExternalContext(), ViewHandler.WEBSOCKET_PORT);\n+                getCurrentFacesContext().getExternalContext(), ViewHandler.WEBSOCKET_PORT);\n         port = (port == 0) ? null : port;\n         if (port != null && \n-            !port.equals(_currentFacesContext.getExternalContext().getRequestServerPort()))\n+            !port.equals(facesContext.getExternalContext().getRequestServerPort()))\n         {\n-            String scheme = _currentFacesContext.getExternalContext().getRequestScheme();\n-            String serverName = _currentFacesContext.getExternalContext().getRequestServerName();\n+            String scheme = facesContext.getExternalContext().getRequestScheme();\n+            String serverName = facesContext.getExternalContext().getRequestServerName();\n             String url;\n             try\n             {",
                "raw_url": "https://github.com/apache/myfaces/raw/24aa1a73704a1a87fedaa1c7c2fe459b7b191f2b/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java",
                "sha": "51c14de3cae1d77ed7ef01289b1af5b064c42d8c",
                "status": "modified"
            }
        ],
        "message": "small fix on encodeWebsocketURL (nullpointerexception on facesContext)",
        "parent": "https://github.com/apache/myfaces/commit/46f79888376c0b5b360c02edf7abb507e303cca9",
        "patched_files": [
            "ServletExternalContextImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "ServletExternalContextImplTest.java"
        ]
    },
    "myfaces_2777a15": {
        "bug_id": "myfaces_2777a15",
        "commit": "https://github.com/apache/myfaces/commit/2777a153a593dd47e423345b21b6e737ff573905",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/myfaces/blob/2777a153a593dd47e423345b21b6e737ff573905/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java?ref=2777a153a593dd47e423345b21b6e737ff573905",
                "deletions": 1,
                "filename": "impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "patch": "@@ -120,7 +120,7 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n                 \n                 //Clear ViewMap if we are redirecting to other resource\n                 UIViewRoot viewRoot = facesContext.getViewRoot(); \n-                if (viewRoot != null && !viewRoot.getViewId().equals(toViewId))\n+                if (viewRoot != null && !toViewId.equals(viewRoot.getViewId()))\n                 {\n                     //call getViewMap(false) to prevent unnecessary map creation\n                     Map<String, Object> viewMap = viewRoot.getViewMap(false);",
                "raw_url": "https://github.com/apache/myfaces/raw/2777a153a593dd47e423345b21b6e737ff573905/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "sha": "45b89b0f83048056eb534b6881e74d1dfcd2a08f",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3472 NavigationHandler throws a NPE if current viewId is null (Thanks to Marcus B\u00fcttner for provide this patch)",
        "parent": "https://github.com/apache/myfaces/commit/44e3b66885efc12f558c35dfaedf5987351437e5",
        "patched_files": [
            "NavigationHandlerImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "NavigationHandlerImplTest.java"
        ]
    },
    "myfaces_319f522": {
        "bug_id": "myfaces_319f522",
        "commit": "https://github.com/apache/myfaces/commit/319f522066f1c096db6fd305754be0083cbe606a",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/myfaces/blob/319f522066f1c096db6fd305754be0083cbe606a/impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java?ref=319f522066f1c096db6fd305754be0083cbe606a",
                "deletions": 3,
                "filename": "impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java",
                "patch": "@@ -71,7 +71,7 @@\n \n /**\n  * DOCUMENT ME!\n- * \n+ *\n  * @author Manfred Geiler (latest modification by $Author$)\n  * @author Anton Koinov\n  * @author Thomas Spiegl\n@@ -669,8 +669,12 @@ public Converter createConverter(String converterId)\n         checkEmpty(converterId, \"converterId\");\n \n         Class converterClass = _converterIdToClassMap.get(converterId);\n+        if(converterClass == null)\n+        {\n+            throw new FacesException(\"Could not find any registered converter-class by converterId : \"+converterId);\n+        }\n \n-        try\n+\t\ttry\n         {\n             Converter converter = (Converter) converterClass.newInstance();\n \n@@ -703,7 +707,7 @@ private Converter internalCreateConverter(Class targetClass)\n         if (converterClassName == null && targetClass.isEnum()) {\n         \tconverterClassName = _converterClassNameToClassMap.get(Enum.class);\n         }\n-        \n+\n         // Locate a Converter registered for interfaces that are\n         // implemented by the target class (directly or indirectly).\n         if (converterClassName == null)",
                "raw_url": "https://github.com/apache/myfaces/raw/319f522066f1c096db6fd305754be0083cbe606a/impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java",
                "sha": "af73a7072234a2119b1cf482ff4034f5886233fd",
                "status": "modified"
            }
        ],
        "message": "https://issues.apache.org/jira/browse/MYFACES-1755\ncreate converter with unknown id fails with NPE",
        "parent": "https://github.com/apache/myfaces/commit/6cfc33845af48302b19552a1e9573c2f6c009373",
        "patched_files": [
            "ApplicationImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "ApplicationImplTest.java"
        ]
    },
    "myfaces_3ef8467": {
        "bug_id": "myfaces_3ef8467",
        "commit": "https://github.com/apache/myfaces/commit/3ef84672f526d30c8bfffa3dff1c3ff1cd90f5ae",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/myfaces/blob/3ef84672f526d30c8bfffa3dff1c3ff1cd90f5ae/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java?ref=3ef84672f526d30c8bfffa3dff1c3ff1cd90f5ae",
                "deletions": 38,
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "patch": "@@ -18,41 +18,16 @@\n  */\n package org.apache.myfaces.renderkit;\n \n-import java.beans.BeanInfo;\n-import java.beans.Introspector;\n-import java.beans.PropertyDescriptor;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PrintWriter;\n-import java.io.Serializable;\n-import java.io.StringWriter;\n-import java.io.Writer;\n-import java.lang.reflect.Method;\n-import java.text.DateFormat;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Date;\n-import java.util.EnumSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.SortedMap;\n-import java.util.TreeMap;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import org.apache.myfaces.buildtools.maven2.plugin.builder.annotation.JSFWebConfigParam;\n+import org.apache.myfaces.shared_impl.renderkit.html.HtmlResponseWriterImpl;\n+import org.apache.myfaces.shared_impl.util.ClassUtils;\n+import org.apache.myfaces.shared_impl.webapp.webxml.WebXml;\n+import org.apache.myfaces.view.facelets.component.UIRepeat;\n \n import javax.el.Expression;\n import javax.el.ValueExpression;\n import javax.faces.FacesException;\n-import javax.faces.component.UIColumn;\n-import javax.faces.component.UIComponent;\n-import javax.faces.component.UIData;\n-import javax.faces.component.UIInput;\n-import javax.faces.component.UIViewRoot;\n+import javax.faces.component.*;\n import javax.faces.component.visit.VisitCallback;\n import javax.faces.component.visit.VisitContext;\n import javax.faces.component.visit.VisitHint;\n@@ -66,12 +41,17 @@\n import javax.faces.render.Renderer;\n import javax.faces.view.Location;\n import javax.servlet.http.HttpServletResponse;\n-\n-import org.apache.myfaces.buildtools.maven2.plugin.builder.annotation.JSFWebConfigParam;\n-import org.apache.myfaces.shared_impl.renderkit.html.HtmlResponseWriterImpl;\n-import org.apache.myfaces.shared_impl.util.ClassUtils;\n-import org.apache.myfaces.shared_impl.webapp.webxml.WebXml;\n-import org.apache.myfaces.view.facelets.component.UIRepeat;\n+import java.beans.BeanInfo;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+import java.io.*;\n+import java.lang.reflect.Method;\n+import java.text.DateFormat;\n+import java.util.*;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * This class provides utility methods to generate the\n@@ -843,7 +823,7 @@ public VisitResult visit(VisitContext context, UIComponent target)\n                     _writer.write(\"</dl>\");\n                     \n                     while (parent != null \n-                            && (parent.getChildren().get(parent.getChildCount() - 1) == target\n+                            && ((parent.getChildCount()>0 && parent.getChildren().get(parent.getChildCount() - 1) == target)\n                                     || (parent.getFacetCount() != 0 \n                                             && _getVisitedFacetCount(parent) == parent.getFacetCount())))\n                     {",
                "raw_url": "https://github.com/apache/myfaces/raw/3ef84672f526d30c8bfffa3dff1c3ff1cd90f5ae/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "sha": "55d39ff8c9c7ec95da343c4404d263210a063432",
                "status": "modified"
            }
        ],
        "message": "fixed NPE in newly introduced error-page writing",
        "parent": "https://github.com/apache/myfaces/commit/95a862a5bde26ea5556e1da8b17f6b1a5749f6ee",
        "patched_files": [
            "ErrorPageWriter.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "ErrorPageWriterTest.java"
        ]
    },
    "myfaces_42ee4d5": {
        "bug_id": "myfaces_42ee4d5",
        "commit": "https://github.com/apache/myfaces/commit/42ee4d58634064ca987ebf20aa123ad1f5bd4366",
        "file": [
            {
                "additions": 95,
                "blob_url": "https://github.com/apache/myfaces/blob/42ee4d58634064ca987ebf20aa123ad1f5bd4366/shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java",
                "changes": 95,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java?ref=42ee4d58634064ca987ebf20aa123ad1f5bd4366",
                "deletions": 0,
                "filename": "shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java",
                "patch": "@@ -339,6 +339,101 @@ public static String getStringValue(FacesContext facesContext,\n             throw ex;\n         }\n     }\n+    \n+    public static String getStringFromSubmittedValueOrLocalValueReturnNull(FacesContext facesContext,\n+            UIComponent component)\n+    {\n+        try\n+        {\n+            if (!(component instanceof ValueHolder))\n+            {\n+                throw new IllegalArgumentException(\"Component : \"\n+                        + getPathToComponent(component)\n+                        + \"is not a ValueHolder\");\n+            }\n+\n+            if (component instanceof EditableValueHolder)\n+            {\n+                Object submittedValue = ((EditableValueHolder) component)\n+                        .getSubmittedValue();\n+                if (submittedValue != null)\n+                {\n+                    if (log.isLoggable(Level.FINE))\n+                        log.fine(\"returning 1 '\" + submittedValue + \"'\");\n+                    return submittedValue.toString();\n+                }\n+            }\n+\n+            Object value;\n+\n+            if (component instanceof EditableValueHolder)\n+            {\n+\n+                EditableValueHolder holder = (EditableValueHolder) component;\n+\n+                if (holder.isLocalValueSet())\n+                {\n+                    value = holder.getLocalValue();\n+                }\n+                else\n+                {\n+                    value = getValue(component);\n+                }\n+            }\n+            else\n+            {\n+                value = getValue(component);\n+            }\n+\n+            Converter converter = ((ValueHolder) component).getConverter();\n+            if (converter == null && value != null)\n+            {\n+\n+                try\n+                {\n+                    converter = facesContext.getApplication().createConverter(\n+                            value.getClass());\n+                    if (log.isLoggable(Level.FINE))\n+                        log.fine(\"the created converter is \" + converter);\n+                }\n+                catch (FacesException e)\n+                {\n+                    log.log(Level.SEVERE, \"No converter for class \"\n+                            + value.getClass().getName()\n+                            + \" found (component id=\" + component.getId()\n+                            + \").\", e);\n+                    // converter stays null\n+                }\n+            }\n+\n+            if (converter == null)\n+            {\n+                if (value == null)\n+                {\n+                    //if (log.isLoggable(Level.FINE))\n+                    //    log.fine(\"returning an empty string\");\n+                    return null;\n+                }\n+\n+                if (log.isLoggable(Level.FINE))\n+                    log.fine(\"returning an .toString\");\n+                return value.toString();\n+\n+            }\n+\n+            if (log.isLoggable(Level.FINE))\n+                log.fine(\"returning converter get as string \" + converter);\n+            return converter.getAsString(facesContext, component, value);\n+\n+        }\n+        catch (PropertyNotFoundException ex)\n+        {\n+            log.log(Level.SEVERE, \"Property not found - called by component : \"\n+                    + getPathToComponent(component), ex);\n+\n+            throw ex;\n+        }\n+    }\n \n     private static Object getValue(UIComponent component) {\n         Object value;",
                "raw_url": "https://github.com/apache/myfaces/raw/42ee4d58634064ca987ebf20aa123ad1f5bd4366/shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java",
                "sha": "fab6cfe5711bc7db40bcc5241e29559862cb8de7",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/myfaces/blob/42ee4d58634064ca987ebf20aa123ad1f5bd4366/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java?ref=42ee4d58634064ca987ebf20aa123ad1f5bd4366",
                "deletions": 2,
                "filename": "shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java",
                "patch": "@@ -115,7 +115,7 @@ else if (layout.equals(LINE_DIRECTION))\n         List selectItemList = org.apache.myfaces.shared.renderkit.RendererUtils.getSelectItemList(selectOne, facesContext);\n         converter = HtmlRendererUtils.findUIOutputConverterFailSafe(facesContext, selectOne);\n         \n-        Object currentValue = org.apache.myfaces.shared.renderkit.RendererUtils.getStringValue(facesContext, selectOne);\n+        Object currentValue = org.apache.myfaces.shared.renderkit.RendererUtils.getStringFromSubmittedValueOrLocalValueReturnNull(facesContext, selectOne);\n \n         int itemNum = 0;\n \n@@ -218,7 +218,11 @@ protected int renderGroupOrItemRadio(FacesContext facesContext,\n         else \n         {\n             String itemStrValue = org.apache.myfaces.shared.renderkit.RendererUtils.getConvertedStringValue(facesContext, selectOne, converter, selectItem.getValue());\n-            boolean itemChecked = itemStrValue.equals(currentValue);\n+            boolean itemChecked = (itemStrValue == null) ? \n+                    itemStrValue == currentValue : \n+                    \"\".equals(itemStrValue) ? \n+                            (currentValue == null || itemStrValue.equals(currentValue)) : \n+                            itemStrValue.equals(currentValue);\n             \n             // IF the hideNoSelectionOption attribute of the component is true\n             // AND this selectItem is the \"no selection option\"\n@@ -312,6 +316,10 @@ else if (renderId) {\n         {\n             writer.writeAttribute(HTML.VALUE_ATTR, value, null);\n         }\n+        else\n+        {\n+            writer.writeAttribute(HTML.VALUE_ATTR, \"\", null);\n+        }\n         \n         Map<String, List<ClientBehavior>> behaviors = null;\n         if (uiComponent instanceof ClientBehaviorHolder && JavascriptUtils.isJavascriptAllowed(facesContext.getExternalContext()))",
                "raw_url": "https://github.com/apache/myfaces/raw/42ee4d58634064ca987ebf20aa123ad1f5bd4366/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java",
                "sha": "0a8a1c698e1362b394d4de64d57044fd36ecef3c",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3304 NullPointerException using h:selectOneRadio with an enum",
        "parent": "https://github.com/apache/myfaces/commit/363639be0d7a74d78f56df554f8394e21b98b6fd",
        "patched_files": [
            "RendererUtils.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "RendererUtilsTest.java"
        ]
    },
    "myfaces_4bfe5e2": {
        "bug_id": "myfaces_4bfe5e2",
        "commit": "https://github.com/apache/myfaces/commit/4bfe5e214adde2bd5387c1fb7e148d6ddb47f2c9",
        "file": [
            {
                "additions": 49,
                "blob_url": "https://github.com/apache/myfaces/blob/4bfe5e214adde2bd5387c1fb7e148d6ddb47f2c9/impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlLinkRendererTest.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlLinkRendererTest.java?ref=4bfe5e214adde2bd5387c1fb7e148d6ddb47f2c9",
                "deletions": 0,
                "filename": "impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlLinkRendererTest.java",
                "patch": "@@ -397,4 +397,53 @@ public void testDisabledUIParameterNotRenderedOutputLink() throws Exception\n         assertTrue(output.contains(\"param2\"));\n         assertTrue(output.contains(\"value2\"));\n     }\n+    \n+    /**\n+     * Tests if the h:link correctly includes an UIParameter\n+     * with a non-null-name when creating the URL.\n+     */\n+    public void testOutcomeTargetLinkIncludesUIParameterInURL()\n+    {\n+        // create the UIParameter and attach it\n+        UIParameter param = new UIParameter();\n+        param.setName(\"myParameter\");\n+        param.setValue(\"myValue\");\n+        outcomeTargetLink.getChildren().add(param);\n+        \n+        try\n+        {\n+            outcomeTargetLink.encodeAll(facesContext);\n+            String output = ((StringWriter) writer.getWriter()).getBuffer().toString();\n+            assertTrue(output.contains(\"myParameter=myValue\"));\n+        }\n+        catch (Exception e)\n+        {\n+            fail(e.getMessage());\n+        }\n+    }\n+    \n+    /**\n+     * Tests if the h:link correctly skips an UIParameter\n+     * with a null-name when creating the URL.\n+     */\n+    public void testOutcomeTargetLinkSkipsNullValueOfUIParameterInURL()\n+    {\n+        // create the UIParameter with value = null and attach it\n+        UIParameter param = new UIParameter();\n+        param.setName(\"myNullParameter\");\n+        param.setValue(null);\n+        outcomeTargetLink.getChildren().add(param);\n+        \n+        try\n+        {\n+            outcomeTargetLink.encodeAll(facesContext);\n+            String output = ((StringWriter) writer.getWriter()).getBuffer().toString();\n+            assertFalse(output.contains(\"myNullParameter\"));\n+        }\n+        catch (Exception e)\n+        {\n+            fail(e.getMessage());\n+        }\n+    }\n+    \n }",
                "raw_url": "https://github.com/apache/myfaces/raw/4bfe5e214adde2bd5387c1fb7e148d6ddb47f2c9/impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlLinkRendererTest.java",
                "sha": "fc5ec9bdff78daa058c8455352916507dbf9a756",
                "status": "modified"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/myfaces/blob/4bfe5e214adde2bd5387c1fb7e148d6ddb47f2c9/impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlOutcomeTargetButtonRendererTest.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlOutcomeTargetButtonRendererTest.java?ref=4bfe5e214adde2bd5387c1fb7e148d6ddb47f2c9",
                "deletions": 0,
                "filename": "impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlOutcomeTargetButtonRendererTest.java",
                "patch": "@@ -20,6 +20,7 @@\n \n import java.io.StringWriter;\n \n+import javax.faces.component.UIParameter;\n import javax.faces.component.behavior.AjaxBehavior;\n import javax.faces.component.html.HtmlForm;\n import javax.faces.component.html.HtmlOutcomeTargetButton;\n@@ -32,6 +33,12 @@\n import org.apache.myfaces.test.mock.MockRenderKitFactory;\n import org.apache.myfaces.test.mock.MockResponseWriter;\n \n+/**\n+ * Tests for HtmlOutcomeTargetButtonRenderer.\n+ * \n+ * @author Jakob Korherr (latest modification by $Author$)\n+ * @version $Revision$ $Date$\n+ */\n public class HtmlOutcomeTargetButtonRendererTest extends AbstractJsfTestCase \n {\n \n@@ -142,4 +149,52 @@ public void testFragment() throws Exception\n         assertTrue(output.contains(\"param1=value1#\" + fragment));\n     }\n     \n+    /**\n+     * Tests if the h:button correctly includes an UIParameter\n+     * with a non-null-name when creating the URL.\n+     */\n+    public void testIncludesUIParameterInURL()\n+    {\n+        // create the UIParameter and attach it\n+        UIParameter param = new UIParameter();\n+        param.setName(\"myParameter\");\n+        param.setValue(\"myValue\");\n+        outcomeTargetButton.getChildren().add(param);\n+        \n+        try\n+        {\n+            outcomeTargetButton.encodeAll(facesContext);\n+            String output = ((StringWriter) writer.getWriter()).getBuffer().toString();\n+            assertTrue(output.contains(\"myParameter=myValue\"));\n+        }\n+        catch (Exception e)\n+        {\n+            fail(e.getMessage());\n+        }\n+    }\n+    \n+    /**\n+     * Tests if the h:button correctly skips an UIParameter\n+     * with a null-name when creating the URL.\n+     */\n+    public void testSkipsNullValueOfUIParameterInURL()\n+    {\n+        // create the UIParameter with value = null and attach it\n+        UIParameter param = new UIParameter();\n+        param.setName(\"myNullParameter\");\n+        param.setValue(null);\n+        outcomeTargetButton.getChildren().add(param);\n+        \n+        try\n+        {\n+            outcomeTargetButton.encodeAll(facesContext);\n+            String output = ((StringWriter) writer.getWriter()).getBuffer().toString();\n+            assertFalse(output.contains(\"myNullParameter\"));\n+        }\n+        catch (Exception e)\n+        {\n+            fail(e.getMessage());\n+        }\n+    }\n+    \n }",
                "raw_url": "https://github.com/apache/myfaces/raw/4bfe5e214adde2bd5387c1fb7e148d6ddb47f2c9/impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlOutcomeTargetButtonRendererTest.java",
                "sha": "002b55839d1de68f40f77ff935280e84978d9569",
                "status": "modified"
            }
        ],
        "message": "MYFACES-2663 NPE in UIParameter when value resolves to null (test cases from patch)",
        "parent": "https://github.com/apache/myfaces/commit/975adb4389509c43a6536f60419e2885aa625430",
        "patched_files": [
            "HtmlOutcomeTargetButtonRenderer.java",
            "HtmlLinkRenderer.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "HtmlOutcomeTargetButtonRendererTest.java",
            "HtmlLinkRendererTest.java"
        ]
    },
    "myfaces_4f99c82": {
        "bug_id": "myfaces_4f99c82",
        "commit": "https://github.com/apache/myfaces/commit/4f99c822d7b1c0cd6ce20f10869fd782e1439a4a",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/myfaces/blob/4f99c822d7b1c0cd6ce20f10869fd782e1439a4a/impl/src/test/java/org/apache/myfaces/webapp/Jsp21FacesInitializerTest.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/webapp/Jsp21FacesInitializerTest.java?ref=4f99c822d7b1c0cd6ce20f10869fd782e1439a4a",
                "deletions": 9,
                "filename": "impl/src/test/java/org/apache/myfaces/webapp/Jsp21FacesInitializerTest.java",
                "patch": "@@ -18,35 +18,47 @@\n  */\n package org.apache.myfaces.webapp;\n \n-import junit.framework.TestCase;\n+import static org.easymock.EasyMock.anyObject;\n+import static org.easymock.EasyMock.eq;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.expectLastCall;\n+import static org.easymock.EasyMock.isA;\n+\n+import javax.el.ExpressionFactory;\n+import javax.faces.webapp.FacesServlet;\n+import javax.servlet.ServletContext;\n+import javax.servlet.jsp.JspApplicationContext;\n+import javax.servlet.jsp.JspFactory;\n+\n import org.apache.myfaces.config.RuntimeConfig;\n import org.apache.myfaces.el.DefaultPropertyResolver;\n import org.apache.myfaces.el.VariableResolverImpl;\n import org.apache.myfaces.el.unified.resolver.FacesCompositeELResolver;\n-import static org.easymock.EasyMock.*;\n+import org.apache.myfaces.test.base.AbstractJsfTestCase;\n import org.easymock.IAnswer;\n import org.easymock.classextension.EasyMock;\n import org.easymock.classextension.IMocksControl;\n \n-import javax.el.ExpressionFactory;\n-import javax.faces.webapp.FacesServlet;\n-import javax.servlet.ServletContext;\n-import javax.servlet.jsp.JspApplicationContext;\n-import javax.servlet.jsp.JspFactory;\n-\n /**\n  * @author Mathias Broekelmann (latest modification by $Author: baranda $)\n  * @version $Revision: 532019 $ $Date: 2007-04-24 19:34:36 +0200 (Di, 24 Apr 2007) $\n  */\n-public class Jsp21FacesInitializerTest extends TestCase\n+public class Jsp21FacesInitializerTest extends AbstractJsfTestCase\n {\n \n+    public Jsp21FacesInitializerTest(String name)\n+    {\n+        super(name);\n+    }\n+\n     /**\n      * Test method for {@link org.apache.myfaces.webapp.DefaultFacesInitializer#initFaces(javax.servlet.ServletContext)}.\n      * @throws Exception \n      */\n     public void testInitFaces() throws Exception\n     {\n+        // TODO adapt this test case for MyFaces 2.0, because currently it checks nothing!\n+        \n         Jsp21FacesInitializer initializer = new Jsp21FacesInitializer();\n         IMocksControl control = EasyMock.createControl();\n         ",
                "raw_url": "https://github.com/apache/myfaces/raw/4f99c822d7b1c0cd6ce20f10869fd782e1439a4a/impl/src/test/java/org/apache/myfaces/webapp/Jsp21FacesInitializerTest.java",
                "sha": "792a9624a6b2d7ad3662c036f287e9da27794078",
                "status": "modified"
            }
        ],
        "message": "fixed NPE in test case + added TODO",
        "parent": "https://github.com/apache/myfaces/commit/aa04e62f6ae05986bc742ccb3732900bcfdb63b1",
        "patched_files": [],
        "repo": "myfaces",
        "unit_tests": [
            "Jsp21FacesInitializerTest.java"
        ]
    },
    "myfaces_50b28c4": {
        "bug_id": "myfaces_50b28c4",
        "commit": "https://github.com/apache/myfaces/commit/50b28c462edce6b5f54b9cf15464c2828d4217dd",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/myfaces/blob/50b28c462edce6b5f54b9cf15464c2828d4217dd/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java?ref=50b28c462edce6b5f54b9cf15464c2828d4217dd",
                "deletions": 4,
                "filename": "impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "patch": "@@ -159,11 +159,14 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n                     partialViewContext.setRenderAll(true);\n                 }\n \n-                if (facesContext.getViewRoot().getAttributes().containsKey(\"oam.CALL_PRE_DISPOSE_VIEW\"))\n+                if (facesContext.getViewRoot() != null)\n                 {\n-                    facesContext.getAttributes().put(SKIP_ITERATION_HINT, Boolean.TRUE);\n-                    facesContext.getViewRoot().visitTree(VisitContext.createVisitContext(facesContext), new PreDisposeViewCallback());\n-                    facesContext.getAttributes().remove(SKIP_ITERATION_HINT);\n+                    if (facesContext.getViewRoot().getAttributes().containsKey(\"oam.CALL_PRE_DISPOSE_VIEW\"))\n+                    {\n+                        facesContext.getAttributes().put(SKIP_ITERATION_HINT, Boolean.TRUE);\n+                        facesContext.getViewRoot().visitTree(VisitContext.createVisitContext(facesContext), new PreDisposeViewCallback());\n+                        facesContext.getAttributes().remove(SKIP_ITERATION_HINT);\n+                    }\n                 }\n \n                 // create UIViewRoot for new view",
                "raw_url": "https://github.com/apache/myfaces/raw/50b28c462edce6b5f54b9cf15464c2828d4217dd/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "sha": "508ee02a76ef23ba59054e2921179c3514f026c7",
                "status": "modified"
            }
        ],
        "message": "small fix NullPointerException ViewExpired",
        "parent": "https://github.com/apache/myfaces/commit/a96f335daef3c789c8b6ce5c00f17ae0d65f5ea4",
        "patched_files": [
            "NavigationHandlerImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "NavigationHandlerImplTest.java"
        ]
    },
    "myfaces_59a143f": {
        "bug_id": "myfaces_59a143f",
        "commit": "https://github.com/apache/myfaces/commit/59a143ff6126aadbd4eadbed134765876be3236b",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/myfaces/blob/59a143ff6126aadbd4eadbed134765876be3236b/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java?ref=59a143ff6126aadbd4eadbed134765876be3236b",
                "deletions": 1,
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "patch": "@@ -503,7 +503,10 @@ private static void _writeVariables(Writer writer, FacesContext faces, UIViewRoo\n         ExternalContext ctx = faces.getExternalContext();\r\n         _writeVariables(writer, ctx.getRequestParameterMap(), \"Request Parameters\");\r\n         _writeVariables(writer, ctx.getRequestMap(), \"Request Attributes\");\r\n-        _writeVariables(writer, view.getViewMap(), \"View Attributes\");\r\n+        if (view != null)\r\n+        {\r\n+          _writeVariables(writer, view.getViewMap(), \"View Attributes\");\r\n+        }\r\n         if (ctx.getSession(false) != null)\r\n         {\r\n             _writeVariables(writer, ctx.getSessionMap(), \"Session Attributes\");\r",
                "raw_url": "https://github.com/apache/myfaces/raw/59a143ff6126aadbd4eadbed134765876be3236b/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "sha": "387d5633570c8cfca3730d6864af18fc82fcbb34",
                "status": "modified"
            }
        ],
        "message": "fixing potential NPE",
        "parent": "https://github.com/apache/myfaces/commit/cef8d18c19dde09e079e9e3fb49cf2357ecfa2f2",
        "patched_files": [
            "ErrorPageWriter.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "ErrorPageWriterTest.java"
        ]
    },
    "myfaces_603ae25": {
        "bug_id": "myfaces_603ae25",
        "commit": "https://github.com/apache/myfaces/commit/603ae2579510db74b48ce649501bbeddf6c16b88",
        "file": [
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/myfaces/blob/603ae2579510db74b48ce649501bbeddf6c16b88/api/src/main/java/javax/faces/component/UIComponent.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIComponent.java?ref=603ae2579510db74b48ce649501bbeddf6c16b88",
                "deletions": 23,
                "filename": "api/src/main/java/javax/faces/component/UIComponent.java",
                "patch": "@@ -15,6 +15,7 @@\n  */\n package javax.faces.component;\n \n+import javax.el.ELException;\n import javax.el.ValueExpression;\n import javax.faces.FacesException;\n import javax.faces.context.FacesContext;\n@@ -62,31 +63,47 @@ public ValueExpression getValueExpression(String name) {\n     public abstract void setValueBinding(java.lang.String name,\n                                          javax.faces.el.ValueBinding binding);\n \n-    public void setValueExpression(String name, ValueExpression binding) {\n-        if (name == null) throw new NullPointerException(\"name\");\n-        if (name.equals(\"id\")) throw new IllegalArgumentException(\"Can't set a ValueExpression for the 'id' property.\");\n-        if (name.equals(\"parent\")) throw new IllegalArgumentException(\"Can't set a ValueExpression for the 'parent' property.\");\n-        \n-        if(binding == null) {\n-            this.getAttributes().remove(name);\n-        }\n+    public void setValueExpression(String name, ValueExpression expression)\n+    {\n+        if (name == null)\n+            throw new NullPointerException(\"name\");\n+        if (name.equals(\"id\"))\n+            throw new IllegalArgumentException(\"Can't set a ValueExpression for the 'id' property.\");\n+        if (name.equals(\"parent\"))\n+            throw new IllegalArgumentException(\"Can't set a ValueExpression for the 'parent' property.\");\n         \n-        if (binding.isLiteralText()) {\n-            try {\n-                Object value = binding.getValue(getFacesContext().getELContext());\n-                this.getAttributes().put(name, value);\n-                return;\n-            } catch (Exception e) {\n-                throw new FacesException(e);\n+        if (expression == null)\n+        {\n+            if (bindings != null)\n+            {\n+                bindings.remove(name);\n+                if(bindings.isEmpty())\n+                    bindings = null;\n             }\n-            \n         }\n-        \n-        if (bindings == null) {\n-            bindings = new HashMap<String, ValueExpression>();\n+        else\n+        {\n+            if (expression.isLiteralText())\n+            {\n+                try\n+                {\n+                    Object value = expression.getValue(getFacesContext().getELContext());\n+                    getAttributes().put(name, value);\n+                    return;\n+                }\n+                catch (ELException e)\n+                {\n+                    throw new FacesException(e);\n+                }\n+            }\n+\n+            if (bindings == null)\n+            {\n+                bindings = new HashMap<String, ValueExpression>();\n+            }\n+\n+            bindings.put(name, expression);\n         }\n-        \n-        bindings.put(name, binding);\n     }\n     \n     /**\n@@ -209,8 +226,7 @@ public void encodeAll(javax.faces.context.FacesContext context) throws java.io.I\n \t\t\t\t\titer.next().encodeAll(context);;\n \t\t\t\t}\n     \t\t}\n-    \t\t\n-    \t\tthis.encodeEnd(context);\n+            this.encodeEnd(context);\n     \t}\n     }\n ",
                "raw_url": "https://github.com/apache/myfaces/raw/603ae2579510db74b48ce649501bbeddf6c16b88/api/src/main/java/javax/faces/component/UIComponent.java",
                "sha": "2d443b4123742c7dcdddc29ba39d3a594cddd9e1",
                "status": "modified"
            },
            {
                "additions": 391,
                "blob_url": "https://github.com/apache/myfaces/blob/603ae2579510db74b48ce649501bbeddf6c16b88/api/src/test/java/javax/faces/component/UIComponentTest.java",
                "changes": 391,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/test/java/javax/faces/component/UIComponentTest.java?ref=603ae2579510db74b48ce649501bbeddf6c16b88",
                "deletions": 0,
                "filename": "api/src/test/java/javax/faces/component/UIComponentTest.java",
                "patch": "@@ -0,0 +1,391 @@\n+/*\n+ * Copyright 2007 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package javax.faces.component;\n+\n+import static org.apache.myfaces.Assert.*;\n+import static org.easymock.EasyMock.*;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.el.ELContext;\n+import javax.el.ELException;\n+import javax.el.ValueExpression;\n+import javax.faces.FacesException;\n+import javax.faces.context.FacesContext;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.myfaces.TestRunner;\n+import org.easymock.classextension.EasyMock;\n+import org.easymock.classextension.IMocksControl;\n+\n+/**\n+ * @author Mathias Broekelmann (latest modification by $Author$)\n+ * @version $Revision$ $Date$\n+ */\n+public class UIComponentTest extends TestCase\n+{\n+    public static Test suite()\n+    {\n+        TestSuite suite = new TestSuite(UIComponentTest.class.getName());\n+        suite.addTestSuite(BasicUIComponentTest.class);\n+        suite.addTestSuite(EncodeAllTest.class);\n+        suite.addTestSuite(ValueExpressionUIComponentTest.class);\n+        suite.addTestSuite(InvokeOnComponentTest.class);\n+        return suite;\n+    }\n+\n+    /**\n+     * @author Mathias Broekelmann (latest modification by $Author$)\n+     * @version $Revision$ $Date$\n+     */\n+    public static class UIComponentTestBase extends TestCase\n+    {\n+        protected IMocksControl _mocksControl;\n+        protected FacesContext _facesContext;\n+\n+        @Override\n+        protected void setUp() throws Exception\n+        {\n+            _mocksControl = EasyMock.createControl();\n+            _facesContext = _mocksControl.createMock(FacesContext.class);\n+        }\n+    }\n+\n+    /**\n+     * Tests for\n+     * {@link javax.faces.component.UIComponent#invokeOnComponent(javax.faces.context.FacesContext, java.lang.String, javax.faces.component.ContextCallback)}.\n+     */\n+    public static class InvokeOnComponentTest extends UIComponentTestBase\n+    {\n+        private UIComponent _testimpl;\n+        private ContextCallback _contextCallback;\n+\n+        @Override\n+        protected void setUp() throws Exception\n+        {\n+            super.setUp();\n+            Collection<Method> mockedMethods = new ArrayList<Method>();\n+            Class<UIComponent> clazz = UIComponent.class;\n+            mockedMethods.add(clazz.getDeclaredMethod(\"getClientId\", new Class[] { FacesContext.class }));\n+            mockedMethods.add(clazz.getDeclaredMethod(\"getFacetsAndChildren\", null));\n+\n+            _testimpl = _mocksControl.createMock(clazz, mockedMethods.toArray(new Method[mockedMethods.size()]));\n+            _contextCallback = _mocksControl.createMock(ContextCallback.class);\n+            _mocksControl.checkOrder(true);\n+        }\n+\n+        public void testInvokeOnComponentWithSameClientId() throws Exception\n+        {\n+            expect(_testimpl.getClientId(same(_facesContext))).andReturn(\"xxxId\");\n+            _contextCallback.invokeContextCallback(same(_facesContext), same(_testimpl));\n+            _mocksControl.replay();\n+            assertTrue(_testimpl.invokeOnComponent(_facesContext, \"xxxId\", _contextCallback));\n+            _mocksControl.verify();\n+        }\n+\n+        public void testInvokeOnComponentAndNotFindComponentWithClientId() throws Exception\n+        {\n+            expect(_testimpl.getClientId(same(_facesContext))).andReturn(\"xxxId\");\n+            expect(_testimpl.getFacetsAndChildren()).andReturn(Collections.EMPTY_LIST.iterator());\n+            _mocksControl.replay();\n+            assertFalse(_testimpl.invokeOnComponent(_facesContext, \"xxId\", _contextCallback));\n+            _mocksControl.verify();\n+        }\n+\n+        public void testInvokeOnComponentOnChild() throws Exception\n+        {\n+            expect(_testimpl.getClientId(same(_facesContext))).andReturn(\"xxxId\");\n+            String childId = \"childId\";\n+            UIComponent child = _mocksControl.createMock(UIComponent.class);\n+            expect(_testimpl.getFacetsAndChildren()).andReturn(Collections.singletonList(child).iterator());\n+            expect(child.invokeOnComponent(same(_facesContext), eq(childId), same(_contextCallback))).andReturn(true);\n+            _mocksControl.replay();\n+            assertTrue(_testimpl.invokeOnComponent(_facesContext, \"childId\", _contextCallback));\n+            _mocksControl.verify();\n+        }\n+\n+        public void testInvokeOnComponentExceptions() throws Exception\n+        {\n+            assertException(NullPointerException.class, new TestRunner()\n+            {\n+                public void run() throws Throwable\n+                {\n+                    _testimpl.invokeOnComponent(null, \"xxx\", _contextCallback);\n+                }\n+            });\n+            assertException(NullPointerException.class, new TestRunner()\n+            {\n+                public void run() throws Throwable\n+                {\n+                    _testimpl.invokeOnComponent(_facesContext, null, _contextCallback);\n+                }\n+            });\n+            assertException(NullPointerException.class, new TestRunner()\n+            {\n+                public void run() throws Throwable\n+                {\n+                    _testimpl.invokeOnComponent(_facesContext, \"xxx\", null);\n+                }\n+            });\n+        }\n+    }\n+\n+    /**\n+     * Tests for {@link javax.faces.component.UIComponent#encodeAll(javax.faces.context.FacesContext)}.\n+     */\n+    public static class EncodeAllTest extends UIComponentTestBase\n+    {\n+        private UIComponent _testimpl;\n+\n+        @Override\n+        protected void setUp() throws Exception\n+        {\n+            super.setUp();\n+            Collection<Method> mockedMethods = new ArrayList<Method>();\n+            Class<UIComponent> clazz = UIComponent.class;\n+            mockedMethods.add(clazz.getDeclaredMethod(\"isRendered\", null));\n+            mockedMethods.add(clazz.getDeclaredMethod(\"encodeBegin\", new Class[] { FacesContext.class }));\n+            mockedMethods.add(clazz.getDeclaredMethod(\"getRendersChildren\", null));\n+            mockedMethods.add(clazz.getDeclaredMethod(\"encodeChildren\", new Class[] { FacesContext.class }));\n+            mockedMethods.add(clazz.getDeclaredMethod(\"getChildren\", null));\n+            mockedMethods.add(clazz.getDeclaredMethod(\"encodeEnd\", new Class[] { FacesContext.class }));\n+\n+            _testimpl = _mocksControl.createMock(clazz, mockedMethods.toArray(new Method[mockedMethods.size()]));\n+            _mocksControl.checkOrder(true);\n+        }\n+\n+        public void testEncodeAllNullContext() throws Exception\n+        {\n+            assertException(NullPointerException.class, new TestRunner()\n+            {\n+                public void run() throws Throwable\n+                {\n+                    _testimpl.encodeAll(null);\n+                }\n+            });\n+        }\n+\n+        public void testEncodeAllNotRendered() throws Exception\n+        {\n+            expect(_testimpl.isRendered()).andReturn(false);\n+            _mocksControl.replay();\n+            _testimpl.encodeAll(_facesContext);\n+            _mocksControl.verify();\n+        }\n+\n+        public void testEncodeAllRenderesChildren() throws Exception\n+        {\n+            expect(_testimpl.isRendered()).andReturn(true);\n+            _testimpl.encodeBegin(same(_facesContext));\n+            expect(_testimpl.getRendersChildren()).andReturn(true);\n+            _testimpl.encodeChildren(same(_facesContext));\n+            _testimpl.encodeEnd(same(_facesContext));\n+            _mocksControl.replay();\n+            _testimpl.encodeAll(_facesContext);\n+            _mocksControl.verify();\n+        }\n+\n+        public void testEncodeAllNotRenderesChildren() throws Exception\n+        {\n+            expect(_testimpl.isRendered()).andReturn(true);\n+            _testimpl.encodeBegin(same(_facesContext));\n+            expect(_testimpl.getRendersChildren()).andReturn(false);\n+\n+            List<UIComponent> childs = new ArrayList<UIComponent>();\n+            UIComponent testChild = _mocksControl.createMock(UIComponent.class);\n+            childs.add(testChild);\n+            expect(_testimpl.getChildren()).andReturn(childs);\n+            testChild.encodeAll(same(_facesContext));\n+\n+            _testimpl.encodeEnd(same(_facesContext));\n+            _mocksControl.replay();\n+            _testimpl.encodeAll(_facesContext);\n+            _mocksControl.verify();\n+        }\n+    }\n+\n+    /**\n+     * Test for {@link javax.faces.component.UIComponent#getValueExpression(java.lang.String)}. and\n+     * {@link javax.faces.component.UIComponent#setValueExpression(java.lang.String, javax.el.ValueExpression)}.\n+     */\n+    public static class ValueExpressionUIComponentTest extends UIComponentTestBase\n+    {\n+        private UIComponent _testimpl;\n+        private ValueExpression _expression;\n+        private ELContext _elContext;\n+\n+        @Override\n+        protected void setUp() throws Exception\n+        {\n+            super.setUp();\n+            Collection<Method> mockedMethods = new ArrayList<Method>();\n+            Class<UIComponent> clazz = UIComponent.class;\n+            mockedMethods.add(clazz.getDeclaredMethod(\"getAttributes\", null));\n+            mockedMethods.add(clazz.getDeclaredMethod(\"getFacesContext\", null));\n+\n+            _testimpl = _mocksControl.createMock(clazz, mockedMethods.toArray(new Method[mockedMethods.size()]));\n+            _expression = _mocksControl.createMock(ValueExpression.class);\n+            _elContext = _mocksControl.createMock(ELContext.class);\n+            _mocksControl.checkOrder(true);\n+        }\n+\n+        public void testSetValueExpressionArguments() throws Exception\n+        {\n+            assertException(NullPointerException.class, new SetValueExpressionTestRunner(_testimpl, null, _expression));\n+            assertException(IllegalArgumentException.class, new SetValueExpressionTestRunner(_testimpl, \"id\",\n+                    _expression));\n+            assertException(IllegalArgumentException.class, new SetValueExpressionTestRunner(_testimpl, \"parent\",\n+                    _expression));\n+        }\n+\n+        public void testSetValueExpression() throws Exception\n+        {\n+            expect(_expression.isLiteralText()).andReturn(false);\n+            _mocksControl.replay();\n+            _testimpl.setValueExpression(\"xxx\", _expression);\n+            _mocksControl.verify();\n+            assertEquals(_expression, _testimpl.getValueExpression(\"xxx\"));\n+            _testimpl.setValueExpression(\"xxx\", null);\n+            _mocksControl.verify();\n+            assertNull(_testimpl.getValueExpression(\"xxx\"));\n+            assertNull(_testimpl.bindings);\n+        }\n+\n+        public void testSetValueExpressionWithExceptionOnGetValue() throws Exception\n+        {\n+            assertSetValueExpressionWithExceptionOnGetValue(FacesException.class, new ELException());\n+        }\n+\n+        private void assertSetValueExpressionWithExceptionOnGetValue(Class<? extends Throwable> expected,\n+                Throwable fired)\n+        {\n+            expect(_expression.isLiteralText()).andReturn(true);\n+            expect(_testimpl.getFacesContext()).andReturn(_facesContext);\n+            expect(_facesContext.getELContext()).andReturn(_elContext);\n+            expect(_expression.getValue(eq(_elContext))).andThrow(fired);\n+            Map map = new HashMap();\n+            expect(_testimpl.getAttributes()).andReturn(map);\n+            _mocksControl.replay();\n+            assertException(expected, new TestRunner()\n+            {\n+                public void run() throws Throwable\n+                {\n+                    _testimpl.setValueExpression(\"xxx\", _expression);\n+                }\n+            });\n+            _mocksControl.reset();\n+        }\n+\n+        public void testSetValueExpressionWithLiteralText() throws Exception\n+        {\n+            expect(_expression.isLiteralText()).andReturn(true);\n+            expect(_testimpl.getFacesContext()).andReturn(_facesContext);\n+            expect(_facesContext.getELContext()).andReturn(_elContext);\n+            expect(_expression.getValue(eq(_elContext))).andReturn(\"abc\");\n+            Map map = new HashMap();\n+            expect(_testimpl.getAttributes()).andReturn(map);\n+            _mocksControl.replay();\n+            _testimpl.setValueExpression(\"xxx\", _expression);\n+            assertEquals(\"abc\", map.get(\"xxx\"));\n+            _mocksControl.verify();\n+            assertNull(_testimpl.getValueExpression(\"xxx\"));\n+        }\n+    }\n+\n+    public static class BasicUIComponentTest extends UIComponentTestBase\n+    {\n+        /**\n+         * Test method for {@link javax.faces.component.UIComponent#getFacetCount()}.\n+         */\n+        public void testGetFacetCount() throws Exception\n+        {\n+            UIComponent component = _mocksControl.createMock(UIComponent.class, new Method[] { UIComponent.class\n+                    .getDeclaredMethod(\"getFacets\", null) });\n+            Map<String, UIComponent> map = new HashMap<String, UIComponent>();\n+            map.put(\"xxx1\", new UIInput());\n+            map.put(\"xxx2\", new UIInput());\n+            map.put(\"xxx3\", new UIInput());\n+            expect(component.getFacets()).andReturn(map);\n+            _mocksControl.replay();\n+            assertEquals(3, component.getFacetCount());\n+            _mocksControl.verify();\n+\n+            _mocksControl.reset();\n+            expect(component.getFacets()).andReturn(null);\n+            _mocksControl.replay();\n+            assertEquals(0, component.getFacetCount());\n+            _mocksControl.verify();\n+        }\n+\n+        /**\n+         * Test method for\n+         * {@link javax.faces.component.UIComponent#getContainerClientId(javax.faces.context.FacesContext)}.\n+         * \n+         * @throws Exception\n+         */\n+        public void testGetContainerClientId() throws Exception\n+        {\n+            Collection<Method> mockedMethods = new ArrayList<Method>();\n+            Class<UIComponent> clazz = UIComponent.class;\n+            mockedMethods.add(clazz.getDeclaredMethod(\"getClientId\", new Class[] { FacesContext.class }));\n+            final UIComponent testimpl = _mocksControl.createMock(clazz, mockedMethods.toArray(new Method[mockedMethods\n+                    .size()]));\n+            _mocksControl.checkOrder(true);\n+\n+            assertException(NullPointerException.class, new TestRunner()\n+            {\n+                public void run() throws Throwable\n+                {\n+                    testimpl.getContainerClientId(null);\n+                }\n+            });\n+\n+            expect(testimpl.getClientId(same(_facesContext))).andReturn(\"xyz\");\n+            _mocksControl.replay();\n+            assertEquals(\"xyz\", testimpl.getContainerClientId(_facesContext));\n+            _mocksControl.verify();\n+        }\n+    }\n+\n+    private static class SetValueExpressionTestRunner implements TestRunner\n+    {\n+        private final String _name;\n+        private final ValueExpression _expression;\n+        private final UIComponent _component;\n+\n+        public SetValueExpressionTestRunner(UIComponent component, String name, ValueExpression expression)\n+        {\n+            _component = component;\n+            _name = name;\n+            _expression = expression;\n+        }\n+\n+        public void run() throws Throwable\n+        {\n+            _component.setValueExpression(_name, _expression);\n+        }\n+\n+    }\n+}",
                "raw_url": "https://github.com/apache/myfaces/raw/603ae2579510db74b48ce649501bbeddf6c16b88/api/src/test/java/javax/faces/component/UIComponentTest.java",
                "sha": "a8a0099d522d8c17f08412fb861733c642abcbef",
                "status": "added"
            }
        ],
        "message": "fixed NPE setValueExpression\n+Tests for UIComponent implementation",
        "parent": "https://github.com/apache/myfaces/commit/9224d6401c3ba612d21fc82106eea1a9ba3f43d4",
        "patched_files": [
            "UIComponent.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "UIComponentTest.java"
        ]
    },
    "myfaces_6e742c8": {
        "bug_id": "myfaces_6e742c8",
        "commit": "https://github.com/apache/myfaces/commit/6e742c8869ca3785ff879db5c9cf9d8ff135094c",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/myfaces/blob/6e742c8869ca3785ff879db5c9cf9d8ff135094c/api/src/main/java/javax/faces/component/UIComponent.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIComponent.java?ref=6e742c8869ca3785ff879db5c9cf9d8ff135094c",
                "deletions": 0,
                "filename": "api/src/main/java/javax/faces/component/UIComponent.java",
                "patch": "@@ -653,6 +653,15 @@ public void processEvent(ComponentSystemEvent event) throws AbortProcessingExcep\n     public void subscribeToEvent(Class<? extends SystemEvent> eventClass, ComponentSystemEventListener componentListener) {\n         // The default implementation creates an inner SystemEventListener instance that wraps argument\n         // componentListener as the listener argument.\n+        if (eventClass == null)\n+        {\n+            throw new NullPointerException(\"eventClass required\");\n+        }\n+        if (componentListener == null)\n+        {\n+            throw new NullPointerException(\"componentListener required\");\n+        }\n+        \n         SystemEventListener listener = new EventListenerWrapper(this, componentListener);\n \n         // Make sure the map exists\n@@ -681,6 +690,15 @@ public void unsubscribeFromEvent(Class<? extends SystemEvent> eventClass,\n          * What is that supposed to mean? Are we supposed to keep an internal map of created listener wrappers? TODO:\n          * Check with the EG what's the meaning of this, equals should be commutative -= Simon Lessard =-\n          */\n+        if (eventClass == null)\n+        {\n+            throw new NullPointerException(\"eventClass required\");\n+        }\n+        if (componentListener == null)\n+        {\n+            throw new NullPointerException(\"componentListener required\");\n+        }\n+\n         SystemEventListener listener = new EventListenerWrapper(this, componentListener);\n \n         getFacesContext().getApplication().unsubscribeFromEvent(eventClass, listener);",
                "raw_url": "https://github.com/apache/myfaces/raw/6e742c8869ca3785ff879db5c9cf9d8ff135094c/api/src/main/java/javax/faces/component/UIComponent.java",
                "sha": "27f78805023afb5d6bf2478b7587ef3a53f602f4",
                "status": "modified"
            }
        ],
        "message": "MYFACES-2408 UIComponent.subscribeToEvent and unsubscribeToEvent should throw NullPointerException when eventClass or componentListener is null",
        "parent": "https://github.com/apache/myfaces/commit/93a9c3f457365d8d9143464a5a224197b03eb72a",
        "patched_files": [
            "UIComponent.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "UIComponentTest.java"
        ]
    },
    "myfaces_7599580": {
        "bug_id": "myfaces_7599580",
        "commit": "https://github.com/apache/myfaces/commit/75995807f8c55cede8399655ebfe8d0701c4054d",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/myfaces/blob/75995807f8c55cede8399655ebfe8d0701c4054d/api/src/main/java/javax/faces/component/UIInput.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIInput.java?ref=75995807f8c55cede8399655ebfe8d0701c4054d",
                "deletions": 4,
                "filename": "api/src/main/java/javax/faces/component/UIInput.java",
                "patch": "@@ -123,10 +123,11 @@ public String getFamily()\n     @Override\n     public void setValue(Object value)\n     {\n-        if (getFacesContext().isProjectStage(ProjectStage.Development))\n+        FacesContext facesContext = getFacesContext();\n+        if (facesContext != null && facesContext.isProjectStage(ProjectStage.Development))\n         {\n             // extended debug-info when in Development mode\n-            _createFieldDebugInfo(getFacesContext(), \"localValue\",\n+            _createFieldDebugInfo(facesContext, \"localValue\",\n                     getLocalValue(), value, 1);\n         }\n         setLocalValueSet(true);\n@@ -921,10 +922,11 @@ public Object getSubmittedValue()\n \n     public void setSubmittedValue(Object submittedValue)\n     {\n-        if (getFacesContext().isProjectStage(ProjectStage.Development))\n+        FacesContext facesContext = getFacesContext();\n+        if (facesContext != null && facesContext.isProjectStage(ProjectStage.Development))\n         {\n             // extended debug-info when in Development mode\n-            _createFieldDebugInfo(getFacesContext(), \"submittedValue\",\n+            _createFieldDebugInfo(facesContext, \"submittedValue\",\n                     getSubmittedValue(), submittedValue, 1);\n         }\n         getStateHelper().put(PropertyKeys.submittedValue, submittedValue );",
                "raw_url": "https://github.com/apache/myfaces/raw/75995807f8c55cede8399655ebfe8d0701c4054d/api/src/main/java/javax/faces/component/UIInput.java",
                "sha": "6002040eb0eb22252c6de3a5ff4eb6a46df24ae4",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3434 UIInput.resetValue() throws NPE when no FacesContext available (Thanks to Martin Koci for provide this patch)",
        "parent": "https://github.com/apache/myfaces/commit/76c9ee4335c0210df8c84fcaee584d5e657aa332",
        "patched_files": [
            "UIInput.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "UIInputTest.java"
        ]
    },
    "myfaces_78a99b9": {
        "bug_id": "myfaces_78a99b9",
        "commit": "https://github.com/apache/myfaces/commit/78a99b95e902a2398f12d3d1aed59261e214357b",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/myfaces/blob/78a99b95e902a2398f12d3d1aed59261e214357b/api/src/main/java/javax/faces/component/UIViewRoot.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIViewRoot.java?ref=78a99b95e902a2398f12d3d1aed59261e214357b",
                "deletions": 0,
                "filename": "api/src/main/java/javax/faces/component/UIViewRoot.java",
                "patch": "@@ -1447,6 +1447,7 @@ public Object saveState(FacesContext facesContext)\n             {\n                 listenerSuccessMap.clear();\n             }\n+            _restoreViewScopeStateCalled = false;\n         }\n         if (getResetSaveStateMode() == RESET_MODE_HARD)\n         {\n@@ -1474,6 +1475,7 @@ public Object saveState(FacesContext facesContext)\n                     _viewScope.clear();\n                 }\n             }\n+            _restoreViewScopeStateCalled = false;\n         }\n         \n         if (initialStateMarked())",
                "raw_url": "https://github.com/apache/myfaces/raw/78a99b95e902a2398f12d3d1aed59261e214357b/api/src/main/java/javax/faces/component/UIViewRoot.java",
                "sha": "5c46e451f5a8797ad58cdaefc92f8d349ea4ea2b",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/myfaces/blob/78a99b95e902a2398f12d3d1aed59261e214357b/impl/src/main/java/org/apache/myfaces/view/facelets/ViewPoolProcessor.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/ViewPoolProcessor.java?ref=78a99b95e902a2398f12d3d1aed59261e214357b",
                "deletions": 22,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/ViewPoolProcessor.java",
                "patch": "@@ -409,36 +409,43 @@ public ViewStructureMetadata retrieveViewStructureMetadata(FacesContext context,\n             UIViewRoot root)\n     {\n         ViewPool viewPool = getViewPool(context, root);\n-        FaceletState faceletState = (FaceletState) root.getAttributes().get(\n-                ComponentSupport.FACELET_STATE_INSTANCE);\n-        boolean isDynamic = faceletState != null ? faceletState.isDynamic() : false;\n-        if (!isDynamic)\n-        {\n-            return viewPool.retrieveStaticViewStructureMetadata(context, root);\n-        }\n-        else\n+        if (viewPool != null)\n         {\n-            return viewPool.retrieveDynamicViewStructureMetadata(context, root, faceletState);\n+            FaceletState faceletState = (FaceletState) root.getAttributes().get(\n+                    ComponentSupport.FACELET_STATE_INSTANCE);\n+            boolean isDynamic = faceletState != null ? faceletState.isDynamic() : false;\n+            if (!isDynamic)\n+            {\n+                return viewPool.retrieveStaticViewStructureMetadata(context, root);\n+            }\n+            else\n+            {\n+                return viewPool.retrieveDynamicViewStructureMetadata(context, root, faceletState);\n+            }\n         }\n+        return null;\n     }\n     \n     public void pushResetableView(FacesContext context, UIViewRoot view, FaceletState faceletViewState)\n     {\n         ViewPool viewPool = getViewPool(context, view);\n-        boolean isDynamic = faceletViewState != null ? faceletViewState.isDynamic() : false;\n-        if (!isDynamic)\n-        {\n-            clearTransientAndNonFaceletComponentsForStaticView(context, view);\n-            viewPool.pushStaticStructureView(context, view);\n-        }\n-        else\n+        if (viewPool != null)\n         {\n-            ViewStructureMetadata viewStructureMetadata = viewPool.retrieveDynamicViewStructureMetadata(\n-                context, view, faceletViewState);\n-            if (viewStructureMetadata != null)\n+            boolean isDynamic = faceletViewState != null ? faceletViewState.isDynamic() : false;\n+            if (!isDynamic)\n             {\n-                clearTransientAndNonFaceletComponentsForDynamicView(context, view, viewStructureMetadata);\n-                viewPool.pushDynamicStructureView(context, view, faceletViewState);\n+                clearTransientAndNonFaceletComponentsForStaticView(context, view);\n+                viewPool.pushStaticStructureView(context, view);\n+            }\n+            else\n+            {\n+                ViewStructureMetadata viewStructureMetadata = viewPool.retrieveDynamicViewStructureMetadata(\n+                    context, view, faceletViewState);\n+                if (viewStructureMetadata != null)\n+                {\n+                    clearTransientAndNonFaceletComponentsForDynamicView(context, view, viewStructureMetadata);\n+                    viewPool.pushDynamicStructureView(context, view, faceletViewState);\n+                }\n             }\n         }\n     }\n@@ -447,7 +454,7 @@ public void pushPartialView(FacesContext context, UIViewRoot view, FaceletState\n     {\n         ViewPool viewPool = getViewPool(context, view);\n         \n-        if (viewPool.isWorthToRecycleThisView(context, view))\n+        if (viewPool != null && viewPool.isWorthToRecycleThisView(context, view))\n         {\n             ViewStructureMetadata viewStructureMetadata = null;\n             if (faceletViewState == null)",
                "raw_url": "https://github.com/apache/myfaces/raw/78a99b95e902a2398f12d3d1aed59261e214357b/impl/src/main/java/org/apache/myfaces/view/facelets/ViewPoolProcessor.java",
                "sha": "2e66eb9e8ebc27348e22920bc88bd2da60608653",
                "status": "modified"
            },
            {
                "additions": 179,
                "blob_url": "https://github.com/apache/myfaces/blob/78a99b95e902a2398f12d3d1aed59261e214357b/impl/src/test/java/org/apache/myfaces/view/facelets/pool/ViewPoolMyFacesRequestTestCase.java",
                "changes": 179,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/view/facelets/pool/ViewPoolMyFacesRequestTestCase.java?ref=78a99b95e902a2398f12d3d1aed59261e214357b",
                "deletions": 0,
                "filename": "impl/src/test/java/org/apache/myfaces/view/facelets/pool/ViewPoolMyFacesRequestTestCase.java",
                "patch": "@@ -369,6 +369,137 @@ public void testStaticPage1_4() throws Exception\n         endRequest();\n     }\n     \n+    @Test\n+    public void testStaticPage1_5() throws Exception\n+    {\n+        Locale locale = null;\n+        startViewRequest(\"/staticPage.xhtml\");\n+        processLifecycleExecute();\n+        locale = facesContext.getViewRoot().getLocale();\n+        executeBeforeRender(facesContext);\n+        executeBuildViewCycle(facesContext);\n+\n+        // Use view scope\n+        facesContext.getViewRoot().getViewMap().put(\"someKey\", \"someValue\");\n+        \n+        UICommand submitButton = (UICommand) facesContext.getViewRoot().findComponent(\"mainForm:submit\");\n+        \n+        executeViewHandlerRender(facesContext);\n+        executeAfterRender(facesContext);\n+        \n+        client.submit(submitButton);\n+\n+        processLifecycleExecute();\n+        \n+        executeBeforeRender(facesContext);\n+        executeBuildViewCycle(facesContext);\n+        \n+        //Check if the view scope value is preserved\n+        Assert.assertEquals(\"someValue\", facesContext.getViewRoot().getViewMap().get(\"someKey\"));\n+        \n+        facesContext.getViewRoot().getViewMap().put(\"someKey\", \"someValue2\");\n+        \n+        submitButton = (UICommand) facesContext.getViewRoot().findComponent(\"mainForm:submit\");\n+        \n+        executeViewHandlerRender(facesContext);\n+        executeAfterRender(facesContext);\n+        \n+        client.submit(submitButton);\n+\n+        processLifecycleExecute();\n+        \n+        executeBeforeRender(facesContext);\n+        executeBuildViewCycle(facesContext);\n+        \n+        //Check if the view scope value is preserved\n+        Assert.assertEquals(\"someValue2\", facesContext.getViewRoot().getViewMap().get(\"someKey\"));\n+        \n+        Assert.assertTrue(facesContext.getViewRoot().getChildCount() > 0);\n+        \n+        executeViewHandlerRender(facesContext);\n+        executeAfterRender(facesContext);\n+        \n+        UIViewRoot root = new UIViewRoot();\n+        root.setLocale(locale);\n+        root.setRenderKitId(\"HTML_BASIC\");\n+        root.setViewId(\"/staticPage.xhtml\");\n+        \n+        ViewPoolProcessor processor = ViewPoolProcessor.getInstance(facesContext);\n+        ViewPool viewPool = processor.getViewPool(facesContext, root);\n+        ViewEntry entry = viewPool.popStaticOrPartialStructureView(facesContext, root);\n+        Assert.assertNotNull(entry);\n+        Assert.assertEquals(RestoreViewFromPoolResult.COMPLETE, entry.getResult());\n+        \n+        endRequest();\n+    }    \n+    \n+    @Test\n+    public void testStaticPage1_6() throws Exception\n+    {\n+        Locale locale = null;\n+        startViewRequest(\"/staticPage3.xhtml\");\n+        processLifecycleExecute();\n+        locale = facesContext.getViewRoot().getLocale();\n+        executeBeforeRender(facesContext);\n+        executeBuildViewCycle(facesContext);\n+\n+        // Use view scope\n+        facesContext.getViewRoot().getViewMap().put(\"someKey\", \"someValue\");\n+        Assert.assertEquals(\"viewValue\", facesContext.getViewRoot().getViewMap().get(\"viewKey\"));\n+        \n+        UICommand submitButton = (UICommand) facesContext.getViewRoot().findComponent(\"mainForm:submit\");\n+        \n+        executeViewHandlerRender(facesContext);\n+        executeAfterRender(facesContext);\n+        \n+        client.submit(submitButton);\n+\n+        processLifecycleExecute();\n+        \n+        executeBeforeRender(facesContext);\n+        executeBuildViewCycle(facesContext);\n+        \n+        //Check if the view scope value is preserved\n+        Assert.assertEquals(\"someValue\", facesContext.getViewRoot().getViewMap().get(\"someKey\"));\n+        Assert.assertEquals(\"viewValue\", facesContext.getViewRoot().getViewMap().get(\"viewKey\"));\n+        \n+        facesContext.getViewRoot().getViewMap().put(\"someKey\", \"someValue2\");\n+        \n+        submitButton = (UICommand) facesContext.getViewRoot().findComponent(\"mainForm:submit\");\n+        \n+        executeViewHandlerRender(facesContext);\n+        executeAfterRender(facesContext);\n+        \n+        client.submit(submitButton);\n+\n+        processLifecycleExecute();\n+        \n+        executeBeforeRender(facesContext);\n+        executeBuildViewCycle(facesContext);\n+        \n+        //Check if the view scope value is preserved\n+        Assert.assertEquals(\"someValue2\", facesContext.getViewRoot().getViewMap().get(\"someKey\"));\n+        Assert.assertEquals(\"viewValue\", facesContext.getViewRoot().getViewMap().get(\"viewKey\"));\n+        \n+        Assert.assertTrue(facesContext.getViewRoot().getChildCount() > 0);\n+        \n+        executeViewHandlerRender(facesContext);\n+        executeAfterRender(facesContext);\n+        \n+        UIViewRoot root = new UIViewRoot();\n+        root.setLocale(locale);\n+        root.setRenderKitId(\"HTML_BASIC\");\n+        root.setViewId(\"/staticPage3.xhtml\");\n+        \n+        ViewPoolProcessor processor = ViewPoolProcessor.getInstance(facesContext);\n+        ViewPool viewPool = processor.getViewPool(facesContext, root);\n+        ViewEntry entry = viewPool.popStaticOrPartialStructureView(facesContext, root);\n+        Assert.assertNotNull(entry);\n+        Assert.assertEquals(RestoreViewFromPoolResult.COMPLETE, entry.getResult());\n+        \n+        endRequest();\n+    }    \n+    \n     @Test\n     public void testStaticPage2() throws Exception\n     {\n@@ -1785,6 +1916,54 @@ public void testPartialPage1_1() throws Exception\n         \n     }\n     \n+    @Test\n+    public void testPartialPage1_2() throws Exception\n+    {\n+        Locale locale = null;\n+        startViewRequest(\"/partialPage1.xhtml\");\n+        processLifecycleExecute();\n+        locale = facesContext.getViewRoot().getLocale();\n+\n+        executeBuildViewCycle(facesContext);\n+        \n+        // Now let's try to remove some component programatically\n+        // that invalidates the view to be reused without a refresh,\n+        // so in the pool it should be marked as REFRESH_REQUIRED\n+        UIPanel panel = (UIPanel) facesContext.getViewRoot().findComponent(\"mainForm:panel1\");\n+        panel.getParent().getChildren().remove(panel);\n+\n+        facesContext.getViewRoot().getViewMap().put(\"someKey\", \"someValue\");\n+        \n+        UICommand submitButton = (UICommand) facesContext.getViewRoot().findComponent(\"mainForm:submit\");\n+\n+        executeViewHandlerRender(facesContext);\n+        executeAfterRender(facesContext);\n+        \n+        client.submit(submitButton);\n+        \n+        processLifecycleExecute();\n+        \n+        Assert.assertEquals(\"someValue\", facesContext.getViewRoot().getViewMap().get(\"someKey\"));\n+        \n+        FaceletState faceletState = (FaceletState) facesContext.getViewRoot().getAttributes().get(\n+            ComponentSupport.FACELET_STATE_INSTANCE);        \n+                \n+        UIViewRoot root = new UIViewRoot();\n+        root.setLocale(locale);\n+        root.setRenderKitId(\"HTML_BASIC\");\n+        root.setViewId(\"/partialPage1.xhtml\");\n+        \n+        ViewPoolProcessor processor = ViewPoolProcessor.getInstance(facesContext);\n+        ViewPool viewPool = processor.getViewPool(facesContext, root);\n+        // Check the view was used\n+        ViewEntry entry2 = viewPool.popStaticOrPartialStructureView(facesContext, root);\n+        Assert.assertNull(entry2);\n+        ViewEntry entry3 = viewPool.popDynamicStructureView(facesContext, root, faceletState);\n+        Assert.assertNull(entry3);\n+        \n+    }    \n+    \n+    \n     //Pending tests:\n     // - Partial\n }",
                "raw_url": "https://github.com/apache/myfaces/raw/78a99b95e902a2398f12d3d1aed59261e214357b/impl/src/test/java/org/apache/myfaces/view/facelets/pool/ViewPoolMyFacesRequestTestCase.java",
                "sha": "dd4d5bd0d01f69b0243d9a97197ea8936da4004e",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/myfaces/blob/78a99b95e902a2398f12d3d1aed59261e214357b/impl/src/test/resources/org/apache/myfaces/view/facelets/pool/staticPage3.xhtml",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/resources/org/apache/myfaces/view/facelets/pool/staticPage3.xhtml?ref=78a99b95e902a2398f12d3d1aed59261e214357b",
                "deletions": 0,
                "filename": "impl/src/test/resources/org/apache/myfaces/view/facelets/pool/staticPage3.xhtml",
                "patch": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n+        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"\n+      xmlns:h=\"http://java.sun.com/jsf/html\"\n+      xmlns:f=\"http://java.sun.com/jsf/core\"\n+      xmlns:c=\"http://java.sun.com/jsp/jstl/core\">\n+<head>\n+    <title>Test Static Page</title>\n+</head>\n+<body>\n+    <div id=\"container\">\n+        <h1>Test cache of static page</h1>\n+        <!-- <h:messages showDetail=\"true\" showSummary=\"false\"/>  -->\n+        <c:set var=\"viewKey\" value=\"viewValue\" scope=\"view\" />\n+        <h:form id=\"mainForm\">\n+            <h:panelGrid id=\"testGroup1\" columns=\"2\">\n+                <h:outputLabel for=\"name\" value=\"Please enter your name\"/>\n+                <h:inputText id=\"name\" required=\"true\"/>\n+                <h:commandButton id=\"submit\" value=\"Submit\"/>\n+            </h:panelGrid>\n+        </h:form>\n+    </div>\n+</body>\n+</html>",
                "raw_url": "https://github.com/apache/myfaces/raw/78a99b95e902a2398f12d3d1aed59261e214357b/impl/src/test/resources/org/apache/myfaces/view/facelets/pool/staticPage3.xhtml",
                "sha": "4fd1a570a8a7915dff945e0034e1a93532cd0688",
                "status": "added"
            }
        ],
        "message": "MYFACES-3966 Setting oamEnableViewPool=\"false\" causes NullPointerException in ViewPoolProcessor.pushPartialView()",
        "parent": "https://github.com/apache/myfaces/commit/0fd5efef5555d40ddcaa598c1ebec22d578593d2",
        "patched_files": [
            "UIViewRoot.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "UIViewRootTest.java"
        ]
    },
    "myfaces_7dddc0a": {
        "bug_id": "myfaces_7dddc0a",
        "commit": "https://github.com/apache/myfaces/commit/7dddc0aa1d8b16adbd93a70b1275e0d0ab843210",
        "file": [
            {
                "additions": 445,
                "blob_url": "https://github.com/apache/myfaces/blob/7dddc0aa1d8b16adbd93a70b1275e0d0ab843210/api/src/test/java/javax/faces/component/UIComponentBaseTest.java",
                "changes": 891,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/test/java/javax/faces/component/UIComponentBaseTest.java?ref=7dddc0aa1d8b16adbd93a70b1275e0d0ab843210",
                "deletions": 446,
                "filename": "api/src/test/java/javax/faces/component/UIComponentBaseTest.java",
                "patch": "@@ -1,446 +1,445 @@\n-/*\n- * Copyright 2004-2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package javax.faces.component;\n-\n-import javax.faces.context.FacesContext;\n-import javax.faces.el.ValueBinding;\n-import javax.faces.FactoryFinder;\n-import org.apache.myfaces.mock.api.MockApplicationFactory;\n-import org.apache.myfaces.mock.api.MockRenderKitFactory;\n-\n-import org.apache.myfaces.AbstractTestCase;\n-import org.apache.myfaces.mock.api.MockFacesContextHelper;\n-import org.apache.myfaces.mock.api.MockFacesContext;\n-import org.easymock.MockControl;\n-import org.easymock.classextension.MockClassControl;\n-\n-public class UIComponentBaseTest extends AbstractTestCase {\n-  UIComponentBase mock = null;\n-  public static void main(String[] args) {\n-    junit.textui.TestRunner.run(UIComponentBaseTest.class);\n-  }\n-\n-  public UIComponentBaseTest(String name) {\n-    super(name);\n-  }\n-\n-  protected void setUp() throws Exception {\n-    super.setUp();\n-    \n-    mock = new UIComponentMock();\n-  }\n-\n-  protected void tearDown() throws Exception {\n-    super.tearDown();\n-    mock = null;\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.isRendered()'\n-   */\n-  public void testIsRendered() {\n-    // defaults to true\n-    assertTrue(mock.isRendered());\n-  }\n-\n-  public void testIsRenderedValueSet() {\n-    mock.setRendered(true);\n-    assertTrue(mock.isRendered());\n-    mock.setRendered(false);\n-    assertFalse(mock.isRendered());\n-  }\n-\n-  public void testIsRenderedBinding() {\n-    MockControl bindingControl = MockClassControl.createControl(ValueBinding.class);\n-    ValueBinding mockBinding = (ValueBinding)bindingControl.getMock();\n-    mockBinding.getValue(null);\n-    bindingControl.setReturnValue(Boolean.FALSE);\n-    bindingControl.replay();\n-    mock.setValueBinding(\"rendered\", mockBinding);\n-    assertFalse(mock.isRendered());\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getRendersChildren()'\n-   */\n-  public void testGetRendersChildren() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getChildCount()'\n-   */\n-  public void testGetChildCount() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.UIComponentBase()'\n-   */\n-  public void testUIComponentBase() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getAttributes()'\n-   */\n-  public void testGetAttributes() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getValueBinding(String)'\n-   */\n-  public void testGetValueBindingString() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.setValueBinding(String, ValueBinding)'\n-   */\n-  public void testSetValueBindingStringValueBinding() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getClientId(FacesContext)'\n-   */\n-  public void testGetClientIdFacesContext() {\n-\n-      FacesContext context = new MockFacesContext();\n-\n-      UIInput input = createInputInTree(context);\n-\n-      String str = input.getClientId(context);\n-\n-      assertEquals(str, \"data:input\");\n-\n-      UIData uiData = (UIData) input.getParent().getParent();\n-\n-      uiData.setRowIndex(1);\n-\n-      str = input.getClientId(context);\n-  }\n-\n-    private UIInput createInputInTree(FacesContext context)\n-    {\n-        UIViewRoot viewRoot = new UIViewRoot();\n-        viewRoot.setId(\"root\");\n-\n-        UIData uiData = new UIData();\n-        uiData.setId(\"data\");\n-\n-        UIColumn column = new UIColumn();\n-\n-        uiData.getChildren().add(column);\n-\n-        UIInput input = new UIInput();\n-        input.setId(\"input\");\n-\n-        column.getChildren().add(input);\n-\n-        viewRoot.getChildren().add(uiData);\n-\n-        FactoryFinder.setFactory(FactoryFinder.APPLICATION_FACTORY,\n-          MockApplicationFactory.class.getName());\n-\n-        FactoryFinder.setFactory(FactoryFinder.RENDER_KIT_FACTORY,\n-          MockRenderKitFactory.class.getName());\n-\n-        context.setViewRoot(viewRoot);\n-\n-        MockFacesContextHelper.setCurrentInstance(context);\n-        return input;\n-    }\n-\n-    /*\n-    * Test method for 'javax.faces.component.UIComponentBase.getId()'\n-    */\n-    public void testGetId() {\n-\n-    }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.setId(String)'\n-   */\n-  public void testSetIdString() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getParent()'\n-   */\n-  public void testGetParent() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.setParent(UIComponent)'\n-   */\n-  public void testSetParentUIComponent() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getChildren()'\n-   */\n-  public void testGetChildren() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.findComponent(String)'\n-   */\n-  public void testFindComponentString() {\n-      FacesContext context = new MockFacesContext();\n-\n-      UIInput input = createInputInTree(context);\n-\n-      UIComponent comp = input.findComponent(\":data:input\");\n-\n-      assertEquals(input, comp);\n-\n-      comp = input.findComponent(\"input\");\n-\n-      assertEquals(input, comp);\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getFacets()'\n-   */\n-  public void testGetFacets() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getFacet(String)'\n-   */\n-  public void testGetFacetString() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getFacetsAndChildren()'\n-   */\n-  public void testGetFacetsAndChildren() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.broadcast(FacesEvent)'\n-   */\n-  public void testBroadcastFacesEvent() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.decode(FacesContext)'\n-   */\n-  public void testDecodeFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.encodeBegin(FacesContext)'\n-   */\n-  public void testEncodeBeginFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.encodeChildren(FacesContext)'\n-   */\n-  public void testEncodeChildrenFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.encodeEnd(FacesContext)'\n-   */\n-  public void testEncodeEndFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.addFacesListener(FacesListener)'\n-   */\n-  public void testAddFacesListenerFacesListener() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getFacesListeners(Class)'\n-   */\n-  public void testGetFacesListenersClass() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.removeFacesListener(FacesListener)'\n-   */\n-  public void testRemoveFacesListenerFacesListener() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.queueEvent(FacesEvent)'\n-   */\n-  public void testQueueEventFacesEvent() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.processDecodes(FacesContext)'\n-   */\n-  public void testProcessDecodesFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.processValidators(FacesContext)'\n-   */\n-  public void testProcessValidatorsFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.processUpdates(FacesContext)'\n-   */\n-  public void testProcessUpdatesFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.processSaveState(FacesContext)'\n-   */\n-  public void testProcessSaveStateFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.processRestoreState(FacesContext, Object)'\n-   */\n-  public void testProcessRestoreStateFacesContextObject() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getFacesContext()'\n-   */\n-  public void testGetFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getRenderer(FacesContext)'\n-   */\n-  public void testGetRendererFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getPathToComponent(UIComponent)'\n-   */\n-  public void testGetPathToComponent() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.isTransient()'\n-   */\n-  public void testIsTransient() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.setTransient(boolean)'\n-   */\n-  public void testSetTransient() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.saveAttachedState(FacesContext, Object)'\n-   */\n-  public void testSaveAttachedState() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.restoreAttachedState(FacesContext, Object)'\n-   */\n-  public void testRestoreAttachedState() {\n-\n-  }\n-\n-  public void testSaveState() throws Exception {\n-    MockControl contextControl = MockClassControl.createControl(FacesContext.class);\n-    FacesContext facesContext = (FacesContext)contextControl.getMock();\n-    contextControl.replay();\n-    try {\n-      String id = \"id\";\n-      String rendererType = \"Whumpy\";\n-      mock.setId(id);\n-      mock.setRendered(true);\n-      mock.setRendererType(rendererType);\n-      Object value[] = (Object[])mock.saveState(facesContext);\n-      assertEquals(id, value[0]);\n-      assertEquals(Boolean.TRUE, value[1]);\n-      assertEquals(rendererType, value[2]);\n-      // the object 'mock' here, must be the same before and after saveState\n-      // calling getClientId in the saveState method would change the state\n-      // so it must be null if getClientId has not been called\n-      assertNull(value[3]);\n-      assertNull(value[4]);\n-      assertNull(value[5]);\n-      assertNull(value[6]);\n-    } catch (NullPointerException e) {\n-      fail(\"Should not throw an exception\");\n-    }\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.restoreState(FacesContext, Object)'\n-   */\n-  public void testRestoreState() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.setRendererType(String)'\n-   */\n-  public void testSetRendererType() {\n-    assertNull(mock.getRendererType());\n-  }\n-  public void testSetRendererTypeStringValue() {\n-    String rendererType = \"BlueBlorf\";\n-    mock.setRendererType(rendererType);\n-    assertEquals(mock.getRendererType(), rendererType);\n-  }\n-  public void testSetRendererTypeStringBinding() {\n-    MockControl bindingControl = MockClassControl.createControl(ValueBinding.class);\n-    ValueBinding mockBinding = (ValueBinding)bindingControl.getMock();\n-    mockBinding.getValue(null);\n-    String whumpy = \"Whumpy\";\n-    bindingControl.setReturnValue(whumpy);\n-    bindingControl.replay();\n-    mock.setValueBinding(\"rendererType\", mockBinding);\n-    assertEquals(mock.getRendererType(), whumpy);\n-  }\n-\n-}\n+/*\r\n+ * Copyright 2004-2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.faces.component;\r\n+\r\n+import javax.faces.context.FacesContext;\r\n+import javax.faces.el.ValueBinding;\r\n+import javax.faces.FactoryFinder;\r\n+\r\n+import junit.framework.Test;\r\n+\r\n+import org.apache.shale.test.base.AbstractJsfTestCase;\r\n+import org.apache.shale.test.mock.MockApplicationFactory;\r\n+import org.apache.shale.test.mock.MockRenderKitFactory;\r\n+import org.apache.shale.test.mock.MockValueBinding;\r\n+\r\n+public class UIComponentBaseTest extends AbstractJsfTestCase {\r\n+\tUIComponentBase mock = null;\r\n+\r\n+\tpublic static void main(String[] args) {\r\n+\t\tjunit.textui.TestRunner.run(UIComponentBaseTest.class);\r\n+\t}\r\n+\r\n+\tpublic UIComponentBaseTest(String name) {\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic static Test suite() {\r\n+\t\treturn null; // keep this method or maven won't run it\r\n+\t}\r\n+\r\n+\tpublic void setUp() {\r\n+\t\tsuper.setUp();\r\n+\r\n+\t\tmock = new UIComponentMock();\r\n+\t}\r\n+\r\n+\tpublic void tearDown() {\r\n+\t\tsuper.tearDown();\r\n+\t\tmock = null;\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.isRendered()'\r\n+\t */\r\n+\tpublic void testIsRendered() {\r\n+\t\t// defaults to true\r\n+\t\tassertTrue(mock.isRendered());\r\n+\t}\r\n+\r\n+\tpublic void testIsRenderedValueSet() {\r\n+\t\tmock.setRendered(true);\r\n+\t\tassertTrue(mock.isRendered());\r\n+\t\tmock.setRendered(false);\r\n+\t\tassertFalse(mock.isRendered());\r\n+\t}\r\n+\r\n+\tpublic void testIsRenderedBinding() {\r\n+\r\n+\t\tValueBinding vb = new MockValueBinding(application,\r\n+\t\t\t\t\"#{requestScope.foo}\");\r\n+\t\texternalContext.getRequestMap().put(\"foo\", new Boolean(false));\r\n+\r\n+\t\tmock.setValueBinding(\"rendered\", vb);\r\n+\t\tassertFalse(mock.isRendered());\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getRendersChildren()'\r\n+\t */\r\n+\tpublic void testGetRendersChildren() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getChildCount()'\r\n+\t */\r\n+\tpublic void testGetChildCount() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.UIComponentBase()'\r\n+\t */\r\n+\tpublic void testUIComponentBase() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getAttributes()'\r\n+\t */\r\n+\tpublic void testGetAttributes() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getValueBinding(String)'\r\n+\t */\r\n+\tpublic void testGetValueBindingString() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.setValueBinding(String, ValueBinding)'\r\n+\t */\r\n+\tpublic void testSetValueBindingStringValueBinding() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getClientId(FacesContext)'\r\n+\t */\r\n+\tpublic void testGetClientIdFacesContext() {\r\n+\r\n+\t\tUIInput input = createInputInTree(facesContext);\r\n+\r\n+\t\tString str = input.getClientId(facesContext);\r\n+\r\n+\t\tassertEquals(str, \"data:input\");\r\n+\r\n+\t\tUIData uiData = (UIData) input.getParent().getParent();\r\n+\r\n+\t\tuiData.setRowIndex(1);\r\n+\r\n+\t\tstr = input.getClientId(facesContext);\r\n+\t}\r\n+\r\n+\tprivate UIInput createInputInTree(FacesContext context) {\r\n+\t\tUIViewRoot viewRoot = new UIViewRoot();\r\n+\t\tviewRoot.setId(\"root\");\r\n+\r\n+\t\tUIData uiData = new UIData();\r\n+\t\tuiData.setId(\"data\");\r\n+\r\n+\t\tUIColumn column = new UIColumn();\r\n+\r\n+\t\tuiData.getChildren().add(column);\r\n+\r\n+\t\tUIInput input = new UIInput();\r\n+\t\tinput.setId(\"input\");\r\n+\r\n+\t\tcolumn.getChildren().add(input);\r\n+\r\n+\t\tviewRoot.getChildren().add(uiData);\r\n+\r\n+\t\tFactoryFinder.setFactory(FactoryFinder.APPLICATION_FACTORY,\r\n+\t\t\t\tMockApplicationFactory.class.getName());\r\n+\r\n+\t\tFactoryFinder.setFactory(FactoryFinder.RENDER_KIT_FACTORY,\r\n+\t\t\t\tMockRenderKitFactory.class.getName());\r\n+\r\n+\t\tcontext.setViewRoot(viewRoot);\r\n+\r\n+\t\treturn input;\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getId()'\r\n+\t */\r\n+\tpublic void testGetId() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.setId(String)'\r\n+\t */\r\n+\tpublic void testSetIdString() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getParent()'\r\n+\t */\r\n+\tpublic void testGetParent() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.setParent(UIComponent)'\r\n+\t */\r\n+\tpublic void testSetParentUIComponent() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getChildren()'\r\n+\t */\r\n+\tpublic void testGetChildren() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.findComponent(String)'\r\n+\t */\r\n+\tpublic void testFindComponentString() {\r\n+\r\n+\t\tUIInput input = createInputInTree(facesContext);\r\n+\r\n+\t\tUIComponent comp = input.findComponent(\":data:input\");\r\n+\r\n+\t\tassertEquals(input, comp);\r\n+\r\n+\t\tcomp = input.findComponent(\"input\");\r\n+\r\n+\t\tassertEquals(input, comp);\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getFacets()'\r\n+\t */\r\n+\tpublic void testGetFacets() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getFacet(String)'\r\n+\t */\r\n+\tpublic void testGetFacetString() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getFacetsAndChildren()'\r\n+\t */\r\n+\tpublic void testGetFacetsAndChildren() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.broadcast(FacesEvent)'\r\n+\t */\r\n+\tpublic void testBroadcastFacesEvent() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.decode(FacesContext)'\r\n+\t */\r\n+\tpublic void testDecodeFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.encodeBegin(FacesContext)'\r\n+\t */\r\n+\tpublic void testEncodeBeginFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.encodeChildren(FacesContext)'\r\n+\t */\r\n+\tpublic void testEncodeChildrenFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.encodeEnd(FacesContext)'\r\n+\t */\r\n+\tpublic void testEncodeEndFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.addFacesListener(FacesListener)'\r\n+\t */\r\n+\tpublic void testAddFacesListenerFacesListener() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getFacesListeners(Class)'\r\n+\t */\r\n+\tpublic void testGetFacesListenersClass() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.removeFacesListener(FacesListener)'\r\n+\t */\r\n+\tpublic void testRemoveFacesListenerFacesListener() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.queueEvent(FacesEvent)'\r\n+\t */\r\n+\tpublic void testQueueEventFacesEvent() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.processDecodes(FacesContext)'\r\n+\t */\r\n+\tpublic void testProcessDecodesFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.processValidators(FacesContext)'\r\n+\t */\r\n+\tpublic void testProcessValidatorsFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.processUpdates(FacesContext)'\r\n+\t */\r\n+\tpublic void testProcessUpdatesFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.processSaveState(FacesContext)'\r\n+\t */\r\n+\tpublic void testProcessSaveStateFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.processRestoreState(FacesContext, Object)'\r\n+\t */\r\n+\tpublic void testProcessRestoreStateFacesContextObject() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getFacesContext()'\r\n+\t */\r\n+\tpublic void testGetFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getRenderer(FacesContext)'\r\n+\t */\r\n+\tpublic void testGetRendererFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getPathToComponent(UIComponent)'\r\n+\t */\r\n+\tpublic void testGetPathToComponent() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.isTransient()'\r\n+\t */\r\n+\tpublic void testIsTransient() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.setTransient(boolean)'\r\n+\t */\r\n+\tpublic void testSetTransient() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.saveAttachedState(FacesContext, Object)'\r\n+\t */\r\n+\tpublic void testSaveAttachedState() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.restoreAttachedState(FacesContext, Object)'\r\n+\t */\r\n+\tpublic void testRestoreAttachedState() {\r\n+\r\n+\t}\r\n+\r\n+\tpublic void testSaveState() throws Exception {\r\n+\r\n+\t\ttry {\r\n+\t\t\tString id = \"id\";\r\n+\t\t\tString rendererType = \"Whumpy\";\r\n+\t\t\tmock.setId(id);\r\n+\t\t\tmock.setRendered(true);\r\n+\t\t\tmock.setRendererType(rendererType);\r\n+\t\t\tObject value[] = (Object[]) mock.saveState(facesContext);\r\n+\t\t\tassertEquals(id, value[0]);\r\n+\t\t\tassertEquals(Boolean.TRUE, value[1]);\r\n+\t\t\tassertEquals(rendererType, value[2]);\r\n+\r\n+\t\t\tassertNull(value[3]);\r\n+\t\t\tassertNull(value[4]);\r\n+\t\t\tassertNull(value[5]);\r\n+\t\t\tassertNull(value[6]);\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\tfail(\"Should not throw an exception\");\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.restoreState(FacesContext, Object)'\r\n+\t */\r\n+\tpublic void testRestoreState() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.setRendererType(String)'\r\n+\t */\r\n+\tpublic void testSetRendererType() {\r\n+\t\tassertNull(mock.getRendererType());\r\n+\t}\r\n+\r\n+\tpublic void testSetRendererTypeStringValue() {\r\n+\t\tString rendererType = \"BlueBlorf\";\r\n+\t\tmock.setRendererType(rendererType);\r\n+\t\tassertEquals(mock.getRendererType(), rendererType);\r\n+\t}\r\n+\r\n+\tpublic void testSetRendererTypeStringBinding() {\r\n+\r\n+\t\tString whumpy = \"Whumpy\";\r\n+\r\n+\t\tValueBinding vb = new MockValueBinding(application,\r\n+\t\t\t\t\"#{requestScope.foo}\");\r\n+\t\texternalContext.getRequestMap().put(\"foo\", whumpy);\r\n+\r\n+\t\tmock.setValueBinding(\"rendererType\", vb);\r\n+\t\tassertEquals(mock.getRendererType(), whumpy);\r\n+\r\n+\t}\r\n+\r\n+}\r",
                "raw_url": "https://github.com/apache/myfaces/raw/7dddc0aa1d8b16adbd93a70b1275e0d0ab843210/api/src/test/java/javax/faces/component/UIComponentBaseTest.java",
                "sha": "4bb4f957052cfd6f511225657ba9bc5b10af9585",
                "status": "modified"
            }
        ],
        "message": "refactored test and fixed a pre-existing NPE failure",
        "parent": "https://github.com/apache/myfaces/commit/8910141a9bdb0dbd10a907731584d5e083f15063",
        "patched_files": [
            "UIComponentBase.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "UIComponentBaseTest.java"
        ]
    },
    "myfaces_871514c": {
        "bug_id": "myfaces_871514c",
        "commit": "https://github.com/apache/myfaces/commit/871514cb70975893c0942717c17c14722146bdf5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/myfaces/blob/871514cb70975893c0942717c17c14722146bdf5/api/src/main/java/javax/faces/component/UIViewParameter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIViewParameter.java?ref=871514cb70975893c0942717c17c14722146bdf5",
                "deletions": 1,
                "filename": "api/src/main/java/javax/faces/component/UIViewParameter.java",
                "patch": "@@ -103,7 +103,7 @@ public void encodeAll(FacesContext context) throws IOException\n \n     public String getName()\n     {\n-        return (String) getStateHelper().get(PropertyKeys.name);\n+        return (String) getStateHelper().eval(PropertyKeys.name);\n     }\n \n     public String getStringValue(FacesContext context)",
                "raw_url": "https://github.com/apache/myfaces/raw/871514cb70975893c0942717c17c14722146bdf5/api/src/main/java/javax/faces/component/UIViewParameter.java",
                "sha": "399caf96656872117c26cc27577bf2c367873de9",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3617 NullPointerException occurs when using an EL Expression in f:viewParam name attribute (thanks to Paul Nicolucci for help testing this patch)",
        "parent": "https://github.com/apache/myfaces/commit/0127defb2fa604aadbc29f7a8a8097dcb1a48a2e",
        "patched_files": [
            "UIViewParameter.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "UIViewParameterTest.java"
        ]
    },
    "myfaces_8fb098e": {
        "bug_id": "myfaces_8fb098e",
        "commit": "https://github.com/apache/myfaces/commit/8fb098e8d9192454f1fe5db212e85c7395e3d0d4",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/myfaces/blob/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/api/src/main/java/javax/faces/component/UIData.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIData.java?ref=8fb098e8d9192454f1fe5db212e85c7395e3d0d4",
                "deletions": 0,
                "filename": "api/src/main/java/javax/faces/component/UIData.java",
                "patch": "@@ -1571,6 +1571,10 @@ public String getContainerClientId(FacesContext context)\n     @Override\n     public void queueEvent(FacesEvent event)\n     {\n+        if (event == null)\n+        {\n+            throw new NullPointerException(\"event\");\n+        }\n         super.queueEvent(new FacesEventWrapper(event, getRowIndex(), this));\n     }\n ",
                "raw_url": "https://github.com/apache/myfaces/raw/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/api/src/main/java/javax/faces/component/UIData.java",
                "sha": "83c117430941abed1715908871038e6a3c98843f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/myfaces/blob/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/api/src/main/java/javax/faces/component/UIInput.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIInput.java?ref=8fb098e8d9192454f1fe5db212e85c7395e3d0d4",
                "deletions": 0,
                "filename": "api/src/main/java/javax/faces/component/UIInput.java",
                "patch": "@@ -387,6 +387,10 @@ public void broadcast(FacesEvent event) throws AbortProcessingException\n \n     public void updateModel(FacesContext context)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException();\n+        }\n         if (!isValid())\n         {\n             return;",
                "raw_url": "https://github.com/apache/myfaces/raw/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/api/src/main/java/javax/faces/component/UIInput.java",
                "sha": "fe7bb9683aec8b4ad00b1dc4ad9f938e1cb1adf9",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/myfaces/blob/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/api/src/main/java/javax/faces/event/FacesEvent.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/event/FacesEvent.java?ref=8fb098e8d9192454f1fe5db212e85c7395e3d0d4",
                "deletions": 0,
                "filename": "api/src/main/java/javax/faces/event/FacesEvent.java",
                "patch": "@@ -65,6 +65,10 @@ public PhaseId getPhaseId()\n \n     public void setPhaseId(PhaseId phaseId)\n     {\n+        if (phaseId == null)\n+        {\n+            throw new IllegalArgumentException(\"phaseId\");\n+        }\n         _phaseId = phaseId;\n     }\n }",
                "raw_url": "https://github.com/apache/myfaces/raw/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/api/src/main/java/javax/faces/event/FacesEvent.java",
                "sha": "2f39e26c76689deddab7b6e4cbb767dc73ed167a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/myfaces/blob/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java?ref=8fb098e8d9192454f1fe5db212e85c7395e3d0d4",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java",
                "patch": "@@ -262,12 +262,16 @@ public UIViewRoot createView(FacesContext context, String viewId)\n     @Override\n     public String getActionURL(FacesContext context, String viewId)\n     {\n+        checkNull(context, \"facesContext\");\n+        checkNull(viewId, \"viewId\");\n         return getViewHandlerSupport(context).calculateActionURL(context, viewId);\n     }\n \n     @Override\n     public String getResourceURL(FacesContext facesContext, String path)\n     {\n+        checkNull(facesContext, \"facesContext\");\n+        checkNull(path, \"path\");\n         if (path.length() > 0 && path.charAt(0) == '/')\n         {\n             return facesContext.getExternalContext().getRequestContextPath() + path;",
                "raw_url": "https://github.com/apache/myfaces/raw/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java",
                "sha": "54b52dab68ec3162725f3520d73c76e296d4ea25",
                "status": "modified"
            }
        ],
        "message": "add NullPointerException check",
        "parent": "https://github.com/apache/myfaces/commit/178b9577502aad5d1b9385fdac5904c5fb8696b5",
        "patched_files": [
            "UIInput.java",
            "ViewHandlerImpl.java",
            "UIData.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "UIInputTest.java",
            "ViewHandlerImplTest.java",
            "UIDataTest.java"
        ]
    },
    "myfaces_930a697": {
        "bug_id": "myfaces_930a697",
        "commit": "https://github.com/apache/myfaces/commit/930a697cb00581702b772079725fa36a5419d45f",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/myfaces/blob/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java?ref=930a697cb00581702b772079725fa36a5419d45f",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processDecodes(facesContext);\n         return false;\n     }",
                "raw_url": "https://github.com/apache/myfaces/raw/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java",
                "sha": "a82190efad5d03ca24214e4513e5151f0307fc0f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/myfaces/blob/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java?ref=930a697cb00581702b772079725fa36a5419d45f",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processApplication(facesContext);\n         return false;\n     }",
                "raw_url": "https://github.com/apache/myfaces/raw/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java",
                "sha": "a1804333696ab2216e1bb5fe1c9f96b3a766231c",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/myfaces/blob/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java?ref=930a697cb00581702b772079725fa36a5419d45f",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processValidators(facesContext);\n         return false;\n     }",
                "raw_url": "https://github.com/apache/myfaces/raw/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java",
                "sha": "2cc0f7d306abfe6a897088b737316b79d0e92f23",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/myfaces/blob/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java?ref=930a697cb00581702b772079725fa36a5419d45f",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java",
                "patch": "@@ -51,6 +51,11 @@ public boolean execute(FacesContext facesContext)\n         String viewId;\n         String newViewId;\n         \n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n+        \n         try\n         {\n             // do-while, because the view might change in PreRenderViewEvent-listeners",
                "raw_url": "https://github.com/apache/myfaces/raw/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java",
                "sha": "4b215d0fee888e5aa54e98f948fa2f1fbfc35427",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/myfaces/blob/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java?ref=930a697cb00581702b772079725fa36a5419d45f",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processUpdates(facesContext);\n         return false;\n     }",
                "raw_url": "https://github.com/apache/myfaces/raw/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java",
                "sha": "b81b4581496a90d6c880eb973d9ffad93008e57a",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/myfaces/blob/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java?ref=930a697cb00581702b772079725fa36a5419d45f",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java",
                "patch": "@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.myfaces.lifecycle;\r\n+\r\n+import javax.faces.FacesException;\r\n+\r\n+/**\r\n+ * This exception is thrown when a view is not present before start\r\n+ * one of the following phases: APPLY_REQUEST_VALUES, PROCESS_VALIDATIONS,\r\n+ * INVOKE_APPLICATION, UPDATE_MODEL_VALUES, RENDER_RESPONSE.\r\n+\r\n+ * \r\n+ * @author Leonardo Uribe\r\n+ * @since 2.0.8\r\n+ *\r\n+ */\r\n+public class ViewNotFoundException extends FacesException\r\n+{\r\n+    \r\n+    /**\r\n+     * \r\n+     */\r\n+    private static final long serialVersionUID = -537576038024094272L;\r\n+\r\n+    public ViewNotFoundException()\r\n+    {\r\n+        super();\r\n+    }\r\n+\r\n+    public ViewNotFoundException(String message, Throwable cause)\r\n+    {\r\n+        super(message, cause);\r\n+    }\r\n+\r\n+    public ViewNotFoundException(String message)\r\n+    {\r\n+        super(message);\r\n+    }\r\n+\r\n+    public ViewNotFoundException(Throwable cause)\r\n+    {\r\n+        super(cause);\r\n+    }\r\n+\r\n+}\r",
                "raw_url": "https://github.com/apache/myfaces/raw/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java",
                "sha": "3230492ad0474a5223c97c5add4810d5c345b7bf",
                "status": "added"
            }
        ],
        "message": "Add ViewNotFoundException (MYFACES-3188 NPE in org.apache.myfaces.lifecycle.RenderResponseExecutor.execute and MYFACES-3189 NavigationHandler: navigation to nonexistent view after ViewExpired throws NPE)",
        "parent": "https://github.com/apache/myfaces/commit/02945c409d86decc727afec7162de3e27ea3d0ab",
        "patched_files": [
            "RenderResponseExecutor.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "RenderResponseExecutorTest.java"
        ]
    },
    "myfaces_a5a18f0": {
        "bug_id": "myfaces_a5a18f0",
        "commit": "https://github.com/apache/myfaces/commit/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/myfaces/blob/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java?ref=a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processDecodes(facesContext);\n         return false;\n     }",
                "raw_url": "https://github.com/apache/myfaces/raw/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java",
                "sha": "a82190efad5d03ca24214e4513e5151f0307fc0f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/myfaces/blob/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java?ref=a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processApplication(facesContext);\n         return false;\n     }",
                "raw_url": "https://github.com/apache/myfaces/raw/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java",
                "sha": "a1804333696ab2216e1bb5fe1c9f96b3a766231c",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/myfaces/blob/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java?ref=a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processValidators(facesContext);\n         return false;\n     }",
                "raw_url": "https://github.com/apache/myfaces/raw/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java",
                "sha": "2cc0f7d306abfe6a897088b737316b79d0e92f23",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/myfaces/blob/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java?ref=a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java",
                "patch": "@@ -51,6 +51,11 @@ public boolean execute(FacesContext facesContext)\n         String viewId;\n         String newViewId;\n         \n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n+        \n         try\n         {\n             // do-while, because the view might change in PreRenderViewEvent-listeners",
                "raw_url": "https://github.com/apache/myfaces/raw/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java",
                "sha": "4b215d0fee888e5aa54e98f948fa2f1fbfc35427",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/myfaces/blob/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java?ref=a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processUpdates(facesContext);\n         return false;\n     }",
                "raw_url": "https://github.com/apache/myfaces/raw/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java",
                "sha": "b81b4581496a90d6c880eb973d9ffad93008e57a",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/myfaces/blob/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java?ref=a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java",
                "patch": "@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.myfaces.lifecycle;\r\n+\r\n+import javax.faces.FacesException;\r\n+\r\n+/**\r\n+ * This exception is thrown when a view is not present before start\r\n+ * one of the following phases: APPLY_REQUEST_VALUES, PROCESS_VALIDATIONS,\r\n+ * INVOKE_APPLICATION, UPDATE_MODEL_VALUES, RENDER_RESPONSE.\r\n+\r\n+ * \r\n+ * @author Leonardo Uribe\r\n+ * @since 2.0.8\r\n+ *\r\n+ */\r\n+public class ViewNotFoundException extends FacesException\r\n+{\r\n+    \r\n+    /**\r\n+     * \r\n+     */\r\n+    private static final long serialVersionUID = -537576038024094272L;\r\n+\r\n+    public ViewNotFoundException()\r\n+    {\r\n+        super();\r\n+    }\r\n+\r\n+    public ViewNotFoundException(String message, Throwable cause)\r\n+    {\r\n+        super(message, cause);\r\n+    }\r\n+\r\n+    public ViewNotFoundException(String message)\r\n+    {\r\n+        super(message);\r\n+    }\r\n+\r\n+    public ViewNotFoundException(Throwable cause)\r\n+    {\r\n+        super(cause);\r\n+    }\r\n+\r\n+}\r",
                "raw_url": "https://github.com/apache/myfaces/raw/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java",
                "sha": "3230492ad0474a5223c97c5add4810d5c345b7bf",
                "status": "added"
            }
        ],
        "message": "Add ViewNotFoundException (MYFACES-3188 NPE in org.apache.myfaces.lifecycle.RenderResponseExecutor.execute and MYFACES-3189 NavigationHandler: navigation to nonexistent view after ViewExpired throws NPE)",
        "parent": "https://github.com/apache/myfaces/commit/0f91f72eeffd2caf16902b7599c77199a40eda5f",
        "patched_files": [
            "RenderResponseExecutor.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "RenderResponseExecutorTest.java"
        ]
    },
    "myfaces_a9f2138": {
        "bug_id": "myfaces_a9f2138",
        "commit": "https://github.com/apache/myfaces/commit/a9f2138a6e70a7202d78580d651699d097b4c7c4",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/myfaces/blob/a9f2138a6e70a7202d78580d651699d097b4c7c4/api/src/main/java/javax/faces/validator/_MessageUtils.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/validator/_MessageUtils.java?ref=a9f2138a6e70a7202d78580d651699d097b4c7c4",
                "deletions": 5,
                "filename": "api/src/main/java/javax/faces/validator/_MessageUtils.java",
                "patch": "@@ -54,6 +54,11 @@ static FacesMessage getMessage(FacesContext facesContext,\n         String summary;\n         String detail;\n \n+        if(locale == null)\n+        {\n+            locale = Locale.getDefault();\n+        }\n+\n         appBundle = getApplicationBundle(facesContext, locale);\n         summary = getBundleString(appBundle, messageId);\n         if (summary != null)\n@@ -144,11 +149,6 @@ private static ResourceBundle getBundle(FacesContext facesContext,\n                                             Locale locale,\n                                             String bundleName)\n     {\n-        if(locale == null)\n-        {\n-            locale = Locale.getDefault();\n-        }\n-        \n         try\n         {\n             //First we try the JSF implementation class loader",
                "raw_url": "https://github.com/apache/myfaces/raw/a9f2138a6e70a7202d78580d651699d097b4c7c4/api/src/main/java/javax/faces/validator/_MessageUtils.java",
                "sha": "7a67aa55522a9ae7599ceda2cd1392fbd59d57ab",
                "status": "modified"
            }
        ],
        "message": "fix NPE from NumberFormat.format() when DoubleRangeValidator detects MAXIMUM violation and locale is null.\nThe unit test didn't catch this error because it passes Strings to the message formatter instead of a Double.",
        "parent": "https://github.com/apache/myfaces/commit/b73cd26009c0ecfde7e672f44abf075c9dafbde7",
        "patched_files": [
            "_MessageUtils.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "_MessageUtilsTest.java"
        ]
    },
    "myfaces_af9e0f6": {
        "bug_id": "myfaces_af9e0f6",
        "commit": "https://github.com/apache/myfaces/commit/af9e0f64dba9d92f851e41f9428c8935bd307786",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/myfaces/blob/af9e0f64dba9d92f851e41f9428c8935bd307786/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java?ref=af9e0f64dba9d92f851e41f9428c8935bd307786",
                "deletions": 1,
                "filename": "shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java",
                "patch": "@@ -1015,7 +1015,7 @@ public void write(String str) throws IOException\n         closeStartTagIfNecessary();\n         // empty string commonly used to force the start tag to be closed.\n         // in such case, do not call down the writer chain\n-        if (str.length() > 0)\n+        if (str != null && str.length() > 0)\n         {\n             // Don't bother encoding anything if chosen character encoding is UTF-8\n             if (_isUTF8)",
                "raw_url": "https://github.com/apache/myfaces/raw/af9e0f64dba9d92f851e41f9428c8935bd307786/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java",
                "sha": "464cd3e79eadb480d550256173f4c0b90d27f882",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3708 NPE when no title using primefaces mobile",
        "parent": "https://github.com/apache/myfaces/commit/3de881004f40f87b8417e61ccecd4109329caab9",
        "patched_files": [
            "HtmlResponseWriterImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "HtmlResponseWriterImplTest.java"
        ]
    },
    "myfaces_b7afdd7": {
        "bug_id": "myfaces_b7afdd7",
        "commit": "https://github.com/apache/myfaces/commit/b7afdd7c6c1bd57a7780ea29b96afc88b5231de9",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/myfaces/blob/b7afdd7c6c1bd57a7780ea29b96afc88b5231de9/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java?ref=b7afdd7c6c1bd57a7780ea29b96afc88b5231de9",
                "deletions": 1,
                "filename": "shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "patch": "@@ -630,7 +630,9 @@ private void _restoreRedirectValue(FacesContext facesContext)\n                 // to this request object\n                 cookie.setMaxAge(0);\n                 cookie.setPath(_getCookiePath(externalContext));\n-                cookie.setValue(null);\n+                //MYFACES-3354 jetty 6.1.5 does not allow this,\n+                //call setMaxAge(0) is enough\n+                //cookie.setValue(null);\n                 httpResponse.addCookie(cookie);\n             }\n         }",
                "raw_url": "https://github.com/apache/myfaces/raw/b7afdd7c6c1bd57a7780ea29b96afc88b5231de9/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "sha": "5780925032ed3cde3e4f31047aa9b5e8a6cfbd30",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3354 NullPointerException on jetty 6.1.5 with faces-redirect=true action result",
        "parent": "https://github.com/apache/myfaces/commit/9a88db3d80cc5a50c7d693309411df1cb4cf02ad",
        "patched_files": [
            "FlashImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "FlashImplTest.java"
        ]
    },
    "myfaces_b881ddb": {
        "bug_id": "myfaces_b881ddb",
        "commit": "https://github.com/apache/myfaces/commit/b881ddb17bbc6886d5845a74a90d16670b984d16",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/myfaces/blob/b881ddb17bbc6886d5845a74a90d16670b984d16/impl/src/main/java/org/apache/myfaces/application/ResourceHandlerImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/ResourceHandlerImpl.java?ref=b881ddb17bbc6886d5845a74a90d16670b984d16",
                "deletions": 1,
                "filename": "impl/src/main/java/org/apache/myfaces/application/ResourceHandlerImpl.java",
                "patch": "@@ -138,10 +138,16 @@ public Resource createResource(String resourceName, String libraryName,\n     {\n         Resource resource = null;\n         \n-        if (resourceName == null || resourceName.length() == 0) \n+        if (resourceName == null) \n+        {\n+            throw new NullPointerException();\n+        }\n+\n+        if (resourceName.length() == 0)\n         {\n             return null;\n         }\n+\n         if (resourceName.charAt(0) == '/')\n         {\n             // If resourceName starts with '/', remove that character because it",
                "raw_url": "https://github.com/apache/myfaces/raw/b881ddb17bbc6886d5845a74a90d16670b984d16/impl/src/main/java/org/apache/myfaces/application/ResourceHandlerImpl.java",
                "sha": "9d5c9d941a4b636f21d66098c5bf21b6b0b38650",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/myfaces/blob/b881ddb17bbc6886d5845a74a90d16670b984d16/impl/src/test/java/org/apache/myfaces/application/ResourceHandlerImplTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/application/ResourceHandlerImplTest.java?ref=b881ddb17bbc6886d5845a74a90d16670b984d16",
                "deletions": 0,
                "filename": "impl/src/test/java/org/apache/myfaces/application/ResourceHandlerImplTest.java",
                "patch": "@@ -221,4 +221,19 @@ public boolean libraryExists(String libraryName)\n         Assert.assertNull(resource.getResourceVersion());        \n         Assert.assertEquals(\"myres.js\", resource.getResourceName());\n     }\n+\n+    @Test\n+    public void testCreateResourceNullResourceName() throws Exception\n+    {\n+        boolean didNPEOccur = false;\n+        try \n+        {\n+            resourceHandler.createResource(null);\n+        } catch (NullPointerException e)\n+        {\n+            didNPEOccur = true;\n+        }\n+        \n+        Assert.assertTrue(didNPEOccur);\n+    }\n }",
                "raw_url": "https://github.com/apache/myfaces/raw/b881ddb17bbc6886d5845a74a90d16670b984d16/impl/src/test/java/org/apache/myfaces/application/ResourceHandlerImplTest.java",
                "sha": "3ca420c6ef4ac8b9ddc7c2b6b92580741b107b3d",
                "status": "modified"
            }
        ],
        "message": "MYFACES-4187: throw NPE with null resourceName",
        "parent": "https://github.com/apache/myfaces/commit/b5877dcc2f720cbd7d039c70c59fdfbf77e9d587",
        "patched_files": [
            "ResourceHandlerImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "ResourceHandlerImplTest.java"
        ]
    },
    "myfaces_ba5b2fd": {
        "bug_id": "myfaces_ba5b2fd",
        "commit": "https://github.com/apache/myfaces/commit/ba5b2fdf34201e579015d0160ddce969fc0152c8",
        "file": [
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/myfaces/blob/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentSupport.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentSupport.java?ref=ba5b2fdf34201e579015d0160ddce969fc0152c8",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentSupport.java",
                "patch": "@@ -341,6 +341,70 @@ else if (id.equals(facet.getAttributes().get(MARK_CREATED)))\n \n         return null;\n     }\n+    \n+    public static UIComponent findChildInChildrenByTagId(UIComponent parent, String id)\n+    {\n+        if (parent.getChildCount() > 0)\n+        {\n+            for (int i = 0, childCount = parent.getChildCount(); i < childCount; i ++)\n+            {\n+                UIComponent child = parent.getChildren().get(i);\n+                if (id.equals(child.getAttributes().get(MARK_CREATED)))\n+                {\n+                    return child;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    public static String findChildInFacetsByTagId(UIComponent parent, String id)\n+    {\n+        Iterator<Map.Entry<String, UIComponent>> itr = null;\n+        if (parent.getFacetCount() > 0)\n+        {\n+            itr = parent.getFacets().entrySet().iterator();\n+            while (itr.hasNext())\n+            {\n+                Map.Entry<String, UIComponent> entry = itr.next();\n+                UIComponent facet = entry.getValue();\n+                // check if this is a dynamically generated UIPanel\n+                if (Boolean.TRUE.equals(facet.getAttributes()\n+                             .get(FACET_CREATED_UIPANEL_MARKER)))\n+                {\n+                    // only check the children and facets of the panel\n+                    if (facet.getChildCount() > 0)\n+                    {\n+                        for (int i = 0, childCount = facet.getChildCount(); i < childCount; i ++)\n+                        {\n+                            UIComponent child = facet.getChildren().get(i);\n+                            if (id.equals(child.getAttributes().get(MARK_CREATED)))\n+                            {\n+                                return entry.getKey();\n+                            }\n+                        }\n+                    }\n+                    if (facet.getFacetCount() > 0)\n+                    {\n+                        Iterator<UIComponent> itr2 = facet.getFacets().values().iterator();\n+                        while (itr2.hasNext())\n+                        {\n+                            UIComponent child = itr2.next();\n+                            if (id.equals(child.getAttributes().get(MARK_CREATED)))\n+                            {\n+                                return entry.getKey();\n+                            }\n+                        }\n+                    }\n+                }\n+                else if (id.equals(facet.getAttributes().get(MARK_CREATED)))\n+                {\n+                    return entry.getKey();\n+                }\n+            }\n+        }\n+        return null;\n+    }\n \n     /**\n      * According to JSF 1.2 tag specs, this helper method will use the TagAttribute passed in determining the Locale",
                "raw_url": "https://github.com/apache/myfaces/raw/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentSupport.java",
                "sha": "d3a05c2ec50fd62e9069221842d23b10dd2b1ff6",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/myfaces/blob/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentTagHandlerDelegate.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentTagHandlerDelegate.java?ref=ba5b2fdf34201e579015d0160ddce969fc0152c8",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentTagHandlerDelegate.java",
                "patch": "@@ -389,6 +389,18 @@ public void apply(FaceletContext ctx, UIComponent parent) throws IOException\n                     {\n                         // Replace parent with the relocated parent.\n                         parent = c.getParent();\n+                        // Since we changed the parent, the facetName becomes invalid, because it points\n+                        // to the component before relocation. We need to find the right facetName (if any) so we can\n+                        // refresh the component properly.\n+                        UIComponent c1 = ComponentSupport.findChildInChildrenByTagId(parent, id);\n+                        if (c1 == null)\n+                        {\n+                            facetName = ComponentSupport.findChildInFacetsByTagId(parent, id);\n+                        }\n+                        else\n+                        {\n+                            facetName = null;\n+                        }\n                     }\n                     ComponentSupport.setCachedFacesContext(c, facesContext);\n                 }",
                "raw_url": "https://github.com/apache/myfaces/raw/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentTagHandlerDelegate.java",
                "sha": "aecf2e3be881bd907c0d5340aecbcb297830fb34",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/myfaces/blob/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/test/resources/org/apache/myfaces/view/facelets/impl/resources/js/b.js",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/resources/org/apache/myfaces/view/facelets/impl/resources/js/b.js?ref=ba5b2fdf34201e579015d0160ddce969fc0152c8",
                "deletions": 0,
                "filename": "impl/src/test/resources/org/apache/myfaces/view/facelets/impl/resources/js/b.js",
                "patch": "@@ -0,0 +1,16 @@\n+/*\n+ * Copyright 2012 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+var x = \"X\";\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/myfaces/raw/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/test/resources/org/apache/myfaces/view/facelets/impl/resources/js/b.js",
                "sha": "ff18a0b324f82f6275feae6a8c23136a4638e0e2",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/myfaces/blob/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/test/resources/org/apache/myfaces/view/facelets/impl/test_conditional_include_resources.xhtml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/resources/org/apache/myfaces/view/facelets/impl/test_conditional_include_resources.xhtml?ref=ba5b2fdf34201e579015d0160ddce969fc0152c8",
                "deletions": 0,
                "filename": "impl/src/test/resources/org/apache/myfaces/view/facelets/impl/test_conditional_include_resources.xhtml",
                "patch": "@@ -19,6 +19,9 @@\n     xmlns:f=\"http://java.sun.com/jsf/core\"\n     xmlns:c=\"http://java.sun.com/jsp/jstl/core\">\n <h:head id=\"head\">\n+    <f:facet name=\"first\">\n+\t <h:outputScript name=\"b.js\" target=\"body\"/>\n+    </f:facet>\n </h:head>\n <h:body id=\"body\">\n ",
                "raw_url": "https://github.com/apache/myfaces/raw/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/test/resources/org/apache/myfaces/view/facelets/impl/test_conditional_include_resources.xhtml",
                "sha": "75bebbc296891a85a3bc007deaa4f5bbafb75d63",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3931 RelocatableResourceHandler tag + inner f:facet = NullPointerException",
        "parent": "https://github.com/apache/myfaces/commit/84ab634c1c9fce93d22e080d9177c9f61eae56d1",
        "patched_files": [
            "ComponentTagHandlerDelegate.java",
            "b.java",
            "ComponentSupport.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "test_conditional_include_resources.java"
        ]
    },
    "myfaces_c283a33": {
        "bug_id": "myfaces_c283a33",
        "commit": "https://github.com/apache/myfaces/commit/c283a33b9f08a797c692ec70237f6cd3e5b3437a",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/myfaces/blob/c283a33b9f08a797c692ec70237f6cd3e5b3437a/api/src/main/java/javax/faces/validator/_MessageUtils.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/validator/_MessageUtils.java?ref=c283a33b9f08a797c692ec70237f6cd3e5b3437a",
                "deletions": 0,
                "filename": "api/src/main/java/javax/faces/validator/_MessageUtils.java",
                "patch": "@@ -144,6 +144,11 @@ private static ResourceBundle getBundle(FacesContext facesContext,\n                                             Locale locale,\n                                             String bundleName)\n     {\n+        if(locale == null)\n+        {\n+            locale = Locale.getDefault();\n+        }\n+        \n         try\n         {\n             //First we try the JSF implementation class loader",
                "raw_url": "https://github.com/apache/myfaces/raw/c283a33b9f08a797c692ec70237f6cd3e5b3437a/api/src/main/java/javax/faces/validator/_MessageUtils.java",
                "sha": "270f7203fb8c5cdf093e5a0b457a9ee442374340",
                "status": "modified"
            },
            {
                "additions": 125,
                "blob_url": "https://github.com/apache/myfaces/blob/c283a33b9f08a797c692ec70237f6cd3e5b3437a/api/src/test/java/javax/faces/Messages.properties",
                "changes": 125,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/test/java/javax/faces/Messages.properties?ref=c283a33b9f08a797c692ec70237f6cd3e5b3437a",
                "deletions": 0,
                "filename": "api/src/test/java/javax/faces/Messages.properties",
                "patch": "@@ -0,0 +1,125 @@\n+# Copyright 2004 The Apache Software Foundation.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+# standard messages (Spec. 2.5.2.4)\n+\n+# components\n+javax.faces.component.UIInput.CONVERSION = {0}: Conversion error occurred.\n+javax.faces.component.UIInput.REQUIRED = {0}: Validation Error: Value is required.\n+javax.faces.component.UIInput.UPDATE = {0}: An error occurred when processing your submitted information. \n+\n+javax.faces.component.UISelectOne.INVALID = {0}: Validation Error: Value is not valid\n+javax.faces.component.UISelectMany.INVALID = {0}: Validation Error: Value is not valid\n+\n+# converters\n+javax.faces.converter.BigDecimalConverter.DECIMAL = {2}: ''{0}'' must be a signed decimal number.\n+javax.faces.converter.BigDecimalConverter.DECIMAL_detail = {2}: ''{0}'' must be a signed decimal number consisting of zero or more digits, that may be followed by a decimal point and fraction.  Example: {1}\n+ \n+javax.faces.converter.BigIntegerConverter.BIGINTEGER = {2}: ''{0}'' must be a number consisting of one or more digits.\n+javax.faces.converter.BigIntegerConverter.BIGINTEGER_detail = {2}: ''{0}'' must be a number consisting of one or more digits. Example: {1}\n+ \n+javax.faces.converter.BooleanConverter.BOOLEAN = {1}: ''{0}'' must be 'true' or 'false'.\n+javax.faces.converter.BooleanConverter.BOOLEAN_detail = {1}: ''{0}'' must be 'true' or 'false'.  Any value other than 'true' will evaluate to 'false'.\n+\n+javax.faces.converter.ByteConverter.BYTE = {2}: ''{0}'' must be a number between 0 and 255.\n+javax.faces.converter.ByteConverter.BYTE_detail = {2}: ''{0}'' must be a number between 0 and 255.  Example: {1}\n+ \n+javax.faces.converter.CharacterConverter.CHARACTER = {1}: ''{0}'' must be a valid character.\n+javax.faces.converter.CharacterConverter.CHARACTER_detail = {1}: ''{0}'' must be a valid ASCII character.\n+\n+javax.faces.converter.DateTimeConverter.DATE = {2}: ''{0}'' could not be understood as a date.\n+javax.faces.converter.DateTimeConverter.DATE_detail = {2}: ''{0}'' could not be understood as a date. Example: {1} \n+javax.faces.converter.DateTimeConverter.TIME = {2}: ''{0}'' could not be understood as a time.\n+javax.faces.converter.DateTimeConverter.TIME_detail = {2}: ''{0}'' could not be understood as a time. Example: {1} \n+javax.faces.converter.DateTimeConverter.DATETIME = {2}: ''{0}'' could not be understood as a date and time.\n+javax.faces.converter.DateTimeConverter.DATETIME_detail = {2}: ''{0}'' could not be understood as a date and time. Example: {1} \n+javax.faces.converter.DateTimeConverter.PATTERN_TYPE = {1}: A 'pattern' or 'type' attribute must be specified to convert the value ''{0}''.\n+\n+javax.faces.converter.DoubleConverter.DOUBLE = {2}: ''{0}'' must be a number consisting of one or more digits.\n+javax.faces.converter.DoubleConverter.DOUBLE_detail = {2}: ''{0}'' must be a number between 4.9E-324 and 1.7976931348623157E308  Example: {1}\n+\n+javax.faces.converter.EnumConverter.ENUM = {2}: ''{0}'' must be convertible to an enum.\n+javax.faces.converter.EnumConverter.ENUM_detail = {2}: ''{0}'' must be convertible to an enum from the enum that contains the constant ''{1}''.\n+javax.faces.converter.EnumConverter.ENUM_NO_CLASS = {1}: ''{0}'' must be convertible to an enum from the enum, but no enum class provided.\n+javax.faces.converter.EnumConverter.ENUM_NO_CLASS_detail = {1}: ''{0}'' must be convertible to an enum from the enum, but no enum class provided.\n+\n+javax.faces.converter.FloatConverter.FLOAT = {2}: ''{0}'' must be a number consisting of one or more digits.\n+javax.faces.converter.FloatConverter.FLOAT_detail = {2}: ''{0}'' must be a number between 1.4E-45 and 3.4028235E38  Example: {1}\n+\n+javax.faces.converter.IntegerConverter.INTEGER = {2}: ''{0}'' must be a number consisting of one or more digits.\n+javax.faces.converter.IntegerConverter.INTEGER_detail = {2}: ''{0}'' must be a number between -2147483648 and 2147483647 Example: {1}\n+\n+javax.faces.converter.LongConverter.LONG = {2}: ''{0}'' must be a number consisting of one or more digits.\n+javax.faces.converter.LongConverter.LONG_detail = {2}: ''{0}'' must be a number between -9223372036854775808 to 9223372036854775807 Example: {1}\n+\n+javax.faces.converter.NumberConverter.CURRENCY = {2}: ''{0}'' could not be understood as a currency value.\n+javax.faces.converter.NumberConverter.CURRENCY_detail = {2}: ''{0}'' could not be understood as a currency value. Example: {1}\n+javax.faces.converter.NumberConverter.PERCENT = {2}: ''{0}'' could not be understood as a percentage.\n+javax.faces.converter.NumberConverter.PERCENT_detail = {2}: ''{0}'' could not be understood as a percentage. Example: {1}\n+javax.faces.converter.NumberConverter.NUMBER = {2}: ''{0}'' is not a number.\n+javax.faces.converter.NumberConverter.NUMBER_detail = {2}: ''{0}'' is not a number. Example: {1}\n+javax.faces.converter.NumberConverter.PATTERN = {2}: ''{0}'' is not a number pattern.\n+javax.faces.converter.NumberConverter.PATTERN_detail = {2}: ''{0}'' is not a number pattern. Example: {1}\n+\n+javax.faces.converter.ShortConverter.SHORT = {2}: ''{0}'' must be a number consisting of one or more digits.\n+javax.faces.converter.ShortConverter.SHORT_detail = {2}: ''{0}'' must be a number between -32768 and 32767 Example: {1}\n+\n+javax.faces.converter.STRING = {1}: Could not convert ''{0}'' to a string.\n+\n+# validators\n+javax.faces.validator.NOT_IN_RANGE = Validation Error: Specified attribute is not between the expected values of {0} and {1}.\n+\n+javax.faces.validator.DoubleRangeValidator.MAXIMUM = {1}: Validation Error: Value is greater than allowable maximum of \"{0}\"\n+javax.faces.validator.DoubleRangeValidator.MINIMUM = {1}: Validation Error: Value is less than allowable minimum of ''{0}''\n+javax.faces.validator.DoubleRangeValidator.NOT_IN_RANGE = {2}: Validation Error: Specified attribute is not between the expected values of {0} and {1}.\n+javax.faces.validator.DoubleRangeValidator.TYPE = {0}: Validation Error: Value is not of the correct type\n+\n+javax.faces.validator.LengthValidator.MAXIMUM = {1}: Validation Error: Value is greater than allowable maximum of ''{0}''\n+javax.faces.validator.LengthValidator.MINIMUM = {1}: Validation Error: Value is less than allowable minimum of ''{0}''\n+\n+javax.faces.validator.LongRangeValidator.MAXIMUM = {1}: Validation Error: Value is greater than allowable maximum of ''{0}''\n+javax.faces.validator.LongRangeValidator.MINIMUM = {1}: Validation Error: Value is less than allowable minimum of ''{0}''\n+javax.faces.validator.LongRangeValidator.NOT_IN_RANGE = {2}: Validation Error: Specified attribute is not between the expected values of {0} and {1}.\n+javax.faces.validator.LongRangeValidator.TYPE = {0}: Validation Error: Value is not of the correct type.\n+\n+# myfaces specific messages\n+org.apache.myfaces.renderkit.html.HtmlMessagesRenderer.IN_FIELD = \\u0020in {0}\n+org.apache.myfaces.Email.INVALID = Validation Error\n+org.apache.myfaces.Email.INVALID_detail =The given value ({0}) is not a correct email-address.\n+\n+org.apache.myfaces.Equal.INVALID = Validation Error\n+org.apache.myfaces.Equal.INVALID_detail =The given value ({0}) is not equal with value of \"{1}\".\n+\n+org.apache.myfaces.Creditcard.INVALID = Validation Error\n+org.apache.myfaces.Creditcard.INVALID_detail =The given value ({0}) is not a correct creditcard\n+\n+org.apache.myfaces.Regexpr.INVALID=Validation Error\n+org.apache.myfaces.Regexpr.INVALID_detail=The given value ({0}) is not valid.\n+\n+org.apache.myfaces.Date.INVALID = Validation Error\n+org.apache.myfaces.Date.INVALID_detail =The given value ({0}) is not a correct date\n+\n+org.apache.myfaces.ticker.NOCONNECTION = No Connection: \n+org.apache.myfaces.ticker.NOCONNECTION_detail = Maybe you are behind a firewall?\n+\n+org.apache.myfaces.ISBN.INVALID = Validation Error\n+org.apache.myfaces.ISBN.INVALID_detail =The given value ({0}) is not a correct isbn code.\n+\n+org.apache.myfaces.tree2.MISSING_NODE        = Missing Node\n+org.apache.myfaces.tree2.MISSING_NODE_detail = The requested node \"{0}\" does not exist.\n+\n+org.apache.myfaces.calendar.CONVERSION = Conversion Error\n+org.apache.myfaces.calendar.CONVERSION_detail = \"{0}\": The given value \"{1}\" could not be converted to a date.\n+\n+org.apache.myfaces.FileUpload.SIZE_LIMIT = \"{0}\": The uploaded file exceeded the maximum size of {1} bytes.\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/myfaces/raw/c283a33b9f08a797c692ec70237f6cd3e5b3437a/api/src/test/java/javax/faces/Messages.properties",
                "sha": "5fc4a485c36ad7ce6dc931dc5ecf16ef9a986442",
                "status": "added"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/myfaces/blob/c283a33b9f08a797c692ec70237f6cd3e5b3437a/api/src/test/java/javax/faces/validator/_MessageUtilsTest.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/test/java/javax/faces/validator/_MessageUtilsTest.java?ref=c283a33b9f08a797c692ec70237f6cd3e5b3437a",
                "deletions": 0,
                "filename": "api/src/test/java/javax/faces/validator/_MessageUtilsTest.java",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package javax.faces.validator;\n+\n+import static org.easymock.EasyMock.expect;\n+import static org.testng.Assert.assertEquals;\n+\n+import javax.faces.application.Application;\n+import javax.faces.component.UIViewRoot;\n+\n+import org.apache.shale.test.mock.MockFacesContext12;\n+import org.easymock.classextension.EasyMock;\n+import org.easymock.classextension.IMocksControl;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * @author Mathias Broekelmann (latest modification by $Author$)\n+ * @version $Revision$ $Date$\n+ */\n+public class _MessageUtilsTest\n+{\n+\n+    /**\n+     * Test method for\n+     * {@link javax.faces.validator._MessageUtils#getErrorMessage(javax.faces.context.FacesContext, java.lang.String, java.lang.Object[])}.\n+     */\n+    @Test\n+    public void testErrorMessage()\n+    {\n+        UIViewRoot root = new UIViewRoot();\n+        MockFacesContext12 facesContext = new MockFacesContext12();\n+        IMocksControl mocksControl = EasyMock.createControl();\n+        Application application = mocksControl.createMock(Application.class);\n+        facesContext.setApplication(application);\n+        facesContext.setViewRoot(root);\n+\n+        expect(application.getMessageBundle()).andReturn(\"javax.faces.Messages\");\n+        mocksControl.replay();\n+\n+        assertEquals(_MessageUtils.getErrorMessage(facesContext, \"javax.faces.validator.DoubleRangeValidator.MAXIMUM\",\n+                new Object[] { \"xyz\", \"xxx\" }).getDetail(),\n+                \"xxx: Validation Error: Value is greater than allowable maximum of \\\"xyz\\\"\");\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/myfaces/raw/c283a33b9f08a797c692ec70237f6cd3e5b3437a/api/src/test/java/javax/faces/validator/_MessageUtilsTest.java",
                "sha": "1527a4e3c20d56fae5690de0c58968ac0a35c77f",
                "status": "added"
            }
        ],
        "message": "fix NPE if locale is null",
        "parent": "https://github.com/apache/myfaces/commit/e0b164d052980a5a874dbc7c071563e1b5c4e71b",
        "patched_files": [
            "Messages.java",
            "_MessageUtils.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "_MessageUtilsTest.java"
        ]
    },
    "myfaces_ca86c8d": {
        "bug_id": "myfaces_ca86c8d",
        "commit": "https://github.com/apache/myfaces/commit/ca86c8d5fde765c78824bb70441eb065bc11b433",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/myfaces/blob/ca86c8d5fde765c78824bb70441eb065bc11b433/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java?ref=ca86c8d5fde765c78824bb70441eb065bc11b433",
                "deletions": 1,
                "filename": "impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java",
                "patch": "@@ -458,7 +458,7 @@ public String encodeWebsocketURL(String url)\n \n         FacesContext facesContext = getCurrentFacesContext();\n         Integer port = MyfacesConfig.getCurrentInstance(facesContext).getWebsocketEndpointPort();\n-        port = (port == 0) ? null : port;\n+        port = (port == null || port == 0) ? null : port;\n         if (port != null && !port.equals(facesContext.getExternalContext().getRequestServerPort()))\n         {\n             String scheme = facesContext.getExternalContext().getRequestScheme();",
                "raw_url": "https://github.com/apache/myfaces/raw/ca86c8d5fde765c78824bb70441eb065bc11b433/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java",
                "sha": "23df782de60f0f6f9c85a5b77d324f437c5ad4dc",
                "status": "modified"
            }
        ],
        "message": "fixed possible NPE",
        "parent": "https://github.com/apache/myfaces/commit/18f7f6e343d213b548fea42c31342909c6f6f7f9",
        "patched_files": [
            "ServletExternalContextImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "ServletExternalContextImplTest.java"
        ]
    },
    "myfaces_ceb11e3": {
        "bug_id": "myfaces_ceb11e3",
        "commit": "https://github.com/apache/myfaces/commit/ceb11e3bb9d9ea4c58a1f0aae56f60bab3e49a90",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/myfaces/blob/ceb11e3bb9d9ea4c58a1f0aae56f60bab3e49a90/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java?ref=ceb11e3bb9d9ea4c58a1f0aae56f60bab3e49a90",
                "deletions": 6,
                "filename": "shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "patch": "@@ -34,6 +34,7 @@\n import java.security.SecureRandom;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -967,14 +968,22 @@ private String _getNextToken()\n         // if we create more SubKeyMaps with the same subkey, because they are\n         // totally equal and point to the same entries in the SessionMap.\n         \n-        Map<String, Object> requestMap = context.getExternalContext().getRequestMap();\n-        Map<String, Object> map = (Map<String, Object>) requestMap.get(FLASH_EXECUTE_MAP);\n+        Map<String, Object> requestMap = context != null && context.getExternalContext() != null ?\n+                context.getExternalContext().getRequestMap() : null;\n+        Map<String, Object> map = requestMap != null ? (Map<String, Object>) requestMap.get(FLASH_EXECUTE_MAP) : null;\n         if (map == null)\n         {\n-            String token = (String) requestMap.get(FLASH_EXECUTE_MAP_TOKEN);\n-            String fullToken = FLASH_SESSION_MAP_SUBKEY_PREFIX + SEPARATOR_CHAR + token + SEPARATOR_CHAR;\n-            map = _createSubKeyMap(context, fullToken);\n-            requestMap.put(FLASH_EXECUTE_MAP, map);\n+            if (requestMap != null)\n+            {\n+                String token = (String) requestMap.get(FLASH_EXECUTE_MAP_TOKEN);\n+                String fullToken = FLASH_SESSION_MAP_SUBKEY_PREFIX + SEPARATOR_CHAR + token + SEPARATOR_CHAR;\n+                map = _createSubKeyMap(context, fullToken);\n+                requestMap.put(FLASH_EXECUTE_MAP, map);\n+            }\n+            else\n+            {\n+                map = Collections.emptyMap();\n+            }\n         }\n         return map;\n     }",
                "raw_url": "https://github.com/apache/myfaces/raw/ceb11e3bb9d9ea4c58a1f0aae56f60bab3e49a90/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "sha": "eb5e362815cad15a1aa19ddb161f3c82cbc5c499",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3987: avoid NPE",
        "parent": "https://github.com/apache/myfaces/commit/b99b1ddc6a4a339f0c0af1861ed850e2a3496548",
        "patched_files": [
            "FlashImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "FlashImplTest.java"
        ]
    },
    "myfaces_d9cac6e": {
        "bug_id": "myfaces_d9cac6e",
        "commit": "https://github.com/apache/myfaces/commit/d9cac6e37412ae24987a76026acb5fca7e439bda",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/myfaces/blob/d9cac6e37412ae24987a76026acb5fca7e439bda/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java?ref=d9cac6e37412ae24987a76026acb5fca7e439bda",
                "deletions": 4,
                "filename": "impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "patch": "@@ -159,11 +159,14 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n                     partialViewContext.setRenderAll(true);\n                 }\n \n-                if (facesContext.getViewRoot().getAttributes().containsKey(\"oam.CALL_PRE_DISPOSE_VIEW\"))\n+                if (facesContext.getViewRoot() != null)\n                 {\n-                    facesContext.getAttributes().put(SKIP_ITERATION_HINT, Boolean.TRUE);\n-                    facesContext.getViewRoot().visitTree(VisitContext.createVisitContext(facesContext), new PreDisposeViewCallback());\n-                    facesContext.getAttributes().remove(SKIP_ITERATION_HINT);\n+                    if (facesContext.getViewRoot().getAttributes().containsKey(\"oam.CALL_PRE_DISPOSE_VIEW\"))\n+                    {\n+                        facesContext.getAttributes().put(SKIP_ITERATION_HINT, Boolean.TRUE);\n+                        facesContext.getViewRoot().visitTree(VisitContext.createVisitContext(facesContext), new PreDisposeViewCallback());\n+                        facesContext.getAttributes().remove(SKIP_ITERATION_HINT);\n+                    }\n                 }\n \n                 // create UIViewRoot for new view",
                "raw_url": "https://github.com/apache/myfaces/raw/d9cac6e37412ae24987a76026acb5fca7e439bda/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "sha": "9f279df300eba144fdf7f8c48fff2b2e2e62b334",
                "status": "modified"
            }
        ],
        "message": "small fix NullPointerException ViewExpired",
        "parent": "https://github.com/apache/myfaces/commit/a47b94251f262a097ad10732fcc3bd2c6439b9bf",
        "patched_files": [
            "NavigationHandlerImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "NavigationHandlerImplTest.java"
        ]
    },
    "myfaces_e483a32": {
        "bug_id": "myfaces_e483a32",
        "commit": "https://github.com/apache/myfaces/commit/e483a32e41ef71a4ffcf09dd291eb5c4ebc7541b",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/myfaces/blob/e483a32e41ef71a4ffcf09dd291eb5c4ebc7541b/impl/src/main/java/org/apache/myfaces/renderkit/html/HtmlFormatRenderer.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/html/HtmlFormatRenderer.java?ref=e483a32e41ef71a4ffcf09dd291eb5c4ebc7541b",
                "deletions": 11,
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/html/HtmlFormatRenderer.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.myfaces.shared_impl.renderkit.JSFAttr;\n import org.apache.myfaces.shared_impl.renderkit.RendererUtils;\n import org.apache.myfaces.shared_impl.renderkit.html.HtmlRenderer;\n+import org.apache.myfaces.shared_impl.renderkit.html.HtmlRendererUtils;\n import org.apache.myfaces.shared_impl.renderkit.html.HtmlTextRendererBase;\n \n /**\n@@ -90,18 +91,12 @@ private String getOutputFormatText(FacesContext facesContext, UIComponent htmlOu\n         else\n         {\n             List<Object> argsList = new ArrayList<Object>();\n-            for (UIComponent child : htmlOutputFormat.getChildren())\n+            \n+            List<UIParameter> validParams = HtmlRendererUtils.getValidUIParameterChildren(\n+                    facesContext, htmlOutputFormat.getChildren(), false, false, false);\n+            for (UIParameter param : validParams)\n             {\n-                if (child instanceof UIParameter)\n-                {\n-                    // check for the disable attribute (since 2.0)\n-                    if (((UIParameter) child).isDisable())\n-                    {\n-                        // ignore this UIParameter and continue\n-                        continue;\n-                    }\n-                    argsList.add(((UIParameter)child).getValue());\n-                }\n+                argsList.add(param.getValue());\n             }\n             \n             args = argsList.toArray(new Object[argsList.size()]);",
                "raw_url": "https://github.com/apache/myfaces/raw/e483a32e41ef71a4ffcf09dd291eb5c4ebc7541b/impl/src/main/java/org/apache/myfaces/renderkit/html/HtmlFormatRenderer.java",
                "sha": "01227e28a680059b39fc7a54e1953925e9fb9d0c",
                "status": "modified"
            }
        ],
        "message": "MYFACES-2663 NPE in UIParameter when value resolves to null (major refactoring of every use of UIParameter - introduced HtmlRendererUtils.getValidUIParameterChildren() to retrieve UIParameter children correctly)",
        "parent": "https://github.com/apache/myfaces/commit/78698dda8b7641067f22e45d08a0b19fb9cd99f4",
        "patched_files": [
            "HtmlFormatRenderer.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "HtmlFormatRendererTest.java"
        ]
    },
    "myfaces_e576ea9": {
        "bug_id": "myfaces_e576ea9",
        "commit": "https://github.com/apache/myfaces/commit/e576ea9c2a3344c1698f007d26347c5ddca5e575",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java",
                "patch": "@@ -1108,6 +1108,12 @@ public UIComponent createComponent(FacesContext context, Resource componentResou\n          * This version of JSF specification uses JavaBeans as the API to the component metadata.\n          */\n         BeanInfo metadata = vdl.getComponentMetadata(context, componentResource);\n+        if (metadata == null)\n+        {\n+            throw new FacesException(\"Could not get component metadata for \" \n+                    + componentResource.getResourceName()\n+                    + \". Did you forget to specify <composite:interface>?\");\n+        }\n \n         /*\n          * Determine if the component author declared a component-type for this component instance by obtaining the",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java",
                "sha": "a08b136c981dac9e62d7e46c99a59f1c42a0e8af",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttachedObjectTargetHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttachedObjectTargetHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "deletions": 1,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttachedObjectTargetHandler.java",
                "patch": "@@ -109,7 +109,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n         {\n             if (log.isLoggable(Level.SEVERE))\n             {\n-                log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n             }\n             return;\n         }",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttachedObjectTargetHandler.java",
                "sha": "5b5591c58716e9f7199bde877afc1cb4200981dd",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttributeHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttributeHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "deletions": 1,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttributeHandler.java",
                "patch": "@@ -179,7 +179,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n         {\n             if (log.isLoggable(Level.SEVERE))\n             {\n-                log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n             }\n             return;\n         }",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttributeHandler.java",
                "sha": "fe99c66ef002e9db115cf1c0797c3b55a8bb23c0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ClientBehaviorHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ClientBehaviorHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "deletions": 1,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ClientBehaviorHandler.java",
                "patch": "@@ -136,7 +136,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n         {\r\n             if (log.isLoggable(Level.SEVERE))\r\n             {\r\n-                log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\r\n+                log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\r\n             }\r\n             return;\r\n         }\r",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ClientBehaviorHandler.java",
                "sha": "bc9f09fceb1e0a0b802367c6429fa76c91853fe9",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ExtensionHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ExtensionHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "deletions": 1,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ExtensionHandler.java",
                "patch": "@@ -61,7 +61,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n         {\n             if (log.isLoggable(Level.SEVERE))\n             {\n-                log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n             }\n             return;\n         }",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ExtensionHandler.java",
                "sha": "193126ba4877e81a31eadac56765691a56658c1c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/FacetHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/FacetHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "deletions": 1,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/FacetHandler.java",
                "patch": "@@ -171,7 +171,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n         {\n             if (log.isLoggable(Level.SEVERE))\n             {\n-                log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n             }\n             return;\n         }",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/FacetHandler.java",
                "sha": "98cc6a24171376526f5610cf473575ab4385674f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ImplementationHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ImplementationHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "deletions": 1,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ImplementationHandler.java",
                "patch": "@@ -78,7 +78,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n             {\n                 if (log.isLoggable(Level.SEVERE))\n                 {\n-                    log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                    log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n                 }\n                 return;\n             }",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ImplementationHandler.java",
                "sha": "000e375b6f6866daf239aabc83964ae58fdff997",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertChildrenHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertChildrenHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "deletions": 1,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertChildrenHandler.java",
                "patch": "@@ -68,7 +68,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n             {\n                 if (log.isLoggable(Level.SEVERE))\n                 {\n-                    log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                    log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n                 }\n                 return;\n             }",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertChildrenHandler.java",
                "sha": "1782869e5755ca47b2ac86e21d0be75453fa3247",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertFacetHandler.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertFacetHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "deletions": 2,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertFacetHandler.java",
                "patch": "@@ -101,7 +101,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n             {\n                 if (log.isLoggable(Level.SEVERE))\n                 {\n-                    log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                    log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n                 }\n                 return;\n             }\n@@ -146,7 +146,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n         \n         if (_required != null && _required.getBoolean(ctx) && parentCompositeComponent.getFacet(facetName) == null)\n         {\n-            throw new TagException(this.tag, \"Cannot found facet with name \"+facetName+\" in composite component \"\n+            throw new TagException(this.tag, \"Cannot find facet with name \"+facetName+\" in composite component \"\n                     +parentCompositeComponent.getClientId(ctx.getFacesContext()));\n         }\n         ",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertFacetHandler.java",
                "sha": "2fde7046e805db4524cb5a760ed6687f74d5e2a0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InterfaceHandler.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InterfaceHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "deletions": 2,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InterfaceHandler.java",
                "patch": "@@ -24,7 +24,6 @@\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n-import javax.faces.application.Resource;\n import javax.faces.component.UIComponent;\n import javax.faces.view.Location;\n import javax.faces.view.facelets.FaceletContext;\n@@ -168,7 +167,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n             {\n                 if (log.isLoggable(Level.SEVERE))\n                 {\n-                    log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                    log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n                 }\n                 return;\n             }            ",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InterfaceHandler.java",
                "sha": "a3a25f566576a8b05eff789937b6dfa0fce21c27",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/RenderFacetHandler.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/RenderFacetHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "deletions": 2,
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/RenderFacetHandler.java",
                "patch": "@@ -94,7 +94,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n             {\n                 if (log.isLoggable(Level.SEVERE))\n                 {\n-                    log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                    log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n                 }\n                 return;\n             }\n@@ -129,7 +129,7 @@ public void onComponentPopulated(FaceletContext ctx, UIComponent c,\n     \n             if (_required != null && _required.getBoolean(ctx) && parentCompositeComponent.getFacet(facetName) == null)\n             {\n-                throw new TagException(this.tag, \"Cannot found facet with name \"+facetName+\" in composite component \"\n+                throw new TagException(this.tag, \"Cannot find facet with name \"+facetName+\" in composite component \"\n                         +parentCompositeComponent.getClientId(ctx.getFacesContext()));\n             }\n             ",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/RenderFacetHandler.java",
                "sha": "ebdb7210f64791a9091dd1ebb141c4427e52d8e3",
                "status": "modified"
            }
        ],
        "message": "MYFACES-2784 NPE when I forget to add an interface to a composite component (added FacesException and fixed typo)",
        "parent": "https://github.com/apache/myfaces/commit/574cf62c495751b8987194a27e478cdcbe214480",
        "patched_files": [
            "ApplicationImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "ApplicationImplTest.java"
        ]
    },
    "myfaces_e5fcef6": {
        "bug_id": "myfaces_e5fcef6",
        "commit": "https://github.com/apache/myfaces/commit/e5fcef63db537a0de8c863c1699aecbf907c207f",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/myfaces/blob/e5fcef63db537a0de8c863c1699aecbf907c207f/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java?ref=e5fcef63db537a0de8c863c1699aecbf907c207f",
                "deletions": 1,
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "patch": "@@ -1259,7 +1259,12 @@ private static void _writeAttributes(Writer writer, UIComponent c, boolean value\n                         valueExpression = c.getValueExpression(pd[i].getName());\n                         if (valueExpressionValues && valueExpression != null)\n                         {\n-                            _writeAttribute(writer, pd[i].getName(), valueExpression.getExpressionString());\n+                            String expressionString = valueExpression.getExpressionString();\n+                            if (null == expressionString)\n+                            {\n+                                expressionString = \"\";\n+                            }\n+                            _writeAttribute(writer, pd[i].getName(), expressionString);\n                         }\n                         else\n                         {",
                "raw_url": "https://github.com/apache/myfaces/raw/e5fcef63db537a0de8c863c1699aecbf907c207f/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "sha": "2185e0baad2352e77f174996cd87d6bf8ac18106",
                "status": "modified"
            },
            {
                "additions": 119,
                "blob_url": "https://github.com/apache/myfaces/blob/e5fcef63db537a0de8c863c1699aecbf907c207f/impl/src/test/java/org/apache/myfaces/renderkit/ErrorPageWriterTest.java",
                "changes": 119,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/renderkit/ErrorPageWriterTest.java?ref=e5fcef63db537a0de8c863c1699aecbf907c207f",
                "deletions": 0,
                "filename": "impl/src/test/java/org/apache/myfaces/renderkit/ErrorPageWriterTest.java",
                "patch": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.myfaces.renderkit;\n+\n+import java.io.StringWriter;\n+\n+import javax.el.ValueExpression;\n+import javax.faces.component.UIViewRoot;\n+import javax.faces.component.html.HtmlOutputText;\n+import javax.validation.constraints.AssertTrue;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.myfaces.renderkit.html.HtmlTextRenderer;\n+import org.apache.myfaces.shared.util.StateUtils;\n+import org.apache.myfaces.shared_impl.util.serial.DefaultSerialFactory;\n+import org.apache.myfaces.test.base.AbstractJsfTestCase;\n+import org.apache.myfaces.test.mock.MockRenderKitFactory;\n+import org.apache.myfaces.test.mock.MockResponseWriter;\n+\n+/**\n+ * @author Bruno Aranda (latest modification by $Author: struberg $)\n+ * @version $Revision: 1188235 $ $Date: 2011-10-24 13:09:33 -0400 (Mon, 24 Oct 2011) $\n+ */\n+public class ErrorPageWriterTest extends AbstractJsfTestCase\n+{\n+    public static Test suite()\n+    {\n+        return new TestSuite(ErrorPageWriterTest.class); // needed in maven\n+    }\n+\n+    private MockResponseWriter writer ;\n+    private HtmlOutputText outputText;\n+\n+    public ErrorPageWriterTest(String name)\n+    {\n+        super(name);\n+    }\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        outputText = new HtmlOutputText();\n+\n+        writer = new MockResponseWriter(new StringWriter(), null, null);\n+        facesContext.setResponseWriter(writer);\n+        // TODO remove these two lines once myfaces-test goes alpha, see MYFACES-1155\n+        facesContext.getViewRoot().setRenderKitId(MockRenderKitFactory.HTML_BASIC_RENDER_KIT);\n+        facesContext.getRenderKit().addRenderer(\n+                outputText.getFamily(),\n+                outputText.getRendererType(),\n+                new HtmlTextRenderer());\n+        servletContext.setAttribute(StateUtils.SERIAL_FACTORY, new DefaultSerialFactory());\n+\n+        facesContext.getAttributes().put(\"org.apache.myfaces.RENDERED_JSF_JS\", Boolean.TRUE);\n+    }\n+\n+    public void tearDown() throws Exception\n+    {\n+        super.tearDown();\n+        outputText = null;\n+        writer = null;\n+    }\n+\n+    public void testValueExpressionGetExpressionStringReturnsNull()\n+    {\n+        //See MYFACES-3413 for details\n+        UIViewRoot root = facesContext.getViewRoot();\n+//        UIForm form = new UIForm();\n+//        form.setId(\"formId\");\n+//        \n+//        form.getChildren().add(inputText);\n+        root.getChildren().add(outputText);\n+\n+        ValueExpression ve = new NullReturningGetExpressionStringValueExpression();\n+        \n+        outputText.setValueExpression(\"rendered\", ve);\n+        String id = \"testValueExpressionGetExpressionStringReturnsNullOutputComponent\";\n+        outputText.setId(id);\n+        try \n+        {\n+            StringWriter w = new StringWriter();\n+            Throwable t = new Throwable(\"Placeholder throwable\");\n+            ErrorPageWriter.debugHtml(w, facesContext, t);\n+            String output = w.toString();\n+            int indexOfOutputComponentId = output.indexOf(id);\n+            String surroundingText = \"output component not found.\";\n+            if (-1 != indexOfOutputComponentId) {\n+                surroundingText = output.substring(Math.max(0, indexOfOutputComponentId - 20), Math.min(output.length(), indexOfOutputComponentId + 280));\n+            }\n+            int indexOfHasRenderedAttribute = output.indexOf(\"rendered=\\\"\\\"\");\n+            boolean hasRenderedAttribute = (-1 != indexOfHasRenderedAttribute);\n+            assertTrue(\"rendered attribute wasn't written correctly: \" + surroundingText, hasRenderedAttribute);\n+        }\n+        catch (Exception e)\n+        {\n+            fail(e.getMessage());\n+        }\n+    }\n+    \n+}",
                "raw_url": "https://github.com/apache/myfaces/raw/e5fcef63db537a0de8c863c1699aecbf907c207f/impl/src/test/java/org/apache/myfaces/renderkit/ErrorPageWriterTest.java",
                "sha": "385475a70fe9d6b806450fc6ab2c274d275dcf9d",
                "status": "added"
            },
            {
                "additions": 88,
                "blob_url": "https://github.com/apache/myfaces/blob/e5fcef63db537a0de8c863c1699aecbf907c207f/impl/src/test/java/org/apache/myfaces/renderkit/NullReturningGetExpressionStringValueExpression.java",
                "changes": 88,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/renderkit/NullReturningGetExpressionStringValueExpression.java?ref=e5fcef63db537a0de8c863c1699aecbf907c207f",
                "deletions": 0,
                "filename": "impl/src/test/java/org/apache/myfaces/renderkit/NullReturningGetExpressionStringValueExpression.java",
                "patch": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.myfaces.renderkit;\n+import java.io.Serializable;\n+\n+import javax.el.ELContext;\n+import javax.el.ELException;\n+import javax.el.PropertyNotFoundException;\n+import javax.el.PropertyNotWritableException;\n+import javax.el.ValueExpression;\n+\n+public class NullReturningGetExpressionStringValueExpression extends ValueExpression implements Serializable {\n+        private static final long serialVersionUID = 1L;\n+\n+        @Override\n+        public String getExpressionString() {\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean isReadOnly(ELContext arg0) {\n+            return true;\n+        }\n+\n+        @Override\n+        public Class<?> getExpectedType() {\n+            // TODO Auto-generated method stub\n+            return null;\n+        }\n+\n+        @Override\n+        public Class<?> getType(ELContext arg0)\n+                throws NullPointerException, PropertyNotFoundException,\n+                ELException {\n+            // TODO Auto-generated method stub\n+            return null;\n+        }\n+\n+        @Override\n+        public Object getValue(ELContext arg0) throws NullPointerException,\n+                PropertyNotFoundException, ELException {\n+            // TODO Auto-generated method stub\n+            return null;\n+        }\n+\n+        @Override\n+        public void setValue(ELContext arg0, Object arg1)\n+                throws NullPointerException, PropertyNotFoundException,\n+                PropertyNotWritableException, ELException {\n+            // TODO Auto-generated method stub\n+            \n+        }\n+\n+        @Override\n+        public boolean equals(Object arg0) {\n+            // TODO Auto-generated method stub\n+            return false;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            // TODO Auto-generated method stub\n+            return 0;\n+        }\n+\n+        @Override\n+        public boolean isLiteralText() {\n+            // TODO Auto-generated method stub\n+            return false;\n+        }\n+    }\n+",
                "raw_url": "https://github.com/apache/myfaces/raw/e5fcef63db537a0de8c863c1699aecbf907c207f/impl/src/test/java/org/apache/myfaces/renderkit/NullReturningGetExpressionStringValueExpression.java",
                "sha": "a933e5bd7595ca1356b127740497e0a86ec2eb53",
                "status": "added"
            }
        ],
        "message": "MYFACES-3413: Default MyFaces Error handling throws NullPointerException during component tree when javax.el.Expression.getExpressionString() is null",
        "parent": "https://github.com/apache/myfaces/commit/56e3fc412302e429076c47766dbaeb413477065c",
        "patched_files": [
            "ErrorPageWriter.java",
            "NullReturningGetExpressionStringValueExpression.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "ErrorPageWriterTest.java"
        ]
    },
    "myfaces_e73e5dc": {
        "bug_id": "myfaces_e73e5dc",
        "commit": "https://github.com/apache/myfaces/commit/e73e5dc281ea7c7e819f59b606adc9a2d2088c01",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/myfaces/blob/e73e5dc281ea7c7e819f59b606adc9a2d2088c01/api/src/main/java/javax/faces/component/_ComponentAttributesMap.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/_ComponentAttributesMap.java?ref=e73e5dc281ea7c7e819f59b606adc9a2d2088c01",
                "deletions": 12,
                "filename": "api/src/main/java/javax/faces/component/_ComponentAttributesMap.java",
                "patch": "@@ -292,10 +292,15 @@ public Object remove(Object key)\n      */\n     public Object put(Object key, Object value)\n     {\n-        checkKeyAndValue(key, value);\n+        checkKey(key);\n \n         PropertyDescriptor propertyDescriptor = getPropertyDescriptor((String)key);\n-        if (propertyDescriptor != null)\n+        if(propertyDescriptor == null)\n+        {\n+          if(value==null)\n+              throw new NullPointerException(\"value is null for a not available property: \" + key);\n+        }\n+        else\n         {\n             if (propertyDescriptor.getReadMethod() != null)\n             {\n@@ -407,16 +412,6 @@ private void setComponentProperty(PropertyDescriptor propertyDescriptor, Object\n         }\n     }\n \n-\n-    private void checkKeyAndValue(Object key, Object value)\n-    {\n-        //http://issues.apache.org/jira/browse/MYFACES-458: obviously, the spec is a little unclear here,\n-        // but value == null should be allowed - if there is a TCK-test failing due to this, we should\n-        // apply for getting the TCK-test dropped\n-        if (value == null) throw new NullPointerException(\"value\");\n-        checkKey(key);\n-    }\n-\n     private void checkKey(Object key)\n     {\n         if (key == null) throw new NullPointerException(\"key\");",
                "raw_url": "https://github.com/apache/myfaces/raw/e73e5dc281ea7c7e819f59b606adc9a2d2088c01/api/src/main/java/javax/faces/component/_ComponentAttributesMap.java",
                "sha": "80705070c6ab669a2b5e07c0d73d44d0e65b5f1c",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/myfaces/blob/e73e5dc281ea7c7e819f59b606adc9a2d2088c01/api/src/test/java/javax/faces/component/UIComponentAttributesTest.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/test/java/javax/faces/component/UIComponentAttributesTest.java?ref=e73e5dc281ea7c7e819f59b606adc9a2d2088c01",
                "deletions": 0,
                "filename": "api/src/test/java/javax/faces/component/UIComponentAttributesTest.java",
                "patch": "@@ -0,0 +1,40 @@\n+package javax.faces.component;\r\n+\r\n+import javax.faces.component.html.HtmlInputText;\r\n+\r\n+import org.apache.shale.test.base.AbstractJsfTestCase;\r\n+\r\n+public class UIComponentAttributesTest extends AbstractJsfTestCase{\r\n+  \r\n+    public UIComponentAttributesTest(String arg0)\r\n+    {\r\n+        super(arg0);\r\n+    }\r\n+\r\n+    private HtmlInputText input;\r\n+    \r\n+    \r\n+    protected void setUp() throws Exception {\r\n+        super.setUp();\r\n+        input = new HtmlInputText();\r\n+        input.setId(\"testId\");\r\n+    }\r\n+\r\n+    protected void tearDown() throws Exception {\r\n+        super.tearDown();\r\n+        input = null;\r\n+    }\r\n+\r\n+    public void testSetNullAttributeOnValidProperty(){\r\n+        input.getAttributes().put(\"style\", null);\r\n+  }\r\n+    public void testSetNullAttributeOnInvalidProperty(){\r\n+        try{\r\n+            input.getAttributes().put(\"someBogus\", null);\r\n+            fail(\"Should have thrown NullPointerException\");\r\n+        }\r\n+        catch(NullPointerException npe){\r\n+            //expected\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/myfaces/raw/e73e5dc281ea7c7e819f59b606adc9a2d2088c01/api/src/test/java/javax/faces/component/UIComponentAttributesTest.java",
                "sha": "97912586c2240ebe5a9d318bbc3c4bcaba3c14aa",
                "status": "added"
            }
        ],
        "message": "MYFACES-1681\n\nthanks to Sun's Ryan Lubke, for pointing out, that MyFaces is too restrictive with respect\nto null values (on UIComponent.getAttributes().put(...)).\nThe RI will only throw the NPE against a null value *if* there isn't an associated property. \nMyfaces does this as well, now.\n\nJavaDoc is misleading, so Ryan will file a \"Spec Bug\" as well.\n\nadded fix for the problem\nadded test-case for this scenario.",
        "parent": "https://github.com/apache/myfaces/commit/119f9bf2a9049fa4b52e56eb1e617c96e6959d9c",
        "patched_files": [
            "_ComponentAttributesMap.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "UIComponentAttributesTest.java"
        ]
    },
    "myfaces_efebceb": {
        "bug_id": "myfaces_efebceb",
        "commit": "https://github.com/apache/myfaces/commit/efebceb953fcd6860eb0034b220a900d15597aea",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/myfaces/blob/efebceb953fcd6860eb0034b220a900d15597aea/impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java?ref=efebceb953fcd6860eb0034b220a900d15597aea",
                "deletions": 0,
                "filename": "impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java",
                "patch": "@@ -620,6 +620,11 @@ public String calculateViewId(FacesContext facesContext)\n     \n     public boolean isViewProtected(FacesContext context, String viewId)\n     {\n+        if (viewId == null)\n+        {\n+            return false;\n+        }\n+        \n         Boolean protectedView = null;\n         if (viewIdProtectedCache != null)\n         {",
                "raw_url": "https://github.com/apache/myfaces/raw/efebceb953fcd6860eb0034b220a900d15597aea/impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java",
                "sha": "28d93edb8f05dc388d20022bab8db1fda11c4e60",
                "status": "modified"
            }
        ],
        "message": "fixed NPE on 404",
        "parent": "https://github.com/apache/myfaces/commit/9d7718632cbb6067725fa70bbd804c4d6a0b08fc",
        "patched_files": [
            "ViewIdSupport.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "ViewIdSupportTest.java"
        ]
    },
    "myfaces_f29adb8": {
        "bug_id": "myfaces_f29adb8",
        "commit": "https://github.com/apache/myfaces/commit/f29adb8712b864e05eb79d3ebb1c82f377821b35",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/myfaces/blob/f29adb8712b864e05eb79d3ebb1c82f377821b35/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java?ref=f29adb8712b864e05eb79d3ebb1c82f377821b35",
                "deletions": 11,
                "filename": "impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "patch": "@@ -114,9 +114,10 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n                 // PartialViewContext.setRenderAll(true)...\". The effect is that ajax requests\n                 // are included on navigation.\n                 PartialViewContext partialViewContext = facesContext.getPartialViewContext();\n+                String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n                 if ( partialViewContext.isPartialRequest() && \n                      !partialViewContext.isRenderAll() && \n-                     !facesContext.getViewRoot().getViewId().equals(toViewId))\n+                     !toViewId.equals(viewId))\n                 {\n                     partialViewContext.setRenderAll(true);\n                 }\n@@ -143,9 +144,10 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n                 // PartialViewContext.setRenderAll(true)...\". The effect is that ajax requests\n                 // are included on navigation.\n                 PartialViewContext partialViewContext = facesContext.getPartialViewContext();\n+                String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n                 if ( partialViewContext.isPartialRequest() && \n                      !partialViewContext.isRenderAll() && \n-                     !facesContext.getViewRoot().getViewId().equals(newViewId))\n+                     !newViewId.equals(viewId))\n                 {\n                     partialViewContext.setRenderAll(true);\n                 }\n@@ -200,15 +202,20 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n      */\n     public NavigationCase getNavigationCase(FacesContext facesContext, String fromAction, String outcome)\n     {\n-        String viewId = facesContext.getViewRoot().getViewId();\n+        String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n+        \n         Map<String, Set<NavigationCase>> casesMap = getNavigationCases();\n         NavigationCase navigationCase = null;\n-\n-        Set<? extends NavigationCase> casesSet = casesMap.get(viewId);\n-        if (casesSet != null)\n+        \n+        Set<? extends NavigationCase> casesSet;\n+        if (viewId != null)\n         {\n-            // Exact match?\n-            navigationCase = calcMatchingNavigationCase(facesContext, casesSet, fromAction, outcome);\n+            casesSet = casesMap.get(viewId);\n+            if (casesSet != null)\n+            {\n+                // Exact match?\n+                navigationCase = calcMatchingNavigationCase(facesContext, casesSet, fromAction, outcome);\n+            }\n         }\n \n         if (navigationCase == null)\n@@ -273,7 +280,7 @@ private NavigationCase getOutcomeNavigationCase (FacesContext facesContext, Stri\n         boolean isRedirect = false;\n         String queryString = null;\n         NavigationCase result = null;\n-        String viewId = facesContext.getViewRoot().getViewId();\n+        String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n         String viewIdToTest = outcome;\n         \n         // If viewIdToTest contains a query string, remove it and set queryString with that value.\n@@ -300,7 +307,7 @@ private NavigationCase getOutcomeNavigationCase (FacesContext facesContext, Stri\n         \n         // If viewIdToTest does not have a \"file extension\", use the one from the current viewId.\n         index = viewIdToTest.indexOf (\".\");\n-        if (index == -1)\n+        if (index == -1 && viewId != null)\n         {\n             index = viewId.lastIndexOf(\".\");\n             \n@@ -313,7 +320,7 @@ private NavigationCase getOutcomeNavigationCase (FacesContext facesContext, Stri\n         // If viewIdToTest does not start with \"/\", look for the last \"/\" in viewId.  If not found, simply prepend \"/\".\n         // Otherwise, prepend everything before and including the last \"/\" in viewId.\n         \n-        if (!viewIdToTest.startsWith (\"/\"))\n+        if (!viewIdToTest.startsWith (\"/\") && viewId != null)\n         {\n             index = viewId.lastIndexOf (\"/\");\n             ",
                "raw_url": "https://github.com/apache/myfaces/raw/f29adb8712b864e05eb79d3ebb1c82f377821b35/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "sha": "01f8e1850abc45726660c1fdf45889c331efa167",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/myfaces/blob/f29adb8712b864e05eb79d3ebb1c82f377821b35/impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java?ref=f29adb8712b864e05eb79d3ebb1c82f377821b35",
                "deletions": 0,
                "filename": "impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java",
                "patch": "@@ -18,6 +18,9 @@\n  */\n package org.apache.myfaces.application;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -565,4 +568,37 @@ public void testFacesRedirectAddsUrlParametersFacesIncludeViewParams()\n         Assert.assertTrue(\"redirect=true in the query String must \"\n                 + \"set redirect to true.\", navigationCase.isRedirect());\n     }\n+    \n+    /**\n+     * Test for MYFACES-3101\n+     */\n+    @Test\n+    public void testHandleViewExpiredExpcetion() throws Exception {\n+        NavigationHandlerImpl underTest = new NavigationHandlerImpl();\n+        // simulate no available ViewRoot (in case of VEE)\n+        facesContext.setViewRoot(null);\n+        // test is based on:\n+        // http://www.nfjsone.com/blog/ed_burns/2009/09/dealing_gracefully_with_viewexpiredexception_in_jsf2\n+        underTest.handleNavigation(facesContext, null, \"viewExpired\");\n+\n+        assertNotNull(facesContext.getViewRoot());\n+        assertEquals(\"viewExpired\", facesContext.getViewRoot().getViewId());\n+        \n+    }\n+    \n+    /**\n+     * Test for MYFACES-3101 - partial request (without redirect)\n+     */\n+    @Test\n+    public void testHandleViewExpiredExpcetionForPartial() throws Exception {\n+        NavigationHandlerImpl underTest = new NavigationHandlerImpl();\n+        // simulate no available ViewRoot (in case of VEE)\n+        facesContext.setViewRoot(null);\n+        facesContext.getPartialViewContext().setPartialRequest(true);\n+        \n+        underTest.handleNavigation(facesContext, null, \"/viewExpired.xhtml\");\n+        \n+        assertNotNull(facesContext.getViewRoot());\n+        assertEquals(\"/viewExpired.xhtml\", facesContext.getViewRoot().getViewId());\n+    }\n }",
                "raw_url": "https://github.com/apache/myfaces/raw/f29adb8712b864e05eb79d3ebb1c82f377821b35/impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java",
                "sha": "acde9b650efc1333bb00464044ce66d58731226a",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3101 NavigationHandlerImpl throws NullpointerException if view is expired",
        "parent": "https://github.com/apache/myfaces/commit/6d2fe74948bdc9e5642e1e5027fd1f3ac5f1fd47",
        "patched_files": [
            "NavigationHandlerImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "NavigationHandlerImplTest.java"
        ]
    },
    "myfaces_f4721aa": {
        "bug_id": "myfaces_f4721aa",
        "commit": "https://github.com/apache/myfaces/commit/f4721aabfcebacfd4a837a1c369024d4edb6ee1f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/myfaces/blob/f4721aabfcebacfd4a837a1c369024d4edb6ee1f/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java?ref=f4721aabfcebacfd4a837a1c369024d4edb6ee1f",
                "deletions": 1,
                "filename": "shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "patch": "@@ -631,7 +631,9 @@ private void _restoreRedirectValue(FacesContext facesContext)\n                 // to this request object\n                 cookie.setMaxAge(0);\n                 cookie.setPath(_getCookiePath(externalContext));\n-                cookie.setValue(null);\n+                //MYFACES-3354 jetty 6.1.5 does not allow this,\n+                //call setMaxAge(0) is enough\n+                //cookie.setValue(null);\n                 httpResponse.addCookie(cookie);\n             }\n         }",
                "raw_url": "https://github.com/apache/myfaces/raw/f4721aabfcebacfd4a837a1c369024d4edb6ee1f/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "sha": "4b14f05f3648e44eecd0f03adf7177a7e395059b",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3354 NullPointerException on jetty 6.1.5 with faces-redirect=true action result",
        "parent": "https://github.com/apache/myfaces/commit/e40ecd11869a3940ab6e821c789e58378d402887",
        "patched_files": [
            "FlashImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "FlashImplTest.java"
        ]
    },
    "myfaces_f9c0311": {
        "bug_id": "myfaces_f9c0311",
        "commit": "https://github.com/apache/myfaces/commit/f9c03118ca223560531c81a0e634c66506b0d23f",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/myfaces/blob/f9c03118ca223560531c81a0e634c66506b0d23f/api/src/main/java/javax/faces/component/UIComponent.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIComponent.java?ref=f9c03118ca223560531c81a0e634c66506b0d23f",
                "deletions": 6,
                "filename": "api/src/main/java/javax/faces/component/UIComponent.java",
                "patch": "@@ -152,8 +152,8 @@ public boolean invokeOnComponent(javax.faces.context.FacesContext context, Strin\n     \t}\n     \t\n     \t//searching for this component?\n-    \tboolean returnValue = this.getClientId(context).equals(clientId); \n-    \tif(returnValue)\n+    \tboolean found = clientId.equals(this.getClientId(context)); \n+    \tif(found)\n     \t{\n     \t\ttry\n     \t\t{\n@@ -162,14 +162,14 @@ public boolean invokeOnComponent(javax.faces.context.FacesContext context, Strin\n     \t\t{\n     \t\t\tthrow new FacesException(e);\n     \t\t}\n-    \t\treturn returnValue;\n+    \t\treturn found;\n     \t}\n \t\t//Searching for this component's children/facets \n-    \tfor (Iterator<UIComponent> it = this.getFacetsAndChildren(); !returnValue && it.hasNext();){\n-    \t\treturnValue = it.next().invokeOnComponent(context, clientId, callback);\n+    \tfor (Iterator<UIComponent> it = this.getFacetsAndChildren(); !found && it.hasNext();){\n+    \t\tfound = it.next().invokeOnComponent(context, clientId, callback);\n     \t}\n     \t\t\n-    \treturn returnValue;\n+    \treturn found;\n     }\n \n     public abstract java.lang.String getClientId(javax.faces.context.FacesContext context);",
                "raw_url": "https://github.com/apache/myfaces/raw/f9c03118ca223560531c81a0e634c66506b0d23f/api/src/main/java/javax/faces/component/UIComponent.java",
                "sha": "f6de17fc9045a6cb2b24e90d5fe4ffae62a7c73d",
                "status": "modified"
            }
        ],
        "message": "Avoid NullPointerException when getClientId(..) returns null.\nAlso rename variable to more helpful name.",
        "parent": "https://github.com/apache/myfaces/commit/8f80c32523db8eadb058091fa666038a8b284efb",
        "patched_files": [
            "UIComponent.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "UIComponentTest.java"
        ]
    },
    "myfaces_ff101d4": {
        "bug_id": "myfaces_ff101d4",
        "commit": "https://github.com/apache/myfaces/commit/ff101d4d344ba2e4bd63b7e6c0b42607ffb72345",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/myfaces/blob/ff101d4d344ba2e4bd63b7e6c0b42607ffb72345/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java?ref=ff101d4d344ba2e4bd63b7e6c0b42607ffb72345",
                "deletions": 1,
                "filename": "shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java",
                "patch": "@@ -1086,7 +1086,7 @@ public void write(String str) throws IOException\n         closeStartTagIfNecessary();\n         // empty string commonly used to force the start tag to be closed.\n         // in such case, do not call down the writer chain\n-        if (str.length() > 0)\n+        if (str != null && str.length() > 0)\n         {\n             // Don't bother encoding anything if chosen character encoding is UTF-8\n             if (_isUTF8)",
                "raw_url": "https://github.com/apache/myfaces/raw/ff101d4d344ba2e4bd63b7e6c0b42607ffb72345/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java",
                "sha": "12b7cfd7573482675cf992426e625fe7d87c65f8",
                "status": "modified"
            }
        ],
        "message": "MYFACES-3708 NPE when no title using primefaces mobile",
        "parent": "https://github.com/apache/myfaces/commit/e61ec49c975b7e941e61616a0da846f27b800e9c",
        "patched_files": [
            "HtmlResponseWriterImpl.java"
        ],
        "repo": "myfaces",
        "unit_tests": [
            "HtmlResponseWriterImplTest.java"
        ]
    }
}