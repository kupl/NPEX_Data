[
    {
        "commit": "https://github.com/apache/tomee/commit/9bdcd7ae5d2dcce204e62273f7610283d69f1e10",
        "file": [
            {
                "patch": "@@ -80,7 +80,11 @@ public ManagedSecurityService(final WebBeansContext context) {\n             proxy = Principal.class.cast(Proxy.newProxyInstance(loader, interfaceList.toArray(new Class[0]), new InvocationHandler() {\n                 @Override\n                 public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {\n-                    return method.invoke(doGetPrincipal(), args);\n+                    final Principal principal = doGetPrincipal();\n+                    if (principal == null) {\n+                        return null;\n+                    }\n+                    return method.invoke(principal, args);\n                 }\n             }));\n         }",
                "additions": 5,
                "raw_url": "https://github.com/apache/tomee/raw/9bdcd7ae5d2dcce204e62273f7610283d69f1e10/container/openejb-core/src/main/java/org/apache/openejb/cdi/ManagedSecurityService.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "018cc7c0f2d0bdf2f82858af33977e9f765ba5e9",
                "blob_url": "https://github.com/apache/tomee/blob/9bdcd7ae5d2dcce204e62273f7610283d69f1e10/container/openejb-core/src/main/java/org/apache/openejb/cdi/ManagedSecurityService.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/ManagedSecurityService.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/ManagedSecurityService.java?ref=9bdcd7ae5d2dcce204e62273f7610283d69f1e10"
            },
            {
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.tomee.microprofile.jwt.cdi;\n \n+import org.apache.xbean.propertyeditor.PropertyEditorRegistry;\n import org.apache.xbean.propertyeditor.PropertyEditors;\n import org.eclipse.microprofile.jwt.Claim;\n import org.eclipse.microprofile.jwt.ClaimValue;\n@@ -50,6 +51,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.logging.Level;\n import java.util.logging.Logger;\n \n @Vetoed\n@@ -71,6 +73,7 @@\n     private final Set<Type> types;\n     private final String id;\n     private final Class<? extends Annotation> scope;\n+    private final PropertyEditorRegistry propertyEditorRegistry = new PropertyEditorRegistry();\n \n     public ClaimBean(final BeanManager bm, final Type type) {\n         this.bm = bm;\n@@ -79,6 +82,7 @@ public ClaimBean(final BeanManager bm, final Type type) {\n         rawType = getRawType(type);\n         this.id = \"ClaimBean_\" + types;\n         scope = Dependent.class;\n+        propertyEditorRegistry.registerDefaults();\n     }\n \n     private Class getRawType(final Type type) {\n@@ -245,13 +249,17 @@ public T create(final CreationalContext<T> context) {\n             return (T) toJson(key);\n \n         } else if (PropertyEditors.canConvert((Class<?>) ip.getType())) {\n+            final Class<?> type = (Class<?>) ip.getType();\n             try {\n-                final Class<?> type = (Class<?>) ip.getType();\n-                final String claimValue = getClaimValue(key).toString();\n-                return (T) PropertyEditors.getValue(type, claimValue);\n-            } catch (Exception e) {\n-                logger.warning(e.getMessage());\n+                final Object claimObject = getClaimValue(key);\n+                if (claimObject == null) {\n+                    return null;\n+                }\n+                return (T) propertyEditorRegistry.getValue(type, String.valueOf(claimObject));\n+            } catch (final Exception e) {\n+                logger.log(Level.WARNING, String.format(\"Cannot convert claim %s into type %s\", key, type), e);\n             }\n+\n         } else {\n             // handle Raw types\n             return getClaimValue(key);",
                "additions": 13,
                "raw_url": "https://github.com/apache/tomee/raw/9bdcd7ae5d2dcce204e62273f7610283d69f1e10/mp-jwt/src/main/java/org/apache/tomee/microprofile/jwt/cdi/ClaimBean.java",
                "status": "modified",
                "changes": 18,
                "deletions": 5,
                "sha": "67d90672c1830a491eeaf4b2fde695e01e3aee7d",
                "blob_url": "https://github.com/apache/tomee/blob/9bdcd7ae5d2dcce204e62273f7610283d69f1e10/mp-jwt/src/main/java/org/apache/tomee/microprofile/jwt/cdi/ClaimBean.java",
                "filename": "mp-jwt/src/main/java/org/apache/tomee/microprofile/jwt/cdi/ClaimBean.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/mp-jwt/src/main/java/org/apache/tomee/microprofile/jwt/cdi/ClaimBean.java?ref=9bdcd7ae5d2dcce204e62273f7610283d69f1e10"
            }
        ],
        "bug_id": "tomee_1",
        "parent": "https://github.com/apache/tomee/commit/62bf5805227b55ac998f80561c643010bfff7040",
        "message": "Quick fixes for NPE TOMEE-2513 and TOMEE-2514",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/5d3efd692c4ee3c635d76e5e53b0ff583d692be3",
        "file": [
            {
                "patch": "@@ -0,0 +1,35 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.arquillian.tests.cmp.sample;\n+\n+/**\n+ * @version $Revision$ $Date$\n+ */\n+public interface Actor extends javax.ejb.EJBLocalObject {\n+\n+    Integer getId();\n+\n+    void setId(Integer id);\n+\n+    String getFirstName();\n+\n+    void setFirstName(String director);\n+\n+    String getLastName();\n+\n+    void setLastName(String title);\n+}",
                "additions": 35,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/Actor.java",
                "status": "added",
                "changes": 35,
                "deletions": 0,
                "sha": "562b075b171f2a04af15cdc75dd149e020682682",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/Actor.java",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/Actor.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/Actor.java?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.arquillian.tests.cmp.sample;\n+\n+import javax.ejb.EntityBean;\n+\n+public abstract class ActorBean implements EntityBean {\n+\n+    public ActorBean() {\n+    }\n+\n+    public Integer ejbCreate(final String firstName, final String lastName) {\n+        this.setFirstName(firstName);\n+        this.setLastName(lastName);\n+        return null;\n+    }\n+\n+    public abstract Integer getId();\n+\n+    public abstract void setId(Integer id);\n+\n+    public abstract String getFirstName();\n+\n+    public abstract void setFirstName(String firstName);\n+\n+    public abstract String getLastName();\n+\n+    public abstract void setLastName(String lastName);\n+\n+\n+}",
                "additions": 45,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/ActorBean.java",
                "status": "added",
                "changes": 45,
                "deletions": 0,
                "sha": "70f0d2336c451bbbbad83fc2573d88cfb6afa579",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/ActorBean.java",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/ActorBean.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/ActorBean.java?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.arquillian.tests.cmp.sample;\n+\n+import javax.ejb.CreateException;\n+import javax.ejb.FinderException;\n+import java.util.Collection;\n+\n+/**\n+ * @version $Revision$ $Date$\n+ */\n+interface ActorLocalHome extends javax.ejb.EJBLocalHome {\n+\n+    Actor create(String firstName, String lastName) throws CreateException;\n+\n+    Actor findByPrimaryKey(Integer primarykey) throws FinderException;\n+\n+    Collection findAll() throws FinderException;\n+}",
                "additions": 33,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/ActorLocalHome.java",
                "status": "added",
                "changes": 33,
                "deletions": 0,
                "sha": "a8f7dd06abf1f24a73325ebb74f61b024a0ec442",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/ActorLocalHome.java",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/ActorLocalHome.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/ActorLocalHome.java?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -0,0 +1,68 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.arquillian.tests.cmp.sample;\n+\n+import java.io.Serializable;\n+\n+public class ActorVO implements Serializable {\n+\n+    private Integer id;\n+    private String firstName;\n+    private String lastName;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public static ActorVO from (final Actor actor) {\n+        final ActorVO actorVO = new ActorVO();\n+        actorVO.setId(actor.getId());\n+        actorVO.setFirstName(actor.getFirstName());\n+        actorVO.setLastName(actor.getLastName());\n+\n+        return actorVO;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"ActorVO{\" +\n+                \"id=\" + id +\n+                \", firstName='\" + firstName + '\\'' +\n+                \", lastName='\" + lastName + '\\'' +\n+                '}';\n+    }\n+}",
                "additions": 68,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/ActorVO.java",
                "status": "added",
                "changes": 68,
                "deletions": 0,
                "sha": "a3c1a1d42307ef889db2abc56a180c44292edbe8",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/ActorVO.java",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/ActorVO.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/ActorVO.java?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -42,7 +42,8 @@\n     @Deployment(testable = false)\n     public static WebArchive createDeployment() {\n         WebArchive archive = ShrinkWrap.create(WebArchive.class, CustomOrmXmlTest.class.getSimpleName() + \".war\")\n-                .addClasses(MovieServlet.class, Movie.class, MovieBean.class, MovieException.class, MovieLocalHome.class, MoviesBusinessBean.class, MoviesBusinessLocal.class, MoviesBusinessLocalHome.class, MovieVO.class)\n+                .addClasses(MovieServlet.class, Movie.class, MovieBean.class, MovieException.class, MovieLocalHome.class, MoviesBusinessBean.class,\n+                        MoviesBusinessLocal.class, MoviesBusinessLocalHome.class, MovieVO.class, ActorBean.class, ActorLocalHome.class, Actor.class)\n                 .addAsResource(new ClassLoaderAsset(\"org/apache/openejb/arquillian/tests/cmp/sample/custom-orm.xml\"), \"META-INF/custom-orm.xml\")\n                 .addAsResource(new ClassLoaderAsset(\"org/apache/openejb/arquillian/tests/cmp/sample/persistence.xml\"), \"META-INF/persistence.xml\")\n                 .addAsWebInfResource(new ClassLoaderAsset(\"org/apache/openejb/arquillian/tests/cmp/sample/openejb-jar.xml\"), \"openejb-jar.xml\")",
                "additions": 2,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/CustomOrmXmlTest.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "138ba536bf581962dd8211af225d90e200ec0be2",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/CustomOrmXmlTest.java",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/CustomOrmXmlTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/CustomOrmXmlTest.java?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.openejb.arquillian.tests.cmp.sample;\n \n+import java.util.Collection;\n+\n /**\n  * @version $Revision$ $Date$\n  */\n@@ -36,4 +38,8 @@\n     int getYear();\n \n     void setYear(int year);\n+\n+    void addActor(String firstName, String lastName);\n+\n+    Collection getActorVO();\n }",
                "additions": 6,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/Movie.java",
                "status": "modified",
                "changes": 6,
                "deletions": 0,
                "sha": "1ff9285e2fe76febb84046237c669df8a22f2224",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/Movie.java",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/Movie.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/Movie.java?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -16,7 +16,15 @@\n  */\n package org.apache.openejb.arquillian.tests.cmp.sample;\n \n+import javax.ejb.CreateException;\n+import javax.ejb.EJBException;\n import javax.ejb.EntityBean;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n \n public abstract class MovieBean implements EntityBean {\n \n@@ -46,4 +54,37 @@ public Integer ejbCreate(final String director, String title, final int year) {\n \n     public abstract void setYear(int year);\n \n+    public abstract Collection getActors();\n+\n+    public abstract void setActors(Collection actors);\n+\n+    public void addActor(String firstName, String lastName) {\n+        try {\n+            final InitialContext context = new InitialContext();\n+\n+            final ActorLocalHome actorBean = (ActorLocalHome) context.lookup(\"java:comp/env/ejb/ActorBean\");\n+            final Actor actor = actorBean.create(firstName, lastName);\n+\n+            final Collection actors = this.getActors();\n+            actors.add(actor);\n+\n+        } catch (NamingException | CreateException e) {\n+            throw new EJBException(e);\n+        }\n+    }\n+\n+    public Collection getActorVO() {\n+        List result = new ArrayList();\n+\n+        final Collection actors = this.getActors();\n+        final Iterator iterator = actors.iterator();\n+\n+        while (iterator.hasNext()) {\n+            Actor actor = (Actor) iterator.next();\n+            result.add(ActorVO.from(actor));\n+        }\n+\n+        return result;\n+    }\n+\n }",
                "additions": 41,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MovieBean.java",
                "status": "modified",
                "changes": 41,
                "deletions": 0,
                "sha": "edee3093cc64af36cb3b02070f362f32ba038702",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MovieBean.java",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MovieBean.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MovieBean.java?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -54,7 +54,9 @@ private void process(final HttpServletRequest req, final HttpServletResponse res\n \n             final MoviesBusinessLocal bean = home.create();\n \n-            bean.addMovie(\"Bad Boys\", \"Michael Bay\", 1995);\n+            final int id = bean.addMovie(\"Bad Boys\", \"Michael Bay\", 1995);\n+            bean.addActor(id, \"Will\", \"Smith\");\n+            bean.addActor(id, \"Martin\", \"Lawrence\");\n \n             pw.println(\"Movie added successfully\");\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MovieServlet.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "9610abff5b291e09a59047482b05088ab17c3cc8",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MovieServlet.java",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MovieServlet.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MovieServlet.java?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -17,13 +17,17 @@\n package org.apache.openejb.arquillian.tests.cmp.sample;\n \n import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n \n public class MovieVO implements Serializable {\n \n     private Integer id;\n     private String title;\n     private String director;\n     private int year;\n+    private List actors = new ArrayList();\n \n     public Integer getId() {\n         return id;\n@@ -57,12 +61,17 @@ public void setYear(int year) {\n         this.year = year;\n     }\n \n+    public Collection getActors() {\n+        return actors;\n+    }\n+\n     public static MovieVO from (final Movie movie) {\n         final MovieVO movieVO = new MovieVO();\n         movieVO.setId(movie.getId());\n         movieVO.setTitle(movie.getTitle());\n         movieVO.setDirector(movie.getDirector());\n         movieVO.setYear(movie.getYear());\n+        movieVO.getActors().addAll(movie.getActorVO());\n \n         return movieVO;\n     }\n@@ -74,6 +83,7 @@ public String toString() {\n                 \", title='\" + title + '\\'' +\n                 \", director='\" + director + '\\'' +\n                 \", year=\" + year +\n+                \", actors=\" + actors +\n                 '}';\n     }\n }",
                "additions": 10,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MovieVO.java",
                "status": "modified",
                "changes": 10,
                "deletions": 0,
                "sha": "d7618dc87a74a01e8e7ae6582d7f6129567b6409",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MovieVO.java",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MovieVO.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MovieVO.java?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -53,20 +53,35 @@ public void setSessionContext(final SessionContext ctx) throws EJBException, Rem\n     }\n \n \n-    public void addMovie(final String title, final String director, int year) throws MovieException {\n+    public int addMovie(final String title, final String director, int year) throws MovieException {\n         try {\n             final InitialContext context = new InitialContext();\n             final MovieLocalHome home = (MovieLocalHome)\n                     PortableRemoteObject.narrow(context.lookup(\"java:comp/env/ejb/MovieBean\"), MovieLocalHome.class);\n \n-\n-            home.create(director, title, year);\n+            final Movie movie = home.create(director, title, year);\n+            return movie.getId();\n \n         } catch (NamingException | CreateException e) {\n             throw new MovieException(e);\n         }\n     }\n \n+    public void addActor(final int movieId, final String firstName, final String lastName) throws MovieException {\n+        try {\n+            final InitialContext context = new InitialContext();\n+            final MovieLocalHome home = (MovieLocalHome)\n+                PortableRemoteObject.narrow(context.lookup(\"java:comp/env/ejb/MovieBean\"), MovieLocalHome.class);\n+\n+            final Movie movie = home.findByPrimaryKey(movieId);\n+            movie.addActor(firstName, lastName);\n+        } catch (NamingException | FinderException e) {\n+            throw new MovieException(e);\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+        }\n+    }\n+\n     public MovieVO findByPrimaryKey(final int id) throws MovieException {\n         try {\n             final InitialContext context = new InitialContext();",
                "additions": 18,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MoviesBusinessBean.java",
                "status": "modified",
                "changes": 21,
                "deletions": 3,
                "sha": "6942d4983da6729f1b56885359a565dc2254fcf5",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MoviesBusinessBean.java",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MoviesBusinessBean.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MoviesBusinessBean.java?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -21,7 +21,8 @@\n \n public interface MoviesBusinessLocal extends javax.ejb.EJBLocalObject {\n \n-    void addMovie(final String title, final String director, int year) throws RemoteException, MovieException;\n+    int addMovie(final String title, final String director, int year) throws RemoteException, MovieException;\n+    int addActor(final int movieId, final String firstName, final String lastName) throws RemoteException, MovieException;\n     Movie findByPrimaryKey(final int id) throws RemoteException, MovieException;\n     Collection findAll() throws RemoteException, MovieException;\n     void delete(Integer id) throws RemoteException, MovieException;",
                "additions": 2,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MoviesBusinessLocal.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "40a75f509cda2fcee7274f1886aff8005969ccef",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MoviesBusinessLocal.java",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MoviesBusinessLocal.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/cmp/sample/MoviesBusinessLocal.java?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -87,6 +87,7 @@\n         # scan types by configuring a JarScanner with a nested JarScanFilter.\n         tomcat.util.scan.StandardJarScanFilter.jarsToScan=\\\n         log4j-core*.jar,log4j-taglib*.jar,log4javascript*.jar,slf4j-taglib*.jar\n+        openejb.descriptors.output = true\n       </property>\n     </configuration>\n   </container>\n@@ -108,6 +109,7 @@\n \n         # try to save some permgen mem\n         openejb.cdi.activated-on-ejb = false\n+        openejb.descriptors.output = true\n       </property>\n     </configuration>\n   </container>",
                "additions": 2,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/arquillian.xml",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "fb0f5fdc111af81edaf4414b649c230cab19a967",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/arquillian.xml",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/arquillian.xml",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/arquillian.xml?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -1,7 +1,24 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n <entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" version=\"1.0\">\n     <entity class=\"openejb.org.apache.openejb.arquillian.tests.cmp.sample.MovieBean\" name=\"MovieBean\">\n-        <description>#MovieBean</description>\n+        <description>CustomOrmXmlTest#MovieBean</description>\n         <table/>\n         <named-query name=\"MovieBean.findByDirector(java.lang.String)\">\n             <query>SELECT m FROM MovieBean m WHERE m.director = ?1</query>\n@@ -15,9 +32,27 @@\n             </id>\n             <basic name=\"director\"/>\n             <basic name=\"year\"/>\n-            <basic name=\"title\">\n-                <column name=\"movie_title\" length=\"250\" />\n-            </basic>\n+            <basic name=\"title\"/>\n+            <one-to-many mapped-by=\"MovieBean_actors\" name=\"actors\"/>\n+        </attributes>\n+    </entity>\n+    <entity class=\"openejb.org.apache.openejb.arquillian.tests.cmp.sample.ActorBean\" name=\"ActorBean\">\n+        <description>CustomOrmXmlTest#ActorBean</description>\n+        <table/>\n+        <named-query name=\"ActorBean.findAll\">\n+            <query>SELECT a FROM ActorBean as a</query>\n+        </named-query>\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value strategy=\"IDENTITY\"/>\n+            </id>\n+            <basic name=\"firstName\"/>\n+            <basic name=\"lastName\"/>\n+            <many-to-one name=\"MovieBean_actors\">\n+                <cascade>\n+                    <cascade-all/>\n+                </cascade>\n+            </many-to-one>\n         </attributes>\n     </entity>\n </entity-mappings>",
                "additions": 39,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/custom-orm.xml",
                "status": "modified",
                "changes": 43,
                "deletions": 4,
                "sha": "49b5e27c5879e6b58f2694adc517109656e78481",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/custom-orm.xml",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/custom-orm.xml",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/custom-orm.xml?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -24,7 +24,7 @@\n   <enterprise-beans>\n     <session>\n       <description>\n-        A service that handles monetary payments.\n+        A service that handles movie entities.\n       </description>\n       <ejb-name>MovieBusinessBean</ejb-name>\n       <local-home>org.apache.openejb.arquillian.tests.cmp.sample.MoviesBusinessLocalHome</local-home>\n@@ -39,6 +39,13 @@\n         <local>org.apache.openejb.arquillian.tests.cmp.sample.Movie</local>\n         <ejb-link>MovieBean</ejb-link>\n       </ejb-local-ref>\n+      <ejb-local-ref>\n+        <ejb-ref-name>ejb/ActorBean</ejb-ref-name>\n+        <ejb-ref-type>Entity</ejb-ref-type>\n+        <local-home>org.apache.openejb.arquillian.tests.cmp.sample.ActorLocalHome</local-home>\n+        <local>org.apache.openejb.arquillian.tests.cmp.sample.Actor</local>\n+        <ejb-link>ActorBean</ejb-link>\n+      </ejb-local-ref>\n     </session>\n     <entity>\n       <ejb-name>MovieBean</ejb-name>\n@@ -80,9 +87,58 @@\n         <ejb-ql>SELECT m FROM MovieBean as m</ejb-ql>\n       </query>\n     </entity>\n+    <entity>\n+      <ejb-name>ActorBean</ejb-name>\n+      <local-home>org.apache.openejb.arquillian.tests.cmp.sample.ActorLocalHome</local-home>\n+      <local>org.apache.openejb.arquillian.tests.cmp.sample.Actor</local>\n+      <ejb-class>org.apache.openejb.arquillian.tests.cmp.sample.ActorBean</ejb-class>\n+      <persistence-type>Container</persistence-type>\n+      <prim-key-class>java.lang.Integer</prim-key-class>\n+      <reentrant>false</reentrant>\n+      <cmp-version>2.x</cmp-version>\n+      <abstract-schema-name>ActorBean</abstract-schema-name>\n+      <cmp-field>\n+        <field-name>id</field-name>\n+      </cmp-field>\n+      <cmp-field>\n+        <field-name>firstName</field-name>\n+      </cmp-field>\n+      <cmp-field>\n+        <field-name>lastName</field-name>\n+      </cmp-field>\n+      <primkey-field>id</primkey-field>\n+      <query>\n+        <query-method>\n+          <method-name>findAll</method-name>\n+          <method-params/>\n+        </query-method>\n+        <ejb-ql>SELECT a FROM ActorBean as a</ejb-ql>\n+      </query>\n+    </entity>\n   </enterprise-beans>\n-\n-\n+  <relationships>\n+    <ejb-relation>\n+      <ejb-relationship-role>\n+        <ejb-relationship-role-name>Movie-has-many-actors</ejb-relationship-role-name>\n+        <multiplicity>One</multiplicity>\n+        <cascade-delete/>\n+        <relationship-role-source>\n+          <ejb-name>MovieBean</ejb-name>\n+        </relationship-role-source>\n+        <cmr-field>\n+          <cmr-field-name>actors</cmr-field-name>\n+          <cmr-field-type>java.util.Collection</cmr-field-type>\n+        </cmr-field>\n+      </ejb-relationship-role>\n+      <ejb-relationship-role>\n+        <ejb-relationship-role-name>Actor-acts-in-movie</ejb-relationship-role-name>\n+        <multiplicity>Many</multiplicity>\n+        <relationship-role-source>\n+          <ejb-name>ActorBean</ejb-name>\n+        </relationship-role-source>\n+      </ejb-relationship-role>\n+    </ejb-relation>\n+  </relationships>\n   <assembly-descriptor>\n     <container-transaction>\n       <method>\n@@ -91,13 +147,19 @@\n       </method>\n       <trans-attribute>Required</trans-attribute>\n     </container-transaction>\n-\n     <container-transaction>\n       <method>\n         <ejb-name>MovieBean</ejb-name>\n         <method-name>*</method-name>\n       </method>\n       <trans-attribute>Supports</trans-attribute>\n     </container-transaction>\n+    <container-transaction>\n+      <method>\n+        <ejb-name>ActorBean</ejb-name>\n+        <method-name>*</method-name>\n+      </method>\n+      <trans-attribute>Supports</trans-attribute>\n+    </container-transaction>\n   </assembly-descriptor>\n </ejb-jar>",
                "additions": 66,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/ejb-jar.xml",
                "status": "modified",
                "changes": 70,
                "deletions": 4,
                "sha": "0ca6a12f6ed599adbb37b176cfa70e39439dfd0f",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/ejb-jar.xml",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/ejb-jar.xml",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/ejb-jar.xml?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -7,5 +7,11 @@\n                 <uuid/>\n             </key-generator>\n         </entity>\n+        <entity>\n+            <ejb-name>ActorBean</ejb-name>\n+            <key-generator xmlns=\"http://www.openejb.org/xml/ns/pkgen-2.1\">\n+                <uuid/>\n+            </key-generator>\n+        </entity>\n     </enterprise-beans>\n </openejb-jar>\n\\ No newline at end of file",
                "additions": 6,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/openejb-jar.xml",
                "status": "modified",
                "changes": 6,
                "deletions": 0,
                "sha": "e01a3deeca388ddc78dd65dbbf56a7517d9a3c32",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/openejb-jar.xml",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/openejb-jar.xml",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/openejb-jar.xml?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            },
            {
                "patch": "@@ -1,14 +1,32 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n <persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" version=\"1.0\">\n-    <persistence-unit name=\"cmp\" transaction-type=\"JTA\">\n-        <jta-data-source>Default JDBC Database</jta-data-source>\n-        <non-jta-data-source>Default Unmanaged JDBC Database</non-jta-data-source>\n-        <mapping-file>META-INF/custom-orm.xml</mapping-file>\n-        <class>openejb.org.apache.openejb.arquillian.tests.cmp.sample.MovieBean</class>\n-        <properties>\n-            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true, Indexes=false, IgnoreErrors=true)\"/>\n-            <property name=\"openjpa.Log\" value=\"DefaultLevel=INFO\"/>\n-            <property name=\"eclipselink.ddl-generation\" value=\"create-tables\"/>\n-        </properties>\n-    </persistence-unit>\n-</persistence>\n+<persistence-unit name=\"cmp\" transaction-type=\"JTA\">\n+    <jta-data-source>Default JDBC Database</jta-data-source>\n+    <non-jta-data-source>Default Unmanaged JDBC Database</non-jta-data-source>\n+    <mapping-file>META-INF/custom-orm.xml</mapping-file>\n+    <class>openejb.org.apache.openejb.arquillian.tests.cmp.sample.MovieBean</class>\n+    <class>openejb.org.apache.openejb.arquillian.tests.cmp.sample.ActorBean</class>\n+    <properties>\n+        <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true, Indexes=false, IgnoreErrors=true)\"/>\n+        <property name=\"openjpa.Log\" value=\"DefaultLevel=INFO\"/>\n+        <property name=\"eclipselink.ddl-generation\" value=\"create-tables\"/>\n+    </properties>\n+</persistence-unit>\n+</persistence>\n\\ No newline at end of file",
                "additions": 30,
                "raw_url": "https://github.com/apache/tomee/raw/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/persistence.xml",
                "status": "modified",
                "changes": 42,
                "deletions": 12,
                "sha": "88e5765dc56aa30d4f917afb1a55c659a4134c7d",
                "blob_url": "https://github.com/apache/tomee/blob/5d3efd692c4ee3c635d76e5e53b0ff583d692be3/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/persistence.xml",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/persistence.xml",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/resources/org/apache/openejb/arquillian/tests/cmp/sample/persistence.xml?ref=5d3efd692c4ee3c635d76e5e53b0ff583d692be3"
            }
        ],
        "bug_id": "tomee_2",
        "parent": "https://github.com/apache/tomee/commit/8342058ae1f35f426e25a2eea9244a8ba106457f",
        "message": "TOMEE-2295 WIP - fails with a NullPointerException which I'm trying to track down",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/26d5b4e51c1aec9af27e484dc72b454fb097e607",
        "file": [
            {
                "patch": "@@ -157,6 +157,7 @@ public void init(final Object object) {\n                 if (!startupObject.isFromWebApp() &&\n                     ejbJar.webapp &&\n                     !appInfo.webAppAlone &&\n+                    ejbJar.path != null &&\n                     bda.uri.toString().contains(ejbJar.path)) {\n                     continue;\n                 }",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/26d5b4e51c1aec9af27e484dc72b454fb097e607/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiScanner.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "f081703216856bbbad0c7d9bc2532a1b932bb9f6",
                "blob_url": "https://github.com/apache/tomee/blob/26d5b4e51c1aec9af27e484dc72b454fb097e607/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiScanner.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiScanner.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiScanner.java?ref=26d5b4e51c1aec9af27e484dc72b454fb097e607"
            }
        ],
        "bug_id": "tomee_3",
        "parent": "https://github.com/apache/tomee/commit/8f0dacdf5df497c3e3239eb0a926a64226809ddd",
        "message": "TOMEE-2408 - Fixed NPE.",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/bcb153772db8df48167b1d182c9bc985ab800f11",
        "file": [
            {
                "patch": "@@ -282,7 +282,9 @@ private void addProperties(final File conf, final boolean legacySchema, final Fi\n                 if (EnvProps.extractConfigurationFiles()) {\n \n                     final String rawPropsContent = (String) props.get(Properties.class);\n-                    IO.copy(IO.read(rawPropsContent), serviceConfig);\n+                    if (rawPropsContent != null) {\n+                        IO.copy(IO.read(rawPropsContent), serviceConfig);\n+                    }\n \n                 } else {\n                     props.put(\"disabled\", \"true\");",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/bcb153772db8df48167b1d182c9bc985ab800f11/server/openejb-server/src/main/java/org/apache/openejb/server/ServiceManager.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "3e72179da538ec70b3a9c62e89f4e9d2a41d6d52",
                "blob_url": "https://github.com/apache/tomee/blob/bcb153772db8df48167b1d182c9bc985ab800f11/server/openejb-server/src/main/java/org/apache/openejb/server/ServiceManager.java",
                "filename": "server/openejb-server/src/main/java/org/apache/openejb/server/ServiceManager.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-server/src/main/java/org/apache/openejb/server/ServiceManager.java?ref=bcb153772db8df48167b1d182c9bc985ab800f11"
            }
        ],
        "bug_id": "tomee_4",
        "parent": "https://github.com/apache/tomee/commit/59d8d6c7bd7878331475e1842e978cd7df50bf38",
        "message": "avoiding NPE\nOPENEJB-1944: Possible NullPointerException in ServiceManager\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1400832 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/f38c5098b88aeae9b010f2879c4d7f22add237f7",
        "file": [
            {
                "patch": "@@ -141,6 +141,9 @@ public void start() throws LifecycleException {\n                 }\n             }\n         } catch (final Exception e) {\n+            if (container != null) {\n+                container.destroy();\n+            }\n             logger.log(Level.SEVERE, \"Unable to start remote container\", e);\n             throw new LifecycleException(\"Unable to start remote container:\" + e.getMessage(), e);\n         } finally {",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/f38c5098b88aeae9b010f2879c4d7f22add237f7/arquillian/arquillian-tomee-remote/src/main/java/org/apache/tomee/arquillian/remote/RemoteTomEEContainer.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "01c9af33f995088b7d2b45d3078312374b6d4e48",
                "blob_url": "https://github.com/apache/tomee/blob/f38c5098b88aeae9b010f2879c4d7f22add237f7/arquillian/arquillian-tomee-remote/src/main/java/org/apache/tomee/arquillian/remote/RemoteTomEEContainer.java",
                "filename": "arquillian/arquillian-tomee-remote/src/main/java/org/apache/tomee/arquillian/remote/RemoteTomEEContainer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-remote/src/main/java/org/apache/tomee/arquillian/remote/RemoteTomEEContainer.java?ref=f38c5098b88aeae9b010f2879c4d7f22add237f7"
            }
        ],
        "bug_id": "tomee_5",
        "parent": "https://github.com/apache/tomee/commit/e504c4df0cd847172ccec019a958c63f8b58a0cd",
        "message": "Avoid NPE in RemoteTomEEContainer.start()",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/8fa7252ee13de41f2ee1f3df97ade266d5ce786d",
        "file": [
            {
                "patch": "@@ -28,6 +28,7 @@\n import javax.security.enterprise.identitystore.CredentialValidationResult;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import java.util.Optional;\n \n import static javax.security.enterprise.identitystore.CredentialValidationResult.Status.VALID;\n import static javax.ws.rs.core.HttpHeaders.AUTHORIZATION;\n@@ -79,8 +80,11 @@ public void cleanSubject(final HttpServletRequest request,\n     }\n \n     private BasicAuthenticationCredential parseAuthenticationHeader(final String authenticationHeader) {\n-        return !authenticationHeader.isEmpty() && authenticationHeader.startsWith(\"Basic \") ?\n-               new BasicAuthenticationCredential(authenticationHeader.substring(6)) :\n-               new BasicAuthenticationCredential(null);\n+        return Optional.ofNullable(authenticationHeader)\n+                       .filter(header -> !header.isEmpty())\n+                       .filter(header -> header.startsWith(\"Basic \"))\n+                       .map(header -> header.substring(6))\n+                       .map(BasicAuthenticationCredential::new)\n+                       .orElseGet(() -> new BasicAuthenticationCredential(\"\"));\n     }\n }",
                "additions": 7,
                "raw_url": "https://github.com/apache/tomee/raw/8fa7252ee13de41f2ee1f3df97ade266d5ce786d/tomee/tomee-security/src/main/java/org/apache/tomee/security/cdi/BasicAuthenticationMechanism.java",
                "status": "modified",
                "changes": 10,
                "deletions": 3,
                "sha": "3bb5beac4c17d53dcc95f6e4b875da16acaa238d",
                "blob_url": "https://github.com/apache/tomee/blob/8fa7252ee13de41f2ee1f3df97ade266d5ce786d/tomee/tomee-security/src/main/java/org/apache/tomee/security/cdi/BasicAuthenticationMechanism.java",
                "filename": "tomee/tomee-security/src/main/java/org/apache/tomee/security/cdi/BasicAuthenticationMechanism.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-security/src/main/java/org/apache/tomee/security/cdi/BasicAuthenticationMechanism.java?ref=8fa7252ee13de41f2ee1f3df97ade266d5ce786d"
            },
            {
                "patch": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tomee.security.servlet;\n+\n+import org.apache.openejb.loader.JarLocation;\n+import org.apache.openejb.util.NetworkUtil;\n+import org.apache.tomee.embedded.Configuration;\n+import org.apache.tomee.embedded.Container;\n+import org.apache.tomee.security.client.BasicAuthFilter;\n+import org.junit.Test;\n+\n+import javax.security.enterprise.authentication.mechanism.http.BasicAuthenticationMechanismDefinition;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.HttpConstraint;\n+import javax.servlet.annotation.ServletSecurity;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.client.ClientBuilder;\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class BasicAuthServletTest {\n+    @Test\n+    public void testWebApp() throws Exception {\n+        try (Container container = new Container(\n+                new Configuration()\n+                        .conf(\"conf\")\n+                        .http(NetworkUtil.getNextAvailablePort())\n+                        .property(\"openejb.container.additional.exclude\", \"org.apache.tomee.security.\")\n+                        .property(\"openejb.additional.include\", \"tomee-\"))\n+                .deployPathsAsWebapp(\n+                        JarLocation.jarLocation(SimpleServletTest.class),\n+                        JarLocation.jarLocation(TomEESecurityServletContainerInitializer.class))) {\n+\n+            final String servlet = \"http://localhost:\" + container.getConfiguration().getHttpPort() + \"/basic\";\n+\n+            assertEquals(401, ClientBuilder.newBuilder().build()\n+                                           .target(servlet)\n+                                           .request()\n+                                           .get().getStatus());\n+\n+            assertEquals(200, ClientBuilder.newBuilder().register(new BasicAuthFilter()).build()\n+                                   .target(servlet)\n+                                   .request()\n+                                   .get().getStatus());\n+        }\n+    }\n+\n+    @WebServlet(urlPatterns = \"/basic\")\n+    @ServletSecurity(@HttpConstraint(rolesAllowed = \"tomcat\"))\n+    @BasicAuthenticationMechanismDefinition\n+    public static class TestServlet extends HttpServlet {\n+        @Override\n+        protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)\n+                throws ServletException, IOException {\n+            resp.getWriter().write(\"ok!\");\n+        }\n+    }\n+}",
                "additions": 76,
                "raw_url": "https://github.com/apache/tomee/raw/8fa7252ee13de41f2ee1f3df97ade266d5ce786d/tomee/tomee-security/src/test/java/org/apache/tomee/security/servlet/BasicAuthServletTest.java",
                "status": "added",
                "changes": 76,
                "deletions": 0,
                "sha": "b25f16940e78a17d378d5e49af886d10fb9bbf32",
                "blob_url": "https://github.com/apache/tomee/blob/8fa7252ee13de41f2ee1f3df97ade266d5ce786d/tomee/tomee-security/src/test/java/org/apache/tomee/security/servlet/BasicAuthServletTest.java",
                "filename": "tomee/tomee-security/src/test/java/org/apache/tomee/security/servlet/BasicAuthServletTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-security/src/test/java/org/apache/tomee/security/servlet/BasicAuthServletTest.java?ref=8fa7252ee13de41f2ee1f3df97ade266d5ce786d"
            }
        ],
        "bug_id": "tomee_6",
        "parent": "https://github.com/apache/tomee/commit/a88d557937881238778ab81a6e79e62617cc2158",
        "message": "TOMEE-2365 - Fixed NPE on empty Authorization header.",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/0ea51fbcf94def519b65b32aa9b385e5135111ad",
        "file": [],
        "bug_id": "tomee_7",
        "parent": "https://github.com/apache/tomee/commit/037cf2cf94d827e0a1480f3392e356a8c35de57b",
        "message": "Avoid NPE in RemoteTomEEContainer.start() closes apache/tomee#32 *Already Merged*",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/aae3eb867b559259e68b294cb176cf97c587cb59",
        "file": [
            {
                "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.jpa.integration.eclipselink;\n+\n+import org.eclipse.persistence.internal.sessions.AbstractSession;\n+import org.eclipse.persistence.sessions.Session;\n+\n+public class MBeanOpenEJBRuntimeServices extends OpenEJBRuntimeServices implements MBeanOpenEJBRuntimeServicesMBean {\n+    public MBeanOpenEJBRuntimeServices(Session session) {\n+        super((AbstractSession) session);\n+    }\n+}",
                "additions": 26,
                "raw_url": "https://github.com/apache/tomee/raw/aae3eb867b559259e68b294cb176cf97c587cb59/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServices.java",
                "status": "added",
                "changes": 26,
                "deletions": 0,
                "sha": "5e3d967d56601b694dd08bfedac702f206551afe",
                "blob_url": "https://github.com/apache/tomee/blob/aae3eb867b559259e68b294cb176cf97c587cb59/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServices.java",
                "filename": "container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServices.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServices.java?ref=aae3eb867b559259e68b294cb176cf97c587cb59"
            },
            {
                "patch": "@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.jpa.integration.eclipselink;\n+\n+import org.eclipse.persistence.services.mbean.MBeanRuntimeServicesMBean;\n+\n+public interface MBeanOpenEJBRuntimeServicesMBean extends MBeanRuntimeServicesMBean {\n+}",
                "additions": 22,
                "raw_url": "https://github.com/apache/tomee/raw/aae3eb867b559259e68b294cb176cf97c587cb59/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServicesMBean.java",
                "status": "added",
                "changes": 22,
                "deletions": 0,
                "sha": "4e229fa4f16f8f95de9b8c86529c4d29487cb29b",
                "blob_url": "https://github.com/apache/tomee/blob/aae3eb867b559259e68b294cb176cf97c587cb59/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServicesMBean.java",
                "filename": "container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServicesMBean.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServicesMBean.java?ref=aae3eb867b559259e68b294cb176cf97c587cb59"
            },
            {
                "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.jpa.integration.eclipselink;\n+\n+import java.util.Locale;\n+\n+import org.eclipse.persistence.internal.sessions.AbstractSession;\n+import org.eclipse.persistence.services.RuntimeServices;\n+\n+public class OpenEJBRuntimeServices extends RuntimeServices {\n+\n+    static {\n+        PLATFORM_NAME = \"OpenEJB\";\n+    }\n+\n+    public OpenEJBRuntimeServices() {\n+        super();\n+    }\n+\n+    public OpenEJBRuntimeServices(AbstractSession session) {\n+        super();\n+        this.session = session;\n+        this.updateDeploymentTimeData();\n+    }\n+\n+    public OpenEJBRuntimeServices(Locale locale) {\n+    }\n+}",
                "additions": 42,
                "raw_url": "https://github.com/apache/tomee/raw/aae3eb867b559259e68b294cb176cf97c587cb59/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBRuntimeServices.java",
                "status": "added",
                "changes": 42,
                "deletions": 0,
                "sha": "82b82a24f44fd9e0d84d54715a623d4f35fd208e",
                "blob_url": "https://github.com/apache/tomee/blob/aae3eb867b559259e68b294cb176cf97c587cb59/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBRuntimeServices.java",
                "filename": "container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBRuntimeServices.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBRuntimeServices.java?ref=aae3eb867b559259e68b294cb176cf97c587cb59"
            },
            {
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.openejb.jpa.integration.eclipselink;\n \n import org.apache.geronimo.transaction.manager.TransactionImpl;\n+import org.eclipse.persistence.platform.server.JMXEnabledPlatform;\n import org.eclipse.persistence.platform.server.JMXServerPlatformBase;\n import org.eclipse.persistence.sessions.DatabaseSession;\n import org.eclipse.persistence.transaction.AbstractSynchronizationListener;\n@@ -26,13 +27,14 @@\n import javax.transaction.Synchronization;\n import javax.transaction.TransactionManager;\n \n-public class OpenEJBServerPlatform extends JMXServerPlatformBase {\n+public class OpenEJBServerPlatform extends JMXServerPlatformBase implements JMXEnabledPlatform {\n     public OpenEJBServerPlatform(final DatabaseSession newDatabaseSession) {\n         super(newDatabaseSession);\n         try {\n             mBeanServer = MBeanServer.class.cast(\n                 OpenEJBServerPlatform.class.getClassLoader().loadClass(\"org.apache.openejb.monitoring.LocalMBeanServer\")\n                     .getMethod(\"get\").invoke(null));\n+            this.prepareServerSpecificServicesMBean();\n         } catch (final Exception e) {\n             // no-op\n         }\n@@ -44,9 +46,16 @@ public boolean isRuntimeServicesEnabledDefault() {\n     }\n \n     @Override\n-    public Class getExternalTransactionControllerClass() {\n+    public Class<?> getExternalTransactionControllerClass() {\n         return OpenEJBJTATransactionController.class;\n     }\n+    \n+    @Override\n+    public void prepareServerSpecificServicesMBean() {\n+        if (isRuntimeServicesEnabledDefault() && getDatabaseSession() != null && shouldRegisterRuntimeBean) {\n+            this.setRuntimeServicesMBean(new MBeanOpenEJBRuntimeServices(getDatabaseSession()));\n+        }\n+    }\n \n     public static class OpenEJBJTATransactionController extends JTATransactionController {\n         @Override",
                "additions": 11,
                "raw_url": "https://github.com/apache/tomee/raw/aae3eb867b559259e68b294cb176cf97c587cb59/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBServerPlatform.java",
                "status": "modified",
                "changes": 13,
                "deletions": 2,
                "sha": "bca85fc4403fbd88ed575c14105433b95c902dfa",
                "blob_url": "https://github.com/apache/tomee/blob/aae3eb867b559259e68b294cb176cf97c587cb59/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBServerPlatform.java",
                "filename": "container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBServerPlatform.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBServerPlatform.java?ref=aae3eb867b559259e68b294cb176cf97c587cb59"
            }
        ],
        "bug_id": "tomee_8",
        "parent": "https://github.com/apache/tomee/commit/027a0975feba872ced4d0c5692b2b801ec6ac016",
        "message": "Merge branch 'issues/TOMEE-2249_eclipselink-npe' into tomee-7.0.x",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/6709b3d9a381a0fad05355bf77a7f04c1a5bba57",
        "file": [
            {
                "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.jpa.integration.eclipselink;\n+\n+import org.eclipse.persistence.internal.sessions.AbstractSession;\n+import org.eclipse.persistence.sessions.Session;\n+\n+public class MBeanOpenEJBRuntimeServices extends OpenEJBRuntimeServices implements MBeanOpenEJBRuntimeServicesMBean {\n+    public MBeanOpenEJBRuntimeServices(Session session) {\n+        super((AbstractSession) session);\n+    }\n+}",
                "additions": 26,
                "raw_url": "https://github.com/apache/tomee/raw/6709b3d9a381a0fad05355bf77a7f04c1a5bba57/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServices.java",
                "status": "added",
                "changes": 26,
                "deletions": 0,
                "sha": "5e3d967d56601b694dd08bfedac702f206551afe",
                "blob_url": "https://github.com/apache/tomee/blob/6709b3d9a381a0fad05355bf77a7f04c1a5bba57/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServices.java",
                "filename": "container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServices.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServices.java?ref=6709b3d9a381a0fad05355bf77a7f04c1a5bba57"
            },
            {
                "patch": "@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.jpa.integration.eclipselink;\n+\n+import org.eclipse.persistence.services.mbean.MBeanRuntimeServicesMBean;\n+\n+public interface MBeanOpenEJBRuntimeServicesMBean extends MBeanRuntimeServicesMBean {\n+}",
                "additions": 22,
                "raw_url": "https://github.com/apache/tomee/raw/6709b3d9a381a0fad05355bf77a7f04c1a5bba57/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServicesMBean.java",
                "status": "added",
                "changes": 22,
                "deletions": 0,
                "sha": "4e229fa4f16f8f95de9b8c86529c4d29487cb29b",
                "blob_url": "https://github.com/apache/tomee/blob/6709b3d9a381a0fad05355bf77a7f04c1a5bba57/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServicesMBean.java",
                "filename": "container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServicesMBean.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/MBeanOpenEJBRuntimeServicesMBean.java?ref=6709b3d9a381a0fad05355bf77a7f04c1a5bba57"
            },
            {
                "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.jpa.integration.eclipselink;\n+\n+import java.util.Locale;\n+\n+import org.eclipse.persistence.internal.sessions.AbstractSession;\n+import org.eclipse.persistence.services.RuntimeServices;\n+\n+public class OpenEJBRuntimeServices extends RuntimeServices {\n+\n+    static {\n+        PLATFORM_NAME = \"OpenEJB\";\n+    }\n+\n+    public OpenEJBRuntimeServices() {\n+        super();\n+    }\n+\n+    public OpenEJBRuntimeServices(AbstractSession session) {\n+        super();\n+        this.session = session;\n+        this.updateDeploymentTimeData();\n+    }\n+\n+    public OpenEJBRuntimeServices(Locale locale) {\n+    }\n+}",
                "additions": 42,
                "raw_url": "https://github.com/apache/tomee/raw/6709b3d9a381a0fad05355bf77a7f04c1a5bba57/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBRuntimeServices.java",
                "status": "added",
                "changes": 42,
                "deletions": 0,
                "sha": "82b82a24f44fd9e0d84d54715a623d4f35fd208e",
                "blob_url": "https://github.com/apache/tomee/blob/6709b3d9a381a0fad05355bf77a7f04c1a5bba57/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBRuntimeServices.java",
                "filename": "container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBRuntimeServices.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBRuntimeServices.java?ref=6709b3d9a381a0fad05355bf77a7f04c1a5bba57"
            },
            {
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.openejb.jpa.integration.eclipselink;\n \n import org.apache.geronimo.transaction.manager.TransactionImpl;\n+import org.eclipse.persistence.platform.server.JMXEnabledPlatform;\n import org.eclipse.persistence.platform.server.JMXServerPlatformBase;\n import org.eclipse.persistence.sessions.DatabaseSession;\n import org.eclipse.persistence.transaction.AbstractSynchronizationListener;\n@@ -26,13 +27,14 @@\n import javax.transaction.Synchronization;\n import javax.transaction.TransactionManager;\n \n-public class OpenEJBServerPlatform extends JMXServerPlatformBase {\n+public class OpenEJBServerPlatform extends JMXServerPlatformBase implements JMXEnabledPlatform {\n     public OpenEJBServerPlatform(final DatabaseSession newDatabaseSession) {\n         super(newDatabaseSession);\n         try {\n             mBeanServer = MBeanServer.class.cast(\n                 OpenEJBServerPlatform.class.getClassLoader().loadClass(\"org.apache.openejb.monitoring.LocalMBeanServer\")\n                     .getMethod(\"get\").invoke(null));\n+            this.prepareServerSpecificServicesMBean();\n         } catch (final Exception e) {\n             // no-op\n         }\n@@ -44,9 +46,16 @@ public boolean isRuntimeServicesEnabledDefault() {\n     }\n \n     @Override\n-    public Class getExternalTransactionControllerClass() {\n+    public Class<?> getExternalTransactionControllerClass() {\n         return OpenEJBJTATransactionController.class;\n     }\n+    \n+    @Override\n+    public void prepareServerSpecificServicesMBean() {\n+        if (isRuntimeServicesEnabledDefault() && getDatabaseSession() != null && shouldRegisterRuntimeBean) {\n+            this.setRuntimeServicesMBean(new MBeanOpenEJBRuntimeServices(getDatabaseSession()));\n+        }\n+    }\n \n     public static class OpenEJBJTATransactionController extends JTATransactionController {\n         @Override",
                "additions": 11,
                "raw_url": "https://github.com/apache/tomee/raw/6709b3d9a381a0fad05355bf77a7f04c1a5bba57/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBServerPlatform.java",
                "status": "modified",
                "changes": 13,
                "deletions": 2,
                "sha": "bca85fc4403fbd88ed575c14105433b95c902dfa",
                "blob_url": "https://github.com/apache/tomee/blob/6709b3d9a381a0fad05355bf77a7f04c1a5bba57/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBServerPlatform.java",
                "filename": "container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBServerPlatform.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-jpa-integration/src/main/java/org/apache/openejb/jpa/integration/eclipselink/OpenEJBServerPlatform.java?ref=6709b3d9a381a0fad05355bf77a7f04c1a5bba57"
            }
        ],
        "bug_id": "tomee_9",
        "parent": "https://github.com/apache/tomee/commit/1b73ff86c8594ccc7967d886f0961a85922b2aa2",
        "message": "Merge branch 'issues/TOMEE-2249_eclipselink-npe' into tomee-7.0.x",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/5e75f652cf96e1d95e3a5504f27306f6d6fb85f2",
        "file": [
            {
                "patch": "@@ -864,7 +864,7 @@ private void deploy(final EjbModule ejbModule, final AppResources appResources)\n                     containerId = createContainer(containerInfoType, ejbDeployment, bean);\n                 }\n \n-                logger.debug(\"Setting container ID {0} for bean {0}\", containerId, bean.getEjbName());\n+                logger.debug(\"Setting container ID {0} for bean {1}\", containerId, bean.getEjbName());\n                 ejbDeployment.setContainerId(containerId);\n             }\n \n@@ -879,7 +879,7 @@ private void deploy(final EjbModule ejbModule, final AppResources appResources)\n             }\n \n             if (!containerIds.contains(ejbDeployment.getContainerId()) && !skipMdb(bean)) {\n-                logger.debug(\"Desired container {0} not found. Containers availble: {1}. Creating a new container.\",\n+                logger.debug(\"Desired container {0} not found. Containers available: {1}. Creating a new container.\",\n                         ejbDeployment.getContainerId(),\n                         Join.join(\", \", containerIds)\n                 );\n@@ -2251,51 +2251,66 @@ private String getResourceEnvId(final String beanName, String resourceId, final\n     }\n \n     private String getUsableContainer(final Class<? extends ContainerInfo> containerInfoType, final EnterpriseBean bean, final AppResources appResources) {\n-        logger.debug(\"Searching for usable container for bean: {0}. Available application containers: {1}, available system containers {2}\",\n-                bean.getEjbName(),\n-                getContainerIds(appResources.getContainerInfos()),\n-                getContainerIds(configFactory.getContainerInfos())\n-        );\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"Searching for usable container for bean: {0}. Available application containers: {1}, available system containers {2}\",\n+                    bean.getEjbName(),\n+                    getContainerIds(appResources.getContainerInfos()),\n+                    getContainerIds(configFactory.getContainerInfos())\n+            );\n+        }\n \n         if (MessageDrivenBean.class.isInstance(bean)) {\n             final MessageDrivenBean messageDrivenBean = (MessageDrivenBean) bean;\n             final String messagingType = messageDrivenBean.getMessagingType();\n \n             final List<String> containerIds = appResources.containerIdsByType.get(messagingType);\n-            logger.debug(\"Searching for usable container for bean: {0} by messaging type: {1}. Potential application containers: {2}\",\n-                    bean.getEjbName(),\n-                    messagingType,\n-                    Join.join(\",\", containerIds));\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Searching for usable container for bean: {0} by messaging type: {1}. Potential application containers: {2}\",\n+                        bean.getEjbName(),\n+                        messagingType,\n+                        containerIds == null ? \"\" : Join.join(\",\", containerIds));\n+            }\n \n             if (containerIds != null && !containerIds.isEmpty()) {\n-                logger.debug(\"Returning first application container matching by type: {0} - {1}\",\n-                        messagingType,\n-                        containerIds.get(0));\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Returning first application container matching by type: {0} - {1}\",\n+                            messagingType,\n+                            containerIds.get(0));\n+                }\n \n                 return containerIds.get(0);\n             }\n         }\n \n-        logger.debug(\"Attempting to find a matching container for bean: {0} from application containers {1}\",\n-                bean.getEjbName(),\n-                getContainerIds(appResources.getContainerInfos()));\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"Attempting to find a matching container for bean: {0} from application containers {1}\",\n+                    bean.getEjbName(),\n+                    getContainerIds(appResources.getContainerInfos()));\n+        }\n \n         String containerInfo = matchContainer(containerInfoType, bean, appResources.getContainerInfos());\n         if (containerInfo == null) { // avoid to build configFactory.getContainerInfos() if not needed\n \n-            logger.debug(\"Matching application container not found. Attempting to find a matching container for bean: {0} from system containers {1}\",\n-                    bean.getEjbName(),\n-                    getContainerIds(appResources.getContainerInfos()));\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Matching application container not found. Attempting to find a matching container for bean: {0} from system containers {1}\",\n+                        bean.getEjbName(),\n+                        getContainerIds(appResources.getContainerInfos()));\n+            }\n \n             containerInfo = matchContainer(containerInfoType, bean, configFactory.getContainerInfos());\n         }\n \n         if (containerInfo != null) {\n-            logger.debug(\"Using container {0} for bean {1}\", containerInfo, bean.getEjbName());\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Using container {0} for bean {1}\", containerInfo, bean.getEjbName());\n+            }\n             return containerInfo;\n         }\n \n-        logger.debug(\"No suitable existing container found for bean {0}\", bean.getEjbName());\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"No suitable existing container found for bean {0}\", bean.getEjbName());\n+        }\n+\n         return null;\n     }\n \n@@ -2318,34 +2333,42 @@ private String matchContainer(final Class<? extends ContainerInfo> containerInfo\n                     final String messagingType = messageDrivenBean.getMessagingType();\n \n                     if (containerInfo.properties.get(\"MessageListenerInterface\").equals(messagingType)) {\n-                        logger.debug(\"Container {0} matches container type {1} and MessageListenerInterface {2} for bean {3}, this container will be used.\",\n-                                containerInfo.id,\n-                                containerInfoType.getName(),\n-                                messagingType,\n-                                bean.getEjbName());\n+                        if (logger.isDebugEnabled()) {\n+                            logger.debug(\"Container {0} matches container type {1} and MessageListenerInterface {2} for bean {3}, this container will be used.\",\n+                                    containerInfo.id,\n+                                    containerInfoType.getName(),\n+                                    messagingType,\n+                                    bean.getEjbName());\n+                        }\n \n                         return containerInfo.id;\n                     } else {\n-                        logger.debug(\"Container {0} of type {1} does not have the matching MessageListenerInterface. Bean listener interface is {2}, \" +\n-                                        \"container listener interface is {3} for bean {4}. Skipping.\",\n+                        if (logger.isDebugEnabled()) {\n+                            logger.debug(\"Container {0} of type {1} does not have the matching MessageListenerInterface. Bean listener interface is {2}, \" +\n+                                            \"container listener interface is {3} for bean {4}. Skipping.\",\n+                                    containerInfo.id,\n+                                    containerInfoType.getName(),\n+                                    messagingType,\n+                                    containerInfo.properties.get(\"MessageListenerInterface\"),\n+                                    bean.getEjbName());\n+                        }\n+\n+                    }\n+                } else {\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Container {0} matches container type {1} for bean {2}, this container will be used.\",\n                                 containerInfo.id,\n                                 containerInfoType.getName(),\n-                                messagingType,\n-                                containerInfo.properties.get(\"MessageListenerInterface\"),\n                                 bean.getEjbName());\n-\n                     }\n-                } else {\n-                    logger.debug(\"Container {0} matches container type {1} for bean {2}, this container will be used.\",\n-                            containerInfo.id,\n-                            containerInfoType.getName(),\n-                            bean.getEjbName());\n \n                     return containerInfo.id;\n                 }\n             }\n \n-            logger.debug(\"Skipping container {0} of type {1}\", containerInfo.id, containerInfoType.getName());\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Skipping container {0} of type {1}\", containerInfo.id, containerInfoType.getName());\n+            }\n         }\n \n         return null;",
                "additions": 61,
                "raw_url": "https://github.com/apache/tomee/raw/5e75f652cf96e1d95e3a5504f27306f6d6fb85f2/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java",
                "status": "modified",
                "changes": 99,
                "deletions": 38,
                "sha": "57a2e1a9f84dadf5c35b6d10218f441b9c144587",
                "blob_url": "https://github.com/apache/tomee/blob/5e75f652cf96e1d95e3a5504f27306f6d6fb85f2/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java?ref=5e75f652cf96e1d95e3a5504f27306f6d6fb85f2"
            }
        ],
        "bug_id": "tomee_10",
        "parent": "https://github.com/apache/tomee/commit/2e05749c199661ea9f512ae60e8422e3952a8f70",
        "message": "Check if debug logging is enabled, and avoid a NPE",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/eaaafee32ccbdfe43231f60804eb9ef381a394b9",
        "file": [
            {
                "patch": "@@ -169,6 +169,7 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-surefire-plugin</artifactId>\n+        <version>2.19.1</version> <!-- 2.21 snapshot has a bug with classloader due to j9 work -->\n       </plugin>\n     </plugins>\n   </build>",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/eaaafee32ccbdfe43231f60804eb9ef381a394b9/arquillian/arquillian-openejb-embedded/pom.xml",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "839e9aad34c6f41b2af6419a4c153b8db6da0dff",
                "blob_url": "https://github.com/apache/tomee/blob/eaaafee32ccbdfe43231f60804eb9ef381a394b9/arquillian/arquillian-openejb-embedded/pom.xml",
                "filename": "arquillian/arquillian-openejb-embedded/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-openejb-embedded/pom.xml?ref=eaaafee32ccbdfe43231f60804eb9ef381a394b9"
            },
            {
                "patch": "@@ -370,7 +370,10 @@ public void undeploy(final Archive<?> archive) throws DeploymentException {\n \n         // reset classloader for next text\n         // otherwise if it was closed something can fail\n-        classLoader.get().unregister(archive.getName());\n+        final TestObserver.ClassLoaders classLoaders = classLoader.get();\n+        if (classLoaders != null) {\n+            classLoaders.unregister(archive.getName());\n+        }\n \n         final AppContext ctx = appContext.get();\n         if (ctx == null) {",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/eaaafee32ccbdfe43231f60804eb9ef381a394b9/arquillian/arquillian-openejb-embedded/src/main/java/org/apache/openejb/arquillian/openejb/OpenEJBDeployableContainer.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "1ffaef585838b0e8fad8dc4d2dcece4146d97fad",
                "blob_url": "https://github.com/apache/tomee/blob/eaaafee32ccbdfe43231f60804eb9ef381a394b9/arquillian/arquillian-openejb-embedded/src/main/java/org/apache/openejb/arquillian/openejb/OpenEJBDeployableContainer.java",
                "filename": "arquillian/arquillian-openejb-embedded/src/main/java/org/apache/openejb/arquillian/openejb/OpenEJBDeployableContainer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-openejb-embedded/src/main/java/org/apache/openejb/arquillian/openejb/OpenEJBDeployableContainer.java?ref=eaaafee32ccbdfe43231f60804eb9ef381a394b9"
            }
        ],
        "bug_id": "tomee_11",
        "parent": "https://github.com/apache/tomee/commit/1528ad30ea38bdca0440c3a3ad5ab88280a7d00d",
        "message": "avoid NPE and surefire bugs for arquillian-openejb-embedded",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/c714f50af561c70803360cc44bd8ac737592e6cf",
        "file": [
            {
                "patch": "@@ -64,7 +64,7 @@\n     }\n \n     private static <T> void cdiInjections(final BeanContext context, final T object) {\n-        if (context.getWebBeansContext() == null) {\n+        if (context == null || context.getWebBeansContext() == null) {\n             return;\n         }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/c714f50af561c70803360cc44bd8ac737592e6cf/container/openejb-core/src/main/java/org/apache/openejb/Injector.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "5817c2441ab4c540e3c80faf771fec532b48fa35",
                "blob_url": "https://github.com/apache/tomee/blob/c714f50af561c70803360cc44bd8ac737592e6cf/container/openejb-core/src/main/java/org/apache/openejb/Injector.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/Injector.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/Injector.java?ref=c714f50af561c70803360cc44bd8ac737592e6cf"
            }
        ],
        "bug_id": "tomee_12",
        "parent": "https://github.com/apache/tomee/commit/8fc8d8011c5155e7f47ebc162cb88124bf4ca06e",
        "message": "TOMEE-2037 avoid npe in Injector",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/2cb6b03531618c5ffd0cf5651ae18c7f7a2ec5e7",
        "file": [
            {
                "patch": "@@ -155,9 +155,10 @@ private Context(final boolean associate, final Object initialSecurityServiceStat\n             this.associate = associate;\n             this.securityServiceState = initialSecurityServiceState;\n             this.securityContext = securityContext;\n-            this.threadContext = initialThreadContext;\n             this.loader = initialLoader;\n             this.stack = stack;\n+            // copy to ensure we have a thread safe data map\n+            this.threadContext = initialThreadContext == null ? null : new ThreadContext(initialThreadContext);\n \n             /* propagation of CDI context seems wrong\n             final ContextsService genericContextsService = WebBeansContext.currentInstance().getContextsService();",
                "additions": 2,
                "raw_url": "https://github.com/apache/tomee/raw/2cb6b03531618c5ffd0cf5651ae18c7f7a2ec5e7/container/openejb-core/src/main/java/org/apache/openejb/threads/task/CUTask.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "e2641783fce04069f88d93e9cc9c629fd31528bb",
                "blob_url": "https://github.com/apache/tomee/blob/2cb6b03531618c5ffd0cf5651ae18c7f7a2ec5e7/container/openejb-core/src/main/java/org/apache/openejb/threads/task/CUTask.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/threads/task/CUTask.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/threads/task/CUTask.java?ref=2cb6b03531618c5ffd0cf5651ae18c7f7a2ec5e7"
            }
        ],
        "bug_id": "tomee_13",
        "parent": "https://github.com/apache/tomee/commit/e0d70db5ba581f2103cc4195b15ce6c8bb6aa27d",
        "message": "TOMEE-2007 avoid NPE from CUTask",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/933bd899dfe8ec54db1af29e97c39c03e35b1000",
        "file": [
            {
                "patch": "@@ -204,13 +204,13 @@ public void startApplication(final Object startupObject) {\n \n             final Collection<Class<?>> ejbs = new ArrayList<>(stuff.getBeanContexts().size());\n             for (final BeanContext bc : stuff.getBeanContexts()) {\n+                ejbs.add(bc.getManagedClass());\n+\n                 final CdiEjbBean cdiEjbBean = bc.get(CdiEjbBean.class);\n                 if (cdiEjbBean == null) {\n                     continue;\n                 }\n \n-                ejbs.add(bc.getManagedClass());\n-\n                 if (AbstractProducer.class.isInstance(cdiEjbBean)) {\n                     AbstractProducer.class.cast(cdiEjbBean).defineInterceptorStack(cdiEjbBean, cdiEjbBean.getAnnotatedType(), cdiEjbBean.getWebBeansContext());\n                 }",
                "additions": 2,
                "raw_url": "https://github.com/apache/tomee/raw/933bd899dfe8ec54db1af29e97c39c03e35b1000/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBLifecycle.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "6fec7599d8919d76d400cb7ab49cdf6f73c776e3",
                "blob_url": "https://github.com/apache/tomee/blob/933bd899dfe8ec54db1af29e97c39c03e35b1000/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBLifecycle.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBLifecycle.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBLifecycle.java?ref=933bd899dfe8ec54db1af29e97c39c03e35b1000"
            },
            {
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.cdi;\n+\n+import org.apache.openejb.testing.ApplicationComposers;\n+import org.apache.openejb.testing.CdiExtensions;\n+import org.apache.openejb.testing.Classes;\n+import org.junit.Test;\n+\n+import javax.ejb.Singleton;\n+import javax.ejb.Startup;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.spi.Extension;\n+import javax.enterprise.inject.spi.ProcessAnnotatedType;\n+import java.util.concurrent.Callable;\n+\n+@CdiExtensions(EJBVetoTest.Vetoer.class)\n+@Classes(cdi = true, innerClassesAsBean = true)\n+public class EJBVetoTest {\n+    @Test\n+    public void run() throws Exception { // https://issues.apache.org/jira/browse/TOMEE-2020, we just check we get no NPE\n+        new ApplicationComposers(EJBVetoTest.class).evaluate(this, new Callable<Object>() {\n+            @Override\n+            public Object call() throws Exception {\n+                return null;\n+            }\n+        });\n+    }\n+\n+    public static class Vetoer implements Extension {\n+        void pat(@Observes final ProcessAnnotatedType<ToVeto> pat) {\n+            pat.veto();\n+        }\n+    }\n+\n+    @Startup\n+    @Singleton\n+    public static class ToVeto {\n+    }\n+}",
                "additions": 54,
                "raw_url": "https://github.com/apache/tomee/raw/933bd899dfe8ec54db1af29e97c39c03e35b1000/container/openejb-core/src/test/java/org/apache/openejb/cdi/EJBVetoTest.java",
                "status": "added",
                "changes": 54,
                "deletions": 0,
                "sha": "d13e935429dbefebd6e5dba69c5224d518fadea0",
                "blob_url": "https://github.com/apache/tomee/blob/933bd899dfe8ec54db1af29e97c39c03e35b1000/container/openejb-core/src/test/java/org/apache/openejb/cdi/EJBVetoTest.java",
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/cdi/EJBVetoTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/cdi/EJBVetoTest.java?ref=933bd899dfe8ec54db1af29e97c39c03e35b1000"
            }
        ],
        "bug_id": "tomee_14",
        "parent": "https://github.com/apache/tomee/commit/569e604a12cc0922962808534211d12bf48de348",
        "message": "TOMEE-2020 avoid npe if ejb is vetoed",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/fa939e0e796f9c0e262e135916f4279951d2d919",
        "file": [
            {
                "patch": "@@ -169,7 +169,7 @@ public synchronized void start(final Class<?> marker, final Properties config) t\n \n         // at least after LifecycleTasks to inherit from potential states (system properties to get a port etc...)\n         final Configurers configurers = appClass.getAnnotation(Configurers.class);\n-        if (tasks != null) {\n+        if (configurers != null) {\n             for (final Class<? extends Configurer> type : configurers.value()) {\n                 type.newInstance().configure(configuration);\n             }",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/fa939e0e796f9c0e262e135916f4279951d2d919/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/TomEEEmbeddedApplicationRunner.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "a06b8c24acc73a5b4c3dbe66b50850c94deab3d0",
                "blob_url": "https://github.com/apache/tomee/blob/fa939e0e796f9c0e262e135916f4279951d2d919/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/TomEEEmbeddedApplicationRunner.java",
                "filename": "tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/TomEEEmbeddedApplicationRunner.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/TomEEEmbeddedApplicationRunner.java?ref=fa939e0e796f9c0e262e135916f4279951d2d919"
            }
        ],
        "bug_id": "tomee_15",
        "parent": "https://github.com/apache/tomee/commit/a48ad710b476b88079a8636d9e6708147d4fe45d",
        "message": "avoid a NPE (wrong var) in TomEEEmbeddedApplicationRunner",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/d65c1d68ccf76afa5fac2e05ee79eb2a29538e54",
        "file": [
            {
                "patch": "@@ -169,7 +169,7 @@ public Object invoke(final Object proxy, final Method method, final Object[] arg\n     }\n \n     private Object unwrapIfNeeded(final Object arg) {\n-        if (!Proxy.isProxyClass(arg.getClass())) {\n+        if (arg == null || !Proxy.isProxyClass(arg.getClass())) {\n             return arg;\n         }\n         final InvocationHandler handler = Proxy.getInvocationHandler(arg);",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/d65c1d68ccf76afa5fac2e05ee79eb2a29538e54/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/managed/local/ManagedConnection.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "7dca9c8b4b9bab7a569c02dea65e12acd23ba2ab",
                "blob_url": "https://github.com/apache/tomee/blob/d65c1d68ccf76afa5fac2e05ee79eb2a29538e54/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/managed/local/ManagedConnection.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/managed/local/ManagedConnection.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/managed/local/ManagedConnection.java?ref=d65c1d68ccf76afa5fac2e05ee79eb2a29538e54"
            }
        ],
        "bug_id": "tomee_16",
        "parent": "https://github.com/apache/tomee/commit/2e6ce35f890fe8f87355ff31afd9757f7060b2d0",
        "message": "NPE protection",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/97c27de3b078f23c470f7b7175e14f2debff4840",
        "file": [
            {
                "patch": "@@ -529,10 +529,14 @@ public T createNewPojo(final CreationalContext<T> creationalContext) {\n                 final Map<Constructor<?>, InterceptorResolutionService.BusinessMethodInterceptorInfo> constructorInterceptorInfos =\n                         interceptorInfo.getConstructorInterceptorInfos();\n                 if (!constructorInterceptorInfos.isEmpty()) { // were missed by OWB\n-                    for (final javax.enterprise.inject.spi.Interceptor interceptorBean : constructorInterceptorInfos.values().iterator().next().getEjbInterceptors()) {\n-                        if (!interceptorInstances.containsKey(interceptorBean)) {\n-                            ccImpl.putContextual(interceptorBean);\n-                            interceptorInstances.put(interceptorBean, interceptorBean.create(ccImpl));\n+                    final javax.enterprise.inject.spi.Interceptor<?>[] ejbInterceptors = constructorInterceptorInfos.values().iterator().next().getEjbInterceptors();\n+\n+                    if (null != ejbInterceptors) {\n+                        for (final javax.enterprise.inject.spi.Interceptor interceptorBean : ejbInterceptors) {\n+                            if (!interceptorInstances.containsKey(interceptorBean)) {\n+                                ccImpl.putContextual(interceptorBean);\n+                                interceptorInstances.put(interceptorBean, interceptorBean.create(ccImpl));\n+                            }\n                         }\n                     }\n                 }",
                "additions": 8,
                "raw_url": "https://github.com/apache/tomee/raw/97c27de3b078f23c470f7b7175e14f2debff4840/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiEjbBean.java",
                "status": "modified",
                "changes": 12,
                "deletions": 4,
                "sha": "34dbd332ed646969ada56d2876d05ccc47db4cb8",
                "blob_url": "https://github.com/apache/tomee/blob/97c27de3b078f23c470f7b7175e14f2debff4840/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiEjbBean.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiEjbBean.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiEjbBean.java?ref=97c27de3b078f23c470f7b7175e14f2debff4840"
            },
            {
                "patch": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.interceptors;\n+\n+import org.apache.openejb.jee.Empty;\n+import org.apache.openejb.jee.StatelessBean;\n+import org.apache.openejb.junit.ApplicationComposer;\n+import org.apache.openejb.testing.Classes;\n+import org.apache.openejb.testing.Module;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.ejb.EJB;\n+import javax.ejb.Stateless;\n+import javax.interceptor.AroundInvoke;\n+import javax.interceptor.InvocationContext;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+@RunWith(ApplicationComposer.class)\n+public class StatelessWithAroundInvokeOnlyTest {\n+    @EJB\n+    private StatelessTestBean stateless;\n+\n+    @Test\n+    public void testAroundInvoke() {\n+        final int param = 1;\n+        final int result = stateless.execute(param);\n+        assertEquals(result, param);\n+    }\n+\n+    @Module\n+    @Classes(cdi = true)\n+    public StatelessBean bean() {\n+        final StatelessBean bean = new StatelessBean(StatelessTestBean.class);\n+        bean.setLocalBean(new Empty());\n+        return bean;\n+    }\n+\n+    @Stateless\n+    public static class StatelessTestBean {\n+\n+        public int execute(int x) {\n+            return -x;\n+        }\n+\n+        @AroundInvoke\n+        private Object aroundInvoke(InvocationContext ctx) throws Exception {\n+            final Integer result = (Integer) ctx.proceed();\n+            return Integer.valueOf(-result.intValue());\n+        }\n+    }\n+}",
                "additions": 67,
                "raw_url": "https://github.com/apache/tomee/raw/97c27de3b078f23c470f7b7175e14f2debff4840/container/openejb-core/src/test/java/org/apache/openejb/interceptors/StatelessWithAroundInvokeOnlyTest.java",
                "status": "added",
                "changes": 67,
                "deletions": 0,
                "sha": "0b78199c1a8ff7e6be268bae1e2eaceb7dbce42e",
                "blob_url": "https://github.com/apache/tomee/blob/97c27de3b078f23c470f7b7175e14f2debff4840/container/openejb-core/src/test/java/org/apache/openejb/interceptors/StatelessWithAroundInvokeOnlyTest.java",
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/interceptors/StatelessWithAroundInvokeOnlyTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/interceptors/StatelessWithAroundInvokeOnlyTest.java?ref=97c27de3b078f23c470f7b7175e14f2debff4840"
            }
        ],
        "bug_id": "tomee_17",
        "parent": "https://github.com/apache/tomee/commit/29c7594baff0161f358f1e6585fe36730d14f43c",
        "message": "TOMEE-2064 avoid NPE if no constructor interceptors are used on ejb, thanks Svetlin Zarev for the patch",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/fc99d9445e21fe009cd849d9d60b39e40d772649",
        "file": [
            {
                "patch": "@@ -1059,7 +1059,9 @@ public void after() throws Exception {\n             if (originalLoader != null) {\n                 Thread.currentThread().setContextClassLoader(originalLoader);\n             }\n-            System.setProperties(originalProperties);\n+            if (originalProperties != null) {\n+                System.setProperties(originalProperties);\n+            }\n         }\n     }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/fc99d9445e21fe009cd849d9d60b39e40d772649/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "4b830580197b2a21c15aa7120a80536cef535bda",
                "blob_url": "https://github.com/apache/tomee/blob/fc99d9445e21fe009cd849d9d60b39e40d772649/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java?ref=fc99d9445e21fe009cd849d9d60b39e40d772649"
            }
        ],
        "bug_id": "tomee_18",
        "parent": "https://github.com/apache/tomee/commit/5f26017a95c2388a1ebf62500590af72e1aca21d",
        "message": "NPE protection",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/cf2692b602ee0615f21acf5dbf8eecc043838dfd",
        "file": [
            {
                "patch": "@@ -763,9 +763,11 @@ public void deployApp(final Object inputTestInstance) throws Exception {\n     private boolean isCdi(final boolean cdi, final Class<?>[] cdiInterceptors,\n                           final Class<?>[] cdiAlternatives, final Class<?>[] cdiStereotypes,\n                           final Class<?>[] cdiDecorators) {\n-        return cdi || cdiAlternatives.length > 0\n-            || cdiDecorators.length > 0 || cdiInterceptors.length > 0\n-            || cdiStereotypes.length > 0;\n+        return cdi\n+            || (cdiAlternatives != null && cdiAlternatives.length > 0)\n+            || (cdiDecorators != null && cdiDecorators.length > 0)\n+            || (cdiInterceptors != null && cdiInterceptors.length > 0)\n+            || (cdiStereotypes != null && cdiStereotypes.length > 0);\n     }\n \n     protected boolean mockCdiContexts() {",
                "additions": 5,
                "raw_url": "https://github.com/apache/tomee/raw/cf2692b602ee0615f21acf5dbf8eecc043838dfd/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "status": "modified",
                "changes": 8,
                "deletions": 3,
                "sha": "61e0e06e0c3130e80e9487e680d4e279549ff850",
                "blob_url": "https://github.com/apache/tomee/blob/cf2692b602ee0615f21acf5dbf8eecc043838dfd/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java?ref=cf2692b602ee0615f21acf5dbf8eecc043838dfd"
            }
        ],
        "bug_id": "tomee_19",
        "parent": "https://github.com/apache/tomee/commit/ca0436e8f34c08de809c18bce6732f3675ac01ee",
        "message": "NPE protection",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/f9f73a49bc51e56613da9e64c85b79502fcb5b2a",
        "file": [
            {
                "patch": "@@ -373,8 +373,7 @@ private boolean isValidModuleType(final Class<?> type, final Class<?>[] moduleTy\n \n     @SuppressWarnings(\"unchecked\")\n     public void before(final Object inputTestInstance) throws Exception {\n-        // we hacked testInstance while we were not aware of it, now we can solve it\n-        testClassFinders.put(inputTestInstance, testClassFinders.remove(this));\n+        fixFakeClassFinder(inputTestInstance);\n \n         startContainer(inputTestInstance);\n \n@@ -385,12 +384,7 @@ public void before(final Object inputTestInstance) throws Exception {\n     }\n \n     public void deployApp(final Object inputTestInstance) throws Exception {\n-        // test injections\n-        ClassFinder testClassFinder = testClassFinders.remove(inputTestInstance);\n-        if (testClassFinder == null) {\n-            testClassFinders.put(inputTestInstance, testClassFinders.remove(this));\n-            testClassFinder = testClassFinders.remove(inputTestInstance);\n-        }\n+        final ClassFinder testClassFinder = fixFakeClassFinder(inputTestInstance);\n \n         final ClassLoader loader = testClass.getClassLoader();\n         AppModule appModule = new AppModule(loader, testClass.getSimpleName());\n@@ -773,6 +767,29 @@ public void deployApp(final Object inputTestInstance) throws Exception {\n         testClassFinders.put(this, testClassFinder);\n     }\n \n+    private ClassFinder fixFakeClassFinder(final Object inputTestInstance) {\n+        // test injections, we faked the instance before having it so ensuring we use the right finder\n+        ClassFinder testClassFinder = testClassFinders.get(inputTestInstance);\n+        if (testClassFinder == null) {\n+            final ApplicationComposers self = this;\n+            final ClassFinder remove = testClassFinders.remove(self);\n+            if (remove != null) {\n+                testClassFinders.put(inputTestInstance, remove);\n+                testClassFinder = remove;\n+                afterRunnables.add(new Runnable() { // reset state for next test\n+                    @Override\n+                    public void run() {\n+                        final ClassFinder classFinder = testClassFinders.remove(inputTestInstance);\n+                        if (classFinder != null) {\n+                            testClassFinders.put(self, classFinder);\n+                        }\n+                    }\n+                });\n+            }\n+        }\n+        return testClassFinder;\n+    }\n+\n     private boolean isCdi(final boolean cdi, final Class<?>[] cdiInterceptors,\n                           final Class<?>[] cdiAlternatives, final Class<?>[] cdiStereotypes,\n                           final Class<?>[] cdiDecorators) {\n@@ -1264,7 +1281,7 @@ private static void linkageErrorProtection() { // mainly for macos jre\n     public void startContainer(final Object instance) throws Exception {\n         originalProperties = (Properties) System.getProperties().clone();\n         originalLoader = Thread.currentThread().getContextClassLoader();\n-        testClassFinders.remove(this); // see constructor\n+        fixFakeClassFinder(instance);\n \n         // For the moment we just take the first @Configuration method\n         // maybe later we can add something fancy to allow multiple configurations using a qualifier",
                "additions": 26,
                "raw_url": "https://github.com/apache/tomee/raw/f9f73a49bc51e56613da9e64c85b79502fcb5b2a/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "status": "modified",
                "changes": 35,
                "deletions": 9,
                "sha": "4f54482bd36c23a553ff1d988eeaf01d78bb0aa4",
                "blob_url": "https://github.com/apache/tomee/blob/f9f73a49bc51e56613da9e64c85b79502fcb5b2a/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java?ref=f9f73a49bc51e56613da9e64c85b79502fcb5b2a"
            },
            {
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.openejb.junit.ApplicationComposer;\n import org.apache.openejb.testing.Configuration;\n import org.apache.openejb.testing.Module;\n+import org.apache.openejb.testing.SimpleLog;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -51,12 +52,15 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+@SimpleLog\n @RunWith(ApplicationComposer.class)\n public class BeanValidationTest {\n     @EJB\n     private PersistManager persistManager;\n+\n     @Resource\n     private Validator validator;\n+\n     @Resource\n     private ValidatorFactory validatorFactory;\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/f9f73a49bc51e56613da9e64c85b79502fcb5b2a/container/openejb-core/src/test/java/org/apache/openejb/bval/BeanValidationTest.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "4d7136f0f63515742bdde8a2c6ced08b69400007",
                "blob_url": "https://github.com/apache/tomee/blob/f9f73a49bc51e56613da9e64c85b79502fcb5b2a/container/openejb-core/src/test/java/org/apache/openejb/bval/BeanValidationTest.java",
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/bval/BeanValidationTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/bval/BeanValidationTest.java?ref=f9f73a49bc51e56613da9e64c85b79502fcb5b2a"
            }
        ],
        "bug_id": "tomee_20",
        "parent": "https://github.com/apache/tomee/commit/04294bfdeaeb2d7fa6df80dd5129fbc7bf7e2aea",
        "message": "some NPE protections",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213",
        "file": [
            {
                "patch": "@@ -16,8 +16,10 @@\n  */\n package org.apache.openejb.server.cxf.rs;\n \n+import javax.ejb.EJBAccessException;\n import javax.ejb.EJBException;\n import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.ext.ExceptionMapper;\n import javax.ws.rs.ext.Providers;\n@@ -31,8 +33,18 @@ public Response toResponse(final EJBException ejbException) {\n         final Exception cause = ejbException.getCausedByException();\n         if (cause != null) {\n             final Class causeClass = cause.getClass();\n-            return providers.getExceptionMapper(causeClass).toResponse(cause);\n+            final ExceptionMapper exceptionMapper = providers.getExceptionMapper(causeClass);\n+            if (exceptionMapper == null) {\n+                return defaultResponse(cause);\n+            }\n+            return exceptionMapper.toResponse(cause);\n+        } else if (EJBAccessException.class.isInstance(ejbException)) {\n+            return Response.status(Response.Status.FORBIDDEN).build();\n         }\n-        throw ejbException;\n+        return defaultResponse(ejbException);\n+    }\n+\n+    private Response defaultResponse(Exception cause) {\n+        return Response.serverError().type(MediaType.TEXT_PLAIN_TYPE).entity(cause.getMessage()).build();\n     }\n }",
                "additions": 14,
                "raw_url": "https://github.com/apache/tomee/raw/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapper.java",
                "status": "modified",
                "changes": 16,
                "deletions": 2,
                "sha": "1a67b665959236da1c3a63a308d771d604c6fbb0",
                "blob_url": "https://github.com/apache/tomee/blob/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapper.java",
                "filename": "server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapper.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapper.java?ref=f0c5ecc62d7deef5b879a58fdcc64f3c102f4213"
            },
            {
                "patch": "@@ -17,94 +17,67 @@\n package org.apache.openejb.server.cxf.rs;\n \n import org.apache.cxf.jaxrs.client.WebClient;\n-import org.apache.openejb.OpenEjbContainer;\n-import org.apache.openejb.config.DeploymentFilterable;\n-import org.apache.openejb.server.cxf.rs.beans.SimpleEJB;\n-import org.apache.openejb.util.NetworkUtil;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n+import org.apache.openejb.junit.ApplicationComposer;\n+import org.apache.openejb.testing.Classes;\n+import org.apache.openejb.testing.EnableServices;\n+import org.apache.openejb.testing.RandomPort;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n \n import javax.annotation.security.RolesAllowed;\n-import javax.ejb.EJB;\n import javax.ejb.Lock;\n import javax.ejb.LockType;\n import javax.ejb.Singleton;\n-import javax.ejb.embeddable.EJBContainer;\n-import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.Request;\n import javax.ws.rs.core.Response;\n-import java.util.Properties;\n+import javax.ws.rs.ext.ExceptionMapper;\n+import javax.ws.rs.ext.Provider;\n \n import static org.junit.Assert.assertEquals;\n \n-@SuppressWarnings(\"FieldCanBeLocal\")\n+@EnableServices(\"jaxrs\")\n+@Classes(cdi = true, innerClassesAsBean = true)\n+@RunWith(ApplicationComposer.class)\n public class EJBExceptionMapperTest {\n-    private static EJBContainer container;\n-    private static RESTIsCoolOne service;\n-    private static int port = -1;\n+    @RandomPort(\"http\")\n+    private int port;\n \n-    @BeforeClass\n-    public static void start() throws Exception {\n-        port = NetworkUtil.getNextAvailablePort();\n-        final Properties properties = new Properties();\n-        properties.setProperty(\"httpejbd.port\", Integer.toString(port));\n-        properties.setProperty(DeploymentFilterable.CLASSPATH_INCLUDE, \".*openejb-cxf-rs.*\");\n-        properties.setProperty(OpenEjbContainer.OPENEJB_EMBEDDED_REMOTABLE, \"true\");\n-        container = EJBContainer.createEJBContainer(properties);\n-        service = (RESTIsCoolOne) container.getContext().lookup(\"java:/global/openejb-cxf-rs/RESTIsCoolOne\");\n-    }\n-\n-    @AfterClass\n-    public static void close() throws Exception {\n-        if (container != null) {\n-            container.close();\n-        }\n+    @Test\n+    public void security() {\n+        final Response response = WebClient.create(\"http://localhost:\" + port + \"/openejb\").path(\"/ejbsecu/rest\").get();\n+        assertEquals(403, response.getStatus());\n     }\n \n-\n     @Test\n-    public void rest() {\n-        final Response response = WebClient.create(\"http://localhost:\" + port + \"/openejb-cxf-rs\").path(\"/ejbsecu/rest\").get();\n-        assertEquals(500, response.getStatus());\n+    public void businessError() {\n+        final Response response = WebClient.create(\"http://localhost:\" + port + \"/openejb\").path(\"/ejbsecu/oops\").get();\n+        assertEquals(234, response.getStatus());\n     }\n \n+    @Provider\n+    public static class IllegalMapper implements ExceptionMapper<IllegalArgumentException> {\n+        @Override\n+        public Response toResponse(final IllegalArgumentException exception) {\n+            return Response.status(234).build();\n+        }\n+    }\n \n     @Singleton\n-    @RolesAllowed(\"Something that does not exit at all\")\n     @Lock(LockType.READ)\n-    @Path(\"/ejbsecu\")\n+    @Path(\"ejbsecu\")\n     public static class RESTIsCoolOne {\n-        @EJB\n-        private SimpleEJB simpleEJB;\n-        @javax.ws.rs.core.Context\n-        Request request;\n-\n-        @Path(\"/normal\")\n-        @GET\n-        public String normal() {\n-            return simpleEJB.ok();\n-        }\n-\n-        @Path(\"/rest\")\n-        @GET\n-        public String rest() {\n-            return simpleEJB.ok();\n-        }\n-\n-        @Path(\"/param\")\n+        @Path(\"rest\")\n+        @RolesAllowed(\"Something that does not exit at all\")\n         @GET\n-        public String param(@QueryParam(\"arg\") @DefaultValue(\"true\") final String p) {\n-            return p;\n+        public boolean secu() {\n+            return true;\n         }\n \n-        @Path(\"/field\")\n+        @Path(\"/oops\")\n         @GET\n-        public boolean field() {\n-            return \"GET\".equals(request.getMethod());\n+        public boolean err() {\n+            throw new IllegalArgumentException(\"oops\");\n         }\n     }\n }",
                "additions": 34,
                "raw_url": "https://github.com/apache/tomee/raw/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapperTest.java",
                "status": "modified",
                "changes": 95,
                "deletions": 61,
                "sha": "b47aecda08d71dd64eae7f18329f08d9d2e0d66d",
                "blob_url": "https://github.com/apache/tomee/blob/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapperTest.java",
                "filename": "server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapperTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapperTest.java?ref=f0c5ecc62d7deef5b879a58fdcc64f3c102f4213"
            },
            {
                "patch": "@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.resolver.maven;\n+\n+import org.apache.openejb.util.reflection.Reflections;\n+\n+import java.io.File;\n+\n+public class ShrinkwrapBridge {\n+    private static final Class<?>[] NO_PARAM = new Class[0];\n+    private static final Class<?>[] STRING_PARAM = new Class[]{String.class};\n+    private static final Object[] NO_ARG = new Object[0];\n+\n+    public File resolve(final String rawLocation) throws Exception {\n+        final Class<?> mvn = Thread.currentThread().getContextClassLoader().loadClass(\"org.jboss.shrinkwrap.resolver.api.maven.Maven\");\n+        /*\n+        return Maven.configureResolver().workOffline()\n+            .resolve(toSwFormat(rawLocation))\n+            .withoutTransitivity()\n+            .asSingleFile()\n+            .getAbsolutePath()\n+         */\n+        return File.class.cast(Reflections.invokeByReflection(\n+            Reflections.invokeByReflection(\n+                Reflections.invokeByReflection(\n+                    Reflections.invokeByReflection(\n+                        mvn.getMethod(\"configureResolver\").invoke(null),\n+                        \"workOffline\", NO_PARAM, NO_ARG),\n+                    \"resolve\", STRING_PARAM, new Object[]{toSwFormat(rawLocation)}),\n+                \"withoutTransitivity\", NO_PARAM, NO_ARG),\n+            \"asSingleFile\", NO_PARAM, NO_ARG));\n+    }\n+\n+    private String toSwFormat(final String rawLocation) {\n+        final String[] segments = rawLocation.split(\":\");\n+        if (!\"mvn\".equals(segments[0])) {\n+            throw new IllegalArgumentException(\"Only mvn prefix is supported: \" + rawLocation);\n+        }\n+\n+        if (segments.length == 5) {\n+            return segments[1] + ':' + segments[2] + ':' + segments[4] + ':' + segments[3];\n+        } else if (segments.length == 4) {\n+            return segments[1] + ':' + segments[2] + ':' + segments[3];\n+        } else if (segments.length == 3) {\n+            return segments[1] + ':' + segments[2];\n+        }\n+        throw new IllegalArgumentException(\"Unknown mvn format: \" + rawLocation);\n+    }\n+}",
                "additions": 63,
                "raw_url": "https://github.com/apache/tomee/raw/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/utils/openejb-provisionning/src/main#java/org/apache/openejb/resolver/maven/ShrinkwrapBridge.java",
                "status": "added",
                "changes": 63,
                "deletions": 0,
                "sha": "9e98f5669be62c7af0ece4bfa9f1d597c25c8ff1",
                "blob_url": "https://github.com/apache/tomee/blob/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/utils/openejb-provisionning/src/main#java/org/apache/openejb/resolver/maven/ShrinkwrapBridge.java",
                "filename": "utils/openejb-provisionning/src/main#java/org/apache/openejb/resolver/maven/ShrinkwrapBridge.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/utils/openejb-provisionning/src/main#java/org/apache/openejb/resolver/maven/ShrinkwrapBridge.java?ref=f0c5ecc62d7deef5b879a58fdcc64f3c102f4213"
            },
            {
                "patch": "@@ -0,0 +1,1196 @@\n+\n+                                 Apache License\n+                           Version 2.0, January 2004\n+                        http://www.apache.org/licenses/\n+\n+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n+\n+   1. Definitions.\n+\n+      \"License\" shall mean the terms and conditions for use, reproduction,\n+      and distribution as defined by Sections 1 through 9 of this document.\n+\n+      \"Licensor\" shall mean the copyright owner or entity authorized by\n+      the copyright owner that is granting the License.\n+\n+      \"Legal Entity\" shall mean the union of the acting entity and all\n+      other entities that control, are controlled by, or are under common\n+      control with that entity. For the purposes of this definition,\n+      \"control\" means (i) the power, direct or indirect, to cause the\n+      direction or management of such entity, whether by contract or\n+      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n+      outstanding shares, or (iii) beneficial ownership of such entity.\n+\n+      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n+      exercising permissions granted by this License.\n+\n+      \"Source\" form shall mean the preferred form for making modifications,\n+      including but not limited to software source code, documentation\n+      source, and configuration files.\n+\n+      \"Object\" form shall mean any form resulting from mechanical\n+      transformation or translation of a Source form, including but\n+      not limited to compiled object code, generated documentation,\n+      and conversions to other media types.\n+\n+      \"Work\" shall mean the work of authorship, whether in Source or\n+      Object form, made available under the License, as indicated by a\n+      copyright notice that is included in or attached to the work\n+      (an example is provided in the Appendix below).\n+\n+      \"Derivative Works\" shall mean any work, whether in Source or Object\n+      form, that is based on (or derived from) the Work and for which the\n+      editorial revisions, annotations, elaborations, or other modifications\n+      represent, as a whole, an original work of authorship. For the purposes\n+      of this License, Derivative Works shall not include works that remain\n+      separable from, or merely link (or bind by name) to the interfaces of,\n+      the Work and Derivative Works thereof.\n+\n+      \"Contribution\" shall mean any work of authorship, including\n+      the original version of the Work and any modifications or additions\n+      to that Work or Derivative Works thereof, that is intentionally\n+      submitted to Licensor for inclusion in the Work by the copyright owner\n+      or by an individual or Legal Entity authorized to submit on behalf of\n+      the copyright owner. For the purposes of this definition, \"submitted\"\n+      means any form of electronic, verbal, or written communication sent\n+      to the Licensor or its representatives, including but not limited to\n+      communication on electronic mailing lists, source code control systems,\n+      and issue tracking systems that are managed by, or on behalf of, the\n+      Licensor for the purpose of discussing and improving the Work, but\n+      excluding communication that is conspicuously marked or otherwise\n+      designated in writing by the copyright owner as \"Not a Contribution.\"\n+\n+      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n+      on behalf of whom a Contribution has been received by Licensor and\n+      subsequently incorporated within the Work.\n+\n+   2. Grant of Copyright License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      copyright license to reproduce, prepare Derivative Works of,\n+      publicly display, publicly perform, sublicense, and distribute the\n+      Work and such Derivative Works in Source or Object form.\n+\n+   3. Grant of Patent License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      (except as stated in this section) patent license to make, have made,\n+      use, offer to sell, sell, import, and otherwise transfer the Work,\n+      where such license applies only to those patent claims licensable\n+      by such Contributor that are necessarily infringed by their\n+      Contribution(s) alone or by combination of their Contribution(s)\n+      with the Work to which such Contribution(s) was submitted. If You\n+      institute patent litigation against any entity (including a\n+      cross-claim or counterclaim in a lawsuit) alleging that the Work\n+      or a Contribution incorporated within the Work constitutes direct\n+      or contributory patent infringement, then any patent licenses\n+      granted to You under this License for that Work shall terminate\n+      as of the date such litigation is filed.\n+\n+   4. Redistribution. You may reproduce and distribute copies of the\n+      Work or Derivative Works thereof in any medium, with or without\n+      modifications, and in Source or Object form, provided that You\n+      meet the following conditions:\n+\n+      (a) You must give any other recipients of the Work or\n+          Derivative Works a copy of this License; and\n+\n+      (b) You must cause any modified files to carry prominent notices\n+          stating that You changed the files; and\n+\n+      (c) You must retain, in the Source form of any Derivative Works\n+          that You distribute, all copyright, patent, trademark, and\n+          attribution notices from the Source form of the Work,\n+          excluding those notices that do not pertain to any part of\n+          the Derivative Works; and\n+\n+      (d) If the Work includes a \"NOTICE\" text file as part of its\n+          distribution, then any Derivative Works that You distribute must\n+          include a readable copy of the attribution notices contained\n+          within such NOTICE file, excluding those notices that do not\n+          pertain to any part of the Derivative Works, in at least one\n+          of the following places: within a NOTICE text file distributed\n+          as part of the Derivative Works; within the Source form or\n+          documentation, if provided along with the Derivative Works; or,\n+          within a display generated by the Derivative Works, if and\n+          wherever such third-party notices normally appear. The contents\n+          of the NOTICE file are for informational purposes only and\n+          do not modify the License. You may add Your own attribution\n+          notices within Derivative Works that You distribute, alongside\n+          or as an addendum to the NOTICE text from the Work, provided\n+          that such additional attribution notices cannot be construed\n+          as modifying the License.\n+\n+      You may add Your own copyright statement to Your modifications and\n+      may provide additional or different license terms and conditions\n+      for use, reproduction, or distribution of Your modifications, or\n+      for any such Derivative Works as a whole, provided Your use,\n+      reproduction, and distribution of the Work otherwise complies with\n+      the conditions stated in this License.\n+\n+   5. Submission of Contributions. Unless You explicitly state otherwise,\n+      any Contribution intentionally submitted for inclusion in the Work\n+      by You to the Licensor shall be under the terms and conditions of\n+      this License, without any additional terms or conditions.\n+      Notwithstanding the above, nothing herein shall supersede or modify\n+      the terms of any separate license agreement you may have executed\n+      with Licensor regarding such Contributions.\n+\n+   6. Trademarks. This License does not grant permission to use the trade\n+      names, trademarks, service marks, or product names of the Licensor,\n+      except as required for reasonable and customary use in describing the\n+      origin of the Work and reproducing the content of the NOTICE file.\n+\n+   7. Disclaimer of Warranty. Unless required by applicable law or\n+      agreed to in writing, Licensor provides the Work (and each\n+      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+      implied, including, without limitation, any warranties or conditions\n+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n+      PARTICULAR PURPOSE. You are solely responsible for determining the\n+      appropriateness of using or redistributing the Work and assume any\n+      risks associated with Your exercise of permissions under this License.\n+\n+   8. Limitation of Liability. In no event and under no legal theory,\n+      whether in tort (including negligence), contract, or otherwise,\n+      unless required by applicable law (such as deliberate and grossly\n+      negligent acts) or agreed to in writing, shall any Contributor be\n+      liable to You for damages, including any direct, indirect, special,\n+      incidental, or consequential damages of any character arising as a\n+      result of this License or out of the use or inability to use the\n+      Work (including but not limited to damages for loss of goodwill,\n+      work stoppage, computer failure or malfunction, or any and all\n+      other commercial damages or losses), even if such Contributor\n+      has been advised of the possibility of such damages.\n+\n+   9. Accepting Warranty or Additional Liability. While redistributing\n+      the Work or Derivative Works thereof, You may choose to offer,\n+      and charge a fee for, acceptance of support, warranty, indemnity,\n+      or other liability obligations and/or rights consistent with this\n+      License. However, in accepting such obligations, You may act only\n+      on Your own behalf and on Your sole responsibility, not on behalf\n+      of any other Contributor, and only if You agree to indemnify,\n+      defend, and hold each Contributor harmless for any liability\n+      incurred by, or claims asserted against, such Contributor by reason\n+      of your accepting any such warranty or additional liability.\n+\n+   END OF TERMS AND CONDITIONS\n+\n+   APPENDIX: How to apply the Apache License to your work.\n+\n+      To apply the Apache License to your work, attach the following\n+      boilerplate notice, with the fields enclosed by brackets \"[]\"\n+      replaced with your own identifying information. (Don't include\n+      the brackets!)  The text should be enclosed in the appropriate\n+      comment syntax for the file format. We also recommend that a\n+      file or class name and description of purpose be included on the\n+      same \"printed page\" as the copyright notice for easier\n+      identification within third-party archives.\n+\n+   Copyright [yyyy] [name of copyright owner]\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+=========================================================================\n+  - W3C Schemas\n+    License: W3C Software Notice and License\n+-------------------------------------------------------------------------\n+\n+W3C\u00a8 SOFTWARE NOTICE AND LICENSE\n+Copyright \u00a9 1994-2014 World Wide Web Consortium, (Massachusetts Institute of\n+Technology, Institut National de Recherche en Informatique et en Automatique,\n+Keio University). All Rights Reserved. http://www.w3.org/Consortium/Legal/\n+\n+This W3C work (including software, documents, or other related items) is\n+being provided by the copyright holders under the following license. By\n+obtaining, using and/or copying this work, you (the licensee) agree that you\n+have read, understood, and will comply with the following terms and\n+conditions:\n+\n+Permission to use, copy, modify, and distribute this software and its\n+documentation, with or without modification,  for any purpose and without\n+fee or royalty is hereby granted, provided that you include the following on\n+ALL copies of the software and documentation or portions thereof, including\n+modifications, that you make:\n+\n+   1. The full text of this NOTICE in a location viewable to users of the\n+         redistributed or derivative work.\n+   2. Any pre-existing intellectual property disclaimers, notices, or terms\n+         and conditions. If none exist, a short notice of the following form\n+         (hypertext is preferred, text is permitted) should be used within\n+         the body of any redistributed or derivative code: \"Copyright \u00a9\n+         [$date-of-software] World Wide Web Consortium, (Massachusetts Institute\n+         of Technology, Institut National de Recherche en Informatique et en\n+         Automatique, Keio University). All Rights Reserved.\n+         http://www.w3.org/Consortium/Legal/\"\n+   3. Notice of any changes or modifications to the W3C files, including the\n+         date changes were made. (We recommend you provide URIs to the location\n+         from which the code is derived.)\n+\n+THIS SOFTWARE AND DOCUMENTATION IS PROVIDED \"AS IS,\" AND COPYRIGHT HOLDERS MAKE\n+NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\n+TO, WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT\n+THE USE OF THE SOFTWARE OR DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY PATENTS,\n+COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.\n+\n+COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR\n+CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR DOCUMENTATION.\n+\n+The name and trademarks of copyright holders may NOT be used in advertising or\n+publicity pertaining to the software without specific, written prior permission.\n+Title to copyright in this software and any associated documentation will at all\n+times remain with copyright holders.\n+\n+\n+=========================================================================\n+  - HSQLDB (http://hsqldb.org/) org.hsqldb:hsqldb:jar:224\n+    License: HSQLDB License  (http://hsqldb.org/web/hsqlLicense.html)\n+-------------------------------------------------------------------------\n+\n+For work developed by the HSQL Development Group:\n+\n+Copyright (c) 2001-2014, The HSQL Development Group\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met:\n+\n+Redistributions of source code must retain the above copyright notice, this\n+list of conditions and the following disclaimer.\n+\n+Redistributions in binary form must reproduce the above copyright notice,\n+this list of conditions and the following disclaimer in the documentation\n+and/or other materials provided with the distribution.\n+\n+Neither the name of the HSQL Development Group nor the names of its\n+contributors may be used to endorse or promote products derived from this\n+software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ARE DISCLAIMED. IN NO EVENT SHALL HSQL DEVELOPMENT GROUP, HSQLDB.ORG,\n+OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+\n+For work originally developed by the Hypersonic SQL Group:\n+\n+Copyright (c) 1995-2000 by the Hypersonic SQL Group.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met:\n+\n+Redistributions of source code must retain the above copyright notice, this\n+list of conditions and the following disclaimer.\n+\n+Redistributions in binary form must reproduce the above copyright notice,\n+this list of conditions and the following disclaimer in the documentation\n+and/or other materials provided with the distribution.\n+\n+Neither the name of the Hypersonic SQL Group nor the names of its\n+contributors may be used to endorse or promote products derived from this\n+software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ARE DISCLAIMED. IN NO EVENT SHALL THE HYPERSONIC SQL GROUP,\n+OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+This software consists of voluntary contributions made by many individuals on behalf of the\n+Hypersonic SQL Group.\n+\n+=========================================================================\n+  - Serp (http://serp.sourceforge.net) net.sourceforge.serp:serp:jar:1.13.1\n+    License: BSD  (LICENSE.txt)\n+-------------------------------------------------------------------------\n+\n+Copyright (c) 2002, A. Abram White\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met:\n+\n+* Redistributions of source code must retain the above copyright notice, this\n+  list of conditions and the following disclaimer.\n+* Redistributions in binary form must reproduce the above copyright notice,\n+  this list of conditions and the following disclaimer in the documentation\n+  and/or other materials provided with the distribution.\n+* Neither the name of 'serp' nor the names of its contributors may\n+  be used to endorse or promote products derived from this software without\n+  specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+\n+=========================================================================\n+  - WSDL4J (http://sf.net/projects/wsdl4j) wsdl4j:wsdl4j:jar:1.6.2\n+    License: CPL  (http://www.opensource.org/licenses/cpl1.0.txt)\n+-------------------------------------------------------------------------\n+\n+Common Public License Version 1.0\n+\n+THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS COMMON PUBLIC\n+LICENSE (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM\n+CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\n+\n+1. DEFINITIONS\n+\n+\"Contribution\" means:\n+\n+a) in the case of the initial Contributor, the initial code and\n+documentation distributed under this Agreement, and\n+\n+b) in the case of each subsequent Contributor:\n+\n+i) changes to the Program, and\n+\n+ii) additions to the Program;\n+\n+where such changes and/or additions to the Program originate from and are\n+distributed by that particular Contributor. A Contribution 'originates' from a\n+Contributor if it was added to the Program by such Contributor itself or anyone\n+acting on such Contributor's behalf. Contributions do not include additions to\n+the Program which: (i) are separate modules of software distributed in\n+conjunction with the Program under their own license agreement, and (ii) are not\n+derivative works of the Program.\n+\n+\"Contributor\" means any person or entity that distributes the Program.\n+\n+\"Licensed Patents \" mean patent claims licensable by a Contributor which are\n+necessarily infringed by the use or sale of its Contribution alone or when\n+combined with the Program.\n+\n+\"Program\" means the Contributions distributed in accordance with this Agreement.\n+\n+\"Recipient\" means anyone who receives the Program under this Agreement,\n+including all Contributors.\n+\n+2. GRANT OF RIGHTS\n+\n+a) Subject to the terms of this Agreement, each Contributor hereby grants\n+Recipient a non-exclusive, worldwide, royalty-free copyright license to\n+reproduce, prepare derivative works of, publicly display, publicly perform,\n+distribute and sublicense the Contribution of such Contributor, if any, and such\n+derivative works, in source code and object code form.\n+\n+b) Subject to the terms of this Agreement, each Contributor hereby grants\n+Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed\n+Patents to make, use, sell, offer to sell, import and otherwise transfer the\n+Contribution of such Contributor, if any, in source code and object code form.\n+This patent license shall apply to the combination of the Contribution and the\n+Program if, at the time the Contribution is added by the Contributor, such\n+addition of the Contribution causes such combination to be covered by the\n+Licensed Patents. The patent license shall not apply to any other combinations\n+which include the Contribution. No hardware per se is licensed hereunder.\n+\n+c) Recipient understands that although each Contributor grants the licenses\n+to its Contributions set forth herein, no assurances are provided by any\n+Contributor that the Program does not infringe the patent or other intellectual\n+property rights of any other entity. Each Contributor disclaims any liability to\n+Recipient for claims brought by any other entity based on infringement of\n+intellectual property rights or otherwise. As a condition to exercising the\n+rights and licenses granted hereunder, each Recipient hereby assumes sole\n+responsibility to secure any other intellectual property rights needed, if any.\n+For example, if a third party patent license is required to allow Recipient to\n+distribute the Program, it is Recipient's responsibility to acquire that license\n+before distributing the Program.\n+\n+d) Each Contributor represents that to its knowledge it has sufficient\n+copyright rights in its Contribution, if any, to grant the copyright license set\n+forth in this Agreement.\n+\n+3. REQUIREMENTS\n+\n+A Contributor may choose to distribute the Program in object code form under its\n+own license agreement, provided that:\n+\n+a) it complies with the terms and conditions of this Agreement; and\n+\n+b) its license agreement:\n+\n+i) effectively disclaims on behalf of all Contributors all warranties and\n+conditions, express and implied, including warranties or conditions of title and\n+non-infringement, and implied warranties or conditions of merchantability and\n+fitness for a particular purpose;\n+\n+ii) effectively excludes on behalf of all Contributors all liability for\n+damages, including direct, indirect, special, incidental and consequential\n+damages, such as lost profits;\n+\n+iii) states that any provisions which differ from this Agreement are offered\n+by that Contributor alone and not by any other party; and\n+\n+iv) states that source code for the Program is available from such\n+Contributor, and informs licensees how to obtain it in a reasonable manner on or\n+through a medium customarily used for software exchange.\n+\n+When the Program is made available in source code form:\n+\n+a) it must be made available under this Agreement; and\n+\n+b) a copy of this Agreement must be included with each copy of the Program.\n+\n+Contributors may not remove or alter any copyright notices contained within the\n+Program.\n+\n+Each Contributor must identify itself as the originator of its Contribution, if\n+any, in a manner that reasonably allows subsequent Recipients to identify the\n+originator of the Contribution.\n+\n+4. COMMERCIAL DISTRIBUTION\n+\n+Commercial distributors of software may accept certain responsibilities with\n+respect to end users, business partners and the like. While this license is\n+intended to facilitate the commercial use of the Program, the Contributor who\n+includes the Program in a commercial product offering should do so in a manner\n+which does not create potential liability for other Contributors. Therefore, if\n+a Contributor includes the Program in a commercial product offering, such\n+Contributor (\"Commercial Contributor\") hereby agrees to defend and indemnify\n+every other Contributor (\"Indemnified Contributor\") against any losses, damages\n+and costs (collectively \"Losses\") arising from claims, lawsuits and other legal\n+actions brought by a third party against the Indemnified Contributor to the\n+extent caused by the acts or omissions of such Commercial Contributor in\n+connection with its distribution of the Program in a commercial product\n+offering. The obligations in this section do not apply to any claims or Losses\n+relating to any actual or alleged intellectual property infringement. In order\n+to qualify, an Indemnified Contributor must: a) promptly notify the Commercial\n+Contributor in writing of such claim, and b) allow the Commercial Contributor to\n+control, and cooperate with the Commercial Contributor in, the defense and any\n+related settlement negotiations. The Indemnified Contributor may participate in\n+any such claim at its own expense.\n+\n+For example, a Contributor might include the Program in a commercial product\n+offering, Product X. That Contributor is then a Commercial Contributor. If that\n+Commercial Contributor then makes performance claims, or offers warranties\n+related to Product X, those performance claims and warranties are such\n+Commercial Contributor's responsibility alone. Under this section, the\n+Commercial Contributor would have to defend claims against the other\n+Contributors related to those performance claims and warranties, and if a court\n+requires any other Contributor to pay any damages as a result, the Commercial\n+Contributor must pay those damages.\n+\n+5. NO WARRANTY\n+\n+EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR\n+IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE,\n+NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each\n+Recipient is solely responsible for determining the appropriateness of using and\n+distributing the Program and assumes all risks associated with its exercise of\n+rights under this Agreement, including but not limited to the risks and costs of\n+program errors, compliance with applicable laws, damage to or loss of data,\n+programs or equipment, and unavailability or interruption of operations.\n+\n+6. DISCLAIMER OF LIABILITY\n+\n+EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY\n+CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST\n+PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n+STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n+OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS\n+GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n+\n+7. GENERAL\n+\n+If any provision of this Agreement is invalid or unenforceable under applicable\n+law, it shall not affect the validity or enforceability of the remainder of the\n+terms of this Agreement, and without further action by the parties hereto, such\n+provision shall be reformed to the minimum extent necessary to make such\n+provision valid and enforceable.\n+\n+If Recipient institutes patent litigation against a Contributor with respect to\n+a patent applicable to software (including a cross-claim or counterclaim in a\n+lawsuit), then any patent licenses granted by that Contributor to such Recipient\n+under this Agreement shall terminate as of the date such litigation is filed. In\n+addition, if Recipient institutes patent litigation against any entity\n+(including a cross-claim or counterclaim in a lawsuit) alleging that the Program\n+itself (excluding combinations of the Program with other software or hardware)\n+infringes such Recipient's patent(s), then such Recipient's rights granted under\n+Section 2(b) shall terminate as of the date such litigation is filed.\n+\n+All Recipient's rights under this Agreement shall terminate if it fails to\n+comply with any of the material terms or conditions of this Agreement and does\n+not cure such failure in a reasonable period of time after becoming aware of\n+such noncompliance. If all Recipient's rights under this Agreement terminate,\n+Recipient agrees to cease use and distribution of the Program as soon as\n+reasonably practicable. However, Recipient's obligations under this Agreement\n+and any licenses granted by Recipient relating to the Program shall continue and\n+survive.\n+\n+Everyone is permitted to copy and distribute copies of this Agreement, but in\n+order to avoid inconsistency the Agreement is copyrighted and may only be\n+modified in the following manner. The Agreement Steward reserves the right to\n+publish new versions (including revisions) of this Agreement from time to time.\n+No one other than the Agreement Steward has the right to modify this Agreement.\n+IBM is the initial Agreement Steward. IBM may assign the responsibility to serve\n+as the Agreement Steward to a suitable separate entity. Each new version of the\n+Agreement will be given a distinguishing version number. The Program (including\n+Contributions) may always be distributed subject to the version of the Agreement\n+under which it was received. In addition, after a new version of the Agreement\n+is published, Contributor may elect to distribute the Program (including its\n+Contributions) under the new version. Except as expressly stated in Sections\n+2(a) and 2(b) above, Recipient receives no rights or licenses to the\n+intellectual property of any Contributor under this Agreement, whether\n+expressly, by implication, estoppel or otherwise. All rights in the Program not\n+expressly granted under this Agreement are reserved.\n+\n+This Agreement is governed by the laws of the State of New York and the\n+intellectual property laws of the United States of America. No party to this\n+Agreement will bring a legal action under this Agreement more than one year\n+after the cause of action arose. Each party waives its rights to a jury trial in\n+any resulting litigation.\n+\n+\n+=========================================================================\n+  - HOWL logger (http://forge.objectweb.org/projects/howl/) org.objectweb.howl:howl:jar:1.0.1-1\n+    License: BSD\n+-------------------------------------------------------------------------\n+\n+Copyright (c) 2004, Bull S.A.\n+\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions\n+are met:\n+\n+  * Redistributions of source code must retain the above copyright\n+    notice, this list of conditions and the following disclaimer.\n+\n+  * Redistributions in binary form must reproduce the above copyright\n+    notice, this list of conditions and the following disclaimer in the\n+    documentation and/or other materials provided with the distribution.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n+TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n+CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+\n+=========================================================================\n+  - SLF4J API Module (http://www.slf4j.org) org.slf4j:slf4j-api:jar:1.6.1\n+  - SLF4J LOG4J-12 Binding (http://www.slf4j.org) org.slf4j:slf4j-log4j12:jar:1.6.1\n+    License: MIT License  (http://www.opensource.org/licenses/mit-license.php)\n+-------------------------------------------------------------------------\n+\n+Copyright (c) 2004-2014 QOS.ch\n+ All rights reserved.\n+\n+ Permission is hereby granted, free  of charge, to any person obtaining\n+ a  copy  of this  software  and  associated  documentation files  (the\n+ \"Software\"), to  deal in  the Software without  restriction, including\n+ without limitation  the rights to  use, copy, modify,  merge, publish,\n+ distribute,  sublicense, and/or sell  copies of  the Software,  and to\n+ permit persons to whom the Software  is furnished to do so, subject to\n+ the following conditions:\n+\n+ The  above  copyright  notice  and  this permission  notice  shall  be\n+ included in all copies or substantial portions of the Software.\n+\n+ THE  SOFTWARE IS  PROVIDED  \"AS  IS\", WITHOUT  WARRANTY  OF ANY  KIND,\n+ EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF\n+ MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND\n+ NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n+ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n+ OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION\n+ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+\n+\n+=========================================================================\n+  - Apache XBean :: ASM shaded (repackaged) org.apache.xbean:xbean-asm-shaded:bundle:3.8\n+    License: BSD (http://asm.ow2.org/license.html)\n+-------------------------------------------------------------------------\n+\n+Copyright (c) 2000-2014 INRIA, France Telecom\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions\n+are met:\n+\n+1. Redistributions of source code must retain the above copyright\n+   notice, this list of conditions and the following disclaimer.\n+\n+2. Redistributions in binary form must reproduce the above copyright\n+   notice, this list of conditions and the following disclaimer in the\n+   documentation and/or other materials provided with the distribution.\n+\n+3. Neither the name of the copyright holders nor the names of its\n+   contributors may be used to endorse or promote products derived from\n+   this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n+LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n+THE POSSIBILITY OF SUCH DAMAGE.\n+\n+\n+=========================================================================\n+  - JSTL, JSP, Java EE Schemas\n+    License: CDDL\n+-------------------------------------------------------------------------\n+\n+COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\n+\n+1. Definitions.\n+\n+1.1. \"Contributor\" means each individual or entity that\n+creates or contributes to the creation of Modifications.\n+\n+1.2. \"Contributor Version\" means the combination of the\n+Original Software, prior Modifications used by a\n+Contributor (if any), and the Modifications made by that\n+particular Contributor.\n+\n+1.3. \"Covered Software\" means (a) the Original Software, or\n+(b) Modifications, or (c) the combination of files\n+containing Original Software with files containing\n+Modifications, in each case including portions thereof.\n+\n+1.4. \"Executable\" means the Covered Software in any form\n+other than Source Code.\n+\n+1.5. \"Initial Developer\" means the individual or entity\n+that first makes Original Software available under this\n+License.\n+\n+1.6. \"Larger Work\" means a work which combines Covered\n+Software or portions thereof with code not governed by the\n+terms of this License.\n+\n+1.7. \"License\" means this document.\n+\n+1.8. \"Licensable\" means having the right to grant, to the\n+maximum extent possible, whether at the time of the initial\n+grant or subsequently acquired, any and all of the rights\n+conveyed herein.\n+\n+1.9. \"Modifications\" means the Source Code and Executable\n+form of any of the following:\n+\n+A. Any file that results from an addition to,\n+deletion from or modification of the contents of a\n+file containing Original Software or previous\n+Modifications;\n+\n+B. Any new file that contains any part of the\n+Original Software or previous Modification; or\n+\n+C. Any new file that is contributed or otherwise made\n+available under the terms of this License.\n+\n+1.10. \"Original Software\" means the Source Code and\n+Executable form of computer software code that is\n+originally released under this License.\n+\n+1.11. \"Patent Claims\" means any patent claim(s), now owned\n+or hereafter acquired, including without limitation,\n+method, process, and apparatus claims, in any patent\n+Licensable by grantor.\n+\n+1.12. \"Source Code\" means (a) the common form of computer\n+software code in which modifications are made and (b)\n+associated documentation included in or with such code.\n+\n+1.13. \"You\" (or \"Your\") means an individual or a legal\n+entity exercising rights under, and complying with all of\n+the terms of, this License. For legal entities, \"You\"\n+includes any entity which controls, is controlled by, or is\n+under common control with You. For purposes of this\n+definition, \"control\" means (a) the power, direct or\n+indirect, to cause the direction or management of such\n+entity, whether by contract or otherwise, or (b) ownership\n+of more than fifty percent (50%) of the outstanding shares\n+or beneficial ownership of such entity.\n+\n+2. License Grants.\n+\n+2.1. The Initial Developer Grant.\n+\n+Conditioned upon Your compliance with Section 3.1 below and\n+subject to third party intellectual property claims, the\n+Initial Developer hereby grants You a world-wide,\n+royalty-free, non-exclusive license:\n+\n+(a) under intellectual property rights (other than\n+patent or trademark) Licensable by Initial Developer,\n+to use, reproduce, modify, display, perform,\n+sublicense and distribute the Original Software (or\n+portions thereof), with or without Modifications,\n+and/or as part of a Larger Work; and\n+\n+(b) under Patent Claims infringed by the making,\n+using or selling of Original Software, to make, have\n+made, use, practice, sell, and offer for sale, and/or\n+otherwise dispose of the Original Software (or\n+portions thereof).\n+\n+(c) The licenses granted in Sections 2.1(a) and (b)\n+are effective on the date Initial Developer first\n+distributes or otherwise makes the Original Software\n+available to a third party under the terms of this\n+License.\n+\n+(d) Notwithstanding Section 2.1(b) above, no patent\n+license is granted: (1) for code that You delete from\n+the Original Software, or (2) for infringements\n+caused by: (i) the modification of the Original\n+Software, or (ii) the combination of the Original\n+Software with other software or devices.\n+\n+2.2. Contributor Grant.\n+\n+Conditioned upon Your compliance with Section 3.1 below and\n+subject to third party intellectual property claims, each\n+Contributor hereby grants You a world-wide, royalty-free,\n+non-exclusive license:\n+\n+(a) under intellectual property rights (other than\n+patent or trademark) Licensable by Contributor to\n+use, reproduce, modify, display, perform, sublicense\n+and distribute the Modifications created by such\n+Contributor (or portions thereof), either on an\n+unmodified basis, with other Modifications, as\n+Covered Software and/or as part of a Larger Work; and\n+\n+(b) under Patent Claims infringed by the making,\n+using, or selling of Modifications made by that\n+Contributor either alone and/or in combination with\n+its Contributor Version (or portions of such\n+combination), to make, use, sell, offer for sale,\n+have made, and/or otherwise dispose of: (1)\n+Modifications made by that Contributor (or portions\n+thereof); and (2) the combination of Modifications\n+made by that Contributor with its Contributor Version\n+(or portions of such combination).\n+\n+(c) The licenses granted in Sections 2.2(a) and\n+2.2(b) are effective on the date Contributor first\n+distributes or otherwise makes the Modifications\n+available to a third party.\n+\n+(d) Notwithstanding Section 2.2(b) above, no patent\n+license is granted: (1) for any code that Contributor\n+has deleted from the Contributor Version; (2) for\n+infringements caused by: (i) third party\n+modifications of Contributor Version, or (ii) the\n+combination of Modifications made by that Contributor\n+with other software (except as part of the\n+Contributor Version) or other devices; or (3) under\n+Patent Claims infringed by Covered Software in the\n+absence of Modifications made by that Contributor.\n+\n+3. Distribution Obligations.\n+\n+3.1. Availability of Source Code.\n+\n+Any Covered Software that You distribute or otherwise make\n+available in Executable form must also be made available in\n+Source Code form and that Source Code form must be\n+distributed only under the terms of this License. You must\n+include a copy of this License with every copy of the\n+Source Code form of the Covered Software You distribute or\n+otherwise make available. You must inform recipients of any\n+such Covered Software in Executable form as to how they can\n+obtain such Covered Software in Source Code form in a\n+reasonable manner on or through a medium customarily used\n+for software exchange.\n+\n+3.2. Modifications.\n+\n+The Modifications that You create or to which You\n+contribute are governed by the terms of this License. You\n+represent that You believe Your Modifications are Your\n+original creation(s) and/or You have sufficient rights to\n+grant the rights conveyed by this License.\n+\n+3.3. Required Notices.\n+\n+You must include a notice in each of Your Modifications\n+that identifies You as the Contributor of the Modification.\n+You may not remove or alter any copyright, patent or\n+trademark notices contained within the Covered Software, or\n+any notices of licensing or any descriptive text giving\n+attribution to any Contributor or the Initial Developer.\n+\n+3.4. Application of Additional Terms.\n+\n+You may not offer or impose any terms on any Covered\n+Software in Source Code form that alters or restricts the\n+applicable version of this License or the recipients'\n+rights hereunder. You may choose to offer, and to charge a\n+fee for, warranty, support, indemnity or liability\n+obligations to one or more recipients of Covered Software.\n+However, you may do so only on Your own behalf, and not on\n+behalf of the Initial Developer or any Contributor. You\n+must make it absolutely clear that any such warranty,\n+support, indemnity or liability obligation is offered by\n+You alone, and You hereby agree to indemnify the Initial\n+Developer and every Contributor for any liability incurred\n+by the Initial Developer or such Contributor as a result of\n+warranty, support, indemnity or liability terms You offer.\n+\n+3.5. Distribution of Executable Versions.\n+\n+You may distribute the Executable form of the Covered\n+Software under the terms of this License or under the terms\n+of a license of Your choice, which may contain terms\n+different from this License, provided that You are in\n+compliance with the terms of this License and that the\n+license for the Executable form does not attempt to limit\n+or alter the recipient's rights in the Source Code form\n+from the rights set forth in this License. If You\n+distribute the Covered Software in Executable form under a\n+different license, You must make it absolutely clear that\n+any terms which differ from this License are offered by You\n+alone, not by the Initial Developer or Contributor. You\n+hereby agree to indemnify the Initial Developer and every\n+Contributor for any liability incurred by the Initial\n+Developer or such Contributor as a result of any such terms\n+You offer.\n+\n+3.6. Larger Works.\n+\n+You may create a Larger Work by combining Covered Software\n+with other code not governed by the terms of this License\n+and distribute the Larger Work as a single product. In such\n+a case, You must make sure the requirements of this License\n+are fulfilled for the Covered Software.\n+\n+4. Versions of the License.\n+\n+4.1. New Versions.\n+\n+Sun Microsystems, Inc. is the initial license steward and\n+may publish revised and/or new versions of this License\n+from time to time. Each version will be given a\n+distinguishing version number. Except as provided in\n+Section 4.3, no one other than the license steward has the\n+right to modify this License.\n+\n+4.2. Effect of New Versions.\n+\n+You may always continue to use, distribute or otherwise\n+make the Covered Software available under the terms of the\n+version of the License under which You originally received\n+the Covered Software. If the Initial Developer includes a\n+notice in the Original Software prohibiting it from being\n+distributed or otherwise made available under any\n+subsequent version of the License, You must distribute and\n+make the Covered Software available under the terms of the\n+version of the License under which You originally received\n+the Covered Software. Otherwise, You may also choose to\n+use, distribute or otherwise make the Covered Software\n+available under the terms of any subsequent version of the\n+License published by the license steward.\n+\n+4.3. Modified Versions.\n+\n+When You are an Initial Developer and You want to create a\n+new license for Your Original Software, You may create and\n+use a modified version of this License if You: (a) rename\n+the license and remove any references to the name of the\n+license steward (except to note that the license differs\n+from this License); and (b) otherwise make it clear that\n+the license contains terms which differ from this License.\n+\n+5. DISCLAIMER OF WARRANTY.\n+\n+COVERED SOFTWARE IS PROVIDED UNDER THIS LICENSE ON AN \"AS IS\"\n+BASIS, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,\n+INCLUDING, WITHOUT LIMITATION, WARRANTIES THAT THE COVERED\n+SOFTWARE IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR\n+PURPOSE OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND\n+PERFORMANCE OF THE COVERED SOFTWARE IS WITH YOU. SHOULD ANY\n+COVERED SOFTWARE PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT THE\n+INITIAL DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF\n+ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF\n+WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF\n+ANY COVERED SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS\n+DISCLAIMER.\n+\n+6. TERMINATION.\n+\n+6.1. This License and the rights granted hereunder will\n+terminate automatically if You fail to comply with terms\n+herein and fail to cure such breach within 30 days of\n+becoming aware of the breach. Provisions which, by their\n+nature, must remain in effect beyond the termination of\n+this License shall survive.\n+\n+6.2. If You assert a patent infringement claim (excluding\n+declaratory judgment actions) against Initial Developer or\n+a Contributor (the Initial Developer or Contributor against\n+whom You assert such claim is referred to as \"Participant\")\n+alleging that the Participant Software (meaning the\n+Contributor Version where the Participant is a Contributor\n+or the Original Software where the Participant is the\n+Initial Developer) directly or indirectly infringes any\n+patent, then any and all rights granted directly or\n+indirectly to You by such Participant, the Initial\n+Developer (if the Initial Developer is not the Participant)\n+and all Contributors under Sections 2.1 and/or 2.2 of this\n+License shall, upon 60 days notice from Participant\n+terminate prospectively and automatically at the expiration\n+of such 60 day notice period, unless if within such 60 day\n+period You withdraw Your claim with respect to the\n+Participant Software against such Participant either\n+unilaterally or pursuant to a written agreement with\n+Participant.\n+\n+6.3. In the event of termination under Sections 6.1 or 6.2\n+above, all end user licenses that have been validly granted\n+by You or any distributor hereunder prior to termination\n+(excluding licenses granted to You by any distributor)\n+shall survive termination.\n+\n+7. LIMITATION OF LIABILITY.\n+\n+UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER TORT\n+(INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL YOU, THE\n+INITIAL DEVELOPER, ANY OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF\n+COVERED SOFTWARE, OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE\n+LIABLE TO ANY PERSON FOR ANY INDIRECT, SPECIAL, INCIDENTAL, OR\n+CONSEQUENTIAL DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT\n+LIMITATION, DAMAGES FOR LOST PROFITS, LOSS OF GOODWILL, WORK\n+STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER\n+COMMERCIAL DAMAGES OR LOSSES, EVEN IF SUCH PARTY SHALL HAVE BEEN\n+INFORMED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION OF\n+LIABILITY SHALL NOT APPLY TO LIABILITY FOR DEATH OR PERSONAL\n+INJURY RESULTING FROM SUCH PARTY'S NEGLIGENCE TO THE EXTENT\n+APPLICABLE LAW PROHIBITS SUCH LIMITATION. SOME JURISDICTIONS DO\n+NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR\n+CONSEQUENTIAL DAMAGES, SO THIS EXCLUSION AND LIMITATION MAY NOT\n+APPLY TO YOU.\n+\n+8. U.S. GOVERNMENT END USERS.\n+\n+The Covered Software is a \"commercial item,\" as that term is\n+defined in 48 C.F.R. 2.101 (Oct. 1995), consisting of \"commercial\n+computer software\" (as that term is defined at 48 C.F.R. ?\n+252.227-7014(a)(1)) and \"commercial computer software\n+documentation\" as such terms are used in 48 C.F.R. 12.212 (Sept.\n+1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1\n+through 227.7202-4 (June 1995), all U.S. Government End Users\n+acquire Covered Software with only those rights set forth herein.\n+This U.S. Government Rights clause is in lieu of, and supersedes,\n+any other FAR, DFAR, or other clause or provision that addresses\n+Government rights in computer software under this License.\n+\n+9. MISCELLANEOUS.\n+\n+This License represents the complete agreement concerning subject\n+matter hereof. If any provision of this License is held to be\n+unenforceable, such provision shall be reformed only to the\n+extent necessary to make it enforceable. This License shall be\n+governed by the law of the jurisdiction specified in a notice\n+contained within the Original Software (except to the extent\n+applicable law, if any, provides otherwise), excluding such\n+jurisdiction's conflict-of-law provisions. Any litigation\n+relating to this License shall be subject to the jurisdiction of\n+the courts located in the jurisdiction and venue specified in a\n+notice contained within the Original Software, with the losing\n+party responsible for costs, including, without limitation, court\n+costs and reasonable attorneys' fees and expenses. The\n+application of the United Nations Convention on Contracts for the\n+International Sale of Goods is expressly excluded. Any law or\n+regulation which provides that the language of a contract shall\n+be construed against the drafter shall not apply to this License.\n+You agree that You alone are responsible for compliance with the\n+United States export administration regulations (and the export\n+control laws and regulation of any other countries) when You use,\n+distribute or otherwise make available any Covered Software.\n+\n+10. RESPONSIBILITY FOR CLAIMS.\n+\n+As between Initial Developer and the Contributors, each party is\n+responsible for claims and damages arising, directly or\n+indirectly, out of its utilization of rights under this License\n+and You agree to work with Initial Developer and Contributors to\n+distribute such responsibility on an equitable basis. Nothing\n+herein is intended or shall be deemed to constitute any admission\n+of liability.\n+============================================================\n+el-api, istack\n+\n+The GNU General Public License (GPL) Version 2, June 1991\n+\n+Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n+59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n+\n+Everyone is permitted to copy and distribute verbatim copies\n+of this license document, but changing it is not allowed.\n+\n+Preamble\n+\n+The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Library General Public License instead.) You can apply it to your programs, too.\n+\n+When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.\n+\n+To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.\n+\n+For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.\n+\n+We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.\n+\n+Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.\n+\n+Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.\n+\n+The precise terms and conditions for copying, distribution and modification follow.\n+\n+TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n+\n+0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\".\n+\n+Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.\n+\n+1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.\n+\n+You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n+\n+2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n+\n+    a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change.\n+\n+    b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.\n+\n+    c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)\n+\n+These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n+\n+Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.\n+\n+In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n+\n+3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:\n+\n+    a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,\n+\n+    b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,\n+\n+    c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.)\n+\n+The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n+\n+If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.\n+\n+4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n+\n+5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.\n+\n+6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.\n+\n+7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.\n+\n+If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.\n+\n+It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n+\n+This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n+\n+8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n+\n+9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n+\n+Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.\n+\n+10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n+\n+NO WARRANTY\n+\n+11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n+\n+12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n+\n+END OF TERMS AND CONDITIONS\n+\n+How to Apply These Terms to Your New Programs\n+\n+If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.\n+\n+To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n+\n+    One line to give the program's name and a brief idea of what it does.\n+    Copyright (C) <year> <name of author>\n+\n+    This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n+\n+    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+    You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n+\n+Also add information on how to contact you by electronic and paper mail.\n+\n+If the program is interactive, make it output a short notice like this when it starts in an interactive mode:\n+\n+    Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details.\n+\n+The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program.\n+\n+You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names:\n+\n+    Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.\n+\n+    signature of Ty Coon, 1 April 1989\n+    Ty Coon, President of Vice\n+\n+This General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Library General Public License instead of this License.\n+\n+\"CLASSPATH\" EXCEPTION TO THE GPL VERSION 2\n+\n+Certain source files distributed by Oracle are subject to the following clarification and special exception to the GPL Version 2, but only where Oracle has expressly included in the particular source file's header the words \"Oracle designates this particular file as subject to the \"Classpath\" exception as provided by Oracle in the License file that accompanied this code.\"\n+\n+Linking this library statically or dynamically with other modules is making a combined work based on this library.  Thus, the terms and conditions of the GNU General Public License Version 2 cover the whole combination.\n+\n+As a special exception, the copyright holders of this library give you permission to link this library with independent modules to produce an executable, regardless of the license terms of these independent modules, and to copy and distribute the resulting executable under terms of your choice, provided that you also meet, for each linked independent module, the terms and conditions of the license of that module.  An independent module is a module which is not derived from or based on this library.  If you modify this library, you may extend this exception to your version of the library, but you are not obligated to do so.  If you do not wish to do so, delete this exception statement from your version.\n+\n+",
                "additions": 1196,
                "raw_url": "https://github.com/apache/tomee/raw/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/utils/openejb-provisionning/src/main#legal/LICENSE",
                "status": "added",
                "changes": 1196,
                "deletions": 0,
                "sha": "b77986a23c0c2e9ef7a12ebb6d6044e67a29e9b7",
                "blob_url": "https://github.com/apache/tomee/blob/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/utils/openejb-provisionning/src/main#legal/LICENSE",
                "filename": "utils/openejb-provisionning/src/main#legal/LICENSE",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/utils/openejb-provisionning/src/main#legal/LICENSE?ref=f0c5ecc62d7deef5b879a58fdcc64f3c102f4213"
            }
        ],
        "bug_id": "tomee_21",
        "parent": "https://github.com/apache/tomee/commit/ba36564badd07fbce0c2ca51864774de28717be5",
        "message": "TOMEE-1787 EJBExceptionMapper can lead to NPE",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/d941fc186b1aad07a43bc6e3abb8170da0a2b972",
        "file": [
            {
                "patch": "@@ -328,7 +328,9 @@ public void clear(final Object key) {\n             logger.debug(\"Clearing:'\" + ctx + \"'\");\n         }\n         contextByClassLoader.remove(key);\n-        ctx.clear();\n+        if (ctx != null) {\n+            ctx.clear();\n+        }\n     }\n \n     @Override",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/d941fc186b1aad07a43bc6e3abb8170da0a2b972/container/openejb-core/src/main/java/org/apache/openejb/cdi/ThreadSingletonServiceImpl.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "ed48b9ea812a2417f585e2c25d42c75385fb4cf4",
                "blob_url": "https://github.com/apache/tomee/blob/d941fc186b1aad07a43bc6e3abb8170da0a2b972/container/openejb-core/src/main/java/org/apache/openejb/cdi/ThreadSingletonServiceImpl.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/ThreadSingletonServiceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/ThreadSingletonServiceImpl.java?ref=d941fc186b1aad07a43bc6e3abb8170da0a2b972"
            }
        ],
        "bug_id": "tomee_22",
        "parent": "https://github.com/apache/tomee/commit/85ead5e4706c5493717c906a1f46b82b03a2f7d0",
        "message": "avoid NPE",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/5182e72624cbbd9814db46f6af9403d602aeea60",
        "file": [
            {
                "patch": "@@ -131,6 +131,9 @@ public void close() {\n     }\n \n     private static Message wrap(final Message message) {\n+        if (message == null) {\n+            return null;\n+        }\n         final Message wrapped = JMS2.wrap(message);\n         try {\n             wrapped.setJMSDeliveryTime(System.currentTimeMillis());",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/5182e72624cbbd9814db46f6af9403d602aeea60/container/openejb-core/src/main/java/org/apache/openejb/resource/activemq/jms2/JMSConsumerImpl.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "dc4fbcf76683255a3aee80201f7dc2cd2099f86f",
                "blob_url": "https://github.com/apache/tomee/blob/5182e72624cbbd9814db46f6af9403d602aeea60/container/openejb-core/src/main/java/org/apache/openejb/resource/activemq/jms2/JMSConsumerImpl.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/resource/activemq/jms2/JMSConsumerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/resource/activemq/jms2/JMSConsumerImpl.java?ref=5182e72624cbbd9814db46f6af9403d602aeea60"
            },
            {
                "patch": "@@ -134,6 +134,9 @@ public void run() {\n                 try {\n                     ready.countDown();\n                     assertEquals(text, context.createConsumer(destination3).receiveBody(String.class, TimeUnit.MINUTES.toMillis(1)));\n+\n+                    // ensure we dont do a NPE if there is nothing to read\n+                    assertNull(context.createConsumer(destination3).receiveBody(String.class, 100));\n                 } catch (final Throwable t) {\n                     error.set(t);\n                 } finally {",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/5182e72624cbbd9814db46f6af9403d602aeea60/container/openejb-core/src/test/java/org/apache/openejb/activemq/JMS2AMQTest.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "f89526f53e739d553fb3b41db1c9a5182244a087",
                "blob_url": "https://github.com/apache/tomee/blob/5182e72624cbbd9814db46f6af9403d602aeea60/container/openejb-core/src/test/java/org/apache/openejb/activemq/JMS2AMQTest.java",
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/activemq/JMS2AMQTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/activemq/JMS2AMQTest.java?ref=5182e72624cbbd9814db46f6af9403d602aeea60"
            }
        ],
        "bug_id": "tomee_23",
        "parent": "https://github.com/apache/tomee/commit/51c63c501175034cdd27c10038630b2f08357b52",
        "message": "TOMEE-1983 avoid npe from jmsconsumer when no message is retrieved",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/10406df27163b305a2577b2c844b0c5d6dccecf4",
        "file": [
            {
                "patch": "@@ -127,25 +127,29 @@ public void mergeOWBAndOpenEJBInfo() {\n \n         final Collection<Interceptor<?>> postConstructInterceptors = Collection.class.cast(Reflections.get(injectionTarget, \"postConstructInterceptors\"));\n         final Collection<Interceptor<?>> preDestroyInterceptors = Collection.class.cast(Reflections.get(injectionTarget, \"preDestroyInterceptors\"));\n-        for (final Interceptor<?> pc : postConstructInterceptors) {\n-            if (isEjbInterceptor(pc)) {\n-                continue;\n-            }\n+        if (postConstructInterceptors != null) {\n+            for (final Interceptor<?> pc : postConstructInterceptors) {\n+                if (isEjbInterceptor(pc)) {\n+                    continue;\n+                }\n \n-            final InterceptorData interceptorData = createInterceptorData(pc);\n-            instanceScopedInterceptors.add(interceptorData);\n-            cdiInterceptors.add(interceptorData);\n-        }\n-        for (final Interceptor<?> pd : preDestroyInterceptors) {\n-            if (isEjbInterceptor(pd)) {\n-                continue;\n+                final InterceptorData interceptorData = createInterceptorData(pc);\n+                instanceScopedInterceptors.add(interceptorData);\n+                cdiInterceptors.add(interceptorData);\n             }\n-            if (postConstructInterceptors.contains(pd)) {\n-                continue;\n+        }\n+        if (preDestroyInterceptors != null) {\n+            for (final Interceptor<?> pd : preDestroyInterceptors) {\n+                if (isEjbInterceptor(pd)) {\n+                    continue;\n+                }\n+                if (postConstructInterceptors.contains(pd)) {\n+                    continue;\n+                }\n+                final InterceptorData interceptorData = createInterceptorData(pd);\n+                instanceScopedInterceptors.add(interceptorData);\n+                cdiInterceptors.add(interceptorData);\n             }\n-            final InterceptorData interceptorData = createInterceptorData(pd);\n-            instanceScopedInterceptors.add(interceptorData);\n-            cdiInterceptors.add(interceptorData);\n         }\n \n         for (final Map.Entry<Method, InterceptorResolutionService.BusinessMethodInterceptorInfo> entry : info.getBusinessMethodsInfo().entrySet()) {",
                "additions": 20,
                "raw_url": "https://github.com/apache/tomee/raw/10406df27163b305a2577b2c844b0c5d6dccecf4/container/openejb-core/src/main/java/org/apache/openejb/BeanContext.java",
                "status": "modified",
                "changes": 36,
                "deletions": 16,
                "sha": "d21b20fe25810111965c36f64ce86dd75d80c957",
                "blob_url": "https://github.com/apache/tomee/blob/10406df27163b305a2577b2c844b0c5d6dccecf4/container/openejb-core/src/main/java/org/apache/openejb/BeanContext.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/BeanContext.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/BeanContext.java?ref=10406df27163b305a2577b2c844b0c5d6dccecf4"
            }
        ],
        "bug_id": "tomee_24",
        "parent": "https://github.com/apache/tomee/commit/ee3786ce1d0d744fa3c5a5efc3270a357f25f620",
        "message": "avoid NPE",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/68f2e4b5ae4856f862ba828ac44d73e74c0d6601",
        "file": [
            {
                "patch": "@@ -34,8 +34,8 @@\n     private final Filter delegateSkip;\n \n     public ContainerClassesFilter(final Properties configuration) {\n-        final String forcedStr = configuration.getProperty(\"openejb.container.additional.exclude\", null);\n-        final String skippedStr = configuration.getProperty(\"openejb.container.additional.include\", null);\n+        final String forcedStr = configuration == null ? null : configuration.getProperty(\"openejb.container.additional.exclude\", null);\n+        final String skippedStr = configuration == null ? null : configuration.getProperty(\"openejb.container.additional.include\", null);\n         forced = forcedStr == null ? EMPTY_ARRAY : forcedStr.split(\" *, *\");\n         skipped = skippedStr == null ? EMPTY_ARRAY : skippedStr.split(\" *, *\");\n ",
                "additions": 2,
                "raw_url": "https://github.com/apache/tomee/raw/68f2e4b5ae4856f862ba828ac44d73e74c0d6601/container/openejb-core/src/main/java/org/apache/openejb/util/ContainerClassesFilter.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "a95a70085363423888b493cf28826f13773dc38a",
                "blob_url": "https://github.com/apache/tomee/blob/68f2e4b5ae4856f862ba828ac44d73e74c0d6601/container/openejb-core/src/main/java/org/apache/openejb/util/ContainerClassesFilter.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/util/ContainerClassesFilter.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/util/ContainerClassesFilter.java?ref=68f2e4b5ae4856f862ba828ac44d73e74c0d6601"
            }
        ],
        "bug_id": "tomee_25",
        "parent": "https://github.com/apache/tomee/commit/936430684fb314582e09a8a479510f90929280f8",
        "message": "avoiding NPE",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/fe385b80e555e7fb71cdb2a3d035a788555e81a8",
        "file": [
            {
                "patch": "@@ -18,6 +18,7 @@\n package org.apache.tomee.arquillian.remote;\n \n import org.apache.openejb.cdi.ThreadSingletonServiceImpl;\n+import org.apache.webbeans.config.WebBeansContext;\n import org.jboss.arquillian.core.api.InstanceProducer;\n import org.jboss.arquillian.core.api.annotation.Inject;\n import org.jboss.arquillian.core.api.annotation.Observes;\n@@ -39,7 +40,10 @@\n     private InstanceProducer<Context> context;\n \n     public void beforeSuite(@Observes final BeforeSuite event) {\n-        beanManager.set(ThreadSingletonServiceImpl.get(Thread.currentThread().getContextClassLoader()).getBeanManagerImpl());\n+        final WebBeansContext webBeansContext = ThreadSingletonServiceImpl.get(Thread.currentThread().getContextClassLoader());\n+        if (webBeansContext != null) {\n+            beanManager.set(webBeansContext.getBeanManagerImpl());\n+        }\n         try {\n             context.set(new InitialContext());\n         } catch (final NamingException e) {",
                "additions": 5,
                "raw_url": "https://github.com/apache/tomee/raw/fe385b80e555e7fb71cdb2a3d035a788555e81a8/arquillian/arquillian-tomee-remote/src/main/java/org/apache/tomee/arquillian/remote/RemoteTomEEObserver.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "3aec416a5837ea57cb16a9568bd18f96e70eda76",
                "blob_url": "https://github.com/apache/tomee/blob/fe385b80e555e7fb71cdb2a3d035a788555e81a8/arquillian/arquillian-tomee-remote/src/main/java/org/apache/tomee/arquillian/remote/RemoteTomEEObserver.java",
                "filename": "arquillian/arquillian-tomee-remote/src/main/java/org/apache/tomee/arquillian/remote/RemoteTomEEObserver.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-remote/src/main/java/org/apache/tomee/arquillian/remote/RemoteTomEEObserver.java?ref=fe385b80e555e7fb71cdb2a3d035a788555e81a8"
            }
        ],
        "bug_id": "tomee_26",
        "parent": "https://github.com/apache/tomee/commit/b1646d20dfcf093b93756564042f5a50e5f22425",
        "message": "one more npe check",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/f5525e224502903cc47e2046465dc29fe7cc0e6d",
        "file": [
            {
                "patch": "@@ -153,14 +153,14 @@ private void preprocessProperties(Properties properties) {\n \n     private void configureEmbedded() {\n         URL resource = ConfUtils.getResource(EMBEDDED_PROPERTIES_FILE);\n-        Properties properties = asProperies(resource);\n-\n-        applyOverrides(properties);\n+        if (resource == null) {\n+        \tSystem.out.println(\"FATAL ERROR WHILE CONFIGURING LOGGING!!!. MISSING embedded.logging.properties FILE \");\n \n-        if (resource != null) {\n-            PropertyConfigurator.configure(properties);\n         } else {\n-            System.out.println(\"FATAL ERROR WHILE CONFIGURING LOGGING!!!. MISSING embedded.logging.properties FILE \");\n+            Properties properties = asProperies(resource);\n+            applyOverrides(properties);\n+            PropertyConfigurator.configure(properties);\n+\n         }\n     }\n ",
                "additions": 6,
                "raw_url": "https://github.com/apache/tomee/raw/f5525e224502903cc47e2046465dc29fe7cc0e6d/container/openejb-core/src/main/java/org/apache/openejb/util/Log4jLogStreamFactory.java",
                "status": "modified",
                "changes": 12,
                "deletions": 6,
                "sha": "bed458c076056a3bceb2f20e8a16633e56bc0cb6",
                "blob_url": "https://github.com/apache/tomee/blob/f5525e224502903cc47e2046465dc29fe7cc0e6d/container/openejb-core/src/main/java/org/apache/openejb/util/Log4jLogStreamFactory.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/util/Log4jLogStreamFactory.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/util/Log4jLogStreamFactory.java?ref=f5525e224502903cc47e2046465dc29fe7cc0e6d"
            }
        ],
        "bug_id": "tomee_27",
        "parent": "https://github.com/apache/tomee/commit/2e4bd80785abeb2af37a2ca62b3cc326d7f6f9d8",
        "message": "avoid NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@1042904 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/8ea00ebd46f30209bb3195aa85ae3aacf5a60074",
        "file": [
            {
                "patch": "@@ -446,7 +446,7 @@ private void initSessionContext(final HttpSession session) {\n \n         final String sessionId = session.getId();\n         //Current context\n-        SessionContext currentSessionContext = sessionCtxManager.getSessionContextWithSessionId(sessionId);\n+        SessionContext currentSessionContext = sessionId == null ? null : sessionCtxManager.getSessionContextWithSessionId(sessionId);\n \n         //No current context\n         boolean fire = false;",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/8ea00ebd46f30209bb3195aa85ae3aacf5a60074/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "5e48183297ab19690670669ce12a6696bd110099",
                "blob_url": "https://github.com/apache/tomee/blob/8ea00ebd46f30209bb3195aa85ae3aacf5a60074/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java?ref=8ea00ebd46f30209bb3195aa85ae3aacf5a60074"
            },
            {
                "patch": "@@ -26,7 +26,7 @@\n     -Dopenejb.deploymentId.format={appId}/{ejbJarId}/{ejbName}\n     -->\n     <classes>\n-      <class name=\"org.jboss.cdi.tck.tests.context.conversation.filter.ConversationFilterTest\" />\n+      <class name=\"org.jboss.cdi.tck.tests.context.conversation.LongRunningConversationPropagatedByFacesContextTest\" />\n     </classes>\n   </test>\n </suite>",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/8ea00ebd46f30209bb3195aa85ae3aacf5a60074/tck/cdi-embedded/src/test/resources/failing.xml",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "bad9ab44caa41e2d07858d104dcf9491d5aa9ae7",
                "blob_url": "https://github.com/apache/tomee/blob/8ea00ebd46f30209bb3195aa85ae3aacf5a60074/tck/cdi-embedded/src/test/resources/failing.xml",
                "filename": "tck/cdi-embedded/src/test/resources/failing.xml",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tck/cdi-embedded/src/test/resources/failing.xml?ref=8ea00ebd46f30209bb3195aa85ae3aacf5a60074"
            }
        ],
        "bug_id": "tomee_28",
        "parent": "https://github.com/apache/tomee/commit/f112bdd7b74297d61175dc640c1f8119663a49b2",
        "message": "avoid NPE",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/19f7b1164a3bbed9acdebe168035076d7ec2f948",
        "file": [
            {
                "patch": "@@ -243,6 +243,10 @@ public boolean isCallerInRole(final String role) {\n         }\n \n         final ThreadContext threadContext = ThreadContext.getThreadContext();\n+        if (threadContext == null) {\n+            return false;\n+        }\n+\n         final SecurityContext securityContext = threadContext.get(SecurityContext.class);\n \n         if (\"**\".equals(role)) {",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/19f7b1164a3bbed9acdebe168035076d7ec2f948/container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "cd001ed569e7d93ec6abe7a1dc505bf5323a61fd",
                "blob_url": "https://github.com/apache/tomee/blob/19f7b1164a3bbed9acdebe168035076d7ec2f948/container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java?ref=19f7b1164a3bbed9acdebe168035076d7ec2f948"
            }
        ],
        "bug_id": "tomee_29",
        "parent": "https://github.com/apache/tomee/commit/9670c840f265adfb6e6a1dbbf6d31ecf4cc48206",
        "message": "avoid NPE",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/7e20d1628cac43004d2f2d2f55137dfeea2d90a3",
        "file": [
            {
                "patch": "@@ -54,6 +54,13 @@ public boolean isSecure() {\n     }\n \n     public boolean isUserInRole(final String role) {\n-        return service().isCallerInRole(role) || get().isUserInRole(role);\n+        if (service().isCallerInRole(role)) {\n+            return true;\n+        }\n+        final SecurityContext sc = get();\n+        if (sc != null) {\n+            return sc.isUserInRole(role);\n+        }\n+        return false;\n     }\n }",
                "additions": 8,
                "raw_url": "https://github.com/apache/tomee/raw/7e20d1628cac43004d2f2d2f55137dfeea2d90a3/container/openejb-core/src/main/java/org/apache/openejb/rest/ThreadLocalSecurityContext.java",
                "status": "modified",
                "changes": 9,
                "deletions": 1,
                "sha": "f731bfb98987e0a47bfc8d7adecaaa323b89dc48",
                "blob_url": "https://github.com/apache/tomee/blob/7e20d1628cac43004d2f2d2f55137dfeea2d90a3/container/openejb-core/src/main/java/org/apache/openejb/rest/ThreadLocalSecurityContext.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/rest/ThreadLocalSecurityContext.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/rest/ThreadLocalSecurityContext.java?ref=7e20d1628cac43004d2f2d2f55137dfeea2d90a3"
            }
        ],
        "bug_id": "tomee_30",
        "parent": "https://github.com/apache/tomee/commit/c96e25767c271241c3da981c9ef4f356a6f4e35c",
        "message": "avoid NPE",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/af5b154c64f22ddcdd17c9a64434e630a9db6363",
        "file": [
            {
                "patch": "@@ -267,6 +267,10 @@ public boolean isCallerInRole(final String role) {\n     @Override\n     public Principal getCallerPrincipal() {\n         final ThreadContext threadContext = ThreadContext.getThreadContext();\n+        if (threadContext == null) {\n+            return null;\n+        }\n+\n         final SecurityContext securityContext = threadContext.get(SecurityContext.class);\n         final Set<Principal> principals = securityContext.subject.getPrincipals();\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/af5b154c64f22ddcdd17c9a64434e630a9db6363/container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "2969a92d6eb1380f941c842afa7c7b2d4205e349",
                "blob_url": "https://github.com/apache/tomee/blob/af5b154c64f22ddcdd17c9a64434e630a9db6363/container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java?ref=af5b154c64f22ddcdd17c9a64434e630a9db6363"
            }
        ],
        "bug_id": "tomee_31",
        "parent": "https://github.com/apache/tomee/commit/3222d017ebf3034f0a8f68501f94c26a5a9e35ea",
        "message": "avoid NPE",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/014e31da40781ad17d85ee0c19d02ef7da45917c",
        "file": [
            {
                "patch": "@@ -1,63 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openejb.resolver.maven;\n-\n-import org.apache.openejb.util.reflection.Reflections;\n-\n-import java.io.File;\n-\n-public class ShrinkwrapBridge {\n-    private static final Class<?>[] NO_PARAM = new Class[0];\n-    private static final Class<?>[] STRING_PARAM = new Class[]{String.class};\n-    private static final Object[] NO_ARG = new Object[0];\n-\n-    public File resolve(final String rawLocation) throws Exception {\n-        final Class<?> mvn = Thread.currentThread().getContextClassLoader().loadClass(\"org.jboss.shrinkwrap.resolver.api.maven.Maven\");\n-        /*\n-        return Maven.configureResolver().workOffline()\n-            .resolve(toSwFormat(rawLocation))\n-            .withoutTransitivity()\n-            .asSingleFile()\n-            .getAbsolutePath()\n-         */\n-        return File.class.cast(Reflections.invokeByReflection(\n-            Reflections.invokeByReflection(\n-                Reflections.invokeByReflection(\n-                    Reflections.invokeByReflection(\n-                        mvn.getMethod(\"configureResolver\").invoke(null),\n-                        \"workOffline\", NO_PARAM, NO_ARG),\n-                    \"resolve\", STRING_PARAM, new Object[]{toSwFormat(rawLocation)}),\n-                \"withoutTransitivity\", NO_PARAM, NO_ARG),\n-            \"asSingleFile\", NO_PARAM, NO_ARG));\n-    }\n-\n-    private String toSwFormat(final String rawLocation) {\n-        final String[] segments = rawLocation.split(\":\");\n-        if (!\"mvn\".equals(segments[0])) {\n-            throw new IllegalArgumentException(\"Only mvn prefix is supported: \" + rawLocation);\n-        }\n-\n-        if (segments.length == 5) {\n-            return segments[1] + ':' + segments[2] + ':' + segments[4] + ':' + segments[3];\n-        } else if (segments.length == 4) {\n-            return segments[1] + ':' + segments[2] + ':' + segments[3];\n-        } else if (segments.length == 3) {\n-            return segments[1] + ':' + segments[2];\n-        }\n-        throw new IllegalArgumentException(\"Unknown mvn format: \" + rawLocation);\n-    }\n-}",
                "additions": 0,
                "raw_url": "https://github.com/apache/tomee/raw/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/utils/openejb-provisionning/src/main#java/org/apache/openejb/resolver/maven/ShrinkwrapBridge.java",
                "status": "removed",
                "changes": 63,
                "deletions": 63,
                "sha": "9e98f5669be62c7af0ece4bfa9f1d597c25c8ff1",
                "blob_url": "https://github.com/apache/tomee/blob/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/utils/openejb-provisionning/src/main#java/org/apache/openejb/resolver/maven/ShrinkwrapBridge.java",
                "filename": "utils/openejb-provisionning/src/main#java/org/apache/openejb/resolver/maven/ShrinkwrapBridge.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/utils/openejb-provisionning/src/main#java/org/apache/openejb/resolver/maven/ShrinkwrapBridge.java?ref=f0c5ecc62d7deef5b879a58fdcc64f3c102f4213"
            },
            {
                "patch": "@@ -1,1196 +0,0 @@\n-\n-                                 Apache License\n-                           Version 2.0, January 2004\n-                        http://www.apache.org/licenses/\n-\n-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n-\n-   1. Definitions.\n-\n-      \"License\" shall mean the terms and conditions for use, reproduction,\n-      and distribution as defined by Sections 1 through 9 of this document.\n-\n-      \"Licensor\" shall mean the copyright owner or entity authorized by\n-      the copyright owner that is granting the License.\n-\n-      \"Legal Entity\" shall mean the union of the acting entity and all\n-      other entities that control, are controlled by, or are under common\n-      control with that entity. For the purposes of this definition,\n-      \"control\" means (i) the power, direct or indirect, to cause the\n-      direction or management of such entity, whether by contract or\n-      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n-      outstanding shares, or (iii) beneficial ownership of such entity.\n-\n-      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n-      exercising permissions granted by this License.\n-\n-      \"Source\" form shall mean the preferred form for making modifications,\n-      including but not limited to software source code, documentation\n-      source, and configuration files.\n-\n-      \"Object\" form shall mean any form resulting from mechanical\n-      transformation or translation of a Source form, including but\n-      not limited to compiled object code, generated documentation,\n-      and conversions to other media types.\n-\n-      \"Work\" shall mean the work of authorship, whether in Source or\n-      Object form, made available under the License, as indicated by a\n-      copyright notice that is included in or attached to the work\n-      (an example is provided in the Appendix below).\n-\n-      \"Derivative Works\" shall mean any work, whether in Source or Object\n-      form, that is based on (or derived from) the Work and for which the\n-      editorial revisions, annotations, elaborations, or other modifications\n-      represent, as a whole, an original work of authorship. For the purposes\n-      of this License, Derivative Works shall not include works that remain\n-      separable from, or merely link (or bind by name) to the interfaces of,\n-      the Work and Derivative Works thereof.\n-\n-      \"Contribution\" shall mean any work of authorship, including\n-      the original version of the Work and any modifications or additions\n-      to that Work or Derivative Works thereof, that is intentionally\n-      submitted to Licensor for inclusion in the Work by the copyright owner\n-      or by an individual or Legal Entity authorized to submit on behalf of\n-      the copyright owner. For the purposes of this definition, \"submitted\"\n-      means any form of electronic, verbal, or written communication sent\n-      to the Licensor or its representatives, including but not limited to\n-      communication on electronic mailing lists, source code control systems,\n-      and issue tracking systems that are managed by, or on behalf of, the\n-      Licensor for the purpose of discussing and improving the Work, but\n-      excluding communication that is conspicuously marked or otherwise\n-      designated in writing by the copyright owner as \"Not a Contribution.\"\n-\n-      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n-      on behalf of whom a Contribution has been received by Licensor and\n-      subsequently incorporated within the Work.\n-\n-   2. Grant of Copyright License. Subject to the terms and conditions of\n-      this License, each Contributor hereby grants to You a perpetual,\n-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n-      copyright license to reproduce, prepare Derivative Works of,\n-      publicly display, publicly perform, sublicense, and distribute the\n-      Work and such Derivative Works in Source or Object form.\n-\n-   3. Grant of Patent License. Subject to the terms and conditions of\n-      this License, each Contributor hereby grants to You a perpetual,\n-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n-      (except as stated in this section) patent license to make, have made,\n-      use, offer to sell, sell, import, and otherwise transfer the Work,\n-      where such license applies only to those patent claims licensable\n-      by such Contributor that are necessarily infringed by their\n-      Contribution(s) alone or by combination of their Contribution(s)\n-      with the Work to which such Contribution(s) was submitted. If You\n-      institute patent litigation against any entity (including a\n-      cross-claim or counterclaim in a lawsuit) alleging that the Work\n-      or a Contribution incorporated within the Work constitutes direct\n-      or contributory patent infringement, then any patent licenses\n-      granted to You under this License for that Work shall terminate\n-      as of the date such litigation is filed.\n-\n-   4. Redistribution. You may reproduce and distribute copies of the\n-      Work or Derivative Works thereof in any medium, with or without\n-      modifications, and in Source or Object form, provided that You\n-      meet the following conditions:\n-\n-      (a) You must give any other recipients of the Work or\n-          Derivative Works a copy of this License; and\n-\n-      (b) You must cause any modified files to carry prominent notices\n-          stating that You changed the files; and\n-\n-      (c) You must retain, in the Source form of any Derivative Works\n-          that You distribute, all copyright, patent, trademark, and\n-          attribution notices from the Source form of the Work,\n-          excluding those notices that do not pertain to any part of\n-          the Derivative Works; and\n-\n-      (d) If the Work includes a \"NOTICE\" text file as part of its\n-          distribution, then any Derivative Works that You distribute must\n-          include a readable copy of the attribution notices contained\n-          within such NOTICE file, excluding those notices that do not\n-          pertain to any part of the Derivative Works, in at least one\n-          of the following places: within a NOTICE text file distributed\n-          as part of the Derivative Works; within the Source form or\n-          documentation, if provided along with the Derivative Works; or,\n-          within a display generated by the Derivative Works, if and\n-          wherever such third-party notices normally appear. The contents\n-          of the NOTICE file are for informational purposes only and\n-          do not modify the License. You may add Your own attribution\n-          notices within Derivative Works that You distribute, alongside\n-          or as an addendum to the NOTICE text from the Work, provided\n-          that such additional attribution notices cannot be construed\n-          as modifying the License.\n-\n-      You may add Your own copyright statement to Your modifications and\n-      may provide additional or different license terms and conditions\n-      for use, reproduction, or distribution of Your modifications, or\n-      for any such Derivative Works as a whole, provided Your use,\n-      reproduction, and distribution of the Work otherwise complies with\n-      the conditions stated in this License.\n-\n-   5. Submission of Contributions. Unless You explicitly state otherwise,\n-      any Contribution intentionally submitted for inclusion in the Work\n-      by You to the Licensor shall be under the terms and conditions of\n-      this License, without any additional terms or conditions.\n-      Notwithstanding the above, nothing herein shall supersede or modify\n-      the terms of any separate license agreement you may have executed\n-      with Licensor regarding such Contributions.\n-\n-   6. Trademarks. This License does not grant permission to use the trade\n-      names, trademarks, service marks, or product names of the Licensor,\n-      except as required for reasonable and customary use in describing the\n-      origin of the Work and reproducing the content of the NOTICE file.\n-\n-   7. Disclaimer of Warranty. Unless required by applicable law or\n-      agreed to in writing, Licensor provides the Work (and each\n-      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-      implied, including, without limitation, any warranties or conditions\n-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n-      PARTICULAR PURPOSE. You are solely responsible for determining the\n-      appropriateness of using or redistributing the Work and assume any\n-      risks associated with Your exercise of permissions under this License.\n-\n-   8. Limitation of Liability. In no event and under no legal theory,\n-      whether in tort (including negligence), contract, or otherwise,\n-      unless required by applicable law (such as deliberate and grossly\n-      negligent acts) or agreed to in writing, shall any Contributor be\n-      liable to You for damages, including any direct, indirect, special,\n-      incidental, or consequential damages of any character arising as a\n-      result of this License or out of the use or inability to use the\n-      Work (including but not limited to damages for loss of goodwill,\n-      work stoppage, computer failure or malfunction, or any and all\n-      other commercial damages or losses), even if such Contributor\n-      has been advised of the possibility of such damages.\n-\n-   9. Accepting Warranty or Additional Liability. While redistributing\n-      the Work or Derivative Works thereof, You may choose to offer,\n-      and charge a fee for, acceptance of support, warranty, indemnity,\n-      or other liability obligations and/or rights consistent with this\n-      License. However, in accepting such obligations, You may act only\n-      on Your own behalf and on Your sole responsibility, not on behalf\n-      of any other Contributor, and only if You agree to indemnify,\n-      defend, and hold each Contributor harmless for any liability\n-      incurred by, or claims asserted against, such Contributor by reason\n-      of your accepting any such warranty or additional liability.\n-\n-   END OF TERMS AND CONDITIONS\n-\n-   APPENDIX: How to apply the Apache License to your work.\n-\n-      To apply the Apache License to your work, attach the following\n-      boilerplate notice, with the fields enclosed by brackets \"[]\"\n-      replaced with your own identifying information. (Don't include\n-      the brackets!)  The text should be enclosed in the appropriate\n-      comment syntax for the file format. We also recommend that a\n-      file or class name and description of purpose be included on the\n-      same \"printed page\" as the copyright notice for easier\n-      identification within third-party archives.\n-\n-   Copyright [yyyy] [name of copyright owner]\n-\n-   Licensed under the Apache License, Version 2.0 (the \"License\");\n-   you may not use this file except in compliance with the License.\n-   You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n-\n-=========================================================================\n-  - W3C Schemas\n-    License: W3C Software Notice and License\n--------------------------------------------------------------------------\n-\n-W3C\u00a8 SOFTWARE NOTICE AND LICENSE\n-Copyright \u00a9 1994-2014 World Wide Web Consortium, (Massachusetts Institute of\n-Technology, Institut National de Recherche en Informatique et en Automatique,\n-Keio University). All Rights Reserved. http://www.w3.org/Consortium/Legal/\n-\n-This W3C work (including software, documents, or other related items) is\n-being provided by the copyright holders under the following license. By\n-obtaining, using and/or copying this work, you (the licensee) agree that you\n-have read, understood, and will comply with the following terms and\n-conditions:\n-\n-Permission to use, copy, modify, and distribute this software and its\n-documentation, with or without modification,  for any purpose and without\n-fee or royalty is hereby granted, provided that you include the following on\n-ALL copies of the software and documentation or portions thereof, including\n-modifications, that you make:\n-\n-   1. The full text of this NOTICE in a location viewable to users of the\n-         redistributed or derivative work.\n-   2. Any pre-existing intellectual property disclaimers, notices, or terms\n-         and conditions. If none exist, a short notice of the following form\n-         (hypertext is preferred, text is permitted) should be used within\n-         the body of any redistributed or derivative code: \"Copyright \u00a9\n-         [$date-of-software] World Wide Web Consortium, (Massachusetts Institute\n-         of Technology, Institut National de Recherche en Informatique et en\n-         Automatique, Keio University). All Rights Reserved.\n-         http://www.w3.org/Consortium/Legal/\"\n-   3. Notice of any changes or modifications to the W3C files, including the\n-         date changes were made. (We recommend you provide URIs to the location\n-         from which the code is derived.)\n-\n-THIS SOFTWARE AND DOCUMENTATION IS PROVIDED \"AS IS,\" AND COPYRIGHT HOLDERS MAKE\n-NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\n-TO, WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT\n-THE USE OF THE SOFTWARE OR DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY PATENTS,\n-COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.\n-\n-COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR\n-CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR DOCUMENTATION.\n-\n-The name and trademarks of copyright holders may NOT be used in advertising or\n-publicity pertaining to the software without specific, written prior permission.\n-Title to copyright in this software and any associated documentation will at all\n-times remain with copyright holders.\n-\n-\n-=========================================================================\n-  - HSQLDB (http://hsqldb.org/) org.hsqldb:hsqldb:jar:224\n-    License: HSQLDB License  (http://hsqldb.org/web/hsqlLicense.html)\n--------------------------------------------------------------------------\n-\n-For work developed by the HSQL Development Group:\n-\n-Copyright (c) 2001-2014, The HSQL Development Group\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are met:\n-\n-Redistributions of source code must retain the above copyright notice, this\n-list of conditions and the following disclaimer.\n-\n-Redistributions in binary form must reproduce the above copyright notice,\n-this list of conditions and the following disclaimer in the documentation\n-and/or other materials provided with the distribution.\n-\n-Neither the name of the HSQL Development Group nor the names of its\n-contributors may be used to endorse or promote products derived from this\n-software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n-AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n-ARE DISCLAIMED. IN NO EVENT SHALL HSQL DEVELOPMENT GROUP, HSQLDB.ORG,\n-OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n-EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n-PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n-LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n-ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n-SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-\n-For work originally developed by the Hypersonic SQL Group:\n-\n-Copyright (c) 1995-2000 by the Hypersonic SQL Group.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are met:\n-\n-Redistributions of source code must retain the above copyright notice, this\n-list of conditions and the following disclaimer.\n-\n-Redistributions in binary form must reproduce the above copyright notice,\n-this list of conditions and the following disclaimer in the documentation\n-and/or other materials provided with the distribution.\n-\n-Neither the name of the Hypersonic SQL Group nor the names of its\n-contributors may be used to endorse or promote products derived from this\n-software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n-AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n-ARE DISCLAIMED. IN NO EVENT SHALL THE HYPERSONIC SQL GROUP,\n-OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n-EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n-PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n-LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n-ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n-SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-This software consists of voluntary contributions made by many individuals on behalf of the\n-Hypersonic SQL Group.\n-\n-=========================================================================\n-  - Serp (http://serp.sourceforge.net) net.sourceforge.serp:serp:jar:1.13.1\n-    License: BSD  (LICENSE.txt)\n--------------------------------------------------------------------------\n-\n-Copyright (c) 2002, A. Abram White\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are met:\n-\n-* Redistributions of source code must retain the above copyright notice, this\n-  list of conditions and the following disclaimer.\n-* Redistributions in binary form must reproduce the above copyright notice,\n-  this list of conditions and the following disclaimer in the documentation\n-  and/or other materials provided with the distribution.\n-* Neither the name of 'serp' nor the names of its contributors may\n-  be used to endorse or promote products derived from this software without\n-  specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n-DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n-ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n-(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n-LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n-ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n-SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-\n-=========================================================================\n-  - WSDL4J (http://sf.net/projects/wsdl4j) wsdl4j:wsdl4j:jar:1.6.2\n-    License: CPL  (http://www.opensource.org/licenses/cpl1.0.txt)\n--------------------------------------------------------------------------\n-\n-Common Public License Version 1.0\n-\n-THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS COMMON PUBLIC\n-LICENSE (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM\n-CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\n-\n-1. DEFINITIONS\n-\n-\"Contribution\" means:\n-\n-a) in the case of the initial Contributor, the initial code and\n-documentation distributed under this Agreement, and\n-\n-b) in the case of each subsequent Contributor:\n-\n-i) changes to the Program, and\n-\n-ii) additions to the Program;\n-\n-where such changes and/or additions to the Program originate from and are\n-distributed by that particular Contributor. A Contribution 'originates' from a\n-Contributor if it was added to the Program by such Contributor itself or anyone\n-acting on such Contributor's behalf. Contributions do not include additions to\n-the Program which: (i) are separate modules of software distributed in\n-conjunction with the Program under their own license agreement, and (ii) are not\n-derivative works of the Program.\n-\n-\"Contributor\" means any person or entity that distributes the Program.\n-\n-\"Licensed Patents \" mean patent claims licensable by a Contributor which are\n-necessarily infringed by the use or sale of its Contribution alone or when\n-combined with the Program.\n-\n-\"Program\" means the Contributions distributed in accordance with this Agreement.\n-\n-\"Recipient\" means anyone who receives the Program under this Agreement,\n-including all Contributors.\n-\n-2. GRANT OF RIGHTS\n-\n-a) Subject to the terms of this Agreement, each Contributor hereby grants\n-Recipient a non-exclusive, worldwide, royalty-free copyright license to\n-reproduce, prepare derivative works of, publicly display, publicly perform,\n-distribute and sublicense the Contribution of such Contributor, if any, and such\n-derivative works, in source code and object code form.\n-\n-b) Subject to the terms of this Agreement, each Contributor hereby grants\n-Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed\n-Patents to make, use, sell, offer to sell, import and otherwise transfer the\n-Contribution of such Contributor, if any, in source code and object code form.\n-This patent license shall apply to the combination of the Contribution and the\n-Program if, at the time the Contribution is added by the Contributor, such\n-addition of the Contribution causes such combination to be covered by the\n-Licensed Patents. The patent license shall not apply to any other combinations\n-which include the Contribution. No hardware per se is licensed hereunder.\n-\n-c) Recipient understands that although each Contributor grants the licenses\n-to its Contributions set forth herein, no assurances are provided by any\n-Contributor that the Program does not infringe the patent or other intellectual\n-property rights of any other entity. Each Contributor disclaims any liability to\n-Recipient for claims brought by any other entity based on infringement of\n-intellectual property rights or otherwise. As a condition to exercising the\n-rights and licenses granted hereunder, each Recipient hereby assumes sole\n-responsibility to secure any other intellectual property rights needed, if any.\n-For example, if a third party patent license is required to allow Recipient to\n-distribute the Program, it is Recipient's responsibility to acquire that license\n-before distributing the Program.\n-\n-d) Each Contributor represents that to its knowledge it has sufficient\n-copyright rights in its Contribution, if any, to grant the copyright license set\n-forth in this Agreement.\n-\n-3. REQUIREMENTS\n-\n-A Contributor may choose to distribute the Program in object code form under its\n-own license agreement, provided that:\n-\n-a) it complies with the terms and conditions of this Agreement; and\n-\n-b) its license agreement:\n-\n-i) effectively disclaims on behalf of all Contributors all warranties and\n-conditions, express and implied, including warranties or conditions of title and\n-non-infringement, and implied warranties or conditions of merchantability and\n-fitness for a particular purpose;\n-\n-ii) effectively excludes on behalf of all Contributors all liability for\n-damages, including direct, indirect, special, incidental and consequential\n-damages, such as lost profits;\n-\n-iii) states that any provisions which differ from this Agreement are offered\n-by that Contributor alone and not by any other party; and\n-\n-iv) states that source code for the Program is available from such\n-Contributor, and informs licensees how to obtain it in a reasonable manner on or\n-through a medium customarily used for software exchange.\n-\n-When the Program is made available in source code form:\n-\n-a) it must be made available under this Agreement; and\n-\n-b) a copy of this Agreement must be included with each copy of the Program.\n-\n-Contributors may not remove or alter any copyright notices contained within the\n-Program.\n-\n-Each Contributor must identify itself as the originator of its Contribution, if\n-any, in a manner that reasonably allows subsequent Recipients to identify the\n-originator of the Contribution.\n-\n-4. COMMERCIAL DISTRIBUTION\n-\n-Commercial distributors of software may accept certain responsibilities with\n-respect to end users, business partners and the like. While this license is\n-intended to facilitate the commercial use of the Program, the Contributor who\n-includes the Program in a commercial product offering should do so in a manner\n-which does not create potential liability for other Contributors. Therefore, if\n-a Contributor includes the Program in a commercial product offering, such\n-Contributor (\"Commercial Contributor\") hereby agrees to defend and indemnify\n-every other Contributor (\"Indemnified Contributor\") against any losses, damages\n-and costs (collectively \"Losses\") arising from claims, lawsuits and other legal\n-actions brought by a third party against the Indemnified Contributor to the\n-extent caused by the acts or omissions of such Commercial Contributor in\n-connection with its distribution of the Program in a commercial product\n-offering. The obligations in this section do not apply to any claims or Losses\n-relating to any actual or alleged intellectual property infringement. In order\n-to qualify, an Indemnified Contributor must: a) promptly notify the Commercial\n-Contributor in writing of such claim, and b) allow the Commercial Contributor to\n-control, and cooperate with the Commercial Contributor in, the defense and any\n-related settlement negotiations. The Indemnified Contributor may participate in\n-any such claim at its own expense.\n-\n-For example, a Contributor might include the Program in a commercial product\n-offering, Product X. That Contributor is then a Commercial Contributor. If that\n-Commercial Contributor then makes performance claims, or offers warranties\n-related to Product X, those performance claims and warranties are such\n-Commercial Contributor's responsibility alone. Under this section, the\n-Commercial Contributor would have to defend claims against the other\n-Contributors related to those performance claims and warranties, and if a court\n-requires any other Contributor to pay any damages as a result, the Commercial\n-Contributor must pay those damages.\n-\n-5. NO WARRANTY\n-\n-EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR\n-IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE,\n-NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each\n-Recipient is solely responsible for determining the appropriateness of using and\n-distributing the Program and assumes all risks associated with its exercise of\n-rights under this Agreement, including but not limited to the risks and costs of\n-program errors, compliance with applicable laws, damage to or loss of data,\n-programs or equipment, and unavailability or interruption of operations.\n-\n-6. DISCLAIMER OF LIABILITY\n-\n-EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY\n-CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST\n-PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n-STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n-OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS\n-GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n-\n-7. GENERAL\n-\n-If any provision of this Agreement is invalid or unenforceable under applicable\n-law, it shall not affect the validity or enforceability of the remainder of the\n-terms of this Agreement, and without further action by the parties hereto, such\n-provision shall be reformed to the minimum extent necessary to make such\n-provision valid and enforceable.\n-\n-If Recipient institutes patent litigation against a Contributor with respect to\n-a patent applicable to software (including a cross-claim or counterclaim in a\n-lawsuit), then any patent licenses granted by that Contributor to such Recipient\n-under this Agreement shall terminate as of the date such litigation is filed. In\n-addition, if Recipient institutes patent litigation against any entity\n-(including a cross-claim or counterclaim in a lawsuit) alleging that the Program\n-itself (excluding combinations of the Program with other software or hardware)\n-infringes such Recipient's patent(s), then such Recipient's rights granted under\n-Section 2(b) shall terminate as of the date such litigation is filed.\n-\n-All Recipient's rights under this Agreement shall terminate if it fails to\n-comply with any of the material terms or conditions of this Agreement and does\n-not cure such failure in a reasonable period of time after becoming aware of\n-such noncompliance. If all Recipient's rights under this Agreement terminate,\n-Recipient agrees to cease use and distribution of the Program as soon as\n-reasonably practicable. However, Recipient's obligations under this Agreement\n-and any licenses granted by Recipient relating to the Program shall continue and\n-survive.\n-\n-Everyone is permitted to copy and distribute copies of this Agreement, but in\n-order to avoid inconsistency the Agreement is copyrighted and may only be\n-modified in the following manner. The Agreement Steward reserves the right to\n-publish new versions (including revisions) of this Agreement from time to time.\n-No one other than the Agreement Steward has the right to modify this Agreement.\n-IBM is the initial Agreement Steward. IBM may assign the responsibility to serve\n-as the Agreement Steward to a suitable separate entity. Each new version of the\n-Agreement will be given a distinguishing version number. The Program (including\n-Contributions) may always be distributed subject to the version of the Agreement\n-under which it was received. In addition, after a new version of the Agreement\n-is published, Contributor may elect to distribute the Program (including its\n-Contributions) under the new version. Except as expressly stated in Sections\n-2(a) and 2(b) above, Recipient receives no rights or licenses to the\n-intellectual property of any Contributor under this Agreement, whether\n-expressly, by implication, estoppel or otherwise. All rights in the Program not\n-expressly granted under this Agreement are reserved.\n-\n-This Agreement is governed by the laws of the State of New York and the\n-intellectual property laws of the United States of America. No party to this\n-Agreement will bring a legal action under this Agreement more than one year\n-after the cause of action arose. Each party waives its rights to a jury trial in\n-any resulting litigation.\n-\n-\n-=========================================================================\n-  - HOWL logger (http://forge.objectweb.org/projects/howl/) org.objectweb.howl:howl:jar:1.0.1-1\n-    License: BSD\n--------------------------------------------------------------------------\n-\n-Copyright (c) 2004, Bull S.A.\n-\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions\n-are met:\n-\n-  * Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer.\n-\n-  * Redistributions in binary form must reproduce the above copyright\n-    notice, this list of conditions and the following disclaimer in the\n-    documentation and/or other materials provided with the distribution.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n-TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n-PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n-CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n-EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n-PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n-PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n-LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n-NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n-SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-\n-=========================================================================\n-  - SLF4J API Module (http://www.slf4j.org) org.slf4j:slf4j-api:jar:1.6.1\n-  - SLF4J LOG4J-12 Binding (http://www.slf4j.org) org.slf4j:slf4j-log4j12:jar:1.6.1\n-    License: MIT License  (http://www.opensource.org/licenses/mit-license.php)\n--------------------------------------------------------------------------\n-\n-Copyright (c) 2004-2014 QOS.ch\n- All rights reserved.\n-\n- Permission is hereby granted, free  of charge, to any person obtaining\n- a  copy  of this  software  and  associated  documentation files  (the\n- \"Software\"), to  deal in  the Software without  restriction, including\n- without limitation  the rights to  use, copy, modify,  merge, publish,\n- distribute,  sublicense, and/or sell  copies of  the Software,  and to\n- permit persons to whom the Software  is furnished to do so, subject to\n- the following conditions:\n-\n- The  above  copyright  notice  and  this permission  notice  shall  be\n- included in all copies or substantial portions of the Software.\n-\n- THE  SOFTWARE IS  PROVIDED  \"AS  IS\", WITHOUT  WARRANTY  OF ANY  KIND,\n- EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF\n- MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND\n- NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n- LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n- OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION\n- WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n-\n-\n-=========================================================================\n-  - Apache XBean :: ASM shaded (repackaged) org.apache.xbean:xbean-asm-shaded:bundle:3.8\n-    License: BSD (http://asm.ow2.org/license.html)\n--------------------------------------------------------------------------\n-\n-Copyright (c) 2000-2014 INRIA, France Telecom\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions\n-are met:\n-\n-1. Redistributions of source code must retain the above copyright\n-   notice, this list of conditions and the following disclaimer.\n-\n-2. Redistributions in binary form must reproduce the above copyright\n-   notice, this list of conditions and the following disclaimer in the\n-   documentation and/or other materials provided with the distribution.\n-\n-3. Neither the name of the copyright holders nor the names of its\n-   contributors may be used to endorse or promote products derived from\n-   this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n-AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n-ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n-LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n-CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n-SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n-INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n-CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n-ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n-THE POSSIBILITY OF SUCH DAMAGE.\n-\n-\n-=========================================================================\n-  - JSTL, JSP, Java EE Schemas\n-    License: CDDL\n--------------------------------------------------------------------------\n-\n-COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\n-\n-1. Definitions.\n-\n-1.1. \"Contributor\" means each individual or entity that\n-creates or contributes to the creation of Modifications.\n-\n-1.2. \"Contributor Version\" means the combination of the\n-Original Software, prior Modifications used by a\n-Contributor (if any), and the Modifications made by that\n-particular Contributor.\n-\n-1.3. \"Covered Software\" means (a) the Original Software, or\n-(b) Modifications, or (c) the combination of files\n-containing Original Software with files containing\n-Modifications, in each case including portions thereof.\n-\n-1.4. \"Executable\" means the Covered Software in any form\n-other than Source Code.\n-\n-1.5. \"Initial Developer\" means the individual or entity\n-that first makes Original Software available under this\n-License.\n-\n-1.6. \"Larger Work\" means a work which combines Covered\n-Software or portions thereof with code not governed by the\n-terms of this License.\n-\n-1.7. \"License\" means this document.\n-\n-1.8. \"Licensable\" means having the right to grant, to the\n-maximum extent possible, whether at the time of the initial\n-grant or subsequently acquired, any and all of the rights\n-conveyed herein.\n-\n-1.9. \"Modifications\" means the Source Code and Executable\n-form of any of the following:\n-\n-A. Any file that results from an addition to,\n-deletion from or modification of the contents of a\n-file containing Original Software or previous\n-Modifications;\n-\n-B. Any new file that contains any part of the\n-Original Software or previous Modification; or\n-\n-C. Any new file that is contributed or otherwise made\n-available under the terms of this License.\n-\n-1.10. \"Original Software\" means the Source Code and\n-Executable form of computer software code that is\n-originally released under this License.\n-\n-1.11. \"Patent Claims\" means any patent claim(s), now owned\n-or hereafter acquired, including without limitation,\n-method, process, and apparatus claims, in any patent\n-Licensable by grantor.\n-\n-1.12. \"Source Code\" means (a) the common form of computer\n-software code in which modifications are made and (b)\n-associated documentation included in or with such code.\n-\n-1.13. \"You\" (or \"Your\") means an individual or a legal\n-entity exercising rights under, and complying with all of\n-the terms of, this License. For legal entities, \"You\"\n-includes any entity which controls, is controlled by, or is\n-under common control with You. For purposes of this\n-definition, \"control\" means (a) the power, direct or\n-indirect, to cause the direction or management of such\n-entity, whether by contract or otherwise, or (b) ownership\n-of more than fifty percent (50%) of the outstanding shares\n-or beneficial ownership of such entity.\n-\n-2. License Grants.\n-\n-2.1. The Initial Developer Grant.\n-\n-Conditioned upon Your compliance with Section 3.1 below and\n-subject to third party intellectual property claims, the\n-Initial Developer hereby grants You a world-wide,\n-royalty-free, non-exclusive license:\n-\n-(a) under intellectual property rights (other than\n-patent or trademark) Licensable by Initial Developer,\n-to use, reproduce, modify, display, perform,\n-sublicense and distribute the Original Software (or\n-portions thereof), with or without Modifications,\n-and/or as part of a Larger Work; and\n-\n-(b) under Patent Claims infringed by the making,\n-using or selling of Original Software, to make, have\n-made, use, practice, sell, and offer for sale, and/or\n-otherwise dispose of the Original Software (or\n-portions thereof).\n-\n-(c) The licenses granted in Sections 2.1(a) and (b)\n-are effective on the date Initial Developer first\n-distributes or otherwise makes the Original Software\n-available to a third party under the terms of this\n-License.\n-\n-(d) Notwithstanding Section 2.1(b) above, no patent\n-license is granted: (1) for code that You delete from\n-the Original Software, or (2) for infringements\n-caused by: (i) the modification of the Original\n-Software, or (ii) the combination of the Original\n-Software with other software or devices.\n-\n-2.2. Contributor Grant.\n-\n-Conditioned upon Your compliance with Section 3.1 below and\n-subject to third party intellectual property claims, each\n-Contributor hereby grants You a world-wide, royalty-free,\n-non-exclusive license:\n-\n-(a) under intellectual property rights (other than\n-patent or trademark) Licensable by Contributor to\n-use, reproduce, modify, display, perform, sublicense\n-and distribute the Modifications created by such\n-Contributor (or portions thereof), either on an\n-unmodified basis, with other Modifications, as\n-Covered Software and/or as part of a Larger Work; and\n-\n-(b) under Patent Claims infringed by the making,\n-using, or selling of Modifications made by that\n-Contributor either alone and/or in combination with\n-its Contributor Version (or portions of such\n-combination), to make, use, sell, offer for sale,\n-have made, and/or otherwise dispose of: (1)\n-Modifications made by that Contributor (or portions\n-thereof); and (2) the combination of Modifications\n-made by that Contributor with its Contributor Version\n-(or portions of such combination).\n-\n-(c) The licenses granted in Sections 2.2(a) and\n-2.2(b) are effective on the date Contributor first\n-distributes or otherwise makes the Modifications\n-available to a third party.\n-\n-(d) Notwithstanding Section 2.2(b) above, no patent\n-license is granted: (1) for any code that Contributor\n-has deleted from the Contributor Version; (2) for\n-infringements caused by: (i) third party\n-modifications of Contributor Version, or (ii) the\n-combination of Modifications made by that Contributor\n-with other software (except as part of the\n-Contributor Version) or other devices; or (3) under\n-Patent Claims infringed by Covered Software in the\n-absence of Modifications made by that Contributor.\n-\n-3. Distribution Obligations.\n-\n-3.1. Availability of Source Code.\n-\n-Any Covered Software that You distribute or otherwise make\n-available in Executable form must also be made available in\n-Source Code form and that Source Code form must be\n-distributed only under the terms of this License. You must\n-include a copy of this License with every copy of the\n-Source Code form of the Covered Software You distribute or\n-otherwise make available. You must inform recipients of any\n-such Covered Software in Executable form as to how they can\n-obtain such Covered Software in Source Code form in a\n-reasonable manner on or through a medium customarily used\n-for software exchange.\n-\n-3.2. Modifications.\n-\n-The Modifications that You create or to which You\n-contribute are governed by the terms of this License. You\n-represent that You believe Your Modifications are Your\n-original creation(s) and/or You have sufficient rights to\n-grant the rights conveyed by this License.\n-\n-3.3. Required Notices.\n-\n-You must include a notice in each of Your Modifications\n-that identifies You as the Contributor of the Modification.\n-You may not remove or alter any copyright, patent or\n-trademark notices contained within the Covered Software, or\n-any notices of licensing or any descriptive text giving\n-attribution to any Contributor or the Initial Developer.\n-\n-3.4. Application of Additional Terms.\n-\n-You may not offer or impose any terms on any Covered\n-Software in Source Code form that alters or restricts the\n-applicable version of this License or the recipients'\n-rights hereunder. You may choose to offer, and to charge a\n-fee for, warranty, support, indemnity or liability\n-obligations to one or more recipients of Covered Software.\n-However, you may do so only on Your own behalf, and not on\n-behalf of the Initial Developer or any Contributor. You\n-must make it absolutely clear that any such warranty,\n-support, indemnity or liability obligation is offered by\n-You alone, and You hereby agree to indemnify the Initial\n-Developer and every Contributor for any liability incurred\n-by the Initial Developer or such Contributor as a result of\n-warranty, support, indemnity or liability terms You offer.\n-\n-3.5. Distribution of Executable Versions.\n-\n-You may distribute the Executable form of the Covered\n-Software under the terms of this License or under the terms\n-of a license of Your choice, which may contain terms\n-different from this License, provided that You are in\n-compliance with the terms of this License and that the\n-license for the Executable form does not attempt to limit\n-or alter the recipient's rights in the Source Code form\n-from the rights set forth in this License. If You\n-distribute the Covered Software in Executable form under a\n-different license, You must make it absolutely clear that\n-any terms which differ from this License are offered by You\n-alone, not by the Initial Developer or Contributor. You\n-hereby agree to indemnify the Initial Developer and every\n-Contributor for any liability incurred by the Initial\n-Developer or such Contributor as a result of any such terms\n-You offer.\n-\n-3.6. Larger Works.\n-\n-You may create a Larger Work by combining Covered Software\n-with other code not governed by the terms of this License\n-and distribute the Larger Work as a single product. In such\n-a case, You must make sure the requirements of this License\n-are fulfilled for the Covered Software.\n-\n-4. Versions of the License.\n-\n-4.1. New Versions.\n-\n-Sun Microsystems, Inc. is the initial license steward and\n-may publish revised and/or new versions of this License\n-from time to time. Each version will be given a\n-distinguishing version number. Except as provided in\n-Section 4.3, no one other than the license steward has the\n-right to modify this License.\n-\n-4.2. Effect of New Versions.\n-\n-You may always continue to use, distribute or otherwise\n-make the Covered Software available under the terms of the\n-version of the License under which You originally received\n-the Covered Software. If the Initial Developer includes a\n-notice in the Original Software prohibiting it from being\n-distributed or otherwise made available under any\n-subsequent version of the License, You must distribute and\n-make the Covered Software available under the terms of the\n-version of the License under which You originally received\n-the Covered Software. Otherwise, You may also choose to\n-use, distribute or otherwise make the Covered Software\n-available under the terms of any subsequent version of the\n-License published by the license steward.\n-\n-4.3. Modified Versions.\n-\n-When You are an Initial Developer and You want to create a\n-new license for Your Original Software, You may create and\n-use a modified version of this License if You: (a) rename\n-the license and remove any references to the name of the\n-license steward (except to note that the license differs\n-from this License); and (b) otherwise make it clear that\n-the license contains terms which differ from this License.\n-\n-5. DISCLAIMER OF WARRANTY.\n-\n-COVERED SOFTWARE IS PROVIDED UNDER THIS LICENSE ON AN \"AS IS\"\n-BASIS, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,\n-INCLUDING, WITHOUT LIMITATION, WARRANTIES THAT THE COVERED\n-SOFTWARE IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR\n-PURPOSE OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND\n-PERFORMANCE OF THE COVERED SOFTWARE IS WITH YOU. SHOULD ANY\n-COVERED SOFTWARE PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT THE\n-INITIAL DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF\n-ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF\n-WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF\n-ANY COVERED SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS\n-DISCLAIMER.\n-\n-6. TERMINATION.\n-\n-6.1. This License and the rights granted hereunder will\n-terminate automatically if You fail to comply with terms\n-herein and fail to cure such breach within 30 days of\n-becoming aware of the breach. Provisions which, by their\n-nature, must remain in effect beyond the termination of\n-this License shall survive.\n-\n-6.2. If You assert a patent infringement claim (excluding\n-declaratory judgment actions) against Initial Developer or\n-a Contributor (the Initial Developer or Contributor against\n-whom You assert such claim is referred to as \"Participant\")\n-alleging that the Participant Software (meaning the\n-Contributor Version where the Participant is a Contributor\n-or the Original Software where the Participant is the\n-Initial Developer) directly or indirectly infringes any\n-patent, then any and all rights granted directly or\n-indirectly to You by such Participant, the Initial\n-Developer (if the Initial Developer is not the Participant)\n-and all Contributors under Sections 2.1 and/or 2.2 of this\n-License shall, upon 60 days notice from Participant\n-terminate prospectively and automatically at the expiration\n-of such 60 day notice period, unless if within such 60 day\n-period You withdraw Your claim with respect to the\n-Participant Software against such Participant either\n-unilaterally or pursuant to a written agreement with\n-Participant.\n-\n-6.3. In the event of termination under Sections 6.1 or 6.2\n-above, all end user licenses that have been validly granted\n-by You or any distributor hereunder prior to termination\n-(excluding licenses granted to You by any distributor)\n-shall survive termination.\n-\n-7. LIMITATION OF LIABILITY.\n-\n-UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER TORT\n-(INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL YOU, THE\n-INITIAL DEVELOPER, ANY OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF\n-COVERED SOFTWARE, OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE\n-LIABLE TO ANY PERSON FOR ANY INDIRECT, SPECIAL, INCIDENTAL, OR\n-CONSEQUENTIAL DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT\n-LIMITATION, DAMAGES FOR LOST PROFITS, LOSS OF GOODWILL, WORK\n-STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER\n-COMMERCIAL DAMAGES OR LOSSES, EVEN IF SUCH PARTY SHALL HAVE BEEN\n-INFORMED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION OF\n-LIABILITY SHALL NOT APPLY TO LIABILITY FOR DEATH OR PERSONAL\n-INJURY RESULTING FROM SUCH PARTY'S NEGLIGENCE TO THE EXTENT\n-APPLICABLE LAW PROHIBITS SUCH LIMITATION. SOME JURISDICTIONS DO\n-NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR\n-CONSEQUENTIAL DAMAGES, SO THIS EXCLUSION AND LIMITATION MAY NOT\n-APPLY TO YOU.\n-\n-8. U.S. GOVERNMENT END USERS.\n-\n-The Covered Software is a \"commercial item,\" as that term is\n-defined in 48 C.F.R. 2.101 (Oct. 1995), consisting of \"commercial\n-computer software\" (as that term is defined at 48 C.F.R. ?\n-252.227-7014(a)(1)) and \"commercial computer software\n-documentation\" as such terms are used in 48 C.F.R. 12.212 (Sept.\n-1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1\n-through 227.7202-4 (June 1995), all U.S. Government End Users\n-acquire Covered Software with only those rights set forth herein.\n-This U.S. Government Rights clause is in lieu of, and supersedes,\n-any other FAR, DFAR, or other clause or provision that addresses\n-Government rights in computer software under this License.\n-\n-9. MISCELLANEOUS.\n-\n-This License represents the complete agreement concerning subject\n-matter hereof. If any provision of this License is held to be\n-unenforceable, such provision shall be reformed only to the\n-extent necessary to make it enforceable. This License shall be\n-governed by the law of the jurisdiction specified in a notice\n-contained within the Original Software (except to the extent\n-applicable law, if any, provides otherwise), excluding such\n-jurisdiction's conflict-of-law provisions. Any litigation\n-relating to this License shall be subject to the jurisdiction of\n-the courts located in the jurisdiction and venue specified in a\n-notice contained within the Original Software, with the losing\n-party responsible for costs, including, without limitation, court\n-costs and reasonable attorneys' fees and expenses. The\n-application of the United Nations Convention on Contracts for the\n-International Sale of Goods is expressly excluded. Any law or\n-regulation which provides that the language of a contract shall\n-be construed against the drafter shall not apply to this License.\n-You agree that You alone are responsible for compliance with the\n-United States export administration regulations (and the export\n-control laws and regulation of any other countries) when You use,\n-distribute or otherwise make available any Covered Software.\n-\n-10. RESPONSIBILITY FOR CLAIMS.\n-\n-As between Initial Developer and the Contributors, each party is\n-responsible for claims and damages arising, directly or\n-indirectly, out of its utilization of rights under this License\n-and You agree to work with Initial Developer and Contributors to\n-distribute such responsibility on an equitable basis. Nothing\n-herein is intended or shall be deemed to constitute any admission\n-of liability.\n-============================================================\n-el-api, istack\n-\n-The GNU General Public License (GPL) Version 2, June 1991\n-\n-Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n-59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n-\n-Everyone is permitted to copy and distribute verbatim copies\n-of this license document, but changing it is not allowed.\n-\n-Preamble\n-\n-The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Library General Public License instead.) You can apply it to your programs, too.\n-\n-When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.\n-\n-To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.\n-\n-For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.\n-\n-We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.\n-\n-Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.\n-\n-Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.\n-\n-The precise terms and conditions for copying, distribution and modification follow.\n-\n-TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n-\n-0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\".\n-\n-Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.\n-\n-1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.\n-\n-You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n-\n-2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n-\n-    a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change.\n-\n-    b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.\n-\n-    c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)\n-\n-These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n-\n-Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.\n-\n-In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n-\n-3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:\n-\n-    a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,\n-\n-    b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,\n-\n-    c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.)\n-\n-The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n-\n-If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.\n-\n-4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n-\n-5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.\n-\n-6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.\n-\n-7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.\n-\n-If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.\n-\n-It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n-\n-This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n-\n-8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n-\n-9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n-\n-Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.\n-\n-10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n-\n-NO WARRANTY\n-\n-11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n-\n-12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n-\n-END OF TERMS AND CONDITIONS\n-\n-How to Apply These Terms to Your New Programs\n-\n-If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.\n-\n-To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n-\n-    One line to give the program's name and a brief idea of what it does.\n-    Copyright (C) <year> <name of author>\n-\n-    This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n-\n-    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n-\n-    You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n-\n-Also add information on how to contact you by electronic and paper mail.\n-\n-If the program is interactive, make it output a short notice like this when it starts in an interactive mode:\n-\n-    Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details.\n-\n-The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program.\n-\n-You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names:\n-\n-    Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.\n-\n-    signature of Ty Coon, 1 April 1989\n-    Ty Coon, President of Vice\n-\n-This General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Library General Public License instead of this License.\n-\n-\"CLASSPATH\" EXCEPTION TO THE GPL VERSION 2\n-\n-Certain source files distributed by Oracle are subject to the following clarification and special exception to the GPL Version 2, but only where Oracle has expressly included in the particular source file's header the words \"Oracle designates this particular file as subject to the \"Classpath\" exception as provided by Oracle in the License file that accompanied this code.\"\n-\n-Linking this library statically or dynamically with other modules is making a combined work based on this library.  Thus, the terms and conditions of the GNU General Public License Version 2 cover the whole combination.\n-\n-As a special exception, the copyright holders of this library give you permission to link this library with independent modules to produce an executable, regardless of the license terms of these independent modules, and to copy and distribute the resulting executable under terms of your choice, provided that you also meet, for each linked independent module, the terms and conditions of the license of that module.  An independent module is a module which is not derived from or based on this library.  If you modify this library, you may extend this exception to your version of the library, but you are not obligated to do so.  If you do not wish to do so, delete this exception statement from your version.\n-\n-",
                "additions": 0,
                "raw_url": "https://github.com/apache/tomee/raw/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/utils/openejb-provisionning/src/main#legal/LICENSE",
                "status": "removed",
                "changes": 1196,
                "deletions": 1196,
                "sha": "b77986a23c0c2e9ef7a12ebb6d6044e67a29e9b7",
                "blob_url": "https://github.com/apache/tomee/blob/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/utils/openejb-provisionning/src/main#legal/LICENSE",
                "filename": "utils/openejb-provisionning/src/main#legal/LICENSE",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/utils/openejb-provisionning/src/main#legal/LICENSE?ref=f0c5ecc62d7deef5b879a58fdcc64f3c102f4213"
            }
        ],
        "bug_id": "tomee_32",
        "parent": "https://github.com/apache/tomee/commit/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213",
        "message": "TOMEE-1787 EJBExceptionMapper can lead to NPE - fixing temp files",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/7d60b1603ec58d5f8ba23d957204385709e41961",
        "file": [
            {
                "patch": "@@ -41,7 +41,10 @@ public String getAuthenticationScheme() {\n     public Principal getUserPrincipal() {\n         final Principal callerPrincipal = service().getCallerPrincipal();\n         if (callerPrincipal == null) {\n-            return get().getUserPrincipal();\n+            final SecurityContext securityContext = get();\n+            if (securityContext != null) {\n+                return securityContext.getUserPrincipal();\n+            }\n         }\n         return callerPrincipal;\n     }",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/7d60b1603ec58d5f8ba23d957204385709e41961/container/openejb-core/src/main/java/org/apache/openejb/rest/ThreadLocalSecurityContext.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "56e2103800d0e329a4b5b0366996f1157e657f7f",
                "blob_url": "https://github.com/apache/tomee/blob/7d60b1603ec58d5f8ba23d957204385709e41961/container/openejb-core/src/main/java/org/apache/openejb/rest/ThreadLocalSecurityContext.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/rest/ThreadLocalSecurityContext.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/rest/ThreadLocalSecurityContext.java?ref=7d60b1603ec58d5f8ba23d957204385709e41961"
            }
        ],
        "bug_id": "tomee_33",
        "parent": "https://github.com/apache/tomee/commit/af5b154c64f22ddcdd17c9a64434e630a9db6363",
        "message": "another NPE check",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3",
        "file": [
            {
                "patch": "@@ -103,10 +103,18 @@\n \n     public void setWebBeansContext(final WebBeansContext webBeansContext) {\n         this.webBeansContext = webBeansContext;\n+        if (webBeansContext == null) {\n+            return;\n+        }\n         if (!WebappWebBeansContext.class.isInstance(webBeansContext)) {\n             cacheProxies = new ConcurrentHashMap<Contextual<?>, Object>();\n         } else { // share cache of proxies between the whole app otherwise hard to share an EJB between a webapp and the lib part of the app\n-            cacheProxies = CdiPlugin.class.cast(WebappWebBeansContext.class.cast(webBeansContext).getParent().getPluginLoader().getEjbPlugin()).cacheProxies;\n+            final WebBeansContext parent = WebappWebBeansContext.class.cast(webBeansContext).getParent();\n+            if (parent != null) {\n+                cacheProxies = CdiPlugin.class.cast(parent.getPluginLoader().getEjbPlugin()).cacheProxies;\n+            } else {\n+                cacheProxies = new ConcurrentHashMap<Contextual<?>, Object>();\n+            }\n         }\n     }\n ",
                "additions": 9,
                "raw_url": "https://github.com/apache/tomee/raw/e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiPlugin.java",
                "status": "modified",
                "changes": 10,
                "deletions": 1,
                "sha": "db39ccb6d29934bc9fa8e280857a8ef55f7326a6",
                "blob_url": "https://github.com/apache/tomee/blob/e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiPlugin.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiPlugin.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiPlugin.java?ref=e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3"
            },
            {
                "patch": "@@ -35,7 +35,7 @@ public WebAppInjectionResolver(final WebappWebBeansContext ctx) {\n     @Override\n     public Set<Bean<?>> implResolveByType(final boolean delegate, final Type injectionPointType, final Class<?> injectinPointClass, final Annotation... qualifiers) {\n         final Set<Bean<?>> set = super.implResolveByType(delegate, injectionPointType, injectinPointClass, qualifiers);\n-        if (set.isEmpty()) {\n+        if (set.isEmpty() && context.getParent() != null) {\n             return context.getParent().getBeanManagerImpl().getInjectionResolver().implResolveByType(delegate, injectionPointType, injectinPointClass, qualifiers);\n         }\n         return set;",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebAppInjectionResolver.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "98c5a1146ccde42c62235d3b70d6567f3e861003",
                "blob_url": "https://github.com/apache/tomee/blob/e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebAppInjectionResolver.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/WebAppInjectionResolver.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebAppInjectionResolver.java?ref=e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3"
            },
            {
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.webbeans.component.BuiltInOwbBean;\n import org.apache.webbeans.component.ExtensionBean;\n import org.apache.webbeans.component.OwbBean;\n+import org.apache.webbeans.config.WebBeansContext;\n import org.apache.webbeans.container.BeanManagerImpl;\n import org.apache.webbeans.context.creational.CreationalContextImpl;\n import org.apache.webbeans.event.EventMetadataImpl;\n@@ -68,7 +69,10 @@ public WebappBeanManager(final WebappWebBeansContext ctx) {\n     public void fireEvent(final Object event, final EventMetadataImpl metadata, final boolean isLifecycleEvent) {\n         getNotificationManager().fireEvent(event, metadata, isLifecycleEvent);\n         if (isEvent(event)) {\n-            getParentBm().getNotificationManager().fireEvent(event, metadata, isLifecycleEvent);\n+            final BeanManagerImpl parentBm = getParentBm();\n+            if (parentBm != null) {\n+                parentBm.getNotificationManager().fireEvent(event, metadata, isLifecycleEvent);\n+            }\n         }\n     }\n \n@@ -90,7 +94,10 @@ public void fireEvent(final Object event, final EventMetadataImpl metadata, fina\n         set.addAll(getNotificationManager().resolveObservers(event, metadata, false));\n \n         if (isEvent(event)) {\n-            set.addAll(getParentBm().getNotificationManager().resolveObservers(event, metadata, false));\n+            final BeanManagerImpl parentBm = getParentBm();\n+            if (parentBm != null) {\n+                set.addAll(parentBm.getNotificationManager().resolveObservers(event, metadata, false));\n+            }\n         } // else nothing since extensions are loaded by classloader so we already have it\n \n         return set;\n@@ -103,18 +110,22 @@ public Object getInjectableReference(final InjectionPoint injectionPoint, final\n             return null;\n         }\n \n+        final BeanManagerImpl parentBm = getParentBm();\n         final Boolean existing = USE_PARENT_BM.get();\n         if (existing != null && existing) { // shortcut the whole logic to keep the threadlocal set up correctly\n-            return getParentBm().getInjectableReference(injectionPoint, ctx);\n+            if (parentBm == null) {\n+                return null;\n+            }\n+            return parentBm.getInjectableReference(injectionPoint, ctx);\n         }\n \n         // we can do it cause there is caching but we shouldn't - easy way to overide OWB actually\n         final Bean<Object> injectedBean = (Bean<Object>)getInjectionResolver().getInjectionPointBean(injectionPoint);\n         try {\n-            if (injectedBean != null && injectedBean == getParentBm().getInjectionResolver().getInjectionPointBean(injectionPoint)) {\n+            if (parentBm != null && injectedBean != null && injectedBean == parentBm.getInjectionResolver().getInjectionPointBean(injectionPoint)) {\n                 USE_PARENT_BM.set(true);\n                 try {\n-                    return getParentBm().getInjectableReference(injectionPoint, ctx);\n+                    return parentBm.getInjectableReference(injectionPoint, ctx);\n                 } finally {\n                     USE_PARENT_BM.remove();\n                 }\n@@ -268,7 +279,8 @@ public ExpressionFactory wrapExpressionFactory(final ExpressionFactory expressio\n     }\n \n     public BeanManagerImpl getParentBm() {\n-        return webappCtx.getParent().getBeanManagerImpl();\n+        final WebBeansContext parent = webappCtx.getParent();\n+        return parent != null ? parent.getBeanManagerImpl() : null;\n     }\n \n     @Override\n@@ -304,7 +316,7 @@ public boolean isInUse() {\n     @Override\n     public Bean<?> getPassivationCapableBean(final String id) {\n         final Bean<?> bean = super.getPassivationCapableBean(id);\n-        if (bean == null) {\n+        if (bean == null && getParentBm() != null) {\n             return getParentBm().getPassivationCapableBean(id);\n         }\n         return bean;\n@@ -318,9 +330,12 @@ public void afterStart() {\n \n     private Set<Bean<?>> mergeBeans() {\n         final Set<Bean<?>> allBeans = new CopyOnWriteArraySet<>(); // override parent one with a \"webapp\" bean list\n-        for (final Bean<?> bean : getParentBm().getBeans()) {\n-            if (filter.accept(bean)) {\n-                allBeans.add(bean);\n+        final BeanManagerImpl parentBm = getParentBm();\n+        if (parentBm != null) {\n+            for (final Bean<?> bean : parentBm.getBeans()) {\n+                if (filter.accept(bean)) {\n+                    allBeans.add(bean);\n+                }\n             }\n         }\n         allBeans.addAll(super.getBeans());",
                "additions": 25,
                "raw_url": "https://github.com/apache/tomee/raw/e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java",
                "status": "modified",
                "changes": 35,
                "deletions": 10,
                "sha": "eacfc5ddf98018070a59c078f856cd1bcf4945d4",
                "blob_url": "https://github.com/apache/tomee/blob/e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java?ref=e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3"
            }
        ],
        "bug_id": "tomee_34",
        "parent": "https://github.com/apache/tomee/commit/e677d4d5c25f8514b357478f7e94ff832731e5e4",
        "message": "NPE when skipping cdi for ears",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/a331811ec3f6865a0bc7b341c8f5f514870fcc50",
        "file": [
            {
                "patch": "@@ -107,7 +107,7 @@ public PojoEndpoint(ClassLoader loader, Bus bus, PortData port, Context context,\n         Thread.currentThread().setContextClassLoader(loader);\n         try {\n             final WebBeansContext webBeansContext = WebBeansContext.currentInstance();\n-            final BeanManagerImpl bm = webBeansContext.getBeanManagerImpl();\n+            final BeanManagerImpl bm = webBeansContext == null ? null : webBeansContext.getBeanManagerImpl();\n             if (bm != null && bm.isInUse()) { // try cdi bean\n                 if (JAXWS_AS_CDI_BEANS) {\n                     try {",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/a331811ec3f6865a0bc7b341c8f5f514870fcc50/server/openejb-cxf/src/main/java/org/apache/openejb/server/cxf/pojo/PojoEndpoint.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "97021a3c6c07160e9a4506a864d61308d709985e",
                "blob_url": "https://github.com/apache/tomee/blob/a331811ec3f6865a0bc7b341c8f5f514870fcc50/server/openejb-cxf/src/main/java/org/apache/openejb/server/cxf/pojo/PojoEndpoint.java",
                "filename": "server/openejb-cxf/src/main/java/org/apache/openejb/server/cxf/pojo/PojoEndpoint.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf/src/main/java/org/apache/openejb/server/cxf/pojo/PojoEndpoint.java?ref=a331811ec3f6865a0bc7b341c8f5f514870fcc50"
            }
        ],
        "bug_id": "tomee_35",
        "parent": "https://github.com/apache/tomee/commit/ad5a363d3c9b3b3945233dbbc28120655b572985",
        "message": "TOMEE-1898 avoid NPE when pojo webservices are used without cdi",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/f4a8864bfe935d80d16a3807dcd8182b7049a1a3",
        "file": [
            {
                "patch": "@@ -18,6 +18,11 @@\n package org.apache.openejb.resource.jdbc.dbcp;\n \n import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.commons.dbcp2.PoolableConnection;\n+import org.apache.commons.dbcp2.PoolingDataSource;\n+import org.apache.commons.dbcp2.managed.ManagedConnection;\n+import org.apache.commons.dbcp2.managed.ManagedDataSource;\n+import org.apache.commons.dbcp2.managed.TransactionRegistry;\n import org.apache.openejb.OpenEJB;\n import org.apache.openejb.cipher.PasswordCipher;\n import org.apache.openejb.cipher.PasswordCipherFactory;\n@@ -34,6 +39,7 @@\n import java.io.File;\n import java.io.ObjectStreamException;\n import java.io.Serializable;\n+import java.sql.Connection;\n import java.sql.SQLException;\n import java.sql.SQLFeatureNotSupportedException;\n import java.util.Properties;\n@@ -67,6 +73,33 @@ public BasicManagedDataSource(final String name) {\n         this.name = name;\n     }\n \n+    @Override\n+    protected DataSource createDataSourceInstance() throws SQLException {\n+        final TransactionRegistry transactionRegistry = getTransactionRegistry();\n+        if (transactionRegistry == null) {\n+            throw new IllegalStateException(\"TransactionRegistry has not been set\");\n+        }\n+        if (getConnectionPool() == null) {\n+            throw new IllegalStateException(\"Pool has not been set\");\n+        }\n+        final PoolingDataSource<PoolableConnection> pds = new ManagedDataSource<PoolableConnection>(getConnectionPool(), transactionRegistry) {\n+            @Override\n+            public Connection getConnection() throws SQLException {\n+                return new ManagedConnection<PoolableConnection>(getPool(), transactionRegistry, isAccessToUnderlyingConnectionAllowed()) {\n+                    @Override\n+                    public void close() throws SQLException {\n+                        if (getDelegateInternal() == null) {\n+                            return;\n+                        }\n+                        super.close();\n+                    }\n+                };\n+            }\n+        };\n+        pds.setAccessToUnderlyingConnectionAllowed(isAccessToUnderlyingConnectionAllowed());\n+        return pds;\n+    }\n+\n     @Override\n     public int getLoginTimeout() throws SQLException {\n         return 0;",
                "additions": 33,
                "raw_url": "https://github.com/apache/tomee/raw/f4a8864bfe935d80d16a3807dcd8182b7049a1a3/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/dbcp/BasicManagedDataSource.java",
                "status": "modified",
                "changes": 33,
                "deletions": 0,
                "sha": "6288b7f94d78ee931bd62cbf3063d8ccc2fa00cb",
                "blob_url": "https://github.com/apache/tomee/blob/f4a8864bfe935d80d16a3807dcd8182b7049a1a3/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/dbcp/BasicManagedDataSource.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/dbcp/BasicManagedDataSource.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/dbcp/BasicManagedDataSource.java?ref=f4a8864bfe935d80d16a3807dcd8182b7049a1a3"
            },
            {
                "patch": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openejb.resource.jdbc;\n+\n+import org.apache.commons.dbcp2.PoolableConnection;\n+import org.apache.commons.pool2.impl.GenericObjectPool;\n+import org.apache.openejb.jee.EjbJar;\n+import org.apache.openejb.junit.ApplicationComposer;\n+import org.apache.openejb.resource.jdbc.pool.DefaultDataSourceCreator;\n+import org.apache.openejb.testing.Classes;\n+import org.apache.openejb.testing.Configuration;\n+import org.apache.openejb.testing.Module;\n+import org.apache.openejb.testing.SimpleLog;\n+import org.apache.openejb.testng.PropertiesBuilder;\n+import org.apache.openejb.util.reflection.Reflections;\n+import org.hsqldb.jdbc.pool.JDBCXADataSource;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.annotation.Resource;\n+import javax.ejb.EJB;\n+import javax.ejb.Singleton;\n+import javax.sql.DataSource;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@SimpleLog\n+@RunWith(ApplicationComposer.class)\n+public class DbcpNPEXAConnectionTest {\n+    @Resource(name = \"xadb\")\n+    private DataSource ds;\n+\n+    @EJB\n+    private AnEjb ejb;\n+\n+    @Module\n+    @Classes(AnEjb.class)\n+    public EjbJar mandatory() {\n+        return new EjbJar();\n+    }\n+\n+    @Configuration\n+    public Properties props() {\n+        return new PropertiesBuilder()\n+                .p(\"openejb.jdbc.datasource-creator\", DefaultDataSourceCreator.class.getName())\n+\n+                .p(\"txMgr\", \"new://TransactionManager?type=TransactionManager\")\n+                .p(\"txMgr.txRecovery\", \"true\")\n+                .p(\"txMgr.logFileDir\", \"target/test/xa/DbcpNPEXAConnectionTest\")\n+\n+                // real XA datasources\n+                .p(\"xa\", \"new://Resource?class-name=\" + JDBCXADataSource.class.getName())\n+                .p(\"xa.url\", \"jdbc:hsqldb:mem:dbcpxa\")\n+                .p(\"xa.user\", \"sa\")\n+                .p(\"xa.password\", \"\")\n+                .p(\"xa.SkipImplicitAttributes\", \"true\")\n+                .p(\"xa.SkipPropertiesFallback\", \"true\") // otherwise goes to connection properties\n+\n+                .p(\"xadb\", \"new://Resource?type=DataSource\")\n+                .p(\"xadb.xaDataSource\", \"xa\")\n+                .p(\"xadb.JtaManaged\", \"true\")\n+                .p(\"xadb.MaxIdle\", \"25\")\n+                .p(\"xadb.MaxTotal\", \"25\")\n+                .p(\"xadb.InitialSize\", \"3\")\n+\n+                .build();\n+    }\n+\n+    @Test\n+    public void check() throws SQLException {\n+        ejb.newConn().close(); // no NPE\n+        final GenericObjectPool<PoolableConnection> pool =  GenericObjectPool.class.cast(Reflections.get(ds, \"connectionPool\"));\n+        assertEquals(0, pool.getNumActive());\n+    }\n+\n+    @Singleton\n+    public static class AnEjb {\n+        @Resource(name = \"xadb\")\n+        private DataSource ds;\n+\n+        public Connection newConn() throws SQLException {\n+            ds.getConnection().close(); // first connection is not \"shared\" so closes correctly\n+            return use(ds.getConnection()); // this one is shared so delegate will be null and close outside JTA will fail\n+        }\n+    }\n+\n+    private static Connection use(final Connection connection) {\n+        try {\n+            connection.getMetaData();\n+        } catch (final SQLException e) {\n+            Assert.fail(e.getMessage());\n+        }\n+        return connection;\n+    }\n+}\n+",
                "additions": 114,
                "raw_url": "https://github.com/apache/tomee/raw/f4a8864bfe935d80d16a3807dcd8182b7049a1a3/container/openejb-core/src/test/java/org/apache/openejb/resource/jdbc/DbcpNPEXAConnectionTest.java",
                "status": "added",
                "changes": 114,
                "deletions": 0,
                "sha": "4b32898bb8d57848c87a464680366b6eb990c3dc",
                "blob_url": "https://github.com/apache/tomee/blob/f4a8864bfe935d80d16a3807dcd8182b7049a1a3/container/openejb-core/src/test/java/org/apache/openejb/resource/jdbc/DbcpNPEXAConnectionTest.java",
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/resource/jdbc/DbcpNPEXAConnectionTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/resource/jdbc/DbcpNPEXAConnectionTest.java?ref=f4a8864bfe935d80d16a3807dcd8182b7049a1a3"
            }
        ],
        "bug_id": "tomee_36",
        "parent": "https://github.com/apache/tomee/commit/52828b17e610dedb375490ce6fff91020a735c59",
        "message": "TOMEE-1860 DBCP pool can lead to a NPE for ManagedConnection closing a shared connection",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/dbde8c552ba69fa4060ae8b340b64b1e74a7b0fe",
        "file": [
            {
                "patch": "@@ -108,7 +108,7 @@ public PojoEndpoint(ClassLoader loader, Bus bus, PortData port, Context context,\n         try {\n             final WebBeansContext webBeansContext = WebBeansContext.currentInstance();\n             final BeanManagerImpl bm = webBeansContext.getBeanManagerImpl();\n-            if (bm.isInUse()) { // try cdi bean\n+            if (bm != null && bm.isInUse()) { // try cdi bean\n                 if (JAXWS_AS_CDI_BEANS) {\n                     try {\n                         final Set<Bean<?>> beans = bm.getBeans(instance);\n@@ -152,7 +152,7 @@ public PojoEndpoint(ClassLoader loader, Bus bus, PortData port, Context context,\n                 injectionProcessor.createInstance();\n                 implementor = injectionProcessor.getInstance();\n                 injector = injectCxfResources(implementor);\n-                if (!JAXWS_AS_CDI_BEANS && bm.isInUse()) {\n+                if (!JAXWS_AS_CDI_BEANS && bm != null && bm.isInUse()) {\n                     final CreationalContextImpl creationalContext = bm.createCreationalContext(null);\n                     OWBInjector.inject(bm, implementor, null);\n                     toClean = creationalContext;",
                "additions": 2,
                "raw_url": "https://github.com/apache/tomee/raw/dbde8c552ba69fa4060ae8b340b64b1e74a7b0fe/server/openejb-cxf/src/main/java/org/apache/openejb/server/cxf/pojo/PojoEndpoint.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "229a474dba3f0567fd2223562a52ad71207ac854",
                "blob_url": "https://github.com/apache/tomee/blob/dbde8c552ba69fa4060ae8b340b64b1e74a7b0fe/server/openejb-cxf/src/main/java/org/apache/openejb/server/cxf/pojo/PojoEndpoint.java",
                "filename": "server/openejb-cxf/src/main/java/org/apache/openejb/server/cxf/pojo/PojoEndpoint.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf/src/main/java/org/apache/openejb/server/cxf/pojo/PojoEndpoint.java?ref=dbde8c552ba69fa4060ae8b340b64b1e74a7b0fe"
            }
        ],
        "bug_id": "tomee_37",
        "parent": "https://github.com/apache/tomee/commit/c0e6d70f1b2ebef600ab4f3356d75ef3e5d415ea",
        "message": "TOMEE-1852 avoid NPE if cdi is not in use for jaxws",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/1554b1054c920ece474d18028b3c20c9444fc176",
        "file": [
            {
                "patch": "@@ -49,11 +49,9 @@\n import javax.enterprise.context.spi.Context;\n import javax.enterprise.util.AnnotationLiteral;\n import javax.inject.Singleton;\n-import javax.servlet.ServletRequest;\n import javax.servlet.ServletRequestEvent;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpSession;\n-import javax.servlet.http.HttpSessionEvent;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Constructor;\n import java.util.ArrayList;\n@@ -257,7 +255,9 @@ private void initRequestContext(final ServletRequestEvent event) {\n             final HttpServletRequest request = (HttpServletRequest) event.getServletRequest();\n             ((ServletRequestContext) rq).setServletRequest(request);\n \n-            webBeansContext.getBeanManagerImpl().fireEvent(request, InitializedLiteral.REQUEST);\n+            if (request != null) {\n+                webBeansContext.getBeanManagerImpl().fireEvent(request, InitializedLiteral.REQUEST);\n+            }\n \n             if (request != null) {\n                 //Re-initialize thread local for session\n@@ -283,7 +283,10 @@ private void destroyRequestContext() {\n \n         //Destroy context\n         if (context != null) {\n-            webBeansContext.getBeanManagerImpl().fireEvent(ServletRequestContext.class.cast(context).getServletRequest(), DestroyedLiteral.REQUEST);\n+            final HttpServletRequest servletRequest = ServletRequestContext.class.cast(context).getServletRequest();\n+            if (servletRequest != null) {\n+                webBeansContext.getBeanManagerImpl().fireEvent(servletRequest, DestroyedLiteral.REQUEST);\n+            }\n             context.destroy();\n         }\n ",
                "additions": 7,
                "raw_url": "https://github.com/apache/tomee/raw/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java",
                "status": "modified",
                "changes": 11,
                "deletions": 4,
                "sha": "e80306f29c003e89979e9dc20051212f36c9511a",
                "blob_url": "https://github.com/apache/tomee/blob/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java?ref=1554b1054c920ece474d18028b3c20c9444fc176"
            },
            {
                "patch": "@@ -19,7 +19,6 @@\n \n import org.apache.openejb.BeanContext;\n import org.apache.openejb.assembler.classic.ProxyInterfaceResolver;\n-import org.apache.webbeans.component.creation.BeanAttributesBuilder;\n import org.apache.webbeans.config.WebBeansContext;\n import org.apache.webbeans.ejb.common.component.EjbBeanBuilder;\n ",
                "additions": 0,
                "raw_url": "https://github.com/apache/tomee/raw/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBBeanBuilder.java",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "3f01ebbcc57249be2316b3c785730efd698bfd4c",
                "blob_url": "https://github.com/apache/tomee/blob/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBBeanBuilder.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBBeanBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBBeanBuilder.java?ref=1554b1054c920ece474d18028b3c20c9444fc176"
            },
            {
                "patch": "@@ -19,11 +19,9 @@\n \n import org.apache.webbeans.spi.ContextsService;\n \n-import javax.enterprise.context.ApplicationScoped;\n import javax.enterprise.context.ConversationScoped;\n import javax.enterprise.context.RequestScoped;\n import javax.enterprise.context.SessionScoped;\n-import javax.inject.Singleton;\n import javax.servlet.ServletContext;\n import javax.servlet.http.HttpSession;\n ",
                "additions": 0,
                "raw_url": "https://github.com/apache/tomee/raw/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/cdi/ScopeHelper.java",
                "status": "modified",
                "changes": 2,
                "deletions": 2,
                "sha": "57ce98ae0654c5ff07a12e59aeb0328c004b1de8",
                "blob_url": "https://github.com/apache/tomee/blob/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/cdi/ScopeHelper.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/ScopeHelper.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/ScopeHelper.java?ref=1554b1054c920ece474d18028b3c20c9444fc176"
            },
            {
                "patch": "@@ -187,7 +187,6 @@\n import javax.enterprise.context.NormalScope;\n import javax.enterprise.inject.Produces;\n import javax.enterprise.inject.Stereotype;\n-import javax.enterprise.inject.spi.BeanManager;\n import javax.enterprise.inject.spi.DefinitionException;\n import javax.enterprise.inject.spi.Extension;\n import javax.inject.Scope;",
                "additions": 0,
                "raw_url": "https://github.com/apache/tomee/raw/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "cee4c2eda138474b0325d30ec7744f38d14f27cb",
                "blob_url": "https://github.com/apache/tomee/blob/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=1554b1054c920ece474d18028b3c20c9444fc176"
            },
            {
                "patch": "@@ -19,10 +19,12 @@\n \n import org.apache.openejb.config.EjbModule;\n \n+import javax.enterprise.inject.Default;\n import javax.enterprise.inject.spi.DefinitionException;\n import javax.enterprise.inject.spi.InjectionPoint;\n import javax.inject.Inject;\n import javax.servlet.http.HttpServlet;\n+import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n \n /**\n@@ -42,7 +44,8 @@ public void validate(final EjbModule ejbModule) {\n                     continue;\n                 }\n \n-                if (field.getAnnotations().length == 1) {\n+                final Annotation[] annotations = field.getAnnotations();\n+                if (annotations.length == 1 || (annotations.length == 2 && field.getAnnotation(Default.class) != null)) {\n                     throw new DefinitionException(\"Can't inject InjectionPoint in \" + field.getDeclaringClass());\n                 } // else we should check is there is no other qualifier than @Default but too early\n             }",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckInjectionPointUsage.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "97b32f2ee454584aa3daf4255915d93b7d3b0f77",
                "blob_url": "https://github.com/apache/tomee/blob/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckInjectionPointUsage.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckInjectionPointUsage.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckInjectionPointUsage.java?ref=1554b1054c920ece474d18028b3c20c9444fc176"
            },
            {
                "patch": "@@ -18,8 +18,8 @@\n <suite name=\"CDI TCK\" verbose=\"0\">\n   <test name=\"CDI TCK\">\n     <!-- -Dopenejb.cdi.filter.classloader=false -Dorg.apache.openejb.assembler.classic.WebAppBuilder=org.apache.openejb.web.LightweightWebAppBuilder -Dopenejb.cdi.debug=true -Dopenejb.http.mock-request=true  -->\n-    <classes>\n-      <class name=\"org.jboss.cdi.tck.tests.context.request.event.RequestScopeEventTest\" />\n+    <classes><!-- org.jboss.cdi.tck.tests.context.conversation.ClientConversationContextTest, org.jboss.cdi.tck.tests.context.application.ApplicationContextTest, org.jboss.cdi.tck.tests.extensions.beanManager.beanAttributes.CreateBeanAttributesTest, org.jboss.cdi.tck.tests.event.fires.FireEventTest, org.jboss.cdi.tck.tests.extensions.lifecycle.processInjectionPoint.ProcessInjectionPointFiredTest -->\n+      <class name=\"org.jboss.cdi.tck.tests.context.application.async.ApplicationContextAsyncListenerTest\" />\n     </classes>\n   </test>\n </suite>",
                "additions": 2,
                "raw_url": "https://github.com/apache/tomee/raw/1554b1054c920ece474d18028b3c20c9444fc176/tck/cdi-embedded/src/test/resources/failing.xml",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "40f6f295c234ca1cccf2461f5663cccf1416eb34",
                "blob_url": "https://github.com/apache/tomee/blob/1554b1054c920ece474d18028b3c20c9444fc176/tck/cdi-embedded/src/test/resources/failing.xml",
                "filename": "tck/cdi-embedded/src/test/resources/failing.xml",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tck/cdi-embedded/src/test/resources/failing.xml?ref=1554b1054c920ece474d18028b3c20c9444fc176"
            }
        ],
        "bug_id": "tomee_38",
        "parent": "https://github.com/apache/tomee/commit/02818cc3878dde5647efdbd4537e7e8d28f77647",
        "message": "avoid npe when we fake requests",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/19646c2554d3c1d5d31fe4f09c52b6da708871a4",
        "file": [
            {
                "patch": "@@ -369,6 +369,7 @@ private static String relativize(final File f, final File base) {\n     public static void installArquillianBeanDiscoverer(final File home) {\n         final File destination = new File(home, TOMEE_BEAN_DISCOVERER_JAR);\n         ShrinkWrap.create(JavaArchive.class, destination.getName())\n+                .addManifest() // avoid NPE from org.apache.tomcat.util.scan.StandardJarScanner.processManifest()\n                 .addClasses(BeanDicovererInstaller.class, TestClassDiscoverer.class, ArquillianFilterRunner.class, Discover.class)\n                 .addAsManifestResource(new StringAsset(BeanDicovererInstaller.class.getName()), ArchivePaths.create(\"org.apache.openejb.extension\"))\n                 .as(ZipExporter.class).exportTo(destination, false);",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/19646c2554d3c1d5d31fe4f09c52b6da708871a4/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/Setup.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "83c7f95af422933d9ebfcd89ea32cce23ea2d6f8",
                "blob_url": "https://github.com/apache/tomee/blob/19646c2554d3c1d5d31fe4f09c52b6da708871a4/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/Setup.java",
                "filename": "arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/Setup.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/Setup.java?ref=19646c2554d3c1d5d31fe4f09c52b6da708871a4"
            },
            {
                "patch": "@@ -23,7 +23,6 @@\n import org.jboss.shrinkwrap.api.Archive;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n import org.jboss.shrinkwrap.api.spec.WebArchive;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -46,7 +45,6 @@\n     private URL base;\n \n     @Test\n-    @Ignore(\"we need to upgrade to tomcat 8.5.1 cause org.apache.catalina.connector.Response.applicationResponse init should be null and not this\")\n     public void run() throws IOException {\n         assertEquals(\"testtestnullguest\", IO.slurp(new URL(base.toExternalForm() + \"test?doLogin=true\")));\n     }",
                "additions": 0,
                "raw_url": "https://github.com/apache/tomee/raw/19646c2554d3c1d5d31fe4f09c52b6da708871a4/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/securityejb/SecurityEJBPropagationTest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 2,
                "sha": "d1c4500c04c642a5fbe82284d57921919a02c6ba",
                "blob_url": "https://github.com/apache/tomee/blob/19646c2554d3c1d5d31fe4f09c52b6da708871a4/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/securityejb/SecurityEJBPropagationTest.java",
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/securityejb/SecurityEJBPropagationTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/securityejb/SecurityEJBPropagationTest.java?ref=19646c2554d3c1d5d31fe4f09c52b6da708871a4"
            }
        ],
        "bug_id": "tomee_39",
        "parent": "https://github.com/apache/tomee/commit/b6cf7dee46b808869908ee512e9f865f3f015453",
        "message": "SecurityEJBPropagationTest now passes + avoid NPE cause of a missing MANIFEST.MF in internal arquillian jar",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/e97e264bdbdcc2e1bf677c5a7a297a334e0bf67b",
        "file": [
            {
                "patch": "@@ -36,9 +36,16 @@\n     @Override\n     public Map<Class<? extends Annotation>, Set<Class<?>>> getAnnotatedClasses(final ExternalContext ctx) {\n         final ClassLoader cl = getClassLoader();\n+\n         final WebAppBuilder builder = SystemInstance.get().getComponent(WebAppBuilder.class);\n-        final Map<Class<? extends Annotation>,Set<Class<?>>> map = new HashMap<Class<? extends Annotation>, Set<Class<?>>>();\n-        final Map<String, Set<String>> scanned = builder.getJsfClasses().get(cl);\n+        if (builder == null) throw new IllegalStateException(\"WebAppBuilder not found in SystemInstance\");\n+\n+        final Map<Class<? extends Annotation>, Set<Class<?>>> map = new HashMap<Class<? extends Annotation>, Set<Class<?>>>();\n+\n+        final Map<ClassLoader, Map<String, Set<String>>> jsfClasses = builder.getJsfClasses();\n+        if (builder == null) throw new IllegalStateException(\"JsfClasses not found in WebAppBuilder\");\n+\n+        final Map<String, Set<String>> scanned = jsfClasses.get(cl);\n         if (scanned == null) {\n             return Collections.emptyMap();\n         }",
                "additions": 9,
                "raw_url": "https://github.com/apache/tomee/raw/e97e264bdbdcc2e1bf677c5a7a297a334e0bf67b/tomee/tomee-myfaces/src/main/java/org/apache/tomee/myfaces/TomEEAnnotationProvider.java",
                "status": "modified",
                "changes": 11,
                "deletions": 2,
                "sha": "3a78f426f1ae1f690e2ae8143d8d34a231d2b76b",
                "blob_url": "https://github.com/apache/tomee/blob/e97e264bdbdcc2e1bf677c5a7a297a334e0bf67b/tomee/tomee-myfaces/src/main/java/org/apache/tomee/myfaces/TomEEAnnotationProvider.java",
                "filename": "tomee/tomee-myfaces/src/main/java/org/apache/tomee/myfaces/TomEEAnnotationProvider.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-myfaces/src/main/java/org/apache/tomee/myfaces/TomEEAnnotationProvider.java?ref=e97e264bdbdcc2e1bf677c5a7a297a334e0bf67b"
            }
        ],
        "bug_id": "tomee_40",
        "parent": "https://github.com/apache/tomee/commit/5cc9cbfde149dd196d571be51cc4ad7c0234176a",
        "message": " TOMEE-491 - NullPointerException in TomEEAnnotationProvider.getAnnotatedClasses\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1400515 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/02aecf19d74249103f7ac80a8b4e4ef2ffbe7fa4",
        "file": [
            {
                "patch": "@@ -75,9 +75,9 @@ public CdiResourceProvider(final ClassLoader loader, final Class<?> clazz, final\n         postConstructMethod = ResourceUtils.findPostConstructMethod(clazz);\n         preDestroyMethod = ResourceUtils.findPreDestroyMethod(clazz);\n \n-        bm = webbeansContext.getBeanManagerImpl();\n+        bm = webbeansContext == null ? null : webbeansContext.getBeanManagerImpl();\n         this.clazz = clazz;\n-        if (bm.isInUse()) {\n+        if (bm != null && bm.isInUse()) {\n             try {\n                 final Set<Bean<?>> beans = bm.getBeans(clazz);\n                 bean = bm.resolve(beans);\n@@ -331,13 +331,15 @@ protected void doInit() throws OpenEJBException {\n             injector = new InjectionProcessor<>(instance, new ArrayList<>(injections), InjectionProcessor.unwrap(context));\n             instance = injector.createInstance();\n \n-            final BeanManager bm = webbeansContext.getBeanManagerImpl();\n-            creationalContext = bm.createCreationalContext(null);\n+            final BeanManager bm = webbeansContext == null ? null : webbeansContext.getBeanManagerImpl();\n+            if (bm != null) {\n+                creationalContext = bm.createCreationalContext(null);\n \n-            try {\n-                OWBInjector.inject(bm, instance, creationalContext);\n-            } catch (final Exception e) {\n-                // ignored\n+                try {\n+                    OWBInjector.inject(bm, instance, creationalContext);\n+                } catch (final Exception e) {\n+                    // ignored\n+                }\n             }\n \n             // injector.postConstruct(); // it doesn't know it",
                "additions": 10,
                "raw_url": "https://github.com/apache/tomee/raw/02aecf19d74249103f7ac80a8b4e4ef2ffbe7fa4/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CdiResourceProvider.java",
                "status": "modified",
                "changes": 18,
                "deletions": 8,
                "sha": "fd1ad05d8f7ac853aa81ca71a857cde89227d4bd",
                "blob_url": "https://github.com/apache/tomee/blob/02aecf19d74249103f7ac80a8b4e4ef2ffbe7fa4/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CdiResourceProvider.java",
                "filename": "server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CdiResourceProvider.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CdiResourceProvider.java?ref=02aecf19d74249103f7ac80a8b4e4ef2ffbe7fa4"
            },
            {
                "patch": "@@ -887,7 +887,7 @@ private void configureFactory(final Collection<Object> givenAdditionalProviders,\n         if (comparatorClass == null) {\n             comparator = DefaultProviderComparator.INSTANCE;\n         } else {\n-            final BeanManagerImpl bm = ctx.getBeanManagerImpl();\n+            final BeanManagerImpl bm = ctx == null ? null : ctx.getBeanManagerImpl();\n             if (bm != null && bm.isInUse()) {\n                 try {\n                     final Class<?> clazz = Thread.currentThread().getContextClassLoader().loadClass(comparatorClass);",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/02aecf19d74249103f7ac80a8b4e4ef2ffbe7fa4/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "fe5e61319efc6a31f849f578fafe37e19ba72a08",
                "blob_url": "https://github.com/apache/tomee/blob/02aecf19d74249103f7ac80a8b4e4ef2ffbe7fa4/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java",
                "filename": "server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java?ref=02aecf19d74249103f7ac80a8b4e4ef2ffbe7fa4"
            },
            {
                "patch": "@@ -83,6 +83,9 @@ public void sessionCreated(HttpSessionEvent event) {\n      */\n     @Override\n     public void sessionDestroyed(final HttpSessionEvent event) {\n+        if (contextsService == null) {\n+            return;\n+        }\n         WebBeansListenerHelper.ensureRequestScope(contextsService, this);\n     }\n \n@@ -107,6 +110,9 @@ public void contextInitialized(ServletContextEvent servletContextEvent) {\n \n     @Override\n     public void contextDestroyed(ServletContextEvent servletContextEvent) {\n+        if (contextsService == null) {\n+            return;\n+        }\n         WebBeansListenerHelper.ensureRequestScope(contextsService, this);\n     }\n }",
                "additions": 6,
                "raw_url": "https://github.com/apache/tomee/raw/02aecf19d74249103f7ac80a8b4e4ef2ffbe7fa4/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/EndWebBeansListener.java",
                "status": "modified",
                "changes": 6,
                "deletions": 0,
                "sha": "722c56ce0ebfd8d8b307fd232b08af41c41038d7",
                "blob_url": "https://github.com/apache/tomee/blob/02aecf19d74249103f7ac80a8b4e4ef2ffbe7fa4/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/EndWebBeansListener.java",
                "filename": "server/openejb-http/src/main/java/org/apache/openejb/server/httpd/EndWebBeansListener.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/EndWebBeansListener.java?ref=02aecf19d74249103f7ac80a8b4e4ef2ffbe7fa4"
            },
            {
                "patch": "@@ -144,7 +144,7 @@ public void afterApplicationCreated(final AppInfo appInfo, final WebAppInfo webA\n                     try {\n                         appClazz = classLoader.loadClass(app);\n                         application = Application.class.cast(appClazz.newInstance());\n-                        if (owbCtx.getBeanManagerImpl().isInUse()) {\n+                        if (owbCtx != null && owbCtx.getBeanManagerImpl().isInUse()) {\n                             try {\n                                 webContext.inject(application);\n                             } catch (final Exception e) {",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/02aecf19d74249103f7ac80a8b4e4ef2ffbe7fa4/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "e249e4cd7c5ad7e57a87d02e85e9670da5664234",
                "blob_url": "https://github.com/apache/tomee/blob/02aecf19d74249103f7ac80a8b4e4ef2ffbe7fa4/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "filename": "server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java?ref=02aecf19d74249103f7ac80a8b4e4ef2ffbe7fa4"
            }
        ],
        "bug_id": "tomee_41",
        "parent": "https://github.com/apache/tomee/commit/60a2e64f600938561182969868440e74f223adba",
        "message": "few more NPE protection against no webbeans context",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/6b20394bd119d073020238dd29ef812ec9c613f7",
        "file": [
            {
                "patch": "@@ -397,6 +397,7 @@ public void mergeRef(NamingResources naming, ResourceEnvReferenceInfo ref) {\n \n         if (UserTransaction.class.getName().equals(ref.resourceEnvRefType)) {\n             resourceEnv.setProperty(Constants.FACTORY, UserTransactionFactory.class.getName());\n+            resourceEnv.setType(ref.resourceEnvRefType);\n         } else {\n             resourceEnv.setProperty(Constants.FACTORY, ResourceFactory.class.getName());\n             resourceEnv.setProperty(NAME, ref.resourceEnvRefName);",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/6b20394bd119d073020238dd29ef812ec9c613f7/assembly/openejb-tomcat/openejb-tomcat-catalina/src/main/java/org/apache/openejb/tomcat/catalina/TomcatJndiBuilder.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "fad9fd1201287a41bfd37ba05cac996fff408c9f",
                "blob_url": "https://github.com/apache/tomee/blob/6b20394bd119d073020238dd29ef812ec9c613f7/assembly/openejb-tomcat/openejb-tomcat-catalina/src/main/java/org/apache/openejb/tomcat/catalina/TomcatJndiBuilder.java",
                "filename": "assembly/openejb-tomcat/openejb-tomcat-catalina/src/main/java/org/apache/openejb/tomcat/catalina/TomcatJndiBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/assembly/openejb-tomcat/openejb-tomcat-catalina/src/main/java/org/apache/openejb/tomcat/catalina/TomcatJndiBuilder.java?ref=6b20394bd119d073020238dd29ef812ec9c613f7"
            }
        ],
        "bug_id": "tomee_42",
        "parent": "https://github.com/apache/tomee/commit/86439e1de99fdd23d8bd522bb71a190f2696070a",
        "message": "Readded OPENEJB-1044: Webapp @Resource UserTransaction injection results in NullPointerException\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@823757 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/87120faad06a30e4dc898bc2492d155bc811ea1d",
        "file": [
            {
                "patch": "@@ -0,0 +1,66 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.arquillian.embedded;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.EmptyAsset;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.jboss.shrinkwrap.descriptor.api.Descriptors;\n+import org.jboss.shrinkwrap.descriptor.api.webapp31.WebAppDescriptor;\n+import org.jboss.shrinkwrap.descriptor.api.webcommon31.WebAppVersionType;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.ws.rs.client.ClientBuilder;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(Arquillian.class)\n+public class JAXRSWebXmlMappingTest {\n+    @Deployment(testable = false)\n+    public static Archive<?> app() {\n+        return ShrinkWrap.create(WebArchive.class, JAXRSWebXmlMappingTest.class.getSimpleName() + \".war\")\n+            .addClass(ARestService.class)\n+            .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n+            .setWebXML(new StringAsset(\n+                Descriptors.create(WebAppDescriptor.class)\n+                    .version(WebAppVersionType._3_1)\n+                    .getOrCreateServlet().servletName(\"javax.ws.rs.core.Application\")\n+                    .getOrCreateInitParam().paramName(\"javax.ws.rs.Application\").paramValue(SimpleApp.class.getName()).up()\n+                    .up()\n+                    .getOrCreateServletMapping().servletName(\"javax.ws.rs.core.Application\").urlPattern(\"/rs/*\").up()\n+                    .exportAsString()\n+            ));\n+    }\n+\n+    @ArquillianResource\n+    private URL base;\n+\n+    @Test\n+    public void noNpe() throws MalformedURLException { // TOMEE-1718\n+        assertEquals(\n+            \"foo\",\n+            ClientBuilder.newBuilder().build().target(new URL(base, \"rs/rest/foo\").toExternalForm()).request().get(String.class));\n+    }\n+}",
                "additions": 66,
                "raw_url": "https://github.com/apache/tomee/raw/87120faad06a30e4dc898bc2492d155bc811ea1d/arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/JAXRSWebXmlMappingTest.java",
                "status": "added",
                "changes": 66,
                "deletions": 0,
                "sha": "ae4456c59b13d67058d360e96da60ef9aa49764c",
                "blob_url": "https://github.com/apache/tomee/blob/87120faad06a30e4dc898bc2492d155bc811ea1d/arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/JAXRSWebXmlMappingTest.java",
                "filename": "arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/JAXRSWebXmlMappingTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/JAXRSWebXmlMappingTest.java?ref=87120faad06a30e4dc898bc2492d155bc811ea1d"
            },
            {
                "patch": "@@ -0,0 +1,22 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openejb.arquillian.embedded;\n+\n+import javax.ws.rs.core.Application;\n+\n+public class SimpleApp extends Application {\n+}",
                "additions": 22,
                "raw_url": "https://github.com/apache/tomee/raw/87120faad06a30e4dc898bc2492d155bc811ea1d/arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/SimpleApp.java",
                "status": "added",
                "changes": 22,
                "deletions": 0,
                "sha": "72a560efcedd619e999b512ae84dad3111d07637",
                "blob_url": "https://github.com/apache/tomee/blob/87120faad06a30e4dc898bc2492d155bc811ea1d/arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/SimpleApp.java",
                "filename": "arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/SimpleApp.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/SimpleApp.java?ref=87120faad06a30e4dc898bc2492d155bc811ea1d"
            },
            {
                "patch": "@@ -2211,12 +2211,23 @@ public WebModule deploy(final WebModule webModule) throws OpenEJBException {\n              */\n             for (final Servlet servlet : webApp.getServlet()) {\n                 final String servletName = servlet.getServletName();\n-                if (\"javax.ws.rs.core.Application\".equals(servletName)) {\n-                    servlet.setServletName(ProvidedJAXRSApplication.class.getName());\n-                    webModule.getRestApplications().add(ProvidedJAXRSApplication.class.getName());\n-                    for (final ServletMapping mapping : webApp.getServletMapping()) {\n-                        if (servletName.equals(mapping.getServletName())) {\n-                            mapping.setServletName(ProvidedJAXRSApplication.class.getName());\n+                if (\"javax.ws.rs.core.Application\".equals(servletName) || \"javax.ws.rs.Application\".equals(servletName)) {\n+                    // check first if there is a real application as init param\n+                    boolean done = false;\n+                    for (final ParamValue pv : servlet.getInitParam()) {\n+                        if (\"javax.ws.rs.core.Application\".equals(pv.getParamName()) || \"javax.ws.rs.Application\".equals(pv.getParamName())) {\n+                            webModule.getRestApplications().add(pv.getParamValue());\n+                            done = true;\n+                            break;\n+                        }\n+                    }\n+                    if (!done) {\n+                        servlet.setServletName(ProvidedJAXRSApplication.class.getName());\n+                        webModule.getRestApplications().add(ProvidedJAXRSApplication.class.getName());\n+                        for (final ServletMapping mapping : webApp.getServletMapping()) {\n+                            if (servletName.equals(mapping.getServletName())) {\n+                                mapping.setServletName(ProvidedJAXRSApplication.class.getName());\n+                            }\n                         }\n                     }\n                     continue;",
                "additions": 17,
                "raw_url": "https://github.com/apache/tomee/raw/87120faad06a30e4dc898bc2492d155bc811ea1d/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "status": "modified",
                "changes": 23,
                "deletions": 6,
                "sha": "2d4569abef7db9261ebb63c214b25b34660989be",
                "blob_url": "https://github.com/apache/tomee/blob/87120faad06a30e4dc898bc2492d155bc811ea1d/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=87120faad06a30e4dc898bc2492d155bc811ea1d"
            },
            {
                "patch": "@@ -201,7 +201,9 @@ private void cleanUpRestServlets() {\n                 try { // remove only \"fake\" servlets to let users use their own stuff\n                     if (child != null) {\n                         final String servletClass = StandardWrapper.class.cast(child).getServletClass();\n-                        if (\"org.apache.openejb.server.rest.OpenEJBRestServlet\".equals(servletClass) || !HttpServlet.class.isAssignableFrom(info.loader().loadClass(servletClass))) {\n+                        if (servletClass == null\n+                            || \"org.apache.openejb.server.rest.OpenEJBRestServlet\".equals(servletClass)\n+                            || !HttpServlet.class.isAssignableFrom(info.loader().loadClass(servletClass))) {\n                             context.removeChild(child);\n                         }\n                     }",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/87120faad06a30e4dc898bc2492d155bc811ea1d/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContextConfig.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "910bffad8545533d6d47a036f50caa77e960470e",
                "blob_url": "https://github.com/apache/tomee/blob/87120faad06a30e4dc898bc2492d155bc811ea1d/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContextConfig.java",
                "filename": "tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContextConfig.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContextConfig.java?ref=87120faad06a30e4dc898bc2492d155bc811ea1d"
            }
        ],
        "bug_id": "tomee_43",
        "parent": "https://github.com/apache/tomee/commit/3bf5aa10582c015f61954030273367f4b8ea69ec",
        "message": "TOMEE-1718 avoid NPE when jaxrs application if configured without a servlet class",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/7da9d6f0882d20c6e41b1481ae62560186c3d771",
        "file": [
            {
                "patch": "@@ -405,10 +405,12 @@ public int getLocalPort() {\n      * @param input the data input for this page\n      * @throws java.io.IOException if an exception is thrown\n      */\n-    protected void readMessage(InputStream input) throws IOException {\n+    protected boolean readMessage(InputStream input) throws IOException {\n         final DataInput di = new DataInputStream(input);\n \n-        readRequestLine(di);\n+        if (!readRequestLine(di)) {\n+            return false;\n+        }\n         readHeaders(di);\n         readBody(di);\n \n@@ -431,6 +433,7 @@ protected void readMessage(InputStream input) throws IOException {\n                 }\n             }\n         }\n+        return true;\n     }\n \n     public void print(final Logger log, boolean formatXml) {\n@@ -460,7 +463,7 @@ public void print(final Logger log, boolean formatXml) {\n      * @param in the input to be read\n      * @throws java.io.IOException if an exception is thrown\n      */\n-    private void readRequestLine(DataInput in) throws IOException {\n+    private boolean readRequestLine(DataInput in) throws IOException {\n         String line;\n         try {\n             line = in.readLine();\n@@ -471,12 +474,16 @@ private void readRequestLine(DataInput in) throws IOException {\n                 + \" : \"\n                 + e.getMessage());\n         }\n+        if (line == null) {\n+            return false;\n+        }\n \n         StringTokenizer lineParts = new StringTokenizer(line, \" \");\n         /* [1] Parse the method */\n         parseMethod(lineParts);\n         /* [2] Parse the URI */\n         parseURI(lineParts);\n+        return true;\n     }\n \n     /**",
                "additions": 10,
                "raw_url": "https://github.com/apache/tomee/raw/7da9d6f0882d20c6e41b1481ae62560186c3d771/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java",
                "status": "modified",
                "changes": 13,
                "deletions": 3,
                "sha": "4cd69ec8fa7ab8975fd6c112b7a7dd9f86786e5e",
                "blob_url": "https://github.com/apache/tomee/blob/7da9d6f0882d20c6e41b1481ae62560186c3d771/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java",
                "filename": "server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java?ref=7da9d6f0882d20c6e41b1481ae62560186c3d771"
            },
            {
                "patch": "@@ -230,7 +230,9 @@ private HttpResponseImpl process(final Socket socket, final URI socketURI, final\n         final HttpResponseImpl res = new HttpResponseImpl();\n \n         try {\n-            req.readMessage(in);\n+            if (!req.readMessage(in)) {\n+                return res;\n+            }\n \n             if (print.size() > 0 && print.contains(Output.REQUEST)) {\n                 req.print(log, indent);",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/7da9d6f0882d20c6e41b1481ae62560186c3d771/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/OpenEJBHttpServer.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "33f358c1d53f3ed3db83883f69f64e54fad03347",
                "blob_url": "https://github.com/apache/tomee/blob/7da9d6f0882d20c6e41b1481ae62560186c3d771/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/OpenEJBHttpServer.java",
                "filename": "server/openejb-http/src/main/java/org/apache/openejb/server/httpd/OpenEJBHttpServer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/OpenEJBHttpServer.java?ref=7da9d6f0882d20c6e41b1481ae62560186c3d771"
            }
        ],
        "bug_id": "tomee_44",
        "parent": "https://github.com/apache/tomee/commit/a0c37da955c1f40652862fb8847d497838e47d66",
        "message": "avoid NPE is inputstream of a http request is empty",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/ca77a1cd121d16ced344ec010bb0046b1d15cc2b",
        "file": [
            {
                "patch": "@@ -856,18 +856,22 @@ void process(final ClassLoader cl, final String cls, final Object object) {\n                     }\n \n                     if (!containsConfigProperty(configProperties, name)) {\n-                        if (type != null) {\n-                            final ConfigProperty configProperty = new ConfigProperty();\n-                            configProperties.add(configProperty);\n+                        final ConfigProperty configProperty = new ConfigProperty();\n+                        configProperties.add(configProperty);\n \n-                            Object value = null;\n+                        Object value = null;\n+                        if (propertyDescriptor.getReadMethod() != null) {\n                             try {\n                                 value = propertyDescriptor.getReadMethod().invoke(o);\n                             } catch (final Exception e) {\n                                 // no-op\n                             }\n+                        }\n \n-                            javax.resource.spi.ConfigProperty annotation = propertyDescriptor.getWriteMethod().getAnnotation(javax.resource.spi.ConfigProperty.class);\n+                        final Method write = propertyDescriptor.getWriteMethod();\n+                        javax.resource.spi.ConfigProperty annotation = null;\n+                        if (write != null) {\n+                            annotation = write.getAnnotation(javax.resource.spi.ConfigProperty.class);\n                             if (annotation == null) {\n                                 try {\n                                     // if there's no annotation on the setter, we'll try and scrape one off the field itself (assuming the same name)\n@@ -876,22 +880,22 @@ void process(final ClassLoader cl, final String cls, final Object object) {\n                                     // no-op : getDeclaredField() throws exceptions and does not return null\n                                 }\n                             }\n+                        }\n \n-                            configProperty.setConfigPropertyName(name);\n-                            configProperty.setConfigPropertyType(getConfigPropertyType(annotation, type));\n-                            if (value != null) {\n-                                configProperty.setConfigPropertyValue(value.toString());\n-                            }\n+                        configProperty.setConfigPropertyName(name);\n+                        configProperty.setConfigPropertyType(getConfigPropertyType(annotation, type));\n+                        if (value != null) {\n+                            configProperty.setConfigPropertyValue(value.toString());\n+                        }\n \n-                            if (annotation != null) {\n-                                if (annotation.defaultValue() != null && annotation.defaultValue().length() > 0) {\n-                                    configProperty.setConfigPropertyValue(annotation.defaultValue());\n-                                }\n-                                configProperty.setConfigPropertyConfidential(annotation.confidential());\n-                                configProperty.setConfigPropertyIgnore(annotation.ignore());\n-                                configProperty.setConfigPropertySupportsDynamicUpdates(annotation.supportsDynamicUpdates());\n-                                configProperty.setDescriptions(stringsToTexts(annotation.description()));\n+                        if (annotation != null) {\n+                            if (annotation.defaultValue() != null && annotation.defaultValue().length() > 0) {\n+                                configProperty.setConfigPropertyValue(annotation.defaultValue());\n                             }\n+                            configProperty.setConfigPropertyConfidential(annotation.confidential());\n+                            configProperty.setConfigPropertyIgnore(annotation.ignore());\n+                            configProperty.setConfigPropertySupportsDynamicUpdates(annotation.supportsDynamicUpdates());\n+                            configProperty.setDescriptions(stringsToTexts(annotation.description()));\n                         }\n                     }\n                 }",
                "additions": 22,
                "raw_url": "https://github.com/apache/tomee/raw/ca77a1cd121d16ced344ec010bb0046b1d15cc2b/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "status": "modified",
                "changes": 40,
                "deletions": 18,
                "sha": "93fcf5bbdf89047bf15b47459992735d5a02a91c",
                "blob_url": "https://github.com/apache/tomee/blob/ca77a1cd121d16ced344ec010bb0046b1d15cc2b/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=ca77a1cd121d16ced344ec010bb0046b1d15cc2b"
            },
            {
                "patch": "@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.config;\n+\n+import org.apache.openejb.jee.ConfigProperty;\n+import org.apache.openejb.jee.ConnectionDefinition;\n+import org.apache.openejb.jee.Connector;\n+import org.apache.openejb.jee.OutboundResourceAdapter;\n+import org.apache.openejb.jee.ResourceAdapter;\n+import org.apache.openejb.junit.ApplicationComposer;\n+import org.apache.openejb.loader.SystemInstance;\n+import org.apache.openejb.spi.ContainerSystem;\n+import org.apache.openejb.testing.Module;\n+import org.apache.openejb.testing.SimpleLog;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.annotation.Resource;\n+import javax.naming.NamingException;\n+import javax.resource.ResourceException;\n+import javax.resource.cci.ConnectionFactory;\n+import javax.resource.spi.ActivationSpec;\n+import javax.resource.spi.BootstrapContext;\n+import javax.resource.spi.ConnectionEventListener;\n+import javax.resource.spi.ConnectionManager;\n+import javax.resource.spi.ConnectionRequestInfo;\n+import javax.resource.spi.LocalTransaction;\n+import javax.resource.spi.ManagedConnection;\n+import javax.resource.spi.ManagedConnectionFactory;\n+import javax.resource.spi.ManagedConnectionMetaData;\n+import javax.resource.spi.ResourceAdapterInternalException;\n+import javax.resource.spi.ValidatingManagedConnectionFactory;\n+import javax.resource.spi.endpoint.MessageEndpointFactory;\n+import javax.security.auth.Subject;\n+import javax.transaction.xa.XAResource;\n+import java.io.PrintWriter;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+@SimpleLog\n+@RunWith(ApplicationComposer.class)\n+public class GetterConnectorTest {\n+    @Module\n+    public Connector connector() {\n+        final ConfigProperty configProperty = new ConfigProperty();\n+        configProperty.setConfigPropertyName(\"conf\");\n+        configProperty.setConfigPropertyType(String.class.getName());\n+        configProperty.setConfigPropertyValue(\"GetterConnectorTest\");\n+\n+        final ConnectionDefinition connectionDefinition = new ConnectionDefinition();\n+        connectionDefinition.setConnectionFactoryImplClass(MyMcf.class.getName());\n+        connectionDefinition.setConnectionInterface(ConnectionFactory.class.getName());\n+\n+        final OutboundResourceAdapter out = new OutboundResourceAdapter();\n+        out.getConnectionDefinition().add(connectionDefinition);\n+\n+        final ResourceAdapter ra = new ResourceAdapter();\n+        ra.setResourceAdapterClass(MyRa.class.getName());\n+        ra.getConfigProperty().add(configProperty);\n+\n+        final Connector connector = new Connector();\n+        connector.setVersion(\"1.7\");\n+        connector.setResourceAdapter(ra);\n+        return connector;\n+    }\n+\n+    @Test\n+    public void run() throws NamingException {\n+        // https://issues.apache.org/jira/browse/TOMEE-1817 is a NPE so if started we are good\n+        final MyRa ra = MyRa.class.cast(SystemInstance.get().getComponent(ContainerSystem.class).getJNDIContext().lookup(\"openejb:Resource/connectorRA\"));\n+        assertNotNull(ra);\n+        assertEquals(\"GetterConnectorTest\", ra.getConf());\n+    }\n+\n+    public static class MyRa implements javax.resource.spi.ResourceAdapter {\n+        @javax.resource.spi.ConfigProperty\n+        private String conf;\n+\n+        private String TOMEE1817;\n+\n+        public String getTOMEE1817() { // getter without setter\n+            return TOMEE1817;\n+        }\n+\n+        public String getConf() {\n+            return conf;\n+        }\n+\n+        public void setConf(final String conf) {\n+            this.conf = conf;\n+        }\n+\n+        @Override\n+        public void start(final BootstrapContext ctx) throws ResourceAdapterInternalException {\n+            // no-op\n+        }\n+\n+        @Override\n+        public void stop() {\n+            // no-op\n+        }\n+\n+        @Override\n+        public void endpointActivation(final MessageEndpointFactory endpointFactory, final ActivationSpec spec) throws ResourceException {\n+            // no-op\n+        }\n+\n+        @Override\n+        public void endpointDeactivation(final MessageEndpointFactory endpointFactory, final ActivationSpec spec) {\n+            // no-op\n+        }\n+\n+        @Override\n+        public XAResource[] getXAResources(final ActivationSpec[] specs) throws ResourceException {\n+            return new XAResource[0];\n+        }\n+    }\n+    public static class MyMcf implements ManagedConnectionFactory, ValidatingManagedConnectionFactory {\n+        private final Set<ManagedConnection> connections = new HashSet<>();\n+        private final AtomicBoolean evicted = new AtomicBoolean(false);\n+        private final AtomicBoolean destroyed = new AtomicBoolean(false);\n+\n+        @Override\n+        public Object createConnectionFactory(final ConnectionManager cxManager) throws ResourceException {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object createConnectionFactory() throws ResourceException {\n+            return null;\n+        }\n+\n+        @Override\n+        public ManagedConnection createManagedConnection(final Subject subject, final ConnectionRequestInfo cxRequestInfo) throws ResourceException {\n+            return new ManagedConnection() {\n+                @Override\n+                public Object getConnection(Subject subject, ConnectionRequestInfo cxRequestInfo) throws ResourceException {\n+                    connections.add(this);\n+                    return this;\n+                }\n+\n+                @Override\n+                public void destroy() throws ResourceException {\n+                    connections.remove(this);\n+                    destroyed.set(true);\n+                }\n+\n+                @Override\n+                public void cleanup() throws ResourceException {\n+                    // no-op\n+                }\n+\n+                @Override\n+                public void associateConnection(Object connection) throws ResourceException {\n+                    // no-op\n+                }\n+\n+                @Override\n+                public void addConnectionEventListener(ConnectionEventListener listener) {\n+                    // no-op\n+                }\n+\n+                @Override\n+                public void removeConnectionEventListener(ConnectionEventListener listener) {\n+                    // no-op\n+                }\n+\n+                @Override\n+                public XAResource getXAResource() throws ResourceException {\n+                    return null;\n+                }\n+\n+                @Override\n+                public LocalTransaction getLocalTransaction() throws ResourceException {\n+                    return new LocalTransaction() {\n+                        @Override\n+                        public void begin() throws ResourceException {\n+\n+                        }\n+\n+                        @Override\n+                        public void commit() throws ResourceException {\n+\n+                        }\n+\n+                        @Override\n+                        public void rollback() throws ResourceException {\n+\n+                        }\n+                    };\n+                }\n+\n+                @Override\n+                public ManagedConnectionMetaData getMetaData() throws ResourceException {\n+                    return null;\n+                }\n+\n+                @Override\n+                public void setLogWriter(PrintWriter out) throws ResourceException {\n+                    // no-op\n+                }\n+\n+                @Override\n+                public PrintWriter getLogWriter() throws ResourceException {\n+                    return null;\n+                }\n+            };\n+        }\n+\n+        @Override\n+        public ManagedConnection matchManagedConnections(final Set connectionSet, final Subject subject,\n+                                                         final ConnectionRequestInfo cxRequestInfo) throws ResourceException {\n+            return null;\n+        }\n+\n+        @Override\n+        public void setLogWriter(PrintWriter out) throws ResourceException {\n+            // no-op\n+        }\n+\n+        @Override\n+        public PrintWriter getLogWriter() throws ResourceException {\n+            return null;\n+        }\n+\n+        @Override\n+        public Set getInvalidConnections(final Set connectionSet) throws ResourceException {\n+            evicted.set(true);\n+            return connections;\n+        }\n+    }\n+}",
                "additions": 250,
                "raw_url": "https://github.com/apache/tomee/raw/ca77a1cd121d16ced344ec010bb0046b1d15cc2b/container/openejb-core/src/test/java/org/apache/openejb/config/GetterConnectorTest.java",
                "status": "added",
                "changes": 250,
                "deletions": 0,
                "sha": "7e673316e3e6f1da90ba4cc56f2c708638b0ad74",
                "blob_url": "https://github.com/apache/tomee/blob/ca77a1cd121d16ced344ec010bb0046b1d15cc2b/container/openejb-core/src/test/java/org/apache/openejb/config/GetterConnectorTest.java",
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/config/GetterConnectorTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/config/GetterConnectorTest.java?ref=ca77a1cd121d16ced344ec010bb0046b1d15cc2b"
            }
        ],
        "bug_id": "tomee_45",
        "parent": "https://github.com/apache/tomee/commit/5868a43c757405870e561aad6fa09ebd50623057",
        "message": "TOMEE-1817 avoid NPE if a RA has a getter which is not supposed to be handled by the container",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/39d2f255dbc979708a27c3ac339a587b22b02eb3",
        "file": [
            {
                "patch": "@@ -831,7 +831,7 @@ public static EjbModule addWebModule(final WebModule webModule, final AppModule\n         {\n             final Object pXml = appModule.getAltDDs().get(\"persistence.xml\");\n \n-            List<URL> persistenceXmls = List.class.isInstance(pXml) ? (List<URL>) pXml : new ArrayList<>(asList(URL.class.cast(pXml)));\n+            List<URL> persistenceXmls = pXml == null ? null : (List.class.isInstance(pXml) ? (List<URL>) pXml : new ArrayList<>(asList(URL.class.cast(pXml))));\n             if (persistenceXmls == null) {\n                 persistenceXmls = new ArrayList<>();\n                 appModule.getAltDDs().put(\"persistence.xml\", persistenceXmls);",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/39d2f255dbc979708a27c3ac339a587b22b02eb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "b74e526e88016896187d6c0d936dfb27504eecc9",
                "blob_url": "https://github.com/apache/tomee/blob/39d2f255dbc979708a27c3ac339a587b22b02eb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=39d2f255dbc979708a27c3ac339a587b22b02eb3"
            },
            {
                "patch": "@@ -32,7 +32,7 @@\n     <plugins>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-compiler-plugin</artifactId>\r\n+        <artifactId>maven-compiler-plugin</artifactId>\n         <version>3.1</version>\n         <configuration>\n           <source>1.7</source>\n@@ -74,6 +74,12 @@\n       <artifactId>cucumber-openejb</artifactId>\n       <version>1.0.10</version>\n       <scope>test</scope>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.apache.openejb</groupId>\n+          <artifactId>openejb-core</artifactId>\n+        </exclusion>\n+      </exclusions>\n     </dependency>\n     <dependency>\n       <groupId>info.cukes</groupId>",
                "additions": 7,
                "raw_url": "https://github.com/apache/tomee/raw/39d2f255dbc979708a27c3ac339a587b22b02eb3/examples/cucumber-jvm/pom.xml",
                "status": "modified",
                "changes": 8,
                "deletions": 1,
                "sha": "de06eab77b73c5ad6335f503b8aa8dc0660f5ba5",
                "blob_url": "https://github.com/apache/tomee/blob/39d2f255dbc979708a27c3ac339a587b22b02eb3/examples/cucumber-jvm/pom.xml",
                "filename": "examples/cucumber-jvm/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/examples/cucumber-jvm/pom.xml?ref=39d2f255dbc979708a27c3ac339a587b22b02eb3"
            },
            {
                "patch": "@@ -72,8 +72,8 @@ public void test() throws Exception {\n         //        System.setProperty(\"version\", OpenEjbVersion.get().getVersion());\n         System.setProperty(\"openejb.client.connection.strategy\", \"roundrobin\");\n \n-        logger.info(\"Retrieving standalone server: \" + Repository.guessVersion(\"org.apache.tomee\", \"openejb-standalone\") + \" - This may take a while...\");\n-        final File zip = Repository.getArtifact(\"org.apache.tomee\", \"openejb-standalone\", \"zip\");\n+        logger.info(\"Retrieving standalone server: \" + Repository.guessVersion(\"org.apache.openejb\", \"openejb-standalone\") + \" - This may take a while...\");\n+        final File zip = Repository.getArtifact(\"org.apache.openejb\", \"openejb-standalone\", \"zip\");\n         final File app = Repository.getArtifact(\"org.apache.openejb.itests\", \"failover-ejb\", \"jar\");\n \n         final File dir = Files.tmpdir();",
                "additions": 2,
                "raw_url": "https://github.com/apache/tomee/raw/39d2f255dbc979708a27c3ac339a587b22b02eb3/itests/legacy-server/src/test/java/org/apache/openejb/itest/legacy/LegacyServerTest.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "fd4d7654e426d945a9d71b40b6308c84997072a6",
                "blob_url": "https://github.com/apache/tomee/blob/39d2f255dbc979708a27c3ac339a587b22b02eb3/itests/legacy-server/src/test/java/org/apache/openejb/itest/legacy/LegacyServerTest.java",
                "filename": "itests/legacy-server/src/test/java/org/apache/openejb/itest/legacy/LegacyServerTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/itests/legacy-server/src/test/java/org/apache/openejb/itest/legacy/LegacyServerTest.java?ref=39d2f255dbc979708a27c3ac339a587b22b02eb3"
            }
        ],
        "bug_id": "tomee_46",
        "parent": "https://github.com/apache/tomee/commit/961371dd1c0ee4386177395d5e797aad04952c15",
        "message": "fixing some test + avoiding npe when no p.xml is found at appmodule level",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/29a0ea1e2070a708f6f7c756cf158ec028b54731",
        "file": [
            {
                "patch": "@@ -149,6 +149,10 @@ private void updateProperties(final SuperProperties properties, final Properties\n             }\n         }\n \n+        if (!converted.containsKey(\"Password\")) {\n+            converted.setProperty(\"password\", \"\");\n+        }\n+\n         final String currentUrl = properties.getProperty(\"url\");\n         if (currentUrl != null) {\n             try {",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/29a0ea1e2070a708f6f7c756cf158ec028b54731/tomee/tomee-jdbc/src/main/java/org/apache/tomee/jdbc/TomEEDataSourceCreator.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "c6260105d52fa7b7bd68ff4b7db1d6dc080c1235",
                "blob_url": "https://github.com/apache/tomee/blob/29a0ea1e2070a708f6f7c756cf158ec028b54731/tomee/tomee-jdbc/src/main/java/org/apache/tomee/jdbc/TomEEDataSourceCreator.java",
                "filename": "tomee/tomee-jdbc/src/main/java/org/apache/tomee/jdbc/TomEEDataSourceCreator.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-jdbc/src/main/java/org/apache/tomee/jdbc/TomEEDataSourceCreator.java?ref=29a0ea1e2070a708f6f7c756cf158ec028b54731"
            }
        ],
        "bug_id": "tomee_47",
        "parent": "https://github.com/apache/tomee/commit/4dfbb48ef7c2b472728bf5e37d2e9af3740feb83",
        "message": "avoiding NPE in tomcat datasource creator\nTOMEE-586: Fix NPE in Tomcat datasource creator\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1402801 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/3a2d915422c6089890a7f668f73fe968bfdc3944",
        "file": [
            {
                "patch": "@@ -64,6 +64,7 @@\n import org.apache.openejb.jee.ServiceImplBean;\n import org.apache.openejb.jee.Servlet;\n import org.apache.openejb.jee.SessionConfig;\n+import org.apache.openejb.jee.TransactionSupportType;\n import org.apache.openejb.jee.WebApp;\n import org.apache.openejb.jee.WebserviceDescription;\n import org.apache.openejb.jee.Webservices;\n@@ -515,16 +516,19 @@ private void buildConnectorModules(final AppModule appModule, final AppInfo appI\n             final OutboundResourceAdapter outbound = resourceAdapter.getOutboundResourceAdapter();\n             if (outbound != null) {\n                 String transactionSupport = \"none\";\n-                switch (outbound.getTransactionSupport()) {\n-                    case LOCAL_TRANSACTION:\n-                        transactionSupport = \"local\";\n-                        break;\n-                    case NO_TRANSACTION:\n-                        transactionSupport = \"none\";\n-                        break;\n-                    case XA_TRANSACTION:\n-                        transactionSupport = \"xa\";\n-                        break;\n+                final TransactionSupportType transactionSupportType = outbound.getTransactionSupport();\n+                if (transactionSupportType != null) {\n+                    switch (transactionSupportType) {\n+                        case LOCAL_TRANSACTION:\n+                            transactionSupport = \"local\";\n+                            break;\n+                        case NO_TRANSACTION:\n+                            transactionSupport = \"none\";\n+                            break;\n+                        case XA_TRANSACTION:\n+                            transactionSupport = \"xa\";\n+                            break;\n+                    }\n                 }\n                 for (final ConnectionDefinition connection : outbound.getConnectionDefinition()) {\n ",
                "additions": 14,
                "raw_url": "https://github.com/apache/tomee/raw/3a2d915422c6089890a7f668f73fe968bfdc3944/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "status": "modified",
                "changes": 24,
                "deletions": 10,
                "sha": "a8f3d6e23ffe3d5c32f784e60660e96666440638",
                "blob_url": "https://github.com/apache/tomee/blob/3a2d915422c6089890a7f668f73fe968bfdc3944/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java?ref=3a2d915422c6089890a7f668f73fe968bfdc3944"
            }
        ],
        "bug_id": "tomee_48",
        "parent": "https://github.com/apache/tomee/commit/9a9efa35b645a92f640c1cf32a3fba9aef1a5e72",
        "message": "TOMEE-1497 patch from Roman Boykov to avoid a NPE when outbound transactionSupport is null",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/ac7fd27f1b06377aad6a3aed1f3f33ece3afbaf2",
        "file": [
            {
                "patch": "@@ -846,6 +846,7 @@ private void registerSessionSynchronization(Instance instance, CoreDeploymentInf\n \n             // Invoke afterBegin\n             ThreadContext callContext = new ThreadContext(instance.deploymentInfo, instance.primaryKey, Operation.AFTER_BEGIN);\n+            callContext.setCurrentAllowedStates(StatefulContext.getStates());\n             ThreadContext oldCallContext = ThreadContext.enter(callContext);\n             try {\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/ac7fd27f1b06377aad6a3aed1f3f33ece3afbaf2/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "ea1317d805b4bfc98139af713484f02d39e974e9",
                "blob_url": "https://github.com/apache/tomee/blob/ac7fd27f1b06377aad6a3aed1f3f33ece3afbaf2/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java?ref=ac7fd27f1b06377aad6a3aed1f3f33ece3afbaf2"
            }
        ],
        "bug_id": "tomee_49",
        "parent": "https://github.com/apache/tomee/commit/6b457ee97218a0125873a0ca725c913e5b2b71c7",
        "message": "Patch from Ivan, OPENEJB-1042: NullPointerException is thrown while invoking Timer.getHandler()\n\nThanks, Ivan!\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@790752 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/b9937440bd615ee301f08af03bbc6a146add0a14",
        "file": [
            {
                "patch": "@@ -397,6 +397,7 @@ public void mergeRef(NamingResources naming, ResourceEnvReferenceInfo ref) {\n \n         if (UserTransaction.class.getName().equals(ref.resourceEnvRefType)) {\n             resourceEnv.setProperty(Constants.FACTORY, UserTransactionFactory.class.getName());\n+            resourceEnv.setType(ref.resourceEnvRefType);\n         } else {\n             resourceEnv.setProperty(Constants.FACTORY, ResourceFactory.class.getName());\n             resourceEnv.setProperty(NAME, ref.resourceEnvRefName);",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/b9937440bd615ee301f08af03bbc6a146add0a14/assembly/openejb-tomcat/openejb-tomcat-catalina/src/main/java/org/apache/openejb/tomcat/catalina/TomcatJndiBuilder.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "fad9fd1201287a41bfd37ba05cac996fff408c9f",
                "blob_url": "https://github.com/apache/tomee/blob/b9937440bd615ee301f08af03bbc6a146add0a14/assembly/openejb-tomcat/openejb-tomcat-catalina/src/main/java/org/apache/openejb/tomcat/catalina/TomcatJndiBuilder.java",
                "filename": "assembly/openejb-tomcat/openejb-tomcat-catalina/src/main/java/org/apache/openejb/tomcat/catalina/TomcatJndiBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/assembly/openejb-tomcat/openejb-tomcat-catalina/src/main/java/org/apache/openejb/tomcat/catalina/TomcatJndiBuilder.java?ref=b9937440bd615ee301f08af03bbc6a146add0a14"
            },
            {
                "patch": "@@ -21,7 +21,9 @@\n import org.apache.openejb.api.RemoteClient;\n import org.apache.openejb.loader.SystemInstance;\n import org.apache.openejb.core.webservices.JaxWsUtils;\n+import org.apache.openejb.core.TempClassLoader;\n import org.apache.xbean.finder.ClassFinder;\n+import org.apache.xbean.finder.UrlSet;\n import org.apache.openejb.jee.ActivationConfig;\n import org.apache.openejb.jee.ApplicationClient;\n import org.apache.openejb.jee.AroundInvoke;\n@@ -349,11 +351,20 @@ public ConnectorModule deploy(ConnectorModule connectorModule) throws OpenEJBExc\n \n         public WebModule deploy(WebModule webModule) throws OpenEJBException {\n             WebApp webApp = webModule.getWebApp();\n-            if (webApp != null && (webApp.isMetadataComplete() || !webApp.getServlet().isEmpty())) return webModule;\n+            if (webApp != null && (webApp.isMetadataComplete())) return webModule;\n \n             ClassFinder finder;\n             try {\n-                finder = new ClassFinder(webModule.getClassLoader());\n+                final ClassLoader webClassLoader = webModule.getClassLoader();\n+                ClassLoader parent = webClassLoader.getParent();\n+\n+                if (webClassLoader instanceof TempClassLoader) parent = parent.getParent();\n+\n+                UrlSet urlSet = new UrlSet(webClassLoader);\n+                urlSet = urlSet.exclude(parent);\n+                \n+                finder = new ClassFinder(webClassLoader, urlSet.getUrls());\n+                webModule.setFinder(finder);\n             } catch (Exception e) {\n                 startupLogger.warning(\"Unable to scrape for @WebService or @WebServiceProvider annotations. ClassFinder failed.\", e);\n                 return webModule;\n@@ -793,7 +804,7 @@ public WebModule deploy(WebModule webModule) throws OpenEJBException {\n             /*\n              * Classes added to this set will be scanned for annotations\n              */\n-            Set<Class<?>> classes = new HashSet<Class<?>>();\n+            Set<Class> classes = new HashSet<Class>();\n \n \n             ClassLoader classLoader = webModule.getClassLoader();\n@@ -919,6 +930,38 @@ public WebModule deploy(WebModule webModule) throws OpenEJBException {\n                 }\n             }\n \n+            ClassFinder finder = webModule.getFinder();\n+\n+            if (finder != null) {\n+                String[] webComponentAnnotations = {\n+                        \"javax.faces.bean.ManagedBean\",\n+                        \"javax.servlet.annotation.WebServlet\",\n+                        \"javax.servlet.annotation.WebServletContextListener\",\n+                        \"javax.servlet.annotation.ServletFilter\",\n+                };\n+\n+                List<Class<? extends Annotation>> annotations = new ArrayList<Class<? extends Annotation>>();\n+                for (String componentAnnotationName : webComponentAnnotations) {\n+                    try {\n+                        Class<?> clazz = classLoader.loadClass(componentAnnotationName);\n+                        annotations.add(clazz.asSubclass(Annotation.class));\n+                    } catch (ClassNotFoundException e) {\n+                        logger.debug(\"Support not enabled: \" + componentAnnotationName);\n+                    }\n+                }\n+\n+\n+                for (Class<? extends Annotation> annotation : annotations) {\n+                    logger.debug(\"Scanning for @\" + annotation.getName());\n+                    List<Class> list = finder.findAnnotatedClasses(annotation);\n+                    if (logger.isDebugEnabled()) for (Class clazz : list) {\n+                        logger.debug(\"Found \" + clazz.getName());\n+                    }\n+                    \n+                    classes.addAll(list);\n+                }\n+            }\n+\n             ClassFinder inheritedClassFinder = createInheritedClassFinder(classes.toArray(new Class<?>[classes.size()]));\n \n             /*",
                "additions": 46,
                "raw_url": "https://github.com/apache/tomee/raw/b9937440bd615ee301f08af03bbc6a146add0a14/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "status": "modified",
                "changes": 49,
                "deletions": 3,
                "sha": "15c10423056142bcd50e17704fe75b4fcd57d774",
                "blob_url": "https://github.com/apache/tomee/blob/b9937440bd615ee301f08af03bbc6a146add0a14/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=b9937440bd615ee301f08af03bbc6a146add0a14"
            },
            {
                "patch": "@@ -548,6 +548,30 @@ protected static WebModule createWebModule(String appId, String warPath, ClassLo\n         }\n \n         // determine war class path\n+        URL[] webUrls = getWebappUrls(warFile);\n+        ClassLoader warClassLoader = ClassLoaderUtil.createTempClassLoader(appId, webUrls, parentClassLoader);\n+\n+        // create web module\n+        WebModule webModule = new WebModule(webApp, contextRoot, warClassLoader, warFile.getAbsolutePath(), moduleName);\n+        webModule.getAltDDs().putAll(descriptors);\n+        webModule.getWatchedResources().add(warPath);\n+        webModule.getWatchedResources().add(warFile.getAbsolutePath());\n+        if (webXmlUrl != null && \"file\".equals(webXmlUrl.getProtocol())) {\n+            webModule.getWatchedResources().add(URLs.toFilePath(webXmlUrl));\n+        }\n+\n+        // find all tag libs\n+        addTagLibraries(webModule);\n+\n+        // load webservices descriptor\n+        addWebservices(webModule);\n+\n+        // load faces configuration files\n+        addFacesConfigs(webModule);\n+        return webModule;\n+    }\n+\n+    public static URL[] getWebappUrls(File warFile) {\n         List<URL> webClassPath = new ArrayList<URL>();\n         File webInfDir = new File(warFile, \"WEB-INF\");\n         try {\n@@ -571,26 +595,7 @@ protected static WebModule createWebModule(String appId, String warPath, ClassLo\n \n         // create the class loader\n         URL[] webUrls = webClassPath.toArray(new URL[webClassPath.size()]);\n-        ClassLoader warClassLoader = ClassLoaderUtil.createTempClassLoader(appId, webUrls, parentClassLoader);\n-\n-        // create web module\n-        WebModule webModule = new WebModule(webApp, contextRoot, warClassLoader, warFile.getAbsolutePath(), moduleName);\n-        webModule.getAltDDs().putAll(descriptors);\n-        webModule.getWatchedResources().add(warPath);\n-        webModule.getWatchedResources().add(warFile.getAbsolutePath());\n-        if (webXmlUrl != null && \"file\".equals(webXmlUrl.getProtocol())) {\n-            webModule.getWatchedResources().add(URLs.toFilePath(webXmlUrl));\n-        }\n-\n-        // find all tag libs\n-        addTagLibraries(webModule);\n-\n-        // load webservices descriptor\n-        addWebservices(webModule);\n-\n-        // load faces configuration files\n-        addFacesConfigs(webModule);\n-        return webModule;\n+        return webUrls;\n     }\n \n     private static void addWebservices(WsModule wsModule) throws OpenEJBException {",
                "additions": 25,
                "raw_url": "https://github.com/apache/tomee/raw/b9937440bd615ee301f08af03bbc6a146add0a14/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "status": "modified",
                "changes": 45,
                "deletions": 20,
                "sha": "4031e449d2f7ec127c65589afc611f66594ea6cc",
                "blob_url": "https://github.com/apache/tomee/blob/b9937440bd615ee301f08af03bbc6a146add0a14/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=b9937440bd615ee301f08af03bbc6a146add0a14"
            },
            {
                "patch": "@@ -23,11 +23,13 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.TreeSet;\n+import java.util.concurrent.atomic.AtomicReference;\n \n import org.apache.openejb.jee.FacesConfig;\n import org.apache.openejb.jee.TldTaglib;\n import org.apache.openejb.jee.WebApp;\n import org.apache.openejb.jee.Webservices;\n+import org.apache.xbean.finder.ClassFinder;\n \n /**\n  * @version $Rev$ $Date$\n@@ -47,6 +49,8 @@\n     private final Set<String> watchedResources = new TreeSet<String>();\n     // List of all faces configuration files found in this web module\n     private final List<FacesConfig> facesConfigs = new ArrayList<FacesConfig>();\n+    private ClassFinder finder;\n+\n \n     public WebModule(WebApp webApp, String contextRoot, ClassLoader classLoader, String jarLocation, String moduleId) {\n         this.webApp = webApp;\n@@ -82,6 +86,14 @@ public WebModule(WebApp webApp, String contextRoot, ClassLoader classLoader, Str\n         validation = new ValidationContext(WebModule.class, jarLocation);\n     }\n \n+    public ClassFinder getFinder() {\n+        return finder;\n+    }\n+\n+    public void setFinder(ClassFinder finder) {\n+        this.finder = finder;\n+    }\n+\n     public ValidationContext getValidation() {\n         return validation;\n     }",
                "additions": 12,
                "raw_url": "https://github.com/apache/tomee/raw/b9937440bd615ee301f08af03bbc6a146add0a14/container/openejb-core/src/main/java/org/apache/openejb/config/WebModule.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "a51b291570263fd6b17ac9647163777b58cbfd5c",
                "blob_url": "https://github.com/apache/tomee/blob/b9937440bd615ee301f08af03bbc6a146add0a14/container/openejb-core/src/main/java/org/apache/openejb/config/WebModule.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/WebModule.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/WebModule.java?ref=b9937440bd615ee301f08af03bbc6a146add0a14"
            }
        ],
        "bug_id": "tomee_50",
        "parent": "https://github.com/apache/tomee/commit/005360a496ef67cf147726932bdcfaa54f24bc48",
        "message": "OPENEJB-1044: Webapp @Resource UserTransaction injection results in NullPointerException\nOPENEJB-1045: Injection support for JSF 2.0 ManagedBeans\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@785901 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f",
        "file": [
            {
                "patch": "@@ -641,6 +641,7 @@\n   <ServiceProvider\n           id=\"Default JMS Resource Adapter\"\n           service=\"Resource\"\n+          types=\"ActiveMQResourceAdapter\"\n           class-name=\"org.apache.activemq.ra.ActiveMQResourceAdapter\">\n \n     # Broker configuration",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/assembly/openejb-tomcat/openejb-tomcat-webapp/src/main/resources/META-INF/org.apache.openejb.tomcat/service-jar.xml",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "c0a268bd5a4c77d226fa2096bc2f65c4daec6ae6",
                "blob_url": "https://github.com/apache/tomee/blob/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/assembly/openejb-tomcat/openejb-tomcat-webapp/src/main/resources/META-INF/org.apache.openejb.tomcat/service-jar.xml",
                "filename": "assembly/openejb-tomcat/openejb-tomcat-webapp/src/main/resources/META-INF/org.apache.openejb.tomcat/service-jar.xml",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/assembly/openejb-tomcat/openejb-tomcat-webapp/src/main/resources/META-INF/org.apache.openejb.tomcat/service-jar.xml?ref=01468c3902bbd4e8e4fd0cf2ade04c2956a6331f"
            },
            {
                "patch": "@@ -820,18 +820,21 @@ public void createProxyFactory(ProxyFactoryInfo serviceInfo) throws OpenEJBExcep\n     private void replaceResourceAdapterProperty(ObjectRecipe serviceRecipe) throws OpenEJBException {\n         Object resourceAdapterId = serviceRecipe.getProperty(\"ResourceAdapter\");\n         if (resourceAdapterId instanceof String)  {\n+            String id = (String) resourceAdapterId;\n+            id = id.trim();\n+\n             Object resourceAdapter = null;\n             try {\n-                resourceAdapter = containerSystem.getJNDIContext().lookup(\"java:openejb/Resource/\" + resourceAdapterId);\n+                resourceAdapter = containerSystem.getJNDIContext().lookup(\"java:openejb/Resource/\" + id);\n             } catch (NamingException e) {\n                 // handled below\n             }\n \n             if (resourceAdapter == null) {\n-                throw new OpenEJBException(\"No existing resource adapter defined with id '\" + resourceAdapterId + \"'.\");\n+                throw new OpenEJBException(\"No existing resource adapter defined with id '\" + id + \"'.\");\n             }\n             if (!(resourceAdapter instanceof ResourceAdapter)) {\n-                throw new OpenEJBException(\"Resource adapter defined with id '\" + resourceAdapterId + \"' is not an instance of ResourceAdapter, \" +\n+                throw new OpenEJBException(\"Resource adapter defined with id '\" + id + \"' is not an instance of ResourceAdapter, \" +\n                         \"but is an instance of \" + resourceAdapter.getClass());\n             }\n             serviceRecipe.setProperty(\"ResourceAdapter\", resourceAdapter);",
                "additions": 6,
                "raw_url": "https://github.com/apache/tomee/raw/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "status": "modified",
                "changes": 9,
                "deletions": 3,
                "sha": "d75d5992496174c419a06821377f529e33a03939",
                "blob_url": "https://github.com/apache/tomee/blob/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java?ref=01468c3902bbd4e8e4fd0cf2ade04c2956a6331f"
            },
            {
                "patch": "@@ -64,8 +64,11 @@\n import org.apache.openejb.util.Logger;\n import org.apache.openejb.util.Messages;\n import org.apache.openejb.util.URISupport;\n+import org.apache.openejb.util.Join;\n \n import java.io.File;\n+import java.io.DataOutputStream;\n+import java.io.PrintWriter;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.util.ArrayList;\n@@ -75,11 +78,12 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.Comparator;\n \n public class ConfigurationFactory implements OpenEjbConfigurationFactory {\n \n-    private static final Logger logger = Logger.getInstance(LogCategory.OPENEJB_STARTUP_CONFIG, \"org.apache.openejb.util.resources\");\n-    private static final Messages messages = new Messages(\"org.apache.openejb.util.resources\");\n+    private static final Logger logger = Logger.getInstance(LogCategory.OPENEJB_STARTUP_CONFIG, ConfigurationFactory.class);\n+    private static final Messages messages = new Messages(ConfigurationFactory.class);\n \n     private String configLocation = \"\";\n \n@@ -250,10 +254,16 @@ public OpenEjbConfiguration getOpenEjbConfiguration() throws OpenEJBException {\n \n         sys.facilities.transactionService = configureService(openejb.getTransactionManager(), TransactionServiceInfo.class);\n \n+        List<ResourceInfo> resources = new ArrayList<ResourceInfo>();\n         for (Resource resource : openejb.getResource()) {\n             ResourceInfo resourceInfo = configureService(resource, ResourceInfo.class);\n-            sys.facilities.resources.add(resourceInfo);\n+            resources.add(resourceInfo);\n         }\n+        Collections.sort(resources, new ResourceInfoComparator(resources));\n+\n+        sys.facilities.resources.addAll(resources);\n+\n+\n \n //        ConnectionManagerInfo service = configureService(openejb.getConnectionManager(), ConnectionManagerInfo.class);\n //        sys.facilities.connectionManagers.add(service);\n@@ -363,14 +373,12 @@ public AppInfo configureApplication(File jarFile) throws OpenEJBException {\n             AppModule appModule = deploymentLoader.load(jarFile);\n             appInfo = configureApplication(appModule);\n         } catch (ValidationFailedException e) {\n-            String message = messages.format(\"conf.0004\", jarFile.getAbsolutePath(), e.getMessage());\n-            logger.warning(message); // DO not include the stacktrace in the message\n+            logger.warning(\"configureApplication.loadFailed\", jarFile.getAbsolutePath(), e.getMessage()); // DO not include the stacktrace in the message\n             throw e;\n         } catch (OpenEJBException e) {\n-            String message = messages.format(\"conf.0004\", jarFile.getAbsolutePath(), e.getMessage());\n             // DO NOT REMOVE THE EXCEPTION FROM THIS LOG MESSAGE\n             // removing this message causes NO messages to be printed when embedded\n-            logger.warning(message, e);\n+            logger.warning(\"configureApplication.loadFailed\", e, jarFile.getAbsolutePath(), e.getMessage());\n             throw e;\n         }\n         return appInfo;\n@@ -452,75 +460,109 @@ public DefaultService(String id, Class<? extends Service> type) {\n \n \n     public <T extends ServiceInfo> T configureService(Class<? extends T> type) throws OpenEJBException {\n-        Service service = getDefaultService(type);\n-\n-        return configureService(service, type);\n+        return configureService((Service)null, type);\n     }\n \n     private <T extends ServiceInfo>Service getDefaultService(Class<? extends T> type) throws OpenEJBException {\n         DefaultService defaultService = defaultProviders.get(type);\n \n+        if (defaultService == null) return null;\n+\n         Service service;\n         try {\n             service = JaxbOpenejb.create(defaultService.type);\n             service.setType(defaultService.id);\n         } catch (Exception e) {\n-            throw new OpenEJBException(\"Cannot instantiate class \" + defaultService.type.getName(), e);\n+            String name = (defaultService == null || defaultService.type == null) ? \"null\" : defaultService.type.getName();\n+            throw new OpenEJBException(\"Cannot instantiate class \" + name, e);\n         }\n         return service;\n     }\n \n \n     public <T extends ServiceInfo> T configureService(Service service, Class<? extends T> infoType) throws OpenEJBException {\n-        if (infoType == null) throw new NullPointerException(\"type\");\n-\n-        if (service == null) {\n-            service = getDefaultService(infoType);\n-        }\n+        try {\n+            if (infoType == null) throw new NullPointerException(\"type\");\n \n-        String providerType = service.getClass().getSimpleName();\n+            if (service == null) {\n+                service = getDefaultService(infoType);\n+                if (service == null){\n+                    throw new OpenEJBException(messages.format(\"configureService.noDefaultService\", infoType.getName()));\n+                }\n+            }\n \n-        ServiceProvider provider = resolveServiceProvider(service, infoType);\n \n-        if (provider == null){\n-            throw new NoSuchProviderException(\"Cannot determine a default provider for Service(\"+service.getId() +\", \"+infoType.getSimpleName()+\")\");\n-        }\n+            String providerType = service.getClass().getSimpleName();\n+\n+            ServiceProvider provider = resolveServiceProvider(service, infoType);\n+\n+            if (provider == null){\n+                List<ServiceProvider> providers = ServiceUtils.getServiceProvidersByServiceType(providerType);\n+                StringBuilder sb = new StringBuilder();\n+//                for (ServiceProvider p : providers) {\n+//                    sb.append(System.getProperty(\"line.separator\"));\n+//                    sb.append(\"  <\").append(p.getService());\n+//                    sb.append(\" id=\\\"\").append(service.getId()).append('\"');\n+//                    sb.append(\" provider=\\\"\").append(p.getId()).append(\"\\\"/>\");\n+//                }\n+\n+                List<String> types = new ArrayList<String>();\n+                for (ServiceProvider p : providers) {\n+                    for (String type : p.getTypes()) {\n+                        if (types.contains(type)) continue;\n+                        types.add(type);\n+                        sb.append(System.getProperty(\"line.separator\"));\n+                        sb.append(\"  <\").append(p.getService());\n+                        sb.append(\" id=\\\"\").append(service.getId()).append('\"');\n+                        sb.append(\" type=\\\"\").append(type).append(\"\\\"/>\");\n+                    }\n+                }\n+                String noProviderMessage = messages.format(\"configureService.noProviderForService\", providerType, service.getId(), service.getType(), service.getProvider(), sb.toString());\n+                throw new NoSuchProviderException(noProviderMessage);\n+            }\n \n-        if (service.getId() == null) service.setId(provider.getId());\n+            if (service.getId() == null) service.setId(provider.getId());\n \n-        logger.info(\"Configuring Service(id=\" + service.getId() + \", type=\" + provider.getService() + \", provider-id=\" + provider.getId() + \")\");\n+            logger.info(\"configureService.configuring\", service.getId(), provider.getService(), provider.getId());\n \n-        Properties props = new Properties();\n-        props.putAll(provider.getProperties());\n-        props.putAll(service.getProperties());\n-        props.putAll(getSystemProperties(service.getId(), provider.getService()));\n+            Properties props = new Properties();\n+            props.putAll(provider.getProperties());\n+            props.putAll(service.getProperties());\n+            props.putAll(getSystemProperties(service.getId(), provider.getService()));\n \n-        if (providerType != null && !provider.getService().equals(providerType)) {\n-            throw new OpenEJBException(messages.format(\"conf.4902\", service.getId(), providerType));\n-        }\n+            if (providerType != null && !provider.getService().equals(providerType)) {\n+                throw new OpenEJBException(messages.format(\"configureService.wrongProviderType\", service.getId(), providerType));\n+            }\n \n-        T info;\n+            T info;\n \n-        try {\n-            info = infoType.newInstance();\n-        } catch (Exception e) {\n-            throw new OpenEJBException(\"Cannot instantiate class \" + infoType.getName(), e);\n-        }\n+            try {\n+                info = infoType.newInstance();\n+            } catch (Exception e) {\n+                throw new OpenEJBException(\"Cannot instantiate class \" + infoType.getName(), e);\n+            }\n \n-        info.service = provider.getService();\n-        info.types.addAll(provider.getTypes());\n-        info.description = provider.getDescription();\n-        info.displayName = provider.getDisplayName();\n-        info.className = provider.getClassName();\n-        info.factoryMethod = provider.getFactoryName();\n-        info.id = service.getId();\n-        info.properties = props;\n-        info.constructorArgs.addAll(parseConstructorArgs(provider));\n+            info.service = provider.getService();\n+            info.types.addAll(provider.getTypes());\n+            info.description = provider.getDescription();\n+            info.displayName = provider.getDisplayName();\n+            info.className = provider.getClassName();\n+            info.factoryMethod = provider.getFactoryName();\n+            info.id = service.getId();\n+            info.properties = props;\n+            info.constructorArgs.addAll(parseConstructorArgs(provider));\n \n-        specialProcessing(info);\n+            specialProcessing(info);\n \n \n-        return info;\n+            return info;\n+        } catch (NoSuchProviderException e) {\n+            String message = logger.fatal(\"configureService.failed\", e, service.getId());\n+            throw new OpenEJBException(message + \": \" + e.getMessage());\n+        } catch (Throwable e) {\n+            String message = logger.fatal(\"configureService.failed\", e, service.getId());\n+            throw new OpenEJBException(message, e);\n+        }\n     }\n \n     private <T extends ServiceInfo> void specialProcessing(T info) {\n@@ -549,7 +591,9 @@ private ServiceProvider resolveServiceProvider(Service service, Class infoType)\n \n         if (infoType != null) {\n             Service defaultService = getDefaultService(infoType);\n-            return resolveServiceProvider(defaultService, null);\n+            if (defaultService != null) {\n+                return resolveServiceProvider(defaultService, null);\n+            }\n         }\n \n         return null;\n@@ -778,4 +822,60 @@ private static String normalizePropertyName(Properties properties, String proper\n             return property;\n         }\n     }\n+\n+    public static class ResourceInfoComparator implements Comparator<ResourceInfo> {\n+        private final List<String> ids;\n+\n+        public ResourceInfoComparator(List<ResourceInfo> resources){\n+            ids = new ArrayList<String>();\n+            for (ResourceInfo info : resources) {\n+                ids.add(info.id);\n+            }\n+        }\n+\n+        public int compare(ResourceInfo a, ResourceInfo b) {\n+            String refA = getReference(a);\n+            String refB = getReference(b);\n+\n+            // both null or the same id\n+            if (refA == refB) return 0;\n+\n+            // b is null\n+            if (refA != null && refB == null){\n+                return 1;\n+            }\n+\n+            // a is null\n+            if (refB != null && refA == null){\n+                return -1;\n+            }\n+\n+            // b is referencing a\n+            if (a.id.equals(refB)) {\n+                return 1;\n+            }\n+\n+            // a is referencing b\n+            if (b.id.equals(refA)) {\n+                return 1;\n+            }\n+\n+            return 0;\n+        }\n+\n+        public int hasReference(ResourceInfo info){\n+            for (Object value : info.properties.values()) {\n+                if (ids.contains(value)) return 1;\n+            }\n+            return 0;\n+        }\n+\n+        public String getReference(ResourceInfo info){\n+            for (Object value : info.properties.values()) {\n+                value = ((String)value).trim();\n+                if (ids.contains(value)) return (String) value;\n+            }\n+            return null;\n+        }\n+    }\n }",
                "additions": 148,
                "raw_url": "https://github.com/apache/tomee/raw/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "status": "modified",
                "changes": 196,
                "deletions": 48,
                "sha": "9a8df2c66688377961c85b7c15d71878f92682ef",
                "blob_url": "https://github.com/apache/tomee/blob/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java?ref=01468c3902bbd4e8e4fd0cf2ade04c2956a6331f"
            },
            {
                "patch": "@@ -63,7 +63,7 @@ public static boolean hasServiceProvider(String id) {\n         try {\n             ProviderInfo info = getProviderInfo(id);\n \n-            List<ServiceProvider> services = getServices(info.getPackageName());\n+            List<ServiceProvider> services = getServiceProviders(info.getPackageName());\n \n             for (ServiceProvider service : services) {\n                 if (service.getId().equals(id)) {\n@@ -79,7 +79,7 @@ public static boolean hasServiceProvider(String id) {\n     public static ServiceProvider getServiceProvider(String id) throws OpenEJBException {\n         ProviderInfo info = getProviderInfo(id);\n \n-        List<ServiceProvider> services = getServices(info.getPackageName());\n+        List<ServiceProvider> services = getServiceProviders(info.getPackageName());\n \n         for (ServiceProvider service : services) {\n             if (service.getId().equals(info.getServiceName())) {\n@@ -95,10 +95,27 @@ public static String getServiceProviderId(String type) throws OpenEJBException {\n         return provider != null? provider.getId(): null;\n     }\n \n+\n+    public static List<ServiceProvider> getServiceProvidersByServiceType(String type) throws OpenEJBException {\n+        ArrayList<ServiceProvider> providers = new ArrayList<ServiceProvider>();\n+        if (type == null) return providers;\n+\n+        List<ServiceProvider> services = getServiceProviders(defaultProviderURL);\n+\n+        for (ServiceProvider service : services) {\n+            if (service.getService().equals(type)) {\n+                providers.add(service);\n+            }\n+        }\n+\n+        return providers;\n+    }\n+\n+\n     public static ServiceProvider getServiceProviderByType(String type) throws OpenEJBException {\n         if (type == null) return null;\n \n-        List<ServiceProvider> services = getServices(defaultProviderURL);\n+        List<ServiceProvider> services = getServiceProviders(defaultProviderURL);\n \n         for (ServiceProvider service : services) {\n             if (service.getTypes().contains(type)) {\n@@ -112,11 +129,9 @@ public static ServiceProvider getServiceProviderByType(String type) throws OpenE\n     public static ServiceProvider getServiceProviderByType(String providerType, String serviceType) throws OpenEJBException {\n         if (serviceType == null) return null;\n \n-        List<ServiceProvider> services = getServices(defaultProviderURL);\n+        List<ServiceProvider> services = getServiceProvidersByServiceType(providerType);\n \n         for (ServiceProvider service : services) {\n-            if (!service.getService().equals(providerType)) continue;\n-            \n             if (service.getTypes().contains(serviceType)) {\n                 return service;\n             }\n@@ -125,7 +140,11 @@ public static ServiceProvider getServiceProviderByType(String providerType, Stri\n         return null;\n     }\n \n-    private static List<ServiceProvider> getServices(String packageName) throws OpenEJBException {\n+    public static List<ServiceProvider> getServiceProviders() throws OpenEJBException {\n+        return getServiceProviders(defaultProviderURL);\n+    }\n+\n+    public static List<ServiceProvider> getServiceProviders(String packageName) throws OpenEJBException {\n         List<ServiceProvider> services = loadedServiceJars.get(packageName);\n         if (services == null) {\n             ServicesJar servicesJar = JaxbOpenejb.readServicesJar(packageName);",
                "additions": 26,
                "raw_url": "https://github.com/apache/tomee/raw/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/java/org/apache/openejb/config/ServiceUtils.java",
                "status": "modified",
                "changes": 33,
                "deletions": 7,
                "sha": "6c4001d35b2fab090565670e0f96d7a294a71ca9",
                "blob_url": "https://github.com/apache/tomee/blob/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/java/org/apache/openejb/config/ServiceUtils.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/ServiceUtils.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/ServiceUtils.java?ref=01468c3902bbd4e8e4fd0cf2ade04c2956a6331f"
            },
            {
                "patch": "@@ -266,6 +266,7 @@ public void setProxyFactory(ProxyFactory value) {\n                 Resource resource = new Resource();\n                 resource.setJar(connector.getJar());\n                 resource.setId(connector.getId());\n+                resource.setType(connector.getType());\n                 resource.setProvider(connector.getProvider());\n                 resource.getProperties().putAll(connector.getProperties());\n                 this.resource.add(resource);",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/java/org/apache/openejb/config/sys/Openejb.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "1e1bdedb48bd9a5ccd8e02086d4b5798584a8ed8",
                "blob_url": "https://github.com/apache/tomee/blob/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/java/org/apache/openejb/config/sys/Openejb.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/sys/Openejb.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/sys/Openejb.java?ref=01468c3902bbd4e8e4fd0cf2ade04c2956a6331f"
            },
            {
                "patch": "@@ -634,6 +634,7 @@\n   <ServiceProvider\n           id=\"Default JMS Resource Adapter\"\n           service=\"Resource\"\n+          types=\"ActiveMQResourceAdapter\"\n           class-name=\"org.apache.activemq.ra.ActiveMQResourceAdapter\">\n \n     # Broker configuration",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "f7df2c91484fcaa84eede1614f69e75677fb0d78",
                "blob_url": "https://github.com/apache/tomee/blob/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml",
                "filename": "container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml?ref=01468c3902bbd4e8e4fd0cf2ade04c2956a6331f"
            },
            {
                "patch": "@@ -22,7 +22,7 @@\n \n <openejb>\n \n-<Container id=\"Default CMP Container\" ctype=\"CMP_ENTITY\">\n+<Container id=\"My CMP Container\" type=\"CMP_ENTITY\">\n   # This container can service CMP 1.1 and 2.x Entity Beans\n   #\n   # Persistence is achived by taking the entity beans deployed\n@@ -38,12 +38,12 @@\n   # ConnectorName is he id of the Connector element which\n   # should provide connectivity for this CMP Container\n \n-  ConnectorName  Default JDBC Database\n+  ConnectorName  My DataSource\n \n </Container>\n \n \n-<Container id=\"Default BMP Container\" ctype=\"BMP_ENTITY\">\n+<Container id=\"My BMP Container\" type=\"BMP_ENTITY\">\n \n   # Specifies the size of the bean pools for this\n   # bmp entity container.\n@@ -53,7 +53,7 @@\n </Container>\n \n \n-<Container id=\"Default Stateful Container\" ctype=\"STATEFUL\">\n+<Container id=\"My Stateful Container\" type=\"STATEFUL\">\n   #  The passivator is responsible for writing beans to disk\n   #  at passivation time. Different passivators can be used\n   #  by setting this property to the fully qualified class name\n@@ -89,7 +89,7 @@\n </Container>\n \n \n-<Container id=\"Default Stateless Container\" ctype=\"STATELESS\">\n+<Container id=\"My Stateless Container\" type=\"STATELESS\">\n   #  Specifies the time to wait between invocations. This\n   #  value is measured in milliseconds.  A value of 5 would\n   #  result in a time-out of 5 milliseconds between invocations.\n@@ -119,11 +119,11 @@\n </Container>\n \n \n-<Container id=\"Default \" ctype=\"MESSAGE\">\n+<Container id=\"My MDB Container \" type=\"MESSAGE\">\n \n   #  The resource adapter delivers messages to the container\n \n-  ResourceAdapter Default JMS Resource Adapter\n+  ResourceAdapter My JMS Resource Adapter\n \n   # Specifies the message listener interface handled by this container\n \n@@ -146,7 +146,7 @@\n # http://openejb.apache.org/3.0/databases.html\n -->\n \n-<Resource id=\"Default JDBC Database\" >\n+<Resource id=\"My DataSource\" type=\"DataSource\">\n   JdbcDriver org.hsqldb.jdbcDriver\n   JdbcUrl jdbc:hsqldb:file:hsqldb\n   UserName sa\n@@ -155,7 +155,7 @@\n </Resource>\n \n \n-<Resource id=\"Default Unmanaged JDBC Database\">\n+<Resource id=\"My Unmanaged DataSource\" type=\"DataSource\">\n   JdbcDriver org.hsqldb.jdbcDriver\n   JdbcUrl jdbc:hsqldb:file:hsqldb\n   UserName sa\n@@ -164,7 +164,7 @@\n </Resource>\n \n \n-<Resource id=\"Default JMS Resource Adapter\">\n+<Resource id=\"My JMS Resource Adapter\" type=\"ActiveMQResourceAdapter\">\n   # Broker configuration URI as defined by ActiveMQ\n   # see http://activemq.apache.org/broker-configuration-uri.html\n \n@@ -180,9 +180,9 @@\n </Resource>\n \n \n-<Connector id=\"Default JMS Connection Factory\">\n+<Connector id=\"My JMS Connection Factory\" type=\"javax.jms.ConnectionFactory\">\n \n-  ResourceAdapter Default JMS Resource Adapter\n+  ResourceAdapter My JMS Resource Adapter\n \n   # Specifies if the connection is enrolled in global transaction\n   # allowed values: xa, local or none",
                "additions": 12,
                "raw_url": "https://github.com/apache/tomee/raw/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/resources/default.openejb.conf",
                "status": "modified",
                "changes": 24,
                "deletions": 12,
                "sha": "92ea9d7fd9d693124e4bfb020b51a80c2e87ff65",
                "blob_url": "https://github.com/apache/tomee/blob/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/resources/default.openejb.conf",
                "filename": "container/openejb-core/src/main/resources/default.openejb.conf",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/resources/default.openejb.conf?ref=01468c3902bbd4e8e4fd0cf2ade04c2956a6331f"
            },
            {
                "patch": "@@ -97,3 +97,25 @@ config.noBeanFoundEjbLink=Cannot find bean \\\"{0}\\\" referenced by bean \\\"{1}\\\" wi\n \n #fatal(\"config.noBeanFound\", ejb.getEjbRefName(), referringComponent);\n config.noBeanFound=Cannot find bean \\\"{0}\\\" referenced by bean \\\"{1}\\\".\n+\n+# info(\"configureService.configuring\", service.getId(), provider.getService(), provider.getId());\n+configureService.configuring=Configuring Service(id={0}, type={1}, provider-id={2})\n+\n+# fatal(\"configureService.failed\", service.getId(), e)\n+configureService.failed=Failed Configuring Service(id={0})\n+\n+# \"configureService.wrongProviderType\", service.getId(), providerType));\n+configureService.wrongProviderType=ServiceProvider of \"{0}\" is not of type \"{1}\"\n+\n+\n+# info(\"config.configApp\", appModule.getJarLocation());\n+config.configApp=Configuring app: {0}\n+\n+# warning(\"configureApplication.loadFailed\", jarFile.getAbsolutePath(), e.getMessage());\n+configureApplication.loadFailed=Jar not loaded. {0}.  {1}\n+\n+# format(\"configureService.noDefaultService\", infoType.getName())\n+configureService.noDefaultService = No Default Service for {0}\n+\n+# format(\"configureService.noProviderForService\", service.getClass().getName(), service.getId(), service.getType(), service.getProvider(), sb.toString());\n+configureService.noProviderForService = Cannot determine a provider for {0}(id={1}, type={2}, provider={3}).\\n\\nPossible valid configurations might be: {4}",
                "additions": 22,
                "raw_url": "https://github.com/apache/tomee/raw/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/resources/org/apache/openejb/config/Messages.properties",
                "status": "modified",
                "changes": 22,
                "deletions": 0,
                "sha": "44a5ebd0cb45c1e57391600b81c96697e93e7b32",
                "blob_url": "https://github.com/apache/tomee/blob/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/resources/org/apache/openejb/config/Messages.properties",
                "filename": "container/openejb-core/src/main/resources/org/apache/openejb/config/Messages.properties",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/resources/org/apache/openejb/config/Messages.properties?ref=01468c3902bbd4e8e4fd0cf2ade04c2956a6331f"
            },
            {
                "patch": "@@ -229,7 +229,6 @@ config.gettingFromDefault=Getting {0} from default configuration.\n config.usingDefault=OpenEJB configuration not found, using default configuration.\n config.noContainerFound=Cannot find container \"{0}\" for bean \"{1}\".\n config.noBeanFound=Cannot find bean \"{0}\" referenced by bean \"{1}\".\n-config.configApp=Configuring app: {0}\n \n init.0100=Invalid {0} provider {1}.  The factory class specified, {2}, does not implement the {3} interface.  Please check the configuration of {1}.\"\n ",
                "additions": 0,
                "raw_url": "https://github.com/apache/tomee/raw/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/resources/org/apache/openejb/util/resources/Messages.properties",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "e008eae79135ad29245a4650a022e7910a3be94d",
                "blob_url": "https://github.com/apache/tomee/blob/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/main/resources/org/apache/openejb/util/resources/Messages.properties",
                "filename": "container/openejb-core/src/main/resources/org/apache/openejb/util/resources/Messages.properties",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/resources/org/apache/openejb/util/resources/Messages.properties?ref=01468c3902bbd4e8e4fd0cf2ade04c2956a6331f"
            },
            {
                "patch": "@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openejb.assembler.classic;\n+\n+import junit.framework.TestCase;\n+\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Properties;\n+\n+import org.apache.openejb.config.ConfigurationFactory;\n+\n+/**\n+ * @version $Rev$ $Date$\n+ */\n+public class ResourceInfoComparatorTest extends TestCase {\n+\n+    public void test() throws Exception {\n+        List<ResourceInfo> resources = new ArrayList<ResourceInfo>();\n+\n+        resources.add(new ResourceInfo());\n+        resources.get(0).id = \"Red\";\n+        resources.get(0).properties = new Properties();\n+        resources.get(0).properties.put(\"someValue\", \"Blue\");\n+\n+        resources.add(new ResourceInfo());\n+        resources.get(1).id = \"Blue\";\n+        resources.get(1).properties = new Properties();\n+        resources.get(1).properties.put(\"foo\", \"Green\");\n+\n+        resources.add(new ResourceInfo());\n+        resources.get(2).properties = new Properties();\n+        resources.get(2).id = \"Green\";\n+\n+        resources.add(new ResourceInfo());\n+        resources.get(3).id = \"Yellow\";\n+        resources.get(3).properties = new Properties();\n+        resources.get(3).properties.put(\"foo\", \"Green\");\n+\n+        Collections.sort(resources, new ConfigurationFactory.ResourceInfoComparator(resources));\n+\n+        assertEquals(\"Green\", resources.get(0).id);\n+        assertEquals(\"Blue\", resources.get(1).id);\n+        assertEquals(\"Red\", resources.get(2).id);\n+        assertEquals(\"Yellow\", resources.get(3).id);\n+\n+    }\n+}",
                "additions": 63,
                "raw_url": "https://github.com/apache/tomee/raw/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/test/java/org/apache/openejb/assembler/classic/ResourceInfoComparatorTest.java",
                "status": "added",
                "changes": 63,
                "deletions": 0,
                "sha": "f9e4f331ec71ab737abbad8cd7741aafa10d38ab",
                "blob_url": "https://github.com/apache/tomee/blob/01468c3902bbd4e8e4fd0cf2ade04c2956a6331f/container/openejb-core/src/test/java/org/apache/openejb/assembler/classic/ResourceInfoComparatorTest.java",
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/assembler/classic/ResourceInfoComparatorTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/assembler/classic/ResourceInfoComparatorTest.java?ref=01468c3902bbd4e8e4fd0cf2ade04c2956a6331f"
            }
        ],
        "bug_id": "tomee_51",
        "parent": "https://github.com/apache/tomee/commit/46ac2b8ecbfab938aeaabf9d4e5a062b7e7d17b2",
        "message": "OPENEJB-743: Improved configuration error detection and help\nOPENEJB-742: java.lang.NullPointerException at ConfigurationFactory$DefaultService.access$000(ConfigurationFactory.java:NNN)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@607392 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/1cfc657583fd19a89fb7d875ef492ebaa2e08a82",
        "file": [
            {
                "patch": "@@ -64,7 +64,7 @@ public EjbModule(ClassLoader classLoader, String moduleId, String jarURI, EjbJar\n         if (jarURI == null){\n             if (moduleId != null){\n                 jarURI = moduleId;\n-            } else if (ejbJar.getId() != null){\n+            } else if (ejbJar.getId() != null && !ejbJar.getId().equals(\"\")){\n                 jarURI = ejbJar.getId();\n             } else {\n                 jarURI = ejbJar.toString();\n@@ -73,11 +73,14 @@ public EjbModule(ClassLoader classLoader, String moduleId, String jarURI, EjbJar\n         this.jarLocation = jarURI;\n \n         if (moduleId == null){\n-            if (ejbJar != null && ejbJar.getId() != null){\n+            if (ejbJar != null && ejbJar.getId() != null && !ejbJar.getId().equals(\"\")){\n                 moduleId = ejbJar.getId();\n             } else {\n                 File file = new File(jarURI);\n                 moduleId = file.getName();\n+                if (moduleId == null){\n+                    moduleId = jarURI;\n+                }\n             }\n         }\n         this.moduleId = moduleId;",
                "additions": 5,
                "raw_url": "https://github.com/apache/tomee/raw/1cfc657583fd19a89fb7d875ef492ebaa2e08a82/container/openejb-core/src/main/java/org/apache/openejb/config/EjbModule.java",
                "status": "modified",
                "changes": 7,
                "deletions": 2,
                "sha": "5a5f95124c759071cba5463b587cb801ccf21ddd",
                "blob_url": "https://github.com/apache/tomee/blob/1cfc657583fd19a89fb7d875ef492ebaa2e08a82/container/openejb-core/src/main/java/org/apache/openejb/config/EjbModule.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/EjbModule.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/EjbModule.java?ref=1cfc657583fd19a89fb7d875ef492ebaa2e08a82"
            }
        ],
        "bug_id": "tomee_52",
        "parent": "https://github.com/apache/tomee/commit/44e8d1e6df482a2f10e446629f4f2253bbc8bf42",
        "message": "More stringent setting of moduleId.  Should fix OPENEJB-707: NullPointerException creating app configuration in Assembler\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@607308 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/d903b63d52d61fe692a029df34934e3ff67ff2ef",
        "file": [
            {
                "patch": "@@ -87,7 +87,10 @@ public static synchronized void configure(final Properties config) {\n         // without changing LogStreamFactory contract\n         final String specialKey = \"openejb.jul.forceReload\";\n         final String original = System.getProperty(specialKey);\n-        System.setProperty(specialKey, config.getProperty(specialKey, SystemInstance.isInitialized() ? SystemInstance.get().getOptions().get(specialKey, (String) null) : null));\n+        final String property = config.getProperty(specialKey, SystemInstance.isInitialized() ? SystemInstance.get().getOptions().get(specialKey, (String) null) : null);\n+        if (property != null) {\n+            System.setProperty(specialKey, property);\n+        }\n \n         try {\n             if (factoryName != null) {",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/d903b63d52d61fe692a029df34934e3ff67ff2ef/container/openejb-core/src/main/java/org/apache/openejb/util/Logger.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "69fbd71c5091f309ab7f3a8373d90b22d73e81ec",
                "blob_url": "https://github.com/apache/tomee/blob/d903b63d52d61fe692a029df34934e3ff67ff2ef/container/openejb-core/src/main/java/org/apache/openejb/util/Logger.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/util/Logger.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/util/Logger.java?ref=d903b63d52d61fe692a029df34934e3ff67ff2ef"
            }
        ],
        "bug_id": "tomee_53",
        "parent": "https://github.com/apache/tomee/commit/6abdc427659162dfeba724f2096c8c1d79207756",
        "message": "avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1629626 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/59e185828811d35f2e06501cab0d407843441224",
        "file": [
            {
                "patch": "@@ -1912,7 +1912,7 @@ public ClientModule deploy(final ClientModule clientModule) throws OpenEJBExcept\n             validateRemoteClientRefs(classLoader, client, remoteClients);\n \n             final IAnnotationFinder finder = clientModule.getFinder();\n-            if (!AnnotationFinder.class.isInstance(finder)) {\n+            if (!AnnotationFinder.class.isInstance(finder) && finder != null) {\n                 final Class<?>[] loadedClasses = new Class<?>[finder.getAnnotatedClassNames().size()];\n                 int i = 0;\n                 for (final String s : finder.getAnnotatedClassNames()) {\n@@ -4716,7 +4716,7 @@ private void processWebServiceHandlers(final EjbModule ejbModule, final Enterpri\n                     }\n                 }\n             }\n-            classes.add(bean.getEjbClass());\n+            // classes.add(bean.getEjbClass());\n             final AnnotationFinder handlersFinder = finder.select(classes);\n             buildAnnotatedRefs(bean, handlersFinder, ejbModule.getClassLoader());\n         }\n@@ -4752,9 +4752,13 @@ private void processWebServiceClientHandlers(final JndiConsumer consumer, final\n                     }\n                 }\n                 handlerClasses.removeAll(processedClasses);\n+                if (handlerClasses.isEmpty()) {\n+                    continue;\n+                }\n \n                 // process handler classes\n-                final AnnotationFinder handlerAnnotationFinder = finder.select(handlerClasses);\n+                final AnnotationFinder handlerAnnotationFinder = finder != null ? finder.select(handlerClasses) :\n+                        new FinderFactory.OpenEJBAnnotationFinder(new FinderFactory.DoLoadClassesArchive(classLoader, handlerClasses));\n \n                 /*\n                  * @EJB",
                "additions": 7,
                "raw_url": "https://github.com/apache/tomee/raw/59e185828811d35f2e06501cab0d407843441224/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "status": "modified",
                "changes": 10,
                "deletions": 3,
                "sha": "7e6320c47f09e6fd79ab34e367861228478b30cf",
                "blob_url": "https://github.com/apache/tomee/blob/59e185828811d35f2e06501cab0d407843441224/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=59e185828811d35f2e06501cab0d407843441224"
            },
            {
                "patch": "@@ -550,4 +550,22 @@ public boolean foundSomething() {\n             return !classInfos.isEmpty();\n         }\n     }\n+\n+    public static class DoLoadClassesArchive extends ClassesArchive {\n+        public DoLoadClassesArchive(final ClassLoader loader, final Collection<String> classes) {\n+            super(load(loader, classes));\n+        }\n+\n+        private static Iterable<Class<?>> load(final ClassLoader loader, final Collection<String> classes) {\n+            final Collection<Class<?>> loaded = new ArrayList<>(classes.size());\n+            for (final String n : classes) {\n+                try {\n+                    loaded.add(loader.loadClass(n));\n+                } catch (final ClassNotFoundException e) {\n+                    // no-op\n+                }\n+            }\n+            return loaded;\n+        }\n+    }\n }",
                "additions": 18,
                "raw_url": "https://github.com/apache/tomee/raw/59e185828811d35f2e06501cab0d407843441224/container/openejb-core/src/main/java/org/apache/openejb/config/FinderFactory.java",
                "status": "modified",
                "changes": 18,
                "deletions": 0,
                "sha": "79501d3f6db16d7a734a3da4498d592a329b5be5",
                "blob_url": "https://github.com/apache/tomee/blob/59e185828811d35f2e06501cab0d407843441224/container/openejb-core/src/main/java/org/apache/openejb/config/FinderFactory.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/FinderFactory.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/FinderFactory.java?ref=59e185828811d35f2e06501cab0d407843441224"
            }
        ],
        "bug_id": "tomee_54",
        "parent": "https://github.com/apache/tomee/commit/cb85a80985c830a536702354231939aec52ffbee",
        "message": "avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1617934 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/b8a0e1c052ee72164957bcbc7615a2e3b5e64707",
        "file": [
            {
                "patch": "@@ -190,7 +190,7 @@ public void init(final Object object) {\n                     information = beanInfoService.createBeanArchiveInformation(beans, classLoader, next.discoveryMode == null? \"ALL\" : next.discoveryMode); // this fallback is 100% for tests, TODO: get rid of it (AppComposer)\n                     // TODO: log a warn is discoveryModes.get(key) == null\n                     try {\n-                        beanInfoService.getBeanArchiveInfo().put(next.uri.toURL(), information);\n+                        beanInfoService.getBeanArchiveInfo().put(next.uri == null ? null : next.uri.toURL(), information);\n                     } catch (final MalformedURLException e) {\n                         throw new IllegalStateException(e);\n                     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/b8a0e1c052ee72164957bcbc7615a2e3b5e64707/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiScanner.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "5fafe42cb2fd7bee63ef983d0b8ad3d0c7226a7d",
                "blob_url": "https://github.com/apache/tomee/blob/b8a0e1c052ee72164957bcbc7615a2e3b5e64707/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiScanner.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiScanner.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiScanner.java?ref=b8a0e1c052ee72164957bcbc7615a2e3b5e64707"
            }
        ],
        "bug_id": "tomee_55",
        "parent": "https://github.com/apache/tomee/commit/9fa7bba54f63da0e4bb91fca8f03ced658095520",
        "message": "avoid npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1617446 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/33739c30aeefd99cb0f6514a835e9fc47aaba851",
        "file": [
            {
                "patch": "@@ -249,7 +249,8 @@ public void deployEJB(final String contextRoot,\n         final Object proxy = ProxyEJB.subclassProxy(beanContext);\n \n         deploy(contextRoot, beanContext.getBeanClass(), fullContext, new NoopResourceProvider(beanContext.getBeanClass(), proxy),\n-                proxy, null, new OpenEJBEJBInvoker(Collections.singleton(beanContext)), additionalProviders, configuration, null);\n+                proxy, null, new OpenEJBEJBInvoker(Collections.singleton(beanContext)), additionalProviders, configuration,\n+                beanContext.getWebBeansContext());\n     }\n \n     private void deploy(final String contextRoot, final Class<?> clazz, final String address, final ResourceProvider rp, final Object serviceBean,\n@@ -295,12 +296,12 @@ private void deploy(final String contextRoot, final Class<?> clazz, final String\n \n     private Collection<Object> providers(final Collection<ServiceInfo> services, final Collection<Object> additionalProviders, final WebBeansContext ctx) {\n         final Collection<Object> instances = new ArrayList<>();\n-        final BeanManagerImpl bm = ctx.getBeanManagerImpl();\n+        final BeanManagerImpl bm = ctx == null ? null : ctx.getBeanManagerImpl();\n         for (final Object o : additionalProviders) {\n             if (o instanceof Class<?>) {\n                 final Class<?> clazz = (Class<?>) o;\n \n-                if (bm.isInUse()) {\n+                if (bm != null && bm.isInUse()) {\n                     try {\n                         final Set<Bean<?>> beans = bm.getBeans(clazz);\n                         if (beans != null && !beans.isEmpty()) {",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/33739c30aeefd99cb0f6514a835e9fc47aaba851/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java",
                "status": "modified",
                "changes": 7,
                "deletions": 3,
                "sha": "7f077527f48c54be2f948684d8bfe80300f68830",
                "blob_url": "https://github.com/apache/tomee/blob/33739c30aeefd99cb0f6514a835e9fc47aaba851/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java",
                "filename": "server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java?ref=33739c30aeefd99cb0f6514a835e9fc47aaba851"
            }
        ],
        "bug_id": "tomee_56",
        "parent": "https://github.com/apache/tomee/commit/3b6fb453967390584b4322bdf03bb1a62bdeaa86",
        "message": "avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1616300 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/ff677f61c18ee15b34be73e2d4ff38e9ab06455b",
        "file": [
            {
                "patch": "@@ -812,11 +812,13 @@ private void discardInstance(final Object primaryKey, final Instance instance) {\n             i = instance;\n         }\n \n-        if (!containsExtendedPersistenceContext(instance.beanContext)) {\n-            cache.remove(primaryKey);\n-        }\n-        if (i != null && null != i.creationalContext) {\n-            i.creationalContext.release();\n+        if (i != null) {\n+            if (!containsExtendedPersistenceContext(i.beanContext)) {\n+                cache.remove(primaryKey);\n+            }\n+            if (null != i.creationalContext) {\n+                i.creationalContext.release();\n+            }\n         }\n     }\n ",
                "additions": 7,
                "raw_url": "https://github.com/apache/tomee/raw/ff677f61c18ee15b34be73e2d4ff38e9ab06455b/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "status": "modified",
                "changes": 12,
                "deletions": 5,
                "sha": "b3494cb3f350322f6bbee557ace268e5e047d38e",
                "blob_url": "https://github.com/apache/tomee/blob/ff677f61c18ee15b34be73e2d4ff38e9ab06455b/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java?ref=ff677f61c18ee15b34be73e2d4ff38e9ab06455b"
            }
        ],
        "bug_id": "tomee_57",
        "parent": "https://github.com/apache/tomee/commit/1783fd86076a80049c2f3b09377169d2c553493a",
        "message": "avoid npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1568435 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/ee6c261c6b8ed1243295bbe939aced0db6de6aca",
        "file": [
            {
                "patch": "@@ -28,6 +28,7 @@\n \n import javax.enterprise.context.RequestScoped;\n import javax.enterprise.context.SessionScoped;\n+import javax.enterprise.context.spi.Context;\n import javax.servlet.ServletContextEvent;\n import javax.servlet.ServletContextListener;\n import javax.servlet.ServletRequestEvent;\n@@ -78,9 +79,11 @@ public void requestDestroyed(ServletRequestEvent event) {\n      * {@inheritDoc}\n      */\n     @Override\n-    public void requestInitialized(ServletRequestEvent event) {\n+    public void requestInitialized(final ServletRequestEvent event) {\n         final Object oldContext = ThreadSingletonServiceImpl.enter(this.webBeansContext);\n-        event.getServletRequest().setAttribute(contextKey, oldContext);\n+        if (event != null) {\n+            event.getServletRequest().setAttribute(contextKey, oldContext);\n+        }\n \n         try {\n             if (logger.isDebugEnabled()) {\n@@ -95,7 +98,7 @@ public void requestInitialized(ServletRequestEvent event) {\n             // we don't initialise the Session here but do it lazily if it gets requested\n             // the first time. See OWB-457\n \n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             logger.error(OWBLogConst.ERROR_0019, event == null ? \"null\" : event.getServletRequest());\n             WebBeansUtil.throwRuntimeExceptions(e);\n         }\n@@ -105,7 +108,7 @@ public void requestInitialized(ServletRequestEvent event) {\n      * {@inheritDoc}\n      */\n     @Override\n-    public void sessionCreated(HttpSessionEvent event) {\n+    public void sessionCreated(final HttpSessionEvent event) {\n         try {\n             if (logger.isDebugEnabled()) {\n                 logger.debug(\"Starting a session with session id : [{0}]\", event.getSession().getId());\n@@ -114,7 +117,7 @@ public void sessionCreated(HttpSessionEvent event) {\n                 ((WebappWebBeansContext) webBeansContext).getParent().getContextsService().startContext(SessionScoped.class, event.getSession());\n             }\n             this.webBeansContext.getContextsService().startContext(SessionScoped.class, event.getSession());\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             logger.error(OWBLogConst.ERROR_0020, event.getSession());\n             WebBeansUtil.throwRuntimeExceptions(e);\n         }\n@@ -129,7 +132,8 @@ public void sessionDestroyed(HttpSessionEvent event) {\n     }\n \n     private void ensureRequestScope() {\n-        if (!webBeansContext.getContextsService().getCurrentContext(RequestScoped.class).isActive()) {\n+        final Context reqCtx = webBeansContext.getContextsService().getCurrentContext(RequestScoped.class);\n+        if (reqCtx == null || !webBeansContext.getContextsService().getCurrentContext(RequestScoped.class).isActive()) {\n             requestInitialized(null);\n             EndWebBeansListener.FAKE_REQUEST.set(true);\n         }",
                "additions": 10,
                "raw_url": "https://github.com/apache/tomee/raw/ee6c261c6b8ed1243295bbe939aced0db6de6aca/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/BeginWebBeansListener.java",
                "status": "modified",
                "changes": 16,
                "deletions": 6,
                "sha": "55ec1b5ba54a2beb11318ef3f1dfdd4029a9f06f",
                "blob_url": "https://github.com/apache/tomee/blob/ee6c261c6b8ed1243295bbe939aced0db6de6aca/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/BeginWebBeansListener.java",
                "filename": "server/openejb-http/src/main/java/org/apache/openejb/server/httpd/BeginWebBeansListener.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/BeginWebBeansListener.java?ref=ee6c261c6b8ed1243295bbe939aced0db6de6aca"
            }
        ],
        "bug_id": "tomee_58",
        "parent": "https://github.com/apache/tomee/commit/0a1e9d2626fb3adede3b74b25e1eb92e56f7577e",
        "message": "cleanup + npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1538900 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/c31760076f93ad377896af86eb72991296a42692",
        "file": [
            {
                "patch": "@@ -152,9 +152,12 @@ public Object invoke(final Object proxy, final Method method, final Object[] arg\n             final TransactionManager txMgr = OpenEJB.getTransactionManager();\n             final Transaction transaction = txMgr.getTransaction();\n \n-            final DataSource currentDs = txDs.get(transaction);\n-            if (currentDs != null) {\n-                return method.invoke(currentDs, args);\n+            if (transaction != null) {\n+                \n+                final DataSource currentDs = txDs.get(transaction);\n+                if (currentDs != null) {\n+                    return method.invoke(currentDs, args);\n+                }\n             }\n \n             int ex = 0;",
                "additions": 6,
                "raw_url": "https://github.com/apache/tomee/raw/c31760076f93ad377896af86eb72991296a42692/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/router/FailOverRouter.java",
                "status": "modified",
                "changes": 9,
                "deletions": 3,
                "sha": "88d823bdd4c80073c59265ad909b60aaf1d3dbb2",
                "blob_url": "https://github.com/apache/tomee/blob/c31760076f93ad377896af86eb72991296a42692/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/router/FailOverRouter.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/router/FailOverRouter.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/router/FailOverRouter.java?ref=c31760076f93ad377896af86eb72991296a42692"
            }
        ],
        "bug_id": "tomee_59",
        "parent": "https://github.com/apache/tomee/commit/8ae5b0e159fbb5dcfd9984589a76e0686e4b329a",
        "message": "avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1476895 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/5462f967d56ceb6657c353ad6fb3dce7423bcd82",
        "file": [
            {
                "patch": "@@ -488,9 +488,11 @@ public OpenEjbConfiguration getOpenEjbConfiguration() throws OpenEJBException {\n                 final AppInfo appInfo = configureApplication(jarFile);\n                 sys.containerSystem.applications.add(appInfo);\n \n-            } catch (OpenEJBException alreadyHandled) {\n+            } catch (final OpenEJBException alreadyHandled) {\n                 final DeploymentExceptionManager exceptionManager = SystemInstance.get().getComponent(DeploymentExceptionManager.class);\n-                exceptionManager.pushDelpoymentException(alreadyHandled);\n+                if (exceptionManager != null) {\n+                    exceptionManager.pushDelpoymentException(alreadyHandled);\n+                }\n             }\n         }\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/5462f967d56ceb6657c353ad6fb3dce7423bcd82/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "342d90f1af75188577a30764c27d15d0352bc590",
                "blob_url": "https://github.com/apache/tomee/blob/5462f967d56ceb6657c353ad6fb3dce7423bcd82/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java?ref=5462f967d56ceb6657c353ad6fb3dce7423bcd82"
            }
        ],
        "bug_id": "tomee_60",
        "parent": "https://github.com/apache/tomee/commit/fcb3df9d4dc2280f6945d72aa1d787f7ee1ce018",
        "message": "avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1457341 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/af5dc7f8fdc46d22db70303c6e2a0e169ae04054",
        "file": [
            {
                "patch": "@@ -860,7 +860,7 @@ private void resumePersistentSchedulers(final AppContext appContext) {\n         final Collection<Scheduler> schedulers = new ArrayList<Scheduler>();\n         for (final BeanContext ejb : appContext.getBeanContexts()) {\n             final Scheduler scheduler = ejb.get(Scheduler.class);\n-            if (scheduler == globalScheduler || schedulers.contains(scheduler)) {\n+            if (scheduler == null ||    scheduler == globalScheduler || schedulers.contains(scheduler)) {\n                 continue;\n             }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/af5dc7f8fdc46d22db70303c6e2a0e169ae04054/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "f7cdbeb26578937622e1989ce88f8b0d4b026722",
                "blob_url": "https://github.com/apache/tomee/blob/af5dc7f8fdc46d22db70303c6e2a0e169ae04054/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java?ref=af5dc7f8fdc46d22db70303c6e2a0e169ae04054"
            }
        ],
        "bug_id": "tomee_61",
        "parent": "https://github.com/apache/tomee/commit/1875eb78cf18874652d866da7e4efb7857bc9a15",
        "message": "avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1453185 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/17bea2dc6b0be750e9c1c962dcf4c6eb01d9d5bd",
        "file": [
            {
                "patch": "@@ -155,7 +155,7 @@ public static boolean hasRole(Realm realm, Principal tomcatPrincipal, String log\n \t}\n \n \tpublic static boolean isTomcat7() {\n-\t\treturn System.getProperty(\"tomcat.version\").startsWith(\"7.\");\n+\t\treturn System.getProperty(\"tomcat.version\", \"7.\").startsWith(\"7.\");\n \t}\n \n \tpublic static void configureJarScanner(StandardContext standardContext) {",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/17bea2dc6b0be750e9c1c962dcf4c6eb01d9d5bd/tomee/tomee-loader/src/main/java/org/apache/tomee/loader/TomcatHelper.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "55448d127c2226dcde5d296fc482b6c960784875",
                "blob_url": "https://github.com/apache/tomee/blob/17bea2dc6b0be750e9c1c962dcf4c6eb01d9d5bd/tomee/tomee-loader/src/main/java/org/apache/tomee/loader/TomcatHelper.java",
                "filename": "tomee/tomee-loader/src/main/java/org/apache/tomee/loader/TomcatHelper.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-loader/src/main/java/org/apache/tomee/loader/TomcatHelper.java?ref=17bea2dc6b0be750e9c1c962dcf4c6eb01d9d5bd"
            }
        ],
        "bug_id": "tomee_62",
        "parent": "https://github.com/apache/tomee/commit/1d642fefb8f5c4c36880a7ceff2248474dd9fbdb",
        "message": "avoiding npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1438459 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/ab0ab335309ed095ac79b1ee75dbaef9b2f5ff71",
        "file": [
            {
                "patch": "@@ -205,7 +205,7 @@ public void afterApplicationCreated(final AppInfo appInfo, final WebAppInfo webA\n                 }\n \n                 if (deploymentWithApplication) { // don't do it if we detected we should use old deployment\n-                    if (appSkipped) {\n+                    if (appSkipped || application == null) {\n                         application = new InternalApplication(application);\n \n                         for (final String clazz : webApp.restClass) {",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/ab0ab335309ed095ac79b1ee75dbaef9b2f5ff71/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "762ad1230b75270a458439e32470b5188bd3fc29",
                "blob_url": "https://github.com/apache/tomee/blob/ab0ab335309ed095ac79b1ee75dbaef9b2f5ff71/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "filename": "server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java?ref=ab0ab335309ed095ac79b1ee75dbaef9b2f5ff71"
            }
        ],
        "bug_id": "tomee_63",
        "parent": "https://github.com/apache/tomee/commit/92b7f14f9943bb957a26b1137f8fe6c9e9d5e53f",
        "message": "NPE protection\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1432057 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/eb311ea0e790ca9839e4dcac31e073e36a714719",
        "file": [
            {
                "patch": "@@ -308,7 +308,7 @@ private void cmd(final List<String> additionalArgs, final String cmd, final bool\n \n                 if (\"start\".equals(cmd)) {\n                     server = process;\n-                } else if (\"stop\".equals(cmd)) {\n+                } else if (\"stop\".equals(cmd) && server != null) {\n                     server.waitFor();\n                 }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/eb311ea0e790ca9839e4dcac31e073e36a714719/container/openejb-core/src/main/java/org/apache/openejb/config/RemoteServer.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "6d6874ecfef75a702d58af19f0fdea581c3df7f2",
                "blob_url": "https://github.com/apache/tomee/blob/eb311ea0e790ca9839e4dcac31e073e36a714719/container/openejb-core/src/main/java/org/apache/openejb/config/RemoteServer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/RemoteServer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/RemoteServer.java?ref=eb311ea0e790ca9839e4dcac31e073e36a714719"
            }
        ],
        "bug_id": "tomee_64",
        "parent": "https://github.com/apache/tomee/commit/b8aae95d4e0f65a42fc2d4836ef52fa3c9cde155",
        "message": "avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1427557 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/a0a903f10aeb6fdbd3b56dff05abde1325db9165",
        "file": [
            {
                "patch": "@@ -79,11 +79,7 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n             logger.info(\"Set the '\"+VALIDATION_LEVEL+\"' system property to \"+ join(\" or \", levels) +\" for increased validation details.\");\n         }\n \n-        validationFailedException = new ValidationFailedException(\"Module failed validation. \" + uberContext.getModuleType() + \"(name=\" + uberContext.getName() + \")\", uberContext, validationFailedException);\n-\n-        if (validationFailedException != null) throw validationFailedException;\n-\n-        return appModule;\n+        throw  new ValidationFailedException(\"Module failed validation. \" + uberContext.getModuleType() + \"(name=\" + uberContext.getName() + \")\", uberContext, validationFailedException);\n     }\n \n     private void logResults(ValidationContext context, Level level) {",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/a0a903f10aeb6fdbd3b56dff05abde1325db9165/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java",
                "status": "modified",
                "changes": 6,
                "deletions": 5,
                "sha": "fb0201cf2e440d6d4e1c24deee24b0fef408674f",
                "blob_url": "https://github.com/apache/tomee/blob/a0a903f10aeb6fdbd3b56dff05abde1325db9165/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java?ref=a0a903f10aeb6fdbd3b56dff05abde1325db9165"
            },
            {
                "patch": "@@ -17,15 +17,24 @@\n package org.apache.openejb.config.rules;\n \n import org.apache.openejb.config.EjbModule;\n+import org.apache.xbean.finder.IAnnotationFinder;\n \n import javax.inject.Inject;\n \n public class CheckCdiEnabled extends ValidationBase {\n     public void validate(EjbModule ejbModule) {\n+        if (ejbModule.getFinder() == null) {\n+            return;\n+        }\n+\n         if (ejbModule.getBeans() == null\n-                && (!ejbModule.getFinder().findAnnotatedMethods(Inject.class).isEmpty()\n-                || !ejbModule.getFinder().findAnnotatedFields(Inject.class).isEmpty())) {\n+                && hasAtInject(ejbModule.getFinder())) {\n             warn(ejbModule.getModuleId(), \"cdi.notEnabled\", ejbModule.getModuleId());\n         }\n     }\n+\n+    private static boolean hasAtInject(final IAnnotationFinder finder) {\n+        return !finder.findAnnotatedMethods(Inject.class).isEmpty()\n+                || !finder.findAnnotatedFields(Inject.class).isEmpty();\n+    }\n }",
                "additions": 11,
                "raw_url": "https://github.com/apache/tomee/raw/a0a903f10aeb6fdbd3b56dff05abde1325db9165/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java",
                "status": "modified",
                "changes": 13,
                "deletions": 2,
                "sha": "3b56543648f34c8d5d36b07f3692553b399a3b51",
                "blob_url": "https://github.com/apache/tomee/blob/a0a903f10aeb6fdbd3b56dff05abde1325db9165/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java?ref=a0a903f10aeb6fdbd3b56dff05abde1325db9165"
            }
        ],
        "bug_id": "tomee_65",
        "parent": "https://github.com/apache/tomee/commit/e6dae643cb8f6dd52ca56f20efbb8fd043f0e721",
        "message": "avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1425860 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/0d769119cc44f227155f9d39efa98dd6a2c1b4b6",
        "file": [
            {
                "patch": "@@ -99,7 +99,7 @@ private boolean isIn(final PersistenceUnit value, final WebModule war) {\n     }\n \n     private WebModule extractWebApp(final URI moduleUri) {\n-        if (module == null) {\n+        if (module == null || module.getJarLocation() == null) {\n             return null;\n         }\n \n@@ -113,7 +113,7 @@ private WebModule extractWebApp(final URI moduleUri) {\n         }\n \n         for (WebModule webModule : module.getWebModules()) {\n-            if (isParent(new File(webModule.getJarLocation()), moduleFile, appModuleFile)) {\n+            if (webModule.getJarLocation() != null && isParent(new File(webModule.getJarLocation()), moduleFile, appModuleFile)) {\n                 return webModule;\n             }\n         }",
                "additions": 2,
                "raw_url": "https://github.com/apache/tomee/raw/0d769119cc44f227155f9d39efa98dd6a2c1b4b6/container/openejb-core/src/main/java/org/apache/openejb/config/PersistenceUnitLinkResolver.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "aae109062f8926a67b872806ab9300cbe3cbc3e1",
                "blob_url": "https://github.com/apache/tomee/blob/0d769119cc44f227155f9d39efa98dd6a2c1b4b6/container/openejb-core/src/main/java/org/apache/openejb/config/PersistenceUnitLinkResolver.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/PersistenceUnitLinkResolver.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/PersistenceUnitLinkResolver.java?ref=0d769119cc44f227155f9d39efa98dd6a2c1b4b6"
            }
        ],
        "bug_id": "tomee_66",
        "parent": "https://github.com/apache/tomee/commit/7556523201643c5c62f8ff87e76b0e974712e3d0",
        "message": "NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1423851 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/e5e799c5da5cb13e794c45c0e400c049dfbf4d93",
        "file": [
            {
                "patch": "@@ -186,7 +186,9 @@ public void start() throws Exception {\n         properties.setProperty(\"openejb.home\", catalinaBase);\n         properties.setProperty(\"openejb.base\", catalinaBase);\n         properties.setProperty(\"openejb.servicemanager.enabled\", \"false\");\n-        properties.putAll(configuration.getProperties());\n+        if (configuration.getProperties() != null) {\n+            properties.putAll(configuration.getProperties());\n+        }\n \n         try {\n             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/e5e799c5da5cb13e794c45c0e400c049dfbf4d93/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Container.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "55aeca7056a595f71d587c49d46e2e88e163f258",
                "blob_url": "https://github.com/apache/tomee/blob/e5e799c5da5cb13e794c45c0e400c049dfbf4d93/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Container.java",
                "filename": "tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Container.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Container.java?ref=e5e799c5da5cb13e794c45c0e400c049dfbf4d93"
            }
        ],
        "bug_id": "tomee_67",
        "parent": "https://github.com/apache/tomee/commit/e6176c4b8836bcec524aa61c62cbe565d95daa2c",
        "message": "avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1365496 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/17473860f8096944340ea1d2bb11f74acfe6610b",
        "file": [
            {
                "patch": "@@ -808,7 +808,7 @@ private Beans mergeBeansXml(final Beans current, final URL url) {\n                 current.getInterceptors().addAll(beans.getInterceptors());\n             }\n             // check is done here since later we lost the data of the origin\n-            ReadDescriptors.checkDuplicatedByBeansXml(beans, current);\n+            ReadDescriptors.checkDuplicatedByBeansXml(beans, returnValue);\n         } catch (OpenEJBException e) {\n             logger.error(\"Unable to read beans.xml from :\" + url.toExternalForm());\n         }",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/17473860f8096944340ea1d2bb11f74acfe6610b/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "15a1be44b909fe695969c60e7fbf5a8e110c007f",
                "blob_url": "https://github.com/apache/tomee/blob/17473860f8096944340ea1d2bb11f74acfe6610b/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=17473860f8096944340ea1d2bb11f74acfe6610b"
            }
        ],
        "bug_id": "tomee_68",
        "parent": "https://github.com/apache/tomee/commit/32c07d0ec642a68ba2c8c44968c577c8cf1b1a62",
        "message": "NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1360040 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/7ac4e38cfb2c8d10fbaacac91a385635cd8119f6",
        "file": [
            {
                "patch": "@@ -784,7 +784,7 @@ private void discardInstance(ThreadContext threadContext) {\n         }\n \n         Instance instance = checkedOutInstances.remove(primaryKey);\n-        if (!containsExtendedPersistenceContext(instance.beanContext)) {\n+        if (instance != null && !containsExtendedPersistenceContext(instance.beanContext)) {\n             cache.remove(primaryKey);\n         }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/7ac4e38cfb2c8d10fbaacac91a385635cd8119f6/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "5fc40d09dc1e7bd287e58ba87bd9659d81f6825b",
                "blob_url": "https://github.com/apache/tomee/blob/7ac4e38cfb2c8d10fbaacac91a385635cd8119f6/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java?ref=7ac4e38cfb2c8d10fbaacac91a385635cd8119f6"
            }
        ],
        "bug_id": "tomee_69",
        "parent": "https://github.com/apache/tomee/commit/d2d1d54ef3c3c70fe6d39e3dd31c4edfceea28a7",
        "message": "NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1341276 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/d78ccc6090c1fdcb0010e6aa73800b517b58a653",
        "file": [
            {
                "patch": "@@ -191,7 +191,7 @@ private void processPersistenceRefs(JndiConsumer component, AppModule appModule,\n \n     private PersistenceUnit processPersistenceRef(LinkResolver<PersistenceUnit> persistenceUnits, PersistenceRef ref, URI moduleURI, String componentName, ValidationContext validation) {\n \n-        if (ref.getMappedName().startsWith(\"jndi:\")){\n+        if (ref.getMappedName() != null && ref.getMappedName().startsWith(\"jndi:\")){\n             return null;\n         }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/d78ccc6090c1fdcb0010e6aa73800b517b58a653/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "29f313436d9f9f8ab64b514d54dea55e3eedf48a",
                "blob_url": "https://github.com/apache/tomee/blob/d78ccc6090c1fdcb0010e6aa73800b517b58a653/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java?ref=d78ccc6090c1fdcb0010e6aa73800b517b58a653"
            }
        ],
        "bug_id": "tomee_70",
        "parent": "https://github.com/apache/tomee/commit/53f8c293006adbb06e18260e7795330e49834886",
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@603579 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/27d92e24ebcf367e9e051b673ef8003c315c2f8d",
        "file": [
            {
                "patch": "@@ -827,7 +827,13 @@ void process(ClassLoader cl, String cls, Object object) {\n \n \t\tprivate String getConfigPropertyType(javax.resource.spi.ConfigProperty annotation, Class<?> type) {\n \t\t\tClass<?> t = (annotation == null) ? null : annotation.type();\n-\t\t\tif (t == null || t.equals(Object.class)) {\n+            if (t == null && type != null) {\n+                return type.getName();\n+            } else if (t == null) {\n+                return null;\n+            }\n+\n+\t\t\tif (t.equals(Object.class)) {\n \t\t\t\tt = type;\n \t\t\t}\n             if (t == null) { // t == null && type == null",
                "additions": 7,
                "raw_url": "https://github.com/apache/tomee/raw/27d92e24ebcf367e9e051b673ef8003c315c2f8d/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "status": "modified",
                "changes": 8,
                "deletions": 1,
                "sha": "dc438489a407a9af0649798cb445c89fac57bb6c",
                "blob_url": "https://github.com/apache/tomee/blob/27d92e24ebcf367e9e051b673ef8003c315c2f8d/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=27d92e24ebcf367e9e051b673ef8003c315c2f8d"
            }
        ],
        "bug_id": "tomee_71",
        "parent": "https://github.com/apache/tomee/commit/e25a26cc21356a0e894db5dd8bf7b9cc41772293",
        "message": "avoiding NPE when a custom mdb container uses badly defined activation properties\nOPENEJB-1747: Avoid NPE when a custom mdb container uses badly defined activation properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1203155 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/cba539cdfeee4f348f4adfdab84405c855785a8c",
        "file": [
            {
                "patch": "@@ -222,7 +222,7 @@ private boolean matchPath(final HttpServletRequest request) {\n     }\n \n     public InputStream findStaticContent(final HttpServletRequest request, final String[] welcomeFiles) throws ServletException {\n-        String pathInfo = request.getRequestURI().substring(request.getServletContext().getContextPath().length());\n+        String pathInfo = request.getRequestURI().substring(request.getContextPath().length());\n         for (final char c : URL_SEP) {\n             final int indexOf = pathInfo.indexOf(c);\n             if (indexOf > 0) {",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/cba539cdfeee4f348f4adfdab84405c855785a8c/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "b8466439ba88c7f4fc6e15f613f0d5432c44c4cd",
                "blob_url": "https://github.com/apache/tomee/blob/cba539cdfeee4f348f4adfdab84405c855785a8c/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java",
                "filename": "server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java?ref=cba539cdfeee4f348f4adfdab84405c855785a8c"
            }
        ],
        "bug_id": "tomee_72",
        "parent": "https://github.com/apache/tomee/commit/7b03cc808723b2e1452df5b0c8e30cc8e094fe5e",
        "message": "avoid NPE in embedded mode\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1625342 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/fe48af4e1a7042056a6b95f625e16ed090a7f6bd",
        "file": [
            {
                "patch": "@@ -259,7 +259,7 @@ private boolean skipEjbContext(final ThreadContext threadContext) {\n         // we use it to deploy so if any lookup is done during the deployment\n         // we don't want to get the DeployerEjb JNDI tree\n         // since this method is pretty quick that's not an issue to do the test\n-        return DeployerEjb.class.equals(threadContext.getBeanContext().getBeanClass());\n+        return threadContext == null || DeployerEjb.class.equals(threadContext.getBeanContext().getBeanClass());\n     }\n \n }",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/fe48af4e1a7042056a6b95f625e16ed090a7f6bd/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContext.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "4e7703ff5ecdb895666cf71d9dd7efbe26cb2e55",
                "blob_url": "https://github.com/apache/tomee/blob/fe48af4e1a7042056a6b95f625e16ed090a7f6bd/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContext.java",
                "filename": "tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContext.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContext.java?ref=fe48af4e1a7042056a6b95f625e16ed090a7f6bd"
            }
        ],
        "bug_id": "tomee_73",
        "parent": "https://github.com/apache/tomee/commit/eab15dce82106a3bfe6c277a5f6b63f9cda326a6",
        "message": "NPE protection for tomee embedded where DeployerEjb is not used\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1599412 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/74b3cffae81620b81492c03d32c2bec69e37a149",
        "file": [
            {
                "patch": "@@ -36,18 +36,20 @@\n     @Override\n     public void contextEntered(final ThreadContext oldContext, final ThreadContext newContext) {\n         final BeanContext beanContext = newContext.getBeanContext();\n-        if (beanContext == null) {\n+        if (beanContext == null) { // OWBContextHolder will be null so calling contextExited will throw a NPE\n             return;\n         }\n         final ModuleContext moduleContext = beanContext.getModuleContext();\n         //TODO its not clear what the scope for one of these context should be: ejb, module, or app\n         //For now, go with the attachment of the BeanManager to AppContext\n         final AppContext appContext = moduleContext.getAppContext();\n         final WebBeansContext owbContext = appContext.getWebBeansContext();\n-        if (owbContext == null) {\n-            return;\n+        final Object oldOWBContext;\n+        if (owbContext != null) {\n+            oldOWBContext = singletonService.contextEntered(owbContext);\n+        } else {\n+            oldOWBContext = null;\n         }\n-        final Object oldOWBContext = singletonService.contextEntered(owbContext);\n         final OWBContextHolder holder = new OWBContextHolder(oldOWBContext);\n         newContext.set(OWBContextHolder.class, holder);\n     }\n@@ -58,7 +60,11 @@ public void contextExited(final ThreadContext exitedContext, final ThreadContext\n         if (oldOWBContext == null) {\n             throw new NullPointerException(\"OWBContext not set in this thread\");\n         }\n-        singletonService.contextExited(oldOWBContext.getContext());\n+\n+        final Object oldOWBContextContext = oldOWBContext.getContext();\n+        if (oldOWBContextContext != null) {\n+            singletonService.contextExited(oldOWBContextContext);\n+        }\n     }\n \n     private static final class OWBContextHolder {",
                "additions": 11,
                "raw_url": "https://github.com/apache/tomee/raw/74b3cffae81620b81492c03d32c2bec69e37a149/container/openejb-core/src/main/java/org/apache/openejb/cdi/OWBContextThreadListener.java",
                "status": "modified",
                "changes": 16,
                "deletions": 5,
                "sha": "268be5928f9d50a191160d5da236d79c3a6d21e8",
                "blob_url": "https://github.com/apache/tomee/blob/74b3cffae81620b81492c03d32c2bec69e37a149/container/openejb-core/src/main/java/org/apache/openejb/cdi/OWBContextThreadListener.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/OWBContextThreadListener.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/OWBContextThreadListener.java?ref=74b3cffae81620b81492c03d32c2bec69e37a149"
            }
        ],
        "bug_id": "tomee_74",
        "parent": "https://github.com/apache/tomee/commit/d4fb815d88216221331c57f59c56ab1d6a822f4e",
        "message": "avoiding NPE when ejb has no webbeanscontext (internal app mainly)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1598983 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/6db632dbf6e8b0c179862415e6a0ca1051bf46ca",
        "file": [
            {
                "patch": "@@ -69,7 +69,7 @@ public AddressInfo createRsHttpListener(final String webContext, final HttpListe\n         }\n \n         // find the existing host (we do not auto-create hosts)\n-        Container host = null;\n+        Container host;\n         Context context = null;\n         if (virtualHost == null) {\n             host = hosts.getDefault();\n@@ -160,18 +160,17 @@ private static String address(final Collection<Connector> connectors, final Stri\n \n     @Override\n     public HttpListener removeListener(final String completePath) {\n-        String path = completePath;\n-        if (path == null) {\n-            return listeners.get(path);\n-        }\n-\n-        // assure context root with a leading slash\n-        if (!path.startsWith(\"/\") && !path.startsWith(\"http://\") && !path.startsWith(\"https://\")) {\n-            path = \"/\" + path;\n-        }\n-\n-        if (listeners.containsKey(path)) {\n-            return listeners.remove(path);\n+        if(completePath != null) {\n+            String path = completePath;\n+            // assure context root with a leading slash\n+            if (!path.startsWith(\"/\") && !path.startsWith(\"http://\") && !path.startsWith(\"https://\")) {\n+                path = \"/\" + path;\n+            } else {\n+                path = completePath;\n+            }\n+            if (listeners.containsKey(path)) {\n+                return listeners.remove(path);\n+            }\n         }\n         return null;\n     }",
                "additions": 12,
                "raw_url": "https://github.com/apache/tomee/raw/6db632dbf6e8b0c179862415e6a0ca1051bf46ca/tomee/tomee-jaxrs/src/main/java/org/apache/tomee/webservices/TomcatRsRegistry.java",
                "status": "modified",
                "changes": 25,
                "deletions": 13,
                "sha": "f637422db89580c134ef62fb843985a685c9c271",
                "blob_url": "https://github.com/apache/tomee/blob/6db632dbf6e8b0c179862415e6a0ca1051bf46ca/tomee/tomee-jaxrs/src/main/java/org/apache/tomee/webservices/TomcatRsRegistry.java",
                "filename": "tomee/tomee-jaxrs/src/main/java/org/apache/tomee/webservices/TomcatRsRegistry.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-jaxrs/src/main/java/org/apache/tomee/webservices/TomcatRsRegistry.java?ref=6db632dbf6e8b0c179862415e6a0ca1051bf46ca"
            }
        ],
        "bug_id": "tomee_75",
        "parent": "https://github.com/apache/tomee/commit/cd856efa5cf36b7c085eb288f60920e3538dcfe5",
        "message": "removing possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1598034 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/4da4a0fb3f0661b62a6eb0a5a963b38a62cb312a",
        "file": [
            {
                "patch": "@@ -54,9 +54,11 @@ private OpenEJBEnricher() {\n     public static void enrich(final Object testInstance, final AppContext ctx) {\n         // don't rely on arquillian since this enrichment should absolutely be done before the following ones\n         new MockitoEnricher().enrich(testInstance);\n+        if (ctx == null) {\n+            return;\n+        }\n \n-        final BeanContext context = SystemInstance.get().getComponent(ContainerSystem.class)\n-                .getBeanContext(ctx.getId() + \"_\" + testInstance.getClass().getName());\n+        final BeanContext context = SystemInstance.get().getComponent(ContainerSystem.class).getBeanContext(ctx.getId() + \"_\" + testInstance.getClass().getName());\n \n         final BeanManagerImpl bm = findBeanManager(ctx);\n         if (bm != null && bm.isInUse()) {",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/4da4a0fb3f0661b62a6eb0a5a963b38a62cb312a/arquillian/arquillian-common/src/main/java/org/apache/openejb/arquillian/common/enrichment/OpenEJBEnricher.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "2b3564655dbc147e2feeb69dcff267396446dba0",
                "blob_url": "https://github.com/apache/tomee/blob/4da4a0fb3f0661b62a6eb0a5a963b38a62cb312a/arquillian/arquillian-common/src/main/java/org/apache/openejb/arquillian/common/enrichment/OpenEJBEnricher.java",
                "filename": "arquillian/arquillian-common/src/main/java/org/apache/openejb/arquillian/common/enrichment/OpenEJBEnricher.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-common/src/main/java/org/apache/openejb/arquillian/common/enrichment/OpenEJBEnricher.java?ref=4da4a0fb3f0661b62a6eb0a5a963b38a62cb312a"
            },
            {
                "patch": "@@ -42,7 +42,7 @@ private AppContext getAppContext(final String className) {\n         for (final AppContext app : containerSystem.getAppContexts()) {\n             final BeanContext context = containerSystem.getBeanContext(app.getId() + \"_\" + className);\n             if (context != null) {\n-                return context.getModuleContext().getAppContext();\n+                return app;\n             }\n         }\n         return null;",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/4da4a0fb3f0661b62a6eb0a5a963b38a62cb312a/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEInjectionEnricher.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "3018906065bc429a9a165a3876fe80df4af9af13",
                "blob_url": "https://github.com/apache/tomee/blob/4da4a0fb3f0661b62a6eb0a5a963b38a62cb312a/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEInjectionEnricher.java",
                "filename": "arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEInjectionEnricher.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEInjectionEnricher.java?ref=4da4a0fb3f0661b62a6eb0a5a963b38a62cb312a"
            }
        ],
        "bug_id": "tomee_76",
        "parent": "https://github.com/apache/tomee/commit/ad166332798d08760bb7ddcd2d20261cb7e34ec9",
        "message": "simplifying TomEEInjectionEnricher and avoiding NPE in OpenEJBEnricher\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1594659 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/1b462ff10ac88e3c5cf6fd3cfd358509c604648b",
        "file": [
            {
                "patch": "@@ -119,7 +119,9 @@ public void enhance(@Observes final BeforeDeploymentEvent event) {\n                     // ignored\n                 } finally {\n                     try {\n-                        jar.close();\n+                        if (jar != null) {\n+                            jar.close();\n+                        }\n                     } catch (final IOException e) {\n                         // no-op\n                     }",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/1b462ff10ac88e3c5cf6fd3cfd358509c604648b/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/DeployTimeEnhancer.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "1b61e18d95add0fd8ed3d1792a116533db643ca0",
                "blob_url": "https://github.com/apache/tomee/blob/1b462ff10ac88e3c5cf6fd3cfd358509c604648b/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/DeployTimeEnhancer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/DeployTimeEnhancer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/DeployTimeEnhancer.java?ref=1b462ff10ac88e3c5cf6fd3cfd358509c604648b"
            }
        ],
        "bug_id": "tomee_77",
        "parent": "https://github.com/apache/tomee/commit/ce3c1ec6f525d3844ac83a65521029548fc511e3",
        "message": "OPENEJB-2087 NPE protection\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1588072 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/34b843dd5804665bcfba2aafecc21419d6f46b1b",
        "file": [
            {
                "patch": "@@ -66,7 +66,7 @@ protected void startInternal() throws LifecycleException {\n         // standard tomcat part\r\n         final StringBuilder builder = new StringBuilder();\r\n         final String classpath = String.class.cast(Reflections.get(this, \"virtualClasspath\"));\r\n-        if (!classpath.isEmpty()) {\r\n+        if (classpath != null && !classpath.isEmpty()) {\r\n             for (final String s : String.class.cast(classpath).split(\";\")) {\r\n                 builder.append(ProvisioningUtil.realLocation(s)).append(\";\");\r\n             }\r",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/34b843dd5804665bcfba2aafecc21419d6f46b1b/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/ProvisioningWebappLoader.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "f18db05254d1bb2ab968d770846989f90c528a95",
                "blob_url": "https://github.com/apache/tomee/blob/34b843dd5804665bcfba2aafecc21419d6f46b1b/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/ProvisioningWebappLoader.java",
                "filename": "tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/ProvisioningWebappLoader.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/ProvisioningWebappLoader.java?ref=34b843dd5804665bcfba2aafecc21419d6f46b1b"
            }
        ],
        "bug_id": "tomee_78",
        "parent": "https://github.com/apache/tomee/commit/a3ad8e97c1d0d43bc55a2d3722bf02dbd7e3f309",
        "message": "avoid NPE in provisioning loader when created programmatically\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1574780 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/16bd56d809babb2b22959e0e9401d96aa0799fc8",
        "file": [
            {
                "patch": "@@ -632,6 +632,10 @@ private static String read(File file) {\n     }\n \n     protected void run() {\n+        if (classpaths == null) { // NPE protection when execute is skipped and mojo delegates to run directly\n+            classpaths = new ArrayList<String>();\n+        }\n+\n         final String deployOpenEjbAppKey = \"openejb.system.apps\";\n         final String servletCompliance = \"org.apache.catalina.STRICT_SERVLET_COMPLIANCE\";\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/16bd56d809babb2b22959e0e9401d96aa0799fc8/maven/tomee-maven-plugin/src/main/java/org/apache/openejb/maven/plugin/AbstractTomEEMojo.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "10ef388be0733b1b212a6db21b9d5b05df0fefda",
                "blob_url": "https://github.com/apache/tomee/blob/16bd56d809babb2b22959e0e9401d96aa0799fc8/maven/tomee-maven-plugin/src/main/java/org/apache/openejb/maven/plugin/AbstractTomEEMojo.java",
                "filename": "maven/tomee-maven-plugin/src/main/java/org/apache/openejb/maven/plugin/AbstractTomEEMojo.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/maven/tomee-maven-plugin/src/main/java/org/apache/openejb/maven/plugin/AbstractTomEEMojo.java?ref=16bd56d809babb2b22959e0e9401d96aa0799fc8"
            }
        ],
        "bug_id": "tomee_79",
        "parent": "https://github.com/apache/tomee/commit/e773b384b636959fed78e04ef125f941ca67253d",
        "message": "TOMEE-1088 NPE protection for classpaths in run()\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1545259 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/0a1e9d2626fb3adede3b74b25e1eb92e56f7577e",
        "file": [
            {
                "patch": "@@ -87,7 +87,7 @@ public void requestDestroyed(ServletRequestEvent event) {\n         }\n \n         if (logger.isDebugEnabled()) {\n-            logger.debug(\"Destroying a request : [{0}]\", event.getServletRequest().getRemoteAddr());\n+            logger.debug(\"Destroying a request : [{0}]\", event == null ? \"null\" : event.getServletRequest().getRemoteAddr());\n         }\n \n         final Object oldContext;",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/0a1e9d2626fb3adede3b74b25e1eb92e56f7577e/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/EndWebBeansListener.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "0965dc81006b0084f606697699e5144c1f66ccc4",
                "blob_url": "https://github.com/apache/tomee/blob/0a1e9d2626fb3adede3b74b25e1eb92e56f7577e/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/EndWebBeansListener.java",
                "filename": "server/openejb-http/src/main/java/org/apache/openejb/server/httpd/EndWebBeansListener.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/EndWebBeansListener.java?ref=0a1e9d2626fb3adede3b74b25e1eb92e56f7577e"
            }
        ],
        "bug_id": "tomee_80",
        "parent": "https://github.com/apache/tomee/commit/cb5b1861e0ca2563cb0d1851a9ac37693a6160b5",
        "message": "Fix a potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1538580 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/0ea03db674576ef91e182225d2e66c53dd210a9e",
        "file": [
            {
                "patch": "@@ -184,9 +184,11 @@ private void cleanUpRestServlets() {\n             for (final String clazz : webAppInfo.restApplications) {\n                 final Container child = mappedChildren.get(clazz);\n                 try { // remove only \"fake\" servlets to let users use their own stuff\n-                    final String servletClass = StandardWrapper.class.cast(child).getServletClass();\n-                    if (child != null && (\"org.apache.openejb.server.rest.OpenEJBRestServlet\".equals(servletClass) || !HttpServlet.class.isAssignableFrom(info.loader().loadClass(servletClass)))) {\n-                        context.removeChild(child);\n+                    if (child != null) {\n+                        final String servletClass = StandardWrapper.class.cast(child).getServletClass();\n+                        if (\"org.apache.openejb.server.rest.OpenEJBRestServlet\".equals(servletClass) || !HttpServlet.class.isAssignableFrom(info.loader().loadClass(servletClass))) {\n+                            context.removeChild(child);\n+                        }\n                     }\n                 } catch (final NoClassDefFoundError e) {\n                     context.removeChild(child);",
                "additions": 5,
                "raw_url": "https://github.com/apache/tomee/raw/0ea03db674576ef91e182225d2e66c53dd210a9e/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContextConfig.java",
                "status": "modified",
                "changes": 8,
                "deletions": 3,
                "sha": "ed46ecff8cd491b522b17123846efb2f01f172d2",
                "blob_url": "https://github.com/apache/tomee/blob/0ea03db674576ef91e182225d2e66c53dd210a9e/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContextConfig.java",
                "filename": "tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContextConfig.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContextConfig.java?ref=0ea03db674576ef91e182225d2e66c53dd210a9e"
            }
        ],
        "bug_id": "tomee_81",
        "parent": "https://github.com/apache/tomee/commit/e194e5fc430c76c9b0442f481d1451811f141354",
        "message": "avoiding NPE when cleaning up rest servlets\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1504455 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/532183701a2eb25df52d689c5d7f0c7f2ef610a7",
        "file": [
            {
                "patch": "@@ -220,7 +220,7 @@ public void startElement(String uri, String localName, String qName, Attributes\n             }\n \n             public void startPersistenceUnit(String uri, String localName, String qName, Attributes attributes) {\n-                String unitName = attributes.getValue(null, \"name\");\n+                String unitName = attributes.getValue(\"name\");\n                 unit = new Unit(unitName);\n             }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/532183701a2eb25df52d689c5d7f0c7f2ef610a7/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceBootstrap.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "e3d6aa06d388dde8842d80593446d7ec22a56834",
                "blob_url": "https://github.com/apache/tomee/blob/532183701a2eb25df52d689c5d7f0c7f2ef610a7/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceBootstrap.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceBootstrap.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceBootstrap.java?ref=532183701a2eb25df52d689c5d7f0c7f2ef610a7"
            }
        ],
        "bug_id": "tomee_82",
        "parent": "https://github.com/apache/tomee/commit/cd04522fc01e68e2bf1baa0f709737145a9e05ce",
        "message": "TOMEE-956 avoiding NPE in persistence bootstrap\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1488553 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/747443d362e9eb484f08b9f5ec3339a2906526a8",
        "file": [
            {
                "patch": "@@ -623,6 +623,10 @@ private void quickCheckIfOldDeploymentShouldBeUsedFromEjbConfig(final AppInfo ap\n             for (final EnterpriseBeanInfo bean : ejbJar.enterpriseBeans) {\n                 if (bean.restService) {\n                     final BeanContext beanContext = containerSystem.getBeanContext(bean.ejbDeploymentId);\n+                    if (beanContext == null) { // ear\n+                        continue;\n+                    }\n+\n                     if (containsJaxRsConfiguration(beanContext.getProperties())) {\n                         appInfo.properties.setProperty(OPENEJB_USE_APPLICATION_PROPERTY, \"false\");\n                         logOldDeploymentUsage(bean.ejbClass);\n@@ -653,7 +657,9 @@ private void quickCheckIfOldDeploymentShouldBeUsedFromEjbConfig(final AppInfo ap\n         final Map<String, EJBRestServiceInfo> restEjbs = new HashMap<String, EJBRestServiceInfo>();\n         for (final WebAppInfo webApp : appInfo.webApps) {\n             for (final String ejb : webApp.ejbRestServices) {\n-                restEjbs.put(ejb, new EJBRestServiceInfo(webApp.contextRoot, beanContexts.get(ejb)));\n+                if (beanContexts.containsKey(ejb)) {\n+                    restEjbs.put(ejb, new EJBRestServiceInfo(webApp.contextRoot, beanContexts.get(ejb)));\n+                } // else ear probably\n             }\n         }\n         for (final Map.Entry<String, BeanContext> ejbs : beanContexts.entrySet()) {",
                "additions": 7,
                "raw_url": "https://github.com/apache/tomee/raw/747443d362e9eb484f08b9f5ec3339a2906526a8/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "status": "modified",
                "changes": 8,
                "deletions": 1,
                "sha": "45f3ef1caba218a332949317068de9ca7a17dd79",
                "blob_url": "https://github.com/apache/tomee/blob/747443d362e9eb484f08b9f5ec3339a2906526a8/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "filename": "server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java?ref=747443d362e9eb484f08b9f5ec3339a2906526a8"
            }
        ],
        "bug_id": "tomee_83",
        "parent": "https://github.com/apache/tomee/commit/b762d730c9de38e6c0d61859606a51f383b97caa",
        "message": "TOMEE-946 avoiding npe for rest integration and ears\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1485773 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/4916c2351dd0e4643ce218c190f035697f2234be",
        "file": [
            {
                "patch": "@@ -152,8 +152,6 @@ public Object inject(final Object o) throws OpenEJBException {\n \n         try {\n             final WebBeansContext webBeansContext = getWebBeansContext();\n-            final ConstructorInjectionBean<Object> beanDefinition = getConstructorInjectionBean(o.getClass(), webBeansContext);\n-            final CreationalContext<Object> creationalContext = webBeansContext.getBeanManagerImpl().createCreationalContext(beanDefinition);\n \n             // Create bean instance\n             final Context initialContext = (Context) new InitialContext().lookup(\"java:\");\n@@ -162,13 +160,18 @@ public Object inject(final Object o) throws OpenEJBException {\n \n             final Object beanInstance = injectionProcessor.createInstance();\n \n-            InjectionTargetBean<Object> bean = InjectionTargetBean.class.cast(beanDefinition);\n-            bean.getInjectionTarget().inject(beanInstance, creationalContext);\n+            if (webBeansContext != null) {\n+                final ConstructorInjectionBean<Object> beanDefinition = getConstructorInjectionBean(o.getClass(), webBeansContext);\n+                final CreationalContext<Object> creationalContext = webBeansContext.getBeanManagerImpl().createCreationalContext(beanDefinition);\n \n-            // if the bean is dependent simply cleanup the creational context once it is created\n-            final Class<? extends Annotation> scope = beanDefinition.getScope();\n-            if (scope == null || Dependent.class.equals(scope)) {\n-                creatonalContexts.put(beanInstance, creationalContext);\n+                InjectionTargetBean<Object> bean = InjectionTargetBean.class.cast(beanDefinition);\n+                bean.getInjectionTarget().inject(beanInstance, creationalContext);\n+\n+                // if the bean is dependent simply cleanup the creational context once it is created\n+                final Class<? extends Annotation> scope = beanDefinition.getScope();\n+                if (scope == null || Dependent.class.equals(scope)) {\n+                    creatonalContexts.put(beanInstance, creationalContext);\n+                }\n             }\n \n             return beanInstance;",
                "additions": 11,
                "raw_url": "https://github.com/apache/tomee/raw/4916c2351dd0e4643ce218c190f035697f2234be/container/openejb-core/src/main/java/org/apache/openejb/core/WebContext.java",
                "status": "modified",
                "changes": 19,
                "deletions": 8,
                "sha": "33a73f382b7c598179d13c4b6f39b06417ead249",
                "blob_url": "https://github.com/apache/tomee/blob/4916c2351dd0e4643ce218c190f035697f2234be/container/openejb-core/src/main/java/org/apache/openejb/core/WebContext.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/WebContext.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/WebContext.java?ref=4916c2351dd0e4643ce218c190f035697f2234be"
            }
        ],
        "bug_id": "tomee_84",
        "parent": "https://github.com/apache/tomee/commit/b9744b704a6a53e9c9ee4c1c7da622edc5150d4e",
        "message": "WebContext NPE  protection\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1483093 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/c651388cc20861b6faec8adb31226c280aef5a00",
        "file": [
            {
                "patch": "@@ -33,7 +33,11 @@ public WebappWebBeansContext(Map<Class<?>, Object> services, Properties properti\n     @Override\n     public BeanManagerImpl getBeanManagerImpl() {\n         if (bm == null) { // should be done in the constructor\n-            bm = new WebappBeanManager(this);\n+            synchronized (this) {\n+                if (bm == null) {\n+                    bm = new WebappBeanManager(this);\n+                }\n+            }\n         }\n         return bm;\n     }",
                "additions": 5,
                "raw_url": "https://github.com/apache/tomee/raw/c651388cc20861b6faec8adb31226c280aef5a00/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappWebBeansContext.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "b88410f62999cdefdfe3181380742839111c2717",
                "blob_url": "https://github.com/apache/tomee/blob/c651388cc20861b6faec8adb31226c280aef5a00/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappWebBeansContext.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappWebBeansContext.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappWebBeansContext.java?ref=c651388cc20861b6faec8adb31226c280aef5a00"
            },
            {
                "patch": "@@ -284,7 +284,7 @@ public static void mergeJava(StandardContext standardContext) {\n             comp.rebind(\"ORB\", new SystemComponentReference(ORB.class));\n             comp.rebind(\"HandleDelegate\", new SystemComponentReference(HandleDelegate.class));\n \n-            if (webContext != null) {\n+            if (webContext != null && webContext.getWebbeansContext() != null) {\n                 comp.rebind(\"BeanManager\", webContext.getWebbeansContext().getBeanManagerImpl());\n             } else if (contextInfo != null) {\n                 comp.rebind(\"BeanManager\", cs.getAppContext(contextInfo.appInfo.appId).getBeanManager());",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/c651388cc20861b6faec8adb31226c280aef5a00/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatJndiBuilder.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "bef20d3114139c72f78b2f154b71d519bd0c8a94",
                "blob_url": "https://github.com/apache/tomee/blob/c651388cc20861b6faec8adb31226c280aef5a00/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatJndiBuilder.java",
                "filename": "tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatJndiBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatJndiBuilder.java?ref=c651388cc20861b6faec8adb31226c280aef5a00"
            }
        ],
        "bug_id": "tomee_85",
        "parent": "https://github.com/apache/tomee/commit/f4f4b9a68d64aaaff88fd6073926915517f7a917",
        "message": "NPE + thread safety\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1482458 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/16de1608fb2ef65175965135ebc3f8485854b6e6",
        "file": [
            {
                "patch": "@@ -1638,7 +1638,7 @@ public void afterStop(final StandardContext standardContext) {\n             }\n             ClassLoaderUtil.cleanOpenJPACache(old);\n         }\n-        if (contextInfo.appInfo == null || contextInfo.appInfo.webAppAlone) {\n+        if (contextInfo != null && (contextInfo.appInfo == null || contextInfo.appInfo.webAppAlone)) {\n             removeContextInfo(standardContext);\n         }\n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/16de1608fb2ef65175965135ebc3f8485854b6e6/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "47747b07c71b20386331fa02c82dc9720e304cae",
                "blob_url": "https://github.com/apache/tomee/blob/16de1608fb2ef65175965135ebc3f8485854b6e6/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java",
                "filename": "tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java?ref=16de1608fb2ef65175965135ebc3f8485854b6e6"
            }
        ],
        "bug_id": "tomee_86",
        "parent": "https://github.com/apache/tomee/commit/ce7067b375e5d732e66380b959a823ced4adcf23",
        "message": "avoiding NPE when installing/stopping tomcat/tomee-webapp\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1458767 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/664f47433a770094bc40e3d8db663e59aa2336bf",
        "file": [
            {
                "patch": "@@ -46,7 +46,15 @@ public UpdatableSessionContextManager() {\n     }\n \n     public void updateSessionIdMapping(final String oldId, final String newId) {\n+        if (oldId == null) {\n+            return;\n+        }\n+\n         final SessionContext sc = getSessionContextWithSessionId(oldId);\n+        if (sc == null) {\n+            return;\n+        }\n+\n         addNewSessionContext(newId, sc);\n         contextById.remove(oldId);\n     }",
                "additions": 8,
                "raw_url": "https://github.com/apache/tomee/raw/664f47433a770094bc40e3d8db663e59aa2336bf/container/openejb-core/src/main/java/org/apache/openejb/cdi/UpdatableSessionContextManager.java",
                "status": "modified",
                "changes": 8,
                "deletions": 0,
                "sha": "80022cb69204e8fe527f9d4eee68cf03b3ed4c68",
                "blob_url": "https://github.com/apache/tomee/blob/664f47433a770094bc40e3d8db663e59aa2336bf/container/openejb-core/src/main/java/org/apache/openejb/cdi/UpdatableSessionContextManager.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/UpdatableSessionContextManager.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/UpdatableSessionContextManager.java?ref=664f47433a770094bc40e3d8db663e59aa2336bf"
            }
        ],
        "bug_id": "tomee_87",
        "parent": "https://github.com/apache/tomee/commit/d2e231fc9cf4766e2dafe7b2c6a123743c1a1851",
        "message": "avoiding NPE with UpdatableSessionContextManager\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1440298 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/ee4eec8721f37dfcf52f9ec21880183bf87b2456",
        "file": [
            {
                "patch": "@@ -16,9 +16,10 @@\n  */\n package org.apache.openejb.util;\n \n+import org.apache.openejb.loader.SystemInstance;\n+\n import java.util.Map;\n import java.util.Properties;\n-import org.apache.openejb.loader.SystemInstance;\n \n public final class PropertyPlaceHolderHelper {\n     private static final String PREFIX = \"${\";\n@@ -48,11 +49,16 @@ public static String value(final String key) {\n     }\n \n     public static Properties holds(final Properties properties) {\n-        final Properties updated = new Properties();\n+        // we can put null values in SuperProperties, since properties is often of this type we need to tolerate it\n+        final Properties updated = new SuperProperties();\n+        if (properties == null) {\n+            return updated;\n+        }\n+\n         for (Map.Entry<Object, Object> entry : properties.entrySet()) {\n             final Object rawValue = entry.getValue();\n             if (rawValue instanceof String) {\n-                updated.put(entry.getKey(), value(rawValue.toString()));\n+                updated.put(entry.getKey(), value((String) rawValue));\n             } else {\n                 updated.put(entry.getKey(), rawValue);\n             }",
                "additions": 9,
                "raw_url": "https://github.com/apache/tomee/raw/ee4eec8721f37dfcf52f9ec21880183bf87b2456/container/openejb-core/src/main/java/org/apache/openejb/util/PropertyPlaceHolderHelper.java",
                "status": "modified",
                "changes": 12,
                "deletions": 3,
                "sha": "58f6799631e4330dc2ed481a91b42ee218a0e04f",
                "blob_url": "https://github.com/apache/tomee/blob/ee4eec8721f37dfcf52f9ec21880183bf87b2456/container/openejb-core/src/main/java/org/apache/openejb/util/PropertyPlaceHolderHelper.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/util/PropertyPlaceHolderHelper.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/util/PropertyPlaceHolderHelper.java?ref=ee4eec8721f37dfcf52f9ec21880183bf87b2456"
            }
        ],
        "bug_id": "tomee_88",
        "parent": "https://github.com/apache/tomee/commit/93d3f9105c34811da20c257578536b0a198f74ca",
        "message": "TOMEE-723 avoiding NPE in property placeholder\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1431710 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/27f7a965bc546c264c20cfd79b822876fd544fdc",
        "file": [
            {
                "patch": "@@ -56,7 +56,6 @@\n import javax.xml.bind.Marshaller;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -290,11 +289,18 @@ public void deployApplication(final Application application, final String prefix\n     }\n \n     private static String forceLength(final String httpMethod, final int l) {\n+        final String http;\n+        if (httpMethod == null) { // subresourcelocator implies null http method\n+            http = \"\";\n+        } else {\n+            http = httpMethod;\n+        }\n+\n         final StringBuilder builder = new StringBuilder();\n-        for (int i = 0; i < l - httpMethod.length(); i++) {\n+        for (int i = 0; i < l - http.length(); i++) {\n             builder.append(\" \");\n         }\n-        return builder.append(httpMethod).toString();\n+        return builder.append(http).toString();\n     }\n \n     public static String toGenericString(final Method mtd) {\n@@ -362,7 +368,7 @@ private JAXRSServerFactoryBean newFactory(String prefix) {\n         final JAXRSServerFactoryBean factory = new JAXRSServerFactoryBean();\n         factory.setDestinationFactory(transportFactory);\n         factory.setBus(transportFactory.getBus());\n-        factory.setAddress(prefix);\n+        factory.setAddress(prefix.substring(0, prefix.length() - wildcard.length()));\n         return factory;\n     }\n ",
                "additions": 10,
                "raw_url": "https://github.com/apache/tomee/raw/27f7a965bc546c264c20cfd79b822876fd544fdc/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java",
                "status": "modified",
                "changes": 14,
                "deletions": 4,
                "sha": "c67749453547dff5d9986b9c54987c3946bd5271",
                "blob_url": "https://github.com/apache/tomee/blob/27f7a965bc546c264c20cfd79b822876fd544fdc/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java",
                "filename": "server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java?ref=27f7a965bc546c264c20cfd79b822876fd544fdc"
            }
        ],
        "bug_id": "tomee_89",
        "parent": "https://github.com/apache/tomee/commit/ba0f852fe08126a22b55160c437103ad4c04bacf",
        "message": "avoiding NPE + setting right address to JAXRSServerFactoryBean\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1430039 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/9ec751cbb443e4a3e34961aa6c0e7e584e47306e",
        "file": [
            {
                "patch": "@@ -233,7 +233,10 @@ public String getRemoteUser() {\n \n     @Override\n     public String getRequestedSessionId() {\n-        return session.getId();\n+        if (session != null) {\n+            return session.getId();\n+        }\n+        return null;\n     }\n \n     @Override",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/9ec751cbb443e4a3e34961aa6c0e7e584e47306e/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "03a7b2914ae99520221fd60e4f907efe4f8af5c6",
                "blob_url": "https://github.com/apache/tomee/blob/9ec751cbb443e4a3e34961aa6c0e7e584e47306e/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java",
                "filename": "server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java?ref=9ec751cbb443e4a3e34961aa6c0e7e584e47306e"
            }
        ],
        "bug_id": "tomee_90",
        "parent": "https://github.com/apache/tomee/commit/cacfcaf967b9152ce34b3a9c1386f3a17994fee0",
        "message": "avoiding NPE and fixing implementation of request#getRequestedSessionId\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1429688 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/b9f18c089f626426993b3f878c6dee88f88fb868",
        "file": [
            {
                "patch": "@@ -327,6 +327,10 @@ public PersistenceClassFileTransformer(ClassTransformer classTransformer) {\n     // not the shouldSkip() method from UrlClassLoaderFirst since we skip more here\n     // we just need JPA stuff so all the tricks we have for the server part are useless\n     public static boolean isServerClass(final String name) {\n+        if (name == null) {\n+            return false;\n+        }\n+\n         for (String prefix : URLClassLoaderFirst.FORCED_SKIP) {\n             if (name.startsWith(prefix)) {\n                 return true;\n@@ -369,6 +373,7 @@ public static boolean isServerClass(final String name) {\n                 if (apache.startsWith(\"juli.\")) return true;\n                 if (apache.startsWith(\"webbeans.\")) return true;\n                 if (apache.startsWith(\"cxf.\")) return true;\n+                if (apache.startsWith(\"activemq.\")) return true;\n \n                 if (apache.startsWith(\"commons.\")) {\n                     final String commons = apache.substring(\"commons.\".length());",
                "additions": 5,
                "raw_url": "https://github.com/apache/tomee/raw/b9f18c089f626426993b3f878c6dee88f88fb868/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "66405c519994f784c80b9b3a53c1b991186e605a",
                "blob_url": "https://github.com/apache/tomee/blob/b9f18c089f626426993b3f878c6dee88f88fb868/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java?ref=b9f18c089f626426993b3f878c6dee88f88fb868"
            },
            {
                "patch": "@@ -169,6 +169,10 @@ public static boolean canBeLoadedFromSystem(final String name) {\n     // /!\\ please check org.apache.openejb.persistence.PersistenceUnitInfoImpl.isServerClass() too\n     // when updating this method\n     public static boolean shouldSkip(final String name) {\n+        if (name == null) { // can happen with rest servlet definition or errors\n+            return false;\n+        }\n+\n         for (String prefix : FORCED_SKIP) {\n             if (name.startsWith(prefix)) {\n                 return true;",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/b9f18c089f626426993b3f878c6dee88f88fb868/container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "72b8b447adc30799e19e46edecf098f2762ff9ad",
                "blob_url": "https://github.com/apache/tomee/blob/b9f18c089f626426993b3f878c6dee88f88fb868/container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java?ref=b9f18c089f626426993b3f878c6dee88f88fb868"
            },
            {
                "patch": "@@ -0,0 +1,82 @@\n+/*\n+ *     Licensed to the Apache Software Foundation (ASF) under one or more\n+ *     contributor license agreements.  See the NOTICE file distributed with\n+ *     this work for additional information regarding copyright ownership.\n+ *     The ASF licenses this file to You under the Apache License, Version 2.0\n+ *     (the \"License\"); you may not use this file except in compliance with\n+ *     the License.  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *     Unless required by applicable law or agreed to in writing, software\n+ *     distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *     See the License for the specific language governing permissions and\n+ *     limitations under the License.\n+ */\n+package org.apache.openejb.server.cxf.rs;\n+\n+import org.apache.cxf.jaxrs.client.ServerWebApplicationException;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.openejb.jee.WebApp;\n+import org.apache.openejb.junit.ApplicationComposer;\n+import org.apache.openejb.junit.Classes;\n+import org.apache.openejb.junit.EnableServices;\n+import org.apache.openejb.junit.Module;\n+import org.apache.openejb.server.cxf.rs.beans.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Application;\n+import javax.ws.rs.core.Response;\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@EnableServices(\"jax-rs\")\n+@RunWith(ApplicationComposer.class)\n+public class JAXRSRoutingTest {\n+    public static final String BASE_URL = \"http://localhost:4204/foo/\";\n+\n+    @Module\n+    @Classes({ RestWithInjections.class, SimpleEJB.class, MyExpertRestClass.class, MyFirstRestClass.class })\n+    public WebApp war() {\n+        return new WebApp()\n+                .contextRoot(\"foo\")\n+                .addServlet(\"REST Application\", Application.class.getName())\n+                .addInitParam(\"REST Application\", \"javax.ws.rs.Application\", NoClassAtPathApplication.class.getName());\n+    }\n+\n+    @Test\n+    public void routing() {\n+        assertEquals(\"routing\", WebClient.create(BASE_URL).path(\"routing\").get(String.class));\n+    }\n+\n+    public static class NoClassAtPathApplication extends Application {\n+        private final Set<Class<?>> classes = new HashSet<Class<?>>();\n+\n+        public NoClassAtPathApplication() {\n+            classes.add(FirstService.class);\n+        }\n+\n+        @Override\n+        public Set<Class<?>> getClasses() {\n+            return classes;\n+        }\n+    }\n+\n+    public static class FirstService {\n+        @Path(\"routing\")\n+        @GET\n+        public String routing() {\n+            return \"routing\";\n+        }\n+    }\n+}",
                "additions": 82,
                "raw_url": "https://github.com/apache/tomee/raw/b9f18c089f626426993b3f878c6dee88f88fb868/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java",
                "status": "added",
                "changes": 82,
                "deletions": 0,
                "sha": "5e6db17a351001046aa1b4c422a086f5b16b0452",
                "blob_url": "https://github.com/apache/tomee/blob/b9f18c089f626426993b3f878c6dee88f88fb868/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java",
                "filename": "server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java?ref=b9f18c089f626426993b3f878c6dee88f88fb868"
            },
            {
                "patch": "@@ -0,0 +1,83 @@\n+/*\n+ *     Licensed to the Apache Software Foundation (ASF) under one or more\n+ *     contributor license agreements.  See the NOTICE file distributed with\n+ *     this work for additional information regarding copyright ownership.\n+ *     The ASF licenses this file to You under the Apache License, Version 2.0\n+ *     (the \"License\"); you may not use this file except in compliance with\n+ *     the License.  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *     Unless required by applicable law or agreed to in writing, software\n+ *     distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *     See the License for the specific language governing permissions and\n+ *     limitations under the License.\n+ */\n+package org.apache.openejb.server.cxf.rs;\n+\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.openejb.jee.WebApp;\n+import org.apache.openejb.junit.ApplicationComposer;\n+import org.apache.openejb.junit.Classes;\n+import org.apache.openejb.junit.EnableServices;\n+import org.apache.openejb.junit.Module;\n+import org.apache.openejb.server.cxf.rs.beans.MyExpertRestClass;\n+import org.apache.openejb.server.cxf.rs.beans.MyFirstRestClass;\n+import org.apache.openejb.server.cxf.rs.beans.RestWithInjections;\n+import org.apache.openejb.server.cxf.rs.beans.SimpleEJB;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Application;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@EnableServices(\"jax-rs\")\n+@RunWith(ApplicationComposer.class)\n+public class JAXRSWithInterfaceTest {\n+    public static final String BASE_URL = \"http://localhost:4204/foo/\";\n+\n+    @Module\n+    @Classes({ RestWithInjections.class, SimpleEJB.class, MyExpertRestClass.class, MyFirstRestClass.class })\n+    public WebApp war() {\n+        return new WebApp()\n+                .contextRoot(\"foo\")\n+                .addServlet(\"REST Application\", Application.class.getName())\n+                .addInitParam(\"REST Application\", \"javax.ws.rs.Application\", InterfaceApp.class.getName());\n+    }\n+\n+    @Test\n+    public void itf() {\n+        assertEquals(\"itf\", WebClient.create(BASE_URL).path(\"itf\").get(String.class));\n+    }\n+\n+    public static class InterfaceApp extends Application {\n+        private final Set<Class<?>> classes = new HashSet<Class<?>>();\n+\n+        public InterfaceApp() {\n+            classes.add(Impl.class);\n+        }\n+\n+        @Override\n+        public Set<Class<?>> getClasses() {\n+            return classes;\n+        }\n+    }\n+\n+    public static interface Itf {\n+        @Path(\"itf\")\n+        @GET\n+        String itf();\n+    }\n+\n+    public static class Impl implements Itf {\n+        public String itf() {\n+            return \"itf\";\n+        }\n+    }\n+}",
                "additions": 83,
                "raw_url": "https://github.com/apache/tomee/raw/b9f18c089f626426993b3f878c6dee88f88fb868/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java",
                "status": "added",
                "changes": 83,
                "deletions": 0,
                "sha": "44417f03461322a7d8b89680cd3bf83eeda98881",
                "blob_url": "https://github.com/apache/tomee/blob/b9f18c089f626426993b3f878c6dee88f88fb868/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java",
                "filename": "server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java?ref=b9f18c089f626426993b3f878c6dee88f88fb868"
            },
            {
                "patch": "@@ -71,7 +71,7 @@\n     private List<DeployedService> services = new ArrayList<DeployedService>();\n     private String virtualHost;\n     private boolean enabled = true;\n-    private String wildcard = SystemInstance.get().getProperty(\"openejb.rest.wildcard\", \".*\");\n+    private String wildcard = SystemInstance.get().getProperty(\"openejb.rest.wildcard\", \".*\"); // embedded = regex, tomee = servlet\n \n     public void afterApplicationCreated(final AppInfo appInfo, final WebAppInfo webApp) {\n         final WebContext webContext = containerSystem.getWebContext(webApp.moduleId);",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/b9f18c089f626426993b3f878c6dee88f88fb868/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "2d6859bea73bded948bba0790ffb25ffa0614e88",
                "blob_url": "https://github.com/apache/tomee/blob/b9f18c089f626426993b3f878c6dee88f88fb868/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "filename": "server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java?ref=b9f18c089f626426993b3f878c6dee88f88fb868"
            }
        ],
        "bug_id": "tomee_91",
        "parent": "https://github.com/apache/tomee/commit/7fcecae09687781e44a712037a3d9f90cb2068be",
        "message": "avoiding npe + some more jaxrs test\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1427453 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/737730616841192e39c2ea58374935b8a72ba513",
        "file": [
            {
                "patch": "@@ -1476,20 +1476,22 @@ public EjbModule deploy(EjbModule ejbModule) throws OpenEJBException {\n                 addJaxRsProviders(finder, ejbModule.getAppModule().getJaxRsProviders(), Provider.class);\n             }\n \n-            for (PersistenceModule pm : ejbModule.getAppModule().getPersistenceModules()) {\n-                for (org.apache.openejb.jee.jpa.unit.PersistenceUnit pu : pm.getPersistence().getPersistenceUnit()) {\n-                    if ((pu.isExcludeUnlistedClasses() == null || !pu.isExcludeUnlistedClasses())\n-                            && \"true\".equalsIgnoreCase(pu.getProperties().getProperty(OPENEJB_JPA_AUTO_SCAN))) {\n-                        // no need of meta currently since JPA providers doesn't support it\n-                        final List<Class<?>> classes = finder.findAnnotatedClasses(Entity.class);\n-                        final List<String> existingClasses = pu.getClazz();\n-                        for (Class<?> clazz : classes) {\n-                            final String name = clazz.getName();\n-                            if (!existingClasses.contains(name)) {\n-                                pu.getClazz().add(name);\n+            if (ejbModule.getAppModule() != null) {\n+                for (PersistenceModule pm : ejbModule.getAppModule().getPersistenceModules()) {\n+                    for (org.apache.openejb.jee.jpa.unit.PersistenceUnit pu : pm.getPersistence().getPersistenceUnit()) {\n+                        if ((pu.isExcludeUnlistedClasses() == null || !pu.isExcludeUnlistedClasses())\n+                                && \"true\".equalsIgnoreCase(pu.getProperties().getProperty(OPENEJB_JPA_AUTO_SCAN))) {\n+                            // no need of meta currently since JPA providers doesn't support it\n+                            final List<Class<?>> classes = finder.findAnnotatedClasses(Entity.class);\n+                            final List<String> existingClasses = pu.getClazz();\n+                            for (Class<?> clazz : classes) {\n+                                final String name = clazz.getName();\n+                                if (!existingClasses.contains(name)) {\n+                                    pu.getClazz().add(name);\n+                                }\n                             }\n+                            pu.setScanned(true);\n                         }\n-                        pu.setScanned(true);\n                     }\n                 }\n             }",
                "additions": 14,
                "raw_url": "https://github.com/apache/tomee/raw/737730616841192e39c2ea58374935b8a72ba513/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "status": "modified",
                "changes": 26,
                "deletions": 12,
                "sha": "0370a2264824f7769d3558d2c45867adf81be6c6",
                "blob_url": "https://github.com/apache/tomee/blob/737730616841192e39c2ea58374935b8a72ba513/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=737730616841192e39c2ea58374935b8a72ba513"
            }
        ],
        "bug_id": "tomee_92",
        "parent": "https://github.com/apache/tomee/commit/059ba86bcb1f701e919208fdbcc50edff037c1f3",
        "message": "avoiding NPE (mainly coming from custom test classes)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1407969 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/8c3aa2242e7c5cb3095ddda1d2093420e50d3375",
        "file": [
            {
                "patch": "@@ -156,7 +156,7 @@\n     /**\n      * Context information for web applications\n      */\n-    private final TreeMap<String, ContextInfo> infos = new TreeMap<String, ContextInfo>();\n+    private final Map<String, ContextInfo> infos = new HashMap<String, ContextInfo>();\n     /**\n      * Global listener for Tomcat fired events.\n      */\n@@ -481,10 +481,13 @@ public void deployWar(final StandardContext standardContext, final String host,\n         }\n     }\n \n-    public AppInfo standaAloneWebAppInfo(final String path) {\n+    public synchronized ContextInfo standaAloneWebAppInfo(final String path) {\n         for (ContextInfo info : infos.values()) {\n-            if (info.appInfo.webAppAlone && (path.equals(info.appInfo.path) || path.equals(info.appInfo.path + \".war\"))) {\n-                return info.appInfo;\n+            if (info.appInfo != null\n+                && (info.appInfo.webAppAlone && (path.equals(info.appInfo.path) || path.equals(info.appInfo.path + \".war\")))) {\n+                return info;\n+            } else if (info.standardContext != null && (path.equals(info.standardContext.getDocBase()) || path.equals(info.standardContext.getDocBase() + \".war\"))) {\n+                return info;\n             }\n         }\n         return null;\n@@ -1317,7 +1320,7 @@ public void destroy(final StandardContext standardContext) {\n      * {@inheritDoc}\n      */\n     @Override\n-    public void afterStop(final StandardServer standardServer) {\n+    public synchronized void afterStop(final StandardServer standardServer) {\n         // clean ear based webapps after shutdown\n         for (final ContextInfo contextInfo : infos.values()) {\n             if (contextInfo != null && contextInfo.deployer != null) {\n@@ -1643,21 +1646,29 @@ private String getId(final String host, final String context) {\n      */\n     public ContextInfo getContextInfo(final StandardContext standardContext) {\n         final String id = getId(standardContext);\n-        return infos.get(id);\n+        final ContextInfo value;\n+        synchronized (infos) {\n+            value = infos.get(id);\n+        }\n+        return value;\n     }\n \n     /**\n      * Gets context info for given web app info.\n      *\n      * @return context info\n      */\n-    private ContextInfo getContextInfo(final String webAppHost, final String webAppContextRoot) {\n+    private synchronized ContextInfo getContextInfo(final String webAppHost, final String webAppContextRoot) {\n         String host = webAppHost;\n         if (host == null) {\n             host = defaultHost;\n         }\n         final String id = host + \"/\" + webAppContextRoot;\n-        return infos.get(id);\n+        final ContextInfo value;\n+        synchronized (infos) {\n+            value = infos.get(id);\n+        }\n+        return value;\n     }\n \n     /**\n@@ -1672,12 +1683,17 @@ private ContextInfo addContextInfo(final String host, final StandardContext stan\n         if (!contextRoot.startsWith(\"/\")) {\n             contextRoot = \"/\" + contextRoot;\n         }\n+\n         final String id = host + contextRoot;\n-        ContextInfo contextInfo = infos.get(id);\n-        if (contextInfo == null) {\n-            contextInfo = new ContextInfo();\n-            contextInfo.standardContext = standardContext;\n-            infos.put(id, contextInfo);\n+\n+        ContextInfo contextInfo;\n+        synchronized (infos) {\n+            contextInfo = infos.get(id);\n+            if (contextInfo == null) {\n+                contextInfo = new ContextInfo();\n+                contextInfo.standardContext = standardContext;\n+                infos.put(id, contextInfo);\n+            }\n         }\n         return contextInfo;\n     }\n@@ -1689,7 +1705,9 @@ private ContextInfo addContextInfo(final String host, final StandardContext stan\n      */\n     private void removeContextInfo(final StandardContext standardContext) {\n         final String id = getId(standardContext);\n-        infos.remove(id);\n+        synchronized (infos) {\n+            infos.remove(id);\n+        }\n     }\n \n     public static class ContextInfo {\n@@ -1699,6 +1717,15 @@ private void removeContextInfo(final StandardContext standardContext) {\n         public HostConfig deployer;\n         public Host host;\n         public LinkResolver<EntityManagerFactory> emfLinkResolver;\n+\n+        @Override\n+        public String toString() {\n+            return \"ContextInfo{\"\n+                    + \"appInfo = \" + appInfo + \", \"\n+                    + \"deployer = \" + deployer + \", \"\n+                    + \"host = \" + host\n+                + \"}\";\n+        }\n     }\n \n     private static class DeployedApplication {",
                "additions": 41,
                "raw_url": "https://github.com/apache/tomee/raw/8c3aa2242e7c5cb3095ddda1d2093420e50d3375/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java",
                "status": "modified",
                "changes": 55,
                "deletions": 14,
                "sha": "a493636b98273c6b048bea2c9a4375b83b939c26",
                "blob_url": "https://github.com/apache/tomee/blob/8c3aa2242e7c5cb3095ddda1d2093420e50d3375/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java",
                "filename": "tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java?ref=8c3aa2242e7c5cb3095ddda1d2093420e50d3375"
            },
            {
                "patch": "@@ -23,7 +23,6 @@\n import org.apache.openejb.assembler.classic.WebAppBuilder;\n import org.apache.openejb.assembler.classic.WebAppInfo;\n import org.apache.openejb.loader.SystemInstance;\n-import org.apache.tomee.catalina.TomEERuntimeException;\n import org.apache.tomee.catalina.TomcatWebAppBuilder;\n \n import java.io.File;\n@@ -37,7 +36,12 @@ public AppInfo deploy(final String context, final File file) {\n         } catch (Exception e) {\n             throw new OpenEJBRuntimeException(e);\n         }\n-        return tomcatWebAppBuilder.standaAloneWebAppInfo(file.getAbsolutePath());\n+\n+        final TomcatWebAppBuilder.ContextInfo info = tomcatWebAppBuilder.standaAloneWebAppInfo(file.getAbsolutePath());\n+        if (info == null) { // error\n+            return null;\n+        }\n+        return info.appInfo;\n     }\n \n     private AppInfo fakeInfo(final File file, final String context) {",
                "additions": 6,
                "raw_url": "https://github.com/apache/tomee/raw/8c3aa2242e7c5cb3095ddda1d2093420e50d3375/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/deployment/TomcatWebappDeployer.java",
                "status": "modified",
                "changes": 8,
                "deletions": 2,
                "sha": "7497948e58b2075682832e79ae2ccb37a448256c",
                "blob_url": "https://github.com/apache/tomee/blob/8c3aa2242e7c5cb3095ddda1d2093420e50d3375/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/deployment/TomcatWebappDeployer.java",
                "filename": "tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/deployment/TomcatWebappDeployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/deployment/TomcatWebappDeployer.java?ref=8c3aa2242e7c5cb3095ddda1d2093420e50d3375"
            }
        ],
        "bug_id": "tomee_93",
        "parent": "https://github.com/apache/tomee/commit/926ca6aac137d7d38417c2b2ffbf23eb0ddbcc2d",
        "message": "TOMEE-439 avoiding NPE when appInfo was not built\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1392659 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/04eb5f21b0a6422f6db5611178dd0a50cf92b28a",
        "file": [
            {
                "patch": "@@ -29,6 +29,8 @@\n import java.net.URL;\n import java.util.*;\n \n+import static org.apache.openejb.util.CollectionsUtil.safe;\n+\n \n public class CheckDescriptorLocation extends ValidationBase {\n \n@@ -40,13 +42,13 @@ public void validate(AppModule appModule){\n \n         List<String> validated = new ArrayList<String>();\n \n-        for(WebModule webModule:appModule.getWebModules())\n+        for(WebModule webModule: safe(appModule.getWebModules()))\n         {\n             validated.add(webModule.getModuleId());\n             validateWebModule(webModule);\n         }\n \n-        for(EjbModule ejbModule:appModule.getEjbModules())\n+        for(EjbModule ejbModule: safe(appModule.getEjbModules()))\n         {\n             //without this check, CheckDescriptorLocationTest#testWarWithDescriptorInRoot() would fail\n             if(!validated.contains(ejbModule.getModuleId()))\n@@ -57,6 +59,9 @@ public void validate(AppModule appModule){\n \n     }\n \n+\n+\n+\n     private void validateWebModule(DeploymentModule webModule) {\n         URL baseUrl = null;\n         this.module= webModule;",
                "additions": 7,
                "raw_url": "https://github.com/apache/tomee/raw/04eb5f21b0a6422f6db5611178dd0a50cf92b28a/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java",
                "status": "modified",
                "changes": 9,
                "deletions": 2,
                "sha": "6506cf50fb131ce4186b96085d686d7ecfe09a13",
                "blob_url": "https://github.com/apache/tomee/blob/04eb5f21b0a6422f6db5611178dd0a50cf92b28a/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java?ref=04eb5f21b0a6422f6db5611178dd0a50cf92b28a"
            },
            {
                "patch": "@@ -0,0 +1,32 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.openejb.util;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+\r\n+public class CollectionsUtil\r\n+{\r\n+    public static <T> List<T> safe(List<T> list)\r\n+    {\r\n+        if(list==null)\r\n+        {   return Collections.emptyList();\r\n+        }\r\n+        return list;\r\n+    }\r\n+}\r",
                "additions": 32,
                "raw_url": "https://github.com/apache/tomee/raw/04eb5f21b0a6422f6db5611178dd0a50cf92b28a/container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java",
                "status": "added",
                "changes": 32,
                "deletions": 0,
                "sha": "e6849714f2da4e1b40ecd6a3433072bcfa21d6f9",
                "blob_url": "https://github.com/apache/tomee/blob/04eb5f21b0a6422f6db5611178dd0a50cf92b28a/container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java?ref=04eb5f21b0a6422f6db5611178dd0a50cf92b28a"
            },
            {
                "patch": "@@ -0,0 +1,36 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.openejb.util;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import java.util.List;\r\n+\r\n+public class CollectionsUtilTest {\r\n+\r\n+    @Test\r\n+    public void safeIterationForNullList()\r\n+    {\r\n+        List<String> stringList =null;\r\n+        for(String string: CollectionsUtil.safe(stringList))\r\n+        {\r\n+        }\r\n+\r\n+        //PASS: No NPE thrown\r\n+    }\r\n+}\r",
                "additions": 36,
                "raw_url": "https://github.com/apache/tomee/raw/04eb5f21b0a6422f6db5611178dd0a50cf92b28a/container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java",
                "status": "added",
                "changes": 36,
                "deletions": 0,
                "sha": "2001f22ca1b2f858709032913185121807fd2fbb",
                "blob_url": "https://github.com/apache/tomee/blob/04eb5f21b0a6422f6db5611178dd0a50cf92b28a/container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java",
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java?ref=04eb5f21b0a6422f6db5611178dd0a50cf92b28a"
            }
        ],
        "bug_id": "tomee_94",
        "parent": "https://github.com/apache/tomee/commit/1d83fa473b96c5d938fb53a650a80fecf925f4d5",
        "message": "Avoid NPE during emptyList forEach\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1377486 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/7ce920b20500e6a5f84e93423d88dc63fd77ba06",
        "file": [
            {
                "patch": "@@ -202,14 +202,23 @@ private Alternatives getAlternatives() {\n     }\n \n     public List<String> getDuplicatedInterceptors() {\n+        if (duplicatedInterceptors == null) {\n+            duplicatedInterceptors = new ArrayList<String>();\n+        }\n         return duplicatedInterceptors;\n     }\n \n     public List<String> getDuplicatedDecorators() {\n+        if (duplicatedDecorators == null) {\n+            duplicatedDecorators = new ArrayList<String>();\n+        }\n         return duplicatedDecorators;\n     }\n \n     public Alternatives getDuplicatedAlternatives() {\n+        if (duplicatedAlternatives == null) {\n+            duplicatedAlternatives = new Alternatives();\n+        }\n         return duplicatedAlternatives;\n     }\n }",
                "additions": 9,
                "raw_url": "https://github.com/apache/tomee/raw/7ce920b20500e6a5f84e93423d88dc63fd77ba06/container/openejb-jee/src/main/java/org/apache/openejb/jee/Beans.java",
                "status": "modified",
                "changes": 9,
                "deletions": 0,
                "sha": "feb20bd2ce9d7ddb4f8bf2cd5d04eea4e8ddca04",
                "blob_url": "https://github.com/apache/tomee/blob/7ce920b20500e6a5f84e93423d88dc63fd77ba06/container/openejb-jee/src/main/java/org/apache/openejb/jee/Beans.java",
                "filename": "container/openejb-jee/src/main/java/org/apache/openejb/jee/Beans.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-jee/src/main/java/org/apache/openejb/jee/Beans.java?ref=7ce920b20500e6a5f84e93423d88dc63fd77ba06"
            }
        ],
        "bug_id": "tomee_95",
        "parent": "https://github.com/apache/tomee/commit/1e669fd738935b96bbdbf590afc1fe1a7df6de13",
        "message": "NPE (last commit check)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1359943 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/49656dffdd089daa7a87253375c14068443df370",
        "file": [
            {
                "patch": "@@ -71,9 +71,13 @@ public void setHost(String host) {\n     }\n \n     public void setServerXml(String file) {\n-        final File sXml = new File(file);\n-        if (sXml.exists()) {\n-            serverXml = sXml;\n+        if (file == null) {\n+            serverXml = null;\n+        } else {\n+            final File sXml = new File(file);\n+            if (sXml.exists()) {\n+                serverXml = sXml;\n+            }\n         }\n     }\n ",
                "additions": 7,
                "raw_url": "https://github.com/apache/tomee/raw/49656dffdd089daa7a87253375c14068443df370/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java",
                "status": "modified",
                "changes": 10,
                "deletions": 3,
                "sha": "84b0019ffe318eb38e620669001f88f41edc8de7",
                "blob_url": "https://github.com/apache/tomee/blob/49656dffdd089daa7a87253375c14068443df370/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java",
                "filename": "tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java?ref=49656dffdd089daa7a87253375c14068443df370"
            }
        ],
        "bug_id": "tomee_96",
        "parent": "https://github.com/apache/tomee/commit/bbc58c7ddb92133ea136e21e46a8b4bd8098a38b",
        "message": "avoiding NPE when file is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1351171 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/a0b5cd462aaa98c9153420481e8a596a49cdc1a8",
        "file": [
            {
                "patch": "@@ -17,7 +17,7 @@\n \r\n package org.apache.tomee.webapp.servlet;\r\n \r\n-import org.apache.commons.lang.StringEscapeUtils;\r\n+import org.apache.commons.lang3.StringEscapeUtils;\r\n import org.apache.tomee.webapp.JsonExecutor;\r\n \r\n import javax.servlet.ServletException;\r\n@@ -43,9 +43,11 @@ public void call(Map<String, Object> json) throws Exception {\n \r\n                 final File[] files = logFolder.listFiles();\r\n                 final Set<String> names = new TreeSet<String>();\r\n-                for (File file : files) {\r\n-                    if (file.length() > 0) {\r\n-                        names.add(file.getName());\r\n+                if (files != null) {\r\n+                    for (File file : files) {\r\n+                        if (file.length() > 0) {\r\n+                            names.add(file.getName());\r\n+                        }\r\n                     }\r\n                 }\r\n \r\n@@ -85,7 +87,7 @@ public void call(Map<String, Object> json) throws Exception {\n \r\n         if (escapeHtml) {\r\n             while ((line = br.readLine()) != null) {\r\n-                addLine.add(StringEscapeUtils.escapeHtml(line));\r\n+                addLine.add(StringEscapeUtils.escapeHtml4(line));\r\n             }\r\n         } else {\r\n             while ((line = br.readLine()) != null) {\r",
                "additions": 7,
                "raw_url": "https://github.com/apache/tomee/raw/a0b5cd462aaa98c9153420481e8a596a49cdc1a8/tomee/tomee-webapp/src/main/java/org/apache/tomee/webapp/servlet/LogServlet.java",
                "status": "modified",
                "changes": 12,
                "deletions": 5,
                "sha": "b97a44cee25763b263ea2f0513b926424898ceb1",
                "blob_url": "https://github.com/apache/tomee/blob/a0b5cd462aaa98c9153420481e8a596a49cdc1a8/tomee/tomee-webapp/src/main/java/org/apache/tomee/webapp/servlet/LogServlet.java",
                "filename": "tomee/tomee-webapp/src/main/java/org/apache/tomee/webapp/servlet/LogServlet.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-webapp/src/main/java/org/apache/tomee/webapp/servlet/LogServlet.java?ref=a0b5cd462aaa98c9153420481e8a596a49cdc1a8"
            }
        ],
        "bug_id": "tomee_97",
        "parent": "https://github.com/apache/tomee/commit/576c92fed5f41fa6bbbb3215d9a59ae242ffd488",
        "message": "commons-lang3 instead of 2 + npe checking\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1348154 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/231ad8583179631f191f181f9f2b7967e4719d61",
        "file": [
            {
                "patch": "@@ -171,7 +171,15 @@ public void addServlets(final HTTPContext httpContext, final AppInfo appInfo) {\n         for (WebAppInfo webApps : appInfo.webApps) {\n             for (ServletInfo servlet : webApps.servlets) {\n                 // weird but arquillianurl doesn't match the servlet url but its context\n-                httpContext.add(new Servlet(servlet.servletClass, webApps.contextRoot));\n+                String clazz = servlet.servletClass;\n+                if (clazz == null) {\n+                    clazz = servlet.servletName;\n+                    if (clazz == null) {\n+                        continue;\n+                    }\n+                }\n+\n+                httpContext.add(new Servlet(clazz, webApps.contextRoot));\n                 /*\n                 for (String mapping : servlet.mappings) {\n                     httpContext.add(new Servlet(servlet.servletClass, startWithSlash(uniqueSlash(webApps.contextRoot, mapping))));\n@@ -231,9 +239,7 @@ public ProtocolMetaData deploy(Archive<?> archive) throws DeploymentException {\n             httpContext.add(new Servlet(\"ArquillianServletRunner\", arquillianServlet));\n             addServlets(httpContext, appInfo);\n \n-            // we should probably get all servlets and add them to the context\n-            final ProtocolMetaData metadata = new ProtocolMetaData().addContext(httpContext);\n-            return metadata;\n+            return new ProtocolMetaData().addContext(httpContext);\n         } catch (Exception e) {\n             e.printStackTrace();\n             throw new DeploymentException(\"Unable to deploy\", e);",
                "additions": 10,
                "raw_url": "https://github.com/apache/tomee/raw/231ad8583179631f191f181f9f2b7967e4719d61/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java",
                "status": "modified",
                "changes": 14,
                "deletions": 4,
                "sha": "b8852d5deb60089d4d706cef9c54b0ecfa6589a6",
                "blob_url": "https://github.com/apache/tomee/blob/231ad8583179631f191f181f9f2b7967e4719d61/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java",
                "filename": "arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java?ref=231ad8583179631f191f181f9f2b7967e4719d61"
            },
            {
                "patch": "@@ -1,22 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-  <parent>\n-    <artifactId>arquillian</artifactId>\n-    <groupId>org.apache.openejb</groupId>\n-    <version>1.1.0-SNAPSHOT</version>\n-  </parent>\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <artifactId>arquillian-tomee-extensions</artifactId>\n-  <name>OpenEJB :: Arquillian Adaptors Parent :: TomEE Extensions</name>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.jboss.arquillian.container</groupId>\n-      <artifactId>arquillian-container-test-impl-base</artifactId>\n-      <version>${version.arquillian}</version>\n-    </dependency>\n-  </dependencies>\n-</project>",
                "additions": 0,
                "raw_url": "https://github.com/apache/tomee/raw/77e49a2111f072aa02d9a88f8482ed340018ecbb/arquillian/arquillian-tomee-extensions/pom.xml",
                "status": "removed",
                "changes": 22,
                "deletions": 22,
                "sha": "15941019865c600bd1aa42da171c665cb0587564",
                "blob_url": "https://github.com/apache/tomee/blob/77e49a2111f072aa02d9a88f8482ed340018ecbb/arquillian/arquillian-tomee-extensions/pom.xml",
                "filename": "arquillian/arquillian-tomee-extensions/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-extensions/pom.xml?ref=77e49a2111f072aa02d9a88f8482ed340018ecbb"
            },
            {
                "patch": "@@ -48,6 +48,5 @@\n     <module>arquillian-tomee-moviefun-example</module>\n     <module>arquillian-openejb-embedded-4</module>\n     <module>ziplock</module>\n-    <module>arquillian-tomee-extensions</module>\n   </modules>\n </project>",
                "additions": 0,
                "raw_url": "https://github.com/apache/tomee/raw/231ad8583179631f191f181f9f2b7967e4719d61/arquillian/pom.xml",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "f27b508a288750f7fd6513840a7b765f866852b4",
                "blob_url": "https://github.com/apache/tomee/blob/231ad8583179631f191f181f9f2b7967e4719d61/arquillian/pom.xml",
                "filename": "arquillian/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/pom.xml?ref=231ad8583179631f191f181f9f2b7967e4719d61"
            },
            {
                "patch": "@@ -323,8 +323,14 @@ public void afterApplicationCreated(WebAppInfo webApp) {\n         }\n \n         for (ServletInfo servlet : webApp.servlets) {\n+            if (servlet.servletName == null) {\n+                continue;\n+            }\n+\n             PortInfo portInfo = ports.get(servlet.servletName);\n-            if (portInfo == null) continue;\n+            if (portInfo == null) {\n+                continue;\n+            }\n \n             try {\n                 ClassLoader classLoader = webContext.getClassLoader();\n@@ -396,8 +402,14 @@ public void beforeApplicationDestroyed(AppInfo appInfo) {\n                 }\n \n                 for (ServletInfo servlet : webApp.servlets) {\n+                    if (servlet.servletClass == null) {\n+                        continue;\n+                    }\n+\n                     PortInfo portInfo = ports.get(servlet.servletClass);\n-                    if (portInfo == null) continue;\n+                    if (portInfo == null) {\n+                        continue;\n+                    }\n \n                     // remove wsdl addresses from global registry\n                     String address = servletAddresses.remove(webApp.moduleId + \".\" + servlet.servletName);",
                "additions": 14,
                "raw_url": "https://github.com/apache/tomee/raw/231ad8583179631f191f181f9f2b7967e4719d61/server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java",
                "status": "modified",
                "changes": 16,
                "deletions": 2,
                "sha": "60e8a9234a78a66fa83dc3185bbbd0ff72a12aff",
                "blob_url": "https://github.com/apache/tomee/blob/231ad8583179631f191f181f9f2b7967e4719d61/server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java",
                "filename": "server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java?ref=231ad8583179631f191f181f9f2b7967e4719d61"
            }
        ],
        "bug_id": "tomee_98",
        "parent": "https://github.com/apache/tomee/commit/77e49a2111f072aa02d9a88f8482ed340018ecbb",
        "message": "avoiding NPE when the servlet cant be added\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1343695 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/f2a36c73c945612716b5ac54efb648c930efd88e",
        "file": [
            {
                "patch": "@@ -1438,7 +1438,9 @@ public EjbModule deploy(EjbModule ejbModule) throws OpenEJBException {\n \n             // ejb can be rest bean and only then in standalone so scan providers here too\n             // adding them to app since they should be in the app classloader\n-            addJaxRsProviders(finder, ejbModule.getAppModule().getJaxRsProviders(), Provider.class);\n+            if (ejbModule.getAppModule() != null) {\n+                addJaxRsProviders(finder, ejbModule.getAppModule().getJaxRsProviders(), Provider.class);\n+            }\n \n             return ejbModule;\n         }",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/f2a36c73c945612716b5ac54efb648c930efd88e/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "c9921b87b4ad74a8f123232fef853408f2b33b53",
                "blob_url": "https://github.com/apache/tomee/blob/f2a36c73c945612716b5ac54efb648c930efd88e/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=f2a36c73c945612716b5ac54efb648c930efd88e"
            }
        ],
        "bug_id": "tomee_99",
        "parent": "https://github.com/apache/tomee/commit/02b7fcc446723ffa5e47910eb591963602e78c64",
        "message": "avoiding NPE when scanning jaxrs @Provider\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1342746 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947",
        "file": [
            {
                "patch": "@@ -18,9 +18,8 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n+import java.util.Properties;\n import java.util.Set;\n-import java.util.TreeMap;\n import java.util.TreeSet;\n \n /**\n@@ -41,6 +40,6 @@\n     public final JndiEncInfo globalJndiEnc = new JndiEncInfo();\n     public final JndiEncInfo appJndiEnc = new JndiEncInfo();\n     public String cmpMappingsXml;\n-    public Map<String, String> jmx = new TreeMap<String, String>();\n-    public Set<String> mbeans = new TreeSet<String>();\n+    public final Properties jmx = new Properties();\n+    public final Set<String> mbeans = new TreeSet<String>();\n }",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java",
                "status": "modified",
                "changes": 7,
                "deletions": 4,
                "sha": "0af49b9f36113e6437f86232f64f6973bceac11a",
                "blob_url": "https://github.com/apache/tomee/blob/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java?ref=2a5ed08afd40e1ee98df07a9a38de89a5ea7c947"
            },
            {
                "patch": "@@ -909,7 +909,7 @@ public AppContext createApplication(AppInfo appInfo, ClassLoader classLoader, bo\n         }\n     }\n \n-    private static void deployMBean(final BeanManager bm, final ClassLoader cl, final String mbeanClass, final Map<String, String> appMbeans, final String id) {\n+    private static void deployMBean(final BeanManager bm, final ClassLoader cl, final String mbeanClass, final Properties appMbeans, final String id) {\n         final Class<?> clazz;\n         try {\n             clazz = cl.loadClass(mbeanClass);\n@@ -1291,9 +1291,9 @@ public synchronized void destroyApplication(AppInfo appInfo) throws UndeployExce\n \n         // mbeans\n         MBeanServer server = LocalMBeanServer.get();\n-        for (String objectName : appInfo.jmx.values()) {\n+        for (Object objectName : appInfo.jmx.values()) {\n             try {\n-              ObjectName on = new ObjectName(objectName);\n+              ObjectName on = new ObjectName((String) objectName);\n               if (server.isRegistered(on)) {\n                       server.unregisterMBean(on);\n               }",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "5d087c7c5de33a4365b34f6f560d399a73c537ec",
                "blob_url": "https://github.com/apache/tomee/blob/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java?ref=2a5ed08afd40e1ee98df07a9a38de89a5ea7c947"
            },
            {
                "patch": "@@ -102,7 +102,7 @@ public AppInfo build(AppModule appModule) throws OpenEJBException {\n         appInfo.path = appModule.getJarLocation();\n         appInfo.standaloneModule = appModule.isStandaloneModule();\n         appInfo.watchedResources.addAll(appModule.getWatchedResources());\n-        appInfo.mbeans = appModule.getAdditionalLibMbeans();\n+        appInfo.mbeans.addAll(appModule.getAdditionalLibMbeans());\n \n         if (appInfo.appId == null) throw new IllegalArgumentException(\"AppInfo.appId cannot be null\");\n         if (appInfo.path == null) appInfo.path = appInfo.appId;",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "07ea3c1501d9809804e177c6d2b51ede18b0af52",
                "blob_url": "https://github.com/apache/tomee/blob/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java?ref=2a5ed08afd40e1ee98df07a9a38de89a5ea7c947"
            },
            {
                "patch": "@@ -43,6 +43,10 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n         // there is an ejbmodule by webapp so we should't need to go through the webapp\n \n         for (EjbModule ejbModule : appModule.getEjbModules()) {\n+            if (ejbModule.getFinder() == null) {\n+                continue;\n+            }\n+\n             for (Annotated<Class<?>> clazz : ejbModule.getFinder().findMetaAnnotatedClasses(MBean.class)) {\n                 final Class<?> realClass = clazz.get();\n                 final String name = clazz.get().getName();\n@@ -55,6 +59,10 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n             }\n         }\n         for (ClientModule clientModule : appModule.getClientModules()) {\n+            if (clientModule.getFinder() == null) {\n+                continue;\n+            }\n+\n             for (Annotated<Class<?>> clazz : clientModule.getFinder().findMetaAnnotatedClasses(MBean.class)) {\n                 final String name = clazz.get().getName();\n                 if (done.contains(name)) {",
                "additions": 8,
                "raw_url": "https://github.com/apache/tomee/raw/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java",
                "status": "modified",
                "changes": 8,
                "deletions": 0,
                "sha": "602d4f2de87eb7cc6f0deed32f153defdaa8e144",
                "blob_url": "https://github.com/apache/tomee/blob/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java?ref=2a5ed08afd40e1ee98df07a9a38de89a5ea7c947"
            },
            {
                "patch": "@@ -90,8 +90,8 @@ public void resetList() {\n     @Test\n     public void mbeans() throws Exception {\n         final Set<String> parsed = new HashSet<String>();\n-        for (String name : appInfo.jmx.values()) {\n-            final ObjectName on = new ObjectName(name);\n+        for (Object name : appInfo.jmx.values()) {\n+            final ObjectName on = new ObjectName((String) name);\n             final String cn = on.getCanonicalName();\n             if (cn.contains(\"name=Empty\")) {\n                 assertTrue(cn.startsWith(\"openejb.user.mbeans\"));",
                "additions": 2,
                "raw_url": "https://github.com/apache/tomee/raw/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "acde838e568255944c97f3ad8be5e99df871b420",
                "blob_url": "https://github.com/apache/tomee/blob/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java",
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java?ref=2a5ed08afd40e1ee98df07a9a38de89a5ea7c947"
            }
        ],
        "bug_id": "tomee_100",
        "parent": "https://github.com/apache/tomee/commit/5c44513dff15bfe772840efc1b312b721f3058ee",
        "message": "avoiding NPE in MBeanDeployer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1298185 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/ad25beaf4222720b54baa5687586f740d0e66467",
        "file": [
            {
                "patch": "@@ -451,6 +451,9 @@ else if (type == Double.class) {\n         }\n \n         OpenEjbConfiguration config = SystemInstance.get().getComponent(OpenEjbConfiguration.class);\n+        \n+        if(config !=null){\n+            \n         for (ResourceInfo resource : config.facilities.resources) {\n             String jndiName = resource.jndiName;\n             if (jndiName != null && !jndiName.isEmpty()) {\n@@ -460,7 +463,8 @@ else if (type == Double.class) {\n                 bindings.put(boundName, reference);\n             }\n         }\n-\n+        \n+       }\n         return bindings;\n     }\n ",
                "additions": 5,
                "raw_url": "https://github.com/apache/tomee/raw/ad25beaf4222720b54baa5687586f740d0e66467/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/JndiEncBuilder.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "f3f0f0e20ca78b775b6b87c022203e4cde03ac7a",
                "blob_url": "https://github.com/apache/tomee/blob/ad25beaf4222720b54baa5687586f740d0e66467/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/JndiEncBuilder.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/JndiEncBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/JndiEncBuilder.java?ref=ad25beaf4222720b54baa5687586f740d0e66467"
            }
        ],
        "bug_id": "tomee_101",
        "parent": "https://github.com/apache/tomee/commit/6102d57e61ff571f468bc177439efacfd2364f8d",
        "message": "Fix NPE when building geornimo mejb plugin.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@1166504 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/ef303f28d545f2c08b1a6e39c83ce86c7214681c",
        "file": [
            {
                "patch": "@@ -137,7 +137,7 @@ private void readValidationConfigType(Module module) throws OpenEJBException {\n             return;\n         }\n         URL url = (URL) module.getAltDDs().get(\"validation.xml\");\n-        if (url == null) { // library but not a module case\n+        if (url == null && module.getClassLoader() != null) { // library but not a module case\n             url = module.getClassLoader().getResource(\"META-INF/validation.xml\");\n             if (url != null) {\n                 module.getAltDDs().put(\"validation.xml\", url);",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/ef303f28d545f2c08b1a6e39c83ce86c7214681c/container/openejb-core/src/main/java/org/apache/openejb/config/ReadDescriptors.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "c49a5fd5885df17f6f3d253b76bde7fce21c2b46",
                "blob_url": "https://github.com/apache/tomee/blob/ef303f28d545f2c08b1a6e39c83ce86c7214681c/container/openejb-core/src/main/java/org/apache/openejb/config/ReadDescriptors.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/ReadDescriptors.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/ReadDescriptors.java?ref=ef303f28d545f2c08b1a6e39c83ce86c7214681c"
            }
        ],
        "bug_id": "tomee_102",
        "parent": "https://github.com/apache/tomee/commit/d9e54486150ad1f540293b9a2f30acbeaffd1580",
        "message": "avoiding a NPE in ReadDescriptors (for ConfigurationFactoryTest)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@1161255 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/8c5b0e6743d7574232dcacacdf86e20f6e518a8a",
        "file": [
            {
                "patch": "@@ -31,11 +31,14 @@\n import org.apache.openejb.core.Operation;\n import org.apache.openejb.core.ThreadContext;\n import org.apache.openejb.util.Classes;\n+import org.apache.openejb.util.LogCategory;\n+import org.apache.openejb.util.Logger;\n \n /**\n  * @version $Rev$ $Date$\n  */\n public class InterceptorStack {\n+    private static final Logger logger = Logger.getInstance(LogCategory.OPENEJB, \"org.apache.openejb.util.resources\");\n     private final Object beanInstance;\n     private final List<Interceptor> interceptors;\n     private final Method targetMethod;\n@@ -122,11 +125,15 @@ public InvocationContext createInvocationContext(Object... parameters) {\n     public Object invoke(Object... parameters) throws Exception {\n         try {\n             InvocationContext invocationContext = createInvocationContext(parameters);\n-            ThreadContext.getThreadContext().set(InvocationContext.class, invocationContext);\n+            if (ThreadContext.getThreadContext() != null) {\n+                ThreadContext.getThreadContext().set(InvocationContext.class, invocationContext);\n+            }\n             Object value = invocationContext.proceed();\n             return value;\n         } finally {\n-            ThreadContext.getThreadContext().remove(InvocationContext.class);\n+            if (ThreadContext.getThreadContext() != null) {\n+                ThreadContext.getThreadContext().remove(InvocationContext.class);\n+            }\n         }\n     }\n ",
                "additions": 9,
                "raw_url": "https://github.com/apache/tomee/raw/8c5b0e6743d7574232dcacacdf86e20f6e518a8a/container/openejb-core/src/main/java/org/apache/openejb/core/interceptor/InterceptorStack.java",
                "status": "modified",
                "changes": 11,
                "deletions": 2,
                "sha": "4a1b3b9968359bdaf4c093fdce6069291225f9a0",
                "blob_url": "https://github.com/apache/tomee/blob/8c5b0e6743d7574232dcacacdf86e20f6e518a8a/container/openejb-core/src/main/java/org/apache/openejb/core/interceptor/InterceptorStack.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/interceptor/InterceptorStack.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/interceptor/InterceptorStack.java?ref=8c5b0e6743d7574232dcacacdf86e20f6e518a8a"
            },
            {
                "patch": "@@ -157,20 +157,27 @@ public void freeInstance(Instance instance, boolean ignoredInstanceCount) {\n         }\n \n         ThreadContext callContext = ThreadContext.getThreadContext();\n-        Operation originalOperation = callContext.getCurrentOperation();\n-        BaseContext.State[] originalAllowedStates = callContext.getCurrentAllowedStates();\n+        \n+        Operation originalOperation = callContext == null ? null : callContext.getCurrentOperation();\n+        BaseContext.State[] originalAllowedStates = callContext == null ? null : callContext.getCurrentAllowedStates();\n+\n         try {\n             // call post destroy method\n-            callContext.setCurrentOperation(Operation.PRE_DESTROY);\n+            if (callContext != null) {\n+                callContext.setCurrentOperation(Operation.PRE_DESTROY);\n+            }\n             Method remove = instance.bean instanceof MessageDrivenBean ? MessageDrivenBean.class.getMethod(\"ejbRemove\") : null;\n             List<InterceptorData> callbackInterceptors = beanContext.getCallbackInterceptors();\n             InterceptorStack interceptorStack = new InterceptorStack(instance.bean, remove, Operation.PRE_DESTROY, callbackInterceptors, instance.interceptors);\n             interceptorStack.invoke();\n         } catch (Throwable re) {\n             MdbInstanceFactory.logger.error(\"The bean instance \" + instance.bean + \" threw a system exception:\" + re, re);\n         } finally {\n-            callContext.setCurrentOperation(originalOperation);\n-            callContext.setCurrentAllowedStates(originalAllowedStates);\n+            \n+            if (callContext != null) {\n+                callContext.setCurrentOperation(originalOperation);\n+                callContext.setCurrentAllowedStates(originalAllowedStates);\n+            }\n         }\n     }\n ",
                "additions": 12,
                "raw_url": "https://github.com/apache/tomee/raw/8c5b0e6743d7574232dcacacdf86e20f6e518a8a/container/openejb-core/src/main/java/org/apache/openejb/core/mdb/MdbInstanceFactory.java",
                "status": "modified",
                "changes": 17,
                "deletions": 5,
                "sha": "99241df20d21b86fe0e93133fd3bf3f016947fe2",
                "blob_url": "https://github.com/apache/tomee/blob/8c5b0e6743d7574232dcacacdf86e20f6e518a8a/container/openejb-core/src/main/java/org/apache/openejb/core/mdb/MdbInstanceFactory.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/mdb/MdbInstanceFactory.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/mdb/MdbInstanceFactory.java?ref=8c5b0e6743d7574232dcacacdf86e20f6e518a8a"
            }
        ],
        "bug_id": "tomee_103",
        "parent": "https://github.com/apache/tomee/commit/200fdbe497a80b6511bc89d768fbcfb57f9d6609",
        "message": "Add NPE protection for operations on ThreadContext.getThreadContext().\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@1127767 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/3044310eab6b1f2368da722c6edc665d9b9fef6f",
        "file": [
            {
                "patch": "@@ -41,8 +41,8 @@\n  * @version $Rev$ $Date$\n  */\n public class MethodInfoUtil {\n-    \n-    \n+\n+\n     /**\n      * Finds the nearest java.lang.reflect.Method with the given NamedMethodInfo\n      * Callbacks can be private so class.getMethod() cannot be used.  Searching\n@@ -85,7 +85,7 @@ public static Method toMethod(Class clazz, NamedMethodInfo info) {\n         }\n \n         throw noSuchMethod;\n-    }    \n+    }\n \n     public static List<Method> matchingMethods(Method signature, Class clazz) {\n         List<Method> list = new ArrayList<Method>();\n@@ -277,14 +277,18 @@ private static Class getClassForParam(String className, ClassLoader cl) throws C\n                     } else if (methodInfo.methodIntf.equals(\"Home\")) {\n                         methods.addAll(matchingMethods(methodInfo, beanContext.getHomeInterface()));\n                     } else if (methodInfo.methodIntf.equals(\"Remote\")) {\n-                        methods.addAll(matchingMethods(methodInfo, beanContext.getRemoteInterface()));\n+                        if (beanContext.getRemoteInterface() != null) {\n+                            methods.addAll(matchingMethods(methodInfo, beanContext.getRemoteInterface()));\n+                        }\n                         for (Class intf : beanContext.getBusinessRemoteInterfaces()) {\n                             methods.addAll(matchingMethods(methodInfo, intf));\n                         }\n                     } else if (methodInfo.methodIntf.equals(\"LocalHome\")) {\n                         methods.addAll(matchingMethods(methodInfo, beanContext.getLocalHomeInterface()));\n                     } else if (methodInfo.methodIntf.equals(\"Local\")) {\n-                        methods.addAll(matchingMethods(methodInfo, beanContext.getLocalInterface()));\n+                        if (beanContext.getLocalInterface() != null) {\n+                            methods.addAll(matchingMethods(methodInfo, beanContext.getLocalInterface()));\n+                        }\n                         for (Class intf : beanContext.getBusinessRemoteInterfaces()) {\n                             methods.addAll(matchingMethods(methodInfo, intf));\n                         }\n@@ -356,7 +360,7 @@ private static boolean containerMethod(Method method) {\n             Method method = iterator.next();\n             if (containerMethod(method)) iterator.remove();\n         }\n-        \n+\n         return methods;\n     }\n ",
                "additions": 10,
                "raw_url": "https://github.com/apache/tomee/raw/3044310eab6b1f2368da722c6edc665d9b9fef6f/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java",
                "status": "modified",
                "changes": 16,
                "deletions": 6,
                "sha": "2ae1934c4f21fea493307c71ac6611e8bfc60253",
                "blob_url": "https://github.com/apache/tomee/blob/3044310eab6b1f2368da722c6edc665d9b9fef6f/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java?ref=3044310eab6b1f2368da722c6edc665d9b9fef6f"
            }
        ],
        "bug_id": "tomee_104",
        "parent": "https://github.com/apache/tomee/commit/5768580bf4bea81eb8d26136f57c5d9223c9f36c",
        "message": "Fix NPE as it might not have remote but RemoteInterfaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@1104022 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/8582610e3d2e0864296e4a1897c7a797f770c246",
        "file": [
            {
                "patch": "@@ -78,8 +78,8 @@ public TimerData(long id, EjbTimerServiceImpl timerService, String deploymentId,\n         this.timerService = timerService;\n         this.deploymentId = deploymentId;\n         this.primaryKey = primaryKey;\n-        this.info =timerConfig.getInfo();\n-        this.persistent = timerConfig.isPersistent();\n+        this.info = timerConfig == null ? null : timerConfig.getInfo();\n+        this.persistent = timerConfig == null ? false : timerConfig.isPersistent();\n         this.timer = new TimerImpl(this);\n         this.timeoutMethod = timeoutMethod;\n     }",
                "additions": 2,
                "raw_url": "https://github.com/apache/tomee/raw/8582610e3d2e0864296e4a1897c7a797f770c246/container/openejb-core/src/main/java/org/apache/openejb/core/timer/TimerData.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "9ecd602610bf8d6c8074d20456e2ef7b4b9fe6b4",
                "blob_url": "https://github.com/apache/tomee/blob/8582610e3d2e0864296e4a1897c7a797f770c246/container/openejb-core/src/main/java/org/apache/openejb/core/timer/TimerData.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/timer/TimerData.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/timer/TimerData.java?ref=8582610e3d2e0864296e4a1897c7a797f770c246"
            }
        ],
        "bug_id": "tomee_105",
        "parent": "https://github.com/apache/tomee/commit/c7fcf59526a6ece77f9834098a3fc9f2ced5f58a",
        "message": "OPENEJB-1536 Potential NPE in TimerData (Patch from Shawn Jiang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@1098914 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/fb9b7475132fc7a3e7cebb91b996d7483b19b7c8",
        "file": [
            {
                "patch": "@@ -73,14 +73,16 @@ public void buildInjections(Set<Class<?>> managedBeanClasses) throws OpenEJBExce\n             deployer.deploy(cdiInfo);\n \n             JndiEncInfoBuilder infoBuilder = new JndiEncInfoBuilder(appModule);\n-            JndiEncInfo encInfo = new JndiEncInfo();\n-            infoBuilder.build(cdiInfo, cdiInfo.getBeanName(), appModule.path, null, encInfo);\n+            JndiEncInfo moduleJndiEnc = new JndiEncInfo();\n+            JndiEncInfo jndiEnc = new JndiEncInfo();\n+            infoBuilder.build(cdiInfo, cdiInfo.getBeanName(), appModule.path, moduleJndiEnc, jndiEnc);\n \n             InjectionBuilder builder = new InjectionBuilder(classLoader);\n-            List<Injection> injections = builder.buildInjections(encInfo);\n+            List<Injection> injections = builder.buildInjections(jndiEnc);\n \n             cdiInfo.setInjections(injections);\n-            JndiEncBuilder encBuilder = new JndiEncBuilder(encInfo, injections, appModule.path, classLoader);\n+            // TODO: handle app/global/module namespaces?\n+            JndiEncBuilder encBuilder = new JndiEncBuilder(jndiEnc, injections, appModule.path, classLoader);\n             this.contexts.put(cdiInfo, encBuilder.build(JndiEncBuilder.JndiScope.comp));\n         }\n     }",
                "additions": 6,
                "raw_url": "https://github.com/apache/tomee/raw/fb9b7475132fc7a3e7cebb91b996d7483b19b7c8/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiResourceInjectionService.java",
                "status": "modified",
                "changes": 10,
                "deletions": 4,
                "sha": "39e0651363fcd5c1cdeccfc6ca92ed2ad411bb96",
                "blob_url": "https://github.com/apache/tomee/blob/fb9b7475132fc7a3e7cebb91b996d7483b19b7c8/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiResourceInjectionService.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiResourceInjectionService.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiResourceInjectionService.java?ref=fb9b7475132fc7a3e7cebb91b996d7483b19b7c8"
            }
        ],
        "bug_id": "tomee_106",
        "parent": "https://github.com/apache/tomee/commit/a988ac95edb549180baecb1981953b39ba0df3a6",
        "message": "A NPE fix for SimpleCdiTest\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@992069 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/41416bcdc7d0ae06c451ce27f5ca1001d9cc8eef",
        "file": [
            {
                "patch": "@@ -132,7 +132,7 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n         // TODO: This should not be necessary, but having an empty <attributes/> tag\n         // causes some of the unit tests to fail.  Not sure why.  Should be fixed.\n         for (Entity entity : appModule.getCmpMappings().getEntity()) {\n-            if (entity.getAttributes().isEmpty()){\n+            if (entity.getAttributes() != null && entity.getAttributes().isEmpty()){\n                 entity.setAttributes(null);\n             }\n         }",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/41416bcdc7d0ae06c451ce27f5ca1001d9cc8eef/container/openejb-core/src/main/java/org/apache/openejb/config/CmpJpaConversion.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "167cf840ea09f2a8e419c7df61f1b08c826ed5e5",
                "blob_url": "https://github.com/apache/tomee/blob/41416bcdc7d0ae06c451ce27f5ca1001d9cc8eef/container/openejb-core/src/main/java/org/apache/openejb/config/CmpJpaConversion.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/CmpJpaConversion.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/CmpJpaConversion.java?ref=41416bcdc7d0ae06c451ce27f5ca1001d9cc8eef"
            }
        ],
        "bug_id": "tomee_107",
        "parent": "https://github.com/apache/tomee/commit/f6a7a486092040f4d436dd620128ebd66843711a",
        "message": "avoid a possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@957646 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/ec82941a6b9ab08e6051452c1029f1e77b341be1",
        "file": [
            {
                "patch": "@@ -230,8 +230,10 @@ public void convertMdbConfigs(EjbJar ejbJar, OpenejbJarType openejbJarType) {\n \n     public void mergeEntityMappings(String moduleId, EntityMappings entityMappings, OpenejbJar openejbJar, OpenejbJarType openejbJarType) {\n         Map<String, EntityData> entities =  new TreeMap<String, EntityData>();\n-        for (Entity entity : entityMappings.getEntity()) {\n-            entities.put(entity.getDescription(), new EntityData(entity));\n+        if (entityMappings != null) {\n+            for (Entity entity : entityMappings.getEntity()) {\n+                entities.put(entity.getDescription(), new EntityData(entity));\n+            }\n         }\n         for (org.apache.openejb.jee.oejb2.EnterpriseBean enterpriseBean : openejbJarType.getEnterpriseBeans()) {\n             if (!(enterpriseBean instanceof EntityBeanType)) {",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/ec82941a6b9ab08e6051452c1029f1e77b341be1/container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "83bcbadebdb0677ebb70bec580a4b413d0a0f519",
                "blob_url": "https://github.com/apache/tomee/blob/ec82941a6b9ab08e6051452c1029f1e77b341be1/container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java?ref=ec82941a6b9ab08e6051452c1029f1e77b341be1"
            }
        ],
        "bug_id": "tomee_108",
        "parent": "https://github.com/apache/tomee/commit/b2d19b719b3fa3d4d6c93edb582bb26982721dc7",
        "message": "Avoid NPE (it seems to have broken Geronimo build today)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@606054 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7",
        "file": [
            {
                "patch": "@@ -25,19 +25,21 @@\n import java.util.List;\n \n public final class ClientInjections {\n+\n     private ClientInjections() {\n         // no-op\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public static InjectionProcessor<?> clientInjector(final Object object) throws OpenEJBException {\n         if (object == null) {\n             throw new NullPointerException(\"Object supplied to 'inject' operation is null\");\n         }\n \n-        Context clients;\n+        final Context clients;\n         try {\n             clients = (Context) SystemInstance.get().getComponent(ContainerSystem.class).getJNDIContext()\n-                    .lookup(\"openejb/client/\");\n+                                              .lookup(\"openejb/client/\");\n         } catch (NamingException e) {\n             throw new OpenEJBException(object.getClass().getName(), e);\n         }\n@@ -48,7 +50,7 @@ private ClientInjections() {\n         Class<?> current = object.getClass();\n         while (current != null && !current.equals(Object.class)) {\n             try {\n-                String moduleId = (String) clients.lookup(current.getName());\n+                final String moduleId = (String) clients.lookup(current.getName());\n                 ctx = (Context) clients.lookup(moduleId);\n                 injections = (List<Injection>) ctx.lookup(\"info/injections\");\n                 break;\n@@ -59,10 +61,10 @@ private ClientInjections() {\n \n         if (injections == null) {\n             throw new OpenEJBException(\"Unable to find injection meta-data for \"\n-                    + object.getClass().getName()\n-                    + \".  Ensure that class was annotated with @\"\n-                    + LocalClient.class.getName()+\" and was successfully discovered and deployed. \"\n-                    + \" See http://openejb.apache.org/3.0/local-client-injection.html\");\n+                                       + object.getClass().getName()\n+                                       + \".  Ensure that class was annotated with @\"\n+                                       + LocalClient.class.getName() + \" and was successfully discovered and deployed. \"\n+                                       + \" See http://openejb.apache.org/3.0/local-client-injection.html\");\n         }\n \n         return new InjectionProcessor(object, injections, ctx);",
                "additions": 9,
                "raw_url": "https://github.com/apache/tomee/raw/a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7/container/openejb-core/src/main/java/org/apache/openejb/ClientInjections.java",
                "status": "modified",
                "changes": 16,
                "deletions": 7,
                "sha": "3993d2765397803764d32124e721c3a6c52957c6",
                "blob_url": "https://github.com/apache/tomee/blob/a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7/container/openejb-core/src/main/java/org/apache/openejb/ClientInjections.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/ClientInjections.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/ClientInjections.java?ref=a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7"
            },
            {
                "patch": "@@ -16,11 +16,6 @@\n  */\n package org.apache.openejb;\n \n-import java.util.Date;\n-import java.util.Properties;\n-\n-import javax.transaction.TransactionManager;\n-\n import org.apache.openejb.assembler.classic.DeploymentExceptionManager;\n import org.apache.openejb.cdi.CdiBuilder;\n import org.apache.openejb.loader.SystemInstance;\n@@ -35,6 +30,10 @@\n import org.apache.openejb.util.OptionsLog;\n import org.apache.openejb.util.SafeToolkit;\n \n+import javax.transaction.TransactionManager;\n+import java.util.Date;\n+import java.util.Properties;\n+\n /**\n  * @version $Rev$ $Date$\n  */\n@@ -49,30 +48,31 @@ public static ApplicationServer getApplicationServer() {\n         return SystemInstance.get().getComponent(ApplicationServer.class);\n     }\n \n-    public static TransactionManager getTransactionManager(){\n+    public static TransactionManager getTransactionManager() {\n         return SystemInstance.get().getComponent(TransactionManager.class);\n     }\n \n     public static class Instance {\n-        private static Messages messages = new Messages(\"org.apache.openejb.util.resources\");\n+\n+        private static final Messages messages = new Messages(\"org.apache.openejb.util.resources\");\n         private final Throwable initialized;\n \n         /**\n          * 1 usage\n          * org.apache.openejb.core.ivm.naming.InitContextFactory\n          */\n-        public Instance(Properties props) throws OpenEJBException {\n+        public Instance(final Properties props) throws OpenEJBException {\n             this(props, new org.apache.openejb.core.ServerFederation());\n         }\n \n         /**\n          * 2 usages\n          */\n-        public Instance(Properties initProps, ApplicationServer appServer) throws OpenEJBException {\n+        public Instance(final Properties initProps, final ApplicationServer appServer) throws OpenEJBException {\n             if (appServer == null) {\n                 throw new IllegalArgumentException(\"appServer must not be null\");\n             }\n-            initialized = new InitializationException(\"Initialized at \"+new Date()).fillInStackTrace();\n+            initialized = new InitializationException(\"Initialized at \" + new Date()).fillInStackTrace();\n \n             try {\n                 SystemInstance.init(initProps);\n@@ -84,23 +84,24 @@ public Instance(Properties initProps, ApplicationServer appServer) throws OpenEJ\n             } catch (Exception e) {\n                 throw new OpenEJBException(e);\n             }\n-            SystemInstance system = SystemInstance.get();\n+            final SystemInstance system = SystemInstance.get();\n \n             final Logger logger = Logger.getInstance(LogCategory.OPENEJB_STARTUP, \"org.apache.openejb.util.resources\");\n \n             system.setComponent(DeploymentExceptionManager.class, new DeploymentExceptionManager());\n \n             system.setComponent(ApplicationServer.class, appServer);\n \n-            OpenEjbVersion versionInfo = OpenEjbVersion.get();\n+            final OpenEjbVersion versionInfo = OpenEjbVersion.get();\n             if (!system.getOptions().get(\"openejb.nobanner\", true)) {\n+                //noinspection UseOfSystemOutOrSystemErr\n                 versionInfo.print(System.out);\n             }\n \n-            Logger logger2 = Logger.getInstance(LogCategory.OPENEJB, \"org.apache.openejb.util.resources\");\n-            final String[] bannerValues = new String[] {\n-                    null, versionInfo.getUrl(), new Date().toString(), versionInfo.getCopyright(),\n-                    versionInfo.getVersion(), versionInfo.getDate(), versionInfo.getTime(), null\n+            final Logger logger2 = Logger.getInstance(LogCategory.OPENEJB, \"org.apache.openejb.util.resources\");\n+            final String[] bannerValues = new String[]{\n+                                                          null, versionInfo.getUrl(), new Date().toString(), versionInfo.getCopyright(),\n+                                                          versionInfo.getVersion(), versionInfo.getDate(), versionInfo.getTime(), null\n             };\n             for (int i = 0; i < bannerValues.length; i++) {\n                 if (bannerValues[i] == null) {\n@@ -116,18 +117,18 @@ public Instance(Properties initProps, ApplicationServer appServer) throws OpenEJ\n             //OWB support.  The classloader has to be able to load all OWB components including the ones supplied by OpenEjb.\n             CdiBuilder.initializeOWB(getClass().getClassLoader());\n \n-            String className = system.getOptions().get(\"openejb.assembler\", \"org.apache.openejb.assembler.classic.Assembler\");\n+            final String className = system.getOptions().get(\"openejb.assembler\", \"org.apache.openejb.assembler.classic.Assembler\");\n \n             logger.debug(\"startup.instantiatingAssemblerClass\", className);\n-            \n-            Assembler assembler;\n+\n+            final Assembler assembler;\n             try {\n                 assembler = (Assembler) SafeToolkit.getToolkit(\"OpenEJB\").newInstance(className);\n             } catch (OpenEJBException oe) {\n                 logger.fatal(\"startup.assemblerCannotBeInstantiated\", oe);\n                 throw oe;\n             } catch (Throwable t) {\n-                String msg = messages.message(\"startup.openejbEncounteredUnexpectedError\");\n+                final String msg = messages.message(\"startup.openejbEncounteredUnexpectedError\");\n                 logger.fatal(msg, t);\n                 throw new OpenEJBException(msg, t);\n             }\n@@ -138,7 +139,7 @@ public Instance(Properties initProps, ApplicationServer appServer) throws OpenEJ\n                 logger.fatal(\"startup.assemblerFailedToInitialize\", oe);\n                 throw oe;\n             } catch (Throwable t) {\n-                String msg = messages.message(\"startup.assemblerEncounteredUnexpectedError\");\n+                final String msg = messages.message(\"startup.assemblerEncounteredUnexpectedError\");\n                 logger.fatal(msg, t);\n                 throw new OpenEJBException(msg, t);\n             }\n@@ -149,14 +150,14 @@ public Instance(Properties initProps, ApplicationServer appServer) throws OpenEJ\n                 logger.fatal(\"startup.assemblerFailedToBuild\", oe);\n                 throw oe;\n             } catch (Throwable t) {\n-                String msg = messages.message(\"startup.assemblerEncounterUnexpectedBuildError\");\n+                final String msg = messages.message(\"startup.assemblerEncounterUnexpectedBuildError\");\n                 logger.fatal(msg, t);\n                 throw new OpenEJBException(msg, t);\n             }\n \n-            ContainerSystem containerSystem = assembler.getContainerSystem();\n+            final ContainerSystem containerSystem = assembler.getContainerSystem();\n             if (containerSystem == null) {\n-                String msg = messages.message(\"startup.assemblerReturnedNullContainer\");\n+                final String msg = messages.message(\"startup.assemblerReturnedNullContainer\");\n                 logger.fatal(msg);\n                 throw new OpenEJBException(msg);\n             }\n@@ -167,7 +168,7 @@ public Instance(Properties initProps, ApplicationServer appServer) throws OpenEJ\n                 logger.debug(\"startup.debugContainers\", containerSystem.containers().length);\n \n                 if (containerSystem.containers().length > 0) {\n-                    Container[] c = containerSystem.containers();\n+                    final Container[] c = containerSystem.containers();\n                     logger.debug(\"startup.debugContainersType\");\n                     for (int i = 0; i < c.length; i++) {\n                         String entry = \"   \";\n@@ -196,7 +197,7 @@ public Instance(Properties initProps, ApplicationServer appServer) throws OpenEJ\n                 logger.debug(\"startup.debugDeployments\", containerSystem.deployments().length);\n                 if (containerSystem.deployments().length > 0) {\n                     logger.debug(\"startup.debugDeploymentsType\");\n-                    BeanContext[] d = containerSystem.deployments();\n+                    final BeanContext[] d = containerSystem.deployments();\n                     for (int i = 0; i < d.length; i++) {\n                         String entry = \"   \";\n                         switch (d[i].getComponentType()) {\n@@ -228,19 +229,19 @@ public Instance(Properties initProps, ApplicationServer appServer) throws OpenEJ\n                 }\n             }\n \n-            SecurityService securityService = assembler.getSecurityService();\n+            final SecurityService securityService = assembler.getSecurityService();\n             if (securityService == null) {\n-                String msg = messages.message(\"startup.assemblerReturnedNullSecurityService\");\n+                final String msg = messages.message(\"startup.assemblerReturnedNullSecurityService\");\n                 logger.fatal(msg);\n                 throw new OpenEJBException(msg);\n             } else {\n                 logger.debug(\"startup.securityService\", securityService.getClass().getName());\n             }\n             system.setComponent(SecurityService.class, securityService);\n \n-            TransactionManager transactionManager = assembler.getTransactionManager();\n+            final TransactionManager transactionManager = assembler.getTransactionManager();\n             if (transactionManager == null) {\n-                String msg = messages.message(\"startup.assemblerReturnedNullTransactionManager\");\n+                final String msg = messages.message(\"startup.assemblerReturnedNullTransactionManager\");\n                 logger.fatal(msg);\n                 throw new OpenEJBException(msg);\n             } else {\n@@ -258,33 +259,36 @@ public Throwable getInitialized() {\n     }\n \n     public static void destroy() {\n-        Assembler assembler = SystemInstance.get().getComponent(Assembler.class);\n-        if (assembler != null) assembler.destroy();\n-        SystemInstance.reset();\n+        final Assembler assembler = SystemInstance.get().getComponent(Assembler.class);\n+        if (assembler != null) {\n+            assembler.destroy();\n+        } else {\n+            SystemInstance.reset();\n+        }\n         instance = null;\n     }\n \n     /**\n      * 1 usage\n      * org.apache.openejb.core.ivm.naming.InitContextFactory\n      */\n-    public static void init(Properties props) throws OpenEJBException {\n+    public static void init(final Properties props) throws OpenEJBException {\n         init(props, null);\n     }\n \n-    private static Messages messages = new Messages(\"org.apache.openejb.util.resources\");\n+    private static final Messages messages = new Messages(\"org.apache.openejb.util.resources\");\n \n     /**\n      * 2 usages\n      */\n-    public static void init(Properties initProps, ApplicationServer appServer) throws OpenEJBException {\n+    public static void init(final Properties initProps, final ApplicationServer appServer) throws OpenEJBException {\n         if (isInitialized()) {\n-            if (instance != null){\n-                String msg = messages.message(\"startup.alreadyInitialized\");\n+            if (instance != null) {\n+                final String msg = messages.message(\"startup.alreadyInitialized\");\n                 logger().error(msg, instance.initialized);\n                 throw new OpenEJBException(msg, instance.initialized);\n             } else {\n-                String msg = messages.message(\"startup.alreadyInitialized\");\n+                final String msg = messages.message(\"startup.alreadyInitialized\");\n                 logger().error(msg);\n                 throw new OpenEJBException(msg);\n             }\n@@ -305,8 +309,8 @@ public static boolean isInitialized() {\n     }\n \n     public static class InitializationException extends Exception {\n-        public InitializationException(String message)\n-        {\n+\n+        public InitializationException(final String message) {\n             super(message);\n         }\n     }",
                "additions": 45,
                "raw_url": "https://github.com/apache/tomee/raw/a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7/container/openejb-core/src/main/java/org/apache/openejb/OpenEJB.java",
                "status": "modified",
                "changes": 86,
                "deletions": 41,
                "sha": "ac55a99b12b86e237e889c5526c874d8c4411730",
                "blob_url": "https://github.com/apache/tomee/blob/a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7/container/openejb-core/src/main/java/org/apache/openejb/OpenEJB.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/OpenEJB.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/OpenEJB.java?ref=a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7"
            },
            {
                "patch": "@@ -789,8 +789,8 @@ public AppContext createApplication(final AppInfo appInfo, ClassLoader classLoad\n             final List<BeanContext> allDeployments = initEjbs(classLoader, appInfo, appContext, injections, new ArrayList<BeanContext>(), null);\n \n             if (\"true\".equalsIgnoreCase(SystemInstance.get()\n-                    .getProperty(PROPAGATE_APPLICATION_EXCEPTIONS,\n-                            appInfo.properties.getProperty(PROPAGATE_APPLICATION_EXCEPTIONS, \"false\")))) {\n+                                                      .getProperty(PROPAGATE_APPLICATION_EXCEPTIONS,\n+                                                                   appInfo.properties.getProperty(PROPAGATE_APPLICATION_EXCEPTIONS, \"false\")))) {\n                 propagateApplicationExceptions(appInfo, classLoader, allDeployments);\n             }\n \n@@ -1029,11 +1029,11 @@ private void resumePersistentSchedulers(final AppContext appContext) {\n                             final MethodContext methodContext = entry.getValue();\n                             for (final ScheduleData scheduleData : methodContext.getSchedules()) {\n                                 timerStore.createCalendarTimer(timerService,\n-                                        (String) beanContext.getDeploymentID(),\n-                                        null,\n-                                        entry.getKey(),\n-                                        scheduleData.getExpression(),\n-                                        scheduleData.getConfig());\n+                                                               (String) beanContext.getDeploymentID(),\n+                                                               null,\n+                                                               entry.getKey(),\n+                                                               scheduleData.getExpression(),\n+                                                               scheduleData.getConfig());\n                             }\n                         }\n                         beanContext.setEjbTimerService(timerService);\n@@ -1105,7 +1105,7 @@ public void startEjbs(final boolean start, final List<BeanContext> allDeployment\n                     if (container.getBeanContext(deployment.getDeploymentID()) == null) {\n                         container.deploy(deployment);\n                         if (!((String) deployment.getDeploymentID()).endsWith(\".Comp\")\n-                                && !deployment.isHidden()) {\n+                            && !deployment.isHidden()) {\n                             logger.info(\"createApplication.createdEjb\", deployment.getDeploymentID(), deployment.getEjbName(), container.getContainerID());\n                         }\n                         if (logger.isDebugEnabled()) {\n@@ -1126,7 +1126,7 @@ public void startEjbs(final boolean start, final List<BeanContext> allDeployment\n                     final Container container = deployment.getContainer();\n                     container.start(deployment);\n                     if (!((String) deployment.getDeploymentID()).endsWith(\".Comp\")\n-                            && !deployment.isHidden()) {\n+                        && !deployment.isHidden()) {\n                         logger.info(\"createApplication.startedEjb\", deployment.getDeploymentID(), deployment.getEjbName(), container.getContainerID());\n                     }\n                 } catch (Throwable t) {\n@@ -1180,10 +1180,10 @@ private void deployMBean(final WebBeansContext wc, final ClassLoader cl, final S\n             final MBeanServer server = LocalMBeanServer.get();\n             try {\n                 final ObjectName leaf = new ObjectNameBuilder(\"openejb.user.mbeans\")\n-                        .set(\"application\", id)\n-                        .set(\"group\", clazz.getPackage().getName())\n-                        .set(\"name\", clazz.getSimpleName())\n-                        .build();\n+                                            .set(\"application\", id)\n+                                            .set(\"group\", clazz.getPackage().getName())\n+                                            .set(\"name\", clazz.getSimpleName())\n+                                            .build();\n \n                 server.registerMBean(new DynamicMBeanWrapper(wc, instance), leaf);\n                 appMbeans.put(mbeanClass, leaf.getCanonicalName());\n@@ -1422,7 +1422,7 @@ private static void destroyResource(final String name, final String className, f\n         } else if (ExecutorService.class.isInstance(object)) {\n             ExecutorService.class.cast(object).shutdown();\n         } else if (DataSource.class.isInstance(object)) {\n-\n+            //Do nothing?\n         } else if (logger.isDebugEnabled()) {\n             logger.debug(\"Not processing resource on destroy: \" + className);\n         }\n@@ -1675,7 +1675,7 @@ public void destroyApplication(final AppInfo appInfo) throws UndeployException {\n                 }\n             } catch (NamingException e) {\n                 undeployException.getCauses().add(new Exception(\"Unable to prune openejb/Deployments and openejb/local namespaces, this could cause future deployments to fail.\",\n-                        e));\n+                                                                e));\n             }\n \n             deployments.clear();\n@@ -1771,7 +1771,7 @@ public void destroyApplication(final AppInfo appInfo) throws UndeployException {\n         }\n     }\n \n-    private void destroyLookedUpResource(Context globalContext, String id, String name) throws NamingException {\n+    private void destroyLookedUpResource(final Context globalContext, final String id, final String name) throws NamingException {\n         final Object object = globalContext.lookup(name);\n         final String clazz;\n         if (object == null) { // should it be possible?\n@@ -1904,7 +1904,7 @@ public void createExternalContext(final JndiContextInfo contextInfo) throws Open\n             initialContext = new InitialContext(contextInfo.properties);\n         } catch (NamingException ne) {\n             throw new OpenEJBException(String.format(\"JndiProvider(id=\\\"%s\\\") could not be created.  Failed to create the InitialContext using the supplied properties\",\n-                    contextInfo.id), ne);\n+                                                     contextInfo.id), ne);\n         }\n \n         try {\n@@ -2081,8 +2081,10 @@ public void createResource(final ResourceInfo serviceInfo) throws OpenEJBExcepti\n                 for (final Map.Entry<Object, Object> entry : p.entrySet()) {\n                     final String key = entry.getKey().toString();\n                     if (!props.containsKey(key)\n-                            // never override from Definition, just use it to complete the properties set\n-                            && !(key.equalsIgnoreCase(\"url\") && props.containsKey(\"JdbcUrl\"))) { // with @DataSource we can get both, see org.apache.openejb.config.ConvertDataSourceDefinitions.rawDefinition()\n+                        // never override from Definition, just use it to complete the properties set\n+                        &&\n+                        !(key.equalsIgnoreCase(\"url\") &&\n+                          props.containsKey(\"JdbcUrl\"))) { // with @DataSource we can get both, see org.apache.openejb.config.ConvertDataSourceDefinitions.rawDefinition()\n                         props.put(key, entry.getValue());\n                     }\n                 }\n@@ -2136,8 +2138,8 @@ public void createResource(final ResourceInfo serviceInfo) throws OpenEJBExcepti\n             final BootstrapContext bootstrapContext;\n             if (transactionManager instanceof GeronimoTransactionManager) {\n                 bootstrapContext = new GeronimoBootstrapContext((GeronimoWorkManager) workManager,\n-                        (GeronimoTransactionManager) transactionManager,\n-                        (GeronimoTransactionManager) transactionManager);\n+                                                                (GeronimoTransactionManager) transactionManager,\n+                                                                (GeronimoTransactionManager) transactionManager);\n             } else if (transactionManager instanceof XATerminator) {\n                 bootstrapContext = new SimpleBootstrapContext(workManager, (XATerminator) transactionManager);\n             } else {\n@@ -2200,7 +2202,7 @@ public void createResource(final ResourceInfo serviceInfo) throws OpenEJBExcepti\n             // init cm if needed\n             final Object eagerInit = unset.remove(\"eagerInit\");\n             if (eagerInit != null && eagerInit instanceof String && \"true\".equalsIgnoreCase((String) eagerInit)\n-                    && connectionManager instanceof AbstractConnectionManager) {\n+                && connectionManager instanceof AbstractConnectionManager) {\n                 try {\n                     ((AbstractConnectionManager) connectionManager).doStart();\n                     try {\n@@ -2255,7 +2257,7 @@ public void createResource(final ResourceInfo serviceInfo) throws OpenEJBExcepti\n             bindResource(alias, service);\n         }\n         if (serviceInfo.originAppName != null && !serviceInfo.originAppName.isEmpty() && !\"/\".equals(serviceInfo.originAppName)\n-                && !serviceInfo.id.startsWith(\"global\")) {\n+            && !serviceInfo.id.startsWith(\"global\")) {\n             final String baseJndiName = serviceInfo.id.substring(serviceInfo.originAppName.length() + 1);\n             serviceInfo.aliases.add(baseJndiName);\n             final ContextualJndiReference ref = new ContextualJndiReference(baseJndiName);\n@@ -2667,14 +2669,14 @@ public DeploymentListenerObserver(final DeploymentListener deploymentListener) {\n         }\n \n         public void afterApplicationCreated(\n-                @Observes\n-                final AssemblerAfterApplicationCreated event) {\n+                                               @Observes\n+                                               final AssemblerAfterApplicationCreated event) {\n             delegate.afterApplicationCreated(event.getApp());\n         }\n \n         public void beforeApplicationDestroyed(\n-                @Observes\n-                final AssemblerBeforeApplicationDestroyed event) {\n+                                                  @Observes\n+                                                  final AssemblerBeforeApplicationDestroyed event) {\n             delegate.beforeApplicationDestroyed(event.getApp());\n         }\n ",
                "additions": 29,
                "raw_url": "https://github.com/apache/tomee/raw/a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "status": "modified",
                "changes": 56,
                "deletions": 27,
                "sha": "7da2c02b50b3a157d9d41bbe3e87eb9bf336a38d",
                "blob_url": "https://github.com/apache/tomee/blob/a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java?ref=a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7"
            },
            {
                "patch": "@@ -20,5 +20,6 @@\n /**\n  * @deprecated use org.apache.openejb.core.LocalInitialContextFactory\n  */\n+@Deprecated\n public class LocalInitialContextFactory extends org.apache.openejb.core.LocalInitialContextFactory {\n }",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7/container/openejb-core/src/main/java/org/apache/openejb/client/LocalInitialContextFactory.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "accf2a406a87e6ec92cb9ac71bc1af3880d52dc4",
                "blob_url": "https://github.com/apache/tomee/blob/a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7/container/openejb-core/src/main/java/org/apache/openejb/client/LocalInitialContextFactory.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/client/LocalInitialContextFactory.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/client/LocalInitialContextFactory.java?ref=a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7"
            },
            {
                "patch": "@@ -22,79 +22,114 @@\n \n import javax.naming.Context;\n import javax.naming.NamingException;\n-import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n import java.util.Hashtable;\n import java.util.Properties;\n+import java.util.concurrent.locks.ReentrantLock;\n \n /**\n  * @version $Rev$ $Date$\n  */\n+@SuppressWarnings(\"UseOfObsoleteCollectionType\")\n public class LocalInitialContextFactory implements javax.naming.spi.InitialContextFactory {\n \n-    private static OpenEJBInstance openejb;\n+    private static final ReentrantLock lock = new ReentrantLock();\n+    private static OpenEJBInstance openejb = null;\n \n     private boolean bootedOpenEJB;\n \n-    public Context getInitialContext(Hashtable env) throws javax.naming.NamingException {\n+    @Override\n+    public Context getInitialContext(final Hashtable env) throws javax.naming.NamingException {\n         init(env);\n         return getLocalInitialContext(env);\n     }\n \n-    protected void init(Hashtable env) throws javax.naming.NamingException {\n-        if (openejb != null) {\n-            return;\n-        }\n+    protected void init(final Hashtable env) throws javax.naming.NamingException {\n+\n+        final ReentrantLock l = lock;\n+        l.lock();\n+\n         try {\n-            Properties properties = new Properties();\n-            properties.putAll(env);\n-            init(properties);\n-        } catch (Exception e) {\n-            throw (NamingException) new NamingException(\"Attempted to load OpenEJB. \" + e.getMessage()).initCause(e);\n+            if (openejb != null && openejb.isInitialized()) {\n+                return;\n+            }\n+            try {\n+                final Properties properties = new Properties();\n+                properties.putAll(env);\n+                init(properties);\n+            } catch (Exception e) {\n+                throw (NamingException) new NamingException(\"Attempted to load OpenEJB. \" + e.getMessage()).initCause(e);\n+            }\n+        } finally {\n+            l.unlock();\n         }\n     }\n \n     boolean bootedOpenEJB() {\n-        return bootedOpenEJB;\n+        final ReentrantLock l = lock;\n+        l.lock();\n+\n+        try {\n+            return bootedOpenEJB;\n+        } finally {\n+            l.unlock();\n+        }\n+\n     }\n \n-    public void init(Properties properties) throws Exception {\n-        if (openejb != null) return;\n+    private void init(final Properties properties) throws Exception {\n+        if (openejb != null && openejb.isInitialized()) {\n+            return;\n+        }\n+\n         openejb = new OpenEJBInstance();\n-        if (openejb.isInitialized()) return;\n+\n+        if (openejb.isInitialized()) {\n+            return;\n+        }\n+\n         bootedOpenEJB = true;\n         SystemInstance.init(properties);\n         OptionsLog.install();\n         SystemInstance.get().setProperty(\"openejb.embedded\", \"true\");\n         openejb.init(properties);\n     }\n \n-    public void close(){\n-        openejb = null;\n+    public void close() {\n+        final ReentrantLock l = lock;\n+        l.lock();\n+\n+        try {\n+            openejb = null;\n+        } finally {\n+            l.unlock();\n+        }\n     }\n \n-    private Context getLocalInitialContext(Hashtable env) throws javax.naming.NamingException {\n-        Context context;\n+    private Context getLocalInitialContext(final Hashtable env) throws javax.naming.NamingException {\n+        final Context context;\n         try {\n-            ClassLoader cl = SystemInstance.get().getClassLoader();\n+            final ClassLoader cl = SystemInstance.get().getClassLoader();\n \n-            Class localInitialContext = Class.forName(\"org.apache.openejb.core.LocalInitialContext\", true, cl);\n+            final Class localInitialContext = Class.forName(\"org.apache.openejb.core.LocalInitialContext\", true, cl);\n \n-            Constructor constructor = localInitialContext.getConstructor(Hashtable.class, LocalInitialContextFactory.class);\n+            //noinspection unchecked\n+            final Constructor constructor = localInitialContext.getConstructor(Hashtable.class, LocalInitialContextFactory.class);\n             context = (Context) constructor.newInstance(env, this);\n         } catch (Throwable e) {\n             if (e instanceof InvocationTargetException) {\n-                InvocationTargetException ite = (InvocationTargetException) e;\n-                if (ite.getTargetException() != null){\n+                final InvocationTargetException ite = (InvocationTargetException) e;\n+                if (ite.getTargetException() != null) {\n                     e = ite.getTargetException();\n                 }\n             }\n \n-            if (e instanceof NamingException){\n+            if (e instanceof NamingException) {\n                 throw (NamingException) e;\n             }\n             throw (NamingException) new javax.naming.NamingException(\"Cannot instantiate a LocalInitialContext. Exception: \"\n-                    + e.getClass().getName() + \" \" + e.getMessage()).initCause(e);\n+                                                                     + e.getClass().getName() + \" \" + e.getMessage()).initCause(e);\n         }\n \n         return context;",
                "additions": 62,
                "raw_url": "https://github.com/apache/tomee/raw/a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7/container/openejb-core/src/main/java/org/apache/openejb/core/LocalInitialContextFactory.java",
                "status": "modified",
                "changes": 89,
                "deletions": 27,
                "sha": "0a5acd22d950c5d3d3f96fec2786a982aa7a7bad",
                "blob_url": "https://github.com/apache/tomee/blob/a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7/container/openejb-core/src/main/java/org/apache/openejb/core/LocalInitialContextFactory.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/LocalInitialContextFactory.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/LocalInitialContextFactory.java?ref=a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7"
            },
            {
                "patch": "@@ -16,18 +16,18 @@\n  */\n package org.apache.openejb.osgi.client;\n \n-import java.util.Hashtable;\n+import org.apache.openejb.core.LocalInitialContext;\n \n import javax.naming.Context;\n-\n-import org.apache.openejb.core.LocalInitialContext;\n+import java.util.Hashtable;\n \n /**\n  * @version $Rev$ $Date$\n  */\n public class LocalInitialContextFactory extends org.apache.openejb.core.LocalInitialContextFactory {\n \n-    public Context getInitialContext(Hashtable env) throws javax.naming.NamingException {\n+    @Override\n+    public Context getInitialContext(final Hashtable env) throws javax.naming.NamingException {\n         init(env);\n         return new LocalInitialContext(env, this);\n     }",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7/container/openejb-core/src/main/java/org/apache/openejb/osgi/client/LocalInitialContextFactory.java",
                "status": "modified",
                "changes": 8,
                "deletions": 4,
                "sha": "ae7eb4567efcf7844fb9da1d76858eb2495e0c9f",
                "blob_url": "https://github.com/apache/tomee/blob/a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7/container/openejb-core/src/main/java/org/apache/openejb/osgi/client/LocalInitialContextFactory.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/osgi/client/LocalInitialContextFactory.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/osgi/client/LocalInitialContextFactory.java?ref=a246eee87a6cf9554e0829e3a2d9f84f13f1ebb7"
            }
        ],
        "bug_id": "tomee_109",
        "parent": "https://github.com/apache/tomee/commit/c4cfc87d4264f52f5f6e074a2d7cab6be6e1c6cf",
        "message": "Make LocalInitialContextFactory thread safe - Creating a new LocalInitialContext could/would result in a NullPointerException on getRoot() after a destroy due to race condition.\nFinals.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1508847 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/3fa0420a7145a25e18ca202f4f170d60886e6e60",
        "file": [
            {
                "patch": "@@ -676,13 +676,16 @@ protected WebModule createWebModule(String appId, String warPath, ClassLoader pa\n         try {\n             descriptors = getWebDescriptors(warFile);\n         } catch (IOException e) {\n-            throw new OpenEJBException(\"Unable to determine descriptors in jar.\", e);\n+            throw new OpenEJBException(\"Unable to collect descriptors in web module: \" + contextRoot, e);\n         }\n \n         WebApp webApp = null;\n         URL webXmlUrl = descriptors.get(\"web.xml\");\n         if (webXmlUrl != null) {\n             webApp = ReadDescriptors.readWebApp(webXmlUrl);\n+        } else {\n+            // no-web.xml webapp - possible since Servlet 3.0\n+            webApp = new WebApp();\n         }\n \n         // determine war class path",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/3fa0420a7145a25e18ca202f4f170d60886e6e60/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "94c9bc70297ff2922d03bd01e67226d3ed1eea8b",
                "blob_url": "https://github.com/apache/tomee/blob/3fa0420a7145a25e18ca202f4f170d60886e6e60/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=3fa0420a7145a25e18ca202f4f170d60886e6e60"
            }
        ],
        "bug_id": "tomee_110",
        "parent": "https://github.com/apache/tomee/commit/3a743b9c9ef2305e9036e029acb98cf934ade8f8",
        "message": "Fix the exception message and handle no-web.xml webapps - they can show up in TomEE\nTOMEE-76: Avoid NullPointerException in no-web.xml applications\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1180499 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/44e8d1e6df482a2f10e446629f4f2253bbc8bf42",
        "file": [
            {
                "patch": "@@ -517,9 +517,18 @@ public DefaultService(String id, Class<? extends Service> type) {\n         info.properties = props;\n         info.constructorArgs.addAll(parseConstructorArgs(provider));\n \n+        specialProcessing(info);\n+\n+\n         return info;\n     }\n \n+    private <T extends ServiceInfo> void specialProcessing(T info) {\n+        ServiceInfo serviceInfo = info;\n+        TopicOrQueueDefaults.process(serviceInfo);\n+    }\n+\n+\n     @SuppressWarnings({\"unchecked\"})\n     private ServiceProvider resolveServiceProvider(Service service, Class infoType) throws OpenEJBException {\n \n@@ -736,4 +745,37 @@ private OpenEjbConfiguration getRunningConfig() {\n         return SystemInstance.get().getComponent(OpenEjbConfiguration.class);\n     }\n \n+\n+    private static class TopicOrQueueDefaults {\n+        public static void process(ServiceInfo provider) {\n+            if (!provider.service.equals(\"Resource\")) return;\n+            if (!provider.types.contains(\"Topic\") && !provider.types.contains(\"Queue\")) return;\n+            if (!provider.className.matches(\"org.apache.activemq.command.ActiveMQ(Topic|Queue)\")) return;\n+\n+\n+            Properties properties = provider.properties;\n+            String destination = normalizePropertyName(properties, \"destination\");\n+            if (properties.getProperty(destination) == null || properties.getProperty(destination).equals(\"\")){\n+                properties.setProperty(destination, provider.id);\n+            }\n+        }\n+\n+        /**\n+         * Our properties are not case sensitive, so they may have specified the name\n+         * under any case.  Would be super to have a case insensitive properties impl.\n+         * @param properties\n+         * @param property\n+         * @return the property name under any corrected case\n+         */\n+        private static String normalizePropertyName(Properties properties, String property) {\n+            for (Object o : properties.keySet()) {\n+                String name  = (String) o;\n+                if (name.equalsIgnoreCase(property)){\n+                    return name;\n+                }\n+            }\n+\n+            return property;\n+        }\n+    }\n }",
                "additions": 42,
                "raw_url": "https://github.com/apache/tomee/raw/44e8d1e6df482a2f10e446629f4f2253bbc8bf42/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "status": "modified",
                "changes": 42,
                "deletions": 0,
                "sha": "d684dd6dc3010a1c9d1d126055b4c5a917efdff0",
                "blob_url": "https://github.com/apache/tomee/blob/44e8d1e6df482a2f10e446629f4f2253bbc8bf42/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java?ref=44e8d1e6df482a2f10e446629f4f2253bbc8bf42"
            },
            {
                "patch": "@@ -278,7 +278,7 @@\n \n     # Default password\n \n-    Password  \n+    Password\n \n     # The connection properties that will be sent to the JDBC\n     # driver when establishing new connections\n@@ -413,7 +413,7 @@\n     # limit.\n     #\n     # NOTE - Some drivers have limits on the number of open\n-    # statements, so make sure there are some resources left \n+    # statements, so make sure there are some resources left\n     # for the other (non-prepared) statements.\n \n     MaxOpenPreparedStatements 0\n@@ -434,7 +434,7 @@\n     #\n     # NOTE: Do NOT close the underlying connection, only the\n     # original logical connection wrapper.\n-    \n+\n     AccessToUnderlyingConnectionAllowed\tfalse\n   </ServiceProvider>\n \n@@ -638,7 +638,7 @@\n \n     # Broker configuration\n     BrokerXmlConfig broker:(tcp://localhost:61616)?useJmx=false\n-    \n+\n     # Broker address\n     ServerUrl vm://localhost?async=true\n \n@@ -652,7 +652,7 @@\n           service=\"Resource\"\n           types=\"javax.jms.ConnectionFactory, javax.jms.QueueConnectionFactory, javax.jms.TopicConnectionFactory, QueueConnectionFactory, TopicConnectionFactory\"\n           class-name=\"org.apache.activemq.ra.ActiveMQManagedConnectionFactory\">\n-    \n+\n     ResourceAdapter Default JMS Resource Adapter\n \n     # Specifies if the connection is enrolled in global transaction\n@@ -678,7 +678,7 @@\n           types=\"javax.jms.Queue, Queue\"\n           constructor=\"destination\"\n           class-name=\"org.apache.activemq.command.ActiveMQQueue\">\n-    destination destination\n+    destination\n   </ServiceProvider>\n \n   <ServiceProvider\n@@ -687,7 +687,7 @@\n           types=\"javax.jms.Topic, Topic\"\n           constructor=\"destination\"\n           class-name=\"org.apache.activemq.command.ActiveMQTopic\">\n-    destination destination\n+    destination\n   </ServiceProvider>\n \n   <!--",
                "additions": 7,
                "raw_url": "https://github.com/apache/tomee/raw/44e8d1e6df482a2f10e446629f4f2253bbc8bf42/container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml",
                "status": "modified",
                "changes": 14,
                "deletions": 7,
                "sha": "95fb4ff15b1cd517ca0da76fe38a127c7cbc194f",
                "blob_url": "https://github.com/apache/tomee/blob/44e8d1e6df482a2f10e446629f4f2253bbc8bf42/container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml",
                "filename": "container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml?ref=44e8d1e6df482a2f10e446629f4f2253bbc8bf42"
            },
            {
                "patch": "@@ -19,6 +19,7 @@\n import junit.framework.TestCase;\n import org.apache.openejb.assembler.classic.StatelessSessionContainerInfo;\n import org.apache.openejb.assembler.classic.ContainerInfo;\n+import org.apache.openejb.assembler.classic.ResourceInfo;\n import org.apache.openejb.config.sys.Container;\n import org.apache.openejb.config.sys.Resource;\n \n@@ -135,5 +136,19 @@ public void testConfigureServiceAddedPropertyViaURI() throws Exception {\n         assertNotNull(myStatelessContainer.properties.getProperty(\"anotherProperty\"));\n         assertEquals(\"Cheese is good\", myStatelessContainer.properties.getProperty(\"anotherProperty\"));\n     }\n+\n+    public void testQueue() throws Exception {\n+        ConfigurationFactory factory = new ConfigurationFactory();\n+\n+        ResourceInfo resourceInfo = factory.configureService(new Resource(\"myQueue\", \"Queue\"), ResourceInfo.class);\n+\n+        assertNotNull(resourceInfo);\n+        assertEquals(\"myQueue\", resourceInfo.id);\n+        assertNotNull(resourceInfo.constructorArgs);\n+        assertNotNull(resourceInfo.properties);\n+        assertEquals(\"myQueue\", resourceInfo.properties.getProperty(\"destination\"));\n+    }\n+\n+\n }\n ",
                "additions": 15,
                "raw_url": "https://github.com/apache/tomee/raw/44e8d1e6df482a2f10e446629f4f2253bbc8bf42/container/openejb-core/src/test/java/org/apache/openejb/config/ConfigureServiceTest.java",
                "status": "modified",
                "changes": 15,
                "deletions": 0,
                "sha": "09e0594e72c96024b64998680d6e9356fbd58eb2",
                "blob_url": "https://github.com/apache/tomee/blob/44e8d1e6df482a2f10e446629f4f2253bbc8bf42/container/openejb-core/src/test/java/org/apache/openejb/config/ConfigureServiceTest.java",
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/config/ConfigureServiceTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/config/ConfigureServiceTest.java?ref=44e8d1e6df482a2f10e446629f4f2253bbc8bf42"
            }
        ],
        "bug_id": "tomee_111",
        "parent": "https://github.com/apache/tomee/commit/60ecea20411efb595596446319609a2c48623d33",
        "message": "When configuring a queue or topic, use the id of the <Resource> tag as the destination name allowing for something like this:\n  <Resource id=\"MyQueue\" type\"Queue\"/>\n\nFixes: OPENEJB-706: NullPointerException initializing activemq\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@607303 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/9af21e751f950130ced8ae044847b63fd505fbbc",
        "file": [
            {
                "patch": "@@ -103,7 +103,11 @@ private Realm instance() {\n                             throw new TomEERuntimeException(e);\n                         }\n                     } else {\n-                        final BeanManager bm = WebBeansContext.currentInstance().getBeanManagerImpl();\n+                        final WebBeansContext webBeansContext = WebBeansContext.currentInstance();\n+                        if (webBeansContext == null) {\n+                            return null; // too early to have a cdi bean, skip these methods - mainly init() but @PostConstruct works then\n+                        }\n+                        final BeanManager bm = webBeansContext.getBeanManagerImpl();\n                         final Set<Bean<?>> beans = bm.getBeans(clazz);\n                         final Bean<?> bean = bm.resolve(beans);\n                         creationalContext = bm.createCreationalContext(null);\n@@ -128,15 +132,15 @@ private Realm instance() {\n     @Override\n     protected void initInternal() throws LifecycleException {\n         final Realm r = instance();\n-        if (Lifecycle.class.isInstance(r)) {\n+        if (r != null && Lifecycle.class.isInstance(r)) {\n             Lifecycle.class.cast(r).init();\n         }\n     }\n \n     @Override\n     protected void startInternal() throws LifecycleException {\n         final Realm r = instance();\n-        if (Lifecycle.class.isInstance(r)) {\n+        if (r != null && Lifecycle.class.isInstance(r)) {\n             Lifecycle.class.cast(r).start();\n         }\n         setState(LifecycleState.STARTING);\n@@ -145,7 +149,7 @@ protected void startInternal() throws LifecycleException {\n     @Override\n     protected void stopInternal() throws LifecycleException {\n         final Realm r = instance();\n-        if (Lifecycle.class.isInstance(r)) {\n+        if (r != null && Lifecycle.class.isInstance(r)) {\n             Lifecycle.class.cast(r).stop();\n         }\n         setState(LifecycleState.STOPPING);\n@@ -154,15 +158,15 @@ protected void stopInternal() throws LifecycleException {\n     @Override\n     protected void destroyInternal() throws LifecycleException {\n         final Realm r = instance();\n-        if (Lifecycle.class.isInstance(r)) {\n+        if (r != null && Lifecycle.class.isInstance(r)) {\n             Lifecycle.class.cast(r).destroy();\n         }\n     }\n \n     @Override\n     public Container getContainer() {\n         if (delegate != null) {\n-            return instance().getContainer();\n+            return delegate.getContainer();\n         }\n         return container;\n     }\n@@ -181,15 +185,19 @@ public void lifecycleEvent(final LifecycleEvent event) {\n         });\n \n         if (delegate != null) {\n-            instance().setContainer(container);\n+            delegate.setContainer(container);\n         } else {\n             this.container = Context.class.cast(container);\n         }\n     }\n \n     @Override\n     public void addPropertyChangeListener(final PropertyChangeListener listener) {\n-        instance().addPropertyChangeListener(listener);\n+        final Realm instance = instance();\n+        if (instance == null) {\n+            return;\n+        }\n+        instance.addPropertyChangeListener(listener);\n     }\n \n     @Override\n@@ -242,6 +250,10 @@ public boolean hasUserDataPermission(final Request request, final Response respo\n \n     @Override\n     public void removePropertyChangeListener(final PropertyChangeListener listener) {\n-        instance().removePropertyChangeListener(listener);\n+        final Realm instance = instance();\n+        if (instance == null) {\n+            return;\n+        }\n+        instance.removePropertyChangeListener(listener);\n     }\n }",
                "additions": 21,
                "raw_url": "https://github.com/apache/tomee/raw/9af21e751f950130ced8ae044847b63fd505fbbc/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/realm/LazyRealm.java",
                "status": "modified",
                "changes": 30,
                "deletions": 9,
                "sha": "0b9bd5c7a7d3840e975a1d22a221aa5e32fa5b26",
                "blob_url": "https://github.com/apache/tomee/blob/9af21e751f950130ced8ae044847b63fd505fbbc/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/realm/LazyRealm.java",
                "filename": "tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/realm/LazyRealm.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/realm/LazyRealm.java?ref=9af21e751f950130ced8ae044847b63fd505fbbc"
            }
        ],
        "bug_id": "tomee_112",
        "parent": "https://github.com/apache/tomee/commit/7cd8d33ff166fc9649f4a6df4a1a40ffd7379f42",
        "message": "TOMEE-1334 trying to avoid NPE when CDI context is not yet started\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1620375 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/7cd8d33ff166fc9649f4a6df4a1a40ffd7379f42",
        "file": [
            {
                "patch": "@@ -118,7 +118,12 @@ public void release(@Observes final EventContext<BeforeUnDeploy> event) {\n     }\n \n     private BeanContext beanContext() {\n-        final String className = testClass.get().getName();\n+        final TestClass tc = testClass.get();\n+        if (tc == null) {\n+            return null;\n+        }\n+\n+        final String className = tc.getName();\n         final ContainerSystem containerSystem = SystemInstance.get().getComponent(ContainerSystem.class);\n         for (final AppContext app : containerSystem.getAppContexts()) {\n             final BeanContext context = containerSystem.getBeanContext(app.getId() + \"_\" + className);",
                "additions": 6,
                "raw_url": "https://github.com/apache/tomee/raw/7cd8d33ff166fc9649f4a6df4a1a40ffd7379f42/arquillian/arquillian-common/src/main/java/org/apache/openejb/arquillian/common/TestObserver.java",
                "status": "modified",
                "changes": 7,
                "deletions": 1,
                "sha": "5bf447b7ca48c294068655514ed38407d7c1a751",
                "blob_url": "https://github.com/apache/tomee/blob/7cd8d33ff166fc9649f4a6df4a1a40ffd7379f42/arquillian/arquillian-common/src/main/java/org/apache/openejb/arquillian/common/TestObserver.java",
                "filename": "arquillian/arquillian-common/src/main/java/org/apache/openejb/arquillian/common/TestObserver.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-common/src/main/java/org/apache/openejb/arquillian/common/TestObserver.java?ref=7cd8d33ff166fc9649f4a6df4a1a40ffd7379f42"
            }
        ],
        "bug_id": "tomee_113",
        "parent": "https://github.com/apache/tomee/commit/296b5f4df2d6275c680ae8d76159759afbad4e68",
        "message": "TOMEE-1333 avoiding nasty NPE when BeforeUnDeploy even is unexpectedly sent, patch from Karal Lassak\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1620370 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/bcf66b56fec09cfc9a49f057160b853ec25acf8f",
        "file": [
            {
                "patch": "@@ -17,6 +17,9 @@\n package org.apache.tomee.jaxrs;\n \n import org.apache.catalina.LifecycleException;\n+import org.apache.catalina.LifecycleState;\n+import org.apache.catalina.core.StandardContext;\n+import org.apache.catalina.webresources.StandardRoot;\n import org.apache.openejb.AppContext;\n import org.apache.openejb.BeanContext;\n import org.apache.openejb.assembler.classic.AppInfo;\n@@ -41,12 +44,14 @@\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n+import java.io.File;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Collections;\n import java.util.Properties;\n \n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertSame;\n \n public class ReloadingLoaderTest {\n@@ -78,6 +83,22 @@ public void initContext() throws LifecycleException {\n \n         loader = new TomEEWebappClassLoader(ParentClassLoaderFinder.Helper.get());\n         loader.init();\n+        final StandardRoot resources = new StandardRoot();\n+        loader.setResources(resources);\n+        resources.setContext(new StandardContext() {\n+            @Override\n+            public String getDocBase() {\n+                final File file = new File(\"target/foo\");\n+                file.mkdirs();\n+                return file.getAbsolutePath();\n+            }\n+\n+            @Override\n+            public String getMBeanKeyProperties() {\n+                return \"foo\";\n+            }\n+        {}});\n+        resources.start();\n         loader.start();\n \n         info = new AppInfo();\n@@ -108,22 +129,39 @@ public void tomcatClassLoaderParentShouldntBeNulAfterAStopStartOtherwiseReloadIs\n                 final ClassLoader beforeLoader = SystemInstance.get().getComponent(ContainerSystem.class).getWebContext(\"test\").getClassLoader();\n                 assertSame(loader, beforeLoader);\n                 assertNotNull(beforeLoader);\n-                assertNotNull(Reflections.get(beforeLoader, \"parent\")); // getParent != parent from WebAppClassLoader\n+                assertNotNull(Reflections.get(beforeLoader, \"parent\"));\n             }\n \n             loader.internalStop();\n \n             server.undeploy(new AssemblerBeforeApplicationDestroyed(info, context));\n \n             {\n-                final ClassLoader afterLoader = SystemInstance.get().getComponent(ContainerSystem.class).getWebContext(\"test\").getClassLoader();\n+                final URLClassLoader afterLoader = URLClassLoader.class.cast(SystemInstance.get().getComponent(ContainerSystem.class).getWebContext(\"test\").getClassLoader());\n                 assertSame(loader, afterLoader);\n                 assertNotNull(afterLoader);\n-                assertNull(Reflections.get(afterLoader, \"parent\"));\n+                assertEquals(0, afterLoader.getURLs().length);\n+                assertEquals(LifecycleState.STOPPED, loader.getState());\n             }\n \n+            final StandardRoot resources = new StandardRoot();\n+            loader.setResources(resources);\n+            resources.setContext(new StandardContext() {\n+                @Override\n+                public String getDocBase() {\n+                    final File file = new File(\"target/foo\");\n+                    file.mkdirs();\n+                    return file.getAbsolutePath();\n+                }\n+\n+                @Override\n+                public String getMBeanKeyProperties() {\n+                    return \"foo\";\n+                }\n+                {}});\n+            resources.start();\n             loader.start();\n-            // TomcatWebAppBuilder ill catch start event from StandardContext and force a classloader\n+            // TomcatWebAppBuilder ill catch start event from StandardCo1ntext and force a classloader\n             Reflections.set(loader, \"parent\", ParentClassLoaderFinder.Helper.get());\n \n             server.afterApplicationCreated(new AssemblerAfterApplicationCreated(info, context, Collections.<BeanContext>emptyList()));",
                "additions": 43,
                "raw_url": "https://github.com/apache/tomee/raw/bcf66b56fec09cfc9a49f057160b853ec25acf8f/tomee/tomee-jaxrs/src/test/java/org/apache/tomee/jaxrs/ReloadingLoaderTest.java",
                "status": "modified",
                "changes": 48,
                "deletions": 5,
                "sha": "9c2774d720043c84deaf025cd003c54407e03613",
                "blob_url": "https://github.com/apache/tomee/blob/bcf66b56fec09cfc9a49f057160b853ec25acf8f/tomee/tomee-jaxrs/src/test/java/org/apache/tomee/jaxrs/ReloadingLoaderTest.java",
                "filename": "tomee/tomee-jaxrs/src/test/java/org/apache/tomee/jaxrs/ReloadingLoaderTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-jaxrs/src/test/java/org/apache/tomee/jaxrs/ReloadingLoaderTest.java?ref=bcf66b56fec09cfc9a49f057160b853ec25acf8f"
            }
        ],
        "bug_id": "tomee_114",
        "parent": "https://github.com/apache/tomee/commit/4ab0ec959d1299accf1d23eb08af9bd1e3946aae",
        "message": "avoid NPE, not sure this test makes a lot of sense anymore BTW\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1615434 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/b076f14fc3fa65209307d405a55a90f543e738a3",
        "file": [
            {
                "patch": "@@ -111,23 +111,42 @@ public Object newInstance(Class beanClass) throws OpenEJBException {\n \n         final WebBeansContext webBeansContext = getWebBeansContext();\n         final ConstructorInjectionBean<Object> beanDefinition = getConstructorInjectionBean(beanClass, webBeansContext);\n-        final CreationalContext<Object> creationalContext = webBeansContext.getBeanManagerImpl().createCreationalContext(beanDefinition);\n+        final CreationalContext<Object> creationalContext;\n+        final Object o;\n+        if (webBeansContext == null) {\n+            creationalContext = null;\n+            try {\n+                o = beanClass.newInstance();\n+            } catch (final InstantiationException e) {\n+                throw new OpenEJBException(e);\n+            } catch (final IllegalAccessException e) {\n+                throw new OpenEJBException(e);\n+            }\n+        } else {\n+            creationalContext = webBeansContext.getBeanManagerImpl().createCreationalContext(beanDefinition);\n+            o = beanDefinition.create(creationalContext);\n+        }\n \n         // Create bean instance\n-        final Object o = beanDefinition.create(creationalContext);\n         final Context unwrap = InjectionProcessor.unwrap(getInitialContext());\n         final InjectionProcessor injectionProcessor = new InjectionProcessor(o, injections, unwrap);\n \n         final Object beanInstance = injectionProcessor.createInstance();\n \n-        InjectionTargetBean<Object> bean = InjectionTargetBean.class.cast(beanDefinition);\n-        bean.getInjectionTarget().inject(beanInstance, creationalContext);\n+        if (webBeansContext != null) {\n+            InjectionTargetBean<Object> bean = InjectionTargetBean.class.cast(beanDefinition);\n+            bean.getInjectionTarget().inject(beanInstance, creationalContext);\n \n-        creatonalContexts.put(beanInstance, creationalContext);\n+            creatonalContexts.put(beanInstance, creationalContext);\n+        }\n         return beanInstance;\n     }\n \n     private ConstructorInjectionBean<Object> getConstructorInjectionBean(final Class beanClass, final WebBeansContext webBeansContext) {\n+        if (webBeansContext == null) {\n+            return null;\n+        }\n+\n         ConstructorInjectionBean<Object> beanDefinition = constructorInjectionBeanCache.get(beanClass);\n         if (beanDefinition == null) {\n             synchronized (this) {",
                "additions": 24,
                "raw_url": "https://github.com/apache/tomee/raw/b076f14fc3fa65209307d405a55a90f543e738a3/container/openejb-core/src/main/java/org/apache/openejb/core/WebContext.java",
                "status": "modified",
                "changes": 29,
                "deletions": 5,
                "sha": "a1d505c2b2b79e7ed3c27a371f8390d5e0fef7c5",
                "blob_url": "https://github.com/apache/tomee/blob/b076f14fc3fa65209307d405a55a90f543e738a3/container/openejb-core/src/main/java/org/apache/openejb/core/WebContext.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/WebContext.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/WebContext.java?ref=b076f14fc3fa65209307d405a55a90f543e738a3"
            }
        ],
        "bug_id": "tomee_115",
        "parent": "https://github.com/apache/tomee/commit/4916c2351dd0e4643ce218c190f035697f2234be",
        "message": "WebContext NPE  protection even from beanClass and not only for inject\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1483097 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/fa13213a6e8f57f401d9c6946ffce9a5b11f7781",
        "file": [
            {
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.openejb.assembler.classic;\n \n import org.apache.openejb.OpenEJBRuntimeException;\n+import org.apache.openejb.loader.SystemInstance;\n import org.apache.openejb.util.LogCategory;\n import org.apache.openejb.util.Logger;\n \n@@ -35,6 +36,8 @@\n public class ImportSql {\n     private static final Logger LOGGER = Logger.getInstance(LogCategory.OPENEJB, EntityManagerFactoryCallable.class.getName());\n \n+    public static final String OPENEJB_SQL_IMPORT = \"openejb.sql.import\";\n+\n     public static final String IMPORT_FILE_PREFIX = \"import-\";\n     public static final String IMPORT_FILE_EXTENSION = \".sql\";\n \n@@ -58,7 +61,7 @@ public ImportSql(final ClassLoader cl, final String resource, final DataSource d\n     }\n \n     public boolean hasSomethingToImport() {\n-        return !done && imports != null && imports.hasMoreElements();\n+        return !done && imports != null && imports.hasMoreElements() && SystemInstance.get().getOptions().get(OPENEJB_SQL_IMPORT, true);\n     }\n \n     public void doImport() {",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/fa13213a6e8f57f401d9c6946ffce9a5b11f7781/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ImportSql.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "bf5233099ea6242aa8f84ee5d94d4c5f877e9ce5",
                "blob_url": "https://github.com/apache/tomee/blob/fa13213a6e8f57f401d9c6946ffce9a5b11f7781/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ImportSql.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ImportSql.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ImportSql.java?ref=fa13213a6e8f57f401d9c6946ffce9a5b11f7781"
            },
            {
                "patch": "@@ -59,8 +59,12 @@ public Object invoke(final Object proxy, final Method method, final Object[] arg\n                     if (str.contains(\"?\")) {\n                         try {\n                             str = str.replaceFirst(\"\\\\?\", param.value.toString());\n-                        } catch (Exception e) {\n-                            str = str.replaceFirst(\"\\\\?\", param.value.getClass().getName());\n+                        } catch (final Exception e) {\n+                            if (param.value == null) {\n+                                str = str.replaceFirst(\"\\\\?\", \"null\");\n+                            } else {\n+                                str = str.replaceFirst(\"\\\\?\", param.value.getClass().getName());\n+                            }\n                         }\n                         lastBatch = param.batchIndex;\n                     } else {\n@@ -72,7 +76,11 @@ public Object invoke(final Object proxy, final Method method, final Object[] arg\n                         try {\n                             str += param.value.toString();\n                         } catch (Exception e) {\n-                            str += param.value.getClass().getName();\n+                            if (param.value == null) {\n+                                str += \"null\";\n+                            } else {\n+                                str += param.value.getClass().getName();\n+                            }\n                         }\n \n                         if (i == parameters.size() - 1 || parameters.get(i + 1).batchIndex != lastBatch) {",
                "additions": 11,
                "raw_url": "https://github.com/apache/tomee/raw/fa13213a6e8f57f401d9c6946ffce9a5b11f7781/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/logging/LoggingPreparedSqlStatement.java",
                "status": "modified",
                "changes": 14,
                "deletions": 3,
                "sha": "f953b63f6329e250d7f7027ec1d31a09e7b56ad5",
                "blob_url": "https://github.com/apache/tomee/blob/fa13213a6e8f57f401d9c6946ffce9a5b11f7781/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/logging/LoggingPreparedSqlStatement.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/logging/LoggingPreparedSqlStatement.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/logging/LoggingPreparedSqlStatement.java?ref=fa13213a6e8f57f401d9c6946ffce9a5b11f7781"
            }
        ],
        "bug_id": "tomee_116",
        "parent": "https://github.com/apache/tomee/commit/53b67273ac23e35e748dd31fbcabb98588ed2d0e",
        "message": "TOMEE-905 TOMEE-906 avoid NPE when logging sql statements + allowing to deactivate sql imports\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1470834 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/1a378177d6ca98d3a7f1ede471c73f748b27a7ce",
        "file": [
            {
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.openejb.maven.plugin;\n \n import java.io.File;\n+import java.util.ArrayList;\n import java.util.List;\n \n public class Synchronization {\n@@ -70,6 +71,9 @@ public void setUpdateInterval(int updateInterval) {\n     }\n \n     public List<String> getExtensions() {\n+        if (extensions == null) {\n+            extensions = new ArrayList<String>();\n+        }\n         return extensions;\n     }\n \n@@ -86,6 +90,9 @@ public void setRegex(String regex) {\n     }\n \n     public List<String> getUpdateOnlyExtenions() {\n+        if (updateOnlyExtensions == null) {\n+            updateOnlyExtensions = new ArrayList<String>();\n+        }\n         return updateOnlyExtensions;\n     }\n ",
                "additions": 7,
                "raw_url": "https://github.com/apache/tomee/raw/1a378177d6ca98d3a7f1ede471c73f748b27a7ce/maven/tomee-maven-plugin/src/main/java/org/apache/openejb/maven/plugin/Synchronization.java",
                "status": "modified",
                "changes": 7,
                "deletions": 0,
                "sha": "72dd7077bb73fecbef1b757d9d58349c5b1ddcbc",
                "blob_url": "https://github.com/apache/tomee/blob/1a378177d6ca98d3a7f1ede471c73f748b27a7ce/maven/tomee-maven-plugin/src/main/java/org/apache/openejb/maven/plugin/Synchronization.java",
                "filename": "maven/tomee-maven-plugin/src/main/java/org/apache/openejb/maven/plugin/Synchronization.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/maven/tomee-maven-plugin/src/main/java/org/apache/openejb/maven/plugin/Synchronization.java?ref=1a378177d6ca98d3a7f1ede471c73f748b27a7ce"
            },
            {
                "patch": "@@ -148,7 +148,7 @@ protected boolean startSynchronizers() {\n             }\n         }\n \n-        // serialazing synchronizers to avoid multiple updates at the same time and reload a single time the app\n+        // serializing synchronizers to avoid multiple updates at the same time and reload a single time the app\n         if (!synchronizers.isEmpty()) {\n             task = new SynchronizerRedeployer(synchronizers);\n             getLog().info(\"Starting synchronizer with an update interval of \" + interval);\n@@ -182,12 +182,17 @@ protected boolean handleLine(final String line) {\n     }\n \n     protected synchronized void reload() {\n-        String path = deployedFile.getAbsolutePath();\n-        if (path.endsWith(\".war\") || path.endsWith(\".ear\")) {\n-            path = path.substring(0, path.length() - \".war\".length());\n+        if (deployOpenEjbApplication) {\n+            String path = deployedFile.getAbsolutePath();\n+            if (path.endsWith(\".war\") || path.endsWith(\".ear\")) {\n+                path = path.substring(0, path.length() - \".war\".length());\n+            }\n+            getLog().info(\"Reloading \" + path);\n+            deployer().reload(path);\n+        } else {\n+            getLog().warn(\"Reload command needs to activate openejb internal application. \" +\n+              \"Add <deployOpenEjbApplication>true</deployOpenEjbApplication> to the plugin configuration to force it.\");\n         }\n-        getLog().info(\"Reloading \" + path);\n-        deployer().reload(path);\n     }\n \n     private class SynchronizerRedeployer extends TimerTask {",
                "additions": 11,
                "raw_url": "https://github.com/apache/tomee/raw/1a378177d6ca98d3a7f1ede471c73f748b27a7ce/maven/tomee-maven-plugin/src/main/java/org/apache/openejb/maven/plugin/UpdatableTomEEMojo.java",
                "status": "modified",
                "changes": 17,
                "deletions": 6,
                "sha": "aadda262582c23271e33aecfd883cba18a539a18",
                "blob_url": "https://github.com/apache/tomee/blob/1a378177d6ca98d3a7f1ede471c73f748b27a7ce/maven/tomee-maven-plugin/src/main/java/org/apache/openejb/maven/plugin/UpdatableTomEEMojo.java",
                "filename": "maven/tomee-maven-plugin/src/main/java/org/apache/openejb/maven/plugin/UpdatableTomEEMojo.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/maven/tomee-maven-plugin/src/main/java/org/apache/openejb/maven/plugin/UpdatableTomEEMojo.java?ref=1a378177d6ca98d3a7f1ede471c73f748b27a7ce"
            }
        ],
        "bug_id": "tomee_117",
        "parent": "https://github.com/apache/tomee/commit/190c94fc554dc3af6141d9b972c51757e9c84796",
        "message": "avoiding NPE + explicit log message when the reload will not work\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1448624 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/97377f61b9e86e00aec6cdc1ab0673e52e0c5f91",
        "file": [
            {
                "patch": "@@ -27,6 +27,7 @@\n import javax.enterprise.context.spi.Context;\n import javax.enterprise.context.spi.Contextual;\n import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.UnsatisfiedResolutionException;\n import javax.enterprise.inject.spi.AnnotatedType;\n import javax.enterprise.inject.spi.Bean;\n import javax.enterprise.inject.spi.Decorator;\n@@ -152,7 +153,7 @@ public Object getInjectableReference(InjectionPoint injectionPoint, CreationalCo\n     @Override\n     public void fireEvent(Object event, Annotation... qualifiers) {\n         super.fireEvent(event, qualifiers);\n-        getParentBm().fireEvent(event, qualifiers);\n+        // getParentBm().fireEvent(event, qualifiers); // send twice the same event for webapps with extension in lib part\n     }\n \n     @Override\n@@ -204,8 +205,15 @@ public void fireEvent(Object event, Annotation... qualifiers) {\n \n     @Override\n     public void validate(InjectionPoint injectionPoint) {\n-        super.validate(injectionPoint);\n-        // getParentBm().validate(injectionPoint); // prevent injections from webapp only\n+        try {\n+            super.validate(injectionPoint);\n+        } catch (UnsatisfiedResolutionException ure) {\n+            try {\n+                getParentBm().validate(injectionPoint); // prevent injections from webapp only if called directly\n+            } catch (UnsatisfiedResolutionException ure2) {\n+                throw ure;\n+            }\n+        }\n     }\n \n     @Override",
                "additions": 11,
                "raw_url": "https://github.com/apache/tomee/raw/97377f61b9e86e00aec6cdc1ab0673e52e0c5f91/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java",
                "status": "modified",
                "changes": 14,
                "deletions": 3,
                "sha": "903bb23f45e8dabbe16a8c1873f9686cf1873d03",
                "blob_url": "https://github.com/apache/tomee/blob/97377f61b9e86e00aec6cdc1ab0673e52e0c5f91/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java?ref=97377f61b9e86e00aec6cdc1ab0673e52e0c5f91"
            },
            {
                "patch": "@@ -251,12 +251,14 @@ public void stop(final BeanContext beanContext) throws OpenEJBException {\n     public synchronized void undeploy(final BeanContext bean) throws OpenEJBException {\n         final Data data = (Data) bean.getContainerData();\n \n-        final MBeanServer server = LocalMBeanServer.get();\n-        for (final ObjectName objectName : data.jmxNames) {\n-            try {\n-                server.unregisterMBean(objectName);\n-            } catch (Exception e) {\n-                logger.error(\"Unable to unregister MBean \" + objectName);\n+        if (data != null) {\n+            final MBeanServer server = LocalMBeanServer.get();\n+            for (final ObjectName objectName : data.jmxNames) {\n+                try {\n+                    server.unregisterMBean(objectName);\n+                } catch (Exception e) {\n+                    logger.error(\"Unable to unregister MBean \" + objectName);\n+                }\n             }\n         }\n ",
                "additions": 8,
                "raw_url": "https://github.com/apache/tomee/raw/97377f61b9e86e00aec6cdc1ab0673e52e0c5f91/container/openejb-core/src/main/java/org/apache/openejb/core/managed/ManagedContainer.java",
                "status": "modified",
                "changes": 14,
                "deletions": 6,
                "sha": "f1f469b6077305eda3079102e254a773a53c12c1",
                "blob_url": "https://github.com/apache/tomee/blob/97377f61b9e86e00aec6cdc1ab0673e52e0c5f91/container/openejb-core/src/main/java/org/apache/openejb/core/managed/ManagedContainer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/managed/ManagedContainer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/managed/ManagedContainer.java?ref=97377f61b9e86e00aec6cdc1ab0673e52e0c5f91"
            },
            {
                "patch": "@@ -713,7 +713,9 @@ public void init(final StandardContext standardContext) {\n         if (isIgnored(standardContext)) return;\n \n         // just adding a carriage return to get logs more readable\n-        logger.info(\"------------------------- \" + finalName(standardContext.getPath()));\n+        logger.info(\"------------------------- \"\n+                + standardContext.getHostname().replace(\"_\", defaultHost) + \" -> \"\n+                + finalName(standardContext.getPath()));\n \n         if (FORCE_RELOADABLE) {\n             standardContext.setReloadable(true);\n@@ -1149,15 +1151,19 @@ private void startInternal(final StandardContext standardContext) {\n             for (final WebAppInfo w : contextInfo.appInfo.webApps) {\n                 final String wId = getId(w.host, w.contextRoot);\n                 if (id.equals(wId)) {\n-                    webAppInfo = w;\n-\n-                    if (appContext == null) {\n-                        appContext = cs.getAppContext(contextInfo.appInfo.appId);\n+                    if (webAppInfo == null) {\n+                        webAppInfo = w;\n+                    } else if (w.host != null && w.host.equals(standardContext.getHostname())) {\n+                        webAppInfo = w;\n                     }\n \n                     break;\n                 }\n             }\n+\n+            if (appContext == null) {\n+                appContext = cs.getAppContext(contextInfo.appInfo.appId);\n+            }\n         }\n \n         if (webAppInfo != null) {",
                "additions": 11,
                "raw_url": "https://github.com/apache/tomee/raw/97377f61b9e86e00aec6cdc1ab0673e52e0c5f91/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java",
                "status": "modified",
                "changes": 16,
                "deletions": 5,
                "sha": "6128100e1e3ed429146376f14ac5bab7c14ace48",
                "blob_url": "https://github.com/apache/tomee/blob/97377f61b9e86e00aec6cdc1ab0673e52e0c5f91/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java",
                "filename": "tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java?ref=97377f61b9e86e00aec6cdc1ab0673e52e0c5f91"
            }
        ],
        "bug_id": "tomee_118",
        "parent": "https://github.com/apache/tomee/commit/4235edadcb85a695da032be562057086305c94b1",
        "message": "logging host when deploying an app (and not only the context) + sending only once cdi events in ear + avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1435256 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/32c57f332fc744254b5a6315f0d1bd7bc342893b",
        "file": [
            {
                "patch": "@@ -42,7 +42,6 @@\n import org.apache.openejb.assembler.classic.event.AssemblerDestroyed;\n import org.apache.openejb.assembler.monitoring.JMXContainer;\n import org.apache.openejb.async.AsynchronousPool;\n-import org.apache.openejb.cdi.AsmFactory;\n import org.apache.openejb.cdi.CdiAppContextsService;\n import org.apache.openejb.cdi.CdiBuilder;\n import org.apache.openejb.cdi.CdiResourceInjectionService;\n@@ -153,8 +152,6 @@\n import java.lang.reflect.Method;\n import java.net.MalformedURLException;\n import java.net.URL;\n-import java.sql.Connection;\n-import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -1879,11 +1876,12 @@ public void createConnectionManager(ConnectionManagerInfo serviceInfo) throws Op\n \n     public void createSecurityService(SecurityServiceInfo serviceInfo) throws OpenEJBException {\n \n-        ObjectRecipe serviceRecipe = createRecipe(serviceInfo);\n-\n-        Object service = serviceRecipe.create();\n-\n-        logUnusedProperties(serviceRecipe, serviceInfo);\n+        Object service = SystemInstance.get().getComponent(SecurityService.class);\n+        if (service == null) {\n+            ObjectRecipe serviceRecipe = createRecipe(serviceInfo);\n+            service = serviceRecipe.create();\n+            logUnusedProperties(serviceRecipe, serviceInfo);\n+        }\n \n         Class interfce = serviceInterfaces.get(serviceInfo.service);\n         checkImplementation(interfce, service.getClass(), serviceInfo.service, serviceInfo.id);",
                "additions": 6,
                "raw_url": "https://github.com/apache/tomee/raw/32c57f332fc744254b5a6315f0d1bd7bc342893b/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "status": "modified",
                "changes": 14,
                "deletions": 8,
                "sha": "da2f1f73dd585d8909e0d0a1218298d76da962b8",
                "blob_url": "https://github.com/apache/tomee/blob/32c57f332fc744254b5a6315f0d1bd7bc342893b/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java?ref=32c57f332fc744254b5a6315f0d1bd7bc342893b"
            },
            {
                "patch": "@@ -48,7 +48,7 @@\n \n     @Override\n     public void start(final BundleContext context) throws Exception {\n-        LOGGER.info(\"Starting OpenEJB for bundle #{0}\", context.getBundle().getBundleId());\n+        LOGGER.info(\"Starting OpenEJB for bundle #{}\", context.getBundle().getBundleId());\n \n         Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n \n@@ -146,7 +146,7 @@ public void stop(final BundleContext context) throws Exception {\n \n     private static void invoke(final Object serviceManager, final String name) throws OpenEJBException, InvocationTargetException, IllegalAccessException {\n         if (serviceManager == null) {\n-            LOGGER.warn(\"can't invoke method {0} since the service manager is null\", name);\n+            LOGGER.warn(\"can't invoke method {} since the service manager is null\", name);\n             return;\n         }\n ",
                "additions": 2,
                "raw_url": "https://github.com/apache/tomee/raw/32c57f332fc744254b5a6315f0d1bd7bc342893b/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Activator.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "1ceeefb330bd045de01cbedfc6bf6099cefa4fc0",
                "blob_url": "https://github.com/apache/tomee/blob/32c57f332fc744254b5a6315f0d1bd7bc342893b/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Activator.java",
                "filename": "osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Activator.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Activator.java?ref=32c57f332fc744254b5a6315f0d1bd7bc342893b"
            },
            {
                "patch": "@@ -92,16 +92,21 @@ public void bundleChanged(final BundleEvent event) {\n                 } catch (NullPointerException npe) {\n                     // can happen when shutting down an OSGi server\n                     // because of all stop events\n-                    LOGGER.warn(\"can't undeploy bundle #{0}\", event.getBundle().getBundleId());\n+                    LOGGER.warn(\"can't undeploy bundle #{}\", event.getBundle().getBundleId());\n                 }\n                 deploy(event.getBundle());\n                 break;\n         }\n     }\n \n     private void deploy(final Bundle bundle) {\n+        if (bundle.getBundleContext() == null) {\n+            return;\n+        }\n+\n         final ClassLoader oldCl = Thread.currentThread().getContextClassLoader();\n         final ClassLoader osgiCl = new OSGIClassLoader(bundle, OpenEJBBundleContextHolder.get().getBundle());\n+\n         Thread.currentThread().setContextClassLoader(osgiCl);\n \n         try {\n@@ -118,11 +123,11 @@ private void deploy(final Bundle bundle) {\n                     }\n \n                     if (bundleDump == null || !bundleDump.exists()) {\n-                        LOGGER.warn(\"can't find bundle {0}\", bundle.getBundleId());\n+                        LOGGER.warn(\"can't find bundle {}\", bundle.getBundleId());\n                         return;\n                     }\n \n-                    LOGGER.info(\"looking bundle {0} in {1}\", bundle.getBundleId(), bundleDump);\n+                    LOGGER.info(\"looking bundle {} in {}\", bundle.getBundleId(), bundleDump);\n                     final AppModule appModule = new OSGiDeploymentLoader(bundle).load(bundleDump);\n                     LOGGER.info(\"deploying bundle #\" + bundle.getBundleId() + \" as an EJBModule\");\n \n@@ -170,6 +175,31 @@ private static File findFelixJar(final BundleContext bundleContext) {\n         int max = 0;\n         File out;\n         File f = null;\n+\n+        final File[] files = root.listFiles();\n+        if (files == null) {\n+            return null;\n+        }\n+\n+        for (File current : files) {\n+            if (current.getName().startsWith(\"version\")) {\n+                final String v = current.getName().substring(\"version\".length());\n+                if (!v.contains(\".\")) {\n+                    continue;\n+                }\n+\n+                final int idx = v.indexOf('.');\n+                final int cMin = Integer.parseInt(v.substring(0, idx));\n+                final int cMax = Integer.parseInt(v.substring(idx + 1, v.length()));\n+\n+                if (cMax > max || (cMax == max && cMin > min)) {\n+                    f = current;\n+                    min = cMin;\n+                    max = cMax;\n+                }\n+            }\n+        }\n+\n         do {\n             do {\n                 out = f;\n@@ -202,15 +232,15 @@ private void undeploy(final Bundle bundle) {\n                     assembler.destroyApplication(paths.remove(bundle));\n                 }\n             } catch (IllegalStateException ise) {\n-                LOGGER.error(\"Can't undeploy bundle #{0}\", bundle.getBundleId());\n+                LOGGER.error(\"Can't undeploy bundle #{}\", bundle.getBundleId());\n             } catch (UndeployException e) {\n-                LOGGER.error(\"Can't undeploy bundle #{0}\", bundle.getBundleId(), e);\n+                LOGGER.error(\"Can't undeploy bundle #{}\", bundle.getBundleId(), e);\n             } catch (NoSuchApplicationException e) {\n-                LOGGER.error(\"Can't undeploy non existing bundle #{0}\", bundle.getBundleId(), e);\n+                LOGGER.error(\"Can't undeploy non existing bundle #{}\", bundle.getBundleId(), e);\n             }\n         }\n \n-        LOGGER.info(\"[Deployer] Bundle {0} has been stopped\", bundle.getSymbolicName());\n+        LOGGER.info(\"[Deployer] Bundle {} has been stopped\", bundle.getSymbolicName());\n     }\n \n     /**\n@@ -229,19 +259,19 @@ private void registerService(final Bundle bundle, final AppContext appContext) {\n \n             try {\n                 if (beanContext.getBusinessRemoteInterface() != null) {\n-                    LOGGER.info(\"registering remote bean: {0}\", beanContext.getEjbName());\n+                    LOGGER.info(\"registering remote bean: {}\", beanContext.getEjbName());\n                     registerService(beanContext, context, beanContext.getBusinessRemoteInterfaces());\n                 }\n                 if (beanContext.getBusinessLocalInterface() != null) {\n-                    LOGGER.info(\"registering local bean: {0}\", beanContext.getEjbName());\n+                    LOGGER.info(\"registering local bean: {}\", beanContext.getEjbName());\n                     registerService(beanContext, context, beanContext.getBusinessLocalInterfaces());\n                 }\n                 if (beanContext.isLocalbean()) {\n-                    LOGGER.info(\"registering local view bean: {0}\", beanContext.getEjbName());\n+                    LOGGER.info(\"registering local view bean: {}\", beanContext.getEjbName());\n                     registerService(beanContext, context, Arrays.asList(beanContext.getBusinessLocalBeanInterface()));\n                 }\n             } catch (Exception e) {\n-                LOGGER.error(\"[Deployer] can't register: {0}\", beanContext.getEjbName());\n+                LOGGER.error(\"[Deployer] can't register: {}\", beanContext.getEjbName());\n             }\n         }\n     }\n@@ -257,9 +287,9 @@ private void registerService(final BeanContext beanContext, final BundleContext\n             try {\n                 final Object service = ProxyEJB.simpleProxy(beanContext, itfs);\n                 registrations.get(context.getBundle()).add(context.registerService(str(itfs), service, new Properties()));\n-                LOGGER.info(\"EJB registered: {0} for interfaces {1}\", beanContext.getEjbName(), interfaces);\n+                LOGGER.info(\"EJB registered: {} for interfaces {}\", beanContext.getEjbName(), interfaces);\n             } catch (IllegalArgumentException iae) {\n-                LOGGER.error(\"can't register: {0} for interfaces {1}\", beanContext.getEjbName(), interfaces);\n+                LOGGER.error(\"can't register: {} for interfaces {}\", beanContext.getEjbName(), interfaces);\n             }\n         }\n     }",
                "additions": 43,
                "raw_url": "https://github.com/apache/tomee/raw/32c57f332fc744254b5a6315f0d1bd7bc342893b/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "status": "modified",
                "changes": 56,
                "deletions": 13,
                "sha": "da64c7db7a795eb3bf69e72739548ddc636a8dd4",
                "blob_url": "https://github.com/apache/tomee/blob/32c57f332fc744254b5a6315f0d1bd7bc342893b/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "filename": "osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java?ref=32c57f332fc744254b5a6315f0d1bd7bc342893b"
            },
            {
                "patch": "@@ -49,7 +49,7 @@ public void afterBeanDiscovery(@Observes final AfterBeanDiscovery abd) {\n                 for (ServiceReference service  : services) {\n                     final Class<?> clazz = serviceClass(service);\n                     abd.addBean(new OSGiServiceBean<Object>(service));\n-                    LOGGER.debug(\"added service {0} as a CDI Application scoped bean\", clazz.getName());\n+                    LOGGER.debug(\"added service {} as a CDI Application scoped bean\", clazz.getName());\n                 }\n             }\n         }",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/32c57f332fc744254b5a6315f0d1bd7bc342893b/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/RegisterOSGIServicesExtension.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "7b16fa20298909ca1132d13c9b8980bbf93823d3",
                "blob_url": "https://github.com/apache/tomee/blob/32c57f332fc744254b5a6315f0d1bd7bc342893b/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/RegisterOSGIServicesExtension.java",
                "filename": "osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/RegisterOSGIServicesExtension.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/RegisterOSGIServicesExtension.java?ref=32c57f332fc744254b5a6315f0d1bd7bc342893b"
            }
        ],
        "bug_id": "tomee_119",
        "parent": "https://github.com/apache/tomee/commit/8f010a180f7c2a3960b5bb5ad7924a39c5c14032",
        "message": "OPENEJB-1912 OPENEJB-1913 OPENEJB-1914 osgi rework (logs, NPE in deployer, bundle file search)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1395157 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/895e65240ba6a7d6766a71fdf84fa76868d7cf7b",
        "file": [
            {
                "patch": "@@ -41,14 +41,17 @@ public synchronized void addPort(String serviceId, QName serviceQName, String po\n \n         // create portAddress\n         PortAddress portAddress = portsById.get(portId);\n-        if (portAddress != null) {\n+        if (portAddress != null) { // shouldn't happen but better to avoid NPE here\n             throw new OpenEJBException(\"A webservice port with qname \" + portAddress.getPortQName() + \" is already registered to the portId \" + portId);\n         }\n         portAddress = new PortAddress(portId, serviceQName, portQName, address, portInterface);\n         portsById.put(portId, portAddress);\n \n         // portsByInterface\n-        Map<String, PortAddress> ports = portsByInterface.get(portInterface);\n+        Map<String, PortAddress> ports = null;\n+        if (portInterface != null) { // localbean have no interface\n+            ports = portsByInterface.get(portInterface);\n+        }\n         if (ports == null) {\n             ports = new TreeMap<String, PortAddress>();\n             portsByInterface.put(portInterface, ports);",
                "additions": 5,
                "raw_url": "https://github.com/apache/tomee/raw/895e65240ba6a7d6766a71fdf84fa76868d7cf7b/container/openejb-core/src/main/java/org/apache/openejb/core/webservices/PortAddressRegistryImpl.java",
                "status": "modified",
                "changes": 7,
                "deletions": 2,
                "sha": "64793d279c62cea29961ad95fdbf1846ce889bce",
                "blob_url": "https://github.com/apache/tomee/blob/895e65240ba6a7d6766a71fdf84fa76868d7cf7b/container/openejb-core/src/main/java/org/apache/openejb/core/webservices/PortAddressRegistryImpl.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/webservices/PortAddressRegistryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/webservices/PortAddressRegistryImpl.java?ref=895e65240ba6a7d6766a71fdf84fa76868d7cf7b"
            }
        ],
        "bug_id": "tomee_120",
        "parent": "https://github.com/apache/tomee/commit/cab5c7fa262cd965580ae73b1592959d265b3360",
        "message": "TOMEE-383 avoiding NPE when a pojo ws is deployed without interface\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1374804 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/a46b8296de0a856a328ab1535150885dc6050fb6",
        "file": [
            {
                "patch": "@@ -81,6 +81,9 @@ public static ValidatorFactory buildFactory(ValidationInfo config, ClassLoader c\n                 factory = Validation.buildDefaultValidatorFactory();\n             } else {\n                 Configuration<?> configuration = getConfig(config);\n+                if (configuration == null) {\n+                    configuration = getConfig(config);\n+                }\n                 try {\n                     factory = configuration.buildValidatorFactory();\n                 } catch (ValidationException ve) {",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/a46b8296de0a856a328ab1535150885dc6050fb6/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "e249e0b46712d70c0a4fbe6e6ad978b680405bae",
                "blob_url": "https://github.com/apache/tomee/blob/a46b8296de0a856a328ab1535150885dc6050fb6/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java?ref=a46b8296de0a856a328ab1535150885dc6050fb6"
            },
            {
                "patch": "@@ -84,6 +84,7 @@\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import java.util.jar.Manifest;\n+import java.util.zip.ZipEntry;\n \n import static org.apache.openejb.config.NewLoaderLogic.applyBuiltinExcludes;\n import static org.apache.openejb.config.TldScanner.scanForTagLibs;\n@@ -1538,6 +1539,19 @@ public boolean accept(final String annotationName) {\n \n             if (classFinder.find(filter)) {\n                 cls = EjbModule.class;\n+                // if it is a war just throw an error\n+                try {\n+                    final File ar = URLs.toFile(urls);\n+                    if (!ar.isDirectory() && !ar.getName().endsWith(\"ar\")) { // guess no archive extension, check it is not a hidden war\n+                        final JarFile war = new JarFile(ar);\n+                        final ZipEntry entry = war.getEntry(\"WEB-INF/\");\n+                        if (entry != null) {\n+                            logger.warning(\"you deployed \" + urls.toExternalForm() + \", it seems it is a war with no extension, please rename it\");\n+                        }\n+                    }\n+                } catch (Exception ignored) {\n+                    // no-op\n+                }\n             }\n \n             if (otherTypes.size() > 0) {",
                "additions": 14,
                "raw_url": "https://github.com/apache/tomee/raw/a46b8296de0a856a328ab1535150885dc6050fb6/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "status": "modified",
                "changes": 14,
                "deletions": 0,
                "sha": "74363546a66edd30ec357af0db60dd376cb554b2",
                "blob_url": "https://github.com/apache/tomee/blob/a46b8296de0a856a328ab1535150885dc6050fb6/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=a46b8296de0a856a328ab1535150885dc6050fb6"
            }
        ],
        "bug_id": "tomee_121",
        "parent": "https://github.com/apache/tomee/commit/ecce944814fd2dc166bb4ed58d1b1ad9c3ba82da",
        "message": "trying to avoid NPE (appears on builbot) + logging a warning if a a war is deployed without extension\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1373184 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/7bbf58721e83ce5d3c0160f5b2468bebb6e2cd5a",
        "file": [
            {
                "patch": "@@ -372,7 +372,10 @@ private void deployManagedBeans(Set<Class<?>> beanClasses, List<BeanContext> ejb\n         final Map<Class<?>, AnnotatedType<?>> annotatedTypes = new LinkedHashMap<Class<?>, AnnotatedType<?>>();\n         for (Class<?> implClass : managedBeans) { // create all annotated types first to be sure extensions can use it during the fire\n             //Define annotation type\n-            annotatedTypes.put(implClass, webBeansContext.getAnnotatedElementFactory().newAnnotatedType(implClass));\n+            final AnnotatedType<?> at = webBeansContext.getAnnotatedElementFactory().newAnnotatedType(implClass);\n+            if (at != null) {\n+                annotatedTypes.put(implClass, at);\n+            }\n         }\n         for (Map.Entry<Class<?>, AnnotatedType<?>> implClass : annotatedTypes.entrySet()) {\n             //Fires ProcessAnnotatedType",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/7bbf58721e83ce5d3c0160f5b2468bebb6e2cd5a/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBLifecycle.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "da26f3bd38d08e7ae04761f7eaa9d71463a87980",
                "blob_url": "https://github.com/apache/tomee/blob/7bbf58721e83ce5d3c0160f5b2468bebb6e2cd5a/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBLifecycle.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBLifecycle.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBLifecycle.java?ref=7bbf58721e83ce5d3c0160f5b2468bebb6e2cd5a"
            }
        ],
        "bug_id": "tomee_122",
        "parent": "https://github.com/apache/tomee/commit/17473860f8096944340ea1d2bb11f74acfe6610b",
        "message": "TOMEE-278 just a NPE check which can happen with badly package apps\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1360457 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/a35bb638e5bb6c645e26df0cf88d08f230ae7766",
        "file": [
            {
                "patch": "@@ -70,12 +70,14 @@ public void lifecycleEvent(LifecycleEvent event) {\n             if (webappDir == null && event.getSource() instanceof StandardServer) {\n                 final StandardServer server = (StandardServer) event.getSource();\n                 webappDir = tryToFindAndExtractWar(server);\n-                final File exploded = extractDirectory(webappDir);\n-                if (webappDir != null) {\n-                    extract(webappDir, exploded);\n+                if (webappDir != null) { // we are using webapp startup\n+                    final File exploded = extractDirectory(webappDir);\n+                    if (webappDir != null) {\n+                        extract(webappDir, exploded);\n+                    }\n+                    webappDir = exploded;\n+                    TomcatHelper.setServer(server);\n                 }\n-                webappDir = exploded;\n-                TomcatHelper.setServer(server);\n             }\n             if (webappDir != null) {\n                 final Properties properties = new Properties();\n@@ -93,7 +95,7 @@ public void lifecycleEvent(LifecycleEvent event) {\n         }\n     }\n \n-    private File extractDirectory(final File webappDir) {\n+    private static File extractDirectory(final File webappDir) {\n         File exploded = new File(webappDir.getAbsolutePath().replace(\".war\", \"\"));\n         int i = 0;\n         while (exploded.exists()) {",
                "additions": 8,
                "raw_url": "https://github.com/apache/tomee/raw/a35bb638e5bb6c645e26df0cf88d08f230ae7766/tomee/tomee-loader/src/main/java/org/apache/tomee/loader/OpenEJBListener.java",
                "status": "modified",
                "changes": 14,
                "deletions": 6,
                "sha": "a913ffbba081e5e1274792f751547d97e6bae872",
                "blob_url": "https://github.com/apache/tomee/blob/a35bb638e5bb6c645e26df0cf88d08f230ae7766/tomee/tomee-loader/src/main/java/org/apache/tomee/loader/OpenEJBListener.java",
                "filename": "tomee/tomee-loader/src/main/java/org/apache/tomee/loader/OpenEJBListener.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-loader/src/main/java/org/apache/tomee/loader/OpenEJBListener.java?ref=a35bb638e5bb6c645e26df0cf88d08f230ae7766"
            }
        ],
        "bug_id": "tomee_123",
        "parent": "https://github.com/apache/tomee/commit/bed4167a5e64f48ac9a1082394ed004ecf0314e6",
        "message": "fixing NPE when we don't find the webapp from the listener\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1291835 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/16260881e94fd4cedcdf2d2fd98e93f08544c62d",
        "file": [
            {
                "patch": "@@ -115,7 +115,7 @@ private void deploy(Bundle bundle) {\n                         bundleDump = findFelixJar(bundle.getBundleContext());\n                     }\n \n-                    if (!bundleDump.exists()) {\n+                    if (bundleDump == null || !bundleDump.exists()) {\n                         LOGGER.warn(\"can't find bundle {}\", bundle.getBundleId());\n                         return;\n                     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/16260881e94fd4cedcdf2d2fd98e93f08544c62d/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "65823bd42179ab56de85dbb3e5eb07a33bf567a6",
                "blob_url": "https://github.com/apache/tomee/blob/16260881e94fd4cedcdf2d2fd98e93f08544c62d/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "filename": "osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java?ref=16260881e94fd4cedcdf2d2fd98e93f08544c62d"
            }
        ],
        "bug_id": "tomee_124",
        "parent": "https://github.com/apache/tomee/commit/1ad9c51d460953f978564c133db06d73db5f1924",
        "message": "avoiding NPE when bundle was not found\nOPENEJB-1735: OSGi Support on Apache Karaf\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1227092 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/2fd2c838eede85ad99e6bd86c234f6024be39fe0",
        "file": [
            {
                "patch": "@@ -79,7 +79,13 @@ public void bundleChanged(BundleEvent event) {\n                 undeploy(event.getBundle());\n                 break;\n             case BundleEvent.UPDATED:\n-                undeploy(event.getBundle());\n+                try {\n+                    undeploy(event.getBundle());\n+                } catch (NullPointerException npe) {\n+                    // can happen when shutting down an OSGi server\n+                    // because of all stop events\n+                    LOGGER.warn(\"can't undeploy bundle #{}\", event.getBundle().getBundleId());\n+                }\n                 deploy(event.getBundle());\n                 break;\n         }\n@@ -168,7 +174,10 @@ private void undeploy(Bundle bundle) {\n \n         if (paths.containsKey(bundle)) {\n             try {\n-                SystemInstance.get().getComponent(Assembler.class).destroyApplication(paths.remove(bundle));\n+                Assembler assembler = SystemInstance.get().getComponent(Assembler.class);\n+                if (assembler != null) { // openejb stopped before bundles when shuttind down the OSGi container\n+                    assembler.destroyApplication(paths.remove(bundle));\n+                }\n             } catch (IllegalStateException ise) {\n                 LOGGER.error(\"Can't undeploy bundle #{}\", bundle.getBundleId());\n             } catch (UndeployException e) {",
                "additions": 11,
                "raw_url": "https://github.com/apache/tomee/raw/2fd2c838eede85ad99e6bd86c234f6024be39fe0/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "status": "modified",
                "changes": 13,
                "deletions": 2,
                "sha": "c530d68fc26a22d591efb44f8422bd2111185ff8",
                "blob_url": "https://github.com/apache/tomee/blob/2fd2c838eede85ad99e6bd86c234f6024be39fe0/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "filename": "container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java?ref=2fd2c838eede85ad99e6bd86c234f6024be39fe0"
            }
        ],
        "bug_id": "tomee_125",
        "parent": "https://github.com/apache/tomee/commit/f9adec596834ae8873a4bfcaf57024288ef571d4",
        "message": "simply logging NPE when bundleevent.updated is sent and the OSGi container is shutting down\nOPENEJB-1735: OSGi Support on Apache Karaf\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1222283 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/829ee9a0b3d88978d9aa96129e3c462a3451cc8a",
        "file": [
            {
                "patch": "@@ -16,11 +16,6 @@\n  */\n package org.apache.openejb.core.osgi.impl;\n \n-import java.io.File;\n-import java.net.URL;\n-import java.util.Enumeration;\n-import java.util.Properties;\n-\n import org.apache.openejb.assembler.classic.AppInfo;\n import org.apache.openejb.assembler.classic.Assembler;\n import org.apache.openejb.assembler.classic.EjbJarInfo;\n@@ -34,6 +29,11 @@\n import org.osgi.framework.BundleEvent;\n import org.osgi.framework.BundleListener;\n \n+import java.io.File;\n+import java.net.URL;\n+import java.util.Enumeration;\n+import java.util.Properties;\n+\n /**\n  * @version $Rev$ $Date$\n  */\n@@ -54,9 +54,9 @@ private void deploy(Bundle bundle) {\n         System.out.println(String.format(\"[Deployer] Bundle %s has been started\", bundle.getSymbolicName()));\n \n         System.out.println(String.format(\"[Deployer] Checking whether it's an EJB module\"));\n-        Enumeration<?> e = bundle.findEntries(\"META-INF\", \"ejb-jar.xml\", false);\n-        if (e.hasMoreElements()) {\n-            URL ejbJarUrl = (URL) e.nextElement();\n+        Enumeration<URL> e = bundle.findEntries(\"META-INF\", \"ejb-jar.xml\", false);\n+        if (e != null && e.hasMoreElements()) {\n+            URL ejbJarUrl = e.nextElement();\n \n             System.out.println(\"[Deployer] It's an EJB module: \" + ejbJarUrl);\n \n@@ -73,7 +73,7 @@ private void deploy(Bundle bundle) {\n                     ConfigurationFactory configurationFactory = new ConfigurationFactory();\n                     AppInfo appInfo = configurationFactory.configureApplication(appModule);\n \n-                    Assembler assembler = (Assembler) SystemInstance.get().getComponent(Assembler.class);\n+                    Assembler assembler = SystemInstance.get().getComponent(Assembler.class);\n                     System.out.println(assembler);\n                     System.out.println(appInfo);\n                     assembler.createApplication(appInfo);\n@@ -115,7 +115,7 @@ private void registerService(Bundle bundle, AppInfo appInfo) {\n         for (EjbJarInfo ejbJarInfo : appInfo.ejbJars) {\n             for (EnterpriseBeanInfo ejbInfo : ejbJarInfo.enterpriseBeans) {\n                 try {\n-                    context.registerService(ejbInfo.businessRemote.toArray(new String[0]), bundle.loadClass(\n+                    context.registerService(ejbInfo.businessRemote.toArray(new String[ejbInfo.businessRemote.size()]), bundle.loadClass(\n                             ejbInfo.ejbClass).newInstance(), new Properties());\n                     System.out.println(String.format(\n                             \"[Deployer] Service object %s registered under the class names: %s\", ejbInfo.ejbClass,",
                "additions": 10,
                "raw_url": "https://github.com/apache/tomee/raw/829ee9a0b3d88978d9aa96129e3c462a3451cc8a/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "status": "modified",
                "changes": 20,
                "deletions": 10,
                "sha": "a284fba7dcc75ba37d1282d0023a8ba5751b5b87",
                "blob_url": "https://github.com/apache/tomee/blob/829ee9a0b3d88978d9aa96129e3c462a3451cc8a/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "filename": "container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java?ref=829ee9a0b3d88978d9aa96129e3c462a3451cc8a"
            }
        ],
        "bug_id": "tomee_126",
        "parent": "https://github.com/apache/tomee/commit/6a85050197ba11b4e5a4c9b916035202b683866a",
        "message": "osgi bundle.findEntries can return null, avoid the NPE which can happen\nOPENEJB-1735: OSGi Support on Apache Karaf\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1205946 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/2e0746ca17097492332872d0fdcc405f38f65981",
        "file": [
            {
                "patch": "@@ -173,7 +173,7 @@ public BeanContext build() throws OpenEJBException {\n             StatefulBeanInfo statefulBeanInfo = (StatefulBeanInfo) bean;\n \n             for (InitMethodInfo init : statefulBeanInfo.initMethods) {\n-                Method beanMethod = toMethod(ejbClass, init.beanMethod);\n+                Method beanMethod = MethodInfoUtil.toMethod(ejbClass, init.beanMethod);\n                 List<Method> methods = new ArrayList<Method>();\n \n                 if (home != null) methods.addAll(Arrays.asList(home.getMethods()));\n@@ -191,7 +191,7 @@ public BeanContext build() throws OpenEJBException {\n             }\n \n             for (RemoveMethodInfo removeMethod : statefulBeanInfo.removeMethods) {\n-                Method method = toMethod(ejbClass, removeMethod.beanMethod);\n+                Method method = MethodInfoUtil.toMethod(ejbClass, removeMethod.beanMethod);\n                 deployment.getRemoveMethods().add(method);\n                 deployment.setRetainIfExeption(method, removeMethod.retainIfException);\n             }\n@@ -276,7 +276,7 @@ public BeanContext build() throws OpenEJBException {\n         //we could directly check the matching bean method.\n         if (ejbType == BeanType.STATELESS || ejbType == BeanType.SINGLETON || ejbType == BeanType.STATEFUL) {\n             for (NamedMethodInfo methodInfo : bean.asynchronous) {\n-                Method method = toMethod(ejbClass, methodInfo);\n+                Method method = MethodInfoUtil.toMethod(ejbClass, methodInfo);\n                 deployment.getMethodContext(deployment.getMatchingBeanMethod(method)).setAsynchronous(true);\n             }\n             for (String className : bean.asynchronousClasses) {\n@@ -349,9 +349,9 @@ private Method getTimeout(Class ejbClass, NamedMethodInfo info) {\n         try {\n             if (TimedObject.class.isAssignableFrom(ejbClass)) {\n                 timeout = ejbClass.getMethod(\"ejbTimeout\", Timer.class);\n-            } else if (info.methodParams != null) {\n+            } else {\n                 try {\n-                    timeout = toMethod(ejbClass, info);\n+                    timeout = MethodInfoUtil.toMethod(ejbClass, info);\n                 } catch (IllegalStateException e) {\n                     //Spec 18.2.5.3 [102] For the compatibility of timeout method signature, if method-params is  not set, it is also required to search the method signaure below :\n                     //void <METHOD> (Timer timer)\n@@ -360,13 +360,13 @@ private Method getTimeout(Class ejbClass, NamedMethodInfo info) {\n                     // not get 'Callback method does not exist' runtime exceptions and instead\n                     // get a validation failure.  Then we can explicitly add the (Timer) param\n                     // if the fallback method does exist.\n-                    if (info.methodParams.size() == 0) {\n+                    if (info.methodParams == null) {\n                         NamedMethodInfo candidateInfo = new NamedMethodInfo();\n                         candidateInfo.className = info.className;\n                         candidateInfo.id = info.id;\n                         candidateInfo.methodName = info.methodName;\n                         candidateInfo.methodParams = Arrays.asList(Timer.class.getName());\n-                        timeout = toMethod(ejbClass, candidateInfo);\n+                        timeout = MethodInfoUtil.toMethod(ejbClass, candidateInfo);\n                     }\n                 }\n             }\n@@ -377,36 +377,6 @@ private Method getTimeout(Class ejbClass, NamedMethodInfo info) {\n         return timeout;\n     }\n \n-    private Method toMethod(Class clazz, NamedMethodInfo info) {\n-        List<Class> parameterTypes = new ArrayList<Class>();\n-\n-        if (info.methodParams != null){\n-            for (String paramType : info.methodParams) {\n-                try {\n-                    parameterTypes.add(Classes.forName(paramType, clazz.getClassLoader()));\n-                } catch (ClassNotFoundException cnfe) {\n-                    throw new IllegalStateException(\"Parameter class could not be loaded for type \" + paramType, cnfe);\n-                }\n-            }\n-        }\n-\n-        Class[] parameters = parameterTypes.toArray(new Class[parameterTypes.size()]);\n-\n-        IllegalStateException noSuchMethod = null;\n-        while (clazz != null) {\n-            try {\n-                return clazz.getDeclaredMethod(info.methodName, parameters);\n-            } catch (NoSuchMethodException e) {\n-                if (noSuchMethod == null) {\n-                    noSuchMethod = new IllegalStateException(\"Callback method does not exist: \" + clazz.getName() + \".\" + info.methodName, e);\n-                }\n-                clazz = clazz.getSuperclass();\n-            }\n-        }\n-\n-        throw noSuchMethod;\n-    }\n-\n \n     private Class loadClass(String className, String messageCode) throws OpenEJBException {\n         Class clazz = load(className, messageCode);",
                "additions": 7,
                "raw_url": "https://github.com/apache/tomee/raw/2e0746ca17097492332872d0fdcc405f38f65981/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/EnterpriseBeanBuilder.java",
                "status": "modified",
                "changes": 44,
                "deletions": 37,
                "sha": "c1e46766815858aba1bbe37d98e68fa5ae0ddd6f",
                "blob_url": "https://github.com/apache/tomee/blob/2e0746ca17097492332872d0fdcc405f38f65981/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/EnterpriseBeanBuilder.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/EnterpriseBeanBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/EnterpriseBeanBuilder.java?ref=2e0746ca17097492332872d0fdcc405f38f65981"
            },
            {
                "patch": "@@ -17,13 +17,17 @@\n package org.apache.openejb.assembler.classic;\n \n import org.apache.openejb.BeanContext;\n+import org.apache.openejb.util.Classes;\n import org.apache.openejb.util.Join;\n+import org.apache.openejb.util.SetAccessible;\n \n import javax.ejb.EJBLocalObject;\n import javax.ejb.EJBObject;\n import javax.ejb.EJBHome;\n import javax.ejb.EJBLocalHome;\n+\n import static java.util.Arrays.asList;\n+\n import java.util.Comparator;\n import java.util.List;\n import java.util.ArrayList;\n@@ -37,6 +41,51 @@\n  * @version $Rev$ $Date$\n  */\n public class MethodInfoUtil {\n+    \n+    \n+    /**\n+     * Finds the nearest java.lang.reflect.Method with the given NamedMethodInfo\n+     * Callbacks can be private so class.getMethod() cannot be used.  Searching\n+     * starts by looking in the specified class, if the method is not found searching continues with\n+     * the immediate parent and continues recurssively until the method is found or java.lang.Object\n+     * is reached.  If the method is not found a IllegalStateException is thrown.\n+     *\n+     * @param clazz\n+     * @param methodName\n+     * @param parameterTypes\n+     * @return\n+     * @throws IllegalStateException if the method is not found in this class or any of its parent classes\n+     */\n+    public static Method toMethod(Class clazz, NamedMethodInfo info) {\n+        List<Class> parameterTypes = new ArrayList<Class>();\n+\n+        if (info.methodParams != null){\n+            for (String paramType : info.methodParams) {\n+                try {\n+                    parameterTypes.add(Classes.forName(paramType, clazz.getClassLoader()));\n+                } catch (ClassNotFoundException cnfe) {\n+                    throw new IllegalStateException(\"Parameter class could not be loaded for type \" + paramType, cnfe);\n+                }\n+            }\n+        }\n+\n+        Class[] parameters = parameterTypes.toArray(new Class[parameterTypes.size()]);\n+\n+        IllegalStateException noSuchMethod = null;\n+        while (clazz != null) {\n+            try {\n+                Method method = clazz.getDeclaredMethod(info.methodName, parameters);\n+                return SetAccessible.on(method);\n+            } catch (NoSuchMethodException e) {\n+                if (noSuchMethod == null) {\n+                    noSuchMethod = new IllegalStateException(\"Callback method does not exist: \" + clazz.getName() + \".\" + info.methodName, e);\n+                }\n+                clazz = clazz.getSuperclass();\n+            }\n+        }\n+\n+        throw noSuchMethod;\n+    }    \n \n     public static List<Method> matchingMethods(Method signature, Class clazz) {\n         List<Method> list = new ArrayList<Method>();",
                "additions": 49,
                "raw_url": "https://github.com/apache/tomee/raw/2e0746ca17097492332872d0fdcc405f38f65981/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java",
                "status": "modified",
                "changes": 49,
                "deletions": 0,
                "sha": "eb5166cba67fed17825b939da1ad2300e5bcd619",
                "blob_url": "https://github.com/apache/tomee/blob/2e0746ca17097492332872d0fdcc405f38f65981/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java?ref=2e0746ca17097492332872d0fdcc405f38f65981"
            },
            {
                "patch": "@@ -17,99 +17,85 @@\n package org.apache.openejb.assembler.classic;\n \n import org.apache.openejb.BeanContext;\n+import org.apache.openejb.MethodContext;\n import org.apache.openejb.util.Logger;\n import org.apache.openejb.util.LogCategory;\n-import org.apache.openejb.util.Classes;\n-import org.apache.openejb.util.SetAccessible;\n import org.apache.openejb.core.timer.ScheduleData;\n import javax.ejb.ScheduleExpression;\n import javax.ejb.TimerConfig;\n-import java.util.List;\n import java.lang.reflect.Method;\n \n public class MethodScheduleBuilder {\n \n     public static final Logger logger = Logger.getInstance(LogCategory.OPENEJB_STARTUP, MethodScheduleBuilder.class.getPackage().getName());\n \n     public void build(BeanContext beanContext, EnterpriseBeanInfo beanInfo) {\n+        \n         Class<?> clazz = beanContext.getBeanClass();\n-\n+        \n         for (MethodScheduleInfo info : beanInfo.methodScheduleInfos) {\n-            Method method;\n-            try {\n-                method = getMethod(clazz, info.method.methodName, toClasses(info.method.methodParams, clazz.getClassLoader()));\n-            } catch (NoSuchMethodException e) {\n-                // method doesn't exist\n-                logger.warning(\"Schedule method does not exist: \"+info.method.methodName, e);\n-                continue;\n-            } catch (ClassNotFoundException e) {\n-                logger.warning(\"Schedule method param cannot be loaded.\", e);\n-                continue;\n-            }\n-\n-            if (info.method.className == null || method.getDeclaringClass().getName().equals(info.method.className)){\n-\n-                for (ScheduleInfo scheduleInfo : info.schedules) {\n+            \n+            Method timeoutMethodOfSchedule = null;\n+            \n+            if (info.method.methodParams == null) {\n+                \n+                logger.info(\"Schedule timeout method with 'null' method parameters is invalid: \" + info.method.methodName);\n+\n+            } else {\n+\n+                try {\n+                    timeoutMethodOfSchedule = MethodInfoUtil.toMethod(clazz, info.method);\n+                } catch (IllegalStateException e) {\n+                    // method doesn't exist\n+                    logger.warning(\"Schedule method does not exist: \" + info.method.methodName, e);\n+                    continue;\n+                }\n \n-                    ScheduleExpression expr = new ScheduleExpression();\n-                    expr.second(scheduleInfo.second == null ? \"0\" : scheduleInfo.second);\n-                    expr.minute(scheduleInfo.minute == null ? \"0\" : scheduleInfo.minute);\n-                    expr.hour(scheduleInfo.hour == null ? \"0\" : scheduleInfo.hour);\n-                    expr.dayOfWeek(scheduleInfo.dayOfWeek == null ? \"*\" : scheduleInfo.dayOfWeek);\n-                    expr.dayOfMonth(scheduleInfo.dayOfMonth == null ? \"*\" : scheduleInfo.dayOfMonth);\n-                    expr.month(scheduleInfo.month == null ? \"*\" : scheduleInfo.month);\n-                    expr.year(scheduleInfo.year == null ? \"*\" : scheduleInfo.year);\n-                    expr.timezone(scheduleInfo.timezone);\n-                    expr.start(scheduleInfo.start);\n-                    expr.end(scheduleInfo.end);\n+            }\n+            \n+            MethodContext methodContext = null;\n+            \n+            if (timeoutMethodOfSchedule == null && beanContext.getEjbTimeout() != null) {\n+                methodContext = beanContext.getMethodContext(beanContext.getEjbTimeout());\n+            } else if (info.method.className == null\n+                    || timeoutMethodOfSchedule.getDeclaringClass().getName().equals(info.method.className)) {\n \n-                    TimerConfig config = new TimerConfig();\n-                    config.setInfo(scheduleInfo.info);\n-                    config.setPersistent(scheduleInfo.persistent);\n+                methodContext = beanContext.getMethodContext(timeoutMethodOfSchedule);\n \n-                    beanContext.getMethodContext(method).getSchedules().add(new ScheduleData(config, expr));\n-                }\n             }\n+            \n+            this.addSchedulesToMethod(methodContext, info);\n         }\n     }\n-\n-    private Class<?>[] toClasses(List<String> params, ClassLoader classLoader) throws ClassNotFoundException {\n-        Class<?>[] paramsArray = new Class[params.size()];\n-        for (int j = 0; j < paramsArray.length; j++) {\n-            String methodParam = params.get(j);\n-            paramsArray[j] = Classes.forName(methodParam, classLoader);\n-\n+    \n+    private void addSchedulesToMethod(MethodContext methodContext, MethodScheduleInfo info){\n+        \n+        if (methodContext == null) {\n+            return;\n         }\n-        return paramsArray;\n-    }\n-\n-\n-\n-    /**\n-     * Finds the nearest java.lang.reflect.Method with the given\n-     * name and parameters.  Callbacks can be private so class.getMethod() cannot be used.  Searching\n-     * starts by looking in the specified class, if the method is not found searching continues with\n-     * the immediate parent and continues recurssively until the method is found or java.lang.Object\n-     * is reached.  If the method is not found a NoSuchMethodException is thrown.\n-     *\n-     * @param clazz\n-     * @param methodName\n-     * @param parameterTypes\n-     * @return\n-     * @throws NoSuchMethodException if the method is not found in this class or any of its parent classes\n-     */\n-    private Method getMethod(Class<?> clazz, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {\n-        NoSuchMethodException original = null;\n-        while (clazz != null){\n-            try {\n-                Method method = clazz.getDeclaredMethod(methodName, parameterTypes);\n-                return SetAccessible.on(method);\n-            } catch (NoSuchMethodException e) {\n-                if (original == null) original = e;\n-            }\n-            clazz = clazz.getSuperclass();\n+        \n+        for (ScheduleInfo scheduleInfo : info.schedules) {\n+\n+            ScheduleExpression expr = new ScheduleExpression();\n+            expr.second(scheduleInfo.second == null ? \"0\" : scheduleInfo.second);\n+            expr.minute(scheduleInfo.minute == null ? \"0\" : scheduleInfo.minute);\n+            expr.hour(scheduleInfo.hour == null ? \"0\" : scheduleInfo.hour);\n+            expr.dayOfWeek(scheduleInfo.dayOfWeek == null ? \"*\" : scheduleInfo.dayOfWeek);\n+            expr.dayOfMonth(scheduleInfo.dayOfMonth == null ? \"*\" : scheduleInfo.dayOfMonth);\n+            expr.month(scheduleInfo.month == null ? \"*\" : scheduleInfo.month);\n+            expr.year(scheduleInfo.year == null ? \"*\" : scheduleInfo.year);\n+            expr.timezone(scheduleInfo.timezone);\n+            expr.start(scheduleInfo.start);\n+            expr.end(scheduleInfo.end);\n+\n+            TimerConfig config = new TimerConfig();\n+            config.setInfo(scheduleInfo.info);\n+            config.setPersistent(scheduleInfo.persistent);\n+\n+            methodContext.getSchedules().add(new ScheduleData(config, expr));\n         }\n-        throw original;\n+        \n     }\n \n+\n }",
                "additions": 57,
                "raw_url": "https://github.com/apache/tomee/raw/2e0746ca17097492332872d0fdcc405f38f65981/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodScheduleBuilder.java",
                "status": "modified",
                "changes": 128,
                "deletions": 71,
                "sha": "cbb23ceea3947358fd333750ce9514cd0e23ea80",
                "blob_url": "https://github.com/apache/tomee/blob/2e0746ca17097492332872d0fdcc405f38f65981/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodScheduleBuilder.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodScheduleBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodScheduleBuilder.java?ref=2e0746ca17097492332872d0fdcc405f38f65981"
            }
        ],
        "bug_id": "tomee_127",
        "parent": "https://github.com/apache/tomee/commit/9ebd82bfe7153879d8bb77e834d63fec7204a282",
        "message": "OPENEJB-1515 NPE in MethodScheduleBuilder.build(BeanContext, EnterpriseBeanInfo) (Patch from Shawn Jiang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@1098934 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/1642cda8170561e2b0d9cb4dd6c1c971500c86bf",
        "file": [
            {
                "patch": "@@ -611,15 +611,16 @@ protected void addWebModule(AppModule appModule, URL warUrl, ClassLoader parentC\n         ClassLoader webClassLoader = webModule.getClassLoader();\n \n         // get include/exclude properties from context-param\n+        // using a Set instead of a list would be easier ...\n         Options contextParams = new Options(getContextParams(webModule.getWebApp().getContextParam()));\n         String include = contextParams.get(CLASSPATH_INCLUDE, \"\");\n         String exclude = contextParams.get(CLASSPATH_EXCLUDE, \".*\");\n         Set<RequireDescriptors> requireDescriptors = contextParams.getAll(CLASSPATH_REQUIRE_DESCRIPTOR, RequireDescriptors.CLIENT);\n         boolean filterDescriptors = contextParams.get(CLASSPATH_FILTER_DESCRIPTORS, false);\n         boolean filterSystemApps = contextParams.get(CLASSPATH_FILTER_SYSTEMAPPS, true);\n \n-        contextParams.getProperties().put(moduleName, warPath);\n-        FileUtils base = new FileUtils(moduleName, moduleName, contextParams.getProperties());\n+        contextParams.getProperties().put(webModule.getModuleId(), warPath);\n+        FileUtils base = new FileUtils(webModule.getModuleId(), webModule.getModuleId(), contextParams.getProperties());\n         DeploymentsResolver.loadFromClasspath(base, urls, webClassLoader, include, exclude, requireDescriptors, filterDescriptors, filterSystemApps);\n \n         // we need to exclude previously deployed modules",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/1642cda8170561e2b0d9cb4dd6c1c971500c86bf/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "status": "modified",
                "changes": 5,
                "deletions": 2,
                "sha": "b394e52f0a34c2a1c7bec824da02e9b12fc89725",
                "blob_url": "https://github.com/apache/tomee/blob/1642cda8170561e2b0d9cb4dd6c1c971500c86bf/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=1642cda8170561e2b0d9cb4dd6c1c971500c86bf"
            }
        ],
        "bug_id": "tomee_128",
        "parent": "https://github.com/apache/tomee/commit/635230ae97c8719fff1c0de54924ca71cac6994e",
        "message": "Change the module name by the module id in the map to avoid NPE when not running in Tomcat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@1057107 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/9fa629268e8517a05f14c71d29ac89c7764c46c2",
        "file": [
            {
                "patch": "@@ -547,6 +547,9 @@ public AppInfo configureApplication(File jarFile) throws OpenEJBException {\n      * @throws OpenEJBException on error\n      */\n     public AppInfo configureApplication(ClassLoader classLoader, String id, List<File> jarFiles) throws OpenEJBException {\n+        if (id == null) {\n+            id = \"\";\n+        }\n         Application application = new Application();\n         application.setApplicationName(id);\n         AppModule collection = new AppModule(classLoader, id, application, false);",
                "additions": 3,
                "raw_url": "https://github.com/apache/tomee/raw/9fa629268e8517a05f14c71d29ac89c7764c46c2/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "e6ba1c33fb24cb4e6c2158b32cf9992c63a478fe",
                "blob_url": "https://github.com/apache/tomee/blob/9fa629268e8517a05f14c71d29ac89c7764c46c2/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java?ref=9fa629268e8517a05f14c71d29ac89c7764c46c2"
            }
        ],
        "bug_id": "tomee_129",
        "parent": "https://github.com/apache/tomee/commit/a48715af16dcd4b03c5b0a5fcc72e001819a6dee",
        "message": "pass an empty application id to prevent NPEs and to ensure proper global jndi names are used\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@988313 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/31d43adcd94984ef7c29cf7cf594b59c86678037",
        "file": [
            {
                "patch": "@@ -200,7 +200,7 @@ public Assembler(JndiFactory jndiFactory) {\n \n         SystemInstance system = SystemInstance.get();\n \n-        system.setComponent(Assembler.class, this);\n+        system.setComponent(org.apache.openejb.spi.Assembler.class, this);\n \n         containerSystem = new CoreContainerSystem(jndiFactory);\n         system.setComponent(ContainerSystem.class, containerSystem);",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/31d43adcd94984ef7c29cf7cf594b59c86678037/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "c558595822e6e4d994ffa372c63d8342f1710692",
                "blob_url": "https://github.com/apache/tomee/blob/31d43adcd94984ef7c29cf7cf594b59c86678037/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java?ref=31d43adcd94984ef7c29cf7cf594b59c86678037"
            },
            {
                "patch": "@@ -60,7 +60,7 @@ protected void setUp() throws Exception {\n \n         // Copied from org.apache.openejb.SomeoneBrokeSurefireAndThisIsADirtyHackForItTest that's now gone\n         System.setProperty(\"openejb.assembler\", org.apache.openejb.assembler.classic.Assembler.class.getName());\n-        System.setProperty(\"openejb.deployments.classpath.include\", \".*openejb-itests-*.*\");\n+        System.setProperty(\"openejb.deployments.classpath.include\", \".*openejb-itests-[^a].*-.*\");\n         System.setProperty(\"openejb.deployments.classpath.filter.descriptors\", \"true\");\n         System.setProperty(\"openejb.deployments.classpath.filter.systemapps\", \"false\");\n         System.setProperty(\"openejb.deployments.classpath.ear\", \"false\");",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/31d43adcd94984ef7c29cf7cf594b59c86678037/container/openejb-core/src/test/java/org/apache/openejb/iTest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "122ea9b6037f595f134e13f40e56e4ff3b58d8ee",
                "blob_url": "https://github.com/apache/tomee/blob/31d43adcd94984ef7c29cf7cf594b59c86678037/container/openejb-core/src/test/java/org/apache/openejb/iTest.java",
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/iTest.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/iTest.java?ref=31d43adcd94984ef7c29cf7cf594b59c86678037"
            }
        ],
        "bug_id": "tomee_130",
        "parent": "https://github.com/apache/tomee/commit/10af505edf7f0774c0986de70723d05bbfc28d59",
        "message": "Fix the issue with OpenEJB.deploy throwing NPE because setComponent set Assembler the class not Assembler the interface\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@831551 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/28e762ec05a2dce449650a688fa01e56569c73bb",
        "file": [
            {
                "patch": "@@ -76,6 +76,7 @@\n import java.util.ArrayList;\n import java.util.Set;\n import java.util.LinkedHashSet;\n+import java.util.HashMap;\n import java.net.URL;\n import java.io.File;\n import java.io.IOException;\n@@ -250,29 +251,40 @@ void configureWebserviceSecurity(EjbJarInfo ejbJarInfo, EjbModule ejbModule) {\n \n         OpenejbJarType openejbJarType = (OpenejbJarType) altDD;\n \n+\n+        Map<String, org.apache.openejb.jee.oejb2.EnterpriseBean> beans = new HashMap<String, org.apache.openejb.jee.oejb2.EnterpriseBean>();\n+        for (org.apache.openejb.jee.oejb2.EnterpriseBean enterpriseBean : openejbJarType.getEnterpriseBeans()) {\n+            beans.put(enterpriseBean.getEjbName(), enterpriseBean);\n+        }\n+\n         List<PortInfo> infoList = ejbJarInfo.portInfos;\n         for (PortInfo portInfo : infoList) {\n-            String link = portInfo.serviceLink;\n-\n-            List<org.apache.openejb.jee.oejb2.EnterpriseBean> enterpriseBeans = openejbJarType.getEnterpriseBeans();\n-            for (org.apache.openejb.jee.oejb2.EnterpriseBean enterpriseBean : enterpriseBeans) {\n-                if (link.equals(enterpriseBean.getEjbName()) && enterpriseBean instanceof SessionBeanType) {\n-                    SessionBeanType sessionBean = (SessionBeanType) enterpriseBean;\n-                    WebServiceSecurityType webServiceSecurityType = sessionBean.getWebServiceSecurity();\n-                    portInfo.realmName = webServiceSecurityType.getRealmName();\n-                    portInfo.securityRealmName = webServiceSecurityType.getSecurityRealmName();\n-                    if (webServiceSecurityType.getTransportGuarantee() != null) {\n-                        portInfo.transportGuarantee = webServiceSecurityType.getTransportGuarantee().value();\n-                    } else {\n-                        portInfo.transportGuarantee = \"NONE\";\n-                    }\n \n-                    if (webServiceSecurityType.getAuthMethod() != null) {\n-                        portInfo.authMethod = webServiceSecurityType.getAuthMethod().value();\n-                    } else {\n-                        portInfo.authMethod = \"NONE\";\n-                    }\n-                }\n+            org.apache.openejb.jee.oejb2.EnterpriseBean bean = beans.get(portInfo.serviceLink);\n+\n+            if (bean == null) continue; /* TODO: throw something? */\n+            if (!(bean instanceof SessionBeanType)) continue; /* TODO: throw something? */\n+\n+            SessionBeanType sessionBean = (SessionBeanType) bean;\n+            WebServiceSecurityType webServiceSecurityType = sessionBean.getWebServiceSecurity();\n+\n+            if (webServiceSecurityType == null) {\n+                //TODO: this ok?\n+                continue;\n+            }\n+\n+            portInfo.realmName = webServiceSecurityType.getRealmName();\n+            portInfo.securityRealmName = webServiceSecurityType.getSecurityRealmName();\n+            if (webServiceSecurityType.getTransportGuarantee() != null) {\n+                portInfo.transportGuarantee = webServiceSecurityType.getTransportGuarantee().value();\n+            } else {\n+                portInfo.transportGuarantee = \"NONE\";\n+            }\n+\n+            if (webServiceSecurityType.getAuthMethod() != null) {\n+                portInfo.authMethod = webServiceSecurityType.getAuthMethod().value();\n+            } else {\n+                portInfo.authMethod = \"NONE\";\n             }\n         }\n     }",
                "additions": 32,
                "raw_url": "https://github.com/apache/tomee/raw/28e762ec05a2dce449650a688fa01e56569c73bb/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "status": "modified",
                "changes": 52,
                "deletions": 20,
                "sha": "ca6b0a45c8aabbe51b5bfeeb03c7e8328a8025fc",
                "blob_url": "https://github.com/apache/tomee/blob/28e762ec05a2dce449650a688fa01e56569c73bb/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java?ref=28e762ec05a2dce449650a688fa01e56569c73bb"
            }
        ],
        "bug_id": "tomee_131",
        "parent": "https://github.com/apache/tomee/commit/15f21a11aa6208b4810a571eee9d555824ccb76c",
        "message": "Fix for OPENEJB-1021: NPE in AppInfoBuilder.configureWebserviceSecurity()\nNot sure if it's a good fix\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@767242 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/b0927beff068b4529a5a7818879bf8afc2d369d3",
        "file": [
            {
                "patch": "@@ -1380,7 +1380,7 @@ private void buildResource(JndiConsumer consumer, Resource resource, Member memb\n             JndiReference reference = consumer.getEnvEntryMap().get(refName);\n             if (reference == null) {\n \n-                { // Little quick validation for common mistake\n+                if (member != null) { // Little quick validation for common mistake\n                     Class type = member.getType();\n                     boolean shouldReturn = false;\n                     if (EntityManager.class.isAssignableFrom(type)){",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/b0927beff068b4529a5a7818879bf8afc2d369d3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "e3221e4d45ae6d0b468e9f15eb52ae8cf16aa5ea",
                "blob_url": "https://github.com/apache/tomee/blob/b0927beff068b4529a5a7818879bf8afc2d369d3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=b0927beff068b4529a5a7818879bf8afc2d369d3"
            }
        ],
        "bug_id": "tomee_132",
        "parent": "https://github.com/apache/tomee/commit/478963cef9ff999670254e17130bb2cfab842f85",
        "message": "OPENEJB-735 NPE in AnnotationDeployer if null member is passed into buildResource()\n\nContributed by: Joe Bohn\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@604145 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/87f3b425e6fb08844ec417441026a168b1b4f132",
        "file": [
            {
                "patch": "@@ -101,6 +101,11 @@ public ConfigurationFactory() {\n         this(false);\n     }\n \n+    public ConfigurationFactory(boolean offline, OpenEjbConfiguration configuration) {\n+        this(offline);\n+        sys = configuration;\n+    }\n+\n     public static class Chain implements DynamicDeployer{\n         private final List<DynamicDeployer> chain = new ArrayList<DynamicDeployer>();\n \n@@ -670,9 +675,11 @@ private Properties getSystemProperties(String serviceId) {\n         List<String> resourceIds = new ArrayList<String>();\n \n         OpenEjbConfiguration runningConfig = getRunningConfig();\n-        for (ResourceInfo resourceInfo : runningConfig.facilities.resources) {\n-            if (isResourceType(resourceInfo.service, resourceInfo.types, type)) {\n-                resourceIds.add(resourceInfo.id);\n+        if (runningConfig != null) {\n+            for (ResourceInfo resourceInfo : runningConfig.facilities.resources) {\n+                if (isResourceType(resourceInfo.service, resourceInfo.types, type)) {\n+                    resourceIds.add(resourceInfo.id);\n+                }\n             }\n         }\n \n@@ -744,8 +751,10 @@ private boolean isResourceType(String service, List<String> types, String type)\n         List<ContainerInfo> containers = new ArrayList<ContainerInfo>();\n \n         OpenEjbConfiguration runningConfig = getRunningConfig();\n-        for (ContainerInfo containerInfo : runningConfig.containerSystem.containers) {\n-            containers.add(containerInfo);\n+        if (runningConfig != null) {\n+            for (ContainerInfo containerInfo : runningConfig.containerSystem.containers) {\n+                containers.add(containerInfo);\n+            }\n         }\n \n         if (sys != null) {",
                "additions": 14,
                "raw_url": "https://github.com/apache/tomee/raw/87f3b425e6fb08844ec417441026a168b1b4f132/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "status": "modified",
                "changes": 19,
                "deletions": 5,
                "sha": "6cdddc4ea3380efc6f0fa013dc82d01f9955864f",
                "blob_url": "https://github.com/apache/tomee/blob/87f3b425e6fb08844ec417441026a168b1b4f132/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java?ref=87f3b425e6fb08844ec417441026a168b1b4f132"
            }
        ],
        "bug_id": "tomee_133",
        "parent": "https://github.com/apache/tomee/commit/34d061133e6c45e3542b97ce42ec5357acdfbeeb",
        "message": "GERONIMO-3481, there may be no running OpenEjbConfiguration so avoid NPEs, and allow construction of ConfigurationFactory with a known sys configuration.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@579046 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/cb0cb6e39f138c4db7fa7d4dacd153e4cb5d9b36",
        "file": [
            {
                "patch": "@@ -41,7 +41,10 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n \n         validationFailedException = logResults(appModule, validationFailedException);\n \n-        throw validationFailedException;\n+        if (validationFailedException != null)\n+            throw validationFailedException;\n+\n+        return appModule;\n     }\n \n     private ValidationFailedException logResults(DeploymentModule module, ValidationFailedException validationFailedException) {",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/cb0cb6e39f138c4db7fa7d4dacd153e4cb5d9b36/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "eb872f2d35c20c7efd1e73735b62f1f97110bc67",
                "blob_url": "https://github.com/apache/tomee/blob/cb0cb6e39f138c4db7fa7d4dacd153e4cb5d9b36/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java?ref=cb0cb6e39f138c4db7fa7d4dacd153e4cb5d9b36"
            }
        ],
        "bug_id": "tomee_134",
        "parent": "https://github.com/apache/tomee/commit/222c0c94d34f2f8dee1c277d339f1bcf7a89a160",
        "message": "Fix NPE when there is no validationFailedException -- i.e. when the deploy *should* work... ;-)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@574781 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/7ea0a8ad4613ab8421e86a5fc55c1c40519d99bc",
        "file": [
            {
                "patch": "@@ -365,7 +365,11 @@ private void initCmrFields(MethodVisitor mv, CmrField cmrField) {\n         mv.visitLdcInsn(cmrField.getType());\n \n         // arg3: String relatedProperty\n-        mv.visitLdcInsn(cmrField.getRelatedName());\n+        if (cmrField.getRelatedName() != null) {\n+            mv.visitLdcInsn(cmrField.getRelatedName());\n+        } else {\n+            mv.visitInsn(ACONST_NULL);\n+        }\n \n         // invoke\n         mv.visitMethodInsn(INVOKESPECIAL,",
                "additions": 5,
                "raw_url": "https://github.com/apache/tomee/raw/7ea0a8ad4613ab8421e86a5fc55c1c40519d99bc/container/openejb-core/src/main/java/org/apache/openejb/core/cmp/cmp2/Cmp2Generator.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "9c51b15de7dae14dc5e96a3d2be4ea44929b94b3",
                "blob_url": "https://github.com/apache/tomee/blob/7ea0a8ad4613ab8421e86a5fc55c1c40519d99bc/container/openejb-core/src/main/java/org/apache/openejb/core/cmp/cmp2/Cmp2Generator.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/cmp/cmp2/Cmp2Generator.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/cmp/cmp2/Cmp2Generator.java?ref=7ea0a8ad4613ab8421e86a5fc55c1c40519d99bc"
            }
        ],
        "bug_id": "tomee_135",
        "parent": "https://github.com/apache/tomee/commit/c28eb98bade8ec2449c75efd1bff4c71cb9bae83",
        "message": "Fixed NPE caused by unidirctional relationships not having a related field name\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openejb/trunk/openejb3@505504 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/9244d8f84706397bd176a88b4ab69cdf945fb91e",
        "file": [
            {
                "patch": "@@ -122,7 +122,7 @@ public void destroy() {\n     }\n \n     public void start() {\n-        start(Collections.EMPTY_LIST, \"start\", true);\n+        start(Collections.<String>emptyList(), \"start\", true);\n     }\n \n     public void start(final List<String> additionalArgs, final String cmd, final boolean checkPortAvailable) {\n@@ -201,14 +201,10 @@ private void cmd(final List<String> additionalArgs, final String cmd, final bool\n                     final File conf = new File(home, \"conf\");\n                     final File loggingProperties = new File(conf, \"logging.properties\");\n \n-                    File endorsed = new File(home, \"endorsed\");\n-                    if (javaVersion != null && javaVersion.startsWith(\"1.7.\")) { // java 7\n-                        endorsed = new File(home, \"endorsed7\"); // doesn't exist but just to ignore it with j7\n-                    }\n+                    final File endorsed = new File(home, \"endorsed\");\n                     final File temp = new File(home, \"temp\");\n \n-                    final List<String> argsList = new ArrayList<String>() {\n-                    };\n+                    final List<String> argsList = new ArrayList<String>();\n                     argsList.add(java);\n                     argsList.add(\"-XX:+HeapDumpOnOutOfMemoryError\");\n \n@@ -228,10 +224,7 @@ private void cmd(final List<String> additionalArgs, final String cmd, final bool\n                     }\n \n                     if (javaOpts != null) {\n-                        final String[] strings = javaOpts.split(\" +\");\n-                        for (final String string : strings) {\n-                            argsList.add(string);\n-                        }\n+                        Collections.addAll(argsList, javaOpts.split(\" +\"));\n                     }\n \n                     final Map<String, String> addedArgs = new HashMap<String, String>();",
                "additions": 4,
                "raw_url": "https://github.com/apache/tomee/raw/9244d8f84706397bd176a88b4ab69cdf945fb91e/container/openejb-core/src/main/java/org/apache/openejb/config/RemoteServer.java",
                "status": "modified",
                "changes": 15,
                "deletions": 11,
                "sha": "871f7a64cdbddc383aae7a7368d07b2d92bc9c83",
                "blob_url": "https://github.com/apache/tomee/blob/9244d8f84706397bd176a88b4ab69cdf945fb91e/container/openejb-core/src/main/java/org/apache/openejb/config/RemoteServer.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/RemoteServer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/RemoteServer.java?ref=9244d8f84706397bd176a88b4ab69cdf945fb91e"
            }
        ],
        "bug_id": "tomee_136",
        "parent": "https://github.com/apache/tomee/commit/7e81866e265865df14e0d2646ab1710aa3f22bb2",
        "message": "we don't need this ugly hack which makes tomee maven plugin don't look like tomee standalone - was before we fix NPE in DataTypeConverter\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1525608 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/9cd978e3e71760a2c061f42ecd5b078a07e4eb54",
        "file": [
            {
                "patch": "@@ -90,7 +90,7 @@ private String findTestName(final File folder, final ClassLoader classLoader) {\n         }\n \n         if (is == null) {\n-            is = classLoader.getResourceAsStream(\"/arquillian-tomee-info.txt\");\n+            is = classLoader.getResourceAsStream(\"arquillian-tomee-info.txt\");\n         }\n \n         if (is != null) {",
                "additions": 1,
                "raw_url": "https://github.com/apache/tomee/raw/9cd978e3e71760a2c061f42ecd5b078a07e4eb54/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TestClassDiscoverer.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "0fc376a94e6d36ad0d9abbe1cd032de8581010d3",
                "blob_url": "https://github.com/apache/tomee/blob/9cd978e3e71760a2c061f42ecd5b078a07e4eb54/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TestClassDiscoverer.java",
                "filename": "arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TestClassDiscoverer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TestClassDiscoverer.java?ref=9cd978e3e71760a2c061f42ecd5b078a07e4eb54"
            },
            {
                "patch": "@@ -273,7 +273,11 @@ public static void forceCompleteClean(final ClassLoader loader) {\n         if (classLoader instanceof URLClassLoader) {\n \n             final URLClassLoader urlClassLoader = (URLClassLoader) classLoader;\n-            urlSet = new UrlSet(urlClassLoader.getURLs());\n+            try {\n+                urlSet = new UrlSet(urlClassLoader.getURLs());\n+            } catch (NullPointerException npe) { // happen for closeable classloaders like WebappClassLoader when already clean up\n+                return Collections.emptyList();\n+            }\n \n         } else {\n             try {",
                "additions": 5,
                "raw_url": "https://github.com/apache/tomee/raw/9cd978e3e71760a2c061f42ecd5b078a07e4eb54/container/openejb-core/src/main/java/org/apache/openejb/config/TldScanner.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "cc694f17ceeee908c3fb95cbdd89fe49ed6226dd",
                "blob_url": "https://github.com/apache/tomee/blob/9cd978e3e71760a2c061f42ecd5b078a07e4eb54/container/openejb-core/src/main/java/org/apache/openejb/config/TldScanner.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/TldScanner.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/TldScanner.java?ref=9cd978e3e71760a2c061f42ecd5b078a07e4eb54"
            },
            {
                "patch": "@@ -25,9 +25,18 @@\n import org.apache.catalina.startup.CatalinaProperties;\n import org.apache.catalina.startup.Tomcat;\n import org.apache.coyote.http11.Http11Protocol;\n-import org.apache.openejb.*;\n+import org.apache.openejb.AppContext;\n+import org.apache.openejb.BeanContext;\n+import org.apache.openejb.NoSuchApplicationException;\n+import org.apache.openejb.OpenEJB;\n+import org.apache.openejb.OpenEJBException;\n+import org.apache.openejb.UndeployException;\n import org.apache.openejb.assembler.WebAppDeployer;\n-import org.apache.openejb.assembler.classic.*;\n+import org.apache.openejb.assembler.classic.AppInfo;\n+import org.apache.openejb.assembler.classic.Assembler;\n+import org.apache.openejb.assembler.classic.EjbJarInfo;\n+import org.apache.openejb.assembler.classic.EnterpriseBeanInfo;\n+import org.apache.openejb.assembler.classic.WebAppInfo;\n import org.apache.openejb.config.ConfigurationFactory;\n import org.apache.openejb.loader.Files;\n import org.apache.openejb.loader.IO;\n@@ -44,7 +53,12 @@\n \n import javax.naming.Context;\n import javax.naming.NamingException;\n-import java.io.*;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Properties;\n@@ -83,27 +97,33 @@ public void setup(final Configuration configuration) {\n         } else {\n             tomcat = new Tomcat();\n         }\n-    }\n-\n-    public void start() throws Exception {\n-        final String dir = getBaseDir();\n \n-        Logger.configure();\n-\n-        base = new File(dir);\n+        // create basic installation in setup to be able to handle anything the caller does between setup() and start()\n+        base = new File(getBaseDir());\n         if (base.exists()) {\n             Files.delete(base);\n         }\n \n         Files.mkdirs(base);\n         Files.deleteOnExit(base);\n \n-        final File conf = createDirectory(base, \"conf\");\n-        final File webapps = createDirectory(base, \"webapps\");\n+        createDirectory(base, \"conf\");\n         createDirectory(base, \"lib\");\n         createDirectory(base, \"logs\");\n         createDirectory(base, \"temp\");\n         createDirectory(base, \"work\");\n+        createDirectory(base, \"webapps\");\n+    }\n+\n+    public File getBase() {\n+        return base;\n+    }\n+\n+    public void start() throws Exception {\n+        Logger.configure();\n+\n+        final File conf = new File(base, \"conf\");\n+        final File webapps = new File(base, \"webapps\");\n \n         copyFileTo(conf, \"catalina.policy\");\n         copyTemplateTo(conf, \"catalina.properties\");\n@@ -256,6 +276,7 @@ public void stop() throws Exception {\n         tomcat.destroy();\n         deleteTree(base);\n         OpenEJB.destroy();\n+        // don't set base = null here to be able to use base after to clean up from outside of this class\n     }\n \n     @SuppressWarnings(\"UnusedDeclaration\")",
                "additions": 33,
                "raw_url": "https://github.com/apache/tomee/raw/9cd978e3e71760a2c061f42ecd5b078a07e4eb54/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Container.java",
                "status": "modified",
                "changes": 45,
                "deletions": 12,
                "sha": "815a0261b2d4540804a7a63909e4907c227db4bd",
                "blob_url": "https://github.com/apache/tomee/blob/9cd978e3e71760a2c061f42ecd5b078a07e4eb54/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Container.java",
                "filename": "tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Container.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Container.java?ref=9cd978e3e71760a2c061f42ecd5b078a07e4eb54"
            }
        ],
        "bug_id": "tomee_137",
        "parent": "https://github.com/apache/tomee/commit/f1f0db9b64e0c31c994b68006083f89cf48cdfca",
        "message": "TOMEE-747 exposing base in tomee embedded container + fixing enrichment for jar in tomee arquillian adapters + avoiding NPE when trying to clean a closed classloader\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1437092 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/fa741e5d3aa352716eb18220d8221f349701bf4f",
        "file": [
            {
                "patch": "@@ -16,8 +16,6 @@\n  */\n package org.apache.openejb.core.osgi.impl;\n \n-import java.util.Properties;\n-\n import org.apache.openejb.OpenEJB;\n import org.apache.openejb.loader.OpenEJBInstance;\n import org.apache.openejb.loader.SystemInstance;\n@@ -26,6 +24,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.util.Properties;\n+\n /**\n  * @version $Rev$ $Date$\n  */",
                "additions": 2,
                "raw_url": "https://github.com/apache/tomee/raw/fa741e5d3aa352716eb18220d8221f349701bf4f/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Activator.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "118fead61ab2b6e397c35dc234f8f7f62dab8244",
                "blob_url": "https://github.com/apache/tomee/blob/fa741e5d3aa352716eb18220d8221f349701bf4f/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Activator.java",
                "filename": "container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Activator.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Activator.java?ref=fa741e5d3aa352716eb18220d8221f349701bf4f"
            },
            {
                "patch": "@@ -44,12 +44,12 @@\n \n     public void bundleChanged(BundleEvent event) {\n         switch (event.getType()) {\n-        case BundleEvent.STARTED:\n-            deploy(event.getBundle());\n-            break;\n-        case BundleEvent.STOPPED:\n-            undeploy(event.getBundle());\n-            break;\n+            case BundleEvent.STARTED:\n+                deploy(event.getBundle());\n+                break;\n+            case BundleEvent.STOPPED:\n+                undeploy(event.getBundle());\n+                break;\n         }\n     }\n \n@@ -108,7 +108,7 @@ private void undeploy(Bundle bundle) {\n \n     /**\n      * Register OSGi Service for EJB so calling the service will actually call the EJB\n-     * \n+     *\n      * @param bundle\n      * @param appInfo\n      */\n@@ -121,8 +121,8 @@ private void registerService(Bundle bundle, AppInfo appInfo) {\n                     context.registerService(ejbInfo.businessRemote.toArray(new String[ejbInfo.businessRemote.size()]), bundle.loadClass(\n                             ejbInfo.ejbClass).newInstance(), new Properties());\n                     LOGGER.info(String.format(\n-                             \"[Deployer] Service object %s registered under the class names: %s\", ejbInfo.ejbClass,\n-                             ejbInfo.businessRemote));\n+                            \"[Deployer] Service object %s registered under the class names: %s\", ejbInfo.ejbClass,\n+                            ejbInfo.businessRemote));\n                 } catch (Exception e) {\n                     e.printStackTrace();\n                 }",
                "additions": 9,
                "raw_url": "https://github.com/apache/tomee/raw/fa741e5d3aa352716eb18220d8221f349701bf4f/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "status": "modified",
                "changes": 18,
                "deletions": 9,
                "sha": "c6769bc6d8b607ab87adc8e71564fca38b359d4c",
                "blob_url": "https://github.com/apache/tomee/blob/fa741e5d3aa352716eb18220d8221f349701bf4f/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "filename": "container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java?ref=fa741e5d3aa352716eb18220d8221f349701bf4f"
            }
        ],
        "bug_id": "tomee_138",
        "parent": "https://github.com/apache/tomee/commit/2c5d641cba41ea3930def8e0f32eded1085a30e9",
        "message": "OPENEJB-1713 OpenEJB OSGI generates a NPE when no EJB jars / bundles are found\n\nSubmitted by cmoulliard\nNo more System.out's, indent and imports\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1206220 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/4a615f9ab9dc592f0b88b8257b588f7a5cd09b76",
        "file": [
            {
                "patch": "@@ -41,6 +41,7 @@\n import javax.naming.Context;\n import javax.persistence.EntityManagerFactory;\n \n+import org.apache.openejb.cdi.OWBInjector;\n import org.apache.openejb.core.ExceptionType;\n import org.apache.openejb.core.InstanceContext;\n import org.apache.openejb.core.Operation;\n@@ -60,7 +61,6 @@\n import org.apache.openejb.util.LogCategory;\n import org.apache.openejb.util.Logger;\n import org.apache.webbeans.config.WebBeansContext;\n-import org.apache.webbeans.inject.OWBInjector;\n import org.apache.xbean.recipe.ConstructionException;\n \n \n@@ -1118,8 +1118,13 @@ public InstanceContext newInstance() throws Exception {\n             final Object bean = injectionProcessor.createInstance();\n \n             // TODO we likely don't want to create a new one each time -- investigate the destroy() method\n-            OWBInjector beanInjector = new OWBInjector(webBeansContext);\n-            beanInjector.inject(bean);\n+            try {\n+                OWBInjector beanInjector = new OWBInjector(webBeansContext);\n+                beanInjector.inject(bean);\n+            } catch (Throwable t) {\n+                // TODO handle this differently\n+                // this is temporary till the injector can be rewritten\n+            }\n \n             // Create interceptors\n             final HashMap<String, Object> interceptorInstances = new HashMap<String, Object>();\n@@ -1141,8 +1146,13 @@ public InstanceContext newInstance() throws Exception {\n                     final Object interceptorInstance = interceptorInjector.createInstance();\n \n                     // TODO we likely don't want to create a new one each time -- investigate the destroy() method\n-                    OWBInjector interceptorCdiInjector = new OWBInjector(webBeansContext);\n-                    interceptorCdiInjector.inject(interceptorInstance);\n+                    try {\n+                        OWBInjector interceptorCdiInjector = new OWBInjector(webBeansContext);\n+                        interceptorCdiInjector.inject(interceptorInstance);\n+                    } catch (Throwable t) {\n+                        // TODO handle this differently\n+                        // this is temporary till the injector can be rewritten\n+                    }\n \n                     interceptorInstances.put(clazz.getName(), interceptorInstance);\n                 } catch (ConstructionException e) {",
                "additions": 15,
                "raw_url": "https://github.com/apache/tomee/raw/4a615f9ab9dc592f0b88b8257b588f7a5cd09b76/container/openejb-core/src/main/java/org/apache/openejb/BeanContext.java",
                "status": "modified",
                "changes": 20,
                "deletions": 5,
                "sha": "c8d46a7b8bb87919febd7b6ea0b00c377f9f6d61",
                "blob_url": "https://github.com/apache/tomee/blob/4a615f9ab9dc592f0b88b8257b588f7a5cd09b76/container/openejb-core/src/main/java/org/apache/openejb/BeanContext.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/BeanContext.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/BeanContext.java?ref=4a615f9ab9dc592f0b88b8257b588f7a5cd09b76"
            },
            {
                "patch": "@@ -0,0 +1,292 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openejb.cdi;\n+\n+import org.apache.webbeans.component.EventBean;\n+import org.apache.webbeans.component.InjectionPointBean;\n+import org.apache.webbeans.component.InjectionTargetWrapper;\n+import org.apache.webbeans.component.InstanceBean;\n+import org.apache.webbeans.config.WebBeansContext;\n+import org.apache.webbeans.container.BeanManagerImpl;\n+import org.apache.webbeans.container.InjectionResolver;\n+import org.apache.webbeans.context.creational.CreationalContextImpl;\n+import org.apache.webbeans.util.ClassUtil;\n+import org.apache.webbeans.util.WebBeansAnnotatedTypeUtil;\n+import org.apache.webbeans.util.WebBeansUtil;\n+\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.inject.spi.AnnotatedParameter;\n+import javax.enterprise.inject.spi.AnnotatedType;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+import javax.inject.Provider;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * @version $Rev$ $Date$\n+ */\n+public final class OWBInjector {\n+\n+    /**\n+     * Creational context to hold dependent instances\n+     */\n+    private CreationalContextImpl<?> ownerCreationalContext = null;\n+\n+    /**\n+     * Underlying javaee instance\n+     */\n+    private Object javaEEInstance;\n+\n+    private final WebBeansContext webBeansContext;\n+\n+    public OWBInjector() {\n+        this(WebBeansContext.getInstance());\n+    }\n+\n+    /**\n+     * Creates a new instance\n+     *\n+     * @param webBeansContext\n+     */\n+    public OWBInjector(WebBeansContext webBeansContext) {\n+        //No operation\n+        this.webBeansContext = webBeansContext;\n+    }\n+\n+    /**\n+     * Inject dependencies of given instance.\n+     *\n+     * @param javaEeComponentInstance instance\n+     * @return this injector\n+     * @throws Exception if exception occurs\n+     */\n+    public OWBInjector inject(Object javaEeComponentInstance) throws Exception {\n+        return inject(javaEeComponentInstance, null);\n+    }\n+\n+    /**\n+     * Inject dependencies of given instance.\n+     *\n+     * @param javaEeComponentInstance instance\n+     * @param creationalContext       context\n+     * @return this injector\n+     * @throws Exception if exception occurs\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public OWBInjector inject(Object javaEeComponentInstance, CreationalContext<?> creationalContext) throws Exception {\n+        BeanManagerImpl beanManager = webBeansContext.getBeanManagerImpl();\n+        try {\n+            this.javaEEInstance = javaEeComponentInstance;\n+            if (creationalContext == null) {\n+                this.ownerCreationalContext = (CreationalContextImpl<?>) beanManager.createCreationalContext(null);\n+            }\n+\n+            Class<Object> injectableComponentClass = (Class<Object>) javaEeComponentInstance.getClass();\n+\n+            //Look for custom InjectionTarget\n+            InjectionTargetWrapper<Object> wrapper = beanManager.getInjectionTargetWrapper(injectableComponentClass);\n+            if (wrapper != null) {\n+                wrapper.inject(javaEeComponentInstance, (CreationalContext<Object>) this.ownerCreationalContext);\n+                return this;\n+            }\n+\n+            AnnotatedType<Object> annotated = (AnnotatedType<Object>) beanManager.createAnnotatedType(injectableComponentClass);\n+            Set<InjectionPoint> injectionPoints = WebBeansAnnotatedTypeUtil.getJavaEeComponentInstanceInjectionPoints(webBeansContext, annotated);\n+            if (injectionPoints != null && injectionPoints.size() > 0) {\n+                for (InjectionPoint injectionPoint : injectionPoints) {\n+                    if (injectionPoint.getMember() instanceof Method) {\n+                        Method method = (Method) injectionPoint.getMember();\n+\n+                        //Get injected method arguments\n+                        List<Object> parameters = getInjectedMethodParameterReferences(injectionPoint, beanManager, injectionPoints);\n+\n+                        //Set method\n+                        ClassUtil.callInstanceMethod(method, javaEeComponentInstance, parameters.toArray(new Object[parameters.size()]));\n+\n+                    } else if (injectionPoint.getMember() instanceof Field) {\n+                        //Get injected object ref\n+                        Object object = getInjectedObjectReference(injectionPoint, beanManager);\n+\n+                        //Set field\n+                        Field field = (Field) injectionPoint.getMember();\n+                        ClassUtil.setField(javaEeComponentInstance, field, object);\n+                    }\n+                }\n+\n+                return this;\n+            }\n+\n+\n+        }\n+        catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Release dependents.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void destroy() {\n+        BeanManagerImpl beanManager = webBeansContext.getBeanManagerImpl();\n+\n+        //Look for custom InjectionTarget\n+        InjectionTargetWrapper<Object> wrapper = beanManager.getInjectionTargetWrapper((Class<Object>) javaEEInstance.getClass());\n+        if (wrapper != null) {\n+            wrapper.dispose(javaEEInstance);\n+            this.javaEEInstance = null;\n+            this.ownerCreationalContext = null;\n+        } else {\n+            if (this.ownerCreationalContext != null) {\n+                this.ownerCreationalContext.release();\n+                this.ownerCreationalContext = null;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets injected object reference.\n+     *\n+     * @param injectionPoint injection point of javaee instance\n+     * @param beanManager    bean manager implementation\n+     * @return injected reference\n+     */\n+    private Object getInjectedObjectReference(InjectionPoint injectionPoint, BeanManagerImpl beanManager) {\n+        Object object = null;\n+\n+        //Injected contextual beam\n+        InjectionResolver injectionResolver = beanManager.getInjectionResolver();\n+\n+        Bean<?> injectedBean = (Bean<?>) injectionResolver.getInjectionPointBean(injectionPoint);\n+\n+        if (isInstanceProviderInjection(injectionPoint)) {\n+            InstanceBean.local.set(injectionPoint);\n+        } else if (isEventProviderInjection(injectionPoint)) {\n+            EventBean.local.set(injectionPoint);\n+        } else if (WebBeansUtil.isDependent(injectedBean)) {\n+            if (!InjectionPoint.class.isAssignableFrom(ClassUtil.getClass(injectionPoint.getType()))) {\n+                InjectionPointBean.local.set(injectionPoint);\n+            }\n+        }\n+\n+        object = beanManager.getInjectableReference(injectionPoint, ownerCreationalContext);\n+\n+        return object;\n+    }\n+\n+    /**\n+     * Gets initializer method parameters.\n+     *\n+     * @param injectionPoint  javaee component\n+     *                        injection point\n+     * @param beanManager     bean manager\n+     * @param injectionPoints all injection points\n+     * @return injected method injected arguments\n+     */\n+    private List<Object> getInjectedMethodParameterReferences(InjectionPoint injectionPoint, BeanManagerImpl beanManager, Set<InjectionPoint> injectionPoints) {\n+        Method method = (Method) injectionPoint.getMember();\n+        List<InjectionPoint> injectedPoints = getInjectedPoints(method, injectionPoints);\n+        List<Object> list = new ArrayList<Object>();\n+        for (int i = 0; i < injectedPoints.size(); i++) {\n+            for (InjectionPoint point : injectedPoints) {\n+                AnnotatedParameter<?> parameter = (AnnotatedParameter<?>) point.getAnnotated();\n+                if (parameter.getPosition() == i) {\n+                    Object instance = getInjectedObjectReference(injectionPoint, beanManager);\n+                    list.add(instance);\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return list;\n+    }\n+\n+    /**\n+     * Gets injection point of given methods.\n+     *\n+     * @param method          injection point member\n+     * @param injectionPoints all injection points\n+     * @return method injection points\n+     */\n+    private List<InjectionPoint> getInjectedPoints(Method method, Set<InjectionPoint> injectionPoints) {\n+        List<InjectionPoint> points = new ArrayList<InjectionPoint>();\n+\n+        for (InjectionPoint ip : injectionPoints) {\n+            if (ip.getMember().equals(method)) {\n+                points.add(ip);\n+            }\n+        }\n+\n+        return points;\n+\n+    }\n+\n+    /**\n+     * Returns true if injection point is instance injection point\n+     * false otherwise.\n+     *\n+     * @param injectionPoint injection point\n+     * @return true if injection point is instance injection point\n+     */\n+    private boolean isInstanceProviderInjection(InjectionPoint injectionPoint) {\n+        Type type = injectionPoint.getType();\n+\n+        if (type instanceof ParameterizedType) {\n+            ParameterizedType pt = (ParameterizedType) type;\n+            Class<?> clazz = (Class<?>) pt.getRawType();\n+\n+            if (Provider.class.isAssignableFrom(clazz)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if injection point is event injection point\n+     * false otherwise.\n+     *\n+     * @param injectionPoint injection point\n+     * @return true if injection point is event injection point\n+     */\n+    private boolean isEventProviderInjection(InjectionPoint injectionPoint) {\n+        Type type = injectionPoint.getType();\n+\n+        if (type instanceof ParameterizedType) {\n+            ParameterizedType pt = (ParameterizedType) type;\n+            Class<?> clazz = (Class<?>) pt.getRawType();\n+\n+            if (clazz.isAssignableFrom(Event.class)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+\n+}",
                "additions": 292,
                "raw_url": "https://github.com/apache/tomee/raw/4a615f9ab9dc592f0b88b8257b588f7a5cd09b76/container/openejb-core/src/main/java/org/apache/openejb/cdi/OWBInjector.java",
                "status": "added",
                "changes": 292,
                "deletions": 0,
                "sha": "43f84777a4a3671153d50dae7d41de6ff2ac2645",
                "blob_url": "https://github.com/apache/tomee/blob/4a615f9ab9dc592f0b88b8257b588f7a5cd09b76/container/openejb-core/src/main/java/org/apache/openejb/cdi/OWBInjector.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/OWBInjector.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/OWBInjector.java?ref=4a615f9ab9dc592f0b88b8257b588f7a5cd09b76"
            }
        ],
        "bug_id": "tomee_139",
        "parent": "https://github.com/apache/tomee/commit/cc26e0c4a738052a424681c12810b1efd62214f9",
        "message": "In progress.  All needs reworking still, but at least this will avoid the ConcurrentModificationException we're seeing in the CI system and the NPE we're seeing in the TCK\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@1083675 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    },
    {
        "commit": "https://github.com/apache/tomee/commit/3428ab7f16a8621452423ca348ec24ffa8272dc5",
        "file": [
            {
                "patch": "@@ -249,16 +249,17 @@ public void poolInstance(ThreadContext callContext, Object bean) throws OpenEJBE\n      * @param callContext\n      * @param bean\n      */\n-    public void discardInstance(ThreadContext callContext, Object bean) throws SystemException {\n+    public void discardInstance(final ThreadContext callContext, final Object bean) throws SystemException {\n         if (bean == null) throw new SystemException(\"Invalid arguments\");\n-        Instance instance = Instance.class.cast(bean);\n-\n-        BeanContext beanContext = callContext.getBeanContext();\n-        Data data = (Data) beanContext.getContainerData();\n+        final Instance instance = Instance.class.cast(bean);\n \n-        Pool<Instance> pool = data.getPool();\n+        final BeanContext beanContext = callContext.getBeanContext();\n+        final Data data = (Data) beanContext.getContainerData();\n \n-        pool.discard(instance.getPoolEntry());\n+        if (null != data) {\n+            final Pool<Instance> pool = data.getPool();\n+            pool.discard(instance.getPoolEntry());\n+        }\n     }\n \n     private void freeInstance(ThreadContext callContext, Instance instance) {",
                "additions": 8,
                "raw_url": "https://github.com/apache/tomee/raw/3428ab7f16a8621452423ca348ec24ffa8272dc5/container/openejb-core/src/main/java/org/apache/openejb/core/stateless/StatelessInstanceManager.java",
                "status": "modified",
                "changes": 15,
                "deletions": 7,
                "sha": "4d590c767134d99c7b4eb5c286dfdf7f5bd57e99",
                "blob_url": "https://github.com/apache/tomee/blob/3428ab7f16a8621452423ca348ec24ffa8272dc5/container/openejb-core/src/main/java/org/apache/openejb/core/stateless/StatelessInstanceManager.java",
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/stateless/StatelessInstanceManager.java",
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/stateless/StatelessInstanceManager.java?ref=3428ab7f16a8621452423ca348ec24ffa8272dc5"
            }
        ],
        "bug_id": "tomee_140",
        "parent": "https://github.com/apache/tomee/commit/08620614b5a0c34d2c891902e022cb242b9d2551",
        "message": "Fix for following error that seems to be a race condition that occasionally occurs when an application under load is undeployed - The beanContext Data has not been set:\n2011-11-24 08:13:10,996 FATAL [OpenEJB.server.remote.ejb] (ejbd 13) Unknown error in container\njava.lang.NullPointerException\n\tat org.apache.openejb.core.stateless.StatelessInstanceManager.discardInstance(StatelessInstanceManager.java:259)\n\tat org.apache.openejb.core.stateless.StatelessContainer.invoke(StatelessContainer.java:185)\n\tat org.apache.openejb.core.stateless.StatelessContainer.invoke(StatelessContainer.java:142)\n\tat org.apache.openejb.server.ejbd.EjbRequestHandler.doEjbObject_BUSINESS_METHOD(EjbRequestHandler.java:266)\n\tat org.apache.openejb.server.ejbd.EjbRequestHandler.processRequest(EjbRequestHandler.java:135)\n\tat org.apache.openejb.server.ejbd.EjbDaemon.processEjbRequest(EjbDaemon.java:234)\n\tat org.apache.openejb.server.ejbd.EjbDaemon.service(EjbDaemon.java:164)\n\tat org.apache.openejb.server.ejbd.EjbServer.service(EjbServer.java:71)\n\tat org.apache.openejb.server.ejbd.KeepAliveServer$Session.service(KeepAliveServer.java:213)\n\tat org.apache.openejb.server.ejbd.KeepAliveServer.service(KeepAliveServer.java:233)\n\tat org.apache.openejb.server.ejbd.EjbServer.service(EjbServer.java:66)\n\tat org.apache.openejb.server.ServicePool$2.run(ServicePool.java:91)\n\tat org.apache.openejb.server.ServicePool$3.run(ServicePool.java:120)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n\tat java.lang.Thread.run(Thread.java:619)\nOPENEJB-1748: Fixed undeploy race condition\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1205745 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tomee"
    }
]