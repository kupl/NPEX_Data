{
    "openmeetings_35e7f17": {
        "bug_id": "openmeetings_35e7f17",
        "commit": "https://github.com/apache/openmeetings/commit/35e7f1781640a365f2fd210c515b774eb319e1d6",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/openmeetings/blob/35e7f1781640a365f2fd210c515b774eb319e1d6/openmeetings-server/src/main/assembly/components/all.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-server/src/main/assembly/components/all.xml?ref=35e7f1781640a365f2fd210c515b774eb319e1d6",
                "deletions": 0,
                "filename": "openmeetings-server/src/main/assembly/components/all.xml",
                "patch": "@@ -33,6 +33,7 @@\n \t\t\t\t<exclude>webapps/root/index.html</exclude>\n \t\t\t\t<exclude>lib/commons-io*.jar</exclude>\n \t\t\t\t<exclude>*.sh</exclude>\n+\t\t\t\t<exclude>conf/jee-container.xml</exclude>\n \t\t\t</excludes>\n \t\t</fileSet>\n \t\t<fileSet>\n@@ -52,6 +53,10 @@\n \t\t\t<directory>src/main/assembly/root</directory>\n \t\t\t<outputDirectory>${root.webapp}</outputDirectory>\n \t\t</fileSet>\n+\t\t<fileSet>\n+\t\t\t<directory>src/main/assembly/conf</directory>\n+\t\t\t<outputDirectory>conf</outputDirectory>\n+\t\t</fileSet>\n \t\t<fileSet>\n \t\t\t<directory>${project.parent.basedir}/openmeetings-screenshare/target/jnlp</directory>\n \t\t\t<outputDirectory>${om.webapp}/screenshare</outputDirectory>",
                "raw_url": "https://github.com/apache/openmeetings/raw/35e7f1781640a365f2fd210c515b774eb319e1d6/openmeetings-server/src/main/assembly/components/all.xml",
                "sha": "02b966ef0bd36644fb74ba3b7009579d9ad14fbe",
                "status": "modified"
            },
            {
                "additions": 122,
                "blob_url": "https://github.com/apache/openmeetings/blob/35e7f1781640a365f2fd210c515b774eb319e1d6/openmeetings-server/src/main/assembly/conf/jee-container.xml",
                "changes": 122,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-server/src/main/assembly/conf/jee-container.xml?ref=35e7f1781640a365f2fd210c515b774eb319e1d6",
                "deletions": 0,
                "filename": "openmeetings-server/src/main/assembly/conf/jee-container.xml",
                "patch": "@@ -0,0 +1,122 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+\t\thttp://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+\t\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\t\txmlns:lang=\"http://www.springframework.org/schema/lang\"\n+\t\txsi:schemaLocation=\"\n+\t\t\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n+\t\t\t\thttp://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd\n+\t\t\">\n+\t<!-- War deployer -->\n+\t<bean id=\"warDeployer\" class=\"org.red5.server.tomcat.WarDeployer\">\n+\t\t<property name=\"checkInterval\" value=\"${war.deploy.server.check.interval}\"/>\n+\t\t<property name=\"webappFolder\" value=\"${red5.root}/webapps\"/>\n+\t\t<!-- Expand war files prior to startup of the remaining services -->\n+\t\t<property name=\"expandWars\" value=\"true\" />\n+\t</bean>\n+\t<!--\n+\tThe tomcat connectors may be blocking or non-blocking. Select between either option via the protocol property.\n+\t\tBlocking I/O:\n+\t\t\t<property name=\"protocol\" value=\"org.apache.coyote.http11.Http11Protocol\" />\n+\t\tNon-blocking I/O:\n+\t\t\t<property name=\"protocol\" value=\"org.apache.coyote.http11.Http11NioProtocol\" />  \n+\t -->\n+\t<!-- Tomcat without SSL enabled -->\n+\t<bean id=\"tomcat.server\" class=\"org.red5.server.tomcat.TomcatLoader\" depends-on=\"context.loader,warDeployer\" lazy-init=\"true\">\n+\t\t<property name=\"webappFolder\" value=\"${red5.root}/webapps\" />\n+\t\t<property name=\"connectors\">\n+\t\t\t<list>\n+\t\t\t\t<bean name=\"httpConnector\" class=\"org.red5.server.tomcat.TomcatConnector\">\n+\t\t\t\t\t<property name=\"protocol\" value=\"org.apache.coyote.http11.Http11NioProtocol\" />\n+\t\t\t\t\t<property name=\"address\" value=\"${http.host}:${http.port}\" />\n+\t\t\t\t\t<property name=\"redirectPort\" value=\"${https.port}\" />\n+\t\t\t\t\t<property name=\"connectionProperties\">\n+\t\t\t\t\t\t<map>\n+\t\t\t\t\t\t\t<entry key=\"maxKeepAliveRequests\" value=\"${http.max_keep_alive_requests}\"/>\n+\t\t\t\t\t\t\t<entry key=\"keepAliveTimout\" value=\"-1\"/>\n+\t\t\t\t\t\t</map>\n+\t\t\t\t\t</property>\n+\t\t\t\t</bean>\n+\t\t\t</list>\n+\t\t</property>\n+\t\t<property name=\"baseHost\">\n+\t\t\t<bean class=\"org.apache.catalina.core.StandardHost\">\n+\t\t\t\t<property name=\"name\" value=\"${http.host}\" />\n+\t\t\t</bean>\n+\t\t</property>\n+\t\t<property name=\"valves\">\n+\t\t\t<list>\n+\t\t\t\t<bean id=\"valve.access\" class=\"org.apache.catalina.valves.AccessLogValve\">\n+\t\t\t\t\t<property name=\"directory\" value=\"log\" />\n+\t\t\t\t\t<property name=\"prefix\" value=\"${http.host}_access.\" />\n+\t\t\t\t\t<property name=\"suffix\" value=\".log\" />\n+\t\t\t\t\t<property name=\"pattern\" value=\"common\" />\n+\t\t\t\t\t<property name=\"rotatable\" value=\"true\" />\n+\t\t\t\t</bean>\n+\t\t\t</list>\n+\t\t</property>\n+\t</bean>\n+\n+\t<!-- Tomcat with SSL enabled -->\n+<!--\n+\t<bean id=\"tomcat.server\" class=\"org.red5.server.tomcat.TomcatLoader\" depends-on=\"context.loader\" lazy-init=\"true\">\n+\t\t<property name=\"webappFolder\" value=\"${red5.root}/webapps\" />\n+\t\t<property name=\"connectors\">\n+\t\t\t<list>\n+\t\t\t\t<bean name=\"httpConnector\" class=\"org.red5.server.tomcat.TomcatConnector\">\n+\t\t\t\t\t<property name=\"protocol\" value=\"org.apache.coyote.http11.Http11NioProtocol\" />\n+\t\t\t\t\t<property name=\"address\" value=\"${http.host}:${http.port}\" />\n+\t\t\t\t\t<property name=\"redirectPort\" value=\"${https.port}\" />\n+\t\t\t\t</bean>\n+\t\t\t\t<bean name=\"httpsConnector\" class=\"org.red5.server.tomcat.TomcatConnector\">\n+\t\t\t\t\t<property name=\"secure\" value=\"true\" />\n+\t\t\t\t\t<property name=\"protocol\" value=\"org.apache.coyote.http11.Http11NioProtocol\" />\n+\t\t\t\t\t<property name=\"address\" value=\"${http.host}:${https.port}\" />\n+\t\t\t\t\t<property name=\"redirectPort\" value=\"${http.port}\" />\n+\t\t\t\t\t<property name=\"connectionProperties\">\n+\t\t\t\t\t\t<map>\n+\t\t\t\t\t\t\t<entry key=\"port\" value=\"${https.port}\" />\n+\t\t\t\t\t\t\t<entry key=\"redirectPort\" value=\"${http.port}\" />\n+\t\t\t\t\t\t\t<entry key=\"SSLEnabled\" value=\"true\" />\n+\t\t\t\t\t\t\t<entry key=\"sslProtocol\" value=\"TLS\" />\n+\t\t\t\t\t\t\t<entry key=\"keystoreFile\" value=\"${rtmps.keystorefile}\" />\n+\t\t\t\t\t\t\t<entry key=\"keystorePass\" value=\"${rtmps.keystorepass}\" />\n+\t\t\t\t\t\t\t<entry key=\"keystoreType\" value=\"JKS\" />\n+\t\t\t\t\t\t\t<entry key=\"truststoreFile\" value=\"${rtmps.truststorefile}\" />\n+\t\t\t\t\t\t\t<entry key=\"truststorePass\" value=\"${rtmps.truststorepass}\" />\n+\t\t\t\t\t\t\t<entry key=\"clientAuth\" value=\"false\" />\n+\t\t\t\t\t\t\t<entry key=\"allowUnsafeLegacyRenegotiation\" value=\"true\" />\t\t\t\t\t\t\t \n+\t\t\t\t\t\t\t<entry key=\"maxKeepAliveRequests\" value=\"${http.max_keep_alive_requests}\"/>\n+\t\t\t\t\t\t\t<entry key=\"keepAliveTimout\" value=\"-1\"/>\n+\t\t\t\t\t\t\t<entry key=\"useExecutor\" value=\"true\"/>\n+\t\t\t\t\t\t\t<entry key=\"maxThreads\" value=\"${http.max_threads}\"/>\n+\t\t\t\t\t\t\t<entry key=\"acceptorThreadCount\" value=\"${http.acceptor_thread_count}\"/>\n+\t\t\t\t\t\t\t<entry key=\"processorCache\" value=\"${http.processor_cache}\"/>\n+\t\t\t\t\t\t</map>\n+\t\t\t\t\t</property>\n+\t\t\t\t</bean>\n+\t\t\t</list>\n+\t\t</property>\n+\t\t<property name=\"baseHost\">\n+\t\t\t<bean class=\"org.apache.catalina.core.StandardHost\">\n+\t\t\t\t<property name=\"name\" value=\"${http.host}\" />\n+\t\t\t</bean>\n+\t\t</property>\n+\t</bean>\n+-->\n+</beans>",
                "raw_url": "https://github.com/apache/openmeetings/raw/35e7f1781640a365f2fd210c515b774eb319e1d6/openmeetings-server/src/main/assembly/conf/jee-container.xml",
                "sha": "503bd5f77997e7bff8ac8b8a240565911ec33074",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openmeetings/blob/35e7f1781640a365f2fd210c515b774eb319e1d6/openmeetings-web/src/main/java/org/apache/openmeetings/web/app/WebSession.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-web/src/main/java/org/apache/openmeetings/web/app/WebSession.java?ref=35e7f1781640a365f2fd210c515b774eb319e1d6",
                "deletions": 3,
                "filename": "openmeetings-web/src/main/java/org/apache/openmeetings/web/app/WebSession.java",
                "patch": "@@ -180,7 +180,7 @@ public void checkHashes(StringValue secure, StringValue invitation) {\n \t\t\t\tif (!isSignedIn() || soap == null || !soap.getHash().equals(secure.toString())) {\n \t\t\t\t\t// otherwise already logged-in with the same hash\n \t\t\t\t\tif (isSignedIn()) {\n-\t\t\t\t\t\tinvalidate();\n+\t\t\t\t\t\tinvalidateNow();\n \t\t\t\t\t}\n \t\t\t\t\tsignIn(secure.toString(), true);\n \t\t\t\t}\n@@ -189,7 +189,7 @@ public void checkHashes(StringValue secure, StringValue invitation) {\n \t\t\t\tif (!isSignedIn() || i == null || !i.getHash().equals(invitation.toString())) {\n \t\t\t\t\t// otherwise already logged-in with the same hash\n \t\t\t\t\tif (isSignedIn()) {\n-\t\t\t\t\t\tinvalidate();\n+\t\t\t\t\t\tinvalidateNow();\n \t\t\t\t\t}\n \t\t\t\t\ti = getBean(InvitationDao.class).getByHash(invitation.toString(), false, true);\n \t\t\t\t\tif (i != null && i.isAllowEntry()) {\n@@ -603,7 +603,7 @@ private static void checkIsInvalid() {\n \t\t\tsetKickedByAdmin(true);\n \t\t\tremoveInvalidSession(get().getId());\n \t\t\torg.apache.wicket.Session session = get();\n-\t\t\tsession.invalidate();\n+\t\t\tsession.invalidateNow();\n \t\t\tApplication.get().restartResponseAtSignInPage();\n \t\t}\n \t}",
                "raw_url": "https://github.com/apache/openmeetings/raw/35e7f1781640a365f2fd210c515b774eb319e1d6/openmeetings-web/src/main/java/org/apache/openmeetings/web/app/WebSession.java",
                "sha": "8a97272fb1201c8fd2b2e56d90b4d8f7e195cfc5",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/openmeetings/blob/35e7f1781640a365f2fd210c515b774eb319e1d6/openmeetings-web/src/main/java/org/apache/openmeetings/web/common/MainPanel.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-web/src/main/java/org/apache/openmeetings/web/common/MainPanel.java?ref=35e7f1781640a365f2fd210c515b774eb319e1d6",
                "deletions": 2,
                "filename": "openmeetings-web/src/main/java/org/apache/openmeetings/web/common/MainPanel.java",
                "patch": "@@ -145,6 +145,7 @@ public MainPanel(String id) {\n \tpublic MainPanel(String id, BasePanel _panel) {\n \t\tsuper(id);\n \t\tthis.panel = _panel;\n+\t\tsetOutputMarkupId(true);\n \t\tadd(topControls.setOutputMarkupPlaceholderTag(true).setMarkupId(\"topControls\"));\n \t\tmenu = new MenuPanel(\"menu\", getMainMenu());\n \t\tcontents = new WebMarkupContainer(\"contents\");\n@@ -200,7 +201,7 @@ public void onClose(IPartialPageRequestHandler handler, DialogButton button) {\n \t\t\tprotected void respond(AjaxRequestTarget target) {\n \t\t\t\tuserInfo.open(target, getParam(getComponent(), PARAM_USER_ID).toLong());\n \t\t\t}\n-\t\t\t\n+\n \t\t\t@Override\n \t\t\tpublic void renderHead(Component component, IHeaderResponse response) {\n \t\t\t\tsuper.renderHead(component, response);\n@@ -235,7 +236,7 @@ public void renderHead(Component component, IHeaderResponse response) {\n \t\t\t\tresponse.render(new PriorityHeaderItem(getNamedFunction(\"privateMessage\", this, explicit(PARAM_USER_ID))));\n \t\t\t}\n \t\t});\n-\t\tadd(pingTimer, new WebSocketBehavior() {\n+\t\tadd(new WebSocketBehavior() {\n \t\t\tprivate static final long serialVersionUID = 1L;\n \n \t\t\t@Override\n@@ -251,6 +252,7 @@ protected void onMessage(WebSocketRequestHandler handler, TextMessage msg) {\n \t\t\t\tif (\"socketConnected\".equals(msg.getText())) {\n \t\t\t\t\tif (panel != null) {\n \t\t\t\t\t\tupdateContents(panel, handler);\n+\t\t\t\t\t\thandler.add(MainPanel.this.add(pingTimer));\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
                "raw_url": "https://github.com/apache/openmeetings/raw/35e7f1781640a365f2fd210c515b774eb319e1d6/openmeetings-web/src/main/java/org/apache/openmeetings/web/common/MainPanel.java",
                "sha": "a23cc51485707bed3bcdc194f17a3407b9464427",
                "status": "modified"
            }
        ],
        "message": "[OPENMEETINGS-1546] NPE in websockets is fixed",
        "parent": "https://github.com/apache/openmeetings/commit/014c313882fdfd445e2cd4e3a140edd9fbdaa3e1",
        "patched_files": [
            "WebSession.java"
        ],
        "repo": "openmeetings",
        "unit_tests": [
            "TestWebSession.java"
        ]
    },
    "openmeetings_3ce3cc1": {
        "bug_id": "openmeetings_3ce3cc1",
        "commit": "https://github.com/apache/openmeetings/commit/3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/ConferenceLibrary.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/ConferenceLibrary.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 20,
                "filename": "openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/ConferenceLibrary.java",
                "patch": "@@ -39,10 +39,12 @@\n import org.apache.openmeetings.db.dao.server.SessiondataDao;\n import org.apache.openmeetings.db.dao.user.UserDao;\n import org.apache.openmeetings.db.dto.file.LibraryPresentation;\n+import org.apache.openmeetings.db.dto.server.ClientSessionInfo;\n import org.apache.openmeetings.db.entity.file.FileExplorerItem;\n import org.apache.openmeetings.db.entity.file.FileItem;\n import org.apache.openmeetings.db.entity.file.FileItem.Type;\n import org.apache.openmeetings.db.entity.room.Client;\n+import org.apache.openmeetings.db.entity.server.Sessiondata;\n import org.apache.openmeetings.db.util.AuthLevelUtil;\n import org.apache.openmeetings.util.OmFileHelper;\n import org.red5.logging.Red5LoggerFactory;\n@@ -64,7 +66,7 @@\n \t@Autowired\n \tprivate ISessionManager sessionManager;\n \t@Autowired\n-\tprivate SessiondataDao sessiondataDao;\n+\tprivate SessiondataDao sessionDao;\n \t@Autowired\n \tprivate UserDao userDao;\n \t@Autowired\n@@ -74,13 +76,13 @@\n \t@Autowired\n \tprivate ScopeApplicationAdapter scopeAdapter;\n \n-\tpublic LibraryPresentation getPresentationPreviewFileExplorer(String SID, String parentFolder) {\n+\tpublic LibraryPresentation getPresentationPreviewFileExplorer(String sid, String parentFolder) {\n \t\ttry {\n-\t\t\tLong users_id = sessiondataDao.check(SID);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n \n-\t\t\tlog.debug(\"#############users_id : \" + users_id);\n+\t\t\tlog.debug(\"#############users_id : \" + sd.getUserId());\n \n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(users_id))) {\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tFile working_dir = new File(OmFileHelper.getUploadFilesDir(), parentFolder);\n \t\t\t\tlog.debug(\"############# working_dir : \" + working_dir);\n \n@@ -103,16 +105,16 @@ public LibraryPresentation getPresentationPreviewFileExplorer(String SID, String\n \t * \n \t * Save an Object to the library and returns the file-explorer Id\n \t * \n-\t * @param SID\n+\t * @param sid\n \t * @param roomId\n \t * @param fileName\n \t * @param tObjectRef\n \t * @return - file-explorer Id in case of success, -1 otherwise\n \t */\n-\tpublic Long saveAsObject(String SID, Long roomId, String fileName, Object tObjectRef) {\n+\tpublic Long saveAsObject(String sid, Long roomId, String fileName, Object tObjectRef) {\n \t\ttry {\n-\t\t\tLong userId = sessiondataDao.check(SID);\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\t// LinkedHashMap tObject = (LinkedHashMap)t;\n \t\t\t\t// ArrayList tObject = (ArrayList)t;\n \n@@ -124,7 +126,7 @@ public Long saveAsObject(String SID, Long roomId, String fileName, Object tObjec\n \n \t\t\t\tlog.debug(\"saveAsObject\" + tObject.size());\n \n-\t\t\t\tFileExplorerItem file = fileDao.add(fileName, null, null, roomId, userId, Type.WmlFile, \"\", \"\");\n+\t\t\t\tFileExplorerItem file = fileDao.add(fileName, null, null, roomId, sd.getUserId(), Type.WmlFile, \"\", \"\");\n \t\t\t\tLibraryDocumentConverter.writeToLocalFolder(file.getHash(), tObject);\n \n \t\t\t\treturn file.getId();\n@@ -144,7 +146,12 @@ public Long saveAsObject(String SID, Long roomId, String fileName, Object tObjec\n \t * @param fi - FileItem of the Wml being loaded\n \t */\n \tpublic void sendToWhiteboard(String uid, Long wbId, FileItem fi) {\n-\t\tClient client = sessionManager.getClientByPublicSIDAnyServer(uid).getRcl();\n+\t\tClientSessionInfo csi = sessionManager.getClientByPublicSIDAnyServer(uid);\n+\t\tif (csi == null) {\n+\t\t\tlog.warn(\"No client was found to send Wml:: {}\", uid);\n+\t\t\treturn;\n+\t\t}\n+\t\tClient client = csi.getRcl();\n \n \t\tif (client == null) {\n \t\t\tlog.warn(\"No client was found to send Wml:: {}\", uid);\n@@ -181,16 +188,16 @@ public void sendToWhiteboard(String uid, Long wbId, FileItem fi) {\n \t * \n \t * Loads a chart object\n \t * \n-\t * @param SID\n+\t * @param sid\n \t * @param room_id\n \t * @param fileName\n \t * @return - chart object\n \t */\n \t@SuppressWarnings(\"rawtypes\")\n-\tpublic ArrayList loadChartObject(String SID, Long room_id, String fileName) {\n+\tpublic ArrayList loadChartObject(String sid, Long room_id, String fileName) {\n \t\ttry {\n-\t\t\tLong users_id = sessiondataDao.check(SID);\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(users_id))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\treturn LibraryChartLoader.getInstance().loadChart(OmFileHelper.getUploadRoomDir(room_id.toString()), fileName);\n \t\t\t}\n \t\t} catch (Exception err) {\n@@ -200,15 +207,14 @@ public ArrayList loadChartObject(String SID, Long room_id, String fileName) {\n \t}\n \n \t/**\n-\t * @param SID\n+\t * @param sid\n \t * @param flvFileExplorerId\n \t * @return 1 in case of success, -1 otherwise\n \t */\n-\tpublic Long copyFileToCurrentRoom(String SID, Long flvFileExplorerId) {\n+\tpublic Long copyFileToCurrentRoom(String sid, Long flvFileExplorerId) {\n \t\ttry {\n-\t\t\tLong users_id = sessiondataDao.check(SID);\n-\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(users_id))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \n \t\t\t\tIConnection current = Red5.getConnectionLocal();\n \t\t\t\tString streamid = current.getClient().getId();",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/ConferenceLibrary.java",
                "sha": "73423f812859f40029fd5b80b5ba4dc140694da1",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/ConferenceService.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/ConferenceService.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 42,
                "filename": "openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/ConferenceService.java",
                "patch": "@@ -37,6 +37,7 @@\n import org.apache.openmeetings.db.entity.room.Client;\n import org.apache.openmeetings.db.entity.room.Room;\n import org.apache.openmeetings.db.entity.room.RoomModerator;\n+import org.apache.openmeetings.db.entity.server.Sessiondata;\n import org.apache.openmeetings.db.entity.room.RoomGroup;\n import org.apache.openmeetings.db.util.AuthLevelUtil;\n import org.red5.logging.Red5LoggerFactory;\n@@ -54,7 +55,7 @@\n \t@Autowired\n \tprivate AppointmentDao appointmentDao;\n \t@Autowired\n-\tprivate SessiondataDao sessiondataDao;\n+\tprivate SessiondataDao sessionDao;\n \t@Autowired\n \tprivate UserDao userDao;\n \t@Autowired\n@@ -66,10 +67,10 @@\n \t@Autowired\n \tprivate ISessionManager sessionManager = null;\n \n-\tpublic List<RoomGroup> getRoomsByGroupWithoutType(String SID, long groupId) {\n+\tpublic List<RoomGroup> getRoomsByGroupWithoutType(String sid, long groupId) {\n \t\ttry {\n-\t\t\tLong userId = sessiondataDao.check(SID);\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tlog.debug(\"getRoomsByGroupWithoutType\");\n \t\t\t\tList<RoomGroup> roomGroupsList = roomManager.getRoomGroupByGroupId(groupId);\n \t\t\t\t\n@@ -88,16 +89,16 @@\n \t/**\n \t * get a List of all public availible rooms (non-appointments)\n \t * \n-\t * @param SID\n+\t * @param sid\n \t * @param typeId\n \t * @return - public rooms with given type, null in case of the error\n \t */\n-\tpublic List<Room> getRoomsPublic(String SID, Long typeId) {\n+\tpublic List<Room> getRoomsPublic(String sid, Long typeId) {\n \t\ttry {\n \t\t\tlog.debug(\"getRoomsPublic\");\n \n-\t\t\tLong userId = sessiondataDao.check(SID);\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\n \t\t\t\tList<Room> roomList = roomDao.getPublicRooms(Room.Type.get(typeId));\n \t\n@@ -121,10 +122,10 @@\n \t\treturn null;\n \t}\n \n-\tpublic List<Room> getRoomsPublicWithoutType(String SID) {\n+\tpublic List<Room> getRoomsPublicWithoutType(String sid) {\n \t\ttry {\n-\t\t\tLong userId = sessiondataDao.check(SID);\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\n \t\t\t\tList<Room> roomList = roomDao.getPublicRooms();\n \t\t\t\t\n@@ -155,13 +156,12 @@ public Date getServerTime() {\n \n \t// --------------------------------------------------------------------------------------------\n \n-\tpublic List<Room> getAppointedMeetingRoomsWithoutType(String SID) {\n+\tpublic List<Room> getAppointedMeetingRoomsWithoutType(String sid) {\n \t\tlog.debug(\"ConferenceService.getAppointedMeetings\");\n \t\ttry {\n-\t\t\tLong userId = sessiondataDao.check(SID);\n-\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n-\t\t\t\tList<Appointment> appointments = appointmentDao.getForToday(userId);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n+\t\t\t\tList<Appointment> appointments = appointmentDao.getForToday(sd.getUserId());\n \t\t\t\tList<Room> result = new ArrayList<Room>();\n \n \t\t\t\tif (appointments != null) {\n@@ -185,10 +185,10 @@ public Date getServerTime() {\n \t\treturn null;\n \t}\n \n-\tpublic Room getRoomWithCurrentUsersById(String SID, long roomId) {\n+\tpublic Room getRoomWithCurrentUsersById(String sid, long roomId) {\n \t\tRoom room = null;\n-\t\tLong userId = sessiondataDao.check(SID);\n-\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\troom = roomDao.get(roomId);\n \t\t\troom.setCurrentusers(sessionManager.getClientListByRoom(room.getId()));\n \t\t}\n@@ -198,37 +198,37 @@ public Room getRoomWithCurrentUsersById(String SID, long roomId) {\n \t/**\n \t * gets a list of all available rooms\n \t * \n-\t * @param SID\n+\t * @param sid\n \t * @param start\n \t * @param max\n \t * @param orderby\n \t * @param asc\n \t * @return - list of rooms being searched\n \t */\n-\tpublic SearchResult<Room> getRooms(String SID, int start, int max, String orderby, boolean asc, String search) {\n+\tpublic SearchResult<Room> getRooms(String sid, int start, int max, String orderby, boolean asc, String search) {\n \t\tlog.debug(\"getRooms\");\n \n-\t\tLong userId = sessiondataDao.check(SID);\n-\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(userId))) {\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\treturn roomManager.getRooms(start, max, orderby, asc, search);\n \t\t}\n \t\treturn null;\n \t}\n \n-\tpublic SearchResult<Room> getRoomsWithCurrentUsers(String SID, int start, int max, String orderby, boolean asc) {\n+\tpublic SearchResult<Room> getRoomsWithCurrentUsers(String sid, int start, int max, String orderby, boolean asc) {\n \t\tlog.debug(\"getRooms\");\n \n-\t\tLong userId = sessiondataDao.check(SID);\n-\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(userId))) {\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\treturn roomManager.getRoomsWithCurrentUsers(start, max, orderby, asc);\n \t\t}\n \t\treturn null;\n \t}\n \n-\tpublic List<RoomModerator> getRoomModeratorsByRoomId(String SID, Long roomId) {\n+\tpublic List<RoomModerator> getRoomModeratorsByRoomId(String sid, Long roomId) {\n \t\ttry {\n-\t\t\tLong userId = sessiondataDao.check(SID);\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\treturn roomModeratorDao.getByRoomId(roomId);\n \t\t\t}\n \t\t} catch (Exception err) {\n@@ -247,37 +247,37 @@ public Room getRoomWithCurrentUsersById(String SID, long roomId) {\n \t\treturn sessionManager.getClientListByRoom(roomId);\n \t}\n \n-\tpublic List<Room> getRoomsWithCurrentUsersByList(String SID, int start, int max, String orderby, boolean asc) {\n+\tpublic List<Room> getRoomsWithCurrentUsersByList(String sid, int start, int max, String orderby, boolean asc) {\n \t\tlog.debug(\"getRoomsWithCurrentUsersByList\");\n \n-\t\tLong userId = sessiondataDao.check(SID);\n-\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(userId))) {\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\treturn roomManager.getRoomsWithCurrentUsersByList(start, max, orderby, asc);\n \t\t}\n \t\treturn null;\n \t}\n \n-\tpublic List<Room> getRoomsWithCurrentUsersByListAndType(String SID, int start, int max, String orderby, boolean asc, String externalType) {\n+\tpublic List<Room> getRoomsWithCurrentUsersByListAndType(String sid, int start, int max, String orderby, boolean asc, String externalType) {\n \t\tlog.debug(\"getRoomsWithCurrentUsersByListAndType\");\n \n-\t\tLong userId = sessiondataDao.check(SID);\n-\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(userId))) {\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\treturn roomManager.getRoomsWithCurrentUsersByListAndType(start, max, orderby, asc, externalType);\n \t\t}\n \t\treturn null;\n \t}\n \n-\tpublic Room getRoomByOwnerAndType(String SID, Long typeId, String roomName) {\n-\t\tLong userId = sessiondataDao.check(SID);\n-\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n-\t\t\treturn roomDao.getUserRoom(userId, Room.Type.get(typeId), roomName);\n+\tpublic Room getRoomByOwnerAndType(String sid, Long typeId, String roomName) {\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n+\t\t\treturn roomDao.getUserRoom(sd.getUserId(), Room.Type.get(typeId), roomName);\n \t\t}\n \t\treturn null;\n \t}\n \n-\tpublic Room getRoomById(String SID, Long roomId) {\n-\t\tLong userId = sessiondataDao.check(SID);\n-\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\tpublic Room getRoomById(String sid, Long roomId) {\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\treturn roomDao.get(roomId);\n \t\t}\n \t\treturn null;",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/ConferenceService.java",
                "sha": "e03ea6e00e21d75a297ffb8c056d5de58df41959",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/InvitationService.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/InvitationService.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 9,
                "filename": "openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/InvitationService.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.openmeetings.db.entity.room.Invitation;\n import org.apache.openmeetings.db.entity.room.Invitation.MessageType;\n import org.apache.openmeetings.db.entity.room.Invitation.Valid;\n+import org.apache.openmeetings.db.entity.server.Sessiondata;\n import org.apache.openmeetings.db.entity.user.User;\n import org.apache.openmeetings.db.util.AuthLevelUtil;\n import org.apache.openmeetings.util.CalendarHelper;\n@@ -48,7 +49,7 @@\n \t@Autowired\n \tprivate ISessionManager sessionManager;\n \t@Autowired\n-\tprivate SessiondataDao sessiondataDao;\n+\tprivate SessiondataDao sessionDao;\n \t@Autowired\n \tprivate UserDao userDao;\n \t@Autowired\n@@ -75,7 +76,7 @@ private static Date getDate(String date, String time, String tzId) {\n \t/**\n \t * send an invitation to another user by Mail\n \t * \n-\t * @param SID\n+\t * @param sid\n \t * @param firstname\n \t * @param lastname\n \t * @param message\n@@ -94,15 +95,16 @@ private static Date getDate(String date, String time, String tzId) {\n      * @param iCalTz\n \t * @return - invitation object in case of success, \"Sys - Error\" string or null in case of error\n \t */\n-\tpublic Object sendInvitationHash(String SID, String firstname, String lastname,\n+\tpublic Object sendInvitationHash(String sid, String firstname, String lastname,\n \t\t\tString message, String email, String subject,\n \t\t\tLong roomId, String conferencedomain, Boolean isPasswordProtected,\n \t\t\tString invitationpass, Integer valid, String validFromDate,\n \t\t\tString validFromTime, String validToDate, String validToTime,\n \t\t\tLong languageId, String iCalTz, boolean sendMail) {\n \n \t\ttry {\n-\t\t\tLong userId = sessiondataDao.check(SID);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tLong userId = sd.getUserId();\n \n \t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n \t\t\t\tlog.debug(\"sendInvitationHash: \");\n@@ -141,10 +143,9 @@ public Object sendInvitationHash(String SID, String firstname, String lastname,\n \t\treturn null;\n \t}\n \n-\tpublic String sendInvitationByHash(String SID, String invitationHash, String message, String subject, Long languageId) throws Exception {\n-\t\tLong userId = sessiondataDao.check(SID);\n-\n-\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\tpublic String sendInvitationByHash(String sid, String invitationHash, String message, String subject, Long languageId) throws Exception {\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\tInvitation inv = (Invitation)invitationManager.getInvitationByHashCode(invitationHash, false);\n \t\t\tinv.getInvitee().setLanguageId(languageId);\n \t\t\tinvitationManager.sendInvitationLink(inv, MessageType.Create, subject, message, false);\n@@ -161,7 +162,7 @@ public Object getInvitationByHash(String SID, String hashCode) {\n \t\t\tif (i.isAllowEntry()) {\n \t\t\t\tUser u = i.getInvitee();\n \t\t\t\tLong userId = -u.getId(); //TODO check this, extremely weird\n-\t\t\t\tsessiondataDao.updateUser(SID, userId);\n+\t\t\t\tsessionDao.updateUser(SID, userId);\n \t\t\t\tIConnection current = Red5.getConnectionLocal();\n \t\t\t\tString streamId = current.getClient().getId();\n \t\t\t\tClient client = sessionManager.getClientByStreamId(streamId, null);",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/InvitationService.java",
                "sha": "8303bfaef31eb47da15630a328e5a8f22774c7e9",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/MainService.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/MainService.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 26,
                "filename": "openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/MainService.java",
                "patch": "@@ -78,7 +78,7 @@\n \t@Autowired\n \tprivate ScopeApplicationAdapter scopeApplicationAdapter;\n \t@Autowired\n-\tprivate SessiondataDao sessiondataDao;\n+\tprivate SessiondataDao sessionDao;\n \t@Autowired\n \tprivate ConfigurationDao configurationDao;\n \t@Autowired\n@@ -103,14 +103,14 @@\n \t/**\n \t * gets a user by its SID\n \t * \n-\t * @param SID\n+\t * @param sid\n \t * @param userId\n \t * @return - user with SID given\n \t */\n-\tpublic User getUser(String SID, long userId) {\n+\tpublic User getUser(String sid, long userId) {\n \t\tUser users = new User();\n-\t\tLong users_id = sessiondataDao.check(SID);\n-\t\tSet<Right> rights = userDao.getRights(users_id);\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tSet<Right> rights = userDao.getRights(sd.getUserId());\n \t\tif (AuthLevelUtil.hasAdminLevel(rights) || AuthLevelUtil.hasWebServiceLevel(rights)) {\n \t\t\tusers = userDao.get(userId);\n \t\t} else {\n@@ -141,12 +141,12 @@ public Client getCurrentRoomClient(String SID) {\n \t * @return a unique session identifier\n \t */\n \tpublic Sessiondata getsessiondata() {\n-\t\treturn sessiondataDao.create();\n+\t\treturn sessionDao.create();\n \t}\n \n \tpublic Long setCurrentUserGroup(String SID, Long groupId) {\n \t\ttry {\n-\t\t\tsessiondataDao.updateUserGroup(SID, groupId);\n+\t\t\tsessionDao.updateUserGroup(SID, groupId);\n \t\t\treturn 1L;\n \t\t} catch (Exception err) {\n \t\t\tlog.error(\"[setCurrentUserGroup]\", err);\n@@ -204,7 +204,8 @@ public boolean isRoomAllowedToUser(Room r, User u) {\n \t\n \tpublic User loginWicket(String wicketSID, Long wicketroomid) {\n \t\tlog.debug(\"[loginWicket] wicketSID: '{}'; wicketroomid: '{}'\", wicketSID, wicketroomid);\n-\t\tLong userId = sessiondataDao.check(wicketSID);\n+\t\tSessiondata sd = sessionDao.check(wicketSID);\n+\t\tLong userId = sd.getUserId();\n \t\tUser u = userId == null ? null : userDao.get(userId);\n \t\tif (u != null && wicketroomid != null) {\n \t\t\tlog.debug(\"[loginWicket] user and roomid are not empty: \" + userId + \", \" + wicketroomid);\n@@ -214,7 +215,7 @@ public User loginWicket(String wicketSID, Long wicketroomid) {\n \t\t\t\tClient currentClient = sessionManager.getClientByStreamId(streamId, null);\n \t\t\t\t\n \t\t\t\tif (!u.getGroupUsers().isEmpty()) {\n-\t\t\t\t\tu.setSessionData(sessiondataDao.get(wicketSID));\n+\t\t\t\t\tu.setSessionData(sd);\n \t\t\t\t\tcurrentClient.setUserId(u.getId());\n \t\t\t\t\tcurrentClient.setRoomId(wicketroomid);\n \t\t\t\t\tSessionVariablesUtil.setUserId(current.getClient(), u.getId());\n@@ -268,7 +269,7 @@ public Object secureLoginByRemote(String SID, String secureHash) {\n \t\t\tClient currentClient = sessionManager.getClientByStreamId(streamId, null);\n \n \t\t\tif (currentClient.getUserId() != null) {\n-\t\t\t\tsessiondataDao.updateUser(SID, currentClient.getUserId());\n+\t\t\t\tsessionDao.updateUser(SID, currentClient.getUserId());\n \t\t\t}\n \n \t\t\tcurrentClient.setAllowRecording(soapLogin.isAllowRecording());\n@@ -352,15 +353,14 @@ public Long setUserNickName(String firstname, String lastname, String email) {\n \t * Attention! This SID is NOT the default session id! its the Session id\n \t * retrieved in the call from the SOAP Gateway!\n \t * \n-\t * @param SID\n+\t * @param sid\n \t * @return - 1 in case of success, -1 otherwise\n \t */\n-\tpublic Long loginUserByRemote(String SID) {\n+\tpublic Long loginUserByRemote(String sid) {\n \t\ttry {\n-\t\t\tLong users_id = sessiondataDao.check(SID);\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(users_id))) {\n-\t\t\t\tSessiondata sd = sessiondataDao.get(SID);\n-\t\t\t\tif (sd == null || sd.getXml() == null) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n+\t\t\t\tif (sd.getXml() == null) {\n \t\t\t\t\treturn -37L;\n \t\t\t\t} else {\n \t\t\t\t\tRemoteSessionObject userObject = RemoteSessionObject.fromXml(sd.getXml());\n@@ -404,7 +404,7 @@ public Long loginUserByRemote(String SID) {\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tuser.setPictureuri(userObject.getPictureUrl());\n \n-\t\t\t\t\t\t\tuserDao.update(user, users_id);\n+\t\t\t\t\t\t\tuserDao.update(user, sd.getUserId());\n \n \t\t\t\t\t\t\tcurrentClient.setUserId(user.getId());\n \t\t\t\t\t\t\tSessionVariablesUtil.setUserId(current.getClient(), user.getId());\n@@ -420,7 +420,7 @@ public Long loginUserByRemote(String SID) {\n \t\t\t\t\tlog.debug(\"UPDATE USER BY STREAMID \" + streamId);\n \n \t\t\t\t\tif (currentClient.getUserId() != null) {\n-\t\t\t\t\t\tsessiondataDao.updateUser(SID, currentClient.getUserId());\n+\t\t\t\t\t\tsessionDao.updateUser(sid, currentClient.getUserId());\n \t\t\t\t\t}\n \n \t\t\t\t\tsessionManager.updateClientByStreamId(streamId, currentClient, false, null);\n@@ -437,20 +437,20 @@ public Long loginUserByRemote(String SID) {\n \t/**\n \t * clear this session id\n \t * \n-\t * @param SID\n+\t * @param sid\n \t * @return string value if completed\n \t */\n-\tpublic Long logoutUser(String SID) {\n+\tpublic Long logoutUser(String sid) {\n \t\ttry {\n-\t\t\tLong users_id = sessiondataDao.check(SID);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n \t\t\tIConnection current = Red5.getConnectionLocal();\n \t\t\tClient currentClient = sessionManager.getClientByStreamId(current.getClient().getId(), null);\n \t\t\t\n \t\t\tscopeApplicationAdapter.roomLeaveByScope(currentClient,current.getScope(), false);\n \t\t\t\n \t\t\tcurrentClient.setUserObject(null, null, null, null);\n \t\t\t\n-\t\t\treturn userManager.logout(SID, users_id);\n+\t\t\treturn userManager.logout(sid, sd.getUserId());\n \t\t} catch (Exception err) {\n \t\t\tlog.error(\"[logoutUser]\",err);\n \t\t}\n@@ -466,10 +466,10 @@ public Long logoutUser(String SID) {\n \t\treturn null;\n \t}\n \n-\tpublic List<Userdata> getUserdata(String SID) {\n-\t\tLong users_id = sessiondataDao.check(SID);\n-\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(users_id))) {\n-\t\t\treturn userManager.getUserdataDashBoard(users_id);\n+\tpublic List<Userdata> getUserdata(String sid) {\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n+\t\t\treturn userManager.getUserdataDashBoard(sd.getUserId());\n \t\t}\n \t\treturn null;\n \t}",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/MainService.java",
                "sha": "9909291776e0166b515f09ba738ad9ce4b3eba17",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/UserService.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/UserService.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 21,
                "filename": "openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/UserService.java",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.openmeetings.db.dao.user.UserDao;\n import org.apache.openmeetings.db.entity.room.Client;\n import org.apache.openmeetings.db.entity.server.Server;\n+import org.apache.openmeetings.db.entity.server.Sessiondata;\n import org.apache.openmeetings.db.entity.user.User;\n import org.apache.openmeetings.db.util.AuthLevelUtil;\n import org.apache.wicket.Application;\n@@ -55,7 +56,7 @@\n \t@Autowired\n \tprivate ScopeApplicationAdapter scopeApplicationAdapter;\n \t@Autowired\n-\tprivate SessiondataDao sessiondataDao;\n+\tprivate SessiondataDao sessionDao;\n \t@Autowired\n \tprivate UserDao userDao;\n \t@Autowired\n@@ -66,13 +67,13 @@\n \t/**\n \t * get user by id, admin only\n \t * \n-\t * @param SID\n+\t * @param sid\n \t * @param userId\n \t * @return User with the id given\n \t */\n-\tpublic User getUserById(String SID, long userId) {\n-\t\tLong authUserId = sessiondataDao.check(SID);\n-\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(authUserId))) {\n+\tpublic User getUserById(String sid, long userId) {\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\treturn userDao.get(userId);\n \t\t}\n \t\treturn null;\n@@ -86,7 +87,7 @@ public User getUserById(String SID, long userId) {\n \t */\n \tpublic String refreshSession(String SID) {\n \t\ttry {\n-\t\t\tsessiondataDao.check(SID);\n+\t\t\tsessionDao.check(SID);\n \t\t\treturn \"ok\";\n \t\t} catch (Exception err) {\n \t\t\tlog.error(\"[refreshSession]\", err);\n@@ -97,15 +98,15 @@ public String refreshSession(String SID) {\n \t/**\n \t * gets a whole user-list(admin-role only)\n \t * \n-\t * @param SID\n+\t * @param sid\n \t * @param start\n \t * @param max\n \t * @param orderby\n \t * @return whole user-list\n \t */\n-\tpublic List<User> getUserList(String SID, int start, int max, String orderby, boolean asc) {\n-\t\tLong userId = sessiondataDao.check(SID);\n-\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(userId))) {\n+\tpublic List<User> getUserList(String sid, int start, int max, String orderby, boolean asc) {\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\treturn userDao.get(\"\", start, max, orderby + (asc ? \" ASC\" : \" DESC\"));\n \t\t}\n \t\treturn null;\n@@ -115,19 +116,19 @@ public String refreshSession(String SID) {\n \t * kicks a user from the server, also from slaves if needed, this method is\n \t * only invoked by the connection administration UI\n \t * \n-\t * @param SID\n+\t * @param sid\n \t * @param streamid\n \t * @param serverId\n \t *            0 means the session is locally, otherwise we have to perform a\n \t *            REST call\n \t * @return - true if user has sufficient permissions, false otherwise\n \t */\n \t@Override\n-\tpublic boolean kickUserByStreamId(String SID, String streamid, long serverId) {\n+\tpublic boolean kickUserByStreamId(String sid, String streamid, long serverId) {\n \t\ttry {\n-\t\t\tLong userId = sessiondataDao.check(SID);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n \t\t\t// admins only\n-\t\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(userId))) {\n+\t\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tif (serverId == 0) {\n \t\t\t\t\tClient rcl = sessionManager.getClientByStreamId(streamid, null);\n \n@@ -173,15 +174,15 @@ public boolean kickUserByStreamId(String SID, String streamid, long serverId) {\n \t * invoked from inside the conference room, that means all clients are on the\n \t * same server, no matter if clustered or not.\n \t * \n-\t * @param SID\n+\t * @param sid\n \t * @param publicSID\n \t * @return - true in case user have sufficient permissions, null otherwise\n \t */\n-\tpublic boolean kickUserByPublicSID(String SID, String publicSID) {\n+\tpublic boolean kickUserByPublicSID(String sid, String publicSID) {\n \t\ttry {\n-\t\t\tLong userId = sessiondataDao.check(SID);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n \t\t\t// users only\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tClient rcl = sessionManager.getClientByPublicSID(publicSID, null);\n \n \t\t\t\tif (rcl == null) {\n@@ -208,11 +209,11 @@ public boolean kickUserByPublicSID(String SID, String publicSID) {\n \t}\n \n \t@Override\n-\tpublic boolean kickUserBySessionId(String SID, long userId, String sessionId) {\n+\tpublic boolean kickUserBySessionId(String sid, long userId, String sessionId) {\n \t\ttry {\n-\t\t\tLong users_id = sessiondataDao.check(SID);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n \t\t\t// admin only\n-\t\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(users_id))) {\n+\t\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\t((IApplication)Application.get(wicketApplicationName)).invalidateClient(userId, sessionId);\n \t\t\t\treturn true;\n \t\t\t}",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/UserService.java",
                "sha": "68bba2c9a983d07d20256b01a07bfb4895dfe249",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/WhiteBoardService.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/WhiteBoardService.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 19,
                "filename": "openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/WhiteBoardService.java",
                "patch": "@@ -41,6 +41,7 @@\n import org.apache.openmeetings.db.dto.room.WhiteboardObjectList;\n import org.apache.openmeetings.db.dto.room.WhiteboardSyncLockObject;\n import org.apache.openmeetings.db.entity.room.Client;\n+import org.apache.openmeetings.db.entity.server.Sessiondata;\n import org.apache.openmeetings.db.util.AuthLevelUtil;\n import org.apache.openmeetings.util.OmFileHelper;\n import org.red5.logging.Red5LoggerFactory;\n@@ -70,7 +71,7 @@\n \t@Autowired\n \tprivate WhiteBoardObjectListManagerById wbListManagerById;\n \t@Autowired\n-\tprivate SessiondataDao sessiondataDao;\n+\tprivate SessiondataDao sessionDao;\n \n \tpublic Long getNewWhiteboardId() {\n \t\ttry {\n@@ -142,20 +143,19 @@ public WhiteboardObjectList getRoomItemsBy() {\n \t * besides the Moderator to draw on the whiteboard, only a Moderator is\n \t * allowed to trigger this function\n \t * \n-\t * @param SID\n+\t * @param sid\n \t * @param publicSID\n \t * @param canDraw\n \t * @return null in case of success, false otherwise\n \t */\n-\tpublic boolean setCanDraw(String SID, String publicSID, boolean canDraw) {\n+\tpublic boolean setCanDraw(String sid, String publicSID, boolean canDraw) {\n \t\ttry {\n \t\t\tIConnection current = Red5.getConnectionLocal();\n \t\t\tString streamid = current.getClient().getId();\n \t\t\tClient currentClient = sessionManager.getClientByStreamId(streamid, null);\n \n-\t\t\tLong users_id = sessiondataDao.check(SID);\n-\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(users_id))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tif (currentClient.getIsMod()) {\n \t\t\t\t\tClient rcl = sessionManager.getClientByPublicSID(publicSID, null);\n \n@@ -177,15 +177,14 @@ public boolean setCanDraw(String SID, String publicSID, boolean canDraw) {\n \t\treturn false;\n \t}\n \n-\tpublic boolean setCanShare(String SID, String publicSID, boolean canShare) {\n+\tpublic boolean setCanShare(String sid, String publicSID, boolean canShare) {\n \t\ttry {\n \t\t\tIConnection current = Red5.getConnectionLocal();\n \t\t\tString streamid = current.getClient().getId();\n \t\t\tClient currentClient = sessionManager.getClientByStreamId(streamid, null);\n \n-\t\t\tLong users_id = sessiondataDao.check(SID);\n-\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(users_id))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tif (currentClient.getIsMod()) {\n \t\t\t\t\tClient rcl = sessionManager.getClientByPublicSID(publicSID, null);\n \n@@ -207,15 +206,14 @@ public boolean setCanShare(String SID, String publicSID, boolean canShare) {\n \t\treturn false;\n \t}\n \n-\tpublic boolean setCanRemote(String SID, String publicSID, boolean canRemote) {\n+\tpublic boolean setCanRemote(String sid, String publicSID, boolean canRemote) {\n \t\ttry {\n \t\t\tIConnection current = Red5.getConnectionLocal();\n \t\t\tString streamid = current.getClient().getId();\n \t\t\tClient currentClient = sessionManager.getClientByStreamId(streamid, null);\n \n-\t\t\tLong userId = sessiondataDao.check(SID);\n-\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tif (currentClient.getIsMod()) {\n \t\t\t\t\tClient rcl = sessionManager.getClientByPublicSID(publicSID, null);\n \n@@ -237,16 +235,15 @@ public boolean setCanRemote(String SID, String publicSID, boolean canRemote) {\n \t\treturn false;\n \t}\n \n-    public boolean setCanGiveAudio(String SID, String publicSID, boolean canGiveAudio) {\n+\tpublic boolean setCanGiveAudio(String sid, String publicSID, boolean canGiveAudio) {\n \t\ttry {\n-            log.debug(\"[setCanGiveAudio] \" + SID + \", \" + publicSID + \", \" + canGiveAudio);\n+\t\t\tlog.debug(\"[setCanGiveAudio] \" + sid + \", \" + publicSID + \", \" + canGiveAudio);\n \t\t\tIConnection current = Red5.getConnectionLocal();\n \t\t\tString streamid = current.getClient().getId();\n \t\t\tClient currentClient = sessionManager.getClientByStreamId(streamid, null);\n \n-\t\t\tLong users_id = sessiondataDao.check(SID);\n-\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(users_id))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tif (currentClient.getIsMod()) {\n \t\t\t\t\tClient rcl = sessionManager.getClientByPublicSID(publicSID, null);\n ",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/WhiteBoardService.java",
                "sha": "b900075a4ddf871025380f101727c5e950b58ae2",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/red5/ScopeApplicationAdapter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/red5/ScopeApplicationAdapter.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 1,
                "filename": "openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/red5/ScopeApplicationAdapter.java",
                "patch": "@@ -52,6 +52,7 @@\n import org.apache.openmeetings.db.dao.user.UserDao;\n import org.apache.openmeetings.db.dto.room.BrowserStatus;\n import org.apache.openmeetings.db.dto.room.RoomStatus;\n+import org.apache.openmeetings.db.dto.server.ClientSessionInfo;\n import org.apache.openmeetings.db.entity.file.FileItem;\n import org.apache.openmeetings.db.entity.log.ConferenceLog;\n import org.apache.openmeetings.db.entity.room.Client;\n@@ -1438,7 +1439,12 @@ private static Point getSize(FileItem fi) {\n \t}\n \t\n \tpublic void sendToWhiteboard(String uid, Long wbId, FileItem fi, String url) {\n-\t\tClient client = sessionManager.getClientByPublicSIDAnyServer(uid).getRcl();\n+\t\tClientSessionInfo csi = sessionManager.getClientByPublicSIDAnyServer(uid);\n+\t\tif (csi == null) {\n+\t\t\tlog.warn(\"No client was found to send Wml:: {}\", uid);\n+\t\t\treturn;\n+\t\t}\n+\t\tClient client = csi.getRcl();\n \t\t\n \t\tList<?> wbObject = new ArrayList<>();\n \t\tswitch (fi.getType()) {",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/red5/ScopeApplicationAdapter.java",
                "sha": "c4f81f57865a74182f51156c5da6fb0fe26f4ca1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/label/LabelDao.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/label/LabelDao.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 1,
                "filename": "openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/label/LabelDao.java",
                "patch": "@@ -120,7 +120,7 @@ private static File getLangFile() {\n \t\treturn new File(OmFileHelper.getLanguagesDir(), OmFileHelper.nameOfLanguageFile);\r\n \t}\r\n \t\r\n-\tpublic static Class<?> getAppClass() throws ClassNotFoundException {\r\n+\tpublic static synchronized Class<?> getAppClass() throws ClassNotFoundException {\r\n \t\tif (APP == null) {\r\n \t\t\t//FIXME HACK to resolve package dependencies\r\n \t\t\tAPP = Class.forName(\"org.apache.openmeetings.web.app.Application\");\r",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/label/LabelDao.java",
                "sha": "eef0162a78a35a6c75848525bbae4e9148e55e57",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/server/SessiondataDao.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/server/SessiondataDao.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 51,
                "filename": "openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/server/SessiondataDao.java",
                "patch": "@@ -49,74 +49,46 @@\n \t@Autowired\n \tprivate ISessionManager sessionManager;\n \n-\t/**\n-\t * creates a new session-object in the database\n-\t * \n-\t * @return\n-\t */\n-\tpublic Sessiondata create() {\n+\tprivate static Sessiondata newInstance() {\n \t\tlog.debug(\"startsession :: startsession\");\n \n \t\tSessiondata sd = new Sessiondata();\n \t\tsd.setSessionId(UUID.randomUUID().toString());\n \t\tsd.setCreated(new Date());\n \t\tsd.setUserId(null);\n \n-\t\treturn update(sd);\n+\t\treturn sd;\n \t}\n-\n-\tpublic Sessiondata get(String SID) {\n-\t\ttry {\n-\t\t\tlog.debug(\"updateUser User SID: \" + SID);\n-\n-\t\t\tTypedQuery<Sessiondata> q = em.createNamedQuery(\"getSessionById\", Sessiondata.class).setParameter(\"sessionId\", SID);\n-\n-\t\t\tList<Sessiondata> fullList = q.getResultList();\n-\t\t\tif (fullList.size() == 0) {\n-\t\t\t\tlog.error(\"Could not find session to update: \" + SID);\n-\t\t\t\treturn null;\n-\t\t\t}\n-\n-\t\t\tSessiondata sd = fullList.get(0);\n-\n-\t\t\treturn sd;\n-\t\t} catch (Exception ex2) {\n-\t\t\tlog.error(\"[getSessionByHash]: \", ex2);\n-\t\t}\n-\t\treturn null;\n+\t\n+\t/**\n+\t * creates a new session-object in the database\n+\t * \n+\t * @return created Sessiondata with random UID\n+\t */\n+\tpublic Sessiondata create() {\n+\t\tlog.debug(\"create :: create\");\n+\t\treturn update(newInstance());\n \t}\n \n \t/**\n \t * \n \t * @param SID\n \t * @return\n \t */\n-\tpublic Long check(String SID) {\n-\t\ttry {\n-\t\t\tTypedQuery<Sessiondata> query = em.createNamedQuery(\"getSessionById\", Sessiondata.class).setParameter(\"sessionId\", SID);\n-\t\t\tList<Sessiondata> sessions = query.getResultList();\n+\tpublic Sessiondata check(String SID) {\n+\t\tList<Sessiondata> sessions = em.createNamedQuery(\"getSessionById\", Sessiondata.class).setParameter(\"sessionId\", SID).getResultList();\n \n-\t\t\tSessiondata sd = null;\n-\t\t\tif (sessions != null && sessions.size() > 0) {\n-\t\t\t\tsd = sessions.get(0);\n-\t\t\t}\n-\n-\t\t\t// Update the Session Object\n-\t\t\tif (sd != null) {\n-\t\t\t\tupdate(sd);\n-\t\t\t}\n+\t\tSessiondata sd = null;\n+\t\tif (sessions != null && sessions.size() > 0) {\n+\t\t\tsd = sessions.get(0);\n+\t\t}\n \n-\t\t\t// Checks if wether the Session or the User Object of that Session\n-\t\t\t// is set yet\n-\t\t\tif (sd == null || sd.getUserId() == null || sd.getUserId().equals(new Long(0))) {\n-\t\t\t\treturn new Long(0);\n-\t\t\t} else {\n-\t\t\t\treturn sd.getUserId();\n-\t\t\t}\n-\t\t} catch (Exception ex2) {\n-\t\t\tlog.error(\"[checkSession]: \", ex2);\n+\t\t// Checks if wether the Session or the User Object of that Session\n+\t\t// is set yet\n+\t\tif (sd == null || sd.getUserId() == null || sd.getUserId().equals(new Long(0))) {\n+\t\t\treturn newInstance();\n \t\t}\n-\t\treturn null;\n+\t\treturn update(sd);\n \t}\n \n \t/**\n@@ -288,7 +260,7 @@ public void clearSessionByRoomId(Long roomId) {\n \t\t\t\t}\n \t\t\t\tString SID = aux.substring(init_pos, end_pos);\n \n-\t\t\t\tSessiondata sData = get(SID);\n+\t\t\t\tSessiondata sData = check(SID);\n \t\t\t\tif (sData != null) {\n \t\t\t\t\tem.remove(sData);\n \t\t\t\t}",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/server/SessiondataDao.java",
                "sha": "73a2e8c54659b4acba53762327278798e8e37f8a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/user/UserDao.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/user/UserDao.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 2,
                "filename": "openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/user/UserDao.java",
                "patch": "@@ -685,8 +685,10 @@ public User addUser(Set<Right> rights, String firstname, String login, String la\n \t\t}\n \t\tu.setDeleted(false);\n \t\tu.setPictureuri(pictureuri);\n-\t\tfor (Long grpId : groupIds) {\n-\t\t\tu.getGroupUsers().add(new GroupUser(groupDao.get(grpId), u));\n+\t\tif (groupIds != null) {\n+\t\t\tfor (Long grpId : groupIds) {\n+\t\t\t\tu.getGroupUsers().add(new GroupUser(groupDao.get(grpId), u));\n+\t\t\t}\n \t\t}\n \t\t\n \t\treturn update(u, null);",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/user/UserDao.java",
                "sha": "a9312420aed8272adb57b4f50cb5fe664b3e22b8",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-screenshare/src/main/java/org/apache/openmeetings/screen/webstart/CoreScreenShare.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-screenshare/src/main/java/org/apache/openmeetings/screen/webstart/CoreScreenShare.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 22,
                "filename": "openmeetings-screenshare/src/main/java/org/apache/openmeetings/screen/webstart/CoreScreenShare.java",
                "patch": "@@ -657,31 +657,30 @@ public void resultReceived(IPendingServiceCall call) {\n \n \t\t\tString method = call.getServiceMethodName();\n \t\t\tObject o = call.getResult();\n+\t\t\tif (log.isTraceEnabled()) {\n+\t\t\t\tlog.trace(\"Result Map Type \" + (o == null ? null : o.getClass().getName()));\n+\t\t\t\tlog.trace(\"\" + o);\n+\t\t\t}\n+\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\tMap<String, Object> returnMap = (o != null && o instanceof Map) ? (Map<String, Object>) o : new HashMap<String, Object>();\n \t\t\tlog.trace(\"call ### get Method Name \" + method);\n \t\t\tif (\"connect\".equals(method)) {\n-\t\t\t\tif (o instanceof Map) {\n-\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n-\t\t\t\t\tMap<String, Object> map = (Map<String, Object>) o;\n-\t\t\t\t\tObject code = map.get(\"code\");\n-\t\t\t\t\tif (\"NetConnection.Connect.Rejected\".equals(code) || \"NetConnection.Connect.Failed\".equals(code)) {\n-\t\t\t\t\t\tframe.setStatus(String.format(\"Error: %s %s\", code, map.get(\"description\")));\n-\t\t\t\t\t\treturn;\n-\t\t\t\t\t}\n+\t\t\t\tObject code = returnMap.get(\"code\");\n+\t\t\t\tif (\"NetConnection.Connect.Rejected\".equals(code) || \"NetConnection.Connect.Failed\".equals(code)) {\n+\t\t\t\t\tframe.setStatus(String.format(\"Error: %s %s\", code, returnMap.get(\"description\")));\n+\t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t\tisConnected = true;\n \t\t\t\tsetConnectionAsSharingClient();\n \t\t\t} else if (\"setConnectionAsSharingClient\".equals(method)) {\n-\t\t\t\t@SuppressWarnings(\"unchecked\")\n-\t\t\t\tMap<String, Object> returnMap = (Map<String, Object>) o;\n-\n-\t\t\t\tif (o == null || !bool(returnMap.get(\"alreadyPublished\"))) {\n+\t\t\t\tif (!bool(returnMap.get(\"alreadyPublished\"))) {\n \t\t\t\t\tlog.trace(\"Stream not yet started - do it \");\n \n \t\t\t\t\tinstance.createStream(this);\n \t\t\t\t} else {\n \t\t\t\t\tlog.trace(\"The Stream was already started \");\n \t\t\t\t}\n-\t\t\t\tif (returnMap != null) {\n+\t\t\t\tif (o != null) {\n \t\t\t\t\tObject modus = returnMap.get(\"modus\");\n \t\t\t\t\tif (\"startStreaming\".equals(modus)) {\n \t\t\t\t\t\tframe.setSharingStatus(true, false);\n@@ -703,8 +702,8 @@ public void resultReceived(IPendingServiceCall call) {\n \t\t\t\t}\n \t\t\t} else if (\"createStream\".equals(method)) {\n \t\t\t\tif (startRecording || startStreaming) {\n-\t\t\t\t\tif (call.getResult() != null) {\n-\t\t\t\t\t\tgetCapture().setStreamId((Number)call.getResult());\n+\t\t\t\t\tif (o != null && o instanceof Number) {\n+\t\t\t\t\t\tgetCapture().setStreamId((Number)o);\n \t\t\t\t\t}\n \t\t\t\t\tlog.debug(\"createPublishStream result stream id: {}; name: {}\", getCapture().getStreamId(), publishName);\n \t\t\t\t\tinstance.publish(getCapture().getStreamId(), publishName, \"live\", this);\n@@ -717,13 +716,6 @@ public void resultReceived(IPendingServiceCall call) {\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else if (\"screenSharerAction\".equals(method)) {\n-\t\t\t\tif (log.isTraceEnabled()) {\n-\t\t\t\t\tlog.trace(\"Result Map Type \" + (o == null ? null : o.getClass().getName()));\n-\t\t\t\t\tlog.trace(\"\" + o);\n-\t\t\t\t}\n-\n-\t\t\t\t@SuppressWarnings(\"unchecked\")\n-\t\t\t\tMap<String, Object> returnMap = (Map<String, Object>)o;\n \t\t\t\tObject result = returnMap.get(\"result\");\n \t\t\t\tif (\"stopAll\".equals(result)) {\n \t\t\t\t\tlog.trace(\"Stopping to stream, there is neither a Desktop Sharing nor Recording anymore\");",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-screenshare/src/main/java/org/apache/openmeetings/screen/webstart/CoreScreenShare.java",
                "sha": "1c29f57e4637d506337e10f6fc2b99cec4608b48",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-service/src/main/java/org/apache/openmeetings/service/user/UserManager.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-service/src/main/java/org/apache/openmeetings/service/user/UserManager.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 15,
                "filename": "openmeetings-service/src/main/java/org/apache/openmeetings/service/user/UserManager.java",
                "patch": "@@ -84,7 +84,7 @@\n \tprivate EntityManager em;\n \n \t@Autowired\n-\tprivate SessiondataDao sessiondataDao;\n+\tprivate SessiondataDao sessionDao;\n \t@Autowired\n \tprivate ConfigurationDao cfgDao;\n \t@Autowired\n@@ -143,14 +143,13 @@\n \tpublic User loginUserByRemoteHash(String SID, String remoteHash) {\n \t\ttry {\n \n-\t\t\tSessiondata sessionData = sessiondataDao\n-\t\t\t\t\t.get(remoteHash);\n+\t\t\tSessiondata sessionData = sessionDao.check(remoteHash);\n \n \t\t\tif (sessionData != null) {\n \n \t\t\t\tUser u = userDao.get(sessionData.getUserId());\n \n-\t\t\t\tsessiondataDao.updateUserWithoutSession(SID, u.getId());\n+\t\t\t\tsessionDao.updateUserWithoutSession(SID, u.getId());\n \n \t\t\t\treturn u;\n \t\t\t}\n@@ -163,7 +162,7 @@ public User loginUserByRemoteHash(String SID, String remoteHash) {\n \n \t@Override\n \tpublic Long logout(String SID, long userId) {\n-\t\tsessiondataDao.updateUser(SID, null, false, 0);\n+\t\tsessionDao.updateUser(SID, null, false, 0);\n \t\treturn -12L;\n \t}\n \n@@ -412,19 +411,18 @@ public Long registerUserInit(Set<Right> rights, String login, String password, S\n \t}\n \n \t/**\n-\t * @param admin\n+\t * @param sid\n \t * @param room_id\n \t * @return\n \t */\n \t@Override\n-\tpublic boolean kickUserByStreamId(String SID, Long room_id) {\n+\tpublic boolean kickUserByStreamId(String sid, Long room_id) {\n \t\ttry {\n-\t\t\tLong users_id = sessiondataDao.check(SID);\n-\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n \t\t\t// admins only\n-\t\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(users_id))) {\n+\t\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(sd.getUserId()))) {\n \n-\t\t\t\tsessiondataDao.clearSessionByRoomId(room_id);\n+\t\t\t\tsessionDao.clearSessionByRoomId(room_id);\n \n \t\t\t\tfor (Client rcl : sessionManager.getClientListByRoom(room_id)) {\n \t\t\t\t\tif (rcl == null) {\n@@ -450,12 +448,11 @@ public boolean kickUserByStreamId(String SID, Long room_id) {\n \t}\n \n \t@Override\n-\tpublic boolean kickUserByPublicSID(String SID, String publicSID) {\n+\tpublic boolean kickUserByPublicSID(String sid, String publicSID) {\n \t\ttry {\n-\t\t\tLong userId = sessiondataDao.check(SID);\n-\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n \t\t\t// admins only\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tClient rcl = sessionManager.getClientByPublicSID(publicSID, null);\n \n \t\t\t\tif (rcl == null) {",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-service/src/main/java/org/apache/openmeetings/service/user/UserManager.java",
                "sha": "58f58c23314c4ba7e3c184fac47e616a8a3bc52e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-web/src/main/java/org/apache/openmeetings/web/app/Application.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-web/src/main/java/org/apache/openmeetings/web/app/Application.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 2,
                "filename": "openmeetings-web/src/main/java/org/apache/openmeetings/web/app/Application.java",
                "patch": "@@ -219,9 +219,12 @@ public static void removeOnlineUser(Client c) {\n \t\n \t@Override\n \tpublic org.apache.openmeetings.db.entity.room.Client updateClient(org.apache.openmeetings.db.entity.room.Client rcl) {\n+\t\tif (rcl == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\tClient client = getOnlineClient(rcl.getPublicSID());\n-\t\tif (rcl == null || client == null) {\n-\t\t\treturn rcl;\n+\t\tif (client == null) {\n+\t\t\treturn null;\n \t\t}\n \t\trcl.setIsSuperModerator(client.hasRight(Right.superModerator));\n \t\trcl.setIsMod(client.hasRight(Right.moderator));",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-web/src/main/java/org/apache/openmeetings/web/app/Application.java",
                "sha": "bd91e077238af20311a26a6806a06c3756e5f30a",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-web/src/main/java/org/apache/openmeetings/web/app/WebSession.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-web/src/main/java/org/apache/openmeetings/web/app/WebSession.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 9,
                "filename": "openmeetings-web/src/main/java/org/apache/openmeetings/web/app/WebSession.java",
                "patch": "@@ -202,8 +202,8 @@ public boolean signIn(String secureHash, boolean markUsed) {\n \t\t}\n \t\tif (!soapLogin.isUsed() || soapLogin.getAllowSameURLMultipleTimes()) {\n \t\t\tSessiondataDao sessionDao = getBean(SessiondataDao.class);\n-\t\t\tSessiondata sd = sessionDao.get(soapLogin.getSessionHash());\n-\t\t\tif (sd != null && sd.getXml() != null) {\n+\t\t\tSessiondata sd = sessionDao.check(soapLogin.getSessionHash());\n+\t\t\tif (sd.getXml() != null) {\n \t\t\t\tRemoteSessionObject remoteUser = RemoteSessionObject.fromXml(sd.getXml());\n \t\t\t\tif (remoteUser != null && !Strings.isEmpty(remoteUser.getExternalUserId())) {\n \t\t\t\t\tUserDao userDao = getBean(UserDao.class);\n@@ -330,17 +330,16 @@ public static long getLanguage() {\n \t\n \tpublic String getValidatedSid() {\n \t\tSessiondataDao sessionDao = getBean(SessiondataDao.class);\n-\t\tLong _userId = sessionDao.check(SID);\n-\t\tif (_userId == null || !_userId.equals(userId)) {\n-\t\t\tSessiondata sessionData = sessionDao.get(SID);\n-\t\t\tif (sessionData == null) {\n-\t\t\t\tsessionData = sessionDao.create();\n+\t\tSessiondata sd = sessionDao.check(SID);\n+\t\tif (sd.getUserId() == null || !sd.getUserId().equals(userId)) {\n+\t\t\tif (sd.getId() == null) {\n+\t\t\t\tsd = sessionDao.create();\n \t\t\t}\n-\t\t\tif (!sessionDao.updateUser(sessionData.getSessionId(), userId, false, languageId)) {\n+\t\t\tif (!sessionDao.updateUser(sd.getSessionId(), userId, false, languageId)) {\n \t\t\t\t//something bad, force user to re-login\n \t\t\t\tinvalidate();\n \t\t\t} else {\n-\t\t\t\tSID = sessionData.getSessionId();\n+\t\t\t\tSID = sd.getSessionId();\n \t\t\t}\n \t\t}\n \t\treturn SID;",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-web/src/main/java/org/apache/openmeetings/web/app/WebSession.java",
                "sha": "8f87e209d0d4eb52acca2a5f4911f5dfa305143f",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/CalendarWebService.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/CalendarWebService.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 24,
                "filename": "openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/CalendarWebService.java",
                "patch": "@@ -43,6 +43,7 @@\n import org.apache.openmeetings.db.dao.user.UserDao;\n import org.apache.openmeetings.db.dto.calendar.AppointmentDTO;\n import org.apache.openmeetings.db.entity.calendar.Appointment;\n+import org.apache.openmeetings.db.entity.server.Sessiondata;\n import org.apache.openmeetings.db.entity.user.User.Right;\n import org.apache.openmeetings.db.util.AuthLevelUtil;\n import org.apache.openmeetings.webservice.error.ServiceException;\n@@ -92,9 +93,9 @@\n \t{\n \t\tlog.debug(\"range : startdate - \" + start.getTime() + \", enddate - \" + end.getTime());\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n-\t\t\t\treturn AppointmentDTO.list(appointmentDao.getInRange(userId, start.getTime(), end.getTime()));\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n+\t\t\t\treturn AppointmentDTO.list(appointmentDao.getInRange(sd.getUserId(), start.getTime(), end.getTime()));\n \t\t\t} else {\n \t\t\t\tthrow new ServiceException(\"Insufficient permissions\"); //TODO code -26\n \t\t\t}\n@@ -132,8 +133,8 @@\n \t{\n \t\tlog.debug(\"rangeForUser : startdate - \" + start.getTime() + \", enddate - \" + end.getTime());\n \t\ttry {\n-\t\t\tLong authUserId = sessionDao.check(sid);\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(authUserId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\treturn AppointmentDTO.list(appointmentDao.getInRange(userid, start.getTime(), end.getTime()));\n \t\t\t} else {\n \t\t\t\tthrow new ServiceException(\"Insufficient permissions\"); //TODO code -26\n@@ -158,9 +159,9 @@\n \t@Path(\"/next\")\n \tpublic AppointmentDTO next(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n-\t\t\t\tAppointment a = appointmentDao.getNext(userId, new Date());\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n+\t\t\t\tAppointment a = appointmentDao.getNext(sd.getUserId(), new Date());\n \t\t\t\treturn a == null ? null : new AppointmentDTO(a);\n \t\t\t} else {\n \t\t\t\tthrow new ServiceException(\"Insufficient permissions\"); //TODO code -26\n@@ -188,8 +189,8 @@ public AppointmentDTO next(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid)\n \t@Path(\"/next/{userid}\")\n \tpublic AppointmentDTO nextForUser(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid, @PathParam(\"userid\") @WebParam(name=\"userid\") long userid) throws ServiceException {\n \t\ttry {\n-\t\t\tLong authUserId = sessionDao.check(sid);\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(authUserId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tAppointment a = appointmentDao.getNext(userid, new Date());\n \t\t\t\treturn a == null ? null : new AppointmentDTO(a);\n \t\t\t} else {\n@@ -216,9 +217,9 @@ public AppointmentDTO nextForUser(@QueryParam(\"sid\") @WebParam(name=\"sid\") Strin\n \t@Path(\"/room/{roomid}\")\n \tpublic AppointmentDTO getByRoom(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid, @PathParam(\"roomid\") @WebParam(name=\"roomid\") long roomid) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n-\t\t\t\tAppointment app = appointmentDao.getByRoom(userId, roomid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n+\t\t\t\tAppointment app = appointmentDao.getByRoom(sd.getUserId(), roomid);\n \t\t\t\tif (app != null) {\n \t\t\t\t\treturn new AppointmentDTO(app);\n \t\t\t\t}\n@@ -249,9 +250,9 @@ public AppointmentDTO getByRoom(@QueryParam(\"sid\") @WebParam(name=\"sid\") String\n \t@Path(\"/title/{title}\")\n \tpublic List<AppointmentDTO> getByTitle(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid, @PathParam(\"title\") @WebParam(name=\"title\") String title) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n-\t\t\t\treturn AppointmentDTO.list(appointmentDao.searchAppointmentsByTitle(userId, title));\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n+\t\t\t\treturn AppointmentDTO.list(appointmentDao.searchAppointmentsByTitle(sd.getUserId(), title));\n \t\t\t} else {\n \t\t\t\tthrow new ServiceException(\"Insufficient permissions\"); //TODO code -26\n \t\t\t}\n@@ -281,12 +282,12 @@ public AppointmentDTO save(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid,\n \t\tlog.debug(\"save SID:\" + sid);\n \n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\t\t\tlog.debug(\"save userId:\" + userId);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tlog.debug(\"save userId:\" + sd);\n \n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tAppointment a = appointment.get(userDao, appointmentDao);\n-\t\t\t\treturn new AppointmentDTO(appointmentDao.update(a, userId));\n+\t\t\t\treturn new AppointmentDTO(appointmentDao.update(a, sd.getUserId()));\n \t\t\t} else {\n \t\t\t\tlog.error(\"save : wrong user level\");\n \t\t\t\tthrow new ServiceException(\"Insufficient permissions\"); //TODO code -26\n@@ -318,21 +319,21 @@ public AppointmentDTO save(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid,\n \t@Path(\"/{id}\")\n \tpublic void delete(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid, @PathParam(\"id\") @WebParam(name=\"id\") Long id) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\t\t\tSet<Right> rights = userDao.getRights(userId);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tSet<Right> rights = userDao.getRights(sd.getUserId());\n \n \t\t\tAppointment a = appointmentDao.get(id);\n \t\t\tif (AuthLevelUtil.hasWebServiceLevel(rights) || AuthLevelUtil.hasAdminLevel(rights)) {\n \t\t\t\t// fine\n \t\t\t} else if (AuthLevelUtil.hasUserLevel(rights)) {\n \t\t\t\t// check if the appointment belongs to the current user\n-\t\t\t\tif (!a.getOwner().getId().equals(userId)) {\n+\t\t\t\tif (!a.getOwner().getId().equals(sd.getUserId())) {\n \t\t\t\t\tthrow new ServiceException(\"The Appointment cannot be updated by the given user\");\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tthrow new ServiceException(\"Not allowed to preform that action, Authenticate the SID first\");\n \t\t\t}\n-\t\t\tappointmentDao.delete(a, userId);\n+\t\t\tappointmentDao.delete(a, sd.getUserId());\n \t\t} catch (ServiceException err) {\n \t\t\tthrow err;\n \t\t} catch (Exception err) {",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/CalendarWebService.java",
                "sha": "e68cf130d23320080fddca870dcdb801dd8e39a4",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/ErrorWebService.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/ErrorWebService.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 6,
                "filename": "openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/ErrorWebService.java",
                "patch": "@@ -38,6 +38,7 @@\n import org.apache.openmeetings.db.dao.server.SessiondataDao;\n import org.apache.openmeetings.db.dto.basic.ServiceResult;\n import org.apache.openmeetings.db.entity.basic.ErrorValue;\n+import org.apache.openmeetings.db.entity.server.Sessiondata;\n import org.red5.logging.Red5LoggerFactory;\n import org.slf4j.Logger;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -105,11 +106,11 @@ public ServiceResult get(@WebParam(name=\"id\") @PathParam(\"id\") long id, @WebPara\n \t@POST\n \t@Path(\"/report/\")\n \tpublic void report(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @WebParam(name=\"message\") @QueryParam(\"message\") String message) {\n-    \tif (sid != null && message != null) {\n-\t    \tLong userId = sessionDao.check(sid);\n-\t    \tif (userId != null && userId != 0) {\n-\t    \t\tlog.error(\"[CLIENT MESSAGE] \" + message);\n-\t    \t}\n-    \t}\n+\t\tif (sid != null && message != null) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (sd.getId() != null) {\n+\t\t\t\tlog.error(\"[CLIENT MESSAGE] \" + message);\n+\t\t\t}\n+\t\t}\n \t}\n }",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/ErrorWebService.java",
                "sha": "87599ea3a22c80efec6225b446662a4d3ffeef59",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/FileWebService.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/FileWebService.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 17,
                "filename": "openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/FileWebService.java",
                "patch": "@@ -54,6 +54,7 @@\n import org.apache.openmeetings.db.dto.file.FileExplorerObject;\n import org.apache.openmeetings.db.dto.file.LibraryPresentation;\n import org.apache.openmeetings.db.entity.file.FileExplorerItem;\n+import org.apache.openmeetings.db.entity.server.Sessiondata;\n import org.apache.openmeetings.db.entity.user.User.Right;\n import org.apache.openmeetings.db.util.AuthLevelUtil;\n import org.apache.openmeetings.util.OmFileHelper;\n@@ -103,12 +104,13 @@\n \t@Path(\"/{id}\")\n \tpublic ServiceResult delete(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid, @PathParam(\"id\") @WebParam(name=\"id\") Long id) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n \n \t\t\tFileExplorerItem f = fileDao.get(id);\n \t\t\tif (f == null) {\n \t\t\t\treturn new ServiceResult(-1L, \"Bad id\", Type.ERROR);\n \t\t\t}\n+\t\t\tLong userId = sd.getUserId();\n \t\t\tSet<Right> rights = userDao.getRights(userId);\n \t\t\tif (AuthLevelUtil.hasWebServiceLevel(rights)\n \t\t\t\t|| (AuthLevelUtil.hasUserLevel(rights) && userId.equals(f.getOwnerId())))\n@@ -145,9 +147,9 @@ public ServiceResult deleteExternal(\n \t\t\t) throws ServiceException\n \t{\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n \t\t\t\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tFileExplorerItem f = fileDao.get(externalId, externalType);\n \t\t\t\tfileDao.delete(f);\n \t\t\t\treturn new ServiceResult(f.getId(), \"Deleted\", Type.SUCCESS);\n@@ -181,7 +183,8 @@ public FileExplorerItemDTO add(@WebParam(name=\"sid\") @QueryParam(\"sid\") String s\n \t\t\t) throws ServiceException\n \t{\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tLong userId = sd.getUserId();\n \n \t\t\tFileExplorerItem f = file == null ? null : file.get();\n \t\t\tif (f == null || f.getId() != null) {\n@@ -219,20 +222,19 @@ public FileExplorerItemDTO add(@WebParam(name=\"sid\") @QueryParam(\"sid\") String s\n \t/**\n \t * Get a LibraryPresentation-Object for a certain file\n \t * \n-\t * @param SID\n+\t * @param sid\n+\t *            The SID of the User. This SID must be marked as logged in\n \t * @param parentFolder\n \t * \n \t * @return - LibraryPresentation-Object for a certain file\n \t * @throws ServiceException\n \t */\n-\tpublic LibraryPresentation getPresentationPreviewFileExplorer(String SID, String parentFolder)\n+\tpublic LibraryPresentation getPresentationPreviewFileExplorer(String sid, String parentFolder)\n \t\t\tthrows ServiceException {\n \n \t\ttry {\n-\n-\t\t\tLong userId = sessionDao.check(SID);\n-\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \n \t\t\t\tFile working_dir = new File(OmFileHelper.getUploadProfilesDir(), parentFolder);\n \t\t\t\tlog.debug(\"############# working_dir : \" + working_dir);\n@@ -269,7 +271,7 @@ private long getSize(List<FileExplorerItem> list) {\n \t * \n \t * @param sid\n \t *            The SID of the User. This SID must be marked as logged in\n-\t * @param id\n+\t * @param roomId\n \t *            Room Id\n \t * @return - File Explorer Object by a given Room\n \t * @throws ServiceException\n@@ -282,7 +284,8 @@ public FileExplorerObject getRoom(@WebParam(name=\"sid\") @QueryParam(\"sid\") Strin\n \t\t\t) throws ServiceException\n \t{\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tLong userId = sd.getUserId();\n \n \t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n \t\t\t\tlog.debug(\"roomId \" + roomId);\n@@ -331,7 +334,8 @@ public FileExplorerObject getRoom(@WebParam(name=\"sid\") @QueryParam(\"sid\") Strin\n \t\t\t) throws ServiceException\n \t{\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tLong userId = sd.getUserId();\n \n \t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n \t\t\t\tlog.debug(\"getRoomByParent \" + parentId);\n@@ -379,9 +383,8 @@ public FileExplorerItemDTO rename(@WebParam(name=\"sid\") @QueryParam(\"sid\") Strin\n \t\t\t, @WebParam(name=\"name\") @PathParam(\"name\") String name) throws ServiceException\n \t{\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\t// FIXME TODO: check if this user is allowed to change this file\n \n \t\t\t\tlog.debug(\"rename \" + id);\n@@ -419,7 +422,8 @@ public FileExplorerItemDTO move(@WebParam(name=\"sid\") @QueryParam(\"sid\") String\n \t\t\t, @WebParam(name=\"parentid\") @PathParam(\"parentid\") long parentId) throws ServiceException\n \t{\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tLong userId = sd.getUserId();\n \t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n \t\t\t\t// FIXME TODO A test is required that checks if the user is allowed to move the file\n \t\t\t\tlog.debug(\"move \" + id);",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/FileWebService.java",
                "sha": "8ba3dd74dba0e21cc4e0f3e85f53c205bdb054e0",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/GroupWebService.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/GroupWebService.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 9,
                "filename": "openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/GroupWebService.java",
                "patch": "@@ -49,6 +49,7 @@\n import org.apache.openmeetings.db.dto.user.UserSearchResult;\n import org.apache.openmeetings.db.entity.room.Room;\n import org.apache.openmeetings.db.entity.room.RoomGroup;\n+import org.apache.openmeetings.db.entity.server.Sessiondata;\n import org.apache.openmeetings.db.entity.user.Group;\n import org.apache.openmeetings.db.entity.user.GroupUser;\n import org.apache.openmeetings.db.entity.user.User;\n@@ -97,7 +98,8 @@\n \t@POST\n \t@Path(\"/\")\n \tpublic ServiceResult add(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid, @QueryParam(\"name\") @WebParam(name=\"name\") String name) throws ServiceException {\n-\t\tLong userId = sessionDao.check(sid);\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tLong userId = sd.getUserId();\n \t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n \t\t\tGroup o = new Group();\n \t\t\to.setName(name);\n@@ -119,8 +121,8 @@ public ServiceResult add(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid, @Q\n \t@GET\n \t@Path(\"/\")\n \tpublic List<Group> get(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid) throws ServiceException {\n-\t\tLong userId = sessionDao.check(sid);\n-\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\treturn groupDao.get(0, Integer.MAX_VALUE);\n \t\t} else {\n \t\t\tlog.error(\"Insufficient permissions\");\n@@ -149,7 +151,8 @@ public ServiceResult addUser(\n \t\t\t) throws ServiceException\n \t{\n \t\ttry {\n-\t\t\tLong authUserId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tLong authUserId = sd.getUserId();\n \t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(authUserId))) {\n \t\t\t\tif (!groupUserDao.isUserInGroup(id, userid)) {\n \t\t\t\t\tUser u = userDao.get(userid);\n@@ -187,7 +190,8 @@ public ServiceResult removeUser(\n \t\t\t) throws ServiceException\n \t{\n \t\ttry {\n-\t\t\tLong authUserId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tLong authUserId = sd.getUserId();\n \t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(authUserId))) {\n \t\t\t\tif (groupUserDao.isUserInGroup(id, userid)) {\n \t\t\t\t\tUser u = userDao.get(userid);\n@@ -227,7 +231,8 @@ public ServiceResult addRoom(\n \t\t\t) throws ServiceException\n \t{\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tLong userId = sd.getUserId();\n \t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n \t\t\t\tRoom r = roomDao.get(roomid);\n \t\t\t\tif (r != null) {\n@@ -285,10 +290,10 @@ public UserSearchResult getUsers(\n \t\t\t) throws ServiceException\n \t{\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n \t\t\tSearchResult<User> result = new SearchResult<User>();\n \t\t\tresult.setObjectName(User.class.getName());\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tresult.setRecords(groupUserDao.count(id));\n \t\t\t\tresult.setResult(new ArrayList<User>());\n \t\t\t\tfor (GroupUser ou : groupUserDao.get(id, null, start, max, orderby + \" \" + (asc ? \"ASC\" : \"DESC\"))) {\n@@ -320,7 +325,8 @@ public UserSearchResult getUsers(\n \t@Path(\"/{id}\")\n \tpublic ServiceResult delete(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @WebParam(name=\"id\") @PathParam(\"id\") long id) throws ServiceException {\n \t\ttry {\n-\t\t\tLong authUserId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tLong authUserId = sd.getUserId();\n \n \t\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(authUserId))) {\n \t\t\t\tgroupDao.delete(groupDao.get(id), authUserId);",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/GroupWebService.java",
                "sha": "617b98697f607678cdc9b489e07e1e22c6ed51e8",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/RecordingWebService.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/RecordingWebService.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 12,
                "filename": "openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/RecordingWebService.java",
                "patch": "@@ -39,6 +39,7 @@\n import org.apache.openmeetings.db.dao.server.SessiondataDao;\n import org.apache.openmeetings.db.dao.user.UserDao;\n import org.apache.openmeetings.db.dto.record.RecordingDTO;\n+import org.apache.openmeetings.db.entity.server.Sessiondata;\n import org.apache.openmeetings.db.util.AuthLevelUtil;\n import org.apache.openmeetings.webservice.error.ServiceException;\n import org.red5.logging.Red5LoggerFactory;\n@@ -79,9 +80,8 @@\n \t@Path(\"/{id}\")\n \tpublic void delete(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid, @PathParam(\"id\") @WebParam(name=\"id\") Long id) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\trecordingDao.delete(recordingDao.get(id));\n \t\t\t} else {\n \t\t\t\tthrow new ServiceException(\"Not allowed to preform that action, Authenticate the SID first\");\n@@ -111,9 +111,8 @@ public void delete(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid, @PathPar\n \t\t\t, @PathParam(\"externaltype\") @WebParam(name=\"externaltype\") String externalType\n \t\t\t, @PathParam(\"externalid\") @WebParam(name=\"externalid\") String externalId) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\treturn RecordingDTO.list(recordingDao.getByExternalId(externalId, externalType));\n \t\t\t} else {\n \t\t\t\tthrow new ServiceException(\"Not allowed to preform that action, Authenticate the SID first\");\n@@ -142,9 +141,8 @@ public void delete(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid, @PathPar\n \tpublic List<RecordingDTO> getExternalByType(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid\n \t\t\t, @PathParam(\"externaltype\") @WebParam(name=\"externaltype\") String externalType) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\treturn RecordingDTO.list(recordingDao.getByExternalType(externalType));\n \t\t\t} else {\n \t\t\t\tthrow new ServiceException(\"Not allowed to preform that action, Authenticate the SID first\");\n@@ -173,9 +171,8 @@ public void delete(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid, @PathPar\n \tpublic List<RecordingDTO> getExternalByRoom(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid\n \t\t\t, @PathParam(\"roomid\") @WebParam(name=\"roomid\") Long roomId) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\treturn RecordingDTO.list(recordingDao.getByRoomId(roomId));\n \t\t\t} else {\n \t\t\t\tthrow new ServiceException(\"Not allowed to preform that action, Authenticate the SID first\");",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/RecordingWebService.java",
                "sha": "36b76f68b31070f54aec6c0533adcbf90347f163",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/RoomWebService.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/RoomWebService.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 15,
                "filename": "openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/RoomWebService.java",
                "patch": "@@ -53,6 +53,7 @@\n import org.apache.openmeetings.db.dto.room.RoomDTO;\n import org.apache.openmeetings.db.entity.room.Invitation;\n import org.apache.openmeetings.db.entity.room.Invitation.MessageType;\n+import org.apache.openmeetings.db.entity.server.Sessiondata;\n import org.apache.openmeetings.db.entity.room.Room;\n import org.apache.openmeetings.db.util.AuthLevelUtil;\n import org.apache.openmeetings.util.message.RoomMessage;\n@@ -109,9 +110,8 @@\n \t@Path(\"/public/{type}\")\n \tpublic List<RoomDTO> getPublic(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid, @PathParam(\"type\") @WebParam(name=\"type\") String type) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\n-\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\treturn RoomDTO.list(roomDao.getPublicRooms(Room.Type.valueOf(type)));\n \t\t\t} else {\n \t\t\t\tthrow new ServiceException(\"Insufficient permissions\"); //TODO code -26\n@@ -135,8 +135,8 @@\n \t@GET\n \t@Path(\"/{id}\")\n \tpublic RoomDTO getRoomById(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid, @PathParam(\"id\") @WebParam(name=\"id\") Long id) throws ServiceException {\n-\t\tLong userId = sessionDao.check(sid);\n-\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\treturn new RoomDTO(roomDao.get(id));\n \t\t} else {\n \t\t\tthrow new ServiceException(\"Insufficient permissions\"); //TODO code -26\n@@ -172,7 +172,8 @@ public RoomDTO getExternal(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid\n \t\t\t, @PathParam(\"externalid\") @WebParam(name=\"externalid\") Long externalId\n \t\t\t, @WebParam(name=\"room\") @QueryParam(\"room\") RoomDTO room) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tLong userId = sd.getUserId();\n \t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n \t\t\t\tRoom r = roomDao.getExternal(Room.Type.valueOf(type), externalType, externalId);\n \t\t\t\tif (r == null) {\n@@ -209,7 +210,8 @@ public RoomDTO getExternal(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid\n \t@Path(\"/\")\n \tpublic RoomDTO add(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @WebParam(name=\"room\") @FormParam(\"room\") RoomDTO room) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tLong userId = sd.getUserId();\n \t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n \t\t\t\tRoom r = room.get();\n \t\t\t\tr = roomDao.update(r, userId);\n@@ -273,7 +275,8 @@ public RoomDTO update(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @Path\n \t@DELETE\n \t@Path(\"/{id}\")\n \tpublic ServiceResult delete(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @WebParam(name=\"id\") @PathParam(\"id\") long id) throws ServiceException {\n-\t\tLong userId = sessionDao.check(sid);\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tLong userId = sd.getUserId();\n \t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n \t\t\tRoom r = roomDao.get(id);\n \t\t\tif (r != null) {\n@@ -307,7 +310,8 @@ public ServiceResult delete(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid,\n \t@Path(\"/close/{id}\")\n \tpublic ServiceResult close(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @WebParam(name=\"id\") @PathParam(\"id\") long id) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tLong userId = sd.getUserId();\n \t\t\tlog.debug(\"close \" + id);\n \n \t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n@@ -351,7 +355,8 @@ public ServiceResult close(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid,\n \t@Path(\"/open/{id}\")\n \tpublic ServiceResult open(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @WebParam(name=\"id\") @PathParam(\"id\") long id) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tLong userId = sd.getUserId();\n \t\t\tlog.debug(\"open \" + id);\n \n \t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n@@ -388,8 +393,8 @@ public ServiceResult open(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @\n \t@Path(\"/kick/{id}\")\n \tpublic ServiceResult kick(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @WebParam(name=\"id\") @PathParam(\"id\") long id) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tboolean result = userManager.kickUserByStreamId(sid, id);\n \t\t\t\treturn new ServiceResult(result ? 1L : 0L, \"Kicked\", Type.SUCCESS);\n \t\t\t} else {\n@@ -417,8 +422,8 @@ public ServiceResult kick(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @\n \tpublic List<RoomCountBean> counters(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @WebParam(name=\"id\") @QueryParam(\"id\") List<Long> ids) throws ServiceException {\n \t\tList<RoomCountBean> roomBeans = new ArrayList<RoomCountBean>();\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tList<Room> rooms = roomDao.get(ids);\n \n \t\t\t\tfor (Room room : rooms) {\n@@ -460,7 +465,8 @@ private ServiceResult hash(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid\n \t\t\t) throws ServiceException\n \t{\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tLong userId = sd.getUserId();\n \t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n \t\t\t\tInvitation i = invite.get(userId, userDao, roomDao);\n \t\t\t\ti = invitationDao.update(i);",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/RoomWebService.java",
                "sha": "4c7e8ee759eba094c097834591f621344a8f3849",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/ServerWebService.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/ServerWebService.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 6,
                "filename": "openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/ServerWebService.java",
                "patch": "@@ -43,6 +43,7 @@\n import org.apache.openmeetings.db.dto.basic.ServiceResult.Type;\r\n import org.apache.openmeetings.db.dto.server.ServerDTO;\r\n import org.apache.openmeetings.db.entity.server.Server;\r\n+import org.apache.openmeetings.db.entity.server.Sessiondata;\r\n import org.apache.openmeetings.db.util.AuthLevelUtil;\r\n import org.apache.openmeetings.webservice.error.ServiceException;\r\n import org.red5.logging.Red5LoggerFactory;\r\n@@ -90,9 +91,9 @@\n \t\t\t) throws ServiceException\r\n \t{\r\n \t\tlog.debug(\"getServers enter\");\r\n-\t\tLong userId = sessionDao.check(sid);\r\n+\t\tSessiondata sd = sessionDao.check(sid);\r\n \r\n-\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\r\n+\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\r\n \t\t\treturn ServerDTO.list(serverDao.get(start, max));\r\n \t\t} else {\r\n \t\t\tlog.warn(\"Insuffisient permissions\");\r\n@@ -113,9 +114,9 @@\n \t@Path(\"/count\")\r\n \tpublic long count(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid) throws ServiceException {\r\n \t\tlog.debug(\"getServerCount enter\");\r\n-\t\tLong userId = sessionDao.check(sid);\r\n+\t\tSessiondata sd = sessionDao.check(sid);\r\n \r\n-\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\r\n+\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\r\n \t\t\treturn serverDao.count();\r\n \t\t} else {\r\n \t\t\tthrow new ServiceException(\"Insufficient permissions\"); //TODO code -26\r\n@@ -136,7 +137,8 @@ public long count(@QueryParam(\"sid\") @WebParam(name=\"sid\") String sid) throws Se\n \t@Path(\"/\")\r\n \tpublic ServerDTO add(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @WebParam(name=\"server\") @QueryParam(\"server\") ServerDTO server) throws ServiceException {\r\n \t\tlog.debug(\"saveServerCount enter\");\r\n-\t\tLong userId = sessionDao.check(sid);\r\n+\t\tSessiondata sd = sessionDao.check(sid);\r\n+\t\tLong userId = sd.getUserId();\r\n \t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\r\n \t\t\tServer s = server.get();\r\n \t\t\treturn new ServerDTO(serverDao.update(s, userId));\r\n@@ -160,7 +162,8 @@ public ServerDTO add(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @WebPa\n \t@Path(\"/{id}\")\r\n \tpublic ServiceResult delete(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @WebParam(name=\"id\") @PathParam(\"id\") long id) throws ServiceException {\r\n \t\tlog.debug(\"saveServerCount enter\");\r\n-\t\tLong userId = sessionDao.check(sid);\r\n+\t\tSessiondata sd = sessionDao.check(sid);\r\n+\t\tLong userId = sd.getUserId();\r\n \r\n \t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\r\n \t\t\tServer s = serverDao.get(id);\r",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/ServerWebService.java",
                "sha": "949c79ed4c6e07cce71626d2a61d4dea720dd128",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/openmeetings/blob/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/UserWebService.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/UserWebService.java?ref=3ce3cc1eb62528617e3bbafac36f06c6a6cea087",
                "deletions": 23,
                "filename": "openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/UserWebService.java",
                "patch": "@@ -132,9 +132,8 @@ public ServiceResult login(@WebParam(name=\"user\") @QueryParam(\"user\") String use\n \t@Path(\"/\")\n \tpublic List<UserDTO> get(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid) throws ServiceException {\n \t\ttry {\n-\t\t\tLong authUserId = sessionDao.check(sid);\n-\t\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(authUserId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\treturn UserDTO.list(userDao.getAllUsers());\n \t\t\t} else {\n \t\t\t\tthrow new ServiceException(\"Insufficient permissions\"); //TODO code -26\n@@ -159,9 +158,8 @@ public UserDTO add(\n \t\t\t) throws ServiceException\n \t{\n \t\ttry {\n-\t\t\tLong authUserId = sessionDao.check(sid);\n-\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(authUserId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tUser testUser = userDao.getExternalUser(user.getExternalId(), user.getExternalType());\n \n \t\t\t\tif (testUser != null) {\n@@ -200,7 +198,7 @@ public UserDTO add(\n \t\t\t\t\tu.setExternalType(user.getExternalType());\n \t\t\t\t}\n \n-\t\t\t\tu = userDao.update(u, authUserId);\n+\t\t\t\tu = userDao.update(u, sd.getUserId());\n \n \t\t\t\treturn new UserDTO(u);\n \t\t\t} else {\n@@ -223,10 +221,9 @@ public UserDTO add(\n \t@Path(\"/{id}\")\n \tpublic ServiceResult delete(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @WebParam(name=\"id\") @PathParam(\"id\") long id) throws ServiceException {\n \t\ttry {\n-\t\t\tLong authUserId = sessionDao.check(sid);\n-\n-\t\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(authUserId))) {\n-\t\t\t\tuserDao.delete(userDao.get(id), authUserId);\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(sd.getUserId()))) {\n+\t\t\t\tuserDao.delete(userDao.get(id), sd.getUserId());\n \n \t\t\t\treturn new ServiceResult(id, \"Deleted\", Type.SUCCESS);\n \t\t\t} else {\n@@ -251,13 +248,12 @@ public ServiceResult deleteExternal(\n \t\t\t) throws ServiceException\n \t{\n \t\ttry {\n-\t\t\tLong authUserId = sessionDao.check(sid);\n-\n-\t\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(authUserId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasAdminLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tUser user = userDao.getExternalUser(externalId, externalType);\n \n \t\t\t\t// Setting user deleted\n-\t\t\t\tuserDao.delete(user, authUserId);\n+\t\t\t\tuserDao.delete(user, sd.getUserId());\n \n \t\t\t\treturn new ServiceResult(user.getId(), \"Deleted\", Type.SUCCESS);\n \t\t\t} else {\n@@ -283,8 +279,8 @@ public ServiceResult getRoomHash(\n \t\t\t) throws ServiceException\n \t{\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tRemoteSessionObject remoteSessionObject = new RemoteSessionObject(\n \t\t\t\t\t\tuser.getLogin(), user.getFirstname(), user.getLastname()\n \t\t\t\t\t\t, user.getProfilePictureUrl(), user.getEmail()\n@@ -306,7 +302,6 @@ public ServiceResult getRoomHash(\n \t\t\t\t\t\t);\n \n \t\t\t\tif (hash != null) {\n-\t\t\t\t\tSessiondata sd = sessionDao.get(sid);\n \t\t\t\t\tif (options.isAllowSameURLMultipleTimes()) {\n \t\t\t\t\t\tsd.setPermanent(true);\n \t\t\t\t\t}\n@@ -333,8 +328,8 @@ public ServiceResult getRoomHash(\n \t@Path(\"/kick/{publicsid}\")\n \tpublic ServiceResult kick(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @WebParam(name=\"publicsid\") @PathParam(\"publicsid\") String publicSID) throws ServiceException {\n \t\ttry {\n-\t\t\tLong userId = sessionDao.check(sid);\n-\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(userId))) {\n+\t\t\tSessiondata sd = sessionDao.check(sid);\n+\t\t\tif (AuthLevelUtil.hasWebServiceLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\t\tBoolean success = userManagement.kickUserByPublicSID(sid, publicSID);\n \t\n \t\t\t\treturn new ServiceResult(Boolean.TRUE.equals(success) ? 1L : 0L, Boolean.TRUE.equals(success) ? \"deleted\" : \"not deleted\", Type.SUCCESS);\n@@ -355,9 +350,8 @@ public ServiceResult kick(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @\n \t@GET\n \t@Path(\"/count/{roomid}\")\n \tpublic int count(@WebParam(name=\"sid\") @QueryParam(\"sid\") String sid, @WebParam(name=\"roomid\") @PathParam(\"roomid\") Long roomId) {\n-\t\tLong userId = sessionDao.check(sid);\n-\n-\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(userId))) {\n+\t\tSessiondata sd = sessionDao.check(sid);\n+\t\tif (AuthLevelUtil.hasUserLevel(userDao.getRights(sd.getUserId()))) {\n \t\t\treturn conferenceService.getRoomClientsListByRoomId(roomId).size();\n \t\t}\n \t\treturn -1;",
                "raw_url": "https://github.com/apache/openmeetings/raw/3ce3cc1eb62528617e3bbafac36f06c6a6cea087/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/UserWebService.java",
                "sha": "f06e06c5120b7e292368630b39c23c08c57de5b6",
                "status": "modified"
            }
        ],
        "message": "no jira: potential NPEs are fixed",
        "parent": "https://github.com/apache/openmeetings/commit/2ded8aad83e8328a551446b4d7b398459c18d177",
        "patched_files": [
            "UserService.java",
            "WebSession.java"
        ],
        "repo": "openmeetings",
        "unit_tests": [
            "TestUserService.java",
            "TestWebSession.java"
        ]
    },
    "openmeetings_b075156": {
        "bug_id": "openmeetings_b075156",
        "commit": "https://github.com/apache/openmeetings/commit/b075156565dc5e9c4f71ef49b95b3f4a0912b836",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openmeetings/blob/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/user/UserDao.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/user/UserDao.java?ref=b075156565dc5e9c4f71ef49b95b3f4a0912b836",
                "deletions": 0,
                "filename": "openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/user/UserDao.java",
                "patch": "@@ -375,6 +375,7 @@ public User getByLogin(String login, Type type, Long domainId) {\n \t\t\t\t\t.setParameter(\"type\", type)\n \t\t\t\t\t.setParameter(\"domainId\", domainId == null ? Long.valueOf(0) : domainId)\n \t\t\t\t\t.getSingleResult();\n+\t\t\tu.getGroupUsers().size(); // this will initiate lazy collection\n \t\t} catch (NoResultException ex) {\n \t\t}\n \t\treturn u;",
                "raw_url": "https://github.com/apache/openmeetings/raw/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/user/UserDao.java",
                "sha": "193f5d1c696ec4d78641c44fe640a1bec25116f8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openmeetings/blob/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-db/src/main/java/org/apache/openmeetings/db/entity/user/User.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-db/src/main/java/org/apache/openmeetings/db/entity/user/User.java?ref=b075156565dc5e9c4f71ef49b95b3f4a0912b836",
                "deletions": 4,
                "filename": "openmeetings-db/src/main/java/org/apache/openmeetings/db/entity/user/User.java",
                "patch": "@@ -249,7 +249,7 @@ public static Salutation get(int type) {\n \tprivate Address address;\n \n \t@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)\n-\t@JoinColumn(name = \"user_id\", insertable = true, updatable = true)\n+\t@JoinColumn(name = \"user_id\", insertable = true, updatable = true, nullable = false)\n \t@ElementList(name = \"organisations\", required = false)\n \t@ElementDependent\n \tprivate List<GroupUser> groupUsers = new ArrayList<>();\n@@ -481,9 +481,6 @@ public void setLanguageId(long languageId) {\n \t}\n \n \tpublic List<GroupUser> getGroupUsers() {\n-\t\tif (groupUsers == null) {\n-\t\t\tgroupUsers = new ArrayList<>();\n-\t\t}\n \t\treturn groupUsers;\n \t}\n ",
                "raw_url": "https://github.com/apache/openmeetings/raw/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-db/src/main/java/org/apache/openmeetings/db/entity/user/User.java",
                "sha": "4d09d69034d29ed89601de3d5f9fc3b6ab95c0e1",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/openmeetings/blob/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/main/webapp/WEB-INF/classes/META-INF/derby_persistence.xml",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-web/src/main/webapp/WEB-INF/classes/META-INF/derby_persistence.xml?ref=b075156565dc5e9c4f71ef49b95b3f4a0912b836",
                "deletions": 7,
                "filename": "openmeetings-web/src/main/webapp/WEB-INF/classes/META-INF/derby_persistence.xml",
                "patch": "@@ -69,13 +69,13 @@\n \t\t\t<property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.commons.dbcp2.BasicDataSource\" />\n \t\t\t<property name=\"openjpa.ConnectionProperties\"\n \t\t\t\tvalue=\"DriverClassName=org.apache.derby.jdbc.EmbeddedDriver,\n-                                  Url=jdbc:derby:openmeetings;create=true, \n-                                  create=true,\n-                                  MaxActive=100, \n-                                  MaxWait=10000, \n-                                  TestOnBorrow=true, \n-                                  Username=user, \n-                                  Password=secret\" />\n+\t\t\t\t\t\tUrl=jdbc:derby:openmeetings;create=true,\n+\t\t\t\t\t\tcreate=true,\n+\t\t\t\t\t\tMaxActive=100,\n+\t\t\t\t\t\tMaxWait=10000,\n+\t\t\t\t\t\tTestOnBorrow=true,\n+\t\t\t\t\t\tUsername=user,\n+\t\t\t\t\t\tPassword=secret\" />\n \t\t\t<property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\" />\n \t\t\t<property name=\"openjpa.Log\" value=\"DefaultLevel=WARN, Tool=INFO\" />\n \t\t\t<property name=\"openjpa.DataCache\" value=\"true\" />",
                "raw_url": "https://github.com/apache/openmeetings/raw/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/main/webapp/WEB-INF/classes/META-INF/derby_persistence.xml",
                "sha": "1d2b86bdb8c373781c74fecefdf9077384674227",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/openmeetings/blob/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/test/java/org/apache/openmeetings/test/AbstractJUnitDefaults.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-web/src/test/java/org/apache/openmeetings/test/AbstractJUnitDefaults.java?ref=b075156565dc5e9c4f71ef49b95b3f4a0912b836",
                "deletions": 9,
                "filename": "openmeetings-web/src/test/java/org/apache/openmeetings/test/AbstractJUnitDefaults.java",
                "patch": "@@ -23,12 +23,14 @@\n import static org.junit.Assert.assertNotNull;\n \n import java.util.Date;\n+import java.util.UUID;\n \n import org.apache.openmeetings.db.dao.basic.ConfigurationDao;\n import org.apache.openmeetings.db.dao.calendar.AppointmentDao;\n import org.apache.openmeetings.db.dao.user.UserDao;\n import org.apache.openmeetings.db.entity.calendar.Appointment;\n import org.apache.openmeetings.db.entity.room.Room;\n+import org.apache.openmeetings.db.entity.user.Address;\n import org.apache.openmeetings.db.entity.user.User;\n import org.apache.openmeetings.installation.ImportInitvalues;\n import org.apache.openmeetings.installation.InstallationConfig;\n@@ -138,19 +140,34 @@ public Appointment createAppointment(Date start, Date end) {\n \t\treturn ap;\n \t}\n \n-\tpublic User getUser(int rnd) throws Exception {\n+\tpublic User getUser() throws Exception {\n+\t\treturn getUser(UUID.randomUUID().toString());\n+\t}\n+\n+\tprotected String getRandomPass(String uuid) {\n+\t\treturn \"pass\" + uuid;\n+\t}\n+\n+\tpublic User getUser(String uuid) throws Exception {\n \t\tUser u = new User();\n \t\t// add user\n-\t\tu.setFirstname(\"firstname\" + rnd);\n-\t\tu.setLastname(\"lastname\" + rnd);\n-\t\tu.setLogin(\"login\" + rnd);\n-\t\tu.updatePassword(cfgDao, \"pass\" + rnd);\n+\t\tu.setFirstname(\"firstname\" + uuid);\n+\t\tu.setLastname(\"lastname\" + uuid);\n+\t\tu.setLogin(\"login\" + uuid);\n+\t\tu.setAddress(new Address());\n+\t\tu.getAddress().setEmail(String.format(\"email%s@local\", uuid));\n+\t\tu.setRights(UserDao.getDefaultRights());\n+\t\tu.updatePassword(cfgDao, getRandomPass(uuid));\n \t\tu.setLanguageId(1L);\n \t\treturn u;\n \t}\n \n-\tpublic User createUser(int rnd) throws Exception {\n-\t\tUser u = getUser(rnd);\n+\tpublic User createUser() throws Exception {\n+\t\treturn createUser(UUID.randomUUID().toString());\n+\t}\n+\n+\tpublic User createUser(String uuid) throws Exception {\n+\t\tUser u = getUser(uuid);\n \t\tu = userDao.update(u, null);\n \t\tassertNotNull(\"Can't add user\", u);\n \t\treturn u;\n@@ -166,8 +183,12 @@ private void makeDefaultScheme() throws Exception {\n \t\timportInitvalues.loadAll(cfg, false);\n \t}\n \n-\tpublic User createUserContact(int rnd, Long ownerId) {\n-\t\tUser user = userDao.getContact(\"email\" + rnd, \"firstname\" + rnd, \"lastname\" + rnd, ownerId);\n+\tpublic User createUserContact(Long ownerId) {\n+\t\treturn createUserContact(UUID.randomUUID().toString(), ownerId);\n+\t}\n+\n+\tpublic User createUserContact(String uuid, Long ownerId) {\n+\t\tUser user = userDao.getContact(\"email\" + uuid, \"firstname\" + uuid, \"lastname\" + uuid, ownerId);\n \t\tuser = userDao.update(user, ownerId);\n \t\tassertNotNull(\"Cann't add user\", user);\n \t\treturn user;",
                "raw_url": "https://github.com/apache/openmeetings/raw/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/test/java/org/apache/openmeetings/test/AbstractJUnitDefaults.java",
                "sha": "9984ed4ee4905332d7b79096f8cda49607e72ca3",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openmeetings/blob/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/test/java/org/apache/openmeetings/test/calendar/TestDatabaseStructureGetAppointmentByRange.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-web/src/test/java/org/apache/openmeetings/test/calendar/TestDatabaseStructureGetAppointmentByRange.java?ref=b075156565dc5e9c4f71ef49b95b3f4a0912b836",
                "deletions": 5,
                "filename": "openmeetings-web/src/test/java/org/apache/openmeetings/test/calendar/TestDatabaseStructureGetAppointmentByRange.java",
                "patch": "@@ -23,7 +23,6 @@\n \n import java.util.ArrayList;\n import java.util.Calendar;\n-import java.util.Random;\n \n import org.apache.openmeetings.db.dao.calendar.AppointmentDao;\n import org.apache.openmeetings.db.entity.calendar.Appointment;\n@@ -45,7 +44,6 @@ public void test() {\n \t\tlog.debug(\"Test started\");\n \t\tLong userId = 1L;\n \t\t\n-\t\tRandom rnd = new Random();\n \t\tCalendar now = Calendar.getInstance();\n \t\tCalendar rangeStart = Calendar.getInstance();\n \t\trangeStart.setTime(now.getTime());\n@@ -64,19 +62,19 @@ public void test() {\n \t\ta2.setTitle(\"AppointmentByRange_a2\");\n \t\ta2.setMeetingMembers(new ArrayList<MeetingMember>());\n \t\tMeetingMember mm1 = new MeetingMember();\n-\t\tmm1.setUser(createUserContact(rnd.nextInt(), userId));\n+\t\tmm1.setUser(createUserContact(userId));\n \t\tmm1.setAppointment(a2);\n \t\ta2.getMeetingMembers().add(mm1);\n \t\t\n \t\tAppointment a3 = getAppointment(now.getTime(), a1End.getTime());\n \t\ta3.setTitle(\"AppointmentByRange_a3\");\n \t\ta3.setMeetingMembers(new ArrayList<MeetingMember>());\n \t\tMeetingMember mm2 = new MeetingMember();\n-\t\tmm2.setUser(createUserContact(rnd.nextInt(), userId));\n+\t\tmm2.setUser(createUserContact(userId));\n \t\tmm2.setAppointment(a3);\n \t\ta3.getMeetingMembers().add(mm2);\n \t\tMeetingMember mm3 = new MeetingMember();\n-\t\tmm3.setUser(createUserContact(rnd.nextInt(), userId));\n+\t\tmm3.setUser(createUserContact(userId));\n \t\tmm3.setAppointment(a3);\n \t\ta3.getMeetingMembers().add(mm3);\n \t\t",
                "raw_url": "https://github.com/apache/openmeetings/raw/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/test/java/org/apache/openmeetings/test/calendar/TestDatabaseStructureGetAppointmentByRange.java",
                "sha": "c92ce7fec04c3c7f0831ac221f727e65fe584b22",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/openmeetings/blob/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/test/java/org/apache/openmeetings/test/user/TestUserContact.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-web/src/test/java/org/apache/openmeetings/test/user/TestUserContact.java?ref=b075156565dc5e9c4f71ef49b95b3f4a0912b836",
                "deletions": 13,
                "filename": "openmeetings-web/src/test/java/org/apache/openmeetings/test/user/TestUserContact.java",
                "patch": "@@ -25,7 +25,7 @@\n import static org.junit.Assert.assertTrue;\r\n \r\n import java.util.List;\r\n-import java.util.Random;\r\n+import java.util.UUID;\r\n \r\n import org.apache.openmeetings.db.dao.user.GroupDao;\r\n import org.apache.openmeetings.db.dao.user.UserDao;\r\n@@ -40,7 +40,6 @@\n \tprivate UserDao userDao;\r\n \t@Autowired\r\n \tprivate GroupDao groupDao;\r\n-\tRandom random = new Random();\r\n \t\r\n \t@Test\r\n \tpublic void testGetUser() throws Exception {\r\n@@ -49,11 +48,11 @@ public void testGetUser() throws Exception {\n \t\r\n \t@Test\r\n \tpublic void createUserWithGroup() throws Exception {\r\n-\t\tint rnd = random.nextInt();\r\n-\t\tUser u = getUser(rnd);\r\n+\t\tString uuid = UUID.randomUUID().toString();\r\n+\t\tUser u = getUser(uuid);\r\n \t\tu.getGroupUsers().add(new GroupUser(groupDao.get(1L), u));\r\n \t\tu = userDao.update(u, null);\r\n-\t\tassertTrue(\"Password should be set as expected\", userDao.verifyPassword(u.getId(), \"pass\" + rnd));\r\n+\t\tassertTrue(\"Password should be set as expected\", userDao.verifyPassword(u.getId(), getRandomPass(uuid)));\r\n \t\t\r\n \t\tUser u1 = userDao.get(u.getId());\r\n \t\tassertNotNull(\"Just created user should not be null\", u1);\r\n@@ -62,10 +61,10 @@ public void createUserWithGroup() throws Exception {\n \t}\r\n \t\r\n \t@Test\r\n-\tpublic void createUser() throws Exception {\r\n-\t\tint rnd = random.nextInt();\r\n-\t\tUser u = createUser(rnd);\r\n-\t\tassertTrue(\"Password should be set as expected\", userDao.verifyPassword(u.getId(), \"pass\" + rnd));\r\n+\tpublic void testCreateUser() throws Exception {\r\n+\t\tString uuid = UUID.randomUUID().toString();\r\n+\t\tUser u = createUser(uuid);\r\n+\t\tassertTrue(\"Password should be set as expected\", userDao.verifyPassword(u.getId(), getRandomPass(uuid)));\r\n \t}\r\n \t\r\n \t@Test\r\n@@ -76,7 +75,7 @@ public void addContactByOwner() throws Exception {\n \t\tassertNotNull(\"User list should not be null \", users);\r\n \t\tassertFalse(\"User list should not be empty \", users.isEmpty());\r\n \t\t\r\n-\t\tUser contact = createUserContact(random.nextInt(), getUserId());\r\n+\t\tUser contact = createUserContact(getUserId());\r\n \t\tString email = contact.getAddress().getEmail();\r\n \t\tList<User> l = userDao.get(email, false, 0, 9999);\r\n \t\t// check that contact is visible for admin\r\n@@ -91,9 +90,9 @@ public void addContactByOwner() throws Exception {\n \t\tl = userDao.get(email, false, 0, 9999);\r\n \t\tassertTrue(\"Contact list should be empty after deletion\", l.isEmpty());\r\n \r\n-\t\tUser u = createUser(random.nextInt());\r\n-\t\tUser u1 = createUser(random.nextInt());\r\n-\t\tcontact = createUserContact(random.nextInt(), u.getId());\r\n+\t\tUser u = createUser();\r\n+\t\tUser u1 = createUser();\r\n+\t\tcontact = createUserContact(u.getId());\r\n \t\temail = contact.getAddress().getEmail();\r\n \t\t// check that contact is not visible for user that is not owner of this contact\r\n \t\tl = userDao.get(email, 0, 9999, null, true, u1.getId());\r",
                "raw_url": "https://github.com/apache/openmeetings/raw/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/test/java/org/apache/openmeetings/test/user/TestUserContact.java",
                "sha": "14f00a871bea1176e094224844304e62f18815eb",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/openmeetings/blob/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/test/java/org/apache/openmeetings/test/user/TestUserCount.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-web/src/test/java/org/apache/openmeetings/test/user/TestUserCount.java?ref=b075156565dc5e9c4f71ef49b95b3f4a0912b836",
                "deletions": 8,
                "filename": "openmeetings-web/src/test/java/org/apache/openmeetings/test/user/TestUserCount.java",
                "patch": "@@ -21,8 +21,6 @@\n import static org.apache.openmeetings.web.app.WebSession.getUserId;\r\n import static org.junit.Assert.assertTrue;\r\n \r\n-import java.util.Random;\r\n-\r\n import org.apache.openmeetings.db.dao.user.UserDao;\r\n import org.apache.openmeetings.db.entity.user.User;\r\n import org.apache.openmeetings.test.AbstractWicketTester;\r\n@@ -32,25 +30,24 @@\n public class TestUserCount extends AbstractWicketTester {\r\n \t@Autowired\r\n \tprivate UserDao userDao;\r\n-\tRandom random = new Random();\r\n \r\n \t@Test\r\n \tpublic void testCountSearchUsers() throws Exception {\r\n-\t\tUser u = createUser(random.nextInt());\r\n+\t\tUser u = createUser();\r\n \t\tassertTrue(\"Account of search users should be one\", userDao.count(u.getFirstname()) == 1);\r\n \t}\r\n \r\n \t@Test\r\n \tpublic void testCountFilteredUsers() throws Exception {\r\n-\t\tUser u = createUser(random.nextInt());\r\n-\t\tUser contact = createUserContact(random.nextInt(), u.getId());\r\n+\t\tUser u = createUser();\r\n+\t\tUser contact = createUserContact(u.getId());\r\n \t\tassertTrue(\"Account of filtered user should be one\", userDao.count(contact.getFirstname(), true, u.getId()) == 1);\r\n \t}\r\n \r\n \t@Test\r\n \tpublic void testCountUnfilteredUsers() throws Exception {\r\n-\t\tUser u = createUser(random.nextInt());\r\n-\t\tcreateUserContact(random.nextInt(), u.getId());\r\n+\t\tUser u = createUser();\r\n+\t\tcreateUserContact(u.getId());\r\n \t\tassertTrue(\"Account of unfiltered should be more then one\", userDao.count(\"firstname\", false, getUserId()) > 1);\r\n \t}\r\n \t\t\r",
                "raw_url": "https://github.com/apache/openmeetings/raw/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/test/java/org/apache/openmeetings/test/user/TestUserCount.java",
                "sha": "bd8e3b472d83312547b5622007cceeb911bfa524",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/openmeetings/blob/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/test/java/org/apache/openmeetings/test/user/TestUserGroup.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-web/src/test/java/org/apache/openmeetings/test/user/TestUserGroup.java?ref=b075156565dc5e9c4f71ef49b95b3f4a0912b836",
                "deletions": 11,
                "filename": "openmeetings-web/src/test/java/org/apache/openmeetings/test/user/TestUserGroup.java",
                "patch": "@@ -23,7 +23,7 @@\n import static org.junit.Assert.fail;\n \n import java.util.List;\n-import java.util.Random;\n+import java.util.UUID;\n \n import org.apache.openmeetings.db.dao.user.GroupDao;\n import org.apache.openmeetings.db.dao.user.GroupUserDao;\n@@ -33,6 +33,7 @@\n import org.apache.openmeetings.db.entity.user.User;\n import org.apache.openmeetings.test.AbstractJUnitDefaults;\n import org.apache.openmeetings.test.selenium.HeavyTests;\n+import org.apache.openmeetings.util.OmException;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n \n@@ -44,17 +45,17 @@\n \t@Autowired\n \tprivate UserDao userDao;\n \tpublic static final String GROUP_NAME = \"Test Group\";\n-\t\n+\n \tprivate User getValidUser() {\n \t\tfor (User u : userDao.getAllBackupUsers()) {\n \t\t\tif (!u.isDeleted() && u.getGroupUsers().size() > 0) {\n \t\t\t\treturn u;\n \t\t\t}\n \t\t}\n \t\tfail(\"Unable to find valid user\");\n-\t\treturn null;  //unreachable\n+\t\treturn null; //unreachable\n \t}\n-\t\n+\n \t@Test\n \tpublic void getUsersByGroupId() {\n \t\tUser u = getValidUser();\n@@ -63,20 +64,52 @@ public void getUsersByGroupId() {\n \t\tassertTrue(\"Default Group should contain at least 1 user: \" + ul.size(), ul.size() > 0);\n \t\t\n \t\tGroupUser ou = groupUserDao.getByGroupAndUser(groupId, u.getId());\n-\t\tassertNotNull(\"Unable to found [group, user] pair - [\" + groupId + \",\" + u.getId() + \"]\", ou);\n+\t\tassertNotNull(\"Unable to find [group, user] pair - [\" + groupId + \",\" + u.getId() + \"]\", ou);\n \t}\n-\t\n+\n \t@Test\n \tpublic void addGroup() {\n-\t\tGroup o = new Group();\n-\t\to.setName(GROUP_NAME);\n-\t\tLong groupId = groupDao.update(o, null).getId(); //inserted by not checked\n+\t\tGroup g = new Group();\n+\t\tg.setName(GROUP_NAME);\n+\t\tLong groupId = groupDao.update(g, null).getId(); //inserted by not checked\n \t\tassertNotNull(\"New Group have valid id\", groupId);\n \t\t\n \t\tList<GroupUser> ul = groupUserDao.get(groupId, 0, 9999);\n \t\tassertTrue(\"New Group should contain NO users: \" + ul.size(), ul.size() == 0);\n \t}\n \n+\t@Test\n+\tpublic void addUserWithoutGroup() throws Exception {\n+\t\tString uuid = UUID.randomUUID().toString();\n+\t\tUser u = getUser(uuid);\n+\t\tu = userDao.update(u, null);\n+\t\tassertNotNull(\"User successfully created\", u.getId());\n+\t\tcheckEmptyGroup(\"dao.get()\", userDao.get(u.getId()));\n+\t\ttry {\n+\t\t\tcheckEmptyGroup(\"dao.login()\", userDao.login(u.getAddress().getEmail(), getRandomPass(uuid)));\n+\t\t\tfail(\"User with no Group is unable to login\");\n+\t\t} catch (OmException e) {\n+\t\t\tassertTrue(\"Expected Om Exception\", \"No Group assigned to user\".equals(e.getMessage()));\n+\t\t}\n+\t\tcheckEmptyGroup(\"dao.getByLogin(user)\", userDao.getByLogin(u.getLogin(), u.getType(), u.getDomainId()));\n+\t}\n+\n+\n+\t@Test\n+\tpublic void addLdapUserWithoutGroup() throws Exception {\n+\t\tUser u1 = getUser();\n+\t\tu1.setType(User.Type.ldap);\n+\t\tu1.setDomainId(1L);\n+\t\tu1 = userDao.update(u1, null);\n+\t\tcheckEmptyGroup(\"dao.getByLogin(ldap)\", userDao.getByLogin(u1.getLogin(), u1.getType(), u1.getDomainId()));\n+\t}\n+\n+\tprivate void checkEmptyGroup(String prefix, User u) {\n+\t\tassertNotNull(prefix + \":: Created user should be available\", u);\n+\t\tassertNotNull(prefix + \":: List<GroupUser> for newly created user should not be null\", u.getGroupUsers());\n+\t\tassertTrue(prefix + \":: List<GroupUser> for newly created user should be empty\", u.getGroupUsers().isEmpty());\n+\t}\n+\n \t@Test\n \t@HeavyTests\n \tpublic void add10kUsers() throws Exception {\n@@ -89,9 +122,8 @@ public void add10kUsers() throws Exception {\n \t\t} else {\n \t\t\tg = groups.get(0);\n \t\t}\n-\t\tRandom rnd = new Random();\n \t\tfor (int i = 0; i < 10000; ++i) {\n-\t\t\tUser u = createUser(rnd.nextInt());\n+\t\t\tUser u = createUser();\n \t\t\tu.getGroupUsers().add(new GroupUser(g, u));\n \t\t\tuserDao.update(u, null);\n \t\t}",
                "raw_url": "https://github.com/apache/openmeetings/raw/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/test/java/org/apache/openmeetings/test/user/TestUserGroup.java",
                "sha": "5a66d29332d00a688a3ce803ff86d3a9d3817cdc",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/openmeetings/blob/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/test/java/org/apache/openmeetings/test/webservice/AbstractWebServiceTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-web/src/test/java/org/apache/openmeetings/test/webservice/AbstractWebServiceTest.java?ref=b075156565dc5e9c4f71ef49b95b3f4a0912b836",
                "deletions": 3,
                "filename": "openmeetings-web/src/test/java/org/apache/openmeetings/test/webservice/AbstractWebServiceTest.java",
                "patch": "@@ -23,7 +23,7 @@\n \n import java.io.File;\n import java.nio.file.Files;\n-import java.util.Random;\n+import java.util.UUID;\n \n import org.apache.catalina.LifecycleState;\n import org.apache.catalina.startup.Tomcat;\n@@ -39,7 +39,6 @@\n \tpublic final static String CONTEXT = \"/openmeetings\";\n \tpublic final static String BASE_SERVICES_URL = \"http://localhost:8080\" + CONTEXT + \"/services\";\n \tpublic final static String USER_SERVICE_URL = BASE_SERVICES_URL + \"/user\";\n-\tprotected static final Random rnd = new Random();\n \n \tpublic static WebClient getClient(String url) {\n \t\treturn WebClient.create(url).accept(\"application/json\").type(\"application/json\");\n@@ -56,7 +55,7 @@ public static ServiceResult login() {\n \tpublic static void initialize() throws Exception {\n \t\ttomcat = new Tomcat();\n \t\ttomcat.setPort(8080);\n-\t\tFile wd = Files.createTempDirectory(\"om\" + rnd.nextInt()).toFile();\n+\t\tFile wd = Files.createTempDirectory(\"om\" + UUID.randomUUID().toString()).toFile();\n \t\ttomcat.setBaseDir(wd.getCanonicalPath());\n \t\ttomcat.getHost().setAppBase(wd.getCanonicalPath());\n \t\ttomcat.getHost().setAutoDeploy(true);",
                "raw_url": "https://github.com/apache/openmeetings/raw/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/test/java/org/apache/openmeetings/test/webservice/AbstractWebServiceTest.java",
                "sha": "fa2d9082e07056d87950aa23c86dcc96057ca3e6",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/openmeetings/blob/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/test/java/org/apache/openmeetings/test/webservice/TestRecordingService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-web/src/test/java/org/apache/openmeetings/test/webservice/TestRecordingService.java?ref=b075156565dc5e9c4f71ef49b95b3f4a0912b836",
                "deletions": 2,
                "filename": "openmeetings-web/src/test/java/org/apache/openmeetings/test/webservice/TestRecordingService.java",
                "patch": "@@ -23,6 +23,7 @@\n import static org.junit.Assert.assertTrue;\n \n import java.util.Collection;\n+import java.util.UUID;\n \n import org.apache.openmeetings.db.dao.record.RecordingDao;\n import org.apache.openmeetings.db.dao.user.UserDao;\n@@ -42,9 +43,10 @@\n \tprivate UserDao userDao;\n \n \tprivate User getExternalUser() throws Exception {\n-\t\tUser u = getUser(rnd.nextInt());\n+\t\tString uuid = UUID.randomUUID().toString();\n+\t\tUser u = getUser(uuid);\n \t\tu.setExternalType(UNIT_TEST_GROUP);\n-\t\tu.setExternalId(\"\" + rnd.nextInt());\n+\t\tu.setExternalId(uuid);\n \t\tu = userDao.update(u, null);\n \t\treturn u;\n \t}",
                "raw_url": "https://github.com/apache/openmeetings/raw/b075156565dc5e9c4f71ef49b95b3f4a0912b836/openmeetings-web/src/test/java/org/apache/openmeetings/test/webservice/TestRecordingService.java",
                "sha": "a6202cecaa9607035df1bc7ba8e31abe4e972579",
                "status": "modified"
            }
        ],
        "message": "[OPENMEETINGS-1502] NPE while ldap user check should be fixed",
        "parent": "https://github.com/apache/openmeetings/commit/d99b5f43337acc3dc29435cab96280764f07a242",
        "patched_files": [
            "UserContact.java",
            "UserDao.java",
            "derby_persistence.java",
            "AbstractJUnitDefaults.java",
            "User.java"
        ],
        "repo": "openmeetings",
        "unit_tests": [
            "TestRecordingService.java",
            "AbstractWebServiceTest.java",
            "TestUserCount.java",
            "TestUserGroup.java",
            "TestDatabaseStructureGetAppointmentByRange.java",
            "TestUserContact.java"
        ]
    },
    "openmeetings_faff0fe": {
        "bug_id": "openmeetings_faff0fe",
        "commit": "https://github.com/apache/openmeetings/commit/faff0fe76e2bb9d0ed8f13ca83c6eaa5474a0a8a",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/openmeetings/blob/faff0fe76e2bb9d0ed8f13ca83c6eaa5474a0a8a/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/RecordingService.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/RecordingService.java?ref=faff0fe76e2bb9d0ed8f13ca83c6eaa5474a0a8a",
                "deletions": 13,
                "filename": "openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/RecordingService.java",
                "patch": "@@ -52,6 +52,7 @@\n import org.red5.server.api.service.IPendingServiceCall;\n import org.red5.server.api.service.IPendingServiceCallback;\n import org.red5.server.api.service.IServiceCapableConnection;\n+import org.red5.server.api.stream.IBroadcastStream;\n import org.red5.server.api.stream.IStreamListener;\n import org.red5.server.stream.ClientBroadcastStream;\n import org.slf4j.Logger;\n@@ -250,22 +251,10 @@ private void recordShow(IConnection conn, String broadcastid, String streamName,\n \t */\n \tpublic void stopRecordingShow(IScope scope, String broadcastId, Long metaId) {\n \t\ttry {\n-\t\t\tif (metaId == null) {\n-\t\t\t\t// this should be fixed, can be useful for debugging, after all this is an error\n-\t\t\t\t// but we don't want the application to completely stop the process\n-\t\t\t\tlog.error(\"recordingMetaDataId is null\");\n-\t\t\t}\n-\n \t\t\tlog.debug(\"** stopRecordingShow: \" + scope);\n \t\t\tlog.debug(\"### Stop recording show for broadcastId: \" + broadcastId + \" || \" + scope.getContextPath());\n \n-\t\t\tObject streamToClose = scopeApplicationAdapter.getBroadcastStream(scope, broadcastId);\n-\n-\t\t\tStreamListener listenerAdapter = streamListeners.get(metaId);\n-\n-\t\t\tlog.debug(\"Stream Closing :: \" + metaId);\n-\n-\t\t\tClientBroadcastStream stream = (ClientBroadcastStream) streamToClose;\n+\t\t\tIBroadcastStream stream = scopeApplicationAdapter.getBroadcastStream(scope, broadcastId);\n \n \t\t\t// the stream can be null if the user just closes the browser\n \t\t\t// without canceling the recording before leaving\n@@ -278,6 +267,16 @@ public void stopRecordingShow(IScope scope, String broadcastId, Long metaId) {\n \t\t\t\t}\n \t\t\t}\n \n+\t\t\tif (metaId == null) {\n+\t\t\t\t// this should be fixed, can be useful for debugging, after all this is an error\n+\t\t\t\t// but we don't want the application to completely stop the process\n+\t\t\t\tlog.error(\"recordingMetaDataId is null\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tStreamListener listenerAdapter = streamListeners.get(metaId);\n+\t\t\tlog.debug(\"Stream Closing :: \" + metaId);\n+\n \t\t\tRecordingMetaData metaData = metaDataDao.get(metaId);\n \t\t\tBaseConverter.printMetaInfo(metaData, \"Stopping the stream\");\n \t\t\t// Manually call finish on the stream so that there is no endless loop waiting in the RecordingConverter waiting for the stream to finish",
                "raw_url": "https://github.com/apache/openmeetings/raw/faff0fe76e2bb9d0ed8f13ca83c6eaa5474a0a8a/openmeetings-core/src/main/java/org/apache/openmeetings/core/remote/RecordingService.java",
                "sha": "eae5bc05c209714a5f794443799c99105596be34",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openmeetings/blob/faff0fe76e2bb9d0ed8f13ca83c6eaa5474a0a8a/openmeetings-db/src/main/java/org/apache/openmeetings/db/entity/basic/Configuration.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/openmeetings/contents/openmeetings-db/src/main/java/org/apache/openmeetings/db/entity/basic/Configuration.java?ref=faff0fe76e2bb9d0ed8f13ca83c6eaa5474a0a8a",
                "deletions": 1,
                "filename": "openmeetings-db/src/main/java/org/apache/openmeetings/db/entity/basic/Configuration.java",
                "patch": "@@ -41,7 +41,7 @@\n \n @Entity\n @NamedQueries({\n-\t\t@NamedQuery(name = \"forceGetConfigurationByKey\", query = \"SELECT c FROM Configuration c \" \n+\t\t@NamedQuery(name = \"forceGetConfigurationByKey\", query = \"SELECT c FROM Configuration c \"\n \t\t\t\t+ \"WHERE c.key LIKE :key\"),\n \t\t@NamedQuery(name = \"getConfigurationsByKeys\", query = \"SELECT c FROM Configuration c \"\n \t\t\t\t+ \"WHERE c.key IN :keys and c.deleted = false\"),",
                "raw_url": "https://github.com/apache/openmeetings/raw/faff0fe76e2bb9d0ed8f13ca83c6eaa5474a0a8a/openmeetings-db/src/main/java/org/apache/openmeetings/db/entity/basic/Configuration.java",
                "sha": "5319d0470b411f23a745383efa1e1467a6571ffd",
                "status": "modified"
            }
        ],
        "message": "no jira: couple NPEs are fixed",
        "parent": "https://github.com/apache/openmeetings/commit/c7b2f498f7e98949cd4ed123cf7cb0c6683b97d6",
        "patched_files": [
            "RecordingService.java"
        ],
        "repo": "openmeetings",
        "unit_tests": [
            "TestRecordingService.java"
        ]
    }
}