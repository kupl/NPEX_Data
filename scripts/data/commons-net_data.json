[
    {
        "commit": "https://github.com/apache/commons-net/commit/98d829eb6af5449ac27b66382952de37602ebe4e",
        "file": [
            {
                "patch": "@@ -74,6 +74,9 @@ This is mainly a bug-fix release. See further details below.\n  The examples are not part of the public API, so this does not affect compatibility.\n \n \">\n+            <action issue=\"NET-643\" type=\"fix\" dev=\"sebb\" due-to=\"Vasily\">\n+            NPE when closing telnet stream\n+            </action>\n             <action issue=\"NET-648\" type=\"add\" dev=\"pschumacher\">\n             Add Automatic-Module-Name MANIFEST entry for Java 9 compatibility\n             </action>",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-net/raw/98d829eb6af5449ac27b66382952de37602ebe4e/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "bbaf6c2ad7ad09832a66bd37f4b3a1d7536b73f8",
                "blob_url": "https://github.com/apache/commons-net/blob/98d829eb6af5449ac27b66382952de37602ebe4e/src/changes/changes.xml",
                "filename": "src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/changes/changes.xml?ref=98d829eb6af5449ac27b66382952de37602ebe4e"
            },
            {
                "patch": "@@ -100,10 +100,16 @@ public TelnetClient(String termtype, int maxSubnegotiationLength)\n \n     void _flushOutputStream() throws IOException\n     {\n+        if (_output_ == null) {\n+            throw new IOException(\"Stream closed\");\n+        }\n         _output_.flush();\n     }\n     void _closeOutputStream() throws IOException\n     {\n+        if (_output_ == null) {\n+            return;\n+        }\n         try {\n             _output_.close();\n         } finally {",
                "additions": 6,
                "raw_url": "https://github.com/apache/commons-net/raw/98d829eb6af5449ac27b66382952de37602ebe4e/src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                "status": "modified",
                "changes": 6,
                "deletions": 0,
                "sha": "d113276831c0af3f0b7b6e362a32a472ad993480",
                "blob_url": "https://github.com/apache/commons-net/blob/98d829eb6af5449ac27b66382952de37602ebe4e/src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                "filename": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/telnet/TelnetClient.java?ref=98d829eb6af5449ac27b66382952de37602ebe4e"
            }
        ],
        "bug_id": "commons-net_1",
        "parent": "https://github.com/apache/commons-net/commit/f6c513acaf04dbf3acc69f96053897b0c90dc746",
        "message": "NET-643 NPE when closing telnet stream\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1823550 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/796a288e0c2e17ddf7dc44a4cd790a7eab4e158d",
        "file": [
            {
                "patch": "@@ -87,6 +87,9 @@ without checking it if is a space.\n   The POP3Mail examples can now get password from console, stdin or an environment variable.\n   \n \">\n+            <action issue=\"NET-596\" type=\"fix\" dev=\"sebb\" due-to=\"Vincent Bories-Azeau\">\n+            NullPointerException when disconnecting TelnetClient twice with JDK 7\n+            </action>\n             <action issue=\"NET-602\" type=\"fix\" dev=\"sebb\" due-to=\"Ross Braithwaite\">\n             Failure to parse times from SYST_L8 systems that report as \"WINDOWS Type: L8\"\n             </action>",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-net/raw/796a288e0c2e17ddf7dc44a4cd790a7eab4e158d/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "837a64a49f0d273d2f9887c74d5235e761b8abbe",
                "blob_url": "https://github.com/apache/commons-net/blob/796a288e0c2e17ddf7dc44a4cd790a7eab4e158d/src/changes/changes.xml",
                "filename": "src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/changes/changes.xml?ref=796a288e0c2e17ddf7dc44a4cd790a7eab4e158d"
            },
            {
                "patch": "@@ -80,7 +80,11 @@ void _flushOutputStream() throws IOException\n     }\n     void _closeOutputStream() throws IOException\n     {\n-        _output_.close();\n+        try {\n+            _output_.close();            \n+        } finally {\n+            _output_ = null;\n+        }\n     }\n \n     /***\n@@ -125,6 +129,8 @@ public void disconnect() throws IOException\n                 __output.close();\n             }\n         } finally { // NET-594\n+            __output = null;\n+            __input = null;\n             super.disconnect();\n         }\n     }",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-net/raw/796a288e0c2e17ddf7dc44a4cd790a7eab4e158d/src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                "status": "modified",
                "changes": 8,
                "deletions": 1,
                "sha": "67f10e0affcdbe0841a59bcb133a338f4e27058c",
                "blob_url": "https://github.com/apache/commons-net/blob/796a288e0c2e17ddf7dc44a4cd790a7eab4e158d/src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                "filename": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/telnet/TelnetClient.java?ref=796a288e0c2e17ddf7dc44a4cd790a7eab4e158d"
            }
        ],
        "bug_id": "commons-net_2",
        "parent": "https://github.com/apache/commons-net/commit/6697e685dd8d3bb7a41c65a013276e79910203f5",
        "message": "NET-596 NullPointerException when disconnecting TelnetClient twice with JDK 7\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1782091 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/c4786e75f22050e5716072b2ce53463c87a076d0",
        "file": [
            {
                "patch": "@@ -23,6 +23,7 @@ o NET-263:  SubnetUtils / SubNetInfo toString() implementations\n o Javadoc fixes, improvements, and refactoring. \n \n Fixed Bugs:\n+o NET-334:  FromNetASCIIInputStream can throw a NullPointerException \n o NET-341:  FTPClient.remoteAppend(String filename) uses STOR instead of APPE \n o NET-339:  Incorrect parsing of timestamp on Windows CE\n             Fix parsing to allow for new-style DOS listing using 24hr clock rather than AM/PM ",
                "additions": 1,
                "raw_url": "https://github.com/apache/commons-net/raw/c4786e75f22050e5716072b2ce53463c87a076d0/RELEASE-NOTES.txt",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "6847cdd80c64831064b5dabbb21f95b0db950268",
                "blob_url": "https://github.com/apache/commons-net/blob/c4786e75f22050e5716072b2ce53463c87a076d0/RELEASE-NOTES.txt",
                "filename": "RELEASE-NOTES.txt",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/RELEASE-NOTES.txt?ref=c4786e75f22050e5716072b2ce53463c87a076d0"
            },
            {
                "patch": "@@ -61,6 +61,9 @@ This is primarily a maintenance release, but it also includes new features and e\n  \n   TO BE COMPLETED\n \">\n+            <action issue=\"NET-334\" dev=\"sebb\" type=\"fix\">\n+            FromNetASCIIInputStream can throw a NullPointerException\n+            </action>\n             <action issue=\"NET-341\" dev=\"sebb\" type=\"fix\">\n             FTPClient.remoteAppend(String filename) uses STOR instead of APPE\n             </action>",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-net/raw/c4786e75f22050e5716072b2ce53463c87a076d0/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "af773d9765a166a29b71c06c328774f15247e2e3",
                "blob_url": "https://github.com/apache/commons-net/blob/c4786e75f22050e5716072b2ce53463c87a076d0/src/changes/changes.xml",
                "filename": "src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/changes/changes.xml?ref=c4786e75f22050e5716072b2ce53463c87a076d0"
            },
            {
                "patch": "@@ -190,6 +190,7 @@ public int read(byte buffer[], int offset, int length) throws IOException\n \n \n     // PushbackInputStream in JDK 1.1.3 returns the wrong thing\n+    // TODO - can we delete this override now?\n     /***\n      * Returns the number of bytes that can be read without blocking EXCEPT\n      * when newline conversions have to be made somewhere within the\n@@ -200,6 +201,9 @@ public int read(byte buffer[], int offset, int length) throws IOException\n     @Override\n     public int available() throws IOException\n     {\n+        if (in == null) {\n+            throw new IOException(\"Stream closed\");\n+        }\n         return (buf.length - pos) + in.available();\n     }\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/commons-net/raw/c4786e75f22050e5716072b2ce53463c87a076d0/src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "da6d7c75aa8f204f2c3f17795ef82bb8444ded79",
                "blob_url": "https://github.com/apache/commons-net/blob/c4786e75f22050e5716072b2ce53463c87a076d0/src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                "filename": "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java?ref=c4786e75f22050e5716072b2ce53463c87a076d0"
            }
        ],
        "bug_id": "commons-net_3",
        "parent": "https://github.com/apache/commons-net/commit/b48666a3fb4e4a618d6ca574597a677397e20c9d",
        "message": "NET-334:  FromNetASCIIInputStream can throw a NullPointerException \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1022895 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/baec3f0f99abd5d3f4f1d6b033aba0e39b323241",
        "file": [
            {
                "patch": "@@ -125,7 +125,7 @@\n     /***\n      * The stream on which to spy\n      ***/\n-    private OutputStream spyStream = null;\n+    private volatile OutputStream spyStream = null;\n \n     /***\n      * The notification handler\n@@ -1248,18 +1248,19 @@ void _stopSpyStream()\n      ***/\n     void _spyRead(int ch)\n     {\n-        if (spyStream != null)\n+        OutputStream spy = spyStream;\n+        if (spy != null)\n         {\n             try\n             {\n                 if (ch != '\\r')\n                 {\n-                    spyStream.write(ch);\n+                    spy.write(ch);\n                     if (ch == '\\n')\n                     {\n-                        spyStream.write('\\r');\n+                        spy.write('\\r');\n                     }\n-                    spyStream.flush();\n+                    spy.flush();\n                 }\n             }\n             catch (IOException e)\n@@ -1279,12 +1280,13 @@ void _spyWrite(int ch)\n         if (!(_stateIsDo(TelnetOption.ECHO)\n             && _requestedDo(TelnetOption.ECHO)))\n         {\n-            if (spyStream != null)\n+            OutputStream spy = spyStream;\n+            if (spy != null)\n             {\n                 try\n                 {\n-                    spyStream.write(ch);\n-                    spyStream.flush();\n+                    spy.write(ch);\n+                    spy.flush();\n                 }\n                 catch (IOException e)\n                 {",
                "additions": 10,
                "raw_url": "https://github.com/apache/commons-net/raw/baec3f0f99abd5d3f4f1d6b033aba0e39b323241/src/main/java/org/apache/commons/net/telnet/Telnet.java",
                "status": "modified",
                "changes": 18,
                "deletions": 8,
                "sha": "ff54b33ca42146ea8343efc7d8dcb55d61a27b9c",
                "blob_url": "https://github.com/apache/commons-net/blob/baec3f0f99abd5d3f4f1d6b033aba0e39b323241/src/main/java/org/apache/commons/net/telnet/Telnet.java",
                "filename": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/telnet/Telnet.java?ref=baec3f0f99abd5d3f4f1d6b033aba0e39b323241"
            }
        ],
        "bug_id": "commons-net_4",
        "parent": "https://github.com/apache/commons-net/commit/b60e513e40d6b7464f33f1dc9127142d7c887373",
        "message": "NET-264 Telnet spyStream NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/branches/NET_2_0@942955 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/208e8af1160c871a98547aa02a2be048a8d18530",
        "file": [
            {
                "patch": "@@ -85,8 +85,12 @@ public static void main(String[] args)\n                 System.out.print(\"Additional Newsgroup <Hit enter to end>: \");\n                 System.out.flush();\n \n-                // Of course you don't want to do this because readLine() may be null\n-                newsgroup = stdin.readLine().trim();\n+                newsgroup = stdin.readLine();\n+                if (newsgroup == null) {\n+                    break;\n+                }\n+\n+                newsgroup = newsgroup.trim();\n \n                 if (newsgroup.length() == 0) {\n                     break;",
                "additions": 6,
                "raw_url": "https://github.com/apache/commons-net/raw/208e8af1160c871a98547aa02a2be048a8d18530/src/main/java/examples/nntp/PostMessage.java",
                "status": "modified",
                "changes": 8,
                "deletions": 2,
                "sha": "c9583c5006b64bae80e6a35f7dac5edda6133d06",
                "blob_url": "https://github.com/apache/commons-net/blob/208e8af1160c871a98547aa02a2be048a8d18530/src/main/java/examples/nntp/PostMessage.java",
                "filename": "src/main/java/examples/nntp/PostMessage.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/examples/nntp/PostMessage.java?ref=208e8af1160c871a98547aa02a2be048a8d18530"
            }
        ],
        "bug_id": "commons-net_5",
        "parent": "https://github.com/apache/commons-net/commit/f42e49c710e732f9be1efe22568f72d6db699192",
        "message": "Findbugs: possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1741808 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/6037f828b16141d886e636a782fe81fe69662606",
        "file": [
            {
                "patch": "@@ -65,6 +65,9 @@ The <action> type attribute can be add,update,fix,remove.\n         <release version=\"3.2\" date=\"TBA\" description=\"\n TBA\n         \">\n+            <action issue=\"NET-473\" dev=\"sebb\" type=\"fix\">\n+            FTPClient setSoTimeout (int time) will result in NullPointerException. Clarify Javadoc.\n+            </action>\n             <action issue=\"NET-468\" dev=\"sebb\" type=\"add\" due-to=\"Bogdan Drozdowski\">\n             Request for native support for socks proxy routing with Commons net FTP.\n             </action>",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-net/raw/6037f828b16141d886e636a782fe81fe69662606/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "dc411d2bf9498ab44bd123355ee8d65fb352703e",
                "blob_url": "https://github.com/apache/commons-net/blob/6037f828b16141d886e636a782fe81fe69662606/src/changes/changes.xml",
                "filename": "src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/changes/changes.xml?ref=6037f828b16141d886e636a782fe81fe69662606"
            },
            {
                "patch": "@@ -450,9 +450,12 @@ public int getDefaultTimeout()\n      * Only call this method after a connection has been opened\n      * by {@link #connect connect()}.\n      * <p>\n+     * To set the initial timeout, use {@link #setDefaultTimeout(int)} instead.\n+     * \n      * @param timeout  The timeout in milliseconds to use for the currently\n      *                 open socket connection.\n      * @exception SocketException If the operation fails.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public void setSoTimeout(int timeout) throws SocketException\n     {\n@@ -505,6 +508,7 @@ protected int getReceiveBufferSize(){\n      * <p>\n      * @return The timeout in milliseconds of the currently opened socket.\n      * @exception SocketException If the operation fails.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public int getSoTimeout() throws SocketException\n     {\n@@ -517,6 +521,7 @@ public int getSoTimeout() throws SocketException\n      * <p>\n      * @param on  True if Nagle's algorithm is to be enabled, false if not.\n      * @exception SocketException If the operation fails.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public void setTcpNoDelay(boolean on) throws SocketException\n     {\n@@ -531,6 +536,7 @@ public void setTcpNoDelay(boolean on) throws SocketException\n      * @return True if Nagle's algorithm is enabled on the currently opened\n      *        socket, false otherwise.\n      * @exception SocketException If the operation fails.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public boolean getTcpNoDelay() throws SocketException\n     {\n@@ -546,6 +552,7 @@ public boolean getTcpNoDelay() throws SocketException\n      * other systems.\n      * @param  keepAlive If true, keepAlive is turned on\n      * @throws SocketException\n+     * @throws NullPointerException if the socket is not currently open\n      * @since 2.2\n      */\n     public void setKeepAlive(boolean keepAlive) throws SocketException {\n@@ -557,6 +564,7 @@ public void setKeepAlive(boolean keepAlive) throws SocketException {\n      * Delegates to {@link Socket#getKeepAlive()}\n      * @return True if SO_KEEPALIVE is enabled.\n      * @throws SocketException\n+     * @throws NullPointerException if the socket is not currently open\n      * @since 2.2\n      */\n     public boolean getKeepAlive() throws SocketException {\n@@ -569,6 +577,7 @@ public boolean getKeepAlive() throws SocketException {\n      * @param on  True if linger is to be enabled, false if not.\n      * @param val The linger timeout (in hundredths of a second?)\n      * @exception SocketException If the operation fails.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public void setSoLinger(boolean on, int val) throws SocketException\n     {\n@@ -582,6 +591,7 @@ public void setSoLinger(boolean on, int val) throws SocketException\n      * @return The current SO_LINGER timeout.  If SO_LINGER is disabled returns\n      *         -1.\n      * @exception SocketException If the operation fails.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public int getSoLinger() throws SocketException\n     {\n@@ -596,6 +606,7 @@ public int getSoLinger() throws SocketException\n      * <p>\n      * @return The port number of the open socket on the local host used\n      *         for the connection.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public int getLocalPort()\n     {\n@@ -608,6 +619,7 @@ public int getLocalPort()\n      * Delegates to {@link Socket#getLocalAddress()}\n      * <p>\n      * @return The local address to which the client's socket is bound.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public InetAddress getLocalAddress()\n     {\n@@ -621,6 +633,7 @@ public InetAddress getLocalAddress()\n      * <p>\n      * @return The port number of the remote host to which the client is\n      *         connected.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public int getRemotePort()\n     {\n@@ -631,6 +644,7 @@ public int getRemotePort()\n     /**\n      * @return The remote address to which the client is connected.\n      * Delegates to {@link Socket#getInetAddress()}\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public InetAddress getRemoteAddress()\n     {",
                "additions": 14,
                "raw_url": "https://github.com/apache/commons-net/raw/6037f828b16141d886e636a782fe81fe69662606/src/main/java/org/apache/commons/net/SocketClient.java",
                "status": "modified",
                "changes": 14,
                "deletions": 0,
                "sha": "766fc33a8b4ac5fdab1595f02596f44b811bbad0",
                "blob_url": "https://github.com/apache/commons-net/blob/6037f828b16141d886e636a782fe81fe69662606/src/main/java/org/apache/commons/net/SocketClient.java",
                "filename": "src/main/java/org/apache/commons/net/SocketClient.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/SocketClient.java?ref=6037f828b16141d886e636a782fe81fe69662606"
            }
        ],
        "bug_id": "commons-net_6",
        "parent": "https://github.com/apache/commons-net/commit/8c404450fa97dc5432cec89d37f96cf1c2c2926f",
        "message": "NET-473 FTPClient setSoTimeout (int time) will result in NullPointerException. Clarify Javadoc.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1361535 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/722b08d1f31ce1b9425880002c8805b069b9b29e",
        "file": [
            {
                "patch": "@@ -143,18 +143,21 @@ public void testTimeZoneFunctionality() throws Exception {\n             lastfile = thisfile;\n         }\n \n-        // test that notwithstanding any time zone differences, the newest file\n-        // is older than now.\n-        assertTrue(lastfile.getTimestamp().getTime().before(now));\n-        Calendar first = firstfile.getTimestamp();\n-\n-        // test that the oldest is less than two days older than the newest\n-        // and, in particular, that no files have been considered \"future\"\n-        // by the parser and therefore been relegated to the same date a\n-        // year ago.\n-        first.add(Calendar.DATE, 2);\n-        assertTrue(lastfile.getTimestamp().getTime().toString()+\" before \"+ first.getTime().toString(),lastfile.getTimestamp().before(first));\n-\n+        if (firstfile == null || lastfile == null)  {\n+            fail(\"No files found\");\n+        } else {\n+            // test that notwithstanding any time zone differences, the newest file\n+            // is older than now.\n+            assertTrue(lastfile.getTimestamp().getTime().before(now));\n+            Calendar first = firstfile.getTimestamp();\n+    \n+            // test that the oldest is less than two days older than the newest\n+            // and, in particular, that no files have been considered \"future\"\n+            // by the parser and therefore been relegated to the same date a\n+            // year ago.\n+            first.add(Calendar.DATE, 2);\n+            assertTrue(lastfile.getTimestamp().getTime().toString()+\" before \"+ first.getTime().toString(),lastfile.getTimestamp().before(first));\n+        }\n     }\n }\n ",
                "additions": 15,
                "raw_url": "https://github.com/apache/commons-net/raw/722b08d1f31ce1b9425880002c8805b069b9b29e/src/test/java/org/apache/commons/net/ftp/FTPClientConfigFunctionalTest.java",
                "status": "modified",
                "changes": 27,
                "deletions": 12,
                "sha": "9df26cf13d5f97ed38e948608f6c2bdeec9c934e",
                "blob_url": "https://github.com/apache/commons-net/blob/722b08d1f31ce1b9425880002c8805b069b9b29e/src/test/java/org/apache/commons/net/ftp/FTPClientConfigFunctionalTest.java",
                "filename": "src/test/java/org/apache/commons/net/ftp/FTPClientConfigFunctionalTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/test/java/org/apache/commons/net/ftp/FTPClientConfigFunctionalTest.java?ref=722b08d1f31ce1b9425880002c8805b069b9b29e"
            }
        ],
        "bug_id": "commons-net_7",
        "parent": "https://github.com/apache/commons-net/commit/737a076added6e41719d205ca9aa5261e68e5002",
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1362315 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/d8812a3f61941c32e81dc59b4d3ec5679a47f62b",
        "file": [
            {
                "patch": "@@ -37,9 +37,9 @@\n      * used in testing for clarity.\n      */\n     private class TestConnection {\n-        TelnetTestSimpleServer server;\n-        TelnetClient client;\n-        int port;\n+        private final TelnetTestSimpleServer server;\n+        private final TelnetClient client;\n+        private final int port;\n         TestConnection(\n                 TelnetTestSimpleServer server,\n                 TelnetClient client,\n@@ -89,6 +89,8 @@ protected void setUp() throws Exception\n                         client = new TelnetClient();\n                         // redundant but makes code clearer.\n                         client.setReaderThread(true);\n+                        client.connect(\"127.0.0.1\", port);\n+                        STANDARD = new TestConnection(server, client, port);\n                         break;\n                     case 1:\n                         client = new TelnetClient();\n@@ -102,32 +104,21 @@ protected void setUp() throws Exception\n                         client.addOptionHandler(ttopt);\n                         client.addOptionHandler(echoopt);\n                         client.addOptionHandler(gaopt);\n+                        client.connect(\"127.0.0.1\", port);\n+                        OPTIONS = new TestConnection(server, client, port);\n                         break;\n                     case 2:\n                         client = new TelnetClient(\"ANSI\");\n+                        client.connect(\"127.0.0.1\", port);\n+                        ANSI = new TestConnection(server, client, port);\n                         break;\n                     case 3:\n                         client = new TelnetClient();\n                         client.setReaderThread(false);\n-                        break;\n-               }\n-               client.connect(\"127.0.0.1\", port);\n-               switch (socket) {\n-                    case 0:\n-                        STANDARD = new TestConnection(server, client, port);\n-                        break;\n-                    case 1:\n-                        OPTIONS = new TestConnection(server, client, port);\n-                        break;\n-                    case 2:\n-                        ANSI = new TestConnection(server, client, port);\n-                        break;\n-                    case 3:\n+                        client.connect(\"127.0.0.1\", port);\n                         NOREAD = new TestConnection(server, client, port);\n                         break;\n-\n                }\n-\n                // only increment socket number on success\n                socket++;\n            } catch (IOException e) {",
                "additions": 10,
                "raw_url": "https://github.com/apache/commons-net/raw/d8812a3f61941c32e81dc59b4d3ec5679a47f62b/src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java",
                "status": "modified",
                "changes": 29,
                "deletions": 19,
                "sha": "a05bac0f6bb76a7b9987e843cdefede577e477e1",
                "blob_url": "https://github.com/apache/commons-net/blob/d8812a3f61941c32e81dc59b4d3ec5679a47f62b/src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java",
                "filename": "src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java?ref=d8812a3f61941c32e81dc59b4d3ec5679a47f62b"
            }
        ],
        "bug_id": "commons-net_8",
        "parent": "https://github.com/apache/commons-net/commit/e19c09ea549c4ad4d5e92106aa2ee2cabc92eb45",
        "message": "Simplify and avoid NPE warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1132387 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/ba7d39cf7999231b81f17e40239f0441316f95a7",
        "file": [
            {
                "patch": "@@ -154,7 +154,9 @@ public void open(int port, InetAddress laddr) throws SocketException\n      ***/\n     public void close()\n     {\n-        _socket_.close();\n+        if (_socket_ != null) {\n+            _socket_.close();\n+        }\n         _socket_ = null;\n         _isOpen_ = false;\n     }",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-net/raw/ba7d39cf7999231b81f17e40239f0441316f95a7/src/main/java/org/apache/commons/net/DatagramSocketClient.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "e798d1786850d000f3592c1e299240dca8be98e9",
                "blob_url": "https://github.com/apache/commons-net/blob/ba7d39cf7999231b81f17e40239f0441316f95a7/src/main/java/org/apache/commons/net/DatagramSocketClient.java",
                "filename": "src/main/java/org/apache/commons/net/DatagramSocketClient.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/DatagramSocketClient.java?ref=ba7d39cf7999231b81f17e40239f0441316f95a7"
            }
        ],
        "bug_id": "commons-net_9",
        "parent": "https://github.com/apache/commons-net/commit/c443aa89bef6823f681ed982c0912398236a32b4",
        "message": "Protect against potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1090070 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/be6cecc6f272256d072f3acf749a590760ccba36",
        "file": [
            {
                "patch": "@@ -215,6 +215,9 @@ public void disconnect() throws IOException\n      ***/\n     public int sendCommand(String command, String args) throws IOException\n     {\n+        if (__writer == null) {\n+            throw new IllegalStateException(\"Socket is not connected\");\n+        }\n         StringBuilder __commandBuffer = new StringBuilder();\n         __commandBuffer.append(command);\n \n@@ -225,8 +228,8 @@ public int sendCommand(String command, String args) throws IOException\n         }\n         __commandBuffer.append(SocketClient.NETASCII_EOL);\n \n-        String message;\n-        __writer.write(message = __commandBuffer.toString());\n+        String message = __commandBuffer.toString();\n+        __writer.write(message);\n         __writer.flush();\n \n         fireCommandSent(command, message);",
                "additions": 5,
                "raw_url": "https://github.com/apache/commons-net/raw/be6cecc6f272256d072f3acf749a590760ccba36/src/main/java/org/apache/commons/net/pop3/POP3.java",
                "status": "modified",
                "changes": 7,
                "deletions": 2,
                "sha": "71b85a15035badba577ced4dec50e1e71eb62548",
                "blob_url": "https://github.com/apache/commons-net/blob/be6cecc6f272256d072f3acf749a590760ccba36/src/main/java/org/apache/commons/net/pop3/POP3.java",
                "filename": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/pop3/POP3.java?ref=be6cecc6f272256d072f3acf749a590760ccba36"
            }
        ],
        "bug_id": "commons-net_10",
        "parent": "https://github.com/apache/commons-net/commit/56e1bce1c50967d770b311ffc7e97b17ac263ba2",
        "message": "Prevent NPE if method called before connection is complete,\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1086575 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/b3231dce618c4be9b0821e86d30ad2e08f212b39",
        "file": [
            {
                "patch": "@@ -88,14 +88,13 @@ public final static void main(String[] args)\n                 System.out.print(\"CC <enter one address per line, hit enter to end>: \");\n                 System.out.flush();\n \n-                // Of course you don't want to do this because readLine() may be null\n-                cc = stdin.readLine().trim();\n+                cc = stdin.readLine();\n \n-                if (cc.length() == 0)\n+                if (cc== null || cc.length() == 0)\n                     break;\n \n-                header.addCC(cc);\n-                ccList.add(cc);\n+                header.addCC(cc.trim());\n+                ccList.add(cc.trim());\n             }\n \n             System.out.print(\"Filename: \");",
                "additions": 4,
                "raw_url": "https://github.com/apache/commons-net/raw/b3231dce618c4be9b0821e86d30ad2e08f212b39/src/main/java/examples/mail/SMTPMail.java",
                "status": "modified",
                "changes": 9,
                "deletions": 5,
                "sha": "93aa73ed8c22a926175052beec40fa228431d7f0",
                "blob_url": "https://github.com/apache/commons-net/blob/b3231dce618c4be9b0821e86d30ad2e08f212b39/src/main/java/examples/mail/SMTPMail.java",
                "filename": "src/main/java/examples/mail/SMTPMail.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/examples/mail/SMTPMail.java?ref=b3231dce618c4be9b0821e86d30ad2e08f212b39"
            }
        ],
        "bug_id": "commons-net_11",
        "parent": "https://github.com/apache/commons-net/commit/d2b5fa02b66d78dff82c76002aa3cdd72cd609bc",
        "message": "Avoid possible NPE (Findbugs)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1080731 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/4637434691d853d013daac0af1374cfcda3de031",
        "file": [
            {
                "patch": "@@ -57,6 +57,9 @@ The <action> type attribute can be add,update,fix,remove.\n \n     <body>\n         <release version=\"3.0\" date=\"TBA\" description=\"TBA\">\n+            <action issue=\"NET-185\" dev=\"sebb\" type=\"fix\">\n+            Possible NPE in Threader.java\n+            </action>\n             <action issue=\"NET-364\" dev=\"sebb\" type=\"fix\">\n             nntp.Article is very inefficient and incorrect.\n             </action>",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-net/raw/4637434691d853d013daac0af1374cfcda3de031/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "6e120890df61bfcc378d7f211b89482c775a7009",
                "blob_url": "https://github.com/apache/commons-net/blob/4637434691d853d013daac0af1374cfcda3de031/src/changes/changes.xml",
                "filename": "src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/changes/changes.xml?ref=4637434691d853d013daac0af1374cfcda3de031"
            },
            {
                "patch": "@@ -27,7 +27,6 @@\n  *\n  */\n \n-import java.util.Arrays;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n@@ -355,9 +354,11 @@ private void gatherSubjects() {\n                 ThreadContainer tail;\n                 for (tail = old.child;\n                     tail != null && tail.next != null;\n-                    tail = tail.next);\n+                    tail = tail.next){}\n \n-                tail.next = c.child;\n+                if (tail != null) { // protect against possible NPE\n+                    tail.next = c.child;\n+                }\n \n                 for (tail = c.child; tail != null; tail = tail.next)\n                     tail.parent = old;",
                "additions": 4,
                "raw_url": "https://github.com/apache/commons-net/raw/4637434691d853d013daac0af1374cfcda3de031/src/main/java/org/apache/commons/net/nntp/Threader.java",
                "status": "modified",
                "changes": 7,
                "deletions": 3,
                "sha": "c991aa28cc211122ed3badd073c77b73dce53578",
                "blob_url": "https://github.com/apache/commons-net/blob/4637434691d853d013daac0af1374cfcda3de031/src/main/java/org/apache/commons/net/nntp/Threader.java",
                "filename": "src/main/java/org/apache/commons/net/nntp/Threader.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/nntp/Threader.java?ref=4637434691d853d013daac0af1374cfcda3de031"
            }
        ],
        "bug_id": "commons-net_12",
        "parent": "https://github.com/apache/commons-net/commit/c71eb0cb6c0bca9f6bec144505f78c8f1e639013",
        "message": "NET-185 Possible NPE in Threader.java\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1079601 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/a6865a372c68abadec38aa22c91b2d658a58b7c3",
        "file": [
            {
                "patch": "@@ -124,16 +124,17 @@ InputStream _createErrorStream() throws IOException\n             {\n                 server = _serverSocketFactory_.createServerSocket(localPort, 1,\n                          getLocalAddress());\n+                break; // got a socket\n             }\n             catch (SocketException e)\n             {\n                 continue;\n             }\n-            break;\n         }\n \n-        if (localPort < MIN_CLIENT_PORT)\n+        if (server == null) {\n             throw new BindException(\"All ports in use.\");\n+        }\n \n         _output_.write(Integer.toString(server.getLocalPort()).getBytes());\n         _output_.write('\\0');",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-net/raw/a6865a372c68abadec38aa22c91b2d658a58b7c3/src/main/java/org/apache/commons/net/bsd/RCommandClient.java",
                "status": "modified",
                "changes": 5,
                "deletions": 2,
                "sha": "8b9555ce8c5b916fca50496c0cf6b28b72f0e524",
                "blob_url": "https://github.com/apache/commons-net/blob/a6865a372c68abadec38aa22c91b2d658a58b7c3/src/main/java/org/apache/commons/net/bsd/RCommandClient.java",
                "filename": "src/main/java/org/apache/commons/net/bsd/RCommandClient.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/bsd/RCommandClient.java?ref=a6865a372c68abadec38aa22c91b2d658a58b7c3"
            }
        ],
        "bug_id": "commons-net_13",
        "parent": "https://github.com/apache/commons-net/commit/5253fd7d9fcffef2e1a8434a8c98463ed5522e88",
        "message": "Simplify loop, and avoid potential NPE warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@999014 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/1e8dc1fdb889985347ee2c135a6b7664698d996c",
        "file": [
            {
                "patch": "@@ -215,7 +215,7 @@\n     public static final String DEFAULT_CONTROL_ENCODING = \"ISO-8859-1\";\n     private static final String __modes = \"AEILNTCFRPSBC\";\n \n-    private StringBuilder __commandBuffer = new StringBuilder();\n+    private final StringBuilder __commandBuffer = new StringBuilder();\n \n     protected int _replyCode;\n     protected ArrayList<String> _replyLines;\n@@ -468,8 +468,12 @@ public int sendCommand(String command, String args) throws IOException\n         }\n         __commandBuffer.append(SocketClient.NETASCII_EOL);\n \n+        if (_controlOutput_ == null){\n+            throw new IOException(\"Connection is not open\");\n+        }\n+\n         try{\n-        _controlOutput_.write(message = __commandBuffer.toString());\n+            _controlOutput_.write(message = __commandBuffer.toString());\n             _controlOutput_.flush();\n         }\n         catch (SocketException e)",
                "additions": 6,
                "raw_url": "https://github.com/apache/commons-net/raw/1e8dc1fdb889985347ee2c135a6b7664698d996c/src/main/java/org/apache/commons/net/ftp/FTP.java",
                "status": "modified",
                "changes": 8,
                "deletions": 2,
                "sha": "ccff9e15f511efdefb1ec837742ad186e8be79fd",
                "blob_url": "https://github.com/apache/commons-net/blob/1e8dc1fdb889985347ee2c135a6b7664698d996c/src/main/java/org/apache/commons/net/ftp/FTP.java",
                "filename": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/ftp/FTP.java?ref=1e8dc1fdb889985347ee2c135a6b7664698d996c"
            }
        ],
        "bug_id": "commons-net_14",
        "parent": "https://github.com/apache/commons-net/commit/ce7d1e157bbfd00cb9d48a80cdde0bf9ab6ea2c7",
        "message": "Protect against NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/branches/NET_2_0@936348 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/16c748d8dcdedfa1f6bab29fb50e4013e37bd82f",
        "file": [
            {
                "patch": "@@ -152,6 +152,8 @@ Supported protocols include: Echo, Finger, FTP, NNTP, NTP, POP3(S), SMTP(S), Tel\n         <commons.jira.pid>12310487</commons.jira.pid>\n         <!-- TODO Remove when updating to CP37 -->\n         <commons.animal-sniffer.version>1.11</commons.animal-sniffer.version>\n+        <!-- TODO temporary downdate to fix NPE in 0.11 -->\n+        <commons.rat.version>0.10</commons.rat.version>\n     </properties>\n \n     <build>\n@@ -387,6 +389,16 @@ Supported protocols include: Echo, Finger, FTP, NNTP, NTP, POP3(S), SMTP(S), Tel\n     <reporting>\n         <plugins>\n \n+            <!-- TODO can be replaced by property override when CP37 is available -->\n+            <plugin>\n+              <groupId>org.apache.maven.plugins</groupId>\n+              <artifactId>maven-changes-plugin</artifactId>\n+              <version>${commons.changes.version}</version>\n+              <configuration>\n+                <onlyCurrentVersion>true</onlyCurrentVersion>\n+              </configuration>\n+            </plugin>\n+\n             <plugin>\n                 <groupId>org.codehaus.mojo</groupId>\n                 <artifactId>findbugs-maven-plugin</artifactId>",
                "additions": 12,
                "raw_url": "https://github.com/apache/commons-net/raw/16c748d8dcdedfa1f6bab29fb50e4013e37bd82f/pom.xml",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "550b7c674beb4f0a5e925944d21687317937f4a4",
                "blob_url": "https://github.com/apache/commons-net/blob/16c748d8dcdedfa1f6bab29fb50e4013e37bd82f/pom.xml",
                "filename": "pom.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/pom.xml?ref=16c748d8dcdedfa1f6bab29fb50e4013e37bd82f"
            }
        ],
        "bug_id": "commons-net_15",
        "parent": "https://github.com/apache/commons-net/commit/ad6853f56fac69b0479b164c4920e8d7b1b9ac7a",
        "message": "Fix NPE in RAT\nOnly display current version in jira report\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1653166 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/b26a3b41b047cdcc37aa65625075fa621d13f66e",
        "file": [
            {
                "patch": "@@ -68,6 +68,9 @@ This is mainly a bug-fix release. See further details below.\n   IMAPExportMbox (example app) allows IMAP folders to be exported into an mbox file.\n   This is the inverse of the IMAPImportMbox example added previously\n         \">\n+            <action issue=\"NET-539\" type=\"fix\" dev=\"sebb\">\n+            NPE if Threader.thread invoked with empty list or with null array\n+            </action>\n             <action issue=\"NET-536\" type=\"add\" dev=\"sebb\">\n             IMAP FETCH example\n             IMAPExportMbox can export selected nessages from an IMAP folder",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-net/raw/b26a3b41b047cdcc37aa65625075fa621d13f66e/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "8f95baec9706c4bc4cc54274c447b180965f88e5",
                "blob_url": "https://github.com/apache/commons-net/blob/b26a3b41b047cdcc37aa65625075fa621d13f66e/src/changes/changes.xml",
                "filename": "src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/changes/changes.xml?ref=b26a3b41b047cdcc37aa65625075fa621d13f66e"
            },
            {
                "patch": "@@ -27,6 +27,7 @@\n  *\n  */\n \n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n@@ -36,8 +37,8 @@\n     /**\n      * The client passes in a list of Threadable objects, and\n      * the Threader constructs a connected 'graph' of messages\n-     * @param messages list of messages to thread\n-     * @return null if messages == null or root.child == null\n+     * @param messages list of messages to thread, must not be empty\n+     * @return null if messages == null or root.child == null or messages list is empty\n      * @since 2.2\n      */\n     public Threadable thread(List<? extends Threadable> messages) {\n@@ -47,8 +48,8 @@ public Threadable thread(List<? extends Threadable> messages) {\n     /**\n      * The client passes in a list of Iterable objects, and\n      * the Threader constructs a connected 'graph' of messages\n-     * @param messages iterable of messages to thread\n-     * @return null if messages == null or root.child == null\n+     * @param messages iterable of messages to thread, must not be empty\n+     * @return null if messages == null or root.child == null or messages list is empty\n      * @since 3.0\n      */\n     public Threadable thread(Iterable<? extends Threadable> messages) {\n@@ -65,6 +66,10 @@ public Threadable thread(Iterable<? extends Threadable> messages) {\n             }\n         }\n \n+        if (idTable.isEmpty()) {\n+            return null;\n+        }\n+\n         ThreadContainer root = findRootSet(idTable);\n         idTable.clear();\n         idTable = null;\n@@ -446,13 +451,16 @@ private void gatherSubjects(ThreadContainer root) {\n     /**\n      * The client passes in an array of Threadable objects, and\n      * the Threader constructs a connected 'graph' of messages\n-     * @param messages array of messages to thread\n-     * @return null if messages == null or root.child == null\n+     * @param messages array of messages to thread, must not be empty\n+     * @return null if messages == null or root.child == null or messages array is empty\n      * @deprecated (2.2) prefer {@link #thread(List)}\n      */\n     @Deprecated\n     public Threadable thread(Threadable[] messages) {\n-        return thread(java.util.Arrays.asList(messages));\n+        if (messages == null) {\n+            return null;\n+        }\n+        return thread(Arrays.asList(messages));\n     }\n \n }",
                "additions": 15,
                "raw_url": "https://github.com/apache/commons-net/raw/b26a3b41b047cdcc37aa65625075fa621d13f66e/src/main/java/org/apache/commons/net/nntp/Threader.java",
                "status": "modified",
                "changes": 22,
                "deletions": 7,
                "sha": "bf9345177aa147db8db6543ea912ec4ecac872bd",
                "blob_url": "https://github.com/apache/commons-net/blob/b26a3b41b047cdcc37aa65625075fa621d13f66e/src/main/java/org/apache/commons/net/nntp/Threader.java",
                "filename": "src/main/java/org/apache/commons/net/nntp/Threader.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/nntp/Threader.java?ref=b26a3b41b047cdcc37aa65625075fa621d13f66e"
            },
            {
                "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.net.nntp;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test the Threader\n+ */\n+public class TestThreader {\n+    \n+    @Test\n+    @SuppressWarnings(\"deprecation\") // test of deprecated method\n+    public void testNullArray() { // NET-539\n+        Threader t = new Threader();\n+        Threadable[] messages=null;\n+        Assert.assertNull(t.thread(messages));        \n+    }\n+\n+    @Test\n+    public void testNullList() {\n+        Threader t = new Threader();\n+        List<Threadable> messages=null;\n+        Assert.assertNull(t.thread(messages));        \n+    }\n+\n+    @Test\n+    public void testNullIterable() {\n+        Threader t = new Threader();\n+        Iterable<Threadable> messages=null;\n+        Assert.assertNull(t.thread(messages));        \n+    }\n+\n+    @SuppressWarnings(\"deprecation\") // test of deprecated method\n+    @Test\n+    public void testEmptyArray() { // NET-539\n+        Threader t = new Threader();\n+        Threadable[] messages=new Threadable[0];\n+        Assert.assertNull(t.thread(messages));\n+    }\n+\n+    @Test\n+    public void testEmptyList() { // NET-539\n+        Threader t = new Threader();\n+        Threadable[] messages=new Threadable[0];\n+        final List<Threadable> asList = Arrays.asList(messages);\n+        Assert.assertNull(t.thread(asList));\n+    }\n+\n+    @Test\n+    public void testEmptyIterable() { // NET-539\n+        Threader t = new Threader();\n+        Threadable[] messages=new Threadable[0];\n+        final Iterable<Threadable> asList = Arrays.asList(messages);\n+        Assert.assertNull(t.thread(asList));\n+    }\n+\n+}",
                "additions": 77,
                "raw_url": "https://github.com/apache/commons-net/raw/b26a3b41b047cdcc37aa65625075fa621d13f66e/src/test/java/org/apache/commons/net/nntp/TestThreader.java",
                "status": "added",
                "changes": 77,
                "deletions": 0,
                "sha": "f18030b70a93ee4f48f1a4f31f15b8d0fba25556",
                "blob_url": "https://github.com/apache/commons-net/blob/b26a3b41b047cdcc37aa65625075fa621d13f66e/src/test/java/org/apache/commons/net/nntp/TestThreader.java",
                "filename": "src/test/java/org/apache/commons/net/nntp/TestThreader.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/test/java/org/apache/commons/net/nntp/TestThreader.java?ref=b26a3b41b047cdcc37aa65625075fa621d13f66e"
            }
        ],
        "bug_id": "commons-net_16",
        "parent": "https://github.com/apache/commons-net/commit/061d70dd783a9150601fc884cc93831d39efd751",
        "message": "NET-539 NPE if Threader.thread invoked with empty list or with null array\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1587651 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/60de42750746ab7aa387e2946accd62bcc88a626",
        "file": [
            {
                "patch": "@@ -150,8 +150,7 @@ public int receiveFile(String filename, int mode, OutputStream output,\n             while (true)\n             {\n                 timeouts = 0;\n-                while (timeouts < __maxTimeouts)\n-                {\n+                do {\n                     try\n                     {\n                         received = bufferedReceive();\n@@ -180,7 +179,7 @@ public int receiveFile(String filename, int mode, OutputStream output,\n                         endBufferedOps();\n                         throw new IOException(\"Bad packet: \" + e.getMessage());\n                     }\n-                }\n+                } while (timeouts < __maxTimeouts); // __maxTimeouts >=1 so will always do loop at least once\n \n                 // The first time we receive we get the port number and\n                 // answering host address (for hosts with multiple IPs)\n@@ -402,8 +401,7 @@ public void sendFile(String filename, int mode, InputStream input,\n \n \n                 timeouts = 0;\n-                while (timeouts < __maxTimeouts)\n-                {\n+                do {\n                     try\n                     {\n                         received = bufferedReceive();\n@@ -433,9 +431,11 @@ public void sendFile(String filename, int mode, InputStream input,\n                         throw new IOException(\"Bad packet: \" + e.getMessage());\n                     }\n                 } // end of while loop over tries to receive\n+                while (timeouts < __maxTimeouts); // __maxTimeouts >=1 so will always do loop at least once\n+\n \n                 // The first time we receive we get the port number and\n-        // answering host address (for hosts with multiple IPs)\n+                // answering host address (for hosts with multiple IPs)\n                 if (justStarted)\n                 {\n                     justStarted = false;",
                "additions": 6,
                "raw_url": "https://github.com/apache/commons-net/raw/60de42750746ab7aa387e2946accd62bcc88a626/src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                "status": "modified",
                "changes": 12,
                "deletions": 6,
                "sha": "d094219dc0bae27f7307d3a3543e8ba7745fe6c0",
                "blob_url": "https://github.com/apache/commons-net/blob/60de42750746ab7aa387e2946accd62bcc88a626/src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                "filename": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/tftp/TFTPClient.java?ref=60de42750746ab7aa387e2946accd62bcc88a626"
            }
        ],
        "bug_id": "commons-net_17",
        "parent": "https://github.com/apache/commons-net/commit/b5ac3314309acc4cded8f65cf50adeb7a1c13f95",
        "message": "Fix NPE warning by converting while to do loop;\nalso makes obvious that the loop is executed at least once\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1229697 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/cc94b271b7dbc9f4512e8d6e578914f4d36cf66e",
        "file": [
            {
                "patch": "@@ -86,7 +86,13 @@ public FTPFileEntryParser createFileEntryParser(String key)\n         try\n         {\n             parserClass = Class.forName(key);\n-            parser = (FTPFileEntryParser) parserClass.newInstance();\n+            try {\n+                parser = (FTPFileEntryParser) parserClass.newInstance();\n+            } catch (ClassCastException e) {\n+                throw new ParserInitializationException(parserClass.getName()\n+                    + \" does not implement the interface \"\n+                    + \"org.apache.commons.net.ftp.FTPFileEntryParser.\", e);\n+            }\n         }\n         catch (ClassNotFoundException e)\n         {\n@@ -142,12 +148,6 @@ else if (ukey.indexOf(FTPClientConfig.SYST_L8) >= 0)\n         {\n             throw new ParserInitializationException(\"Error initializing parser\", e);\n         }\n-        catch (ClassCastException e)\n-        {\n-            throw new ParserInitializationException(parserClass.getName()\n-                + \" does not implement the interface \"\n-                + \"org.apache.commons.net.ftp.FTPFileEntryParser.\", e);\n-        }\n         catch (Throwable e)\n         {\n             throw new ParserInitializationException(\"Error initializing parser\", e);",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-net/raw/cc94b271b7dbc9f4512e8d6e578914f4d36cf66e/src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                "status": "modified",
                "changes": 14,
                "deletions": 7,
                "sha": "8e0ef7333617f5a0d10532fe2dbeb9b748d515ec",
                "blob_url": "https://github.com/apache/commons-net/blob/cc94b271b7dbc9f4512e8d6e578914f4d36cf66e/src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                "filename": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java?ref=cc94b271b7dbc9f4512e8d6e578914f4d36cf66e"
            }
        ],
        "bug_id": "commons-net_18",
        "parent": "https://github.com/apache/commons-net/commit/c4786e75f22050e5716072b2ce53463c87a076d0",
        "message": "Avoid possible NPE warning by only catching CCE where it can occur\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1022904 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    },
    {
        "commit": "https://github.com/apache/commons-net/commit/6992f5c57bf0b49853ac44830df48f5fdc64746d",
        "file": [
            {
                "patch": "@@ -439,7 +439,7 @@ public void close() throws IOException\n         synchronized (__queue)\n         {\n             __hasReachedEOF = true;\n-            __isClosed = true;\n+            __isClosed      = true;\n \n             if (__thread.isAlive())\n             {\n@@ -481,6 +481,14 @@ public void run()\n                         }\n                         continue;\n                     }\n+                } catch(RuntimeException re) {\n+                    // We treat any runtime exceptions as though the\n+                    // stream has been closed.  We close the\n+                    // underlying stream just to be sure.\n+                    super.close();\n+                    // Breaking the loop has the effect of setting\n+                    // the state to closed at the end of the method.\n+                    break _outerLoop;\n                 }\n \n                 // Critical section because we're altering __bytesAvailable,\n@@ -515,19 +523,27 @@ public void run()\n                 }\n             }\n         }\n-        catch (IOException e)\n+        catch (IOException ioe)\n         {\n             synchronized (__queue)\n             {\n-                __ioException = e;\n+                __ioException = ioe;\n             }\n         }\n \n         synchronized (__queue)\n         {\n-            __isClosed = true; // Possibly redundant\n+            __isClosed      = true; // Possibly redundant\n             __hasReachedEOF = true;\n             __queue.notify();\n         }\n     }\n }\n+\n+/* Emacs configuration\n+ * Local variables:        **\n+ * mode:             java  **\n+ * c-basic-offset:   4     **\n+ * indent-tabs-mode: nil   **\n+ * End:                    **\n+ */",
                "additions": 20,
                "raw_url": "https://github.com/apache/commons-net/raw/6992f5c57bf0b49853ac44830df48f5fdc64746d/src/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                "status": "modified",
                "changes": 24,
                "deletions": 4,
                "sha": "0100b5f76ee05219d0bbf3cfbcd1a96e1371e9bb",
                "blob_url": "https://github.com/apache/commons-net/blob/6992f5c57bf0b49853ac44830df48f5fdc64746d/src/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                "filename": "src/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/java/org/apache/commons/net/telnet/TelnetInputStream.java?ref=6992f5c57bf0b49853ac44830df48f5fdc64746d"
            }
        ],
        "bug_id": "commons-net_19",
        "parent": "https://github.com/apache/commons-net/commit/4ccd4636cefb09844f3eca775bd512b6473d419e",
        "message": "\"Jeff Barrett\" <JBarrett@sawyermedia.com> reports that:\nI'm using commons-net to ftp a bunch of files around every night as a batch process.  It probably copies just under 1g.  Over the course of that process I'll  often get 2 or 3 thrown exceptions like so:\n\n    [java] java.lang.NullPointerException\n    [java] \tat java.io.BufferedInputStream.read(BufferedInputStream.java:279)\n    [java] \tat java.io.BufferedInputStream.fill(BufferedInputStream.java:183)\n    [java] \tat java.io.BufferedInputStream.read(BufferedInputStream.java:201)\n    [java] \tat org.apache.commons.net.telnet.TelnetInputStream.__read(TelnetInputStream.java:140)\n    [java] \tat org.apache.commons.net.telnet.TelnetInputStream.run(TelnetInputStream.java:464)\n    [java] \tat java.lang.Thread.run(Thread.java:536)\n\nSince we didn't open a Bugzilla report, I'm recording my email\nexplanation as a log message:\n\nThat's all happening in BufferedInputStream.  Looking at the code\nfor BufferedInputStream in J2SE 1.4.2, it looks like the\nNullPointerException exception is happening at a call of in.available().\nin is set to null in close().  So it seems there may be a situation\nwhereby a read by TelnetInputStream.__read is being performed after\na close.  Looking at the code, I'm pretty sure there's a problem.\nTelnetInputStream calls super.close() BEFORE entering a\nsynchronized block.  There's a race condition that could allow\nthe reader thread to start a read after BufferedInputStream.close()\nis called.  The reason it hardly ever happns is that\nBufferedInputStream calls an ensureOpen() method at the\nbeginning of read() that checks to make sure in is not null.\nHowever, between that call and the call to in.available(),\nthe value may become null because BufferdInputStream.close()\nis not a synchronized method, unlike BufferedInputStream.read().\n\nNow, there's a comment in the code before the close\ncall that I'm guilty of that says:\n        // Completely disregard the fact thread may still be running.\n        // We can't afford to block on this close by waiting for\n        // thread to terminate because few if any JVM's will actually\n        // interrupt a system read() from the interrupt() method.\nThis means the close() is being used to force the read() to return -1\nor throw an exception.  If we synchronize the call to close, we\nmay get deadlock.  Mind you, this is circa JDK 1.1.x.\n\nThe good news is that the NullPointerException is probably harmless\nbecause it's happening when the stream is being closed and the thread\nis terminated.  Also, it's the FTP control stream, not the data stream\nthat's being affected, so there will be no loss of data.  The bad\nnews is that I'm not immediately sure how to fix it in light of the\ncode comment.  This is a great example of why I'd like to get rid of\nthe threads and move to java.nio for version 2.0.\n\nI can't come up with any ideas that don't run the risk of\ndeadlock on some JVM.  I'm afraid the right fix may be to\nsimply catch any RuntimeExceptions thrown by read and take\nthe same action as a close().  We probably should have been\ndoing that anyway to gracefully handle unexpected situations.\nAs an interim fix, I applied that change.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/net/trunk@139442 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "commons-net"
    }
]