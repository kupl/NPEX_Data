{
    "dubbo-hessian-lite_38f45ee": {
        "bug_id": "dubbo-hessian-lite_38f45ee",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
        "file": [
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPool.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPool.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "deletions": 0,
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPool.java",
                "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.dubbo.common.threadpool.support.eager;\n+\n+import com.alibaba.dubbo.common.Constants;\n+import com.alibaba.dubbo.common.URL;\n+import com.alibaba.dubbo.common.threadpool.ThreadPool;\n+import com.alibaba.dubbo.common.threadpool.support.AbortPolicyWithReport;\n+import com.alibaba.dubbo.common.utils.NamedThreadFactory;\n+\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * EagerThreadPool\n+ * When the core threads are all in busy,\n+ * create new thread instead of putting task into blocking queue.\n+ */\n+public class EagerThreadPool implements ThreadPool {\n+\n+    @Override\n+    public Executor getExecutor(URL url) {\n+        String name = url.getParameter(Constants.THREAD_NAME_KEY, Constants.DEFAULT_THREAD_NAME);\n+        int cores = url.getParameter(Constants.CORE_THREADS_KEY, Constants.DEFAULT_CORE_THREADS);\n+        int threads = url.getParameter(Constants.THREADS_KEY, Integer.MAX_VALUE);\n+        int queues = url.getParameter(Constants.QUEUES_KEY, Constants.DEFAULT_QUEUES);\n+        int alive = url.getParameter(Constants.ALIVE_KEY, Constants.DEFAULT_ALIVE);\n+\n+        // init queue and executor\n+        TaskQueue<Runnable> taskQueue = new TaskQueue<Runnable>(queues <= 0 ? 1 : queues);\n+        EagerThreadPoolExecutor executor = new EagerThreadPoolExecutor(cores,\n+                threads,\n+                alive,\n+                TimeUnit.MILLISECONDS,\n+                taskQueue,\n+                new NamedThreadFactory(name, true),\n+                new AbortPolicyWithReport(name, url));\n+        taskQueue.setExecutor(executor);\n+        return executor;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPool.java",
                "sha": "eb4e1f3feb72f47634de8733efd434768dac7bf7",
                "status": "added"
            },
            {
                "additions": 84,
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "deletions": 0,
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java",
                "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.dubbo.common.threadpool.support.eager;\n+\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * EagerThreadPoolExecutor\n+ */\n+public class EagerThreadPoolExecutor extends ThreadPoolExecutor {\n+\n+    /**\n+     * task count\n+     */\n+    private final AtomicInteger submittedTaskCount = new AtomicInteger(0);\n+\n+    public EagerThreadPoolExecutor(int corePoolSize,\n+                                   int maximumPoolSize,\n+                                   long keepAliveTime,\n+                                   TimeUnit unit, TaskQueue<Runnable> workQueue,\n+                                   ThreadFactory threadFactory,\n+                                   RejectedExecutionHandler handler) {\n+        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);\n+    }\n+\n+    /**\n+     * @return current tasks which are executed\n+     */\n+    public int getSubmittedTaskCount() {\n+        return submittedTaskCount.get();\n+    }\n+\n+    @Override\n+    protected void afterExecute(Runnable r, Throwable t) {\n+        submittedTaskCount.decrementAndGet();\n+    }\n+\n+    @Override\n+    public void execute(Runnable command) {\n+        if (command == null) {\n+            throw new NullPointerException();\n+        }\n+        // do not increment in method beforeExecute!\n+        submittedTaskCount.incrementAndGet();\n+        try {\n+            super.execute(command);\n+        } catch (RejectedExecutionException rx) {\n+            // retry to offer the task into queue.\n+            final TaskQueue queue = (TaskQueue) super.getQueue();\n+            try {\n+                if (!queue.retryOffer(command, 0, TimeUnit.MILLISECONDS)) {\n+                    submittedTaskCount.decrementAndGet();\n+                    throw new RejectedExecutionException(\"Queue capacity is full.\");\n+                }\n+            } catch (InterruptedException x) {\n+                submittedTaskCount.decrementAndGet();\n+                throw new RejectedExecutionException(x);\n+            }\n+        } catch (Throwable t) {\n+            // decrease any way\n+            submittedTaskCount.decrementAndGet();\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java",
                "sha": "47f84c52794b9a352c406db6f91119dc98d82770",
                "status": "added"
            },
            {
                "additions": 79,
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/TaskQueue.java",
                "changes": 79,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/TaskQueue.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "deletions": 0,
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/TaskQueue.java",
                "patch": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.dubbo.common.threadpool.support.eager;\n+\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * TaskQueue in the EagerThreadPoolExecutor\n+ * It offer a task if the executor's submittedTaskCount less than currentPoolThreadSize\n+ * or the currentPoolThreadSize more than executor's maximumPoolSize.\n+ * That can make the executor create new worker\n+ * when the task num is bigger than corePoolSize but less than maximumPoolSize.\n+ */\n+public class TaskQueue<R extends Runnable> extends LinkedBlockingQueue<Runnable> {\n+\n+    private static final long serialVersionUID = -2635853580887179627L;\n+\n+    private EagerThreadPoolExecutor executor;\n+\n+    public TaskQueue(int capacity) {\n+        super(capacity);\n+    }\n+\n+    public void setExecutor(EagerThreadPoolExecutor exec) {\n+        executor = exec;\n+    }\n+\n+    @Override\n+    public boolean offer(Runnable runnable) {\n+        if (executor == null) {\n+            throw new RejectedExecutionException(\"The task queue does not have executor!\");\n+        }\n+\n+        int currentPoolThreadSize = executor.getPoolSize();\n+        // have free worker. put task into queue to let the worker deal with task.\n+        if (executor.getSubmittedTaskCount() < currentPoolThreadSize) {\n+            return super.offer(runnable);\n+        }\n+\n+        // return false to let executor create new worker.\n+        if (currentPoolThreadSize < executor.getMaximumPoolSize()) {\n+            return false;\n+        }\n+\n+        // currentPoolThreadSize >= max\n+        return super.offer(runnable);\n+    }\n+\n+    /**\n+     * retry offer task\n+     *\n+     * @param o task\n+     * @return offer success or not\n+     * @throws RejectedExecutionException if executor is terminated.\n+     */\n+    public boolean retryOffer(Runnable o, long timeout, TimeUnit unit) throws InterruptedException {\n+        if (executor.isShutdown()) {\n+            throw new RejectedExecutionException(\"Executor is shutdown!\");\n+        }\n+        return super.offer(o, timeout, unit);\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/TaskQueue.java",
                "sha": "7e7d87051a9cd0962386968f8dfc30daa8f9c063",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.common.threadpool.ThreadPool",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.common.threadpool.ThreadPool?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "deletions": 0,
                "filename": "dubbo-common/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.common.threadpool.ThreadPool",
                "patch": "@@ -1,3 +1,4 @@\n fixed=com.alibaba.dubbo.common.threadpool.support.fixed.FixedThreadPool\n cached=com.alibaba.dubbo.common.threadpool.support.cached.CachedThreadPool\n limited=com.alibaba.dubbo.common.threadpool.support.limited.LimitedThreadPool\n+eager=com.alibaba.dubbo.common.threadpool.support.eager.EagerThreadPool",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.common.threadpool.ThreadPool",
                "sha": "8d87177b7415c8e2aa7d15514700d6cddb923f57",
                "status": "modified"
            },
            {
                "additions": 93,
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/test/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java",
                "changes": 93,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/test/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "deletions": 0,
                "filename": "dubbo-common/src/test/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java",
                "patch": "@@ -0,0 +1,93 @@\n+package com.alibaba.dubbo.common.threadpool.support.eager;\n+\n+\n+import com.alibaba.dubbo.common.URL;\n+import com.alibaba.dubbo.common.extension.ExtensionLoader;\n+import com.alibaba.dubbo.common.threadpool.ThreadPool;\n+import com.alibaba.dubbo.common.threadpool.support.AbortPolicyWithReport;\n+import com.alibaba.dubbo.common.utils.NamedThreadFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public class EagerThreadPoolExecutorTest {\n+\n+    private static final URL URL = new URL(\"dubbo\", \"localhost\", 8080);\n+\n+    /**\n+     * It print like this:\n+     * thread number in current pool\uff1a1,  task number in task queue\uff1a0 executor size: 1\n+     * thread number in current pool\uff1a2,  task number in task queue\uff1a0 executor size: 2\n+     * thread number in current pool\uff1a3,  task number in task queue\uff1a0 executor size: 3\n+     * thread number in current pool\uff1a4,  task number in task queue\uff1a0 executor size: 4\n+     * thread number in current pool\uff1a5,  task number in task queue\uff1a0 executor size: 5\n+     * thread number in current pool\uff1a6,  task number in task queue\uff1a0 executor size: 6\n+     * thread number in current pool\uff1a7,  task number in task queue\uff1a0 executor size: 7\n+     * thread number in current pool\uff1a8,  task number in task queue\uff1a0 executor size: 8\n+     * thread number in current pool\uff1a9,  task number in task queue\uff1a0 executor size: 9\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a0 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a4 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a3 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a2 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a1 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a0 executor size: 10\n+     * <p>\n+     * We can see , when the core threads are in busy,\n+     * the thread pool create thread (but thread nums always less than max) instead of put task into queue.\n+     */\n+    @Test\n+    public void testEagerThreadPool() throws Exception {\n+        String name = \"eager-tf\";\n+        int queues = 5;\n+        int cores = 5;\n+        int threads = 10;\n+        // alive 1 second\n+        long alive = 1000;\n+\n+        //init queue and executor\n+        TaskQueue<Runnable> taskQueue = new TaskQueue<Runnable>(queues);\n+        final EagerThreadPoolExecutor executor = new EagerThreadPoolExecutor(cores,\n+                threads,\n+                alive,\n+                TimeUnit.MILLISECONDS,\n+                taskQueue,\n+                new NamedThreadFactory(name, true),\n+                new AbortPolicyWithReport(name, URL));\n+        taskQueue.setExecutor(executor);\n+\n+        for (int i = 0; i < 15; i++) {\n+            Thread.sleep(50);\n+            executor.execute(new Runnable() {\n+                @Override\n+                public void run() {\n+                    System.out.println(\"thread number in current pool\uff1a\"\n+                            + executor.getPoolSize()\n+                            + \",  task number in task queue\uff1a\"\n+                            + executor.getQueue().size()\n+                            + \" executor size: \"\n+                            + executor.getPoolSize());\n+                    try {\n+                        Thread.sleep(1000);\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            });\n+        }\n+        Thread.sleep(5000);\n+        // cores theads are all alive.\n+        Assert.assertTrue(\"more than cores threads alive!\", executor.getPoolSize() == cores);\n+    }\n+\n+    @Test\n+    public void testSPI() {\n+        ExecutorService executorService = (ExecutorService) ExtensionLoader\n+                .getExtensionLoader(ThreadPool.class)\n+                .getExtension(\"eager\")\n+                .getExecutor(URL);\n+        Assert.assertTrue(\"test spi fail!\",\n+                executorService.getClass().getSimpleName().equals(\"EagerThreadPoolExecutor\"));\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/test/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java",
                "sha": "a9aeca2c949474ebf35457dd8b1a14d71256308b",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ConfigUtilsTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ConfigUtilsTest.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "deletions": 0,
                "filename": "dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ConfigUtilsTest.java",
                "patch": "@@ -116,6 +116,7 @@ public void test_loadProperties_oneFile_notRootPath() throws Exception {\n         expected.put(\"fixed\", \"com.alibaba.dubbo.common.threadpool.support.fixed.FixedThreadPool\");\n         expected.put(\"cached\", \"com.alibaba.dubbo.common.threadpool.support.cached.CachedThreadPool\");\n         expected.put(\"limited\", \"com.alibaba.dubbo.common.threadpool.support.limited.LimitedThreadPool\");\n+        expected.put(\"eager\", \"com.alibaba.dubbo.common.threadpool.support.eager.EagerThreadPool\");\n \n         Assert.assertEquals(expected, p);\n     }",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ConfigUtilsTest.java",
                "sha": "8b11281ac5c8cbb2e7c3d8cee78097e6e3b94a3c",
                "status": "modified"
            }
        ],
        "message": "Extension: Eager Thread Pool (#1568)\n\n* Extension: Enhanced Thread Pool\r\nA thread pool that can provide faster processing speeds when there are more tasks (of course it consumes more resources)\r\n* When the number of tasks exceeds the core size, a new thread is first started to execute the task instead of putting it into the queue.\r\n* When the number of tasks is lower than the core size for a long time, the core size threads are maintained and redundant threads are recycled.\r\n* Compared to the fixed pool\uff1aWhen there are more tasks, provide more workers to handle the tasks.\r\n* Compared to the cached pool\uff1aThe task queue in the cached pool is actually a SynchronousQueue and does not have the ability to cache tasks.\r\n* Whether to fail fail or put into a queue when a thread runs out\uff1aBoth are feasible and need to consider which way should be applied according to the business scenario. Delayed scenarios are not allowed. Failfast is more reasonable than queues. However, if there is a certain tolerance for delays, queues are more reasonable than failfast.\r\n\r\n* remove * in import\r\n\r\n* add license to fix ci failure\r\n\r\n* rename the thread pool to EagerThreadPool\r\nmodify sth with the code review\r\nformat the code file\r\n\r\n* remove '*' in import statement\r\n\r\n* throw NullPointerException if the param is null.\r\n\r\n* throw NullPointerException if the param is null.\r\n\r\n* catch throwable and decrease submitted task count anyway",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/9f48d8dbdd06e60faf84809a19a8c4e47733c38d",
        "patched_files": [
            "EagerThreadPoolExecutor.java",
            "EagerThreadPool.java",
            "com.java",
            "TaskQueue.java"
        ],
        "repo": "dubbo-hessian-lite",
        "unit_tests": [
            "EagerThreadPoolExecutorTest.java",
            "ConfigUtilsTest.java"
        ]
    },
    "dubbo-hessian-lite_5526dd8": {
        "bug_id": "dubbo-hessian-lite_5526dd8",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/5526dd8d2e80741e311e5466fc24392b2421eb00",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/5526dd8d2e80741e311e5466fc24392b2421eb00/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java?ref=5526dd8d2e80741e311e5466fc24392b2421eb00",
                "deletions": 3,
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "patch": "@@ -966,9 +966,16 @@ public URL addParameters(Map<String, String> parameters) {\n         boolean hasAndEqual = true;\r\n         for (Map.Entry<String, String> entry : parameters.entrySet()) {\r\n             String value = getParameters().get(entry.getKey());\r\n-            if (value == null && entry.getValue() != null || !value.equals(entry.getValue())) {\r\n-                hasAndEqual = false;\r\n-                break;\r\n+            if (value == null) {\r\n+                if (entry.getValue() != null) {\r\n+                    hasAndEqual = false;\r\n+                    break;\r\n+                }\r\n+            } else {\r\n+                if (!value.equals(entry.getValue())) {\r\n+                    hasAndEqual = false;\r\n+                    break;\r\n+                }\r\n             }\r\n         }\r\n         // \u5982\u679c\u6ca1\u6709\u4fee\u6539\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\r",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/5526dd8d2e80741e311e5466fc24392b2421eb00/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "sha": "d89f5735d58ebb6a5fb5bf48c622f3720078ad01",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/5526dd8d2e80741e311e5466fc24392b2421eb00/dubbo-common/src/test/java/com/alibaba/dubbo/common/URLTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/test/java/com/alibaba/dubbo/common/URLTest.java?ref=5526dd8d2e80741e311e5466fc24392b2421eb00",
                "deletions": 1,
                "filename": "dubbo-common/src/test/java/com/alibaba/dubbo/common/URLTest.java",
                "patch": "@@ -16,7 +16,6 @@\n package com.alibaba.dubbo.common;\r\n \r\n import com.alibaba.dubbo.common.utils.CollectionUtils;\r\n-\r\n import org.junit.Test;\r\n \r\n import java.io.File;\r\n@@ -633,4 +632,11 @@ public void test_Path() throws Exception {\n         assertEquals(\"path\", url.getPath());\r\n     }\r\n \r\n+    @Test\r\n+    public void testAddParameters() throws Exception {\r\n+        URL url = URL.valueOf(\"dubbo://127.0.0.1:20880\");\r\n+        Map<String, String> parameters = new HashMap<String, String>();\r\n+        parameters.put(\"version\", null);\r\n+        url.addParameters(parameters);\r\n+    }\r\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/5526dd8d2e80741e311e5466fc24392b2421eb00/dubbo-common/src/test/java/com/alibaba/dubbo/common/URLTest.java",
                "sha": "ddd21f55a708786a50e41961ee94ad204c7d592d",
                "status": "modified"
            }
        ],
        "message": "pull request#131: \u4fee\u590d\u5f53value == null &&\u3000entry.getValue() \uff1d= null \u65f6\u8bed\u53e5if(value == null && entry.getValue() != null || !value.equals(entry.getValue())) \u62a5NullPointerException",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/c5c017dcba089d8b4c7e7e42b51cd2664194c138",
        "patched_files": [
            "URL.java"
        ],
        "repo": "dubbo-hessian-lite",
        "unit_tests": [
            "URLTest.java"
        ]
    },
    "dubbo-hessian-lite_a6d8f1c": {
        "bug_id": "dubbo-hessian-lite_a6d8f1c",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282/dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/filter/CacheFilter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/filter/CacheFilter.java?ref=a6d8f1c5b20d30b3fe3206332d56bc6de1baa282",
                "deletions": 1,
                "filename": "dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/filter/CacheFilter.java",
                "patch": "@@ -52,7 +52,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n                     return new RpcResult(value);\r\n                 }\r\n                 Result result = invoker.invoke(invocation);\r\n-                if (!result.hasException()) {\r\n+                if (!result.hasException() && result.getValue() != null) {\r\n                     cache.put(key, result.getValue());\r\n                 }\r\n                 return result;\r",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282/dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/filter/CacheFilter.java",
                "sha": "e034cbbc96d5479d77b7aafa8d4fe021a606ac55",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282/dubbo-filter/dubbo-filter-cache/src/test/java/com/alibaba/dubbo/cache/filter/CacheFilterTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-filter/dubbo-filter-cache/src/test/java/com/alibaba/dubbo/cache/filter/CacheFilterTest.java?ref=a6d8f1c5b20d30b3fe3206332d56bc6de1baa282",
                "deletions": 0,
                "filename": "dubbo-filter/dubbo-filter-cache/src/test/java/com/alibaba/dubbo/cache/filter/CacheFilterTest.java",
                "patch": "@@ -44,6 +44,8 @@\n     private Invoker<?> invoker = mock(Invoker.class);\n     private Invoker<?> invoker1 = mock(Invoker.class);\n     private Invoker<?> invoker2 = mock(Invoker.class);\n+    private Invoker<?> invoker3 = mock(Invoker.class);\n+    private Invoker<?> invoker4 = mock(Invoker.class);\n     private String cacheType;\n     private CacheFactory cacheFactory;\n \n@@ -77,6 +79,11 @@ public void setUp() throws Exception {\n         given(invoker2.invoke(invocation)).willReturn(new RpcResult(\"value2\"));\n         given(invoker2.getUrl()).willReturn(url);\n \n+        given(invoker3.invoke(invocation)).willReturn(new RpcResult(new RuntimeException()));\n+        given(invoker3.getUrl()).willReturn(url);\n+\n+        given(invoker4.invoke(invocation)).willReturn(new RpcResult());\n+        given(invoker4.getUrl()).willReturn(url);\n     }\n \n     @Test\n@@ -89,6 +96,7 @@ public void testNonArgsMethod() {\n         RpcResult rpcResult1 = (RpcResult) cacheFilter.invoke(invoker1, invocation);\n         RpcResult rpcResult2 = (RpcResult) cacheFilter.invoke(invoker2, invocation);\n         Assert.assertEquals(rpcResult1.getValue(), rpcResult2.getValue());\n+        Assert.assertEquals(rpcResult1.getValue(), \"value\");\n     }\n \n     @Test\n@@ -101,5 +109,30 @@ public void testMethodWithArgs() {\n         RpcResult rpcResult1 = (RpcResult) cacheFilter.invoke(invoker1, invocation);\n         RpcResult rpcResult2 = (RpcResult) cacheFilter.invoke(invoker2, invocation);\n         Assert.assertEquals(rpcResult1.getValue(), rpcResult2.getValue());\n+        Assert.assertEquals(rpcResult1.getValue(), \"value\");\n+    }\n+\n+    @Test\n+    public void testException() {\n+        invocation.setMethodName(\"echo1\");\n+        invocation.setParameterTypes(new Class<?>[]{String.class});\n+        invocation.setArguments(new Object[]{\"arg2\"});\n+\n+        cacheFilter.invoke(invoker3, invocation);\n+        RpcResult rpcResult = (RpcResult) cacheFilter.invoke(invoker2, invocation);\n+        Assert.assertEquals(rpcResult.getValue(), \"value2\");\n+    }\n+\n+    @Test\n+    public void testNull() {\n+        invocation.setMethodName(\"echo1\");\n+        invocation.setParameterTypes(new Class<?>[]{String.class});\n+        invocation.setArguments(new Object[]{\"arg3\"});\n+\n+        cacheFilter.invoke(invoker4, invocation);\n+        RpcResult rpcResult1 = (RpcResult) cacheFilter.invoke(invoker1, invocation);\n+        RpcResult rpcResult2 = (RpcResult) cacheFilter.invoke(invoker2, invocation);\n+        Assert.assertEquals(rpcResult1.getValue(), \"value1\");\n+        Assert.assertEquals(rpcResult2.getValue(), \"value1\");\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282/dubbo-filter/dubbo-filter-cache/src/test/java/com/alibaba/dubbo/cache/filter/CacheFilterTest.java",
                "sha": "760605c9ab60495e77125bcb2dab6d0ca040b700",
                "status": "modified"
            }
        ],
        "message": "    #1597: CacheFilter,when value is null,it will throw NPE(if use ehcache for jcache),why not check null here (#1828)",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/d03ff27bd0c2e77689bfe11f16f5e9276dc62081",
        "patched_files": [
            "CacheFilter.java"
        ],
        "repo": "dubbo-hessian-lite",
        "unit_tests": [
            "CacheFilterTest.java"
        ]
    }
}