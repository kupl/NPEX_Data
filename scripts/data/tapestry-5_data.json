[
    {
        "commit": "https://github.com/apache/tapestry-5/commit/01a1439c4a520cf5425415e0ed6a9fa51d386df1",
        "file": [
            {
                "patch": "@@ -250,6 +250,12 @@ public String getClientId()\n     {\n         if (resources.isBound(\"id\"))\n             return idParameter;\n+        \n+        // TAP4-2342. I know this won't work with a Zone with no given clientId and that was already \n+        // via AJAX inside an outer Zone, but it's still better than nothing.\n+        if (clientId == null) {\n+            clientId = resources.getId();\n+        }\n \n         return clientId;\n     }",
                "additions": 6,
                "raw_url": "https://github.com/apache/tapestry-5/raw/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Zone.java",
                "status": "modified",
                "changes": 6,
                "deletions": 0,
                "sha": "a04524ad90f30957b7fd8719bf8781527a0ca062",
                "blob_url": "https://github.com/apache/tapestry-5/blob/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Zone.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Zone.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Zone.java?ref=01a1439c4a520cf5425415e0ed6a9fa51d386df1"
            },
            {
                "patch": "@@ -87,6 +87,7 @@\n         MultiZone update with id of non-Zone\n         element\n     </t:actionlink>\n+    <t:actionlink class=\"btn btn-default\" t:id=\"updateViaAjaxResponseRenderer\" zone=\"output\">Update via AjaxResponseRenderer</t:actionlink>\n </div>\n \n <div id=\"notAZone\"/>",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/test/app1/nested/ZoneDemo.tml",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "cd4beaf5763696d3fe61ccc17702b53f3f7c431b",
                "blob_url": "https://github.com/apache/tapestry-5/blob/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/test/app1/nested/ZoneDemo.tml",
                "filename": "tapestry-core/src/test/app1/nested/ZoneDemo.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/app1/nested/ZoneDemo.tml?ref=01a1439c4a520cf5425415e0ed6a9fa51d386df1"
            },
            {
                "patch": "@@ -323,4 +323,24 @@ public void update_zone_with_empty_body()\n         assertText(\"zone-update-message\", \"Zone updated.\");\n     }\n \n+    /**\n+     * TAP5-2330\n+     */\n+    @Test\n+    public void update_zone_with_no_clientid()\n+    {\n+        openLinks(\"Zone Demo\");\n+\n+        assertText(\"zone-update-message\", \"\");\n+\n+        click(\"link=Update via AjaxResponseRenderer\");\n+\n+        waitForAjaxRequestsToComplete();\n+\n+        assertText(\"zone-update-message\", \"Zone updated.\");\n+        \n+        assertEquals(\"Selected: AjaxResponseRenderer\", getText(\"output\"));\n+        \n+    }\n+\n }",
                "additions": 20,
                "raw_url": "https://github.com/apache/tapestry-5/raw/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/ZoneTests.java",
                "status": "modified",
                "changes": 20,
                "deletions": 0,
                "sha": "77acefe5703ea76181de771f115ac8706473ec93",
                "blob_url": "https://github.com/apache/tapestry-5/blob/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/ZoneTests.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/ZoneTests.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/ZoneTests.java?ref=01a1439c4a520cf5425415e0ed6a9fa51d386df1"
            },
            {
                "patch": "@@ -222,4 +222,10 @@ Object onActionFromNonZoneUpdate()\n     {\n         return new MultiZoneUpdate(\"notAZone\", forNotAZone);\n     }\n+    \n+    void onActionFromUpdateViaAjaxResponseRenderer()\n+    {\n+        name = \"AjaxResponseRenderer\";\n+        ajaxResponseRenderer.addRender(output);\n+    }\n }",
                "additions": 6,
                "raw_url": "https://github.com/apache/tapestry-5/raw/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/nested/ZoneDemo.java",
                "status": "modified",
                "changes": 6,
                "deletions": 0,
                "sha": "e13ed76351064e8bfc75bee6e0189ac5ae5ed4e6",
                "blob_url": "https://github.com/apache/tapestry-5/blob/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/nested/ZoneDemo.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/nested/ZoneDemo.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/nested/ZoneDemo.java?ref=01a1439c4a520cf5425415e0ed6a9fa51d386df1"
            },
            {
                "patch": "@@ -913,6 +913,12 @@ void print(JSONPrintSession session)\n      */\n     static void printValue(JSONPrintSession session, Object value)\n     {\n+    \t\n+    \t// TAP5-2342: a little more robustness by treating null as JSONObject.NULL and avoinding an NPE.\n+    \tif (value == null) {\n+    \t\tvalue = NULL;\n+    \t}\n+    \t\n         if (value instanceof JSONObject)\n         {\n             ((JSONObject) value).print(session);",
                "additions": 6,
                "raw_url": "https://github.com/apache/tapestry-5/raw/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-json/src/main/java/org/apache/tapestry5/json/JSONObject.java",
                "status": "modified",
                "changes": 6,
                "deletions": 0,
                "sha": "651260b00b70458fcdd1b630872f058c8616b04f",
                "blob_url": "https://github.com/apache/tapestry-5/blob/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-json/src/main/java/org/apache/tapestry5/json/JSONObject.java",
                "filename": "tapestry-json/src/main/java/org/apache/tapestry5/json/JSONObject.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-json/src/main/java/org/apache/tapestry5/json/JSONObject.java?ref=01a1439c4a520cf5425415e0ed6a9fa51d386df1"
            }
        ],
        "bug_id": "tapestry-5_1",
        "parent": "https://github.com/apache/tapestry-5/commit/d96b5534fc02d8d12b75eafae18c276d2ddf11f4",
        "message": "TAP5-2330 : NullPointerException when updating a Zone with no clientId\nTAP5-2342 : NPE on org.apache.tapestry5.json.JSONObject.printValue(JSONObject.java:950)",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/e048d9542c1174d00363771ecdc74b46e2962ff2",
        "file": [
            {
                "patch": "@@ -140,7 +140,10 @@ public void write()\n                     cookie.setComment(comment);\n                 }\n \n-                cookie.setHttpOnly(httpOnly);\n+                if (httpOnly != null)\n+                {\n+                    cookie.setHttpOnly(httpOnly);\n+                }\n \n                 cookieSink.addCookie(cookie);\n             }",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/e048d9542c1174d00363771ecdc74b46e2962ff2/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/CookiesImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "e9bfd0bf1959bf3f0e7761b0a9cb5be126a30416",
                "blob_url": "https://github.com/apache/tapestry-5/blob/e048d9542c1174d00363771ecdc74b46e2962ff2/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/CookiesImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/services/CookiesImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/CookiesImpl.java?ref=e048d9542c1174d00363771ecdc74b46e2962ff2"
            }
        ],
        "bug_id": "tapestry-5_2",
        "parent": "https://github.com/apache/tapestry-5/commit/f161aa89b64fc4f8f28aaabcb59ade036dc0fcd0",
        "message": "TAP5-2327: fix NullPointerException",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/4d9557a2a303a1cadc944cc79108f6950cc8941e",
        "file": [
            {
                "patch": "@@ -265,7 +265,7 @@ public static String join(List elements, String separator)\n                 return \"\";\n     \n             case 1:\n-                return elements.get(0).toString();\n+                return String.valueOf(elements.get(0));\n     \n             default:\n     ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4d9557a2a303a1cadc944cc79108f6950cc8941e/commons/src/main/java/org/apache/tapestry5/ioc/internal/util/InternalCommonsUtils.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "2a227ad93c15fbbe3caa22e12ababf4e1ad9ad06",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4d9557a2a303a1cadc944cc79108f6950cc8941e/commons/src/main/java/org/apache/tapestry5/ioc/internal/util/InternalCommonsUtils.java",
                "filename": "commons/src/main/java/org/apache/tapestry5/ioc/internal/util/InternalCommonsUtils.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/commons/src/main/java/org/apache/tapestry5/ioc/internal/util/InternalCommonsUtils.java?ref=4d9557a2a303a1cadc944cc79108f6950cc8941e"
            },
            {
                "patch": "@@ -123,6 +123,8 @@ class InternalUtilsSpec extends Specification {\n     [\"barney\"]                      | \"barney\"                       | \"single value\"\n     [\"fred\", \"barney\", \"wilma\"]     | \"fred, barney, wilma\"          | \"multiple values\"\n     [\"fred\", \"barney\", \"\", \"wilma\"] | \"fred, barney, (blank), wilma\" | \"empty string converted to '(blank)'\"\n+    [\"fred\", null ]                 | \"fred, null\"                   | \"list with null values\"\n+    [ null ]                        | \"null\"                         | \"list with a single null value\" //TAP5-2529\n   }\n \n   @Unroll",
                "additions": 2,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4d9557a2a303a1cadc944cc79108f6950cc8941e/tapestry-ioc/src/test/groovy/ioc/specs/InternalUtilsSpec.groovy",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "4f400bc9f7be65de8e851999a1cbf92c2d424655",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4d9557a2a303a1cadc944cc79108f6950cc8941e/tapestry-ioc/src/test/groovy/ioc/specs/InternalUtilsSpec.groovy",
                "filename": "tapestry-ioc/src/test/groovy/ioc/specs/InternalUtilsSpec.groovy",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/test/groovy/ioc/specs/InternalUtilsSpec.groovy?ref=4d9557a2a303a1cadc944cc79108f6950cc8941e"
            }
        ],
        "bug_id": "tapestry-5_3",
        "parent": "https://github.com/apache/tapestry-5/commit/9768f40bfab4226db33eb5d44f8cceaaa32d2500",
        "message": "TAP5-2529: fix NullPointerException when joining a list with a single null element",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/d64dfa1d1be046889946729bc787a536f66feb70",
        "file": [
            {
                "patch": "@@ -224,7 +224,6 @@\n     @Parameter(value = \"defaultPaginationModel\")\n     private GridPaginationModel paginationModel;\n \n-    @Property\n     @Persist\n     private GridPaginationModel defaultPaginationModel;\n \n@@ -352,8 +351,6 @@ public void updateSort(String columnId)\n         {\n             assert InternalUtils.isNonBlank(columnId);\n \n-            setupPaginationModel();\n-\n             if (columnId.equals(paginationModel.getSortColumnId()))\n             {\n                 setSortAscending(!getSortAscending());\n@@ -381,7 +378,6 @@ public void updateSort(String columnId)\n \n         public void clear()\n         {\n-            setupPaginationModel();\n             paginationModel.setSortColumnId(null);\n             paginationModel.setSortAscending(null);\n         }\n@@ -455,9 +451,6 @@ public String toString()\n \n     Object setupRender()\n     {\n-\n-        setupPaginationModel();\n-\n         if (formSupport != null)\n         {\n             formSupport.store(this, SETUP_DATA_SOURCE);\n@@ -477,12 +470,14 @@ void cleanupRender()\n         zone = null;\n     }\n \n-    private void setupPaginationModel()\n+    public GridPaginationModel getDefaultPaginationModel()\n     {\n-        if (paginationModel == null)\n+        if (defaultPaginationModel == null)\n         {\n-            paginationModel = new GridPaginationModelImpl();\n+            defaultPaginationModel = new GridPaginationModelImpl();\n         }\n+\n+        return defaultPaginationModel;\n     }\n \n     void setupDataSource()",
                "additions": 5,
                "raw_url": "https://github.com/apache/tapestry-5/raw/d64dfa1d1be046889946729bc787a536f66feb70/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java",
                "status": "modified",
                "changes": 15,
                "deletions": 10,
                "sha": "110b9a1373c04a68bf41a6dd098cc49b4e08c6df",
                "blob_url": "https://github.com/apache/tapestry-5/blob/d64dfa1d1be046889946729bc787a536f66feb70/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java?ref=d64dfa1d1be046889946729bc787a536f66feb70"
            },
            {
                "patch": "@@ -0,0 +1,10 @@\n+<html t:type=\"Border\" xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_0_0.xsd\">\n+\n+    <h1>Grid Demo</h1>\n+\n+    <table t:type=\"grid\" t:id=\"grid\" source=\"tracks\">\n+\n+    </table>\n+\n+\n+</html>",
                "additions": 10,
                "raw_url": "https://github.com/apache/tapestry-5/raw/d64dfa1d1be046889946729bc787a536f66feb70/tapestry-core/src/test/app1/GridEarlyPagingDemo.tml",
                "status": "added",
                "changes": 10,
                "deletions": 0,
                "sha": "2b2eafd4a8d1e8e79fe1cee35da08e29bda8437b",
                "blob_url": "https://github.com/apache/tapestry-5/blob/d64dfa1d1be046889946729bc787a536f66feb70/tapestry-core/src/test/app1/GridEarlyPagingDemo.tml",
                "filename": "tapestry-core/src/test/app1/GridEarlyPagingDemo.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/app1/GridEarlyPagingDemo.tml?ref=d64dfa1d1be046889946729bc787a536f66feb70"
            },
            {
                "patch": "@@ -366,6 +366,18 @@ public void submit_with_context_inside_grid()\n         assertTextPresent(\" Deleted Studying Stones\");\n \n     }\n+    \n+    /**\n+     * TAP5-2437\n+     */\n+    @Test\n+    public void set_grid_current_page_before_first_render()\n+    {\n+        openLinks(\"Grid Early Paging\");\n+\n+        assertTextPresent(\"Walking On Broken Glass\");\n+\n+    }\n \n \n }",
                "additions": 12,
                "raw_url": "https://github.com/apache/tapestry-5/raw/d64dfa1d1be046889946729bc787a536f66feb70/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/GridTests.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "73afb6ab5190b946398aacf36939eedc482d7360",
                "blob_url": "https://github.com/apache/tapestry-5/blob/d64dfa1d1be046889946729bc787a536f66feb70/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/GridTests.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/GridTests.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/GridTests.java?ref=d64dfa1d1be046889946729bc787a536f66feb70"
            },
            {
                "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2007, 2008, 2011 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.pages;\n+\n+import org.apache.tapestry5.annotations.InjectComponent;\n+import org.apache.tapestry5.annotations.SetupRender;\n+import org.apache.tapestry5.corelib.components.Grid;\n+import org.apache.tapestry5.integration.app1.data.Track;\n+import org.apache.tapestry5.integration.app1.services.MusicLibrary;\n+import org.apache.tapestry5.ioc.annotations.Inject;\n+\n+import java.util.List;\n+\n+public class GridEarlyPagingDemo\n+{\n+    @Inject\n+    private MusicLibrary library;\n+\n+    @InjectComponent\n+    private Grid grid;\n+\n+    public List<Track> getTracks()\n+    {\n+        return library.getTracks();\n+    }\n+\n+    @SetupRender\n+    void jumpTo2ndPage(){\n+      grid.setCurrentPage(2);\n+    }\n+\n+}",
                "additions": 44,
                "raw_url": "https://github.com/apache/tapestry-5/raw/d64dfa1d1be046889946729bc787a536f66feb70/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/GridEarlyPagingDemo.java",
                "status": "added",
                "changes": 44,
                "deletions": 0,
                "sha": "f8f7c8d26488764d4e9233887d0ecdf1fcfcf0ac",
                "blob_url": "https://github.com/apache/tapestry-5/blob/d64dfa1d1be046889946729bc787a536f66feb70/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/GridEarlyPagingDemo.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/GridEarlyPagingDemo.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/GridEarlyPagingDemo.java?ref=d64dfa1d1be046889946729bc787a536f66feb70"
            },
            {
                "patch": "@@ -342,6 +342,8 @@ public int compareTo(Item o)\n                             \"handling of remove and reorder parameters\"),\n \n                     new Item(\"EmptyGrid\", \"Empty Grid Demo\", \"show table for empty data sources\"),\n+                    \n+                    new Item(\"GridEarlyPagingDemo\", \"Grid Early Paging\", \"set a Grid's current page before rendering\"),\n \n                     new Item(\"protected\", \"Protected Page\",\n                             \"Demonstrate result of non-void return from a page's activate method\"),",
                "additions": 2,
                "raw_url": "https://github.com/apache/tapestry-5/raw/d64dfa1d1be046889946729bc787a536f66feb70/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "4d4c4f3a726dc3f00bdd7006e2aa47bcde98797a",
                "blob_url": "https://github.com/apache/tapestry-5/blob/d64dfa1d1be046889946729bc787a536f66feb70/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java?ref=d64dfa1d1be046889946729bc787a536f66feb70"
            }
        ],
        "bug_id": "tapestry-5_4",
        "parent": "https://github.com/apache/tapestry-5/commit/133471ebfeb4df6cd23e0cc6f89bc826b0092d99",
        "message": "TAP5-2437: NullPointerException when trying to access (read or write) Grid's currentPage",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/a7b455651f22aa7cf82c20e2bdb6ef145bfd1ca6",
        "file": [
            {
                "patch": "@@ -53,17 +53,20 @@ public PropertyModelImpl(BeanModel model, String name, PropertyConduit conduit,\n         label = TapestryInternalUtils.defaultLabel(id, messages, name);\n \n         // TAP5-2305\n-        Sortable sortableAnnotation = conduit.getAnnotation(Sortable.class);\n-        if (sortableAnnotation != null) \n+        if (conduit != null)\n         {\n-            sortable = sortableAnnotation.value();\n-        }\n-        else\n-        {\n-            // Primitive types need to be converted to wrapper types before checking to see\n-            // if they are sortable.\n-            Class wrapperType = PlasticUtils.toWrapperType(getPropertyType());\n-            sortable = Comparable.class.isAssignableFrom(wrapperType);\n+            Sortable sortableAnnotation = conduit.getAnnotation(Sortable.class);\n+            if (sortableAnnotation != null)\n+            {\n+                sortable = sortableAnnotation.value();\n+            }\n+            else\n+            {\n+                // Primitive types need to be converted to wrapper types before checking to see\n+                // if they are sortable.\n+                Class wrapperType = PlasticUtils.toWrapperType(getPropertyType());\n+                sortable = Comparable.class.isAssignableFrom(wrapperType);\n+            }\n         }\n     }\n ",
                "additions": 13,
                "raw_url": "https://github.com/apache/tapestry-5/raw/a7b455651f22aa7cf82c20e2bdb6ef145bfd1ca6/tapestry-core/src/main/java/org/apache/tapestry5/internal/beaneditor/PropertyModelImpl.java",
                "status": "modified",
                "changes": 23,
                "deletions": 10,
                "sha": "703ce4495a31d464d1ab6d432970f1d5f1e7bb55",
                "blob_url": "https://github.com/apache/tapestry-5/blob/a7b455651f22aa7cf82c20e2bdb6ef145bfd1ca6/tapestry-core/src/main/java/org/apache/tapestry5/internal/beaneditor/PropertyModelImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/beaneditor/PropertyModelImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/beaneditor/PropertyModelImpl.java?ref=a7b455651f22aa7cf82c20e2bdb6ef145bfd1ca6"
            }
        ],
        "bug_id": "tapestry-5_5",
        "parent": "https://github.com/apache/tapestry-5/commit/b97d9aa36a7c4826a329ebad7ca44a4067a48de9",
        "message": "fix a NullPointerException when the conduit is null, e.g. when BeanModel.addEmpty(String) is used",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/f71043e95b3d9afb5c3a462632a89b2a184e0015",
        "file": [
            {
                "patch": "@@ -335,7 +335,7 @@ public Class getRowType()\n     {\n         public ColumnSort getColumnSort(String columnId)\n         {\n-            if (!TapestryInternalUtils.isEqual(columnId, paginationModel.getSortColumnId()))\n+            if (paginationModel == null || !TapestryInternalUtils.isEqual(columnId, paginationModel.getSortColumnId()))\n             {\n                 return ColumnSort.UNSORTED;\n             }\n@@ -381,6 +381,7 @@ public void updateSort(String columnId)\n \n         public void clear()\n         {\n+            setupPaginationModel();\n             paginationModel.setSortColumnId(null);\n             paginationModel.setSortAscending(null);\n         }",
                "additions": 2,
                "raw_url": "https://github.com/apache/tapestry-5/raw/f71043e95b3d9afb5c3a462632a89b2a184e0015/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "6f84ae8a0c11a0b1c39dc5a794950498abcfb63d",
                "blob_url": "https://github.com/apache/tapestry-5/blob/f71043e95b3d9afb5c3a462632a89b2a184e0015/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java?ref=f71043e95b3d9afb5c3a462632a89b2a184e0015"
            }
        ],
        "bug_id": "tapestry-5_6",
        "parent": "https://github.com/apache/tapestry-5/commit/0b27da50fac1df0313eadcc58d7af4752de8098d",
        "message": "TAP5-1689: Fix NullPointerExceptions when trying to query or clear a Grid's sort model before the paginationModel has been setup",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/3779851328b96a73a0f6b8d2b758213f48150398",
        "file": [
            {
                "patch": "@@ -14,6 +14,7 @@\n \n package org.apache.tapestry5;\n \n+import java.io.IOException;\n import java.io.Serializable;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n@@ -34,6 +35,10 @@\n \n     private transient AtomicBoolean dirty = new AtomicBoolean(false);\n \n+    private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        dirty = new AtomicBoolean(false);\n+    }\n+\n     public final boolean checkAndResetDirtyMarker()\n     {\n         return dirty.getAndSet(false);",
                "additions": 5,
                "raw_url": "https://github.com/apache/tapestry-5/raw/3779851328b96a73a0f6b8d2b758213f48150398/tapestry-core/src/main/java/org/apache/tapestry5/BaseOptimizedSessionPersistedObject.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "402328edf319f5d84d15b9ebb435909ff6a3fbfb",
                "blob_url": "https://github.com/apache/tapestry-5/blob/3779851328b96a73a0f6b8d2b758213f48150398/tapestry-core/src/main/java/org/apache/tapestry5/BaseOptimizedSessionPersistedObject.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/BaseOptimizedSessionPersistedObject.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/BaseOptimizedSessionPersistedObject.java?ref=3779851328b96a73a0f6b8d2b758213f48150398"
            }
        ],
        "bug_id": "tapestry-5_7",
        "parent": "https://github.com/apache/tapestry-5/commit/5647c47c92adc72142e1feaccd5d8703d1677ec2",
        "message": "Prevent NPE after deserializing",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/84d1eeb8e75ca7b42128e5ceea840c73e804e657",
        "file": [
            {
                "patch": "@@ -57,7 +57,7 @@\n         <dependency>\n             <groupId>org.codehaus.woodstox</groupId>\n             <artifactId>woodstox-core-asl</artifactId>\n-            <version>4.0.1</version>\n+            <version>4.0.3</version>\n         </dependency>\n \n     </dependencies>",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/84d1eeb8e75ca7b42128e5ceea840c73e804e657/tapestry-core/pom.xml",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "9e15d768d0f3bae04c8c1e2833c5d70b7c994690",
                "blob_url": "https://github.com/apache/tapestry-5/blob/84d1eeb8e75ca7b42128e5ceea840c73e804e657/tapestry-core/pom.xml",
                "filename": "tapestry-core/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/pom.xml?ref=84d1eeb8e75ca7b42128e5ceea840c73e804e657"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2008 The Apache Software Foundation\n+// Copyright 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -26,18 +26,20 @@\n  */\n class MapHolder\n {\n+    private static final Map<String, String> EMPTY_MAP = Collections.emptyMap();\n+\n     private final Map<String, String> startingMap;\n \n     private Map<String, String> localMap;\n \n     MapHolder()\n     {\n-        this(Collections.<String, String>emptyMap());\n+        this(null);\n     }\n \n     MapHolder(Map<String, String> startingMap)\n     {\n-        this.startingMap = startingMap;\n+        this.startingMap = startingMap == null ? EMPTY_MAP : startingMap;\n     }\n \n     void put(String key, String value)",
                "additions": 5,
                "raw_url": "https://github.com/apache/tapestry-5/raw/84d1eeb8e75ca7b42128e5ceea840c73e804e657/tapestry-core/src/main/java/org/apache/tapestry5/dom/MapHolder.java",
                "status": "modified",
                "changes": 8,
                "deletions": 3,
                "sha": "bc7ad827128a76a6166489872d9ba2e1fba8da9c",
                "blob_url": "https://github.com/apache/tapestry-5/blob/84d1eeb8e75ca7b42128e5ceea840c73e804e657/tapestry-core/src/main/java/org/apache/tapestry5/dom/MapHolder.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/dom/MapHolder.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/dom/MapHolder.java?ref=84d1eeb8e75ca7b42128e5ceea840c73e804e657"
            },
            {
                "patch": "@@ -0,0 +1,31 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n+<html xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_0_0.xsd\">\n+    <body>\n+\n+        <h1>Outside of zone</h1>\n+\n+        <p>Current time is\n+            <span id=\"outernow\">${now}</span>\n+        </p>\n+\n+\n+        <h2>Inside of zone</h2>\n+        <t:zone t:id=\"zone\">\n+\n+            <p>Current time is\n+                <span id=\"innernow\">${now}</span>\n+            </p>\n+\n+            <t:if test=\"message\">\n+                <p id=\"message\">${message}</p>\n+            </t:if>\n+\n+            <t:form zone=\"zone\">\n+                <input type=\"submit\" value=\"Update Zone\"/>\n+            </t:form>\n+        </t:zone>\n+    </body>\n+\n+\n+</html>\n\\ No newline at end of file",
                "additions": 31,
                "raw_url": "https://github.com/apache/tapestry-5/raw/84d1eeb8e75ca7b42128e5ceea840c73e804e657/tapestry-core/src/test/app1/ZoneUpdateNamespace.tml",
                "status": "added",
                "changes": 31,
                "deletions": 0,
                "sha": "47fdf14d2e9d611a7cf2564d239c5fc6f7b4f3a1",
                "blob_url": "https://github.com/apache/tapestry-5/blob/84d1eeb8e75ca7b42128e5ceea840c73e804e657/tapestry-core/src/test/app1/ZoneUpdateNamespace.tml",
                "filename": "tapestry-core/src/test/app1/ZoneUpdateNamespace.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/app1/ZoneUpdateNamespace.tml?ref=84d1eeb8e75ca7b42128e5ceea840c73e804e657"
            },
            {
                "patch": "@@ -2846,4 +2846,24 @@ public void abstract_component_class()\n         assertTextPresent(\"java.lang.RuntimeException\",\n                           \"Component class org.apache.tapestry5.integration.app1.components.AbstractComponent is abstract and can not be instantiated.\");\n     }\n+\n+    /**\n+     * TAP5-573\n+     */\n+    public void zone_namespace_interaction_fixed()\n+    {\n+        start(\"Zone/Namespace Interaction\");\n+\n+        String outerNow = getText(\"outernow\");\n+        String innerNow = getText(\"innernow\");\n+\n+        click(SUBMIT);\n+\n+        waitForElementToAppear(\"message\");\n+\n+        // Make sure it was just an Ajax update.\n+        assertEquals(getText(\"outernow\"), outerNow);\n+\n+        assertFalse(getText(\"innernow\").equals(innerNow));\n+    }\n }\n\\ No newline at end of file",
                "additions": 20,
                "raw_url": "https://github.com/apache/tapestry-5/raw/84d1eeb8e75ca7b42128e5ceea840c73e804e657/tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java",
                "status": "modified",
                "changes": 20,
                "deletions": 0,
                "sha": "23beafcf6c8d56fddfc3bf34c44c68922bdc631d",
                "blob_url": "https://github.com/apache/tapestry-5/blob/84d1eeb8e75ca7b42128e5ceea840c73e804e657/tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java?ref=84d1eeb8e75ca7b42128e5ceea840c73e804e657"
            },
            {
                "patch": "@@ -65,6 +65,8 @@ public int compareTo(Item o)\n \n     private static final List<Item> ITEMS = CollectionFactory.newList(\n \n+            new Item(\"ZoneUpdateNamespace\", \"Zone/Namespace Interaction\", \"Prove that TAP5-573 is fixed\"),\n+\n             new Item(\"AbstractComponentDemo\", \"Abstract Component Demo\", \"Error when a component is abstract\"),\n \n             new Item(\"TemplateOverrideDemo\", \"Template Override Demo\",",
                "additions": 2,
                "raw_url": "https://github.com/apache/tapestry-5/raw/84d1eeb8e75ca7b42128e5ceea840c73e804e657/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "ecc3ca5c724c43cdccaa05ff63daefe63a40c180",
                "blob_url": "https://github.com/apache/tapestry-5/blob/84d1eeb8e75ca7b42128e5ceea840c73e804e657/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java?ref=84d1eeb8e75ca7b42128e5ceea840c73e804e657"
            },
            {
                "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2009 Formos\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.pages;\n+\n+import org.apache.tapestry5.annotations.InjectComponent;\n+import org.apache.tapestry5.annotations.Property;\n+import org.apache.tapestry5.corelib.components.Zone;\n+\n+import java.util.Date;\n+\n+public class ZoneUpdateNamespace\n+{\n+    @InjectComponent\n+    private Zone zone;\n+\n+    @Property\n+    private String message;\n+\n+    Object onSuccess()\n+    {\n+        message = \"Zone updated\";\n+\n+        return zone.getBody();\n+    }\n+\n+    public Date getNow()\n+    {\n+        return new Date();\n+    }\n+}",
                "additions": 42,
                "raw_url": "https://github.com/apache/tapestry-5/raw/84d1eeb8e75ca7b42128e5ceea840c73e804e657/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ZoneUpdateNamespace.java",
                "status": "added",
                "changes": 42,
                "deletions": 0,
                "sha": "e2bc4fb75c5c1271db35e7d9966c78e4a0b8fe54",
                "blob_url": "https://github.com/apache/tapestry-5/blob/84d1eeb8e75ca7b42128e5ceea840c73e804e657/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ZoneUpdateNamespace.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ZoneUpdateNamespace.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ZoneUpdateNamespace.java?ref=84d1eeb8e75ca7b42128e5ceea840c73e804e657"
            }
        ],
        "bug_id": "tapestry-5_8",
        "parent": "https://github.com/apache/tapestry-5/commit/4467734db8791d69686e0f55b72acd79ce3a170f",
        "message": "TAP5-573: NullPointerException during AJAX form submit\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@755409 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/4e731e82c81cb86f9cda70371aa0b6db50df9077",
        "file": [
            {
                "patch": "@@ -26,10 +26,9 @@\n import java.util.concurrent.TimeUnit;\n \n /**\n- * Implements a barrier that periodically asks the\n- * {@link org.apache.tapestry.internal.services.UpdateListenerHub} to check for updates to files.\n- * The UpdateListenerHub is invoked from a write method, meaning that when it is called, all other\n- * threads will be blocked.\n+ * Implements a barrier that periodically asks the {@link org.apache.tapestry.internal.services.UpdateListenerHub} to\n+ * check for updates to files. The UpdateListenerHub is invoked from a write method, meaning that when it is called, all\n+ * other threads will be blocked.\n  */\n public class CheckForUpdatesFilter implements RequestFilter\n {\n@@ -75,8 +74,8 @@ public CheckForUpdatesFilter(UpdateListenerHub updateListenerHub, long checkInte\n         _updateTimeout = updateTimeout;\n     }\n \n-    public boolean service(final Request request, final Response response,\n-                           final RequestHandler handler) throws IOException\n+    public boolean service(final Request request, final Response response, final RequestHandler handler)\n+            throws IOException\n     {\n         final Holder<IOException> exceptionHolder = new Holder<IOException>();\n \n@@ -106,10 +105,7 @@ public Boolean invoke()\n \n         boolean result = _barrier.withRead(invokable);\n \n-        IOException ex = exceptionHolder.get();\n-\n-        if (ex != null)\n-            throw ex;\n+        if (exceptionHolder.hasValue()) throw exceptionHolder.get();\n \n         return result;\n     }",
                "additions": 6,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4e731e82c81cb86f9cda70371aa0b6db50df9077/tapestry-core/src/main/java/org/apache/tapestry/internal/services/CheckForUpdatesFilter.java",
                "status": "modified",
                "changes": 16,
                "deletions": 10,
                "sha": "0d10717cce1df7d6397ffef2a06036273a85d74c",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4e731e82c81cb86f9cda70371aa0b6db50df9077/tapestry-core/src/main/java/org/apache/tapestry/internal/services/CheckForUpdatesFilter.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/services/CheckForUpdatesFilter.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/services/CheckForUpdatesFilter.java?ref=4e731e82c81cb86f9cda70371aa0b6db50df9077"
            },
            {
                "patch": "@@ -455,7 +455,10 @@ public static void contributeMasterObjectProvider(OrderedConfiguration<ObjectPro\n      * <dt>ErrorFilter</dt> <dd>Catches request errors and lets the {@link org.apache.tapestry.services.RequestExceptionHandler}\n      * handle them</dd> <dt>Localization</dt> <dd>Determines the locale for the current request from header data or\n      * cookies in the request</dd> <dt>IgnoredPaths</dt> <dd>Forces Tapestry to ignore paths, based on regular\n-     * expressions contributed to the IgnoredPathsFilter service.  Ordered after StaticFiles.</dd> </dl>\n+     * expressions contributed to the IgnoredPathsFilter service.  Ordered after StaticFiles.</dd>\n+     * <dt>StoreIntoGlobals</dt> <dd>Stores the request and response into the {@link\n+     * org.apache.tapestry.services.RequestGlobals} service (this is repeated at the end of the pipeline, in case any\n+     * filter substitutes the request or response). </dl>\n      */\n     public void contributeRequestHandler(OrderedConfiguration<RequestFilter> configuration, Context context,\n \n@@ -476,8 +479,6 @@ public void contributeRequestHandler(OrderedConfiguration<RequestFilter> configu\n     {\n         RequestFilter staticFilesFilter = new StaticFilesFilter(context);\n \n-        configuration.add(\"StaticFiles\", staticFilesFilter);\n-\n         RequestFilter errorFilter = new RequestFilter()\n         {\n             public boolean service(Request request, Response response, RequestHandler handler) throws IOException\n@@ -503,14 +504,28 @@ public boolean service(Request request, Response response, RequestHandler handle\n             }\n         };\n \n-        configuration.add(\"IgnoredPaths\", ignoredPathsFilter, \"after:StaticFiles\");\n+        RequestFilter storeIntoGlobals = new RequestFilter()\n+        {\n+            public boolean service(Request request, Response response, RequestHandler handler) throws IOException\n+            {\n+                _requestGlobals.store(request, response);\n \n-        configuration.add(\"ErrorFilter\", errorFilter);\n+                return handler.service(request, response);\n+            }\n+        };\n \n         configuration.add(\"CheckForUpdates\",\n                           new CheckForUpdatesFilter(_updateListenerHub, checkInterval, updateTimeout), \"before:*\");\n \n-        configuration.add(\"Localization\", new LocalizationFilter(localizationSetter));\n+        configuration.add(\"StaticFiles\", staticFilesFilter);\n+\n+        configuration.add(\"IgnoredPaths\", ignoredPathsFilter, \"after:StaticFiles\");\n+\n+        configuration.add(\"ErrorFilter\", errorFilter);\n+\n+        configuration.add(\"StoreIntoGlobals\", storeIntoGlobals);\n+\n+        configuration.add(\"Localization\", new LocalizationFilter(localizationSetter), \"after:ErrorFilter\");\n     }\n \n \n@@ -851,6 +866,7 @@ public InjectionProvider build(List<InjectionProvider> configuration)\n     /**\n      * Initializes the application.\n      */\n+    @Marker(Primary.class)\n     public ApplicationInitializer build(Logger logger, List<ApplicationInitializerFilter> configuration)\n     {\n         ApplicationInitializer terminator = new ApplicationInitializer()\n@@ -867,25 +883,34 @@ public void initializeApplication(Context context)\n \n     public HttpServletRequestHandler build(Logger logger, List<HttpServletRequestFilter> configuration,\n \n-                                           @InjectService(\"RequestHandler\")\n+                                           @Primary\n                                            final RequestHandler handler)\n     {\n         HttpServletRequestHandler terminator = new HttpServletRequestHandler()\n         {\n-            public boolean service(HttpServletRequest request, HttpServletResponse response) throws IOException\n+            public boolean service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n+                    throws IOException\n             {\n-                _requestGlobals.store(request, response);\n+                _requestGlobals.store(servletRequest, servletResponse);\n \n-                return handler.service(new RequestImpl(request), new ResponseImpl(response));\n+                Request request = new RequestImpl(servletRequest);\n+                Response response = new ResponseImpl(servletResponse);\n+\n+                // Transition from the Servlet API-based pipeline, to the Tapestry-based pipeline.\n+\n+                return handler.service(request, response);\n             }\n         };\n \n         return _pipelineBuilder.build(logger, HttpServletRequestHandler.class, HttpServletRequestFilter.class,\n                                       configuration, terminator);\n     }\n \n-    public RequestHandler build(Logger logger, List<RequestFilter> configuration, @InjectService(\"MasterDispatcher\")\n-    final Dispatcher masterDispatcher)\n+    @Marker(Primary.class)\n+    public RequestHandler build(Logger logger, List<RequestFilter> configuration,\n+\n+                                @Primary\n+                                final Dispatcher masterDispatcher)\n     {\n         RequestHandler terminator = new RequestHandler()\n         {\n@@ -901,7 +926,8 @@ public boolean service(Request request, Response response) throws IOException\n     }\n \n     public ServletApplicationInitializer build(Logger logger, List<ServletApplicationInitializerFilter> configuration,\n-                                               @InjectService(\"ApplicationInitializer\")\n+\n+                                               @Primary\n                                                final ApplicationInitializer initializer)\n     {\n         ServletApplicationInitializer terminator = new ServletApplicationInitializer()\n@@ -1019,6 +1045,7 @@ public ClassFactory buildComponentClassFactory()\n     /**\n      * Ordered contributions to the MasterDispatcher service allow different URL matching strategies to occur.\n      */\n+    @Marker(Primary.class)\n     public Dispatcher buildMasterDispatcher(List<Dispatcher> configuration)\n     {\n         return _chainBuilder.build(Dispatcher.class, configuration);",
                "additions": 40,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4e731e82c81cb86f9cda70371aa0b6db50df9077/tapestry-core/src/main/java/org/apache/tapestry/services/TapestryModule.java",
                "status": "modified",
                "changes": 53,
                "deletions": 13,
                "sha": "8ffab917c43f51ec3214eff2b52452482901faa3",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4e731e82c81cb86f9cda70371aa0b6db50df9077/tapestry-core/src/main/java/org/apache/tapestry/services/TapestryModule.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/services/TapestryModule.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/services/TapestryModule.java?ref=4e731e82c81cb86f9cda70371aa0b6db50df9077"
            }
        ],
        "bug_id": "tapestry-5_9",
        "parent": "https://github.com/apache/tapestry-5/commit/1ed1b538af67f822e09d1c42a77e62f844ad121a",
        "message": "TAPESTRY-1377 NullPointerException invoking methods on the Request service\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@613686 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/bcb8a177c3fee80739f456e3201cf4897ff93024",
        "file": [
            {
                "patch": "@@ -41,23 +41,31 @@ public ThreadCleanupHubImpl(Logger logger)\n         _logger = logger;\n     }\n \n-    public synchronized void addThreadCleanupListener(ThreadCleanupListener listener)\n+    private synchronized List<ThreadCleanupListener> get()\n     {\n-        _holder.get().add(listener);\n+        return _holder.get();\n+    }\n+\n+    private synchronized List<ThreadCleanupListener> getAndRemove()\n+    {\n+        List<ThreadCleanupListener> result = _holder.get();\n+\n+        _holder.remove();\n+\n+        return result;\n+    }\n+\n+    public void addThreadCleanupListener(ThreadCleanupListener listener)\n+    {\n+        get().add(listener);\n     }\n \n     /**\n      * Instructs the hub to notify all its listeners (for the current thread). It also discards its list of listeners.\n      */\n-    public synchronized void cleanup()\n+    public void cleanup()\n     {\n-        List<ThreadCleanupListener> listeners = _holder.get();\n-\n-        // Discard the listeners. In a perfect world, we would set a per-thread flag that prevented\n-        // more listeners from being added, until a new thread begins. But we don't have a concept\n-        // of thread start, just thread complete.\n-\n-        _holder.remove();\n+        List<ThreadCleanupListener> listeners = getAndRemove();\n \n         for (ThreadCleanupListener listener : listeners)\n         {",
                "additions": 18,
                "raw_url": "https://github.com/apache/tapestry-5/raw/bcb8a177c3fee80739f456e3201cf4897ff93024/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/ThreadCleanupHubImpl.java",
                "status": "modified",
                "changes": 28,
                "deletions": 10,
                "sha": "9e3a12d7a5ceb6e55e8929a32825434d4ac5aac3",
                "blob_url": "https://github.com/apache/tapestry-5/blob/bcb8a177c3fee80739f456e3201cf4897ff93024/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/ThreadCleanupHubImpl.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/ThreadCleanupHubImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/ThreadCleanupHubImpl.java?ref=bcb8a177c3fee80739f456e3201cf4897ff93024"
            }
        ],
        "bug_id": "tapestry-5_10",
        "parent": "https://github.com/apache/tapestry-5/commit/47d37c68fde95b51d0a3f4a57dfcc188968dc1a4",
        "message": "TAPESTRY-2037: NullPointerException caused by many rapid page refreshes\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@613426 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/4df5aafce7ed9f0419eb0f7eed65e1785f9eceed",
        "file": [
            {
                "patch": "@@ -1,17 +1,17 @@\n-// Copyright 2006 The Apache Software Foundation\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//     http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n+// Copyright 2006, 2008 The Apache Software Foundation\r\n+//\r\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+// you may not use this file except in compliance with the License.\r\n+// You may obtain a copy of the License at\r\n+//\r\n+//     http://www.apache.org/licenses/LICENSE-2.0\r\n+//\r\n+// Unless required by applicable law or agreed to in writing, software\r\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+// See the License for the specific language governing permissions and\r\n+// limitations under the License.\r\n+\r\n /**\r\n  *\r\n  */\r\n@@ -47,13 +47,13 @@ protected Object initialValue()\n         return _delegate.createObject();\r\n     }\r\n \r\n-    public Object createObject()\r\n+    public synchronized Object createObject()\r\n     {\r\n         // Get (or create) the service.\r\n         return get();\r\n     }\r\n \r\n-    public void threadDidCleanup()\r\n+    public synchronized void threadDidCleanup()\r\n     {\r\n         remove();\r\n     }\r",
                "additions": 16,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4df5aafce7ed9f0419eb0f7eed65e1785f9eceed/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerThreadServiceCreator.java",
                "status": "modified",
                "changes": 32,
                "deletions": 16,
                "sha": "5c53dbb8df0ddb4b500622a54f9c862b80faf43d",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4df5aafce7ed9f0419eb0f7eed65e1785f9eceed/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerThreadServiceCreator.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerThreadServiceCreator.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerThreadServiceCreator.java?ref=4df5aafce7ed9f0419eb0f7eed65e1785f9eceed"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007 The Apache Software Foundation\n+// Copyright 2006, 2007, 2008 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -41,16 +41,15 @@ public ThreadCleanupHubImpl(Logger logger)\n         _logger = logger;\n     }\n \n-    public void addThreadCleanupListener(ThreadCleanupListener listener)\n+    public synchronized void addThreadCleanupListener(ThreadCleanupListener listener)\n     {\n         _holder.get().add(listener);\n     }\n \n     /**\n-     * Instructs the hub to notify all its listeners (for the current thread). It also discards its\n-     * list of listeners.\n+     * Instructs the hub to notify all its listeners (for the current thread). It also discards its list of listeners.\n      */\n-    public void cleanup()\n+    public synchronized void cleanup()\n     {\n         List<ThreadCleanupListener> listeners = _holder.get();\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4df5aafce7ed9f0419eb0f7eed65e1785f9eceed/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/ThreadCleanupHubImpl.java",
                "status": "modified",
                "changes": 9,
                "deletions": 5,
                "sha": "fa822704155776df49a4e87974e5fab46d3ede89",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4df5aafce7ed9f0419eb0f7eed65e1785f9eceed/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/ThreadCleanupHubImpl.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/ThreadCleanupHubImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/ThreadCleanupHubImpl.java?ref=4df5aafce7ed9f0419eb0f7eed65e1785f9eceed"
            },
            {
                "patch": "@@ -18,10 +18,10 @@\n import org.easymock.IMocksControl;\n \n /**\n- * Contains core logic used by {@link TestBase}, allowing for mock objects to be used outside of a\n- * TestNG-based test suite. A <em>single</em> standard mock control is used for all mock\n- * instances. The control does not care about execution order, but will balk at any unexpected\n- * method invocations. This class is thread safe (it used a thread local to store the mock control).\n+ * Contains core logic used by {@link TestBase}, allowing for mock objects to be used outside of a TestNG-based test\n+ * suite. A <em>single</em> standard mock control is used for all mock instances. The control does not care about\n+ * execution order, but will balk at any unexpected method invocations. This class is thread safe (it used a thread\n+ * local to store the mock control).\n  */\n public final class MockTester\n {\n@@ -37,22 +37,21 @@ protected IMocksControl initialValue()\n     private final ThreadLocalControl _localControl = new ThreadLocalControl();\n \n     /**\n-     * Invoked after an individual unit test (i.e., a test method invocation) to discard the mock\n-     * control.\n+     * Invoked after an individual unit test (i.e., a test method invocation) to discard the mock control.\n      */\n-    public void cleanup()\n+    public synchronized void cleanup()\n     {\n         _localControl.remove();\n     }\n \n-    public IMocksControl getMocksControl()\n+    public synchronized IMocksControl getMocksControl()\n     {\n         return _localControl.get();\n     }\n \n     /**\n-     * Creates a new mock object of the indicated type. The shared mock control does <strong>not</strong>\n-     * check order, but does fail on any unexpected method invocations.\n+     * Creates a new mock object of the indicated type. The shared mock control does <strong>not</strong> check order,\n+     * but does fail on any unexpected method invocations.\n      *\n      * @param <T>       the type of the mock object\n      * @param mockClass the class to mock\n@@ -64,17 +63,17 @@ public IMocksControl getMocksControl()\n     }\n \n     /**\n-     * Switches each mock object created by {@link #newMock(Class)} into replay mode (out of the\n-     * initial training mode).\n+     * Switches each mock object created by {@link #newMock(Class)} into replay mode (out of the initial training\n+     * mode).\n      */\n     public void replay()\n     {\n         getMocksControl().replay();\n     }\n \n     /**\n-     * Verifies that all trained methods have been invoked on all mock objects (created by\n-     * {@link #newMock(Class)}, then switches each mock object back to training mode.\n+     * Verifies that all trained methods have been invoked on all mock objects (created by {@link #newMock(Class)}, then\n+     * switches each mock object back to training mode.\n      */\n     public void verify()\n     {",
                "additions": 13,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4df5aafce7ed9f0419eb0f7eed65e1785f9eceed/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/test/MockTester.java",
                "status": "modified",
                "changes": 27,
                "deletions": 14,
                "sha": "d95a2b05eca97b5357880c48020d4b2f62bb186e",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4df5aafce7ed9f0419eb0f7eed65e1785f9eceed/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/test/MockTester.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/test/MockTester.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/test/MockTester.java?ref=4df5aafce7ed9f0419eb0f7eed65e1785f9eceed"
            }
        ],
        "bug_id": "tapestry-5_11",
        "parent": "https://github.com/apache/tapestry-5/commit/446184e3fc9020cd271ed1ae17c42359267362c8",
        "message": "TAPESTRY-2037: NullPointerException caused by many rapid page refreshes\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@611526 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/8d594db048f4bacd139ed520c41efda584020c24",
        "file": [
            {
                "patch": "@@ -0,0 +1,207 @@\n+// Copyright 2007, 2008 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry;\n+\n+import static org.apache.tapestry.ioc.internal.util.CollectionFactory.newCaseInsensitiveMap;\n+import org.apache.tapestry.ioc.internal.util.Defense;\n+import org.apache.tapestry.ioc.internal.util.InternalUtils;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+/**\n+ * Represents an HTTP content type. Allows to set various elements like the mime type, the character\n+ * set, and other parameters. This is similar to a number of other implementations of the same\n+ * concept in JAF, etc. We have created this simple implementation to avoid including the whole\n+ * libraries.\n+ */\n+public final class ContentType\n+{\n+    private String _baseType = \"\";\n+\n+    private String _subType = \"\";\n+\n+    private final Map<String, String> _parameters = newCaseInsensitiveMap();\n+\n+    /**\n+     * Creates a new empty content type.\n+     */\n+    public ContentType()\n+    {\n+    }\n+\n+    /**\n+     * Creates a new content type from the argument. The format of the argument has to be\n+     * basetype/subtype(;key=value)*\n+     *\n+     * @param contentType the content type that needs to be represented\n+     */\n+    public ContentType(String contentType)\n+    {\n+        this();\n+        parse(contentType);\n+    }\n+\n+    /**\n+     * Returns true only if the other object is another instance of ContentType, and has the ssame\n+     * baseType, subType and set of parameters.\n+     */\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (o == null) return false;\n+\n+        if (o.getClass() != this.getClass()) return false;\n+\n+        ContentType ct = (ContentType) o;\n+\n+        return _baseType.equals(ct._baseType) && _subType.equals(ct._subType) && _parameters.equals(ct._parameters);\n+    }\n+\n+    /**\n+     * @return the base type of the content type\n+     */\n+    public String getBaseType()\n+    {\n+        return _baseType;\n+    }\n+\n+    /**\n+     * @param baseType\n+     */\n+    public void setBaseType(String baseType)\n+    {\n+        Defense.notNull(baseType, \"baseType\");\n+\n+        _baseType = baseType;\n+    }\n+\n+    /**\n+     * @return the sub-type of the content type\n+     */\n+    public String getSubType()\n+    {\n+        return _subType;\n+    }\n+\n+    /**\n+     * @param subType\n+     */\n+    public void setSubType(String subType)\n+    {\n+        Defense.notNull(subType, \"subType\");\n+\n+        _subType = subType;\n+    }\n+\n+    /**\n+     * @return the MIME type of the content type\n+     */\n+    public String getMimeType()\n+    {\n+        return _baseType + \"/\" + _subType;\n+    }\n+\n+    /**\n+     * @return the list of names of parameters in this content type, in alphabetical order.\n+     */\n+    public List<String> getParameterNames()\n+    {\n+        return InternalUtils.sortedKeys(_parameters);\n+    }\n+\n+    /**\n+     * @param key the name of the content type parameter\n+     * @return the value of the content type parameter\n+     */\n+    public String getParameter(String key)\n+    {\n+        Defense.notNull(key, \"key\");\n+\n+        return _parameters.get(key);\n+    }\n+\n+    /**\n+     * @param key   the name of the content type parameter\n+     * @param value the value of the content type parameter\n+     */\n+    public void setParameter(String key, String value)\n+    {\n+        Defense.notNull(key, \"key\");\n+        Defense.notNull(value, \"value\");\n+\n+        _parameters.put(key, value);\n+    }\n+\n+    /**\n+     * Parses the argument and configures the content type accordingly. The format of the argument\n+     * has to be type/subtype(;key=value)*\n+     *\n+     * @param contentType the content type that needs to be represented\n+     */\n+    public void parse(String contentType)\n+    {\n+        _baseType = \"\";\n+        _subType = \"\";\n+        _parameters.clear();\n+\n+        StringTokenizer tokens = new StringTokenizer(contentType, \";\");\n+        if (!tokens.hasMoreTokens()) return;\n+\n+        String mimeType = tokens.nextToken();\n+        StringTokenizer mimeTokens = new StringTokenizer(mimeType, \"/\");\n+        setBaseType(mimeTokens.hasMoreTokens() ? mimeTokens.nextToken() : \"\");\n+        setSubType(mimeTokens.hasMoreTokens() ? mimeTokens.nextToken() : \"\");\n+\n+        while (tokens.hasMoreTokens())\n+        {\n+            String parameter = tokens.nextToken();\n+\n+            StringTokenizer parameterTokens = new StringTokenizer(parameter, \"=\");\n+            String key = parameterTokens.hasMoreTokens() ? parameterTokens.nextToken() : \"\";\n+            String value = parameterTokens.hasMoreTokens() ? parameterTokens.nextToken() : \"\";\n+            setParameter(key, value);\n+        }\n+    }\n+\n+    /**\n+     * @return the string representation of this content type\n+     */\n+    public String unparse()\n+    {\n+        StringBuilder buffer = new StringBuilder(getMimeType());\n+\n+        for (String parameterName : getParameterNames())\n+        {\n+            buffer.append(\";\");\n+            buffer.append(parameterName);\n+            buffer.append(\"=\");\n+            buffer.append(_parameters.get(parameterName));\n+        }\n+\n+        return buffer.toString();\n+    }\n+\n+    /**\n+     * @return the string representation of this content type. Same as unparse().\n+     */\n+    @Override\n+    public String toString()\n+    {\n+        return unparse();\n+    }\n+\n+}",
                "additions": 207,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/ContentType.java",
                "status": "added",
                "changes": 207,
                "deletions": 0,
                "sha": "19238cb4f95ed1bfa544128af265e967dd984914",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/ContentType.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/ContentType.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/ContentType.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2007 The Apache Software Foundation\n+// Copyright 2007, 2008 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -19,6 +19,7 @@\n import org.apache.tapestry.annotations.InjectContainer;\n import org.apache.tapestry.annotations.Parameter;\n import org.apache.tapestry.annotations.Path;\n+import org.apache.tapestry.internal.services.ResponseRenderer;\n import org.apache.tapestry.internal.util.Holder;\n import org.apache.tapestry.ioc.annotations.Inject;\n import org.apache.tapestry.ioc.services.TypeCoercer;\n@@ -57,6 +58,7 @@\n public class Autocomplete\n {\n     static final String EVENT_NAME = \"autocomplete\";\n+\n     private static final String PARAM_NAME = \"t:input\";\n \n     /**\n@@ -94,6 +96,9 @@\n     @Parameter(defaultPrefix = \"literal\")\n     private int _minChars;\n \n+    @Inject\n+    private ResponseRenderer _responseRenderer;\n+\n \n     /**\n      * Overrides the default check frequency for determining whether to send a server request.\n@@ -193,7 +198,9 @@ public boolean handleResult(Object result, Component component, String methodDes\n \n         _resources.triggerEvent(\"providecompletions\", new Object[]{input}, handler);\n \n-        MarkupWriter writer = _factory.newMarkupWriter(null);\n+        ContentType contentType = _responseRenderer.findContentType(this);\n+\n+        MarkupWriter writer = _factory.newMarkupWriter(contentType);\n \n         // T4.1 has more flexibility, it can decorate the options with icons, etc.\n         // But this will do for now.  The Autocompleter widget will display\n@@ -211,6 +218,6 @@ public boolean handleResult(Object result, Component component, String methodDes\n \n         writer.end(); // ul\n \n-        return new TextStreamResponse(\"text/html\", writer.toString());\n+        return new TextStreamResponse(contentType.getMimeType(), writer.toString());\n     }\n }",
                "additions": 10,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/corelib/mixins/Autocomplete.java",
                "status": "modified",
                "changes": 13,
                "deletions": 3,
                "sha": "4b14ee963e4d3dd15e3e501d8b3bba4be0e914e2",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/corelib/mixins/Autocomplete.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/corelib/mixins/Autocomplete.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/corelib/mixins/Autocomplete.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -58,7 +58,7 @@\n \n     /**\n      * Used in some Ajax scenarios to set the content type for the response early, when the Page instance\n-     * (the authority on content types) is known. The value is of type {@link org.apache.tapestry.internal.util.ContentType}.\n+     * (the authority on content types) is known. The value is of type {@link org.apache.tapestry.ContentType}.\n      */\n     public static final String CONTENT_TYPE_ATTRIBUTE_NAME = \"content-type\";\n     public static final String CHARSET_CONTENT_TYPE_PARAMETER = \"charset\";",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/InternalConstants.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "98c36bc0128413ada020e3dc616327c2b5b0b63c",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/InternalConstants.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/InternalConstants.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/InternalConstants.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -15,11 +15,11 @@\n package org.apache.tapestry.internal.services;\n \n import org.apache.tapestry.ComponentEventHandler;\n+import org.apache.tapestry.ContentType;\n import org.apache.tapestry.TapestryConstants;\n import org.apache.tapestry.internal.InternalConstants;\n import org.apache.tapestry.internal.structure.ComponentPageElement;\n import org.apache.tapestry.internal.structure.Page;\n-import org.apache.tapestry.internal.util.ContentType;\n import org.apache.tapestry.internal.util.Holder;\n import org.apache.tapestry.json.JSONObject;\n import org.apache.tapestry.runtime.Component;",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/AjaxComponentActionRequestHandler.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "c582fdae2fbea518ca92c769719a8dcf8b2e4377",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/AjaxComponentActionRequestHandler.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/services/AjaxComponentActionRequestHandler.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/services/AjaxComponentActionRequestHandler.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -14,9 +14,9 @@\n \n package org.apache.tapestry.internal.services;\n \n+import org.apache.tapestry.ContentType;\n import org.apache.tapestry.MarkupWriter;\n import org.apache.tapestry.internal.InternalConstants;\n-import org.apache.tapestry.internal.util.ContentType;\n import org.apache.tapestry.json.JSONObject;\n import org.apache.tapestry.runtime.RenderCommand;\n import org.apache.tapestry.services.*;",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/AjaxPartialResponseRendererImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "0fb81fe139db28243b46387da29cd8ba340e47f1",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/AjaxPartialResponseRendererImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/services/AjaxPartialResponseRendererImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/services/AjaxPartialResponseRendererImpl.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -14,11 +14,11 @@\n \n package org.apache.tapestry.internal.services;\n \n+import org.apache.tapestry.ContentType;\n import org.apache.tapestry.MarkupWriter;\n import org.apache.tapestry.dom.DefaultMarkupModel;\n import org.apache.tapestry.dom.MarkupModel;\n import org.apache.tapestry.dom.XMLMarkupModel;\n-import org.apache.tapestry.internal.util.ContentType;\n import org.apache.tapestry.services.MarkupWriterFactory;\n \n public class MarkupWriterFactoryImpl implements MarkupWriterFactory",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/MarkupWriterFactoryImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "3205b9b34399bc8b940af5f5b1fd5e757ba3d214",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/MarkupWriterFactoryImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/services/MarkupWriterFactoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/services/MarkupWriterFactoryImpl.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -14,14 +14,14 @@\n \n package org.apache.tapestry.internal.services;\n \n+import org.apache.tapestry.ContentType;\n import org.apache.tapestry.internal.structure.Page;\n-import org.apache.tapestry.internal.util.ContentType;\n \n public interface PageContentTypeAnalyzer\n {\n     /**\n      * Analyzes the meta-data for the page and identifies the correct\n-     * {@link org.apache.tapestry.internal.util.ContentType} (including encoding).\n+     * {@link org.apache.tapestry.ContentType} (including encoding).\n      *\n      * @param page to be rendered\n      * @return the content type",
                "additions": 2,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/PageContentTypeAnalyzer.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "e48fcc395bd61f96ee47662e4ca452d3aa03f96b",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/PageContentTypeAnalyzer.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/services/PageContentTypeAnalyzer.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/services/PageContentTypeAnalyzer.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -15,10 +15,10 @@\n package org.apache.tapestry.internal.services;\n \n import org.apache.tapestry.ComponentResources;\n+import org.apache.tapestry.ContentType;\n import org.apache.tapestry.TapestryConstants;\n import org.apache.tapestry.internal.InternalConstants;\n import org.apache.tapestry.internal.structure.Page;\n-import org.apache.tapestry.internal.util.ContentType;\n import org.apache.tapestry.services.MetaDataLocator;\n \n public class PageContentTypeAnalyzerImpl implements PageContentTypeAnalyzer",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/PageContentTypeAnalyzerImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "331851819f3e5200f56dcc8999bc5094caffaef0",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/PageContentTypeAnalyzerImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/services/PageContentTypeAnalyzerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/services/PageContentTypeAnalyzerImpl.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -14,9 +14,9 @@\n \n package org.apache.tapestry.internal.services;\n \n+import org.apache.tapestry.ContentType;\n import org.apache.tapestry.MarkupWriter;\n import org.apache.tapestry.internal.structure.Page;\n-import org.apache.tapestry.internal.util.ContentType;\n import org.apache.tapestry.services.MarkupWriterFactory;\n import org.apache.tapestry.services.Response;\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/PageResponseRendererImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "3f24ba70083589ce86592c1833342fc9d0714935",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/PageResponseRendererImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/services/PageResponseRendererImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/services/PageResponseRendererImpl.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -15,9 +15,9 @@\n package org.apache.tapestry.internal.services;\n \n import org.apache.tapestry.ComponentResources;\n+import org.apache.tapestry.ContentType;\n import org.apache.tapestry.TapestryConstants;\n import org.apache.tapestry.internal.structure.Page;\n-import org.apache.tapestry.internal.util.ContentType;\n import org.apache.tapestry.services.MetaDataLocator;\n import org.apache.tapestry.services.Request;\n \n@@ -29,8 +29,7 @@\n \n     private final Request _request;\n \n-    public RequestEncodingInitializerImpl(RequestPageCache cache, MetaDataLocator locator,\n-                                          Request request)\n+    public RequestEncodingInitializerImpl(RequestPageCache cache, MetaDataLocator locator, Request request)\n     {\n         _cache = cache;\n         _locator = locator;\n@@ -42,15 +41,12 @@ public void initializeRequestEncoding(String pageName)\n         Page page = _cache.get(pageName);\n         ComponentResources pageResources = page.getRootElement().getComponentResources();\n \n-        String contentTypeString = _locator.findMeta(\n-                TapestryConstants.RESPONSE_CONTENT_TYPE,\n-                pageResources);\n+        String contentTypeString = _locator.findMeta(TapestryConstants.RESPONSE_CONTENT_TYPE, pageResources);\n         ContentType contentType = new ContentType(contentTypeString);\n \n         String encoding = contentType.getParameter(\"charset\");\n \n-        if (encoding == null)\n-            encoding = _locator.findMeta(TapestryConstants.RESPONSE_ENCODING, pageResources);\n+        if (encoding == null) encoding = _locator.findMeta(TapestryConstants.RESPONSE_ENCODING, pageResources);\n \n         _request.setEncoding(encoding);\n     }",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/RequestEncodingInitializerImpl.java",
                "status": "modified",
                "changes": 12,
                "deletions": 8,
                "sha": "d0e19a29792b69a934c5f069899701d18a87f9e7",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/RequestEncodingInitializerImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/services/RequestEncodingInitializerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/services/RequestEncodingInitializerImpl.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2008 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry.internal.services;\n+\n+import org.apache.tapestry.ContentType;\n+\n+/**\n+ * Public facade around internal services related to rendering a markup response.\n+ */\n+public interface ResponseRenderer\n+{\n+    /**\n+     * Finds the content type for the page containing the indicated component.\n+     *\n+     * @param component a component within a page\n+     * @return the content type\n+     * @throws IllegalArgumentException if the component parameter is not a component\n+     */\n+    ContentType findContentType(Object component);\n+}",
                "additions": 32,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/ResponseRenderer.java",
                "status": "added",
                "changes": 32,
                "deletions": 0,
                "sha": "84abc5945c704de854f597e75a56642812131f8b",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/ResponseRenderer.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/services/ResponseRenderer.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/services/ResponseRenderer.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2008 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry.internal.services;\n+\n+import org.apache.tapestry.ContentType;\n+import org.apache.tapestry.internal.structure.Page;\n+import org.apache.tapestry.ioc.internal.util.Defense;\n+import org.apache.tapestry.runtime.Component;\n+\n+public class ResponseRendererImpl implements ResponseRenderer\n+{\n+    private final RequestPageCache _pageCache;\n+\n+    private final PageContentTypeAnalyzer _pageContentAnalyzer;\n+\n+    public ResponseRendererImpl(RequestPageCache pageCache, PageContentTypeAnalyzer pageContentAnalyzer)\n+    {\n+        _pageCache = pageCache;\n+        _pageContentAnalyzer = pageContentAnalyzer;\n+    }\n+\n+    public ContentType findContentType(Object component)\n+    {\n+        Component c = Defense.cast(component, Component.class, \"component\");\n+\n+        String pageName = c.getComponentResources().getPageName();\n+\n+        Page page = _pageCache.get(pageName);\n+\n+        return _pageContentAnalyzer.findContentType(page);\n+    }\n+}",
                "additions": 44,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/ResponseRendererImpl.java",
                "status": "added",
                "changes": 44,
                "deletions": 0,
                "sha": "6bb12d86d96a3160152bddba8e723f680c4d16ee",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/services/ResponseRendererImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/services/ResponseRendererImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/services/ResponseRendererImpl.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -16,6 +16,7 @@\n \n import org.apache.tapestry.ComponentResources;\n import org.apache.tapestry.ComponentResourcesCommon;\n+import org.apache.tapestry.ContentType;\n import org.apache.tapestry.Link;\n import org.apache.tapestry.internal.*;\n import org.apache.tapestry.internal.events.InvalidationListener;\n@@ -546,4 +547,14 @@ protected final ComponentClassCache mockComponentClassCache()\n     {\n         return newMock(ComponentClassCache.class);\n     }\n+\n+    protected void train_findContentType(PageContentTypeAnalyzer analyzer, Page page, ContentType contentType)\n+    {\n+        expect(analyzer.findContentType(page)).andReturn(contentType).atLeastOnce();\n+    }\n+\n+    protected final PageContentTypeAnalyzer mockPageContentTypeAnalyzer()\n+    {\n+        return newMock(PageContentTypeAnalyzer.class);\n+    }\n }",
                "additions": 11,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/test/InternalBaseTestCase.java",
                "status": "modified",
                "changes": 11,
                "deletions": 0,
                "sha": "a6e00d6a9a138f4f084f123066877d53ab8c8b4a",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/test/InternalBaseTestCase.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/test/InternalBaseTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/test/InternalBaseTestCase.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -14,8 +14,8 @@\n \n package org.apache.tapestry.internal.test;\n \n+import org.apache.tapestry.ContentType;\n import org.apache.tapestry.MarkupWriter;\n-import org.apache.tapestry.internal.util.ContentType;\n import static org.apache.tapestry.ioc.IOCConstants.PERTHREAD_SCOPE;\n import org.apache.tapestry.ioc.annotations.Scope;\n import org.apache.tapestry.services.Core;",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/test/TestableMarkupWriterFactoryImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "792afff6e6a3238131bd755707df304dbb65c32e",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/internal/test/TestableMarkupWriterFactoryImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/test/TestableMarkupWriterFactoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/test/TestableMarkupWriterFactoryImpl.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -1,21 +1,21 @@\n-// Copyright 2006, 2007 The Apache Software Foundation\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//     http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n+// Copyright 2006, 2007 The Apache Software Foundation\r\n+//\r\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+// you may not use this file except in compliance with the License.\r\n+// You may obtain a copy of the License at\r\n+//\r\n+//     http://www.apache.org/licenses/LICENSE-2.0\r\n+//\r\n+// Unless required by applicable law or agreed to in writing, software\r\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+// See the License for the specific language governing permissions and\r\n+// limitations under the License.\r\n+\r\n package org.apache.tapestry.services;\r\n \r\n+import org.apache.tapestry.ContentType;\r\n import org.apache.tapestry.MarkupWriter;\r\n-import org.apache.tapestry.internal.util.ContentType;\r\n \r\n /**\r\n  * Source for {@link org.apache.tapestry.MarkupWriter} instances.\r",
                "additions": 15,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/services/MarkupWriterFactory.java",
                "status": "modified",
                "changes": 30,
                "deletions": 15,
                "sha": "8a04cca3215faa8cf73d777cfcf93cc197d8d885",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/services/MarkupWriterFactory.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/services/MarkupWriterFactory.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/services/MarkupWriterFactory.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -113,7 +113,7 @@ public static void bind(ServiceBinder binder)\n         binder.bind(PageRenderQueue.class, PageRenderQueueImpl.class);\n         binder.bind(AjaxPartialResponseRenderer.class, AjaxPartialResponseRendererImpl.class);\n         binder.bind(PageContentTypeAnalyzer.class, PageContentTypeAnalyzerImpl.class);\n-\n+        binder.bind(ResponseRenderer.class, ResponseRendererImpl.class);\n     }\n \n     public static Alias build(Logger logger,",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/services/TapestryModule.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "09920d509e6d34cea0b703ab782be7534abdd115",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/main/java/org/apache/tapestry/services/TapestryModule.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/services/TapestryModule.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/services/TapestryModule.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -0,0 +1,128 @@\n+// Copyright 2007, 2008 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+public class ContentTypeTest extends Assert\n+{\n+    @Test\n+    public void simple_equals()\n+    {\n+        ContentType master = new ContentType(\"text/html\");\n+\n+        assertFalse(master.equals(null));\n+        assertFalse(master.equals(this));\n+        assertTrue(master.equals(master));\n+        assertTrue(master.equals(new ContentType(\"text/html\")));\n+        assertFalse(master.equals(new ContentType(\"foo/bar\")));\n+        assertFalse(master.equals(new ContentType(\"text/plain\")));\n+    }\n+\n+    @Test\n+    public void equals_with_parameters()\n+    {\n+        ContentType master = new ContentType(\"text/html;charset=utf-8\");\n+\n+        assertFalse(master.equals(new ContentType(\"text/html\")));\n+        assertTrue(master.equals(new ContentType(\"text/html;charset=utf-8\")));\n+        assertFalse(master.equals(new ContentType(\"text/html;charset=utf-8;foo=bar\")));\n+\n+        // Check that keys are case insensitive\n+\n+        assertTrue(master.equals(new ContentType(\"text/html;Charset=utf-8\")));\n+\n+        master = new ContentType(\"text/html;foo=bar;biff=bazz\");\n+\n+        assertTrue(master.equals(new ContentType(\"text/html;foo=bar;biff=bazz\")));\n+        assertTrue(master.equals(new ContentType(\"text/html;Foo=bar;Biff=bazz\")));\n+        assertTrue(master.equals(new ContentType(\"text/html;biff=bazz;foo=bar\")));\n+    }\n+\n+    @Test\n+    public void parse_with_parameters() throws Exception\n+    {\n+        ContentType contentType = new ContentType(\"text/html;charset=utf-8\");\n+\n+        assertEquals(contentType.getBaseType(), \"text\");\n+\n+        assertEquals(contentType.getSubType(), \"html\");\n+\n+        assertEquals(contentType.getMimeType(), \"text/html\");\n+\n+        List<String> parameterNames = contentType.getParameterNames();\n+        assertEquals(parameterNames.size(), 1);\n+\n+        assertEquals(parameterNames.get(0), \"charset\");\n+\n+        String charset = contentType.getParameter(\"charset\");\n+        assertEquals(charset, \"utf-8\");\n+\n+        String nonexistant = contentType.getParameter(\"nonexistant\");\n+        assertTrue(nonexistant == null);\n+    }\n+\n+    @Test\n+    public void parse_without_parameters() throws Exception\n+    {\n+        ContentType contentType = new ContentType(\"text/html\");\n+\n+        assertEquals(contentType.getBaseType(), \"text\");\n+\n+        assertEquals(contentType.getSubType(), \"html\");\n+\n+        assertEquals(contentType.getMimeType(), \"text/html\");\n+\n+        assertTrue(contentType.getParameterNames().isEmpty());\n+    }\n+\n+    @Test\n+    public void unparse_with_parameters() throws Exception\n+    {\n+        ContentType contentType = new ContentType();\n+\n+        contentType.setBaseType(\"text\");\n+        contentType.setSubType(\"html\");\n+        contentType.setParameter(\"charset\", \"utf-8\");\n+\n+        assertEquals(contentType.unparse(), \"text/html;charset=utf-8\");\n+    }\n+\n+    @Test\n+    public void unparse_no_parameters() throws Exception\n+    {\n+        ContentType contentType = new ContentType();\n+\n+        contentType.setBaseType(\"text\");\n+        contentType.setSubType(\"html\");\n+\n+        assertEquals(contentType.unparse(), \"text/html\");\n+    }\n+\n+    @Test\n+    public void to_string_is_unparse()\n+    {\n+        ContentType contentType = new ContentType();\n+\n+        contentType.setBaseType(\"text\");\n+        contentType.setSubType(\"html\");\n+        contentType.setParameter(\"charset\", \"utf-8\");\n+\n+        assertEquals(contentType.toString(), contentType.unparse());\n+    }\n+}",
                "additions": 128,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/test/java/org/apache/tapestry/ContentTypeTest.java",
                "status": "added",
                "changes": 128,
                "deletions": 0,
                "sha": "f32797f88e9a545fb1e1b7d8696c852d8f470421",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/test/java/org/apache/tapestry/ContentTypeTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry/ContentTypeTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry/ContentTypeTest.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            },
            {
                "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2008 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry.internal.services;\n+\n+import org.apache.tapestry.ComponentResources;\n+import org.apache.tapestry.ContentType;\n+import org.apache.tapestry.internal.structure.Page;\n+import org.apache.tapestry.internal.test.InternalBaseTestCase;\n+import org.apache.tapestry.runtime.Component;\n+import org.testng.annotations.Test;\n+\n+public class ResponseRendererImplTest extends InternalBaseTestCase\n+{\n+    @Test\n+    public void content_type_from_component()\n+    {\n+        RequestPageCache cache = mockRequestPageCache();\n+        PageContentTypeAnalyzer analyzer = mockPageContentTypeAnalyzer();\n+        Component component = mockComponent();\n+        String pageName = \"foo/bar\";\n+        Page page = mockPage();\n+        ContentType contentType = new ContentType(\"zig/zag\");\n+        ComponentResources resources = mockComponentResources();\n+\n+        train_getComponentResources(component, resources);\n+        train_getPageName(resources, pageName);\n+        train_get(cache, pageName, page);\n+\n+        train_findContentType(analyzer, page, contentType);\n+\n+        replay();\n+\n+        ResponseRenderer renderer = new ResponseRendererImpl(cache, analyzer);\n+\n+        assertSame(renderer.findContentType(component), contentType);\n+\n+        verify();\n+    }\n+\n+}",
                "additions": 52,
                "raw_url": "https://github.com/apache/tapestry-5/raw/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/test/java/org/apache/tapestry/internal/services/ResponseRendererImplTest.java",
                "status": "added",
                "changes": 52,
                "deletions": 0,
                "sha": "303d6d0e1d2add4d6e1b45288599ec5aead8dcfc",
                "blob_url": "https://github.com/apache/tapestry-5/blob/8d594db048f4bacd139ed520c41efda584020c24/tapestry-core/src/test/java/org/apache/tapestry/internal/services/ResponseRendererImplTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry/internal/services/ResponseRendererImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry/internal/services/ResponseRendererImplTest.java?ref=8d594db048f4bacd139ed520c41efda584020c24"
            }
        ],
        "bug_id": "tapestry-5_12",
        "parent": "https://github.com/apache/tapestry-5/commit/7c6bbfb27e9c64e2a9e868b18d151f70b9f8bc70",
        "message": "TAPESTRY-2019: Autocompleter mixin now fails with a NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@609067 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/3c0b3b3f7859bb334cd256d0bd8d57564c59b6df",
        "file": [
            {
                "patch": "@@ -27,8 +27,9 @@\n import org.apache.tapestry5.plastic.PlasticUtils;\n import org.apache.tapestry5.spring.ApplicationContextCustomizer;\n import org.apache.tapestry5.spring.SpringConstants;\n-import org.springframework.beans.factory.BeanFactoryUtils;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.core.SpringVersion;\n import org.springframework.web.context.ConfigurableWebApplicationContext;\n import org.springframework.web.context.WebApplicationContext;\n@@ -159,11 +160,26 @@ public boolean isEagerLoad()\n \n     private void addServiceDefsForSpringBeans(ApplicationContext context)\n     {\n+        ConfigurableListableBeanFactory beanFactory = null;\n+        if (context instanceof ConfigurableApplicationContext)\n+        {\n+            beanFactory = ((ConfigurableApplicationContext) context).getBeanFactory();\n+        }\n+\n         for (final String beanName : context.getBeanDefinitionNames())\n         {\n-            String trueName = beanName.startsWith(\"&\") ? beanName.substring(1) : beanName;\n+            boolean isAbstract = false;\n+            if (beanFactory != null)\n+            {\n+                isAbstract = beanFactory.getBeanDefinition(beanName).isAbstract();\n+            }\n+\n+            if (!isAbstract)\n+            {\n+                String trueName = beanName.startsWith(\"&\") ? beanName.substring(1) : beanName;\n \n-            services.put(trueName, new SpringBeanServiceDef(trueName, context));\n+                services.put(trueName, new SpringBeanServiceDef(trueName, context));\n+            }\n         }\n     }\n ",
                "additions": 19,
                "raw_url": "https://github.com/apache/tapestry-5/raw/3c0b3b3f7859bb334cd256d0bd8d57564c59b6df/tapestry-spring/src/main/java/org/apache/tapestry5/internal/spring/SpringModuleDef.java",
                "status": "modified",
                "changes": 22,
                "deletions": 3,
                "sha": "734f7f23291a41bbe39452655b67aa3e38357e20",
                "blob_url": "https://github.com/apache/tapestry-5/blob/3c0b3b3f7859bb334cd256d0bd8d57564c59b6df/tapestry-spring/src/main/java/org/apache/tapestry5/internal/spring/SpringModuleDef.java",
                "filename": "tapestry-spring/src/main/java/org/apache/tapestry5/internal/spring/SpringModuleDef.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-spring/src/main/java/org/apache/tapestry5/internal/spring/SpringModuleDef.java?ref=3c0b3b3f7859bb334cd256d0bd8d57564c59b6df"
            },
            {
                "patch": "@@ -20,6 +20,8 @@\n import org.apache.tapestry5.ioc.def.ServiceDef;\n import org.apache.tapestry5.spring.SpringConstants;\n import org.apache.tapestry5.spring.SpringTestCase;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.web.context.ConfigurableWebApplicationContext;\n import org.springframework.web.context.WebApplicationContext;\n import org.testng.annotations.Test;\n@@ -32,16 +34,31 @@\n     public void load_application_context_externally()\n     {\n         ServletContext servletContext = mockServletContext();\n+        ConfigurableListableBeanFactory beanFactory = newMock(\n+                ConfigurableListableBeanFactory.class);\n         ConfigurableWebApplicationContext ac = newMock(ConfigurableWebApplicationContext.class);\n         Runnable fred = mockRunnable();\n         Runnable barney = mockRunnable();\n+        Runnable arnold = mockRunnable();\n+        BeanDefinition fredBeanDef = newMock(BeanDefinition.class);\n+        BeanDefinition barneyBeanDef = newMock(BeanDefinition.class);\n+        BeanDefinition arnoldBeanDef = newMock(BeanDefinition.class);\n \n         ServiceBuilderResources resources = mockServiceBuilderResources();\n \n         train_getInitParameter(servletContext, SpringConstants.USE_EXTERNAL_SPRING_CONTEXT, \"true\");\n \n         train_getAttribute(servletContext, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ac);\n-        expect(ac.getBeanDefinitionNames()).andReturn(new String[] {\"fred\", \"&barney\"});\n+        expect(ac.getBeanFactory()).andReturn(beanFactory);\n+        expect(ac.getBeanDefinitionNames()).andReturn(new String[] { \"fred\", \"&barney\", \"arnold\" });\n+\n+        expect(fredBeanDef.isAbstract()).andReturn(false);\n+        expect(barneyBeanDef.isAbstract()).andReturn(false);\n+        expect(arnoldBeanDef.isAbstract()).andReturn(true);\n+\n+        expect(beanFactory.getBeanDefinition(\"fred\")).andReturn(fredBeanDef);\n+        expect(beanFactory.getBeanDefinition(\"&barney\")).andReturn(barneyBeanDef);\n+        expect(beanFactory.getBeanDefinition(\"arnold\")).andReturn(arnoldBeanDef);\n \n         replay();\n \n@@ -89,6 +106,8 @@ public void load_application_context_externally()\n         sd = moduleDef.getServiceDef(\"barney\");\n \n         assertSame(sd.createServiceCreator(null).createObject(), barney);\n+\n+        assertNull(moduleDef.getServiceDef(\"arnold\"));\n     }\n \n     @Test",
                "additions": 20,
                "raw_url": "https://github.com/apache/tapestry-5/raw/3c0b3b3f7859bb334cd256d0bd8d57564c59b6df/tapestry-spring/src/test/java/org/apache/tapestry5/internal/spring/SpringModuleDefTest.java",
                "status": "modified",
                "changes": 21,
                "deletions": 1,
                "sha": "2016fe9c1574c416d4ab16fa5f966d39d53d0953",
                "blob_url": "https://github.com/apache/tapestry-5/blob/3c0b3b3f7859bb334cd256d0bd8d57564c59b6df/tapestry-spring/src/test/java/org/apache/tapestry5/internal/spring/SpringModuleDefTest.java",
                "filename": "tapestry-spring/src/test/java/org/apache/tapestry5/internal/spring/SpringModuleDefTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-spring/src/test/java/org/apache/tapestry5/internal/spring/SpringModuleDefTest.java?ref=3c0b3b3f7859bb334cd256d0bd8d57564c59b6df"
            }
        ],
        "bug_id": "tapestry-5_13",
        "parent": "https://github.com/apache/tapestry-5/commit/2dd5bb5256c1b3dbd08a71d48538f4e764a38ee1",
        "message": "TAP5-1837: NPE on registry startup when using tapestry.use-external-spring-context",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/ba50ae8dfd99ba8ebee63e2b658b98e1def8fba8",
        "file": [
            {
                "patch": "@@ -2,8 +2,11 @@ description = \"Kaptcha user verification support\"\n \n dependencies {\n     compile project(':tapestry-core')\n+\n     compile \"com.github.axet:kaptcha:0.0.8\"\n-    \n+\n+    provided \"javax.servlet:servlet-api:${versions.servletapi}\"\n+\n     testCompile project(':tapestry-test')\n }\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/ba50ae8dfd99ba8ebee63e2b658b98e1def8fba8/tapestry-kaptcha/build.gradle",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "83d3d72b62b46f23f478b9442379fcc3fcaee387",
                "blob_url": "https://github.com/apache/tapestry-5/blob/ba50ae8dfd99ba8ebee63e2b658b98e1def8fba8/tapestry-kaptcha/build.gradle",
                "filename": "tapestry-kaptcha/build.gradle",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-kaptcha/build.gradle?ref=ba50ae8dfd99ba8ebee63e2b658b98e1def8fba8"
            }
        ],
        "bug_id": "tapestry-5_14",
        "parent": "https://github.com/apache/tapestry-5/commit/268f06c89ac02f4a4f771ced23699f3de74edfd0",
        "message": "TAP5-1934: Kaptcha Component throws NPE after session is expired",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/268f06c89ac02f4a4f771ced23699f3de74edfd0",
        "file": [
            {
                "patch": "@@ -1,5 +1,3 @@\n-// Copyright 2011, 2012 The Apache Software Foundation\n-//\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n // You may obtain a copy of the License at\n@@ -17,16 +15,21 @@\n import org.apache.tapestry5.ComponentResources;\n import org.apache.tapestry5.Link;\n import org.apache.tapestry5.MarkupWriter;\n+import org.apache.tapestry5.StreamResponse;\n import org.apache.tapestry5.annotations.Persist;\n import org.apache.tapestry5.annotations.SupportsInformalParameters;\n import org.apache.tapestry5.ioc.annotations.Inject;\n import org.apache.tapestry5.kaptcha.services.KaptchaProducer;\n+import org.apache.tapestry5.services.HttpError;\n import org.apache.tapestry5.services.Response;\n \n import javax.imageio.ImageIO;\n+import javax.servlet.http.HttpServletResponse;\n import java.awt.image.BufferedImage;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n-import java.io.OutputStream;\n+import java.io.InputStream;\n \n /**\n  * Part of a Captcha based authentication scheme; a KaptchaImage generates a new\n@@ -84,24 +87,45 @@ boolean beginRender(MarkupWriter writer)\n         return false;\n     }\n \n-    void onImage() throws IOException\n+    Object onImage() throws IOException\n     {\n-        BufferedImage image = producer.createImage(captchaText);\n-\n-        response.setDateHeader(\"Expires\", 0);\n-        // Set standard HTTP/1.1 no-cache headers.\n-        response.addHeader(\"Cache-Control\", \"no-store, no-cache, must-revalidate\");\n-        // Set IE extended HTTP/1.1 no-cache headers (use addHeader).\n-        response.addHeader(\"Cache-Control\", \"post-check=0, pre-check=0\");\n-        // Set standard HTTP/1.0 no-cache header.\n-        response.setHeader(\"Pragma\", \"no-cache\");\n-\n-        OutputStream stream = response.getOutputStream(\"image/jpeg\");\n-\n-        ImageIO.write(image, \"jpg\", stream);\n-\n-        stream.flush();\n+        if (captchaText == null)\n+        {\n+            return new HttpError(HttpServletResponse.SC_NOT_FOUND, \"Session expired.\");\n+        }\n+\n+        return new StreamResponse()\n+        {\n+            @Override\n+            public String getContentType()\n+            {\n+                return \"image/jpeg\";\n+            }\n+\n+            @Override\n+            public InputStream getStream() throws IOException\n+            {\n+                BufferedImage image = producer.createImage(captchaText);\n+\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+                ImageIO.write(image, \"jpg\", baos);\n+\n+                return new ByteArrayInputStream(baos.toByteArray());\n+            }\n+\n+            @Override\n+            public void prepareResponse(Response response)\n+            {\n+                response.setDateHeader(\"Expires\", 0);\n+                // Set standard HTTP/1.1 no-cache headers.\n+                response.addHeader(\"Cache-Control\", \"no-store, no-cache, must-revalidate\");\n+                // Set IE extended HTTP/1.1 no-cache headers (use addHeader).\n+                response.addHeader(\"Cache-Control\", \"post-check=0, pre-check=0\");\n+                // Set standard HTTP/1.0 no-cache header.\n+                response.setHeader(\"Pragma\", \"no-cache\");\n+            }\n+        };\n \n-        stream.close();\n     }\n }",
                "additions": 44,
                "raw_url": "https://github.com/apache/tapestry-5/raw/268f06c89ac02f4a4f771ced23699f3de74edfd0/tapestry-kaptcha/src/main/java/org/apache/tapestry5/kaptcha/components/KaptchaImage.java",
                "status": "modified",
                "changes": 64,
                "deletions": 20,
                "sha": "973a801f46111fbe0349a6d2c111b12fc49c2b4a",
                "blob_url": "https://github.com/apache/tapestry-5/blob/268f06c89ac02f4a4f771ced23699f3de74edfd0/tapestry-kaptcha/src/main/java/org/apache/tapestry5/kaptcha/components/KaptchaImage.java",
                "filename": "tapestry-kaptcha/src/main/java/org/apache/tapestry5/kaptcha/components/KaptchaImage.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-kaptcha/src/main/java/org/apache/tapestry5/kaptcha/components/KaptchaImage.java?ref=268f06c89ac02f4a4f771ced23699f3de74edfd0"
            }
        ],
        "bug_id": "tapestry-5_15",
        "parent": "https://github.com/apache/tapestry-5/commit/df93764ad8b5ecdda365f2c205e652692993e084",
        "message": "TAP5-1934: Kaptcha Component throws NPE after session is expired",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/c8bf6f9739d4ab541d02c7cd9a72689335d8d919",
        "file": [
            {
                "patch": "@@ -67,7 +67,7 @@\n      * The object that will perform input validation (which occurs after translation). The validate binding prefix is\n      * generally used to provide this object in a declarative fashion.\n      */\n-    @Parameter(defaultPrefix = BindingConstants.VALIDATE)\n+    @Parameter(defaultPrefix = BindingConstants.VALIDATE, allowNull = false)\n     @SuppressWarnings(\"unchecked\")\n     private FieldValidator<Object> validate;\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c8bf6f9739d4ab541d02c7cd9a72689335d8d919/tapestry-core/src/main/java/org/apache/tapestry5/corelib/base/AbstractTextField.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "7e6b742216f68e30c96323526e447c8c3cea892a",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c8bf6f9739d4ab541d02c7cd9a72689335d8d919/tapestry-core/src/main/java/org/apache/tapestry5/corelib/base/AbstractTextField.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/base/AbstractTextField.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/base/AbstractTextField.java?ref=c8bf6f9739d4ab541d02c7cd9a72689335d8d919"
            }
        ],
        "bug_id": "tapestry-5_16",
        "parent": "https://github.com/apache/tapestry-5/commit/93116c9f0a1028ad5806ef334b1f54924c3991a3",
        "message": "TAP5-736 - TextField validate parameter allows Null, but throws NPE",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/fd2714ccea5c9b51e7f33313d92a1608d0d9a4e1",
        "file": [
            {
                "patch": "@@ -49,7 +49,7 @@ public ClassPropertyAdapterImpl(Class beanType, List<PropertyDescriptor> descrip\n             Method readMethod = pd.getReadMethod();\n             \n             // TAP5-1493\n-            if (readMethod.isBridge()) {\n+            if (readMethod != null && readMethod.isBridge()) {\n                 for (Method m : beanType.getMethods()) {\n                     if (readMethod.getName().equals(m.getName()) && !m.isBridge()) {\n                         readMethod = m;",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/fd2714ccea5c9b51e7f33313d92a1608d0d9a4e1/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/services/ClassPropertyAdapterImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "53775a88f9a230f1d6fcbc6878b4526df2676310",
                "blob_url": "https://github.com/apache/tapestry-5/blob/fd2714ccea5c9b51e7f33313d92a1608d0d9a4e1/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/services/ClassPropertyAdapterImpl.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/services/ClassPropertyAdapterImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/services/ClassPropertyAdapterImpl.java?ref=fd2714ccea5c9b51e7f33313d92a1608d0d9a4e1"
            }
        ],
        "bug_id": "tapestry-5_17",
        "parent": "https://github.com/apache/tapestry-5/commit/22edd355cbea3894d5fee2eb8c38be1b6d5fd6ae",
        "message": "Fix an NPE I've introduced while investigating TAP5-1493.",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/639c57df2363181a8eb78d1a1653b7b73e9e614a",
        "file": [
            {
                "patch": "@@ -1,5 +1,3 @@\n-// Copyright 2007, 2008, 2009, 2011 The Apache Software Foundation\n-//\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n // You may obtain a copy of the License at\n@@ -14,15 +12,13 @@\n \n package org.apache.tapestry5.corelib.base;\n \n-import org.apache.tapestry5.Block;\n-import org.apache.tapestry5.MarkupWriter;\n-import org.apache.tapestry5.PropertyConduit;\n-import org.apache.tapestry5.PropertyOverrides;\n+import org.apache.tapestry5.*;\n import org.apache.tapestry5.annotations.Parameter;\n import org.apache.tapestry5.beaneditor.PropertyModel;\n import org.apache.tapestry5.ioc.Messages;\n import org.apache.tapestry5.ioc.annotations.Inject;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n+import org.apache.tapestry5.ioc.internal.util.TapestryException;\n import org.apache.tapestry5.services.BeanBlockSource;\n import org.apache.tapestry5.services.Core;\n import org.apache.tapestry5.services.Environment;\n@@ -76,6 +72,9 @@\n \n     private boolean mustPopEnvironment;\n \n+    @Inject\n+    private ComponentResources resources;\n+\n     BeanBlockSource defaultBeanBlockSource()\n     {\n         return defaultBeanBlockSource;\n@@ -150,10 +149,11 @@ Object readPropertyForObject()\n         try\n         {\n             return conduit == null ? null : conduit.get(object);\n-        }\n-        catch (NullPointerException ex)\n+        } catch (NullPointerException ex)\n         {\n-            throw new NullPointerException(String.format(\"Property '%s' contains a null value in the path.\", model.getPropertyName()));\n+            throw new TapestryException(String.format(\"Property '%s' contains a null value in the path.\", model.getPropertyName()),\n+                    resources.getLocation(),\n+                    ex);\n         }\n     }\n \n@@ -175,9 +175,10 @@ void afterRender()\n     }\n \n     // Used for testing.\n-    void inject(final PropertyModel model, final Object object)\n+    void inject(final PropertyModel model, final Object object, final ComponentResources resources)\n     {\n         this.model = model;\n         this.object = object;\n+        this.resources = resources;\n     }\n }",
                "additions": 11,
                "raw_url": "https://github.com/apache/tapestry-5/raw/639c57df2363181a8eb78d1a1653b7b73e9e614a/tapestry-core/src/main/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutput.java",
                "status": "modified",
                "changes": 21,
                "deletions": 10,
                "sha": "a3a29de58af7f4c1ce160d5a4d7cbd11830ec0b6",
                "blob_url": "https://github.com/apache/tapestry-5/blob/639c57df2363181a8eb78d1a1653b7b73e9e614a/tapestry-core/src/main/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutput.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutput.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutput.java?ref=639c57df2363181a8eb78d1a1653b7b73e9e614a"
            },
            {
                "patch": "@@ -1,5 +1,3 @@\n-// Copyright 2008 The Apache Software Foundation\n-//\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n // You may obtain a copy of the License at\n@@ -14,9 +12,12 @@\n \n package org.apache.tapestry5.corelib.base;\n \n+import org.apache.tapestry5.ComponentResources;\n import org.apache.tapestry5.PropertyConduit;\n import org.apache.tapestry5.beaneditor.PropertyModel;\n import org.apache.tapestry5.internal.test.InternalBaseTestCase;\n+import org.apache.tapestry5.ioc.Location;\n+import org.apache.tapestry5.ioc.internal.util.TapestryException;\n import org.testng.annotations.Test;\n \n public class AbstractPropertyOutputTest extends InternalBaseTestCase\n@@ -32,12 +33,15 @@ public void test_null_pointer_exception_message()\n         final PropertyConduit conduit = mockPropertyConduit();\n         final PropertyModel model = mockPropertyModel();\n         final Object object = new Object();\n+        ComponentResources resources = mockComponentResources();\n+        Location location = mockLocation();\n \n-        propertyOutputFixture.inject(model, object);\n+        propertyOutputFixture.inject(model, object, resources);\n \n         expect(model.getConduit()).andReturn(conduit);\n         expect(conduit.get(object)).andThrow(new NullPointerException());\n         expect(model.getPropertyName()).andReturn(\"wilma.occupation.address\");\n+        expect(resources.getLocation()).andReturn(location);\n \n         replay();\n \n@@ -47,9 +51,11 @@ public void test_null_pointer_exception_message()\n \n             fail(\"Expected a NullPointerException to be thrown.\");\n         }\n-        catch (final NullPointerException ex)\n+        catch (final TapestryException ex)\n         {\n             assertEquals(ex.getMessage(), \"Property 'wilma.occupation.address' contains a null value in the path.\");\n+            assertSame(ex.getLocation(), location);\n+            assertTrue(ex.getCause() instanceof NullPointerException);\n         }\n \n         verify();",
                "additions": 10,
                "raw_url": "https://github.com/apache/tapestry-5/raw/639c57df2363181a8eb78d1a1653b7b73e9e614a/tapestry-core/src/test/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutputTest.java",
                "status": "modified",
                "changes": 14,
                "deletions": 4,
                "sha": "80c4a1e3fa69756c6fc5305cb35f7762d4f60ee8",
                "blob_url": "https://github.com/apache/tapestry-5/blob/639c57df2363181a8eb78d1a1653b7b73e9e614a/tapestry-core/src/test/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutputTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutputTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutputTest.java?ref=639c57df2363181a8eb78d1a1653b7b73e9e614a"
            }
        ],
        "bug_id": "tapestry-5_18",
        "parent": "https://github.com/apache/tapestry-5/commit/bc5c3a913d50bd894516b1a009d24098a4f59cd3",
        "message": "TAP5-1672: Provide more info when PropertyDisplay component hits an NPE",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/2a4084deb9fc7425e79d5efef6c013a5e088a636",
        "file": [
            {
                "patch": "@@ -160,6 +160,10 @@ public boolean accept(PlasticMethod method)\n                                                                                final String fieldTypeName, final Parameter annotation,\n                                                                                final MethodHandle defaultMethodHandle)\n     {\n+        boolean primitive = PlasticUtils.isPrimitive(fieldTypeName);\n+\n+        final boolean allowNull = annotation.allowNull() && !primitive;\n+\n         return new ComputedValue<FieldConduit<Object>>()\n         {\n             public ParameterConduit get(InstanceContext context)\n@@ -257,15 +261,15 @@ private Object readFromBinding()\n                                     icr.getCompleteId(), InternalUtils.toMessage(ex)), parameterBinding, ex);\n                         }\n \n-                        if (result != null || annotation.allowNull())\n+                        if (result == null && !allowNull)\n                         {\n-                            return result;\n+                            throw new TapestryException(\n+                                    String.format(\n+                                            \"Parameter '%s' of component %s is bound to null. This parameter is not allowed to be null.\",\n+                                            parameterName, icr.getCompleteId()), parameterBinding, null);\n                         }\n \n-                        throw new TapestryException(\n-                                String.format(\n-                                        \"Parameter '%s' of component %s is bound to null. This parameter is not allowed to be null.\",\n-                                        parameterName, icr.getCompleteId()), parameterBinding, null);\n+                        return result;\n                     }\n \n                     private void writeToBinding(Object newValue)",
                "additions": 10,
                "raw_url": "https://github.com/apache/tapestry-5/raw/2a4084deb9fc7425e79d5efef6c013a5e088a636/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ParameterWorker.java",
                "status": "modified",
                "changes": 16,
                "deletions": 6,
                "sha": "dca1929eb449bb26716c3b81166f5f4e13136616",
                "blob_url": "https://github.com/apache/tapestry-5/blob/2a4084deb9fc7425e79d5efef6c013a5e088a636/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ParameterWorker.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ParameterWorker.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ParameterWorker.java?ref=2a4084deb9fc7425e79d5efef6c013a5e088a636"
            },
            {
                "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2011 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1\n+\n+import org.apache.tapestry5.integration.TapestryCoreTestCase\n+import org.testng.annotations.Test\n+\n+/**\n+ * @since 5.3\n+ */\n+class ParameterTests extends TapestryCoreTestCase {\n+\n+    /**\n+     * https://issues.apache.org/jira/browse/TAP5-1227\n+     */\n+\n+    @Test\n+    void null_bound_to_primitive_field_is_an_error() {\n+        openLinks \"Null Bound to Primitive Demo\"\n+\n+        assertTextPresent \"Parameter 'value' of component NullBindingToPrimitive:showint is bound to null. This parameter is not allowed to be null.\"\n+    }\n+\n+}",
                "additions": 36,
                "raw_url": "https://github.com/apache/tapestry-5/raw/2a4084deb9fc7425e79d5efef6c013a5e088a636/tapestry-core/src/test/groovy/org/apache/tapestry5/integration/app1/ParameterTests.groovy",
                "status": "added",
                "changes": 36,
                "deletions": 0,
                "sha": "b71b6f84d034a3c6daae896f742ba6bcfb8a148b",
                "blob_url": "https://github.com/apache/tapestry-5/blob/2a4084deb9fc7425e79d5efef6c013a5e088a636/tapestry-core/src/test/groovy/org/apache/tapestry5/integration/app1/ParameterTests.groovy",
                "filename": "tapestry-core/src/test/groovy/org/apache/tapestry5/integration/app1/ParameterTests.groovy",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/groovy/org/apache/tapestry5/integration/app1/ParameterTests.groovy?ref=2a4084deb9fc7425e79d5efef6c013a5e088a636"
            },
            {
                "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2011 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.components;\n+\n+import org.apache.tapestry5.MarkupWriter;\n+import org.apache.tapestry5.annotations.Parameter;\n+\n+/**\n+ * @since 5.3\n+ */\n+public class ShowInt\n+{\n+    @Parameter\n+    private int value;\n+\n+    void beginRender(MarkupWriter writer)\n+    {\n+        writer.element(\"strong\");\n+        writer.write(String.valueOf(value));\n+        writer.end();\n+    }\n+\n+}",
                "additions": 35,
                "raw_url": "https://github.com/apache/tapestry-5/raw/2a4084deb9fc7425e79d5efef6c013a5e088a636/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/ShowInt.java",
                "status": "added",
                "changes": 35,
                "deletions": 0,
                "sha": "c2b6c2c00aa574cf4e1155be66ab6ed8e06121cc",
                "blob_url": "https://github.com/apache/tapestry-5/blob/2a4084deb9fc7425e79d5efef6c013a5e088a636/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/ShowInt.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/ShowInt.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/ShowInt.java?ref=2a4084deb9fc7425e79d5efef6c013a5e088a636"
            },
            {
                "patch": "@@ -14,10 +14,6 @@\n \n package org.apache.tapestry5.integration.app1.pages;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-\n import org.apache.tapestry5.ComponentResources;\n import org.apache.tapestry5.Link;\n import org.apache.tapestry5.PersistenceConstants;\n@@ -27,6 +23,10 @@\n import org.apache.tapestry5.ioc.annotations.Inject;\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n /**\n  * Have to start somewhere!\n  */\n@@ -57,6 +57,8 @@ public int compareTo(Item o)\n     private static final List<Item> ITEMS = CollectionFactory\n             .newList(\n \n+                    new Item(\"NullBindingToPrimitive\", \"Null Bound to Primitive Demo\", \"Correct exception when a primitive parameter is bound to null\"),\n+\n                     new Item(\"TreeDemo\", \"Tree Component Demo\", \"Demo of Tree Component\"),\n \n                     new Item(\"InvalidExpressionInDynamicTemplate\", \"Invalid Dynamic Expression\",\n@@ -86,7 +88,7 @@ public int compareTo(Item o)\n                     new Item(\"ZoneFormUpdateDemo\", \"Zone/Form Update Demo\", \"Updating a Zone inside a Form\"),\n \n                     new Item(\"MultiZoneStringBodyDemo\", \"MultiZone String Body Demo\",\n-                                               \"Multi-zone updates in a loop using strings coerced into blocks\"),\n+                            \"Multi-zone updates in a loop using strings coerced into blocks\"),\n \n                     new Item(\"RenderNotificationDemo\", \"RenderNotification Demo\", \"Use of RenderNotification mixin\"),\n \n@@ -472,13 +474,13 @@ public int compareTo(Item o)\n                     new Item(\"AtInjectDemo\", \"@javax.inject.Inject Demo\", \"Using @javax.inject.Inject for injection\"),\n \n                     new Item(\"LinkQueryParameters\", \"Link Query Parameters Demo\",\n-                            \"Providing Query Parameters directly to link components as a map of key=parameter name, value=parameter values\") ,\n+                            \"Providing Query Parameters directly to link components as a map of key=parameter name, value=parameter values\"),\n \n-                    new Item(\"ChecklistDemo\", \"Checklist Demo\", \"Use Checklist component\")            ,\n+                    new Item(\"ChecklistDemo\", \"Checklist Demo\", \"Use Checklist component\"),\n \n                     new Item(\"BeanEditFormPrepareBubbling\", \"BeanEditor Prepare Bubbling Demo\", \"Prepare event bubbling\"),\n-\t\t\t\t\t\n-\t\t\t\t\tnew Item(\"NestedFormFragment\",\"Nested Form Fragment Demo\",\"Nesting Form Fragments work properly\")\n+\n+                    new Item(\"NestedFormFragment\", \"Nested Form Fragment Demo\", \"Nesting Form Fragments work properly\")\n \n             );\n ",
                "additions": 11,
                "raw_url": "https://github.com/apache/tapestry-5/raw/2a4084deb9fc7425e79d5efef6c013a5e088a636/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "status": "modified",
                "changes": 20,
                "deletions": 9,
                "sha": "4251469d302762264ea89926cb1107c4a06c3b45",
                "blob_url": "https://github.com/apache/tapestry-5/blob/2a4084deb9fc7425e79d5efef6c013a5e088a636/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java?ref=2a4084deb9fc7425e79d5efef6c013a5e088a636"
            },
            {
                "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2011 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.pages;\n+\n+/**\n+ * @since 5.3\n+ */\n+public class NullBindingToPrimitive\n+{\n+}",
                "additions": 22,
                "raw_url": "https://github.com/apache/tapestry-5/raw/2a4084deb9fc7425e79d5efef6c013a5e088a636/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/NullBindingToPrimitive.java",
                "status": "added",
                "changes": 22,
                "deletions": 0,
                "sha": "b5ab0cbc6b081c55caa49f9168cfb463018ac403",
                "blob_url": "https://github.com/apache/tapestry-5/blob/2a4084deb9fc7425e79d5efef6c013a5e088a636/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/NullBindingToPrimitive.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/NullBindingToPrimitive.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/NullBindingToPrimitive.java?ref=2a4084deb9fc7425e79d5efef6c013a5e088a636"
            },
            {
                "patch": "@@ -0,0 +1,5 @@\n+<html t:type=\"Border\" xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_3.xsd\">\n+\n+    <t:showint value=\"null\"/>\n+\n+</html>",
                "additions": 5,
                "raw_url": "https://github.com/apache/tapestry-5/raw/2a4084deb9fc7425e79d5efef6c013a5e088a636/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/NullBindingToPrimitive.tml",
                "status": "added",
                "changes": 5,
                "deletions": 0,
                "sha": "44e469f6557cde0af802d723b8dfb0aaa472f733",
                "blob_url": "https://github.com/apache/tapestry-5/blob/2a4084deb9fc7425e79d5efef6c013a5e088a636/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/NullBindingToPrimitive.tml",
                "filename": "tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/NullBindingToPrimitive.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/NullBindingToPrimitive.tml?ref=2a4084deb9fc7425e79d5efef6c013a5e088a636"
            }
        ],
        "bug_id": "tapestry-5_19",
        "parent": "https://github.com/apache/tapestry-5/commit/08271c735b68278bc59741cac6309a96b935fc88",
        "message": "TAP5-1227: Binding a parameter whose type is primitive to null results in a difficult to understand NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@1144110 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/c41f18765078d6bb92da710bda46437e54b82434",
        "file": [
            {
                "patch": "@@ -53,6 +53,10 @@ public DateFormat getDateFormat()\n     public Date getCalendarDate() \n     {\n         Calendar calendar = (Calendar) context.getPropertyValue();\n+        \n+        if(calendar == null)\n+            return null;\n+        \n         return calendar.getTime();\n      }\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c41f18765078d6bb92da710bda46437e54b82434/tapestry-core/src/main/java/org/apache/tapestry5/corelib/pages/PropertyDisplayBlocks.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "67e521c971762e09da52bf6b0982830476712ddb",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c41f18765078d6bb92da710bda46437e54b82434/tapestry-core/src/main/java/org/apache/tapestry5/corelib/pages/PropertyDisplayBlocks.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/pages/PropertyDisplayBlocks.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/pages/PropertyDisplayBlocks.java?ref=c41f18765078d6bb92da710bda46437e54b82434"
            },
            {
                "patch": "@@ -4,5 +4,7 @@\n   <h1>BeanEditor Calendar Demo</h1>\n \n   <t:beandisplay object=\"holder\" />\n+  \n+  <t:actionlink t:id=\"clear\">clear</t:actionlink>\n \n </html>",
                "additions": 2,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c41f18765078d6bb92da710bda46437e54b82434/tapestry-core/src/test/app1/ShowCalendarHolder.tml",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "3562013b25982e5b17f824a4ddca7225aad9a5f5",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c41f18765078d6bb92da710bda46437e54b82434/tapestry-core/src/test/app1/ShowCalendarHolder.tml",
                "filename": "tapestry-core/src/test/app1/ShowCalendarHolder.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/app1/ShowCalendarHolder.tml?ref=c41f18765078d6bb92da710bda46437e54b82434"
            },
            {
                "patch": "@@ -718,6 +718,9 @@ public void calendar_field_inside_bean_editor()\n         clickAndWait(SUBMIT);\n \n         assertTextPresent(\"Apr 6, 1978\");\n+        \n+        //TAP5-1043\n+        clickAndWait(\"link=clear\");\n     }\n \n     @Test",
                "additions": 3,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c41f18765078d6bb92da710bda46437e54b82434/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/FormTests.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "214eb1ba1ab96e8d50306bff599f737412dda04b",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c41f18765078d6bb92da710bda46437e54b82434/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/FormTests.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/FormTests.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/FormTests.java?ref=c41f18765078d6bb92da710bda46437e54b82434"
            },
            {
                "patch": "@@ -22,7 +22,7 @@\n /**\n  * component that formats a value and outputs it.\n  */\n-public class Output\n+public class OutputDate\n {\n     @Parameter(required = true)\n     private Object value;",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c41f18765078d6bb92da710bda46437e54b82434/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/OutputDate.java",
                "previous_filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/Output.java",
                "status": "renamed",
                "changes": 2,
                "deletions": 1,
                "sha": "9f4b166d292018f3bded95c461125733774aefdc",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c41f18765078d6bb92da710bda46437e54b82434/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/OutputDate.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/OutputDate.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/OutputDate.java?ref=c41f18765078d6bb92da710bda46437e54b82434"
            },
            {
                "patch": "@@ -15,7 +15,7 @@\n package org.apache.tapestry5.integration.app1.pages;\n \n import org.apache.tapestry5.annotations.*;\n-import org.apache.tapestry5.integration.app1.components.Output;\n+import org.apache.tapestry5.integration.app1.components.OutputDate;\n import org.apache.tapestry5.integration.app1.mixins.Emphasis;\n \n import java.sql.Date;\n@@ -31,13 +31,13 @@\n     @Component(parameters =\n             { \"value=date2\", \"format=format\", \"test=showEmphasis\" })\n     @Mixins(\"Emphasis\")\n-    private Output output2;\n+    private OutputDate output2;\n \n     @SuppressWarnings(\"unused\")\n     @Component(parameters =\n             { \"value=date3\", \"format=format\", \"test=showEmphasis\" })\n     @MixinClasses(Emphasis.class)\n-    private Output output3;\n+    private OutputDate output3;\n \n     @Retain\n     private final Format format = DateFormat.getDateInstance(DateFormat.MEDIUM, Locale.US);",
                "additions": 3,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c41f18765078d6bb92da710bda46437e54b82434/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/InstanceMixin.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "0e963f0612d2949e5097b53ac1ccd95e60bc7c2b",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c41f18765078d6bb92da710bda46437e54b82434/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/InstanceMixin.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/InstanceMixin.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/InstanceMixin.java?ref=c41f18765078d6bb92da710bda46437e54b82434"
            },
            {
                "patch": "@@ -24,4 +24,9 @@\n     @Property\n     private CalendarHolder holder;\n     \n+    void onActionFromClear()\n+    {\n+        holder = null;\n+    }\n+    \n }",
                "additions": 5,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c41f18765078d6bb92da710bda46437e54b82434/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ShowCalendarHolder.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "fa9ddfcf0873c359783acae0df3e6a04d5f94d5a",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c41f18765078d6bb92da710bda46437e54b82434/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ShowCalendarHolder.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ShowCalendarHolder.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ShowCalendarHolder.java?ref=c41f18765078d6bb92da710bda46437e54b82434"
            }
        ],
        "bug_id": "tapestry-5_20",
        "parent": "https://github.com/apache/tapestry-5/commit/91f3319be7298ae24b29b16702b7a911d3a2a13b",
        "message": "TAP5-1043: PropertyDisplayBlocks causes NullPointerException when property of type Calendar is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@919642 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/4b636bfed92041b30849d217f34d921fe0142301",
        "file": [
            {
                "patch": "@@ -14,8 +14,10 @@\n \n package org.apache.tapestry5.internal.test;\n \n+import org.apache.tapestry5.Link;\n import org.apache.tapestry5.dom.Document;\n import org.apache.tapestry5.internal.services.ComponentInvocation;\n+import org.apache.tapestry5.internal.services.ComponentInvocationMap;\n import org.apache.tapestry5.internal.services.InvocationTarget;\n import org.apache.tapestry5.internal.services.PageRenderTarget;\n import org.apache.tapestry5.ioc.Registry;\n@@ -37,9 +39,16 @@\n \n     private final TestableResponse response;\n \n-    public PageRenderInvoker(Registry registry)\n+    private final ComponentInvoker followupInvoker;\n+\n+    private final ComponentInvocationMap componentInvocationMap;\n+\n+    public PageRenderInvoker(Registry registry, ComponentInvoker followupInvoker,\n+                             ComponentInvocationMap componentInvocationMap)\n     {\n         this.registry = registry;\n+        this.followupInvoker = followupInvoker;\n+        this.componentInvocationMap = componentInvocationMap;\n \n         pageRenderRequestHandler = this.registry.getService(PageRenderRequestHandler.class);\n         markupWriterFactory = this.registry.getService(TestableMarkupWriterFactory.class);\n@@ -65,6 +74,18 @@ public Document invoke(ComponentInvocation invocation)\n \n             pageRenderRequestHandler.handle(parameters);\n \n+            Link redirect = response.getRedirectLink();\n+\n+            if (redirect != null)\n+            {\n+\n+                ComponentInvocation followup = componentInvocationMap.get(redirect);\n+\n+                response.clear();\n+\n+                return followupInvoker.invoke(followup);\n+            }\n+\n             return markupWriterFactory.getLatestMarkupWriter().getDocument();\n         }\n         catch (IOException ex)",
                "additions": 22,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/main/java/org/apache/tapestry5/internal/test/PageRenderInvoker.java",
                "status": "modified",
                "changes": 23,
                "deletions": 1,
                "sha": "f45c42f6e42c26bc74040f9b645167a0b02ed531",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/main/java/org/apache/tapestry5/internal/test/PageRenderInvoker.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/test/PageRenderInvoker.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/test/PageRenderInvoker.java?ref=4b636bfed92041b30849d217f34d921fe0142301"
            },
            {
                "patch": "@@ -107,7 +107,9 @@ public PageTester(String appPackage, String appName, String contextPath, Class..\n         globals.storeContext(new PageTesterContext(contextPath));\n \n         Map<Class, ComponentInvoker> map = newMap();\n-        map.put(PageRenderTarget.class, new PageRenderInvoker(registry));\n+\n+        map.put(PageRenderTarget.class, new PageRenderInvoker(registry, this, invocationMap));\n+\n         map.put(ComponentEventTarget.class, new ComponentEventInvoker(registry, this, invocationMap));\n \n         invokerRegistry = StrategyRegistry.newInstance(ComponentInvoker.class, map);",
                "additions": 3,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/main/java/org/apache/tapestry5/test/PageTester.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "c1c7e8845c8e64def4874610e40c60aa28f66c82",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/main/java/org/apache/tapestry5/test/PageTester.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/test/PageTester.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/test/PageTester.java?ref=4b636bfed92041b30849d217f34d921fe0142301"
            },
            {
                "patch": "@@ -0,0 +1,7 @@\n+<html xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_0_0.xsd\">\n+    <body>\n+        <p>\n+            Arrived on page<span id=\"page-name\">${componentResources.pageName}</span>.\n+        </p>\n+    </body>\n+</html>\n\\ No newline at end of file",
                "additions": 7,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/test/app2/Final.tml",
                "status": "added",
                "changes": 7,
                "deletions": 0,
                "sha": "efb840610e09fe36009b9151070092e1bdfc02a8",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/test/app2/Final.tml",
                "filename": "tapestry-core/src/test/app2/Final.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/app2/Final.tml?ref=4b636bfed92041b30849d217f34d921fe0142301"
            },
            {
                "patch": "@@ -0,0 +1,8 @@\n+<html xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_0_0.xsd\">\n+    <body>\n+\n+        <t:form t:id=\"form\">\n+            <input type=\"submit\" value=\"Launch\"/>\n+        </t:form>\n+    </body>\n+</html>\n\\ No newline at end of file",
                "additions": 8,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/test/app2/Launch.tml",
                "status": "added",
                "changes": 8,
                "deletions": 0,
                "sha": "710f4291e05c86f573019f075116934a766fbfb1",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/test/app2/Launch.tml",
                "filename": "tapestry-core/src/test/app2/Launch.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/app2/Launch.tml?ref=4b636bfed92041b30849d217f34d921fe0142301"
            },
            {
                "patch": "@@ -0,0 +1,50 @@\n+//  Copyright 2008 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration;\n+\n+import org.apache.tapestry5.dom.Document;\n+import org.apache.tapestry5.test.PageTester;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+/**\n+ * Tests on PageTester itself.\n+ */\n+public class PageTesterTest extends Assert\n+{\n+    private static final String PACKAGE = \"org.apache.tapestry5.integration.app2\";\n+\n+    @Test\n+    public void on_activate_chain_is_followed()\n+    {\n+        PageTester tester = new PageTester(PACKAGE, \"\", \"src/test/app2\");\n+\n+        Document launchDoc = tester.renderPage(\"Launch\");\n+\n+        Map<String, String> parameters = Collections.emptyMap();\n+\n+        // Submit the form, which will then skip through Intermediate and\n+        // arrive at Final.\n+\n+        Document finalDoc = tester.submitForm(launchDoc.getElementById(\"form\"), parameters);\n+\n+        assertEquals(finalDoc.getElementById(\"page-name\").getChildMarkup(), \"Final\");\n+\n+        tester.shutdown();\n+    }\n+}",
                "additions": 50,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/test/java/org/apache/tapestry5/integration/PageTesterTest.java",
                "status": "added",
                "changes": 50,
                "deletions": 0,
                "sha": "5dbd945d0671254f71973ffbaef1e3b352493d43",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/test/java/org/apache/tapestry5/integration/PageTesterTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/PageTesterTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/PageTesterTest.java?ref=4b636bfed92041b30849d217f34d921fe0142301"
            },
            {
                "patch": "@@ -0,0 +1,19 @@\n+//  Copyright 2008 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app2.pages;\n+\n+public class Final\n+{\n+}",
                "additions": 19,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/test/java/org/apache/tapestry5/integration/app2/pages/Final.java",
                "status": "added",
                "changes": 19,
                "deletions": 0,
                "sha": "5323459e69a82355d66ea73b80d6ab907986e35d",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/test/java/org/apache/tapestry5/integration/app2/pages/Final.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app2/pages/Final.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app2/pages/Final.java?ref=4b636bfed92041b30849d217f34d921fe0142301"
            },
            {
                "patch": "@@ -0,0 +1,23 @@\n+//  Copyright 2008 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app2.pages;\n+\n+public class Intermediate\n+{\n+    Object onActivate()\n+    {\n+        return Final.class;\n+    }\n+}",
                "additions": 23,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/test/java/org/apache/tapestry5/integration/app2/pages/Intermediate.java",
                "status": "added",
                "changes": 23,
                "deletions": 0,
                "sha": "392528892fbecb7406f58587d77a5a30c7157f73",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/test/java/org/apache/tapestry5/integration/app2/pages/Intermediate.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app2/pages/Intermediate.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app2/pages/Intermediate.java?ref=4b636bfed92041b30849d217f34d921fe0142301"
            },
            {
                "patch": "@@ -0,0 +1,23 @@\n+//  Copyright 2008 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app2.pages;\n+\n+public class Launch\n+{\n+    Object onSuccess()\n+    {\n+        return Intermediate.class;\n+    }\n+}",
                "additions": 23,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/test/java/org/apache/tapestry5/integration/app2/pages/Launch.java",
                "status": "added",
                "changes": 23,
                "deletions": 0,
                "sha": "804a454f22d6a010a8452e0088fddd3ba348b5d6",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4b636bfed92041b30849d217f34d921fe0142301/tapestry-core/src/test/java/org/apache/tapestry5/integration/app2/pages/Launch.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app2/pages/Launch.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app2/pages/Launch.java?ref=4b636bfed92041b30849d217f34d921fe0142301"
            }
        ],
        "bug_id": "tapestry-5_21",
        "parent": "https://github.com/apache/tapestry-5/commit/36ac42c7ecf30ebf2f5760ba7ad09d11ce4296f6",
        "message": "TAP5-10: An onActivate() event handler on a page can cause PageTester to fail with a NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@712240 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/629095afaeb23e9032fe074194e48d4a908cb81c",
        "file": [
            {
                "patch": "@@ -116,8 +116,7 @@\n \n     void setupRender()\n     {\n-        if (model == null) model = modelSource.create(object.getClass(), false,\n-                                                      overrides.getContainerMessages());\n+        if (model == null) model = modelSource.createDisplayModel(object.getClass(), overrides.getContainerMessages());\n \n         BeanModelUtils.modify(model, add, include, exclude, reorder);\n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/BeanDisplay.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "37bf87ae57df5f598962acbf316eac489f260eca",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/BeanDisplay.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/BeanDisplay.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/BeanDisplay.java?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            },
            {
                "patch": "@@ -134,7 +134,7 @@ void onPrepareFromForm()\n         {\n             Class beanType = resources.getBoundType(\"object\");\n \n-            model = beanModelSource.create(beanType, true, resources.getContainerMessages());\n+            model = beanModelSource.createEditModel(beanType, resources.getContainerMessages());\n         }\n \n         BeanModelUtils.modify(model, add, include, exclude, reorder);\n@@ -173,5 +173,4 @@ public void recordError(String errorMessage)\n     {\n         form.recordError(errorMessage);\n     }\n-\n }",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/BeanEditForm.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "d8a11d8ea557a392173dc617edd2bb115ca2efb5",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/BeanEditForm.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/BeanEditForm.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/BeanEditForm.java?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            },
            {
                "patch": "@@ -180,7 +180,7 @@ void doPrepare()\n         if (model == null)\n         {\n             Class type = resources.getBoundType(\"object\");\n-            model = modelSource.create(type, true, overrides.getOverrideMessages());\n+            model = modelSource.createEditModel(type, overrides.getOverrideMessages());\n         }\n \n         BeanModelUtils.modify(model, add, include, exclude, reorder);",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/BeanEditor.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "9bfe30db44d8f2f3c76936960fe8bc801453367a",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/BeanEditor.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/BeanEditor.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/BeanEditor.java?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            },
            {
                "patch": "@@ -382,7 +382,7 @@ public void updateSort(String columnId)\n             if (sortColumnId == null)\n                 return Collections.emptyList();\n \n-            PropertyModel sortModel = dataModel.getById(sortColumnId);\n+            PropertyModel sortModel = getDataModel().getById(sortColumnId);\n \n             SortConstraint constraint = new SortConstraint(sortModel, getColumnSort());\n \n@@ -404,19 +404,23 @@ Binding defaultModel()\n     {\n         return new AbstractBinding()\n         {\n-\n             public Object get()\n             {\n                 // Get the default row type from the data source\n \n-                Class rowType = source.getRowType();\n+                GridDataSource gridDataSource = source;\n+\n+                Class rowType = gridDataSource.getRowType();\n \n-                if (rowType == null) throw new RuntimeException(\n-                        \"Unable to determine the bean type for rows from the GridDataSource. You should bind the model parameter explicitly.\");\n+                if (rowType == null)\n+                    throw new RuntimeException(\n+                            String.format(\n+                                    \"Unable to determine the bean type for rows from %s. You should bind the model parameter explicitly.\",\n+                                    gridDataSource));\n \n                 // Properties do not have to be read/write\n \n-                return modelSource.create(rowType, false, overrides.getOverrideMessages());\n+                return modelSource.createDisplayModel(rowType, overrides.getOverrideMessages());\n             }\n \n             /**\n@@ -473,10 +477,6 @@ void setupDataSource()\n \n         if (availableRows == 0) return;\n \n-        dataModel = model;\n-\n-        BeanModelUtils.modify(dataModel, add, include, exclude, reorder);\n-\n         int maxPage = ((availableRows - 1) / rowsPerPage) + 1;\n \n         // This captures when the number of rows has decreased, typically due to deletions.\n@@ -488,6 +488,8 @@ void setupDataSource()\n \n         int endIndex = Math.min(startIndex + rowsPerPage - 1, availableRows - 1);\n \n+        dataModel = null;\n+\n         cachingSource.prepare(startIndex, endIndex, sortModel.getSortConstraints());\n     }\n \n@@ -523,6 +525,13 @@ void afterRender(MarkupWriter writer)\n \n     public BeanModel getDataModel()\n     {\n+        if (dataModel == null)\n+        {\n+            dataModel = model;\n+\n+            BeanModelUtils.modify(dataModel, add, include, exclude, reorder);\n+        }\n+\n         return dataModel;\n     }\n ",
                "additions": 19,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java",
                "status": "modified",
                "changes": 29,
                "deletions": 10,
                "sha": "8018bf3c24dcd0839629b4d88d403013fe445bec",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            },
            {
                "patch": "@@ -60,7 +60,7 @@\n     private boolean productionMode;\n \n     {\n-        model = source.create(ServiceActivity.class, false, messages);\n+        model = source.createDisplayModel(ServiceActivity.class, messages);\n \n         model.add(\"serviceInterface\", null);\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/corelib/pages/ServiceStatus.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "b17ced5415c958a93beaeb0b69af23b6305ce6bd",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/corelib/pages/ServiceStatus.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/pages/ServiceStatus.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/pages/ServiceStatus.java?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            },
            {
                "patch": "@@ -108,7 +108,6 @@ private void orderProperties(ClassPropertyAdapter classAdapter, List<String> pro\n         {\n             propertyNames.add(po.propertyName);\n         }\n-\n     }\n \n     private static int computeDepth(Method method)\n@@ -140,6 +139,16 @@ public BeanModelSourceImpl(LoggerSource loggerSource, TypeCoercer typeCoercer, P\n         this.locator = locator;\n     }\n \n+    public <T> BeanModel<T> createDisplayModel(Class<T> beanClass, Messages messages)\n+    {\n+        return create(beanClass, false, messages);\n+    }\n+\n+    public <T> BeanModel<T> createEditModel(Class<T> beanClass, Messages messages)\n+    {\n+        return create(beanClass, true, messages);\n+    }\n+\n     public <T> BeanModel<T> create(Class<T> beanClass, boolean filterReadOnlyProperties, Messages messages)\n     {\n         Defense.notNull(beanClass, \"beanClass\");",
                "additions": 10,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/BeanModelSourceImpl.java",
                "status": "modified",
                "changes": 11,
                "deletions": 1,
                "sha": "77544ceadd1a2176ccd9904d27d90faa8a6e0e1e",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/BeanModelSourceImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/services/BeanModelSourceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/BeanModelSourceImpl.java?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            },
            {
                "patch": "@@ -45,6 +45,26 @@\n      *                                 org.apache.tapestry5.corelib.components.BeanDisplay}).\n      * @param messages                 Used to find explicit overrides of\n      * @return a model\n+     * @deprecated use {@link #createDisplayModel(Class, org.apache.tapestry5.ioc.Messages)} or {@link\n+     *             #createEditModel(Class, org.apache.tapestry5.ioc.Messages)}\n      */\n     <T> BeanModel<T> create(Class<T> beanClass, boolean filterReadOnlyProperties, Messages messages);\n+\n+    /**\n+     * Creates a model for display purposes; this may include properties which are read-only.\n+     *\n+     * @param beanClass class of object to be edited\n+     * @param messages\n+     * @return a model containing properties that can be presented to the user\n+     */\n+    <T> BeanModel<T> createDisplayModel(Class<T> beanClass, Messages messages);\n+\n+    /**\n+     * Creates a model for edit and update purposes, only properties that are fully read-write are included.\n+     *\n+     * @param beanClass class of object to be edited\n+     * @param messages\n+     * @return a model containing properties that can be presented to the user\n+     */\n+    <T> BeanModel<T> createEditModel(Class<T> beanClass, Messages messages);\n }",
                "additions": 20,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/services/BeanModelSource.java",
                "status": "modified",
                "changes": 20,
                "deletions": 0,
                "sha": "16b4fcae53509c9ca06ab7f90edf94751ac39096",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/services/BeanModelSource.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/services/BeanModelSource.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/services/BeanModelSource.java?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            },
            {
                "patch": "@@ -1159,4 +1159,10 @@ protected final void train_toURI(Link link, String URI)\n     {\n         expect(link.toURI()).andReturn(URI);\n     }\n+\n+    protected final void train_createEditModel(BeanModelSource source, Class beanClass, Messages messages,\n+                                               BeanModel model)\n+    {\n+        expect(source.createEditModel(beanClass, messages)).andReturn(model);\n+    }\n }",
                "additions": 6,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/test/TapestryTestCase.java",
                "status": "modified",
                "changes": 6,
                "deletions": 0,
                "sha": "d19b4806de5f9558b9d1986300dd96eed309170c",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/main/java/org/apache/tapestry5/test/TapestryTestCase.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/test/TapestryTestCase.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/test/TapestryTestCase.java?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            },
            {
                "patch": "@@ -8,7 +8,7 @@\n \n         <t:errors/>\n \n-        <table t:type=\"Grid\" source=\"items\" row=\"item\" pagerposition=\"top\"\n+        <table t:id=\"grid\" t:type=\"Grid\" source=\"items\" row=\"item\" pagerposition=\"top\"\n                encoder=\"encoder\"\n                add=\"id\" reorder=\"id,title,urgency\"\n                rowsperpage=\"5\">",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/test/app1/GridFormEncoderDemo.tml",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "cbfe5d3b4379398c61ca0fff328e3e21d088b033",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/test/app1/GridFormEncoderDemo.tml",
                "filename": "tapestry-core/src/test/app1/GridFormEncoderDemo.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/app1/GridFormEncoderDemo.tml?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            },
            {
                "patch": "@@ -14,8 +14,6 @@\n \n package org.apache.tapestry5.corelib.components;\n \n-import java.lang.annotation.Annotation;\n-\n import org.apache.tapestry5.ComponentResources;\n import org.apache.tapestry5.PropertyOverrides;\n import org.apache.tapestry5.beaneditor.BeanModel;\n@@ -31,6 +29,8 @@\n import org.easymock.IArgumentMatcher;\n import org.testng.annotations.Test;\n \n+import java.lang.annotation.Annotation;\n+\n public class BeanEditorTest extends TapestryTestCase\n {\n     @Test\n@@ -46,7 +46,7 @@ public void object_created_as_needed()\n \n         train_getBoundType(resources, \"object\", RegistrationData.class);\n \n-        train_create(source, RegistrationData.class, true, messages, model);\n+        train_createEditModel(source, RegistrationData.class, messages, model);\n \n         train_getOverrideMessages(overrides, messages);\n \n@@ -57,7 +57,7 @@ public void object_created_as_needed()\n \n         BeanEditor component = new BeanEditor();\n \n-        component.inject(resources, overrides, source,env);\n+        component.inject(resources, overrides, source, env);\n \n         component.doPrepare();\n \n@@ -83,7 +83,7 @@ public void object_can_not_be_instantiated()\n \n         train_getBoundType(resources, \"object\", Runnable.class);\n \n-        train_create(source, Runnable.class, true, messages, model);\n+        train_createEditModel(source, Runnable.class, messages, model);\n \n         expect(model.newInstance()).andThrow(exception);\n \n@@ -98,7 +98,7 @@ public void object_can_not_be_instantiated()\n \n         BeanEditor component = new BeanEditor();\n \n-        component.inject(resources, overrides, source,env);\n+        component.inject(resources, overrides, source, env);\n \n         try\n         {\n@@ -119,7 +119,7 @@ public void object_can_not_be_instantiated()\n \n     private static BeanEditContext contextEq()\n     {\n-        EasyMock.reportMatcher(new IArgumentMatcher() \n+        EasyMock.reportMatcher(new IArgumentMatcher()\n         {\n             public void appendTo(StringBuffer buf)\n             {\n@@ -129,15 +129,15 @@ public void appendTo(StringBuffer buf)\n             public boolean matches(Object argument)\n             {\n                 return (argument instanceof BeanEditContext) &&\n-                       ((BeanEditContext)argument).getBeanClass() == RegistrationData.class;\n+                        ((BeanEditContext) argument).getBeanClass() == RegistrationData.class;\n             }\n         });\n \n         return null;\n     }\n \n     @Test\n-    public void beaneditcontext_pushed_to_environment() \n+    public void beaneditcontext_pushed_to_environment()\n     {\n         ComponentResources resources = mockComponentResources();\n         BeanModelSource source = mockBeanModelSource();\n@@ -149,10 +149,10 @@ public void beaneditcontext_pushed_to_environment()\n \n         train_getBoundType(resources, \"object\", RegistrationData.class);\n \n-        train_create(source, RegistrationData.class, true, messages, model);\n+        train_createEditModel(source, RegistrationData.class, messages, model);\n \n         train_getOverrideMessages(overrides, messages);\n-        \n+\n         expect(model.newInstance()).andReturn(data);\n         expect(model.getBeanType()).andReturn(RegistrationData.class);\n \n@@ -174,28 +174,28 @@ public void beaneditcontext_pushed_to_environment()\n \n         BeanEditor component = new BeanEditor();\n \n-        component.inject(resources, overrides, source,env);\n+        component.inject(resources, overrides, source, env);\n \n         component.doPrepare();\n \n         verify();\n     }\n-    \n+\n     @Test\n-    public void beaneditcontext_popped_from_environment() \n+    public void beaneditcontext_popped_from_environment()\n     {\n         ComponentResources resources = mockComponentResources();\n         BeanModelSource source = mockBeanModelSource();\n         Environment env = mockEnvironment();\n         PropertyOverrides overrides = mockPropertyOverrides();\n \n         expect(env.pop(BeanEditContext.class)).andReturn(null);\n-        \n+\n         replay();\n \n         BeanEditor component = new BeanEditor();\n \n-        component.inject(resources, overrides, source,env);\n+        component.inject(resources, overrides, source, env);\n \n         component.cleanupEnvironment();\n ",
                "additions": 16,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/test/java/org/apache/tapestry5/corelib/components/BeanEditorTest.java",
                "status": "modified",
                "changes": 32,
                "deletions": 16,
                "sha": "ac597b92a477e79aa8d382a6467b0768c5e7e3c9",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/test/java/org/apache/tapestry5/corelib/components/BeanEditorTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/corelib/components/BeanEditorTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/corelib/components/BeanEditorTest.java?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            },
            {
                "patch": "@@ -1165,8 +1165,10 @@ public void grid_inside_form_with_encoder()\n \n         // The first input field is the form's hidden field.\n \n-        assertFieldValue(\"title\", \"ToDo # 6\");\n-        assertFieldValueSeries(\"title_%d\", 0, \"ToDo # 7\", \"ToDo # 8\", \"ToDo # 9\", \"ToDo # 10\");\n+        // Note the difference: same data sorted differently (there's a default sort).\n+\n+        assertFieldValue(\"title\", \"ToDo # 14\");\n+        assertFieldValueSeries(\"title_%d\", 0, \"ToDo # 15\", \"ToDo # 16\", \"ToDo # 17\", \"ToDo # 18\");\n \n         type(\"title_0\", \"Cure Cancer\");\n         select(\"urgency_0\", \"Top Priority\");\n@@ -1176,8 +1178,15 @@ public void grid_inside_form_with_encoder()\n \n         clickAndWait(SUBMIT);\n \n-        assertFieldValueSeries(\"title_%d\", 0, \"Cure Cancer\", \"Pay Phone Bill\");\n-        assertFieldValueSeries(\"urgency_%d\", 0, \"HIGH\", \"LOW\");\n+        // Because of the sort, the updated items shift to page #1\n+\n+        clickAndWait(\"link=1\");\n+\n+        assertFieldValue(\"title\", \"Cure Cancer\");\n+        assertFieldValue(\"title_0\", \"Pay Phone Bill\");\n+\n+        assertFieldValue(\"urgency\", \"HIGH\");\n+        assertFieldValue(\"urgency_0\", \"LOW\");\n     }\n \n     @Test",
                "additions": 13,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java",
                "status": "modified",
                "changes": 17,
                "deletions": 4,
                "sha": "dbdffe5ffa1a6b9bcfb5aa3e3f97207138542872",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2007 The Apache Software Foundation\n+// Copyright 2007, 2008 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -29,11 +29,6 @@\n \n     private List<ToDoItem> items;\n \n-    void onPrepare()\n-    {\n-        items = database.findAll();\n-    }\n-\n     void onSuccess()\n     {\n         // Here's the down side: we don't have a good way of identifying just what changed.\n@@ -46,6 +41,9 @@ void onSuccess()\n \n     public List<ToDoItem> getItems()\n     {\n+        if (items == null)\n+            items = database.findAll();\n+\n         return items;\n     }\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/GridFormDemo.java",
                "status": "modified",
                "changes": 10,
                "deletions": 6,
                "sha": "de49f9743f850c8ff4decd985bb9905f50b02adb",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/GridFormDemo.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/GridFormDemo.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/GridFormDemo.java?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            },
            {
                "patch": "@@ -1,11 +1,36 @@\n+//  Copyright 2008 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n package org.apache.tapestry5.integration.app1.pages;\n \n import org.apache.tapestry5.PrimaryKeyEncoder;\n+import org.apache.tapestry5.annotations.InjectComponent;\n+import org.apache.tapestry5.corelib.components.Grid;\n import org.apache.tapestry5.integration.app1.data.ToDoItem;\n import org.apache.tapestry5.util.DefaultPrimaryKeyEncoder;\n \n public class GridFormEncoderDemo extends GridFormDemo\n {\n+    @InjectComponent\n+    private Grid grid;\n+\n+    void setupRender()\n+    {\n+        if (grid.getSortModel().getSortConstraints().isEmpty())\n+            grid.getSortModel().updateSort(\"title\");\n+    }\n+\n     public PrimaryKeyEncoder<Long, ToDoItem> getEncoder()\n     {\n         DefaultPrimaryKeyEncoder<Long, ToDoItem> result = new DefaultPrimaryKeyEncoder<Long, ToDoItem>();",
                "additions": 25,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/GridFormEncoderDemo.java",
                "status": "modified",
                "changes": 25,
                "deletions": 0,
                "sha": "90b5768cb93e29c1cc2b719005852477780003e6",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/GridFormEncoderDemo.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/GridFormEncoderDemo.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/GridFormEncoderDemo.java?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            },
            {
                "patch": "@@ -23,5 +23,5 @@ log4j.appender.A1.layout.ConversionPattern=[%p] %c{1} %m%n\n \n log4j.category.org.apache.tapestry5.integration.app2=debug\n \n-log4j.category.org.apache.tapestry5.corelib.components.Form=debug\n+# log4j.category.org.apache.tapestry5.corelib.components=debug\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/test/resources/log4j.properties",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "55910cfffebbf3e443d9d9d631a1d7f4a29df0a9",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-core/src/test/resources/log4j.properties",
                "filename": "tapestry-core/src/test/resources/log4j.properties",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/resources/log4j.properties?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            },
            {
                "patch": "@@ -192,7 +192,16 @@ protected final void assertTextPresent(String... text)\n \n     protected final void assertFieldValue(String locator, String expected)\n     {\n-        assertEquals(getValue(locator), expected);\n+        try\n+        {\n+            assertEquals(getValue(locator), expected);\n+        }\n+        catch (AssertionError ex)\n+        {\n+            System.err.printf(\"%s:\\n%s\\n\\n\", ex.getMessage(), selenium.getHtmlSource());\n+\n+            throw ex;\n+        }\n     }\n \n     protected final void clickAndWait(String link)\n@@ -940,5 +949,4 @@ protected final void start(String... linkText)\n         for (String s : linkText)\n             clickAndWait(String.format(\"link=%s\", s));\n     }\n-\n }",
                "additions": 10,
                "raw_url": "https://github.com/apache/tapestry-5/raw/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java",
                "status": "modified",
                "changes": 12,
                "deletions": 2,
                "sha": "b780c430b2d427539423614a38b6627ce31f538c",
                "blob_url": "https://github.com/apache/tapestry-5/blob/629095afaeb23e9032fe074194e48d4a908cb81c/tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java",
                "filename": "tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java?ref=629095afaeb23e9032fe074194e48d4a908cb81c"
            }
        ],
        "bug_id": "tapestry-5_22",
        "parent": "https://github.com/apache/tapestry-5/commit/53a64ac85bb037e849e6628dcbf09f78058047af",
        "message": "TAP5-135: Attempting to set a default sort constraint on the Grid will cause an NullPointerException inside Grid.getSortConstraints()\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@709321 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/ffd8e45c1ed242baa9aa8d9dd54f0478387ab9b6",
        "file": [
            {
                "patch": "@@ -172,7 +172,7 @@\n     private boolean lean;\n \n     /**\n-     * If true and the Loop is enclosed by a Form, then the normal state persisting logic is turned off. Defaults to\n+     * If true and the Grid is enclosed by a Form, then the normal state persisting logic is turned off. Defaults to\n      * false, enabling state persisting within Forms. If a Grid is present for some reason within a Form, but does not\n      * contain any form control components (such as {@link TextField}), then binding volatile to false will reduce the\n      * amount of client-side state that must be persisted.\n@@ -389,8 +389,6 @@ GridSortModel defaultSortModel()\n \n     Binding defaultModel()\n     {\n-        final ComponentResources containerResources = resources.getContainerResources();\n-\n         return new AbstractBinding()\n         {\n \n@@ -440,17 +438,17 @@ public String toString()\n \n     Object setupRender()\n     {\n-        if (!volatileState && formSupport != null) formSupport.store(this, SETUP_DATA_SOURCE);\n+        if (formSupport != null) formSupport.store(this, SETUP_DATA_SOURCE);\n \n         setupDataSource();\n \n+        // If there's no rows, display the empty block placeholder.\n+\n         return cachingSource.getAvailableRows() == 0 ? empty : null;\n     }\n \n     void setupDataSource()\n     {\n-        // If there's no rows, display the empty block placeholder.\n-\n         cachingSource = new CachingDataSource();\n \n         int availableRows = cachingSource.getAvailableRows();",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/ffd8e45c1ed242baa9aa8d9dd54f0478387ab9b6/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java",
                "status": "modified",
                "changes": 10,
                "deletions": 6,
                "sha": "3f043be3c90246d3ee91ee28ee68d5c63d2d0967",
                "blob_url": "https://github.com/apache/tapestry-5/blob/ffd8e45c1ed242baa9aa8d9dd54f0478387ab9b6/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Grid.java?ref=ffd8e45c1ed242baa9aa8d9dd54f0478387ab9b6"
            }
        ],
        "bug_id": "tapestry-5_23",
        "parent": "https://github.com/apache/tapestry-5/commit/64c086c424dd66be75b6e15766c8b7bc4f81a1be",
        "message": "TAPESTRY-2668: Setting volatile to true on Grid component in form results in NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@695034 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/f50d522be76aa96e22c8327b18f4c9060b615d1a",
        "file": [
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2007 The Apache Software Foundation\n+// Copyright 2007, 2008 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -16,12 +16,13 @@\n \n import org.apache.tapestry.PropertyConduit;\n import org.apache.tapestry.ioc.AnnotationProvider;\n-import org.apache.tapestry.services.PropertyConduitSource;\n+import org.apache.tapestry.ioc.internal.util.Defense;\n \n import java.lang.annotation.Annotation;\n \n /**\n- * Base class for {@link PropertyConduit} instances created by the {@link PropertyConduitSource}.\n+ * Base class for {@link org.apache.tapestry.PropertyConduit} instances created by the {@link\n+ * org.apache.tapestry.services.PropertyConduitSource}.\n  */\n public abstract class BasePropertyConduit implements PropertyConduit\n {\n@@ -31,9 +32,12 @@\n \n     private final String _description;\n \n-    public BasePropertyConduit(final Class propertyType,\n-                               final AnnotationProvider annotationProvider, final String description)\n+    public BasePropertyConduit(Class propertyType, AnnotationProvider annotationProvider, String description)\n     {\n+        Defense.notNull(propertyType, \"propertyType\");\n+        Defense.notNull(annotationProvider, \"annotationProvider\");\n+        Defense.notBlank(description, \"description\");\n+\n         _propertyType = propertyType;\n         _annotationProvider = annotationProvider;\n         _description = description;",
                "additions": 9,
                "raw_url": "https://github.com/apache/tapestry-5/raw/f50d522be76aa96e22c8327b18f4c9060b615d1a/tapestry-core/src/main/java/org/apache/tapestry/internal/services/BasePropertyConduit.java",
                "status": "modified",
                "changes": 14,
                "deletions": 5,
                "sha": "e453e926154c1c3173a5cc9457341613caf9d83a",
                "blob_url": "https://github.com/apache/tapestry-5/blob/f50d522be76aa96e22c8327b18f4c9060b615d1a/tapestry-core/src/main/java/org/apache/tapestry/internal/services/BasePropertyConduit.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/services/BasePropertyConduit.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/services/BasePropertyConduit.java?ref=f50d522be76aa96e22c8327b18f4c9060b615d1a"
            },
            {
                "patch": "@@ -253,6 +253,10 @@ private PropertyNavigationResult writePropertyNavigationCode(BodyBuilder builder\n         builder.addln(\"%s root = (%<s) $1;\", ClassFabUtils.toJavaClassName(rootClass));\n         String previousStep = \"root\";\n \n+        builder.addln(\n+                \"if (root == null) throw new NullPointerException(\\\"Root object of property expression '%s' is null.\\\");\",\n+                expression);\n+\n         Class activeType = rootClass;\n         ReadInfo readInfo = null;\n \n@@ -312,6 +316,15 @@ else if (readInfo.isCastRequired())\n \n                 builder.addln(\";\");\n             }\n+            else\n+            {\n+                // Perform a null check on intermediate terms.\n+                if (i < lastIndex - 1)\n+                {\n+                    builder.addln(\"if (%s == null) throw new NullPointerException(%s.nullTerm(\\\"%s\\\", \\\"%s\\\", root));\",\n+                                  thisStep, getClass().getName(), term, expression);\n+                }\n+            }\n \n             activeType = wrappedType;\n             previousStep = thisStep;\n@@ -491,4 +504,10 @@ private Method findMethod(Class activeType, String methodName) throws NoSuchMeth\n \n         throw new NoSuchMethodException(ServicesMessages.noSuchMethod(activeType, methodName));\n     }\n+\n+    public static String nullTerm(String term, String expression, Object root)\n+    {\n+        return String.format(\"Property '%s' (within property expression '%s', of %s) is null.\",\n+                             term, expression, root);\n+    }\n }",
                "additions": 19,
                "raw_url": "https://github.com/apache/tapestry-5/raw/f50d522be76aa96e22c8327b18f4c9060b615d1a/tapestry-core/src/main/java/org/apache/tapestry/internal/services/PropertyConduitSourceImpl.java",
                "status": "modified",
                "changes": 19,
                "deletions": 0,
                "sha": "7450382db9bf3769b57b86d2f72a67a48d5e58bc",
                "blob_url": "https://github.com/apache/tapestry-5/blob/f50d522be76aa96e22c8327b18f4c9060b615d1a/tapestry-core/src/main/java/org/apache/tapestry/internal/services/PropertyConduitSourceImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/internal/services/PropertyConduitSourceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/internal/services/PropertyConduitSourceImpl.java?ref=f50d522be76aa96e22c8327b18f4c9060b615d1a"
            },
            {
                "patch": "@@ -142,4 +142,52 @@ public void generics()\n         assertSame(conduit.getPropertyType(), String.class);\n     }\n \n+    @Test\n+    public void null_root_object()\n+    {\n+        PropertyConduit conduit = _source.create(StringHolderBean.class, \"value.get()\");\n+\n+        try\n+        {\n+            conduit.get(null);\n+            unreachable();\n+        }\n+        catch (NullPointerException ex)\n+        {\n+            assertEquals(ex.getMessage(), \"Root object of property expression 'value.get()' is null.\");\n+        }\n+    }\n+\n+    @Test\n+    public void null_property_in_chain()\n+    {\n+        PropertyConduit conduit = _source.create(CompositeBean.class, \"simple.lastName\");\n+\n+        CompositeBean bean = new CompositeBean();\n+        bean.setSimple(null);\n+\n+        try\n+        {\n+            conduit.get(bean);\n+            unreachable();\n+        }\n+        catch (NullPointerException ex)\n+        {\n+            assertMessageContains(ex, \"Property 'simple' (within property expression 'simple.lastName', of\",\n+                                  \") is null.\");\n+        }\n+    }\n+\n+    @Test\n+    public void last_term_may_be_null()\n+    {\n+        PropertyConduit conduit = _source.create(CompositeBean.class, \"simple.firstName\");\n+\n+        CompositeBean bean = new CompositeBean();\n+\n+        bean.getSimple().setFirstName(null);\n+\n+        assertNull(conduit.get(bean));\n+    }\n+\n }",
                "additions": 48,
                "raw_url": "https://github.com/apache/tapestry-5/raw/f50d522be76aa96e22c8327b18f4c9060b615d1a/tapestry-core/src/test/java/org/apache/tapestry/internal/services/PropertyConduitSourceImplTest.java",
                "status": "modified",
                "changes": 48,
                "deletions": 0,
                "sha": "2ecb198c582e0982207280c779c7be3d86fadacf",
                "blob_url": "https://github.com/apache/tapestry-5/blob/f50d522be76aa96e22c8327b18f4c9060b615d1a/tapestry-core/src/test/java/org/apache/tapestry/internal/services/PropertyConduitSourceImplTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry/internal/services/PropertyConduitSourceImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry/internal/services/PropertyConduitSourceImplTest.java?ref=f50d522be76aa96e22c8327b18f4c9060b615d1a"
            }
        ],
        "bug_id": "tapestry-5_24",
        "parent": "https://github.com/apache/tapestry-5/commit/4f398ccc0f889627305dfb534d420b43a1e8af84",
        "message": "TAPESTRY-2401: NullPointerExceptions inside component bindings need to do a better job of explaining what was null\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@652415 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/3ede4708daef4ab2811b471cc24b52a883fdebbe",
        "file": [
            {
                "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2006, 2007 The Apache Software Foundation\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//     http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n-package org.apache.tapestry.ioc.services;\n-\n-/**\n- * Event hub used to identify when the end of thread cleanup (i.e., end of request cleanup in a\n- * typical web application) should occur. Tapestry IoC has any number of objects that need to know\n- * when this event occurs, so that they can clean up any per-thread/per-request state.\n- */\n-public interface ThreadCleanupHub\n-{\n-    /**\n-     * Adds a listener to the hub. The hub maintains a seperate list of listeners for each thread\n-     * (i.e., using a ThreadLocal). Further, the listener list is discarded at the end of the\n-     * request.\n-     *\n-     * @param listener to add\n-     */\n-    void addThreadCleanupListener(ThreadCleanupListener listener);\n-\n-    /**\n-     * Immediately performs a cleanup of the thread, notifying all listeners.\n-     */\n-    void cleanup();\n-}",
                "additions": 0,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/ThreadCleanupHub.java",
                "status": "removed",
                "changes": 37,
                "deletions": 37,
                "sha": "359437ffb00e033ebe2e04c3f6d672c10ebc785b",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/ThreadCleanupHub.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/ThreadCleanupHub.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/ThreadCleanupHub.java?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            }
        ],
        "bug_id": "tapestry-5_25",
        "parent": "https://github.com/apache/tapestry-5/commit/1e8bf820de4f77cc6621f6ed3aff2d06e1479026",
        "message": "TAPESTRY-2141: NullPointerExceptions under JDK 1.5 due to underlying ThreadLocal bug\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@620694 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/1e8bf820de4f77cc6621f6ed3aff2d06e1479026",
        "file": [
            {
                "patch": "@@ -694,7 +694,7 @@ private static void add(OrderedConfiguration<ComponentClassTransformWorker> conf\n \n     private final UpdateListenerHub _updateListenerHub;\n \n-    private final ThreadCleanupHub _threadCleanupHub;\n+    private final PerthreadManager _perthreadManager;\n \n     private final ChainBuilder _chainBuilder;\n \n@@ -730,7 +730,9 @@ public TapestryModule(PipelineBuilder pipelineBuilder,\n \n                           @ComponentLayer ClassFactory componentClassFactory,\n \n-                          UpdateListenerHub updateListenerHub, ThreadCleanupHub threadCleanupHub,\n+                          UpdateListenerHub updateListenerHub,\n+\n+                          PerthreadManager perthreadManager,\n \n                           ComponentTemplateSource componentTemplateSource,\n \n@@ -755,7 +757,7 @@ public TapestryModule(PipelineBuilder pipelineBuilder,\n         _componentClassFactory = componentClassFactory;\n \n         _updateListenerHub = updateListenerHub;\n-        _threadCleanupHub = threadCleanupHub;\n+        _perthreadManager = perthreadManager;\n         _componentTemplateSource = componentTemplateSource;\n         _request = request;\n         _response = response;\n@@ -1772,7 +1774,7 @@ public RequestPageCache build(PagePool pagePool)\n     {\n         RequestPageCacheImpl service = new RequestPageCacheImpl(pagePool);\n \n-        _threadCleanupHub.addThreadCleanupListener(service);\n+        _perthreadManager.addThreadCleanupListener(service);\n \n         return service;\n     }",
                "additions": 6,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-core/src/main/java/org/apache/tapestry/services/TapestryModule.java",
                "status": "modified",
                "changes": 10,
                "deletions": 4,
                "sha": "3bdd220e53ce86ff75a568ebc779de5e465f7ca7",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-core/src/main/java/org/apache/tapestry/services/TapestryModule.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/services/TapestryModule.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/services/TapestryModule.java?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            },
            {
                "patch": "@@ -27,8 +27,8 @@\n import org.apache.tapestry.ioc.annotations.InjectService;\n import org.apache.tapestry.ioc.annotations.Scope;\n import org.apache.tapestry.ioc.annotations.Symbol;\n+import org.apache.tapestry.ioc.services.PerthreadManager;\n import org.apache.tapestry.ioc.services.PropertyShadowBuilder;\n-import org.apache.tapestry.ioc.services.ThreadCleanupHub;\n import org.apache.tapestry.services.AliasContribution;\n import org.hibernate.Session;\n import org.hibernate.Transaction;\n@@ -69,11 +69,11 @@ public static void contributeHibernateEntityPackageManager(Configuration<String>\n      * initially, and is committed at the end of the request.\n      */\n     @Scope(PERTHREAD_SCOPE)\n-    public static HibernateSessionManager build(HibernateSessionSource sessionSource, ThreadCleanupHub threadCleanupHub)\n+    public static HibernateSessionManager build(HibernateSessionSource sessionSource, PerthreadManager perthreadManager)\n     {\n         HibernateSessionManagerImpl service = new HibernateSessionManagerImpl(sessionSource);\n \n-        threadCleanupHub.addThreadCleanupListener(service);\n+        perthreadManager.addThreadCleanupListener(service);\n \n         return service;\n     }",
                "additions": 3,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-hibernate/src/main/java/org/apache/tapestry/hibernate/HibernateModule.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "c3ecf986e296222d3a927e04b4540cce1403ee39",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-hibernate/src/main/java/org/apache/tapestry/hibernate/HibernateModule.java",
                "filename": "tapestry-hibernate/src/main/java/org/apache/tapestry/hibernate/HibernateModule.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-hibernate/src/main/java/org/apache/tapestry/hibernate/HibernateModule.java?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            },
            {
                "patch": "@@ -1,17 +1,17 @@\n-// Copyright 2006 The Apache Software Foundation\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//     http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n+// Copyright 2006, 2008 The Apache Software Foundation\r\n+//\r\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+// you may not use this file except in compliance with the License.\r\n+// You may obtain a copy of the License at\r\n+//\r\n+//     http://www.apache.org/licenses/LICENSE-2.0\r\n+//\r\n+// Unless required by applicable law or agreed to in writing, software\r\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+// See the License for the specific language governing permissions and\r\n+// limitations under the License.\r\n+\r\n package org.apache.tapestry.ioc;\r\n \r\n /**\r\n@@ -21,7 +21,8 @@\n public interface ObjectCreator\r\n {\r\n     /**\r\n-     * Create and return the object.\r\n+     * Create and return the object.  In some limited circumstances, the implementation may cache\r\n+     * the result, returning the same object for repeated calls.\r\n      */\r\n     Object createObject();\r\n }\r",
                "additions": 16,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/ObjectCreator.java",
                "status": "modified",
                "changes": 31,
                "deletions": 15,
                "sha": "a5e7dc17c82059f76558cebf719e7ba95674f1a8",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/ObjectCreator.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/ObjectCreator.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/ObjectCreator.java?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007 The Apache Software Foundation\n+// Copyright 2006, 2007, 2008 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -25,7 +25,7 @@\n      * Invoked at the end of a request to discard any thread-specific information accumulated during\n      * the current request.\n      *\n-     * @see org.apache.tapestry.ioc.services.ThreadCleanupHub\n+     * @see org.apache.tapestry.ioc.services.PerthreadManager\n      * @see org.apache.tapestry.ioc.services.ThreadCleanupListener\n      */\n     void cleanupThread();",
                "additions": 2,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/Registry.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "2ecc7a16573dcaab8fcc485ca7603a92f386f194",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/Registry.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/Registry.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/Registry.java?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007 The Apache Software Foundation\n+// Copyright 2006, 2007, 2008 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -19,8 +19,8 @@\n import org.apache.tapestry.ioc.def.DecoratorDef;\n import org.apache.tapestry.ioc.def.ModuleDef;\n import org.apache.tapestry.ioc.def.ServiceDef;\n+import org.apache.tapestry.ioc.internal.services.PerthreadManagerImpl;\n import org.apache.tapestry.ioc.internal.services.RegistryShutdownHubImpl;\n-import org.apache.tapestry.ioc.internal.services.ThreadCleanupHubImpl;\n import org.apache.tapestry.ioc.internal.util.CollectionFactory;\n import static org.apache.tapestry.ioc.internal.util.CollectionFactory.*;\n import static org.apache.tapestry.ioc.internal.util.Defense.notNull;\n@@ -40,7 +40,7 @@\n \n     private static final String REGISTRY_SHUTDOWN_HUB_SERVICE_ID = \"RegistryShutdownHub\";\n \n-    static final String THREAD_CLEANUP_HUB_SERVICE_ID = \"ThreadCleanupHub\";\n+    static final String PERTHREAD_MANAGER_SERVICE_ID = \"PerthreadManager\";\n \n     private static final String SERVICE_ACTIVITY_SCOREBOARD_SERVICE_ID = \"ServiceActivityScoreboard\";\n \n@@ -81,7 +81,7 @@\n \n     private final Map<String, ServiceLifecycle> _lifecycles = newCaseInsensitiveMap();\n \n-    private final ThreadCleanupHubImpl _cleanupHub;\n+    private final PerthreadManager _perthreadManager;\n \n     private final ClassFactory _classFactory;\n \n@@ -135,11 +135,11 @@ public RegistryImpl(Collection<ModuleDef> moduleDefs, ClassFactory classFactory,\n \n         addBuiltin(CLASS_FACTORY_SERVICE_ID, ClassFactory.class, _classFactory);\n \n-        Logger logger = loggerForBuiltinService(THREAD_CLEANUP_HUB_SERVICE_ID);\n+        Logger logger = loggerForBuiltinService(PERTHREAD_MANAGER_SERVICE_ID);\n \n-        _cleanupHub = new ThreadCleanupHubImpl(logger);\n+        _perthreadManager = new PerthreadManagerImpl(logger);\n \n-        addBuiltin(THREAD_CLEANUP_HUB_SERVICE_ID, ThreadCleanupHub.class, _cleanupHub);\n+        addBuiltin(PERTHREAD_MANAGER_SERVICE_ID, PerthreadManager.class, _perthreadManager);\n \n         logger = loggerForBuiltinService(REGISTRY_SHUTDOWN_HUB_SERVICE_ID);\n \n@@ -314,7 +314,7 @@ public void cleanupThread()\n     {\n         _lock.check();\n \n-        _cleanupHub.cleanup();\n+        _perthreadManager.cleanup();\n     }\n \n     private Module locateModuleForService(String serviceId)",
                "additions": 8,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/RegistryImpl.java",
                "status": "modified",
                "changes": 16,
                "deletions": 8,
                "sha": "a18646799834e527283ac6311b4629cb2fefe345",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/RegistryImpl.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/RegistryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/RegistryImpl.java?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            },
            {
                "patch": "@@ -18,44 +18,42 @@\n package org.apache.tapestry.ioc.internal.services;\r\n \r\n import org.apache.tapestry.ioc.ObjectCreator;\r\n-import org.apache.tapestry.ioc.services.ThreadCleanupHub;\r\n-import org.apache.tapestry.ioc.services.ThreadCleanupListener;\r\n+import org.apache.tapestry.ioc.services.PerthreadManager;\r\n \r\n /**\r\n- * Provides per-thread implementations of services, along with end-of-request thread cleanup.\r\n+ * Provides per-thread implementations of services.\r\n  */\r\n-public class PerThreadServiceCreator extends ThreadLocal implements ThreadCleanupListener, ObjectCreator\r\n+public class PerThreadServiceCreator implements ObjectCreator\r\n {\r\n-    private final ThreadCleanupHub _threadCleanupHub;\r\n+    private final PerthreadManager _perthreadManager;\r\n \r\n     private final ObjectCreator _delegate;\r\n \r\n-    public PerThreadServiceCreator(ThreadCleanupHub threadCleanupHub, ObjectCreator delegate)\r\n+    public PerThreadServiceCreator(PerthreadManager perthreadManager, ObjectCreator delegate)\r\n     {\r\n-        _threadCleanupHub = threadCleanupHub;\r\n+        _perthreadManager = perthreadManager;\r\n         _delegate = delegate;\r\n     }\r\n \r\n-    @Override\r\n-    protected Object initialValue()\r\n+    /**\r\n+     * For each thread, the first call will use the delegate\r\n+     * {@link org.apache.tapestry.ioc.ObjectCreator} to create an instance,\r\n+     * and later calls will reuse the same per-thread instance. The instance\r\n+     * is stored in the {@link org.apache.tapestry.ioc.services.PerthreadManager} and will\r\n+     * be released at the end of the request.\r\n+     */\r\n+    public Object createObject()\r\n     {\r\n-        // First time the value is accessed per thread, set up a callback to clear out the\r\n-        // value (at the end of the request) and use the creator to create a new instance.\r\n+        // Use the ObjectCreator instance as the key.  it will be unique.\r\n \r\n-        _threadCleanupHub.addThreadCleanupListener(this);\r\n+        Object perthreadInstance = _perthreadManager.get(_delegate);\r\n \r\n-        return _delegate.createObject();\r\n-    }\r\n-\r\n-    public synchronized Object createObject()\r\n-    {\r\n-        // Get (or create) the service.\r\n-        return get();\r\n-    }\r\n+        if (perthreadInstance == null)\r\n+        {\r\n+            perthreadInstance = _delegate.createObject();\r\n+            _perthreadManager.put(_delegate, perthreadInstance);\r\n+        }\r\n \r\n-    public synchronized void threadDidCleanup()\r\n-    {\r\n-        remove();\r\n+        return perthreadInstance;\r\n     }\r\n-\r\n }\n\\ No newline at end of file",
                "additions": 22,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerThreadServiceCreator.java",
                "status": "modified",
                "changes": 46,
                "deletions": 24,
                "sha": "957707ee3c82677c18d444580373f4096c4ce707",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerThreadServiceCreator.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerThreadServiceCreator.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerThreadServiceCreator.java?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007 The Apache Software Foundation\n+// Copyright 2006, 2007, 2008 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -25,38 +25,38 @@\n import java.lang.reflect.Modifier;\n \n /**\n- * Allows a service to exist \"per thread\" (in each thread). This involves an inner proxy, with a\n- * ThreadLocal whose initial value is derived from a {@link org.apache.tapestry.ioc.ObjectCreator}.\n- * Method invocations are delegated to the per-thread service instance. The proxy also implements\n- * {@link org.apache.tapestry.ioc.services.ThreadCleanupListener} so that it can discard the\n- * per-thread implementation.\n+ * Allows a service to exist \"per thread\" (in each thread). This involves an inner proxy,\n+ * which caches an object\n+ * derived from a {@link org.apache.tapestry.ioc.ObjectCreator} as a key in the\n+ * {@link org.apache.tapestry.ioc.services.PerthreadManager}.\n+ * Method invocations are delegated to the per-thread service instance.\n  * <p/>\n  * This scheme ensures that, although the service builder method will be invoked many times over the\n  * life of the application, the service decoration process occurs only once. The final calling chain\n  * is: Service Proxy --&gt; Decorator(s) --&gt; PerThread Proxy --&gt; (per thread) instance.\n  */\n public class PerThreadServiceLifecycle implements ServiceLifecycle\n {\n-    private final ThreadCleanupHub _threadCleanupHub;\n+    private final PerthreadManager _perthreadManager;\n \n     private final ClassFactory _classFactory;\n \n     private static final String PER_THREAD_METHOD_NAME = \"_perThreadInstance\";\n \n-    public PerThreadServiceLifecycle(ThreadCleanupHub threadCleanupHub,\n+    public PerThreadServiceLifecycle(PerthreadManager perthreadManager,\n \n                                      @Builtin\n                                      ClassFactory classFactory)\n     {\n-        _threadCleanupHub = threadCleanupHub;\n+        _perthreadManager = perthreadManager;\n         _classFactory = classFactory;\n     }\n \n-    public Object createService(ServiceResources resources, final ObjectCreator creator)\n+    public Object createService(ServiceResources resources, ObjectCreator creator)\n     {\n         Class proxyClass = createProxyClass(resources);\n \n-        ObjectCreator perThreadCreator = new PerThreadServiceCreator(_threadCleanupHub, creator);\n+        ObjectCreator perThreadCreator = new PerThreadServiceCreator(_perthreadManager, creator);\n \n         try\n         {",
                "additions": 11,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerThreadServiceLifecycle.java",
                "status": "modified",
                "changes": 22,
                "deletions": 11,
                "sha": "ba3e29728101cce01782e604f8c10ac1b3dc02d1",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerThreadServiceLifecycle.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerThreadServiceLifecycle.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerThreadServiceLifecycle.java?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            },
            {
                "patch": "@@ -14,58 +14,70 @@\n \n package org.apache.tapestry.ioc.internal.services;\n \n-import static org.apache.tapestry.ioc.internal.util.CollectionFactory.newList;\n-import org.apache.tapestry.ioc.services.ThreadCleanupHub;\n+import org.apache.tapestry.ioc.internal.util.CollectionFactory;\n+import org.apache.tapestry.ioc.services.PerthreadManager;\n import org.apache.tapestry.ioc.services.ThreadCleanupListener;\n import org.slf4j.Logger;\n \n import java.util.List;\n+import java.util.Map;\n \n-public class ThreadCleanupHubImpl implements ThreadCleanupHub\n+public class PerthreadManagerImpl implements PerthreadManager\n {\n-    private static class ListHolder extends ThreadLocal<List<ThreadCleanupListener>>\n+    private static final String LISTENERS_KEY = \"PerthreadManager.listenerList\";\n+\n+    private static class MapHolder extends ThreadLocal<Map>\n     {\n         @Override\n-        protected List<ThreadCleanupListener> initialValue()\n+        protected Map initialValue()\n         {\n-            return newList();\n+            return CollectionFactory.newMap();\n         }\n     }\n \n     private final Logger _logger;\n \n-    private final ListHolder _holder = new ListHolder();\n+    private final MapHolder _holder = new MapHolder();\n \n-    public ThreadCleanupHubImpl(Logger logger)\n+    public PerthreadManagerImpl(Logger logger)\n     {\n         _logger = logger;\n     }\n \n-    private synchronized List<ThreadCleanupListener> get()\n+\n+    private synchronized Map getPerthreadMap()\n     {\n         return _holder.get();\n     }\n \n-    private synchronized List<ThreadCleanupListener> getAndRemove()\n+\n+    private List<ThreadCleanupListener> getListeners()\n     {\n-        List<ThreadCleanupListener> result = _holder.get();\n+        List<ThreadCleanupListener> result = (List<ThreadCleanupListener>) get(LISTENERS_KEY);\n \n-        _holder.remove();\n+        if (result == null)\n+        {\n+            result = CollectionFactory.newList();\n+            put(LISTENERS_KEY, result);\n+        }\n \n         return result;\n     }\n \n+\n     public void addThreadCleanupListener(ThreadCleanupListener listener)\n     {\n-        get().add(listener);\n+        getListeners().add(listener);\n     }\n \n     /**\n      * Instructs the hub to notify all its listeners (for the current thread). It also discards its list of listeners.\n      */\n     public void cleanup()\n     {\n-        List<ThreadCleanupListener> listeners = getAndRemove();\n+        List<ThreadCleanupListener> listeners = getListeners();\n+\n+        put(LISTENERS_KEY, null);\n \n         for (ThreadCleanupListener listener : listeners)\n         {\n@@ -79,6 +91,22 @@ public void cleanup()\n             }\n         }\n \n+        // Listeners should not re-add themselves or store any per-thread state here,\n+        // it will be lost.\n+\n+        synchronized (this)\n+        {\n+            _holder.remove();\n+        }\n     }\n \n+    public void put(Object key, Object value)\n+    {\n+        getPerthreadMap().put(key, value);\n+    }\n+\n+    public Object get(Object key)\n+    {\n+        return getPerthreadMap().get(key);\n+    }\n }",
                "additions": 42,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerthreadManagerImpl.java",
                "previous_filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/ThreadCleanupHubImpl.java",
                "status": "renamed",
                "changes": 56,
                "deletions": 14,
                "sha": "53027b6c7d46d45b0356a662503acc5c78dda4c5",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerthreadManagerImpl.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerthreadManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/internal/services/PerthreadManagerImpl.java?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            },
            {
                "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2006, 2007, 2008 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry.ioc.services;\n+\n+/**\n+ * Manages per-thread data, and provides a way for listeners to know when such data should be cleaned up.  Typically,\n+ * data is cleaned up at the end of the request (in a web application).\n+ * Tapestry IoC has any number of objects that need to know\n+ * when this event occurs, so that they can clean up any per-thread/per-request state.\n+ * <p/>\n+ * Due to <a href=\"https://issues.apache.org/jira/browse/TAPESTRY-2141\">TAPESTRY-2141<a> (and\n+ * the underlying JDK 1.5 bug <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5025230\">5025230</a>),\n+ * this service has expanded to manager per-thread data (not just end-of-request listeners).\n+ */\n+public interface PerthreadManager\n+{\n+    /**\n+     * Adds a listener to the hub.  All listeners are discarded at the\n+     * {@link #cleanup()}.\n+     *\n+     * @param listener to add\n+     */\n+    void addThreadCleanupListener(ThreadCleanupListener listener);\n+\n+    /**\n+     * Immediately performs a cleanup of the thread, notifying all listeners then\n+     * discarding the thread locale and the map it stores.\n+     */\n+    void cleanup();\n+\n+\n+    /**\n+     * Returns an object stored in the per-thread map.    When the object is a string,\n+     * the expected name is <em>service id</em>.<em>subkey</em>.  Unlike most of Tapestry,\n+     * such keys <em>will</em> be case sensitive.\n+     *\n+     * @param key key used to retrieve object\n+     * @return corresponding per-thread object, or null\n+     */\n+    Object get(Object key);\n+\n+    /**\n+     * Stores a value into the per-thread map.\n+     */\n+    void put(Object key, Object value);\n+}",
                "additions": 58,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/PerthreadManager.java",
                "status": "added",
                "changes": 58,
                "deletions": 0,
                "sha": "6978fe0bac35f5c6453bec9cf3e9624dbe0628cf",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/PerthreadManager.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/PerthreadManager.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/PerthreadManager.java?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            },
            {
                "patch": "@@ -1,33 +1,31 @@\n-// Copyright 2006 The Apache Software Foundation\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//     http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n+// Copyright 2006, 2008 The Apache Software Foundation\r\n+//\r\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+// you may not use this file except in compliance with the License.\r\n+// You may obtain a copy of the License at\r\n+//\r\n+//     http://www.apache.org/licenses/LICENSE-2.0\r\n+//\r\n+// Unless required by applicable law or agreed to in writing, software\r\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+// See the License for the specific language governing permissions and\r\n+// limitations under the License.\r\n+\r\n package org.apache.tapestry.ioc.services;\r\n \r\n import java.util.EventListener;\r\n \r\n /**\r\n  * Listener interface for object that need to know about thread event cleanup.\r\n  * <p/>\r\n- * Note that registration with the {@link org.apache.tapestry.ioc.services.ThreadCleanupHub} is a\r\n+ * Note that registration with the {@link org.apache.tapestry.ioc.services.PerthreadManager} is a\r\n  * one-shot affair; it lasts no longer than the next cleanup.\r\n- *\r\n- * @see org.apache.tapestry.ioc.services.ThreadCleanupHub\r\n  */\r\n public interface ThreadCleanupListener extends EventListener\r\n {\r\n     /**\r\n-     * Invoked by {@link org.apache.tapestry.ioc.services.ThreadCleanupHub} service when a thread\r\n+     * Invoked by {@link org.apache.tapestry.ioc.services.PerthreadManager} service when a thread\r\n      * performs and end-of-request cleanup.\r\n      */\r\n     void threadDidCleanup();\r",
                "additions": 16,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/ThreadCleanupListener.java",
                "status": "modified",
                "changes": 34,
                "deletions": 18,
                "sha": "788e2f4e06a42db88b30436e63a8b691d45c317c",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/ThreadCleanupListener.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/ThreadCleanupListener.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/ThreadCleanupListener.java?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            },
            {
                "patch": "@@ -582,7 +582,7 @@ Builtin Services\n *---------------------+-----------------------------------------------------------------------------------------+\r\n | RegistryShutdownHub | {{{../apidocs/org/apache/tapestry/ioc/RegistryShutdownHub.html}RegistryShutdownHub}}    |\r\n *---------------------+-----------------------------------------------------------------------------------------+\r\n-| ThreadCleanupHub    | {{{../apidocs/org/apache/tapestry/ioc/services/ThreadCleanupHub.html}ThreadCleanupHub}} |\r\n+| PerthreadManager    | {{{../apidocs/org/apache/tapestry/ioc/services/PerthreadManager.html}PerthreadManager}} |\r\n *---------------------+-----------------------------------------------------------------------------------------+\r\n \r\n   Consult the JavaDoc for each of these services to identify under what circumstances you'll need to use them.\r",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/site/apt/service.apt",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "5b36e8dca28227d87b7e0a750ba81c9198ee2eb4",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/site/apt/service.apt",
                "filename": "tapestry-ioc/src/site/apt/service.apt",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/site/apt/service.apt?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007 The Apache Software Foundation\n+// Copyright 2006, 2007, 2008 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -19,7 +19,7 @@\n import org.slf4j.Logger;\n import org.testng.annotations.Test;\n \n-public class ThreadCleanupHubImplTest extends IOCTestCase\n+public class PerthreadManagerImplTest extends IOCTestCase\n {\n     @Test\n     public void no_listeners()\n@@ -28,7 +28,7 @@ public void no_listeners()\n \n         replay();\n \n-        new ThreadCleanupHubImpl(logger).cleanup();\n+        new PerthreadManagerImpl(logger).cleanup();\n \n         verify();\n     }\n@@ -43,7 +43,7 @@ public void listeners_are_one_shot()\n \n         replay();\n \n-        ThreadCleanupHubImpl hub = new ThreadCleanupHubImpl(logger);\n+        PerthreadManagerImpl hub = new PerthreadManagerImpl(logger);\n \n         hub.addThreadCleanupListener(listener);\n \n@@ -88,7 +88,7 @@ public void threadDidCleanup()\n \n         replay();\n \n-        ThreadCleanupHubImpl hub = new ThreadCleanupHubImpl(logger);\n+        PerthreadManagerImpl hub = new PerthreadManagerImpl(logger);\n \n         hub.addThreadCleanupListener(listener);\n \n@@ -109,7 +109,7 @@ public void threadDidCleanup()\n     //\n     // replay();\n     //\n-    // final ThreadCleanupHub hub = new ThreadCleanupHubImpl(log);\n+    // final PerthreadManager hub = new PerthreadManagerImpl(log);\n     //\n     // hub.addThreadCleanupListener(l1);\n     //",
                "additions": 6,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/test/java/org/apache/tapestry/ioc/internal/services/PerthreadManagerImplTest.java",
                "previous_filename": "tapestry-ioc/src/test/java/org/apache/tapestry/ioc/internal/services/ThreadCleanupHubImplTest.java",
                "status": "renamed",
                "changes": 12,
                "deletions": 6,
                "sha": "29223dcf7e99f7d7a3c053624812babbecaf2088",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/test/java/org/apache/tapestry/ioc/internal/services/PerthreadManagerImplTest.java",
                "filename": "tapestry-ioc/src/test/java/org/apache/tapestry/ioc/internal/services/PerthreadManagerImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/test/java/org/apache/tapestry/ioc/internal/services/PerthreadManagerImplTest.java?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2007 The Apache Software Foundation\n+// Copyright 2007, 2008 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -128,7 +128,7 @@ public void integration()\n \n         assertTrue(StartupModule._startupInvoked);\n \n-        // Ideally we'd have a way to show that the ThreadCleanupHub was notified after\n+        // Ideally we'd have a way to show that the PerthreadManager was notified after\n         // RegistryStartup did its thing, but ...\n \n         r.shutdown();",
                "additions": 2,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/test/java/org/apache/tapestry/ioc/internal/services/RegistryStartupTest.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "071140b20a2805e77dd2efda53eca0edfc599248",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-ioc/src/test/java/org/apache/tapestry/ioc/internal/services/RegistryStartupTest.java",
                "filename": "tapestry-ioc/src/test/java/org/apache/tapestry/ioc/internal/services/RegistryStartupTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/test/java/org/apache/tapestry/ioc/internal/services/RegistryStartupTest.java?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            },
            {
                "patch": "@@ -18,9 +18,9 @@\n import org.apache.commons.io.FileCleaner;\r\n import org.apache.tapestry.ioc.*;\r\n import org.apache.tapestry.ioc.annotations.Scope;\r\n+import org.apache.tapestry.ioc.services.PerthreadManager;\r\n import org.apache.tapestry.ioc.services.RegistryShutdownHub;\r\n import org.apache.tapestry.ioc.services.RegistryShutdownListener;\r\n-import org.apache.tapestry.ioc.services.ThreadCleanupHub;\r\n import org.apache.tapestry.services.HttpServletRequestFilter;\r\n import org.apache.tapestry.services.LibraryMapping;\r\n import org.apache.tapestry.upload.internal.services.MultipartDecoderImpl;\r\n@@ -40,7 +40,7 @@ public static void contributeComponentClassResolver(Configuration<LibraryMapping\n     }\r\n \r\n     @Scope(IOCConstants.PERTHREAD_SCOPE)\r\n-    public synchronized static MultipartDecoder buildMultipartDecoder(ThreadCleanupHub threadCleanupHub,\r\n+    public synchronized static MultipartDecoder buildMultipartDecoder(PerthreadManager perthreadManager,\r\n \r\n                                                                       RegistryShutdownHub shutdownHub,\r\n \r\n@@ -50,7 +50,7 @@ public synchronized static MultipartDecoder buildMultipartDecoder(ThreadCleanupH\n \r\n         // This is proabably overkill since the FileCleaner should catch temporary files, but lets\r\n         // be safe.\r\n-        threadCleanupHub.addThreadCleanupListener(multipartDecoder);\r\n+        perthreadManager.addThreadCleanupListener(multipartDecoder);\r\n \r\n         if (_needToAddShutdownListener.getAndSet(false))\r\n         {\r",
                "additions": 3,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-upload/src/main/java/org/apache/tapestry/upload/services/UploadModule.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "3845df485490f24d393ed12fbb38a55be8f7c2fa",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1e8bf820de4f77cc6621f6ed3aff2d06e1479026/tapestry-upload/src/main/java/org/apache/tapestry/upload/services/UploadModule.java",
                "filename": "tapestry-upload/src/main/java/org/apache/tapestry/upload/services/UploadModule.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-upload/src/main/java/org/apache/tapestry/upload/services/UploadModule.java?ref=1e8bf820de4f77cc6621f6ed3aff2d06e1479026"
            }
        ],
        "bug_id": "tapestry-5_26",
        "parent": "https://github.com/apache/tapestry-5/commit/b1aa2f9388dbab547be002b17485ffa5fcf98592",
        "message": "TAPESTRY-2141: NullPointerExceptions under JDK 1.5 due to underlying ThreadLocal bug\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@620693 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/5783389e8f77831fb11531d95c4394f404ce14b5",
        "file": [
            {
                "patch": "@@ -50,7 +50,7 @@ public ModuleAssetRequestHandler(ModuleManager moduleManager, ResourceStreamer s\n     @Override\n     public boolean handleAssetRequest(Request request, Response response, final String moduleName) throws IOException\n     {\n-        final Holder<Boolean> handledHolder = Holder.create();\n+        final Holder<Boolean> handledHolder = Holder.create(false);\n \n         TapestryInternalUtils.performIO(tracker, String.format(\"Streaming module %s\", moduleName), new IOOperation()\n         {",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/5783389e8f77831fb11531d95c4394f404ce14b5/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/javascript/ModuleAssetRequestHandler.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "c4bf0742a422ef3322a3430e78b1ba7b93354604",
                "blob_url": "https://github.com/apache/tapestry-5/blob/5783389e8f77831fb11531d95c4394f404ce14b5/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/javascript/ModuleAssetRequestHandler.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/services/javascript/ModuleAssetRequestHandler.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/javascript/ModuleAssetRequestHandler.java?ref=5783389e8f77831fb11531d95c4394f404ce14b5"
            }
        ],
        "bug_id": "tapestry-5_27",
        "parent": "https://github.com/apache/tapestry-5/commit/53b54a4f6009f3a1f946972be515e07fde6eec77",
        "message": "Correct an NPE when a request for a non-existent module occurs (should 404)",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/c33c963d1d457dfa35a5b4586298a7df5275d41d",
        "file": [
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2009-2013 The Apache Software Foundation\n+// Copyright 2009-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -25,15 +25,12 @@\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n import org.apache.tapestry5.ioc.internal.util.TapestryException;\n-import org.apache.tapestry5.ioc.services.SymbolSource;\n import org.apache.tapestry5.ioc.util.ExceptionUtils;\n import org.apache.tapestry5.ioc.util.IdAllocator;\n import org.apache.tapestry5.model.ComponentModel;\n import org.apache.tapestry5.model.EmbeddedComponentModel;\n import org.apache.tapestry5.runtime.RenderCommand;\n import org.apache.tapestry5.services.ComponentClassResolver;\n-import org.apache.tapestry5.services.MetaDataLocator;\n-import org.apache.tapestry5.services.Request;\n import org.apache.tapestry5.services.pageload.ComponentResourceSelector;\n \n import java.util.List;\n@@ -57,30 +54,20 @@\n \n     private final OperationTracker tracker;\n \n-    private final Request request;\n-\n-    private final SymbolSource symbolSource;\n-\n-    private final MetaDataLocator metaDataLocator;\n-\n     private Map<String, String> publishedParameterToEmbeddedId;\n \n     private Map<String, EmbeddedComponentAssembler> embeddedIdToAssembler;\n \n     public ComponentAssemblerImpl(ComponentAssemblerSource assemblerSource,\n                                   ComponentInstantiatorSource instantiatorSource, ComponentClassResolver componentClassResolver,\n-                                  Instantiator instantiator, ComponentPageElementResources resources, OperationTracker tracker,\n-                                  Request request, SymbolSource symbolSource, MetaDataLocator metaDataLocator)\n+                                  Instantiator instantiator, ComponentPageElementResources resources, OperationTracker tracker)\n     {\n         this.assemblerSource = assemblerSource;\n         this.instantiatorSource = instantiatorSource;\n         this.componentClassResolver = componentClassResolver;\n         this.instantiator = instantiator;\n         this.resources = resources;\n         this.tracker = tracker;\n-        this.request = request;\n-        this.symbolSource = symbolSource;\n-        this.metaDataLocator = metaDataLocator;\n     }\n \n     public ComponentPageElement assembleRootComponent(final Page page)\n@@ -106,8 +93,8 @@ private ComponentPageElement performAssembleRootComponent(Page page)\n             pageAssembly.componentCount++;\n             pageAssembly.weight++;\n \n-            ComponentPageElement newElement = new ComponentPageElementImpl(pageAssembly.page, instantiator, resources,\n-                    request, symbolSource, metaDataLocator);\n+            ComponentPageElement newElement = new ComponentPageElementImpl(pageAssembly.page, instantiator, resources\n+            );\n \n             pageAssembly.componentName.push(new ComponentName(pageAssembly.page.getName()));\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java",
                "status": "modified",
                "changes": 21,
                "deletions": 17,
                "sha": "5e952cd8c64f474bd3332e3ae002ab9750c05cfa",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2009, 2010, 2011, 2012 The Apache Software Foundation\n+// Copyright 2009-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -32,7 +32,6 @@\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n import org.apache.tapestry5.ioc.internal.util.TapestryException;\n import org.apache.tapestry5.ioc.services.PerthreadManager;\n-import org.apache.tapestry5.ioc.services.SymbolSource;\n import org.apache.tapestry5.ioc.util.AvailableValues;\n import org.apache.tapestry5.ioc.util.Stack;\n import org.apache.tapestry5.ioc.util.UnknownValueException;\n@@ -142,19 +141,17 @@ public String toString()\n \n     private final PerthreadManager perThreadManager;\n \n-    private final Request request;\n-\n-    private final SymbolSource symbolSource;\n-\n     private final Logger logger;\n \n     private final MetaDataLocator metaDataLocator;\n \n+    private final RequestGlobals requestGlobals;\n+\n     public PageLoaderImpl(ComponentInstantiatorSource instantiatorSource, ComponentTemplateSource templateSource,\n                           PageElementFactory elementFactory, ComponentPageElementResourcesSource resourcesSource,\n                           ComponentClassResolver componentClassResolver, PersistentFieldManager persistentFieldManager,\n-                          StringInterner interner, OperationTracker tracker, PerthreadManager perThreadManager, Request request,\n-                          SymbolSource symbolSource, Logger logger, MetaDataLocator metaDataLocator)\n+                          StringInterner interner, OperationTracker tracker, PerthreadManager perThreadManager,\n+                          Logger logger, MetaDataLocator metaDataLocator, RequestGlobals requestGlobals)\n     {\n         this.instantiatorSource = instantiatorSource;\n         this.templateSource = templateSource;\n@@ -165,10 +162,9 @@ public PageLoaderImpl(ComponentInstantiatorSource instantiatorSource, ComponentT\n         this.interner = interner;\n         this.tracker = tracker;\n         this.perThreadManager = perThreadManager;\n-        this.request = request;\n-        this.symbolSource = symbolSource;\n         this.logger = logger;\n         this.metaDataLocator = metaDataLocator;\n+        this.requestGlobals = requestGlobals;\n     }\n \n     @PostInjection\n@@ -196,7 +192,7 @@ public Page loadPage(final String logicalPageName, final ComponentResourceSelect\n         {\n             public Page invoke()\n             {\n-                Page page = new PageImpl(logicalPageName, selector, persistentFieldManager, perThreadManager);\n+                Page page = new PageImpl(logicalPageName, selector, persistentFieldManager, perThreadManager, metaDataLocator);\n \n                 ComponentAssembler assembler = getAssembler(pageClassName, selector);\n \n@@ -266,7 +262,7 @@ public ComponentAssembler invoke()\n                 ComponentPageElementResources resources = resourcesSource.get(selector);\n \n                 ComponentAssembler assembler = new ComponentAssemblerImpl(PageLoaderImpl.this, instantiatorSource,\n-                        componentClassResolver, instantiator, resources, tracker, request, symbolSource, metaDataLocator);\n+                        componentClassResolver, instantiator, resources, tracker);\n \n                 // \"Program\" the assembler by adding actions to it. The actions interact with a\n                 // PageAssembly object (a fresh one for each new page being created).",
                "additions": 8,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java",
                "status": "modified",
                "changes": 20,
                "deletions": 12,
                "sha": "b7a07235fddc98c39b83bfa1f2369109a78bab3d",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007, 2008, 2009, 2010, 2011, 2012 The Apache Software Foundation\n+// Copyright 2006-2014  The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -32,15 +32,12 @@\n import org.apache.tapestry5.ioc.internal.util.Orderer;\n import org.apache.tapestry5.ioc.internal.util.TapestryException;\n import org.apache.tapestry5.ioc.services.PerThreadValue;\n-import org.apache.tapestry5.ioc.services.SymbolSource;\n import org.apache.tapestry5.ioc.util.AvailableValues;\n import org.apache.tapestry5.ioc.util.UnknownValueException;\n import org.apache.tapestry5.model.ComponentModel;\n import org.apache.tapestry5.model.ParameterModel;\n import org.apache.tapestry5.runtime.Component;\n import org.apache.tapestry5.runtime.*;\n-import org.apache.tapestry5.services.MetaDataLocator;\n-import org.apache.tapestry5.services.Request;\n import org.apache.tapestry5.services.pageload.ComponentResourceSelector;\n import org.slf4j.Logger;\n \n@@ -506,13 +503,6 @@ public String toString()\n \n     private final PerThreadValue<Boolean> renderingValue;\n \n-    // should be okay since it's a shadow service object\n-    private final Request request;\n-    private final SymbolSource symbolSource;\n-    private final MetaDataLocator metaDataLocator;\n-\n-    private final boolean productionMode;\n-    private final boolean componentTracingEnabled;\n     private final boolean exactParameterCountMatch;\n \n     // We know that, at the very least, there will be an element to force the component to render\n@@ -543,12 +533,10 @@ public String toString()\n      * @param location\n      *         location of the element (within a template), used as part of exception reporting\n      * @param elementResources\n-     *         Provides access to common methods of various services\n      */\n     ComponentPageElementImpl(Page page, ComponentPageElement container, String id, String nestedId, String completeId,\n                              String elementName, Instantiator instantiator, Location location,\n-                             ComponentPageElementResources elementResources, Request request,\n-                             SymbolSource symbolSource, MetaDataLocator metaDataLocator)\n+                             ComponentPageElementResources elementResources)\n     {\n         super(location);\n \n@@ -559,17 +547,8 @@ public String toString()\n         this.completeId = completeId;\n         this.elementName = elementName;\n         this.elementResources = elementResources;\n-        this.request = request;\n-        this.symbolSource = symbolSource;\n-        this.metaDataLocator = metaDataLocator;\n-\n-        // evaluate this once because it gets referenced a lot during rendering\n-        this.productionMode = \"true\".equals(symbolSource.valueForSymbol(SymbolConstants.PRODUCTION_MODE));\n-        this.componentTracingEnabled = \"true\".equals(symbolSource\n-                .valueForSymbol(SymbolConstants.COMPONENT_RENDER_TRACING_ENABLED));\n \n-        this.exactParameterCountMatch = metaDataLocator.findMeta(MetaDataConstants.UNKNOWN_ACTIVATION_CONTEXT_CHECK,\n-                                                                page.getName(), Boolean.class);\n+        this.exactParameterCountMatch = page.isExactParameterCountMatch();\n \n         ComponentResources containerResources = container == null ? null : container.getComponentResources();\n \n@@ -595,11 +574,9 @@ public void run()\n      * Constructor for the root component of a page.\n      */\n     public ComponentPageElementImpl(Page page, Instantiator instantiator,\n-                                    ComponentPageElementResources elementResources, Request request,\n-                                    SymbolSource symbolSource, MetaDataLocator metaDataLocator)\n+                                    ComponentPageElementResources elementResources)\n     {\n-        this(page, null, null, null, page.getName(), null, instantiator, null, elementResources,\n-                request, symbolSource, metaDataLocator);\n+        this(page, null, null, null, page.getName(), null, instantiator, null, elementResources);\n     }\n \n     private void initializeRenderPhases()\n@@ -657,7 +634,7 @@ public ComponentPageElement newChild(String id, String nestedId, String complete\n                                          Instantiator instantiator, Location location)\n     {\n         ComponentPageElementImpl child = new ComponentPageElementImpl(page, this, id, nestedId, completeId,\n-                elementName, instantiator, location, elementResources, request, symbolSource, metaDataLocator);\n+                elementName, instantiator, location, elementResources);\n \n         addEmbeddedElement(child);\n \n@@ -1293,7 +1270,7 @@ protected RenderPhaseEvent createRenderEvent(RenderQueue queue)\n \n     boolean isRenderTracingEnabled()\n     {\n-        return !productionMode && (componentTracingEnabled || \"true\".equals(request.getParameter(\"t:component-trace\")));\n+        return elementResources.isRenderTracingEnabled();\n     }\n \n     public ComponentResourceSelector getResourceSelector()",
                "additions": 7,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java",
                "status": "modified",
                "changes": 37,
                "deletions": 30,
                "sha": "b0d6fe6f834a4911496ecc037a584e47790c4c18",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2008, 2010, 2011 The Apache Software Foundation\n+// Copyright 2008-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -33,7 +33,7 @@\n {\n     /**\n      * Returns the selector associated with this resources.\n-     * \n+     *\n      * @since 5.3\n      */\n     ComponentResourceSelector getSelector();\n@@ -42,7 +42,7 @@\n      * Used to obtain a {@link org.apache.tapestry5.ioc.Messages} instance for a particular component. If the component\n      * extends from another component, then its localized properties will merge with its parent's properties (with the\n      * subclass overriding the super class on any conflicts).\n-     * \n+     *\n      * @param componentModel\n      * @return the message catalog for the component, in the indicated locale\n      * @see org.apache.tapestry5.services.messages.ComponentMessagesSource\n@@ -54,56 +54,56 @@\n      * conversion will be to the equivalent wrapper type. In some cases, the TypeCoercer will need to search for an\n      * appropriate coercion, and may even combine existing coercions to form new ones; in those cases, the results of\n      * the search are cached.\n-     * \n+     *\n      * @param <S>\n-     *            source type (input)\n+     *         source type (input)\n      * @param <T>\n-     *            target type (output)\n+     *         target type (output)\n      * @param input\n      * @param targetType\n-     *            defines the target type\n+     *         defines the target type\n      * @return the coerced value\n      * @see org.apache.tapestry5.ioc.services.TypeCoercer\n      */\n     <S, T> T coerce(S input, Class<T> targetType);\n \n     /**\n      * Gets the Class instance for then give name.\n-     * \n+     *\n      * @param className\n-     *            fully qualified class name\n+     *         fully qualified class name\n      * @return the class instance\n      * @see org.apache.tapestry5.internal.services.ComponentClassCache\n      */\n     Class toClass(String className);\n \n     /**\n      * Creates a link on behalf of a component.\n-     * \n+     *\n      * @param resources\n-     *            resources for the component\n+     *         resources for the component\n      * @param eventType\n-     *            type of event to create\n+     *         type of event to create\n      * @param forForm\n-     *            true if generating for a form submission\n+     *         true if generating for a form submission\n      * @param context\n-     *            additional event context associated with the link\n+     *         additional event context associated with the link\n      * @return the link\n      * @since 5.1.0.0\n      */\n     Link createComponentEventLink(ComponentResources resources, String eventType, boolean forForm, Object... context);\n \n     /**\n      * Creates a page render request link to render a specific page.\n-     * \n+     *\n      * @param pageName\n-     *            the logical name of the page to link to\n+     *         the logical name of the page to link to\n      * @param override\n-     *            if true, the context is used even if empty (normally, the target page is allowed to passivate,\n-     *            providing a context, when the provided context is empty)\n+     *         if true, the context is used even if empty (normally, the target page is allowed to passivate,\n+     *         providing a context, when the provided context is empty)\n      * @param context\n-     *            the activation context for the page. If omitted, the activation context is obtained from the\n-     *            target page\n+     *         the activation context for the page. If omitted, the activation context is obtained from the\n+     *         target page\n      * @return link for a render request to the targetted page\n      * @since 5.1.0.0\n      */\n@@ -112,15 +112,15 @@\n     /**\n      * Creates a page render request link to render a specific page. Using a page class, rather than a page name, is\n      * more refactoring safe (in the even the page is renamed or moved).\n-     * \n+     *\n      * @param pageClass\n-     *            identifies the page to link to\n+     *         identifies the page to link to\n      * @param override\n-     *            if true, the context is used even if empty (normally, the target page is allowed to passivate,\n-     *            providing a context, when the provided context is empty)\n+     *         if true, the context is used even if empty (normally, the target page is allowed to passivate,\n+     *         providing a context, when the provided context is empty)\n      * @param context\n-     *            the activation context for the page. If omitted, the activation context is obtained from the\n-     *            target page\n+     *         the activation context for the page. If omitted, the activation context is obtained from the\n+     *         target page\n      * @return link for a render request to the targetted page\n      * @since 5.1\n      */\n@@ -129,17 +129,25 @@\n     /**\n      * Returns the event logger for the provided component logger. The event logger is based on the component logger's\n      * name (which matches the component class name) with a \"tapestry..events.\" prefix.\n-     * \n+     *\n      * @param componentLogger\n-     *            provides base name for logger\n+     *         provides base name for logger\n      * @return the logger\n      */\n     Logger getEventLogger(Logger componentLogger);\n \n     /**\n      * Wrapper around {@link PerthreadManager#createValue()}.\n-     * \n+     *\n      * @since 5.2.0\n      */\n     <T> PerThreadValue<T> createPerThreadValue();\n+\n+    /**\n+     * Returns true if component element tracing is enabled. When enabled, rendering of the component produces\n+     * additional comments to identify what component and stage is rendering.\n+     *\n+     * @since 5.4\n+     */\n+    boolean isRenderTracingEnabled();\n }",
                "additions": 37,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResources.java",
                "status": "modified",
                "changes": 66,
                "deletions": 29,
                "sha": "6a32e863da7507d1709af5ce8050934bc4520d1e",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResources.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResources.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResources.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2008-2013 The Apache Software Foundation\n+// Copyright 2008-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -27,6 +27,8 @@\n import org.apache.tapestry5.model.ComponentModel;\n import org.apache.tapestry5.services.ComponentClassResolver;\n import org.apache.tapestry5.services.ContextValueEncoder;\n+import org.apache.tapestry5.services.Request;\n+import org.apache.tapestry5.services.RequestGlobals;\n import org.apache.tapestry5.services.messages.ComponentMessagesSource;\n import org.apache.tapestry5.services.pageload.ComponentResourceSelector;\n import org.slf4j.Logger;\n@@ -57,11 +59,15 @@\n \n     private final PerthreadManager perThreadManager;\n \n+    private final boolean productionMode, componentTracingEnabled;\n+\n+    private final RequestGlobals requestGlobals;\n+\n     public ComponentPageElementResourcesImpl(ComponentResourceSelector selector,\n                                              ComponentMessagesSource componentMessagesSource, TypeCoercer typeCoercer,\n                                              ComponentClassCache componentClassCache, ContextValueEncoder contextValueEncoder, LinkSource linkSource,\n                                              RequestPageCache requestPageCache, ComponentClassResolver componentClassResolver,\n-                                             LoggerSource loggerSource, OperationTracker tracker, PerthreadManager perThreadManager)\n+                                             LoggerSource loggerSource, OperationTracker tracker, PerthreadManager perThreadManager, boolean productionMode, boolean componentTracingEnabled, RequestGlobals requestGlobals)\n     {\n         this.selector = selector;\n         this.componentMessagesSource = componentMessagesSource;\n@@ -74,6 +80,9 @@ public ComponentPageElementResourcesImpl(ComponentResourceSelector selector,\n         this.loggerSource = loggerSource;\n         this.tracker = tracker;\n         this.perThreadManager = perThreadManager;\n+        this.productionMode = productionMode;\n+        this.componentTracingEnabled = componentTracingEnabled;\n+        this.requestGlobals = requestGlobals;\n     }\n \n     public ComponentResourceSelector getSelector()\n@@ -160,4 +169,26 @@ public void run(String description, Runnable operation)\n         return perThreadManager.createValue();\n     }\n \n+    public boolean isRenderTracingEnabled()\n+    {\n+        if (productionMode)\n+        {\n+            return false;\n+        }\n+\n+        if (componentTracingEnabled)\n+        {\n+            return true;\n+        }\n+\n+        Request request = requestGlobals.getRequest();\n+\n+        if (request == null)\n+        {\n+            return false;\n+        }\n+\n+        return \"true\".equals(request.getParameter(\"t:component-trace\"));\n+    }\n+\n }",
                "additions": 33,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImpl.java",
                "status": "modified",
                "changes": 35,
                "deletions": 2,
                "sha": "6c180b92f0fcbb6b397c32a32998495b21b2fe2a",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImpl.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2008, 2009, 2010 The Apache Software Foundation\n+// Copyright 2008-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -14,21 +14,24 @@\n \n package org.apache.tapestry5.internal.structure;\n \n-import java.util.Map;\n-\n+import org.apache.tapestry5.SymbolConstants;\n import org.apache.tapestry5.internal.services.ComponentClassCache;\n import org.apache.tapestry5.internal.services.LinkSource;\n import org.apache.tapestry5.internal.services.RequestPageCache;\n import org.apache.tapestry5.ioc.LoggerSource;\n import org.apache.tapestry5.ioc.OperationTracker;\n+import org.apache.tapestry5.ioc.annotations.Symbol;\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.apache.tapestry5.ioc.services.PerthreadManager;\n import org.apache.tapestry5.ioc.services.TypeCoercer;\n import org.apache.tapestry5.services.ComponentClassResolver;\n import org.apache.tapestry5.services.ContextValueEncoder;\n+import org.apache.tapestry5.services.RequestGlobals;\n import org.apache.tapestry5.services.messages.ComponentMessagesSource;\n import org.apache.tapestry5.services.pageload.ComponentResourceSelector;\n \n+import java.util.Map;\n+\n public class ComponentPageElementResourcesSourceImpl implements ComponentPageElementResourcesSource\n {\n     private final Map<ComponentResourceSelector, ComponentPageElementResources> cache = CollectionFactory\n@@ -54,10 +57,17 @@\n \n     private final PerthreadManager perThreadManager;\n \n+    private final boolean productionMode, componentTracingEnabled;\n+\n+    private final RequestGlobals requestGlobals;\n+\n     public ComponentPageElementResourcesSourceImpl(ComponentMessagesSource componentMessagesSource,\n             TypeCoercer typeCoercer, ComponentClassCache componentClassCache, ContextValueEncoder contextValueEncoder,\n             LinkSource linkSource, RequestPageCache requestPageCache, ComponentClassResolver componentClassResolver,\n-            LoggerSource loggerSource, OperationTracker tracker, PerthreadManager perThreadManager)\n+            LoggerSource loggerSource, OperationTracker tracker, PerthreadManager perThreadManager,\n+            @Symbol(SymbolConstants.PRODUCTION_MODE) boolean productionMode,\n+            @Symbol(SymbolConstants.COMPONENT_RENDER_TRACING_ENABLED) boolean componentTracingEnabled,\n+            RequestGlobals requestGlobals)\n     {\n         this.componentMessagesSource = componentMessagesSource;\n         this.typeCoercer = typeCoercer;\n@@ -69,6 +79,9 @@ public ComponentPageElementResourcesSourceImpl(ComponentMessagesSource component\n         this.loggerSource = loggerSource;\n         this.tracker = tracker;\n         this.perThreadManager = perThreadManager;\n+        this.productionMode = productionMode;\n+        this.componentTracingEnabled = componentTracingEnabled;\n+        this.requestGlobals = requestGlobals;\n     }\n \n     public ComponentPageElementResources get(ComponentResourceSelector selector)\n@@ -81,7 +94,7 @@ public ComponentPageElementResources get(ComponentResourceSelector selector)\n         {\n             result = new ComponentPageElementResourcesImpl(selector, componentMessagesSource, typeCoercer,\n                     componentClassCache, contextValueEncoder, linkSource, requestPageCache, componentClassResolver,\n-                    loggerSource, tracker, perThreadManager);\n+                    loggerSource, tracker, perThreadManager, productionMode, componentTracingEnabled, requestGlobals);\n \n             // Small race condition here, where we may create two instances of the CPER for the same locale,\n             // but that's not worth worrying about.",
                "additions": 18,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesSourceImpl.java",
                "status": "modified",
                "changes": 23,
                "deletions": 5,
                "sha": "f4ee38b7560261218d47ba9afab39851ffc17aff",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesSourceImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesSourceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesSourceImpl.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007, 2008, 2009, 2010, 2011, 2012 The Apache Software Foundation\n+// Copyright 2006-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -145,7 +145,7 @@ public Stats(double assemblyTime, int componentCount, int weight)\n      * Adds a listener that is notified of large scale page events.\n      *\n      * @deprecated in 5.3.4; use {@link #addPageLoadedCallback(Runnable)}, {@link #addPageAttachedCallback(Runnable)}, or\n-     *             {@link #addPageDetachedCallback(Runnable)}  instead\n+     * {@link #addPageDetachedCallback(Runnable)}  instead\n      */\n     void addLifecycleListener(PageLifecycleListener listener);\n \n@@ -250,5 +250,13 @@ public Stats(double assemblyTime, int componentCount, int weight)\n      */\n     int getAttachCount();\n \n+    /**\n+     * Returns true if extract parameter count matching is enabled.\n+     *\n+     * @see org.apache.tapestry5.MetaDataConstants#UNKNOWN_ACTIVATION_CONTEXT_CHECK\n+     * @since 5.4\n+     */\n+    boolean isExactParameterCountMatch();\n+\n \n }",
                "additions": 10,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/Page.java",
                "status": "modified",
                "changes": 12,
                "deletions": 2,
                "sha": "9c8dd133b0e43b7da77b340f290cf148bd7f0783",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/Page.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/Page.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/Page.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006-2013 The Apache Software Foundation\n+// Copyright 2006-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -15,6 +15,7 @@\n package org.apache.tapestry5.internal.structure;\n \n import org.apache.tapestry5.ComponentResources;\n+import org.apache.tapestry5.MetaDataConstants;\n import org.apache.tapestry5.internal.services.PersistentFieldManager;\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.apache.tapestry5.ioc.internal.util.OneShotLock;\n@@ -23,6 +24,7 @@\n import org.apache.tapestry5.ioc.util.ExceptionUtils;\n import org.apache.tapestry5.runtime.Component;\n import org.apache.tapestry5.runtime.PageLifecycleListener;\n+import org.apache.tapestry5.services.MetaDataLocator;\n import org.apache.tapestry5.services.PersistentFieldBundle;\n import org.apache.tapestry5.services.pageload.ComponentResourceSelector;\n import org.slf4j.Logger;\n@@ -64,6 +66,8 @@\n \n     private final AtomicInteger attachCount = new AtomicInteger();\n \n+    private final boolean exactParameterCountMatch;\n+\n     private List<Runnable> pageVerifyCallbacks = CollectionFactory.newList();\n \n     /**\n@@ -83,16 +87,18 @@\n      * @param persistentFieldManager\n      *         for access to cross-request persistent values\n      * @param perThreadManager\n-     *         for managing per-request mutable state\n+     * @param metaDataLocator\n      */\n     public PageImpl(String name, ComponentResourceSelector selector, PersistentFieldManager persistentFieldManager,\n-                    PerthreadManager perThreadManager)\n+                    PerthreadManager perThreadManager, MetaDataLocator metaDataLocator)\n     {\n         this.name = name;\n         this.selector = selector;\n         this.persistentFieldManager = persistentFieldManager;\n \n         fieldBundle = perThreadManager.createValue();\n+\n+        exactParameterCountMatch = metaDataLocator.findMeta(MetaDataConstants.UNKNOWN_ACTIVATION_CONTEXT_CHECK, name, Boolean.class);\n     }\n \n     public void setStats(Stats stats)\n@@ -320,6 +326,11 @@ public int getAttachCount()\n         return attachCount.get();\n     }\n \n+    public boolean isExactParameterCountMatch()\n+    {\n+        return exactParameterCountMatch;\n+    }\n+\n     public void addPageLoadedCallback(Runnable callback)\n     {\n         lifecycleListenersLock.check();",
                "additions": 14,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/PageImpl.java",
                "status": "modified",
                "changes": 17,
                "deletions": 3,
                "sha": "a96704942704bb23fde1771e58cc839a08c72a30",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/PageImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/PageImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/PageImpl.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d"
            },
            {
                "patch": "@@ -0,0 +1,67 @@\n+package org.apache.tapestry5.internal.structure\n+\n+import org.apache.tapestry5.internal.services.RequestGlobalsImpl\n+import org.apache.tapestry5.ioc.test.TestBase\n+import org.apache.tapestry5.services.Request\n+import org.testng.annotations.Test\n+\n+class ComponentPageElementResourcesImplTest extends TestBase {\n+\n+    def create(productionMode, tracing, request) {\n+        RequestGlobalsImpl rg = new RequestGlobalsImpl()\n+\n+        rg.storeRequestResponse(request, null)\n+\n+        new ComponentPageElementResourcesImpl(null, null, null, null, null, null, null, null, null, null, null, productionMode, tracing, rg)\n+    }\n+\n+    @Test\n+    void production_mode_prevents_render_tracing() {\n+        def r = create true, true, null\n+\n+        assertFalse r.renderTracingEnabled\n+    }\n+\n+    @Test\n+    void request_not_checked_if_tracing_enabled() {\n+        def r = create false, true, null\n+\n+        assertTrue r.renderTracingEnabled\n+    }\n+\n+    @Test\n+    void tracing_enabled_by_request_parameter() {\n+\n+        def request = newMock Request\n+        def r = create false, false, request\n+\n+        expect(request.getParameter(\"t:component-trace\")).andReturn(\"true\")\n+\n+        replay()\n+\n+        assertTrue r.renderTracingEnabled\n+\n+        verify()\n+    }\n+\n+    @Test\n+    void tracing_not_enabled_by_request_parameter() {\n+        def request = newMock Request\n+        def r = create false, false, request\n+\n+        expect(request.getParameter(\"t:component-trace\")).andReturn(null)\n+\n+        replay()\n+\n+        assertFalse r.renderTracingEnabled\n+\n+        verify()\n+    }\n+\n+    @Test\n+    void tracing_not_enabled_if_no_request() {\n+        def r = create false, false, null\n+\n+        assertFalse r.renderTracingEnabled\n+    }\n+}",
                "additions": 67,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/test/groovy/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImplTest.groovy",
                "status": "added",
                "changes": 67,
                "deletions": 0,
                "sha": "5acf1e683cbbfe3ce9674065f66c1c00bd9e6e0a",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/test/groovy/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImplTest.groovy",
                "filename": "tapestry-core/src/test/groovy/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImplTest.groovy",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/groovy/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImplTest.groovy?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d"
            },
            {
                "patch": "@@ -1,72 +0,0 @@\n-package org.apache.tapestry5.internal.structure;\n-\n-import static org.apache.tapestry5.SymbolConstants.COMPONENT_RENDER_TRACING_ENABLED;\n-import static org.apache.tapestry5.SymbolConstants.PRODUCTION_MODE;\n-\n-import org.apache.tapestry5.MetaDataConstants;\n-import org.apache.tapestry5.internal.services.Instantiator;\n-import org.apache.tapestry5.ioc.Location;\n-import org.apache.tapestry5.ioc.services.SymbolSource;\n-import org.apache.tapestry5.ioc.test.TestBase;\n-import org.apache.tapestry5.model.ComponentModel;\n-import org.apache.tapestry5.services.MetaDataLocator;\n-import org.apache.tapestry5.services.Request;\n-import org.testng.annotations.Test;\n-\n-public class ComponentPageElementImplTest extends TestBase {\n-    /** TAP5-742 */\n-    @Test public void component_render_tracing() {\n-        Request request = newMock(Request.class);\n-        SymbolSource symbolSource = newMock(SymbolSource.class);\n-        \n-        Page page = getMocksControl().createMock(Page.class);\n-        Instantiator instantiator = newMock(Instantiator.class);\n-        Location location = newMock(Location.class);\n-        ComponentPageElementResources elementResources = newMock(ComponentPageElementResources.class);\n-        ComponentModel model = newMock(ComponentModel.class);\n-        MetaDataLocator locator = newMock(MetaDataLocator.class);\n-        \n-        getMocksControl().resetToNice();\n-\n-        expect(instantiator.getModel()).andReturn(model).anyTimes();\n-\n-        // off by default\n-        expect(symbolSource.valueForSymbol(PRODUCTION_MODE)).andReturn(\"false\");\n-        expect(symbolSource.valueForSymbol(COMPONENT_RENDER_TRACING_ENABLED)).andReturn(\"false\");\n-        expect(request.getParameter(\"t:component-trace\")).andReturn(\"false\");\n-        \n-        // enable by query parameter\n-        expect(symbolSource.valueForSymbol(PRODUCTION_MODE)).andReturn(\"false\");\n-        expect(symbolSource.valueForSymbol(COMPONENT_RENDER_TRACING_ENABLED)).andReturn(\"false\");\n-        expect(request.getParameter(\"t:component-trace\")).andReturn(\"true\");\n-        \n-        // enable by symbol\n-        expect(symbolSource.valueForSymbol(PRODUCTION_MODE)).andReturn(\"false\");\n-        expect(symbolSource.valueForSymbol(COMPONENT_RENDER_TRACING_ENABLED)).andReturn(\"true\");\n-        expect(request.getParameter(\"t:component-trace\")).andReturn(\"false\");\n-        \n-        // off no matter what in production mode\n-        expect(symbolSource.valueForSymbol(PRODUCTION_MODE)).andReturn(\"true\");\n-        expect(symbolSource.valueForSymbol(COMPONENT_RENDER_TRACING_ENABLED)).andReturn(\"true\");\n-        expect(request.getParameter(\"t:component-trace\")).andReturn(\"false\");\n-\n-        expect(page.getName()).andReturn(\"pageName\").anyTimes();\n-        expect(locator.findMeta(MetaDataConstants.UNKNOWN_ACTIVATION_CONTEXT_CHECK, \"pageName\", Boolean.class))\n-                .andReturn(false).anyTimes();\n-\n-        replay();\n-        ComponentPageElementImpl c;    // need to create every time because of changing symbols\n-        \n-        c = new ComponentPageElementImpl(page, null, \"id\", \"nestedId\", \"completeid\", \"elementname\", instantiator, location, elementResources, request, symbolSource, locator);\n-        assertFalse(c.isRenderTracingEnabled());\n-        \n-        c = new ComponentPageElementImpl(page, null, \"id\", \"nestedId\", \"completeid\", \"elementname\", instantiator, location, elementResources, request, symbolSource, locator);\n-        assertTrue(c.isRenderTracingEnabled());\n-\n-        c = new ComponentPageElementImpl(page, null, \"id\", \"nestedId\", \"completeid\", \"elementname\", instantiator, location, elementResources, request, symbolSource, locator);\n-        assertTrue(c.isRenderTracingEnabled());\n-\n-        c = new ComponentPageElementImpl(page, null, \"id\", \"nestedId\", \"completeid\", \"elementname\", instantiator, location, elementResources, request, symbolSource, locator);\n-        assertFalse(c.isRenderTracingEnabled());\n-    }\n-}",
                "additions": 0,
                "raw_url": "https://github.com/apache/tapestry-5/raw/0046b167a69d22a87fac707799154d502521b8be/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/ComponentPageElementImplTest.java",
                "status": "removed",
                "changes": 72,
                "deletions": 72,
                "sha": "cfd149457f58d0b78a6e61417ea201c6f3afac64",
                "blob_url": "https://github.com/apache/tapestry-5/blob/0046b167a69d22a87fac707799154d502521b8be/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/ComponentPageElementImplTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/ComponentPageElementImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/ComponentPageElementImplTest.java?ref=0046b167a69d22a87fac707799154d502521b8be"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007, 2008, 2010, 2011 The Apache Software Foundation\n+// Copyright 2006-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -44,7 +44,7 @@ public void setup()\n         TypeCoercer typeCoercer = getService(TypeCoercer.class);\n \n         elementResources = new ComponentPageElementResourcesImpl(null, null, typeCoercer, null, null, null, null, null,\n-                null, null, perThreadManager);\n+                null, null, perThreadManager, false, false, null);\n     }\n \n     @AfterMethod",
                "additions": 2,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImplTest.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "8d84df476193163d44d1952de8595fa8883a4663",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImplTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImplTest.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007, 2008, 2009, 2010, 2011, 2012 The Apache Software Foundation\n+// Copyright 2006-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -14,9 +14,11 @@\n \n package org.apache.tapestry5.internal.structure;\n \n+import org.apache.tapestry5.MetaDataConstants;\n import org.apache.tapestry5.internal.test.InternalBaseTestCase;\n import org.apache.tapestry5.ioc.services.PerthreadManager;\n import org.apache.tapestry5.runtime.PageLifecycleListener;\n+import org.apache.tapestry5.services.MetaDataLocator;\n import org.apache.tapestry5.services.pageload.ComponentResourceSelector;\n import org.slf4j.Logger;\n import org.testng.annotations.AfterMethod;\n@@ -48,15 +50,26 @@ public void cleanup()\n         perThreadManager.cleanup();\n     }\n \n+    private MetaDataLocator newMetaDataLocator(String pageName, boolean enabled)\n+    {\n+\n+        MetaDataLocator locator = newMock(MetaDataLocator.class);\n+\n+        expect(locator.findMeta(MetaDataConstants.UNKNOWN_ACTIVATION_CONTEXT_CHECK, pageName, Boolean.class)).andReturn(enabled);\n+\n+        return locator;\n+    }\n+\n     @Test\n     public void accessor_methods()\n     {\n         ComponentPageElement root = mockComponentPageElement();\n         ComponentResourceSelector selector = new ComponentResourceSelector(Locale.ENGLISH);\n+        MetaDataLocator locator = newMetaDataLocator(LOGICAL_PAGE_NAME, true);\n \n         replay();\n \n-        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager);\n+        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager, locator);\n \n         assertNull(page.getRootElement());\n \n@@ -66,6 +79,8 @@ public void accessor_methods()\n         assertSame(page.getRootElement(), root);\n         assertSame(page.getName(), LOGICAL_PAGE_NAME);\n \n+        assertTrue(page.isExactParameterCountMatch());\n+\n         verify();\n     }\n \n@@ -78,9 +93,11 @@ public void detach_notification()\n         listener1.containingPageDidDetach();\n         listener2.containingPageDidDetach();\n \n+        MetaDataLocator locator = newMetaDataLocator(LOGICAL_PAGE_NAME, true);\n+\n         replay();\n \n-        Page page = new PageImpl(null, selector, null, perThreadManager);\n+        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager, locator);\n \n         page.addLifecycleListener(listener1);\n         page.addLifecycleListener(listener2);\n@@ -101,6 +118,7 @@ public void detach_dirty_if_listener_throws_exception()\n         PageLifecycleListener listener1 = newPageLifecycle();\n         PageLifecycleListener listener2 = newPageLifecycle();\n         RuntimeException t = new RuntimeException(\"Listener detach exception.\");\n+        MetaDataLocator locator = newMetaDataLocator(LOGICAL_PAGE_NAME, true);\n \n         train_getLogger(element, logger);\n \n@@ -113,7 +131,7 @@ public void detach_dirty_if_listener_throws_exception()\n \n         replay();\n \n-        Page page = new PageImpl(null, selector, null, perThreadManager);\n+        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager, locator);\n         page.setRootElement(element);\n \n         page.addLifecycleListener(listener1);\n@@ -132,6 +150,8 @@ protected final void train_getLogger(ComponentPageElement element, Logger logger\n     @Test\n     public void attach_notification()\n     {\n+        MetaDataLocator locator = newMetaDataLocator(LOGICAL_PAGE_NAME, true);\n+\n         PageLifecycleListener listener1 = newPageLifecycle();\n         PageLifecycleListener listener2 = newPageLifecycle();\n \n@@ -140,7 +160,7 @@ public void attach_notification()\n \n         replay();\n \n-        Page page = new PageImpl(null, selector, null, perThreadManager);\n+        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager, locator);\n \n         page.addLifecycleListener(listener1);\n         page.addLifecycleListener(listener2);\n@@ -158,6 +178,8 @@ private PageLifecycleListener newPageLifecycle()\n     @Test\n     public void load_notification()\n     {\n+        MetaDataLocator locator = newMetaDataLocator(LOGICAL_PAGE_NAME, true);\n+\n         PageLifecycleListener listener1 = newPageLifecycle();\n         PageLifecycleListener listener2 = newPageLifecycle();\n \n@@ -166,7 +188,7 @@ public void load_notification()\n \n         replay();\n \n-        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager);\n+        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager, locator);\n \n         page.addLifecycleListener(listener1);\n         page.addLifecycleListener(listener2);\n@@ -180,10 +202,11 @@ public void load_notification()\n     public void get_by_nested_id_for_blank_value_returns_root_component()\n     {\n         ComponentPageElement root = mockComponentPageElement();\n+        MetaDataLocator locator = newMetaDataLocator(LOGICAL_PAGE_NAME, true);\n \n         replay();\n \n-        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager);\n+        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager, locator);\n \n         page.setRootElement(root);\n ",
                "additions": 30,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/PageImplTest.java",
                "status": "modified",
                "changes": 37,
                "deletions": 7,
                "sha": "d8c01e6cc51ddcaca0e90737de4f1acb0fc28efc",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/PageImplTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/PageImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/PageImplTest.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d"
            }
        ],
        "bug_id": "tapestry-5_28",
        "parent": "https://github.com/apache/tapestry-5/commit/0046b167a69d22a87fac707799154d502521b8be",
        "message": "TAP5-1802: Avoid an NPE when no Request object is known\n\nRe-organize code to move logic out of ComponentPageElementImpl and into Page and ComponentElementResources.",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/28edd83c84ae48ab68cb812a7e34194d2162a266",
        "file": [
            {
                "patch": "@@ -893,8 +893,13 @@ void remove(Node node)\n                 else\n                     firstChild = afterNode;\n \n-                if (afterNode == null)\n-                    lastChild = afterNode;\n+                // If node was the final node in the element then handle deletion.\n+                // It's even possible node was the only node in the container.\n+\n+                if (lastChild == node)\n+                {\n+                    lastChild = prior != null ? prior : null;\n+                }\n \n                 return;\n             }",
                "additions": 7,
                "raw_url": "https://github.com/apache/tapestry-5/raw/28edd83c84ae48ab68cb812a7e34194d2162a266/tapestry-core/src/main/java/org/apache/tapestry5/dom/Element.java",
                "status": "modified",
                "changes": 9,
                "deletions": 2,
                "sha": "de41138c2b66d279aba2dc4f9fd09a04008d5c06",
                "blob_url": "https://github.com/apache/tapestry-5/blob/28edd83c84ae48ab68cb812a7e34194d2162a266/tapestry-core/src/main/java/org/apache/tapestry5/dom/Element.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/dom/Element.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/dom/Element.java?ref=28edd83c84ae48ab68cb812a7e34194d2162a266"
            },
            {
                "patch": "@@ -14,6 +14,8 @@\n \n package org.apache.tapestry5.dom;\n \n+import org.apache.tapestry5.MarkupWriter;\n+import org.apache.tapestry5.internal.services.MarkupWriterImpl;\n import org.apache.tapestry5.internal.test.InternalBaseTestCase;\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.testng.annotations.Test;\n@@ -864,4 +866,34 @@ public void force_null_for_first_attribute_is_noop()\n \n         assertEquals(root.toString(), \"<root></root>\");\n     }\n+\n+    @Test\n+    public void remove_while_rendering()\n+    {\n+        MarkupWriter writer = new MarkupWriterImpl(new XMLMarkupModel());\n+\n+        writer.element(\"ul\");\n+\n+        for (int i = 0; i < 4; i++)\n+        {\n+            Element e = writer.element(\"li\");\n+\n+            if (i != 2)\n+            {\n+                writer.write(String.valueOf(i));\n+            }\n+\n+            writer.end();\n+\n+            if (e.getChildren().isEmpty())\n+            {\n+                e.remove();\n+            }\n+        }\n+\n+        writer.end();\n+\n+        assertEquals(writer.toString(), \"<?xml version=\\\"1.0\\\"?>\\n\" +\n+                \"<ul><li>0</li><li>1</li><li>3</li></ul>\");\n+    }\n }",
                "additions": 32,
                "raw_url": "https://github.com/apache/tapestry-5/raw/28edd83c84ae48ab68cb812a7e34194d2162a266/tapestry-core/src/test/java/org/apache/tapestry5/dom/DOMTest.java",
                "status": "modified",
                "changes": 32,
                "deletions": 0,
                "sha": "375d8a3cffd488cead962c1b3db5458228a0f349",
                "blob_url": "https://github.com/apache/tapestry-5/blob/28edd83c84ae48ab68cb812a7e34194d2162a266/tapestry-core/src/test/java/org/apache/tapestry5/dom/DOMTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/dom/DOMTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/dom/DOMTest.java?ref=28edd83c84ae48ab68cb812a7e34194d2162a266"
            }
        ],
        "bug_id": "tapestry-5_29",
        "parent": "https://github.com/apache/tapestry-5/commit/e9e8f2fb0d0caa89635c2d245f120dc502ecc6d5",
        "message": "TAP5-640: DOM manipulation during rendering can NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@764965 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/7b222294e3f211e3b9e3497e65cc6ded8539a14d",
        "file": [
            {
                "patch": "@@ -1000,6 +1000,11 @@ public boolean service(HttpServletRequest servletRequest, HttpServletResponse se\n                 Request request = new RequestImpl(servletRequest, applicationCharset);\n                 Response response = new ResponseImpl(servletResponse);\n \n+                // TAP5-257: Make sure that the \"initial guess\" for request/response is available, even if\n+                // some filter in the RequestHandler pipeline replaces them.\n+\n+                requestGlobals.storeRequestResponse(request, response);\n+\n                 // Transition from the Servlet API-based pipeline, to the Tapestry-based pipeline.\n \n                 return handler.service(request, response);\n@@ -1020,6 +1025,8 @@ public RequestHandler buildRequestHandler(Logger logger, List<RequestFilter> con\n         {\n             public boolean service(Request request, Response response) throws IOException\n             {\n+                // Update RequestGlobals with the current request/response (in case some filter replaced the\n+                // normal set).\n                 requestGlobals.storeRequestResponse(request, response);\n \n                 return masterDispatcher.dispatch(request, response);",
                "additions": 7,
                "raw_url": "https://github.com/apache/tapestry-5/raw/7b222294e3f211e3b9e3497e65cc6ded8539a14d/tapestry-core/src/main/java/org/apache/tapestry5/services/TapestryModule.java",
                "status": "modified",
                "changes": 7,
                "deletions": 0,
                "sha": "04ba2a12c67ea75bf69253190566b833d623a4d4",
                "blob_url": "https://github.com/apache/tapestry-5/blob/7b222294e3f211e3b9e3497e65cc6ded8539a14d/tapestry-core/src/main/java/org/apache/tapestry5/services/TapestryModule.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/services/TapestryModule.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/services/TapestryModule.java?ref=7b222294e3f211e3b9e3497e65cc6ded8539a14d"
            }
        ],
        "bug_id": "tapestry-5_30",
        "parent": "https://github.com/apache/tapestry-5/commit/42cdc9b70acdceca05cf6822a243ae9f4e0b888c",
        "message": "TAP5-257: NPE in RequestFilter if ApplicationStateManager is used\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@704212 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/e94a3389e782663e76986c43900d4f04d70920f1",
        "file": [
            {
                "patch": "@@ -4,6 +4,11 @@\n <dict>\n \t<key>ActiveLayerIndex</key>\n \t<integer>0</integer>\n+\t<key>ApplicationVersion</key>\n+\t<array>\n+\t\t<string>com.omnigroup.OmniGraffle</string>\n+\t\t<string>129.15</string>\n+\t</array>\n \t<key>AutoAdjust</key>\n \t<true/>\n \t<key>CanvasColor</key>\n@@ -31,11 +36,440 @@\n \t<array>\n \t\t<dict>\n \t\t\t<key>Bounds</key>\n-\t\t\t<string>{{69, 472.8}, {61, 36}}</string>\n+\t\t\t<string>{{300.5, 132.6}, {61, 36}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>65</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>RoundRect</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Color</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.8</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0.8</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>0.8</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf824\\cocoasubrtf420\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\\pardirnatural\n+\n+\\f0\\fs24 \\cf0 null}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>71</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>77</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{302.705, 163.493}</string>\n+\t\t\t\t<string>{253.048, 186.119}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t<key>Width</key>\n+\t\t\t\t\t<real>4</real>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>65</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>70</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>76</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{300, 150.6}</string>\n+\t\t\t\t<string>{243.5, 150.6}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t<key>Width</key>\n+\t\t\t\t\t<real>4</real>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>65</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>68</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>75</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{302.449, 138.236}</string>\n+\t\t\t\t<string>{253.856, 117.193}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t<key>Width</key>\n+\t\t\t\t\t<real>4</real>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>65</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>67</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>74</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{359.151, 163.771}</string>\n+\t\t\t\t<string>{412.409, 188.688}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t<key>Width</key>\n+\t\t\t\t\t<real>4</real>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>65</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>69</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>73</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{362, 150.6}</string>\n+\t\t\t\t<string>{412, 150.6}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t<key>Width</key>\n+\t\t\t\t\t<real>4</real>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>65</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>66</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>72</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{359.421, 137.963}</string>\n+\t\t\t\t<string>{414.579, 113.437}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t<key>Width</key>\n+\t\t\t\t\t<real>4</real>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>65</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{46.5, 472.8}, {61, 36}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>48</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>RoundRect</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Color</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.0941176</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0.917647</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>1</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf824\\cocoasubrtf420\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\\pardirnatural\n+\n+\\f0\\fs24 \\cf0 Object}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{171, 185}, {90, 36}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>FontInfo</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Color</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>71</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>RoundRect</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Color</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.0941176</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0.917647</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>1</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf824\\cocoasubrtf420\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\\pardirnatural\n+\n+\\f0\\fs24 \\cf0 BigInteger}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{189, 132.6}, {54, 36}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>70</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>RoundRect</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Color</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.0941176</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0.917647</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>1</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf824\\cocoasubrtf420\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\\pardirnatural\n+\n+\\f0\\fs24 \\cf0 Long}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{412.5, 132.6}, {61, 36}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>FontInfo</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Color</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>w</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<key>Font</key>\n+\t\t\t\t<string>Helvetica</string>\n+\t\t\t\t<key>NSKern</key>\n+\t\t\t\t<real>0.0</real>\n+\t\t\t\t<key>Size</key>\n+\t\t\t\t<real>12</real>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>69</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>RoundRect</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Color</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.0941176</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0.917647</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>1</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t\t<key>GradientColor</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>w</key>\n+\t\t\t\t\t\t<string>0.666667</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf824\\cocoasubrtf420\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\\pardirnatural\n+\n+\\f0\\fs24 \\cf0 \\expnd0\\expndtw0\\kerning0\n+Double}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{171, 82.8}, {90, 36}}</string>\n \t\t\t<key>Class</key>\n \t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>FontInfo</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Color</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n \t\t\t<key>ID</key>\n-\t\t\t<integer>61</integer>\n+\t\t\t<integer>68</integer>\n \t\t\t<key>Shape</key>\n \t\t\t<string>RoundRect</string>\n \t\t\t<key>Style</key>\n@@ -45,11 +479,11 @@\n \t\t\t\t\t<key>Color</key>\n \t\t\t\t\t<dict>\n \t\t\t\t\t\t<key>b</key>\n-\t\t\t\t\t\t<string>0.8</string>\n+\t\t\t\t\t\t<string>0.0941176</string>\n \t\t\t\t\t\t<key>g</key>\n-\t\t\t\t\t\t<string>0.8</string>\n+\t\t\t\t\t\t<string>0.917647</string>\n \t\t\t\t\t\t<key>r</key>\n-\t\t\t\t\t\t<string>0.8</string>\n+\t\t\t\t\t\t<string>1</string>\n \t\t\t\t\t</dict>\n \t\t\t\t</dict>\n \t\t\t</dict>\n@@ -61,12 +495,82 @@\n {\\colortbl;\\red255\\green255\\blue255;}\n \\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\\pardirnatural\n \n-\\f0\\fs24 \\cf0 null}</string>\n+\\f0\\fs24 \\cf0 BigDecimal}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{409, 185}, {68, 36}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>67</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>RoundRect</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Color</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.0941176</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0.917647</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>1</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf824\\cocoasubrtf420\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\\pardirnatural\n+\n+\\f0\\fs24 \\cf0 Boolean}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{412.5, 82.8}, {61, 36}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>66</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>RoundRect</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Color</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.0941176</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0.917647</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>1</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf824\\cocoasubrtf420\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\\pardirnatural\n+\n+\\f0\\fs24 \\cf0 List}</string>\n \t\t\t</dict>\n \t\t</dict>\n \t\t<dict>\n \t\t\t<key>Bounds</key>\n-\t\t\t<string>{{54.5, 174.8}, {90, 36}}</string>\n+\t\t\t<string>{{32, 168.6}, {90, 36}}</string>\n \t\t\t<key>Class</key>\n \t\t\t<string>ShapedGraphic</string>\n \t\t\t<key>FontInfo</key>\n@@ -113,7 +617,7 @@\n \t\t</dict>\n \t\t<dict>\n \t\t\t<key>Bounds</key>\n-\t\t\t<string>{{65.5, 676}, {68, 36}}</string>\n+\t\t\t<string>{{43, 320.8}, {68, 36}}</string>\n \t\t\t<key>Class</key>\n \t\t\t<string>ShapedGraphic</string>\n \t\t\t<key>ID</key>\n@@ -148,7 +652,7 @@\n \t\t</dict>\n \t\t<dict>\n \t\t\t<key>Bounds</key>\n-\t\t\t<string>{{69, 595}, {61, 36}}</string>\n+\t\t\t<string>{{46.5, 396.8}, {61, 36}}</string>\n \t\t\t<key>Class</key>\n \t\t\t<string>ShapedGraphic</string>\n \t\t\t<key>ID</key>\n@@ -254,12 +758,17 @@\n \t\t<dict>\n \t\t\t<key>Class</key>\n \t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>4</integer>\n+\t\t\t</dict>\n \t\t\t<key>ID</key>\n \t\t\t<integer>49</integer>\n \t\t\t<key>Points</key>\n \t\t\t<array>\n-\t\t\t\t<string>{191.862, 557.5}</string>\n-\t\t\t\t<string>{191.5, 508.8}</string>\n+\t\t\t\t<string>{108, 490.8}</string>\n+\t\t\t\t<string>{164.5, 490.8}</string>\n \t\t\t</array>\n \t\t\t<key>Style</key>\n \t\t\t<dict>\n@@ -281,41 +790,6 @@\n \t\t\t\t<integer>48</integer>\n \t\t\t</dict>\n \t\t</dict>\n-\t\t<dict>\n-\t\t\t<key>Bounds</key>\n-\t\t\t<string>{{161.5, 558}, {61, 36}}</string>\n-\t\t\t<key>Class</key>\n-\t\t\t<string>ShapedGraphic</string>\n-\t\t\t<key>ID</key>\n-\t\t\t<integer>48</integer>\n-\t\t\t<key>Shape</key>\n-\t\t\t<string>RoundRect</string>\n-\t\t\t<key>Style</key>\n-\t\t\t<dict>\n-\t\t\t\t<key>fill</key>\n-\t\t\t\t<dict>\n-\t\t\t\t\t<key>Color</key>\n-\t\t\t\t\t<dict>\n-\t\t\t\t\t\t<key>b</key>\n-\t\t\t\t\t\t<string>0.0941176</string>\n-\t\t\t\t\t\t<key>g</key>\n-\t\t\t\t\t\t<string>0.917647</string>\n-\t\t\t\t\t\t<key>r</key>\n-\t\t\t\t\t\t<string>1</string>\n-\t\t\t\t\t</dict>\n-\t\t\t\t</dict>\n-\t\t\t</dict>\n-\t\t\t<key>Text</key>\n-\t\t\t<dict>\n-\t\t\t\t<key>Text</key>\n-\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf824\\cocoasubrtf420\n-{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n-{\\colortbl;\\red255\\green255\\blue255;}\n-\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\\pardirnatural\n-\n-\\f0\\fs24 \\cf0 Object}</string>\n-\t\t\t</dict>\n-\t\t</dict>\n \t\t<dict>\n \t\t\t<key>Class</key>\n \t\t\t<string>LineGraphic</string>\n@@ -328,8 +802,8 @@\n \t\t\t<integer>47</integer>\n \t\t\t<key>Points</key>\n \t\t\t<array>\n-\t\t\t\t<string>{314.779, 357.228}</string>\n-\t\t\t\t<string>{131.494, 288.923}</string>\n+\t\t\t\t<string>{314.723, 357.425}</string>\n+\t\t\t\t<string>{109.102, 282.498}</string>\n \t\t\t</array>\n \t\t\t<key>Style</key>\n \t\t\t<dict>\n@@ -353,7 +827,7 @@\n \t\t</dict>\n \t\t<dict>\n \t\t\t<key>Bounds</key>\n-\t\t\t<string>{{65.5, 259}, {68, 36}}</string>\n+\t\t\t<string>{{43, 252.8}, {68, 36}}</string>\n \t\t\t<key>Class</key>\n \t\t\t<string>ShapedGraphic</string>\n \t\t\t<key>ID</key>\n@@ -583,7 +1057,7 @@ Float}</string>\n \t\t</dict>\n \t\t<dict>\n \t\t\t<key>Bounds</key>\n-\t\t\t<string>{{149.5, 349}, {90, 36}}</string>\n+\t\t\t<string>{{147, 349}, {90, 36}}</string>\n \t\t\t<key>Class</key>\n \t\t\t<string>ShapedGraphic</string>\n \t\t\t<key>FontInfo</key>\n@@ -777,8 +1251,10 @@ Double}</string>\n \t\t\t<integer>43</integer>\n \t\t\t<key>Points</key>\n \t\t\t<array>\n-\t\t\t\t<string>{184.014, 472.341}</string>\n-\t\t\t\t<string>{107.486, 295.459}</string>\n+\t\t\t\t<string>{181.195, 472.369}</string>\n+\t\t\t\t<string>{158, 432.8}</string>\n+\t\t\t\t<string>{130, 349}</string>\n+\t\t\t\t<string>{89.48, 289.214}</string>\n \t\t\t</array>\n \t\t\t<key>Style</key>\n \t\t\t<dict>\n@@ -1022,7 +1498,7 @@ Double}</string>\n \t\t\t<integer>31</integer>\n \t\t\t<key>Points</key>\n \t\t\t<array>\n-\t\t\t\t<string>{240, 367}</string>\n+\t\t\t\t<string>{237.5, 367}</string>\n \t\t\t\t<string>{313.5, 367}</string>\n \t\t\t</array>\n \t\t\t<key>Style</key>\n@@ -1057,8 +1533,8 @@ Double}</string>\n \t\t\t<integer>29</integer>\n \t\t\t<key>Points</key>\n \t\t\t<array>\n-\t\t\t\t<string>{192.374, 472.3}</string>\n-\t\t\t\t<string>{194.126, 385.5}</string>\n+\t\t\t\t<string>{192, 472.3}</string>\n+\t\t\t\t<string>{192, 385.5}</string>\n \t\t\t</array>\n \t\t\t<key>Style</key>\n \t\t\t<dict>\n@@ -1199,8 +1675,8 @@ Double}</string>\n \t\t\t<integer>53</integer>\n \t\t\t<key>Points</key>\n \t\t\t<array>\n-\t\t\t\t<string>{163.096, 587.562}</string>\n-\t\t\t\t<string>{128.404, 601.438}</string>\n+\t\t\t\t<string>{77, 472.3}</string>\n+\t\t\t\t<string>{77, 433.3}</string>\n \t\t\t</array>\n \t\t\t<key>Style</key>\n \t\t\t<dict>\n@@ -1234,8 +1710,8 @@ Double}</string>\n \t\t\t<integer>55</integer>\n \t\t\t<key>Points</key>\n \t\t\t<array>\n-\t\t\t\t<string>{99.5, 675.5}</string>\n-\t\t\t\t<string>{99.5, 631.5}</string>\n+\t\t\t\t<string>{77, 357.3}</string>\n+\t\t\t\t<string>{77, 396.3}</string>\n \t\t\t</array>\n \t\t\t<key>Style</key>\n \t\t\t<dict>\n@@ -1269,8 +1745,8 @@ Double}</string>\n \t\t\t<integer>60</integer>\n \t\t\t<key>Points</key>\n \t\t\t<array>\n-\t\t\t\t<string>{99.5, 211.3}</string>\n-\t\t\t\t<string>{99.5, 258.5}</string>\n+\t\t\t\t<string>{77, 205.1}</string>\n+\t\t\t\t<string>{77, 252.3}</string>\n \t\t\t</array>\n \t\t\t<key>Style</key>\n \t\t\t<dict>\n@@ -1292,111 +1768,6 @@ Double}</string>\n \t\t\t\t<integer>59</integer>\n \t\t\t</dict>\n \t\t</dict>\n-\t\t<dict>\n-\t\t\t<key>Class</key>\n-\t\t\t<string>LineGraphic</string>\n-\t\t\t<key>Head</key>\n-\t\t\t<dict>\n-\t\t\t\t<key>ID</key>\n-\t\t\t\t<integer>42</integer>\n-\t\t\t</dict>\n-\t\t\t<key>ID</key>\n-\t\t\t<integer>62</integer>\n-\t\t\t<key>Points</key>\n-\t\t\t<array>\n-\t\t\t\t<string>{99.5, 472.3}</string>\n-\t\t\t\t<string>{99.5, 295.5}</string>\n-\t\t\t</array>\n-\t\t\t<key>Style</key>\n-\t\t\t<dict>\n-\t\t\t\t<key>stroke</key>\n-\t\t\t\t<dict>\n-\t\t\t\t\t<key>HeadArrow</key>\n-\t\t\t\t\t<string>FilledArrow</string>\n-\t\t\t\t\t<key>LineType</key>\n-\t\t\t\t\t<integer>1</integer>\n-\t\t\t\t\t<key>TailArrow</key>\n-\t\t\t\t\t<string>0</string>\n-\t\t\t\t\t<key>Width</key>\n-\t\t\t\t\t<real>4</real>\n-\t\t\t\t</dict>\n-\t\t\t</dict>\n-\t\t\t<key>Tail</key>\n-\t\t\t<dict>\n-\t\t\t\t<key>ID</key>\n-\t\t\t\t<integer>61</integer>\n-\t\t\t</dict>\n-\t\t</dict>\n-\t\t<dict>\n-\t\t\t<key>Class</key>\n-\t\t\t<string>LineGraphic</string>\n-\t\t\t<key>Head</key>\n-\t\t\t<dict>\n-\t\t\t\t<key>ID</key>\n-\t\t\t\t<integer>4</integer>\n-\t\t\t</dict>\n-\t\t\t<key>ID</key>\n-\t\t\t<integer>63</integer>\n-\t\t\t<key>Points</key>\n-\t\t\t<array>\n-\t\t\t\t<string>{130.5, 490.8}</string>\n-\t\t\t\t<string>{164.5, 490.8}</string>\n-\t\t\t</array>\n-\t\t\t<key>Style</key>\n-\t\t\t<dict>\n-\t\t\t\t<key>stroke</key>\n-\t\t\t\t<dict>\n-\t\t\t\t\t<key>HeadArrow</key>\n-\t\t\t\t\t<string>FilledArrow</string>\n-\t\t\t\t\t<key>LineType</key>\n-\t\t\t\t\t<integer>1</integer>\n-\t\t\t\t\t<key>TailArrow</key>\n-\t\t\t\t\t<string>0</string>\n-\t\t\t\t\t<key>Width</key>\n-\t\t\t\t\t<real>4</real>\n-\t\t\t\t</dict>\n-\t\t\t</dict>\n-\t\t\t<key>Tail</key>\n-\t\t\t<dict>\n-\t\t\t\t<key>ID</key>\n-\t\t\t\t<integer>61</integer>\n-\t\t\t</dict>\n-\t\t</dict>\n-\t\t<dict>\n-\t\t\t<key>Class</key>\n-\t\t\t<string>LineGraphic</string>\n-\t\t\t<key>Head</key>\n-\t\t\t<dict>\n-\t\t\t\t<key>ID</key>\n-\t\t\t\t<integer>52</integer>\n-\t\t\t</dict>\n-\t\t\t<key>ID</key>\n-\t\t\t<integer>64</integer>\n-\t\t\t<key>Points</key>\n-\t\t\t<array>\n-\t\t\t\t<string>{99.5, 509.3}</string>\n-\t\t\t\t<string>{99.5, 594.5}</string>\n-\t\t\t</array>\n-\t\t\t<key>Style</key>\n-\t\t\t<dict>\n-\t\t\t\t<key>stroke</key>\n-\t\t\t\t<dict>\n-\t\t\t\t\t<key>HeadArrow</key>\n-\t\t\t\t\t<string>FilledArrow</string>\n-\t\t\t\t\t<key>LineType</key>\n-\t\t\t\t\t<integer>1</integer>\n-\t\t\t\t\t<key>TailArrow</key>\n-\t\t\t\t\t<string>0</string>\n-\t\t\t\t\t<key>Width</key>\n-\t\t\t\t\t<real>4</real>\n-\t\t\t\t</dict>\n-\t\t\t</dict>\n-\t\t\t<key>Tail</key>\n-\t\t\t<dict>\n-\t\t\t\t<key>ID</key>\n-\t\t\t\t<integer>61</integer>\n-\t\t\t</dict>\n-\t\t</dict>\n \t</array>\n \t<key>GridInfo</key>\n \t<dict/>\n@@ -1497,7 +1868,7 @@ Double}</string>\n \t\t</dict>\n \t</array>\n \t<key>ModificationDate</key>\n-\t<string>2007-02-19 08:06:00 -0800</string>\n+\t<string>2007-09-16 20:00:30 -0700</string>\n \t<key>Modifier</key>\n \t<string>Howard Lewis Ship</string>\n \t<key>NotesVisible</key>\n@@ -1559,25 +1930,19 @@ Double}</string>\n \t<key>WindowInfo</key>\n \t<dict>\n \t\t<key>CurrentSheet</key>\n-\t\t<string>0</string>\n+\t\t<integer>0</integer>\n \t\t<key>DrawerOpen</key>\n \t\t<true/>\n \t\t<key>DrawerTab</key>\n \t\t<string>Outline</string>\n \t\t<key>DrawerWidth</key>\n \t\t<real>209</real>\n-\t\t<key>FitInWindow</key>\n-\t\t<false/>\n \t\t<key>Frame</key>\n-\t\t<string>{{512, 388}, {594, 870}}</string>\n-\t\t<key>ShowRuler</key>\n-\t\t<false/>\n-\t\t<key>ShowStatusBar</key>\n-\t\t<true/>\n+\t\t<string>{{343, 69}, {591, 809}}</string>\n \t\t<key>VisibleRegion</key>\n-\t\t<string>{{0, 0}, {579, 756}}</string>\n+\t\t<string>{{0, 61}, {576, 695}}</string>\n \t\t<key>Zoom</key>\n-\t\t<string>1</string>\n+\t\t<real>1</real>\n \t</dict>\n </dict>\n </plist>",
                "additions": 542,
                "raw_url": "https://github.com/apache/tapestry-5/raw/e94a3389e782663e76986c43900d4f04d70920f1/tapestry-ioc/src/images/type-coercer.graffle",
                "status": "modified",
                "changes": 719,
                "deletions": 177,
                "sha": "d8676e91bce3ff4b1a40ffa9fd7a21b76f4f1669",
                "blob_url": "https://github.com/apache/tapestry-5/blob/e94a3389e782663e76986c43900d4f04d70920f1/tapestry-ioc/src/images/type-coercer.graffle",
                "filename": "tapestry-ioc/src/images/type-coercer.graffle",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/images/type-coercer.graffle?ref=e94a3389e782663e76986c43900d4f04d70920f1"
            },
            {
                "patch": "@@ -27,11 +27,11 @@\n import org.apache.tapestry.ioc.AnnotationProvider;\n import org.apache.tapestry.ioc.Configuration;\n import org.apache.tapestry.ioc.MappedConfiguration;\n+import org.apache.tapestry.ioc.ObjectLocator;\n import org.apache.tapestry.ioc.ObjectProvider;\n import org.apache.tapestry.ioc.OrderedConfiguration;\n import org.apache.tapestry.ioc.ServiceBinder;\n import org.apache.tapestry.ioc.ServiceLifecycle;\n-import org.apache.tapestry.ioc.ObjectLocator;\n import org.apache.tapestry.ioc.annotations.InjectService;\n import org.apache.tapestry.ioc.annotations.Value;\n import org.apache.tapestry.ioc.internal.services.ChainBuilderImpl;\n@@ -141,7 +141,7 @@ public static void contributeMasterObjectProvider(\n     }\n \n     /**\n-     * Contributes a set of standard type coercions:\n+     * Contributes a set of standard type coercions to the {@link TypeCoercer} service:\n      * <ul>\n      * <li>Object to String</li>\n      * <li>String to Double</li>\n@@ -166,9 +166,17 @@ public static void contributeMasterObjectProvider(\n      * <li>Object[] to List</li>\n      * <li>Object to List (by wrapping as a singleton list)</li>\n      * <li>Null to List (still null)</li>\n+     * <li>Null to Long (zero)</li>\n+     * <li>Null to BigDecimal (zero)</li>\n+     * <li>Null to BigInteger (zero)</li>\n      * </ul>\n-     * \n-     * @see #buildTypeCoercer(Collection, ComponentInstantiatorSource)\n+     * <p>\n+     * The coercion of String to Long, BigInteger, Double and BigDecimal causes some minor headaches\n+     * when attempting to add coercions from null to various numeric types: we end up having to have\n+     * many more coercions for the null case to prevent null --> String --> BigInteger. This may\n+     * indicate a weakness in the algorithm, in that coercions through String should be considered\n+     * \"weaker\" than other coercions. Alternately, coercions from null may need to be handled\n+     * specially. We'll see if we tweak the algorithm in the future.\n      */\n \n     public static void contributeTypeCoercer(Configuration<CoercionTuple> configuration)\n@@ -324,6 +332,39 @@ public Boolean coerce(Void input)\n             }\n         });\n \n+        add(configuration, void.class, Long.class, new Coercion<Void, Long>()\n+        {\n+            public Long coerce(Void input)\n+            {\n+                return 0l;\n+            }\n+        });\n+\n+        add(configuration, void.class, BigDecimal.class, new Coercion<Void, BigDecimal>()\n+        {\n+\n+            public BigDecimal coerce(Void input)\n+            {\n+                return BigDecimal.ZERO;\n+            }\n+        });\n+\n+        add(configuration, void.class, BigInteger.class, new Coercion<Void, BigInteger>()\n+        {\n+            public BigInteger coerce(Void input)\n+            {\n+                return BigInteger.ZERO;\n+            }\n+        });\n+\n+        add(configuration, void.class, Double.class, new Coercion<Void, Double>()\n+        {\n+            public Double coerce(Void input)\n+            {\n+                return 0d;\n+            }\n+        });\n+\n         add(configuration, Collection.class, Boolean.class, new Coercion<Collection, Boolean>()\n         {\n             public Boolean coerce(Collection input)",
                "additions": 45,
                "raw_url": "https://github.com/apache/tapestry-5/raw/e94a3389e782663e76986c43900d4f04d70920f1/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/TapestryIOCModule.java",
                "status": "modified",
                "changes": 49,
                "deletions": 4,
                "sha": "c9d09b2a637488dac9a5eade1974e8877ea0a6d2",
                "blob_url": "https://github.com/apache/tapestry-5/blob/e94a3389e782663e76986c43900d4f04d70920f1/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/TapestryIOCModule.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/TapestryIOCModule.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry/ioc/services/TapestryIOCModule.java?ref=e94a3389e782663e76986c43900d4f04d70920f1"
            },
            {
                "patch": "@@ -19,8 +19,10 @@ Type Coercion\n   \n [images/type-coercer.png] Default Type Coercions  \n \n-  There's a few special coercions related to null there; Object --\\>List wraps a lone object as a singleton list, we then need\n-  null --\\>List to ensure that null stays null (rather than a singleton list whose lone element is a null).\n+  There's a few special coercions related to null there; Object --\\> List wraps a lone object as a singleton list, we then need\n+  null --\\> List to ensure that null stays null (rather than a singleton list whose lone element is a null).  Likewise, there's\n+  a number of coercions from null to numeric types (null is coerced to zero). Several more of these are needed than you'd think, because otherwise\n+  the coercer attempts to coerce through String.\n   \n   Tapestry can <interpolate> necessary coercions.  For example, say it is necessary to coerce a StringBuffer to an Integer; the\n   TypeCoercer will chain together a series of coercions:",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/e94a3389e782663e76986c43900d4f04d70920f1/tapestry-ioc/src/site/apt/coerce.apt",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "53a9a4f7bb88e3a4b81d601d467e75dbe5982c39",
                "blob_url": "https://github.com/apache/tapestry-5/blob/e94a3389e782663e76986c43900d4f04d70920f1/tapestry-ioc/src/site/apt/coerce.apt",
                "filename": "tapestry-ioc/src/site/apt/coerce.apt",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/site/apt/coerce.apt?ref=e94a3389e782663e76986c43900d4f04d70920f1"
            },
            {
                "additions": 0,
                "raw_url": "https://github.com/apache/tapestry-5/raw/e94a3389e782663e76986c43900d4f04d70920f1/tapestry-ioc/src/site/resources/images/type-coercer.png",
                "status": "modified",
                "changes": 0,
                "deletions": 0,
                "sha": "a8d419a4f65f42f48fda891f7972d6ecb6a9dca3",
                "blob_url": "https://github.com/apache/tapestry-5/blob/e94a3389e782663e76986c43900d4f04d70920f1/tapestry-ioc/src/site/resources/images/type-coercer.png",
                "filename": "tapestry-ioc/src/site/resources/images/type-coercer.png",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/site/resources/images/type-coercer.png?ref=e94a3389e782663e76986c43900d4f04d70920f1"
            },
            {
                "patch": "@@ -180,6 +180,13 @@ public void builtin_coercions(Object input, Class targetType, Object expected)\n                 { new String[]\n                 { \"a\", \"b\" }, List.class, Arrays.asList(\"a\", \"b\") },\n \n+                { null, Long.class, 0l },\n+                { null, Short.class, (short) 0 },\n+                { null, Byte.class, (byte) 0 },\n+                { null, BigDecimal.class, BigDecimal.ZERO },\n+                { null, Float.class, 0f },\n+                { null, BigInteger.class, BigInteger.ZERO },\n+\n                 // null to arbitrary object is still null\n \n                 { null, XMLReader.class, null } };",
                "additions": 7,
                "raw_url": "https://github.com/apache/tapestry-5/raw/e94a3389e782663e76986c43900d4f04d70920f1/tapestry-ioc/src/test/java/org/apache/tapestry/ioc/internal/services/TypeCoercerImplTest.java",
                "status": "modified",
                "changes": 7,
                "deletions": 0,
                "sha": "46ea3b2ac19021dc349148cd37c92f4ccde5d7d1",
                "blob_url": "https://github.com/apache/tapestry-5/blob/e94a3389e782663e76986c43900d4f04d70920f1/tapestry-ioc/src/test/java/org/apache/tapestry/ioc/internal/services/TypeCoercerImplTest.java",
                "filename": "tapestry-ioc/src/test/java/org/apache/tapestry/ioc/internal/services/TypeCoercerImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/test/java/org/apache/tapestry/ioc/internal/services/TypeCoercerImplTest.java?ref=e94a3389e782663e76986c43900d4f04d70920f1"
            }
        ],
        "bug_id": "tapestry-5_31",
        "parent": "https://github.com/apache/tapestry-5/commit/9f761ba3850604eeca0e6d7e99c365dffca69d8e",
        "message": "TAPESTRY-1648: Coercing from null to BigDecimal causes an NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@576241 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/75637ed5301ba133cafca5607b14961fc3f8dfbb",
        "file": [
            {
                "patch": "@@ -1,10 +1,10 @@\n-// Copyright 2006, 2007 The Apache Software Foundation\n+// Copyright 2006, 2007, 2010 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n // You may obtain a copy of the License at\n //\n-//     http://www.apache.org/licenses/LICENSE-2.0\n+// http://www.apache.org/licenses/LICENSE-2.0\n //\n // Unless required by applicable law or agreed to in writing, software\n // distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -15,6 +15,7 @@\n package org.apache.tapestry5.ioc.internal.services;\n \n import org.apache.tapestry5.ioc.services.*;\n+import org.apache.tapestry5.ioc.util.BodyBuilder;\n \n import static java.lang.String.format;\n import java.lang.reflect.Constructor;\n@@ -29,7 +30,7 @@\n     public PropertyShadowBuilderImpl(@Builtin\n     ClassFactory classFactory,\n \n-                                     PropertyAccess propertyAccess)\n+    PropertyAccess propertyAccess)\n     {\n         this.classFactory = classFactory;\n         this.propertyAccess = propertyAccess;\n@@ -38,8 +39,7 @@ public PropertyShadowBuilderImpl(@Builtin\n     public <T> T build(Object source, String propertyName, Class<T> propertyType)\n     {\n         Class sourceClass = source.getClass();\n-        PropertyAdapter adapter = propertyAccess.getAdapter(sourceClass).getPropertyAdapter(\n-                propertyName);\n+        PropertyAdapter adapter = propertyAccess.getAdapter(sourceClass).getPropertyAdapter(propertyName);\n \n         // TODO: Perhaps extend ClassPropertyAdapter to do these checks?\n \n@@ -50,23 +50,33 @@ public PropertyShadowBuilderImpl(@Builtin\n             throw new RuntimeException(ServiceMessages.readNotSupported(source, propertyName));\n \n         if (!propertyType.isAssignableFrom(adapter.getType()))\n-            throw new RuntimeException(ServiceMessages.propertyTypeMismatch(\n-                    propertyName,\n-                    sourceClass,\n-                    adapter.getType(),\n-                    propertyType));\n+            throw new RuntimeException(ServiceMessages.propertyTypeMismatch(propertyName, sourceClass,\n+                    adapter.getType(), propertyType));\n \n         ClassFab cf = classFactory.newClass(propertyType);\n \n         cf.addField(\"_source\", Modifier.PRIVATE | Modifier.FINAL, sourceClass);\n \n         cf.addConstructor(new Class[]\n-                { sourceClass }, null, \"_source = $1;\");\n+        { sourceClass }, null, \"_source = $1;\");\n+\n+        BodyBuilder body = new BodyBuilder();\n+        body.begin();\n+\n+        body.addln(\"%s result = _source.%s();\", sourceClass.getName(), adapter.getReadMethod().getName());\n+\n+        body.addln(\"if (result == null)\");\n+        body.begin();\n+        body.addln(\"throw new NullPointerException(%s.buildMessage(_source, \\\"%s\\\"));\", getClass().getName(),\n+                propertyName);\n+        body.end();\n+\n+        body.addln(\"return result;\");\n \n-        String body = format(\"return _source.%s();\", adapter.getReadMethod().getName());\n+        body.end();\n \n         MethodSignature sig = new MethodSignature(propertyType, \"_delegate\", null, null);\n-        cf.addMethod(Modifier.PRIVATE, sig, body);\n+        cf.addMethod(Modifier.PRIVATE, sig, body.toString());\n \n         String toString = format(\"<Shadow: property %s of %s>\", propertyName, source);\n \n@@ -90,4 +100,8 @@ public PropertyShadowBuilderImpl(@Builtin\n \n     }\n \n+    public static final String buildMessage(Object source, String propertyName)\n+    {\n+        return String.format(\"Unable to delegate method invocation to property '%s' of %s, because the property is null.\", propertyName, source);\n+    }\n }",
                "additions": 27,
                "raw_url": "https://github.com/apache/tapestry-5/raw/75637ed5301ba133cafca5607b14961fc3f8dfbb/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/services/PropertyShadowBuilderImpl.java",
                "status": "modified",
                "changes": 40,
                "deletions": 13,
                "sha": "f06a8e98bdab2cdb0a4377123e616388fdbffdbf",
                "blob_url": "https://github.com/apache/tapestry-5/blob/75637ed5301ba133cafca5607b14961fc3f8dfbb/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/services/PropertyShadowBuilderImpl.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/services/PropertyShadowBuilderImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/services/PropertyShadowBuilderImpl.java?ref=75637ed5301ba133cafca5607b14961fc3f8dfbb"
            },
            {
                "patch": "@@ -1,10 +1,10 @@\n-// Copyright 2006, 2007 The Apache Software Foundation\n+// Copyright 2006, 2007, 2010 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n // You may obtain a copy of the License at\n //\n-//     http://www.apache.org/licenses/LICENSE-2.0\n+// http://www.apache.org/licenses/LICENSE-2.0\n //\n // Unless required by applicable law or agreed to in writing, software\n // distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -112,6 +112,25 @@ public void basic_delegation()\n         assertEquals(shadow.toString(), \"<Shadow: property foo of [FooHolder]>\");\n     }\n \n+    @Test\n+    public void property_is_null()\n+    {\n+        FooHolder holder = new FooHolder();\n+\n+        Foo shadow = builder.build(holder, \"foo\", Foo.class);\n+\n+        try\n+        {\n+            shadow.foo();\n+            unreachable();\n+        }\n+        catch (NullPointerException ex)\n+        {\n+            assertEquals(ex.getMessage(),\n+                    \"Unable to delegate method invocation to property 'foo' of [FooHolder], because the property is null.\");\n+        }\n+    }\n+\n     @Test\n     public void property_does_not_exist()\n     {\n@@ -124,8 +143,7 @@ public void property_does_not_exist()\n         }\n         catch (RuntimeException ex)\n         {\n-            assertEquals(ex.getMessage(),\n-                         \"Class \" + CLASS_NAME + \"$FooHolder does not contain a property named 'bar'.\");\n+            assertEquals(ex.getMessage(), \"Class \" + CLASS_NAME + \"$FooHolder does not contain a property named 'bar'.\");\n         }\n     }\n \n@@ -141,8 +159,8 @@ public void property_type_mismatch()\n         }\n         catch (RuntimeException ex)\n         {\n-            assertEquals(ex.getMessage(),\n-                         \"Property 'count' of class \" + CLASS_NAME + \"$FooHolder is of type int, which is not assignable to type java.util.Map.\");\n+            assertEquals(ex.getMessage(), \"Property 'count' of class \" + CLASS_NAME\n+                    + \"$FooHolder is of type int, which is not assignable to type java.util.Map.\");\n         }\n     }\n \n@@ -158,8 +176,8 @@ public void property_write_only()\n         }\n         catch (RuntimeException ex)\n         {\n-            assertEquals(ex.getMessage(),\n-                         \"Class \" + CLASS_NAME + \"$FooHolder does not provide an accessor ('getter') method for property 'writeOnly'.\");\n+            assertEquals(ex.getMessage(), \"Class \" + CLASS_NAME\n+                    + \"$FooHolder does not provide an accessor ('getter') method for property 'writeOnly'.\");\n         }\n     }\n }",
                "additions": 26,
                "raw_url": "https://github.com/apache/tapestry-5/raw/75637ed5301ba133cafca5607b14961fc3f8dfbb/tapestry-ioc/src/test/java/org/apache/tapestry5/ioc/services/PropertyShadowBuilderImplTest.java",
                "status": "modified",
                "changes": 34,
                "deletions": 8,
                "sha": "fbae24cf5d3ea4650dc3fde24ba20ed66c91a6d2",
                "blob_url": "https://github.com/apache/tapestry-5/blob/75637ed5301ba133cafca5607b14961fc3f8dfbb/tapestry-ioc/src/test/java/org/apache/tapestry5/ioc/services/PropertyShadowBuilderImplTest.java",
                "filename": "tapestry-ioc/src/test/java/org/apache/tapestry5/ioc/services/PropertyShadowBuilderImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/test/java/org/apache/tapestry5/ioc/services/PropertyShadowBuilderImplTest.java?ref=75637ed5301ba133cafca5607b14961fc3f8dfbb"
            }
        ],
        "bug_id": "tapestry-5_32",
        "parent": "https://github.com/apache/tapestry-5/commit/124eb4a1f9678951a61a354084cee6ec92589f38",
        "message": "TAP5-1304: When using PropertyShadowBuilder to build a service, if the property is null, an immediate exception is needed (rather than a NullPointerException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@1022252 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/d6ec57978c781d12d40d3ee4f08641fc4320f320",
        "file": [
            {
                "patch": "@@ -37,7 +37,7 @@\n  *\n  * @see BeanBlockSource\n  */\n-public class AbstractPropertyOutput\n+public abstract class AbstractPropertyOutput\n {\n     /**\n      * Model for property displayed by the cell.\n@@ -130,11 +130,18 @@ public String getPropertyName()\n         return false;\n     }\n \n-    private Object readPropertyForObject()\n+    Object readPropertyForObject()\n     {\n         PropertyConduit conduit = _model.getConduit();\n \n-        return conduit == null ? null : conduit.get(_object);\n+        try\n+        {\n+            return conduit == null ? null : conduit.get(_object);\n+        }\n+        catch (final NullPointerException ex)\n+        {\n+            throw new NullPointerException(BaseMessages.nullValueInPath(_model.getPropertyName()));\n+        }\n     }\n \n     private Messages getOverrideMessages()\n@@ -159,4 +166,10 @@ void afterRender()\n         }\n     }\n \n+    // Used for testing.\n+    void inject(final PropertyModel model, final Object object)\n+    {\n+        _model = model;\n+        _object = object;\n+    }\n }",
                "additions": 16,
                "raw_url": "https://github.com/apache/tapestry-5/raw/d6ec57978c781d12d40d3ee4f08641fc4320f320/tapestry-core/src/main/java/org/apache/tapestry/corelib/base/AbstractPropertyOutput.java",
                "status": "modified",
                "changes": 19,
                "deletions": 3,
                "sha": "6825f77a8fb81b184500992b0a8d8950ccb3a470",
                "blob_url": "https://github.com/apache/tapestry-5/blob/d6ec57978c781d12d40d3ee4f08641fc4320f320/tapestry-core/src/main/java/org/apache/tapestry/corelib/base/AbstractPropertyOutput.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/corelib/base/AbstractPropertyOutput.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/corelib/base/AbstractPropertyOutput.java?ref=d6ec57978c781d12d40d3ee4f08641fc4320f320"
            },
            {
                "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2008 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry.corelib.base;\n+\n+import org.apache.tapestry.ioc.Messages;\n+import org.apache.tapestry.ioc.internal.util.MessagesImpl;\n+\n+public final class BaseMessages\n+{\n+    private static final Messages MESSAGES = MessagesImpl.forClass(BaseMessages.class);\n+\n+    public static String nullValueInPath(final String path)\n+    {\n+        return MESSAGES.format(\"null-value-in-path\", path);\n+    }\n+}",
                "additions": 28,
                "raw_url": "https://github.com/apache/tapestry-5/raw/d6ec57978c781d12d40d3ee4f08641fc4320f320/tapestry-core/src/main/java/org/apache/tapestry/corelib/base/BaseMessages.java",
                "status": "added",
                "changes": 28,
                "deletions": 0,
                "sha": "d8263bfc6eaea17ea08939800577715ecedf0370",
                "blob_url": "https://github.com/apache/tapestry-5/blob/d6ec57978c781d12d40d3ee4f08641fc4320f320/tapestry-core/src/main/java/org/apache/tapestry/corelib/base/BaseMessages.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry/corelib/base/BaseMessages.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry/corelib/base/BaseMessages.java?ref=d6ec57978c781d12d40d3ee4f08641fc4320f320"
            },
            {
                "patch": "@@ -0,0 +1,15 @@\n+# Copyright 2008 The Apache Software Foundation\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+null-value-in-path=Property '%s' contains a null value in the path.\n\\ No newline at end of file",
                "additions": 15,
                "raw_url": "https://github.com/apache/tapestry-5/raw/d6ec57978c781d12d40d3ee4f08641fc4320f320/tapestry-core/src/main/resources/org/apache/tapestry/corelib/base/BaseStrings.properties",
                "status": "added",
                "changes": 15,
                "deletions": 0,
                "sha": "5c48f3b68e9f03414fc5d28676f6f8f507f70850",
                "blob_url": "https://github.com/apache/tapestry-5/blob/d6ec57978c781d12d40d3ee4f08641fc4320f320/tapestry-core/src/main/resources/org/apache/tapestry/corelib/base/BaseStrings.properties",
                "filename": "tapestry-core/src/main/resources/org/apache/tapestry/corelib/base/BaseStrings.properties",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/resources/org/apache/tapestry/corelib/base/BaseStrings.properties?ref=d6ec57978c781d12d40d3ee4f08641fc4320f320"
            },
            {
                "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2008 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry.corelib.base;\n+\n+import org.testng.annotations.Test;\n+import org.apache.tapestry.beaneditor.PropertyModel;\n+import org.apache.tapestry.internal.test.InternalBaseTestCase;\n+import org.apache.tapestry.PropertyConduit;\n+\n+public class AbstractPropertyOutputTest extends InternalBaseTestCase\n+{\n+    private final AbstractPropertyOutput propertyOutputFixture = new AbstractPropertyOutput()\n+    {\n+    };\n+\n+    @Test\n+    // Tests TAPESTRY-2182.\n+    public void test_null_pointer_exception_message()\n+    {\n+        final PropertyConduit conduit = mockPropertyConduit();\n+        final PropertyModel model = mockPropertyModel();\n+        final Object object = new Object();\n+\n+        propertyOutputFixture.inject(model, object);\n+\n+        expect(model.getConduit()).andReturn(conduit);\n+        expect(conduit.get(object)).andThrow(new NullPointerException());\n+        expect(model.getPropertyName()).andReturn(\"wilma.occupation.address\");\n+\n+        replay();\n+\n+        try\n+        {\n+            propertyOutputFixture.readPropertyForObject();\n+\n+            fail(\"Expected a NullPointerException to be thrown.\");\n+        }\n+        catch (final NullPointerException ex)\n+        {\n+            assertEquals(ex.getMessage(), \"Property 'wilma.occupation.address' contains a null value in the path.\");\n+        }\n+\n+        verify();\n+    }\n+}",
                "additions": 57,
                "raw_url": "https://github.com/apache/tapestry-5/raw/d6ec57978c781d12d40d3ee4f08641fc4320f320/tapestry-core/src/test/java/org/apache/tapestry/corelib/base/AbstractPropertyOutputTest.java",
                "status": "added",
                "changes": 57,
                "deletions": 0,
                "sha": "231fa34736a5ec0b49b81dec9aec2e29bfc832e1",
                "blob_url": "https://github.com/apache/tapestry-5/blob/d6ec57978c781d12d40d3ee4f08641fc4320f320/tapestry-core/src/test/java/org/apache/tapestry/corelib/base/AbstractPropertyOutputTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry/corelib/base/AbstractPropertyOutputTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry/corelib/base/AbstractPropertyOutputTest.java?ref=d6ec57978c781d12d40d3ee4f08641fc4320f320"
            }
        ],
        "bug_id": "tapestry-5_33",
        "parent": "https://github.com/apache/tapestry-5/commit/b2098962388c52ac1f44d4979bb21d5b57be647b",
        "message": "Fixed TAPESTRY-2182: NullPointerExceptions, due to reading nested properties that do not suppress null values, do not indicate problematic expression for AbstractPropertyOutput derivatives.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@630376 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/5f76acd1ca67144680de109a8b706a6f1e84eb2a",
        "file": [
            {
                "patch": "@@ -14,11 +14,6 @@\n \n package org.apache.tapestry5.internal.jpa;\n \n-import javax.persistence.EntityManager;\n-import javax.persistence.metamodel.EntityType;\n-import javax.persistence.metamodel.SingularAttribute;\n-import javax.persistence.metamodel.Type;\n-\n import org.apache.tapestry5.ValueEncoder;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n import org.apache.tapestry5.ioc.services.PropertyAccess;\n@@ -27,6 +22,11 @@\n import org.apache.tapestry5.jpa.EntityManagerManager;\n import org.slf4j.Logger;\n \n+import javax.persistence.EntityManager;\n+import javax.persistence.metamodel.EntityType;\n+import javax.persistence.metamodel.SingularAttribute;\n+import javax.persistence.metamodel.Type;\n+\n public class JpaValueEncoder<E> implements ValueEncoder<E>\n {\n     private final EntityType<E> entity;\n@@ -52,7 +52,7 @@ public JpaValueEncoder(final EntityType<E> entity,\n \n         final SingularAttribute<? super E, ?> idAttribute = this.entity.getId(idType.getJavaType());\n \n-        idPropertyName = idAttribute.getJavaMember().getName();\n+        idPropertyName = idAttribute.getName();\n \n         propertyAdapter = propertyAccess.getAdapter(entity.getJavaType()).getPropertyAdapter(\n                 idPropertyName);",
                "additions": 6,
                "raw_url": "https://github.com/apache/tapestry-5/raw/5f76acd1ca67144680de109a8b706a6f1e84eb2a/tapestry-jpa/src/main/java/org/apache/tapestry5/internal/jpa/JpaValueEncoder.java",
                "status": "modified",
                "changes": 12,
                "deletions": 6,
                "sha": "38f0b6894b01470b5c9da40fa123f938d2b0f536",
                "blob_url": "https://github.com/apache/tapestry-5/blob/5f76acd1ca67144680de109a8b706a6f1e84eb2a/tapestry-jpa/src/main/java/org/apache/tapestry5/internal/jpa/JpaValueEncoder.java",
                "filename": "tapestry-jpa/src/main/java/org/apache/tapestry5/internal/jpa/JpaValueEncoder.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-jpa/src/main/java/org/apache/tapestry5/internal/jpa/JpaValueEncoder.java?ref=5f76acd1ca67144680de109a8b706a6f1e84eb2a"
            },
            {
                "patch": "@@ -14,16 +14,16 @@\n \n package org.apache.tapestry5.internal.jpa;\n \n-import java.io.InputStream;\n-import java.util.List;\n-\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n import org.apache.tapestry5.jpa.TapestryPersistenceUnitInfo;\n import org.xml.sax.InputSource;\n import org.xml.sax.XMLReader;\n import org.xml.sax.helpers.XMLReaderFactory;\n \n-class PersistenceParser\n+import java.io.InputStream;\n+import java.util.List;\n+\n+public class PersistenceParser\n {\n \n     public List<TapestryPersistenceUnitInfo> parse(final InputStream stream)",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/5f76acd1ca67144680de109a8b706a6f1e84eb2a/tapestry-jpa/src/main/java/org/apache/tapestry5/internal/jpa/PersistenceParser.java",
                "status": "modified",
                "changes": 8,
                "deletions": 4,
                "sha": "cf2402fb09abb79dd3b63c7341b3567b19f1e928",
                "blob_url": "https://github.com/apache/tapestry-5/blob/5f76acd1ca67144680de109a8b706a6f1e84eb2a/tapestry-jpa/src/main/java/org/apache/tapestry5/internal/jpa/PersistenceParser.java",
                "filename": "tapestry-jpa/src/main/java/org/apache/tapestry5/internal/jpa/PersistenceParser.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-jpa/src/main/java/org/apache/tapestry5/internal/jpa/PersistenceParser.java?ref=5f76acd1ca67144680de109a8b706a6f1e84eb2a"
            },
            {
                "patch": "@@ -22,8 +22,6 @@\n @Entity\n public class User\n {\n-    @Id\n-    @GeneratedValue\n     private Long id;\n \n     private String firstName;\n@@ -34,7 +32,6 @@\n \n     private String encodedPassword;\n \n-    @Version\n     private int version;\n \n     public String getEmail()\n@@ -52,6 +49,8 @@ public String getFirstName()\n         return firstName;\n     }\n \n+     @Id\n+    @GeneratedValue\n     public Long getId()\n     {\n         return id;\n@@ -62,28 +61,39 @@ public String getLastName()\n         return lastName;\n     }\n \n+    @Version\n     public int getVersion()\n     {\n         return version;\n     }\n \n+    public void setId(Long id)\n+    {\n+        this.id = id;\n+    }\n+\n     public void setEmail(final String email)\n     {\n         this.email = email;\n-    }\n+}\n \n     public void setEncodedPassword(final String encodedPassword)\n     {\n         this.encodedPassword = encodedPassword;\n-    }\n+}\n \n     public void setFirstName(final String firstName)\n     {\n         this.firstName = firstName;\n-    }\n+}\n \n     public void setLastName(final String lastName)\n     {\n         this.lastName = lastName;\n+}\n+\n+    public void setVersion(int version)\n+    {\n+        this.version = version;\n     }\n }",
                "additions": 16,
                "raw_url": "https://github.com/apache/tapestry-5/raw/5f76acd1ca67144680de109a8b706a6f1e84eb2a/tapestry-jpa/src/test/java/org/example/app1/entities/User.java",
                "status": "modified",
                "changes": 22,
                "deletions": 6,
                "sha": "fb7e2f1c2f236c3994d530db5e212759fcab4572",
                "blob_url": "https://github.com/apache/tapestry-5/blob/5f76acd1ca67144680de109a8b706a6f1e84eb2a/tapestry-jpa/src/test/java/org/example/app1/entities/User.java",
                "filename": "tapestry-jpa/src/test/java/org/example/app1/entities/User.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-jpa/src/test/java/org/example/app1/entities/User.java?ref=5f76acd1ca67144680de109a8b706a6f1e84eb2a"
            }
        ],
        "bug_id": "tapestry-5_34",
        "parent": "https://github.com/apache/tapestry-5/commit/f85c16bf5e126d7f9d5c803873a26865b0a162ef",
        "message": "TAP5-1699: JpaValueEncoder.toValue throws NPE when mapping annotations are placed on methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@1186134 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/f8b57907a174903377e554a9174def8351646c75",
        "file": [
            {
                "patch": "@@ -27,9 +27,9 @@\n /**\n  * A default implementation of TreeModel that starts with a {@link ValueEncoder} (for the element to string conversion),\n  * a {@link TreeModelAdapter}, and a list of root nodes.\n- * <p>\n+ * <p/>\n  * This implementation is <em>not</em> thread safe.\n- * \n+ *\n  * @param <T>\n  * @since 5.3\n  */\n@@ -86,7 +86,15 @@ public boolean getHasChildren()\n         public List<TreeNode<T>> getChildren()\n         {\n             if (children == null)\n-                children = F.flow(adapter.getChildren(value)).map(toTreeNode).toList();\n+            {\n+                List<T> childValues = adapter.getChildren(value);\n+\n+                boolean empty = childValues == null || childValues.isEmpty();\n+\n+                children = empty\n+                        ? emptyTreeNodeList()\n+                        : F.flow(childValues).map(toTreeNode).toList();\n+            }\n \n             return children;\n         }\n@@ -96,17 +104,19 @@ public String getLabel()\n             return adapter.getLabel(value);\n         }\n \n+        private List<TreeNode<T>> emptyTreeNodeList()\n+        {\n+            return Collections.emptyList();\n+        }\n+\n     }\n \n     /**\n      * Creates a new model starting from a single root element.\n-     * \n-     * @param encoder\n-     *            used to convert values to strings and vice-versa\n-     * @param adapter\n-     *            adapts elements to the tree\n-     * @param root\n-     *            defines the root node of the model\n+     *\n+     * @param encoder used to convert values to strings and vice-versa\n+     * @param adapter adapts elements to the tree\n+     * @param root    defines the root node of the model\n      */\n     public DefaultTreeModel(ValueEncoder<T> encoder, TreeModelAdapter<T> adapter, T root)\n     {\n@@ -115,13 +125,10 @@ public DefaultTreeModel(ValueEncoder<T> encoder, TreeModelAdapter<T> adapter, T\n \n     /**\n      * Standard constructor.\n-     * \n-     * @param encoder\n-     *            used to convert values to strings and vice-versa\n-     * @param adapter\n-     *            adapts elements to the tree\n-     * @param roots\n-     *            defines the root nodes of the model\n+     *\n+     * @param encoder used to convert values to strings and vice-versa\n+     * @param adapter adapts elements to the tree\n+     * @param roots   defines the root nodes of the model\n      */\n     public DefaultTreeModel(ValueEncoder<T> encoder, TreeModelAdapter<T> adapter, List<T> roots)\n     {",
                "additions": 24,
                "raw_url": "https://github.com/apache/tapestry-5/raw/f8b57907a174903377e554a9174def8351646c75/tapestry-core/src/main/java/org/apache/tapestry5/tree/DefaultTreeModel.java",
                "status": "modified",
                "changes": 41,
                "deletions": 17,
                "sha": "8d59724f49db08f66084a7088b7e312230108d25",
                "blob_url": "https://github.com/apache/tapestry-5/blob/f8b57907a174903377e554a9174def8351646c75/tapestry-core/src/main/java/org/apache/tapestry5/tree/DefaultTreeModel.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/tree/DefaultTreeModel.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/tree/DefaultTreeModel.java?ref=f8b57907a174903377e554a9174def8351646c75"
            },
            {
                "patch": "@@ -18,35 +18,36 @@\n \n /**\n  * Used with {@link DefaultTreeModel} to define how to extract labels and child nodes from a value.\n- * \n+ *\n  * @since 5.3\n  */\n public interface TreeModelAdapter<T>\n {\n     /**\n      * Determines if the value is a leaf or a (potential) container of children.\n-     * \n+     *\n      * @see TreeNode#isLeaf()\n      */\n     boolean isLeaf(T value);\n \n     /**\n      * Returns true if the value has children (only invoked for non-leaf values).\n-     * \n+     *\n      * @see TreeNode#getHasChildren()\n      */\n     boolean hasChildren(T value);\n \n     /**\n      * Returns the children, in the order they should be presented to the client.\n-     * \n+     * This should return the childen in the correct presentation or, or return null or an empty list.\n+     *\n      * @see TreeNode#getChildren()\n      */\n     List<T> getChildren(T value);\n \n     /**\n      * Returns a text label for the value, which may be presented to the client.\n-     * \n+     *\n      * @see TreeNode#getLabel()\n      */\n     String getLabel(T value);",
                "additions": 6,
                "raw_url": "https://github.com/apache/tapestry-5/raw/f8b57907a174903377e554a9174def8351646c75/tapestry-core/src/main/java/org/apache/tapestry5/tree/TreeModelAdapter.java",
                "status": "modified",
                "changes": 11,
                "deletions": 5,
                "sha": "95612c6e312bdc82ab00faa882fe3d1f2ddf1b8c",
                "blob_url": "https://github.com/apache/tapestry-5/blob/f8b57907a174903377e554a9174def8351646c75/tapestry-core/src/main/java/org/apache/tapestry5/tree/TreeModelAdapter.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/tree/TreeModelAdapter.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/tree/TreeModelAdapter.java?ref=f8b57907a174903377e554a9174def8351646c75"
            },
            {
                "patch": "@@ -28,7 +28,7 @@\n \n     public final String name;\n \n-    public final List<Stuff> children = CollectionFactory.newList();\n+    public List<Stuff> children;\n \n     public Stuff(String name)\n     {\n@@ -39,14 +39,19 @@ public Stuff addChildrenNamed(String... names)\n     {\n         for (String name : names)\n         {\n-            children.add(new Stuff(name));\n+            addChild(new Stuff(name));\n         }\n \n         return this;\n     }\n \n     public Stuff addChild(Stuff child)\n     {\n+        if (children == null)\n+        {\n+            children = CollectionFactory.newList();\n+        }\n+\n         children.add(child);\n \n         return this;\n@@ -87,7 +92,8 @@ public Stuff seek(String uuid)\n         ROOT.addChild(numbers);\n     }\n \n-    public static TreeModel<Stuff> createTreeModel() {\n+    public static TreeModel<Stuff> createTreeModel()\n+    {\n         ValueEncoder<Stuff> encoder = new StuffValueEncoder();\n \n         return new DefaultTreeModel<Stuff>(encoder, new StuffTreeModelAdapter(), Stuff.ROOT.children);",
                "additions": 9,
                "raw_url": "https://github.com/apache/tapestry-5/raw/f8b57907a174903377e554a9174def8351646c75/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/Stuff.java",
                "status": "modified",
                "changes": 12,
                "deletions": 3,
                "sha": "23d7cec030f80d4fb8235185e390907871c73f59",
                "blob_url": "https://github.com/apache/tapestry-5/blob/f8b57907a174903377e554a9174def8351646c75/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/Stuff.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/Stuff.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/Stuff.java?ref=f8b57907a174903377e554a9174def8351646c75"
            },
            {
                "patch": "@@ -14,20 +14,20 @@\n \n package org.apache.tapestry5.integration.app1;\n \n-import java.util.List;\n-\n import org.apache.tapestry5.tree.TreeModelAdapter;\n \n+import java.util.List;\n+\n public class StuffTreeModelAdapter implements TreeModelAdapter<Stuff>\n {\n     public boolean isLeaf(Stuff value)\n     {\n-        return value.children.isEmpty();\n+        return !hasChildren(value);\n     }\n \n     public boolean hasChildren(Stuff value)\n     {\n-        return !value.children.isEmpty();\n+        return value.children != null && !value.children.isEmpty();\n     }\n \n     public List<Stuff> getChildren(Stuff value)",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/f8b57907a174903377e554a9174def8351646c75/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/StuffTreeModelAdapter.java",
                "status": "modified",
                "changes": 8,
                "deletions": 4,
                "sha": "e5fd89376b6bb297b2ff557e54e90d940e96c533",
                "blob_url": "https://github.com/apache/tapestry-5/blob/f8b57907a174903377e554a9174def8351646c75/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/StuffTreeModelAdapter.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/StuffTreeModelAdapter.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/StuffTreeModelAdapter.java?ref=f8b57907a174903377e554a9174def8351646c75"
            }
        ],
        "bug_id": "tapestry-5_35",
        "parent": "https://github.com/apache/tapestry-5/commit/7f54c6d07953959e1c69d9f75e1de51fd2088521",
        "message": "TAP5-1630: A TreeModelAdapter that returns null from getChildren() causes an NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@1185333 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/c5a65947d5a6bfae9791d77718996e935e95c2de",
        "file": [
            {
                "patch": "@@ -14,15 +14,10 @@\n \n package org.apache.tapestry5.ioc.internal;\n \n-import org.apache.tapestry5.ioc.Invokable;\n-import org.apache.tapestry5.ioc.ModuleBuilderSource;\n-import org.apache.tapestry5.ioc.ObjectLocator;\n-import org.apache.tapestry5.ioc.OperationTracker;\n-import org.apache.tapestry5.ioc.ServiceResources;\n+import org.apache.tapestry5.ioc.*;\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.apache.tapestry5.ioc.internal.util.InjectionResources;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n-import org.apache.tapestry5.ioc.services.ClassFactory;\n import org.apache.tapestry5.ioc.services.PlasticProxyFactory;\n import org.slf4j.Logger;\n \n@@ -32,7 +27,7 @@\n \n /**\n  * Based class for service decorators and service advisors that work by invoking a module method.\n- * \n+ *\n  * @since 5.1.0.0\n  */\n public class AbstractMethodInvokingInstrumenter\n@@ -54,7 +49,7 @@\n     private final Logger logger;\n \n     public AbstractMethodInvokingInstrumenter(ModuleBuilderSource moduleSource, Method method,\n-            ServiceResources resources, PlasticProxyFactory proxyFactory)\n+                                              ServiceResources resources, PlasticProxyFactory proxyFactory)\n     {\n         this.moduleSource = moduleSource;\n         this.method = method;\n@@ -76,7 +71,9 @@ public AbstractMethodInvokingInstrumenter(ModuleBuilderSource moduleSource, Meth\n     @Override\n     public String toString()\n     {\n-        return proxyFactory.getMethodLocation(method).toString();\n+        Location location = proxyFactory.getMethodLocation(method);\n+\n+        return location.toString();\n     }\n \n     private Object getModuleInstance()\n@@ -108,12 +105,10 @@ public Object invoke()\n                             injectionResources, resources.getTracker());\n \n                     result = method.invoke(getModuleInstance(), parameters);\n-                }\n-                catch (InvocationTargetException ite)\n+                } catch (InvocationTargetException ite)\n                 {\n                     failure = ite.getTargetException();\n-                }\n-                catch (Exception ex)\n+                } catch (Exception ex)\n                 {\n                     failure = ex;\n                 }",
                "additions": 8,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c5a65947d5a6bfae9791d77718996e935e95c2de/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/AbstractMethodInvokingInstrumenter.java",
                "status": "modified",
                "changes": 21,
                "deletions": 13,
                "sha": "a006b7ccb468850cbae79925192ad40567383e1d",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c5a65947d5a6bfae9791d77718996e935e95c2de/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/AbstractMethodInvokingInstrumenter.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/AbstractMethodInvokingInstrumenter.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/AbstractMethodInvokingInstrumenter.java?ref=c5a65947d5a6bfae9791d77718996e935e95c2de"
            },
            {
                "patch": "@@ -14,34 +14,21 @@\n \n package org.apache.tapestry5.ioc.internal.services;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Member;\n-import java.lang.reflect.Method;\n-import java.util.List;\n-\n import org.apache.tapestry5.internal.plastic.PlasticInternalUtils;\n import org.apache.tapestry5.internal.plastic.asm.Type;\n-import org.apache.tapestry5.internal.plastic.asm.tree.AbstractInsnNode;\n-import org.apache.tapestry5.internal.plastic.asm.tree.ClassNode;\n-import org.apache.tapestry5.internal.plastic.asm.tree.InsnList;\n-import org.apache.tapestry5.internal.plastic.asm.tree.LineNumberNode;\n-import org.apache.tapestry5.internal.plastic.asm.tree.MethodNode;\n+import org.apache.tapestry5.internal.plastic.asm.tree.*;\n import org.apache.tapestry5.ioc.Location;\n import org.apache.tapestry5.ioc.ObjectCreator;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n import org.apache.tapestry5.ioc.services.PlasticProxyFactory;\n-import org.apache.tapestry5.plastic.ClassInstantiator;\n-import org.apache.tapestry5.plastic.InstructionBuilder;\n-import org.apache.tapestry5.plastic.InstructionBuilderCallback;\n-import org.apache.tapestry5.plastic.PlasticClass;\n-import org.apache.tapestry5.plastic.PlasticClassListener;\n-import org.apache.tapestry5.plastic.PlasticClassTransformation;\n-import org.apache.tapestry5.plastic.PlasticClassTransformer;\n-import org.apache.tapestry5.plastic.PlasticField;\n-import org.apache.tapestry5.plastic.PlasticManager;\n-import org.apache.tapestry5.plastic.PlasticMethod;\n+import org.apache.tapestry5.plastic.*;\n import org.slf4j.Logger;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n public class PlasticProxyFactoryImpl implements PlasticProxyFactory\n {\n     private final Logger logger;\n@@ -145,13 +132,8 @@ public Location getConstructorLocation(Constructor constructor)\n \n         String constructorDescription = builder.toString();\n \n-        Location location = getMemberLocation(constructor, \"<init>\", Type.getConstructorDescriptor(constructor),\n+        return getMemberLocation(constructor, \"<init>\", Type.getConstructorDescriptor(constructor),\n                 constructorDescription);\n-\n-        if (location != null)\n-            return location;\n-\n-        return new StringLocation(builder.toString(), 0);\n     }\n \n     public Location getMemberLocation(Member member, String methodName, String memberTypeDesc, String textDescription)\n@@ -170,8 +152,13 @@ public Location getMemberLocation(Member member, String methodName, String membe\n             {\n                 int lineNumber = findFirstLineNumber(mn.instructions);\n \n+                // If debugging info is not available, we may lose the line number data, in which case,\n+                // just generate the Location from the textDescription.\n+\n                 if (lineNumber < 1)\n-                    return null;\n+                {\n+                    break;\n+                }\n \n                 String description = String.format(\"%s (at %s:%d)\", textDescription, classNode.sourceFile, lineNumber);\n \n@@ -181,14 +168,17 @@ public Location getMemberLocation(Member member, String methodName, String membe\n \n         // Didn't find it. Odd.\n \n-        return null;\n+        return new StringLocation(textDescription, 0);\n     }\n \n     private int findFirstLineNumber(InsnList instructions)\n     {\n         for (AbstractInsnNode node = instructions.getFirst(); node != null; node = node.getNext())\n         {\n-            if (node instanceof LineNumberNode) { return ((LineNumberNode) node).line; }\n+            if (node instanceof LineNumberNode)\n+            {\n+                return ((LineNumberNode) node).line;\n+            }\n         }\n \n         return -1;",
                "additions": 19,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c5a65947d5a6bfae9791d77718996e935e95c2de/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/services/PlasticProxyFactoryImpl.java",
                "status": "modified",
                "changes": 48,
                "deletions": 29,
                "sha": "b40b76333a097a2427d25ae9c82773fb9cb29cb7",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c5a65947d5a6bfae9791d77718996e935e95c2de/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/services/PlasticProxyFactoryImpl.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/services/PlasticProxyFactoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/internal/services/PlasticProxyFactoryImpl.java?ref=c5a65947d5a6bfae9791d77718996e935e95c2de"
            },
            {
                "patch": "@@ -14,20 +14,20 @@\n \n package org.apache.tapestry5.ioc.services;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Method;\n-\n import org.apache.tapestry5.ioc.Location;\n import org.apache.tapestry5.ioc.ObjectCreator;\n import org.apache.tapestry5.plastic.ClassInstantiator;\n import org.apache.tapestry5.plastic.PlasticClassListenerHub;\n import org.apache.tapestry5.plastic.PlasticClassTransformation;\n import org.apache.tapestry5.plastic.PlasticClassTransformer;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+\n /**\n  * A service used to create proxies of varying types. As a secondary concern, manages to identify the\n  * location of methods and constructors, which is important for exception reporting.\n- * \n+ *\n  * @since 5.3\n  */\n public interface PlasticProxyFactory extends PlasticClassListenerHub\n@@ -41,11 +41,9 @@\n     /**\n      * Creates a proxy object that implements the indicated interface, then invokes the callback to further\n      * configure the proxy.\n-     * \n-     * @param interfaceType\n-     *            interface implemented by proxy\n-     * @param callback\n-     *            configures the proxy\n+     *\n+     * @param interfaceType interface implemented by proxy\n+     * @param callback      configures the proxy\n      * @return instantiator that can be used to create an instance of the proxy class\n      */\n     <T> ClassInstantiator<T> createProxy(Class<T> interfaceType, PlasticClassTransformer callback);\n@@ -54,9 +52,8 @@\n      * Creates the underlying {@link PlasticClassTransformation} for an interface proxy. This should only be\n      * used in the cases where encapsulating the PlasticClass construction into a {@linkplain PlasticClassTransformer\n      * callback} is not feasible (which is the case for some of the older APIs inside Tapestry IoC).\n-     * \n-     * @param interfaceType\n-     *            class proxy will extend from\n+     *\n+     * @param interfaceType class proxy will extend from\n      * @return transformation from which an instantiator may be created\n      */\n     <T> PlasticClassTransformation<T> createProxyTransformation(Class<T> interfaceType);\n@@ -66,31 +63,28 @@\n      * ObjectCreator. Each method invocation on the proxy will route through {@link ObjectCreator#createObject()} (the\n      * creator implementation may decide to\n      * cache the return value as appropriate).\n-     * \n-     * @param <T>\n-     *            type of proxy\n-     * @param interfaceType\n-     *            interface class for proxy\n-     * @param creator\n-     *            object responsible for creating the real object\n-     * @param description\n-     *            the <code>toString()</code> of the proxy\n+     *\n+     * @param <T>           type of proxy\n+     * @param interfaceType interface class for proxy\n+     * @param creator       object responsible for creating the real object\n+     * @param description   the <code>toString()</code> of the proxy\n      * @return proxy instance\n      */\n     <T> T createProxy(Class<T> interfaceType, ObjectCreator<T> creator, String description);\n \n     /**\n      * Converts a method to a {@link Location}, which includes information about the source file name and line number.\n-     * \n-     * @param method\n-     *            to look up\n-     * @return the location, or null if the necessary information is not available\n+     *\n+     * @param method to look up\n+     * @return the location (identifying the method and possibly, the line number within the method)\n      */\n     Location getMethodLocation(Method method);\n \n     /**\n      * Return a string representation for the constructor (including class and parameters) and (if available) file name\n      * and line number.\n+     *\n+     * @return the location (identifying the constructor and possibly, the line number within the method)\n      */\n     Location getConstructorLocation(Constructor constructor);\n }",
                "additions": 19,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c5a65947d5a6bfae9791d77718996e935e95c2de/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/services/PlasticProxyFactory.java",
                "status": "modified",
                "changes": 44,
                "deletions": 25,
                "sha": "e8099c3b122e7f22a4f473946fef1f64886ab682",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c5a65947d5a6bfae9791d77718996e935e95c2de/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/services/PlasticProxyFactory.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/services/PlasticProxyFactory.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/services/PlasticProxyFactory.java?ref=c5a65947d5a6bfae9791d77718996e935e95c2de"
            }
        ],
        "bug_id": "tapestry-5_36",
        "parent": "https://github.com/apache/tapestry-5/commit/65f1c83fcbc1a75b529f04c2db512eebe33b872a",
        "message": "Add some logic to chase down the ProQuest deployment issue, where they get a NPE inside AbstractMethodInvokingInstrumenter.toString()\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@1155054 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/618698856d6f723eec20c8c76d98aa35f637d6c1",
        "file": [
            {
                "patch": "@@ -639,11 +639,13 @@ var Tapestry = {\n \t\tif (attrs) {\n \t\t\tvar l = attrs.length, i, name;\n \t\t\tfor (i = 0; i < l; i++) {\n-\t\t\t\tname = attrs[i].name;\n-\t\t\t\t/* Looking for onclick, etc. */\n-\t\t\t\tif (typeof element[name] == 'function') {\n-\t\t\t\t\telement[name] = null;\n-\t\t\t\t}\n+                if (attrs[i]) {\n+                    name = attrs[i].name;\n+                    /* Looking for onclick, etc. */\n+                    if (typeof element[name] == 'function') {\n+                        element[name] = null;\n+                    }\n+                }\n \t\t\t}\n \t\t}\n ",
                "additions": 7,
                "raw_url": "https://github.com/apache/tapestry-5/raw/618698856d6f723eec20c8c76d98aa35f637d6c1/tapestry-core/src/main/resources/org/apache/tapestry5/tapestry.js",
                "status": "modified",
                "changes": 12,
                "deletions": 5,
                "sha": "e1af8dd0e2b3d007235199855b85ef8c4d8f49aa",
                "blob_url": "https://github.com/apache/tapestry-5/blob/618698856d6f723eec20c8c76d98aa35f637d6c1/tapestry-core/src/main/resources/org/apache/tapestry5/tapestry.js",
                "filename": "tapestry-core/src/main/resources/org/apache/tapestry5/tapestry.js",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/resources/org/apache/tapestry5/tapestry.js?ref=618698856d6f723eec20c8c76d98aa35f637d6c1"
            }
        ],
        "bug_id": "tapestry-5_37",
        "parent": "https://github.com/apache/tapestry-5/commit/84c38c995beb54e5f6b4d9ea103699d8724e8837",
        "message": "TAP5-1210: Prevent NPE in Internet Explorer during MultiZone update with a Form\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@965876 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/adb9786545f04a57e37babf12088021a35024759",
        "file": [
            {
                "patch": "@@ -252,7 +252,7 @@ public Double coerce(Long input)\n         {\n             public Boolean coerce(String input)\n             {\n-                String trimmed = input.trim();\n+                String trimmed = input == null ? \"\" : input.trim();\n \n                 if (trimmed.equalsIgnoreCase(\"false\") || trimmed.length() == 0) return false;\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/adb9786545f04a57e37babf12088021a35024759/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/services/TapestryIOCModule.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "e9792397e217bf49ddd7377ea1e2f4c04a4958c5",
                "blob_url": "https://github.com/apache/tapestry-5/blob/adb9786545f04a57e37babf12088021a35024759/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/services/TapestryIOCModule.java",
                "filename": "tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/services/TapestryIOCModule.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/main/java/org/apache/tapestry5/ioc/services/TapestryIOCModule.java?ref=adb9786545f04a57e37babf12088021a35024759"
            },
            {
                "patch": "@@ -282,6 +282,7 @@ public void builtin_coercions(Object input, Class targetType, Object expected)\n         { StringBuffer.class, Integer.class, \"Object --> String, String --> Long, Long --> Integer\" },\n         { void.class, Map.class, \"null --> null\" },\n         { void.class, Boolean.class, \"null --> Boolean\" },\n+        { Object[].class, Boolean.class, \"Object[] --> java.util.List, java.util.Collection --> Boolean\" },\n         { String[].class, List.class, \"Object[] --> java.util.List\" },\n         { Float.class, Double.class, \"Float --> Double\" },\n         { Double.class, BigDecimal.class, \"Object --> String, String --> java.math.BigDecimal\" }, };\n@@ -307,4 +308,25 @@ public void collection_to_object_array()\n \n         assertArraysEqual(result, input.toArray());\n     }\n+\n+    /** TAP5-1141 */\n+    @Test\n+    public void object_whose_toString_returns_null_to_boolean()\n+    {\n+        Object idiot = new Object()\n+        {\n+            public String toString()\n+            {\n+                return null;\n+            }\n+        };\n+\n+        // To be honest, the proper result here is up for grabs. The object is not null, so you'd kind of think that the\n+        // result should be true ... but the rules are to look for a known coercion, and it finds Object --> String,\n+        // String --> Boolean. Converting a null String is the same as an empty String : false.\n+\n+        assertFalse(coercer.coerce(idiot, Boolean.class));\n+\n+        assertEquals(coercer.explain(idiot.getClass(), Boolean.class), \"Object --> String, String --> Boolean\");\n+    }\n }",
                "additions": 22,
                "raw_url": "https://github.com/apache/tapestry-5/raw/adb9786545f04a57e37babf12088021a35024759/tapestry-ioc/src/test/java/org/apache/tapestry5/ioc/internal/services/TypeCoercerImplTest.java",
                "status": "modified",
                "changes": 22,
                "deletions": 0,
                "sha": "0946060e9e2c0f87cbbc8f91a844e08e167fc997",
                "blob_url": "https://github.com/apache/tapestry-5/blob/adb9786545f04a57e37babf12088021a35024759/tapestry-ioc/src/test/java/org/apache/tapestry5/ioc/internal/services/TypeCoercerImplTest.java",
                "filename": "tapestry-ioc/src/test/java/org/apache/tapestry5/ioc/internal/services/TypeCoercerImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-ioc/src/test/java/org/apache/tapestry5/ioc/internal/services/TypeCoercerImplTest.java?ref=adb9786545f04a57e37babf12088021a35024759"
            }
        ],
        "bug_id": "tapestry-5_38",
        "parent": "https://github.com/apache/tapestry-5/commit/19311c3b674122f3a5c434cbbbd972ce5719a043",
        "message": "TAP5-1141: Type coercion from arbitrary object to Boolean will NPE when the object's toString() returns null (should coerce to false)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@942905 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/b0dfecd4a68c4f7f96bb605aa03694d4b641b547",
        "file": [
            {
                "patch": "@@ -1,10 +1,10 @@\n-// Copyright 2008 The Apache Software Foundation\n+// Copyright 2008, 2010 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n // You may obtain a copy of the License at\n //\n-//     http://www.apache.org/licenses/LICENSE-2.0\n+// http://www.apache.org/licenses/LICENSE-2.0\n //\n // Unless required by applicable law or agreed to in writing, software\n // distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,6 +19,7 @@\n import org.apache.tapestry5.annotations.SupportsInformalParameters;\n import org.apache.tapestry5.dom.Element;\n import org.apache.tapestry5.ioc.annotations.Inject;\n+import org.apache.tapestry5.services.javascript.JavascriptSupport;\n \n /**\n  * Renders an arbitrary element including informal parameters.\n@@ -43,7 +44,7 @@\n     private ComponentResources resources;\n \n     @Inject\n-    private RenderSupport renderSupport;\n+    private JavascriptSupport javascriptSupport;\n \n     String defaultElement()\n     {\n@@ -60,18 +61,23 @@ void beginRender(MarkupWriter writer)\n     }\n \n     /**\n-     * Returns the client id.  This has side effects: this first time this is called (after the Any component renders\n+     * Returns the client id. This has side effects: this first time this is called (after the Any component renders\n      * its start tag), a unique id is allocated (based on, and typically the same as, the clientId parameter, which\n      * defaults to the component's id). The rendered element is updated, with its id attribute set to the unique client\n      * id, which is then returned.\n-     *\n+     * \n      * @return unique client id for this component\n      */\n     public String getClientId()\n     {\n+        if (anyElement == null)\n+            throw new IllegalStateException(String.format(\n+                    \"Unable to provide client id for component %s as it has not yet rendered.\", resources\n+                            .getCompleteId()));\n+\n         if (uniqueId == null)\n         {\n-            uniqueId = renderSupport.allocateClientId(clientId);\n+            uniqueId = javascriptSupport.allocateClientId(clientId);\n             anyElement.forceAttributes(\"id\", uniqueId);\n         }\n \n@@ -83,9 +89,9 @@ void afterRender(MarkupWriter writer)\n         writer.end(); // the element\n     }\n \n-    void inject(RenderSupport support, ComponentResources resources, String element, String clientId)\n+    void inject(JavascriptSupport javascriptSupport, ComponentResources resources, String element, String clientId)\n     {\n-        this.renderSupport = support;\n+        this.javascriptSupport = javascriptSupport;\n         this.resources = resources;\n         this.element = element;\n         this.clientId = clientId;",
                "additions": 14,
                "raw_url": "https://github.com/apache/tapestry-5/raw/b0dfecd4a68c4f7f96bb605aa03694d4b641b547/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Any.java",
                "status": "modified",
                "changes": 22,
                "deletions": 8,
                "sha": "ac5f956772acc8a5773d497d2431b650c97171fe",
                "blob_url": "https://github.com/apache/tapestry-5/blob/b0dfecd4a68c4f7f96bb605aa03694d4b641b547/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Any.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Any.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Any.java?ref=b0dfecd4a68c4f7f96bb605aa03694d4b641b547"
            },
            {
                "patch": "@@ -1,10 +1,10 @@\n-// Copyright 2008 The Apache Software Foundation\n+// Copyright 2008, 2010 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n // You may obtain a copy of the License at\n //\n-//     http://www.apache.org/licenses/LICENSE-2.0\n+// http://www.apache.org/licenses/LICENSE-2.0\n //\n // Unless required by applicable law or agreed to in writing, software\n // distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,9 +16,9 @@\n \n import org.apache.tapestry5.ComponentResources;\n import org.apache.tapestry5.MarkupWriter;\n-import org.apache.tapestry5.RenderSupport;\n import org.apache.tapestry5.dom.DefaultMarkupModel;\n import org.apache.tapestry5.internal.services.MarkupWriterImpl;\n+import org.apache.tapestry5.services.javascript.JavascriptSupport;\n import org.apache.tapestry5.test.TapestryTestCase;\n import org.testng.annotations.Test;\n \n@@ -28,7 +28,7 @@\n     public void render_simple()\n     {\n         ComponentResources resources = mockComponentResources();\n-        RenderSupport support = mockRenderSupport();\n+        JavascriptSupport support = mockJavascriptSupport();\n \n         MarkupWriter writer = new MarkupWriterImpl(new DefaultMarkupModel());\n \n@@ -52,7 +52,7 @@ public void render_simple()\n     public void render_with_id()\n     {\n         ComponentResources resources = mockComponentResources();\n-        RenderSupport support = mockRenderSupport();\n+        JavascriptSupport support = mockJavascriptSupport();\n \n         MarkupWriter writer = new MarkupWriterImpl(new DefaultMarkupModel());\n \n@@ -80,6 +80,34 @@ public void render_with_id()\n \n         assertEquals(component.getClientId(), uniqueId);\n \n+        verify();\n+    }\n+\n+    @Test\n+    public void attempt_to_get_client_id_before_render()\n+    {\n+        ComponentResources resources = mockComponentResources();\n+        JavascriptSupport support = mockJavascriptSupport();\n+\n+        train_getCompleteId(resources, \"Foo/bar.baz\");\n+\n+        replay();\n+\n+        Any component = new Any();\n+\n+        component.inject(support, resources, \"div\", null);\n+\n+        try\n+        {\n+            component.getClientId();\n+            unreachable();\n+        }\n+        catch (IllegalStateException ex)\n+        {\n+            assertEquals(ex.getMessage(),\n+                    \"Unable to provide client id for component Foo/bar.baz as it has not yet rendered.\");\n+        }\n+\n         verify();\n \n     }",
                "additions": 33,
                "raw_url": "https://github.com/apache/tapestry-5/raw/b0dfecd4a68c4f7f96bb605aa03694d4b641b547/tapestry-core/src/test/java/org/apache/tapestry5/corelib/components/AnyTest.java",
                "status": "modified",
                "changes": 38,
                "deletions": 5,
                "sha": "463c8ba3c00af3b3fa81ba81a25b1140b44e0127",
                "blob_url": "https://github.com/apache/tapestry-5/blob/b0dfecd4a68c4f7f96bb605aa03694d4b641b547/tapestry-core/src/test/java/org/apache/tapestry5/corelib/components/AnyTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/corelib/components/AnyTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/corelib/components/AnyTest.java?ref=b0dfecd4a68c4f7f96bb605aa03694d4b641b547"
            }
        ],
        "bug_id": "tapestry-5_39",
        "parent": "https://github.com/apache/tapestry-5/commit/ed3561518dfd4860075c05a81e018297de960611",
        "message": "TAP5-1031: NPE from Any component when invoking getClientId() before the component renders\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@939873 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/964a070f5965233d7622c045e3fea5c84fb6b984",
        "file": [
            {
                "patch": "@@ -259,14 +259,23 @@ protected void waitForCSSSelectedElementToAppear(String cssRule)\n     @AfterClass(alwaysRun = true)\n     public void cleanup() throws Exception\n     {\n-        selenium.stop();\n-        selenium = null;\n-\n-        server.stop();\n-        server = null;\n-\n-        jettyRunner.stop();\n-        jettyRunner = null;\n+    \tif (selenium!=null) \n+    \t{\n+    \t\tselenium.stop();\n+    \t\tselenium = null;\n+    \t}\n+\n+    \tif (server!=null)\n+    \t{\n+    \t\tserver.stop();\n+    \t\tserver = null;\n+    \t}\n+\n+    \tif (jettyRunner!=null)\n+    \t{\n+    \t\tjettyRunner.stop();\n+    \t\tjettyRunner = null;\n+    \t}\n     }\n \n     @BeforeClass(alwaysRun = true)",
                "additions": 17,
                "raw_url": "https://github.com/apache/tapestry-5/raw/964a070f5965233d7622c045e3fea5c84fb6b984/tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java",
                "status": "modified",
                "changes": 25,
                "deletions": 8,
                "sha": "8f988ebd07b6ca920af79142fea48981d0dd9f4d",
                "blob_url": "https://github.com/apache/tapestry-5/blob/964a070f5965233d7622c045e3fea5c84fb6b984/tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java",
                "filename": "tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java?ref=964a070f5965233d7622c045e3fea5c84fb6b984"
            }
        ],
        "bug_id": "tapestry-5_40",
        "parent": "https://github.com/apache/tapestry-5/commit/4e8b857d0b17a50da63414ae3618eae3b3acfbee",
        "message": "Don't allow NPE when selenium tests weren't able to start\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@883122 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/d786aead1a5067095bbe0295b9f1f4b8a40b2124",
        "file": [
            {
                "patch": "@@ -14,6 +14,8 @@\n \n package org.apache.tapestry5.dom;\n \n+import org.apache.tapestry5.ioc.internal.util.Defense;\n+\n public abstract class AbstractMarkupModel implements MarkupModel\n {\n     private final boolean useApostropheForAttributes;\n@@ -91,6 +93,8 @@ public String encode(String content)\n \n     public void encodeQuoted(String content, StringBuilder builder)\n     {\n+        Defense.notNull(content, \"content\");\n+\n         int length = content.length();\n \n         for (int i = 0; i < length; i++)",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/d786aead1a5067095bbe0295b9f1f4b8a40b2124/tapestry-core/src/main/java/org/apache/tapestry5/dom/AbstractMarkupModel.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "c1f4c0c588fde4a1679ecae6efe4d09eb544450c",
                "blob_url": "https://github.com/apache/tapestry-5/blob/d786aead1a5067095bbe0295b9f1f4b8a40b2124/tapestry-core/src/main/java/org/apache/tapestry5/dom/AbstractMarkupModel.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/dom/AbstractMarkupModel.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/dom/AbstractMarkupModel.java?ref=d786aead1a5067095bbe0295b9f1f4b8a40b2124"
            },
            {
                "patch": "@@ -157,6 +157,10 @@ private void updateAttribute(String namespace, String name, String value, boolea\n             cursor = cursor.nextAttribute;\n         }\n \n+        //  Don't add a Attribute if the value is null.\n+\n+        if (value == null) return;\n+\n         firstAttribute = new Attribute(this, namespace, name, value, firstAttribute);\n     }\n \n@@ -181,7 +185,8 @@ public Element attributes(String... namesAndValues)\n     }\n \n     /**\n-     * Forces changes to a number of attributes. The new attributes <em>overwrite</em> previous values.\n+     * Forces changes to a number of attributes. The new attributes <em>overwrite</em> previous values. Overriding an\n+     * attribute's value to null will remove the attribute entirely.\n      */\n     public Element forceAttributes(String... namesAndValues)\n     {",
                "additions": 6,
                "raw_url": "https://github.com/apache/tapestry-5/raw/d786aead1a5067095bbe0295b9f1f4b8a40b2124/tapestry-core/src/main/java/org/apache/tapestry5/dom/Element.java",
                "status": "modified",
                "changes": 7,
                "deletions": 1,
                "sha": "a66695121418b202ac65a1a4fc8185f68831969f",
                "blob_url": "https://github.com/apache/tapestry-5/blob/d786aead1a5067095bbe0295b9f1f4b8a40b2124/tapestry-core/src/main/java/org/apache/tapestry5/dom/Element.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/dom/Element.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/dom/Element.java?ref=d786aead1a5067095bbe0295b9f1f4b8a40b2124"
            },
            {
                "patch": "@@ -18,8 +18,8 @@\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.testng.annotations.Test;\n \n-import java.util.List;\n import java.util.Collection;\n+import java.util.List;\n \n /**\n  * Tests for a number of DOM node classes, including {@link org.apache.tapestry5.dom.Element} and {@link\n@@ -849,4 +849,19 @@ public void get_attributes()\n         assertEquals(attribute.getName(), \"fred\");\n         assertEquals(attribute.getValue(), \"flintstone\");\n     }\n+\n+    /**\n+     * TAP5-636\n+     */\n+    @Test\n+    public void force_null_for_first_attribute_is_noop()\n+    {\n+        Document d = new Document();\n+\n+        Element root = d.newRootElement(\"root\");\n+\n+        root.forceAttributes(\"null\", null);\n+\n+        assertEquals(root.toString(), \"<root></root>\");\n+    }\n }",
                "additions": 16,
                "raw_url": "https://github.com/apache/tapestry-5/raw/d786aead1a5067095bbe0295b9f1f4b8a40b2124/tapestry-core/src/test/java/org/apache/tapestry5/dom/DOMTest.java",
                "status": "modified",
                "changes": 17,
                "deletions": 1,
                "sha": "29deea1851cf0e394d9d604ff985058d3a3bbc9d",
                "blob_url": "https://github.com/apache/tapestry-5/blob/d786aead1a5067095bbe0295b9f1f4b8a40b2124/tapestry-core/src/test/java/org/apache/tapestry5/dom/DOMTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/dom/DOMTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/dom/DOMTest.java?ref=d786aead1a5067095bbe0295b9f1f4b8a40b2124"
            }
        ],
        "bug_id": "tapestry-5_41",
        "parent": "https://github.com/apache/tapestry-5/commit/de28eff896ba78ceafe59ff30834037dee3cb475",
        "message": "TAP5-636: Using Element.forceAttribute() with a null value can cause a later NPE during rendering under some circumstances\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@763334 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/1001156c1eed7f1fb2d1da7808bec55cad54ba17",
        "file": [
            {
                "patch": "@@ -14,46 +14,55 @@\n \n package org.apache.tapestry.internal.hibernate;\n \n-import java.io.Serializable;\n-\n import org.apache.tapestry.ValueEncoder;\n import org.apache.tapestry.ioc.internal.util.Defense;\n+import org.apache.tapestry.ioc.internal.util.InternalUtils;\n import org.apache.tapestry.ioc.services.TypeCoercer;\n import org.hibernate.Session;\n import org.hibernate.mapping.PersistentClass;\n import org.hibernate.mapping.Property;\n import org.hibernate.property.Getter;\n \n+import java.io.Serializable;\n+\n public final class HibernateEntityValueEncoder<E> implements ValueEncoder<E> {\n-\tprivate final Class<E> _entityClass;\n-\tprivate final PersistentClass _persistentClass;\n-\tprivate final Session _session;\n-\tprivate final TypeCoercer _typeCoercer;\n-\tprivate final Getter _idGetter;\n-\t\n-\tpublic HibernateEntityValueEncoder(Class<E> entityClass, PersistentClass persistentClass, Session session, TypeCoercer typeCoercer) {\n-\t\tsuper();\n-\t\t_entityClass = entityClass;\n-\t\t_persistentClass = persistentClass;\n-\t\t_session = session;\n-\t\t_typeCoercer = typeCoercer;\n-\t\t\n-\t\tProperty property = _persistentClass.getIdentifierProperty();\n-\t\t_idGetter = property.getPropertyAccessor(_entityClass).getGetter(_entityClass, property.getName());\n-\t}\n-\t\t\n-\tpublic String toClient(E value) {\n-\t\tObject id = _idGetter.get(value);\n-\t\treturn _typeCoercer.coerce(id, String.class);\n-\t}\n-\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic E toValue(String clientValue) {\n-\t\tClass<?> idType = _idGetter.getReturnType();\n-\t\t\n-\t\tObject id = _typeCoercer.coerce(clientValue, idType);\n-\t\tSerializable ser = Defense.cast(id, Serializable.class, \"id\");\n-\t\treturn (E)_session.get(_entityClass, ser);\n-\t}\n-\t\n+    private final Class<E> _entityClass;\n+    private final PersistentClass _persistentClass;\n+    private final Session _session;\n+    private final TypeCoercer _typeCoercer;\n+    private final Getter _idGetter;\n+\n+    public HibernateEntityValueEncoder(Class<E> entityClass, PersistentClass persistentClass, Session session, TypeCoercer typeCoercer) {\n+        super();\n+        _entityClass = entityClass;\n+        _persistentClass = persistentClass;\n+        _session = session;\n+        _typeCoercer = typeCoercer;\n+\n+        Property property = _persistentClass.getIdentifierProperty();\n+        _idGetter = property.getPropertyAccessor(_entityClass).getGetter(_entityClass, property.getName());\n+    }\n+\n+    public String toClient(E value) {\n+\n+        if (value == null) return null;\n+\n+        Object id = _idGetter.get(value);\n+\n+        return _typeCoercer.coerce(id, String.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public E toValue(String clientValue) {\n+\n+        if (InternalUtils.isBlank(clientValue)) return null;\n+\n+\n+        Class<?> idType = _idGetter.getReturnType();\n+\n+        Object id = _typeCoercer.coerce(clientValue, idType);\n+        Serializable ser = Defense.cast(id, Serializable.class, \"id\");\n+        return (E) _session.get(_entityClass, ser);\n+    }\n+\n }",
                "additions": 42,
                "raw_url": "https://github.com/apache/tapestry-5/raw/1001156c1eed7f1fb2d1da7808bec55cad54ba17/tapestry-hibernate/src/main/java/org/apache/tapestry/internal/hibernate/HibernateEntityValueEncoder.java",
                "status": "modified",
                "changes": 75,
                "deletions": 33,
                "sha": "d1f29e61f7934d7ad9d315f4bed0809318fdbc5e",
                "blob_url": "https://github.com/apache/tapestry-5/blob/1001156c1eed7f1fb2d1da7808bec55cad54ba17/tapestry-hibernate/src/main/java/org/apache/tapestry/internal/hibernate/HibernateEntityValueEncoder.java",
                "filename": "tapestry-hibernate/src/main/java/org/apache/tapestry/internal/hibernate/HibernateEntityValueEncoder.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-hibernate/src/main/java/org/apache/tapestry/internal/hibernate/HibernateEntityValueEncoder.java?ref=1001156c1eed7f1fb2d1da7808bec55cad54ba17"
            }
        ],
        "bug_id": "tapestry-5_42",
        "parent": "https://github.com/apache/tapestry-5/commit/f7b09d7449aa3da94427e9d9bbed802b6febcd80",
        "message": "TAPESTRY-2260: Null relationships cause an NPE inside Hibernate when being value encoded by RadioGroup\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@637271 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/55550c88e607acc5ef7ffc31e77e37162f49c3b9",
        "file": [
            {
                "patch": "@@ -0,0 +1,27 @@\n+<html t:type=\"Border\"\n+      xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_0_0.xsd\">\n+\n+    <h1>Boolean Property Access Demo</h1>\n+\n+    <p>\n+        Both\n+        <code>is</code>\n+        and\n+        <code>get</code>\n+        prefixes work.\n+    </p>\n+\n+    <dl>\n+        <dt>flagUsingGet</dt>\n+        <dd id=\"usingGet\">${flagUsingGet}</dd>\n+        <dt>flagUsingIs</dt>\n+        <dd id=\"usingIs\">${flagUsingIs}</dd>\n+    </dl>\n+\n+    <p>\n+        <t:actionlink t:id=\"set\">set</t:actionlink>\n+        |\n+        <t:actionlink t:id=\"clear\">clear</t:actionlink>\n+    </p>\n+\n+</html>\n\\ No newline at end of file",
                "additions": 27,
                "raw_url": "https://github.com/apache/tapestry-5/raw/55550c88e607acc5ef7ffc31e77e37162f49c3b9/tapestry-core/src/test/app1/BooleanDemo.tml",
                "status": "added",
                "changes": 27,
                "deletions": 0,
                "sha": "4e5c434d17b65ad588ca72e48a2bf84b7dc0f9f4",
                "blob_url": "https://github.com/apache/tapestry-5/blob/55550c88e607acc5ef7ffc31e77e37162f49c3b9/tapestry-core/src/test/app1/BooleanDemo.tml",
                "filename": "tapestry-core/src/test/app1/BooleanDemo.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/app1/BooleanDemo.tml?ref=55550c88e607acc5ef7ffc31e77e37162f49c3b9"
            },
            {
                "patch": "@@ -1623,6 +1623,22 @@ public void delete_rows_from_grid()\n \n         for (int i = 1; i <= 5; i++)\n             assertTextPresent(\"ToDo #\" + i);\n+    }\n+\n+    /**\n+     * TAPESTRY-2114\n+     */\n+    @Test\n+    public void boolean_properties_can_user_get_or_is()\n+    {\n+        start(\"Boolean Property Demo\", \"clear\");\n+\n+        assertText(\"usingGet\", \"false\");\n+        assertText(\"usingIs\", \"false\");\n+\n+        clickAndWait(\"set\");\n \n+        assertText(\"usingGet\", \"true\");\n+        assertText(\"usingIs\", \"true\");\n     }\n }",
                "additions": 16,
                "raw_url": "https://github.com/apache/tapestry-5/raw/55550c88e607acc5ef7ffc31e77e37162f49c3b9/tapestry-core/src/test/java/org/apache/tapestry/integration/IntegrationTests.java",
                "status": "modified",
                "changes": 16,
                "deletions": 0,
                "sha": "00f1f2c06a841b06431f345886166ad09690fc3b",
                "blob_url": "https://github.com/apache/tapestry-5/blob/55550c88e607acc5ef7ffc31e77e37162f49c3b9/tapestry-core/src/test/java/org/apache/tapestry/integration/IntegrationTests.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry/integration/IntegrationTests.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry/integration/IntegrationTests.java?ref=55550c88e607acc5ef7ffc31e77e37162f49c3b9"
            },
            {
                "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2008 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+\n+package org.apache.tapestry.integration.app1.pages;\n+\n+import org.apache.tapestry.annotations.Persist;\n+\n+public class BooleanDemo\n+{\n+    @Persist\n+    private boolean _flag;\n+\n+    public boolean getFlagUsingGet() { return _flag; }\n+\n+    public boolean isFlagUsingIs() { return _flag; }\n+\n+    public void onActionFromSet() { _flag = true; }\n+\n+    public void onActionFromClear() { _flag = false; }\n+}",
                "additions": 32,
                "raw_url": "https://github.com/apache/tapestry-5/raw/55550c88e607acc5ef7ffc31e77e37162f49c3b9/tapestry-core/src/test/java/org/apache/tapestry/integration/app1/pages/BooleanDemo.java",
                "status": "added",
                "changes": 32,
                "deletions": 0,
                "sha": "58a7e4ff901afc38075f86e8f07eb5a49429d805",
                "blob_url": "https://github.com/apache/tapestry-5/blob/55550c88e607acc5ef7ffc31e77e37162f49c3b9/tapestry-core/src/test/java/org/apache/tapestry/integration/app1/pages/BooleanDemo.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry/integration/app1/pages/BooleanDemo.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry/integration/app1/pages/BooleanDemo.java?ref=55550c88e607acc5ef7ffc31e77e37162f49c3b9"
            },
            {
                "patch": "@@ -61,6 +61,8 @@ public int compareTo(Item o)\n     private static final List<Item> ITEMS = CollectionFactory.newList(\n             new Item(\"actionpage\", \"Action Page\", \"tests fixture for ActionLink component\"),\n \n+            new Item(\"BooleanDemo\", \"Boolean Property Demo\", \"demo boolean properties using both is and get prefixes\"),\n+\n             new Item(\"DeleteFromGridDemo\", \"Delete From Grid\", \"demo deleting items form a Grid\"),\n \n             new Item(\"RenderErrorDemo\", \"Render Error Demo\", \"reporting of errors while rendering\"),",
                "additions": 2,
                "raw_url": "https://github.com/apache/tapestry-5/raw/55550c88e607acc5ef7ffc31e77e37162f49c3b9/tapestry-core/src/test/java/org/apache/tapestry/integration/app1/pages/Start.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "e2d9323f138cb4a45a3f59168f25e6433d032492",
                "blob_url": "https://github.com/apache/tapestry-5/blob/55550c88e607acc5ef7ffc31e77e37162f49c3b9/tapestry-core/src/test/java/org/apache/tapestry/integration/app1/pages/Start.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry/integration/app1/pages/Start.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry/integration/app1/pages/Start.java?ref=55550c88e607acc5ef7ffc31e77e37162f49c3b9"
            }
        ],
        "bug_id": "tapestry-5_43",
        "parent": "https://github.com/apache/tapestry-5/commit/bd7555acf2c0757b9fd14809f2c1c6932ddac758",
        "message": "TAPESTRY-2114: Boolean property named 'getX' used in .tml causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@619730 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/808c1fdfc9663aa95246379c5eebcc1c95c68cb5",
        "file": [
            {
                "patch": "@@ -125,7 +125,14 @@ private MessageFormatter findFormatter(String overrideId, Messages overrideMessa\n             return overrideMessages.getFormatter(overrideKey);\n \n         // Otherwise, use the built-in validation message appropriate to this validator.\n+        String messageKey = translator.getMessageKey();\n \n-        return globalMessages.getFormatter(translator.getMessageKey());\n+        // If no key has been specified, use translator name to create a key\n+        if(messageKey == null)\n+        {\n+            messageKey = translatorName + \"-message\";\n+        }\n+\n+        return globalMessages.getFormatter(messageKey);\n     }\n }",
                "additions": 8,
                "raw_url": "https://github.com/apache/tapestry-5/raw/808c1fdfc9663aa95246379c5eebcc1c95c68cb5/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImpl.java",
                "status": "modified",
                "changes": 9,
                "deletions": 1,
                "sha": "ec7e8038eccf404feab1c85d7d7a80fb7824fd56",
                "blob_url": "https://github.com/apache/tapestry-5/blob/808c1fdfc9663aa95246379c5eebcc1c95c68cb5/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImpl.java?ref=808c1fdfc9663aa95246379c5eebcc1c95c68cb5"
            },
            {
                "patch": "@@ -112,6 +112,50 @@ private AnnotationProvider mockAnnotationProvider(String translatorName)\n         return ap;\n     }\n \n+    @Test\n+    public void create_default_translator_with_name_and_null_key()\n+    {\n+        Field field = mockField();\n+        Messages messages = mockMessages();\n+        Locale locale = Locale.ENGLISH;\n+        Class propertyType = Map.class;\n+        TranslatorSource ts = mockTranslatorSource();\n+        FormSupport fs = mockFormSupport();\n+        Translator translator = mockTranslator(\"maptrans\", Map.class);\n+        Messages globalMessages = mockMessages();\n+        MessageFormatter formatter = mockMessageFormatter();\n+        MarkupWriter writer = mockMarkupWriter();\n+        String label = \"Field Label\";\n+        String message = \"Woops, did it again.\";\n+        AnnotationProvider ap = mockAnnotationProvider(null);\n+\n+        train_findByType(ts, propertyType, translator);\n+\n+        train_getFormValidationId(fs, \"myform\");\n+\n+        train_contains(messages, \"myform-myfield-maptrans-message\", false);\n+        train_contains(messages, \"myfield-maptrans-message\", false);\n+        train_getMessageKey(translator, null);\n+\n+        train_getMessageFormatter(globalMessages, \"maptrans-message\", formatter);\n+        train_getLabel(field, label);\n+        train_format(formatter, message, label);\n+\n+        translator.render(field, message, writer, fs);\n+\n+        replay();\n+\n+        FieldTranslatorSource source = new FieldTranslatorSourceImpl(ts, globalMessages, fs);\n+\n+        FieldTranslator ft = source.createDefaultTranslator(field, \"myfield\", messages, locale, propertyType, ap);\n+\n+        assertEquals(ft.getType(), Map.class);\n+\n+        ft.render(writer);\n+\n+        verify();\n+    }\n+\n     @Test\n     public void create_default_translator_with_name()\n     {",
                "additions": 44,
                "raw_url": "https://github.com/apache/tapestry-5/raw/808c1fdfc9663aa95246379c5eebcc1c95c68cb5/tapestry-core/src/test/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImplTest.java",
                "status": "modified",
                "changes": 44,
                "deletions": 0,
                "sha": "31344ad93028c6d20af6aed300a2ad4800afc1bb",
                "blob_url": "https://github.com/apache/tapestry-5/blob/808c1fdfc9663aa95246379c5eebcc1c95c68cb5/tapestry-core/src/test/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImplTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImplTest.java?ref=808c1fdfc9663aa95246379c5eebcc1c95c68cb5"
            }
        ],
        "bug_id": "tapestry-5_44",
        "parent": "https://github.com/apache/tapestry-5/commit/32da4ddda219324166f3af3220be73a366973ede",
        "message": "TAP5-1763: NPE is caused when you create a Translator with null message key. Fixed by using the 'translator-name'-message in case the message key is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@1211437 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/cc5e26f66e7df5bfbadc9bf5831b62cbfa1b2394",
        "file": [
            {
                "patch": "@@ -426,15 +426,12 @@ private void linkFormToZone(Link link)\n      * <p/>\n      * This method may also be invoked as the handler for the \"internalCreateRenderTimeFormSupport\" event.\n      *\n-     * @param clientId\n-     *         the client-side id for the rendered form\n-     *         element\n-     * @param actionSink\n-     *         used to collect component actions that will, ultimately, be\n-     *         written as the t:formdata hidden\n-     *         field\n-     * @param allocator\n-     *         used to allocate unique ids\n+     * @param clientId   the client-side id for the rendered form\n+     *                   element\n+     * @param actionSink used to collect component actions that will, ultimately, be\n+     *                   written as the t:formdata hidden\n+     *                   field\n+     * @param allocator  used to allocate unique ids\n      * @return form support object\n      */\n     @OnEvent(\"internalCreateRenderTimeFormSupport\")\n@@ -497,10 +494,10 @@ Object onAction(EventContext context) throws IOException\n \n         heartbeat.begin();\n \n+        boolean didPushBeanValidationContext = false;\n+\n         try\n         {\n-            environment.push(BeanValidationContext.class, new BeanValidationContextImpl(validate));\n-\n             resources.triggerContextEvent(EventConstants.PREPARE_FOR_SUBMIT, context, eventCallback);\n \n             if (eventCallback.isAborted())\n@@ -517,6 +514,10 @@ Object onAction(EventContext context) throws IOException\n                     return true;\n             }\n \n+            environment.push(BeanValidationContext.class, new BeanValidationContextImpl(validate));\n+\n+            didPushBeanValidationContext = true;\n+\n             executeStoredActions();\n \n             heartbeat.end();\n@@ -559,7 +560,10 @@ Object onAction(EventContext context) throws IOException\n \n             environment.pop(ValidationTracker.class);\n \n-            environment.pop(BeanValidationContext.class);\n+            if (didPushBeanValidationContext)\n+            {\n+                environment.pop(BeanValidationContext.class);\n+            }\n \n             activeTracker = null;\n         }",
                "additions": 16,
                "raw_url": "https://github.com/apache/tapestry-5/raw/cc5e26f66e7df5bfbadc9bf5831b62cbfa1b2394/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java",
                "status": "modified",
                "changes": 28,
                "deletions": 12,
                "sha": "bc27f3970209b05ddd60328f07da7586d7f12683",
                "blob_url": "https://github.com/apache/tapestry-5/blob/cc5e26f66e7df5bfbadc9bf5831b62cbfa1b2394/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java?ref=cc5e26f66e7df5bfbadc9bf5831b62cbfa1b2394"
            }
        ],
        "bug_id": "tapestry-5_45",
        "parent": "https://github.com/apache/tapestry-5/commit/5a55a0f3a182df6b2efa3d013f84b96bf1830a06",
        "message": "TAP5-1580: A Form with an event listener for \"canceled\" event can cause an NPE popping off a BeanEditContext from the Environment that wasn't pushed\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@1148606 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/4dd0bec529585289f51b810753733017288d1a70",
        "file": [
            {
                "patch": "@@ -499,12 +499,16 @@ Object onAction(EventContext context) throws IOException\n \n         try\n         {\n+            environment.push(BeanValidationContext.class, new BeanValidationContextImpl(validate));\n+\n             resources.triggerContextEvent(EventConstants.PREPARE_FOR_SUBMIT, context, eventCallback);\n \n             if (eventCallback.isAborted())\n                 return true;\n \n             resources.triggerContextEvent(EventConstants.PREPARE, context, eventCallback);\n+            if (eventCallback.isAborted())\n+                return true;\n \n             if (isFormCancelled())\n             {\n@@ -513,12 +517,6 @@ Object onAction(EventContext context) throws IOException\n                     return true;\n             }\n \n-\n-            environment.push(BeanValidationContext.class, new BeanValidationContextImpl(validate));\n-\n-            if (eventCallback.isAborted())\n-                return true;\n-\n             executeStoredActions();\n \n             heartbeat.end();",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/4dd0bec529585289f51b810753733017288d1a70/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java",
                "status": "modified",
                "changes": 10,
                "deletions": 6,
                "sha": "f7339ab21cea65277573431a4585836fed56754b",
                "blob_url": "https://github.com/apache/tapestry-5/blob/4dd0bec529585289f51b810753733017288d1a70/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java?ref=4dd0bec529585289f51b810753733017288d1a70"
            }
        ],
        "bug_id": "tapestry-5_46",
        "parent": "https://github.com/apache/tapestry-5/commit/c8dd48a2ca6bc45c0fb187d90b5fe9df2f5add8f",
        "message": "TAP5-1580: A Form with an event listener for \"canceled\" event can cause an NPE popping off a BeanEditContext from the Environment that wasn't pushed\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@1148599 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    },
    {
        "commit": "https://github.com/apache/tapestry-5/commit/c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
        "file": [
            {
                "patch": "@@ -122,7 +122,7 @@ Evolving Components\n \n Evolving Interfaces\n \n-  Tapestry users interfaces quite extensively.\n+  Tapestry uses interfaces quite extensively.\n \n   Interfaces fall into two categories: service interfaces called by user code, and interfaces implemented by user code.\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/src/site/apt/dev/bible.apt",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "b46d996d1a126bc1cf0fa30d80983f765d2a64f7",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/src/site/apt/dev/bible.apt",
                "filename": "src/site/apt/dev/bible.apt",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/src/site/apt/dev/bible.apt?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -93,7 +93,7 @@ public class AutocompleteField extendes TextField\n   attribute of the annotation will be used to determine the mixin class name:\n   \n +---+\n-public class AutocompleteField extendes TextField\n+public class AutocompleteField extends TextField\n {\n   @Mixin(\"Autocomplete\")\n   private Object autocompleteMixin;\n@@ -123,7 +123,76 @@ Mixin Parameters\n   private TextField userId;\n +-----+\n \n-  \n+Binding the parameter of the core component\n+\n+  It is sometimes desirable to access the current value of a parameter defined in the component associated with the\n+  mixin. For example: normally, when the textfield component is marked disabled, it renders a text field with a disabled\n+  attribute, but you want it to output the (plaintext) value when disabled.  A mixin for this purpose would need access\n+  to at least the disabled, and value parameters, and possibly the translate parameter (for a client-side representation).\n+  You can access the disabled parameter via @InjectContainer and checking isDisabled on the field, but textfield\n+  currently provides no access to value or translate.  In this case, you can bind the core-component parameter using the\n+  @BindParameter annotation:\n+\n++-----+\n+  public class MyMixin\n+  {\n+    @BindParameter\n+    private boolean disabled;\n+\n+    @BindParameter\n+    private FieldTranslator translate;\n+\n+    @BindParameter\n+    private Object value;\n+\n+    Boolean beginRender(MarkupWriter writer)\n+    {\n+        ...\n+        if (disabled)\n+        {\n+           ...\n+           String stringValue = translate.toClient(value));\n+           ...\n+        }\n+        ...\n+    }\n+    ....\n++-----+\n+\n+  Tapestry will \"link\" the disabled, translate, and value fields above to parameters of the same name on the\n+  associated component.  The fields are not parameters to the mixin, but local copies\n+  of the component parameter.  They are cached only if the associated component parameter is cached.  They are read-write,\n+  and Tapestry handles synchronizing the value between mixins and the associated component such that even with a cached\n+  parameter, components and mixins will share the same value for a given parameter/bound-parameter during render.\n+  Only declared parameters of the associated components may be bound.\n+  \n+  By default, Tapestry will bind the parameter with the same name as the field. You can explicitly declare the parameter\n+  to bind via the value attribute:\n+\n++-----+\n+  @BindParameter(\"translate\")\n+  private FieldTranslator translator;\n++-----+\n+\n+  In same cases, a mixin will be used on different components using different names for a similar parameter type.\n+  For instance, BeanEditor has an \"object\" parameter; most form fields have a \"value\" parameter, and Grid has a\n+  \"source\" parameter.  These parameters have different names but share the feature of being the \"principle\" parameter\n+  on which the components are acting.  A mixin useable by all three components can specify multiple potential\n+  parameter values to bind.  The first value that matches a declared parameter of the associated component will be used:\n+\n++-----+\n+public class MyMixin\n+{\n+  ...\n+  @BindParameter({\"value\",\"object\",\"source\"})\n+  private Object principalObject;\n+  ...\n+}\n++-----+\n+\n+  \"MyMixin\" can be used on a textfield (principalObject is bound to \"value\"), on BeanEditor or BeanDisplay\n+  (principalObject is bound to \"object\"), or on Grid or Loop (principalObject is bound to \"source\").\n+\n Render Phase Ordering\n \n   All mixins for a component execute their render phase methods <before> the component's render phase\n@@ -132,5 +201,44 @@ Render Phase Ordering\n   \n   Exception: Mixins whose class is annotated with\n   {{{../apidocs/org/apache/tapestry5/annotations/MixinAfter.html}MixinAfter}} are ordered\n-  <after> the component, not before.  \n-  \n\\ No newline at end of file\n+  <after> the component, not before.\n+\n+  Withing a given phase and class (@MixinAfter vs. mixin before), mixin ordering is determined by the ordering\n+  constraints specified in the mixin definitions.  The constraint definitions follow the same conventions as\n+  {{{../tapestry-ioc/order.html}ordered service configurations}}.  How you specify the constraints depends\n+  on how the mixin is specified.\n+\n+  Implementation Mixin:\n+\n++-----+\n+  @Mixin(\"Autocomplete\",order={\"before:DiscardBody\",\"after:RenderDisabled\"}\n+  private TextField userId;\n++-----+\n+\n+  Template-specified instance mixins:\n+\n++-----+\n+  \\<input t:id=\"myfield\" t:mixins=\"autocomplete::before:discardbody;after:renderdisabled,\n+          defaultfromcookie::before:autocomplete\"/\\>\n++-----+\n+\n+  @Mixins-specified instance mixins:\n+\n++-----+\n+  @Component(...)\n+  @Mixins(\"Autocomplete::before:discardbody;after:renderdisabled\",\"DefaultFromCookie::before:autocomplete\"))\n+  private TextField userId;\n++-----+\n+\n+  @MixinClasses-specified instance mixins:\n+\n++-----+\n+  @Component(...)\n+  @MixinClasses(value={Autocomplete.class,DefaultFromCookie.class},\n+                order={\"before:discardbody;after:renderdisabled\",\"before:autocomplete\")\n++-----+\n+\n+  The ordering is always specified in terms of the order of the \"forward\" rendering process (setupRender,\n+  beginRender, etc.). When the \"reverse\" rendering phases (afterRender, etc.) occur, the mixin order is exactly reversed.\n+  Mixins which have no associated ordering constraints will be ordered in a manner which is consistent with the\n+  specified constraints for all other mixins, but is otherwise unspecified.",
                "additions": 112,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/src/site/apt/guide/mixins.apt",
                "status": "modified",
                "changes": 116,
                "deletions": 4,
                "sha": "1b6e143dd2f2323b1ed9195267d535a448a60a31",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/src/site/apt/guide/mixins.apt",
                "filename": "src/site/apt/guide/mixins.apt",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/src/site/apt/guide/mixins.apt?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -289,12 +289,14 @@ Method Conflicts and Ordering\n   the component's render phase methods.  If a mixin extends from a base class, the mixin's\n   parent class methods execute before the mixin subclass' render phase methods.\n   \n-  The order in which the mixins execute is not defined at this time.\n-  \n   Exception: Mixins whose class is annotated with\n   {{{../apidocs/org/apache/tapestry5/annotations/MixinAfter.html}MixinAfter}} are ordered\n   <after> the component, not before.\n-  \n+\n+  The order in which the mixins of a given class (@MixinAfter or mixins before) execute is determined\n+  by the ordering constraints specified for the mixins. If no constrains are provided, the order is undefined.\n+  See {{{mixins.html}component mixins} for more details.\n+\n * Parents before Child\n \n   Ordering is always parent-first.  Methods defined in the parent class are always invoked",
                "additions": 5,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/src/site/apt/guide/rendering.apt",
                "status": "modified",
                "changes": 8,
                "deletions": 3,
                "sha": "5604a11bef4ab8f02502ed0134c96dcc853c7ed1",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/src/site/apt/guide/rendering.apt",
                "filename": "src/site/apt/guide/rendering.apt",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/src/site/apt/guide/rendering.apt?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.annotations;\n+\n+import java.lang.annotation.Target;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * Designates a field in a mixin which is bound to the parameter of the containing\n+ * component corresponding to the value of the annotation. If no value is specified,\n+ * the bound parameter name is assumed to match the field name of the mixin.\n+ *\n+ * For example, a mixin intended to work with form fields would define a field named\n+ * \"value\", marked by this annotation.  The user-variable bound to the component's value\n+ * parameter would ultimately be bound in a chain:\n+ * uservariable <=> mixin.value <=> component.value.\n+ * Changes to any one value in the chain will be propagated accordingly.\n+ *\n+ * @since 5.2.0.0\n+ */\n+@Target(ElementType.FIELD)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface BindParameter\n+{\n+\n+    /**\n+     * @return the name of the mixin bound-parameter, exactly as for the Parameter annotation.\n+     */\n+    String name() default \"\";\n+    /**\n+     * @return the name(s) of the parent parameter to bind. Defaults to the name of the mixin field. If more than one\n+     *         name is specified, the first name matching a declared parameter of the core component will be used.\n+     */\n+    String[] value() default {\"\"};\n+}",
                "additions": 49,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/BindParameter.java",
                "status": "added",
                "changes": 49,
                "deletions": 0,
                "sha": "074b4dff25af5038b12d506decca47e8ec8e76df",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/BindParameter.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/annotations/BindParameter.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/annotations/BindParameter.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007 The Apache Software Foundation\n+// Copyright 2006, 2007, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -36,4 +36,12 @@\n      * the mixin class to instantiate and attach to the component.\n      */\n     String value() default \"\";\n+\n+    /**\n+     * Defines an ordering constraint for when the mixin should be applied in relation to other mixins.\n+     * The string is analagous exactly to the strings used to define ordered contributions.\n+     * Eg: @Mixin(order={\"before:mixina\",\"after:mixinb\"}). The ids are mixin names and are case insensitive.\n+     * @since 5.2.0.0\n+     */\n+    String[] order() default {};\n }",
                "additions": 9,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixin.java",
                "status": "modified",
                "changes": 10,
                "deletions": 1,
                "sha": "8b6e0c5b85d7c5e9442367cd41d9e0de1b09139a",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixin.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixin.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixin.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006 The Apache Software Foundation\n+// Copyright 2006, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -32,4 +32,15 @@\n public @interface MixinClasses\n {\n     Class[] value();\n+\n+    /**\n+     * Specifies the ordering constraints for each mixin specified by value. Order may be a 0-length array signifying\n+     * no ordering for any mixin specified by value.  Otherwise, it must be the same length as value.\n+     * Each String can specify multiple constraints, separated by ; (before:mixina;after:mixinb).\n+     * Alternatively, the entry may be null or the empty string to specify no ordering constraints for that particular\n+     * mixin.\n+     * @since 5.2.0.0\n+     */\n+    String[] order() default {};\n+\n }",
                "additions": 12,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/MixinClasses.java",
                "status": "modified",
                "changes": 13,
                "deletions": 1,
                "sha": "a0c38ae92e4d5b736b23bf43e2be3eec8879a6db",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/MixinClasses.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/annotations/MixinClasses.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/annotations/MixinClasses.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006 The Apache Software Foundation\n+// Copyright 2006, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -33,7 +33,11 @@\n {\n \n     /**\n-     * One or more mixin type names, from which actual mixin class names can be resolved.\n+     * One or more mixin type names and optional constraints, from which actual mixin class names can be resolved.\n+     * For specifying constraints, do:\n+     * mixinname::constraint1;constraint2\n+     * For instance:\n+     * mixina::before:mixinb;after:mixinc;after:mixind\n      */\n     String[] value();\n }",
                "additions": 6,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixins.java",
                "status": "modified",
                "changes": 8,
                "deletions": 2,
                "sha": "d59389719e677ded91db6f40ca64455cb2aa3830",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixins.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixins.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixins.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007, 2008 The Apache Software Foundation\n+// Copyright 2006, 2007, 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -62,4 +62,14 @@\n      * @return object used to read and update the parameter\n      */\n     ParameterAccess getParameterAccess(String parameterName);\n+\n+    /**\n+     * Gets access object suitable for handling mixin fields which are bound to a parameter of the core component\n+     * @param boundParameterName the name of the mixin field that should be linked to the core component's field.\n+     * @param parentParameterNames the list of parameter names to try in the parent. The first name that matches a\n+     *          declared parameter name in the core component will be used. This allows BindParameter to be used with\n+     *          mixins that have a similar parameter type with different parameter names (eg:\n+     * @since 5.2.0.0\n+     */\n+    ParameterAccess getContainerBoundParameterAccess(String boundParameterName, String... parentParameterNames);\n }",
                "additions": 11,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResources.java",
                "status": "modified",
                "changes": 12,
                "deletions": 1,
                "sha": "7a313ff75f0293f4b600c987476d21645f7885bc",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResources.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResources.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResources.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -56,6 +56,19 @@\n      */\n     Component getMixinByClassName(String mixinClassName);\n \n+    /**\n+     * Returns true if the mixin named by mixinClassName is associated with the core component\n+     * @param mixinClassName fully qualified class name\n+     * @since 5.2.0.0\n+     */\n+    boolean isMixingIn(String mixinClassName);\n+\n+    /**\n+     * Registers an action that should be executed immediately after page load.\n+     * @since 5.2.0.0\n+     */\n+    void deferLoadAction(Runnable action);\n+\n     /**\n      * Constructs a map linking informal parameters to the corresponding bindings.\n      *",
                "additions": 13,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResourcesCommon.java",
                "status": "modified",
                "changes": 13,
                "deletions": 0,
                "sha": "1703d3681c6fe2707fd5cd79e2673bf611e20b7d",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResourcesCommon.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResourcesCommon.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResourcesCommon.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2008 The Apache Software Foundation\n+// Copyright 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -77,4 +77,25 @@\n      * @see org.apache.tapestry5.Binding#getBindingType()\n      */\n     Class getBoundType();\n+\n+    /**\n+     * Registers the given ParameterChangeListener. Registering a listener which is already \n+     * registered is silently ignored.\n+     * @param listener\n+     * @since 5.2.0.0\n+     */\n+    void registerParameterChangeListener(ParameterChangeListener listener);\n+\n+    /**\n+     * Unregisters the given listener. Unregistering a listener that isn't registered is not an error.\n+     * @since 5.2.0.0\n+     */\n+    void unregisterParameterChangeListener(ParameterChangeListener listener);\n+\n+    /**\n+     * @return true if the parameter value should be cached within a component during rendering\n+     * @since 5.2.0.0\n+     */\n+    boolean shouldCache();\n+\n }",
                "additions": 22,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterAccess.java",
                "status": "modified",
                "changes": 23,
                "deletions": 1,
                "sha": "1cb11eca824006c895effd59eb843f26eea5322d",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterAccess.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterAccess.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterAccess.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.internal;\n+\n+/**\n+ * An object that listens for changes to the underlying values in parameters.\n+ * This is currently used to ensure that mixin fields annotated with\n+ * {@link org.apache.tapestry5.annotations.BindParameter} and the underlying component variable will stay properly\n+ * in sync, regardless of parameter caching.\n+ * @since 5.2.0.0\n+ */\n+public interface ParameterChangeListener\n+{\n+    /**\n+     * Called when the value of a component <code>@Parameter</code> field changes.\n+     * Note that this event will be fired regardless of whether the parameter is bound.\n+     *\n+     * @param event\n+     */\n+    void parameterChanged(ParameterChangedEvent event);\n+}",
                "additions": 33,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangeListener.java",
                "status": "added",
                "changes": 33,
                "deletions": 0,
                "sha": "a2a623488948ab912eb4ddf8e3b3b6b22556a935",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangeListener.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangeListener.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangeListener.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.internal;\n+\n+/**\n+ * Event associated with a parameter value changing, used by <code>ParameterChangeListener</code>s.\n+ * @since 5.2.0.0\n+ */\n+public class ParameterChangedEvent<T>\n+{\n+    private final String parameterName;\n+    private final T newValue;\n+\n+\n+    public ParameterChangedEvent(String parameterName, T newValue)\n+    {\n+        this.parameterName = parameterName;\n+        this.newValue = newValue;\n+    }\n+\n+    /**\n+     * @return the name of the parameter that changed.\n+     */\n+    public String getParameterName()\n+    {\n+        return parameterName;\n+    }\n+\n+    /**\n+     * @return the new value. May be null.\n+     */\n+    public T getNewValue()\n+    {\n+        return newValue;\n+    }\n+\n+}",
                "additions": 49,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangedEvent.java",
                "status": "added",
                "changes": 49,
                "deletions": 0,
                "sha": "c59aba78d47026e8ac76d3ce1a2b06f19183739e",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangedEvent.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangedEvent.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangedEvent.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -17,6 +17,7 @@\n import org.apache.tapestry5.*;\n import org.apache.tapestry5.ioc.Messages;\n import org.apache.tapestry5.ioc.Resource;\n+import org.apache.tapestry5.ioc.Orderable;\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.apache.tapestry5.ioc.internal.util.Defense;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n@@ -474,4 +475,28 @@ public String toString()\n             }\n         };\n     }\n+\n+    /**\n+     *\n+     * @param mixinDef the original mixin definition.\n+     * @return an Orderable whose id is the mixin name.\n+     */\n+    public static Orderable<String> mixinTypeAndOrder(String mixinDef) {\n+        int idx = mixinDef.indexOf(\"::\");\n+        if (idx == -1)\n+        {\n+            return new Orderable(mixinDef,mixinDef);\n+        }\n+        String type = mixinDef.substring(0,idx);\n+        String[] constraints = splitMixinConstraints(mixinDef.substring(idx+2));\n+\n+        return new Orderable(type,type,constraints);\n+    }\n+\n+\n+    public static String[] splitMixinConstraints(String s)\n+    {\n+        return InternalUtils.isBlank(s)?null:s.split(\";\");\n+    }\n+\n }",
                "additions": 25,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/TapestryInternalUtils.java",
                "status": "modified",
                "changes": 25,
                "deletions": 0,
                "sha": "1558c2840aeda187ad5724b2ff11b8f12c014bc7",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/TapestryInternalUtils.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/TapestryInternalUtils.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/TapestryInternalUtils.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -54,6 +54,8 @@\n \n     private List<String> mixinClassNames;\n \n+    private Map<String, String[]> mixinOrders;\n+\n     private boolean informalParametersSupported;\n \n     private boolean mixinAfter;\n@@ -104,7 +106,7 @@ public String getComponentClassName()\n         return componentClassName;\n     }\n \n-    public void addParameter(String name, boolean required, boolean allowNull, String defaultBindingPrefix)\n+    public void addParameter(String name, boolean required, boolean allowNull, String defaultBindingPrefix, boolean cached)\n     {\n         Defense.notBlank(name, \"name\");\n         Defense.notBlank(defaultBindingPrefix, \"defaultBindingPrefix\");\n@@ -117,7 +119,16 @@ public void addParameter(String name, boolean required, boolean allowNull, Strin\n         if (parameters.containsKey(name))\n             throw new IllegalArgumentException(ModelMessages.duplicateParameter(name, componentClassName));\n \n-        parameters.put(name, new ParameterModelImpl(name, required, allowNull, defaultBindingPrefix));\n+        parameters.put(name, new ParameterModelImpl(name, required, allowNull, defaultBindingPrefix,cached));\n+    }\n+\n+    public void addParameter(String name, boolean required, boolean allowNull, String defaultBindingPrefix)\n+    {\n+        //assume /false/ for the default because:\n+        //if the parameter is actually cached, the only effect will be to reduce that optimization in certain\n+        //scenarios (mixin BindParameter).  But if the value is NOT cached but we say it is,\n+        //we'll get incorrect behavior.\n+        addParameter(name,required,allowNull,defaultBindingPrefix,false);\n     }\n \n     public ParameterModel getParameterModel(String parameterName)\n@@ -220,11 +231,16 @@ public boolean isRootClass()\n         return parentModel == null;\n     }\n \n-    public void addMixinClassName(String mixinClassName)\n+    public void addMixinClassName(String mixinClassName, String... order)\n     {\n         if (mixinClassNames == null) mixinClassNames = CollectionFactory.newList();\n \n         mixinClassNames.add(mixinClassName);\n+        if (order != null && order.length > 0)\n+        {\n+            if (mixinOrders == null) mixinOrders = CollectionFactory.newCaseInsensitiveMap();\n+            mixinOrders.put(mixinClassName,order);\n+        }\n     }\n \n     public List<String> getMixinClassNames()\n@@ -324,4 +340,9 @@ public boolean handlesEvent(String eventType)\n                ? false\n                : parentModel.handlesEvent(eventType);\n     }\n+\n+    public String[] getOrderForMixin(String mixinClassName)\n+    {\n+        return InternalUtils.get(mixinOrders,mixinClassName);\n+    }\n }",
                "additions": 24,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableComponentModelImpl.java",
                "status": "modified",
                "changes": 27,
                "deletions": 3,
                "sha": "aa6f55616f5fead29af8a0c566521838d139f1a3",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableComponentModelImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableComponentModelImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableComponentModelImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -46,6 +46,8 @@\n      */\n     private List<String> mixinClassNames;\n \n+    private Map<String,String[]> mixinConstraints;\n+\n     public MutableEmbeddedComponentModelImpl(String id, String componentType, String componentClassName,\n                                              String declaredClass, boolean inheritInformalParameters, Location location)\n     {\n@@ -106,11 +108,12 @@ public String getParameterValue(String parameterName)\n         return Collections.unmodifiableList(mixinClassNames);\n     }\n \n-    public void addMixin(String mixinClassName)\n+    public void addMixin(String mixinClassName, String... constraints)\n     {\n         if (mixinClassNames == null)\n         {\n             mixinClassNames = CollectionFactory.newList();\n+            mixinConstraints = CollectionFactory.newCaseInsensitiveMap();\n         }\n         else\n         {\n@@ -119,6 +122,7 @@ public void addMixin(String mixinClassName)\n         }\n \n         mixinClassNames.add(mixinClassName);\n+        mixinConstraints.put(mixinClassName,constraints);\n     }\n \n     public boolean getInheritInformalParameters()\n@@ -137,4 +141,9 @@ public void setPublishedParameters(List<String> parameterNames)\n     {\n         return publishedParameters;\n     }\n+\n+    public String[] getConstraintsForMixin(String mixinClassName)\n+    {\n+        return InternalUtils.get(mixinConstraints,mixinClassName);\n+    }\n }",
                "additions": 10,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableEmbeddedComponentModelImpl.java",
                "status": "modified",
                "changes": 11,
                "deletions": 1,
                "sha": "21021d3643f112fa703cb168ea5ba1f822d35016",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableEmbeddedComponentModelImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableEmbeddedComponentModelImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableEmbeddedComponentModelImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2008 The Apache Software Foundation\n+// Copyright 2006, 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -26,12 +26,20 @@\n \n     private final String defaultBindingPrefix;\n \n-    public ParameterModelImpl(String name, boolean required, boolean allowNull, String defaultBindingPrefix)\n+    private final boolean cached;\n+\n+    public ParameterModelImpl(\n+            String name,\n+            boolean required,\n+            boolean allowNull,\n+            String defaultBindingPrefix,\n+            boolean cached)\n     {\n         this.name = name;\n         this.required = required;\n         this.allowNull = allowNull;\n         this.defaultBindingPrefix = defaultBindingPrefix;\n+        this.cached = cached;\n     }\n \n     public String getName()\n@@ -53,4 +61,9 @@ public boolean isAllowNull()\n     {\n         return allowNull;\n     }\n+\n+    public boolean isCached()\n+    {\n+        return cached;\n+    }\n }",
                "additions": 15,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/ParameterModelImpl.java",
                "status": "modified",
                "changes": 17,
                "deletions": 2,
                "sha": "f825afa0cad020ece4d34669a9ca45febf5c4879",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/ParameterModelImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/model/ParameterModelImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/ParameterModelImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -107,10 +107,11 @@ public ComponentPageElement assembleRootComponent(Page page)\n         }\n         catch (RuntimeException ex)\n         {\n-            throw new RuntimeException(String.format(\"Exception assembling root component of page %s: %s\",\n-                                                     pageAssembly.page.getName(),\n-                                                     InternalUtils.toMessage(ex)),\n-                                       ex);\n+            throw new RuntimeException(\n+                                PageloadMessages.exceptionAssemblingRootComponent(\n+                                        pageAssembly.page.getName(),\n+                                        InternalUtils.toMessage(ex)),\n+                                ex);\n         }\n     }\n \n@@ -120,7 +121,9 @@ private void addRootComponentMixins(ComponentPageElement element)\n         {\n             Instantiator mixinInstantiator = instantiatorSource.getInstantiator(className);\n \n-            element.addMixin(InternalUtils.lastTerm(className), mixinInstantiator);\n+            ComponentModel model = instantiator.getModel();\n+            element.addMixin(InternalUtils.lastTerm(className),\n+                    mixinInstantiator,model.getOrderForMixin(className));\n         }\n     }\n \n@@ -159,13 +162,15 @@ public void assembleEmbeddedComponent(PageAssembly pageAssembly, EmbeddedCompone\n         }\n         catch (RuntimeException ex)\n         {\n-            String message = String.format(\"Exception assembling embedded component '%s' (of type %s, within %s): %s\",\n-                                           embeddedId,\n-                                           instantiator.getModel().getComponentClassName(),\n-                                           container.getCompleteId(),\n-                                           InternalUtils.toMessage(ex));\n-\n-            throw new TapestryException(message, location, ex);\n+            throw new TapestryException(\n+                            PageloadMessages.exceptionAssemblingEmbeddedComponent(\n+                                    embeddedId,\n+                                    instantiator.getModel().getComponentClassName(),\n+                                    container.getCompleteId(),\n+                                    InternalUtils.toMessage(ex)\n+                            ),\n+                            location,\n+                            ex);\n         }\n     }\n \n@@ -232,9 +237,7 @@ public void validateEmbeddedIds(Map<String, Location> componentIds, Resource tem\n             String className = getModel().getComponentClassName();\n \n             throw new RuntimeException(\n-                    String.format(\n-                            \"Embedded component(s) %s are defined within component class %s (or a super-class of %s), \" +\n-                                    \"but are not present in the component template (%s).\",\n+                    PageloadMessages.embeddedComponentsNotInTemplate(\n                             InternalUtils.joinSorted(embeddedIds.keySet()),\n                             className,\n                             InternalUtils.lastTerm(className),\n@@ -263,6 +266,11 @@ public EmbeddedComponentAssembler createEmbeddedAssembler(String embeddedId, Str\n     {\n         try\n         {\n+\n+            if (InternalUtils.isBlank(componentClassName))\n+            {\n+                throw new TapestryException(PageloadMessages.missingComponentType(),location,null);\n+            }\n             EmbeddedComponentAssemblerImpl embedded = new EmbeddedComponentAssemblerImpl(assemblerSource,\n                                                                                          instantiatorSource,\n                                                                                          componentClassResolver,\n@@ -288,14 +296,12 @@ public EmbeddedComponentAssembler createEmbeddedAssembler(String embeddedId, Str\n \n                     if (existingEmbeddedId != null)\n                     {\n-                        String message = String.format(\n-                                \"Parameter '%s' of embedded component '%s' can not be published as a parameter of component %s, as it has previously been published by embedded component '%s'.\",\n-                                publishedParameterName,\n-                                embeddedId,\n-                                instantiator.getModel().getComponentClassName(),\n-                                existingEmbeddedId);\n-\n-                        throw new TapestryException(message, location, null);\n+                        throw new TapestryException(\n+                                PageloadMessages.parameterAlreadyPublished(\n+                                        publishedParameterName,\n+                                        embeddedId,\n+                                        instantiator.getModel().getComponentClassName(),\n+                                        existingEmbeddedId) , location, null);\n                     }\n \n                     publishedParameterToEmbeddedId.put(publishedParameterName, embeddedId);\n@@ -307,12 +313,14 @@ public EmbeddedComponentAssembler createEmbeddedAssembler(String embeddedId, Str\n         }\n         catch (Exception ex)\n         {\n-            String message = String.format(\"Failure creating embedded component '%s' of %s: %s\",\n-                                           embeddedId,\n-                                           instantiator.getModel().getComponentClassName(),\n-                                           InternalUtils.toMessage(ex));\n-\n-            throw new TapestryException(message, location, ex);\n+            throw new TapestryException(\n+                    PageloadMessages.failureCreatingEmbeddedComponent(\n+                            embeddedId,\n+                            instantiator.getModel().getComponentClassName(),\n+                            InternalUtils.toMessage(ex)\n+                    ),\n+                    location,\n+                    ex);\n         }\n     }\n \n@@ -354,9 +362,7 @@ public String getDefaultBindingPrefix(String metaDefault)\n \n         if (innerBinder == null)\n         {\n-            String message = String.format(\n-                    \"Parameter '%s' of component %s is improperly published from embedded component '%s' (where it does not exist). \" +\n-                            \"This may be a typo in the publishParameters attribute of the @Component annotation.\",\n+            String message = PageloadMessages.publishedParameterNonexistant(\n                     parameterName,\n                     instantiator.getModel().getComponentClassName(),\n                     embeddedId);",
                "additions": 38,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java",
                "status": "modified",
                "changes": 70,
                "deletions": 32,
                "sha": "f26599a09ee722f93fa3bd6cd7ca8082e9737355",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -49,8 +49,7 @@ public void endComponent()\n         private void nyi(String methodName)\n         {\n             throw new IllegalStateException(\n-                    String.format(\"RenderQueue method %s() is not implemented for composited render commands.\",\n-                                  methodName));\n+                    PageloadMessages.compositeRenderCommandMethodNotImplemented(methodName));\n         }\n     };\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/CompositeRenderCommand.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "5ace7e5316d801fa4627a5552d5c04f3261faa42",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/CompositeRenderCommand.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/CompositeRenderCommand.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/CompositeRenderCommand.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -15,10 +15,12 @@\n package org.apache.tapestry5.internal.pageload;\n \n import org.apache.tapestry5.internal.TapestryInternalUtils;\n+\n import org.apache.tapestry5.internal.services.ComponentInstantiatorSource;\n import org.apache.tapestry5.internal.services.Instantiator;\n import org.apache.tapestry5.internal.structure.ComponentPageElement;\n import org.apache.tapestry5.ioc.Location;\n+import org.apache.tapestry5.ioc.Orderable;\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n import org.apache.tapestry5.ioc.internal.util.TapestryException;\n@@ -42,6 +44,7 @@\n     private final Location location;\n \n     private final Map<String, Instantiator> mixinIdToInstantiator = CollectionFactory.newCaseInsensitiveMap();\n+    private final Map<String, String[]> mixinsIdToOrderConstraints = CollectionFactory.newCaseInsensitiveMap();\n \n     /**\n      * Maps parameter names (both simple, and qualified with the mixin id) to the corresponding QualifiedParameterName.\n@@ -85,7 +88,7 @@ public EmbeddedComponentAssemblerImpl(ComponentAssemblerSource assemblerSource,\n \n         for (String className : componentModel.getMixinClassNames())\n         {\n-            addMixin(className);\n+            addMixin(className,componentModel.getOrderForMixin(className));\n         }\n \n         // If there's an embedded model (i.e., there was an @Component annotation)\n@@ -95,17 +98,18 @@ public EmbeddedComponentAssemblerImpl(ComponentAssemblerSource assemblerSource,\n         {\n             for (String className : embeddedModel.getMixinClassNames())\n             {\n-                addMixin(className);\n+                addMixin(className,embeddedModel.getConstraintsForMixin(className));\n             }\n         }\n \n         // And the template may include a t:mixins element to define yet more mixin.\n-\n-        for (String mixinType : TapestryInternalUtils.splitAtCommas(templateMixins))\n+        // Template strings specified as:\n+        for (String mixinDef : TapestryInternalUtils.splitAtCommas(templateMixins))\n         {\n-            String className = componentClassResolver.resolveMixinTypeToClassName(mixinType);\n+            Orderable<String> order = TapestryInternalUtils.mixinTypeAndOrder(mixinDef);\n+            String className = componentClassResolver.resolveMixinTypeToClassName(order.getId());\n \n-            addMixin(className);\n+            addMixin(className,order.getConstraints());\n         }\n \n         informalParametersMixinId = prescanMixins();\n@@ -152,20 +156,20 @@ private void updateParameterNameToQualified(String mixinId, ComponentModel model\n         }\n     }\n \n-    private void addMixin(String className)\n+    private void addMixin(String className, String... order)\n     {\n         Instantiator mixinInstantiator = instantiatorSource.getInstantiator(className);\n \n         String mixinId = InternalUtils.lastTerm(className);\n \n         if (mixinIdToInstantiator.containsKey(mixinId))\n             throw new TapestryException(\n-                    String.format(\"Mixins applied to a component must be unique. Mixin '%s' has already been applied.\",\n-                                  mixinId),\n+                    PageloadMessages.uniqueMixinRequired(mixinId),\n                     location, null);\n \n \n         mixinIdToInstantiator.put(mixinId, mixinInstantiator);\n+        mixinsIdToOrderConstraints.put(mixinId, order);\n     }\n \n     private ComponentModel getModel(String className)\n@@ -186,11 +190,10 @@ public ParameterBinder createParameterBinder(String parameterName)\n             String mixinId = parameterName.substring(0, dotx);\n             if (!mixinIdToInstantiator.containsKey(mixinId))\n             {\n-                String message = String.format(\"Mixin id for parameter '%s' not found. Attached mixins: %s.\",\n-                                               parameterName,\n-                                               InternalUtils.joinSorted(mixinIdToInstantiator.keySet()));\n-\n-                throw new TapestryException(message, location, null);\n+                throw new TapestryException(\n+                        PageloadMessages.mixinidForParamnotfound(parameterName, mixinIdToInstantiator.keySet()),\n+                        location, \n+                        null);\n             }\n         }\n         else\n@@ -244,7 +247,7 @@ public void addMixinsToElement(ComponentPageElement newElement)\n             String mixinId = entry.getKey();\n             Instantiator instantiator = entry.getValue();\n \n-            newElement.addMixin(mixinId, instantiator);\n+            newElement.addMixin(mixinId, instantiator, mixinsIdToOrderConstraints.get(mixinId));\n         }\n     }\n ",
                "additions": 18,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/EmbeddedComponentAssemblerImpl.java",
                "status": "modified",
                "changes": 33,
                "deletions": 15,
                "sha": "a749d03f60c911bfee8a086f113a5a66e329a081",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/EmbeddedComponentAssemblerImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/EmbeddedComponentAssemblerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/EmbeddedComponentAssemblerImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -82,11 +82,10 @@ void checkForRecursion(String componentClassName, Location location)\n \n             if (e.getComponentResources().getComponentModel().getComponentClassName().equals(componentClassName))\n             {\n-                String message = String.format(\n-                        \"The template for component %s is recursive (contains another direct or indirect reference to component %<s). This is not supported (components may not contain themselves).\",\n-                        componentClassName);\n-\n-                throw new TapestryException(message, location, null);\n+                throw new TapestryException(\n+                        PageloadMessages.recursiveTemplate(componentClassName),\n+                        location, \n+                        null);\n             }\n         }\n     }",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageAssembly.java",
                "status": "modified",
                "changes": 9,
                "deletions": 5,
                "sha": "72345e334576a27c0308facbfffa0ae1bb86fff7",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageAssembly.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageAssembly.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageAssembly.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -305,13 +305,13 @@ private void queueOverrideTokensForExtensionPoint(ExtensionPointToken extensionP\n                                                       Stack<TemplateToken> queue,\n                                                       List<ComponentTemplate> overrideSearch)\n     {\n-        String extentionPointId = extensionPointToken.getExtentionPointId();\n+        String extensionPointId = extensionPointToken.getExtensionPointId();\n \n         // Work up from the component, through its base classes, towards the last non-extension template.\n \n         for (ComponentTemplate t : overrideSearch)\n         {\n-            List<TemplateToken> tokens = t.getExtensionPointTokens(extentionPointId);\n+            List<TemplateToken> tokens = t.getExtensionPointTokens(extensionPointId);\n \n             if (tokens != null)\n             {\n@@ -324,7 +324,7 @@ private void queueOverrideTokensForExtensionPoint(ExtensionPointToken extensionP\n         // not find an override, somewhere, for it.\n \n         throw new TapestryException(\n-                String.format(\"Could not find an override for extension point '%s'.\", extentionPointId),\n+                PageloadMessages.couldNotFindOverride(extensionPointId),\n                 extensionPointToken.getLocation(), null);\n     }\n \n@@ -343,9 +343,7 @@ private void queueOverrideTokensForExtensionPoint(ExtensionPointToken extensionP\n \n             if (parentModel == null)\n             {\n-                throw new RuntimeException(String.format(\n-                        \"Component %s uses an extension template, but does not have a parent component.\",\n-                        model.getComponentClassName()));\n+                throw new RuntimeException(PageloadMessages.noParentForExtension(model));\n             }\n \n             ComponentTemplate parentTemplate = templateSource.getTemplate(parentModel, assembler.getLocale());\n@@ -433,7 +431,7 @@ private void processTemplateToken(AssemblerContext context)\n                 break;\n \n             default:\n-                throw new IllegalStateException(\"Not yet implemented: \" + context.peekType());\n+                throw new IllegalStateException(PageloadMessages.tokenNotImplemented(context.peekType()));\n         }\n     }\n \n@@ -528,12 +526,10 @@ public void execute(PageAssembly pageAssembly)\n \n                 if (binder == null)\n                 {\n-                    String message = String.format(\n-                            \"Component %s does not include a formal parameter '%s' (and does not support informal parameters).\",\n-                            element.getCompleteId(),\n-                            parameterName);\n-\n-                    throw new TapestryException(message, token.getLocation(), null);\n+                    throw new TapestryException(\n+                            PageloadMessages.parameterNotSupported(element.getCompleteId(), parameterName), \n+                            token.getLocation(),\n+                            null);\n                 }\n \n                 binder.bind(pageAssembly.createdElement.peek(), binding);\n@@ -706,15 +702,10 @@ private EmbeddedComponentAssembler startComponent(AssemblerContext context)\n \n             if (InternalUtils.isNonBlank(modelType) && embeddedType != null)\n             {\n-                String message = String.format(\n-                        \"Embedded component '%s' provides a type attribute in the template ('%s') \" +\n-                                \"as well as in the component class ('%s'). \" +\n-                                \"You should not provide a type attribute in the template when defining an embedded component \" +\n-                                \"within the component class.\",\n-                        embeddedId, embeddedType, modelType\n-                );\n-\n-                throw new TapestryException(message, token, null);\n+                throw new TapestryException(\n+                        PageloadMessages.redundantEmbeddedComponentTypes(embeddedId,embeddedType,modelType),\n+                        token,\n+                        null);\n             }\n \n             embeddedType = modelType;\n@@ -882,7 +873,7 @@ public void execute(PageAssembly pageAssembly)\n      * Adds a deferred action to the PageAssembly, to handle connecting the embedded components' parameter to the\n      * container component's parameter once everything else has been built.\n      *\n-     * @param assembler\n+     * @param context\n      * @param parameterName\n      * @param containerParameterName\n      */",
                "additions": 14,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java",
                "status": "modified",
                "changes": 37,
                "deletions": 23,
                "sha": "cea25dc7a37cbe198e4a39d2b68d94d60d9b6e26",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,147 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.internal.pageload;\n+\n+import org.apache.tapestry5.ioc.Messages;\n+import org.apache.tapestry5.ioc.Resource;\n+import org.apache.tapestry5.ioc.internal.util.MessagesImpl;\n+import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n+import org.apache.tapestry5.internal.parser.TokenType;\n+import org.apache.tapestry5.model.ComponentModel;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Localized exception message support for pageload-related classes.\n+ * @since 5.2.0.0\n+ */\n+final class PageloadMessages\n+{\n+\n+    private static final Messages MESSAGES = MessagesImpl.forClass(PageloadMessages.class);\n+\n+    private PageloadMessages()\n+    {\n+    }\n+\n+    public static String uniqueMixinRequired(String mixinId)\n+    {\n+        return MESSAGES.format(\"unique_mixin_required\", mixinId);\n+    }\n+\n+    public static String mixinidForParamnotfound(String parameterName, Collection<String> availableMixins)\n+    {\n+        return MESSAGES.format(\"mixinid_for_paramnotfound\", parameterName, InternalUtils.joinSorted(availableMixins));\n+    }\n+\n+    public static String missingComponentType()\n+    {\n+        return MESSAGES.get(\"missing_component_type\");\n+    }\n+\n+    public static String noMoreTokens()\n+    {\n+        return MESSAGES.get(\"no_more_tokens\");\n+    }\n+\n+    public static String couldNotFindOverride(String extensionPointId)\n+    {\n+        return MESSAGES.format(\"could_not_find_override\", extensionPointId);\n+    }\n+\n+    public static String noParentForExtension(ComponentModel model)\n+    {\n+        return MESSAGES.format(\"no_parent_for_extension\", model.getComponentClassName());\n+    }\n+\n+    public static String tokenNotImplemented(TokenType type)\n+    {\n+        return MESSAGES.format(\"token_not_implemented\", type.toString());\n+    }\n+\n+    public static String parameterNotSupported(String completeId, String parameterName)\n+    {\n+        return MESSAGES.format(\"parameter_not_supported\", completeId, parameterName);\n+    }\n+\n+    public static String redundantEmbeddedComponentTypes(String embeddedId, String embeddedType, String modelType)\n+    {\n+        return MESSAGES.format(\"redundant_embedded_component_types\", embeddedId, embeddedType, modelType);\n+    }\n+\n+    public static String recursiveTemplate(String componentClassName)\n+    {\n+        return MESSAGES.format(\"recursive_template\", componentClassName);\n+    }\n+\n+    public static String compositeRenderCommandMethodNotImplemented(String methodName)\n+    {\n+        return MESSAGES.format(\"composite_render_command_method_not_implemented\",methodName);\n+    }\n+\n+    public static String exceptionAssemblingRootComponent(String pageName, String exceptionMessage)\n+    {\n+        return MESSAGES.format(\"exception_assembling_root_component\",pageName,exceptionMessage);\n+    }\n+\n+    public static String exceptionAssemblingEmbeddedComponent(\n+            String embeddedId,\n+            String embeddedClassName,\n+            String containerId,\n+            String exception)\n+    {\n+        return MESSAGES.format(\"exception_assembling_embedded_component\",\n+                embeddedId,\n+                embeddedClassName,\n+                containerId,\n+                exception);\n+    }\n+\n+    public static String embeddedComponentsNotInTemplate(\n+            String joinedComponentIds,\n+            String qualifiedClassName,\n+            String simpleClassName,\n+            Resource templateResource)\n+    {\n+        return MESSAGES.format(\"embedded_components_not_in_template\",\n+                joinedComponentIds,\n+                qualifiedClassName,\n+                simpleClassName,\n+                templateResource);\n+    }\n+\n+    public static String parameterAlreadyPublished(\n+            String publishedParameterName, \n+            String embeddedId,\n+            String componentClassName,\n+            String existingEmbeddedId)\n+    {\n+        return MESSAGES.format(\"parameter_already_published\",\n+                publishedParameterName,\n+                embeddedId,\n+                componentClassName,\n+                existingEmbeddedId);\n+    }\n+\n+    public static String failureCreatingEmbeddedComponent(String embeddedId, String containerClass, String exception)\n+    {\n+        return MESSAGES.format(\"failure_creating_embedded_component\",embeddedId, containerClass, exception);\n+    }\n+\n+    public static String publishedParameterNonexistant(String parameterName, String publishingClass, String embeddedId)\n+    {\n+        return MESSAGES.format(\"published_parameter_nonexistant\", parameterName, publishingClass, embeddedId);\n+    }\n+}",
                "additions": 147,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageloadMessages.java",
                "status": "added",
                "changes": 147,
                "deletions": 0,
                "sha": "bcf5f7e472a02c7fc1694a6dfe0ca43da4a1b43b",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageloadMessages.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageloadMessages.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageloadMessages.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -45,7 +45,7 @@ public TokenType peekType()\n     private void checkMore()\n     {\n         if (!more())\n-            throw new IllegalStateException(\"No more template tokens.\");\n+            throw new IllegalStateException(PageloadMessages.noMoreTokens());\n     }\n \n     public <T extends TemplateToken> T next(Class<T> type)",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/TokenStreamImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "be2a6af13cd8e91e254a17fda653a1d4bdf275a6",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/TokenStreamImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/TokenStreamImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/TokenStreamImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -25,16 +25,16 @@\n  */\n public class ExtensionPointToken extends TemplateToken\n {\n-    private final String extentionPointId;\n+    private final String extensionPointId;\n \n-    public ExtensionPointToken(String extentionPointId, Location location)\n+    public ExtensionPointToken(String extensionPointId, Location location)\n     {\n         super(TokenType.EXTENSION_POINT, location);\n-        this.extentionPointId = extentionPointId;\n+        this.extensionPointId = extensionPointId;\n     }\n \n-    public String getExtentionPointId()\n+    public String getExtensionPointId()\n     {\n-        return extentionPointId;\n+        return extensionPointId;\n     }\n }",
                "additions": 5,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/parser/ExtensionPointToken.java",
                "status": "modified",
                "changes": 10,
                "deletions": 5,
                "sha": "a0333970c687a05e2f82a5735b23ed5003282638",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/parser/ExtensionPointToken.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/parser/ExtensionPointToken.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/parser/ExtensionPointToken.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -303,10 +303,7 @@ private Location getLocation()\n     {\n         int lineNumber = reader.getLocation().getLineNumber();\n \n-        if (cachedLocation != null && cachedLocation.getLine() != lineNumber)\n-            cachedLocation = null;\n-\n-        if (cachedLocation == null)\n+        if (cachedLocation == null || cachedLocation.getLine() != lineNumber)\n             cachedLocation = new LocationImpl(resource, lineNumber);\n \n         return cachedLocation;",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/StaxTemplateParser.java",
                "status": "modified",
                "changes": 5,
                "deletions": 4,
                "sha": "235c1ebae4306cedcabbc42bc164b47dbe8b91f9",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/StaxTemplateParser.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/services/StaxTemplateParser.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/StaxTemplateParser.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -72,8 +72,9 @@\n      *\n      * @param mixinId      a unique id for the mixin, the last term of the mixin's class name\n      * @param instantiator used to instantiate an instance of the mixin\n+     * @param order        Ordering strings used to determine the order of mixin execution.\n      */\n-    void addMixin(String mixinId, Instantiator instantiator);\n+    void addMixin(String mixinId, Instantiator instantiator, String... order);\n \n     /**\n      * @param mixinId       id of previously added mixin",
                "additions": 2,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElement.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "b72d994458c63af7236e62c1ea4dd6524d03c9e9",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElement.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElement.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElement.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -24,11 +24,8 @@\n import org.apache.tapestry5.internal.util.NotificationEventCallback;\n import org.apache.tapestry5.ioc.BaseLocatable;\n import org.apache.tapestry5.ioc.Location;\n-import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n-import org.apache.tapestry5.ioc.internal.util.Defense;\n import static org.apache.tapestry5.ioc.internal.util.Defense.notBlank;\n-import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n-import org.apache.tapestry5.ioc.internal.util.TapestryException;\n+import org.apache.tapestry5.ioc.internal.util.*;\n import org.apache.tapestry5.model.ComponentModel;\n import org.apache.tapestry5.model.ParameterModel;\n import org.apache.tapestry5.runtime.Component;\n@@ -474,6 +471,12 @@ public String toString()\n \n     private final String id;\n \n+    private Orderer<Component> mixinBeforeOrderer;\n+\n+    private Orderer<Component> mixinAfterOrderer;\n+\n+    private List<Runnable> deferredLoadActions;\n+\n     private boolean loaded;\n \n     /**\n@@ -667,7 +670,7 @@ void addEmbeddedElement(ComponentPageElement child)\n         children.put(childId, child);\n     }\n \n-    public void addMixin(String mixinId, Instantiator instantiator)\n+    public void addMixin(String mixinId, Instantiator instantiator, String... order)\n     {\n         if (mixinIdToComponentResources == null)\n         {\n@@ -684,8 +687,19 @@ public void addMixin(String mixinId, Instantiator instantiator)\n                                                                                       instantiator);\n \n         mixinIdToComponentResources.put(mixinId, resources);\n-\n-        components.add(resources.getComponent());\n+        //note that since we're using explicit ordering now,\n+        //we don't add anything to components until we page load; instead, we add\n+        //to the orderers.\n+        if (order == null) order = new String[0];\n+        if (resources.getComponentModel().isMixinAfter())\n+        {\n+            if (mixinAfterOrderer == null) mixinAfterOrderer = new Orderer<Component>(getLogger());\n+            mixinAfterOrderer.add(mixinId,resources.getComponent(),order);\n+        } else\n+        {\n+            if (mixinBeforeOrderer == null) mixinBeforeOrderer =new Orderer<Component>(getLogger());\n+            mixinBeforeOrderer.add(mixinId,resources.getComponent(),order);\n+        }\n     }\n \n     public void bindMixinParameter(String mixinId, String parameterName, Binding binding)\n@@ -753,37 +767,26 @@ public void containingPageDidDetach()\n \n     public void containingPageDidLoad()\n     {\n-        // If this component has mixins, add the core component to the end of the list, after the\n+        // If this component has mixins, order them according to:\n         // mixins.\n \n         if (components != null)\n         {\n             List<Component> ordered = CollectionFactory.newList();\n \n-            Iterator<Component> i = components.iterator();\n-\n-            // Add all the normal components to the final list.\n-\n-            while (i.hasNext())\n-            {\n-                Component mixin = i.next();\n-\n-                if (mixin.getComponentResources().getComponentModel().isMixinAfter()) continue;\n-\n-                ordered.add(mixin);\n-\n-                // Remove from list, leaving just the late executing mixins\n-\n-                i.remove();\n-            }\n+            if (mixinBeforeOrderer != null)\n+                ordered.addAll(mixinBeforeOrderer.getOrdered());\n \n             ordered.add(coreComponent);\n \n             // Add the remaining, late executing mixins\n-\n-            ordered.addAll(components);\n+            if (mixinAfterOrderer != null)\n+                ordered.addAll(mixinAfterOrderer.getOrdered());\n \n             components = ordered;\n+            //no need to keep the orderers around.\n+            mixinBeforeOrderer = null;\n+            mixinAfterOrderer = null;\n         }\n \n         loaded = true;\n@@ -792,10 +795,19 @@ public void containingPageDidLoad()\n         // that is invoked first, before we check for unbound parameters.\n \n         invoke(false, CONTAINING_PAGE_DID_LOAD);\n-\n+        executeDeferredLoadActions();\n         verifyRequiredParametersAreBound();\n     }\n \n+    private void executeDeferredLoadActions()\n+    {\n+        if (deferredLoadActions == null) return;\n+        for(Runnable action : deferredLoadActions)\n+        {\n+            action.run();\n+        }\n+        deferredLoadActions = null;//having executed them, we have no need now to store them.\n+    }\n \n     public void enqueueBeforeRenderBody(RenderQueue queue)\n     {\n@@ -857,24 +869,38 @@ public Logger getLogger()\n \n     public Component getMixinByClassName(String mixinClassName)\n     {\n-        Component result = null;\n+        Component result = mixinForClassName(mixinClassName);\n \n-        if (mixinIdToComponentResources != null)\n+\n+        if (result == null) throw new TapestryException(StructureMessages.unknownMixin(completeId, mixinClassName),\n+                                                        getLocation(), null);\n+\n+        return result;\n+    }\n+\n+    private Component mixinForClassName(String mixinClassName)\n+    {\n+\n+        if (mixinIdToComponentResources == null) return null;\n+        for (InternalComponentResources resources : mixinIdToComponentResources.values())\n         {\n-            for (InternalComponentResources resources : mixinIdToComponentResources.values())\n+            if (resources.getComponentModel().getComponentClassName().equals(mixinClassName))\n             {\n-                if (resources.getComponentModel().getComponentClassName().equals(mixinClassName))\n-                {\n-                    result = resources.getComponent();\n-                    break;\n-                }\n+                return resources.getComponent();\n             }\n         }\n+        return null;\n+    }\n \n-        if (result == null) throw new TapestryException(StructureMessages.unknownMixin(completeId, mixinClassName),\n-                                                        getLocation(), null);\n+    public boolean isMixingIn(String mixinClassName)\n+    {\n+        return mixinForClassName(mixinClassName) != null;\n+    }\n \n-        return result;\n+    public void deferLoadAction(Runnable action)\n+    {\n+        if (deferredLoadActions == null) deferredLoadActions = CollectionFactory.newList();\n+        deferredLoadActions.add(action);\n     }\n \n     public ComponentResources getMixinResources(String mixinId)",
                "additions": 64,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java",
                "status": "modified",
                "changes": 102,
                "deletions": 38,
                "sha": "41b7a06796b64b63798de02361217e964a42e538",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007, 2008 The Apache Software Foundation\n+// Copyright 2006, 2007, 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -15,8 +15,7 @@\n package org.apache.tapestry5.internal.structure;\n \n import org.apache.tapestry5.*;\n-import org.apache.tapestry5.internal.InternalComponentResources;\n-import org.apache.tapestry5.internal.ParameterAccess;\n+import org.apache.tapestry5.internal.*;\n import org.apache.tapestry5.internal.services.Instantiator;\n import org.apache.tapestry5.ioc.AnnotationProvider;\n import org.apache.tapestry5.ioc.Location;\n@@ -37,6 +36,7 @@\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n+import java.util.Set;\n \n /**\n  * The bridge between a component and its {@link ComponentPageElement}, that supplies all kinds of resources to the\n@@ -66,6 +66,10 @@\n     // Case insensitive map from parameter name to ParameterAccess\n     private Map<String, ParameterAccess> access;\n \n+    // Case-insensitive map from container-parameter name to ParameterAccess, for BindParameter.\n+    // Should only ever be used for mixins.\n+    private Map<String, ParameterAccess> containerParameterAccess;\n+\n     private Messages messages;\n \n     // Case insensitive\n@@ -324,6 +328,16 @@ public Component getMixinByClassName(String mixinClassName)\n         return element.getMixinByClassName(mixinClassName);\n     }\n \n+    public boolean isMixingIn(String mixinClassName)\n+    {\n+        return element.isMixingIn(mixinClassName);\n+    }\n+\n+    public void deferLoadAction(Runnable action)\n+    {\n+        element.deferLoadAction(action);\n+    }\n+\n     public void renderInformalParameters(MarkupWriter writer)\n     {\n         if (bindings == null) return;\n@@ -474,6 +488,50 @@ public ParameterAccess getParameterAccess(final String parameterName)\n         return result;\n     }\n \n+    public ParameterAccess getContainerBoundParameterAccess(final String boundParameterName, String... parentParameterNames)\n+    {\n+        if (containerParameterAccess == null) containerParameterAccess = CollectionFactory.newCaseInsensitiveMap();\n+\n+        ParameterAccess result = containerParameterAccess.get(boundParameterName);\n+        if (result == null)\n+        {\n+            final InternalComponentResources res = (InternalComponentResources) getContainerResources();\n+            //Ideally, this check would occur at class fabrication time. But there's not currently a way\n+            //to tell if a component class is a mixin class, short of checking for \"mixins\" in the FQCN.\n+            //So we check to make sure that this component class name is in the set of mixins defined for the container\n+            //resources.\n+            if (!res.isMixingIn(this.getComponentModel().getComponentClassName())) {\n+                //then we're not a mixin, we're a component in the tree.\n+                throw new TapestryException(StructureMessages.bindParameterOnlyOnMixin(boundParameterName, this),this,null);\n+            }\n+            //Have to be careful here. Problem is that if the mixin is not @MixinAfter, its PAGE_DID_LOAD will be called\n+            //before the core component's. That can potentially result in missing default bindings if we\n+            //call getParameterAcces at the wrong time (the unbound parameter access will be cached...).\n+            String parentParameterName = findParentParameterName(parentParameterNames);\n+            if (parentParameterName == null)\n+            {\n+                throw new TapestryException(\n+                        StructureMessages.noSuchCoreComponentParameter(this,boundParameterName,parentParameterNames), \n+                        this,null);\n+            }\n+            result = createContainerParameterAccess(parentParameterName);\n+            containerParameterAccess.put(boundParameterName,result);\n+        }\n+        return result;\n+    }\n+\n+    private String findParentParameterName(String... queries)\n+    {\n+        for(String query : queries)\n+        {\n+            if(getContainerResources().getComponentModel().getParameterModel(query) != null)\n+            {\n+                return query;\n+            }\n+        }\n+        return null;\n+    }\n+\n     private ParameterAccess createParameterAccess(final String parameterName)\n     {\n         final Binding binding = getBinding(parameterName);\n@@ -482,8 +540,11 @@ private ParameterAccess createParameterAccess(final String parameterName)\n \n         final boolean allowNull = parameterModel == null ? true : parameterModel.isAllowNull();\n \n+        final boolean cache = parameterModel == null ? false : parameterModel.isCached();\n+\n         return new ParameterAccess()\n         {\n+\n             public boolean isBound()\n             {\n                 return binding != null;\n@@ -529,15 +590,24 @@ public Object read(String desiredTypeName)\n \n             public <T> void write(T parameterValue)\n             {\n-                if (binding == null) return;\n \n-                Class bindingType = binding.getBindingType();\n+                if (binding == null)\n+                {\n+                    //have to fire in case there's a mixin watching value;\n+                    //even if it's not bound to any other value,\n+                    //the mixin needs to know that the value internal to the component\n+                    //was changed.\n+                    fireParameterChanged(parameterName, parameterValue);\n+                    return;\n+                }\n \n+                Class bindingType = binding.getBindingType();\n                 try\n                 {\n                     Object coerced = elementResources.coerce(parameterValue, bindingType);\n \n                     binding.set(coerced);\n+                    fireParameterChanged(parameterName,coerced);\n                 }\n                 catch (Exception ex)\n                 {\n@@ -561,6 +631,113 @@ public Class getBoundType()\n             {\n                 return binding == null ? null : binding.getAnnotation(annotationClass);\n             }\n+\n+            private Set<ParameterChangeListener> listeners;\n+\n+            public void registerParameterChangeListener(ParameterChangeListener listener)\n+            {\n+                Defense.notNull(listener,\"listener\");\n+                if (listeners == null) listeners = CollectionFactory.newSet();\n+                listeners.add(listener);\n+            }\n+\n+            public void unregisterParameterChangeListener(ParameterChangeListener listener)\n+            {\n+                if (listeners == null) return;\n+                listeners.remove(listener);\n+            }\n+\n+            public boolean shouldCache()\n+            {\n+                return cache;\n+            }\n+\n+            protected void fireParameterChanged(String parameterName, Object newValue)\n+            {\n+                ParameterChangedEvent event = new ParameterChangedEvent(parameterName,newValue);\n+                for(ParameterChangeListener l : listeners)\n+                {\n+                    l.parameterChanged(event);\n+                }\n+            }\n+\n         };\n     }\n+\n+    private ParameterAccess createContainerParameterAccess(final String parentParameterName)\n+    {\n+\n+        return new ParameterAccess()\n+        {\n+\n+            private ParameterAccess access()\n+            {\n+                return element.getComponentResources().getParameterAccess(parentParameterName);\n+            }\n+\n+            public boolean isBound()\n+            {\n+                return element.getBinding(parentParameterName) != null;\n+            }\n+\n+            public Object read(String desiredTypeName)\n+            {\n+                return access().read(desiredTypeName);\n+            }\n+\n+            public <T> T read(Class<T> expectedType)\n+            {\n+                return access().read(expectedType);\n+            }\n+\n+            public <T> void write(T parameterValue)\n+            {\n+                access().write(parameterValue);\n+            }\n+\n+            public boolean isInvariant()\n+            {\n+                return access().isInvariant();\n+            }\n+\n+            public Class getBoundType()\n+            {\n+                return access().getBoundType();\n+            }\n+\n+            public void registerParameterChangeListener(final ParameterChangeListener listener)\n+            {\n+                //if it's not bound, try defering.\n+                if (isBound())\n+                {\n+                    access().registerParameterChangeListener(listener);\n+                } else\n+                {\n+                    //try waiting for it. If it's not bound after load, then it's not bound at all.\n+                    element.deferLoadAction(new Runnable() {\n+                        public void run()\n+                        {\n+                            access().registerParameterChangeListener(listener);\n+                        }\n+                    });\n+                }\n+            }\n+\n+            public void unregisterParameterChangeListener(ParameterChangeListener listener)\n+            {\n+                access().unregisterParameterChangeListener(listener);\n+            }\n+\n+            public boolean shouldCache()\n+            {\n+                return access().shouldCache();\n+            }\n+\n+            public <T extends Annotation> T getAnnotation(Class<T> annotationClass)\n+            {\n+                return access().getAnnotation(annotationClass);\n+            }\n+        };\n+\n+    }\n }",
                "additions": 182,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImpl.java",
                "status": "modified",
                "changes": 187,
                "deletions": 5,
                "sha": "12e298ee33fbe8117b71687f2d70a630f0c199c9",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImpl.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -18,10 +18,12 @@\n import org.apache.tapestry5.ioc.Messages;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n import org.apache.tapestry5.ioc.internal.util.MessagesImpl;\n+import org.apache.tapestry5.ComponentResources;\n \n import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n+import java.util.Arrays;\n \n final class StructureMessages\n {\n@@ -119,4 +121,21 @@ static String persistChangeBeforeLoadComplete()\n     {\n         return MESSAGES.get(\"persist-change-before-load-complete\");\n     }\n+\n+    static String noSuchCoreComponentParameter(ComponentResources mixinResources,\n+                                               String boundId, String...parameters)\n+    {\n+        return MESSAGES.format(\"no-such-core-component-parameter\",\n+                boundId,\n+                mixinResources.getComponentModel().getComponentClassName(),\n+                mixinResources.getContainerResources().getComponentModel().getComponentClassName(),\n+                InternalUtils.joinSorted(Arrays.asList(parameters)),\n+                InternalUtils.joinSorted(Arrays.asList(mixinResources.getContainerResources().getComponentModel().getDeclaredParameterNames())));\n+    }\n+\n+    public static String bindParameterOnlyOnMixin(String boundParameterName, InternalComponentResourcesImpl internalComponentResources)\n+    {\n+        return MESSAGES.format(\"bind-parameter-only-on-mixin\",boundParameterName,\n+                internalComponentResources.getComponentModel().getComponentClassName());\n+    }\n }",
                "additions": 19,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/StructureMessages.java",
                "status": "modified",
                "changes": 19,
                "deletions": 0,
                "sha": "48b3640c68d787d4ebb2f3555cfb80268c5df8a7",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/StructureMessages.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/StructureMessages.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/StructureMessages.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,348 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.internal.transform;\n+\n+import org.apache.tapestry5.services.*;\n+import org.apache.tapestry5.model.MutableComponentModel;\n+import org.apache.tapestry5.annotations.BindParameter;\n+import org.apache.tapestry5.internal.*;\n+import org.apache.tapestry5.internal.bindings.LiteralBinding;\n+import org.apache.tapestry5.ioc.util.BodyBuilder;\n+import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n+import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n+import org.apache.tapestry5.Binding;\n+\n+import java.util.List;\n+import java.util.Iterator;\n+import java.util.Arrays;\n+import java.lang.reflect.Modifier;\n+\n+/**\n+ * Responsible for identifying, via the {@link org.apache.tapestry5.annotations.BindParameter} annotation,\n+ * mixin fields that should be bound to a core-component parameter value.\n+ *\n+ * @since 5.2.0.0\n+ */\n+public class BindParameterWorker implements ComponentClassTransformWorker\n+{\n+\n+    private static final String EQUAL_METHOD_NAME = BindParameterWorker.class.getName() + \".equal\";\n+\n+    public void transform(final ClassTransformation transformation, MutableComponentModel model)\n+    {\n+        List<String> fieldNames = transformation.findFieldsWithAnnotation(BindParameter.class);\n+\n+        for(String fieldName : fieldNames)\n+        {\n+            BindParameter annotation = transformation.getFieldAnnotation(fieldName, BindParameter.class);\n+            convertFieldIntoContainerBoundParameter(fieldName, annotation, transformation, model);\n+        }\n+\n+    }\n+\n+    private void convertFieldIntoContainerBoundParameter(String name, BindParameter annotation, ClassTransformation transformation,\n+                                           MutableComponentModel model)\n+    {\n+        transformation.claimField(name, annotation);\n+\n+        String boundParameterName = getBoundParameterName(name, annotation.name());\n+        String[] parentParameterNames = getParentParameterNames(name, annotation.value());\n+\n+\n+        String type = transformation.getFieldType(name);\n+\n+        //we can't do this exactly the same as parameter. We can't know at transformation time which parameter\n+        //this thing will be linked to, because it could be wired to any number of different components.\n+        //So we have to wait until runtime to examine caching and whether we should cache, rather than\n+        //constructing the class differently based on caching or not.\n+        String cachedFieldName = transformation.addField(Modifier.PRIVATE, \"boolean\", name + \"_cached\");\n+\n+        String resourcesFieldName = transformation.getResourcesFieldName();\n+\n+        String accessFieldName = addBoundParameterSetup(name,\n+                boundParameterName, parentParameterNames,\n+                cachedFieldName, type, resourcesFieldName,\n+                transformation);\n+\n+        addReaderMethod(name, cachedFieldName, accessFieldName, boundParameterName, type, resourcesFieldName,\n+                        transformation);\n+\n+        addWriterMethod(name, cachedFieldName, accessFieldName, boundParameterName, type, resourcesFieldName,\n+                        transformation);\n+    }\n+\n+\n+    /**\n+     * Returns the name of a field that stores whether the parameter binding is invariant.\n+     */\n+    private String addBoundParameterSetup(String fieldName, String boundParameterName, String[] parentParameterNames,\n+                                     String cachedFieldName, String fieldType,\n+                                     String resourcesFieldName, ClassTransformation transformation)\n+    {\n+        String accessFieldName = transformation.addField(Modifier.PRIVATE, ParameterAccess.class.getName(),\n+                fieldName + \"_access\");\n+\n+        String parentNamesField = transformation.addField(Modifier.PRIVATE, String[].class.getName(),\n+                fieldName + \"_parentparameternames\");\n+\n+        String defaultFieldName = transformation.addField(Modifier.PRIVATE, fieldType, fieldName + \"_default\");\n+\n+        BodyBuilder builder = new BodyBuilder().begin();\n+\n+        builder.addln(\"%s = new String[%d];\",parentNamesField,parentParameterNames.length);\n+\n+        for(int i=0;i<parentParameterNames.length;i++)\n+        {\n+            builder.addln(\"%s[%d]=\\\"%s\\\";\",parentNamesField,i,parentParameterNames[i]);\n+        }\n+\n+        builder.addln(\"%s = %s.getContainerBoundParameterAccess(\\\"%s\\\",%s);\",\n+                accessFieldName,\n+                resourcesFieldName,\n+                boundParameterName,\n+                parentNamesField);\n+\n+        // Store the current value of the field into the default field. This value will\n+        // be used to reset the field after rendering.\n+\n+        builder.addln(\"%s = %s;\", defaultFieldName, fieldName);\n+\n+\n+        addListenerSetup(fieldName, fieldType, boundParameterName, parentParameterNames, accessFieldName,  builder,\n+                         transformation);\n+\n+        builder.end();\n+\n+        transformation.extendMethod(TransformConstants.CONTAINING_PAGE_DID_LOAD_SIGNATURE, builder\n+                .toString());\n+\n+        // Now, when the component completes rendering, ensure that any variant parameters are\n+        // are returned to default value. This isn't necessary when the parameter is not cached,\n+        // because (unless the binding is invariant), there's no value to get rid of (and if it is\n+        // invariant, there's no need to get rid of it).\n+        // as with reader/writer methods, we have to do the caching check at runtime.\n+        builder.clear();\n+\n+        builder.addln(\"if (%s.shouldCache() && ! %1$s.isInvariant())\", accessFieldName);\n+        builder.begin();\n+        builder.addln(\"%s = %s;\", fieldName, defaultFieldName);\n+        builder.addln(\"%s = false;\", cachedFieldName);\n+        builder.end();\n+\n+        // Clean up after the component renders.\n+\n+        String body = builder.toString();\n+\n+        transformation.extendMethod(TransformConstants.POST_RENDER_CLEANUP_SIGNATURE, body);\n+\n+        // And again, when the page is detached (TAPESTRY-2460)\n+\n+        transformation.extendMethod(TransformConstants.CONTAINING_PAGE_DID_DETACH_SIGNATURE, body);\n+\n+        return accessFieldName;\n+    }\n+\n+    private void addListenerSetup(\n+            String fieldName,\n+            String fieldType,\n+            String boundParameterName,\n+            String[] parentParameterNames,\n+            String accessFieldName,\n+            BodyBuilder builder,\n+            ClassTransformation transformation)\n+    {\n+        transformation.addImplementedInterface(ParameterChangeListener.class);\n+        builder.addln(\"%s.registerParameterChangeListener($0);\",accessFieldName);\n+\n+        TransformMethodSignature signature = new TransformMethodSignature(Modifier.PUBLIC, \"void\", \"parameterChanged\",\n+                new String[] {ParameterChangedEvent.class.getName()}, null);\n+\n+        BodyBuilder changedBody = new BodyBuilder().begin();\n+        //by this point, we know that there is at least one entry in parent Parameter Names.\n+        changedBody.add(\"if (%s($1, \\\"%s\\\")\", EQUAL_METHOD_NAME, parentParameterNames[0]);\n+        for(int i=1; i<parentParameterNames.length; i++)\n+        {\n+            changedBody.add(\" || %s($1, \\\"%s\\\")\", EQUAL_METHOD_NAME, parentParameterNames[i]);\n+        }\n+        changedBody.add(\")\").begin();\n+\n+        String cast = TransformUtils.getWrapperTypeName(fieldType);\n+\n+        if (TransformUtils.isPrimitive(fieldType))\n+            changedBody.addln(\"%s = ((%s) $1.getNewValue()).%s();\",\n+                    fieldName, cast, TransformUtils.getUnwrapperMethodName(fieldType));\n+        else\n+            changedBody.addln(\"%s = (%s) $1.getNewValue();\",fieldName, cast);\n+\n+        changedBody.addln(\"return;\").end();\n+\n+        changedBody.end();\n+\n+        transformation.extendMethod(signature,changedBody.toString());\n+\n+    }\n+\n+    private void addWriterMethod(String fieldName, String cachedFieldName, String accessFieldName,\n+                                 String boundParameterName, String fieldType,\n+                                 String resourcesFieldName, ClassTransformation transformation)\n+    {\n+        BodyBuilder builder = new BodyBuilder();\n+        builder.begin();\n+\n+        // Before the component is loaded, updating the property sets the default value\n+        // for the parameter. The value is stored in the field, but will be\n+        // rolled into default field inside containingPageDidLoad().\n+\n+        builder.addln(\"if (! %s.isLoaded())\", resourcesFieldName);\n+        builder.begin();\n+        builder.addln(\"%s = $1;\", fieldName);\n+        builder.addln(\"return;\");\n+        builder.end();\n+\n+        //unregistering the listener from the parameter change listener list avoids double-setting the field,\n+        builder.addln(\"%s.unregisterParameterChangeListener($0);\",accessFieldName);\n+\n+        // Always start by updating the parameter; this will implicitly check for\n+        // read-only or unbound parameters. $1 is the single parameter\n+        // to the method.\n+        builder.addln(\"%s.write(($w)$1);\", accessFieldName);\n+        builder.addln(\"%s = $1;\",fieldName);\n+        builder.addln(\"%s.registerParameterChangeListener($0);\",accessFieldName);\n+\n+        //note that there's no way of knowing at class transformation time which component a mixin will\n+        //be associated with and, further more, no way of knowing which @Parameter a mixin field will be\n+        //@BindParameter'ed to.  So we have to generate caching code that works at runtime, rather than\n+        //including or not including caching logic at transformation time.\n+        builder.addln(\"if (%s.shouldCache())\",accessFieldName).begin();\n+        builder.addln(\"%s = %s.isRendering();\",cachedFieldName, resourcesFieldName).end();\n+        builder.end();\n+\n+        String methodName = transformation.newMemberName(\"update_boundparameter\", boundParameterName);\n+\n+        TransformMethodSignature signature = new TransformMethodSignature(Modifier.PRIVATE, \"void\", methodName,\n+                new String[] {fieldType}, null);\n+\n+        transformation.addMethod(signature, builder.toString());\n+\n+        builder.clear();\n+\n+        //add the catch because if we don't re-register the class as a parameter change listener, it's value\n+        //could wind up stale, and write can throw an exception.\n+        builder.begin();\n+        builder.addln(\"%s.registerParameterChangeListener($0);\", accessFieldName);\n+        builder.addln(\"throw $e;\");\n+        builder.end();\n+\n+        transformation.addCatch(signature,Exception.class.getName(),builder.toString());\n+\n+        transformation.replaceWriteAccess(fieldName, methodName);\n+    }\n+\n+    /**\n+     * Adds a private method that will be the replacement for read-access to the field.\n+     */\n+    private void addReaderMethod(String fieldName, String cachedFieldName, String accessFieldName,\n+                                 String boundParameterName, String fieldType, String resourcesFieldName,\n+                                 ClassTransformation transformation)\n+    {\n+        BodyBuilder builder = new BodyBuilder();\n+        builder.begin();\n+\n+        // While the component is still loading, or when the value for the component is cached,\n+        // or if the value is not bound, then return the current value of the field.\n+\n+        builder.addln(\"if ((%s.shouldCache() && %s) || ! %s.isLoaded() || ! %s.isBound()) return %s;\",\n+                accessFieldName, cachedFieldName, resourcesFieldName, accessFieldName, fieldName);\n+\n+        String cast = TransformUtils.getWrapperTypeName(fieldType);\n+\n+        // The ($r) cast will convert the result to the method return type; generally\n+        // this does nothing. but for primitive types, it will unwrap\n+        // the wrapper type back to a primitive.  We pass the desired type name\n+        // to readParameter(), since its easier to convert it properly to\n+        // a type on that end than in the generated code.\n+\n+        builder.addln(\"%s result = ($r) ((%s) %s.read(\\\"%2$s\\\"));\", fieldType, cast, accessFieldName);\n+\n+        // If the binding is invariant, then it's ok to cache. Othewise, its only\n+        // ok to cache if a) the @Parameter says to cache and b) the component\n+        // is rendering at the point when field is accessed.\n+\n+        builder.add(\"if (%s.isInvariant() || (%1$s.shouldCache() && %s.isRendering()))\",\n+                accessFieldName, resourcesFieldName);\n+\n+        builder.begin();\n+        builder.addln(\"%s = result;\", fieldName);\n+        builder.addln(\"%s = true;\", cachedFieldName);\n+        builder.end();\n+\n+        builder.addln(\"return result;\");\n+        builder.end();\n+\n+        String methodName = transformation.newMemberName(\"read_boundparameter\", boundParameterName);\n+\n+        TransformMethodSignature signature = new TransformMethodSignature(Modifier.PRIVATE, fieldType, methodName, null,\n+                null);\n+\n+        transformation.addMethod(signature, builder.toString());\n+\n+        transformation.replaceReadAccess(fieldName, methodName);\n+    }\n+\n+    private String getBoundParameterName(String fieldName, String annotatedName)\n+    {\n+        if (InternalUtils.isNonBlank(annotatedName)) return annotatedName;\n+\n+        return InternalUtils.stripMemberName(fieldName);\n+    }\n+\n+    private String[] getParentParameterNames(String fieldName, String... names)\n+    {\n+        List<String> temp = CollectionFactory.newList(names);\n+        for(Iterator<String> it = temp.iterator();it.hasNext(); )\n+        {\n+            String name =it.next();\n+            if (InternalUtils.isBlank(name)) it.remove();\n+        }\n+        if (temp.isEmpty())\n+            return new String[] {InternalUtils.stripMemberName(fieldName)};\n+\n+        return temp.toArray(new String[temp.size()]);\n+    }\n+\n+    /**\n+     * Invoked from generated code as part of the handling of parameter default methods.\n+     */\n+    public static void bind(String parameterName, InternalComponentResources resources, Object value)\n+    {\n+        if (value == null) return;\n+\n+        if (value instanceof Binding)\n+        {\n+            Binding binding = (Binding) value;\n+\n+            resources.bindParameter(parameterName, binding);\n+            return;\n+        }\n+\n+        resources.bindParameter(parameterName, new LiteralBinding(null, \"default \" + parameterName, value));\n+    }\n+\n+    public static <T> boolean equal(T left, T right)\n+    {\n+        return TapestryInternalUtils.isEqual(left,right);\n+    }\n+\n+}",
                "additions": 348,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/BindParameterWorker.java",
                "status": "added",
                "changes": 348,
                "deletions": 0,
                "sha": "c6b82b88c8d3d4e212324c6198aeeb3ae1b4fecd",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/BindParameterWorker.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/BindParameterWorker.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/BindParameterWorker.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -20,9 +20,11 @@\n import org.apache.tapestry5.internal.KeyValue;\n import org.apache.tapestry5.internal.TapestryInternalUtils;\n import org.apache.tapestry5.ioc.Location;\n+import org.apache.tapestry5.ioc.Orderable;\n import org.apache.tapestry5.ioc.internal.services.StringLocation;\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n+import org.apache.tapestry5.ioc.internal.util.TapestryException;\n import org.apache.tapestry5.model.ComponentModel;\n import org.apache.tapestry5.model.MutableComponentModel;\n import org.apache.tapestry5.model.MutableEmbeddedComponentModel;\n@@ -95,8 +97,20 @@ private void addMixinClasses(String fieldName, ClassTransformation transformatio\n \n         if (annotation == null) return;\n \n-        for (Class c : annotation.value())\n-            model.addMixin(c.getName());\n+        boolean orderEmpty = annotation.order().length == 0;\n+\n+        if (!orderEmpty && annotation.order().length != annotation.value().length)\n+            throw new TapestryException(TransformMessages.badMixinConstraintLength(annotation,fieldName),\n+                    model,null);\n+\n+\n+        for (int i=0; i<annotation.value().length;i++)\n+        {\n+            String[] constraints = orderEmpty?\n+                    new String[0]:\n+                    TapestryInternalUtils.splitMixinConstraints(annotation.order()[i]);\n+            model.addMixin(annotation.value()[i].getName(), constraints);\n+        }\n     }\n \n     private void addMixinTypes(String fieldName, ClassTransformation transformation,\n@@ -108,8 +122,9 @@ private void addMixinTypes(String fieldName, ClassTransformation transformation,\n \n         for (String typeName : annotation.value())\n         {\n-            String mixinClassName = resolver.resolveMixinTypeToClassName(typeName);\n-            model.addMixin(mixinClassName);\n+            Orderable<String> typeAndOrder = TapestryInternalUtils.mixinTypeAndOrder(typeName);\n+            String mixinClassName = resolver.resolveMixinTypeToClassName(typeAndOrder.getTarget());\n+            model.addMixin(mixinClassName,typeAndOrder.getConstraints());\n         }\n     }\n ",
                "additions": 19,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ComponentWorker.java",
                "status": "modified",
                "changes": 23,
                "deletions": 4,
                "sha": "68eb601b5a92bd34a6031b34428ca6309a5b17b3",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ComponentWorker.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ComponentWorker.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ComponentWorker.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2008 The Apache Software Foundation\n+// Copyright 2006, 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -50,12 +50,14 @@ public void transform(ClassTransformation transformation, MutableComponentModel\n             \n             String mixinType = annotation.value();\n \n+            String[] order = annotation.order();\n+\n             String fieldType = transformation.getFieldType(fieldName);\n \n             String mixinClassName = InternalUtils.isBlank(mixinType) ? fieldType : resolver\n                     .resolveMixinTypeToClassName(mixinType);\n \n-            model.addMixinClassName(mixinClassName);\n+            model.addMixinClassName(mixinClassName,order);\n \n             transformation.makeReadOnly(fieldName);\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/MixinWorker.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "d52a5bc00f2d6cb31e75699fa1c2b22d579cd975",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/MixinWorker.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/MixinWorker.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/MixinWorker.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -16,8 +16,8 @@\n \n import org.apache.tapestry5.Binding;\n import org.apache.tapestry5.annotations.Parameter;\n-import org.apache.tapestry5.internal.InternalComponentResources;\n-import org.apache.tapestry5.internal.ParameterAccess;\n+import org.apache.tapestry5.annotations.BindParameter;\n+import org.apache.tapestry5.internal.*;\n import org.apache.tapestry5.internal.bindings.LiteralBinding;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n import org.apache.tapestry5.ioc.util.BodyBuilder;\n@@ -35,6 +35,7 @@\n public class ParameterWorker implements ComponentClassTransformWorker\n {\n     private static final String BIND_METHOD_NAME = ParameterWorker.class.getName() + \".bind\";\n+    private static final String EQUAL_METHOD_NAME = ParameterWorker.class.getName() + \".equal\";\n \n     private final BindingSource bindingSource;\n \n@@ -84,11 +85,11 @@ private void convertFieldIntoParameter(String name, Parameter annotation, ClassT\n \n         String parameterName = getParameterName(name, annotation.name());\n \n-        model.addParameter(parameterName, annotation.required(), annotation.allowNull(), annotation.defaultPrefix());\n+        boolean cache = annotation.cache();\n \n-        String type = transformation.getFieldType(name);\n+        model.addParameter(parameterName, annotation.required(), annotation.allowNull(), annotation.defaultPrefix(),cache);\n \n-        boolean cache = annotation.cache();\n+        String type = transformation.getFieldType(name);\n \n         String cachedFieldName = transformation.addField(Modifier.PRIVATE, \"boolean\", name + \"_cached\");\n \n@@ -133,6 +134,9 @@ private String addParameterSetup(String fieldName, String defaultPrefix, String\n         // be used to reset the field after rendering.\n \n         builder.addln(\"%s = %s;\", defaultFieldName, fieldName);\n+\n+        addListenerSetup(fieldName, fieldType, parameterName, accessFieldName, builder, transformation);\n+\n         builder.end();\n \n         transformation.extendMethod(TransformConstants.CONTAINING_PAGE_DID_LOAD_SIGNATURE, builder\n@@ -232,9 +236,45 @@ public boolean accept(TransformMethodSignature signature)\n                       actualMethodName);\n     }\n \n+    private void addListenerSetup(\n+            String fieldName,\n+            String fieldType,\n+            String parameterName,\n+            String accessFieldName,\n+            BodyBuilder builder,\n+            ClassTransformation transformation)\n+    {\n+        transformation.addImplementedInterface(ParameterChangeListener.class);\n+        builder.addln(\"%s.registerParameterChangeListener($0);\",accessFieldName);\n+\n+        TransformMethodSignature signature = new TransformMethodSignature(Modifier.PUBLIC, \"void\", \"parameterChanged\",\n+                new String[] {ParameterChangedEvent.class.getName()}, null);\n+\n+        BodyBuilder changedBody = new BodyBuilder();\n+        changedBody.begin();\n+\n+        changedBody.addln(\"if (%s($1, \\\"%s\\\"))\",EQUAL_METHOD_NAME,parameterName);\n+        changedBody.begin();\n+\n+        String cast = TransformUtils.getWrapperTypeName(fieldType);\n+\n+        if (TransformUtils.isPrimitive(fieldType))\n+            changedBody.addln(\"%s = ((%s) $1.getNewValue()).%s();\",\n+                                fieldName, cast, TransformUtils.getUnwrapperMethodName(fieldType));\n+        else\n+            changedBody.addln(\"%s = (%s) $1.getNewValue();\",fieldName, cast);\n+\n+        changedBody.addln(\"return;\");\n+        changedBody.end();\n+\n+        changedBody.end();\n+        \n+        transformation.extendMethod(signature,changedBody.toString());\n+\n+    }\n+\n     private void addWriterMethod(String fieldName, String cachedFieldName, String accessFieldName, boolean cache,\n-                                 String parameterName,\n-                                 String fieldType, String resourcesFieldName,\n+                                 String parameterName, String fieldType, String resourcesFieldName,\n                                  ClassTransformation transformation)\n     {\n         BodyBuilder builder = new BodyBuilder();\n@@ -253,11 +293,10 @@ private void addWriterMethod(String fieldName, String cachedFieldName, String ac\n         // Always start by updating the parameter; this will implicitly check for\n         // read-only or unbound parameters. $1 is the single parameter\n         // to the method.\n-\n+        builder.addln(\"%s.unregisterParameterChangeListener($0);\",accessFieldName);\n         builder.addln(\"%s.write(($w)$1);\", accessFieldName);\n-\n+        builder.addln(\"%s.registerParameterChangeListener($0);\",accessFieldName);\n         builder.addln(\"%s = $1;\", fieldName);\n-\n         if (cache) builder.addln(\"%s = %s.isRendering();\", cachedFieldName, resourcesFieldName);\n \n         builder.end();\n@@ -269,6 +308,17 @@ private void addWriterMethod(String fieldName, String cachedFieldName, String ac\n \n         transformation.addMethod(signature, builder.toString());\n \n+        builder.clear();\n+\n+        //add the catch because if we don't re-register the class as a parameter change listener, it's value\n+        //could wind up stale, and write can throw an exception.\n+        builder.begin();\n+        builder.addln(\"%s.registerParameterChangeListener($0);\",accessFieldName);\n+        builder.addln(\"throw $e;\");\n+        builder.end();\n+\n+        transformation.addCatch(signature,Exception.class.getName(),builder.toString());\n+\n         transformation.replaceWriteAccess(fieldName, methodName);\n     }\n \n@@ -349,4 +399,9 @@ public static void bind(String parameterName, InternalComponentResources resourc\n \n         resources.bindParameter(parameterName, new LiteralBinding(null, \"default \" + parameterName, value));\n     }\n+\n+    public static <T> boolean equal(T left, T right)\n+    {\n+        return TapestryInternalUtils.isEqual(left,right);\n+    }\n }",
                "additions": 65,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ParameterWorker.java",
                "status": "modified",
                "changes": 75,
                "deletions": 10,
                "sha": "e2da61b4958fbb59a76cd92c27362847c3c36155",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ParameterWorker.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ParameterWorker.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ParameterWorker.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2008 The Apache Software Foundation\n+// Copyright 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -21,6 +21,7 @@\n import org.apache.tapestry5.ioc.internal.util.MessagesImpl;\n import org.apache.tapestry5.runtime.Component;\n import org.apache.tapestry5.services.TransformMethodSignature;\n+import org.apache.tapestry5.annotations.MixinClasses;\n \n class TransformMessages\n {\n@@ -51,4 +52,10 @@ static String illegalNumberOfPageActivationContextHandlers(List<String> fields)\n     {\n         return MESSAGES.format(\"illegal-number-of-page-activation-context-handlers\", InternalUtils.joinSorted(fields));\n     }\n+\n+\n+    public static String badMixinConstraintLength(MixinClasses mixin, String fieldName)\n+    {\n+        return MESSAGES.format(\"bad-mixin-constraint-length\",mixin.value().length,fieldName,mixin.order().length);\n+    }\n }",
                "additions": 8,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/TransformMessages.java",
                "status": "modified",
                "changes": 9,
                "deletions": 1,
                "sha": "5168a6012792087dc378103ec91b1fd3feb6dd7c",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/TransformMessages.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/TransformMessages.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/TransformMessages.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -167,4 +167,11 @@\n      * @return true if event handler present\n      */\n     boolean handlesEvent(String eventType);\n+\n+    /**\n+     * @param mixinClassName class name of the mixin for which the ordering is desired\n+     * @return the ordering constraint(s) for the mixin, potentially null.\n+     * @since 5.2.0.0\n+     */\n+    String[] getOrderForMixin(String mixinClassName);\n }",
                "additions": 7,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/ComponentModel.java",
                "status": "modified",
                "changes": 7,
                "deletions": 0,
                "sha": "8694ac9e8a1572d7f11ae7f40ee19dc0cac6547a",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/ComponentModel.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/model/ComponentModel.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/model/ComponentModel.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -69,4 +69,11 @@\n      * @since 5.1.0.0\n      */\n     List<String> getPublishedParameters();\n+\n+    /**\n+     * @param mixinClassName\n+     * @return the ordering constraints for the specified mixin, or null.\n+     * @Since 5.2.0.0\n+     */\n+    String[] getConstraintsForMixin(String mixinClassName);\n }",
                "additions": 7,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/EmbeddedComponentModel.java",
                "status": "modified",
                "changes": 7,
                "deletions": 0,
                "sha": "f359affa34494a206b861a52aee4ba16674b3ca3",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/EmbeddedComponentModel.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/model/EmbeddedComponentModel.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/model/EmbeddedComponentModel.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -34,9 +34,26 @@\n      * @param defaultBindingPrefix the default binding prefix for this parameter @throws IllegalArgumentException if a\n      *                             parameter with the given name has already been defined for this model\n      * @see Parameter\n+     * @deprecated Use {@link #addParameter(String, boolean, boolean, String, boolean)} instead.\n      */\n     void addParameter(String name, boolean required, boolean allowNull, String defaultBindingPrefix);\n \n+    /**\n+     * Adds a new formal parameter to the model. Each parameter has a unique name (though access to parameters is case\n+     * insensitive).\n+     *\n+     * @param name                 new, unique name for the parameter\n+     * @param required             if true, the parameter must be bound\n+     * @param allowNull            if true, then parameter may be bound to null, if false a null check will be added\n+     * @param defaultBindingPrefix the default binding prefix for this parameter @throws IllegalArgumentException if a\n+     *                             parameter with the given name has already been defined for this model\n+     * @param cached               if true, the parameter value should be cached within the component during rendering\n+     * @see org.apache.tapestry5.annotations.Parameter\n+     * @since 5.2.0.0\n+     */\n+    public void addParameter(String name, boolean required, boolean allowNull, String defaultBindingPrefix,boolean cached);\n+\n+\n     /**\n      * Defines a new embedded component.\n      *\n@@ -66,9 +83,10 @@ MutableEmbeddedComponentModel addEmbeddedComponent(String id, String type, Strin\n     String setFieldPersistenceStrategy(String fieldName, String strategy);\n \n     /**\n-     * Adds a mixin to the component's implementation.\n+     * Adds a mixin to the component's implementation, optionally specifying ordering constraints, as per OrderedConfiguration.\n+     * @since 5.2.0.0\n      */\n-    void addMixinClassName(String mixinClassName);\n+    void addMixinClassName(String mixinClassName, String... order);\n \n     /**\n      * Sets the internal flag to indicate that this model (and all models that extend from it) support informal",
                "additions": 20,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/MutableComponentModel.java",
                "status": "modified",
                "changes": 22,
                "deletions": 2,
                "sha": "361c06d35098a797b30974536ef6945f3155df37",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/MutableComponentModel.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/model/MutableComponentModel.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/model/MutableComponentModel.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -25,9 +25,9 @@\n     void addParameter(String name, String value);\n \n     /**\n-     * Adds a mixin to the component in terms of its fully qualified class name.\n+     * Adds a mixin to the component in terms of its fully qualified class name, with optional ordering constraints.\n      */\n-    void addMixin(String mixinClassName);\n+    void addMixin(String mixinClassName, String... orderingConstraints);\n \n     /**\n      * Sets the list of published parameters for this embedded component.",
                "additions": 2,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/MutableEmbeddedComponentModel.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "b27aab187fc6324bab76cdb687d084d75c81c9bc",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/MutableEmbeddedComponentModel.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/model/MutableEmbeddedComponentModel.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/model/MutableEmbeddedComponentModel.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2008 The Apache Software Foundation\n+// Copyright 2006, 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -42,4 +42,10 @@\n      * The default binding prefix for the parameter, usually \"prop\".\n      */\n     String getDefaultBindingPrefix();\n+\n+    /**\n+     * @return true if the bound-value is cached in the component during rendering.\n+     * @since 5.2.0.0\n+     */\n+    boolean isCached();\n }",
                "additions": 7,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/ParameterModel.java",
                "status": "modified",
                "changes": 8,
                "deletions": 1,
                "sha": "3e462fb0928cec22b0c941b03d7de9015b65a6fe",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/ParameterModel.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/model/ParameterModel.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/model/ParameterModel.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -484,6 +484,12 @@ public static void contributeComponentClassTransformWorker(\n \n         configuration.addInstance(\"Parameter\", ParameterWorker.class, \"after:Inject*\");\n \n+        //bind parameter should always go after parameter to make sure all parameters\n+        //have been properly setup.\n+\n+        configuration.addInstance(\"BindParameter\",BindParameterWorker.class, \"after:Parameter\");\n+\n+\n         // Workers for the component rendering state machine methods; this is in typical\n         // execution order.\n ",
                "additions": 6,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/services/TapestryModule.java",
                "status": "modified",
                "changes": 6,
                "deletions": 0,
                "sha": "2d0910f4ad100693bbcd8b9dc9793e1c7fd962ea",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/services/TapestryModule.java",
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/services/TapestryModule.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/services/TapestryModule.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,40 @@\n+#\n+# Copyright 2009 The Apache Software Foundation\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+unique_mixin_required=Mixins applied to a component must be unique. Mixin '%s' has already been applied.\n+mixinid_for_paramnotfound=\"Mixin id for parameter '%s' not found. Attached mixins: %s.\"\n+missing_component_type=You must specify the type via t:type, the element, or @Componentno_more_tokens=No more template tokens.\n+could_not_find_override=Could not find an override for extension point '%s'.\n+no_parent_for_extension=Component %s uses an extension template, but does not have a parent component.\n+token_not_implemented=Not yet implemented: %s\n+parameter_not_supported=Component %s does not include a formal parameter '%s' (and does not support informal parameters).\n+redundant_embedded_component_types=Embedded component '%s' provides a type attribute in the template ('%s') \\\n+                                   as well as in the component class ('%s'). You should not provide a type attribute \\\n+                                   in the template when defining an embedded component within the component class.\n+recursive_template=The template for component %s is recursive (contains another direct or indirect reference to \\\n+                   component %<s). This is not supported (components may not contain themselves).\n+composite_render_command_method_not_implemented=RenderQueue method %s() is not implemented for composited render commands.\n+exception_assembling_root_component=Exception assembling root component of page %s: %s\n+exception_assembling_embedded_component=Exception assembling embedded component '%s' (of type %s, within %s): %s\n+embedded_components_not_in_template=Embedded component(s) %s are defined within component class %s \\\n+                                    (or a super-class of %s), but are not present in the component template (%s).\n+parameter_already_published=Parameter '%s' of embedded component '%s' can not be published as a parameter of component \\\n+                            %s, as it has previously been published by embedded component '%s'.\n+failure_creating_embedded_component=Failure creating embedded component '%s' of %s: %s\"\n+published_parameter_nonexistant=Parameter '%s' of component %s is improperly published from embedded component '%s' \\\n+                                (where it does not exist). This may be a typo in the publishParameters attribute of \\\n+                                the @Component annotation.\n+",
                "additions": 40,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/resources/org/apache/tapestry5/internal/pageload/PageloadStrings.properties",
                "status": "added",
                "changes": 40,
                "deletions": 0,
                "sha": "cb8b504265e70ef8df6c71355e7ab9dd5a75813d",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/resources/org/apache/tapestry5/internal/pageload/PageloadStrings.properties",
                "filename": "tapestry-core/src/main/resources/org/apache/tapestry5/internal/pageload/PageloadStrings.properties",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/resources/org/apache/tapestry5/internal/pageload/PageloadStrings.properties?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -35,4 +35,8 @@ field-persist-failure=Error persisting field %s:%s: %s\n missing-render-variable=Component %s does not contain a stored render variable with name '%s'.  Stored render variables: %s.\n render-variable-set-when-not-rendering=Component %s is not rendering, so render variable '%s' may not be updated.\n persist-change-before-load-complete=Persistent fields may not be updated until after the page has finished loading. \\\n-  This may be due to a persistent field with a default value. The default value should be removed.\n\\ No newline at end of file\n+  This may be due to a persistent field with a default value. The default value should be removed.\n+no-such-core-component-parameter=Failed to BindParameter '%s' in mixin '%s': component '%s' does not provide a matching \\\n+  parameter (looking for: %s).  Available parameters: %s\n+bind-parameter-only-on-mixin=@BindParameter was used on '%s' in component class '%s', but @BindParameter should \\\n+  only be used in mixins.",
                "additions": 5,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/resources/org/apache/tapestry5/internal/structure/StructureStrings.properties",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "a17fc508bc3243ce4c6c049c8065cf977dfa819f",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/resources/org/apache/tapestry5/internal/structure/StructureStrings.properties",
                "filename": "tapestry-core/src/main/resources/org/apache/tapestry5/internal/structure/StructureStrings.properties",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/resources/org/apache/tapestry5/internal/structure/StructureStrings.properties?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -17,3 +17,5 @@ component-not-assignable-to-field=Component %s is not assignable to field %s (of\n cached-no-return-value=@Cached may only be used with methods that return values: %s\n cached-no-parameters=@Cached cannot be used with methods that accept parameters: %s\n illegal-number-of-page-activation-context-handlers=Illegal number of fields annotated with @PageActivationContext: %s. Only one field is allowed.\n+bad-mixin-constraint-length=%d mixins defined via @MixinClasses on field '%s', but %d ordering constraints \\\n+ specified (expected 0 or %1$d).",
                "additions": 2,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/resources/org/apache/tapestry5/internal/transform/TransformStrings.properties",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "b6fce47a71248481eac55b3e329bfbd84f1642e6",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/resources/org/apache/tapestry5/internal/transform/TransformStrings.properties",
                "filename": "tapestry-core/src/main/resources/org/apache/tapestry5/internal/transform/TransformStrings.properties",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/resources/org/apache/tapestry5/internal/transform/TransformStrings.properties?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -10,8 +10,12 @@\n   <p>\n     Session: [${sessionExists}]\n   </p>\n-  \n-  \n+\n+\n+  <p>\n+    <t:actionlink t:id=\"nixSession\">nix session</t:actionlink>\n+  </p>\n+\n   <p>\n     <t:actionlink t:id=\"storeString\">store string</t:actionlink>\n   </p>\n@@ -24,4 +28,5 @@\n     <t:pagelink page=\"clientpersistencedemo\">refresh</t:pagelink>\n   </p>\n \n+\n </html>\n\\ No newline at end of file",
                "additions": 7,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/app1/ClientPersistenceDemo.tml",
                "status": "modified",
                "changes": 9,
                "deletions": 2,
                "sha": "f9fb94bcfc7b9df95c7ec6e74d0ecb059e25ed16",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/app1/ClientPersistenceDemo.tml",
                "filename": "tapestry-core/src/test/app1/ClientPersistenceDemo.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/app1/ClientPersistenceDemo.tml?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -41,6 +41,16 @@ public IntegrationTests()\n         super(\"src/test/app1\");\n     }\n \n+\n+    @Test(enabled = false)\n+    public static void main(String[] args) throws Exception {\n+        IntegrationTests it = new IntegrationTests();\n+        it.setup();\n+        while(true) {\n+            Thread.sleep(1000);\n+        }\n+    }\n+\n     @Test\n     public void assets() throws Exception\n     {\n@@ -133,12 +143,13 @@ public void environmental()\n     @Test\n     public void exception_report()\n     {\n+        //mismatched tag.\n         start(\"BadTemplate Page\");\n \n         assertTextPresent(\"org.apache.tapestry5.ioc.internal.util.TapestryException\",\n-                          \"Failure parsing template classpath:org/apache/tapestry5/integration/app1/pages/BadTemplate.tml, line 7, column 15\",\n-                          \"<t:foobar>content from template</t:foobar>\",\n-                          \"Element <t:foobar> is in the Tapestry namespace, but is not a recognized Tapestry template element.\");\n+                          \"Failure parsing template classpath:org/apache/tapestry5/integration/app1/pages/BadTemplate.tml: Unexpected close tag </foobar>; expected </t:foobar>\",\n+                          \"classpath:org/apache/tapestry5/integration/app1/pages/BadTemplate.tml, line 6\",\n+                          \"<t:foobar>content from template</foobar>\");\n     }\n \n     @Test\n@@ -566,7 +577,7 @@ public void bean_editor()\n         // The XPath support is too weak for //div[@class='t-beandisplay-value'][%d], so we\n         // just look for the text itself.\n \n-        assertTextPresent(\"Howard\", \"Lewis Ship\", \"1966\", \"Martian\", \"U. S. Citizen\", \"***********\", \"line1\", \"line2\",\n+        assertTextPresent(\"Howard\", \"Lewis Ship\", \"1966\", \"Martian\", \"U.S. Citizen\", \"***********\", \"line1\", \"line2\",\n                           \"line3\");\n     }\n \n@@ -581,10 +592,11 @@ public void bean_editor_property_reorder_remove()\n         type(\"firstName\", \"Howard\");\n         type(\"lastName\", \"Lewis Ship\");\n         type(\"password\", \"supersecret\");\n+        check(\"citizen\");\n \n         clickAndWait(\"//input[@type=\\'submit\\']\");\n \n-        assertTextPresent(\"Howard\", \"Lewis Ship\", \"0\", \"100% He-Man\", \"U. S. Citizen\");\n+        assertTextPresent(\"Howard\", \"Lewis Ship\", \"0\", \"100% He-Man\", \"U.S. Citizen\");\n     }\n \n     @Test\n@@ -847,7 +859,7 @@ public void client_side_validation()\n \n         clickAndWait(SUBMIT);\n \n-        assertTextPresent(\"Howard\", \"Lewis Ship\", \"1966\", \"U. S. Citizen\");\n+        assertTextPresent(\"Howard\", \"Lewis Ship\", \"1966\", \"U.S. Citizen\");\n     }\n \n     @Test\n@@ -865,7 +877,7 @@ public void render_phase_method_may_return_renderable()\n     {\n         start(\"Renderable Demo\");\n \n-        assertTextPresent(\"Renderable Demo\", \"[proves it works.]\");\n+        assertTextPresent(\"Renderable Demo\", \"[This proves it works.]\");\n     }\n \n     @Test\n@@ -912,6 +924,9 @@ public void inherited_bindings()\n     public void client_persistence()\n     {\n         start(\"Client Persistence Demo\");\n+        //can't assume session won't exist because other tests use form components w/ defaults, which means\n+        //session creation to store the ValidationTracker. So we explicitly clear the session here.\n+        clickAndWait(\"link=nix session\");\n \n         assertTextPresent(\"Persisted value: []\", \"Session: [false]\");\n \n@@ -1045,16 +1060,17 @@ public void event_handler_return_types()\n         goBack();\n         waitForPageToLoad();\n \n-        // This has been failing?  Why?\n-\n-        // clickAndWait(\"link=URL\");\n-        // assertTextPresent(\"Google\");\n-        // goBack();\n-        // waitForPageToLoad();\n+        /*\n+        clickAndWait(\"link=URL\");\n+        assertTextPresent(\"Google>\");\n+        goBack();\n+        waitForPageToLoad();\n+        */\n \n         clickAndWait(\"link=bad\");\n         assertTextPresent(\"An unexpected application exception has occurred.\",\n-                          \"An event handler for component org.apache.tapestry5.integration.app1.pages.Index returned the value 20 (from method org.apache.tapestry5.integration.app1.pages.Index.onActionFromBadReturnType() (at Index.java:34)). Return type java.lang.Integer can not be handled.\");\n+                          \"A component event handler method returned the value 20. Return type java.lang.Integer can not be handled.\",\n+                          \"context:ReturnTypes.tml, line 50\");\n     }\n \n     @Test\n@@ -1260,7 +1276,7 @@ public void date_field_inside_bean_editor()\n         start(\"BeanEditor / Date Demo\", \"clear\");\n \n         type(\"name\", \"Howard Lewis Ship\");\n-        type(\"date\", \"12/24/66\");\n+        type(\"date\", \"12/24/1966\");\n \n         clickAndWait(SUBMIT);\n \n@@ -1635,7 +1651,7 @@ public void component_event_errors()\n         clickAndWait(\"link=force invalid event context\");\n \n         assertTextPresent(\"An unexpected application exception has occurred.\",\n-                          \"org.apache.tapestry5.ioc.internal.util.TapestryException\",\n+                          \"org.apache.tapestry5.runtime.ComponentEventException\",\n                           \"java.lang.NumberFormatException\");\n     }\n \n@@ -2362,7 +2378,7 @@ public void form_field_outside_form()\n \n         assertTextPresent(\"org.apache.tapestry5.internal.services.RenderQueueException\",\n                           \"Render queue error in SetupRender[FormFieldOutsideForm:textfield]: The Textfield component must be enclosed by a Form component.\",\n-                          \"context:FormFieldOutsideForm.tml, line 5, column 45\");\n+                          \"context:FormFieldOutsideForm.tml, line 5\");\n     }\n \n     /**\n@@ -2967,6 +2983,130 @@ public void renderclientid_mixin()\n         assertText(\"divwithid\",\"Div Content\");\n     }\n \n+    @Test\n+    public void bindparameter()\n+    {\n+        start(\"BindParameter mixin annotation\");\n+        //implicit parameter name\n+        assertEchoMixins(\"testmixin\",\"mypropertyvalue\",0,-1,-1,1,true);\n+        assertText(\"mypropertyoutput\",\"mypropertyvalue\");\n+\n+        //explicit parameter name\n+        assertEchoMixins(\"testmixin2\",\"10\",-1,0,-1,2,true);\n+        assertText(\"mypropertyoutput2\",\"10\");\n+\n+        //multiple parameter names; first one found wins.\n+        assertEchoMixins(\"testmixin3\",\"hello\",-1,-1,0,3,true);\n+\n+        //multiple mixins\n+        assertEchoMixins(\"multimixins\",\"supervalue\",0,1,2,3,true);\n+        assertText(\"mypropertyoutput4\",\"supervalue\");\n+\n+        //finally, binding to default bindings (which is tricky because of page load invocation order)\n+        assertEchoMixins(\"defaultbinding\",\"goodbye\",0,-1,-1,1,false);\n+        assertText(\"mypropertyoutput5\",\"goodbye\");\n+    }\n+\n+    @Test\n+    public void bindparameter_nomatchingparameter()\n+    {\n+        start(\"BindParameter error handling\");\n+\n+        assertTextPresent(\"An unexpected application exception has occurred.\",\n+               \"Failed to BindParameter 'boundParameter' in mixin 'org.apache.tapestry5.integration.app1.mixins.EchoValue2': \"\n+                       + \"component 'org.apache.tapestry5.corelib.components.Any' does not provide a matching parameter \"\n+                       + \"(looking for: value). Available parameters: [clientId, element]\");\n+\n+    }\n+\n+    @Test\n+    public void bindparameter_on_componentfield_throws_exception()\n+    {\n+        start(\"BindParameter on component\");\n+\n+        assertTextPresent(\"An unexpected application exception has occurred.\",\n+        \"@BindParameter was used on 'value' in component class 'org.apache.tapestry5.integration.app1.components.BindParameterComponent', but @BindParameter should only be used in mixins\");\n+    }\n+\n+    @Test\n+    public void mixin_ordering()\n+    {\n+        //echo => <original>-before, temporaryvaluefromechovaluemixin, <original>-after\n+        //echo2 => echo2-<original>-before, \"3\", echo2-<original>-after\n+        //echo3 => echo3-<original>-before, \"world\", echo3-<original>-after\n+        //order1: echo, echo2, echo3\n+        start(\"Mixin Ordering Demo\");\n+\n+        assertMixinOrder(1,0,1,2,3,true);\n+        //order2: echo3, echo2, echo\n+        assertMixinOrder(2,2,3,0,1,true);\n+        //order3: echo2, echo3, echo\n+        assertMixinOrder(3,3,0,2,1,true);\n+        //order4: echo3, echo, echo2\n+        assertMixinOrder(4,3,1,0,2,true);\n+        //order5: echo2, echo, echo3\n+        assertMixinOrder(5,2,0,1,3,true);\n+        //order6: echo, echo3, echo2, TextOnlyOnDisabled\n+        assertMixinOrder(6,0,3,1,2,false);\n+        //make sure mixin after and mixin before constraints don't interfere...\n+        //order7: echo, echo2 <corecomponent> echoafter2, echoafter\n+        assertMixinOrder(7,0,1,-1,2,true);\n+        assertText(\"order7_before_but_after\",\"afterrender_for_mixinafter_isreally_justbefore_corecomponent_afterrender-before\");\n+        assertText(\"order7_after_but_before\",\"afterrender_for_mixinafter_isreally_justbefore_corecomponent_afterrender-after\");\n+        //echoafter2 should have for its value at the point it renders\n+        //the value that echo2 sets, since the core component isn't changing its value.\n+        assertText(\"order7_before_but_after2\",\"3-before\");\n+        assertText(\"order7_after_but_before2\",\"3-after\");\n+    }\n+\n+    private void assertMixinOrder(int orderNum, int echo1From, int echo2From, int echo3From, int fieldFrom, boolean isField)\n+    {\n+        assertEchoMixins(\"order\" + orderNum,\"batman\", echo1From,echo2From,echo3From,fieldFrom,isField);\n+    }\n+\n+    /**\n+     * asserts that the \"echo value\" mixins are properly functioning (ie @BindParameter, and mixin ordering).\n+     * each integer value specifies the echo mixin number (echovalue => 1, echovalue2 => 2, echovalue3 => 3; 0 is the original value)\n+     * from which the specified echo mixin is expected to \"receive\" its value. So if echo1From is 2, then the \"original value\"\n+     * printed by echo1 is expected to be the value set by echo2. If a given \"from\" is < 0, checking the corresponding mixin values is disabled.\n+     */\n+\n+    private void assertEchoMixins(String fieldName, String originalValue, int echo1From, int echo2From, int echo3From, int fieldFrom, boolean isField)\n+    {\n+        String[] vals = {originalValue,\"temporaryvaluefromechovaluemixin\",\"3\",\"world\"};\n+        String before = fieldName + \"_before\";\n+        String after = fieldName + \"_after\";\n+        if (echo1From > -1)\n+        {\n+            assertText(before,vals[echo1From] + \"-before\");\n+            assertText(after,vals[echo1From] + \"-after\");\n+        }\n+        if (echo2From > -1)\n+        {\n+            assertText(before + \"2\",\"echo2-\" + vals[echo2From] + \"-before\");\n+            assertText(after + \"2\",\"echo2-\" + vals[echo2From] + \"-after\");\n+        }\n+        if (echo3From > -1)\n+        {\n+            assertText(before + \"3\",\"echo3-\" + vals[echo3From] + \"-before\");\n+            assertText(after + \"3\",\"echo3-\" + vals[echo3From] + \"-after\");\n+        }\n+        if (isField)\n+            assertFieldValue(fieldName,vals[fieldFrom]);\n+        else\n+            assertText(fieldName,vals[fieldFrom]);\n+    }\n+\n+\n+    @Test\n+    public void missing_componentclass()\n+    {\n+        start(\"Missing Component Class Exception\");\n+        assertTextPresent(\n+                \"An unexpected application exception has occurred\",\n+                \"Failure creating embedded component 'componentwithnotype' of org.apache.tapestry5.integration.app1.pages.MissingComponentClassException: You must specify the type via t:type, the element, or @Component\");\n+    }\n+\n     @Test\n     public void session_attribute()\n     {\n@@ -2980,4 +3120,4 @@ public void session_attribute()\n         assertTextPresent(\"read Foo\");\n         assertTextPresent(\"read Bar\");\n     }\n-}\n\\ No newline at end of file\n+}",
                "additions": 158,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java",
                "status": "modified",
                "changes": 176,
                "deletions": 18,
                "sha": "32b1ac33992b8613342da6fc5dda99c5cf5464dc",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.components;\n+\n+import org.apache.tapestry5.annotations.BindParameter;\n+import org.apache.tapestry5.MarkupWriter;\n+\n+/**\n+ * @BindParameter should only be used inside a mixin; should get an intelligible exception when trying to use this component.\n+ */\n+public class BindParameterComponent\n+{\n+\n+    @BindParameter\n+    private Object value;\n+}",
                "additions": 28,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponent.java",
                "status": "added",
                "changes": 28,
                "deletions": 0,
                "sha": "311b5ab570871945b17f2255a514f7c395d73825",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponent.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponent.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponent.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.components;\n+\n+import org.apache.tapestry5.annotations.Parameter;\n+import org.apache.tapestry5.annotations.MixinAfter;\n+\n+/**\n+ * Used to help prove that BindParameter on a component field throws an intelligible exception, even if the containing\n+ * resources actually do contain a declared parameter of the appropriate name.\n+ */\n+public class BindParameterComponentContainer\n+{\n+\n+    @Parameter(\"literal:testvalue\")\n+    private String value;\n+\n+\n+}",
                "additions": 31,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.java",
                "status": "added",
                "changes": 31,
                "deletions": 0,
                "sha": "688b532fdf0801be2484e6be0a858c550582ca65",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.components;\n+\n+import org.apache.tapestry5.corelib.components.TextField;\n+import org.apache.tapestry5.annotations.Mixin;\n+import org.apache.tapestry5.integration.app1.mixins.TextOnlyOnDisabled;\n+\n+/**\n+ *\n+ */\n+public class TextOnlyOnDisabledTextField extends TextField\n+{\n+\n+    @Mixin(order = \"after:*\")\n+    private TextOnlyOnDisabled theMixin;\n+    \n+}",
                "additions": 30,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/TextOnlyOnDisabledTextField.java",
                "status": "added",
                "changes": 30,
                "deletions": 0,
                "sha": "0944f04b8458c1dadff5a87c6cb754563dfe15e4",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/TextOnlyOnDisabledTextField.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/TextOnlyOnDisabledTextField.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/TextOnlyOnDisabledTextField.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.mixins;\n+\n+import org.apache.tapestry5.annotations.*;\n+import org.apache.tapestry5.MarkupWriter;\n+import org.apache.tapestry5.ComponentResources;\n+import org.apache.tapestry5.Field;\n+import org.apache.tapestry5.ioc.annotations.Inject;\n+\n+/**\n+ * Mixin demonstrating the use of the BindParameter annotation, using implicit parent-parameter naming.\n+ * It echos the current value, changes said value for the duration of the component\n+ * render, then changes it back and re-echos it.\n+ */\n+@MixinAfter\n+public class EchoAfter\n+{\n+    @BindParameter\n+    private String value;\n+\n+    private String temp;\n+\n+    @InjectContainer\n+    private Field field;\n+\n+    @BeginRender\n+    void beginRender(MarkupWriter writer)\n+    {\n+        writer.element(\"div\",\"id\",field.getClientId() + \"_before_but_after\");\n+        writer.writeRaw(value + \"-before\");\n+        writer.end();\n+        temp = value;\n+        value = \"beginrender_for_mixinafter_isreally_justafter_corecomponent_render\";\n+    }\n+\n+    @AfterRender\n+    void afterRender(MarkupWriter writer) {\n+        value = temp;\n+        writer.element(\"div\",\"id\",field.getClientId() + \"_after_but_before\");\n+        writer.writeRaw(value + \"-after\");\n+        writer.end();\n+    }\n+}\n\\ No newline at end of file",
                "additions": 56,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter.java",
                "status": "added",
                "changes": 56,
                "deletions": 0,
                "sha": "9796f622fc29d064c639da92f6e7f0ba20d29e88",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.mixins;\n+\n+import org.apache.tapestry5.annotations.*;\n+import org.apache.tapestry5.MarkupWriter;\n+import org.apache.tapestry5.ComponentResources;\n+import org.apache.tapestry5.Field;\n+import org.apache.tapestry5.ioc.annotations.Inject;\n+\n+/**\n+ * Mixin demonstrating the use of the BindParameter annotation, using implicit parent-parameter naming.\n+ * It echos the current value, changes said value for the duration of the component\n+ * render, then changes it back and re-echos it.\n+ */\n+@MixinAfter\n+public class EchoAfter2\n+{\n+    @BindParameter\n+    private String value;\n+\n+    private String temp;\n+\n+    @InjectContainer\n+    private Field field;\n+\n+    @BeginRender\n+    void beginRender(MarkupWriter writer)\n+    {\n+        writer.element(\"div\",\"id\",field.getClientId() + \"_before_but_after2\");\n+        writer.writeRaw(value + \"-before\");\n+        writer.end();\n+        temp = value;\n+        value = \"afterrender_for_mixinafter_isreally_justbefore_corecomponent_afterrender\";\n+    }\n+\n+    @AfterRender\n+    void afterRender(MarkupWriter writer) {\n+        value = temp;\n+        writer.element(\"div\",\"id\",field.getClientId() + \"_after_but_before2\");\n+        writer.writeRaw(value + \"-after\");\n+        writer.end();\n+    }\n+}\n\\ No newline at end of file",
                "additions": 56,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter2.java",
                "status": "added",
                "changes": 56,
                "deletions": 0,
                "sha": "b27fb8f4eeb3885b4b884f8bf8b67886303e4134",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter2.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter2.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter2.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.mixins;\n+\n+import org.apache.tapestry5.annotations.*;\n+import org.apache.tapestry5.MarkupWriter;\n+import org.apache.tapestry5.ComponentResources;\n+import org.apache.tapestry5.Field;\n+import org.apache.tapestry5.ioc.annotations.Inject;\n+\n+/**\n+ * Mixin demonstrating the use of the BindParameter annotation, using implicit parent-parameter naming.\n+ * It echos the current value, changes said value for the duration of the component\n+ * render, then changes it back and re-echos it.\n+ */\n+public class EchoValue\n+{\n+    @BindParameter\n+    private String value;\n+\n+    private String temp;\n+\n+    @InjectContainer\n+    private Field field;\n+\n+    @BeginRender\n+    void beginRender(MarkupWriter writer)\n+    {\n+        writer.element(\"div\",\"id\",field.getClientId() + \"_before\");\n+        writer.writeRaw(value + \"-before\");\n+        writer.end();\n+        temp = value;\n+        value = \"temporaryvaluefromechovaluemixin\";\n+    }\n+\n+    @AfterRender\n+    void afterRender(MarkupWriter writer) {\n+        value = temp;\n+        writer.element(\"div\",\"id\",field.getClientId() + \"_after\");\n+        writer.writeRaw(value + \"-after\");\n+        writer.end();\n+    }\n+}",
                "additions": 55,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue.java",
                "status": "added",
                "changes": 55,
                "deletions": 0,
                "sha": "9c885e3d4e441378cd41d5d4cfd60d3cd6015328",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.mixins;\n+\n+import org.apache.tapestry5.annotations.BindParameter;\n+import org.apache.tapestry5.annotations.InjectContainer;\n+import org.apache.tapestry5.MarkupWriter;\n+import org.apache.tapestry5.ClientElement;\n+\n+/**\n+ * Mixin demonstrating the use of BindParameter, using explicit naming of the parent parameter.\n+ */\n+public class EchoValue2\n+{\n+    @BindParameter(value = \"value\")\n+    private Object boundParameter;\n+\n+    @InjectContainer\n+    private ClientElement element;\n+\n+    private Object temp;\n+\n+    void beginRender(MarkupWriter writer)\n+    {\n+        writer.element(\"div\",\"id\",element.getClientId() + \"_before2\");\n+        writer.writeRaw(\"echo2-\" + boundParameter + \"-before\");\n+        writer.end();\n+        temp = boundParameter;\n+        boundParameter = \"3\";\n+    }\n+\n+    void afterRender(MarkupWriter writer)\n+    {\n+        boundParameter = temp;\n+        writer.element(\"div\",\"id\",element.getClientId() + \"_after2\");\n+        writer.writeRaw(\"echo2-\" + boundParameter + \"-after\");\n+        writer.end();\n+    }\n+}",
                "additions": 51,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue2.java",
                "status": "added",
                "changes": 51,
                "deletions": 0,
                "sha": "1b8a3137401f2d69e0afb2c84c400b4fc2fe689a",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue2.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue2.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue2.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.mixins;\n+\n+import org.apache.tapestry5.annotations.BindParameter;\n+import org.apache.tapestry5.annotations.InjectContainer;\n+import org.apache.tapestry5.MarkupWriter;\n+import org.apache.tapestry5.ClientElement;\n+\n+/**\n+ * Mixin demonstrating the use of BindParameter, using explicit naming of the parent parameter.\n+ */\n+public class EchoValue3\n+{\n+    @BindParameter(value = {\"object\",\"value\"})\n+    private Object boundParameter;\n+\n+    @InjectContainer\n+    private ClientElement element;\n+\n+    private Object temp;\n+\n+    void beginRender(MarkupWriter writer)\n+    {\n+        writer.element(\"div\",\"id\",element.getClientId() + \"_before3\");\n+        writer.writeRaw(\"echo3-\" + boundParameter + \"-before\");\n+        writer.end();\n+        temp = boundParameter;\n+        boundParameter = \"world\";\n+    }\n+\n+    void afterRender(MarkupWriter writer)\n+    {\n+        boundParameter = temp;\n+        writer.element(\"div\",\"id\",element.getClientId() + \"_after3\");\n+        writer.writeRaw(\"echo3-\" + boundParameter + \"-after\");\n+        writer.end();\n+    }\n+}\n\\ No newline at end of file",
                "additions": 51,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue3.java",
                "status": "added",
                "changes": 51,
                "deletions": 0,
                "sha": "02365ad232b86de641a05b77983d289fd6bc28b6",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue3.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue3.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue3.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,65 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.mixins;\n+\n+import org.apache.tapestry5.annotations.BindParameter;\n+import org.apache.tapestry5.annotations.InjectContainer;\n+import org.apache.tapestry5.*;\n+import org.apache.tapestry5.internal.InternalComponentResources;\n+import org.apache.tapestry5.internal.ParameterAccess;\n+import org.apache.tapestry5.ioc.annotations.Inject;\n+import org.apache.tapestry5.ioc.services.TypeCoercer;\n+\n+/**\n+ * Renders a plain-text version of a value where \n+ */\n+public class TextOnlyOnDisabled\n+{\n+    @BindParameter\n+    private Object value;\n+\n+    @BindParameter\n+    private boolean disabled;\n+\n+\n+    @BindParameter\n+    private FieldTranslator translate;\n+\n+    @Inject\n+    private TypeCoercer coercer;\n+\n+    @InjectContainer\n+    private ClientElement field;\n+\n+    @Inject\n+    private ComponentResources resources;\n+\n+    Boolean beginRender(MarkupWriter writer)\n+    {\n+        InternalComponentResources res = (InternalComponentResources) resources;\n+        ParameterAccess acc = res.getContainerBoundParameterAccess(\"translate\",\"translate\");\n+        if (disabled)\n+        {\n+            //We can short-circuit the text field's beginRender phase, but\n+            //not it's afterRender phase, and TextField calls writer.end()\n+            //in end render.  So we add a dummy element to provide an element to end.\n+            writer.element(\"span\",\"id\",field.getClientId());\n+            writer.write(translate.toClient(value));\n+            return false;\n+        }\n+        return null;\n+    }\n+\n+}",
                "additions": 65,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/TextOnlyOnDisabled.java",
                "status": "added",
                "changes": 65,
                "deletions": 0,
                "sha": "7c8bb392a081017192ce86a5b7fc201c867fc355",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/TextOnlyOnDisabled.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/TextOnlyOnDisabled.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/TextOnlyOnDisabled.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.pages;\n+\n+import org.apache.tapestry5.annotations.Property;\n+import org.apache.tapestry5.annotations.SetupRender;\n+\n+/**\n+ * Page for demonstrating/testing the use of the BindParameter mixin demonstration.\n+ */\n+public class BindParameterDemo\n+{\n+\n+    @Property\n+    private String myproperty;\n+\n+    @Property\n+    private Integer myproperty2;\n+\n+    @Property\n+    private String myproperty3;\n+\n+    @Property\n+    private String myproperty4;\n+\n+    @Property\n+    private String myproperty5;\n+    \n+    @SetupRender\n+    void initMyprop()\n+    {\n+        myproperty=\"mypropertyvalue\";\n+        myproperty2=10;\n+        myproperty3=\"hello\";\n+        myproperty4=\"supervalue\";\n+        myproperty5=\"goodbye\";\n+    }\n+}",
                "additions": 50,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.java",
                "status": "added",
                "changes": 50,
                "deletions": 0,
                "sha": "97d3a841214a4cd749ee1b7944006cb7ddb220d6",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.pages;\n+\n+/**\n+ *\n+ */\n+public class BindParameterNoSuchParameter\n+{\n+}",
                "additions": 22,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.java",
                "status": "added",
                "changes": 22,
                "deletions": 0,
                "sha": "d325c054c9dde1ce6f1852595b5d8d6d8b054b5d",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.pages;\n+\n+import org.apache.tapestry5.annotations.Property;\n+\n+/**\n+ *\n+ */\n+public class BindParameterOnComponent\n+{\n+}",
                "additions": 24,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.java",
                "status": "added",
                "changes": 24,
                "deletions": 0,
                "sha": "21d175a08c244550ecd545e1de66f79069de67a0",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2007 The Apache Software Foundation\n+// Copyright 2007, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -15,8 +15,10 @@\n package org.apache.tapestry5.integration.app1.pages;\n \n import org.apache.tapestry5.annotations.Persist;\n+\n import org.apache.tapestry5.ioc.annotations.Inject;\n import org.apache.tapestry5.services.Request;\n+import org.apache.tapestry5.services.Session;\n \n public class ClientPersistenceDemo\n {\n@@ -33,7 +35,7 @@ public Object getPersistedValue()\n \n     public boolean getSessionExists()\n     {\n-        return request.getSession(false) != null;\n+        return session() != null;\n     }\n \n     void onActionFromStoreString()\n@@ -50,4 +52,17 @@ public void run()\n             }\n         };\n     }\n+\n+    void onActionFromNixSession()\n+    {\n+        if (getSessionExists() && !session().isInvalidated())\n+        {\n+            session().invalidate();\n+        }\n+    }\n+\n+    private Session session()\n+    {\n+        return request.getSession(false);\n+    }\n }",
                "additions": 17,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ClientPersistenceDemo.java",
                "status": "modified",
                "changes": 19,
                "deletions": 2,
                "sha": "f04785149e1100344836bd6ed19d1a5dd8c6bcfd",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ClientPersistenceDemo.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ClientPersistenceDemo.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ClientPersistenceDemo.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -357,6 +357,26 @@ public int compareTo(Item o)\n                      \"RenderClientId Mixin\",\n                      \"Force render of client-side id of a client element via the RenderClientId mixin\"),\n \n+            new Item(\"BindParameterDemo\",\n+                     \"BindParameter mixin annotation\",\n+                     \"Accessing component parameter values from a mixin\"),\n+\n+            new Item(\"BindParameterNoSuchParameter\",\n+                     \"BindParameter error handling\",\n+                     \"BindParameter throws exception if the containing component doesn't have a matching parameter\"),\n+\n+            new Item(\"BindParameterOnComponent\",\n+                      \"BindParameter on component\",\n+                      \"Verify that BindParameter can only be used on mixin fields\"),\n+\n+            new Item(\"MixinOrderingDemo\",\n+                     \"Mixin Ordering Demo\",\n+                     \"Various mixin-ordering scenarios\"),\n+\n+            new Item(\"MissingComponentClassException\",\n+                     \"Missing Component Class Exception\",\n+                     \"Meaningful exception message thrown when component class can't be determined from template or field in containing component.\"),\n+\n             new Item(\"SessionAttributeDemo\",\n                      \"SessionAttribute Demo\",\n                      \"Annotation to map a field to a specific session attribute\")",
                "additions": 20,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "status": "modified",
                "changes": 20,
                "deletions": 0,
                "sha": "bc727ff8ca6262d1d3c78e43dcc8844f719f7561",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.pages;\n+\n+/**\n+ *\n+ */\n+public class MissingComponentClassException\n+{\n+}",
                "additions": 22,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.java",
                "status": "added",
                "changes": 22,
                "deletions": 0,
                "sha": "6ecf00a6b55324e02efe2cea55daef8b942d3170",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.pages;\n+\n+import org.apache.tapestry5.annotations.*;\n+import org.apache.tapestry5.corelib.components.TextField;\n+import org.apache.tapestry5.integration.app1.mixins.EchoValue;\n+import org.apache.tapestry5.integration.app1.mixins.EchoValue2;\n+import org.apache.tapestry5.integration.app1.components.TextOnlyOnDisabledTextField;\n+\n+/**\n+ * Page for demonstrating/testing the use of the BindParameter mixin demonstration.\n+ */\n+public class MixinOrderingDemo\n+{\n+\n+    @Property\n+    private String myproperty;\n+\n+    @Component\n+    @Mixins(\"echovalue2::before:echovalue3\")\n+    @MixinClasses(value={EchoValue.class},order={\"after:echovalue2;after:echovalue3\"})\n+    private TextField order3;\n+\n+    @Component\n+    @Mixins(\"echovalue2::after:echovalue\")\n+    @MixinClasses(EchoValue.class)\n+    private TextField order4;\n+\n+    @Component\n+    @Mixins(\"echovalue2\")\n+    @MixinClasses(value=EchoValue.class,order={\"after:echovalue2\"})\n+    private TextField order5;\n+\n+\n+    @Component\n+    @Mixins(\"echovalue3::before:echovalue2\")\n+    @MixinClasses(value=EchoValue2.class,order=\"after:echovalue\")\n+    private TextOnlyOnDisabledTextField order6;\n+\n+    @SetupRender\n+    void initMyprop()\n+    {\n+        myproperty=\"batman\";\n+    }\n+}\n\\ No newline at end of file",
                "additions": 58,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.java",
                "status": "added",
                "changes": 58,
                "deletions": 0,
                "sha": "d30c80b760f53ee99c0c57bbb07e75b337bc8301",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -910,7 +910,7 @@ public void extension_point() throws Exception\n \n         ExtensionPointToken expansion = get(template.getTokens(), 2);\n \n-        assertEquals(expansion.getExtentionPointId(), \"title\");\n+        assertEquals(expansion.getExtensionPointId(), \"title\");\n \n         List<TemplateToken> title = template.getExtensionPointTokens(\"title\");\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/internal/services/TemplateParserImplTest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "a212161a730fda5ef3acfb11a40fd54363ff8ee7",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/internal/services/TemplateParserImplTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/internal/services/TemplateParserImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/internal/services/TemplateParserImplTest.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007, 2008 The Apache Software Foundation\n+// Copyright 2006, 2007, 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -21,6 +21,7 @@\n import org.apache.tapestry5.services.ComponentClassResolver;\n import org.apache.tapestry5.services.TransformConstants;\n import org.testng.annotations.Test;\n+import org.easymock.EasyMock;\n \n public class MixinWorkerTest extends InternalBaseTestCase\n {\n@@ -41,20 +42,21 @@ public void no_fields_with_mixin_annotation()\n     }\n \n     @Test\n-    public void field_with_explicit_type()\n+    public void field_with_explicit_type_and_order()\n     {\n         ComponentClassResolver resolver = mockComponentClassResolver();\n         ClassTransformation transformation = mockClassTransformation();\n         MutableComponentModel model = mockMutableComponentModel();\n-        Mixin annotation = newMixin(\"Bar\");\n+        String[] order = {\"before:*\"};\n+        Mixin annotation = newMixin(\"Bar\",order);\n \n         train_findFieldsWithAnnotation(transformation, Mixin.class, \"fred\");\n         train_getFieldAnnotation(transformation, \"fred\", Mixin.class, annotation);\n         train_getFieldType(transformation, \"fred\", \"foo.bar.Baz\");\n \n         train_resolveMixinTypeToClassName(resolver, \"Bar\", \"foo.bar.BazMixin\");\n \n-        model.addMixinClassName(\"foo.bar.BazMixin\");\n+        model.addMixinClassName(\"foo.bar.BazMixin\",order);\n \n         transformation.makeReadOnly(\"fred\");\n \n@@ -75,18 +77,19 @@ public void field_with_explicit_type()\n     }\n \n     @Test\n-    public void field_with_no_specific_mixin_type()\n+    public void field_with_no_specific_mixin_type_or_order()\n     {\n         ComponentClassResolver resolver = mockComponentClassResolver();\n         ClassTransformation transformation = mockClassTransformation();\n         MutableComponentModel model = mockMutableComponentModel();\n-        Mixin annotation = newMixin(\"\");\n+        String[] order = new String[0];\n+        Mixin annotation = newMixin(\"\",order);\n \n         train_findFieldsWithAnnotation(transformation, Mixin.class, \"fred\");\n         train_getFieldAnnotation(transformation, \"fred\", Mixin.class, annotation);\n         train_getFieldType(transformation, \"fred\", \"foo.bar.Baz\");\n \n-        model.addMixinClassName(\"foo.bar.Baz\");\n+        model.addMixinClassName(\"foo.bar.Baz\",order);\n \n         transformation.makeReadOnly(\"fred\");\n \n@@ -113,12 +116,12 @@ protected final void train_resolveMixinTypeToClassName(ComponentClassResolver re\n         expect(resolver.resolveMixinTypeToClassName(mixinType)).andReturn(mixinClassName);\n     }\n \n-    private Mixin newMixin(String value)\n+    private Mixin newMixin(String value,String...order)\n     {\n         Mixin annotation = newMock(Mixin.class);\n \n         expect(annotation.value()).andReturn(value);\n-\n+        expect(annotation.order()).andReturn(order);\n         return annotation;\n     }\n }",
                "additions": 12,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/internal/transform/MixinWorkerTest.java",
                "status": "modified",
                "changes": 21,
                "deletions": 9,
                "sha": "dc40435f948a42b384728f39598e6b969c9c258a",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/internal/transform/MixinWorkerTest.java",
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/internal/transform/MixinWorkerTest.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/internal/transform/MixinWorkerTest.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,21 @@\n+<!--\n+  ~ Copyright 2009 The Apache Software Foundation\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<t:container xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_1_0.xsd\">\n+\n+    <t:bindparametercomponent/>\n+\n+</t:container>\n\\ No newline at end of file",
                "additions": 21,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.tml",
                "status": "added",
                "changes": 21,
                "deletions": 0,
                "sha": "21ae393d30358b31ac517e840527d044934988e7",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.tml",
                "filename": "tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.tml?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,32 @@\n+<!--\n+  ~ Copyright 2009 The Apache Software Foundation\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<html t:type=\"Border\" xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_1_0.xsd\">\n+    \n+  <t:form>\n+      <t:textfield t:id=\"testmixin\" value=\"myproperty\" t:mixins=\"echovalue\"/>\n+      <t:textfield t:id=\"testmixin2\" value=\"myproperty2\" t:mixins=\"echovalue2\"/>\n+      <t:textfield t:id=\"testmixin3\" value=\"myproperty3\" t:mixins=\"echovalue3\"/>\n+      <t:textfield t:id=\"multimixins\" value=\"myproperty4\" t:mixins=\"echovalue::before:*, echovalue2::before:echovalue3, echovalue3\"/>\n+      <t:textonlyondisabledtextfield t:id=\"defaultbinding\" value=\"myproperty5\" disabled=\"true\" t:mixins=\"echovalue\"/>\n+  </t:form>\n+\n+  <div id=\"mypropertyoutput\">${myproperty}</div>\n+  <div id=\"mypropertyoutput2\">${myproperty2}</div>\n+  <div id=\"mypropertyoutput3\">${myproperty3}</div>\n+  <div id=\"mypropertyoutput4\">${myproperty4}</div>\n+  <div id=\"mypropertyoutput5\">${myproperty5}</div>\n+</html>",
                "additions": 32,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.tml",
                "status": "added",
                "changes": 32,
                "deletions": 0,
                "sha": "d5cdc3d6acd2e33888ecc243cbad9ae94f07b15a",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.tml",
                "filename": "tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.tml?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,21 @@\n+<!--\n+  ~ Copyright 2009 The Apache Software Foundation\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<html t:type=\"Border\" xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_1_0.xsd\">\n+    \n+ <t:any t:id=\"throwexception\" t:mixins=\"echovalue2\"/>\n+\n+</html>",
                "additions": 21,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.tml",
                "status": "added",
                "changes": 21,
                "deletions": 0,
                "sha": "1fd1d00f147270dad57e5ff5be6a6bc8821503e0",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.tml",
                "filename": "tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.tml?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,21 @@\n+<!--\n+  ~ Copyright 2009 The Apache Software Foundation\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<html t:type=\"Border\" xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_1_0.xsd\">\n+\n+ <t:bindparametercomponentcontainer t:id=\"throwexception\"/>\n+\n+</html>",
                "additions": 21,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.tml",
                "status": "added",
                "changes": 21,
                "deletions": 0,
                "sha": "8d75b3f3286911d51f2288ed7a061c6be6293ff4",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.tml",
                "filename": "tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.tml?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,29 @@\n+<!--\r\n+  ~ Copyright 2009 The Apache Software Foundation\r\n+  ~\r\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+  ~ you may not use this file except in compliance with the License.\r\n+  ~ You may obtain a copy of the License at\r\n+  ~\r\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\r\n+  ~\r\n+  ~ Unless required by applicable law or agreed to in writing, software\r\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+  ~ See the License for the specific language governing permissions and\r\n+  ~ limitations under the License.\r\n+  -->\r\n+\r\n+<html t:type=\"Border\" xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_0_0.xsd\">\r\n+\r\n+    <p>\r\n+        This template has a component with an undeterminable component class (not properly declared in either the\r\n+    template or the containing component class).</p>\r\n+    \r\n+    <input t:id=\"componentwithnotype\" value=\"someproperty\"/>\r\n+    \r\n+    <p>\r\n+        This page is used to test exception reporting.\r\n+    </p>\r\n+    \r\n+</html>   \n\\ No newline at end of file",
                "additions": 29,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.tml",
                "status": "added",
                "changes": 29,
                "deletions": 0,
                "sha": "929425565c9e626b31182b6a73e28de22e2c4f0f",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.tml",
                "filename": "tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.tml?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -0,0 +1,47 @@\n+<!--\n+  ~ Copyright 2009 The Apache Software Foundation\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<html t:type=\"Border\" xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_1_0.xsd\">\n+    \n+  <t:form>\n+      <p>\n+          Explicit and implicit ordering, all in template, using globbing:\n+      </p>\n+      <t:textfield t:id=\"order1\" value=\"myproperty\" t:mixins=\"echovalue::before:*, echovalue2::before:echovalue3, echovalue3\"/>\n+\n+      <p>\n+          Explicit and implicit ordering, all in template, no globbing, but multiple order constraints specified for at least one mixin:\n+      </p>\n+      <t:textfield t:id=\"order2\" value=\"myproperty\" t:mixins=\"echovalue::after:echovalue2;after:echovalue3, echovalue2::after:echovalue3, echovalue3\"/>\n+\n+      <p>Mixture of template, @Mixins, and @MixinClasses ordering, all ordered.</p>\n+      <input t:id=\"order3\" value=\"myproperty\" t:mixins=\"echovalue3::before:echovalue\"/>\n+\n+      <p>Mixture of template, @Mixins, and @MixinClasses, with the only constraints specified in the template and @Mixins</p>\n+      <input t:id=\"order4\" value=\"myproperty\" t:mixins=\"echovalue3::before:echovalue\"/>\n+\n+      <p>Mixture of template, @Mixins, and @MixinClasses, with the only constraints specified in the template and @MixinClasses</p>\n+      <input t:id=\"order5\" value=\"myproperty\" t:mixins=\"echovalue3::after:echovalue\"/>\n+\n+      <p>Mixture of template, @Mixins, @MixinClasses, and @Mixin ordering. Note that all of the above also include @Mixin without explicit ordering constraints since textfield has an implementation mixin.</p>\n+      <input t:id=\"order6\" disabled=\"true\" value=\"myproperty\" t:mixins=\"echovalue::before:echovalue3\"/>\n+\n+      <p>Mingling mixin after with mixin before</p>\n+      <!-- the constraint on echoafter2 should have no effect. -->\n+      <t:textfield t:id=\"order7\" value=\"myproperty\" t:mixins=\"echovalue::before:echovalue2, echovalue2, echoafter::after:echoafter2, echoafter2::before:echovalue\"/>\n+  </t:form>\n+\n+</html>",
                "additions": 47,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.tml",
                "status": "added",
                "changes": 47,
                "deletions": 0,
                "sha": "fd284cbde4f2b18df5451333ad419e1a4380b0b7",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.tml",
                "filename": "tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.tml",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.tml?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            },
            {
                "patch": "@@ -187,7 +187,7 @@ protected final void assertTextPresent(String... text)\n     {\n         for (String item : text)\n         {\n-            if (isTextPresent(item)) return;\n+            if (isTextPresent(item)) continue;\n \n             System.err.printf(\"Text pattern '%s' not found in:\\n%s\\n\\n\", item, selenium\n                     .getHtmlSource());",
                "additions": 1,
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "2ddb93dddd3ab8dcc2963770cf0fada9a0f9f625",
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java",
                "filename": "tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java",
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09"
            }
        ],
        "bug_id": "tapestry-5_47",
        "parent": "https://github.com/apache/tapestry-5/commit/f23ea3f7902f61b0b671fc8a8f3bbbbd097a2ac7",
        "message": "TAP5-103: provide access to component parameters from within mixins\nTAP5-748: NPE when defining a component using just t:id and no type or @Component annotation\nTAP5-777: Tapestry should ensure that mixins are applied in a deterministic order.\nTAP5-786: Exception messages in the pageload packages should be localized\nTAP5-787: AbstractIntegrationTest's \"assertTextPresent\" only checks the first value\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@795264 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "tapestry-5"
    }
]