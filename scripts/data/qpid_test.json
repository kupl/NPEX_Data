{
    "qpid_066554c": {
        "bug_id": "qpid_066554c",
        "commit": "https://github.com/apache/qpid/commit/066554c281480c3ab989cc9b07180d71125aa86e",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/qpid/blob/066554c281480c3ab989cc9b07180d71125aa86e/qpid/java/client/src/main/java/org/apache/qpidity/nclient/Client.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpidity/nclient/Client.java?ref=066554c281480c3ab989cc9b07180d71125aa86e",
                "deletions": 6,
                "filename": "qpid/java/client/src/main/java/org/apache/qpidity/nclient/Client.java",
                "patch": "@@ -51,11 +51,16 @@ public SessionDelegate getSessionDelegate()\n \n             @Override public void connectionClose(Channel context, ConnectionClose connectionClose)\n             {\n-                _exceptionListner.onException(\n-                        new QpidException(\"Server closed the connection: Reason \" +\n-                                           connectionClose.getReplyText(),\n-                                           ErrorCode.get(connectionClose.getReplyCode()),\n-                                           null));\n+                // XXX: replaced reference to _exceptionListner with\n+                // throw new RuntimeException because\n+                // _exceptionListner may be null. In general this\n+                // needs to be reworked because not every connection\n+                // close is an exception!\n+                throw new RuntimeException\n+                    (new QpidException(\"Server closed the connection: Reason \" +\n+                                       connectionClose.getReplyText(),\n+                                       ErrorCode.get(connectionClose.getReplyCode()),\n+                                       null));\n             }\n         };\n \n@@ -102,7 +107,7 @@ public void close() throws QpidException\n     {\n         Channel ch = _conn.getChannel(0);\n         ch.connectionClose(0, \"client is closing\", 0, 0);\n-        //need to close the connection underneath as well\n+        _conn.close();\n     }\n \n     public Session createSession(long expiryInSeconds)",
                "raw_url": "https://github.com/apache/qpid/raw/066554c281480c3ab989cc9b07180d71125aa86e/qpid/java/client/src/main/java/org/apache/qpidity/nclient/Client.java",
                "sha": "42b482442a6f9c512073e83b82517bd2f75fe327",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/qpid/blob/066554c281480c3ab989cc9b07180d71125aa86e/qpid/java/client/src/main/java/org/apache/qpidity/nclient/interop/BasicInteropTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpidity/nclient/interop/BasicInteropTest.java?ref=066554c281480c3ab989cc9b07180d71125aa86e",
                "deletions": 3,
                "filename": "qpid/java/client/src/main/java/org/apache/qpidity/nclient/interop/BasicInteropTest.java",
                "patch": "@@ -25,6 +25,11 @@ public BasicInteropTest(String host)\n         this.host = host;\n     }\n \n+    public void close() throws QpidException\n+    {\n+        conn.close();\n+    }\n+\n     public void testCreateConnection(){\n         System.out.println(\"------- Creating connection--------\");\n         conn = Client.createConnection();\n@@ -46,7 +51,7 @@ public void testCreateSession(){\n \n     public void testExchange(){\n         System.out.println(\"------- Creating an exchange --------\");\n-        session.exchangeDeclare(\"test\", \"amq.direct\", \"\", null);\n+        session.exchangeDeclare(\"test\", \"direct\", \"\", null);\n         session.sync();\n         System.out.println(\"------- Exchange created --------\");\n     }\n@@ -73,7 +78,8 @@ public void testSendMessage(){\n         System.out.println(\"------- Message sent --------\");\n     }\n \n-    public void testSubscribe(){\n+    public void testSubscribe()\n+    {\n         System.out.println(\"------- Sending a subscribe --------\");\n         session.messageSubscribe(\"testQueue\", \"myDest\",\n                                  Session.TRANSFER_CONFIRM_MODE_REQUIRED,\n@@ -97,6 +103,13 @@ public void onMessage(Message message)\n         session.messageFlowMode(\"myDest\", Session.MESSAGE_FLOW_MODE_WINDOW);\n         System.out.println(\"------- Setting Credit --------\");\n         session.messageFlow(\"myDest\", Session.MESSAGE_FLOW_UNIT_MESSAGE, 1);\n+        session.messageFlow(\"myDest\", Session.MESSAGE_FLOW_UNIT_BYTE, -1);\n+    }\n+\n+    public void testMessageFlush()\n+    {\n+        session.messageFlush(\"myDest\");\n+        session.sync();\n     }\n \n     public void onException(QpidException e)\n@@ -107,7 +120,7 @@ public void onException(QpidException e)\n         System.out.println(\"------- /Broker Notified an error --------\");\n     }\n \n-    public static void main(String[] args)\n+    public static void main(String[] args) throws QpidException\n     {\n         String host = \"0.0.0.0\";\n         if (args.length>0)\n@@ -122,5 +135,7 @@ public static void main(String[] args)\n         t.testQueue();\n         t.testSubscribe();\n         t.testSendMessage();\n+        t.testMessageFlush();\n+        t.close();\n     }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/066554c281480c3ab989cc9b07180d71125aa86e/qpid/java/client/src/main/java/org/apache/qpidity/nclient/interop/BasicInteropTest.java",
                "sha": "b3d81cd2c1c79456d51800fd88303c1723c141c7",
                "status": "modified"
            }
        ],
        "message": "Client.java: workaround for NPE + close underling connection. BasicInteropTest.java: added a connection close and a flush so that the message will definitely be received prior to the JVM exiting.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/qpid/trunk@578936 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/1eac3631adf36822b8e03fcdf59673466b654d29",
        "patched_files": [
            "Client.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "BasicInteropTest.java"
        ]
    },
    "qpid_0f39dd4": {
        "bug_id": "qpid_0f39dd4",
        "commit": "https://github.com/apache/qpid/commit/0f39dd49ce883571634db47d29a3b5c591439e45",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/qpid/blob/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker-core/src/main/java/org/apache/qpid/server/Broker.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/main/java/org/apache/qpid/server/Broker.java?ref=0f39dd49ce883571634db47d29a3b5c591439e45",
                "deletions": 0,
                "filename": "qpid/java/broker-core/src/main/java/org/apache/qpid/server/Broker.java",
                "patch": "@@ -58,6 +58,17 @@\n     private EventLogger _eventLogger;\n     private boolean _configuringOwnLogging = false;\n     private final TaskExecutor _taskExecutor = new TaskExecutorImpl();\n+    private final boolean _exitJVMOnShutdownWithNonZeroExitCode;\n+\n+    public Broker()\n+    {\n+        this(false);\n+    }\n+\n+    public Broker(boolean exitJVMOnShutdownWithNonZeroExitCode)\n+    {\n+        this._exitJVMOnShutdownWithNonZeroExitCode = exitJVMOnShutdownWithNonZeroExitCode;\n+    }\n \n     protected static class InitException extends RuntimeException\n     {\n@@ -70,6 +81,12 @@\n     }\n \n     public void shutdown()\n+    {\n+        shutdown(0);\n+    }\n+\n+    @Override\n+    public void shutdown(int exitStatusCode)\n     {\n         try\n         {\n@@ -92,6 +109,11 @@ public void shutdown()\n                 {\n                     LogManager.shutdown();\n                 }\n+\n+                if (_exitJVMOnShutdownWithNonZeroExitCode && exitStatusCode != 0)\n+                {\n+                    System.exit(exitStatusCode);\n+                }\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/qpid/raw/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker-core/src/main/java/org/apache/qpid/server/Broker.java",
                "sha": "7780f060bbda0e011b64d24ca901a1bf488a7eab",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/qpid/blob/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker-core/src/main/java/org/apache/qpid/server/logging/messages/BrokerMessages.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/main/java/org/apache/qpid/server/logging/messages/BrokerMessages.java?ref=0f39dd49ce883571634db47d29a3b5c591439e45",
                "deletions": 0,
                "filename": "qpid/java/broker-core/src/main/java/org/apache/qpid/server/logging/messages/BrokerMessages.java",
                "patch": "@@ -57,6 +57,7 @@\n     public static final String SHUTTING_DOWN_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"broker.shutting_down\";\n     public static final String MANAGEMENT_MODE_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"broker.management_mode\";\n     public static final String STARTUP_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"broker.startup\";\n+    public static final String FATAL_ERROR_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"broker.fatal_error\";\n     public static final String READY_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"broker.ready\";\n \n     static\n@@ -75,6 +76,7 @@\n         Logger.getLogger(SHUTTING_DOWN_LOG_HIERARCHY);\n         Logger.getLogger(MANAGEMENT_MODE_LOG_HIERARCHY);\n         Logger.getLogger(STARTUP_LOG_HIERARCHY);\n+        Logger.getLogger(FATAL_ERROR_LOG_HIERARCHY);\n         Logger.getLogger(READY_LOG_HIERARCHY);\n \n         _messages = ResourceBundle.getBundle(\"org.apache.qpid.server.logging.messages.Broker_logmessages\", _currentLocale);\n@@ -491,6 +493,38 @@ public String getLogHierarchy()\n         };\n     }\n \n+    /**\n+     * Log a Broker message of the Format:\n+     * <pre>BRK-1016 : Fatal error : {0} : See log file for more information</pre>\n+     * Optional values are contained in [square brackets] and are numbered\n+     * sequentially in the method call.\n+     *\n+     */\n+    public static LogMessage FATAL_ERROR(String param1)\n+    {\n+        String rawMessage = _messages.getString(\"FATAL_ERROR\");\n+\n+        final Object[] messageArguments = {param1};\n+        // Create a new MessageFormat to ensure thread safety.\n+        // Sharing a MessageFormat and using applyPattern is not thread safe\n+        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);\n+\n+        final String message = formatter.format(messageArguments);\n+\n+        return new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return message;\n+            }\n+\n+            public String getLogHierarchy()\n+            {\n+                return FATAL_ERROR_LOG_HIERARCHY;\n+            }\n+        };\n+    }\n+\n     /**\n      * Log a Broker message of the Format:\n      * <pre>BRK-1004 : Qpid Broker Ready</pre>",
                "raw_url": "https://github.com/apache/qpid/raw/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker-core/src/main/java/org/apache/qpid/server/logging/messages/BrokerMessages.java",
                "sha": "cd21f533a49719c5c28ca6f279f7637584c1b9ef",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Broker_logmessages.properties",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Broker_logmessages.properties?ref=0f39dd49ce883571634db47d29a3b5c591439e45",
                "deletions": 1,
                "filename": "qpid/java/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Broker_logmessages.properties",
                "patch": "@@ -52,4 +52,6 @@ MANAGEMENT_MODE = BRK-1012 : Management Mode : User Details : {0} / {1}\n # 0 - Total message size\n # 1 - Target memory size\n FLOW_TO_DISK_ACTIVE = BRK-1014 : Message flow to disk active :  Message memory use {0,number,#}KB exceeds threshold {1,number,#.##}KB\n-FLOW_TO_DISK_INACTIVE = BRK-1015 : Message flow to disk inactive : Message memory use {0,number,#}KB within threshold {1,number,#.##}KB\n\\ No newline at end of file\n+FLOW_TO_DISK_INACTIVE = BRK-1015 : Message flow to disk inactive : Message memory use {0,number,#}KB within threshold {1,number,#.##}KB\n+\n+FATAL_ERROR = BRK-1016 : Fatal error : {0} : See log file for more information\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/qpid/raw/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Broker_logmessages.properties",
                "sha": "322335a956266525ebb2578657aa464a3cd7f938",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker-core/src/main/java/org/apache/qpid/server/model/BrokerShutdownProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/main/java/org/apache/qpid/server/model/BrokerShutdownProvider.java?ref=0f39dd49ce883571634db47d29a3b5c591439e45",
                "deletions": 1,
                "filename": "qpid/java/broker-core/src/main/java/org/apache/qpid/server/model/BrokerShutdownProvider.java",
                "patch": "@@ -22,5 +22,5 @@\n \n public interface BrokerShutdownProvider\n {\n-    void shutdown();\n+    void shutdown(int exitStatusCode);\n }",
                "raw_url": "https://github.com/apache/qpid/raw/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker-core/src/main/java/org/apache/qpid/server/model/BrokerShutdownProvider.java",
                "sha": "7eb0d3cc64dae9e132d91e6ebf3b442cbdbfac14",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java?ref=0f39dd49ce883571634db47d29a3b5c591439e45",
                "deletions": 1,
                "filename": "qpid/java/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java",
                "patch": "@@ -969,7 +969,8 @@ protected void onExceptionInOpen(RuntimeException e)\n             BrokerShutdownProvider shutdownProvider = systemConfig.getBrokerShutdownProvider();\n             if (shutdownProvider != null)\n             {\n-                shutdownProvider.shutdown();\n+                _eventLogger.message(BrokerMessages.FATAL_ERROR(e.getMessage()));\n+                shutdownProvider.shutdown(1);\n             }\n             else\n             {",
                "raw_url": "https://github.com/apache/qpid/raw/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java",
                "sha": "d413050cefc1bea73d7f834277937647df9d821f",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/qpid/blob/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker-core/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java?ref=0f39dd49ce883571634db47d29a3b5c591439e45",
                "deletions": 9,
                "filename": "qpid/java/broker-core/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.qpid.server.logging.SystemOutMessageLogger;\n import org.apache.qpid.server.logging.messages.BrokerMessages;\n import org.apache.qpid.server.model.Broker;\n+import org.apache.qpid.server.model.State;\n import org.apache.qpid.server.model.SystemConfig;\n import org.apache.qpid.server.store.BrokerStoreUpgraderAndRecoverer;\n import org.apache.qpid.server.store.DurableConfigurationStore;\n@@ -77,17 +78,17 @@ public void initialise(BrokerOptions brokerOptions) throws Exception\n         logStartupMessages(startupLogger);\n \n         BrokerStoreUpgraderAndRecoverer upgrader = new BrokerStoreUpgraderAndRecoverer(_systemConfig);\n-        _broker = upgrader.perform(_store);\n+        Broker broker = upgrader.perform(_store);\n+        _broker = broker;\n \n-        _broker.setEventLogger(startupLogger);\n-        _broker.open();\n-\n-        // starting the broker\n-        //_broker.setDesiredState(State.ACTIVE);\n-\n-        startupLogger.message(BrokerMessages.READY());\n-        _broker.setEventLogger(eventLogger);\n+        broker.setEventLogger(startupLogger);\n+        broker.open();\n \n+        if (broker.getState() == State.ACTIVE)\n+        {\n+            startupLogger.message(BrokerMessages.READY());\n+            broker.setEventLogger(eventLogger);\n+        }\n     }\n \n     public void close()",
                "raw_url": "https://github.com/apache/qpid/raw/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker-core/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java",
                "sha": "d32f0299d53c16d83a970098469c76e902265f24",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker-core/src/test/java/org/apache/qpid/server/store/BrokerRecovererTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/test/java/org/apache/qpid/server/store/BrokerRecovererTest.java?ref=0f39dd49ce883571634db47d29a3b5c591439e45",
                "deletions": 4,
                "filename": "qpid/java/broker-core/src/test/java/org/apache/qpid/server/store/BrokerRecovererTest.java",
                "patch": "@@ -34,7 +34,6 @@\n import junit.framework.TestCase;\n \n import org.apache.qpid.server.BrokerOptions;\n-import org.apache.qpid.server.configuration.IllegalConfigurationException;\n import org.apache.qpid.server.configuration.updater.CurrentThreadTaskExecutor;\n import org.apache.qpid.server.configuration.updater.TaskExecutor;\n import org.apache.qpid.server.logging.EventLogger;\n@@ -261,7 +260,7 @@ public void testModelVersionValidationForIncompatibleMajorVersion() throws Excep\n             resolveObjects(_brokerEntry);\n             Broker<?> broker = _systemConfig.getBroker();\n             broker.open();\n-            verify(_brokerShutdownProvider).shutdown();\n+            verify(_brokerShutdownProvider).shutdown(1);\n         }\n     }\n \n@@ -280,7 +279,7 @@ public void testModelVersionValidationForIncompatibleMinorVersion() throws Excep\n \n         Broker<?> broker = (Broker<?>) recover.resolve();\n         broker.open();\n-        verify(_brokerShutdownProvider).shutdown();\n+        verify(_brokerShutdownProvider).shutdown(1);\n     }\n \n     public void testIncorrectModelVersion() throws Exception\n@@ -298,7 +297,7 @@ public void testIncorrectModelVersion() throws Exception\n                     _systemConfig.getObjectFactory().recover(_brokerEntry, _systemConfig);\n             Broker<?> broker = (Broker<?>) recover.resolve();\n             broker.open();\n-            verify(_brokerShutdownProvider).shutdown();\n+            verify(_brokerShutdownProvider).shutdown(1);\n             reset(_brokerShutdownProvider);\n         }\n     }",
                "raw_url": "https://github.com/apache/qpid/raw/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker-core/src/test/java/org/apache/qpid/server/store/BrokerRecovererTest.java",
                "sha": "f4802481cbabeaeca38ddc602b30b4d3db00bd28",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker/src/main/java/org/apache/qpid/server/Main.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/Main.java?ref=0f39dd49ce883571634db47d29a3b5c591439e45",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/Main.java",
                "patch": "@@ -454,7 +454,7 @@ public void uncaughtException(final Thread t, final Throwable e)\n \n     protected void startBroker(final BrokerOptions options) throws Exception\n     {\n-        Broker broker = new Broker();\n+        Broker broker = new Broker(true);\n         broker.startup(options);\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/0f39dd49ce883571634db47d29a3b5c591439e45/qpid/java/broker/src/main/java/org/apache/qpid/server/Main.java",
                "sha": "76f848588464284e929e1cad6945e1c1f71328a9",
                "status": "modified"
            }
        ],
        "message": "QPID-6142: Fix NPE thrown on startup when broker fails to start due to CO validation exceptions\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@1631732 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/f3ca13445de8000f96c259274b175e0b49c388ac",
        "patched_files": [
            "BrokerShutdownProvider.java",
            "ApplicationRegistry.java",
            "BrokerAdapter.java",
            "Broker_logmessages.java",
            "Broker.java",
            "Main.java",
            "BrokerMessages.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "BrokerRecovererTest.java"
        ]
    },
    "qpid_1120070": {
        "bug_id": "qpid_1120070",
        "commit": "https://github.com/apache/qpid/commit/11200701e95cc625ad4761048e73c6208d127e89",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/11200701e95cc625ad4761048e73c6208d127e89/qpid/java/broker-plugins/experimental/slowconsumerdetection/src/main/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicy.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-plugins/experimental/slowconsumerdetection/src/main/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicy.java?ref=11200701e95cc625ad4761048e73c6208d127e89",
                "deletions": 1,
                "filename": "qpid/java/broker-plugins/experimental/slowconsumerdetection/src/main/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicy.java",
                "patch": "@@ -93,7 +93,7 @@ public void performPolicy(AMQQueue q)\n                                  \"Consuming to slow.\");\n \n             // Actively delete non autoDelete queues if deletePersistent is set\n-            if (!q.isAutoDelete() && _configuration.deletePersistent())\n+            if (!q.isAutoDelete() && (_configuration != null && _configuration.deletePersistent()))\n             {\n                 CurrentActor.get().message(q.getLogSubject(), TopicDeletePolicyMessages.TDP_DELETING_QUEUE());\n                 q.delete();",
                "raw_url": "https://github.com/apache/qpid/raw/11200701e95cc625ad4761048e73c6208d127e89/qpid/java/broker-plugins/experimental/slowconsumerdetection/src/main/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicy.java",
                "sha": "577dced7d8d765c370f74613f006bc6bab06907e",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/qpid/blob/11200701e95cc625ad4761048e73c6208d127e89/qpid/java/broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicyTest.java",
                "changes": 66,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicyTest.java?ref=11200701e95cc625ad4761048e73c6208d127e89",
                "deletions": 10,
                "filename": "qpid/java/broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicyTest.java",
                "patch": "@@ -34,7 +34,6 @@\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.util.InternalBrokerBaseCase;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n-import org.apache.qpid.test.utils.QpidTestCase;\n \n public class TopicDeletePolicyTest extends InternalBrokerBaseCase\n {\n@@ -97,8 +96,6 @@ public void doTask(AMQProtocolSession session) throws AMQException\n         ((AMQChannel) queue.getExclusiveOwningSession()).getProtocolSession().addSessionCloseTask(deleteQueueTask);\n     }\n \n-\n-\n     /** Check that a null queue passed in does not upset the policy. */\n     public void testNullQueueParameter() throws ConfigurationException\n     {\n@@ -120,7 +117,7 @@ public void testNullQueueParameter() throws ConfigurationException\n      * Set a owning Session to null which means this is not an exclusive queue\n      * so the queue should not be deleted\n      */\n-    public void testNonExclusiveQueue() throws ConfigurationException\n+    public void testNonExclusiveQueue()\n     {\n         TopicDeletePolicy policy = new TopicDeletePolicy();\n         policy.configure(_config);\n@@ -141,7 +138,7 @@ public void testNonExclusiveQueue() throws ConfigurationException\n      *\n      * JMS Queues are not to be processed so this should not delete the queue.\n      */\n-    public void testQueuesAreNotProcessed() throws ConfigurationException\n+    public void testQueuesAreNotProcessed()\n     {\n         TopicDeletePolicy policy = new TopicDeletePolicy();\n         policy.configure(_config);\n@@ -156,12 +153,11 @@ public void testQueuesAreNotProcessed() throws ConfigurationException\n         assertFalse(\"Connection should not be closed\", _connection.isClosed());\n     }\n \n-\n     /**\n      * Give a non auto-delete queue is bound to the topic exchange the\n      * TopicDeletePolicy will close the connection and delete the queue,\n      */\n-    public void testNonAutoDeleteTopicIsNotClosed() throws ConfigurationException\n+    public void testNonAutoDeleteTopicIsNotClosed()\n     {\n         TopicDeletePolicy policy = new TopicDeletePolicy();\n         policy.configure(_config);\n@@ -182,7 +178,7 @@ public void testNonAutoDeleteTopicIsNotClosed() throws ConfigurationException\n      * Give a auto-delete queue bound to the topic exchange the TopicDeletePolicy will\n      * close the connection and delete the queue\n      */\n-    public void testTopicIsClosed() throws ConfigurationException\n+    public void testTopicIsClosed()\n     {\n         TopicDeletePolicy policy = new TopicDeletePolicy();\n         policy.configure(_config);\n@@ -203,7 +199,7 @@ public void testTopicIsClosed() throws ConfigurationException\n      * Give a queue bound to the topic exchange the TopicDeletePolicy will\n      * close the connection and NOT delete the queue\n      */\n-    public void testNonAutoDeleteTopicIsClosedNotDeleted() throws AMQException, ConfigurationException\n+    public void testNonAutoDeleteTopicIsClosedNotDeleted()\n     {\n         TopicDeletePolicy policy = new TopicDeletePolicy();\n         policy.configure(_config);\n@@ -223,7 +219,7 @@ public void testNonAutoDeleteTopicIsClosedNotDeleted() throws AMQException, Conf\n      * configured with the delete-persistent tag will close the connection\n      * and delete the queue\n      */\n-    public void testPersistentTopicIsClosedAndDeleted() throws ConfigurationException\n+    public void testPersistentTopicIsClosedAndDeleted()\n     {\n         //Set the config to delete persistent queues\n         _config.getConfig().addProperty(\"delete-persistent\", \"\");\n@@ -244,4 +240,54 @@ public void testPersistentTopicIsClosedAndDeleted() throws ConfigurationExceptio\n         assertTrue(\"Connection should be closed\", _connection.isClosed());\n     }\n \n+    /**\n+     * Give a queue bound to the topic exchange the TopicDeletePolicy not\n+     * configured to close a persistent queue\n+     */\n+    public void testPersistentTopicIsClosedAndDeletedNullConfig()\n+    {\n+        TopicDeletePolicy policy = new TopicDeletePolicy();\n+        // Explicity say we are not configuring the policy.\n+        policy.configure(null);\n+\n+        MockAMQQueue queue = createOwnedQueue();\n+\n+        queue.addBinding(new Binding(null, \"bindingKey\", queue, new TopicExchange(), null));\n+\n+        policy.performPolicy(queue);\n+\n+        assertFalse(\"Queue should not be deleted\", queue.isDeleted());\n+        assertTrue(\"Connection should be closed\", _connection.isClosed());\n+    }\n+\n+    public void testNonExclusiveQueueNullConfig()\n+    {\n+        _config = null;\n+        testNonExclusiveQueue();\n+    }\n+\n+    public void testQueuesAreNotProcessedNullConfig()\n+    {\n+        _config = null;\n+        testQueuesAreNotProcessed();\n+    }\n+\n+    public void testNonAutoDeleteTopicIsNotClosedNullConfig()\n+    {\n+        _config = null;\n+        testNonAutoDeleteTopicIsNotClosed();\n+    }\n+\n+    public void testTopicIsClosedNullConfig()\n+    {\n+        _config = null;\n+        testTopicIsClosed();\n+    }\n+\n+    public void testNonAutoDeleteTopicIsClosedNotDeletedNullConfig() throws AMQException\n+    {\n+        _config = null;\n+        testNonAutoDeleteTopicIsClosedNotDeleted();\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/qpid/raw/11200701e95cc625ad4761048e73c6208d127e89/qpid/java/broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicyTest.java",
                "sha": "364766dfa7bbbad3c6ec47767dd40c23249d76d0",
                "status": "modified"
            }
        ],
        "message": "QPID-1447 : Add additional testing for null TopicDelete Policy Configuration and fix for NPEs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@951161 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/7a7693b0dd28797d4641aeeaf9b2f9cdbafa5ed3",
        "patched_files": [
            "TopicDeletePolicy.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "TopicDeletePolicyTest.java"
        ]
    },
    "qpid_1b93f2c": {
        "bug_id": "qpid_1b93f2c",
        "commit": "https://github.com/apache/qpid/commit/1b93f2cf877411807b16a6966093e36f67f91726",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/1b93f2cf877411807b16a6966093e36f67f91726/qpid/java/systests/src/main/java/org/apache/qpid/server/logging/BrokerLoggingTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/logging/BrokerLoggingTest.java?ref=1b93f2cf877411807b16a6966093e36f67f91726",
                "deletions": 0,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/logging/BrokerLoggingTest.java",
                "patch": "@@ -49,6 +49,9 @@\n {\n     public void setUp() throws Exception\n     {\n+        // We either do this here or have a null check in tearDown.\n+        // As when this test is run against profiles other than java it will NPE\n+        _monitor = new LogMonitor(_outputFile);\n         //We explicitly do not call super.setUp as starting up the broker is\n         //part of the test case.\n     }",
                "raw_url": "https://github.com/apache/qpid/raw/1b93f2cf877411807b16a6966093e36f67f91726/qpid/java/systests/src/main/java/org/apache/qpid/server/logging/BrokerLoggingTest.java",
                "sha": "d417349c7f2c53de2d6fb75132d8b26c59990688",
                "status": "modified"
            }
        ],
        "message": "QPID-2002 : Fix for BrokerLoggingTest NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@801904 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/9e2daa5be0548f723ced11abcf02e99e60a7b15a",
        "patched_files": [],
        "repo": "qpid",
        "unit_tests": [
            "BrokerLoggingTest.java"
        ]
    },
    "qpid_205e035": {
        "bug_id": "qpid_205e035",
        "commit": "https://github.com/apache/qpid/commit/205e035f834266257e383d17bd80d83abcc1fe2a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java?ref=205e035f834266257e383d17bd80d83abcc1fe2a",
                "deletions": 2,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "patch": "@@ -93,8 +93,7 @@\n     private IncomingMessage _currentMessage;\n \n     /** Maps from consumer tag to subscription instance. Allows us to unsubscribe from a queue. */\n-    private final Map<AMQShortString, Subscription> _tag2SubscriptionMap = new HashMap<AMQShortString, Subscription>();\n-\n+    protected final Map<AMQShortString, Subscription> _tag2SubscriptionMap = new HashMap<AMQShortString, Subscription>();\n \n     private final MessageStore _messageStore;\n ",
                "raw_url": "https://github.com/apache/qpid/raw/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "sha": "a668016f93200d9f07be7d2bb77eff2e356f6de8",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java?ref=205e035f834266257e383d17bd80d83abcc1fe2a",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java",
                "patch": "@@ -82,6 +82,8 @@\n \n     void setStateListener(final StateListener listener);\n \n+    public State getState();\n+\n     QueueEntry getLastSeenEntry();\n \n     boolean setLastSeenEntry(QueueEntry expected, QueueEntry newValue);",
                "raw_url": "https://github.com/apache/qpid/raw/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java",
                "sha": "9419572399385b54e5c50647bf188aef4ec62ef8",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/qpid/blob/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java?ref=205e035f834266257e383d17bd80d83abcc1fe2a",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java",
                "patch": "@@ -79,6 +79,7 @@ public BrowserSubscription(AMQChannel channel, AMQProtocolSession protocolSessio\n         }\n \n \n+        @Override\n         public boolean isBrowser()\n         {\n             return true;\n@@ -91,6 +92,7 @@ public boolean isBrowser()\n          * @param msg   The message to send\n          * @throws AMQException\n          */\n+        @Override\n         public void send(QueueEntry msg) throws AMQException\n         {\n             // We don't decrement the reference here as we don't want to consume the message\n@@ -103,6 +105,13 @@ public void send(QueueEntry msg) throws AMQException\n             }\n \n         }\n+\n+        @Override\n+        public boolean wouldSuspend(QueueEntry msg)\n+        {\n+            return false;\n+        }\n+\n     }\n \n     public static class NoAckSubscription extends SubscriptionImpl\n@@ -118,6 +127,7 @@ public NoAckSubscription(AMQChannel channel, AMQProtocolSession protocolSession,\n         }\n \n \n+        @Override\n         public boolean isBrowser()\n         {\n             return false;\n@@ -130,6 +140,7 @@ public boolean isBrowser()\n          * @param entry   The message to send\n          * @throws AMQException\n          */\n+        @Override\n         public void send(QueueEntry entry) throws AMQException\n         {\n \n@@ -166,6 +177,7 @@ public void send(QueueEntry entry) throws AMQException\n             }\n         }\n \n+        @Override\n         public boolean wouldSuspend(QueueEntry msg)\n         {\n             return false;\n@@ -185,6 +197,7 @@ public AckSubscription(AMQChannel channel, AMQProtocolSession protocolSession,\n             super(channel, protocolSession, consumerTag, filters, noLocal, creditManager, deliveryMethod, recordMethod);\n         }\n \n+        @Override\n         public boolean isBrowser()\n         {\n             return false;\n@@ -198,6 +211,7 @@ public boolean isBrowser()\n          * @param entry   The message to send\n          * @throws AMQException\n          */\n+        @Override\n         public void send(QueueEntry entry) throws AMQException\n         {\n ",
                "raw_url": "https://github.com/apache/qpid/raw/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java",
                "sha": "df842702757f9042bd087edb699340ea834f646b",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/qpid/blob/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java?ref=205e035f834266257e383d17bd80d83abcc1fe2a",
                "deletions": 1,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java",
                "patch": "@@ -72,7 +72,14 @@ public byte getProtocolMinorVersion()\n     {\n         synchronized (_channelDelivers)\n         {\n-            List<DeliveryPair> msgs = _channelDelivers.get(channelId).get(consumerTag).subList(0, count);\n+            List<DeliveryPair> all =_channelDelivers.get(channelId).get(consumerTag);\n+            \n+            if (all == null)\n+            {\n+                return new ArrayList<DeliveryPair>(0);\n+            }\n+            \n+            List<DeliveryPair> msgs = all.subList(0, count);\n \n             List<DeliveryPair> response = new ArrayList<DeliveryPair>(msgs);\n ",
                "raw_url": "https://github.com/apache/qpid/raw/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java",
                "sha": "da35ddc594b9b11d7203baa8e6d405dd87f8cb97",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/qpid/blob/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java?ref=205e035f834266257e383d17bd80d83abcc1fe2a",
                "deletions": 5,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java",
                "patch": "@@ -29,8 +29,6 @@\n import org.apache.qpid.server.queue.AMQQueue;\n import org.apache.qpid.server.queue.QueueEntry;\n import org.apache.qpid.server.queue.QueueEntry.SubscriptionAcquiredState;\n-import org.apache.qpid.server.subscription.Subscription.State;\n-import org.apache.qpid.server.subscription.Subscription.StateListener;\n \n public class MockSubscription implements Subscription\n {\n@@ -40,15 +38,15 @@\n     private AMQQueue queue = null;\n     private StateListener listener = null;\n     private QueueEntry lastSeen = null;\n-    private State state = State.ACTIVE;\n+    private State _state = State.ACTIVE;\n     private ArrayList<QueueEntry> messages = new ArrayList<QueueEntry>();\n \n     @Override\n     public void close()\n     {\n         closed = true;\n-        listener.stateChange(this, state , State.CLOSED);\n-        state = State.CLOSED;\n+        listener.stateChange(this, _state, State.CLOSED);\n+        _state = State.CLOSED;\n     }\n \n     @Override\n@@ -179,6 +177,11 @@ public void setStateListener(StateListener listener)\n         this.listener = listener;\n     }\n \n+    public State getState()\n+    {\n+        return _state;\n+    }\n+\n     @Override\n     public boolean wouldSuspend(QueueEntry msg)\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java",
                "sha": "db2f8a57ad1dd52c7193e14e24536414f659a8e0",
                "status": "modified"
            },
            {
                "additions": 77,
                "blob_url": "https://github.com/apache/qpid/blob/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/QueueBrowserUsesNoAckTest.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/QueueBrowserUsesNoAckTest.java?ref=205e035f834266257e383d17bd80d83abcc1fe2a",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/QueueBrowserUsesNoAckTest.java",
                "patch": "@@ -0,0 +1,77 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.subscription;\n+\n+import org.apache.qpid.server.util.InternalBrokerBaseCase;\n+import org.apache.qpid.server.protocol.InternalTestProtocolSession;\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.AMQException;\n+\n+import java.util.List;\n+\n+public class QueueBrowserUsesNoAckTest extends InternalBrokerBaseCase\n+{\n+\n+    public void testQueueBrowserUsesNoAck() throws AMQException\n+    {\n+        int sendMessageCount = 2;\n+        int prefetch = 1;\n+\n+        //Check store is empty\n+        checkStoreContents(0);\n+\n+        //Send required messsages to the queue\n+        publishMessages(_session, _channel, sendMessageCount);\n+\n+        //Ensure they are stored\n+        checkStoreContents(sendMessageCount);\n+\n+        //Check that there are no unacked messages\n+        assertEquals(\"Channel should have no unacked msgs \", 0,\n+                     _channel.getUnacknowledgedMessageMap().size());\n+\n+        //Set the prefetch on the session to be less than the sent messages\n+        _channel.setCredit(0, prefetch);\n+\n+        //browse the queue\n+        AMQShortString browser = browse(_channel, _queue);\n+\n+        _queue.deliverAsync();\n+\n+        //Wait for messages to fill the prefetch\n+        _session.awaitDelivery(prefetch);\n+\n+        //Get those messages\n+        List<InternalTestProtocolSession.DeliveryPair> messages =\n+                _session.getDelivers(_channel.getChannelId(), browser,\n+                                     prefetch);\n+\n+        //Ensure we recevied the prefetched messages\n+        assertEquals(prefetch, messages.size());\n+\n+        //Check the process didn't suspend the subscription as this would\n+        // indicate we are using the prefetch credit. i.e. using acks not No-Ack\n+        assertTrue(\"The subscription has been suspended\",\n+                   !_channel.getSubscription(browser).getState()\n+                           .equals(Subscription.State.SUSPENDED));       \n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/QueueBrowserUsesNoAckTest.java",
                "sha": "d0db4ebd38ca880b68b34c023e1f0f02b191b8aa",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/qpid/blob/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java?ref=205e035f834266257e383d17bd80d83abcc1fe2a",
                "deletions": 2,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java",
                "patch": "@@ -36,15 +36,18 @@\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n+import org.apache.qpid.framing.FieldTable;\n import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n import org.apache.qpid.AMQException;\n+import org.apache.qpid.util.MockChannel;\n+import org.apache.qpid.common.AMQPFilterTypes;\n import org.apache.qpid.exchange.ExchangeDefaults;\n \n public class InternalBrokerBaseCase extends TestCase\n {\n     protected IApplicationRegistry _registry;\n     protected MessageStore _messageStore;\n-    protected AMQChannel _channel;\n+    protected MockChannel _channel;\n     protected InternalTestProtocolSession _session;\n     protected VirtualHost _virtualHost;\n     protected StoreContext _storeContext = new StoreContext();\n@@ -74,7 +77,7 @@ public void setUp() throws Exception\n \n         _session.setVirtualHost(_virtualHost);\n \n-        _channel = new AMQChannel(_session, 1, _messageStore);\n+        _channel = new MockChannel(_session, 1, _messageStore);\n \n         _session.addChannel(_channel);\n     }\n@@ -113,6 +116,29 @@ protected AMQShortString subscribe(InternalTestProtocolSession session, AMQChann\n         return null;\n     }\n \n+    protected AMQShortString browse(AMQChannel channel, AMQQueue queue)\n+    {\n+        try\n+        {\n+            FieldTable filters = new FieldTable();\n+            filters.put(AMQPFilterTypes.NO_CONSUME.getValue(), true);\n+\n+            return channel.subscribeToQueue(null, queue, true, filters, false, true);\n+        }\n+        catch (AMQException e)\n+        {\n+            e.printStackTrace();\n+            fail(e.getMessage());\n+        }\n+        catch (ConsumerTagNotUniqueException e)\n+        {\n+            e.printStackTrace();\n+            fail(e.getMessage());\n+        }\n+        //Keep the compiler happy\n+        return null;\n+    }\n+\n     public void publishMessages(InternalTestProtocolSession session, AMQChannel channel, int messages) throws AMQException\n     {\n         MessagePublishInfo info = new MessagePublishInfo()",
                "raw_url": "https://github.com/apache/qpid/raw/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java",
                "sha": "509ea817fdbd723fc6ed0e9b8aa615712cf4f156",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/qpid/blob/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/test/java/org/apache/qpid/util/MockChannel.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/util/MockChannel.java?ref=205e035f834266257e383d17bd80d83abcc1fe2a",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/util/MockChannel.java",
                "patch": "@@ -0,0 +1,43 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.util;\n+\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.subscription.Subscription;\n+import org.apache.qpid.server.store.MessageStore;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.framing.AMQShortString;\n+\n+public class MockChannel extends AMQChannel\n+{\n+    public MockChannel(AMQProtocolSession session, int channelId, MessageStore messageStore)\n+            throws AMQException\n+    {\n+        super(session, channelId, messageStore);\n+    }\n+\n+    public Subscription getSubscription(AMQShortString subscription)\n+    {\n+        return _tag2SubscriptionMap.get(subscription);\n+    }\n+    \n+}",
                "raw_url": "https://github.com/apache/qpid/raw/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/broker/src/test/java/org/apache/qpid/util/MockChannel.java",
                "sha": "447d09429d908edebdc4d0efc192c1217a99832a",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java?ref=205e035f834266257e383d17bd80d83abcc1fe2a",
                "deletions": 0,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java",
                "patch": "@@ -110,6 +110,12 @@ public void setStateListener(final StateListener listener)\n     {\n         //To change body of implemented methods use File | Settings | File Templates.\n     }\n+    \n+    @Override\n+    public State getState()\n+    {\n+        return null;  //To change body of implemented methods use File | Settings | File Templates.\n+    }\n \n     public QueueEntry getLastSeenEntry()\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/205e035f834266257e383d17bd80d83abcc1fe2a/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java",
                "sha": "c20c0bc579e282fbaa6ae42422a95798baf44313",
                "status": "modified"
            }
        ],
        "message": "QPID-1331 : Modified the BrowserSubscription to be consistent with the NoAck Subscription.\nAdded Test QueueBrowserUsesNoAckTest to validate the change.\nNote that the Credit Manager Suspends the subscriber not the channel when credit is exhausted. JIRA to follow.\nSo to check if the subscription was suspended I needed to make a MockChannel and give it access to the subscriber map in the\nChannel.\nThe test also needed to be able to interrogate the state of the Subscription which was not part of the Subscription interface, but was used by all subscriptions. So promoted to the interface and implemented the stubs in the various helper/test classes.\n\nAdded the ability to browse() via the InternalBrokerBaseCase and prevented a NPE when there were no messages returned via getDelivers.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/qpid/trunk@703212 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/a09ed43cc8ed5862996e684b924f3405e09734c3",
        "patched_files": [
            "Subscription.java",
            "InternalTestProtocolSession.java",
            "InternalBrokerBaseCase.java",
            "AMQChannel.java",
            "SubscriptionTestHelper.java",
            "MockSubscription.java",
            "MockChannel.java",
            "SubscriptionImpl.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "QueueBrowserUsesNoAckTest.java"
        ]
    },
    "qpid_216f71a": {
        "bug_id": "qpid_216f71a",
        "commit": "https://github.com/apache/qpid/commit/216f71a0e3dce3bb238e3b33b6998c2d0b810d6c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/216f71a0e3dce3bb238e3b33b6998c2d0b810d6c/qpid/java/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_10.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_10.java?ref=216f71a0e3dce3bb238e3b33b6998c2d0b810d6c",
                "deletions": 8,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_10.java",
                "patch": "@@ -652,14 +652,7 @@ public String getStringProperty(String propertyName) throws JMSException\n             }\n             else if(o == null)\n             {\n-                if(propertyMap.containsKey(propertyName))\n-                {\n-                    return null;\n-                }\n-                else\n-                {\n-                    return String.valueOf(null);\n-                }\n+                return null;\n             }\n             else if(o.getClass().isArray())\n             {",
                "raw_url": "https://github.com/apache/qpid/raw/216f71a0e3dce3bb238e3b33b6998c2d0b810d6c/qpid/java/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_10.java",
                "sha": "e66ba433a93e81dac73b0af1d8ffa5ccba99084b",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/qpid/blob/216f71a0e3dce3bb238e3b33b6998c2d0b810d6c/qpid/java/systests/src/main/java/org/apache/qpid/test/unit/basic/PropertyValueTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/test/unit/basic/PropertyValueTest.java?ref=216f71a0e3dce3bb238e3b33b6998c2d0b810d6c",
                "deletions": 0,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/test/unit/basic/PropertyValueTest.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.jms.Connection;\n import javax.jms.Destination;\n import javax.jms.JMSException;\n import javax.jms.Message;\n@@ -90,6 +91,16 @@ private void init(AMQConnection connection, Destination destination) throws Exce\n         connection.start();\n     }\n \n+    public void testGetNonexistent() throws Exception\n+    {\n+        Connection conn = getConnection();\n+        Session ssn = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+        Message m = ssn.createTextMessage();\n+        String s = m.getStringProperty(\"nonexistent\");\n+        assertNull(s);\n+        conn.close();\n+    }\n+\n     public void testOnce()\n     {\n         runBatch(1);",
                "raw_url": "https://github.com/apache/qpid/raw/216f71a0e3dce3bb238e3b33b6998c2d0b810d6c/qpid/java/systests/src/main/java/org/apache/qpid/test/unit/basic/PropertyValueTest.java",
                "sha": "48bd722aae77e6966c038fbe213d3cd9770b4a9a",
                "status": "modified"
            }
        ],
        "message": "QPID-1233: made getStringProperty(nonexistent) return null instead of NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/qpid/trunk@685207 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/b3e71af2418565438e48b02c7bf69ecc9c85bc48",
        "patched_files": [
            "AMQMessageDelegate_0_10.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "PropertyValueTest.java"
        ]
    },
    "qpid_23312b4": {
        "bug_id": "qpid_23312b4",
        "commit": "https://github.com/apache/qpid/commit/23312b47179dc07e44952874a217b24560c73726",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/23312b47179dc07e44952874a217b24560c73726/qpid/java/common/src/main/java/org/apache/qpid/util/FileUtils.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/util/FileUtils.java?ref=23312b47179dc07e44952874a217b24560c73726",
                "deletions": 7,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/util/FileUtils.java",
                "patch": "@@ -246,12 +246,6 @@ public static boolean delete(File file, boolean recursive)\n      {\n          boolean success = true;\n \n-         // If we have nothing to delete then it must be ok to say it was deleted.\n-         if (file == null || !file.exists())\n-         {\n-             return true;\n-         }\n-\n          if (file.isDirectory())\n          {\n              if (recursive)\n@@ -267,7 +261,7 @@ public static boolean delete(File file, boolean recursive)\n              return false;\n          }\n \n-         return success && file.delete();\n+         return file.delete();\n      }\n \n ",
                "raw_url": "https://github.com/apache/qpid/raw/23312b47179dc07e44952874a217b24560c73726/qpid/java/common/src/main/java/org/apache/qpid/util/FileUtils.java",
                "sha": "e4bfb9c664a443a3d98b095719505ee2b098e607",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/qpid/blob/23312b47179dc07e44952874a217b24560c73726/qpid/java/common/src/test/java/org/apache/qpid/util/FileUtilsTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/test/java/org/apache/qpid/util/FileUtilsTest.java?ref=23312b47179dc07e44952874a217b24560c73726",
                "deletions": 1,
                "filename": "qpid/java/common/src/test/java/org/apache/qpid/util/FileUtilsTest.java",
                "patch": "@@ -287,9 +287,23 @@ public void testDeleteNonExistentFile()\n         assertTrue(\"File exists\", !test.exists());\n         assertFalse(\"File is a directory\", test.isDirectory());\n \n-        assertTrue(\"Unable to delete\",FileUtils.delete(test,true));\n+        assertTrue(\"Delete Succeeded \", !FileUtils.delete(test, true));\n     }\n \n+    public void testDeleteNull()\n+    {\n+        try\n+        {\n+            FileUtils.delete(null, true);\n+            fail(\"Delete with null value should throw NPE.\");\n+        }\n+        catch (NullPointerException npe)\n+        {\n+            // expected path\n+        }\n+    }\n+\n+\n     /**\n      * Given two lists of File arrays ensure they are the same length and all entries in Before are in After\n      *",
                "raw_url": "https://github.com/apache/qpid/raw/23312b47179dc07e44952874a217b24560c73726/qpid/java/common/src/test/java/org/apache/qpid/util/FileUtilsTest.java",
                "sha": "94e7e20a86d3aea1c59dd894d5f6ccfdbedffbbb",
                "status": "modified"
            }
        ],
        "message": "Removed false positive return from FU.delete(). Delete mirrors functionality provided by java.io. Attempting to delete an non-existent file returns false. The caller must handle this correctly. If client provides a null value then the call will throw a NPE which is a valid java response.\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@751720 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/4bcc963b00b70ea6a718c9f6caca908b879035e4",
        "patched_files": [
            "FileUtils.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "FileUtilsTest.java"
        ]
    },
    "qpid_38ec338": {
        "bug_id": "qpid_38ec338",
        "commit": "https://github.com/apache/qpid/commit/38ec33821fd6e1c01e32a398607ec3faae4f1226",
        "file": [
            {
                "additions": 213,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "changes": 272,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 59,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "patch": "@@ -46,6 +46,7 @@\n import org.apache.qpid.server.queue.AMQMessage;\n import org.apache.qpid.server.queue.AMQQueue;\n import org.apache.qpid.server.queue.MessageHandleFactory;\n+import org.apache.qpid.server.queue.Subscription;\n import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.store.StoreContext;\n import org.apache.qpid.server.txn.LocalTransactionalContext;\n@@ -74,28 +75,20 @@\n      */\n     private AtomicLong _deliveryTag = new AtomicLong(0);\n \n-    /**\n-     * A channel has a default queue (the last declared) that is used when no queue name is\n-     * explictily set\n-     */\n+    /** A channel has a default queue (the last declared) that is used when no queue name is explictily set */\n     private AMQQueue _defaultQueue;\n \n-    /**\n-     * This tag is unique per subscription to a queue. The server returns this in response to a\n-     * basic.consume request.\n-     */\n+    /** This tag is unique per subscription to a queue. The server returns this in response to a basic.consume request. */\n     private int _consumerTag;\n \n     /**\n-     * The current message - which may be partial in the sense that not all frames have been received yet -\n-     * which has been received by this channel. As the frames are received the message gets updated and once all\n-     * frames have been received the message can then be routed.\n+     * The current message - which may be partial in the sense that not all frames have been received yet - which has\n+     * been received by this channel. As the frames are received the message gets updated and once all frames have been\n+     * received the message can then be routed.\n      */\n     private AMQMessage _currentMessage;\n \n-    /**\n-     * Maps from consumer tag to queue instance. Allows us to unsubscribe from a queue.\n-     */\n+    /** Maps from consumer tag to queue instance. Allows us to unsubscribe from a queue. */\n     private final Map<AMQShortString, AMQQueue> _consumerTag2QueueMap = new HashMap<AMQShortString, AMQQueue>();\n \n     private final MessageStore _messageStore;\n@@ -109,8 +102,8 @@\n     private TransactionalContext _txnContext;\n \n     /**\n-     * A context used by the message store enabling it to track context for a given channel even across\n-     * thread boundaries\n+     * A context used by the message store enabling it to track context for a given channel even across thread\n+     * boundaries\n      */\n     private final StoreContext _storeContext;\n \n@@ -123,7 +116,6 @@\n     private final AMQProtocolSession _session;\n \n \n-\n     public AMQChannel(AMQProtocolSession session, int channelId, MessageStore messageStore, MessageRouter exchanges)\n             throws AMQException\n     {\n@@ -138,9 +130,7 @@ public AMQChannel(AMQProtocolSession session, int channelId, MessageStore messag\n         _txnContext = new NonTransactionalContext(_messageStore, _storeContext, this, _returnMessages, _browsedAcks);\n     }\n \n-    /**\n-     * Sets this channel to be part of a local transaction\n-     */\n+    /** Sets this channel to be part of a local transaction */\n     public void setLocalTransactional()\n     {\n         _txnContext = new LocalTransactionalContext(_messageStore, _storeContext, _returnMessages);\n@@ -293,17 +283,17 @@ public int getNextConsumerTag()\n     }\n \n     /**\n-     * Subscribe to a queue. We register all subscriptions in the channel so that\n-     * if the channel is closed we can clean up all subscriptions, even if the\n-     * client does not explicitly unsubscribe from all queues.\n+     * Subscribe to a queue. We register all subscriptions in the channel so that if the channel is closed we can clean\n+     * up all subscriptions, even if the client does not explicitly unsubscribe from all queues.\n      *\n-     * @param tag     the tag chosen by the client (if null, server will generate one)\n-     * @param queue   the queue to subscribe to\n-     * @param session the protocol session of the subscriber\n+     * @param tag       the tag chosen by the client (if null, server will generate one)\n+     * @param queue     the queue to subscribe to\n+     * @param session   the protocol session of the subscriber\n      * @param noLocal\n      * @param exclusive\n-     * @return the consumer tag. This is returned to the subscriber and used in\n-     *         subsequent unsubscribe requests\n+     *\n+     * @return the consumer tag. This is returned to the subscriber and used in subsequent unsubscribe requests\n+     *\n      * @throws ConsumerTagNotUniqueException if the tag is not unique\n      * @throws AMQException                  if something goes wrong\n      */\n@@ -335,7 +325,7 @@ public void unsubscribeConsumer(AMQProtocolSession session, AMQShortString consu\n     }\n \n     /**\n-     * Called from the protocol session to close this channel and clean up.\n+     * Called from the protocol session to close this channel and clean up. T\n      *\n      * @throws AMQException if there is an error during closure\n      */\n@@ -344,8 +334,6 @@ public void close(AMQProtocolSession session) throws AMQException\n         _txnContext.rollback();\n         unsubscribeAllConsumers(session);\n         requeue();\n-        _txnContext.commit();\n-\n     }\n \n     private void unsubscribeAllConsumers(AMQProtocolSession session) throws AMQException\n@@ -362,8 +350,8 @@ private void unsubscribeAllConsumers(AMQProtocolSession session) throws AMQExcep\n      * Add a message to the channel-based list of unacknowledged messages\n      *\n      * @param message     the message that was delivered\n-     * @param deliveryTag the delivery tag used when delivering the message (see protocol spec for description of\n-     *                    the delivery tag)\n+     * @param deliveryTag the delivery tag used when delivering the message (see protocol spec for description of the\n+     *                    delivery tag)\n      * @param queue       the queue from which the message was delivered\n      */\n     public void addUnacknowledgedMessage(AMQMessage message, long deliveryTag, AMQShortString consumerTag, AMQQueue queue)\n@@ -376,8 +364,8 @@ public void addUnacknowledgedMessage(AMQMessage message, long deliveryTag, AMQSh\n     }\n \n     /**\n-     * Called to attempt re-enqueue all outstanding unacknowledged messages on the channel.\n-     * May result in delivery to this same channel or to other subscribers.\n+     * Called to attempt re-enqueue all outstanding unacknowledged messages on the channel. May result in delivery to\n+     * this same channel or to other subscribers.\n      *\n      * @throws org.apache.qpid.AMQException if the requeue fails\n      */\n@@ -386,23 +374,75 @@ public void requeue() throws AMQException\n         // we must create a new map since all the messages will get a new delivery tag when they are redelivered\n         Collection<UnacknowledgedMessage> messagesToBeDelivered = _unacknowledgedMessageMap.cancelAllMessages();\n \n+        TransactionalContext nontransacted = null;\n+        if (!(_txnContext instanceof NonTransactionalContext))\n+        {\n+            nontransacted = new NonTransactionalContext(_messageStore, _storeContext, this,\n+                                                        _returnMessages, _browsedAcks);\n+        }\n+\n+\n         for (UnacknowledgedMessage unacked : messagesToBeDelivered)\n         {\n             if (unacked.queue != null)\n             {\n-                _txnContext.deliver(unacked.message, unacked.queue);\n+                // Deliver these messages out of the transaction as their delivery was never\n+                // part of the transaction only the receive.\n+                if (!(_txnContext instanceof NonTransactionalContext))\n+                {\n+                    nontransacted.deliver(unacked.message, unacked.queue, false);\n+                }\n+                else\n+                {\n+                    _txnContext.deliver(unacked.message, unacked.queue, false);\n+                }\n             }\n         }\n \n     }\n \n+    public void requeue(long deliveryTag) throws AMQException\n+    {\n+        UnacknowledgedMessage unacked = _unacknowledgedMessageMap.remove(deliveryTag);\n \n-    /**\n-     * Called to resend all outstanding unacknowledged messages to this same channel.\n-     */\n+        if (unacked != null)\n+        {\n+            TransactionalContext nontransacted = null;\n+            if (!(_txnContext instanceof NonTransactionalContext))\n+            {\n+                nontransacted = new NonTransactionalContext(_messageStore, _storeContext, this,\n+                                                            _returnMessages, _browsedAcks);\n+            }\n+\n+            if (!(_txnContext instanceof NonTransactionalContext))\n+            {\n+                nontransacted.deliver(unacked.message, unacked.queue, false);\n+            }\n+            else\n+            {\n+                _txnContext.deliver(unacked.message, unacked.queue, false);\n+            }\n+            unacked.message.decrementReference(_storeContext);\n+        }\n+        else\n+        {\n+            _log.error(\"Requested requeue of message:\" + deliveryTag + \" but no such delivery tag exists\");\n+        }\n+\n+\n+    }\n+\n+\n+    /** Called to resend all outstanding unacknowledged messages to this same channel. */\n     public void resend(final AMQProtocolSession session, final boolean requeue) throws AMQException\n     {\n         final List<UnacknowledgedMessage> msgToRequeue = new LinkedList<UnacknowledgedMessage>();\n+        final List<UnacknowledgedMessage> msgToResend = new LinkedList<UnacknowledgedMessage>();\n+\n+        if (_log.isInfoEnabled())\n+        {\n+            _log.info(\"unacked map contains \" + _unacknowledgedMessageMap.size());\n+        }\n \n         _unacknowledgedMessageMap.visit(new UnacknowledgedMessageMap.Visitor()\n         {\n@@ -412,21 +452,40 @@ public boolean callback(UnacknowledgedMessage message) throws AMQException\n                 AMQShortString consumerTag = message.consumerTag;\n                 AMQMessage msg = message.message;\n                 msg.setRedelivered(true);\n-                if((consumerTag != null) && _consumerTag2QueueMap.containsKey(consumerTag) && !isSuspended())\n+                if (consumerTag != null)\n                 {\n-                    msg.writeDeliver(session, _channelId, deliveryTag, consumerTag);\n+                    // Consumer exists\n+                    if (_consumerTag2QueueMap.containsKey(consumerTag))\n+                    {\n+                        msgToResend.add(message);\n+                    }\n+                    else // consumer has gone\n+                    {\n+                        msgToRequeue.add(message);\n+                    }\n                 }\n                 else\n                 {\n                     // Message has no consumer tag, so was \"delivered\" to a GET\n                     // or consumer no longer registered\n                     // cannot resend, so re-queue.\n-                    if (message.queue != null && (consumerTag == null || requeue))\n+                    if (message.queue != null)\n+                    {\n+                        if (requeue)\n+                        {\n+                            msgToRequeue.add(message);\n+                        }\n+                        else\n+                        {\n+                            _log.info(\"No DeadLetter Queue and requeue not requested so dropping message:\" + message);\n+                        }\n+                    }\n+                    else\n                     {\n-                        msgToRequeue.add(message);                         \n+                        _log.info(\"Message.queue is null and no DeadLetter Queue so dropping message:\" + message);\n                     }\n                 }\n-                \n+\n                 // false means continue processing\n                 return false;\n             }\n@@ -436,21 +495,112 @@ public void visitComplete()\n             }\n         });\n \n-        for(UnacknowledgedMessage message : msgToRequeue)\n+        // Process Messages to Resend\n+        if (_log.isInfoEnabled())\n+        {\n+            if (!msgToResend.isEmpty())\n+            {\n+                _log.info(\"Preparing (\" + msgToResend.size() + \") message to resend to.\");\n+            }\n+        }\n+        for (UnacknowledgedMessage message : msgToResend)\n+        {\n+            AMQMessage msg = message.message;\n+\n+            // Our Java Client will always suspend the channel when resending!!\n+//            if (isSuspended())\n+//            {\n+//                _log.info(\"Channel is suspended so requeuing\");\n+//                //move this message to requeue\n+//                msgToRequeue.add(message);\n+//            }\n+//            else\n+            {\n+                //release to allow it to be delivered\n+                msg.release();\n+\n+                // Without any details from the client about what has been processed we have to mark\n+                // all messages in the unacked map as redelivered.\n+                msg.setRedelivered(true);\n+\n+\n+                Subscription sub = msg.getDeliveredSubscription();\n+\n+                if (sub != null)\n+                {\n+                    synchronized (sub.getSendLock())\n+                    {\n+                        if (sub.isClosed())\n+                        {\n+                            _log.info(\"Subscription closed during resend so requeuing message\");\n+                            //move this message to requeue\n+                            msgToRequeue.add(message);\n+                        }\n+                        else\n+                        {\n+                            if (_log.isDebugEnabled())\n+                            {\n+                                _log.debug(\"Requeuing (\" + System.identityHashCode(msg) + \") for resend\");\n+                            }\n+                            // Will throw an exception if the sub is closed\n+                            sub.addToResendQueue(msg);\n+                            _unacknowledgedMessageMap.remove(message.deliveryTag);\n+                            // Don't decrement as we are bypassing the normal deliver which increments\n+                            // this is what there is a decrement on the Requeue as deliver will increment.\n+                            // msg.decrementReference(_storeContext);\n+                        }\n+                    }\n+                }\n+                else\n+                {\n+                    _log.info(\"DeliveredSubscription not recorded so just requeueing to prevent loss\");\n+                    //move this message to requeue\n+                    msgToRequeue.add(message);\n+                }\n+            }\n+        }\n+\n+        if (_log.isInfoEnabled())\n+        {\n+            if (!msgToRequeue.isEmpty())\n+            {\n+                _log.info(\"Preparing (\" + msgToRequeue.size() + \") message to requeue to.\");\n+            }\n+        }\n+\n+        TransactionalContext nontransacted = null;\n+        if (!(_txnContext instanceof NonTransactionalContext))\n         {\n-            _txnContext.deliver(message.message, message.queue);\n+            nontransacted = new NonTransactionalContext(_messageStore, _storeContext, this,\n+                                                        _returnMessages, _browsedAcks);\n+        }\n+\n+        // Process Messages to Requeue at the front of the queue\n+        for (UnacknowledgedMessage message : msgToRequeue)\n+        {\n+            // Deliver these messages out of the transaction as their delivery was never\n+            // part of the transaction only the receive.\n+            if (!(_txnContext instanceof NonTransactionalContext))\n+            {\n+                nontransacted.deliver(message.message, message.queue, true);\n+            }\n+            else\n+            {\n+                _txnContext.deliver(message.message, message.queue, true);\n+            }\n+\n             _unacknowledgedMessageMap.remove(message.deliveryTag);\n             message.message.decrementReference(_storeContext);\n         }\n     }\n \n     /**\n-     * Callback indicating that a queue has been deleted. We must update the structure of unacknowledged\n-     * messages to remove the queue reference and also decrement any message reference counts, without\n-     * actually removing the item since we may get an ack for a delivery tag that was generated from the\n-     * deleted queue.\n+     * Callback indicating that a queue has been deleted. We must update the structure of unacknowledged messages to\n+     * remove the queue reference and also decrement any message reference counts, without actually removing the item\n+     * since we may get an ack for a delivery tag that was generated from the deleted queue.\n      *\n      * @param queue the queue that has been deleted\n+     *\n      * @throws org.apache.qpid.AMQException if there is an error processing the unacked messages\n      */\n     public void queueDeleted(final AMQQueue queue) throws AMQException\n@@ -487,6 +637,7 @@ public void visitComplete()\n      * @param deliveryTag the last delivery tag\n      * @param multiple    if true will acknowledge all messages up to an including the delivery tag. if false only\n      *                    acknowledges the single message specified by the delivery tag\n+     *\n      * @throws AMQException if the delivery tag is unknown (e.g. not outstanding) on this channel\n      */\n     public void acknowledgeMessage(long deliveryTag, boolean multiple) throws AMQException\n@@ -517,10 +668,10 @@ public void addUnacknowledgedBrowsedMessage(AMQMessage msg, long deliveryTag, AM\n     private void checkSuspension()\n     {\n         boolean suspend;\n-        \n-        suspend = ((_prefetch_HighWaterMark != 0) &&  _unacknowledgedMessageMap.size() >= _prefetch_HighWaterMark)\n-                 || ((_prefetchSize != 0) && _prefetchSize < _unacknowledgedMessageMap.getUnacknowledgeBytes());\n-        \n+\n+        suspend = ((_prefetch_HighWaterMark != 0) && _unacknowledgedMessageMap.size() >= _prefetch_HighWaterMark)\n+                  || ((_prefetchSize != 0) && _prefetchSize < _unacknowledgedMessageMap.getUnacknowledgeBytes());\n+\n         setSuspended(suspend);\n     }\n \n@@ -570,8 +721,6 @@ public void commit() throws AMQException\n     public void rollback() throws AMQException\n     {\n         _txnContext.rollback();\n-\n-\n     }\n \n     public String toString()\n@@ -617,21 +766,26 @@ public boolean wouldSuspend(AMQMessage msg)\n         }\n         else\n         {\n-            boolean willSuspend = ((_prefetch_HighWaterMark != 0) &&  _unacknowledgedMessageMap.size() + 1 > _prefetch_HighWaterMark);\n-            if(!willSuspend)\n+            boolean willSuspend = ((_prefetch_HighWaterMark != 0) && _unacknowledgedMessageMap.size() + 1 > _prefetch_HighWaterMark);\n+            if (!willSuspend)\n             {\n                 final long unackedSize = _unacknowledgedMessageMap.getUnacknowledgeBytes();\n \n                 willSuspend = (_prefetchSize != 0) && (unackedSize != 0) && (_prefetchSize < msg.getSize() + unackedSize);\n             }\n \n \n-            if(willSuspend)\n+            if (willSuspend)\n             {\n                 setSuspended(true);\n             }\n             return willSuspend;\n         }\n \n     }\n+\n+    public TransactionalContext getTransactionalContext()\n+    {\n+        return _txnContext;\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "sha": "7ceb3a7eefbeeb41e74952bb7fa894fdfcd69bc5",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/ack/UnacknowledgedMessageMapImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/ack/UnacknowledgedMessageMapImpl.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/ack/UnacknowledgedMessageMapImpl.java",
                "patch": "@@ -85,7 +85,6 @@ public void remove(List<UnacknowledgedMessage> msgs)\n             for (UnacknowledgedMessage msg : msgs)\n             {\n                 remove(msg.deliveryTag);\n-\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/ack/UnacknowledgedMessageMapImpl.java",
                "sha": "fdf087fdeaf89cf03556bf23def01b0d53724a4c",
                "status": "modified"
            },
            {
                "additions": 68,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java",
                "patch": "@@ -0,0 +1,68 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.handler;\n+\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.framing.BasicRejectBody;\n+import org.apache.qpid.protocol.AMQMethodEvent;\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.ack.UnacknowledgedMessage;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.state.AMQStateManager;\n+import org.apache.qpid.server.state.StateAwareMethodListener;\n+import org.apache.log4j.Logger;\n+\n+public class BasicRejectMethodHandler implements StateAwareMethodListener<BasicRejectBody>\n+{\n+    private static final Logger _logger = Logger.getLogger(BasicRejectMethodHandler.class);\n+\n+    private static BasicRejectMethodHandler _instance = new BasicRejectMethodHandler();\n+\n+    public static BasicRejectMethodHandler getInstance()\n+    {\n+        return _instance;\n+    }\n+\n+    private BasicRejectMethodHandler()\n+    {\n+    }\n+\n+    public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<BasicRejectBody> evt) throws AMQException\n+    {\n+        AMQProtocolSession session = stateManager.getProtocolSession();\n+\n+        _logger.info(\"FIXME: Rejecting:\" + evt.getMethod().deliveryTag + \": Requeue:\" + evt.getMethod().requeue);\n+\n+        int channelId = evt.getChannelId();\n+        UnacknowledgedMessage message = session.getChannel(channelId).getUnacknowledgedMessageMap().get(evt.getMethod().deliveryTag);\n+\n+        _logger.info(\"Need to reject message:\" + message);\n+//        if (evt.getMethod().requeue)\n+//        {\n+//          session.getChannel(channelId).requeue(evt.getMethod().deliveryTag);\n+//        }\n+//        else\n+//       {\n+//           // session.getChannel(channelId).resend(message);\n+//       }\n+\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java",
                "sha": "ed13092ded2ebf04932818ffc6aca73e6592fba0",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/TxRollbackHandler.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/TxRollbackHandler.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/handler/TxRollbackHandler.java",
                "patch": "@@ -62,6 +62,7 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<TxRollba\n             session.writeFrame(TxRollbackOkBody.createAMQFrame(evt.getChannelId(), (byte) 8, (byte) 0));\n             //Now resend all the unacknowledged messages back to the original subscribers.\n             //(Must be done after the TxnRollback-ok response).\n+            // Why, are we not allowed to send messages back to client before the ok method?\n             channel.resend(session, false);\n         }\n         catch (AMQException e)",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/TxRollbackHandler.java",
                "sha": "a10f44f9061e962d0402cdab453d7ec79a0e1058",
                "status": "modified"
            },
            {
                "additions": 85,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java",
                "changes": 165,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 80,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java",
                "patch": "@@ -36,21 +36,15 @@\n import org.apache.qpid.framing.abstraction.ContentChunk;\n import org.apache.qpid.server.txn.TransactionalContext;\n \n-/**\n- * Combines the information that make up a deliverable message into a more manageable form.\n- */\n+/** Combines the information that make up a deliverable message into a more manageable form. */\n public class AMQMessage\n {\n     private static final Logger _log = Logger.getLogger(AMQMessage.class);\n \n-    /**\n-     * Used in clustering\n-     */\n+    /** Used in clustering */\n     private Set<Object> _tokens;\n \n-    /**\n-     * Only use in clustering - should ideally be removed?\n-     */\n+    /** Only use in clustering - should ideally be removed? */\n     private AMQProtocolSession _publisher;\n \n     private final Long _messageId;\n@@ -63,28 +57,31 @@\n     private TransactionalContext _txnContext;\n \n     /**\n-     * Flag to indicate whether message has been delivered to a\n-     * consumer. Used in implementing return functionality for\n+     * Flag to indicate whether message has been delivered to a consumer. Used in implementing return functionality for\n      * messages published with the 'immediate' flag.\n      */\n     private boolean _deliveredToConsumer;\n     /**\n-     * We need to keep track of whether the message was 'immediate'\n-     * as in extreme circumstances, when the checkDelieveredToConsumer\n-     * is called, the message may already have been received and acknowledged,\n-     * and the body removed from the store.\n+     * We need to keep track of whether the message was 'immediate' as in extreme circumstances, when the\n+     * checkDelieveredToConsumer is called, the message may already have been received and acknowledged, and the body\n+     * removed from the store.\n      */\n     private boolean _immediate;\n \n     private AtomicBoolean _taken = new AtomicBoolean(false);\n \n     private TransientMessageData _transientMessageData = new TransientMessageData();\n \n+    private Subscription _takenBySubcription;\n \n+    public boolean isTaken()\n+    {\n+        return _taken.get();\n+    }\n \n     /**\n-     * Used to iterate through all the body frames associated with this message. Will not\n-     * keep all the data in memory therefore is memory-efficient.\n+     * Used to iterate through all the body frames associated with this message. Will not keep all the data in memory\n+     * therefore is memory-efficient.\n      */\n     private class BodyFrameIterator implements Iterator<AMQDataBlock>\n     {\n@@ -103,7 +100,7 @@ public boolean hasNext()\n         {\n             try\n             {\n-                return _index < _messageHandle.getBodyCount(getStoreContext(),_messageId) - 1;\n+                return _index < _messageHandle.getBodyCount(getStoreContext(), _messageId) - 1;\n             }\n             catch (AMQException e)\n             {\n@@ -153,7 +150,7 @@ public boolean hasNext()\n         {\n             try\n             {\n-                return _index < _messageHandle.getBodyCount(getStoreContext(),_messageId) - 1;\n+                return _index < _messageHandle.getBodyCount(getStoreContext(), _messageId) - 1;\n             }\n             catch (AMQException e)\n             {\n@@ -166,7 +163,7 @@ public ContentChunk next()\n         {\n             try\n             {\n-                return _messageHandle.getContentChunk(getStoreContext(),_messageId, ++_index);\n+                return _messageHandle.getContentChunk(getStoreContext(), _messageId, ++_index);\n             }\n             catch (AMQException e)\n             {\n@@ -196,12 +193,14 @@ public AMQMessage(Long messageId, MessagePublishInfo info,\n     }\n \n     /**\n-     * Used when recovering, i.e. when the message store is creating references to messages.\n-     * In that case, the normal enqueue/routingComplete is not done since the recovery process\n-     * is responsible for routing the messages to queues.\n+     * Used when recovering, i.e. when the message store is creating references to messages. In that case, the normal\n+     * enqueue/routingComplete is not done since the recovery process is responsible for routing the messages to\n+     * queues.\n+     *\n      * @param messageId\n      * @param store\n      * @param factory\n+     *\n      * @throws AMQException\n      */\n     public AMQMessage(Long messageId, MessageStore store, MessageHandleFactory factory, TransactionalContext txnConext) throws AMQException\n@@ -213,8 +212,8 @@ public AMQMessage(Long messageId, MessageStore store, MessageHandleFactory facto\n     }\n \n     /**\n-     * Used in testing only. This allows the passing of the content header immediately\n-     * on construction.\n+     * Used in testing only. This allows the passing of the content header immediately on construction.\n+     *\n      * @param messageId\n      * @param info\n      * @param txnContext\n@@ -228,14 +227,15 @@ public AMQMessage(Long messageId, MessagePublishInfo info,\n     }\n \n     /**\n-     * Used in testing only. This allows the passing of the content header and some body fragments on\n-     * construction.\n+     * Used in testing only. This allows the passing of the content header and some body fragments on construction.\n+     *\n      * @param messageId\n      * @param info\n      * @param txnContext\n      * @param contentHeader\n      * @param destinationQueues\n      * @param contentBodies\n+     *\n      * @throws AMQException\n      */\n     public AMQMessage(Long messageId, MessagePublishInfo info,\n@@ -280,7 +280,7 @@ public ContentHeaderBody getContentHeaderBody() throws AMQException\n         }\n         else\n         {\n-            return _messageHandle.getContentHeaderBody(getStoreContext(),_messageId);\n+            return _messageHandle.getContentHeaderBody(getStoreContext(), _messageId);\n         }\n     }\n \n@@ -338,24 +338,22 @@ public long getMessageId()\n         return _messageId;\n     }\n \n-    /**\n-     * Threadsafe. Increment the reference count on the message.\n-     */\n+    /** Threadsafe. Increment the reference count on the message. */\n     public void incrementReference()\n     {\n         _referenceCount.incrementAndGet();\n         if (_log.isDebugEnabled())\n         {\n \n-            _log.debug(\"Ref count on message \" + _messageId + \" incremented to \" + _referenceCount + \"   \" +  Arrays.asList(Thread.currentThread().getStackTrace()).subList(0,4));\n+            _log.debug(\"Ref count on message \" + _messageId + \" incremented to \" + _referenceCount + \"   \" + Arrays.asList(Thread.currentThread().getStackTrace()).subList(0, 4));\n \n         }\n     }\n \n     /**\n      * Threadsafe. This will decrement the reference count and when it reaches zero will remove the message from the\n      * message store.\n-     *                                                                                                            \n+     *\n      * @throws MessageCleanupException when an attempt was made to remove the message from the message store and that\n      *                                 failed\n      */\n@@ -371,7 +369,7 @@ public void decrementReference(StoreContext storeContext) throws MessageCleanupE\n             {\n                 if (_log.isDebugEnabled())\n                 {\n-                    _log.debug(\"Ref count on message \" + _messageId + \" is zero; removing message\" + Arrays.asList(Thread.currentThread().getStackTrace()).subList(0,4));\n+                    _log.debug(\"Ref count on message \" + _messageId + \" is zero; removing message\" + Arrays.asList(Thread.currentThread().getStackTrace()).subList(0, 4));\n \n \n                 }\n@@ -394,13 +392,13 @@ public void decrementReference(StoreContext storeContext) throws MessageCleanupE\n         {\n             if (_log.isDebugEnabled())\n             {\n-                _log.debug(\"Ref count is now \" + _referenceCount + \" for message id \" + _messageId+ \"\\n\" +  Arrays.asList(Thread.currentThread().getStackTrace()).subList(0,4));\n+                _log.debug(\"Ref count is now \" + _referenceCount + \" for message id \" + _messageId + \"\\n\" + Arrays.asList(Thread.currentThread().getStackTrace()).subList(0, 4));\n                 if (_referenceCount.get() < 0)\n                 {\n                     Thread.dumpStack();\n                 }\n             }\n-            if(_referenceCount.get()<0)\n+            if (_referenceCount.get() < 0)\n             {\n                 throw new MessageCleanupException(\"Reference count for message id \" + _messageId + \" has gone below 0.\");\n             }\n@@ -419,18 +417,26 @@ public AMQProtocolSession getPublisher()\n \n     /**\n      * Called selectors to determin if the message has already been sent\n-     * @return   _deliveredToConsumer\n+     *\n+     * @return _deliveredToConsumer\n      */\n     public boolean getDeliveredToConsumer()\n     {\n         return _deliveredToConsumer;\n     }\n \n \n-\n-    public boolean taken()\n+    public boolean taken(Subscription sub)\n     {\n-        return _taken.getAndSet(true);\n+        if (_taken.getAndSet(true))\n+        {\n+            return true;\n+        }\n+        else\n+        {\n+            _takenBySubcription = sub;\n+            return false;\n+        }\n     }\n \n     public void release()\n@@ -441,9 +447,9 @@ public void release()\n     public boolean checkToken(Object token)\n     {\n \n-        if(_tokens==null)\n+        if (_tokens == null)\n         {\n-            _tokens  = new HashSet<Object>();\n+            _tokens = new HashSet<Object>();\n         }\n \n         if (_tokens.contains(token))\n@@ -458,11 +464,12 @@ public boolean checkToken(Object token)\n     }\n \n     /**\n-     * Registers a queue to which this message is to be delivered. This is\n-     * called from the exchange when it is routing the message. This will be called before any content bodies have\n-     * been received so that the choice of AMQMessageHandle implementation can be picked based on various criteria.\n+     * Registers a queue to which this message is to be delivered. This is called from the exchange when it is routing\n+     * the message. This will be called before any content bodies have been received so that the choice of\n+     * AMQMessageHandle implementation can be picked based on various criteria.\n      *\n      * @param queue the queue\n+     *\n      * @throws org.apache.qpid.AMQException if there is an error enqueuing the message\n      */\n     public void enqueue(AMQQueue queue) throws AMQException\n@@ -483,24 +490,23 @@ public boolean isPersistent() throws AMQException\n         }\n         else\n         {\n-            return _messageHandle.isPersistent(getStoreContext(),_messageId);\n+            return _messageHandle.isPersistent(getStoreContext(), _messageId);\n         }\n     }\n \n     /**\n      * Called to enforce the 'immediate' flag.\n      *\n-     * @throws NoConsumersException if the message is marked for\n-     *                              immediate delivery but has not been marked as delivered to a\n-     *                              consumer\n+     * @throws NoConsumersException if the message is marked for immediate delivery but has not been marked as delivered\n+     *                              to a consumer\n      */\n     public void checkDeliveredToConsumer() throws NoConsumersException, AMQException\n     {\n \n         if (_immediate && !_deliveredToConsumer)\n         {\n             throw new NoConsumersException(this);\n-        }        \n+        }\n     }\n \n     public MessagePublishInfo getMessagePublishInfo() throws AMQException\n@@ -512,7 +518,7 @@ public MessagePublishInfo getMessagePublishInfo() throws AMQException\n         }\n         else\n         {\n-            pb = _messageHandle.getMessagePublishInfo(getStoreContext(),_messageId);\n+            pb = _messageHandle.getMessagePublishInfo(getStoreContext(), _messageId);\n         }\n         return pb;\n     }\n@@ -533,10 +539,7 @@ public long getArrivalTime()\n     }\n \n \n-    /**\n-     * Called when this message is delivered to a consumer. (used to\n-     * implement the 'immediate' flag functionality).\n-     */\n+    /** Called when this message is delivered to a consumer. (used to implement the 'immediate' flag functionality). */\n     public void setDeliveredToConsumer()\n     {\n         _deliveredToConsumer = true;\n@@ -566,7 +569,7 @@ private void deliver(StoreContext storeContext) throws AMQException\n \n             for (AMQQueue q : destinationQueues)\n             {\n-                _txnContext.deliver(this, q);\n+                _txnContext.deliver(this, q, true);\n             }\n         }\n         finally\n@@ -583,23 +586,22 @@ public void writeDeliver(AMQProtocolSession protocolSession, int channelId, long\n         AMQDataBlock contentHeader = ContentHeaderBody.createAMQFrame(channelId,\n                                                                       getContentHeaderBody());\n \n-        final int bodyCount = _messageHandle.getBodyCount(getStoreContext(),_messageId);\n-        if(bodyCount == 0)\n+        final int bodyCount = _messageHandle.getBodyCount(getStoreContext(), _messageId);\n+        if (bodyCount == 0)\n         {\n             SmallCompositeAMQDataBlock compositeBlock = new SmallCompositeAMQDataBlock(deliver,\n-                                                                             contentHeader);\n+                                                                                       contentHeader);\n \n             protocolSession.writeFrame(compositeBlock);\n         }\n         else\n         {\n \n-\n             //\n             // Optimise the case where we have a single content body. In that case we create a composite block\n             // so that we can writeDeliver out the deliver, header and body with a single network writeDeliver.\n             //\n-            ContentChunk cb = _messageHandle.getContentChunk(getStoreContext(),_messageId, 0);\n+            ContentChunk cb = _messageHandle.getContentChunk(getStoreContext(), _messageId, 0);\n \n             AMQDataBlock firstContentBody = new AMQFrame(channelId, protocolSession.getRegistry().getProtocolVersionMethodConverter().convertToBody(cb));\n             AMQDataBlock[] headerAndFirstContent = new AMQDataBlock[]{contentHeader, firstContentBody};\n@@ -609,9 +611,9 @@ public void writeDeliver(AMQProtocolSession protocolSession, int channelId, long\n             //\n             // Now start writing out the other content bodies\n             //\n-            for(int i = 1; i < bodyCount; i++)\n+            for (int i = 1; i < bodyCount; i++)\n             {\n-                cb = _messageHandle.getContentChunk(getStoreContext(),_messageId, i);\n+                cb = _messageHandle.getContentChunk(getStoreContext(), _messageId, i);\n                 protocolSession.writeFrame(new AMQFrame(channelId, protocolSession.getRegistry().getProtocolVersionMethodConverter().convertToBody(cb)));\n             }\n \n@@ -627,22 +629,21 @@ public void writeGetOk(AMQProtocolSession protocolSession, int channelId, long d\n         AMQDataBlock contentHeader = ContentHeaderBody.createAMQFrame(channelId,\n                                                                       getContentHeaderBody());\n \n-        final int bodyCount = _messageHandle.getBodyCount(getStoreContext(),_messageId);\n-        if(bodyCount == 0)\n+        final int bodyCount = _messageHandle.getBodyCount(getStoreContext(), _messageId);\n+        if (bodyCount == 0)\n         {\n             SmallCompositeAMQDataBlock compositeBlock = new SmallCompositeAMQDataBlock(deliver,\n-                                                                             contentHeader);\n+                                                                                       contentHeader);\n             protocolSession.writeFrame(compositeBlock);\n         }\n         else\n         {\n \n-\n             //\n             // Optimise the case where we have a single content body. In that case we create a composite block\n             // so that we can writeDeliver out the deliver, header and body with a single network writeDeliver.\n             //\n-            ContentChunk cb = _messageHandle.getContentChunk(getStoreContext(),_messageId, 0);\n+            ContentChunk cb = _messageHandle.getContentChunk(getStoreContext(), _messageId, 0);\n \n             AMQDataBlock firstContentBody = new AMQFrame(channelId, protocolSession.getRegistry().getProtocolVersionMethodConverter().convertToBody(cb));\n             AMQDataBlock[] headerAndFirstContent = new AMQDataBlock[]{contentHeader, firstContentBody};\n@@ -652,9 +653,9 @@ public void writeGetOk(AMQProtocolSession protocolSession, int channelId, long d\n             //\n             // Now start writing out the other content bodies\n             //\n-            for(int i = 1; i < bodyCount; i++)\n+            for (int i = 1; i < bodyCount; i++)\n             {\n-                cb = _messageHandle.getContentChunk(getStoreContext(),_messageId, i);\n+                cb = _messageHandle.getContentChunk(getStoreContext(), _messageId, i);\n                 protocolSession.writeFrame(new AMQFrame(channelId, protocolSession.getRegistry().getProtocolVersionMethodConverter().convertToBody(cb)));\n             }\n \n@@ -685,10 +686,10 @@ private ByteBuffer createEncodedGetOkFrame(AMQProtocolSession protocolSession, i\n         AMQFrame getOkFrame = BasicGetOkBody.createAMQFrame(channelId,\n                                                             protocolSession.getProtocolMajorVersion(),\n                                                             protocolSession.getProtocolMinorVersion(),\n-                                                                deliveryTag, pb.getExchange(),\n-                                                                queueSize,\n-                                                                _messageHandle.isRedelivered(),\n-                                                                pb.getRoutingKey());\n+                                                            deliveryTag, pb.getExchange(),\n+                                                            queueSize,\n+                                                            _messageHandle.isRedelivered(),\n+                                                            pb.getRoutingKey());\n         ByteBuffer buf = ByteBuffer.allocate((int) getOkFrame.getSize()); // XXX: Could cast be a problem?\n         getOkFrame.writePayload(buf);\n         buf.flip();\n@@ -699,7 +700,7 @@ private ByteBuffer createEncodedReturnFrame(AMQProtocolSession protocolSession,\n     {\n         AMQFrame returnFrame = BasicReturnBody.createAMQFrame(channelId,\n                                                               protocolSession.getProtocolMajorVersion(),\n-                                                              protocolSession.getProtocolMinorVersion(), \n+                                                              protocolSession.getProtocolMinorVersion(),\n                                                               getMessagePublishInfo().getExchange(),\n                                                               replyCode, replyText,\n                                                               getMessagePublishInfo().getRoutingKey());\n@@ -757,12 +758,11 @@ public long getSize()\n         }\n         catch (AMQException e)\n         {\n-            _log.error(e.toString(),e);\n+            _log.error(e.toString(), e);\n             return 0;\n         }\n \n-    }    \n-\n+    }\n \n \n     public void restoreTransientMessageData() throws AMQException\n@@ -771,7 +771,7 @@ public void restoreTransientMessageData() throws AMQException\n         transientMessageData.setMessagePublishInfo(getMessagePublishInfo());\n         transientMessageData.setContentHeaderBody(getContentHeaderBody());\n         transientMessageData.addBodyLength(getContentHeaderBody().getSize());\n-        _transientMessageData = transientMessageData; \n+        _transientMessageData = transientMessageData;\n     }\n \n \n@@ -784,6 +784,11 @@ public void clearTransientMessageData()\n     public String toString()\n     {\n         return \"Message: \" + _messageId + \"; ref count: \" + _referenceCount + \"; taken: \" +\n-                _taken;\n+               _taken + \" by:\" + _takenBySubcription;\n+    }\n+\n+    public Subscription getDeliveredSubscription()\n+    {\n+        return _takenBySubcription;\n     }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java",
                "sha": "aa7ea16afcc3500fa3cddb525444eef1fc6f0c99",
                "status": "modified"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQQueue.java",
                "changes": 143,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQQueue.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 88,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQQueue.java",
                "patch": "@@ -45,13 +45,11 @@\n import org.apache.qpid.server.virtualhost.VirtualHost;\n \n /**\n- * This is an AMQ Queue, and should not be confused with a JMS queue or any other abstraction like\n- * that. It is described fully in RFC 006.\n+ * This is an AMQ Queue, and should not be confused with a JMS queue or any other abstraction like that. It is described\n+ * fully in RFC 006.\n  */\n public class AMQQueue implements Managable, Comparable\n {\n-\n-\n     public static final class ExistingExclusiveSubscription extends AMQException\n     {\n \n@@ -74,26 +72,19 @@ public ExistingSubscriptionPreventsExclusive()\n     private static final ExistingSubscriptionPreventsExclusive EXISTING_SUBSCRIPTION = new ExistingSubscriptionPreventsExclusive();\n \n \n-\n     private static final Logger _logger = Logger.getLogger(AMQQueue.class);\n \n     private final AMQShortString _name;\n \n-    /**\n-     * null means shared\n-     */\n+    /** null means shared */\n     private final AMQShortString _owner;\n \n     private final boolean _durable;\n \n-    /**\n-     * If true, this queue is deleted when the last subscriber is removed\n-     */\n+    /** If true, this queue is deleted when the last subscriber is removed */\n     private final boolean _autoDelete;\n \n-    /**\n-     * Holds subscribers to the queue.\n-     */\n+    /** Holds subscribers to the queue. */\n     private final SubscriptionSet _subscribers;\n \n     private final SubscriptionFactory _subscriptionFactory;\n@@ -106,60 +97,41 @@ public ExistingSubscriptionPreventsExclusive()\n \n     private List<Task> _deleteTaskList = new CopyOnWriteArrayList<Task>();\n \n-    /**\n-     * Manages message delivery.\n-     */\n+    /** Manages message delivery. */\n     private final DeliveryManager _deliveryMgr;\n \n-    /**\n-     * Used to track bindings to exchanges so that on deletion they can easily\n-     * be cancelled.\n-     */\n+    /** Used to track bindings to exchanges so that on deletion they can easily be cancelled. */\n     private final ExchangeBindings _bindings = new ExchangeBindings(this);\n \n-    /**\n-     * Executor on which asynchronous delivery will be carriedout where required\n-     */\n+    /** Executor on which asynchronous delivery will be carriedout where required */\n     private final Executor _asyncDelivery;\n \n     private final AMQQueueMBean _managedObject;\n \n     private final VirtualHost _virtualHost;\n \n \n-    /**\n-     * max allowed size(KB) of a single message\n-     */\n+    /** max allowed size(KB) of a single message */\n     @Configured(path = \"maximumMessageSize\", defaultValue = \"0\")\n     public long _maximumMessageSize;\n \n-    /**\n-     * max allowed number of messages on a queue.\n-     */\n+    /** max allowed number of messages on a queue. */\n     @Configured(path = \"maximumMessageCount\", defaultValue = \"0\")\n     public int _maximumMessageCount;\n \n-    /**\n-     * max queue depth for the queue\n-     */\n+    /** max queue depth for the queue */\n     @Configured(path = \"maximumQueueDepth\", defaultValue = \"0\")\n     public long _maximumQueueDepth;\n \n-    /**\n-     * maximum message age before alerts occur\n-     */\n+    /** maximum message age before alerts occur */\n     @Configured(path = \"maximumMessageAge\", defaultValue = \"0\")\n     public long _maximumMessageAge;\n \n-    /**\n-     * the minimum interval between sending out consequetive alerts of the same type\n-     */\n+    /** the minimum interval between sending out consequetive alerts of the same type */\n     @Configured(path = \"minimumAlertRepeatGap\", defaultValue = \"0\")\n     public long _minimumAlertRepeatGap;\n \n-    /**\n-     * total messages received by the queue since startup.\n-     */\n+    /** total messages received by the queue since startup. */\n     public AtomicLong _totalMessagesReceived = new AtomicLong();\n \n     public int compareTo(Object o)\n@@ -176,7 +148,6 @@ public AMQQueue(AMQShortString name, boolean durable, AMQShortString owner,\n     }\n \n \n-\n     protected AMQQueue(AMQShortString name, boolean durable, AMQShortString owner,\n                        boolean autoDelete, VirtualHost virtualHost,\n                        SubscriptionSet subscribers)\n@@ -211,7 +182,7 @@ protected AMQQueue(AMQShortString name, boolean durable, AMQShortString owner,\n \n         _subscribers = subscribers;\n         _subscriptionFactory = subscriptionFactory;\n-\t\t_deliveryMgr = new ConcurrentSelectorDeliveryManager(_subscribers, this);\n+        _deliveryMgr = new ConcurrentSelectorDeliveryManager(_subscribers, this);\n     }\n \n     private AMQQueueMBean createMBean() throws AMQException\n@@ -251,17 +222,13 @@ public boolean isAutoDelete()\n         return _autoDelete;\n     }\n \n-    /**\n-     * @return no of messages(undelivered) on the queue.\n-     */\n+    /** @return no of messages(undelivered) on the queue. */\n     public int getMessageCount()\n     {\n         return _deliveryMgr.getQueueMessageCount();\n     }\n \n-    /**\n-     * @return List of messages(undelivered) on the queue.\n-     */\n+    /** @return List of messages(undelivered) on the queue. */\n     public List<AMQMessage> getMessagesOnTheQueue()\n     {\n         return _deliveryMgr.getMessages();\n@@ -275,6 +242,7 @@ public long getQueueDepth()\n \n     /**\n      * @param messageId\n+     *\n      * @return AMQMessage with give id if exists. null if AMQMessage with given id doesn't exist.\n      */\n     public AMQMessage getMessageOnTheQueue(long messageId)\n@@ -294,13 +262,12 @@ public AMQMessage getMessageOnTheQueue(long messageId)\n     }\n \n     /**\n-     * moves messages from this queue to another queue. to do this the approach is following-\n-     * - setup the queue for moving messages (hold the lock and stop the async delivery)\n-     * - get all the messages available in the given message id range\n-     * - setup the other queue for moving messages (hold the lock and stop the async delivery)\n-     * - send these available messages to the other queue (enqueue in other queue)\n-     * - Once sending to other Queue is successful, remove messages from this queue\n-     * - remove locks from both queues and start async delivery\n+     * moves messages from this queue to another queue. to do this the approach is following- - setup the queue for\n+     * moving messages (hold the lock and stop the async delivery) - get all the messages available in the given message\n+     * id range - setup the other queue for moving messages (hold the lock and stop the async delivery) - send these\n+     * available messages to the other queue (enqueue in other queue) - Once sending to other Queue is successful,\n+     * remove messages from this queue - remove locks from both queues and start async delivery\n+     *\n      * @param fromMessageId\n      * @param toMessageId\n      * @param queueName\n@@ -316,7 +283,7 @@ public synchronized void moveMessagesToAnotherQueue(long fromMessageId, long toM\n             startMovingMessages();\n             List<AMQMessage> list = getMessagesOnTheQueue();\n             List<AMQMessage> foundMessagesList = new ArrayList<AMQMessage>();\n-            int maxMessageCountToBeMoved = (int)(toMessageId - fromMessageId + 1);\n+            int maxMessageCountToBeMoved = (int) (toMessageId - fromMessageId + 1);\n \n             // Run this loop till you find all the messages or the list has no more messages\n             for (AMQMessage message : list)\n@@ -344,7 +311,7 @@ public synchronized void moveMessagesToAnotherQueue(long fromMessageId, long toM\n         {\n             // remove the lock and start the async delivery\n             anotherQueue.stopMovingMessages();\n-            stopMovingMessages();   \n+            stopMovingMessages();\n         }\n     }\n \n@@ -364,10 +331,8 @@ public void stopMovingMessages()\n         _deliveryMgr.stopMovingMessages();\n         _deliveryMgr.processAsync(_asyncDelivery);\n     }\n-    \n-    /**\n-     * @return MBean object associated with this Queue\n-     */\n+\n+    /** @return MBean object associated with this Queue */\n     public ManagedObject getManagedObject()\n     {\n         return _managedObject;\n@@ -422,41 +387,37 @@ public void setMaximumQueueDepth(long value)\n     public long getOldestMessageArrivalTime()\n     {\n         return _deliveryMgr.getOldestMessageArrival();\n-        \n+\n     }\n \n-    /**\n-     * Removes the AMQMessage from the top of the queue.\n-     */\n+    /** Removes the AMQMessage from the top of the queue. */\n     public synchronized void deleteMessageFromTop(StoreContext storeContext) throws AMQException\n     {\n         _deliveryMgr.removeAMessageFromTop(storeContext);\n     }\n \n-    /**\n-     * removes all the messages from the queue.\n-     */\n+    /** removes all the messages from the queue. */\n     public synchronized long clearQueue(StoreContext storeContext) throws AMQException\n     {\n         return _deliveryMgr.clearAllMessages(storeContext);\n     }\n \n     public void bind(AMQShortString routingKey, FieldTable arguments, Exchange exchange) throws AMQException\n     {\n-        exchange.registerQueue(routingKey, this, arguments);        \n-        if(isDurable() && exchange.isDurable())\n+        exchange.registerQueue(routingKey, this, arguments);\n+        if (isDurable() && exchange.isDurable())\n         {\n-            _virtualHost.getMessageStore().bindQueue(exchange,routingKey,this,arguments);\n+            _virtualHost.getMessageStore().bindQueue(exchange, routingKey, this, arguments);\n         }\n         _bindings.addBinding(routingKey, arguments, exchange);\n     }\n \n     public void unBind(AMQShortString routingKey, FieldTable arguments, Exchange exchange) throws AMQException\n     {\n         exchange.deregisterQueue(routingKey, this, arguments);\n-        if(isDurable() && exchange.isDurable())\n+        if (isDurable() && exchange.isDurable())\n         {\n-            _virtualHost.getMessageStore().unbindQueue(exchange,routingKey,this,arguments);\n+            _virtualHost.getMessageStore().unbindQueue(exchange, routingKey, this, arguments);\n         }\n         _bindings.remove(routingKey, arguments, exchange);\n     }\n@@ -466,30 +427,31 @@ public void registerProtocolSession(AMQProtocolSession ps, int channel, AMQShort\n                                         FieldTable filters, boolean noLocal, boolean exclusive)\n             throws AMQException\n     {\n-        if(incrementSubscriberCount() > 1)\n+        if (incrementSubscriberCount() > 1)\n         {\n-            if(isExclusive())\n+            if (isExclusive())\n             {\n                 decrementSubscriberCount();\n                 throw EXISTING_EXCLUSIVE;\n             }\n-            else if(exclusive)\n+            else if (exclusive)\n             {\n                 decrementSubscriberCount();\n                 throw EXISTING_SUBSCRIPTION;\n             }\n \n         }\n-        else if(exclusive)\n+        else if (exclusive)\n         {\n             setExclusive(true);\n         }\n \n         debug(\"Registering protocol session {0} with channel {1} and consumer tag {2} with {3}\", ps, channel, consumerTag, this);\n \n-        Subscription subscription = _subscriptionFactory.createSubscription(channel, ps, consumerTag, acks, filters, noLocal);\n+        Subscription subscription = _subscriptionFactory.createSubscription(channel, ps, consumerTag, acks,\n+                                                                            filters, noLocal, this);\n \n-        if(subscription.hasFilters())\n+        if (subscription.hasFilters())\n         {\n             if (_deliveryMgr.hasQueuedMessages())\n             {\n@@ -537,10 +499,10 @@ public void unregisterProtocolSession(AMQProtocolSession ps, int channel, AMQSho\n                                    \" and protocol session key \" + ps.getKey() + \" not registered with queue \" + this);\n         }\n \n+        removedSubscription.close();\n         setExclusive(false);\n         decrementSubscriberCount();\n \n-\n         // if we are eligible for auto deletion, unregister from the queue registry\n         if (_autoDelete && _subscribers.isEmpty())\n         {\n@@ -583,13 +545,13 @@ else if (checkEmpty && _deliveryMgr.hasQueuedMessages())\n \n     public void delete() throws AMQException\n     {\n-        if(!_deleted.getAndSet(true))\n+        if (!_deleted.getAndSet(true))\n         {\n             _subscribers.queueDeleted(this);\n             _bindings.deregister();\n             _virtualHost.getQueueRegistry().unregisterQueue(_name);\n             _managedObject.unregister();\n-            for(Task task : _deleteTaskList)\n+            for (Task task : _deleteTaskList)\n             {\n                 task.doTask(this);\n             }\n@@ -605,7 +567,8 @@ protected void autodelete() throws AMQException\n \n     public void processGet(StoreContext storeContext, AMQMessage msg) throws AMQException\n     {\n-        _deliveryMgr.deliver(storeContext, getName(), msg);\n+        //fixme not sure what this is doing. should we be passing deliverFirst through here?\n+        _deliveryMgr.deliver(storeContext, getName(), msg, false);\n         try\n         {\n             msg.checkDeliveredToConsumer();\n@@ -620,9 +583,9 @@ public void processGet(StoreContext storeContext, AMQMessage msg) throws AMQExce\n     }\n \n \n-    public void process(StoreContext storeContext, AMQMessage msg) throws AMQException\n+    public void process(StoreContext storeContext, AMQMessage msg, boolean deliverFirst) throws AMQException\n     {\n-        _deliveryMgr.deliver(storeContext, getName(), msg);\n+        _deliveryMgr.deliver(storeContext, getName(), msg, deliverFirst);\n         try\n         {\n             msg.checkDeliveredToConsumer();\n@@ -731,7 +694,7 @@ public VirtualHost getVirtualHost()\n \n     public static interface Task\n     {\n-        public void doTask(AMQQueue queue) throws AMQException;        \n+        public void doTask(AMQQueue queue) throws AMQException;\n     }\n \n     public void addQueueDeleteTask(Task task)\n@@ -759,4 +722,8 @@ public void setMaximumMessageAge(long maximumMessageAge)\n         _maximumMessageAge = maximumMessageAge;\n     }\n \n+    public void subscriberHasPendingResend(boolean hasContent, SubscriptionImpl subscription, AMQMessage msg)\n+    {\n+        _deliveryMgr.subscriberHasPendingResend(hasContent, subscription, msg);\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQQueue.java",
                "sha": "429829e201dc2c499351cce29fb6fda94b45f1cc",
                "status": "modified"
            },
            {
                "additions": 224,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java",
                "changes": 322,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 98,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java",
                "patch": "@@ -24,9 +24,14 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Queue;\n+import java.util.Set;\n+import java.util.Collections;\n+import java.util.HashSet;\n import java.util.concurrent.Executor;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.locks.ReentrantLock;\n \n import org.apache.log4j.Logger;\n@@ -38,60 +43,49 @@\n import org.apache.qpid.server.configuration.Configurator;\n import org.apache.qpid.server.protocol.AMQProtocolSession;\n import org.apache.qpid.server.store.StoreContext;\n+import org.apache.qpid.util.MessageQueue;\n+import org.apache.qpid.util.ConcurrentLinkedMessageQueueAtomicSize;\n import org.apache.qpid.util.ConcurrentLinkedQueueAtomicSize;\n \n \n-/**\n- * Manages delivery of messages on behalf of a queue\n- */\n+/** Manages delivery of messages on behalf of a queue */\n public class ConcurrentSelectorDeliveryManager implements DeliveryManager\n {\n     private static final Logger _log = Logger.getLogger(ConcurrentSelectorDeliveryManager.class);\n \n     @Configured(path = \"advanced.compressBufferOnQueue\",\n                 defaultValue = \"false\")\n     public boolean compressBufferOnQueue;\n-    /**\n-     * Holds any queued messages\n-     */\n-    private final Queue<AMQMessage> _messages = new ConcurrentLinkedQueueAtomicSize<AMQMessage>();\n-\n-    private final ReentrantLock _messageAccessLock = new ReentrantLock();\n+    /** Holds any queued messages */\n+    private final MessageQueue<AMQMessage> _messages = new ConcurrentLinkedMessageQueueAtomicSize<AMQMessage>();\n \n-    //private int _messageCount;\n-    /**\n-     * Ensures that only one asynchronous task is running for this manager at\n-     * any time.\n-     */\n+    /** Ensures that only one asynchronous task is running for this manager at any time. */\n     private final AtomicBoolean _processing = new AtomicBoolean();\n-    /**\n-     * The subscriptions on the queue to whom messages are delivered\n-     */\n+    /** The subscriptions on the queue to whom messages are delivered */\n     private final SubscriptionManager _subscriptions;\n \n     /**\n-     * A reference to the queue we are delivering messages for. We need this to be able\n-     * to pass the code that handles acknowledgements a handle on the queue.\n+     * A reference to the queue we are delivering messages for. We need this to be able to pass the code that handles\n+     * acknowledgements a handle on the queue.\n      */\n     private final AMQQueue _queue;\n \n     /**\n-     * Flag used while moving messages from this queue to another. For moving messages the async delivery\n-     * should also stop. This flat should be set to true to stop async delivery and set to false to enable\n-     * async delivery again.\n+     * Flag used while moving messages from this queue to another. For moving messages the async delivery should also\n+     * stop. This flat should be set to true to stop async delivery and set to false to enable async delivery again.\n      */\n     private AtomicBoolean _movingMessages = new AtomicBoolean();\n-    \n+\n     /**\n      * Lock used to ensure that an channel that becomes unsuspended during the start of the queueing process is forced\n-     * to wait till the first message is added to the queue. This will ensure that the _queue has messages to be delivered\n-     * via the async thread.\n-     * <p/>\n-     * Lock is used to control access to hasQueuedMessages() and over the addition of messages to the queue.\n+     * to wait till the first message is added to the queue. This will ensure that the _queue has messages to be\n+     * delivered via the async thread. <p/> Lock is used to control access to hasQueuedMessages() and over the addition\n+     * of messages to the queue.\n      */\n     private ReentrantLock _lock = new ReentrantLock();\n     private AtomicLong _totalMessageSize = new AtomicLong();\n-\n+    private AtomicInteger _extraMessages = new AtomicInteger();\n+    private Set<Subscription> _hasContent = Collections.synchronizedSet(new HashSet<Subscription>());\n \n     ConcurrentSelectorDeliveryManager(SubscriptionManager subscriptions, AMQQueue queue)\n     {\n@@ -109,7 +103,7 @@\n     }\n \n \n-    private boolean addMessageToQueue(AMQMessage msg)\n+    private boolean addMessageToQueue(AMQMessage msg, boolean deliverFirst)\n     {\n         // Shrink the ContentBodies to their actual size to save memory.\n         if (compressBufferOnQueue)\n@@ -122,7 +116,14 @@ private boolean addMessageToQueue(AMQMessage msg)\n             }\n         }\n \n-        _messages.offer(msg);\n+        if (deliverFirst)\n+        {\n+            _messages.pushHead(msg);\n+        }\n+        else\n+        {\n+            _messages.offer(msg);\n+        }\n \n         _totalMessageSize.addAndGet(msg.getSize());\n \n@@ -135,7 +136,7 @@ public boolean hasQueuedMessages()\n         _lock.lock();\n         try\n         {\n-            return !_messages.isEmpty();\n+            return !(_messages.isEmpty() && _hasContent.isEmpty());\n         }\n         finally\n         {\n@@ -149,18 +150,17 @@ public int getQueueMessageCount()\n     }\n \n     /**\n-     * This is an EXPENSIVE opperation to perform with a ConcurrentLinkedQueue as it must run the queue to determine size.\n-     * The ConcurrentLinkedQueueAtomicSize uses an AtomicInteger to record the number of elements on the queue.\n+     * This is an EXPENSIVE opperation to perform with a ConcurrentLinkedQueue as it must run the queue to determine\n+     * size. The ConcurrentLinkedQueueAtomicSize uses an AtomicInteger to record the number of elements on the queue.\n      *\n      * @return int the number of messages in the delivery queue.\n      */\n     private int getMessageCount()\n     {\n-        return _messages.size();\n+        return _messages.size() + _extraMessages.get();\n     }\n \n \n-\n     public long getTotalMessageSize()\n     {\n         return _totalMessageSize.get();\n@@ -172,6 +172,38 @@ public long getOldestMessageArrival()\n         return msg == null ? Long.MAX_VALUE : msg.getArrivalTime();\n     }\n \n+    public void subscriberHasPendingResend(boolean hasContent, Subscription subscription, AMQMessage msg)\n+    {\n+        _lock.lock();\n+        try\n+        {\n+            if (hasContent)\n+            {\n+                _log.debug(\"Queue has adding subscriber content\");\n+                _hasContent.add(subscription);\n+                _totalMessageSize.addAndGet(msg.getSize());\n+                _extraMessages.addAndGet(1);\n+            }\n+            else\n+            {\n+                _log.debug(\"Queue has removing subscriber content\");\n+                if (msg == null)\n+                {\n+                    _hasContent.remove(subscription);\n+                }\n+                else\n+                {\n+                    _totalMessageSize.addAndGet(-msg.getSize());\n+                    _extraMessages.addAndGet(-1);\n+                }\n+            }\n+        }\n+        finally\n+        {\n+            _lock.unlock();\n+        }\n+    }\n+\n \n     public List<AMQMessage> getMessages()\n     {\n@@ -195,15 +227,15 @@ public void populatePreDeliveryQueue(Subscription subscription)\n             AMQMessage message = currentQueue.next();\n             if (subscription.hasInterest(message))\n             {\n-                subscription.enqueueForPreDelivery(message);\n+                subscription.enqueueForPreDelivery(message, false);\n             }\n         }\n     }\n \n     public boolean performGet(AMQProtocolSession protocolSession, AMQChannel channel, boolean acks) throws AMQException\n     {\n         AMQMessage msg = getNextMessage();\n-        if(msg == null)\n+        if (msg == null)\n         {\n             return false;\n         }\n@@ -229,7 +261,7 @@ public boolean performGet(AMQProtocolSession protocolSession, AMQChannel channel\n                     }\n                     _queue.dequeue(channel.getStoreContext(), msg);\n                 }\n-                synchronized(channel)\n+                synchronized (channel)\n                 {\n                     long deliveryTag = channel.getNextDeliveryTag();\n \n@@ -252,8 +284,8 @@ public boolean performGet(AMQProtocolSession protocolSession, AMQChannel channel\n     }\n \n     /**\n-     * For feature of moving messages, this method is used. It sets the lock and sets the movingMessages flag,\n-     * so that the asyn delivery is also stopped.\n+     * For feature of moving messages, this method is used. It sets the lock and sets the movingMessages flag, so that\n+     * the asyn delivery is also stopped.\n      */\n     public void startMovingMessages()\n     {\n@@ -262,8 +294,8 @@ public void startMovingMessages()\n     }\n \n     /**\n-     * Once moving messages to another queue is done or aborted, remove lock and unset the movingMessages flag,\n-     * so that the async delivery can start again.\n+     * Once moving messages to another queue is done or aborted, remove lock and unset the movingMessages flag, so that\n+     * the async delivery can start again.\n      */\n     public void stopMovingMessages()\n     {\n@@ -276,6 +308,7 @@ public void stopMovingMessages()\n \n     /**\n      * Messages will be removed from this queue and all preDeliveryQueues\n+     *\n      * @param messageList\n      */\n     public void removeMovedMessages(List<AMQMessage> messageList)\n@@ -308,7 +341,9 @@ public void removeMovedMessages(List<AMQMessage> messageList)\n \n     /**\n      * Now with implementation of predelivery queues, this method will mark the message on the top as taken.\n+     *\n      * @param storeContext\n+     *\n      * @throws AMQException\n      */\n     public void removeAMessageFromTop(StoreContext storeContext) throws AMQException\n@@ -318,11 +353,11 @@ public void removeAMessageFromTop(StoreContext storeContext) throws AMQException\n         if (msg != null)\n         {\n             // mark this message as taken and get it removed\n-            msg.taken();\n+            msg.taken(null);\n             _queue.dequeue(storeContext, msg);\n             getNextMessage();\n         }\n-        \n+\n         _lock.unlock();\n     }\n \n@@ -335,7 +370,7 @@ public long clearAllMessages(StoreContext storeContext) throws AMQException\n         while (msg != null)\n         {\n             //mark this message as taken and get it removed\n-            msg.taken();\n+            msg.taken(null);\n             _queue.dequeue(storeContext, msg);\n             msg = getNextMessage();\n             count++;\n@@ -347,20 +382,15 @@ public long clearAllMessages(StoreContext storeContext) throws AMQException\n \n     public synchronized AMQMessage getNextMessage() throws AMQException\n     {\n-        return getNextMessage(_messages);\n+        return getNextMessage(_messages, null);\n     }\n \n-\n-    private AMQMessage getNextMessage(Queue<AMQMessage> messages)\n-    {\n-        return getNextMessage(messages, false);\n-    }\n-\n-    private AMQMessage getNextMessage(Queue<AMQMessage> messages, boolean browsing)\n+    private AMQMessage getNextMessage(Queue<AMQMessage> messages, Subscription sub)\n     {\n         AMQMessage message = messages.peek();\n \n-        while (message != null && (browsing || message.taken()))\n+\n+        while (message != null && ((sub == null || sub.isBrowser()) || message.taken(sub)))\n         {\n             //remove the already taken message\n             messages.poll();\n@@ -371,27 +401,76 @@ private AMQMessage getNextMessage(Queue<AMQMessage> messages, boolean browsing)\n         return message;\n     }\n \n-    public void sendNextMessage(Subscription sub, Queue<AMQMessage> messageQueue)\n+    public void sendNextMessage(Subscription sub, AMQQueue queue)//Queue<AMQMessage> messageQueue)\n     {\n+\n+        Queue<AMQMessage> messageQueue = sub.getNextQueue(_messages);\n+\n+        if (_log.isTraceEnabled())\n+        {\n+            _log.trace(\"Async sendNextMessage for sub (\" + System.identityHashCode(sub) +\n+                       \") from queue (\" + System.identityHashCode(messageQueue) +\n+                       \") AMQQueue (\" + System.identityHashCode(queue) + \")\");\n+        }\n+\n+        if (messageQueue == null)\n+        {\n+            // There is no queue with messages currently. This is ok... just means the queue has no msgs matching selector\n+            if (_log.isDebugEnabled())\n+            {\n+                _log.debug(sub + \": asked to send messages but has none on given queue:\" + queue);\n+            }\n+            return;\n+        }\n+\n         AMQMessage message = null;\n         try\n         {\n-            message = getNextMessage(messageQueue, sub.isBrowser());\n+            message = getNextMessage(messageQueue, sub);\n \n             // message will be null if we have no messages in the messageQueue.\n             if (message == null)\n             {\n+                if (_log.isTraceEnabled())\n+                {\n+                    _log.trace(\"No messages for Subscriber(\" + System.identityHashCode(sub) + \") from queue; (\" + System.identityHashCode(messageQueue) + \")\");\n+                }\n                 return;\n             }\n             if (_log.isDebugEnabled())\n             {\n-                _log.debug(\"Async Delivery Message:\" + message + \" to :\" + sub);\n+                _log.debug(\"Async Delivery Message (\" + System.identityHashCode(message) +\n+                           \") by :\" + System.identityHashCode(this) +\n+                           \") to :\" + System.identityHashCode(sub));\n             }\n \n             sub.send(message, _queue);\n \n             //remove sent message from our queue.\n             messageQueue.poll();\n+            //If we don't remove the message from _messages\n+            // Otherwise the Async send will never end\n+\n+            if (messageQueue == sub.getResendQueue())\n+            {\n+                if (_log.isTraceEnabled())\n+                {\n+                    _log.trace(\"All messages sent from resendQueue for \" + sub);\n+                }\n+                if (messageQueue.isEmpty())\n+                {\n+                    subscriberHasPendingResend(false, sub, null);\n+                    //better to use the above method as this keeps all the tracking in one location.\n+//                    _hasContent.remove(sub);\n+                }\n+\n+                _extraMessages.decrementAndGet();\n+            }\n+            else if (messageQueue == sub.getPreDeliveryQueue())\n+            {\n+                _log.info(\"We could do clean up of the main _message queue here\");\n+            }\n+\n             _totalMessageSize.addAndGet(-message.getSize());\n         }\n         catch (AMQException e)\n@@ -403,6 +482,7 @@ public void sendNextMessage(Subscription sub, Queue<AMQMessage> messageQueue)\n \n     /**\n      * enqueues the messages in the list on the queue and all required predelivery queues\n+     *\n      * @param storeContext\n      * @param movedMessageList\n      */\n@@ -411,7 +491,7 @@ public void enqueueMovedMessages(StoreContext storeContext, List<AMQMessage> mov\n         _lock.lock();\n         for (AMQMessage msg : movedMessageList)\n         {\n-            addMessageToQueue(msg);\n+            addMessageToQueue(msg, true);\n         }\n \n         // enqueue on the pre delivery queues\n@@ -422,16 +502,16 @@ public void enqueueMovedMessages(StoreContext storeContext, List<AMQMessage> mov\n                 // Only give the message to those that want them.\n                 if (sub.hasInterest(msg))\n                 {\n-                    sub.enqueueForPreDelivery(msg);\n+                    sub.enqueueForPreDelivery(msg, true);\n                 }\n             }\n         }\n         _lock.unlock();\n     }\n \n     /**\n-     * Only one thread should ever execute this method concurrently, but\n-     * it can do so while other threads invoke deliver().\n+     * Only one thread should ever execute this method concurrently, but it can do so while other threads invoke\n+     * deliver().\n      */\n     private void processQueue()\n     {\n@@ -444,40 +524,43 @@ private void processQueue()\n \n             for (Subscription sub : _subscriptions.getSubscriptions())\n             {\n-                if (!sub.isSuspended())\n+                synchronized (sub.getSendLock())\n                 {\n-                    sendNextMessage(sub);\n-\n-                    hasSubscribers = true;\n-                }\n-            }\n-        }\n-    }\n+                    if (!sub.isSuspended())\n+                    {\n+                        sendNextMessage(sub, _queue);\n \n-    private void sendNextMessage(Subscription sub)\n-    {\n-        if (sub.hasFilters())\n-        {\n-            sendNextMessage(sub, sub.getPreDeliveryQueue());\n-            if (sub.isAutoClose())\n-            {\n-                if (sub.getPreDeliveryQueue().isEmpty())\n-                {\n-                    sub.close();\n+                        hasSubscribers = true;\n+                    }\n                 }\n             }\n         }\n-        else\n-        {\n-            sendNextMessage(sub, _messages);\n-        }\n     }\n \n-    public void deliver(StoreContext context, AMQShortString name, AMQMessage msg) throws AMQException\n+//    private void sendNextMessage(Subscription sub)\n+//    {\n+//        if (sub.hasFilters())\n+//        {\n+//            sendNextMessage(sub, sub.getPreDeliveryQueue());\n+//            if (sub.isAutoClose())\n+//            {\n+//                if (sub.getPreDeliveryQueue().isEmpty())\n+//                {\n+//                    sub.close();\n+//                }\n+//            }\n+//        }\n+//        else\n+//        {\n+//            sendNextMessage(sub, _messages);\n+//        }\n+//    }\n+\n+    public void deliver(StoreContext context, AMQShortString name, AMQMessage msg, boolean deliverFirst) throws AMQException\n     {\n         if (_log.isDebugEnabled())\n         {\n-            _log.debug(id() + \"deliver :\" + msg);\n+            _log.debug(id() + \"deliver :first(\" + deliverFirst + \") :\" + msg);\n         }\n         msg.release();\n \n@@ -491,11 +574,11 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg) t\n             {\n                 if (_log.isDebugEnabled())\n                 {\n-                    _log.debug(id() + \"Testing Message(\" + msg + \") for Queued Delivery\");\n+                    _log.debug(id() + \"Testing Message(\" + msg + \") for Queued Delivery:\" + currentStatus());\n                 }\n                 if (!msg.getMessagePublishInfo().isImmediate())\n                 {\n-                    addMessageToQueue(msg);\n+                    addMessageToQueue(msg, deliverFirst);\n \n                     //release lock now message is on queue.\n                     _lock.unlock();\n@@ -504,7 +587,7 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg) t\n                     if (_log.isDebugEnabled())\n                     {\n                         _log.debug(id() + \"We have \" + _subscriptions.getSubscriptions().size() +\n-                                   \" subscribers to give the message to.\");\n+                                   \" subscribers to give the message to:\" + currentStatus());\n                     }\n                     for (Subscription sub : _subscriptions.getSubscriptions())\n                     {\n@@ -528,7 +611,7 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg) t\n                                 _log.debug(id() + \"Queuing message(\" + System.identityHashCode(msg) +\n                                            \") for PreDelivery for subscriber(\" + System.identityHashCode(sub) + \")\");\n                             }\n-                            sub.enqueueForPreDelivery(msg);\n+                            sub.enqueueForPreDelivery(msg, deliverFirst);\n                         }\n                     }\n                 }\n@@ -537,14 +620,47 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg) t\n             {\n                 //release lock now\n                 _lock.unlock();\n-\n-                if (_log.isDebugEnabled())\n+                synchronized (s.getSendLock())\n                 {\n-                    _log.debug(id() + \"Delivering Message:\" + System.identityHashCode(msg) + \" to(\" +\n-                               System.identityHashCode(s) + \") :\" + s);\n+                    if (!s.isSuspended())\n+                    {\n+                        if (_log.isDebugEnabled())\n+                        {\n+                            _log.debug(id() + \"Delivering Message:\" + System.identityHashCode(msg) + \" to(\" +\n+                                       System.identityHashCode(s) + \") :\" + s);\n+                        }\n+                        msg.taken(s);\n+                        //Deliver the message\n+                        s.send(msg, _queue);\n+                    }\n+                    else\n+                    {\n+                        if (_log.isDebugEnabled())\n+                        {\n+                            _log.debug(id() + \" Subscription(\" + System.identityHashCode(s) + \") became suspended between nextSubscriber and send\");\n+                        }\n+                    }\n+\n+                    if (!msg.isTaken())\n+                    {\n+                        if (_log.isDebugEnabled())\n+                        {\n+                            _log.debug(id() + \" Message(\" + System.identityHashCode(msg) + \") has not been taken so recursing!:\" +\n+                                       \" Subscriber:\" + System.identityHashCode(s));\n+                        }\n+\n+                        deliver(context, name, msg, deliverFirst);\n+                    }\n+                    else\n+                    {\n+                        if (_log.isDebugEnabled())\n+                        {\n+                            _log.debug(id() + \" Message(\" + System.identityHashCode(msg) +\n+                                       \") has been taken so disregarding deliver request to Subscriber:\" +\n+                                       System.identityHashCode(s));\n+                        }\n+                    }\n                 }\n-                //Deliver the message\n-                s.send(msg, _queue);\n             }\n         }\n         finally\n@@ -593,9 +709,7 @@ public void processAsync(Executor executor)\n     {\n         if (_log.isDebugEnabled())\n         {\n-            _log.debug(\"Processing Async. Queued:\" + hasQueuedMessages() + \"(\" + getQueueMessageCount() + \")\" +\n-                       \" Active:\" + _subscriptions.hasActiveSubscribers() +\n-                       \" Processing:\" + _processing.get());\n+            _log.debug(\"Processing Async.\" + currentStatus());\n         }\n \n         if (hasQueuedMessages() && _subscriptions.hasActiveSubscribers())\n@@ -608,4 +722,16 @@ public void processAsync(Executor executor)\n         }\n     }\n \n+    private String currentStatus()\n+    {\n+        return \" Queued:\" + (_messages.isEmpty() ? \"Empty \" : \"Contains\") +\n+               \"(\" + _messages.size() + \":\" + ((ConcurrentLinkedQueue) _messages).size() + \") \" +\n+               \" Extra: \" + (_hasContent.isEmpty() ? \"Empty \" : \"Contains\") +\n+               \"(\" + _hasContent.size() + \":\" + _extraMessages.get() + \") \" +\n+               \" Active:\" + _subscriptions.hasActiveSubscribers() +\n+               \" Processing:\" + _processing.get() +\n+               \" Queued:\" + (_messages.isEmpty() ? \"Empty \" : \"Contains\") +\n+               \"(\" + _messages.size() + \":\" + ((ConcurrentLinkedQueue) _messages).size() + \") \";\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java",
                "sha": "208a59516ca1b5cfaf486e657cb187313bfc05b9",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/DeliveryManager.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/DeliveryManager.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 17,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/queue/DeliveryManager.java",
                "patch": "@@ -32,8 +32,8 @@\n interface DeliveryManager\n {\n     /**\n-     * Determines whether there are queued messages. Sets _queueing to false if\n-     * there are no queued messages. This needs to be atomic.\n+     * Determines whether there are queued messages. Sets _queueing to false if there are no queued messages. This needs\n+     * to be atomic.\n      *\n      * @return true if there are queued messages\n      */\n@@ -43,34 +43,34 @@\n      * This method should not be used to determin if there are messages in the queue.\n      *\n      * @return int The number of messages in the queue\n+     *\n      * @use hasQueuedMessages() for all controls relating to having messages on the queue.\n      */\n     int getQueueMessageCount();\n \n     /**\n-     * Requests that the delivery manager start processing the queue asynchronously\n-     * if there is work that can be done (i.e. there are messages queued up and\n-     * subscribers that can receive them.\n-     * <p/>\n-     * This should be called when subscribers are added, but only after the consume-ok\n-     * message has been returned as message delivery may start immediately. It should also\n-     * be called after unsuspending a client.\n-     * <p/>\n+     * Requests that the delivery manager start processing the queue asynchronously if there is work that can be done\n+     * (i.e. there are messages queued up and subscribers that can receive them. <p/> This should be called when\n+     * subscribers are added, but only after the consume-ok message has been returned as message delivery may start\n+     * immediately. It should also be called after unsuspending a client. <p/>\n      *\n      * @param executor the executor on which the delivery should take place\n      */\n     void processAsync(Executor executor);\n \n     /**\n-     * Handles message delivery. The delivery manager is always in one of two modes;\n-     * it is either queueing messages for asynchronous delivery or delivering\n-     * directly.\n+     * Handles message delivery. The delivery manager is always in one of two modes; it is either queueing messages for\n+     * asynchronous delivery or delivering directly.\n+     *\n+     * @param storeContext\n+     * @param name         the name of the entity on whose behalf we are delivering the message\n+     * @param msg          the message to deliver\n+     * @param deliverFirst\n      *\n-     * @param name the name of the entity on whose behalf we are delivering the message\n-     * @param msg  the message to deliver\n-     * @throws org.apache.qpid.server.queue.FailedDequeueException if the message could not be dequeued\n+     * @throws org.apache.qpid.server.queue.FailedDequeueException\n+     *          if the message could not be dequeued\n      */\n-    void deliver(StoreContext storeContext, AMQShortString name, AMQMessage msg) throws FailedDequeueException, AMQException;\n+    void deliver(StoreContext storeContext, AMQShortString name, AMQMessage msg, boolean deliverFirst) throws FailedDequeueException, AMQException;\n \n     void removeAMessageFromTop(StoreContext storeContext) throws AMQException;\n \n@@ -93,4 +93,6 @@\n     long getTotalMessageSize();\n \n     long getOldestMessageArrival();\n+\n+    void subscriberHasPendingResend(boolean hasContent, Subscription subscription, AMQMessage msg);\n }",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/DeliveryManager.java",
                "sha": "5b77951dfdd3472c2930ce9a81dfce6416d68bda",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/Subscription.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/Subscription.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/queue/Subscription.java",
                "patch": "@@ -38,13 +38,23 @@\n \n     Queue<AMQMessage> getPreDeliveryQueue();\n \n-    void enqueueForPreDelivery(AMQMessage msg);\n+    Queue<AMQMessage> getResendQueue();\n+\n+    Queue<AMQMessage> getNextQueue(Queue<AMQMessage> messages);    \n+\n+    void enqueueForPreDelivery(AMQMessage msg, boolean deliverFirst);\n \n     boolean isAutoClose();\n \n     void close();\n \n+    boolean isClosed();\n+\n     boolean isBrowser();\n \n     boolean wouldSuspend(AMQMessage msg);\n+\n+    void addToResendQueue(AMQMessage msg);\n+\n+    Object getSendLock();\n }",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/Subscription.java",
                "sha": "e9f209839a361fb1225bb479b4ba160a5be3bbad",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionFactory.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionFactory.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 4,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionFactory.java",
                "patch": "@@ -26,16 +26,16 @@\n import org.apache.qpid.server.protocol.AMQProtocolSession;\n \n /**\n- * Allows the customisation of the creation of a subscription. This is typically done within an AMQQueue. This\n- * factory primarily assists testing although in future more sophisticated subscribers may need a different\n- * subscription implementation.\n+ * Allows the customisation of the creation of a subscription. This is typically done within an AMQQueue. This factory\n+ * primarily assists testing although in future more sophisticated subscribers may need a different subscription\n+ * implementation.\n  *\n  * @see org.apache.qpid.server.queue.AMQQueue\n  */\n public interface SubscriptionFactory\n {\n     Subscription createSubscription(int channel, AMQProtocolSession protocolSession, AMQShortString consumerTag, boolean acks,\n-                                    FieldTable filters, boolean noLocal) throws AMQException;\n+                                    FieldTable filters, boolean noLocal, AMQQueue queue) throws AMQException;\n \n \n     Subscription createSubscription(int channel, AMQProtocolSession protocolSession, AMQShortString consumerTag)",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionFactory.java",
                "sha": "917f7c4e97c6e38b9d0354f55124125e2eac0d29",
                "status": "modified"
            },
            {
                "additions": 205,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java",
                "changes": 232,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 27,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java",
                "patch": "@@ -21,10 +21,10 @@\n package org.apache.qpid.server.queue;\n \n import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.apache.log4j.Logger;\n import org.apache.qpid.AMQException;\n-import org.apache.qpid.AMQChannelException;\n import org.apache.qpid.protocol.AMQConstant;\n import org.apache.qpid.common.AMQPFilterTypes;\n import org.apache.qpid.common.ClientProperties;\n@@ -37,6 +37,8 @@\n import org.apache.qpid.server.protocol.AMQProtocolSession;\n import org.apache.qpid.server.store.StoreContext;\n import org.apache.qpid.util.ConcurrentLinkedQueueAtomicSize;\n+import org.apache.qpid.util.MessageQueue;\n+import org.apache.qpid.util.ConcurrentLinkedMessageQueueAtomicSize;\n \n /**\n  * Encapsulation of a supscription to a queue. <p/> Ties together the protocol session of a subscriber, the consumer tag\n@@ -52,9 +54,11 @@\n \n     public final AMQShortString consumerTag;\n \n-    private final Object sessionKey;\n+    private final Object _sessionKey;\n \n-    private Queue<AMQMessage> _messages;\n+    private MessageQueue<AMQMessage> _messages;\n+\n+    private Queue<AMQMessage> _resendQueue;\n \n     private final boolean _noLocal;\n \n@@ -63,46 +67,55 @@\n     private FilterManager _filters;\n     private final boolean _isBrowser;\n     private final Boolean _autoClose;\n-    private boolean _closed = false;\n+    private boolean _sentClose = false;\n+\n     private static final String CLIENT_PROPERTIES_INSTANCE = ClientProperties.instance.toString();\n \n+    private AMQQueue _queue;\n+    private final AtomicBoolean _sendLock = new AtomicBoolean(false);\n+\n+\n     public static class Factory implements SubscriptionFactory\n     {\n-        public Subscription createSubscription(int channel, AMQProtocolSession protocolSession, AMQShortString consumerTag, boolean acks, FieldTable filters, boolean noLocal) throws AMQException\n+        public Subscription createSubscription(int channel, AMQProtocolSession protocolSession,\n+                                               AMQShortString consumerTag, boolean acks, FieldTable filters,\n+                                               boolean noLocal, AMQQueue queue) throws AMQException\n         {\n-            return new SubscriptionImpl(channel, protocolSession, consumerTag, acks, filters, noLocal);\n+            return new SubscriptionImpl(channel, protocolSession, consumerTag, acks, filters, noLocal, queue);\n         }\n \n         public SubscriptionImpl createSubscription(int channel, AMQProtocolSession protocolSession, AMQShortString consumerTag)\n                 throws AMQException\n         {\n-            return new SubscriptionImpl(channel, protocolSession, consumerTag, false, null, false);\n+            return new SubscriptionImpl(channel, protocolSession, consumerTag, false, null, false, null);\n         }\n     }\n \n     public SubscriptionImpl(int channelId, AMQProtocolSession protocolSession,\n                             AMQShortString consumerTag, boolean acks)\n             throws AMQException\n     {\n-        this(channelId, protocolSession, consumerTag, acks, null, false);\n+        this(channelId, protocolSession, consumerTag, acks, null, false, null);\n     }\n \n     public SubscriptionImpl(int channelId, AMQProtocolSession protocolSession,\n-                            AMQShortString consumerTag, boolean acks, FieldTable filters, boolean noLocal)\n+                            AMQShortString consumerTag, boolean acks, FieldTable filters,\n+                            boolean noLocal, AMQQueue queue)\n             throws AMQException\n     {\n         AMQChannel channel = protocolSession.getChannel(channelId);\n         if (channel == null)\n-        {            \n+        {\n             throw new AMQException(AMQConstant.NOT_FOUND, \"channel :\" + channelId + \" not found in protocol session\");\n         }\n \n         this.channel = channel;\n         this.protocolSession = protocolSession;\n         this.consumerTag = consumerTag;\n-        sessionKey = protocolSession.getKey();\n+        _sessionKey = protocolSession.getKey();\n         _acks = acks;\n         _noLocal = noLocal;\n+        _queue = queue;\n \n         _filters = FilterManagerFactory.createManager(filters);\n \n@@ -145,9 +158,7 @@ public SubscriptionImpl(int channelId, AMQProtocolSession protocolSession,\n \n         if (_filters != null)\n         {\n-            _messages = new ConcurrentLinkedQueueAtomicSize<AMQMessage>();\n-\n-\n+            _messages = new ConcurrentLinkedMessageQueueAtomicSize<AMQMessage>();\n         }\n         else\n         {\n@@ -169,30 +180,47 @@ public boolean equals(Object o)\n         return (o instanceof SubscriptionImpl) && equals((SubscriptionImpl) o);\n     }\n \n-    /** Equality holds if the session matches and the channel and consumer tag are the same. */\n+    /**\n+     * Equality holds if the session matches and the channel and consumer tag are the same.\n+     *\n+     * @param psc The subscriptionImpl to compare\n+     *\n+     * @return equality\n+     */\n     private boolean equals(SubscriptionImpl psc)\n     {\n-        return sessionKey.equals(psc.sessionKey)\n+        return _sessionKey.equals(psc._sessionKey)\n                && psc.channel == channel\n                && psc.consumerTag.equals(consumerTag);\n     }\n \n     public int hashCode()\n     {\n-        return sessionKey.hashCode();\n+        return _sessionKey.hashCode();\n     }\n \n     public String toString()\n     {\n-        return \"[channel=\" + channel + \", consumerTag=\" + consumerTag + \", session=\" + protocolSession.getKey() + \"]\";\n+        String subscriber = \"[channel=\" + channel +\n+                            \", consumerTag=\" + consumerTag +\n+                            \", session=\" + protocolSession.getKey() +\n+                            \", resendQueue=\" + (_resendQueue != null);\n+\n+        if (_resendQueue != null)\n+        {\n+            subscriber += \", resendSize=\" + _resendQueue.size();\n+        }\n+\n+\n+        return subscriber + \"]\";\n     }\n \n     /**\n      * This method can be called by each of the publisher threads. As a result all changes to the channel object must be\n      * thread safe.\n      *\n-     * @param msg\n-     * @param queue\n+     * @param msg   The message to send\n+     * @param queue the Queue it has been sent from\n      *\n      * @throws AMQException\n      */\n@@ -278,7 +306,18 @@ private void sendToConsumer(StoreContext storeContext, AMQMessage msg, AMQQueue\n \n     public boolean isSuspended()\n     {\n-        return channel.isSuspended();\n+        if (_logger.isTraceEnabled())\n+        {\n+            if (channel.isSuspended())\n+            {\n+                _logger.trace(\"Subscription(\" + System.identityHashCode(this) + \") channel's is susupended\");\n+            }\n+            if (_sendLock.get())\n+            {\n+                _logger.trace(\"Subscription(\" + System.identityHashCode(this) + \") has sendLock set so closing.\");\n+            }\n+        }\n+        return channel.isSuspended() || _sendLock.get();\n     }\n \n     /**\n@@ -376,11 +415,18 @@ private boolean checkFilters(AMQMessage msg)\n         return _messages;\n     }\n \n-    public void enqueueForPreDelivery(AMQMessage msg)\n+    public void enqueueForPreDelivery(AMQMessage msg, boolean deliverFirst)\n     {\n         if (_messages != null)\n         {\n-            _messages.offer(msg);\n+            if (deliverFirst)\n+            {\n+                _messages.pushHead(msg);\n+            }\n+            else\n+            {\n+                _messages.offer(msg);\n+            }\n         }\n     }\n \n@@ -391,19 +437,95 @@ public boolean isAutoClose()\n \n     public void close()\n     {\n-        if (!_closed)\n+        synchronized (_sendLock)\n+        {\n+            if (_logger.isDebugEnabled())\n+            {\n+                _logger.debug(\"Setting SendLock true\");\n+            }\n+\n+            _sendLock.set(true);\n+\n+        }\n+        if (_logger.isInfoEnabled())\n+        {\n+            _logger.info(\"Closing subscription (\" + System.identityHashCode(this) + \"):\" + this);\n+        }\n+\n+        if (_resendQueue != null && !_resendQueue.isEmpty())\n+        {\n+            requeue();\n+        }\n+\n+        //remove references in PDQ\n+        if (_messages != null)\n+        {\n+            _messages.clear();\n+        }\n+\n+        if (_autoClose && !_sentClose)\n         {\n             _logger.info(\"Closing autoclose subscription:\" + this);\n             // AMQP version change: Hardwire the version to 0-8 (major=8, minor=0)\n             // TODO: Connect this to the session version obtained from ProtocolInitiation for this session.\n             // Be aware of possible changes to parameter order as versions change.\n             protocolSession.writeFrame(BasicCancelOkBody.createAMQFrame(channel.getChannelId(),\n-                                                                        protocolSession.getProtocolMajorVersion(),\n-                                                                        protocolSession.getProtocolMinorVersion(),\n+                                                                        (byte) 8, (byte) 0,    // AMQP version (major, minor)\n                                                                         consumerTag    // consumerTag\n             ));\n-            _closed = true;\n+            _sentClose = true;\n+        }\n+    }\n+\n+    private void requeue()\n+    {\n+        if (_queue != null)\n+        {\n+            if (_logger.isDebugEnabled())\n+            {\n+                _logger.debug(\"Requeuing :\" + _resendQueue.size() + \" messages\");\n+            }\n+\n+            while (!_resendQueue.isEmpty())\n+            {\n+                AMQMessage resent = _resendQueue.poll();\n+\n+                resent.release();\n+                _queue.subscriberHasPendingResend(false, this, resent);\n+\n+                try\n+                {\n+                    channel.getTransactionalContext().deliver(resent, _queue, true);\n+                }\n+                catch (AMQException e)\n+                {\n+                    _logger.error(\"Unable to re-deliver messages\", e);\n+                }\n+            }\n+\n+            if (!_resendQueue.isEmpty())\n+            {\n+                _logger.error(\"[MESSAGES LOST]Unable to re-deliver messages as queue is null.\");\n+            }\n+\n+            _queue.subscriberHasPendingResend(false, this, null);\n         }\n+        else\n+        {\n+            if (!_resendQueue.isEmpty())\n+            {\n+                _logger.error(\"Unable to re-deliver messages as queue is null.\");\n+            }\n+        }\n+\n+        // Clear the messages\n+        _resendQueue = null;\n+    }\n+\n+\n+    public boolean isClosed()\n+    {\n+        return _sendLock.get(); // This rather than _close is used to signify the subscriber is now closed.\n     }\n \n     public boolean isBrowser()\n@@ -416,5 +538,61 @@ public boolean wouldSuspend(AMQMessage msg)\n         return channel.wouldSuspend(msg);\n     }\n \n+    public Queue<AMQMessage> getResendQueue()\n+    {\n+        if (_resendQueue == null)\n+        {\n+            _resendQueue = new ConcurrentLinkedQueueAtomicSize<AMQMessage>();\n+        }\n+        return _resendQueue;\n+    }\n+\n+\n+    public Queue<AMQMessage> getNextQueue(Queue<AMQMessage> messages)\n+    {\n+        if (_resendQueue != null && !_resendQueue.isEmpty())\n+        {\n+            return _resendQueue;\n+        }\n+\n+        if (_filters != null)\n+        {\n+            if (isAutoClose())\n+            {\n+                if (_messages.isEmpty())\n+                {\n+                    close();\n+                    return null;\n+                }\n+            }\n+            return _messages;\n+        }\n+        else // we want the DM queue\n+        {\n+            return messages;\n+        }\n+    }\n+\n+    public void addToResendQueue(AMQMessage msg)\n+    {\n+        // add to our resend queue\n+        getResendQueue().add(msg);\n+\n+        // Mark Queue has having content.\n+        if (_queue == null)\n+        {\n+            _logger.error(\"Queue is null won't be able to resend messages\");\n+        }\n+        else\n+        {\n+            _queue.subscriberHasPendingResend(true, this, msg);\n+        }\n+    }\n+\n+    public Object getSendLock()\n+    {\n+        return _sendLock;\n+    }\n+\n \n }",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java",
                "sha": "ede7731a06174a9b9b69cfe4e63ef00e9fda4f1c",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionSet.java",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionSet.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 30,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionSet.java",
                "patch": "@@ -27,49 +27,64 @@\n import org.apache.log4j.Logger;\n import org.apache.qpid.AMQException;\n \n-/**\n- * Holds a set of subscriptions for a queue and manages the round\n- * robin-ing of deliver etc.\n- */\n+/** Holds a set of subscriptions for a queue and manages the round robin-ing of deliver etc. */\n class SubscriptionSet implements WeightedSubscriptionManager\n {\n     private static final Logger _log = Logger.getLogger(SubscriptionSet.class);\n \n-    /**\n-     * List of registered subscribers\n-     */\n+    /** List of registered subscribers */\n     private List<Subscription> _subscriptions = new CopyOnWriteArrayList<Subscription>();\n \n-    /**\n-     * Used to control the round robin delivery of content\n-     */\n+    /** Used to control the round robin delivery of content */\n     private int _currentSubscriber;\n+    private final Object _subscriptionsChange = new Object();\n \n-    /**\n-     * Accessor for unit tests.\n-     */\n+\n+    /** Accessor for unit tests. */\n     int getCurrentSubscriber()\n     {\n         return _currentSubscriber;\n     }\n \n     public void addSubscriber(Subscription subscription)\n     {\n-        _subscriptions.add(subscription);\n+        synchronized (_subscriptionsChange)\n+        {\n+            _subscriptions.add(subscription);\n+        }\n     }\n \n     /**\n      * Remove the subscription, returning it if it was found\n      *\n      * @param subscription\n+     *\n      * @return null if no match was found\n      */\n     public Subscription removeSubscriber(Subscription subscription)\n     {\n-        boolean isRemoved = _subscriptions.remove(subscription); // TODO: possibly need O(1) operation here.\n-        if (isRemoved)\n+        // TODO: possibly need O(1) operation here.\n+\n+        Subscription sub = null;\n+        synchronized (_subscriptionsChange)\n         {\n-            return subscription;\n+            int subIndex = _subscriptions.indexOf(subscription);\n+\n+            if (subIndex != -1)\n+            {\n+                //we can't just return the passed in subscription as it is a new object\n+                // and doesn't contain the stored state we need.\n+                //NOTE while this may be removed now anyone with an iterator will still have it in the list!!\n+                sub = _subscriptions.remove(subIndex);\n+            }\n+            else\n+            {\n+                _log.error(\"Unable to remove from index(\" + subIndex + \")subscription:\" + subscription);\n+            }\n+        }\n+        if (sub != null)\n+        {\n+            return sub;\n         }\n         else\n         {\n@@ -92,14 +107,11 @@ private void debugDumpSubscription(Subscription subscription)\n     }\n \n     /**\n-     * Return the next unsuspended subscription or null if not found.\n-     * <p/>\n-     * Performance note:\n-     * This method can scan all items twice when looking for a subscription that is not\n-     * suspended. The worst case occcurs when all subscriptions are suspended. However, it is does this\n-     * without synchronisation and subscriptions may be added and removed concurrently. Also note that because of\n-     * race conditions and when subscriptions are removed between calls to nextSubscriber, the\n-     * IndexOutOfBoundsException also causes the scan to start at the beginning.\n+     * Return the next unsuspended subscription or null if not found. <p/> Performance note: This method can scan all\n+     * items twice when looking for a subscription that is not suspended. The worst case occcurs when all subscriptions\n+     * are suspended. However, it is does this without synchronisation and subscriptions may be added and removed\n+     * concurrently. Also note that because of race conditions and when subscriptions are removed between calls to\n+     * nextSubscriber, the IndexOutOfBoundsException also causes the scan to start at the beginning.\n      */\n     public Subscription nextSubscriber(AMQMessage msg)\n     {\n@@ -156,9 +168,7 @@ private Subscription nextSubscriberImpl(AMQMessage msg)\n         return null;\n     }\n \n-    /**\n-     * Overridden in test classes.\n-     */\n+    /** Overridden in test classes. */\n     protected void subscriberScanned()\n     {\n     }\n@@ -199,8 +209,8 @@ public int getWeight()\n     }\n \n     /**\n-     * Notification that a queue has been deleted. This is called so that the subscription can inform the\n-     * channel, which in turn can update its list of unacknowledged messages.\n+     * Notification that a queue has been deleted. This is called so that the subscription can inform the channel, which\n+     * in turn can update its list of unacknowledged messages.\n      *\n      * @param queue\n      */",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionSet.java",
                "sha": "26b040aae03a03c88f6c143c519c2f1e45b17c61",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/state/AMQStateManager.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/state/AMQStateManager.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/state/AMQStateManager.java",
                "patch": "@@ -55,6 +55,7 @@\n import org.apache.qpid.framing.TxCommitBody;\n import org.apache.qpid.framing.TxRollbackBody;\n import org.apache.qpid.framing.TxSelectBody;\n+import org.apache.qpid.framing.BasicRejectBody;\n import org.apache.qpid.protocol.AMQMethodEvent;\n import org.apache.qpid.protocol.AMQMethodListener;\n import org.apache.qpid.server.handler.BasicAckMethodHandler;\n@@ -82,8 +83,9 @@\n import org.apache.qpid.server.handler.QueueDeleteHandler;\n import org.apache.qpid.server.handler.QueuePurgeHandler;\n import org.apache.qpid.server.handler.TxCommitHandler;\n-import org.apache.qpid.server.handler.TxRollbackHandler;\n+import org.apache.qpid.server.handler.BasicRejectMethodHandler;\n import org.apache.qpid.server.handler.TxSelectHandler;\n+import org.apache.qpid.server.handler.TxRollbackHandler;\n import org.apache.qpid.server.protocol.AMQProtocolSession;\n import org.apache.qpid.server.virtualhost.VirtualHostRegistry;\n \n@@ -173,6 +175,7 @@ protected void registerListeners()\n         frame2handlerMap.put(TxSelectBody.class, TxSelectHandler.getInstance());\n         frame2handlerMap.put(TxCommitBody.class, TxCommitHandler.getInstance());\n         frame2handlerMap.put(TxRollbackBody.class, TxRollbackHandler.getInstance());\n+        frame2handlerMap.put(BasicRejectBody.class, BasicRejectMethodHandler.getInstance());\n \n         _state2HandlersMap.put(AMQState.CONNECTION_OPEN, frame2handlerMap);\n ",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/state/AMQStateManager.java",
                "sha": "d12f5cd084246dc0a75009a2754b4015094d42bf",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/qpid/blob/c3b7f29e97cbcd5b44a0dc5efcfd439e9427eac8/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/DeliverMessageOperation.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/DeliverMessageOperation.java?ref=c3b7f29e97cbcd5b44a0dc5efcfd439e9427eac8",
                "deletions": 74,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/txn/DeliverMessageOperation.java",
                "patch": "@@ -1,74 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.txn;\n-\n-import org.apache.log4j.Logger;\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.server.queue.AMQMessage;\n-import org.apache.qpid.server.queue.AMQQueue;\n-import org.apache.qpid.server.store.StoreContext;\n-\n-/**\n- * @author Robert Greig (robert.j.greig@jpmorgan.com)\n- */\n-public class DeliverMessageOperation implements TxnOp\n-{\n-    private static final Logger _logger = Logger.getLogger(DeliverMessageOperation.class);\n-\n-    private final AMQMessage _msg;\n-\n-    private final AMQQueue _queue;\n-\n-    public DeliverMessageOperation(AMQMessage msg, AMQQueue queue)\n-    {\n-        _msg = msg;\n-        _queue = queue;\n-        _msg.incrementReference();\n-    }\n-\n-    public void prepare(StoreContext context) throws AMQException\n-    {\n-    }\n-\n-    public void undoPrepare()\n-    {\n-    }\n-\n-    public void commit(StoreContext context) throws AMQException\n-    {\n-        //do the memeory part of the record()\n-        _msg.incrementReference();\n-        //then process the message\n-        try\n-        {\n-            _queue.process(context, _msg);\n-        }\n-        catch (AMQException e)\n-        {\n-            //TODO: is there anything else we can do here? I think not...\n-            _logger.error(\"Error during commit of a queue delivery: \" + e, e);\n-        }\n-    }\n-\n-    public void rollback(StoreContext storeContext)\n-    {\n-    }\n-}",
                "raw_url": "https://github.com/apache/qpid/raw/c3b7f29e97cbcd5b44a0dc5efcfd439e9427eac8/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/DeliverMessageOperation.java",
                "sha": "4dff514ff4ebdcc261978d2e39f3d15ea04fc117",
                "status": "removed"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 7,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java",
                "patch": "@@ -31,9 +31,7 @@\n import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.store.StoreContext;\n \n-/**\n- * A transactional context that only supports local transactions.\n- */\n+/** A transactional context that only supports local transactions. */\n public class LocalTransactionalContext implements TransactionalContext\n {\n     private static final Logger _log = Logger.getLogger(LocalTransactionalContext.class);\n@@ -62,12 +60,14 @@\n     {\n         public AMQMessage message;\n         public AMQQueue queue;\n+        private boolean deliverFirst;\n \n \n-        public DeliveryDetails(AMQMessage message, AMQQueue queue)\n+        public DeliveryDetails(AMQMessage message, AMQQueue queue, boolean deliverFirst)\n         {\n             this.message = message;\n             this.queue = queue;\n+            this.deliverFirst = deliverFirst;\n         }\n     }\n \n@@ -89,9 +89,10 @@ public StoreContext getStoreContext()\n     public void rollback() throws AMQException\n     {\n         _txnBuffer.rollback(_storeContext);\n+        _postCommitDeliveryList.clear();\n     }\n \n-    public void deliver(AMQMessage message, AMQQueue queue) throws AMQException\n+    public void deliver(AMQMessage message, AMQQueue queue, boolean deliverFirst) throws AMQException\n     {\n         // A publication will result in the enlisting of several\n         // TxnOps. The first is an op that will store the message.\n@@ -100,7 +101,7 @@ public void deliver(AMQMessage message, AMQQueue queue) throws AMQException\n         // enqueued. Finally a cleanup op will be added to decrement\n         // the reference associated with the routing.\n         message.incrementReference();\n-        _postCommitDeliveryList.add(new DeliveryDetails(message, queue));\n+        _postCommitDeliveryList.add(new DeliveryDetails(message, queue, deliverFirst));\n         _messageDelivered = true;\n         /*_txnBuffer.enlist(new DeliverMessageOperation(message, queue));\n         if (_log.isDebugEnabled())\n@@ -225,7 +226,7 @@ private void postCommitDelivery() throws AMQException\n         {\n             for (DeliveryDetails dd : _postCommitDeliveryList)\n             {\n-                dd.queue.process(_storeContext, dd.message);\n+                dd.queue.process(_storeContext, dd.message, dd.deliverFirst);\n             }\n         }\n         finally",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java",
                "sha": "e5cce672f644c61dfa923e42812bc87aac0e68ce",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/NonTransactionalContext.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/NonTransactionalContext.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 14,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/txn/NonTransactionalContext.java",
                "patch": "@@ -34,21 +34,15 @@\n import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.store.StoreContext;\n \n-/**\n- * @author Apache Software Foundation\n- */\n+/** @author Apache Software Foundation */\n public class NonTransactionalContext implements TransactionalContext\n {\n     private static final Logger _log = Logger.getLogger(NonTransactionalContext.class);\n \n-    /**\n-     * Channel is useful for logging\n-     */\n+    /** Channel is useful for logging */\n     private final AMQChannel _channel;\n \n-    /**\n-     * Where to put undeliverable messages\n-     */\n+    /** Where to put undeliverable messages */\n     private final List<RequiredDeliveryException> _returnMessages;\n \n     private Set<Long> _browsedAcks;\n@@ -57,9 +51,7 @@\n \n     private StoreContext _storeContext;\n \n-    /**\n-     * Whether we are in a transaction\n-     */\n+    /** Whether we are in a transaction */\n     private boolean _inTran;\n \n     public NonTransactionalContext(MessageStore messageStore, StoreContext storeContext, AMQChannel channel,\n@@ -97,12 +89,12 @@ public void rollback() throws AMQException\n         // Does not apply to this context\n     }\n \n-    public void deliver(AMQMessage message, AMQQueue queue) throws AMQException\n+    public void deliver(AMQMessage message, AMQQueue queue, boolean deliverFirst) throws AMQException\n     {\n         try\n         {\n             message.incrementReference();\n-            queue.process(_storeContext, message);\n+            queue.process(_storeContext, message, deliverFirst);\n             //following check implements the functionality\n             //required by the 'immediate' flag:\n             message.checkDeliveredToConsumer();",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/NonTransactionalContext.java",
                "sha": "19146da22eecb47b4c87b6f6fa8756811d9018bb",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/TransactionalContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/TransactionalContext.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/txn/TransactionalContext.java",
                "patch": "@@ -38,7 +38,7 @@\n \n     void rollback() throws AMQException;\n \n-    void deliver(AMQMessage message, AMQQueue queue) throws AMQException;\n+    void deliver(AMQMessage message, AMQQueue queue, boolean deliverFirst) throws AMQException;\n \n     void acknowledgeMessage(long deliveryTag, long lastDeliveryTag, boolean multiple,\n                             UnacknowledgedMessageMap unacknowledgedMessageMap) throws AMQException;",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/TransactionalContext.java",
                "sha": "88451e2fca9f6a51eb4f46309172432b676db699",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/client/src/main/java/org/apache/qpid/client/AMQSession.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/AMQSession.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 20,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/AMQSession.java",
                "patch": "@@ -255,13 +255,16 @@ final boolean connectionStopped()\n             return _connectionStopped;\n         }\n \n-        void setConnectionStopped(boolean connectionStopped)\n+        boolean setConnectionStopped(boolean connectionStopped)\n         {\n+            boolean currently;\n             synchronized (_lock)\n             {\n+                currently = _connectionStopped;\n                 _connectionStopped = connectionStopped;\n                 _lock.notify();\n             }\n+            return currently;\n         }\n \n         private void dispatchMessage(UnprocessedMessage message)\n@@ -543,7 +546,7 @@ public void rollback() throws JMSException\n \n                 if (!isSuspended)\n                 {\n-//                    suspendChannel(true);\n+                    suspendChannel(true);\n                 }\n \n                 _connection.getProtocolHandler().syncWrite(\n@@ -556,7 +559,7 @@ public void rollback() throws JMSException\n \n                 if (!isSuspended)\n                 {\n-//                    suspendChannel(false);\n+                    suspendChannel(false);\n                 }\n             }\n             catch (AMQException e)\n@@ -822,10 +825,10 @@ public void recover() throws JMSException\n \n             boolean isSuspended = isSuspended();\n \n-//            if (!isSuspended)\n-//            {\n-//                suspendChannel(true);\n-//            }\n+            if (!isSuspended)\n+            {\n+                suspendChannel(true);\n+            }\n \n             for (BasicMessageConsumer consumer : _consumers.values())\n             {\n@@ -841,15 +844,15 @@ public void recover() throws JMSException\n                                                                                        false)    // requeue\n                     , BasicRecoverOkBody.class);\n \n-//            if (_dispatcher != null)\n-//            {\n-//                _dispatcher.rollback();\n-//            }\n-//\n-//            if (!isSuspended)\n-//            {\n-//                suspendChannel(false);\n-//            }\n+            if (_dispatcher != null)\n+            {\n+                _dispatcher.rollback();\n+            }\n+\n+            if (!isSuspended)\n+            {\n+                suspendChannel(false);\n+            }\n         }\n         catch (AMQException e)\n         {\n@@ -1952,7 +1955,7 @@ void deregisterConsumer(BasicMessageConsumer consumer)\n             if (_dispatcher == null)\n             {\n                 rejectMessagesForConsumerTag(consumer.getConsumerTag(), true);\n-            }\n+            }// if the dispatcher is running we have to do the clean up in the Ok Handler.\n         }\n     }\n \n@@ -2171,8 +2174,9 @@ private void rejectAllMessages(boolean requeue)\n         rejectMessagesForConsumerTag(null, requeue);\n     }\n \n-    /** @param consumerTag The consumerTag to prune from queue or all if null\n-     * @param requeue Should the removed messages be requeued (or discarded. Possibly to DLQ)\n+    /**\n+     * @param consumerTag The consumerTag to prune from queue or all if null\n+     * @param requeue     Should the removed messages be requeued (or discarded. Possibly to DLQ)\n      */\n \n     private void rejectMessagesForConsumerTag(AMQShortString consumerTag, boolean requeue)\n@@ -2192,7 +2196,7 @@ private void rejectMessagesForConsumerTag(AMQShortString consumerTag, boolean re\n \n                 messages.remove();\n \n-//                rejectMessage(message.getDeliverBody().deliveryTag, requeue);\n+                rejectMessage(message.getDeliverBody().deliveryTag, requeue);\n \n                 _logger.debug(\"Rejected the message(\" + message.getDeliverBody() + \") for consumer :\" + consumerTag);\n             }",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/client/src/main/java/org/apache/qpid/client/AMQSession.java",
                "sha": "89f596e5411053db4479886d724915a2d13a9894",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 4,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java",
                "patch": "@@ -745,28 +745,32 @@ public void rollback()\n             {\n                 _logger.debug(\"Rejecting the messages for consumer with tag:\" + _consumerTag);\n             }\n-            for (Object o : _synchronousQueue)\n+            Iterator iterator = _synchronousQueue.iterator();\n+            while (iterator.hasNext())\n             {\n+                Object o = iterator.next();\n+\n                 if (o instanceof AbstractJMSMessage)\n                 {\n-//                    _session.rejectMessage(((AbstractJMSMessage) o).getDeliveryTag(), true);\n+                    _session.rejectMessage(((AbstractJMSMessage) o).getDeliveryTag(), true);\n \n                     if (_logger.isTraceEnabled())\n                     {\n                         _logger.trace(\"Rejected message\" + o);\n+                        iterator.remove();\n                     }\n \n                 }\n                 else\n                 {\n                     _logger.error(\"Queue contained a :\" + o.getClass() +\n-                                 \" unable to reject as it is not an AbstractJMSMessage. Will be cleared\");\n+                                  \" unable to reject as it is not an AbstractJMSMessage. Will be cleared\");\n                 }\n             }\n \n             if (_synchronousQueue.size() != 0)\n             {\n-                _logger.warn(\"Queue was not empty after rejecting all messages\");\n+                _logger.warn(\"Queue was not empty after rejecting all messages Remaining:\" + _synchronousQueue.size());\n             }\n \n             _synchronousQueue.clear();",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java",
                "sha": "e9b914425aa8788fd31ee099f77f6a449db3495e",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 12,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java",
                "patch": "@@ -87,17 +87,17 @@ protected AbstractJMSMessage(long deliveryTag, BasicContentHeaderProperties cont\n         switch (contentType)\n         {\n \n-        case AMQDestination.QUEUE_TYPE:\n-            dest = new AMQQueue(exchange, routingKey, routingKey);\n-            break;\n+            case AMQDestination.QUEUE_TYPE:\n+                dest = new AMQQueue(exchange, routingKey, routingKey);\n+                break;\n \n-        case AMQDestination.TOPIC_TYPE:\n-            dest = new AMQTopic(exchange, routingKey, null);\n-            break;\n+            case AMQDestination.TOPIC_TYPE:\n+                dest = new AMQTopic(exchange, routingKey, null);\n+                break;\n \n-        default:\n-            dest = new AMQUndefinedDestination(exchange, routingKey, null);\n-            break;\n+            default:\n+                dest = new AMQUndefinedDestination(exchange, routingKey, null);\n+                break;\n         }\n         //Destination dest = AMQDestination.createDestination(url);\n         setJMSDestination(dest);\n@@ -203,7 +203,7 @@ public void setJMSReplyTo(Destination destination) throws JMSException\n         if (!(destination instanceof AMQDestination))\n         {\n             throw new IllegalArgumentException(\n-                \"ReplyTo destination may only be an AMQDestination - passed argument was type \" + destination.getClass());\n+                    \"ReplyTo destination may only be an AMQDestination - passed argument was type \" + destination.getClass());\n         }\n \n         final AMQDestination amqd = (AMQDestination) destination;\n@@ -495,8 +495,8 @@ public void acknowledge() throws JMSException\n     public abstract void clearBodyImpl() throws JMSException;\n \n     /**\n-     * Get a String representation of the body of the message. Used in the\n-     * toString() method which outputs this before message properties.\n+     * Get a String representation of the body of the message. Used in the toString() method which outputs this before\n+     * message properties.\n      */\n     public abstract String toBodyString() throws JMSException;\n \n@@ -519,7 +519,12 @@ public String toString()\n             buf.append(\"\\nJMS priority: \").append(getJMSPriority());\n             buf.append(\"\\nJMS delivery mode: \").append(getJMSDeliveryMode());\n             buf.append(\"\\nJMS reply to: \").append(String.valueOf(getJMSReplyTo()));\n+            buf.append(\"\\nJMS Redelivered: \").append(_redelivered);\n+            buf.append(\"\\nJMS Destination: \").append(getJMSDestination());\n+            buf.append(\"\\nJMS Type: \").append(getJMSType());\n+            buf.append(\"\\nJMS MessageID: \").append(getJMSMessageID());\n             buf.append(\"\\nAMQ message number: \").append(_deliveryTag);\n+\n             buf.append(\"\\nProperties:\");\n             if (getJmsHeaders().isEmpty())\n             {",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java",
                "sha": "36dd4d400cf6fa649c63ec758aebb400c4264e05",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 45,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java",
                "patch": "@@ -65,15 +65,12 @@\n     private static final Logger _logger = Logger.getLogger(AMQProtocolHandler.class);\n \n     /**\n-     * The connection that this protocol handler is associated with. There is a 1-1\n-     * mapping between connection instances and protocol handler instances.\n+     * The connection that this protocol handler is associated with. There is a 1-1 mapping between connection instances\n+     * and protocol handler instances.\n      */\n     private AMQConnection _connection;\n \n-    /**\n-     * Our wrapper for a protocol session that provides access to session values\n-     * in a typesafe manner.\n-     */\n+    /** Our wrapper for a protocol session that provides access to session values in a typesafe manner. */\n     private volatile AMQProtocolSession _protocolSession;\n \n     private AMQStateManager _stateManager = new AMQStateManager();\n@@ -120,8 +117,8 @@ public void sessionCreated(IoSession session) throws Exception\n         // we only add the SSL filter where we have an SSL connection\n         if (_connection.getSSLConfiguration() != null)\n         {\n-        \tSSLConfiguration sslConfig = _connection.getSSLConfiguration();\n-        \tSSLContextFactory sslFactory = new SSLContextFactory(sslConfig.getKeystorePath(), sslConfig.getKeystorePassword(), sslConfig.getCertType()); \n+            SSLConfiguration sslConfig = _connection.getSSLConfiguration();\n+            SSLContextFactory sslFactory = new SSLContextFactory(sslConfig.getKeystorePath(), sslConfig.getKeystorePassword(), sslConfig.getCertType());\n             SSLFilter sslFilter = new SSLFilter(sslFactory.buildClientContext());\n             sslFilter.setUseClientMode(true);\n             session.getFilterChain().addBefore(\"protocolFilter\", \"ssl\", sslFilter);\n@@ -139,7 +136,7 @@ public void sessionCreated(IoSession session) throws Exception\n         {\n             e.printStackTrace();\n         }\n-  \n+\n         _protocolSession = new AMQProtocolSession(this, session, _connection, getStateManager());\n         _protocolSession.init();\n     }\n@@ -154,6 +151,7 @@ public void sessionOpened(IoSession session) throws Exception\n      * sessionClosed() depending on whether we were trying to send data at the time of failure.\n      *\n      * @param session\n+     *\n      * @throws Exception\n      */\n     public void sessionClosed(IoSession session) throws Exception\n@@ -208,9 +206,7 @@ public void sessionClosed(IoSession session) throws Exception\n         _logger.info(\"Protocol Session [\" + this + \"] closed\");\n     }\n \n-    /**\n-     * See {@link FailoverHandler} to see rationale for separate thread.\n-     */\n+    /** See {@link FailoverHandler} to see rationale for separate thread. */\n     private void startFailoverThread()\n     {\n         Thread failoverThread = new Thread(_failoverHandler);\n@@ -267,10 +263,9 @@ else if (_failoverState == FailoverState.FAILED)\n     }\n \n     /**\n-     * There are two cases where we have other threads potentially blocking for events to be handled by this\n-     * class. These are for the state manager (waiting for a state change) or a frame listener (waiting for a\n-     * particular type of frame to arrive). When an error occurs we need to notify these waiters so that they can\n-     * react appropriately.\n+     * There are two cases where we have other threads potentially blocking for events to be handled by this class.\n+     * These are for the state manager (waiting for a state change) or a frame listener (waiting for a particular type\n+     * of frame to arrive). When an error occurs we need to notify these waiters so that they can react appropriately.\n      *\n      * @param e the exception to propagate\n      */\n@@ -306,13 +301,13 @@ public void messageReceived(IoSession session, Object message) throws Exception\n \n         HeartbeatDiagnostics.received(bodyFrame instanceof HeartbeatBody);\n \n-        switch(bodyFrame.getFrameType())\n+        switch (bodyFrame.getFrameType())\n         {\n             case AMQMethodBody.TYPE:\n \n                 if (debug)\n                 {\n-                    _logger.debug(\"Method frame received: \" + frame);\n+                    _logger.debug(\"(\" + System.identityHashCode(this) + \")Method frame received: \" + frame);\n                 }\n \n                 final AMQMethodEvent<AMQMethodBody> evt = new AMQMethodEvent<AMQMethodBody>(frame.getChannel(), (AMQMethodBody) bodyFrame);\n@@ -362,10 +357,10 @@ public void messageReceived(IoSession session, Object message) throws Exception\n                 _protocolSession.messageContentBodyReceived(frame.getChannel(),\n                                                             (ContentBody) bodyFrame);\n                 break;\n-            \n+\n             case HeartbeatBody.TYPE:\n \n-                if(debug)\n+                if (debug)\n                 {\n                     _logger.debug(\"Received heartbeat\");\n                 }\n@@ -413,8 +408,8 @@ public void attainState(AMQState s) throws AMQException\n     }\n \n     /**\n-     * Convenience method that writes a frame to the protocol session. Equivalent\n-     * to calling getProtocolSession().write().\n+     * Convenience method that writes a frame to the protocol session. Equivalent to calling\n+     * getProtocolSession().write().\n      *\n      * @param frame the frame to write\n      */\n@@ -429,30 +424,28 @@ public void writeFrame(AMQDataBlock frame, boolean wait)\n     }\n \n     /**\n-     * Convenience method that writes a frame to the protocol session and waits for\n-     * a particular response. Equivalent to calling getProtocolSession().write() then\n-     * waiting for the response.\n+     * Convenience method that writes a frame to the protocol session and waits for a particular response. Equivalent to\n+     * calling getProtocolSession().write() then waiting for the response.\n      *\n      * @param frame\n      * @param listener the blocking listener. Note the calling thread will block.\n      */\n     public AMQMethodEvent writeCommandFrameAndWaitForReply(AMQFrame frame,\n-                                                            BlockingMethodFrameListener listener)\n+                                                           BlockingMethodFrameListener listener)\n             throws AMQException\n     {\n         return writeCommandFrameAndWaitForReply(frame, listener, DEFAULT_SYNC_TIMEOUT);\n     }\n \n     /**\n-     * Convenience method that writes a frame to the protocol session and waits for\n-     * a particular response. Equivalent to calling getProtocolSession().write() then\n-     * waiting for the response.\n+     * Convenience method that writes a frame to the protocol session and waits for a particular response. Equivalent to\n+     * calling getProtocolSession().write() then waiting for the response.\n      *\n      * @param frame\n      * @param listener the blocking listener. Note the calling thread will block.\n      */\n     public AMQMethodEvent writeCommandFrameAndWaitForReply(AMQFrame frame,\n-                                                            BlockingMethodFrameListener listener, long timeout)\n+                                                           BlockingMethodFrameListener listener, long timeout)\n             throws AMQException\n     {\n         try\n@@ -477,27 +470,22 @@ public AMQMethodEvent writeCommandFrameAndWaitForReply(AMQFrame frame,\n \n     }\n \n-    /**\n-     * More convenient method to write a frame and wait for it's response.\n-     */\n+    /** More convenient method to write a frame and wait for it's response. */\n     public AMQMethodEvent syncWrite(AMQFrame frame, Class responseClass) throws AMQException\n     {\n         return syncWrite(frame, responseClass, DEFAULT_SYNC_TIMEOUT);\n     }\n \n-    /**\n-     * More convenient method to write a frame and wait for it's response.\n-     */\n+    /** More convenient method to write a frame and wait for it's response. */\n     public AMQMethodEvent syncWrite(AMQFrame frame, Class responseClass, long timeout) throws AMQException\n     {\n         return writeCommandFrameAndWaitForReply(frame,\n                                                 new SpecificMethodFrameListener(frame.getChannel(), responseClass), timeout);\n     }\n \n     /**\n-     * Convenience method to register an AMQSession with the protocol handler. Registering\n-     * a session with the protocol handler will ensure that messages are delivered to the\n-     * consumer(s) on that session.\n+     * Convenience method to register an AMQSession with the protocol handler. Registering a session with the protocol\n+     * handler will ensure that messages are delivered to the consumer(s) on that session.\n      *\n      * @param channelId the channel id of the session\n      * @param session   the session instance.\n@@ -555,17 +543,13 @@ public void closeConnection(long timeout) throws AMQException\n \n     }\n \n-    /**\n-     * @return the number of bytes read from this protocol session\n-     */\n+    /** @return the number of bytes read from this protocol session */\n     public long getReadBytes()\n     {\n         return _protocolSession.getIoSession().getReadBytes();\n     }\n \n-    /**\n-     * @return the number of bytes written to this protocol session\n-     */\n+    /** @return the number of bytes written to this protocol session */\n     public long getWrittenBytes()\n     {\n         return _protocolSession.getIoSession().getWrittenBytes();",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java",
                "sha": "d0cc52271a02204bb0a8413f0d0035935a2fb520",
                "status": "modified"
            },
            {
                "additions": 375,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java",
                "changes": 375,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 0,
                "filename": "qpid/java/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java",
                "patch": "@@ -0,0 +1,375 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ *\n+ */\n+package org.apache.qpid.test.unit.transacted;\n+\n+import junit.framework.TestCase;\n+import org.apache.qpid.client.AMQConnection;\n+import org.apache.qpid.client.transport.TransportConnection;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.url.URLSyntaxException;\n+import org.apache.log4j.Logger;\n+\n+import javax.jms.Session;\n+import javax.jms.MessageProducer;\n+import javax.jms.MessageConsumer;\n+import javax.jms.Queue;\n+import javax.jms.JMSException;\n+import javax.jms.Message;\n+import javax.jms.TextMessage;\n+\n+/**\n+ * This class tests a number of commits and roll back scenarios\n+ *\n+ * Assumptions; - Assumes empty Queue\n+ */\n+public class CommitRollbackTest extends TestCase\n+{\n+    protected AMQConnection conn;\n+    protected final String queue = \"direct://amq.direct//Qpid.Client.Transacted.CommitRollback.queue\";\n+    protected String payload = \"xyzzy\";\n+    private Session _session;\n+    private MessageProducer _publisher;\n+    private Session _pubSession;\n+    private MessageConsumer _consumer;\n+    Queue _jmsQueue;\n+\n+    private static final Logger _logger = Logger.getLogger(CommitRollbackTest.class);\n+\n+    protected void setUp() throws Exception\n+    {\n+        super.setUp();\n+        TransportConnection.createVMBroker(1);\n+        newConnection();\n+    }\n+\n+    private void newConnection() throws AMQException, URLSyntaxException, JMSException\n+    {\n+        conn = new AMQConnection(\"amqp://guest:guest@client/test?brokerlist='vm://:1'\");\n+\n+        _session = conn.createSession(true, Session.CLIENT_ACKNOWLEDGE);\n+\n+        _jmsQueue = _session.createQueue(queue);\n+        _consumer = _session.createConsumer(_jmsQueue);\n+\n+        _pubSession = conn.createSession(true, Session.CLIENT_ACKNOWLEDGE);\n+\n+        _publisher = _pubSession.createProducer(_pubSession.createQueue(queue));\n+\n+        conn.start();\n+    }\n+\n+    protected void tearDown() throws Exception\n+    {\n+        super.tearDown();\n+\n+        conn.close();\n+        TransportConnection.killVMBroker(1);\n+    }\n+\n+    /** PUT a text message, disconnect before commit, confirm it is gone. */\n+    public void testPutThenDisconnect() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testPutThenDisconnect\";\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _logger.info(\"reconnecting without commit\");\n+        conn.close();\n+\n+        newConnection();\n+\n+        _logger.info(\"receiving result\");\n+        Message result = _consumer.receive(1000);\n+\n+        //commit to ensure message is removed from queue\n+        _session.commit();\n+\n+        assertNull(\"test message was put and disconnected before commit, but is still present\", result);\n+    }\n+\n+    /** PUT a text message, disconnect before commit, confirm it is gone. */\n+    public void testPutThenCloseDisconnect() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testPutThenDisconnect\";\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _logger.info(\"closing publisher without commit\");\n+        _publisher.close();\n+\n+        _logger.info(\"reconnecting without commit\");\n+        conn.close();\n+\n+        newConnection();\n+\n+        _logger.info(\"receiving result\");\n+        Message result = _consumer.receive(1000);\n+\n+        //commit to ensure message is removed from queue\n+        _session.commit();\n+\n+        assertNull(\"test message was put and disconnected before commit, but is still present\", result);\n+    }\n+\n+    /**\n+     * PUT a text message, rollback, confirm message is gone. The consumer is on the same connection but different\n+     * session as producer\n+     */\n+    public void testPutThenRollback() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testPutThenRollback\";\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _logger.info(\"rolling back\");\n+        _pubSession.rollback();\n+\n+        _logger.info(\"receiving result\");\n+        Message result = _consumer.receive(1000);\n+\n+        assertNull(\"test message was put and rolled back, but is still present\", result);\n+    }\n+\n+    /** GET a text message, disconnect before commit, confirm it is still there. The consumer is on a new connection */\n+    public void testGetThenDisconnect() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testGetThenDisconnect\";\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _pubSession.commit();\n+\n+        _logger.info(\"getting test message\");\n+\n+        Message msg = _consumer.receive(1000);\n+        assertNotNull(\"retrieved message is null\", msg);\n+\n+        _logger.info(\"closing connection\");\n+        conn.close();\n+\n+        newConnection();\n+\n+        _logger.info(\"receiving result\");\n+        Message result = _consumer.receive(1000);\n+\n+        _session.commit();\n+\n+        assertNotNull(\"test message was consumed and disconnected before commit, but is gone\", result);\n+        assertEquals(\"test message was correct message\", MESSAGE_TEXT, ((TextMessage) result).getText());\n+    }\n+\n+    /**\n+     * GET a text message, close consumer, disconnect before commit, confirm it is still there. The consumer is on the\n+     * same connection but different session as producer\n+     */\n+    public void testGetThenCloseDisconnect() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testGetThenCloseDisconnect\";\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _pubSession.commit();\n+\n+        _logger.info(\"getting test message\");\n+\n+        Message msg = _consumer.receive(1000);\n+        assertNotNull(\"retrieved message is null\", msg);\n+        assertEquals(\"test message was correct message\", MESSAGE_TEXT, ((TextMessage) msg).getText());\n+\n+        _logger.info(\"reconnecting without commit\");\n+        _consumer.close();\n+        conn.close();\n+\n+        newConnection();\n+\n+        _logger.info(\"receiving result\");\n+        Message result = _consumer.receive(1000);\n+\n+        _session.commit();\n+\n+        assertNotNull(\"test message was consumed and disconnected before commit, but is gone\", result);\n+        assertEquals(\"test message was correct message\", MESSAGE_TEXT, ((TextMessage) result).getText());\n+    }\n+\n+    /**\n+     * GET a text message, rollback, confirm it is still there. The consumer is on the same connection but differnt\n+     * session to the producer\n+     */\n+    public void testGetThenRollback() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testGetThenDisconnect\";\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _pubSession.commit();\n+\n+        _logger.info(\"getting test message\");\n+\n+        Message msg = _consumer.receive(1000);\n+\n+        assertNotNull(\"retrieved message is null\", msg);\n+        assertEquals(\"test message was correct message\", MESSAGE_TEXT, ((TextMessage) msg).getText());\n+\n+        _logger.info(\"rolling back\");\n+\n+        _session.rollback();\n+\n+        _logger.info(\"receiving result\");\n+\n+        Message result = _consumer.receive(1000);\n+\n+        _session.commit();\n+        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+        assertEquals(\"test message was correct message\", MESSAGE_TEXT, ((TextMessage) result).getText());\n+        assertTrue(\"Messasge is not marked as redelivered\", result.getJMSRedelivered());\n+    }\n+\n+    /**\n+     * GET a text message, close message producer, rollback, confirm it is still there. The consumer is on the same\n+     * connection but different session as producer\n+     */\n+    public void testGetThenCloseRollback() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testGetThenCloseRollback\";\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _pubSession.commit();\n+\n+        _logger.info(\"getting test message\");\n+\n+        Message msg = _consumer.receive(1000);\n+\n+        assertNotNull(\"retrieved message is null\", msg);\n+        assertEquals(\"test message was correct message\", MESSAGE_TEXT, ((TextMessage) msg).getText());\n+\n+        _logger.info(\"Closing consumer\");\n+        _consumer.close();\n+\n+        _logger.info(\"rolling back\");\n+        _session.rollback();\n+\n+        _logger.info(\"receiving result\");\n+\n+        _consumer = _session.createConsumer(_jmsQueue);\n+\n+        Message result = _consumer.receive(1000);\n+\n+        _session.commit();\n+        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+        assertEquals(\"test message was correct message\", MESSAGE_TEXT, ((TextMessage) result).getText());\n+        assertTrue(\"Messasge is not marked as redelivered\", result.getJMSRedelivered());\n+    }\n+\n+\n+    /** Test that rolling back a session purges the dispatcher queue, and the messages arrive in the correct order */\n+    public void testSend2ThenRollback() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+        _logger.info(\"sending two test messages\");\n+        _publisher.send(_pubSession.createTextMessage(\"1\"));\n+        _publisher.send(_pubSession.createTextMessage(\"2\"));\n+        _pubSession.commit();\n+\n+        _logger.info(\"getting test message\");\n+        assertEquals(\"1\", ((TextMessage) _consumer.receive(1000)).getText());\n+\n+        _logger.info(\"rolling back\");\n+        _session.rollback();\n+\n+        _logger.info(\"receiving result\");\n+        Message result = _consumer.receive(1000);\n+        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+        assertEquals(\"1\", ((TextMessage) result).getText());\n+        assertTrue(\"Messasge is not marked as redelivered\", result.getJMSRedelivered());\n+\n+        result = _consumer.receive(1000);\n+        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+        assertEquals(\"2\", ((TextMessage) result).getText());\n+        assertTrue(\"Messasge is not marked as redelivered\", result.getJMSRedelivered());\n+\n+        result = _consumer.receive(1000);\n+\n+        assertNull(\"test message should be null\", result);\n+    }\n+\n+    public void testSend2ThenCloseAfter1andTryAgain() throws Exception\n+    {\n+//        assertTrue(\"session is not transacted\", _session.getTransacted());\n+//        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+//\n+//        _logger.info(\"sending two test messages\");\n+//        _publisher.send(_pubSession.createTextMessage(\"1\"));\n+//        _publisher.send(_pubSession.createTextMessage(\"2\"));\n+//        _pubSession.commit();\n+//\n+//        _logger.info(\"getting test message\");\n+//        assertEquals(\"1\", ((TextMessage) _consumer.receive(1000)).getText());\n+//\n+//        _consumer.close();\n+//\n+//        _consumer = _session.createConsumer(_jmsQueue);\n+//\n+//        _logger.info(\"receiving result\");\n+//        Message result = _consumer.receive(1000);\n+//        _logger.error(\"1:\" + result);\n+////        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+////        assertEquals(\"1\" , ((TextMessage) result).getText());\n+////        assertTrue(\"Messasge is not marked as redelivered\" + result, result.getJMSRedelivered());\n+//\n+//        result = _consumer.receive(1000);\n+//        _logger.error(\"2\" + result);\n+////        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+////        assertEquals(\"2\", ((TextMessage) result).getText());\n+////        assertTrue(\"Messasge is marked as redelivered\" + result, !result.getJMSRedelivered());\n+//\n+//        result = _consumer.receive(1000);\n+//        _logger.error(\"3\" + result);\n+//        assertNull(\"test message should be null:\" + result, result);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java",
                "sha": "0d75a6b968051d1c244e9c354288e07edaca54d1",
                "status": "added"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/client/src/test/java/org/apache/qpid/test/unit/transacted/TransactedTest.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/test/java/org/apache/qpid/test/unit/transacted/TransactedTest.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 7,
                "filename": "qpid/java/client/src/test/java/org/apache/qpid/test/unit/transacted/TransactedTest.java",
                "patch": "@@ -63,12 +63,11 @@ protected void setUp() throws Exception\n         super.setUp();\n         TransportConnection.createVMBroker(1);\n         con = new AMQConnection(\"vm://:1\", \"guest\", \"guest\", \"TransactedTest\", \"test\");\n-        session = con.createSession(true, 0);\n+        session = con.createSession(true, Session.SESSION_TRANSACTED);\n         queue1 = new AMQQueue(session.getDefaultQueueExchangeName(), new AMQShortString(\"Q1\"), new AMQShortString(\"Q1\"), false, true);\n         queue2 = new AMQQueue(session.getDefaultQueueExchangeName(), new AMQShortString(\"Q2\"), false);\n \n \n-\n         consumer1 = session.createConsumer(queue1);\n         //Dummy just to create the queue. \n         MessageConsumer consumer2 = session.createConsumer(queue2);\n@@ -81,7 +80,6 @@ protected void setUp() throws Exception\n         prepProducer1 = prepSession.createProducer(queue1);\n         prepCon.start();\n \n-\n         //add some messages\n         prepProducer1.send(prepSession.createTextMessage(\"A\"));\n         prepProducer1.send(prepSession.createTextMessage(\"B\"));\n@@ -127,32 +125,41 @@ public void testCommit() throws Exception\n \n     public void testRollback() throws Exception\n     {\n+        _logger.info(\"Sending X Y Z\");\n         producer2.send(session.createTextMessage(\"X\"));\n         producer2.send(session.createTextMessage(\"Y\"));\n         producer2.send(session.createTextMessage(\"Z\"));\n+        _logger.info(\"Receiving A B\");\n         expect(\"A\", consumer1.receive(1000));\n         expect(\"B\", consumer1.receive(1000));\n-        expect(\"C\", consumer1.receive(1000));\n+        //Don't consume 'C' leave it in the prefetch cache to ensure rollback removes it.\n \n         //rollback\n+        _logger.info(\"rollback\");\n         session.rollback();\n \n+        _logger.info(\"Receiving A B C\");\n         //ensure sent messages are not visible and received messages are requeued\n         expect(\"A\", consumer1.receive(1000));\n         expect(\"B\", consumer1.receive(1000));\n         expect(\"C\", consumer1.receive(1000));\n+\n+        _logger.info(\"Starting new connection\");\n         testCon.start();\n         testConsumer1 = testSession.createConsumer(queue1);\n+        _logger.info(\"Testing we have no messages left\");\n         assertTrue(null == testConsumer1.receive(1000));\n         assertTrue(null == testConsumer2.receive(1000));\n+\n+        session.commit();\n     }\n \n     public void testResendsMsgsAfterSessionClose() throws Exception\n     {\n         AMQConnection con = new AMQConnection(\"vm://:1\", \"guest\", \"guest\", \"consumer1\", \"test\");\n \n         Session consumerSession = con.createSession(true, Session.CLIENT_ACKNOWLEDGE);\n-        AMQQueue queue3 = new AMQQueue(consumerSession.getDefaultQueueExchangeName(),new AMQShortString(\"Q3\"), false);\n+        AMQQueue queue3 = new AMQQueue(consumerSession.getDefaultQueueExchangeName(), new AMQShortString(\"Q3\"), false);\n         MessageConsumer consumer = consumerSession.createConsumer(queue3);\n         //force synch to ensure the consumer has resulted in a bound queue\n         ((AMQSession) consumerSession).declareExchangeSynch(ExchangeDefaults.DIRECT_EXCHANGE_NAME, ExchangeDefaults.DIRECT_EXCHANGE_CLASS);\n@@ -225,8 +232,9 @@ public void testResendsMsgsAfterSessionClose() throws Exception\n \n     private void expect(String text, Message msg) throws JMSException\n     {\n-        assertTrue(msg instanceof TextMessage);\n-        assertEquals(text, ((TextMessage) msg).getText());\n+        assertNotNull(\"Message should not be null\", msg);\n+        assertTrue(\"Message should be a text message\", msg instanceof TextMessage);\n+        assertEquals(\"Message content does not match expected\", text, ((TextMessage) msg).getText());\n     }\n \n     public static junit.framework.Test suite()",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/client/src/test/java/org/apache/qpid/test/unit/transacted/TransactedTest.java",
                "sha": "94cbb426e5dcc5c1a818e749532e92afcf886b6c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/cluster/src/main/java/org/apache/qpid/server/queue/ClusteredQueue.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/cluster/src/main/java/org/apache/qpid/server/queue/ClusteredQueue.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 3,
                "filename": "qpid/java/cluster/src/main/java/org/apache/qpid/server/queue/ClusteredQueue.java",
                "patch": "@@ -32,7 +32,6 @@\n import org.apache.qpid.server.virtualhost.VirtualHost;\n \n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.Executor;\n \n /**\n  * Represents a shared queue in a cluster. The key difference is that as well as any\n@@ -56,10 +55,10 @@ public ClusteredQueue(GroupManager groupMgr, AMQShortString name, boolean durabl\n     }\n \n \n-    public void process(StoreContext storeContext, AMQMessage msg) throws AMQException\n+    public void process(StoreContext storeContext, AMQMessage msg, boolean deliverFirst) throws AMQException\n     {\n         _logger.info(new LogMessage(\"{0} delivered to clustered queue {1}\", msg, this));\n-        super.process(storeContext, msg);\n+        super.process(storeContext, msg, deliverFirst);\n     }\n \n     protected void autodelete() throws AMQException",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/cluster/src/main/java/org/apache/qpid/server/queue/ClusteredQueue.java",
                "sha": "9fa96ece1e138ff57680e88dfabe63185ab94553",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/cluster/src/main/java/org/apache/qpid/server/queue/RemoteSubscriptionImpl.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/cluster/src/main/java/org/apache/qpid/server/queue/RemoteSubscriptionImpl.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 1,
                "filename": "qpid/java/cluster/src/main/java/org/apache/qpid/server/queue/RemoteSubscriptionImpl.java",
                "patch": "@@ -117,7 +117,17 @@ public boolean hasInterest(AMQMessage msg)\n         return null;\n     }\n \n-    public void enqueueForPreDelivery(AMQMessage msg)\n+    public Queue<AMQMessage> getResendQueue()\n+    {\n+        return null;\n+    }\n+\n+    public Queue<AMQMessage> getNextQueue(Queue<AMQMessage> messages)\n+    {\n+        return messages;\n+    }\n+\n+    public void enqueueForPreDelivery(AMQMessage msg, boolean deliverFirst)\n     {\n         //no-op -- if selectors are implemented on RemoteSubscriptions then look at SubscriptionImpl\n     }\n@@ -132,6 +142,11 @@ public void close()\n         //no-op\n     }\n \n+    public boolean isClosed()\n+    {\n+        return false;\n+    }\n+\n     public boolean isBrowser()\n     {\n         return false;\n@@ -142,4 +157,14 @@ public boolean wouldSuspend(AMQMessage msg)\n         return _suspended;\n     }\n \n+    public void addToResendQueue(AMQMessage msg)\n+    {\n+        //no-op\n+    }\n+\n+    public Object getSendLock()\n+    {\n+        return new Object();\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/cluster/src/main/java/org/apache/qpid/server/queue/RemoteSubscriptionImpl.java",
                "sha": "a5ace417524866c17b331bbe704fe80f9ea865d4",
                "status": "modified"
            },
            {
                "additions": 197,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/common/src/main/java/org/apache/qpid/util/ConcurrentLinkedMessageQueueAtomicSize.java",
                "changes": 197,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/util/ConcurrentLinkedMessageQueueAtomicSize.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 0,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/util/ConcurrentLinkedMessageQueueAtomicSize.java",
                "patch": "@@ -0,0 +1,197 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.util;\n+\n+import org.apache.log4j.Logger;\n+\n+import java.util.Queue;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class ConcurrentLinkedMessageQueueAtomicSize<E> extends ConcurrentLinkedQueueAtomicSize<E> implements MessageQueue<E>\n+{\n+    private static final Logger _logger = Logger.getLogger(ConcurrentLinkedMessageQueueAtomicSize.class);\n+\n+    protected Queue<E> _messageHead = new ConcurrentLinkedQueueAtomicSize<E>();\n+\n+    protected AtomicInteger _messageHeadSize = new AtomicInteger(0);\n+\n+    @Override\n+    public int size()\n+    {\n+        return super.size() + _messageHeadSize.get();\n+    }\n+\n+    @Override\n+    public E poll()\n+    {\n+        if (_messageHead.isEmpty())\n+        {\n+            return super.poll();\n+        }\n+        else\n+        {\n+            _logger.debug(\"Providing item from message head\");\n+\n+            E e = _messageHead.poll();\n+\n+            if (e != null)\n+            {\n+                _messageHeadSize.decrementAndGet();\n+            }\n+\n+            return e;\n+        }\n+    }\n+\n+    @Override\n+    public boolean remove(Object o)\n+    {\n+\n+        if (_messageHead.isEmpty())\n+        {\n+            return super.remove(o);\n+        }\n+        else\n+        {\n+            if (_messageHead.remove(o))\n+            {\n+                _messageHeadSize.decrementAndGet();\n+                return true;\n+            }\n+\n+            return super.remove(o);\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeAll(Collection<?> c)\n+    {\n+        if (_messageHead.isEmpty())\n+        {\n+            return super.removeAll(c);\n+        }\n+        else\n+        {\n+            //fixme this is super.removeAll but iterator here doesn't work\n+            // we need to be able to correctly decrement _messageHeadSize\n+//            boolean modified = false;\n+//            Iterator<?> e = iterator();\n+//            while (e.hasNext())\n+//            {\n+//                if (c.contains(e.next()))\n+//                {\n+//                    e.remove();\n+//                    modified = true;\n+//                    _size.decrementAndGet();\n+//                }\n+//            }\n+//            return modified;\n+\n+            throw new RuntimeException(\"Not implemented\");\n+        }\n+    }\n+\n+\n+    @Override\n+    public boolean isEmpty()\n+    {\n+        return (_messageHead.isEmpty() && super.isEmpty());\n+    }\n+\n+    @Override\n+    public void clear()\n+    {\n+        super.clear();\n+        _messageHead.clear();\n+    }\n+\n+    @Override\n+    public boolean contains(Object o)\n+    {\n+        return _messageHead.contains(o) || super.contains(o);\n+    }\n+\n+    @Override\n+    public boolean containsAll(Collection<?> o)\n+    {\n+        return _messageHead.containsAll(o) || super.containsAll(o);\n+    }\n+\n+    @Override\n+    public E element()\n+    {\n+        if (_messageHead.isEmpty())\n+        {\n+            return super.element();\n+        }\n+        else\n+        {\n+            return _messageHead.element();\n+        }\n+    }\n+\n+    @Override\n+    public E peek()\n+    {\n+        if (_messageHead.isEmpty())\n+        {\n+            return super.peek();\n+        }\n+        else\n+        {\n+            _logger.debug(\"Providing item from message head\");\n+            return _messageHead.peek();\n+        }\n+\n+    }\n+\n+    @Override\n+    public Iterator<E> iterator()\n+    {\n+        throw new RuntimeException(\"Not Implemented\");\n+\n+    }\n+\n+    @Override\n+    public boolean retainAll(Collection<?> c)\n+    {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    @Override\n+    public Object[] toArray()\n+    {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    public boolean pushHead(E o)\n+    {\n+        _logger.debug(\"Adding item to head of queue\");\n+        if (_messageHead.offer(o))\n+        {\n+            _messageHeadSize.incrementAndGet();\n+            return true;\n+        }\n+        return false;\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/common/src/main/java/org/apache/qpid/util/ConcurrentLinkedMessageQueueAtomicSize.java",
                "sha": "cdf686b4cba8ca98d93b1ae4efbf6ee093f7b018",
                "status": "added"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/common/src/main/java/org/apache/qpid/util/MessageQueue.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/util/MessageQueue.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 0,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/util/MessageQueue.java",
                "patch": "@@ -0,0 +1,30 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.util;\n+\n+import java.util.Queue;\n+\n+public interface MessageQueue<E> extends Queue<E>\n+{\n+\n+    boolean pushHead(E o);\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/common/src/main/java/org/apache/qpid/util/MessageQueue.java",
                "sha": "9cf3319374c057374e6dd2d82bb938cc154b01b2",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/systests/src/main/java/org/apache/qpid/server/exchange/AbstractHeadersExchangeTestBase.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/exchange/AbstractHeadersExchangeTestBase.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 1,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/exchange/AbstractHeadersExchangeTestBase.java",
                "patch": "@@ -272,9 +272,10 @@ public TestQueue(AMQShortString name) throws AMQException\n          * not invoked. It is unnecessary since for this test we only care to know whether the message was\n          * sent to the queue; the queue processing logic is not being tested.\n          * @param msg\n+         * @param deliverFirst\n          * @throws AMQException\n          */\n-        public void process(StoreContext context, AMQMessage msg) throws AMQException\n+        public void process(StoreContext context, AMQMessage msg, boolean deliverFirst) throws AMQException\n         {\n             messages.add(new HeadersExchangeTest.Message(msg));\n         }",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/systests/src/main/java/org/apache/qpid/server/exchange/AbstractHeadersExchangeTestBase.java",
                "sha": "ccd23bc0bcccff7d5ca82e69eca48ed90cb5c3c7",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/AMQQueueMBeanTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/AMQQueueMBeanTest.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 3,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/queue/AMQQueueMBeanTest.java",
                "patch": "@@ -19,7 +19,6 @@\n \n import junit.framework.TestCase;\n import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.BasicPublishBody;\n import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n@@ -151,7 +150,7 @@ public void testExceptions() throws Exception\n         AMQMessage msg = message(false);\n         long id = msg.getMessageId();\n         _queue.clearQueue(_storeContext);\n-        _queue.process(_storeContext, msg);\n+        _queue.process(_storeContext, msg, false);\n         msg.routingComplete(_messageStore, _storeContext, new MessageHandleFactory());\n         _queueMBean.viewMessageContent(id);\n         try\n@@ -216,7 +215,7 @@ private void sendMessages(int messageCount) throws AMQException\n         }\n         for (int i = 0; i < messageCount; i++)\n         {\n-            _queue.process(_storeContext, messages[i]);\n+            _queue.process(_storeContext, messages[i], false);\n         }\n \n         for (int i = 0; i < messages.length; i++)",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/AMQQueueMBeanTest.java",
                "sha": "26332579cbb15e76812174e30ce0733c0935ca79",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/ConcurrencyTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/ConcurrencyTest.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 1,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/queue/ConcurrencyTest.java",
                "patch": "@@ -194,7 +194,7 @@ void doRun() throws Throwable\n             AMQMessage msg = nextMessage();\n             if (msg != null)\n             {\n-                _deliveryMgr.deliver(null, new AMQShortString(toString()), msg);\n+                _deliveryMgr.deliver(null, new AMQShortString(toString()), msg, false);\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/ConcurrencyTest.java",
                "sha": "4971db2d28f5bac47d9c4bf972379b1e56f0ef3a",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/DeliveryManagerTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/DeliveryManagerTest.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 6,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/queue/DeliveryManagerTest.java",
                "patch": "@@ -49,7 +49,7 @@ public void testStartInQueueingMode() throws AMQException\n \n         for (int i = 0; i < batch; i++)\n         {\n-            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i]);\n+            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i], false);\n         }\n \n         SubscriptionTestHelper s1 = new SubscriptionTestHelper(\"1\");\n@@ -59,7 +59,7 @@ public void testStartInQueueingMode() throws AMQException\n \n         for (int i = batch; i < messages.length; i++)\n         {\n-            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i]);\n+            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i], false);\n         }\n \n         assertTrue(s1.getMessages().isEmpty());\n@@ -97,7 +97,7 @@ public void testStartInDirectMode() throws AMQException\n \n         for (int i = 0; i < batch; i++)\n         {\n-            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i]);\n+            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i], false);\n         }\n \n         assertEquals(batch, s1.getMessages().size());\n@@ -111,7 +111,7 @@ public void testStartInDirectMode() throws AMQException\n         s1.setSuspended(true);\n         for (int i = batch; i < messages.length; i++)\n         {\n-            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i]);\n+            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i], false);\n         }\n \n         _mgr.processAsync(new OnCurrentThreadExecutor());\n@@ -133,7 +133,7 @@ public void testNoConsumers() throws AMQException\n         try\n         {\n             AMQMessage msg = message(true);\n-            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, msg);\n+            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, msg, false);\n             msg.checkDeliveredToConsumer();\n             fail(\"expected exception did not occur\");\n         }\n@@ -155,7 +155,7 @@ public void testNoActiveConsumers() throws AMQException\n             _subscriptions.addSubscriber(s);\n             s.setSuspended(true);\n             AMQMessage msg = message(true);\n-            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, msg);\n+            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, msg, false);\n             msg.checkDeliveredToConsumer();\n             fail(\"expected exception did not occur\");\n         }",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/DeliveryManagerTest.java",
                "sha": "dc5a6d3cf60cbaa0d73459f95941d2d4a859244b",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/qpid/blob/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java?ref=38ec33821fd6e1c01e32a398607ec3faae4f1226",
                "deletions": 4,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java",
                "patch": "@@ -67,12 +67,22 @@ public boolean isSuspended()\n         return isSuspended;\n     }\n \n-\tpublic boolean wouldSuspend(AMQMessage msg)\n+    public boolean wouldSuspend(AMQMessage msg)\n     {\n         return isSuspended;\n     }\n \n-\t\n+    public void addToResendQueue(AMQMessage msg)\n+    {\n+        //no-op\n+    }\n+\n+    public Object getSendLock()\n+    {\n+        return new Object();\n+    }\n+\n+\n     public void queueDeleted(AMQQueue queue)\n     {\n     }\n@@ -92,7 +102,17 @@ public boolean hasInterest(AMQMessage msg)\n         return null;\n     }\n \n-    public void enqueueForPreDelivery(AMQMessage msg)\n+    public Queue<AMQMessage> getResendQueue()\n+    {\n+        return null;\n+    }\n+\n+    public Queue<AMQMessage> getNextQueue(Queue<AMQMessage> messages)\n+    {\n+        return messages;\n+    }\n+\n+    public void enqueueForPreDelivery(AMQMessage msg, boolean deliverFirst)\n     {\n         //no-op\n     }\n@@ -107,9 +127,14 @@ public void close()\n         //no-op\n     }\n \n+    public boolean isClosed()\n+    {\n+        return false;\n+    }\n+\n     public boolean isBrowser()\n     {\n-        return false;  //To change body of implemented methods use File | Settings | File Templates.\n+        return false;\n     }\n \n     public int hashCode()",
                "raw_url": "https://github.com/apache/qpid/raw/38ec33821fd6e1c01e32a398607ec3faae4f1226/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java",
                "sha": "01eb2ba6a2e166ecd0e353304f8cd01423a0d7e4",
                "status": "modified"
            }
        ],
        "message": "QPID-346 Message loss after rollback\nQPID-348 Problems of prefetching messages\nQPID-355 Closing a consumer does not ensure messages delivery will stop for that subscription \n\nBROKER\nAMQChannel - updated requeue to either resend via the Delivery Manager not directly via msg.writedeliver.\nBasicRejectMethodHandler - initial place holder.\nTxRollbackHandler - Added comment\nAMQMessage - added ability to record who has taken the message so that it can be resent to that subscriber on resend/requeue.\nAMQQueue - added the queue reference to the Subscription creation\nConcurrentSelectorDeliveryManager - Added methods to correctly monitor the size of queue messages. Including messages on the resend queue of a Subscriber. Additional locking to ensure that messages are not sent to the subscriber after Closure. QPID-355 \nDeliveryManager - adjusted deliver call to allow delivery to the head of the queue.\nSubscription - changes to allow selction of queue(resend or predelivery) methods to add to resend and getSendLock to ensure that sending to the Subscription is allowed.\nSubscriptionFactory - changes to allow the AMQQueue to be passed to the Subscription.\nSubscriptionImpl - implementation of the interfaces. Local storage of messages to be resent and requeuing of the messages during closure.\nSubscriptionSet - changes to retrieve the actual stored Subscription when performing removeSubscriber. So we have access to the the resend queue.\nAMQStateManager - Added BasicRejectMethodHandler\nTransactionalContext - Added option to deliver the messages to the front of the queue.\nLocalTransactionalContext - cleared the _postComitDeliveryList on rollback. Added option to deliver the messages to the front of the queue.\nNonTransactionalContext - Added option to deliver the messages to the front of the queue.\n\nDeliverMessageOperation.java DELELTED AS NOT USED.\n\nCLIENT\nAMQSession - added ability to get the pervious state of the dispatcher when settting Stopped, fixed the channel suspension problems on broker so uncommented clean up code in rollback and recover.\nBasicMessageConsumer - updated the rollback so that it sends reject messages to server.\nAbstractJMSMessage - whitespace + added extra message properties to the toString()\nAMQProtocolHandler - whitespace + extra debug output\nTransactedTest - updated expect to prevent NPEs also added extra logging to help understand what is going on.\n\nCLUSTER\nClusteredQueue - AMQQueue changes for message deliveryFirst.\nRemoteSubscriptionImpl - Implementation of Subscription \n\nSYSTESTS\nAbstractHeadersExchangeTestBase - AMQQueue changes for message deliveryFirst.\nAMQQueueMBeanTest - changes for message deliveryFirst.\nConcurrencyTest - changes for message deliveryFirst. \nDeliveryManagerTest - changes for message deliveryFirst.\nSubscriptionTestHelper - Implementation of Subscription \n\n\nWhiteSpace only\nUnacknowledgedMessageMapImpl.java\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/qpid/trunk@510897 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/c3b7f29e97cbcd5b44a0dc5efcfd439e9427eac8",
        "patched_files": [
            "Subscription.java",
            "AbstractHeadersExchangeTestBase.java",
            "AMQProtocolHandler.java",
            "TxRollbackHandler.java",
            "ConcurrentSelectorDeliveryManager.java",
            "SubscriptionTestHelper.java",
            "NonTransactionalContext.java",
            "DeliverMessageOperation.java",
            "ConcurrentLinkedMessageQueueAtomicSize.java",
            "AMQStateManager.java",
            "AbstractJMSMessage.java",
            "RemoteSubscriptionImpl.java",
            "SubscriptionFactory.java",
            "AMQMessage.java",
            "UnacknowledgedMessageMapImpl.java",
            "AMQSession.java",
            "TransactionalContext.java",
            "AMQChannel.java",
            "DeliveryManager.java",
            "BasicRejectMethodHandler.java",
            "MessageQueue.java",
            "BasicMessageConsumer.java",
            "SubscriptionSet.java",
            "AMQQueue.java",
            "LocalTransactionalContext.java",
            "ClusteredQueue.java",
            "SubscriptionImpl.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "TransactedTest.java",
            "ConcurrencyTest.java",
            "CommitRollbackTest.java",
            "DeliveryManagerTest.java",
            "AMQQueueMBeanTest.java"
        ]
    },
    "qpid_3e882a6": {
        "bug_id": "qpid_3e882a6",
        "commit": "https://github.com/apache/qpid/commit/3e882a6fdc6852f0023f2f8547413c252e270a03",
        "file": [
            {
                "additions": 66,
                "blob_url": "https://github.com/apache/qpid/blob/3e882a6fdc6852f0023f2f8547413c252e270a03/qpid/java/broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/SlowConsumerDetectionQueueConfigurationTest.java",
                "changes": 66,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/SlowConsumerDetectionQueueConfigurationTest.java?ref=3e882a6fdc6852f0023f2f8547413c252e270a03",
                "deletions": 0,
                "filename": "qpid/java/broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/SlowConsumerDetectionQueueConfigurationTest.java",
                "patch": "@@ -0,0 +1,66 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.virtualhost.plugin;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.XMLConfiguration;\n+import org.apache.qpid.server.configuration.plugin.SlowConsumerDetectionQueueConfiguration;\n+\n+\n+public class SlowConsumerDetectionQueueConfigurationTest extends TestCase\n+{\n+    public void setUp()\n+    {\n+        \n+    }\n+\n+\n+    public void testConfigLoadingValidConfig()\n+    {\n+        SlowConsumerDetectionQueueConfiguration config = new SlowConsumerDetectionQueueConfiguration();\n+\n+        XMLConfiguration xmlconfig = new XMLConfiguration();\n+\n+        xmlconfig.addProperty(\"messageAge\", \"60000\");\n+        xmlconfig.addProperty(\"depth\", \"1024\");\n+        xmlconfig.addProperty(\"messageCount\", \"10\");\n+        xmlconfig.addProperty(\"policy.name\", \"TopicDelete\");\n+        xmlconfig.addProperty(\"policy.topicdelete\", \"\");\n+\n+\n+        // Create a CompositeConfiguration as this is what the broker uses\n+        CompositeConfiguration composite = new CompositeConfiguration();\n+        composite.addConfiguration(xmlconfig);\n+\n+        try\n+        {\n+            config.setConfiguration(\"\", composite);\n+        }\n+        catch (ConfigurationException e)\n+        {\n+            e.printStackTrace();\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/3e882a6fdc6852f0023f2f8547413c252e270a03/qpid/java/broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/SlowConsumerDetectionQueueConfigurationTest.java",
                "sha": "180573d625895d54fc2ff6b2723891b33fbf2127",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/3e882a6fdc6852f0023f2f8547413c252e270a03/qpid/java/broker/src/main/java/org/apache/qpid/server/plugins/PluginManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/plugins/PluginManager.java?ref=3e882a6fdc6852f0023f2f8547413c252e270a03",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/plugins/PluginManager.java",
                "patch": "@@ -245,6 +245,12 @@ public PluginManager(String plugindir) throws Exception\n \n     public <P extends PluginFactory> Map<String, P> getPlugins(Class<P> plugin)\n     {\n+        // If plugins are not configured then return an empty set\n+        if (_activator == null)\n+        {\n+            return new HashMap<String, P>();\n+        }\n+\n         ServiceTracker tracker = new ServiceTracker(_activator.getContext(), plugin.getName(), null);\n         tracker.open();\n ",
                "raw_url": "https://github.com/apache/qpid/raw/3e882a6fdc6852f0023f2f8547413c252e270a03/qpid/java/broker/src/main/java/org/apache/qpid/server/plugins/PluginManager.java",
                "sha": "cba8dda425873fde84f36658678fd2bf92c0e697",
                "status": "modified"
            }
        ],
        "message": "QPID-2585 : Prevent NPE if plugins are not enabled but requested\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@947174 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/5afdc67935d07852c7c166741401ec4a77604d9b",
        "patched_files": [
            "PluginManager.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "SlowConsumerDetectionQueueConfigurationTest.java"
        ]
    },
    "qpid_3fb59b5": {
        "bug_id": "qpid_3fb59b5",
        "commit": "https://github.com/apache/qpid/commit/3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/qpid/blob/c266140028a3a4aa61b7ee1a557b768c9e0f21d8/qpid/java/broker/bin/bdbbackup",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/bin/bdbbackup?ref=c266140028a3a4aa61b7ee1a557b768c9e0f21d8",
                "deletions": 21,
                "filename": "qpid/java/broker/bin/bdbbackup",
                "patch": "@@ -1,21 +0,0 @@\n-#!/bin/bash\n-#\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-# \n-#   http://www.apache.org/licenses/LICENSE-2.0\n-# \n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-#\n-\n-. qpid-run org.apache.qpid.server.store.berkeleydb.BDBBackup \"$@\"",
                "raw_url": "https://github.com/apache/qpid/raw/c266140028a3a4aa61b7ee1a557b768c9e0f21d8/qpid/java/broker/bin/bdbbackup",
                "sha": "34743cd873ebaa8707fa9949df91540d1010e93c",
                "status": "removed"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/qpid/blob/3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c/qpid/java/broker/bin/qpid-passwd",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/bin/qpid-passwd?ref=3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c",
                "deletions": 0,
                "filename": "qpid/java/broker/bin/qpid-passwd",
                "patch": "@@ -18,4 +18,13 @@\n # under the License.\r\n #\r\n \r\n+# Set classpath to include Qpid jar with all required jars in manifest\r\n+QPID_LIBS=$QPID_HOME/lib/qpid-incubating.jar\r\n+\r\n+# Set other variables used by the qpid-run script before calling\r\n+export JAVA=java \\\r\n+       JAVA_VM=-server \\\r\n+       JAVA_MEM=-Xmx1024m \\\r\n+       QPID_CLASSPATH=$QPID_LIBS\r\n+\r\n . qpid-run org.apache.qpid.server.security.Passwd \"$@\"\r",
                "previous_filename": "qpid/java/broker/bin/passwd",
                "raw_url": "https://github.com/apache/qpid/raw/3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c/qpid/java/broker/bin/qpid-passwd",
                "sha": "6e64af6e7086d3f60411481e8647833f08e20a89",
                "status": "renamed"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java?ref=3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c",
                "deletions": 17,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java",
                "patch": "@@ -182,6 +182,7 @@ public boolean updatePassword(Principal principal, char[] password) throws Accou\n             try\n             {\n                 _userUpdate.lock();\n+                char[] orig = user.getPassword();\n                 user.setPassword(password);\n \n                 try\n@@ -192,6 +193,8 @@ public boolean updatePassword(Principal principal, char[] password) throws Accou\n                 {\n                     _logger.error(\"Unable to save password file, password change for user'\"\n                                   + principal + \"' will revert at restart\");\n+                    //revert the password change\n+                    user.setPassword(orig);\n                     return false;\n                 }\n                 return true;\n@@ -210,22 +213,6 @@ public boolean updatePassword(Principal principal, char[] password) throws Accou\n         }\n     }\n \n-    private char[] convertPassword(String password) throws UnsupportedEncodingException\n-    {\n-        byte[] passwdBytes = password.getBytes(DEFAULT_ENCODING);\n-\n-        char[] passwd = new char[passwdBytes.length];\n-\n-        int index = 0;\n-\n-        for (byte b : passwdBytes)\n-        {\n-            passwd[index++] = (char) b;\n-        }\n-\n-        return passwd;\n-    }\n-\n     public boolean createPrincipal(Principal principal, char[] password)\n     {\n         if (_users.get(principal.getName()) != null)\n@@ -247,9 +234,10 @@ public boolean createPrincipal(Principal principal, char[] password)\n             }\n             catch (IOException e)\n             {\n+                //remove the use on failure.\n+                _users.remove(user.getName());\n                 return false;\n             }\n-\n         }\n         finally\n         {",
                "raw_url": "https://github.com/apache/qpid/raw/3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java",
                "sha": "10adfdd9fc00e07eaaa6bea4c3c573e392875a58",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java?ref=3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java",
                "patch": "@@ -39,6 +39,7 @@\n import java.util.Map;\n import java.util.HashMap;\n import java.util.List;\n+import java.util.LinkedList;\n import java.security.Principal;\n \n /**\n@@ -157,7 +158,7 @@ public boolean deletePrincipal(Principal principal) throws AccountNotFoundExcept\n \n     public List<Principal> getUsers()\n     {\n-        return null; //todo\n+        return new LinkedList<Principal>(); //todo\n     }\n \n     public Principal getUser(String username)",
                "raw_url": "https://github.com/apache/qpid/raw/3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java",
                "sha": "c49f4e2a33580a0926e7279dbbab2c5a97174416",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java?ref=3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java",
                "patch": "@@ -31,6 +31,7 @@\n import java.util.Map;\n import java.util.HashMap;\n import java.util.List;\n+import java.util.LinkedList;\n import java.security.Principal;\n import java.io.IOException;\n import java.io.UnsupportedEncodingException;\n@@ -142,7 +143,7 @@ private boolean compareCharArray(char[] a, char[] b)\n \n     public List<Principal> getUsers()\n     {\n-        return null; //todo\n+        return new LinkedList<Principal>(); //todo\n     }\n \n     public Principal getUser(String username)",
                "raw_url": "https://github.com/apache/qpid/raw/3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java",
                "sha": "73d58ca48949bb123b9f97500d2cfba79c08e79f",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/qpid/blob/3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c/qpid/java/client/src/test/java/org/apache/qpid/client/MessageListenerTest.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/test/java/org/apache/qpid/client/MessageListenerTest.java?ref=3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c",
                "deletions": 23,
                "filename": "qpid/java/client/src/test/java/org/apache/qpid/client/MessageListenerTest.java",
                "patch": "@@ -63,17 +63,21 @@\n     private MessageConsumer _consumer;\n     private Connection _clientConnection;\n     private CountDownLatch _awaitMessages = new CountDownLatch(MSG_COUNT);\n+    private static final String BROKER = \"vm://:1\";\n+    private static final String VHOST = \"test\";\n \n     protected void setUp() throws Exception\n     {\n         super.setUp();\n-        TransportConnection.createVMBroker(1);\n-\n+        if (BROKER.contains(\"vm://\"))\n+        {\n+            TransportConnection.createVMBroker(1);\n+        }\n         InitialContextFactory factory = new PropertiesFileInitialContextFactory();\n \n         Hashtable<String, String> env = new Hashtable<String, String>();\n \n-        env.put(\"connectionfactory.connection\", \"amqp://guest:guest@MLT_ID/test?brokerlist='vm://:1'\");\n+        env.put(\"connectionfactory.connection\", \"amqp://guest:guest@MLT_ID/\" + VHOST + \"?brokerlist='\" + BROKER + \"'\");\n         env.put(\"queue.queue\", \"MessageListenerTest\");\n \n         _context = factory.getInitialContext(env);\n@@ -113,7 +117,10 @@ protected void tearDown() throws Exception\n         _clientConnection.close();\n \n         super.tearDown();\n-        TransportConnection.killAllVMBrokers();\n+        if (BROKER.contains(\"vm://\"))\n+        {\n+            TransportConnection.killAllVMBrokers();\n+        }\n     }\n \n \n@@ -145,34 +152,34 @@ public void testAsynchronousRecieve() throws Exception\n     }\n \n     public void testRecieveTheUseMessageListener() throws Exception\n-     {\n+    {\n \n-         _logger.error(\"Test disabled as initial receive is not called first\");\n-         // Perform initial receive to start connection\n+        _logger.error(\"Test disabled as initial receive is not called first\");\n+        // Perform initial receive to start connection\n //         assertTrue(_consumer.receive(2000) != null);\n //         receivedCount++;\n \n-         // Sleep to ensure remaining 4 msgs end up on _synchronousQueue\n+        // Sleep to ensure remaining 4 msgs end up on _synchronousQueue\n //         Thread.sleep(1000);\n \n-         // Set the message listener and wait for the messages to come in.\n-         _consumer.setMessageListener(this);\n+        // Set the message listener and wait for the messages to come in.\n+        _consumer.setMessageListener(this);\n \n-         _logger.info(\"Waiting 3 seconds for messages\");\n+        _logger.info(\"Waiting 3 seconds for messages\");\n+\n+        try\n+        {\n+            _awaitMessages.await(3000, TimeUnit.MILLISECONDS);\n+        }\n+        catch (InterruptedException e)\n+        {\n+            //do nothing\n+        }\n+        //Should have recieved all async messages\n+        assertEquals(MSG_COUNT, receivedCount);\n \n-         try\n-         {\n-             _awaitMessages.await(3000, TimeUnit.MILLISECONDS);\n-         }\n-         catch (InterruptedException e)\n-         {\n-             //do nothing\n-         }\n-         //Should have recieved all async messages\n-         assertEquals(MSG_COUNT, receivedCount);\n+    }\n \n-     }\n-    \n \n     public void onMessage(Message message)\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c/qpid/java/client/src/test/java/org/apache/qpid/client/MessageListenerTest.java",
                "sha": "b15742f3aa2c4f754d5c8d559fb184423cba4758",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c/qpid/java/common/bin/qpid-run",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/bin/qpid-run?ref=3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c",
                "deletions": 4,
                "filename": "qpid/java/common/bin/qpid-run",
                "patch": "@@ -70,7 +70,7 @@ if [ -n \"$QPID_LOG_PREFIX\" ]; then\n         echo Using qpid logprefix property\n         LOG_PREFIX=\" -Dlogprefix=$QPID_LOG_PREFIX\"\n     fi\n-    SYSTEM_PROPS+=$LOG_PREFIX\n+    SYSTEM_PROPS=\"${SYSTEM_PROPS} ${LOG_PREFIX}\"\n fi\n \n if [ -n \"$QPID_LOG_SUFFIX\" ]; then\n@@ -81,7 +81,7 @@ if [ -n \"$QPID_LOG_SUFFIX\" ]; then\n         echo Using qpig logsuffix property\n         LOG_SUFFIX=\" -Dlogsuffix=$QPID_LOG_SUFFIX\"\n     fi\n-    SYSTEM_PROPS+=$LOG_SUFFIX\n+    SYSTEM_PROPS=\"${SYSTEM_PROPS} ${LOG_SUFFIX}\"\n fi\n \n echo System Properties set to $SYSTEM_PROPS\n@@ -146,7 +146,7 @@ exclusive() {\n   if [ -z \"$PREVIOUS_ARGS\" ]; then\n     PREVIOUS_ARGS=$1\n   else\n-    PREVIOUS_ARGS+=\", $1\"\n+    PREVIOUS_ARGS=\"${PREVIOUS_ARGS}, $1\"\n     DISPATCH() {\n       die -usage \"you must choose one of: $PREVIOUS_ARGS\"\n     }\n@@ -168,7 +168,7 @@ for arg in \"${RUN_ARGS[@]}\"; do\n       if [ -z \"$JPDA_OPTS\" ]; then\n         JPDA_OPTS=\"-Xdebug -Xrunjdwp:transport=${JPDA_TRANSPORT:-dt_socket},address=${JPDA_ADDRESS:-8000},server=y,suspend=n\"\n       fi\n-      QPID_OPTS+=\" ${JPDA_OPTS}\"\n+      QPID_OPTS=\"${QPID_OPTS} ${JPDA_OPTS}\"\n       ;;\n     -run:external-classpath=*)\n #USAGE: controls how the CLASSPATH environment variable is used by",
                "raw_url": "https://github.com/apache/qpid/raw/3fb59b5bfef97f2a46b5a47e5beaed547e1fc14c/qpid/java/common/bin/qpid-run",
                "sha": "fc607529ee3fd7a73ca252f6e9c52f72c6cd8ee9",
                "status": "modified"
            }
        ],
        "message": "Merged revisions 533075-533079 via svnmerge from \nhttps://svn.apache.org/repos/asf/incubator/qpid/branches/M2\n\n........\n  r533075 | ritchiem | 2007-04-27 13:27:19 +0100 (Fri, 27 Apr 2007) | 2 lines\n  \n  QPID-473 Base64MD5PrincipalDatabase doesn't check password changes were applied to disk before storing in memory\n  Reversed the effects of the requested change if the changes cannot be persisted to disk\n........\n  r533077 | ritchiem | 2007-04-27 13:29:52 +0100 (Fri, 27 Apr 2007) | 3 lines\n  \n  Bin Updates: Qpid-Run removed new bash 3.x feature += replaced with option=\"${value1} ${value2}\" constructs to support older bash 2.x\n  renamed passwd qpid-passwd and fixed classpath loading errors.\n  Moved bdbbackup script to live with the bdb module.\n........\n  r533078 | ritchiem | 2007-04-27 13:30:07 +0100 (Fri, 27 Apr 2007) | 1 line\n  \n  Updated PrincipalDatabase implementations to return empty strings rather than null. As this causes NPE on MC.\n........\n  r533079 | ritchiem | 2007-04-27 13:31:03 +0100 (Fri, 27 Apr 2007) | 1 line\n  \n  Updated MLT to have variables that define the BROKER and VHOST used and White space\n........\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/qpid/trunk@533083 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/c266140028a3a4aa61b7ee1a557b768c9e0f21d8",
        "patched_files": [
            "qpid-run.java",
            "Base64MD5PasswordFilePrincipalDatabase.java",
            "qpid-passwd.java",
            "PlainPasswordFilePrincipalDatabase.java",
            "bdbbackup.java",
            "PropertiesPrincipalDatabase.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "MessageListenerTest.java"
        ]
    },
    "qpid_4fbd28b": {
        "bug_id": "qpid_4fbd28b",
        "commit": "https://github.com/apache/qpid/commit/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/cpp/Makefile.am",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/cpp/Makefile.am?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/cpp/Makefile.am",
                "patch": "@@ -4,7 +4,7 @@ ACLOCAL_AMFLAGS = -I m4\n SPEC=$(PACKAGE).spec\n \n EXTRA_DIST = \\\n-  LICENSE NOTICE README \\\n+  LICENSE NOTICE README RELEASE_NOTES\\\n   etc/qpidd \\\n   $(SPEC) $(SPEC).in \\\n   rpm/README.qpidd-devel \\",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/cpp/Makefile.am",
                "sha": "33508d450dd416b588d067591d298ef7ca10173e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/cpp/NOTICE",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/cpp/NOTICE?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 6,
                "filename": "qpid/cpp/NOTICE",
                "patch": "@@ -15,13 +15,11 @@ Aside from contributions to the Apache Qpid project, this software also\n includes (binary only):\n \t- None at this time\n \t\n-Project dependancies: \t\n- * apr version 1.2.7 under the Apache Software License, Version 2.0, and \n- \tcan be downloded from http://apr.apache.org\n+Project requires, not packaged: \t\n+ * apr version 1.2.7 or later under the Apache Software License, Version 2.0, \n+ \tand can be downloded from http://apr.apache.org\n \t\n- * boost vesrion 1.33.1 or later under the Boost Software License, and \n+ * boost version 1.33.1 or later under the Boost Software License, and \n  \tcan be downloaded from http://www.boost.org\n \t- Included in most OS platfroms by defualt.\n \n-             \n-",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/cpp/NOTICE",
                "sha": "cae69a873a557fa962be6a2ab257b514946f69a0",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/cpp/README",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/cpp/README?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/cpp/README",
                "patch": "@@ -41,8 +41,11 @@ Building on a platform other than Linux currently requires:\n Optional cluster functionality requires:\n  * openais <http://openais.org/> \t       (0.80.3)\n \n-Optionally building/running the tests requires:\n- * cppunit <http://cppunit.sourceforge.net>    (1.11.4)\n+ * apr     <http://apr.apache.org>          (1.2.7)\n+ * boost   <http://www.boost.org>           (1.33.1)\n+ * cppunit <http://cppunit.sourceforge.net> (1.11.4)\n+\n+Using tools:\n \n Qpid has been built using the gcc compiler:\n  * gcc     <http://gcc.gnu.org/>            (3.2.3)\n@@ -64,7 +67,7 @@ all of the above plus:\n On linux most packages can be installed using your distribution's package\n management tool. For example on Fedora:\n \n-  # yum install apr-devel boost-devel cppunit-devel e2fsprogs-devel\n+  # yum install apr-devel boost-devel cppunit-devel \n   # yum install pkgconfig doxygen graphviz help2man\n \n Follow the manual installation instruction below for any packages not",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/cpp/README",
                "sha": "5361d8aa61adf58a8e57dc77117a829435f4e596",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/cpp/RELEASE_NOTES",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/cpp/RELEASE_NOTES?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 0,
                "filename": "qpid/cpp/RELEASE_NOTES",
                "patch": "@@ -0,0 +1,41 @@\n+Apache Incubator Qpid C++ M2 Release Notes\n+-------------------------------------------\n+\n+The Qpid M2 release contains support the for AMQP 0-8 specification.\n+You can access the 0-8 specification using the following link.\n+http://www.amqp.org/tikiwiki/tiki-index.php?page=Download\n+\n+For full details of Qpid capabilities, as they currently stand, see our\n+detailed project documentation at:\n+\n+http://cwiki.apache.org/confluence/pages/viewpage.action?pageId=28284\n+\n+Please take time to go through the README file provided with the distro to get a good understanding about build system etc.\n+\n+\n+Known Issues\n+------------\n+\n+You can view the outstanding task list for Qpid by visiting our JIRA:\n+http://issues.apache.org/jira/browse/QPID\n+\n+Bug\t\tQPID-437 \tc++ broker doesn't obey the mandatory flag\n+\n+\n+M2 Tasks Completed\n+-------------------\n+\n+Test\t\tQPID-412 \tImplement initial C++ interop tests\n+Task\t\tQPID-124 \tConnect AMQP version from ProtocolInitiation object to all version-aware objects\n+\n+New Feature\tQPID-154 \tLogging/tracing for C++.\n+New Feature\tQPID-98 \timplement durable exchanges\n+New Feature\tQPID-41 \tPersistent storage for messages & durable queues\n+\n+Improvement\tQPID-450 \tC++ demos\n+Improvement\tQPID-64 \tC++ cluster design.\n+Improvement\tQPID-62 \tC++ event queue design.\n+\n+Bug\t\tQPID-481 \tc++ broker dosen't implement channel.flow\n+Bug\t\tQPID-467 \tComplete Interop Testing\n+Bug\t\tQPID-123 \tSporadic failure on Python tests",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/cpp/RELEASE_NOTES",
                "sha": "819539b1ec359c2a7d697f1650f8449624cd03c9",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer.Tests/Properties/AssemblyInfo.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer.Tests/Properties/AssemblyInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Buffer.Tests/Properties/AssemblyInfo.cs",
                "patch": "@@ -5,11 +5,11 @@\n // General Information about an assembly is controlled through the following \r\n // set of attributes. Change these attribute values to modify the information\r\n // associated with an assembly.\r\n-[assembly: AssemblyTitle(\"Qpid.Buffer.Tests\")]\r\n+[assembly: AssemblyTitle(\"Apache.Qpid.Buffer.Tests\")]\r\n [assembly: AssemblyDescription(\"\")]\r\n [assembly: AssemblyConfiguration(\"\")]\r\n [assembly: AssemblyCompany(\"\")]\r\n-[assembly: AssemblyProduct(\"Qpid.Buffer.Tests\")]\r\n+[assembly: AssemblyProduct(\"Apache.Qpid.Buffer.Tests\")]\r\n [assembly: AssemblyCopyright(\"Copyright \u00a9  2007\")]\r\n [assembly: AssemblyTrademark(\"\")]\r\n [assembly: AssemblyCulture(\"\")]\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer.Tests/Properties/AssemblyInfo.cs",
                "sha": "1191d499547f0e8eca9578298336e5dd128bed1e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer.Tests/Qpid.Buffer.Tests.csproj",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer.Tests/Qpid.Buffer.Tests.csproj?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Buffer.Tests/Qpid.Buffer.Tests.csproj",
                "patch": "@@ -7,8 +7,8 @@\n     <ProjectGuid>{74640962-99D0-4D06-B57A-9CD66517CF52}</ProjectGuid>\r\n     <OutputType>Library</OutputType>\r\n     <AppDesignerFolder>Properties</AppDesignerFolder>\r\n-    <RootNamespace>Qpid.Buffer.Tests</RootNamespace>\r\n-    <AssemblyName>Qpid.Buffer.Tests</AssemblyName>\r\n+    <RootNamespace>Apache.Qpid.Buffer.Tests</RootNamespace>\r\n+    <AssemblyName>Apache.Qpid.Buffer.Tests</AssemblyName>\r\n   </PropertyGroup>\r\n   <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n     <DebugSymbols>true</DebugSymbols>\r\n@@ -56,4 +56,4 @@\n   <Target Name=\"AfterBuild\">\r\n   </Target>\r\n   -->\r\n-</Project>\n\\ No newline at end of file\n+</Project>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer.Tests/Qpid.Buffer.Tests.csproj",
                "sha": "c3459aff29123a22975c85b690c1467e2267bcd5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer.Tests/SimpleByteBufferTests.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer.Tests/SimpleByteBufferTests.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Buffer.Tests/SimpleByteBufferTests.cs",
                "patch": "@@ -20,9 +20,9 @@\n  */\r\n \r\n using NUnit.Framework;\r\n-using Qpid.Buffer;\r\n+using Apache.Qpid.Buffer;\r\n \r\n-namespace Qpid.Buffer.Tests\r\n+namespace Apache.Qpid.Buffer.Tests\r\n {\r\n    /// <summary>\r\n    /// Tests for the SimpleByteBuffer class\r\n@@ -330,3 +330,4 @@ public void CanWriteByteBuffer()\n    } // class SimpleByteBufferTests\r\n }\r\n \r\n+\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer.Tests/SimpleByteBufferTests.cs",
                "sha": "9af880162799eb36a1c5afbee0b300801beedf3b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer.Tests/SlicedByteBufferTests.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer.Tests/SlicedByteBufferTests.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Buffer.Tests/SlicedByteBufferTests.cs",
                "patch": "@@ -21,9 +21,9 @@\n \r\n using System;\r\n using NUnit.Framework;\r\n-using Qpid.Buffer;\r\n+using Apache.Qpid.Buffer;\r\n \r\n-namespace Qpid.Buffer.Tests\r\n+namespace Apache.Qpid.Buffer.Tests\r\n {\r\n    /// <summary>\r\n    /// Tests for the SlicedByteBuffer class\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer.Tests/SlicedByteBufferTests.cs",
                "sha": "071aa23830f795c11670cbc12013737bb5e5af8b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer.Tests/default.build",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer.Tests/default.build?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Buffer.Tests/default.build",
                "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\"?>\r\n-<project name=\"Qpid.Buffer\" default=\"test\">\r\n+<project name=\"Apache.Qpid.Buffer\" default=\"test\">\r\n \r\n    <target name=\"build\">\r\n         <csc target=\"library\" \r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer.Tests/default.build",
                "sha": "688633fc11bc9ff3da17a5f20645d1c59b14c99f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/BufferOverflowException.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer/BufferOverflowException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Buffer/BufferOverflowException.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid.Buffer\n+namespace Apache.Qpid.Buffer\n {\n     [Serializable]\n     public class BufferOverflowException : Exception\n@@ -38,3 +38,4 @@ protected BufferOverflowException(SerializationInfo info, StreamingContext ctxt)\n }\n \n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/BufferOverflowException.cs",
                "sha": "5a2fff74a781814f8e9e2d893d4a68337abb3ae2",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/BufferUnderflowException.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer/BufferUnderflowException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Buffer/BufferUnderflowException.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid.Buffer\n+namespace Apache.Qpid.Buffer\n {\n     [Serializable]\n     public class BufferUnderflowException : Exception\n@@ -39,3 +39,4 @@ protected BufferUnderflowException(SerializationInfo info, StreamingContext ctxt\n }\n \n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/BufferUnderflowException.cs",
                "sha": "13939b77a856b858a6bfae98ffd2ab3b3d5371ad",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/ByteBuffer.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer/ByteBuffer.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Buffer/ByteBuffer.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System;\n \n-namespace Qpid.Buffer\n+namespace Apache.Qpid.Buffer\n {\n    /// <summary>\n    /// Abstract class implementing a byte buffer",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/ByteBuffer.cs",
                "sha": "67f0edd440805fe3853e411cc080cc9280aa3866",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/ByteBufferHexDumper.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer/ByteBufferHexDumper.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Buffer/ByteBufferHexDumper.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System.Text;\n \n-namespace Qpid.Buffer\n+namespace Apache.Qpid.Buffer\n {\n     public class ByteBufferHexDumper\n     {\n@@ -76,3 +76,4 @@ public static string GetHexDump(ByteBuffer input)\n }\n \n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/ByteBufferHexDumper.cs",
                "sha": "4c2856c333948c6971e72f8c685a9c5c1a0ab5cc",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/IByteBufferAllocator.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer/IByteBufferAllocator.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Buffer/IByteBufferAllocator.cs",
                "patch": "@@ -21,7 +21,7 @@\n \r\n using System;\r\n \r\n-namespace Qpid.Buffer\r\n+namespace Apache.Qpid.Buffer\r\n {\r\n    /// <summary>\r\n    /// Allocates <see cref=\"ByteBuffer\"/>'s and manages them. Please \r\n@@ -47,3 +47,4 @@ public interface IByteBufferAllocator : IDisposable\n }\r\n \r\n \r\n+\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/IByteBufferAllocator.cs",
                "sha": "0f457df065cb568fc72ee85b4ad7a216f06b360c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/Properties/AssemblyInfo.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer/Properties/AssemblyInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Buffer/Properties/AssemblyInfo.cs",
                "patch": "@@ -23,11 +23,11 @@\n // General Information about an assembly is controlled through the following \n // set of attributes. Change these attribute values to modify the information\n // associated with an assembly.\n-[assembly: AssemblyTitle(\"Qpid.ByteBuffer\")]\n+[assembly: AssemblyTitle(\"Apache.Qpid.ByteBuffer\")]\n [assembly: AssemblyDescription(\"\")]\n [assembly: AssemblyConfiguration(\"\")]\n [assembly: AssemblyCompany(\"Apache Qpid\")]\n-[assembly: AssemblyProduct(\"Qpid.ByteBuffer\")]\n+[assembly: AssemblyProduct(\"Apache.Qpid.ByteBuffer\")]\n [assembly: AssemblyCopyright(\"Copyright (c) 2006 The Apache Software Foundation\")]\n [assembly: AssemblyTrademark(\"\")]\n [assembly: AssemblyCulture(\"\")]",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/Properties/AssemblyInfo.cs",
                "sha": "4dd92ccdc24121744ee070e7e751066b43dbd4f1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/Qpid.Buffer.csproj",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer/Qpid.Buffer.csproj?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Buffer/Qpid.Buffer.csproj",
                "patch": "@@ -7,8 +7,8 @@\n     <ProjectGuid>{44384DF2-B0A4-4580-BDBC-EE4BAA87D995}</ProjectGuid>\r\n     <OutputType>Library</OutputType>\r\n     <AppDesignerFolder>Properties</AppDesignerFolder>\r\n-    <RootNamespace>Qpid.Buffer</RootNamespace>\r\n-    <AssemblyName>Qpid.Buffer</AssemblyName>\r\n+    <RootNamespace>Apache.Qpid.Buffer</RootNamespace>\r\n+    <AssemblyName>Apache.Qpid.Buffer</AssemblyName>\r\n     <SignAssembly>true</SignAssembly>\r\n     <AssemblyOriginatorKeyFile>\r\n     </AssemblyOriginatorKeyFile>\r\n@@ -56,4 +56,4 @@\n   <Target Name=\"AfterBuild\">\r\n   </Target>\r\n   -->\r\n-</Project>\n\\ No newline at end of file\n+</Project>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/Qpid.Buffer.csproj",
                "sha": "9320438f6fa8d2afd28b083c0920b2dd7cdb2fa4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/SimpleByteBuffer.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer/SimpleByteBuffer.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Buffer/SimpleByteBuffer.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\r\n using System;\r\n \r\n-namespace Qpid.Buffer\r\n+namespace Apache.Qpid.Buffer\r\n {\r\n    internal sealed class SimpleByteBuffer : ByteBuffer\r\n    {\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/SimpleByteBuffer.cs",
                "sha": "d3b7245cb1b0d1bf8a3d26ef5556afbbe586b631",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/SimpleByteBufferAllocator.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer/SimpleByteBufferAllocator.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Buffer/SimpleByteBufferAllocator.cs",
                "patch": "@@ -19,7 +19,7 @@\n  *\n  */\n \n-namespace Qpid.Buffer\n+namespace Apache.Qpid.Buffer\n {\n    /// <summary>\n    /// Allocates <see cref=\"ByteBuffer\"/>'s and manages them. \n@@ -55,3 +55,4 @@ public void Dispose()\n }\n \n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/SimpleByteBufferAllocator.cs",
                "sha": "e772e59ae325cc6e041212ae9cdfc8b94c0c05b1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/SlicedByteBuffer.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer/SlicedByteBuffer.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Buffer/SlicedByteBuffer.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\r\n using System;\r\n \r\n-namespace Qpid.Buffer\r\n+namespace Apache.Qpid.Buffer\r\n {\r\n    internal sealed class SlicedByteBuffer : ByteBuffer\r\n    {\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/SlicedByteBuffer.cs",
                "sha": "c27b7949b6696dcd126665886838972965683f5e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/default.build",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Buffer/default.build?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Buffer/default.build",
                "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\"?>\r\n-<project name=\"Qpid.Buffer\" default=\"build\">\r\n+<project name=\"Apache.Qpid.Buffer\" default=\"build\">\r\n     <!--\r\n \t\tProperties that come from master build file\r\n \t\t- build.dir: root directory for build\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Buffer/default.build",
                "sha": "c2d36d15e6ca1ae4e097ad9253ca4eb021a7fc21",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/App.config",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/App.config?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client.Tests/App.config",
                "patch": "@@ -2,12 +2,12 @@\n <configuration>\r\n    <configSections>\r\n       <sectionGroup name=\"qpid.client\">\r\n-         <section name=\"authentication\" type=\"Qpid.Client.Configuration.AuthenticationConfigurationSectionHandler, Qpid.Client\"/>\r\n+         <section name=\"authentication\" type=\"Apache.Qpid.Client.Configuration.AuthenticationConfigurationSectionHandler, Apache.Qpid.Client\"/>\r\n       </sectionGroup>\r\n    </configSections>\r\n    <qpid.client>\r\n       <authentication>\r\n-         <add key=\"TEST\" value=\"Qpid.Client.Tests.Security.TestCallbackHandler, Qpid.Client.Tests\"/>\r\n+         <add key=\"TEST\" value=\"Apache.Qpid.Client.Tests.Security.TestCallbackHandler, Apache.Qpid.Client.Tests\"/>\r\n       </authentication>\r\n    </qpid.client>\r\n </configuration>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/App.config",
                "sha": "fd7c412a5707c7221ef9f4fc255c95a791085fe0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/BrokerDetails/BrokerDetailsTest.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/BrokerDetails/BrokerDetailsTest.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client.Tests/BrokerDetails/BrokerDetailsTest.cs",
                "patch": "@@ -21,9 +21,9 @@\n using System;\r\n using System.Net;\r\n using NUnit.Framework;\r\n-using Qpid.Client.Qms;\r\n+using Apache.Qpid.Client.Qms;\r\n \r\n-namespace Qpid.Client.Tests.BrokerDetails\r\n+namespace Apache.Qpid.Client.Tests.BrokerDetails\r\n {\r\n     [TestFixture]\r\n     public class BrokerDetailsTest\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/BrokerDetails/BrokerDetailsTest.cs",
                "sha": "8e8d8ced3bee3028e521319076795996d3f6d68f",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/Channel/ChannelMessageCreationTests.cs",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/Channel/ChannelMessageCreationTests.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client.Tests/Channel/ChannelMessageCreationTests.cs",
                "patch": "@@ -23,11 +23,11 @@\n \r\n using log4net;\r\n using NUnit.Framework;\r\n-using Qpid.Client;\r\n-using Qpid.Client.Message;\r\n-using Qpid.Messaging;\r\n+using Apache.Qpid.Client;\r\n+using Apache.Qpid.Client.Message;\r\n+using Apache.Qpid.Messaging;\r\n \r\n-namespace Qpid.Client.Tests.Channel\r\n+namespace Apache.Qpid.Client.Tests.Channel\r\n {\r\n    /// <summary>\r\n    /// Test that channels can create messages correctly\r\n@@ -74,5 +74,6 @@ public void CanCreateMessageFromMimeType()\n          Assert.IsInstanceOfType(typeof(ITextMessage), msg);\r\n       }\r\n    }\r\n-} // namespace Qpid.Client.Tests.Channel\r\n+} // namespace Apache.Qpid.Client.Tests.Channel\r\n+\r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/Channel/ChannelMessageCreationTests.cs",
                "sha": "c27aa9a50371c1fcb4894da1b25503c5206e3015",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/Channel/ChannelQueueTest.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/Channel/ChannelQueueTest.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/Channel/ChannelQueueTest.cs",
                "patch": "@@ -22,11 +22,11 @@\n using System.Net;\r\n using System.Threading;\r\n using log4net;\r\n-using Qpid.Client.Qms;\r\n-using Qpid.Messaging;\r\n+using Apache.Qpid.Client.Qms;\r\n+using Apache.Qpid.Messaging;\r\n using NUnit.Framework;\r\n \r\n-namespace Qpid.Client.Tests.Channel\r\n+namespace Apache.Qpid.Client.Tests.Channel\r\n {\r\n     /// <summary>\r\n     /// Test the queue methods\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/Channel/ChannelQueueTest.cs",
                "sha": "a9a39f87f8f7c92dd73f9c4815554eebaa582bc4",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/Common/BaseMessagingTestFixture.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/Common/BaseMessagingTestFixture.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Client.Tests/Common/BaseMessagingTestFixture.cs",
                "patch": "@@ -21,10 +21,10 @@\n using System;\n using log4net;\n using NUnit.Framework;\n-using Qpid.Messaging;\n-using Qpid.Client.Qms;\n+using Apache.Qpid.Messaging;\n+using Apache.Qpid.Client.Qms;\n \n-namespace Qpid.Client.Tests\n+namespace Apache.Qpid.Client.Tests\n {\n     /// <summary>\n     /// Provides a basis for writing Unit tests that communicate with an AMQ protocol broker. By default it creates a connection\n@@ -56,7 +56,7 @@ public virtual void Init()\n             {\n                 IConnectionInfo connectionInfo = QpidConnectionInfo.FromUrl(connectionUri);               \n                 _connection = new AMQConnection(connectionInfo);\n-                _channel = _connection.CreateChannel(false, AcknowledgeMode.NoAcknowledge, 1);\n+                _channel = _connection.CreateChannel(false, AcknowledgeMode.NoAcknowledge, 500, 300);\n             }\n             catch (QpidException e)\n             {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/Common/BaseMessagingTestFixture.cs",
                "sha": "9f919580286f5e419bf9b2c6d87b19e2b1a77da8",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/HeadersExchange/HeadersExchangeTest.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/HeadersExchange/HeadersExchangeTest.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/HeadersExchange/HeadersExchangeTest.cs",
                "patch": "@@ -22,10 +22,10 @@\n using System.Threading;\r\n using log4net;\r\n using NUnit.Framework;\r\n-using Qpid.Framing;\r\n-using Qpid.Messaging;\r\n+using Apache.Qpid.Framing;\r\n+using Apache.Qpid.Messaging;\r\n \r\n-namespace Qpid.Client.Tests\r\n+namespace Apache.Qpid.Client.Tests\r\n {\r\n     /// <summary>\r\n     /// Sets up a producer/consumer pair to send test messages through a header exchange. The header exchange matching pattern is tested to\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/HeadersExchange/HeadersExchangeTest.cs",
                "sha": "f3ce695de8b1ade8e736e842e7c1fe0e0f3ec74d",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/Messages/MessageFactoryRegistryTests.cs",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/Messages/MessageFactoryRegistryTests.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Client.Tests/Messages/MessageFactoryRegistryTests.cs",
                "patch": "@@ -23,10 +23,10 @@\n \r\n using log4net;\r\n using NUnit.Framework;\r\n-using Qpid.Messaging;\r\n-using Qpid.Client.Message;\r\n+using Apache.Qpid.Messaging;\r\n+using Apache.Qpid.Client.Message;\r\n \r\n-namespace Qpid.Client.Tests.Messages\r\n+namespace Apache.Qpid.Client.Tests.Messages\r\n {\r\n    /// <summary>\r\n    /// Ensure a factory creates messages correctly\r\n@@ -109,5 +109,6 @@ public void TextMessagesDefaultToUTF8Encoding()\n       }\r\n \r\n    }\r\n-} // namespace Qpid.Client.Tests.Messages\r\n+} // namespace Apache.Qpid.Client.Tests.Messages\r\n+\r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/Messages/MessageFactoryRegistryTests.cs",
                "sha": "12111965418a9b4f0d2472443eb36dc4ecb9947c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/MultiConsumer/ProducerMultiConsumer.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/MultiConsumer/ProducerMultiConsumer.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client.Tests/MultiConsumer/ProducerMultiConsumer.cs",
                "patch": "@@ -23,9 +23,9 @@\n using System.Threading;\n using log4net;\n using NUnit.Framework;\n-using Qpid.Messaging;\n+using Apache.Qpid.Messaging;\n \n-namespace Qpid.Client.Tests\n+namespace Apache.Qpid.Client.Tests\n {\n     [TestFixture]\n     public class ProducerMultiConsumer : BaseMessagingTestFixture",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/MultiConsumer/ProducerMultiConsumer.cs",
                "sha": "dc3b436a415a7fb9ed8bd3208c31758d28eb624e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/Properties/AssemblyInfo.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/Properties/AssemblyInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client.Tests/Properties/AssemblyInfo.cs",
                "patch": "@@ -26,11 +26,11 @@\n // General Information about an assembly is controlled through the following \n // set of attributes. Change these attribute values to modify the information\n // associated with an assembly.\n-[assembly: AssemblyTitle(\"Qpid.Client.Tests\")]\n+[assembly: AssemblyTitle(\"Apache.Qpid.Client.Tests\")]\n [assembly: AssemblyDescription(\"Test Suite for Qpid Clients\")]\n [assembly: AssemblyConfiguration(\"\")]\n [assembly: AssemblyCompany(\"Apache Qpid\")]\n-[assembly: AssemblyProduct(\"Qpid.Client.Tests\")]\n+[assembly: AssemblyProduct(\"Apache.Qpid.Client.Tests\")]\n [assembly: AssemblyCopyright(\"Copyright (c) 2006 The Apache Software Foundation\")]\n [assembly: AssemblyTrademark(\"\")]\n [assembly: AssemblyCulture(\"\")]",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/Properties/AssemblyInfo.cs",
                "sha": "b3648391c137d770bbd7960d3092c78a4573f5f1",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/Qpid.Client.Tests.csproj",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/Qpid.Client.Tests.csproj?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/Qpid.Client.Tests.csproj",
                "patch": "@@ -7,8 +7,8 @@\n     <ProjectGuid>{BA1B0032-4CE6-40DD-A2DC-119F0FFA0A1D}</ProjectGuid>\r\n     <OutputType>Library</OutputType>\r\n     <AppDesignerFolder>Properties</AppDesignerFolder>\r\n-    <RootNamespace>Qpid.Client.Tests</RootNamespace>\r\n-    <AssemblyName>Qpid.Client.Tests</AssemblyName>\r\n+    <RootNamespace>Apache.Qpid.Client.Tests</RootNamespace>\r\n+    <AssemblyName>Apache.Qpid.Client.Tests</AssemblyName>\r\n     <StartupObject>\r\n     </StartupObject>\r\n   </PropertyGroup>\r\n@@ -71,6 +71,10 @@\n     <Compile Include=\"url\\ConnectionUrlTest.cs\" />\r\n   </ItemGroup>\r\n   <ItemGroup>\r\n+    <ProjectReference Include=\"..\\Qpid.Buffer\\Qpid.Buffer.csproj\">\r\n+      <Project>{44384DF2-B0A4-4580-BDBC-EE4BAA87D995}</Project>\r\n+      <Name>Qpid.Buffer</Name>\r\n+    </ProjectReference>\r\n     <ProjectReference Include=\"..\\Qpid.Messaging\\Qpid.Messaging.csproj\">\r\n       <Project>{6688F826-C58E-4C1B-AA1F-22AFAB4B7D07}</Project>\r\n       <Name>Qpid.Messaging</Name>\r\n@@ -107,4 +111,4 @@\n   <Target Name=\"AfterBuild\">\r\n   </Target>\r\n   -->\r\n-</Project>\n\\ No newline at end of file\n+</Project>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/Qpid.Client.Tests.csproj",
                "sha": "a1a34d480dff1d333a519d5edbb47f57ce6e3032",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/Security/CallbackHandlerRegistryTests.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/Security/CallbackHandlerRegistryTests.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/Security/CallbackHandlerRegistryTests.cs",
                "patch": "@@ -20,10 +20,10 @@\n  */\r\n using System;\r\n using NUnit.Framework;\r\n-using Qpid.Client.Security;\r\n+using Apache.Qpid.Client.Security;\r\n \r\n \r\n-namespace Qpid.Client.Tests.Security\r\n+namespace Apache.Qpid.Client.Tests.Security\r\n {\r\n    [TestFixture]\r\n    public class CallbackRegistryHandlerTests\r\n@@ -63,4 +63,4 @@ public void Handle(Qpid.Sasl.ISaslCallback[] callbacks)\n \r\n    } // class TestCallbackHandler\r\n \r\n-} // namespace Qpid.Client.Tests.Connection\r\n+} // namespace Apache.Qpid.Client.Tests.Connection\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/Security/CallbackHandlerRegistryTests.cs",
                "sha": "1345511cbfaf7e90bc86a64f274a5a9493651c0a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/SimpleConsumer/TestSyncConsumer.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/SimpleConsumer/TestSyncConsumer.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/SimpleConsumer/TestSyncConsumer.cs",
                "patch": "@@ -23,9 +23,9 @@\n using System.Threading;\r\n using log4net;\r\n using NUnit.Framework;\r\n-using Qpid.Messaging;\r\n+using Apache.Qpid.Messaging;\r\n \r\n-namespace Qpid.Client.Tests\r\n+namespace Apache.Qpid.Client.Tests\r\n {\r\n    [TestFixture]\r\n    public class TestSyncConsumer : BaseMessagingTestFixture\r\n@@ -96,7 +96,7 @@ public void ReceiveWithInfiniteWait()\n             _publisher.Send(msg);\r\n          }\r\n \r\n-         _logger.Error(\"All messages sent\");\r\n+         _logger.Debug(\"All messages sent\");\r\n          // receive all messages\r\n          for ( int i = 0; i < MESSAGE_COUNT; i++ )\r\n          {\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/SimpleConsumer/TestSyncConsumer.cs",
                "sha": "f2998129896e2e9d52524e431639164d718c5a72",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/connection/ConnectionTest.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/connection/ConnectionTest.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/connection/ConnectionTest.cs",
                "patch": "@@ -20,10 +20,10 @@\n  */\n using System;\n using NUnit.Framework;\n-using Qpid.Client.Qms;\n-using Qpid.Messaging;\n+using Apache.Qpid.Client.Qms;\n+using Apache.Qpid.Messaging;\n \n-namespace Qpid.Client.Tests.Connection\n+namespace Apache.Qpid.Client.Tests.Connection\n {\n     [TestFixture]\n     public class ConnectionTest",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/connection/ConnectionTest.cs",
                "sha": "165da628286f3bf16960ffada401f81fda9728be",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/connection/SslConnectionTest.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/connection/SslConnectionTest.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/connection/SslConnectionTest.cs",
                "patch": "@@ -23,10 +23,10 @@\n using System.Reflection;\r\n using System.Security.Cryptography.X509Certificates;\r\n using NUnit.Framework;\r\n-using Qpid.Client.Qms;\r\n-using Qpid.Messaging;\r\n+using Apache.Qpid.Client.Qms;\r\n+using Apache.Qpid.Messaging;\r\n \r\n-namespace Qpid.Client.Tests.Connection\r\n+namespace Apache.Qpid.Client.Tests.Connection\r\n {\r\n    /// <summary>\r\n    /// Test SSL/TLS connections to the broker\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/connection/SslConnectionTest.cs",
                "sha": "e1c61f90599d0b65900c569d57b4c029e0a93e36",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/default.build",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/default.build?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Client.Tests/default.build",
                "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\"?>\n-<project name=\"Qpid.Client\" default=\"test\">\n+<project name=\"Apache.Qpid.Client\" default=\"test\">\n \n    <target name=\"build\">\n         <csc target=\"library\" \n@@ -14,9 +14,9 @@\n                <include name=\"${build.dir}/log4net.dll\" />\n                <include name=\"${build.dir}/nunit.framework.dll\" />\n                <include name=\"${build.dir}/${project::get-name()}.dll\" />\n-               <include name=\"${build.dir}/Qpid.Common.dll\" />\n-               <include name=\"${build.dir}/Qpid.Messaging.dll\" />\n-               <include name=\"${build.dir}/Qpid.Sasl.dll\" />\n+               <include name=\"${build.dir}/Apache.Qpid.Common.dll\" />\n+               <include name=\"${build.dir}/Apache.Qpid.Messaging.dll\" />\n+               <include name=\"${build.dir}/Apache.Qpid.Sasl.dll\" />\n             </references>\n         </csc>\n          <copy ",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/default.build",
                "sha": "e7fb81dae5dac7b0e275e7ca4430b73a25760bcf",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/failover/FailoverTest.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/failover/FailoverTest.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/failover/FailoverTest.cs",
                "patch": "@@ -22,10 +22,10 @@\n using System.Threading;\n using log4net;\n using NUnit.Framework;\n-using Qpid.Client.Qms;\n-using Qpid.Messaging;\n+using Apache.Qpid.Client.Qms;\n+using Apache.Qpid.Messaging;\n \n-namespace Qpid.Client.Tests.failover\n+namespace Apache.Qpid.Client.Tests.failover\n {\n     [TestFixture, Category(\"Failover\")]\n     public class FailoverTest : IConnectionListener",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/failover/FailoverTest.cs",
                "sha": "1f1e2f726c281902ffbb95d79e74dec5f73aa664",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/failover/FailoverTxTest.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/failover/FailoverTxTest.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/failover/FailoverTxTest.cs",
                "patch": "@@ -23,10 +23,10 @@\n using System.Threading;\n using log4net;\n using NUnit.Framework;\n-using Qpid.Client.Qms;\n-using Qpid.Messaging;\n+using Apache.Qpid.Client.Qms;\n+using Apache.Qpid.Messaging;\n \n-namespace Qpid.Client.Tests.failover\n+namespace Apache.Qpid.Client.Tests.failover\n {\n     [TestFixture, Category(\"Failover\")]\n     public class FailoverTxTest : IConnectionListener",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/failover/FailoverTxTest.cs",
                "sha": "a110891cfc52bea11cc48f1efdb26b7bcb458348",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/interop/InteropClientTestCase.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/interop/InteropClientTestCase.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/interop/InteropClientTestCase.cs",
                "patch": "@@ -1,9 +1,8 @@\n using System;\r\n-using System.Collections.Generic;\r\n using System.Text;\r\n-using Qpid.Messaging;\r\n+using Apache.Qpid.Messaging;\r\n \r\n-namespace Qpid.Client.Tests.interop\r\n+namespace Apache.Qpid.Client.Tests.interop\r\n {\r\n     /// <summary> Defines the possible test case roles that an interop test case can take on. </summary>\r\n     public enum Roles { SENDER, RECEIVER };\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/interop/InteropClientTestCase.cs",
                "sha": "a667265ba40fbdd14b5d66267274cbbb65b38758",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/interop/TestCases/TestCase1DummyRun.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/interop/TestCases/TestCase1DummyRun.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/interop/TestCases/TestCase1DummyRun.cs",
                "patch": "@@ -1,10 +1,9 @@\n using System;\r\n-using System.Collections.Generic;\r\n using System.Text;\r\n using log4net;\r\n-using Qpid.Messaging;\r\n+using Apache.Qpid.Messaging;\r\n \r\n-namespace Qpid.Client.Tests.interop.TestCases\r\n+namespace Apache.Qpid.Client.Tests.interop.TestCases\r\n {\r\n     /// <summary>\r\n     /// Implements tet case 1, dummy run. This test case sends no test messages, it exists to confirm that the test harness\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/interop/TestCases/TestCase1DummyRun.cs",
                "sha": "7ff686e1cb92b09033a5a3437b395dafe270dbd1",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/interop/TestCases/TestCase2BasicP2P.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/interop/TestCases/TestCase2BasicP2P.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/interop/TestCases/TestCase2BasicP2P.cs",
                "patch": "@@ -1,10 +1,9 @@\n using System;\r\n-using System.Collections.Generic;\r\n using System.Text;\r\n using log4net;\r\n-using Qpid.Messaging;\r\n+using Apache.Qpid.Messaging;\r\n \r\n-namespace Qpid.Client.Tests.interop.TestCases\r\n+namespace Apache.Qpid.Client.Tests.interop.TestCases\r\n {\r\n     /// <summary>\r\n     /// Implements test case 2, basic P2P. Sends/receives a specified number of messages to a specified route on the\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/interop/TestCases/TestCase2BasicP2P.cs",
                "sha": "bc4501dea4a4117ecc3fbba073eab0abd06d955d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/interop/TestCases/TestCase3BasicPubSub.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/interop/TestCases/TestCase3BasicPubSub.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/interop/TestCases/TestCase3BasicPubSub.cs",
                "patch": "@@ -1,10 +1,9 @@\n using System;\r\n-using System.Collections.Generic;\r\n using System.Text;\r\n using log4net;\r\n-using Qpid.Messaging;\r\n+using Apache.Qpid.Messaging;\r\n \r\n-namespace Qpid.Client.Tests.interop.TestCases\r\n+namespace Apache.Qpid.Client.Tests.interop.TestCases\r\n {\r\n     /// <summary>\r\n     /// Implements test case 3, basic pub/sub. Sends/received a specified number of messages to a specified route on the\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/interop/TestCases/TestCase3BasicPubSub.cs",
                "sha": "4e3dd6e53e6e09253ee4f66a02d2a0a23295dc76",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/interop/TestClient.cs",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/interop/TestClient.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client.Tests/interop/TestClient.cs",
                "patch": "@@ -1,13 +1,12 @@\n using System;\r\n-using System.Collections.Generic;\r\n using System.Collections;\r\n using System.Text;\r\n-using Qpid.Messaging;\r\n-using Qpid.Client.Qms;\r\n+using Apache.Qpid.Messaging;\r\n+using Apache.Qpid.Client.Qms;\r\n using log4net;\r\n-using Qpid.Client.Tests.interop.TestCases;\r\n+using Apache.Qpid.Client.Tests.interop.TestCases;\r\n \r\n-namespace Qpid.Client.Tests.interop\r\n+namespace Apache.Qpid.Client.Tests.interop\r\n {\r\n     /// <summary>\r\n     /// Implements a test client as described in the interop testing spec\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/interop/TestClient.cs",
                "sha": "b15f7fbda9cf404c920a8d88568d8791e9c0f919",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/interop/TopicListener.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/interop/TopicListener.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/interop/TopicListener.cs",
                "patch": "@@ -20,10 +20,10 @@\n  */\r\n using System;\r\n using log4net;\r\n-using Qpid.Messaging;\r\n-using Qpid.Client.Qms;\r\n+using Apache.Qpid.Messaging;\r\n+using Apache.Qpid.Client.Qms;\r\n \r\n-namespace Qpid.Client.Tests.interop\r\n+namespace Apache.Qpid.Client.Tests.interop\r\n {\r\n     public class TopicListener\r\n     {\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/interop/TopicListener.cs",
                "sha": "13141d52b8941e630027b99d33adaf74763519de",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/interop/TopicPublisher.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/interop/TopicPublisher.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Tests/interop/TopicPublisher.cs",
                "patch": "@@ -1,10 +1,10 @@\n using System;\r\n using System.Threading;\r\n using log4net;\r\n-using Qpid.Messaging;\r\n-using Qpid.Client.Qms;\r\n+using Apache.Qpid.Messaging;\r\n+using Apache.Qpid.Client.Qms;\r\n \r\n-namespace Qpid.Client.Tests.interop\r\n+namespace Apache.Qpid.Client.Tests.interop\r\n {\r\n     public class TopicPublisher\r\n     {\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/interop/TopicPublisher.cs",
                "sha": "ef5d39f0bc90b3611886b99419e0cd99052e0723",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/requestreply1/ServiceProvidingClient.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/requestreply1/ServiceProvidingClient.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client.Tests/requestreply1/ServiceProvidingClient.cs",
                "patch": "@@ -22,9 +22,9 @@\n using System.Threading;\n using log4net;\n using NUnit.Framework;\n-using Qpid.Messaging;\n+using Apache.Qpid.Messaging;\n \n-namespace Qpid.Client.Tests\n+namespace Apache.Qpid.Client.Tests\n {\n     [TestFixture]\n     public class ServiceProvidingClient : BaseMessagingTestFixture",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/requestreply1/ServiceProvidingClient.cs",
                "sha": "cbc93ae2fe1a21813ff793de97cd6ae01088cda7",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/requestreply1/ServiceRequestingClient.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/requestreply1/ServiceRequestingClient.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client.Tests/requestreply1/ServiceRequestingClient.cs",
                "patch": "@@ -22,9 +22,9 @@\n using System.Threading;\n using log4net;\n using NUnit.Framework;\n-using Qpid.Messaging;\n+using Apache.Qpid.Messaging;\n \n-namespace Qpid.Client.Tests\n+namespace Apache.Qpid.Client.Tests\n {\n     public class ServiceRequestingClient : BaseMessagingTestFixture\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/requestreply1/ServiceRequestingClient.cs",
                "sha": "f35fb2dac9baf6e9662fb8db1bcfadb5d6ad6237",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/undeliverable/UndeliverableTest.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/undeliverable/UndeliverableTest.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client.Tests/undeliverable/UndeliverableTest.cs",
                "patch": "@@ -22,9 +22,9 @@\n using System.Threading;\n using log4net;\n using NUnit.Framework;\n-using Qpid.Messaging;\n+using Apache.Qpid.Messaging;\n \n-namespace Qpid.Client.Tests\n+namespace Apache.Qpid.Client.Tests\n {\n    /// <summary>\n    /// Tests that when sending undeliverable messages with the ",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/undeliverable/UndeliverableTest.cs",
                "sha": "bcf57e586eed10f261234d602e9ba437dd84cbc1",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/url/ConnectionUrlTest.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Tests/url/ConnectionUrlTest.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client.Tests/url/ConnectionUrlTest.cs",
                "patch": "@@ -21,9 +21,9 @@\n using System;\n using System.Net;\n using NUnit.Framework;\n-using Qpid.Client.Qms;\n+using Apache.Qpid.Client.Qms;\n \n-namespace Qpid.Client.Tests.url\n+namespace Apache.Qpid.Client.Tests.url\n {\n     [TestFixture]\n     public class connectionUrlTests",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Tests/url/ConnectionUrlTest.cs",
                "sha": "3c9f8dd4e27b8db9359b44e75cfdc4aecd82cc24",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/BlockingSocketProcessor.cs",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/BlockingSocketProcessor.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/BlockingSocketProcessor.cs",
                "patch": "@@ -22,10 +22,10 @@\n using System.Net;\n using System.Net.Sockets;\n using log4net;\n-using Qpid.Buffer;\n-using Qpid.Client.Protocol;\n+using Apache.Qpid.Buffer;\n+using Apache.Qpid.Client.Protocol;\n \n-namespace Qpid.Client.Transport.Socket.Blocking\n+namespace Apache.Qpid.Client.Transport.Socket.Blocking\n {\n     class BlockingSocketProcessor : IConnectionCloser\n     {\n@@ -114,3 +114,4 @@ public IByteChannel ByteChannel\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/BlockingSocketProcessor.cs",
                "sha": "badaa481116107f334d77bf95e9d6b74e8878acd",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/BlockingSocketTransport.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/BlockingSocketTransport.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/BlockingSocketTransport.cs",
                "patch": "@@ -22,8 +22,8 @@\n using System.Collections;\n using System.Threading;\n using log4net;\n-using Qpid.Client.Protocol;\n-using Qpid.Framing;\n+using Apache.Qpid.Client.Protocol;\n+using Apache.Qpid.Framing;\n \n namespace Qpid.Client.Transport.Socket.Blocking\n {\n@@ -118,3 +118,4 @@ public void Stop()\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/BlockingSocketTransport.cs",
                "sha": "17f911fb6dca2d44ec5af8011e3f7fefaa504ac6",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/ByteChannel.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/ByteChannel.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/ByteChannel.cs",
                "patch": "@@ -20,9 +20,9 @@\n  */\n using System;\n using log4net;\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Client.Transport.Socket.Blocking\n+namespace Apache.Qpid.Client.Transport.Socket.Blocking\n {\n     class ByteChannel : IByteChannel\n     {\n@@ -60,4 +60,4 @@ public void Write(ByteBuffer buffer)\n             processor.Write(buffer);\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/ByteChannel.cs",
                "sha": "19da2fceb9afcb72d6e5e840efb5cc6286b9cd97",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/Properties/AssemblyInfo.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/Properties/AssemblyInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/Properties/AssemblyInfo.cs",
                "patch": "@@ -23,11 +23,11 @@\n // General Information about an assembly is controlled through the following \n // set of attributes. Change these attribute values to modify the information\n // associated with an assembly.\n-[assembly: AssemblyTitle(\"BlockingTransport\")]\n+[assembly: AssemblyTitle(\"Apache.Qpid.Transport.Blocking\")]\n [assembly: AssemblyDescription(\"\")]\n [assembly: AssemblyConfiguration(\"\")]\n [assembly: AssemblyCompany(\"Apache Qpid\")]\n-[assembly: AssemblyProduct(\"BlockingTransport\")]\n+[assembly: AssemblyProduct(\"Apache.Qpid.Transport.Blocking\")]\n [assembly: AssemblyCopyright(\"Copyright (c) 2006 The Apache Software Foundation\")]\n [assembly: AssemblyTrademark(\"\")]\n [assembly: AssemblyCulture(\"\")]",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/Properties/AssemblyInfo.cs",
                "sha": "00f366b5a91148973788fc4d034ddb85042dee97",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/Qpid.Client.Transport.Socket.Blocking.csproj",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/Qpid.Client.Transport.Socket.Blocking.csproj?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/Qpid.Client.Transport.Socket.Blocking.csproj",
                "patch": "@@ -7,8 +7,8 @@\n     <ProjectGuid>{52AC4940-2077-4104-A753-29A9C8C16957}</ProjectGuid>\r\n     <OutputType>Library</OutputType>\r\n     <AppDesignerFolder>Properties</AppDesignerFolder>\r\n-    <RootNamespace>Qpid.Client.Transport.Socket.Blocking</RootNamespace>\r\n-    <AssemblyName>Qpid.Client.Transport.Socket.Blocking</AssemblyName>\r\n+    <RootNamespace>Apache.Qpid.Client.Transport.Socket.Blocking</RootNamespace>\r\n+    <AssemblyName>Apache.Qpid.Client.Transport.Socket.Blocking</AssemblyName>\r\n   </PropertyGroup>\r\n   <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n     <DebugSymbols>true</DebugSymbols>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client.Transport.Socket.Blocking/Qpid.Client.Transport.Socket.Blocking.csproj",
                "sha": "a12b6695e20729c01afc935fab6aeec63af8b14e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AMQAuthenticationException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/AMQAuthenticationException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/AMQAuthenticationException.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\r\n using System.Runtime.Serialization;\r\n \r\n-namespace Qpid.Client\r\n+namespace Apache.Qpid.Client\r\n {\r\n     [Serializable]\r\n     public class AMQAuthenticationException : AMQException\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AMQAuthenticationException.cs",
                "sha": "6382eaaf393b2f5b1fa340e7d2f4775c5e2aa836",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AMQConnection.cs",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/AMQConnection.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 27,
                "filename": "qpid/dotnet/Qpid.Client/Client/AMQConnection.cs",
                "patch": "@@ -24,17 +24,17 @@\n using System.Reflection;\n using System.Threading;\n using log4net;\n-using Qpid.Client.Failover;\n-using Qpid.Client.Protocol;\n-using Qpid.Client.Qms;\n-using Qpid.Client.State;\n-using Qpid.Client.Transport;\n-using Qpid.Client.Transport.Socket.Blocking;\n-using Qpid.Collections;\n-using Qpid.Framing;\n-using Qpid.Messaging;\n-\n-namespace Qpid.Client\n+using Apache.Qpid.Client.Failover;\n+using Apache.Qpid.Client.Protocol;\n+using Apache.Qpid.Client.Qms;\n+using Apache.Qpid.Client.State;\n+using Apache.Qpid.Client.Transport;\n+using Apache.Qpid.Client.Transport.Socket.Blocking;\n+using Apache.Qpid.Collections;\n+using Apache.Qpid.Framing;\n+using Apache.Qpid.Messaging;\n+\n+namespace Apache.Qpid.Client\n {\n     public class AMQConnection : Closeable, IConnection\n     {\n@@ -273,15 +273,17 @@ class CreateChannelFailoverSupport : FailoverSupport\n \n             private bool _transacted;\n             private AcknowledgeMode _acknowledgeMode;\n-            int _prefetch;\n+            int _prefetchHigh;\n+            int _prefetchLow;\n             AMQConnection _connection;\n             \n-            public CreateChannelFailoverSupport(AMQConnection connection, bool transacted, AcknowledgeMode acknowledgeMode, int prefetch)\n+            public CreateChannelFailoverSupport(AMQConnection connection, bool transacted, AcknowledgeMode acknowledgeMode, int prefetchHigh, int prefetchLow)\n             {\n                 _connection = connection;\n                 _transacted = transacted;\n                 _acknowledgeMode = acknowledgeMode;\n-                _prefetch = prefetch;\n+                _prefetchHigh = prefetchHigh;\n+                _prefetchLow = prefetchLow;\n             }\n \n             protected override object operation()\n@@ -297,14 +299,14 @@ protected override object operation()\n                 // open it, so that there is no window where we could receive data on the channel and not be set\n                 // up to handle it appropriately.\n                 AmqChannel channel = new AmqChannel(_connection, \n-                        channelId, _transacted, _acknowledgeMode, _prefetch);\n+                        channelId, _transacted, _acknowledgeMode, _prefetchHigh, _prefetchLow);\n                 _connection.ProtocolSession.AddSessionByChannel(channelId, channel);\n                 _connection.RegisterSession(channelId, channel);\n \n                 bool success = false;\n                 try\n                 {\n-                    _connection.createChannelOverWire(channelId, (ushort)_prefetch, _transacted);\n+                    _connection.CreateChannelOverWire(channelId, _prefetchHigh, _prefetchLow, _transacted);\n                     success = true;\n                 }\n                 catch (AMQException e)\n@@ -334,10 +336,15 @@ internal ushort NextChannelId()\n         \n         public IChannel CreateChannel(bool transacted, AcknowledgeMode acknowledgeMode)\n         {\n-            return CreateChannel(transacted, acknowledgeMode, AmqChannel.DEFAULT_PREFETCH);\n+            return CreateChannel(transacted, acknowledgeMode, AmqChannel.DEFAULT_PREFETCH_HIGH_MARK);\n         }\n \n         public IChannel CreateChannel(bool transacted, AcknowledgeMode acknowledgeMode, int prefetch)\n+        {\n+           return CreateChannel(transacted, acknowledgeMode, prefetch, prefetch);\n+        }\n+   \n+        public IChannel CreateChannel(bool transacted, AcknowledgeMode acknowledgeMode, int prefetchHigh, int prefetchLow)\n         {\n             CheckNotClosed();\n             if (ChannelLimitReached())\n@@ -347,7 +354,7 @@ public IChannel CreateChannel(bool transacted, AcknowledgeMode acknowledgeMode,\n             else\n             {\n                 CreateChannelFailoverSupport operation =\n-                    new CreateChannelFailoverSupport(this, transacted, acknowledgeMode, prefetch);\n+                    new CreateChannelFailoverSupport(this, transacted, acknowledgeMode, prefetchHigh, prefetchLow);\n                 return (IChannel)operation.execute(this);\n             }\n         }\n@@ -704,8 +711,8 @@ private void MakeBrokerConnection(IBrokerInfo brokerDetail)\n \n                 /*\n                 // Currently there is only one transport option - BlockingSocket.\n-                String assemblyName = \"Qpid.Client.Transport.Socket.Blocking.dll\";\n-                String transportType = \"Qpid.Client.Transport.Socket.Blocking.BlockingSocketTransport\";\n+                String assemblyName = \"Apache.Qpid.Client.Transport.Socket.Blocking.dll\";\n+                String transportType = \"Apache.Qpid.Client.Transport.Socket.Blocking.BlockingSocketTransport\";\n \n                 // Load the transport assembly dynamically.\n                 _transport = LoadTransportFromAssembly(brokerDetail.getHost(), brokerDetail.getPort(), assemblyName, transportType);\n@@ -774,18 +781,23 @@ public void ResubscribeChannels()\n             foreach (AmqChannel channel in channels)\n             {\n                 _protocolSession.AddSessionByChannel(channel.ChannelId, channel);\n-                ReopenChannel(channel.ChannelId, (ushort)channel.DefaultPrefetch, channel.Transacted);\n+                ReopenChannel(\n+                   channel.ChannelId, \n+                   channel.DefaultPrefetchHigh, \n+                   channel.DefaultPrefetchLow, \n+                   channel.Transacted\n+                   );\n                 channel.ReplayOnFailOver();\n             }\n         }\n \n-        private void ReopenChannel(ushort channelId, ushort prefetch, bool transacted)\n+        private void ReopenChannel(ushort channelId, int prefetchHigh, int prefetchLow, bool transacted)\n         {\n-            _log.Debug(string.Format(\"Reopening channel id={0} prefetch={1} transacted={2}\",\n-                channelId, prefetch, transacted));\n+            _log.Debug(string.Format(\"Reopening channel id={0} prefetchHigh={1} prefetchLow={2} transacted={3}\",\n+                channelId, prefetchHigh, prefetchLow, transacted));\n             try\n             {\n-                createChannelOverWire(channelId, prefetch, transacted);\n+                CreateChannelOverWire(channelId, prefetchHigh, prefetchLow, transacted);\n             }\n             catch (AMQException e)\n             {\n@@ -795,7 +807,7 @@ private void ReopenChannel(ushort channelId, ushort prefetch, bool transacted)\n             }\n         }\n \n-        void createChannelOverWire(ushort channelId, ushort prefetch, bool transacted)\n+        void CreateChannelOverWire(ushort channelId, int prefetchHigh, int prefetchLow, bool transacted)\n         {\n             _protocolWriter.SyncWrite(ChannelOpenBody.CreateAMQFrame(channelId, null), typeof (ChannelOpenOkBody));\n             \n@@ -805,7 +817,8 @@ void createChannelOverWire(ushort channelId, ushort prefetch, bool transacted)\n             {\n                 // Basic.Qos frame appears to not be supported by OpenAMQ 1.0d.\n                 _protocolWriter.SyncWrite(\n-                    BasicQosBody.CreateAMQFrame(channelId, 0, prefetch, false),\n+                    BasicQosBody.CreateAMQFrame(\n+                    channelId, (uint)prefetchHigh, 0, false),\n                     typeof (BasicQosOkBody));                \n             }\n             ",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AMQConnection.cs",
                "sha": "d74cf6b5e4671e18fde74b3db2203b163ca7d0fe",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AMQConnectionException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/AMQConnectionException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/AMQConnectionException.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid.Client\n+namespace Apache.Qpid.Client\n {\n     [Serializable]\n     public class AMQConnectionException : AMQException",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AMQConnectionException.cs",
                "sha": "c8a48814bb95eba78be776538eeef75bb06381c8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AMQDestination.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/AMQDestination.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/AMQDestination.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System;\n \n-namespace Qpid.Client\n+namespace Apache.Qpid.Client\n {\n     public abstract class AMQDestination\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AMQDestination.cs",
                "sha": "07ce3c23548c838d97df845b3d45c7586d50aa6e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AMQNoConsumersException.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/AMQNoConsumersException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/AMQNoConsumersException.cs",
                "patch": "@@ -20,10 +20,10 @@\n  */\r\n using System;\r\n using System.Runtime.Serialization;\r\n-using Qpid.Common;\r\n-using Qpid.Protocol;\r\n+using Apache.Qpid.Common;\r\n+using Apache.Qpid.Protocol;\r\n \r\n-namespace Qpid.Client\r\n+namespace Apache.Qpid.Client\r\n {\r\n    [Serializable]\r\n    public class AMQNoConsumersException : AMQUndeliveredException\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AMQNoConsumersException.cs",
                "sha": "0d93176734a6bac87432b68a645c050dfedfd1ee",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AMQNoRouteException.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/AMQNoRouteException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/AMQNoRouteException.cs",
                "patch": "@@ -20,10 +20,10 @@\n  */\r\n using System;\r\n using System.Runtime.Serialization;\r\n-using Qpid.Common;\r\n-using Qpid.Protocol;\r\n+using Apache.Qpid.Common;\r\n+using Apache.Qpid.Protocol;\r\n \r\n-namespace Qpid.Client\r\n+namespace Apache.Qpid.Client\r\n {\r\n    [Serializable]\r\n    public class AMQNoRouteException : AMQUndeliveredException\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AMQNoRouteException.cs",
                "sha": "bde3cdd98946be42407fe3f3bd0a8d07e4d7eb4b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AmqBrokerInfo.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/AmqBrokerInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/AmqBrokerInfo.cs",
                "patch": "@@ -21,9 +21,9 @@\n using System;\n using System.Collections;\n using System.Text;\n-using Qpid.Client.Qms;\n+using Apache.Qpid.Client.Qms;\n \n-namespace Qpid.Client\n+namespace Apache.Qpid.Client\n {\n     public class AmqBrokerInfo : IBrokerInfo\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AmqBrokerInfo.cs",
                "sha": "591c5b941f935d1a1139a7a4bccd1598fe18f4fd",
                "status": "modified"
            },
            {
                "additions": 114,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AmqChannel.cs",
                "changes": 153,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/AmqChannel.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 39,
                "filename": "qpid/dotnet/Qpid.Client/Client/AmqChannel.cs",
                "patch": "@@ -23,14 +23,15 @@\n using System.Text.RegularExpressions;\n using System.Threading;\n using log4net;\n-using Qpid.Buffer;\n-using Qpid.Client.Message;\n-using Qpid.Collections;\n-using Qpid.Framing;\n-using Qpid.Messaging;\n-using Qpid.Protocol;\n-\n-namespace Qpid.Client\n+using Apache.Qpid.Buffer;\n+using Apache.Qpid.Client.Message;\n+using Apache.Qpid.Client.Util;\n+using Apache.Qpid.Collections;\n+using Apache.Qpid.Framing;\n+using Apache.Qpid.Messaging;\n+using Apache.Qpid.Protocol;\n+\n+namespace Apache.Qpid.Client\n {\n     public class AmqChannel : Closeable, IChannel\n     {\n@@ -41,11 +42,14 @@ public class AmqChannel : Closeable, IChannel\n         private static int _nextSessionNumber = 0;\n \n         private int _sessionNumber;\n+        private bool _suspended;\n+        private object _suspensionLock = new object();\n         \n         // Used in the consume method. We generate the consume tag on the client so that we can use the nowait feature.\n         private int _nextConsumerNumber = 1;\n \n-        internal const int DEFAULT_PREFETCH = MessageConsumerBuilder.DEFAULT_PREFETCH_HIGH;\n+        public const int DEFAULT_PREFETCH_HIGH_MARK = 5000;\n+        public const int DEFAULT_PREFETCH_LOW_MARK = 2500;\n \n         private AMQConnection _connection;\n \n@@ -55,9 +59,10 @@ public class AmqChannel : Closeable, IChannel\n \n         private ushort _channelId;\n \n-        private int _defaultPrefetch = DEFAULT_PREFETCH;\n+        private int _defaultPrefetchHighMark = DEFAULT_PREFETCH_HIGH_MARK;\n+        private int _defaultPrefetchLowMark = DEFAULT_PREFETCH_LOW_MARK;\n \n-        private BlockingQueue _queue = new LinkedBlockingQueue();\n+        private FlowControlQueue _queue;\n \n         private Dispatcher _dispatcher;\n \n@@ -105,7 +110,7 @@ public void RunDispatcher()\n             {\n                 UnprocessedMessage message;\n \n-                while (_stopped == 0 && (message = (UnprocessedMessage)_containingChannel._queue.DequeueBlocking()) != null)\n+                while (_stopped == 0 && (message = (UnprocessedMessage)_containingChannel._queue.Dequeue()) != null)\n                 {\n                     //_queue.size()\n                     DispatchMessage(message);\n@@ -163,8 +168,9 @@ public void StopDispatcher()\n         /// <param name=\"channelId\">The channel id.</param>\n         /// <param name=\"transacted\">if set to <c>true</c> [transacted].</param>\n         /// <param name=\"acknowledgeMode\">The acknowledge mode.</param>\n-        /// <param name=\"defaultPrefetch\">Default prefetch value</param>\n-        internal AmqChannel(AMQConnection con, ushort channelId, bool transacted, AcknowledgeMode acknowledgeMode, int defaultPrefetch)\n+        /// <param name=\"defaultPrefetchHigh\">Default prefetch high value</param>\n+        /// <param name=\"defaultPrefetchLow\">Default prefetch low value</param>\n+        internal AmqChannel(AMQConnection con, ushort channelId, bool transacted, AcknowledgeMode acknowledgeMode, int defaultPrefetchHigh, int defaultPrefetchLow)\n            : this()\n         {\n            _sessionNumber = Interlocked.Increment(ref _nextSessionNumber);\n@@ -178,8 +184,26 @@ internal AmqChannel(AMQConnection con, ushort channelId, bool transacted, Acknow\n               _acknowledgeMode = acknowledgeMode;\n            }\n            _channelId = channelId;\n+           _defaultPrefetchHighMark = defaultPrefetchHigh;\n+           _defaultPrefetchLowMark = defaultPrefetchLow;\n+\n+           if ( _acknowledgeMode == AcknowledgeMode.NoAcknowledge )\n+           {\n+              _queue = new FlowControlQueue(\n+                 _defaultPrefetchLowMark, _defaultPrefetchHighMark,\n+                 new ThresholdMethod(OnPrefetchLowMark),\n+                 new ThresholdMethod(OnPrefetchHighMark)\n+              );\n+           } else\n+           {\n+              // low and upper are the same\n+              _queue = new FlowControlQueue(\n+                 _defaultPrefetchHighMark, _defaultPrefetchHighMark,\n+                 null, null\n+                 );\n+           }\n         }\n-        \n+\n         private AmqChannel()\n         {\n            _messageFactoryRegistry = MessageFactoryRegistry.NewDefaultRegistry();\n@@ -269,19 +293,30 @@ public void Commit()\n \n         public void Rollback()\n         {\n-            // FIXME: Fail over safety. Needs FailoverSupport?\n-            CheckNotClosed();\n-            CheckTransacted(); // throws IllegalOperationException if not a transacted session\n-\n-            try\n-            {\n-                _connection.ConvenientProtocolWriter.SyncWrite(\n-                        TxRollbackBody.CreateAMQFrame(_channelId), typeof(TxRollbackOkBody));\n-            }\n-            catch (AMQException e)\n-            {\n-                throw new QpidException(\"Failed to rollback\", e);\n-            }\n+           lock ( _suspensionLock )\n+           {\n+              CheckTransacted(); // throws IllegalOperationException if not a transacted session\n+\n+              try\n+              {\n+                 bool suspended = IsSuspended;\n+                 if ( !suspended )\n+                    Suspend(true);\n+                 \n+                 // todo: rollback dispatcher when TX support is added\n+                 //if ( _dispatcher != null )\n+                 //   _dispatcher.Rollback();\n+\n+                 _connection.ConvenientProtocolWriter.SyncWrite(\n+                         TxRollbackBody.CreateAMQFrame(_channelId), typeof(TxRollbackOkBody));\n+\n+                 if ( !suspended )\n+                    Suspend(false);\n+              } catch ( AMQException e )\n+              {\n+                 throw new QpidException(\"Failed to rollback\", e);\n+              }\n+           }\n         }\n \n         public override void Close()\n@@ -539,21 +574,26 @@ public void MessageReceived(UnprocessedMessage message)\n                ReturnBouncedMessage(message);\n             } else\n             {\n-               _queue.EnqueueBlocking(message);\n+               _queue.Enqueue(message);\n             }\n         }\n \n         public int DefaultPrefetch\n         {\n-            get\n-            {\n-                return _defaultPrefetch;\n-            }\n-            set\n-            {\n-                _defaultPrefetch = value;\n-            }\n-        }        \n+           get { return DefaultPrefetchHigh; }\n+        }\n+        public int DefaultPrefetchLow\n+        {\n+            get { return _defaultPrefetchLowMark; }\n+        }\n+        public int DefaultPrefetchHigh\n+        {\n+           get { return _defaultPrefetchHighMark; }\n+        }\n+        public bool IsSuspended\n+        {\n+           get { return _suspended; }\n+        }\n \n         public ushort ChannelId\n         {\n@@ -581,6 +621,7 @@ internal void Start()\n \n         internal void Stop()\n         {\n+            Suspend(true);\n             if (_dispatcher != null)\n             {\n                 _dispatcher.StopDispatcher();\n@@ -883,7 +924,7 @@ public void DeclareExchange(String exchangeName, String exchangeClass)\n          * @param multiple    if true will acknowledge all messages up to and including the one specified by the\n          *                    delivery tag\n          */\n-        public void AcknowledgeMessage(ulong deliveryTag, bool multiple)\n+        internal void AcknowledgeMessage(ulong deliveryTag, bool multiple)\n         {\n             AMQFrame ackFrame = BasicAckBody.CreateAMQFrame(_channelId, deliveryTag, multiple);\n             if (_logger.IsDebugEnabled)\n@@ -930,5 +971,39 @@ private void ReturnBouncedMessage(UnprocessedMessage message)\n           }\n \n        }\n+\n+       private void OnPrefetchLowMark(int count)\n+       {\n+          if ( _acknowledgeMode == AcknowledgeMode.NoAcknowledge )\n+          {\n+             _logger.Warn(\"Below threshold(\" + _defaultPrefetchLowMark + \") so unsuspending channel. Current value is \" + count);\n+             Suspend(false);\n+          }\n+       }\n+       private void OnPrefetchHighMark(int count)\n+       {\n+          if ( _acknowledgeMode == AcknowledgeMode.NoAcknowledge )\n+          {\n+             _logger.Warn(\"Above threshold(\" + _defaultPrefetchHighMark + \") so suspending channel. Current value is \" + count);\n+             Suspend(true);\n+          }\n+       }\n+\n+       private void Suspend(bool suspend)\n+       {\n+          lock ( _suspensionLock )\n+          {\n+             if ( _logger.IsDebugEnabled )\n+             {\n+                _logger.Debug(\"Setting channel flow : \" + (suspend ? \"suspended\" : \"unsuspended\"));\n+             }\n+\n+             _suspended = suspend;\n+             AMQFrame frame = ChannelFlowBody.CreateAMQFrame(_channelId, !suspend);\n+\n+             Connection.ConvenientProtocolWriter.SyncWrite(frame, typeof(ChannelFlowOkBody));\n+          }\n+       }\n+\n     }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/AmqChannel.cs",
                "sha": "84f08729dd031ce78e4267282557fc2d5dec12ef",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/BasicMessageConsumer.cs",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/BasicMessageConsumer.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/BasicMessageConsumer.cs",
                "patch": "@@ -21,12 +21,12 @@\n using System;\n using System.Threading;\n using log4net;\n-using Qpid.Client.Message;\n-using Qpid.Collections;\n-using Qpid.Framing;\n-using Qpid.Messaging;\n+using Apache.Qpid.Client.Message;\n+using Apache.Qpid.Collections;\n+using Apache.Qpid.Framing;\n+using Apache.Qpid.Messaging;\n \n-namespace Qpid.Client\n+namespace Apache.Qpid.Client\n {\n     public class BasicMessageConsumer : Closeable, IMessageConsumer\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/BasicMessageConsumer.cs",
                "sha": "fd4ff795055de7ece33fe791761b310d26442aa7",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/BasicMessageProducer.cs",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/BasicMessageProducer.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/BasicMessageProducer.cs",
                "patch": "@@ -21,12 +21,12 @@\n using System;\n using System.Threading;\n using log4net;\n-using Qpid.Buffer;\n-using Qpid.Client.Message;\n-using Qpid.Messaging;\n-using Qpid.Framing;\n+using Apache.Qpid.Buffer;\n+using Apache.Qpid.Client.Message;\n+using Apache.Qpid.Messaging;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client\n+namespace Apache.Qpid.Client\n {\n    public class BasicMessageProducer : Closeable, IMessagePublisher\n    {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/BasicMessageProducer.cs",
                "sha": "ca6d2abee5fb92dac4ae9a1f14b86e59b01b2db9",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Closeable.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Closeable.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/Closeable.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System;\n \n-namespace Qpid.Client\n+namespace Apache.Qpid.Client\n {\n     public abstract class Closeable\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Closeable.cs",
                "sha": "d70f75ee6b90cf205cabb040a0a248fdb1d5b444",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Configuration/AuthenticationConfigurationSectionHandler.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Configuration/AuthenticationConfigurationSectionHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Client/Client/Configuration/AuthenticationConfigurationSectionHandler.cs",
                "patch": "@@ -25,10 +25,10 @@\n using System.Configuration;\r\n using System.Text;\r\n \r\n-using Qpid.Client.Security;\r\n-using Qpid.Sasl.Mechanisms;\r\n+using Apache.Qpid.Client.Security;\r\n+using Apache.Qpid.Sasl.Mechanisms;\r\n \r\n-namespace Qpid.Client.Configuration\r\n+namespace Apache.Qpid.Client.Configuration\r\n {\r\n    public class AuthenticationConfigurationSectionHandler \r\n       : IConfigurationSectionHandler\r\n@@ -81,4 +81,4 @@ public override void Remove(object key)\n          _keys.Remove(key);\r\n       }\r\n    }\r\n-} // namespace Qpid.Client.Configuration\r\n+} // namespace Apache.Qpid.Client.Configuration\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Configuration/AuthenticationConfigurationSectionHandler.cs",
                "sha": "ae9225a53a84c8303be98413c67b7b4f38746a9e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/ConnectionTuneParameters.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/ConnectionTuneParameters.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/ConnectionTuneParameters.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Client\n+namespace Apache.Qpid.Client\n {\n     public class ConnectionTuneParameters\n     {\n@@ -80,3 +80,4 @@ public uint TxnLimit\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/ConnectionTuneParameters.cs",
                "sha": "b21486bfa87165dadf20f127ec13635e6a3eba94",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Failover/FailoverException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Failover/FailoverException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/Failover/FailoverException.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid.Client.Failover\n+namespace Apache.Qpid.Client.Failover\n {\n     /// <summary>\n     /// This exception is thrown when failover is taking place and we need to let other",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Failover/FailoverException.cs",
                "sha": "7013746414b1507a64d5334d505a6e2ff527920d",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Failover/FailoverHandler.cs",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Failover/FailoverHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Failover/FailoverHandler.cs",
                "patch": "@@ -21,10 +21,10 @@\n using System;\n using System.Threading;\n using log4net;\n-using Qpid.Client.Protocol;\n-using Qpid.Client.State;\n+using Apache.Qpid.Client.Protocol;\n+using Apache.Qpid.Client.State;\n \n-namespace Qpid.Client.Failover\n+namespace Apache.Qpid.Client.Failover\n {\n     public class FailoverHandler\n     {\n@@ -172,3 +172,4 @@ public void setPort(int port)\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Failover/FailoverHandler.cs",
                "sha": "83c69b7d25d9c42380dad3f029aa9c6c52ee954a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Failover/FailoverState.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Failover/FailoverState.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/Failover/FailoverState.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Client.Failover\n+namespace Apache.Qpid.Client.Failover\n {\n     /// <summary>\n     /// Enumeration of failover states. Used to handle failover from within AMQProtocolHandler where MINA events need to be",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Failover/FailoverState.cs",
                "sha": "3058cdcd69c477e7fb60e86cf13637dd8d520903",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Failover/FailoverSupport.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Failover/FailoverSupport.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/Failover/FailoverSupport.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using log4net;\n \n-namespace Qpid.Client.Failover\n+namespace Apache.Qpid.Client.Failover\n {\n     public abstract class FailoverSupport\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Failover/FailoverSupport.cs",
                "sha": "afa5301f39ec2397dcfeff2434780905d668a486",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/BasicDeliverMethodHandler.cs",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Handler/BasicDeliverMethodHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/Handler/BasicDeliverMethodHandler.cs",
                "patch": "@@ -19,12 +19,12 @@\n  *\n  */\n using log4net;\n-using Qpid.Client.Message;\n-using Qpid.Client.Protocol;\n-using Qpid.Client.State;\n-using Qpid.Framing;\n+using Apache.Qpid.Client.Message;\n+using Apache.Qpid.Client.Protocol;\n+using Apache.Qpid.Client.State;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Handler\n+namespace Apache.Qpid.Client.Handler\n {\n     public class BasicDeliverMethodHandler : IStateAwareMethodListener\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/BasicDeliverMethodHandler.cs",
                "sha": "def1e78e8ca4051cf692dd30e3a6c905a22c08d6",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/BasicReturnMethodHandler.cs",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Handler/BasicReturnMethodHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/Handler/BasicReturnMethodHandler.cs",
                "patch": "@@ -19,12 +19,12 @@\n  *\n  */\n using log4net;\n-using Qpid.Client.Message;\n-using Qpid.Client.Protocol;\n-using Qpid.Client.State;\n-using Qpid.Framing;\n+using Apache.Qpid.Client.Message;\n+using Apache.Qpid.Client.Protocol;\n+using Apache.Qpid.Client.State;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Handler\n+namespace Apache.Qpid.Client.Handler\n {\n     public class BasicReturnMethodHandler : IStateAwareMethodListener\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/BasicReturnMethodHandler.cs",
                "sha": "f413dfc9c60475a5e8048d22edb63cc318469f3b",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ChannelCloseMethodHandler.cs",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Handler/ChannelCloseMethodHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/Handler/ChannelCloseMethodHandler.cs",
                "patch": "@@ -19,12 +19,12 @@\n  *\n  */\n using log4net;\n-using Qpid.Client.Protocol;\n-using Qpid.Client.State;\n-using Qpid.Protocol;\n-using Qpid.Framing;\n+using Apache.Qpid.Client.Protocol;\n+using Apache.Qpid.Client.State;\n+using Apache.Qpid.Protocol;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Handler\n+namespace Apache.Qpid.Client.Handler\n {\n     public class ChannelCloseMethodHandler : IStateAwareMethodListener\n     {\n@@ -65,3 +65,4 @@ public void MethodReceived(AMQStateManager stateManager, AMQMethodEvent evt)\n }\n \n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ChannelCloseMethodHandler.cs",
                "sha": "9ed09a0d01fb465167ad7040ef2c410480ff2ee7",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionCloseMethodHandler.cs",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionCloseMethodHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/Handler/ConnectionCloseMethodHandler.cs",
                "patch": "@@ -21,12 +21,12 @@\n using System;\n using System.Threading;\n using log4net;\n-using Qpid.Client.Protocol;\n-using Qpid.Client.State;\n-using Qpid.Framing;\n-using Qpid.Protocol;\n+using Apache.Qpid.Client.Protocol;\n+using Apache.Qpid.Client.State;\n+using Apache.Qpid.Framing;\n+using Apache.Qpid.Protocol;\n \n-namespace Qpid.Client.Handler\n+namespace Apache.Qpid.Client.Handler\n {\n     public class ConnectionCloseMethodHandler : IStateAwareMethodListener\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionCloseMethodHandler.cs",
                "sha": "66cff3bc652f4ae2734ad2c3d0cffb7b30abcea0",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionCloseOkHandler.cs",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionCloseOkHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Client/Client/Handler/ConnectionCloseOkHandler.cs",
                "patch": "@@ -19,11 +19,11 @@\n  *\n  */\n using log4net;\n-using Qpid.Client.Protocol;\n-using Qpid.Client.State;\n-using Qpid.Framing;\n+using Apache.Qpid.Client.Protocol;\n+using Apache.Qpid.Client.State;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Handler\n+namespace Apache.Qpid.Client.Handler\n {\n     public class ConnectionCloseOkHandler : IStateAwareMethodListener\n     {\n@@ -38,3 +38,4 @@ public void MethodReceived(AMQStateManager stateManager, AMQMethodEvent evt)\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionCloseOkHandler.cs",
                "sha": "038da1573112640e96ad8e903b0b93d7bc3a8881",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionOpenOkMethodHandler.cs",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionOpenOkMethodHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Handler/ConnectionOpenOkMethodHandler.cs",
                "patch": "@@ -18,10 +18,10 @@\n  * under the License.\n  *\n  */\n-using Qpid.Client.Protocol;\n-using Qpid.Client.State;\n+using Apache.Qpid.Client.Protocol;\n+using Apache.Qpid.Client.State;\n \n-namespace Qpid.Client.Handler\n+namespace Apache.Qpid.Client.Handler\n {\n     public class ConnectionOpenOkMethodHandler : IStateAwareMethodListener\n     {\n@@ -32,3 +32,4 @@ public void MethodReceived(AMQStateManager stateManager, AMQMethodEvent evt)\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionOpenOkMethodHandler.cs",
                "sha": "a12e4ead6099e1c5e4c5ab1542f67975506a5711",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionRedirectMethodHandler.cs",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionRedirectMethodHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Handler/ConnectionRedirectMethodHandler.cs",
                "patch": "@@ -19,10 +19,10 @@\n  *\n  */\n using log4net;\n-using Qpid.Client.Protocol;\n-using Qpid.Client.State;\n+using Apache.Qpid.Client.Protocol;\n+using Apache.Qpid.Client.State;\n \n-namespace Qpid.Client.Handler\n+namespace Apache.Qpid.Client.Handler\n {\n     public class ConnectionRedirectMethodHandler : IStateAwareMethodListener\n     {\n@@ -65,3 +65,4 @@ public void MethodReceived(AMQStateManager stateManager, AMQMethodEvent evt)\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionRedirectMethodHandler.cs",
                "sha": "08cc580b170083a90c0ab248055353650de85b06",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionSecureMethodHandler.cs",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionSecureMethodHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/Handler/ConnectionSecureMethodHandler.cs",
                "patch": "@@ -18,12 +18,12 @@\n  * under the License.\n  *\n  */\n-using Qpid.Client.Protocol;\n-using Qpid.Client.State;\n-using Qpid.Framing;\n-using Qpid.Sasl;\n+using Apache.Qpid.Client.Protocol;\n+using Apache.Qpid.Client.State;\n+using Apache.Qpid.Framing;\n+using Apache.Qpid.Sasl;\n \n-namespace Qpid.Client.Handler\n+namespace Apache.Qpid.Client.Handler\n {\n     public class ConnectionSecureMethodHandler : IStateAwareMethodListener\n     {\n@@ -57,3 +57,4 @@ public void MethodReceived(AMQStateManager stateManager, AMQMethodEvent evt)\n }\n \n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionSecureMethodHandler.cs",
                "sha": "9333d4d0a6c55c6150913918d5c22f7af3475d92",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionStartMethodHandler.cs",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionStartMethodHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 7,
                "filename": "qpid/dotnet/Qpid.Client/Client/Handler/ConnectionStartMethodHandler.cs",
                "patch": "@@ -22,14 +22,14 @@\n using System.Collections;\n using System.Text;\n using log4net;\n-using Qpid.Client.Protocol;\n-using Qpid.Client.Security;\n-using Qpid.Client.State;\n-using Qpid.Framing;\n-using Qpid.Sasl;\n+using Apache.Qpid.Client.Protocol;\n+using Apache.Qpid.Client.Security;\n+using Apache.Qpid.Client.State;\n+using Apache.Qpid.Framing;\n+using Apache.Qpid.Sasl;\n \n \n-namespace Qpid.Client.Handler\n+namespace Apache.Qpid.Client.Handler\n {\n     public class ConnectionStartMethodHandler : IStateAwareMethodListener\n     {\n@@ -73,7 +73,7 @@ public void MethodReceived(AMQStateManager stateManager, AMQMethodEvent evt)\n \n                 stateManager.ChangeState(AMQState.CONNECTION_NOT_TUNED);\n                 FieldTable clientProperties = new FieldTable();\n-                clientProperties[\"product\"] = \"Qpid.NET\";\n+                clientProperties[\"product\"] = \"Apache.Qpid.NET\";\n                 clientProperties[\"version\"] = \"1.0\";\n                 clientProperties[\"platform\"] = GetFullSystemInfo();\n                 AMQFrame frame = ConnectionStartOkBody.CreateAMQFrame(",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionStartMethodHandler.cs",
                "sha": "1710c190808c8662969560d49819e0cdd5f55141",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionTuneMethodHandler.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionTuneMethodHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Client/Client/Handler/ConnectionTuneMethodHandler.cs",
                "patch": "@@ -20,11 +20,11 @@\n  */\n using System;\n using log4net;\n-using Qpid.Client.Protocol;\n-using Qpid.Client.State;\n-using Qpid.Framing;\n+using Apache.Qpid.Client.Protocol;\n+using Apache.Qpid.Client.State;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Handler\n+namespace Apache.Qpid.Client.Handler\n {\n     public class ConnectionTuneMethodHandler : IStateAwareMethodListener\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/ConnectionTuneMethodHandler.cs",
                "sha": "15a1d908b7395068f4af10a27bc854274eb9c3e9",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/QueueDeleteOkMethodHandler.cs",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Handler/QueueDeleteOkMethodHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/Handler/QueueDeleteOkMethodHandler.cs",
                "patch": "@@ -19,12 +19,12 @@\n  *\r\n  */\r\n using log4net;\r\n-using Qpid.Client.Message;\r\n-using Qpid.Client.Protocol;\r\n-using Qpid.Client.State;\r\n-using Qpid.Framing;\r\n+using Apache.Qpid.Client.Message;\r\n+using Apache.Qpid.Client.Protocol;\r\n+using Apache.Qpid.Client.State;\r\n+using Apache.Qpid.Framing;\r\n \r\n-namespace Qpid.Client.Handler\r\n+namespace Apache.Qpid.Client.Handler\r\n {\r\n     public class QueueDeleteOkMethodHandler : IStateAwareMethodListener\r\n     {\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/QueueDeleteOkMethodHandler.cs",
                "sha": "7290d758f8d2a8c9b0e8f88f068019a087342127",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/QueuePurgeOkMethodHandler.cs",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Handler/QueuePurgeOkMethodHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/Handler/QueuePurgeOkMethodHandler.cs",
                "patch": "@@ -19,12 +19,12 @@\n  *\r\n  */\r\n using log4net;\r\n-using Qpid.Client.Message;\r\n-using Qpid.Client.Protocol;\r\n-using Qpid.Client.State;\r\n-using Qpid.Framing;\r\n+using Apache.Qpid.Client.Message;\r\n+using Apache.Qpid.Client.Protocol;\r\n+using Apache.Qpid.Client.State;\r\n+using Apache.Qpid.Framing;\r\n \r\n-namespace Qpid.Client.Handler\r\n+namespace Apache.Qpid.Client.Handler\r\n {\r\n     public class QueuePurgeOkMethodHandler : IStateAwareMethodListener\r\n     {\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Handler/QueuePurgeOkMethodHandler.cs",
                "sha": "8bde707b00d329bea8bdf233dad5a934c97e6c67",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/AMQMessage.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Message/AMQMessage.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/Message/AMQMessage.cs",
                "patch": "@@ -18,9 +18,9 @@\n  * under the License.\n  *\n  */\n-using Qpid.Framing;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Message\n+namespace Apache.Qpid.Client.Message\n {\n     public class AMQMessage\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/AMQMessage.cs",
                "sha": "e58de2ab96777f1368a281bdaee78efbb7f480c0",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/AMQMessageFactory.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Message/AMQMessageFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Message/AMQMessageFactory.cs",
                "patch": "@@ -19,11 +19,11 @@\n  *\n  */\n using System.Collections;\n-using Qpid.Framing;\n+using Apache.Qpid.Framing;\n using log4net;\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Client.Message\n+namespace Apache.Qpid.Client.Message\n {\n     public abstract class AbstractQmsMessageFactory : IMessageFactory\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/AMQMessageFactory.cs",
                "sha": "f352d62c112e5300913bd9eabba0872d8f01cb06",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/AbstractQmsMessage.cs",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Message/AbstractQmsMessage.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/Message/AbstractQmsMessage.cs",
                "patch": "@@ -22,11 +22,11 @@\n using System.Collections;\n using System.Text;\n using log4net;\n-using Qpid.Framing;\n-using Qpid.Messaging;\n-using Qpid.Buffer;\n+using Apache.Qpid.Framing;\n+using Apache.Qpid.Messaging;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Client.Message\n+namespace Apache.Qpid.Client.Message\n {\n     public abstract class AbstractQmsMessage : AMQMessage, IMessage\n     {\n@@ -326,7 +326,7 @@ public void Acknowledge()\n             // is not specified. In our case, we only set the session field where client acknowledge mode is specified.\n             if (_channel != null)\n             {\n-                // we set multiple to true here since acknowledgement implies acknowledge of all previous messages\n+                // we set multiple to true here since acknowledgement implies acknowledge of all count messages\n                 // received on the session\n                 _channel.AcknowledgeMessage((ulong)DeliveryTag, true);\n             }",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/AbstractQmsMessage.cs",
                "sha": "19f59a4fc1382bbc74161a91360cf7f6909759f1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/IMessageFactory.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Message/IMessageFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/Message/IMessageFactory.cs",
                "patch": "@@ -19,9 +19,9 @@\n  *\n  */\n using System.Collections;\n-using Qpid.Framing;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Message\n+namespace Apache.Qpid.Client.Message\n {\n     public interface IMessageFactory\n     {\n@@ -49,3 +49,4 @@ public interface IMessageFactory\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/IMessageFactory.cs",
                "sha": "bed379290ff151392cff2ce4c59aea7590a247ae",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/MessageFactoryRegistry.cs",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Message/MessageFactoryRegistry.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Message/MessageFactoryRegistry.cs",
                "patch": "@@ -20,10 +20,10 @@\n  */\n using System;\n using System.Collections;\n-using Qpid.Framing;\n-using Qpid.Messaging;\n+using Apache.Qpid.Framing;\n+using Apache.Qpid.Messaging;\n \n-namespace Qpid.Client.Message\n+namespace Apache.Qpid.Client.Message\n {\n    public class MessageFactoryRegistry\n    {\n@@ -126,3 +126,4 @@ private IMessageFactory GetFactory(string mimeType)\n    }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/MessageFactoryRegistry.cs",
                "sha": "fdb5e14aa60f3e1053a3beea2706fcb020fa38ca",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/QpidBytesMessage.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Message/QpidBytesMessage.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Client/Client/Message/QpidBytesMessage.cs",
                "patch": "@@ -22,11 +22,11 @@\n using System.IO;\n using System.Runtime.Serialization;\n using System.Text;\n-using Qpid.Framing;\n-using Qpid.Messaging;\n-using Qpid.Buffer;\n+using Apache.Qpid.Framing;\n+using Apache.Qpid.Messaging;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Client.Message\n+namespace Apache.Qpid.Client.Message\n {\n     [Serializable]\n     class MessageEOFException : QpidException",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/QpidBytesMessage.cs",
                "sha": "fb3efb1b0f0bea1453903fd8f7b936b0bc20330c",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/QpidBytesMessageFactory.cs",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Message/QpidBytesMessageFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Message/QpidBytesMessageFactory.cs",
                "patch": "@@ -20,10 +20,10 @@\n  */\n using System;\n using System.Collections;\n-using Qpid.Framing;\n-using Qpid.Buffer;\n+using Apache.Qpid.Framing;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Client.Message\n+namespace Apache.Qpid.Client.Message\n {\n     public class QpidBytesMessageFactory : AbstractQmsMessageFactory\n     {\n@@ -72,3 +72,4 @@ public override AbstractQmsMessage CreateMessage(string mimeType)\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/QpidBytesMessageFactory.cs",
                "sha": "3cc96cbddcc19e8c3d5b18bb2ff075163ab925fb",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/QpidHeaders.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Message/QpidHeaders.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Message/QpidHeaders.cs",
                "patch": "@@ -1,10 +1,10 @@\n using System;\n using System.Collections;\n using System.Text;\n-using Qpid.Framing;\n-using Qpid.Messaging;\n+using Apache.Qpid.Framing;\n+using Apache.Qpid.Messaging;\n \n-namespace Qpid.Client.Message\n+namespace Apache.Qpid.Client.Message\n {\n    internal class QpidHeaders : IHeaders\n    {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/QpidHeaders.cs",
                "sha": "d27c1df85385729dd054e3a1eea6031363713b8a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/QpidTextMessage.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Message/QpidTextMessage.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Client/Client/Message/QpidTextMessage.cs",
                "patch": "@@ -20,11 +20,11 @@\n  */\n using System;\n using System.Text;\n-using Qpid.Framing;\n-using Qpid.Messaging;\n-using Qpid.Buffer;\n+using Apache.Qpid.Framing;\n+using Apache.Qpid.Messaging;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Client.Message\n+namespace Apache.Qpid.Client.Message\n {\n     public class QpidTextMessage : AbstractQmsMessage, ITextMessage\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/QpidTextMessage.cs",
                "sha": "24aef92aa5e1f040dbe12bec80e64421b7047242",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/QpidTextMessageFactory.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Message/QpidTextMessageFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Message/QpidTextMessageFactory.cs",
                "patch": "@@ -18,10 +18,10 @@\n  * under the License.\n  *\n  */\n-using Qpid.Buffer;\n-using Qpid.Framing;\n+using Apache.Qpid.Buffer;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Message\n+namespace Apache.Qpid.Client.Message\n {\n     public class QpidTextMessageFactory : AbstractQmsMessageFactory\n     {        ",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/QpidTextMessageFactory.cs",
                "sha": "79871e85ca4eb719d7a3c427a5c59aa2e17706d5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/UnexpectedBodyReceivedException.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Message/UnexpectedBodyReceivedException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/Message/UnexpectedBodyReceivedException.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System.Runtime.Serialization;\n using log4net;\n \n-namespace Qpid.Client.Message\n+namespace Apache.Qpid.Client.Message\n {\n     /// <summary>\n     /// Raised when a message body is received unexpectedly by the client. This typically occurs when the\n@@ -54,3 +54,4 @@ protected UnexpectedBodyReceivedException(SerializationInfo info, StreamingConte\n }\n \n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/UnexpectedBodyReceivedException.cs",
                "sha": "4317ef3474e73b068c176e2c53eb64f55715bf45",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/UnprocessedMessage.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Message/UnprocessedMessage.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/Message/UnprocessedMessage.cs",
                "patch": "@@ -19,9 +19,9 @@\n  *\n  */\n using System.Collections;\n-using Qpid.Framing;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Message\n+namespace Apache.Qpid.Client.Message\n {\n     public class UnprocessedMessage\n     {\n@@ -54,3 +54,4 @@ public bool IsAllBodyDataReceived()\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Message/UnprocessedMessage.cs",
                "sha": "d3297123341b315132678c9cf423d89a79a77d8d",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/AMQMethodEvent.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Protocol/AMQMethodEvent.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/Protocol/AMQMethodEvent.cs",
                "patch": "@@ -20,9 +20,9 @@\n  */\n using System;\n using System.Text;\n-using Qpid.Framing;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Protocol\n+namespace Apache.Qpid.Client.Protocol\n {\n     public class AMQMethodEvent\n     {\n@@ -73,3 +73,4 @@ public override String ToString()\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/AMQMethodEvent.cs",
                "sha": "a7ce808862ddbaf704762a3a21e5232e2c53f32c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/AMQProtocolListener.cs",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Protocol/AMQProtocolListener.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/Protocol/AMQProtocolListener.cs",
                "patch": "@@ -22,12 +22,12 @@\n using System.Collections;\n using System.Threading;\n using log4net;\n-using Qpid.Client.Failover;\n-using Qpid.Client.Protocol.Listener;\n-using Qpid.Client.State;\n-using Qpid.Framing;\n+using Apache.Qpid.Client.Failover;\n+using Apache.Qpid.Client.Protocol.Listener;\n+using Apache.Qpid.Client.State;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Protocol\n+namespace Apache.Qpid.Client.Protocol\n {\n     public class AMQProtocolListener : IProtocolListener\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/AMQProtocolListener.cs",
                "sha": "326afbe613a05912c2f6519ad3fa25a59d6e3d12",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/AMQProtocolSession.cs",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Protocol/AMQProtocolSession.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/Protocol/AMQProtocolSession.cs",
                "patch": "@@ -21,12 +21,12 @@\n using System;\n using System.Collections;\n using log4net;\n-using Qpid.Client.Message;\n-using Qpid.Client.Transport;\n-using Qpid.Framing;\n-using Qpid.Sasl;\n+using Apache.Qpid.Client.Message;\n+using Apache.Qpid.Client.Transport;\n+using Apache.Qpid.Framing;\n+using Apache.Qpid.Sasl;\n \n-namespace Qpid.Client.Protocol\n+namespace Apache.Qpid.Client.Protocol\n {\n     public class AMQProtocolSession\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/AMQProtocolSession.cs",
                "sha": "e0fa22e7a38d54e50068e776196a82e7b9434eb8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/DefaultTimeouts.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Protocol/DefaultTimeouts.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/Protocol/DefaultTimeouts.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System;\r\n using System.Text;\r\n \r\n-namespace Qpid.Client.Protocol\r\n+namespace Apache.Qpid.Client.Protocol\r\n {\r\n    /// <summary>\r\n    /// Default timeout values for the protocol\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/DefaultTimeouts.cs",
                "sha": "6841b46f54a762e8059e2ec4c0802fceffc3aad8",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/IConnectionCloser.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Protocol/IConnectionCloser.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/Protocol/IConnectionCloser.cs",
                "patch": "@@ -18,10 +18,10 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Client.Protocol\n+namespace Apache.Qpid.Client.Protocol\n {\n     public interface IConnectionCloser\n     {\n         void Close();\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/IConnectionCloser.cs",
                "sha": "e3298200c445ee0e3475c1158be116c24f4aa1a1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/IProtocolListener.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Protocol/IProtocolListener.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Protocol/IProtocolListener.cs",
                "patch": "@@ -19,10 +19,10 @@\n  *\n  */\n using System;\n-using Qpid.Client.Protocol.Listener;\n-using Qpid.Framing;\n+using Apache.Qpid.Client.Protocol.Listener;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Protocol\n+namespace Apache.Qpid.Client.Protocol\n {\n     public interface IProtocolListener\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/IProtocolListener.cs",
                "sha": "3b53f015f8207604a30331246ed055aa4d0434e5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/Listener/BlockingMethodFrameListener.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Protocol/Listener/BlockingMethodFrameListener.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/Protocol/Listener/BlockingMethodFrameListener.cs",
                "patch": "@@ -20,9 +20,9 @@\n  */\n using System;\n using System.Threading;\n-using Qpid.Framing;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Protocol.Listener\n+namespace Apache.Qpid.Client.Protocol.Listener\n {\n     public abstract class BlockingMethodFrameListener : IAMQMethodListener\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/Listener/BlockingMethodFrameListener.cs",
                "sha": "9cc9f8cee53ee8d28f8f47209b441cba76caee30",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/Listener/IAMQMethodListener.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Protocol/Listener/IAMQMethodListener.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/Protocol/Listener/IAMQMethodListener.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System;\n \n-namespace Qpid.Client.Protocol.Listener\n+namespace Apache.Qpid.Client.Protocol.Listener\n {\n     public interface IAMQMethodListener\n     {\n@@ -43,3 +43,4 @@ public interface IAMQMethodListener\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/Listener/IAMQMethodListener.cs",
                "sha": "b5450d00f76652b03fdb7c537540b0342621c1d2",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/Listener/SpecificMethodFrameListener.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Protocol/Listener/SpecificMethodFrameListener.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/Protocol/Listener/SpecificMethodFrameListener.cs",
                "patch": "@@ -19,9 +19,9 @@\n  *\n  */\n using System;\n-using Qpid.Framing;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Protocol.Listener\n+namespace Apache.Qpid.Client.Protocol.Listener\n {\n     public class SpecificMethodFrameListener : BlockingMethodFrameListener\n     {\n@@ -39,3 +39,4 @@ public override bool ProcessMethod(ushort channelId, AMQMethodBody frame)\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/Listener/SpecificMethodFrameListener.cs",
                "sha": "8cdc1dbba9bd00913fe96044bea667c637d3849a",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/ProtocolWriter.cs",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Protocol/ProtocolWriter.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Client/Client/Protocol/ProtocolWriter.cs",
                "patch": "@@ -19,13 +19,13 @@\n  *\n  */\n using System;\n-using Qpid.Client.Protocol.Listener;\n-using Qpid.Client.Transport;\n-using Qpid.Framing;\n+using Apache.Qpid.Client.Protocol.Listener;\n+using Apache.Qpid.Client.Transport;\n+using Apache.Qpid.Framing;\n \n using log4net;\n \n-namespace Qpid.Client.Protocol\n+namespace Apache.Qpid.Client.Protocol\n {\n     /// <summary>\n     /// A convenient interface to writing protocol frames.\n@@ -104,3 +104,4 @@ public AMQMethodEvent SyncWrite(AMQFrame frame, Type responseType, int timeout)\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Protocol/ProtocolWriter.cs",
                "sha": "11918f1ea2517f50b483b5f6d57b64d5be824fcf",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/QpidConnectionInfo.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/QpidConnectionInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/QpidConnectionInfo.cs",
                "patch": "@@ -24,9 +24,9 @@\n using System.Text;\n using System.Text.RegularExpressions;\n using log4net;\n-using Qpid.Client.Qms;\n+using Apache.Qpid.Client.Qms;\n \n-namespace Qpid.Client\n+namespace Apache.Qpid.Client\n {\n \n     public class URLHelper",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/QpidConnectionInfo.cs",
                "sha": "ede8966f37f24f5734eb9d996705d9b991bd5f62",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Security/CallbackHandlerRegistry.cs",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Security/CallbackHandlerRegistry.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 6,
                "filename": "qpid/dotnet/Qpid.Client/Client/Security/CallbackHandlerRegistry.cs",
                "patch": "@@ -23,12 +23,12 @@\n using System.Collections;\r\n using System.Configuration;\r\n using System.Text;\r\n-using Qpid.Sasl;\r\n-using Qpid.Sasl.Mechanisms;\r\n+using Apache.Qpid.Sasl;\r\n+using Apache.Qpid.Sasl.Mechanisms;\r\n \r\n-using Qpid.Client.Configuration;\r\n+using Apache.Qpid.Client.Configuration;\r\n \r\n-namespace Qpid.Client.Security\r\n+namespace Apache.Qpid.Client.Security\r\n {\r\n \r\n    /// <summary>\r\n@@ -55,12 +55,12 @@ namespace Qpid.Client.Security\n    /// <configuration>\r\n    ///   <configSections>\r\n    ///      <sectionGroup name=\"qpid.client\">\r\n-   ///         <section name=\"authentication\" type=\"Qpid.Client.Configuration.AuthenticationConfigurationSectionHandler, Qpid.Client\"/>\r\n+   ///         <section name=\"authentication\" type=\"Apache.Qpid.Client.Configuration.AuthenticationConfigurationSectionHandler, Apache.Qpid.Client\"/>\r\n    ///      </sectionGroup>\r\n    ///   </configSections>\r\n    ///   <qpid.client>\r\n    ///      <authentication>\r\n-   ///         <add key=\"TEST\" value=\"Qpid.Client.Tests.Security.TestCallbackHandler, Qpid.Client.Tests\"/>\r\n+   ///         <add key=\"TEST\" value=\"Apache.Qpid.Client.Tests.Security.TestCallbackHandler, Apache.Qpid.Client.Tests\"/>\r\n    ///      </authentication>\r\n    ///   </qpid.client>\r\n    /// </configuration>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Security/CallbackHandlerRegistry.cs",
                "sha": "85be927ff47ce839c7840b27d6b4fb6ad5813918",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Security/IAMQCallbackHandler.cs",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Security/IAMQCallbackHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Security/IAMQCallbackHandler.cs",
                "patch": "@@ -20,10 +20,10 @@\n  */\r\n using System;\r\n using System.Text;\r\n-using Qpid.Client.Protocol;\r\n-using Qpid.Sasl;\r\n+using Apache.Qpid.Client.Protocol;\r\n+using Apache.Qpid.Sasl;\r\n \r\n-namespace Qpid.Client.Security\r\n+namespace Apache.Qpid.Client.Security\r\n {\r\n    public interface IAMQCallbackHandler : ISaslCallbackHandler\r\n    {\r\n@@ -32,3 +32,4 @@ public interface IAMQCallbackHandler : ISaslCallbackHandler\n \r\n } \r\n \r\n+\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Security/IAMQCallbackHandler.cs",
                "sha": "2560c1d96b0032fed666079bdf21725434301784",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Security/UsernamePasswordCallbackHandler.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Security/UsernamePasswordCallbackHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Security/UsernamePasswordCallbackHandler.cs",
                "patch": "@@ -22,10 +22,10 @@\n using System;\r\n using System.Collections;\r\n using System.Text;\r\n-using Qpid.Client.Protocol;\r\n-using Qpid.Sasl;\r\n+using Apache.Qpid.Client.Protocol;\r\n+using Apache.Qpid.Sasl;\r\n \r\n-namespace Qpid.Client.Security\r\n+namespace Apache.Qpid.Client.Security\r\n {\r\n    internal class UsernamePasswordCallbackHandler : IAMQCallbackHandler\r\n    {\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Security/UsernamePasswordCallbackHandler.cs",
                "sha": "489d4d1665a39233f32ecf81e00c792eb49ae216",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/SslOptions.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/SslOptions.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/SslOptions.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\r\n using System.Security.Cryptography.X509Certificates;\r\n \r\n-namespace Qpid.Client\r\n+namespace Apache.Qpid.Client\r\n {\r\n    /// <summary>\r\n    /// Configures SSL-related options to connect to an AMQP broker.\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/SslOptions.cs",
                "sha": "d6371010004766302ffc0ad0d530ad67471a823f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/AMQState.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/State/AMQState.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/State/AMQState.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Client.State\n+namespace Apache.Qpid.Client.State\n {\n     public enum AMQState\n     {\n@@ -32,3 +32,4 @@ public enum AMQState\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/AMQState.cs",
                "sha": "67f8427fb21776b5acc12fc4bbd5a8aad2b23b5b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/AMQStateChangedEvent.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/State/AMQStateChangedEvent.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/State/AMQStateChangedEvent.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Client.State\n+namespace Apache.Qpid.Client.State\n {\n     public class AMQStateChangedEvent\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/AMQStateChangedEvent.cs",
                "sha": "a464bbb6f5d2e1cf6c64abe5237662eb33955702",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/AMQStateManager.cs",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/State/AMQStateManager.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/State/AMQStateManager.cs",
                "patch": "@@ -21,12 +21,12 @@\n using System;\n using System.Collections;\n using log4net;\n-using Qpid.Client.Handler;\n-using Qpid.Client.Protocol;\n-using Qpid.Client.Protocol.Listener;\n-using Qpid.Framing;\n+using Apache.Qpid.Client.Handler;\n+using Apache.Qpid.Client.Protocol;\n+using Apache.Qpid.Client.Protocol.Listener;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.State\n+namespace Apache.Qpid.Client.State\n {\n     public class AMQStateManager : IAMQMethodListener\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/AMQStateManager.cs",
                "sha": "881e01e697abe757c07ad707874e29c5641cdd3c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/IAMQStateListener.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/State/IAMQStateListener.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/State/IAMQStateListener.cs",
                "patch": "@@ -18,11 +18,12 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Client.State\n+namespace Apache.Qpid.Client.State\n {\n     public interface IAMQStateListener\n     {\n         void StateChanged(AMQStateChangedEvent evt);               \n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/IAMQStateListener.cs",
                "sha": "31e4b5046d762ae66ee13b590423f20938388ede",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/IStateAwareMethodListener.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/State/IStateAwareMethodListener.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/State/IStateAwareMethodListener.cs",
                "patch": "@@ -18,13 +18,14 @@\n  * under the License.\n  *\n  */\n-using Qpid.Client.Protocol;\n+using Apache.Qpid.Client.Protocol;\n \n-namespace Qpid.Client.State\n+namespace Apache.Qpid.Client.State\n {\n     public interface IStateAwareMethodListener\n     {\n         void MethodReceived(AMQStateManager stateManager, AMQMethodEvent evt);\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/IStateAwareMethodListener.cs",
                "sha": "0874f3966563091be931804a7ba760c4595acaad",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/IStateListener.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/State/IStateListener.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/State/IStateListener.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System;\n \n-namespace Qpid.Client.State\n+namespace Apache.Qpid.Client.State\n {\n     public interface IStateListener\n     {\n@@ -30,3 +30,4 @@ public interface IStateListener\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/IStateListener.cs",
                "sha": "edd7382f93bdf163662b116f47b43ed31b96751f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/IllegalStateTransitionException.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/State/IllegalStateTransitionException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/State/IllegalStateTransitionException.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid.Client.State\n+namespace Apache.Qpid.Client.State\n {\n     [Serializable]\n     public class IllegalStateTransitionException : AMQException\n@@ -71,3 +71,4 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont\n }\n \n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/IllegalStateTransitionException.cs",
                "sha": "81de622617029d06381a624fd9e7dcf6af80e0ca",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/StateWaiter.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/State/StateWaiter.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/State/StateWaiter.cs",
                "patch": "@@ -20,10 +20,10 @@\n  */\n using System;\n using System.Threading;\n-using Qpid.Client.Protocol;\n+using Apache.Qpid.Client.Protocol;\n using log4net;\n \n-namespace Qpid.Client.State\n+namespace Apache.Qpid.Client.State\n {\n     public class StateWaiter : IStateListener\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/State/StateWaiter.cs",
                "sha": "e739d0cb44b1bd8c1ff039079ff92a898f22affa",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/AMQProtocolProvider.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/AMQProtocolProvider.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/AMQProtocolProvider.cs",
                "patch": "@@ -18,11 +18,11 @@\n  * under the License.\n  *\n  */\n-using Qpid.Codec;\n-using Qpid.Codec.Demux;\n-using Qpid.Framing;\n+using Apache.Qpid.Codec;\n+using Apache.Qpid.Codec.Demux;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Transport\n+namespace Apache.Qpid.Client.Transport\n {\n     public class AMQProtocolProvider\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/AMQProtocolProvider.cs",
                "sha": "dd0bb404cbdd63d9e530d1eb648329c3081fa5dd",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/AmqpChannel.cs",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/AmqpChannel.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/AmqpChannel.cs",
                "patch": "@@ -21,12 +21,12 @@\n using System;\n using System.Collections;\n using log4net;\n-using Qpid.Buffer;\n-using Qpid.Codec;\n-using Qpid.Codec.Support;\n-using Qpid.Framing;\n+using Apache.Qpid.Buffer;\n+using Apache.Qpid.Codec;\n+using Apache.Qpid.Codec.Support;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Transport\n+namespace Apache.Qpid.Client.Transport\n {\n     public class AmqpChannel : IProtocolChannel\n     {\n@@ -108,3 +108,4 @@ private ByteBuffer Encode(object o)\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/AmqpChannel.cs",
                "sha": "dc72846bbe4a8e7d9757279fa31f442d6730663b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/IByteChannel.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/IByteChannel.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/IByteChannel.cs",
                "patch": "@@ -19,9 +19,9 @@\n  *\n  */\n using System;\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Client.Transport\n+namespace Apache.Qpid.Client.Transport\n {\n    /// <summary>\n    /// Represents input/output channels that read",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/IByteChannel.cs",
                "sha": "35806f2a6e98689d435182ab0089274c4eaa57c9",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/IProtocolChannel.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/IProtocolChannel.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/IProtocolChannel.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Collections;\n \n-namespace Qpid.Client.Transport\n+namespace Apache.Qpid.Client.Transport\n {\n     public interface IProtocolChannel : IProtocolWriter\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/IProtocolChannel.cs",
                "sha": "0b59ee8799721b37b674b909d0a44991674e25af",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/IProtocolWriter.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/IProtocolWriter.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/IProtocolWriter.cs",
                "patch": "@@ -18,12 +18,12 @@\n  * under the License.\n  *\n  */\n-using Qpid.Framing;\n+using Apache.Qpid.Framing;\n \n-namespace Qpid.Client.Transport\n+namespace Apache.Qpid.Client.Transport\n {\n     public interface IProtocolWriter\n     {\n         void Write(IDataBlock o);\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/IProtocolWriter.cs",
                "sha": "592dff3a1941d1645e3c137f2fa372b6e29f992d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/IStreamFilter.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/IStreamFilter.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/IStreamFilter.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\r\n using System.IO;\r\n \r\n-namespace Qpid.Client.Transport\r\n+namespace Apache.Qpid.Client.Transport\r\n {\r\n    /// <summary>\r\n    /// Defines a way to introduce an arbitrary filtering\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/IStreamFilter.cs",
                "sha": "7195b3ab04c7aefe958603ac22f35358df0933a7",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/ITransport.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/ITransport.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/ITransport.cs",
                "patch": "@@ -18,10 +18,10 @@\n  * under the License.\n  *\n  */\n-using Qpid.Client.Qms;\n-using Qpid.Client.Protocol;\n+using Apache.Qpid.Client.Qms;\n+using Apache.Qpid.Client.Protocol;\n \n-namespace Qpid.Client.Transport\n+namespace Apache.Qpid.Client.Transport\n {\n     public interface ITransport : IConnectionCloser\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/ITransport.cs",
                "sha": "693a9a9534297034fe1d4913850b86ab4616a9b4",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/IoHandler.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/IoHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/IoHandler.cs",
                "patch": "@@ -22,10 +22,10 @@\n using System.IO;\r\n using System.Threading;\r\n using log4net;\r\n-using Qpid.Buffer;\r\n-using Qpid.Client.Protocol;\r\n+using Apache.Qpid.Buffer;\r\n+using Apache.Qpid.Client.Protocol;\r\n \r\n-namespace Qpid.Client.Transport\r\n+namespace Apache.Qpid.Client.Transport\r\n {\r\n    /// <summary>\r\n    /// Responsible for reading and writing\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/IoHandler.cs",
                "sha": "556f9631b3615fb6b124a9624492b366892589fc",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/ProtocolDecoderOutput.cs",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/ProtocolDecoderOutput.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/ProtocolDecoderOutput.cs",
                "patch": "@@ -20,12 +20,12 @@\n  */\r\n using System;\r\n using System.Threading;\r\n-using Qpid.Client.Protocol;\r\n-using Qpid.Codec;\r\n-using Qpid.Framing;\r\n+using Apache.Qpid.Client.Protocol;\r\n+using Apache.Qpid.Codec;\r\n+using Apache.Qpid.Framing;\r\n using log4net;\r\n \r\n-namespace Qpid.Client.Transport\r\n+namespace Apache.Qpid.Client.Transport\r\n {\r\n    /// <summary>\r\n    /// <see cref=\"IProtocolDecoderOutput\"/> implementation that forwards\r\n@@ -55,5 +55,6 @@ public void Write(object message)\n          }\r\n       }\r\n    }\r\n-} // namespace Qpid.Client.Transport\r\n+} // namespace Apache.Qpid.Client.Transport\r\n+\r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/ProtocolDecoderOutput.cs",
                "sha": "357aab0f45194b6adff0912fcf15c8ba91e533d9",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/SingleProtocolEncoderOutput.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/SingleProtocolEncoderOutput.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/SingleProtocolEncoderOutput.cs",
                "patch": "@@ -19,10 +19,10 @@\n  *\n  */\n using System;\n-using Qpid.Buffer;\n-using Qpid.Codec;\n+using Apache.Qpid.Buffer;\n+using Apache.Qpid.Codec;\n \n-namespace Qpid.Client.Transport\n+namespace Apache.Qpid.Client.Transport\n {\n     public class SingleProtocolEncoderOutput : IProtocolEncoderOutput\n     {\n@@ -37,4 +37,4 @@ public void Write(ByteBuffer buf)\n             buffer = buf;\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/SingleProtocolEncoderOutput.cs",
                "sha": "a1aa889ba0cd1a3224de0860257a6dc7476cf556",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/BlockingSocketTransport.cs",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/BlockingSocketTransport.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/BlockingSocketTransport.cs",
                "patch": "@@ -22,12 +22,12 @@\n using System.Collections;\r\n using System.IO;\r\n using System.Threading;\r\n-using Qpid.Client.Qms;\r\n-using Qpid.Client.Protocol;\r\n-using Qpid.Codec;\r\n-using Qpid.Framing;\r\n+using Apache.Qpid.Client.Qms;\r\n+using Apache.Qpid.Client.Protocol;\r\n+using Apache.Qpid.Codec;\r\n+using Apache.Qpid.Framing;\r\n \r\n-namespace Qpid.Client.Transport.Socket.Blocking\r\n+namespace Apache.Qpid.Client.Transport.Socket.Blocking\r\n {\r\n    /// <summary>\r\n    /// TCP Socket transport supporting both\r\n@@ -147,3 +147,4 @@ public void Write(object message)\n    }\r\n }\r\n \r\n+\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/BlockingSocketTransport.cs",
                "sha": "8a16f9a6755d0d7ec17450418ed5057d70db8317",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/ByteChannel.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/ByteChannel.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/ByteChannel.cs",
                "patch": "@@ -20,9 +20,9 @@\n  */\r\n using System;\r\n using log4net;\r\n-using Qpid.Buffer;\r\n+using Apache.Qpid.Buffer;\r\n \r\n-namespace Qpid.Client.Transport.Socket.Blocking\r\n+namespace Apache.Qpid.Client.Transport.Socket.Blocking\r\n {\r\n     class ByteChannel : IByteChannel\r\n     {\r\n@@ -89,4 +89,4 @@ public void EndWrite(IAsyncResult result)\n            _lowerChannel.EndWrite(result);\r\n         }\r\n      }\r\n-}\n\\ No newline at end of file\n+}\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/ByteChannel.cs",
                "sha": "077f69541fcddf4a98d460e9cd47e8838f5401b5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/ISocketConnector.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/ISocketConnector.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/ISocketConnector.cs",
                "patch": "@@ -20,9 +20,9 @@\n  */\r\n using System;\r\n using System.IO;\r\n-using Qpid.Client.Qms;\r\n+using Apache.Qpid.Client.Qms;\r\n \r\n-namespace Qpid.Client.Transport.Socket.Blocking\r\n+namespace Apache.Qpid.Client.Transport.Socket.Blocking\r\n {\r\n    interface ISocketConnector : IDisposable\r\n    {\r\n@@ -31,3 +31,4 @@ interface ISocketConnector : IDisposable\n    }\r\n }\r\n \r\n+\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/ISocketConnector.cs",
                "sha": "3d5d2898cf573300fca9ffe513201303dbc41bff",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/SocketConnector.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/SocketConnector.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/SocketConnector.cs",
                "patch": "@@ -21,9 +21,9 @@\n using System.IO;\r\n using System.Net;\r\n using System.Net.Sockets;\r\n-using Qpid.Client.Qms;\r\n+using Apache.Qpid.Client.Qms;\r\n \r\n-namespace Qpid.Client.Transport.Socket.Blocking\r\n+namespace Apache.Qpid.Client.Transport.Socket.Blocking\r\n {\r\n    /// <summary>\r\n    /// Implements a TCP connection over regular sockets.\r\n@@ -68,3 +68,4 @@ public EndPoint LocalEndpoint\n    }\r\n }\r\n \r\n+\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/SocketConnector.cs",
                "sha": "83f7287e9b126d90e652ce4fb270020b53ffab5e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/SslSocketConnector.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/SslSocketConnector.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/SslSocketConnector.cs",
                "patch": "@@ -21,12 +21,12 @@\n using System.IO;\r\n using System.Net;\r\n using log4net;\r\n-using Qpid.Client.Qms;\r\n+using Apache.Qpid.Client.Qms;\r\n using Org.Mentalis.Security.Ssl;\r\n using MCertificate = Org.Mentalis.Security.Certificates.Certificate;\r\n using MCertificateChain = Org.Mentalis.Security.Certificates.CertificateChain;\r\n \r\n-namespace Qpid.Client.Transport.Socket.Blocking\r\n+namespace Apache.Qpid.Client.Transport.Socket.Blocking\r\n {\r\n    /// <summary>\r\n    /// Implements a TLS v1.0 connection using the Mentalis.org library\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Transport/Socket/Blocking/SslSocketConnector.cs",
                "sha": "708edde48c023b22cdf22032d0e62c9ff5f9a623",
                "status": "modified"
            },
            {
                "additions": 98,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Util/FlowControlQueue.cs",
                "changes": 98,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Client/Util/FlowControlQueue.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 0,
                "filename": "qpid/dotnet/Qpid.Client/Client/Util/FlowControlQueue.cs",
                "patch": "@@ -0,0 +1,98 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ * \r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+using System;\r\n+using System.Collections;\r\n+using System.Text;\r\n+using System.Threading;\r\n+using Apache.Qpid.Collections;\r\n+using Apache.Qpid.Common;\r\n+\r\n+namespace Apache.Qpid.Client.Util\r\n+{\r\n+   internal delegate void ThresholdMethod(int currentCount);\r\n+\r\n+   /// <summary>\r\n+   /// Basic bounded queue used to implement prefetching.\r\n+   /// Notice we do the callbacks here asynchronously to\r\n+   /// avoid adding more complexity to the channel impl.\r\n+   /// </summary>\r\n+   internal class FlowControlQueue\r\n+   {\r\n+      private BlockingQueue _queue = new LinkedBlockingQueue();\r\n+      private int _itemCount;\r\n+      private int _lowerBound;\r\n+      private int _upperBound;\r\n+      private ThresholdMethod _underThreshold;\r\n+      private ThresholdMethod _overThreshold;\r\n+\r\n+      public FlowControlQueue(\r\n+         int lowerBound, \r\n+         int upperBound,\r\n+         ThresholdMethod underThreshold,\r\n+         ThresholdMethod overThreshold\r\n+         )\r\n+      {\r\n+         _lowerBound = lowerBound;\r\n+         _upperBound = upperBound;\r\n+         _underThreshold = underThreshold;\r\n+         _overThreshold = overThreshold;\r\n+      }\r\n+\r\n+      public void Enqueue(object item)\r\n+      {\r\n+         _queue.EnqueueBlocking(item);\r\n+         int count = Interlocked.Increment(ref _itemCount);\r\n+         if ( _overThreshold != null )\r\n+         {\r\n+            if ( count == _upperBound )\r\n+            {\r\n+               _overThreshold.BeginInvoke(\r\n+                  count, new AsyncCallback(OnAsyncCallEnd), \r\n+                  _overThreshold\r\n+                  );\r\n+            }\r\n+         }\r\n+      }\r\n+\r\n+      public object Dequeue()\r\n+      {\r\n+         object item = _queue.DequeueBlocking();\r\n+         int count = Interlocked.Decrement(ref _itemCount);\r\n+         if ( _underThreshold != null )\r\n+         {\r\n+            if ( count == _lowerBound )\r\n+            {\r\n+               _underThreshold.BeginInvoke(\r\n+                  count, new AsyncCallback(OnAsyncCallEnd),\r\n+                  _underThreshold\r\n+                  );\r\n+            }\r\n+         }\r\n+         return item;\r\n+      }\r\n+\r\n+      private void OnAsyncCallEnd(IAsyncResult res)\r\n+      {\r\n+         ThresholdMethod method = (ThresholdMethod)res.AsyncState;\r\n+         method.EndInvoke(res);\r\n+      }\r\n+   }\r\n+}\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Client/Util/FlowControlQueue.cs",
                "sha": "87bb2a2859ef28c8be15d97c3dc1852d396adb29",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Properties/AssemblyInfo.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Properties/AssemblyInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/Properties/AssemblyInfo.cs",
                "patch": "@@ -23,11 +23,11 @@\n // General Information about an assembly is controlled through the following \n // set of attributes. Change these attribute values to modify the information\n // associated with an assembly.\n-[assembly: AssemblyTitle(\"Qpid.Client\")]\n+[assembly: AssemblyTitle(\"Apache.Qpid.Client\")]\n [assembly: AssemblyDescription(\"Qpid Client API implementation\")]\n [assembly: AssemblyConfiguration(\"\")]\n [assembly: AssemblyCompany(\"Apache Qpid\")]\n-[assembly: AssemblyProduct(\"\")]\n+[assembly: AssemblyProduct(\"Apache.Qpid.Client\")]\n [assembly: AssemblyCopyright(\"Copyright (c) 2006 The Apache Software Foundation\")]\n [assembly: AssemblyTrademark(\"\")]\n [assembly: AssemblyCulture(\"\")]",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Properties/AssemblyInfo.cs",
                "sha": "8722a02db9dbd2cc284dcc3f16e48fdad1066b67",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Qpid.Client.csproj",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/Qpid.Client.csproj?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Client/Qpid.Client.csproj",
                "patch": "@@ -7,8 +7,8 @@\n     <ProjectGuid>{68987C05-3768-452C-A6FC-6BA1D372852F}</ProjectGuid>\r\n     <OutputType>Library</OutputType>\r\n     <AppDesignerFolder>Properties</AppDesignerFolder>\r\n-    <RootNamespace>Qpid.Client</RootNamespace>\r\n-    <AssemblyName>Qpid.Client</AssemblyName>\r\n+    <RootNamespace>Apache.Qpid.Client</RootNamespace>\r\n+    <AssemblyName>Apache.Qpid.Client</AssemblyName>\r\n   </PropertyGroup>\r\n   <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n     <DebugSymbols>true</DebugSymbols>\r\n@@ -120,6 +120,7 @@\n     <Compile Include=\"Client\\Transport\\Socket\\Blocking\\SslSocketConnector.cs\" />\r\n     <Compile Include=\"Client\\Transport\\Socket\\Blocking\\SocketConnector.cs\" />\r\n     <Compile Include=\"Client\\Transport\\Socket\\Blocking\\ISocketConnector.cs\" />\r\n+    <Compile Include=\"Client\\Util\\FlowControlQueue.cs\" />\r\n     <Compile Include=\"Properties\\AssemblyInfo.cs\" />\r\n     <Compile Include=\"qms\\BrokerInfo.cs\" />\r\n     <Compile Include=\"qms\\ConnectionInfo.cs\" />\r\n@@ -159,4 +160,4 @@\n   <Target Name=\"AfterBuild\">\r\n   </Target>\r\n   -->\r\n-</Project>\n\\ No newline at end of file\n+</Project>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/Qpid.Client.csproj",
                "sha": "9294d767649932f951b5178f7c1c811600de4284",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/default.build",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/default.build?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 7,
                "filename": "qpid/dotnet/Qpid.Client/default.build",
                "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\"?>\n-<project name=\"Qpid.Client\" default=\"build\">\n+<project name=\"Apache.Qpid.Client\" default=\"build\">\n     <!--\n \t\tProperties that come from master build file\n \t\t- build.dir: root directory for build\n@@ -18,12 +18,12 @@\n          </sources>\n          <references>\n             <include name=\"${build.dir}/log4net.dll\" />\t\n-            <include name=\"${build.dir}/Qpid.Buffer.dll\" />\t\n-            <include name=\"${build.dir}/Qpid.Sasl.dll\" />\t\n-            <include name=\"${build.dir}/Qpid.Codec.dll\" />\t\n-            <include name=\"${build.dir}/Qpid.Common.dll\" />\t\n-            <include name=\"${build.dir}/Qpid.Messaging.dll\" />\t\n-            <include name=\"${build.dir}/Org.Mentalis.Security.dll\" />\t\n+            <include name=\"${build.dir}/Apache.Qpid.Buffer.dll\" />\t\n+            <include name=\"${build.dir}/Apache.Qpid.Sasl.dll\" />\t\n+            <include name=\"${build.dir}/Apache.Qpid.Codec.dll\" />\t\n+            <include name=\"${build.dir}/Apache.Qpid.Common.dll\" />\t\n+            <include name=\"${build.dir}/Apache.Qpid.Messaging.dll\" />\t\n+            <include name=\"${build.dir}/Org.Mentalis.Security.dll\" />\n          </references>\n         </csc>\n     </target>",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/default.build",
                "sha": "14e457203e13e6641eeeb7fde5604119d6a467c5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/qms/BrokerInfo.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/qms/BrokerInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/qms/BrokerInfo.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System;\n \n-namespace Qpid.Client.Qms\n+namespace Apache.Qpid.Client.Qms\n {\n     /// <summary>\n     /// Know URL option names.",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/qms/BrokerInfo.cs",
                "sha": "93c00af6e0825f096ae6907e2e13938f0e457562",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/qms/ConnectionInfo.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/qms/ConnectionInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/qms/ConnectionInfo.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System.Collections;\n \n-namespace Qpid.Client.Qms\n+namespace Apache.Qpid.Client.Qms\n {\n     class ConnectionUrlConstants \n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/qms/ConnectionInfo.cs",
                "sha": "4d3f7698b537c9dabbf96c8238830d9c95025dc3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/qms/FailoverPolicy.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/qms/FailoverPolicy.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Client/qms/FailoverPolicy.cs",
                "patch": "@@ -21,9 +21,9 @@\n using System;\n using System.Text;\n using log4net;\n-using Qpid.Client.Qms.Failover;\n+using Apache.Qpid.Client.Qms.Failover;\n \n-namespace Qpid.Client.Qms\n+namespace Apache.Qpid.Client.Qms\n {\n     public class FailoverPolicy\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/qms/FailoverPolicy.cs",
                "sha": "d5d1e8d8acba5ee78947804642a42fbc0dda3c3e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/qms/UrlSyntaxException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/qms/UrlSyntaxException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/qms/UrlSyntaxException.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System.Runtime.Serialization;\n using System.Text;\n \n-namespace Qpid.Client.Qms\n+namespace Apache.Qpid.Client.Qms\n {\n     [Serializable]\n     public class UrlSyntaxException : UriFormatException",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/qms/UrlSyntaxException.cs",
                "sha": "ab3de325d4f3f5b3011410e45228e1f372cc2384",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/qms/failover/FailoverMethod.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/qms/failover/FailoverMethod.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/qms/failover/FailoverMethod.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System;\n \n-namespace Qpid.Client.Qms.Failover\n+namespace Apache.Qpid.Client.Qms.Failover\n {\n     public class FailoverMethodConstants\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/qms/failover/FailoverMethod.cs",
                "sha": "f32b275e84eb99c937a43fca9d2ef7c8dc0ff164",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/qms/failover/FailoverRoundRobin.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/qms/failover/FailoverRoundRobin.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/qms/failover/FailoverRoundRobin.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System.Text;\n using log4net;\n \n-namespace Qpid.Client.Qms.Failover\n+namespace Apache.Qpid.Client.Qms.Failover\n {\n     public class FailoverRoundRobin : IFailoverMethod\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/qms/failover/FailoverRoundRobin.cs",
                "sha": "8103940fb465fe83a0ac8603bb096e76944ee786",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/qms/failover/FailoverSingleServer.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Client/qms/failover/FailoverSingleServer.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Client/qms/failover/FailoverSingleServer.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System;\n \n-namespace Qpid.Client.Qms.Failover\n+namespace Apache.Qpid.Client.Qms.Failover\n {\n     public class FailoverSingleServer : IFailoverMethod\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Client/qms/failover/FailoverSingleServer.cs",
                "sha": "5e502b897e0ec947f6e47f93f8633f7021473ec4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/CumulativeProtocolDecoder.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/CumulativeProtocolDecoder.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Codec/CumulativeProtocolDecoder.cs",
                "patch": "@@ -20,9 +20,9 @@\n  */\n using System;\n using log4net;\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Codec\n+namespace Apache.Qpid.Codec\n {\n    public abstract class CumulativeProtocolDecoder : IProtocolDecoder\n    {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/CumulativeProtocolDecoder.cs",
                "sha": "6cfd75c85164293c655ded299531ccbb9b94adf1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Demux/DemuxingProtocolCodecFactory.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/Demux/DemuxingProtocolCodecFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Codec/Demux/DemuxingProtocolCodecFactory.cs",
                "patch": "@@ -20,9 +20,9 @@\n  */\n using System;\n using System.Collections;\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Codec.Demux\n+namespace Apache.Qpid.Codec.Demux\n {\n     public class DemuxingProtocolCodecFactory : IProtocolCodecFactory\n     {\n@@ -384,3 +384,4 @@ public IMessageDecoder NewDecoder()\n }\n \n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Demux/DemuxingProtocolCodecFactory.cs",
                "sha": "78276202d617cc38b7f308040d2a157f13ed36e1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Demux/IMessageDecoder.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/Demux/IMessageDecoder.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Codec/Demux/IMessageDecoder.cs",
                "patch": "@@ -19,9 +19,9 @@\n  *\n  */\n using System;\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Codec.Demux\n+namespace Apache.Qpid.Codec.Demux\n {\n     public interface IMessageDecoder\n     {\n@@ -53,3 +53,4 @@ public interface IMessageDecoder\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Demux/IMessageDecoder.cs",
                "sha": "58926734407a1e6b60ac9f9f1924967bb9fd180e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Demux/IMessageDecoderFactory.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/Demux/IMessageDecoderFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Codec/Demux/IMessageDecoderFactory.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Codec.Demux\n+namespace Apache.Qpid.Codec.Demux\n {\n     public interface IMessageDecoderFactory\n     {\n@@ -29,3 +29,4 @@ public interface IMessageDecoderFactory\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Demux/IMessageDecoderFactory.cs",
                "sha": "9e333d670f3959610d0a6bae047da46c7903bdc3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Demux/IMessageEncoder.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/Demux/IMessageEncoder.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Codec/Demux/IMessageEncoder.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Collections;\n \n-namespace Qpid.Codec.Demux\n+namespace Apache.Qpid.Codec.Demux\n {\n     public interface IMessageEncoder\n     {\n@@ -45,3 +45,4 @@ Hashtable MessageTypes\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Demux/IMessageEncoder.cs",
                "sha": "75ae23592bde3726aca1a0ec4718a61b914f7f71",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Demux/IMessageEncoderFactory.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/Demux/IMessageEncoderFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Codec/Demux/IMessageEncoderFactory.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Codec.Demux\n+namespace Apache.Qpid.Codec.Demux\n {\n     public interface IMessageEncoderFactory\n     {\n@@ -29,3 +29,4 @@ public interface IMessageEncoderFactory\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Demux/IMessageEncoderFactory.cs",
                "sha": "3001d1a963c025b975acf3236f04756a7328773a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Demux/MessageDecoderResult.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/Demux/MessageDecoderResult.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Codec/Demux/MessageDecoderResult.cs",
                "patch": "@@ -18,11 +18,12 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Codec.Demux\n+namespace Apache.Qpid.Codec.Demux\n {\n     public enum MessageDecoderResult\n     {\n         OK, NOT_OK, NEED_DATA\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Demux/MessageDecoderResult.cs",
                "sha": "ab01864bc071dd9d91ed1d6c90b43e589365fcf6",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/IProtocolCodecFactory.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/IProtocolCodecFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Codec/IProtocolCodecFactory.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Codec\n+namespace Apache.Qpid.Codec\n {\n     public interface IProtocolCodecFactory\n     {\n@@ -34,3 +34,4 @@ IProtocolDecoder Decoder\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/IProtocolCodecFactory.cs",
                "sha": "a26b91b16c737983bb9fb115933fd24320464a58",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/IProtocolDecoder.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/IProtocolDecoder.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Codec/IProtocolDecoder.cs",
                "patch": "@@ -19,9 +19,9 @@\n  *\n  */\n using System;\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Codec\n+namespace Apache.Qpid.Codec\n {\n     public interface IProtocolDecoder : IDisposable\n     {\n@@ -38,3 +38,4 @@ public interface IProtocolDecoder : IDisposable\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/IProtocolDecoder.cs",
                "sha": "3cccb0f7dac81fae78ddfff4b007956a66d87b92",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/IProtocolDecoderOutput.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/IProtocolDecoderOutput.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Codec/IProtocolDecoderOutput.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Codec\n+namespace Apache.Qpid.Codec\n {\n     public interface IProtocolDecoderOutput\n     {\n@@ -32,3 +32,4 @@ public interface IProtocolDecoderOutput\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/IProtocolDecoderOutput.cs",
                "sha": "77a1aea9dba92e0b355e38becc7fd433f285b4a9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/IProtocolEncoder.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/IProtocolEncoder.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Codec/IProtocolEncoder.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System;\n \n-namespace Qpid.Codec\n+namespace Apache.Qpid.Codec\n {\n     public interface IProtocolEncoder : IDisposable\n     {\n@@ -38,3 +38,4 @@ public interface IProtocolEncoder : IDisposable\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/IProtocolEncoder.cs",
                "sha": "a16f2ad9d66177890ee790b74c7f43b7c52c778f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/IProtocolEncoderOutput.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/IProtocolEncoderOutput.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Codec/IProtocolEncoderOutput.cs",
                "patch": "@@ -18,9 +18,9 @@\n  * under the License.\n  *\n  */\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Codec\n+namespace Apache.Qpid.Codec\n {\n     public interface IProtocolEncoderOutput\n     {\n@@ -34,3 +34,4 @@ public interface IProtocolEncoderOutput\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/IProtocolEncoderOutput.cs",
                "sha": "70f9be38dcc24214e799bd5d11f3ba79f0246d52",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Properties/AssemblyInfo.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/Properties/AssemblyInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Codec/Properties/AssemblyInfo.cs",
                "patch": "@@ -23,11 +23,11 @@\n // General Information about an assembly is controlled through the following \n // set of attributes. Change these attribute values to modify the information\n // associated with an assembly.\n-[assembly: AssemblyTitle(\"Mina.Codec\")]\n+[assembly: AssemblyTitle(\"Apache.Qpid.Codec\")]\n [assembly: AssemblyDescription(\"\")]\n [assembly: AssemblyConfiguration(\"\")]\n [assembly: AssemblyCompany(\"Apache Qpid\")]\n-[assembly: AssemblyProduct(\"Mina.Codec\")]\n+[assembly: AssemblyProduct(\"Apache.Qpid.Codec\")]\n [assembly: AssemblyCopyright(\"Copyright (c) 2006 The Apache Software Foundation\")]\n [assembly: AssemblyTrademark(\"\")]\n [assembly: AssemblyCulture(\"\")]",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Properties/AssemblyInfo.cs",
                "sha": "aa1d6a662e87e85c8dd3775cd086f1247fd73b0c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/ProtocolCodecException.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/ProtocolCodecException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Codec/ProtocolCodecException.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid.Codec\n+namespace Apache.Qpid.Codec\n {\n     [Serializable]\n     public class ProtocolCodecException : Exception\n@@ -46,3 +46,4 @@ protected ProtocolCodecException(SerializationInfo info, StreamingContext ctxt)\n }\n \n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/ProtocolCodecException.cs",
                "sha": "49678d2c11dc996ce416035716fd635f658442b6",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/ProtocolDecoderException.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/ProtocolDecoderException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Codec/ProtocolDecoderException.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid.Codec\n+namespace Apache.Qpid.Codec\n {\n     [Serializable]\n     public class ProtocolDecoderException : ProtocolCodecException\n@@ -67,3 +67,4 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont\n }\n \n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/ProtocolDecoderException.cs",
                "sha": "8e7e6da1450f6cdc014cd2c4341887cc0ac14a81",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/ProtocolEncoderException.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/ProtocolEncoderException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Codec/ProtocolEncoderException.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid.Codec\n+namespace Apache.Qpid.Codec\n {\n     [Serializable]\n     public class ProtocolEncoderException : ProtocolCodecException\n@@ -46,3 +46,4 @@ protected ProtocolEncoderException(SerializationInfo info, StreamingContext ctxt\n }\n \n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/ProtocolEncoderException.cs",
                "sha": "ac565a308bc09e190ed2bceeacb26523ee8f8163",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Qpid.Codec.csproj",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/Qpid.Codec.csproj?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Codec/Qpid.Codec.csproj",
                "patch": "@@ -7,8 +7,8 @@\n     <ProjectGuid>{22D0D0C2-77AF-4DE3-B456-7FF3893F9F88}</ProjectGuid>\r\n     <OutputType>Library</OutputType>\r\n     <AppDesignerFolder>Properties</AppDesignerFolder>\r\n-    <RootNamespace>Qpid.Codec</RootNamespace>\r\n-    <AssemblyName>Qpid.Codec</AssemblyName>\r\n+    <RootNamespace>Apache.Qpid.Codec</RootNamespace>\r\n+    <AssemblyName>Apache.Qpid.Codec</AssemblyName>\r\n   </PropertyGroup>\r\n   <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n     <DebugSymbols>true</DebugSymbols>\r\n@@ -70,4 +70,4 @@\n   <Target Name=\"AfterBuild\">\r\n   </Target>\r\n   -->\r\n-</Project>\n\\ No newline at end of file\n+</Project>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Qpid.Codec.csproj",
                "sha": "ebe46813979c4e242a8079ef51dc725e9cd2798c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Support/SimpleProtocolDecoderOutput.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/Support/SimpleProtocolDecoderOutput.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Codec/Support/SimpleProtocolDecoderOutput.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System.Collections;\n \n-namespace Qpid.Codec.Support\n+namespace Apache.Qpid.Codec.Support\n {\n     public class SimpleProtocolDecoderOutput : IProtocolDecoderOutput\n     {\n@@ -41,3 +41,4 @@ public void Write(object message)\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Support/SimpleProtocolDecoderOutput.cs",
                "sha": "0a4ff10ff08993657dcad009ff93cd66abff960c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Support/SimpleProtocolEncoderOutput.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/Support/SimpleProtocolEncoderOutput.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Codec/Support/SimpleProtocolEncoderOutput.cs",
                "patch": "@@ -19,9 +19,9 @@\n  *\n  */\n using System.Collections;\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Codec.Support\n+namespace Apache.Qpid.Codec.Support\n {\n     public abstract class SimpleProtocolEncoderOutput : IProtocolEncoderOutput\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/Support/SimpleProtocolEncoderOutput.cs",
                "sha": "2e4224ef98df1323d4e4db83da7e7c0b6ce88088",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/default.build",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Codec/default.build?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Codec/default.build",
                "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\"?>\r\n-<project name=\"Qpid.Codec\" default=\"build\">\r\n+<project name=\"Apache.Qpid.Codec\" default=\"build\">\r\n     <!--\r\n \t\tProperties that come from master build file\r\n \t\t- build.dir: root directory for build\r\n@@ -18,7 +18,7 @@\n          </sources>\r\n          <references>\r\n             <include name=\"${build.dir}/log4net.dll\" />\t\r\n-            <include name=\"${build.dir}/Qpid.Buffer.dll\" />\t\r\n+            <include name=\"${build.dir}/Apache.Qpid.Buffer.dll\" />\t\r\n          </references>\r\n         </csc>\r\n     </target>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Codec/default.build",
                "sha": "db9e8d1166dc0eca85fd4092577a060217b54503",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common.Tests/Properties/AssemblyInfo.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common.Tests/Properties/AssemblyInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common.Tests/Properties/AssemblyInfo.cs",
                "patch": "@@ -3,11 +3,11 @@\n // General Information about an assembly is controlled through the following \n // set of attributes. Change these attribute values to modify the information\n // associated with an assembly.\n-[assembly: AssemblyTitle(\"Qpid.Common.Tests\")]\n+[assembly: AssemblyTitle(\"Apache.Qpid.Common.Tests\")]\n [assembly: AssemblyDescription(\"\")]\n [assembly: AssemblyConfiguration(\"\")]\n [assembly: AssemblyCompany(\"Apache Qpid\")]\n-[assembly: AssemblyProduct(\"Qpid.Common.Tests\")]\n+[assembly: AssemblyProduct(\"Apache.Qpid.Common.Tests\")]\n [assembly: AssemblyCopyright(\"Copyright (c) 2006 The Apache Software Foundation\")]\n [assembly: AssemblyTrademark(\"\")]\n [assembly: AssemblyCulture(\"\")]",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common.Tests/Properties/AssemblyInfo.cs",
                "sha": "32dcae60aeb4e3dd3b433ea054de9d84dac2b3cd",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common.Tests/Qpid.Common.Tests.csproj",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common.Tests/Qpid.Common.Tests.csproj?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Common.Tests/Qpid.Common.Tests.csproj",
                "patch": "@@ -7,8 +7,8 @@\n     <ProjectGuid>{F83624B0-762B-4D82-900D-FF4C1B36E36E}</ProjectGuid>\r\n     <OutputType>Library</OutputType>\r\n     <AppDesignerFolder>Properties</AppDesignerFolder>\r\n-    <RootNamespace>Qpid.Common.Tests</RootNamespace>\r\n-    <AssemblyName>Qpid.Common.Tests</AssemblyName>\r\n+    <RootNamespace>Apache.Qpid.Tests</RootNamespace>\r\n+    <AssemblyName>Apache.Qpid.Common.Tests</AssemblyName>\r\n   </PropertyGroup>\r\n   <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n     <DebugSymbols>true</DebugSymbols>\r\n@@ -62,4 +62,4 @@\n   <Target Name=\"AfterBuild\">\r\n   </Target>\r\n   -->\r\n-</Project>\n\\ No newline at end of file\n+</Project>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common.Tests/Qpid.Common.Tests.csproj",
                "sha": "b51faf92c7ca909377c8c17a0a35f6cabf923b6f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common.Tests/Qpid/Collections/TestConsumerProducerQueue.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common.Tests/Qpid/Collections/TestConsumerProducerQueue.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common.Tests/Qpid/Collections/TestConsumerProducerQueue.cs",
                "patch": "@@ -23,9 +23,9 @@\n using System.Text;\r\n using System.Threading;\r\n using NUnit.Framework;\r\n-using Qpid.Collections;\r\n+using Apache.Qpid.Collections;\r\n \r\n-namespace Qpid.Collections.Tests\r\n+namespace Apache.Qpid.Collections.Tests\r\n {\r\n     [TestFixture]\r\n     public class TestConsumerProducerQueue\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common.Tests/Qpid/Collections/TestConsumerProducerQueue.cs",
                "sha": "03ed9999998faff9f4fa29697c247ce9d56f76a8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common.Tests/Qpid/Collections/TestLinkedHashtable.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common.Tests/Qpid/Collections/TestLinkedHashtable.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common.Tests/Qpid/Collections/TestLinkedHashtable.cs",
                "patch": "@@ -23,7 +23,7 @@\n using System.Text;\n using NUnit.Framework;\n \n-namespace Qpid.Collections\n+namespace Apache.Qpid.Collections\n {\n     [TestFixture]\n     public class TestLinkedHashtable",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common.Tests/Qpid/Collections/TestLinkedHashtable.cs",
                "sha": "dbbc98a2e69e90d5448508907e732f4c0622e673",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common.Tests/Qpid/Framing/TestAMQType.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common.Tests/Qpid/Framing/TestAMQType.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Common.Tests/Qpid/Framing/TestAMQType.cs",
                "patch": "@@ -20,10 +20,10 @@\n  */\r\n using System;\r\n using NUnit.Framework;\r\n-using Qpid.Buffer;\r\n-using Qpid.Framing;\r\n+using Apache.Qpid.Buffer;\r\n+using Apache.Qpid.Framing;\r\n \r\n-namespace Qpid.Framing.Tests\r\n+namespace Apache.Qpid.Framing.Tests\r\n {\r\n     [TestFixture]\r\n     public class TestAMQType\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common.Tests/Qpid/Framing/TestAMQType.cs",
                "sha": "ab4cb4409c3f314bedb91ec986cf2d788fa80b45",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common.Tests/Qpid/Framing/TestEncodingUtils.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common.Tests/Qpid/Framing/TestEncodingUtils.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Common.Tests/Qpid/Framing/TestEncodingUtils.cs",
                "patch": "@@ -20,10 +20,10 @@\n  */\r\n using System;\r\n using NUnit.Framework;\r\n-using Qpid.Buffer;\r\n-using Qpid.Framing;\r\n+using Apache.Qpid.Buffer;\r\n+using Apache.Qpid.Framing;\r\n \r\n-namespace Qpid.Framing.Tests\r\n+namespace Apache.Qpid.Framing.Tests\r\n {\r\n     [TestFixture]\r\n     public class TestEncodingUtils\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common.Tests/Qpid/Framing/TestEncodingUtils.cs",
                "sha": "720d7697d362a1cfdf4a8a66604ddee8aeb0a47b",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common.Tests/default.build",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common.Tests/default.build?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Common.Tests/default.build",
                "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\"?>\r\n-<project name=\"Qpid.Common\" default=\"test\">\r\n+<project name=\"Apache.Qpid.Common\" default=\"test\">\r\n \r\n    <target name=\"build\">\r\n         <csc target=\"library\" \r\n@@ -14,9 +14,9 @@\n                <include name=\"${build.dir}/log4net.dll\" />\r\n                <include name=\"${build.dir}/nunit.framework.dll\" />\r\n                <include name=\"${build.dir}/${project::get-name()}.dll\" />\r\n-               <include name=\"${build.dir}/Qpid.Codec.dll\" />\r\n-               <include name=\"${build.dir}/Qpid.Messaging.dll\" />\r\n-               <include name=\"${build.dir}/Qpid.Buffer.dll\" />\r\n+               <include name=\"${build.dir}/Apache.Qpid.Codec.dll\" />\r\n+               <include name=\"${build.dir}/Apache.Qpid.Messaging.dll\" />\r\n+               <include name=\"${build.dir}/Apache.Qpid.Buffer.dll\" />\r\n             </references>\r\n             \r\n         </csc>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common.Tests/default.build",
                "sha": "00658bdbe2e182f0e2cb4607f1a908b4b74f0299",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AMQChannelClosedException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/AMQChannelClosedException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/AMQChannelClosedException.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid\n+namespace Apache.Qpid\n {\n     [Serializable]\n     public class AMQChannelClosedException : AMQException",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AMQChannelClosedException.cs",
                "sha": "98c6966cd10a6629cc6a48c0e7ab9dc429e33f8f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AMQConnectionClosedException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/AMQConnectionClosedException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/AMQConnectionClosedException.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid\n+namespace Apache.Qpid\n {\n     [Serializable]\n     public class AMQConnectionClosedException : AMQException",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AMQConnectionClosedException.cs",
                "sha": "f3bc387a5c854b44c13bd2b11d2d5dd548076b09",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AMQDisconnectedException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/AMQDisconnectedException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/AMQDisconnectedException.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid\n+namespace Apache.Qpid\n {\n     [Serializable]\n     public class AMQDisconnectedException : AMQException",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AMQDisconnectedException.cs",
                "sha": "b5c4d544cdabc0c46226f8637956aaae67387a93",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AMQException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/AMQException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/AMQException.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System.Runtime.Serialization;\n using log4net;\n \n-namespace Qpid\n+namespace Apache.Qpid\n {\n     /// <summary>\n     /// The generic AMQ exception.",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AMQException.cs",
                "sha": "f9f7158a2678f1d0ad2cc64f7f1050e7a1fa1d98",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AMQInvalidArgumentException.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/AMQInvalidArgumentException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/AMQInvalidArgumentException.cs",
                "patch": "@@ -22,9 +22,9 @@\n using System;\r\n using System.Runtime.Serialization;\r\n \r\n-using Qpid.Protocol;\r\n+using Apache.Qpid.Protocol;\r\n \r\n-namespace Qpid\r\n+namespace Apache.Qpid\r\n {\r\n    /// <summary>\r\n    /// Thrown when an invalid argument was supplied to the broker\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AMQInvalidArgumentException.cs",
                "sha": "0fb4ddae993c0a8a866c8be72bb99f9457de7046",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AMQInvalidRoutingKeyException.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/AMQInvalidRoutingKeyException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/AMQInvalidRoutingKeyException.cs",
                "patch": "@@ -22,9 +22,9 @@\n using System;\r\n using System.Runtime.Serialization;\r\n \r\n-using Qpid.Protocol;\r\n+using Apache.Qpid.Protocol;\r\n \r\n-namespace Qpid\r\n+namespace Apache.Qpid\r\n {\r\n    /// <summary>\r\n    /// Thrown when an invalid routing key was sent to the broker\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AMQInvalidRoutingKeyException.cs",
                "sha": "3f8dead94d53e54f2cd395ea0c0c01f9ff856c85",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AMQUndeliveredException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/AMQUndeliveredException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/AMQUndeliveredException.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid\n+namespace Apache.Qpid\n {\n     /// <summary>\n     /// Thrown when a message has been bounced by the broker, indicating it could not be delivered.",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AMQUndeliveredException.cs",
                "sha": "70ad86c8a3021172b665fc75eb98f4894f215d95",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AssemblySettings.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/AssemblySettings.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/AssemblySettings.cs",
                "patch": "@@ -27,7 +27,7 @@\n using System.Xml;\n using log4net;\n \n-namespace Qpid.Common\n+namespace Apache.Qpid.Common\n {\n     /// <summary>\n     ///",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/AssemblySettings.cs",
                "sha": "888de692e88ae05495086d19ec0c98dc9fd8d5f9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Collections/BlockingQueue.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Collections/BlockingQueue.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/Collections/BlockingQueue.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Collections;\n \n-namespace Qpid.Collections\n+namespace Apache.Qpid.Collections\n {\n     public abstract class BlockingQueue : Queue\n     {\n@@ -92,3 +92,4 @@ public abstract class BlockingQueue : Queue\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Collections/BlockingQueue.cs",
                "sha": "dcfacf847466bf8124282a43a6f93be1d92c08ee",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Collections/ConsumerProducerQueue.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Collections/ConsumerProducerQueue.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/Collections/ConsumerProducerQueue.cs",
                "patch": "@@ -23,7 +23,7 @@\n using System.Threading;\r\n \r\n \r\n-namespace Qpid.Collections\r\n+namespace Apache.Qpid.Collections\r\n {\r\n    /// <summary>\r\n    /// Simple FIFO queue to support multi-threaded consumer\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Collections/ConsumerProducerQueue.cs",
                "sha": "ea4526faaf37bb617887a6382d5dda976028066b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Collections/LinkedBlockingQueue.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Collections/LinkedBlockingQueue.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/Collections/LinkedBlockingQueue.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Threading;\n \n-namespace Qpid.Collections\n+namespace Apache.Qpid.Collections\n {\n     public class LinkedBlockingQueue : BlockingQueue\n     {             \n@@ -381,3 +381,4 @@ public override void Clear()\n     }\n }\n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Collections/LinkedBlockingQueue.cs",
                "sha": "be92576951bd112ab2bff96770825de806e77112",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Collections/LinkedHashtable.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Collections/LinkedHashtable.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/Collections/LinkedHashtable.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Collections;\n \n-namespace Qpid.Collections\n+namespace Apache.Qpid.Collections\n {\n     public class LinkedHashtable : IDictionary\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Collections/LinkedHashtable.cs",
                "sha": "10ab5c674df027773135d165b570fbb66e0c79c5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Collections/SynchronousQueue.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Collections/SynchronousQueue.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/Collections/SynchronousQueue.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Threading;\n \n-namespace Qpid.Collections\n+namespace Apache.Qpid.Collections\n {\n     public class SynchronousQueue : BlockingQueue\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Collections/SynchronousQueue.cs",
                "sha": "3c12df60672b8e27c1b7cd3b4b0ac9056846163e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQDataBlockDecoder.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/AMQDataBlockDecoder.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Common/Framing/AMQDataBlockDecoder.cs",
                "patch": "@@ -21,11 +21,11 @@\n using System;\n using System.Collections;\n using log4net;\n-using Qpid.Buffer;\n-using Qpid.Codec;\n-using Qpid.Codec.Demux;\n+using Apache.Qpid.Buffer;\n+using Apache.Qpid.Codec;\n+using Apache.Qpid.Codec.Demux;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public class AMQDataBlockDecoder : IMessageDecoder\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQDataBlockDecoder.cs",
                "sha": "7867650e507e3f41145ef8a252b512e849955581",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQDataBlockEncoder.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/AMQDataBlockEncoder.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Common/Framing/AMQDataBlockEncoder.cs",
                "patch": "@@ -20,11 +20,11 @@\n  */\n using System.Collections;\n using log4net;\n-using Qpid.Buffer;\n-using Qpid.Codec;\n-using Qpid.Codec.Demux;\n+using Apache.Qpid.Buffer;\n+using Apache.Qpid.Codec;\n+using Apache.Qpid.Codec.Demux;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public class AMQDataBlockEncoder : IMessageEncoder\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQDataBlockEncoder.cs",
                "sha": "e2645c630e99362e9fa86aa90e854c62dd5fdac2",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQFrame.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/AMQFrame.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/AMQFrame.cs",
                "patch": "@@ -18,9 +18,9 @@\n  * under the License.\n  *\n  */\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public class AMQFrame : IDataBlock\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQFrame.cs",
                "sha": "912be72d304df46655d9724521523a8d2d50f7c8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQFrameDecodingException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/AMQFrameDecodingException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/Framing/AMQFrameDecodingException.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System.Runtime.Serialization;\n using log4net;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     /// <summary>\n     /// Thrown when a frame cannot be decoded. This generally indicates a mismatch between the broker and the",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQFrameDecodingException.cs",
                "sha": "cda8c84ecfdb9e0e21c9bc3f8240be19fca2c422",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQMethodBody.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/AMQMethodBody.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/AMQMethodBody.cs",
                "patch": "@@ -19,9 +19,9 @@\n  *\n  */\n using System;\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public abstract class AMQMethodBody : IBody\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQMethodBody.cs",
                "sha": "a3c4337147d53fa12467da6589f44a5d501f8083",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQMethodBodyFactory.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/AMQMethodBodyFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/AMQMethodBodyFactory.cs",
                "patch": "@@ -18,9 +18,9 @@\n  * under the License.\n  *\n  */\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public class AMQMethodBodyFactory : IBodyFactory\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQMethodBodyFactory.cs",
                "sha": "c1fd3f887ad86a3238c7cf87381ebb65fdaa497a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQProtocolHeaderException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/AMQProtocolHeaderException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/Framing/AMQProtocolHeaderException.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     [Serializable]\n     public class AMQProtocolHeaderException : AMQException",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQProtocolHeaderException.cs",
                "sha": "379e5d00bafa7a339609a80c2aa511a6de209ea8",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQType.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/AMQType.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/AMQType.cs",
                "patch": "@@ -20,9 +20,9 @@\n  */\r\n using System;\r\n using System.Text;\r\n-using Qpid.Buffer;\r\n+using Apache.Qpid.Buffer;\r\n \r\n-namespace Qpid.Framing\r\n+namespace Apache.Qpid.Framing\r\n {\r\n    /// <summary>\r\n    /// Base class for the Field Table Type system.\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQType.cs",
                "sha": "618ab31d322c4cdd156167a76ee020e7698fa7ae",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQTypeMap.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/AMQTypeMap.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/Framing/AMQTypeMap.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\r\n using System.Collections;\r\n \r\n-namespace Qpid.Framing\r\n+namespace Apache.Qpid.Framing\r\n {\r\n    public sealed class AMQTypeMap\r\n    {\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQTypeMap.cs",
                "sha": "ed38c203a954f3ddfce5e002376243cb8b20cbbf",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQTypedValue.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/AMQTypedValue.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/AMQTypedValue.cs",
                "patch": "@@ -19,9 +19,9 @@\n  *\r\n  */\r\n using System;\r\n-using Qpid.Buffer;\r\n+using Apache.Qpid.Buffer;\r\n \r\n-namespace Qpid.Framing\r\n+namespace Apache.Qpid.Framing\r\n {\r\n    public class AMQTypedValue\r\n    {\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/AMQTypedValue.cs",
                "sha": "8d21a60831cefeacd2bf7c1847acab92542af7bc",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/BasicContentHeaderProperties.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/BasicContentHeaderProperties.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Common/Framing/BasicContentHeaderProperties.cs",
                "patch": "@@ -20,10 +20,10 @@\n  */\n using System;\n using log4net;\n-using Qpid.Buffer;\n-using Qpid.Messaging;\n+using Apache.Qpid.Buffer;\n+using Apache.Qpid.Messaging;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n    public class BasicContentHeaderProperties : IContentHeaderProperties\n    {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/BasicContentHeaderProperties.cs",
                "sha": "47db7b08873cf3607dac8c3634832a4326c54258",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/CompositeAMQDataBlock.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/CompositeAMQDataBlock.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/CompositeAMQDataBlock.cs",
                "patch": "@@ -19,9 +19,9 @@\n  *\n  */\n using System.Text;\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public class CompositeAMQDataBlock : IDataBlock, IEncodableAMQDataBlock\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/CompositeAMQDataBlock.cs",
                "sha": "d2b7f606b2466f6c0539af7c97da472af5144d00",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/ContentBody.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/ContentBody.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/ContentBody.cs",
                "patch": "@@ -18,9 +18,9 @@\n  * under the License.\n  *\n  */\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public class ContentBody : IBody\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/ContentBody.cs",
                "sha": "7a2142985de2fb5d21c2df380aa0d38b52c8c65d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/ContentBodyFactory.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/ContentBodyFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/ContentBodyFactory.cs",
                "patch": "@@ -19,9 +19,9 @@\n  *\n  */\n using log4net;\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public class ContentBodyFactory : IBodyFactory\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/ContentBodyFactory.cs",
                "sha": "400b2aec089165ed80006a45a13969c4610a1672",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/ContentHeaderBody.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/ContentHeaderBody.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/ContentHeaderBody.cs",
                "patch": "@@ -19,9 +19,9 @@\n  *\n  */\n using System;\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public class ContentHeaderBody : IBody\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/ContentHeaderBody.cs",
                "sha": "82889c23c8548d2899d6093b4cfd4fda42a913b3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/ContentHeaderBodyFactory.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/ContentHeaderBodyFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/ContentHeaderBodyFactory.cs",
                "patch": "@@ -19,9 +19,9 @@\n  *\n  */\n using log4net;\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public class ContentHeaderBodyFactory : IBodyFactory\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/ContentHeaderBodyFactory.cs",
                "sha": "c95a10871d17ba4daf5774a914905ef754182b88",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/ContentHeaderPropertiesFactory.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/ContentHeaderPropertiesFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/ContentHeaderPropertiesFactory.cs",
                "patch": "@@ -18,9 +18,9 @@\n  * under the License.\n  *\n  */\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public class ContentHeaderPropertiesFactory\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/ContentHeaderPropertiesFactory.cs",
                "sha": "bac5d10fd4620fe5e29fcae22c7dd872ec45fb44",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/EncodingUtils.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/EncodingUtils.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/EncodingUtils.cs",
                "patch": "@@ -21,9 +21,9 @@\n using System;\n using System.Globalization;\n using System.Text;\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n    public class EncodingUtils\n    {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/EncodingUtils.cs",
                "sha": "4d424656f9c26f29af8fa181779e4e13171e9fa9",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/FieldTable.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/FieldTable.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Common/Framing/FieldTable.cs",
                "patch": "@@ -22,11 +22,11 @@\n using System.Collections;\n using System.Text;\n using log4net;\n-using Qpid.Buffer;\n-using Qpid.Collections;\n-using Qpid.Messaging;\n+using Apache.Qpid.Buffer;\n+using Apache.Qpid.Collections;\n+using Apache.Qpid.Messaging;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public class FieldTable : IFieldTable, IEnumerable\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/FieldTable.cs",
                "sha": "6567bf58ab76e4e2e83b2fe51cea7785c928897f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/HeartbeatBody.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/HeartbeatBody.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/HeartbeatBody.cs",
                "patch": "@@ -18,9 +18,9 @@\n  * under the License.\n  *\n  */\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public class HeartbeatBody : IBody\n {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/HeartbeatBody.cs",
                "sha": "a8906f5ba80a267bfb45c41ef81d5a48f7de79b2",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/HeartbeatBodyFactory.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/HeartbeatBodyFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/HeartbeatBodyFactory.cs",
                "patch": "@@ -18,9 +18,9 @@\n  * under the License.\n  *\n  */\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public class HeartbeatBodyFactory : IBodyFactory\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/HeartbeatBodyFactory.cs",
                "sha": "90e5c7768e3fca4db46f23be13ff8d01f4c6ac91",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/IBody.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/IBody.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/IBody.cs",
                "patch": "@@ -18,9 +18,9 @@\n  * under the License.\n  *\n  */\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     /// <summary>\n     /// An IBody is contained within a top level frame. As such, it is not en/decodable on its own but",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/IBody.cs",
                "sha": "97b4459e5cfbe385790730b9117d990675301a0a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/IBodyFactory.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/IBodyFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/IBodyFactory.cs",
                "patch": "@@ -18,9 +18,9 @@\n  * under the License.\n  *\n  */\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     /// <summary>\n     /// Any class that is capable of turning a stream of bytes into an AMQ structure must implement this interface.",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/IBodyFactory.cs",
                "sha": "dd7960ddbe39692b36762f7dfb82d604a823552d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/IContentHeaderProperties.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/IContentHeaderProperties.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/IContentHeaderProperties.cs",
                "patch": "@@ -18,9 +18,9 @@\n  * under the License.\n  *\n  */\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     /// <summary>\n     /// There will be an implementation of this interface for each content type. All content types have associated",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/IContentHeaderProperties.cs",
                "sha": "676d0910d48a5cb9d06df822994b83b9c4a9572c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/IDataBlock.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/IDataBlock.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Framing/IDataBlock.cs",
                "patch": "@@ -18,9 +18,9 @@\n  * under the License.\n  *\n  */\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     /// <summary>\n     /// A data block represents something that has a size in bytes and the ability to write itself to a byte",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/IDataBlock.cs",
                "sha": "c61ed90d10384feac6f0f5b326b45b6d71d19dc8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/IEncodableAMQDataBlock.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/IEncodableAMQDataBlock.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/Framing/IEncodableAMQDataBlock.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     \n     /// <summary>",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/IEncodableAMQDataBlock.cs",
                "sha": "da8bf9fef9e80854fc3436dd6de2cd735f51e36d",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/ProtocolInitiation.cs",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Framing/ProtocolInitiation.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Common/Framing/ProtocolInitiation.cs",
                "patch": "@@ -24,12 +24,12 @@\n using System.Reflection;\n using System.Xml;\n using log4net;\n-using Qpid.Buffer;\n-using Qpid.Codec;\n-using Qpid.Codec.Demux;\n-using Qpid.Common;\n+using Apache.Qpid.Buffer;\n+using Apache.Qpid.Codec;\n+using Apache.Qpid.Codec.Demux;\n+using Apache.Qpid.Common;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n     public class ProtocolInitiation : IDataBlock, IEncodableAMQDataBlock\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Framing/ProtocolInitiation.cs",
                "sha": "a9f5697144a3acd610209bcf65902aed1ff9d2fb",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Properties/AssemblyInfo.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Properties/AssemblyInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Common/Properties/AssemblyInfo.cs",
                "patch": "@@ -23,11 +23,11 @@\n // General Information about an assembly is controlled through the following \n // set of attributes. Change these attribute values to modify the information\n // associated with an assembly.\n-[assembly: AssemblyTitle(\"Qpid.Common\")]\n+[assembly: AssemblyTitle(\"Apache.Qpid.Common\")]\n [assembly: AssemblyDescription(\"Common AMQ Framing Code\")]\n [assembly: AssemblyConfiguration(\"\")]\n [assembly: AssemblyCompany(\"Apache Qpid\")]\n-[assembly: AssemblyProduct(\"\")]\n+[assembly: AssemblyProduct(\"Apache.Qpid.Common\")]\n [assembly: AssemblyCopyright(\"Copyright \u00a9 J.P. Morgan Chase & Co. 2006\")]\n [assembly: AssemblyTrademark(\"\")]\n [assembly: AssemblyCulture(\"\")]",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Properties/AssemblyInfo.cs",
                "sha": "e876015bc3fd1af1bb2defcfd7cf2044fadad1b4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Protocol/AMQConstant.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Protocol/AMQConstant.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Common/Protocol/AMQConstant.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\r\n using System.Collections;\r\n \r\n-namespace Qpid.Protocol\r\n+namespace Apache.Qpid.Protocol\r\n {\r\n    public sealed class AMQConstant\r\n    {\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Protocol/AMQConstant.cs",
                "sha": "fcf94c29f40e4f9ab22c6e729fcd876a3ea7d830",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Qpid.Common.csproj",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/Qpid.Common.csproj?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Common/Qpid.Common.csproj",
                "patch": "@@ -7,8 +7,8 @@\n     <ProjectGuid>{77064C42-24D2-4CEB-9EA2-0EF481A43205}</ProjectGuid>\r\n     <OutputType>Library</OutputType>\r\n     <AppDesignerFolder>Properties</AppDesignerFolder>\r\n-    <RootNamespace>Qpid</RootNamespace>\r\n-    <AssemblyName>Qpid.Common</AssemblyName>\r\n+    <RootNamespace>Apache.Qpid</RootNamespace>\r\n+    <AssemblyName>Apache.Qpid.Common</AssemblyName>\r\n     <SignAssembly>false</SignAssembly>\r\n     <AssemblyOriginatorKeyFile>\r\n     </AssemblyOriginatorKeyFile>\r\n@@ -210,4 +210,4 @@\n   <Target Name=\"AfterBuild\">\r\n   </Target>\r\n   -->\r\n-</Project>\n\\ No newline at end of file\n+</Project>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/Qpid.Common.csproj",
                "sha": "d15c1887b7cf3677dd12d81290af5a2999348990",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/default.build",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/default.build?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Common/default.build",
                "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\"?>\n-<project name=\"Qpid.Common\" default=\"build\">\n+<project name=\"Apache.Qpid.Common\" default=\"build\">\n     <!--\n \t\tProperties that come from master build file\n \t\t- build.dir: root directory for build\n@@ -18,9 +18,9 @@\n          </sources>\n          <references>\n             <include name=\"${build.dir}/log4net.dll\" />\t\n-            <include name=\"${build.dir}/Qpid.Buffer.dll\" />\t\n-            <include name=\"${build.dir}/Qpid.Messaging.dll\" />\t\n-            <include name=\"${build.dir}/Qpid.Codec.dll\" />\t\n+            <include name=\"${build.dir}/Apache.Qpid.Buffer.dll\" />\t\n+            <include name=\"${build.dir}/Apache.Qpid.Messaging.dll\" />\t\n+            <include name=\"${build.dir}/Apache.Qpid.Codec.dll\" />\t\n          </references>\n         </csc>\n     </target>",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/default.build",
                "sha": "36055b9ca9e3cbc1326bb3c991cbe4efe51673f8",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/stylesheets/csharp.xsl",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Common/stylesheets/csharp.xsl?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Common/stylesheets/csharp.xsl",
                "patch": "@@ -34,10 +34,10 @@\n <!-- main class generation template -->\n <xsl:template name=\"generate-class\"> \n     <xsl:param name=\"f\"/>\n-using Qpid.Buffer;\n+using Apache.Qpid.Buffer;\n using System.Text;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n   ///\n   /// <summary>This class is autogenerated\n@@ -147,7 +147,7 @@ using System;\n using System.Collections;\n using log4net;\n \n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n \n \n@@ -202,7 +202,7 @@ namespace Qpid.Framing\n     <xsl:result-document href=\"{$file}\" format=\"textFormat\">\n \n using System.Collections;\n-namespace Qpid.Framing\n+namespace Apache.Qpid.Framing\n {\n   /**\n    * This class is autogenerated, do not modify. [From <xsl:value-of select=\"@protocol\"/>]",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Common/stylesheets/csharp.xsl",
                "sha": "674c971559b4893ced324378a0e97c92ec830451",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/AcknowledgeMode.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/AcknowledgeMode.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/AcknowledgeMode.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     public enum AcknowledgeMode\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/AcknowledgeMode.cs",
                "sha": "4896b64f685209ad9b0cc9b05d0671aa24f3f30f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/ChannelLimitReachedException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/ChannelLimitReachedException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/ChannelLimitReachedException.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     [Serializable]\n     public class ChannelLimitReachedException : ResourceAllocationException",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/ChannelLimitReachedException.cs",
                "sha": "8b43422f5c4d300d8301cefa495dc184e11ab164",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/DeliveryMode.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/DeliveryMode.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/DeliveryMode.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     public enum DeliveryMode\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/DeliveryMode.cs",
                "sha": "3c4713ee2a932b5364cebf8ec3632764218ffc9e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/ExchangeClassConstants.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/ExchangeClassConstants.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Messaging/ExchangeClassConstants.cs",
                "patch": "@@ -18,12 +18,12 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     public class ExchangeClassConstants\n     {\n         public readonly static string TOPIC = \"topic\";\n         public readonly static string DIRECT = \"direct\";\n         public readonly static string HEADERS = \"headers\";\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/ExchangeClassConstants.cs",
                "sha": "984e8b0f1717cd7d50f0af384e5bbf1dbd0355ac",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/ExchangeNameDefaults.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/ExchangeNameDefaults.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Messaging/ExchangeNameDefaults.cs",
                "patch": "@@ -18,12 +18,12 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     public class ExchangeNameDefaults\n     {\n         public readonly static string TOPIC = \"amq.topic\";\n         public readonly static string DIRECT = \"amq.direct\";\n         public readonly static string HEADERS = \"amq.match\";        \n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/ExchangeNameDefaults.cs",
                "sha": "cda92d6b552e0b6affdd1e9bd0fd969b86d3790a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IBytesMessage.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/IBytesMessage.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/IBytesMessage.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     public interface IBytesMessage : IMessage\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IBytesMessage.cs",
                "sha": "5be942423d5fe84be2862458e5188e62f2636276",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IChannel.cs",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/IChannel.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Messaging/IChannel.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System;\n \n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     public delegate void MessageReceivedDelegate(IMessage msg);\n     \n@@ -43,10 +43,23 @@ public interface IChannel : IDisposable\n         bool Transacted { get; }\n \n         /// <summary>\n-        /// Prefetch value to be used as the default for consumers created on this channel.\n+        /// Prefetch value to be used as the default for \n+        /// consumers created on this channel.\n         /// </summary>\n-        int DefaultPrefetch { get; set; }\n-        \n+        int DefaultPrefetch { get; }\n+\n+        /// <summary>\n+        /// Prefetch low value to be used as the default for \n+        /// consumers created on this channel.\n+        /// </summary>\n+        int DefaultPrefetchLow { get; }\n+\n+        /// <summary>\n+        /// Prefetch high value to be used as the default for \n+        /// consumers created on this channel.\n+        /// </summary>\n+        int DefaultPrefetchHigh { get; }\n+\n         /// <summary>\n         /// Declare a new exchange\n         /// </summary>",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IChannel.cs",
                "sha": "4da41a773d2144ed01e6c13ae86d3586e985a759",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IConnection.cs",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/IConnection.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/IConnection.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System;\n \n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     public delegate void ExceptionListenerDelegate(Exception ex);\n \n@@ -47,6 +47,7 @@ int MaximumChannelCount\n \n         IChannel CreateChannel(bool transacted, AcknowledgeMode acknowledgeMode);\n         IChannel CreateChannel(bool transacted, AcknowledgeMode acknowledgeMode, int prefetch);\n+        IChannel CreateChannel(bool transacted, AcknowledgeMode acknowledgeMode, int prefetchHigh, int prefetchLow);\n \n         void Start();\n         void Stop();",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IConnection.cs",
                "sha": "420228fa8ee20ea6ea445fddf77f4fe9f97f4784",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IConnectionFactory.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/IConnectionFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/IConnectionFactory.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     public interface IConnectionFactory\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IConnectionFactory.cs",
                "sha": "f141d509bebc41e19fc6aa9cfc37c63d2ac3c9b1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IConnectionListener.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/IConnectionListener.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/IConnectionListener.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     public interface IConnectionListener\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IConnectionListener.cs",
                "sha": "02d9eb38da557b9d90c2d7150a867c098d59c945",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IFieldTable.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/IFieldTable.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/IFieldTable.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System.Collections;\n \n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     public interface IFieldTable : IEnumerable\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IFieldTable.cs",
                "sha": "730ce399d4bfac6c1f8d4eea1e67a70be5741c65",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IHeaders.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/IHeaders.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/IHeaders.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     /// <summary>\n     /// IHeaders represents the header fields of an AMQ message and provides methods to access those fields. There are accessor methods to",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IHeaders.cs",
                "sha": "7fdf26ebda9e5fa7865e2f221747a947d7f6bf40",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IMessage.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/IMessage.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/IMessage.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {   \n     public interface IMessage\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IMessage.cs",
                "sha": "20ae5ee130ced3c7306a9e2e3596ab133072d08c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IMessageConsumer.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/IMessageConsumer.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/IMessageConsumer.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System;\n \n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n    /// <summary>\n    /// Describes an object that can be used to receive (consume)",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IMessageConsumer.cs",
                "sha": "82d697bf61aa5834b76ed425ab6b85bf5479b6a1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IMessagePublisher.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/IMessagePublisher.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/IMessagePublisher.cs",
                "patch": "@@ -20,7 +20,7 @@\n  */\n using System;\n \n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n    /// <summary>\n    /// Defines an object capable of publishing messages",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/IMessagePublisher.cs",
                "sha": "fab0df0c2b21c0d568ec289a6b988da9c85ee96f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/ITextMessage.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/ITextMessage.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/ITextMessage.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     public interface ITextMessage : IMessage\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/ITextMessage.cs",
                "sha": "902beb70f867154287f86f48fff7c1c2315be0f8",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/MessageConsumerBuilder.cs",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/MessageConsumerBuilder.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Messaging/MessageConsumerBuilder.cs",
                "patch": "@@ -18,25 +18,25 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     public class MessageConsumerBuilder\n     {\n-        public const int DEFAULT_PREFETCH_HIGH = 5000;\n-\n         private bool _noLocal = false;\n         private bool _exclusive = false;\n         private bool _durable = false;\n         private string _subscriptionName = null;\n         private IChannel _channel;\n         private readonly string _queueName;\n-        private int _prefetchLow = 2500;\n-        private int _prefetchHigh = DEFAULT_PREFETCH_HIGH;\n+        private int _prefetchLow;\n+        private int _prefetchHigh;\n \n         public MessageConsumerBuilder(IChannel channel, string queueName)\n         {\n             _channel = channel;\n             _queueName = queueName;\n+            _prefetchHigh = _channel.DefaultPrefetchHigh;\n+            _prefetchLow = _channel.DefaultPrefetchLow;\n         }\n \n         public MessageConsumerBuilder WithPrefetchLow(int prefetchLow)",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/MessageConsumerBuilder.cs",
                "sha": "2d6f76d6391f20a44abc19d921d09b01fe8e489e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/MessageNotReadableException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/MessageNotReadableException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/MessageNotReadableException.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     [Serializable]\n     public class MessageNotReadableException : QpidException",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/MessageNotReadableException.cs",
                "sha": "2afcffd53133fd5c867469d214e564320f1401c1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/MessageNotWritableException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/MessageNotWritableException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/MessageNotWritableException.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     [Serializable]\n     public class MessageNotWriteableException : QpidException",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/MessageNotWritableException.cs",
                "sha": "9b00f019480873e77a3a046ee670ffcc3dc039c6",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/MessagePublisherBuilder.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/MessagePublisherBuilder.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Messaging/MessagePublisherBuilder.cs",
                "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     public class MessagePublisherBuilder\n     {\n@@ -88,4 +88,4 @@ public IMessagePublisher Create()\n             return _channel.CreatePublisher(_exchangeName, _routingKey, _deliveryMode, _timeToLive, _immediate, _mandatory, _priority);\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/MessagePublisherBuilder.cs",
                "sha": "79c7575d0ab8c00ea94bfa586b3a462d04ce924e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/Properties/AssemblyInfo.cs",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/Properties/AssemblyInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Messaging/Properties/AssemblyInfo.cs",
                "patch": "@@ -24,11 +24,11 @@\n // General Information about an assembly is controlled through the following \n // set of attributes. Change these attribute values to modify the information\n // associated with an assembly.\n-[assembly: AssemblyTitle(\"Qpid.Messaging\")]\n+[assembly: AssemblyTitle(\"Apache.Qpid.Messaging\")]\n [assembly: AssemblyDescription(\"\")]\n [assembly: AssemblyConfiguration(\"\")]\n [assembly: AssemblyCompany(\"Apache Qpid\")]\n-[assembly: AssemblyProduct(\"Qpid.Messaging\")]\n+[assembly: AssemblyProduct(\"Apache.Qpid.Messaging\")]\n [assembly: AssemblyCopyright(\"Copyright (c) 2006 The Apache Software Foundation\")]\n [assembly: AssemblyTrademark(\"\")]\n [assembly: AssemblyCulture(\"\")]\n@@ -53,4 +53,4 @@\n [assembly: AssemblyVersion(\"1.0.0.0\")]\n [assembly: AssemblyFileVersion(\"1.0.0.0\")]\n \n-[assembly: CLSCompliant(true)]\n\\ No newline at end of file\n+[assembly: CLSCompliant(true)]",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/Properties/AssemblyInfo.cs",
                "sha": "8683ad08b28599bc1d2cfc2b5b2a1df1423efe6b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/Qpid.Messaging.csproj",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/Qpid.Messaging.csproj?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Messaging/Qpid.Messaging.csproj",
                "patch": "@@ -7,8 +7,8 @@\n     <ProjectGuid>{6688F826-C58E-4C1B-AA1F-22AFAB4B7D07}</ProjectGuid>\r\n     <OutputType>Library</OutputType>\r\n     <AppDesignerFolder>Properties</AppDesignerFolder>\r\n-    <RootNamespace>Qpid.Messaging</RootNamespace>\r\n-    <AssemblyName>Qpid.Messaging</AssemblyName>\r\n+    <RootNamespace>Apache.Qpid.Messaging</RootNamespace>\r\n+    <AssemblyName>Apache.Qpid.Messaging</AssemblyName>\r\n     <SignAssembly>true</SignAssembly>\r\n   </PropertyGroup>\r\n   <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n@@ -66,4 +66,4 @@\n   <Target Name=\"AfterBuild\">\r\n   </Target>\r\n   -->\r\n-</Project>\n\\ No newline at end of file\n+</Project>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/Qpid.Messaging.csproj",
                "sha": "90354bece69ba92b48fbc23b784b0c05ec37868f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/QpidException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/QpidException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/QpidException.cs",
                "patch": "@@ -21,7 +21,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {   \n     [Serializable]\n     public class QpidException : Exception",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/QpidException.cs",
                "sha": "3e39f2293dbaf59816c3c5a3b978f4ad02312095",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/ResourceAllocationException.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/ResourceAllocationException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/ResourceAllocationException.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System;\n using System.Runtime.Serialization;\n \n-namespace Qpid.Messaging\n+namespace Apache.Qpid.Messaging\n {\n     [Serializable]\n     public class ResourceAllocationException : QpidException",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/ResourceAllocationException.cs",
                "sha": "954dcdd94c031a16864225b6bca81c5384e89c73",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/default.build",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Messaging/default.build?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Messaging/default.build",
                "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\"?>\r\n-<project name=\"Qpid.Messaging\" default=\"build\">\r\n+<project name=\"Apache.Qpid.Messaging\" default=\"build\">\r\n     <!--\r\n \t\tProperties that come from master build file\r\n \t\t- build.dir: root directory for build\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Messaging/default.build",
                "sha": "789258bfad034f71872f2a8adc592594e7a0249d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/App.config",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl.Tests/App.config?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl.Tests/App.config",
                "patch": "@@ -1,12 +1,12 @@\n <?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n <configuration>\r\n    <configSections>\r\n-      <section name=\"qpid.sasl\" type=\"Qpid.Sasl.Configuration.SaslConfigurationSectionHandler, Qpid.Sasl\"/>\r\n+      <section name=\"qpid.sasl\" type=\"Apache.Qpid.Sasl.Configuration.SaslConfigurationSectionHandler, Apache.Qpid.Sasl\"/>\r\n    </configSections>\r\n \r\n    <qpid.sasl>\r\n       <clientFactories>\r\n-         <add type=\"Qpid.Sasl.Tests.TestClientFactory, Qpid.Sasl.Tests\"/>\r\n+         <add type=\"Apache.Qpid.Sasl.Tests.TestClientFactory, Apache.Qpid.Sasl.Tests\"/>\r\n       </clientFactories>\r\n    </qpid.sasl>\r\n </configuration>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/App.config",
                "sha": "539f341e7cf60d051adb4f84e54d40b45cd1b7b7",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/AnonymousSaslClientTests.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/AnonymousSaslClientTests.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/AnonymousSaslClientTests.cs",
                "patch": "@@ -24,10 +24,10 @@\n using System.Text;\r\n \r\n using NUnit.Framework;\r\n-using Qpid.Sasl;\r\n-using Qpid.Sasl.Mechanisms;\r\n+using Apache.Qpid.Sasl;\r\n+using Apache.Qpid.Sasl.Mechanisms;\r\n \r\n-namespace Qpid.Sasl.Tests.Mechanisms\r\n+namespace Apache.Qpid.Sasl.Tests.Mechanisms\r\n {\r\n    [TestFixture]\r\n    public class AnonymousSaslClientTests : ISaslCallbackHandler\r\n@@ -69,4 +69,4 @@ void ISaslCallbackHandler.Handle(ISaslCallback[] callbacks)\n \r\n    } // class AnonymousSaslClientTests\r\n \r\n-} // namespace Qpid.Sasl.Tests.Mechanisms\r\n+} // namespace Apache.Qpid.Sasl.Tests.Mechanisms\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/AnonymousSaslClientTests.cs",
                "sha": "09260736f02190c62e85c677cb89093b5ac985bc",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/CramMD5SaslClientTests.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/CramMD5SaslClientTests.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/CramMD5SaslClientTests.cs",
                "patch": "@@ -24,10 +24,10 @@\n using System.Text;\r\n \r\n using NUnit.Framework;\r\n-using Qpid.Sasl;\r\n-using Qpid.Sasl.Mechanisms;\r\n+using Apache.Qpid.Sasl;\r\n+using Apache.Qpid.Sasl.Mechanisms;\r\n \r\n-namespace Qpid.Sasl.Tests.Mechanisms\r\n+namespace Apache.Qpid.Sasl.Tests.Mechanisms\r\n {\r\n    [TestFixture]\r\n    public class CramMD5SaslClientTests : ISaslCallbackHandler\r\n@@ -87,4 +87,4 @@ void ISaslCallbackHandler.Handle(ISaslCallback[] callbacks)\n       }\r\n    } // class CramMD5SaslClientTests\r\n \r\n-} // namespace Qpid.Sasl.Tests.Mechanisms\r\n+} // namespace Apache.Qpid.Sasl.Tests.Mechanisms\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/CramMD5SaslClientTests.cs",
                "sha": "e8b0ae54685046570bbd1fccd358d4a8189ef866",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/DigestSaslClientTests.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/DigestSaslClientTests.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/DigestSaslClientTests.cs",
                "patch": "@@ -25,10 +25,10 @@\n using System.Text;\r\n \r\n using NUnit.Framework;\r\n-using Qpid.Sasl;\r\n-using Qpid.Sasl.Mechanisms;\r\n+using Apache.Qpid.Sasl;\r\n+using Apache.Qpid.Sasl.Mechanisms;\r\n \r\n-namespace Qpid.Sasl.Tests.Mechanisms\r\n+namespace Apache.Qpid.Sasl.Tests.Mechanisms\r\n {\r\n    [TestFixture]\r\n    public class DigestSaslClientTests : ISaslCallbackHandler\r\n@@ -246,4 +246,4 @@ void ISaslCallbackHandler.Handle(ISaslCallback[] callbacks)\n \r\n    } // class DigestSaslClientTests\r\n \r\n-} // namespace Qpid.Sasl.Tests.Mechanisms\r\n+} // namespace Apache.Qpid.Sasl.Tests.Mechanisms\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/DigestSaslClientTests.cs",
                "sha": "eb7e7ebbd516e8ebf3a549c1f022599415dfc478",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/ExternalSaslClientTests.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/ExternalSaslClientTests.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/ExternalSaslClientTests.cs",
                "patch": "@@ -24,10 +24,10 @@\n using System.Text;\r\n \r\n using NUnit.Framework;\r\n-using Qpid.Sasl;\r\n-using Qpid.Sasl.Mechanisms;\r\n+using Apache.Qpid.Sasl;\r\n+using Apache.Qpid.Sasl.Mechanisms;\r\n \r\n-namespace Qpid.Sasl.Tests.Mechanisms\r\n+namespace Apache.Qpid.Sasl.Tests.Mechanisms\r\n {\r\n    [TestFixture]\r\n    public class ExternalSaslClientTests : ISaslCallbackHandler\r\n@@ -68,4 +68,4 @@ void ISaslCallbackHandler.Handle(ISaslCallback[] callbacks)\n \r\n    } // class AnonymousSaslClientTests\r\n \r\n-} // namespace Qpid.Sasl.Tests.Mechanisms\r\n+} // namespace Apache.Qpid.Sasl.Tests.Mechanisms\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/ExternalSaslClientTests.cs",
                "sha": "1864a6c957185a4e98ff06007c62702e0e503b8f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/PlainSaslClientTests.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/PlainSaslClientTests.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/PlainSaslClientTests.cs",
                "patch": "@@ -24,10 +24,10 @@\n using System.Text;\r\n \r\n using NUnit.Framework;\r\n-using Qpid.Sasl;\r\n-using Qpid.Sasl.Mechanisms;\r\n+using Apache.Qpid.Sasl;\r\n+using Apache.Qpid.Sasl.Mechanisms;\r\n \r\n-namespace Qpid.Sasl.Tests.Mechanisms\r\n+namespace Apache.Qpid.Sasl.Tests.Mechanisms\r\n {\r\n    [TestFixture]\r\n    public class PlainSaslClientTests : ISaslCallbackHandler\r\n@@ -85,4 +85,4 @@ void ISaslCallbackHandler.Handle(ISaslCallback[] callbacks)\n \r\n    } // class PlainSaslClientTests\r\n \r\n-} // namespace Qpid.Sasl.Tests.Mechanisms\r\n+} // namespace Apache.Qpid.Sasl.Tests.Mechanisms\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/Mechanisms/PlainSaslClientTests.cs",
                "sha": "4c82f7b126511bc004ac55ba273c8a2f9581b722",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/Properties/AssemblyInfo.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl.Tests/Properties/AssemblyInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl.Tests/Properties/AssemblyInfo.cs",
                "patch": "@@ -5,11 +5,11 @@\n // General Information about an assembly is controlled through the following \r\n // set of attributes. Change these attribute values to modify the information\r\n // associated with an assembly.\r\n-[assembly: AssemblyTitle(\"Qpid.Sasl.Tests\")]\r\n+[assembly: AssemblyTitle(\"Apache.Qpid.Sasl.Tests\")]\r\n [assembly: AssemblyDescription(\"\")]\r\n [assembly: AssemblyConfiguration(\"\")]\r\n [assembly: AssemblyCompany(\"\")]\r\n-[assembly: AssemblyProduct(\"Qpid.Sasl.Tests\")]\r\n+[assembly: AssemblyProduct(\"Apache.Qpid.Sasl.Tests\")]\r\n [assembly: AssemblyCopyright(\"Copyright \u00a9  2007\")]\r\n [assembly: AssemblyTrademark(\"\")]\r\n [assembly: AssemblyCulture(\"\")]\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/Properties/AssemblyInfo.cs",
                "sha": "657b15e3eac37df7f3e19a8fc96db53b2102f29a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/Qpid.Sasl.Tests.csproj",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl.Tests/Qpid.Sasl.Tests.csproj?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Sasl.Tests/Qpid.Sasl.Tests.csproj",
                "patch": "@@ -7,8 +7,8 @@\n     <ProjectGuid>{587B3520-EBB9-41ED-B019-E96116B651CE}</ProjectGuid>\r\n     <OutputType>Library</OutputType>\r\n     <AppDesignerFolder>Properties</AppDesignerFolder>\r\n-    <RootNamespace>Qpid.Sasl.Tests</RootNamespace>\r\n-    <AssemblyName>Qpid.Sasl.Tests</AssemblyName>\r\n+    <RootNamespace>Apache.Qpid.Sasl.Tests</RootNamespace>\r\n+    <AssemblyName>Apache.Qpid.Sasl.Tests</AssemblyName>\r\n   </PropertyGroup>\r\n   <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n     <DebugSymbols>true</DebugSymbols>\r\n@@ -64,4 +64,4 @@\n   <Target Name=\"AfterBuild\">\r\n   </Target>\r\n   -->\r\n-</Project>\n\\ No newline at end of file\n+</Project>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/Qpid.Sasl.Tests.csproj",
                "sha": "8c807e238531f851599771af78616ad35614abbf",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/SaslTests.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl.Tests/SaslTests.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Sasl.Tests/SaslTests.cs",
                "patch": "@@ -24,10 +24,10 @@\n using System.Text;\r\n \r\n using NUnit.Framework;\r\n-using Qpid.Sasl;\r\n-using Qpid.Sasl.Mechanisms;\r\n+using Apache.Qpid.Sasl;\r\n+using Apache.Qpid.Sasl.Mechanisms;\r\n \r\n-namespace Qpid.Sasl.Tests\r\n+namespace Apache.Qpid.Sasl.Tests\r\n {\r\n    [TestFixture]\r\n    public class SaslTests : ISaslCallbackHandler\r\n@@ -130,4 +130,4 @@ void ISaslCallbackHandler.Handle(ISaslCallback[] callbacks)\n \r\n    } // class SaslTests\r\n \r\n-} // namespace Qpid.Sasl.Tests\r\n+} // namespace Apache.Qpid.Sasl.Tests\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/SaslTests.cs",
                "sha": "5b27949b98fa5803c55d800d1fb3bda4a4fb8bdb",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/TestClientFactory.cs",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl.Tests/TestClientFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 4,
                "filename": "qpid/dotnet/Qpid.Sasl.Tests/TestClientFactory.cs",
                "patch": "@@ -24,10 +24,10 @@\n using System.Text;\r\n \r\n using NUnit.Framework;\r\n-using Qpid.Sasl;\r\n-using Qpid.Sasl.Mechanisms;\r\n+using Apache.Qpid.Sasl;\r\n+using Apache.Qpid.Sasl.Mechanisms;\r\n \r\n-namespace Qpid.Sasl.Tests\r\n+namespace Apache.Qpid.Sasl.Tests\r\n {\r\n    public class TestClientFactory : ISaslClientFactory\r\n    {\r\n@@ -72,4 +72,4 @@ public override byte[] EvaluateChallenge(byte[] challenge)\n       }\r\n    } // class TestSaslClient\r\n \r\n-} // namespace Qpid.Sasl.Tests\r\n+} // namespace Apache.Qpid.Sasl.Tests\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/TestClientFactory.cs",
                "sha": "73c68ea2b3e4c497abc2b936dd294c7c6c0dab93",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/default.build",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl.Tests/default.build?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Sasl.Tests/default.build",
                "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\"?>\r\n-<project name=\"Qpid.Sasl\" default=\"test\">\r\n+<project name=\"Apache.Qpid.Sasl\" default=\"test\">\r\n \r\n    <target name=\"build\">\r\n         <csc target=\"library\" \r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl.Tests/default.build",
                "sha": "eb0514d4177c6ca701183cd02dc921da43d6e8b1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Callbacks.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/Callbacks.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/Callbacks.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System;\r\n using System.Text;\r\n \r\n-namespace Qpid.Sasl\r\n+namespace Apache.Qpid.Sasl\r\n {\r\n    /// <summary>\r\n    /// Marker interface for Sasl Callbacks\r\n@@ -101,5 +101,6 @@ public RealmCallback(string defaultText)\n       }\r\n    } // class RealmCallback\r\n \r\n-} // namespace Qpid.Sasl\r\n+} // namespace Apache.Qpid.Sasl\r\n+\r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Callbacks.cs",
                "sha": "90e36beeb821ec53b0c059968f43a2eb7fb22c83",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Configuration/SaslConfiguration.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/Configuration/SaslConfiguration.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/Configuration/SaslConfiguration.cs",
                "patch": "@@ -25,7 +25,7 @@\n using System.Text;\r\n using System.Xml;\r\n \r\n-namespace Qpid.Sasl.Configuration\r\n+namespace Apache.Qpid.Sasl.Configuration\r\n {\r\n    /// <summary>\r\n    /// Represents an Sasl configuration section\r\n@@ -85,5 +85,6 @@ internal static IList GetDefaultClientFactories()\n \r\n    } // class SaslConfiguration\r\n \r\n-} // namespace Qpid.Sasl.Configuration\r\n+} // namespace Apache.Qpid.Sasl.Configuration\r\n+\r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Configuration/SaslConfiguration.cs",
                "sha": "34462617241f832a444c74df6f891f364d81e74d",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Configuration/SaslConfigurationSectionHandler.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/Configuration/SaslConfigurationSectionHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/Configuration/SaslConfigurationSectionHandler.cs",
                "patch": "@@ -25,7 +25,7 @@\n using System.Text;\r\n using System.Xml;\r\n \r\n-namespace Qpid.Sasl.Configuration\r\n+namespace Apache.Qpid.Sasl.Configuration\r\n {\r\n    /// <summary>\r\n    /// Defines the configuration section to configure extra \r\n@@ -79,5 +79,6 @@ private void ProcessFactories(XmlNode node, IList factories)\n       }\r\n    } // class SaslConfigurationSectionHandler\r\n \r\n-} // namespace Qpid.Sasl.Configuration\r\n+} // namespace Apache.Qpid.Sasl.Configuration\r\n+\r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Configuration/SaslConfigurationSectionHandler.cs",
                "sha": "21f6b92414e9a6759a56df7eb2cb357e7abdc753",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/DefaultClientFactory.cs",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/DefaultClientFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Sasl/DefaultClientFactory.cs",
                "patch": "@@ -22,9 +22,9 @@\n using System;\r\n using System.Collections;\r\n \r\n-using Qpid.Sasl.Mechanisms;\r\n+using Apache.Qpid.Sasl.Mechanisms;\r\n \r\n-namespace Qpid.Sasl\r\n+namespace Apache.Qpid.Sasl\r\n {\r\n    public class DefaultClientFactory : ISaslClientFactory\r\n    {\r\n@@ -90,5 +90,6 @@ public string[] GetSupportedMechanisms(IDictionary props)\n       }\r\n    } // class DefaultClientFactory\r\n \r\n-} // namespace Qpid.Sasl\r\n+} // namespace Apache.Qpid.Sasl\r\n+\r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/DefaultClientFactory.cs",
                "sha": "d552aa80c0ff0694c7ffaf55796e311ebb07e9ad",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/ISaslCallbackHandler.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/ISaslCallbackHandler.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/ISaslCallbackHandler.cs",
                "patch": "@@ -22,13 +22,14 @@\n using System;\r\n using System.Text;\r\n \r\n-namespace Qpid.Sasl\r\n+namespace Apache.Qpid.Sasl\r\n {\r\n    public interface ISaslCallbackHandler\r\n    {\r\n       void Handle(ISaslCallback[] callbacks);\r\n \r\n    } // interface ISaslCallbackHandler\r\n \r\n-} // namespace Qpid.Sasl\r\n+} // namespace Apache.Qpid.Sasl\r\n+\r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/ISaslCallbackHandler.cs",
                "sha": "0dfc4823337e418b6173d0f38f389bc6c3dfe719",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/ISaslClient.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/ISaslClient.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/ISaslClient.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System;\r\n using System.Text;\r\n \r\n-namespace Qpid.Sasl\r\n+namespace Apache.Qpid.Sasl\r\n {\r\n    public interface ISaslClient\r\n    {\r\n@@ -37,5 +37,6 @@ public interface ISaslClient\n \r\n    } // interface ISaslClient\r\n \r\n-} // namespace Qpid.Sasl\r\n+} // namespace Apache.Qpid.Sasl\r\n+\r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/ISaslClient.cs",
                "sha": "526cc1f43afd2907985e049daee7c9c76b35c084",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/ISaslClientFactory.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/ISaslClientFactory.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/ISaslClientFactory.cs",
                "patch": "@@ -23,7 +23,7 @@\n using System.Collections;\r\n using System.Text;\r\n \r\n-namespace Qpid.Sasl\r\n+namespace Apache.Qpid.Sasl\r\n {\r\n    public interface ISaslClientFactory\r\n    {\r\n@@ -35,5 +35,6 @@ public interface ISaslClientFactory\n          );\r\n    } // interface ISaslClientFactory\r\n \r\n-} // namespace Qpid.Sasl\r\n+} // namespace Apache.Qpid.Sasl\r\n+\r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/ISaslClientFactory.cs",
                "sha": "fc81057ec4019876c5961c754af3be0b46e0e96f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/MD5HMAC.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/MD5HMAC.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/MD5HMAC.cs",
                "patch": "@@ -22,7 +22,7 @@\n using System;\r\n using System.Security.Cryptography;\r\n \r\n-namespace Qpid.Sasl\r\n+namespace Apache.Qpid.Sasl\r\n {\r\n    /// <summary>\r\n    /// Rough HMAC MD5 implementation as presented in\r\n@@ -112,4 +112,4 @@ private byte[] H(byte[] v1, byte[] v2)\n \r\n    } // class MD5HMAC\r\n \r\n-} // namespace Qpid.Sasl\r\n+} // namespace Apache.Qpid.Sasl\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/MD5HMAC.cs",
                "sha": "134332284a805735ffae286bedc09bc0005ea15c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Mechanisms/AnonymousSaslClient.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/Mechanisms/AnonymousSaslClient.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/Mechanisms/AnonymousSaslClient.cs",
                "patch": "@@ -23,7 +23,7 @@\n using System.Collections;\r\n using System.Text;\r\n \r\n-namespace Qpid.Sasl.Mechanisms\r\n+namespace Apache.Qpid.Sasl.Mechanisms\r\n {\r\n    /// <summary>\r\n    /// Implements the ANONYMOUS authentication mechanism\r\n@@ -66,4 +66,4 @@ public override byte[] EvaluateChallenge(byte[] challenge)\n \r\n    } // class AnonymousSaslClient\r\n \r\n-} // namespace Qpid.Sasl.Mechanisms\r\n+} // namespace Apache.Qpid.Sasl.Mechanisms\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Mechanisms/AnonymousSaslClient.cs",
                "sha": "5e8c56ff519cce048d4ce96b3f42beaa587762e0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Mechanisms/CramMD5SaslClient.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/Mechanisms/CramMD5SaslClient.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/Mechanisms/CramMD5SaslClient.cs",
                "patch": "@@ -24,7 +24,7 @@\n using System.Security.Cryptography;\r\n using System.Text;\r\n \r\n-namespace Qpid.Sasl.Mechanisms\r\n+namespace Apache.Qpid.Sasl.Mechanisms\r\n {\r\n    /// <summary>\r\n    /// Implements the CRAM-MD5 authentication mechanism as outlined\r\n@@ -88,4 +88,4 @@ public override byte[] EvaluateChallenge(byte[] challenge)\n \r\n    } // class CramMD5SaslClient\r\n \r\n-} // namespace Qpid.Sasl.Mechanisms\r\n+} // namespace Apache.Qpid.Sasl.Mechanisms\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Mechanisms/CramMD5SaslClient.cs",
                "sha": "672cc64c6ab77f0eccf14a754250a4e16f7e807f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Mechanisms/DigestSaslClient.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/Mechanisms/DigestSaslClient.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/Mechanisms/DigestSaslClient.cs",
                "patch": "@@ -26,7 +26,7 @@\n using System.Security.Cryptography;\r\n using System.Text;\r\n \r\n-namespace Qpid.Sasl.Mechanisms\r\n+namespace Apache.Qpid.Sasl.Mechanisms\r\n {\r\n \r\n    /// <summary>\r\n@@ -573,4 +573,4 @@ private static void Pair(StringBuilder buffer, string name, string value, bool q\n \r\n    } // class DigestResponse\r\n \r\n-} // namespace Qpid.Sasl.Mechanisms\r\n+} // namespace Apache.Qpid.Sasl.Mechanisms\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Mechanisms/DigestSaslClient.cs",
                "sha": "59d3a88991ae0bb2433728c130c36dafad26855a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Mechanisms/ExternalSaslClient.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/Mechanisms/ExternalSaslClient.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/Mechanisms/ExternalSaslClient.cs",
                "patch": "@@ -23,7 +23,7 @@\n using System.Collections;\r\n using System.Text;\r\n \r\n-namespace Qpid.Sasl.Mechanisms\r\n+namespace Apache.Qpid.Sasl.Mechanisms\r\n {\r\n    /// <summary>\r\n    /// Implements the EXTERNAL authentication mechanism\r\n@@ -66,4 +66,4 @@ public override byte[] EvaluateChallenge(byte[] challenge)\n \r\n    } // class ExternalSaslClient\r\n \r\n-} // namespace Qpid.Sasl.Mechanisms\r\n+} // namespace Apache.Qpid.Sasl.Mechanisms\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Mechanisms/ExternalSaslClient.cs",
                "sha": "5b513bda87ea007d789e4feff16e15cbed44224d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Mechanisms/PlainSaslClient.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/Mechanisms/PlainSaslClient.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/Mechanisms/PlainSaslClient.cs",
                "patch": "@@ -23,7 +23,7 @@\n using System.Collections;\r\n using System.Text;\r\n \r\n-namespace Qpid.Sasl.Mechanisms\r\n+namespace Apache.Qpid.Sasl.Mechanisms\r\n {\r\n \r\n    /// <summary>\r\n@@ -78,4 +78,4 @@ public override byte[] EvaluateChallenge(byte[] challenge)\n       #endregion // ISaslClient Implementation\r\n \r\n    } // class PlainSaslClient\r\n-} // namespace Qpid.Sasl.Mechanisms\r\n+} // namespace Apache.Qpid.Sasl.Mechanisms\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Mechanisms/PlainSaslClient.cs",
                "sha": "3addeb2e838338974365091bd06c29f48adcaaf1",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Properties/AssemblyInfo.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/Properties/AssemblyInfo.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/Properties/AssemblyInfo.cs",
                "patch": "@@ -6,11 +6,11 @@\n // General Information about an assembly is controlled through the following \r\n // set of attributes. Change these attribute values to modify the information\r\n // associated with an assembly.\r\n-[assembly: AssemblyTitle(\"Qpid.Sasl\")]\r\n+[assembly: AssemblyTitle(\"Apache.Qpid.Sasl\")]\r\n [assembly: AssemblyDescription(\"\")]\r\n [assembly: AssemblyConfiguration(\"\")]\r\n [assembly: AssemblyCompany(\"Apache Qpid\")]\r\n-[assembly: AssemblyProduct(\"Apache Qpid\")]\r\n+[assembly: AssemblyProduct(\"Apache.Qpid.Sasl\")]\r\n [assembly: AssemblyCopyright(\"Copyright \u00a9 2007 The Apache Software Foundation\")]\r\n [assembly: AssemblyTrademark(\"\")]\r\n [assembly: AssemblyCulture(\"\")]\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Properties/AssemblyInfo.cs",
                "sha": "f38725e53fa36ef43891bfa6d4a3b4e301016c82",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Qpid.Sasl.csproj",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/Qpid.Sasl.csproj?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/dotnet/Qpid.Sasl/Qpid.Sasl.csproj",
                "patch": "@@ -7,8 +7,8 @@\n     <ProjectGuid>{1465B0EE-6452-42A6-AB73-B2F9EABEEE75}</ProjectGuid>\r\n     <OutputType>Library</OutputType>\r\n     <AppDesignerFolder>Properties</AppDesignerFolder>\r\n-    <RootNamespace>Qpid.Sasl</RootNamespace>\r\n-    <AssemblyName>Qpid.Sasl</AssemblyName>\r\n+    <RootNamespace>Apache.Qpid.Sasl</RootNamespace>\r\n+    <AssemblyName>Apache.Qpid.Sasl</AssemblyName>\r\n   </PropertyGroup>\r\n   <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n     <DebugSymbols>true</DebugSymbols>\r\n@@ -61,4 +61,4 @@\n   <Target Name=\"AfterBuild\">\r\n   </Target>\r\n   -->\r\n-</Project>\n\\ No newline at end of file\n+</Project>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Qpid.Sasl.csproj",
                "sha": "891d71037986498e8719159125fd2071c5dcacaf",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Sasl.cs",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/Sasl.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/dotnet/Qpid.Sasl/Sasl.cs",
                "patch": "@@ -24,9 +24,9 @@\n using System.Configuration;\r\n using System.Text;\r\n \r\n-using Qpid.Sasl.Configuration;\r\n+using Apache.Qpid.Sasl.Configuration;\r\n \r\n-namespace Qpid.Sasl\r\n+namespace Apache.Qpid.Sasl\r\n {\r\n    /// <summary>\r\n    /// Static class used to access the SASL functionality. \r\n@@ -42,12 +42,12 @@ namespace Qpid.Sasl\n    /// <example><![CDATA[\r\n    /// <configuration>\r\n    ///   <configSections>\r\n-   ///      <section name=\"qpid.sasl\" type=\"Qpid.Sasl.Configuration.SaslConfigurationSectionHandler, Qpid.Sasl\"/>\r\n+   ///      <section name=\"qpid.sasl\" type=\"Apache.Qpid.Sasl.Configuration.SaslConfigurationSectionHandler, Apache.Qpid.Sasl\"/>\r\n    ///   </configSections>\r\n    ///\r\n    ///   <qpid.sasl>\r\n    ///      <clientFactories>\r\n-   ///         <add type=\"Qpid.Sasl.Tests.TestClientFactory, Qpid.Sasl.Tests\"/>\r\n+   ///         <add type=\"Apache.Qpid.Sasl.Tests.TestClientFactory, Apache.Qpid.Sasl.Tests\"/>\r\n    ///      </clientFactories>\r\n    ///   </qpid.sasl>\r\n    /// </configuration>\r\n@@ -112,4 +112,4 @@ private static ISaslClientFactory FindFactory(string[] mechanisms, IDictionary p\n       }\r\n    } // class Sasl\r\n \r\n-} // namespace Qpid.Sasl.Mechanisms\r\n+} // namespace Apache.Qpid.Sasl.Mechanisms\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/Sasl.cs",
                "sha": "5a744a30d98c6a9d46c8dfa7d6e78dde7b64203f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/SaslClient.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/SaslClient.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/SaslClient.cs",
                "patch": "@@ -24,7 +24,7 @@\n using System.Globalization;\r\n using System.Text;\r\n \r\n-namespace Qpid.Sasl\r\n+namespace Apache.Qpid.Sasl\r\n {\r\n    public abstract class SaslClient : ISaslClient\r\n    {\r\n@@ -142,4 +142,4 @@ protected static string ToHex(byte[] buffer)\n \r\n    } // class SaslClient\r\n \r\n-} // namespace Qpid.Sasl.Mechanisms\r\n+} // namespace Apache.Qpid.Sasl.Mechanisms\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/SaslClient.cs",
                "sha": "1390b1b35283f055f62b5e7f6b138d705ec0a923",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/SaslException.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/SaslException.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/SaslException.cs",
                "patch": "@@ -24,7 +24,7 @@\n using System.Runtime.Serialization;\r\n using System.Text;\r\n \r\n-namespace Qpid.Sasl\r\n+namespace Apache.Qpid.Sasl\r\n {\r\n    /// <summary>\r\n    /// Reports an exception during the processing of an SASL\r\n@@ -53,4 +53,4 @@ protected SaslException(SerializationInfo info, StreamingContext ctxt)\n \r\n    } // class SaslException\r\n \r\n-} // namespace Qpid.Sasl.Mechanisms\r\n+} // namespace Apache.Qpid.Sasl.Mechanisms\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/SaslException.cs",
                "sha": "8f6e00a7ba0c1d1b50721a2dde56aee5ffe23891",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/SaslProperties.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/SaslProperties.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/dotnet/Qpid.Sasl/SaslProperties.cs",
                "patch": "@@ -23,7 +23,7 @@\n using System.Collections;\r\n using System.Text;\r\n \r\n-namespace Qpid.Sasl\r\n+namespace Apache.Qpid.Sasl\r\n {\r\n    public sealed class SaslProperties\r\n    {\r\n@@ -39,4 +39,4 @@ public sealed class SaslProperties\n  \r\n    } // class SaslProperties\r\n \r\n-} // namespace Qpid.Sasl.Mechanisms\r\n+} // namespace Apache.Qpid.Sasl.Mechanisms\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/SaslProperties.cs",
                "sha": "0658acda212e00047eb7404e4dcdd4807252dfb7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/default.build",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/Qpid.Sasl/default.build?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/Qpid.Sasl/default.build",
                "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\"?>\r\n-<project name=\"Qpid.Sasl\" default=\"build\">\r\n+<project name=\"Apache.Qpid.Sasl\" default=\"build\">\r\n     <!--\r\n \t\tProperties that come from master build file\r\n \t\t- build.dir: root directory for build\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/Qpid.Sasl/default.build",
                "sha": "5b44d6b9c4d13693d1132b32016c4b2f4d68ff93",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/TopicListener/Program.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/TopicListener/Program.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/TopicListener/Program.cs",
                "patch": "@@ -4,7 +4,7 @@ class Program\n     {\r\n         static void Main(string[] args)\r\n         {\r\n-            Qpid.Client.Tests.interop.TopicListener.Main(args);\r\n+            Apache.Qpid.Client.Tests.interop.TopicListener.Main(args);\r\n         }\r\n     }\r\n }\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/TopicListener/Program.cs",
                "sha": "0134dca1bab251cf6f95a02c81a452e49d5c482f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/TopicListener/default.build",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/TopicListener/default.build?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/TopicListener/default.build",
                "patch": "@@ -18,7 +18,7 @@\n \t\t\t   <include name=\"**/*.cs\" />\r\n          </sources>\r\n          <references>\r\n-            <include name=\"${build.dir}\\Qpid.Client.Tests.dll\"/>\r\n+            <include name=\"${build.dir}\\Apache.Qpid.Client.Tests.dll\"/>\r\n          </references>\r\n         </csc>\r\n     </target>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/TopicListener/default.build",
                "sha": "afde4d6937e61ef3a95832dd39c67a3fb75b6e08",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/TopicPublisher/Program.cs",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/TopicPublisher/Program.cs?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/TopicPublisher/Program.cs",
                "patch": "@@ -4,7 +4,7 @@ class Program\n     {\r\n         static void Main(string[] args)\r\n         {\r\n-            Qpid.Client.Tests.interop.TopicPublisher.Main(args);\r\n+            Apache.Qpid.Client.Tests.interop.TopicPublisher.Main(args);\r\n         }\r\n     }\r\n }\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/TopicPublisher/Program.cs",
                "sha": "a68df14bb353241115fdc2625f6b235ed6a2cc75",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/TopicPublisher/default.build",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/TopicPublisher/default.build?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/TopicPublisher/default.build",
                "patch": "@@ -18,7 +18,7 @@\n \t\t\t   <include name=\"**/*.cs\" />\r\n          </sources>\r\n          <references>\r\n-            <include name=\"${build.dir}\\Qpid.Client.Tests.dll\"/>\r\n+            <include name=\"${build.dir}\\Apache.Qpid.Client.Tests.dll\"/>\r\n          </references>\r\n         </csc>\r\n     </target>\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/TopicPublisher/default.build",
                "sha": "8991aae7514db43648f534d987161b4f3b781672",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/default.build",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/dotnet/default.build?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/dotnet/default.build",
                "patch": "@@ -22,7 +22,7 @@\n       Fileset with build files for test assemblies\r\n    -->\r\n    <fileset id=\"tests.builds\">\r\n-      <include name=\"Qpid.Buffer.Tess/default.build\" />\r\n+      <include name=\"Qpid.Buffer.Tests/default.build\" />\r\n       <include name=\"Qpid.Sasl.Tests/default.build\" />\r\n       <include name=\"Qpid.Common.Tests/default.build\" />        \r\n       <include name=\"Qpid.Client.Tests/default.build\" />\t\r\n@@ -124,3 +124,4 @@\n \t\r\n </project>\r\n \r\n+\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/dotnet/default.build",
                "sha": "e042f38c61bc39cdb2e2c1ffc847cc59f7ecbf35",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/gentools/src/org/apache/qpid/gentools/DotnetGenerator.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/gentools/src/org/apache/qpid/gentools/DotnetGenerator.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 0,
                "filename": "qpid/gentools/src/org/apache/qpid/gentools/DotnetGenerator.java",
                "patch": "@@ -1,3 +1,24 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n package org.apache.qpid.gentools;\n \n import java.io.File;",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/gentools/src/org/apache/qpid/gentools/DotnetGenerator.java",
                "sha": "9fc81dd428405188141a70a874d37317ce56a43d",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/bin/msTool.sh",
                "changes": 76,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/bin/msTool.sh?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 20,
                "filename": "qpid/java/broker/bin/msTool.sh",
                "patch": "@@ -1,20 +1,56 @@\n-#\r\n-# Licensed to the Apache Software Foundation (ASF) under one\r\n-# or more contributor license agreements.  See the NOTICE file\r\n-# distributed with this work for additional information\r\n-# regarding copyright ownership.  The ASF licenses this file\r\n-# to you under the Apache License, Version 2.0 (the\r\n-# \"License\"); you may not use this file except in compliance\r\n-# with the License.  You may obtain a copy of the License at\r\n-#\r\n-#   http://www.apache.org/licenses/LICENSE-2.0\r\n-#\r\n-# Unless required by applicable law or agreed to in writing,\r\n-# software distributed under the License is distributed on an\r\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n-# KIND, either express or implied.  See the License for the\r\n-# specific language governing permissions and limitations\r\n-# under the License.\r\n-#\r\n-java.naming.factory.initial = org.apache.qpid.jndi.PropertiesFileInitialContextFactory\r\n-connectionfactory.broker = amqp://guest:guest@clientid/?brokerlist='tcp://localhost:5672'\r\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# Set classpath to include Qpid jar with all required jars in manifest\n+QPID_LIBS=$QPID_TOOLS/lib/qpid-incubating.jar\n+\n+die() {\n+  if [[ $1 = -usage ]]; then\n+    shift\n+    usage=true\n+  else\n+    usage=false\n+  fi\n+  echo \"$@\"\n+  $usage && echo\n+  $usage && usage\n+  exit 1\n+}\n+\n+cygwin=false\n+if [[ \"$(uname -a | fgrep Cygwin)\" != \"\" ]]; then\n+  cygwin=true\n+fi\n+\n+if $cygwin; then\n+  QPID_TOOLS=$(cygpath -w $QPID_TOOLS)\n+fi\n+\n+# Set other variables used by the qpid-run script before calling\n+export JAVA=java \\\n+       JAVA_VM=-server \\\n+       JAVA_OPTS=-Dlog4j.configuration=file:$QPID_TOOLS/etc/mstool-log4j.xml \\\n+       QPID_CLASSPATH=$QPID_LIBS\n+\n+if [ -z \"$QPID_TOOLS\" ]; then\n+  die \"QPID_TOOLS be set\"\n+fi\n+\n+. qpid-run org.apache.qpid.tools.messagestore.MessageStoreTool \"$@\"",
                "previous_filename": "qpid/java/integrationtests/src/resources/org/apache/qpid/interop/connection.properties",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/bin/msTool.sh",
                "sha": "4d55ee7811c1a8fab4aaf042ca605fd149ec9dcd",
                "status": "renamed"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/bin/qpid-passwd",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/bin/qpid-passwd?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 1,
                "filename": "qpid/java/broker/bin/qpid-passwd",
                "patch": "@@ -27,4 +27,4 @@ export JAVA=java \\\n        JAVA_MEM=-Xmx1024m \\\r\n        QPID_CLASSPATH=$QPID_LIBS\r\n \r\n-. qpid-run org.apache.qpid.server.security.Passwd \"$@\"\r\n+. qpid-run org.apache.qpid.tools.security.Passwd \"$@\"\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/bin/qpid-passwd",
                "sha": "f0462525227e3b71dee4f6082cbfcda75d676e7a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/bin/qpid-server",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/bin/qpid-server?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/java/broker/bin/qpid-server",
                "patch": "@@ -7,9 +7,9 @@\n # to you under the Apache License, Version 2.0 (the\n # \"License\"); you may not use this file except in compliance\n # with the License.  You may obtain a copy of the License at\n-# \n+#\n #   http://www.apache.org/licenses/LICENSE-2.0\n-# \n+#\n # Unless required by applicable law or agreed to in writing,\n # software distributed under the License is distributed on an\n # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -25,7 +25,7 @@ QPID_LIBS=$QPID_HOME/lib/qpid-incubating.jar:$QPID_HOME/lib/bdbstore-launch.jar\n export JAVA=java \\\n        JAVA_VM=-server \\\n        JAVA_MEM=-Xmx1024m \\\n-       JAVA_GC=-XX:-UseConcMarkSweepGC\n+       JAVA_GC=-XX:-UseConcMarkSweepGC \\\n        QPID_CLASSPATH=$QPID_LIBS\n \n . qpid-run org.apache.qpid.server.Main \"$@\"",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/bin/qpid-server",
                "sha": "fabf7e941c9d0f8da7c2b6d34ae2f6b81edf445a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/distribution/src/main/assembly/broker-bin.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/distribution/src/main/assembly/broker-bin.xml?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/java/broker/distribution/src/main/assembly/broker-bin.xml",
                "patch": "@@ -114,9 +114,9 @@\n       <fileMode>473</fileMode>\n     </file>\n     <file>\n-      <source>../bin/passwd</source>\n+      <source>../bin/qpid-passwd</source>\n       <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>passwd</destName>\n+      <destName>qpid-passwd</destName>\n       <fileMode>473</fileMode>\n     </file>\n     <file>",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/distribution/src/main/assembly/broker-bin.xml",
                "sha": "e66190a3f4017f9ee6317514e2331dea7f65574d",
                "status": "modified"
            },
            {
                "additions": 114,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/etc/debug.log4j.xml",
                "changes": 114,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/etc/debug.log4j.xml?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 0,
                "filename": "qpid/java/broker/etc/debug.log4j.xml",
                "patch": "@@ -0,0 +1,114 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n+    <appender name=\"ArchivingFileAppender\" class=\"org.apache.log4j.QpidCompositeRollingAppender\">\n+        <!-- Ensure that logs allways have the dateFormat set-->\n+        <param name=\"StaticLogFileName\" value=\"false\"/>\n+        <param name=\"File\" value=\"${QPID_WORK}/log/${logprefix}qpid${logsuffix}.log\"/>\n+        <param name=\"Append\" value=\"false\"/>\n+        <!-- Change the direction so newer files have bigger numbers -->\n+        <!-- So log.1 is written then log.2 etc This prevents a lot of file renames at log rollover -->\n+        <param name=\"CountDirection\" value=\"1\"/>\n+        <!-- Use default 10MB -->\n+        <!--param name=\"MaxFileSize\" value=\"100000\"/-->\n+        <param name=\"DatePattern\" value=\"'.'yyyy-MM-dd-HH-mm\"/>\n+        <!-- Unlimited number of backups -->\n+        <param name=\"MaxSizeRollBackups\" value=\"-1\"/>\n+        <!-- Compress(gzip) the backup files-->\n+        <param name=\"CompressBackupFiles\" value=\"true\"/>\n+        <!-- Compress the backup files using a second thread -->\n+        <param name=\"CompressAsync\" value=\"true\"/>\n+        <!-- Start at zero numbered files-->\n+        <param name=\"ZeroBased\" value=\"true\"/>\n+        <!-- Backup Location -->\n+        <param name=\"backupFilesToPath\" value=\"${QPID_WORK}/backup/log\"/>\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <appender name=\"FileAppender\" class=\"org.apache.log4j.FileAppender\">\n+        <param name=\"File\" value=\"${QPID_WORK}/log/${logprefix}qpid${logsuffix}.log\"/>\n+        <param name=\"Append\" value=\"false\"/>\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <appender name=\"AlertFile\" class=\"org.apache.log4j.FileAppender\">\n+        <param name=\"File\" value=\"${QPID_WORK}/log/alert.log\"/>\n+        <param name=\"Append\" value=\"false\"/>\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\">\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <category name=\"Qpid.Broker\">\n+        <priority value=\"debug\"/>\n+        <appender-ref ref=\"AlertFile\"/>\n+        <!--appender-ref ref=\"STDOUT\"/-->        \n+    </category>\n+\n+\n+    <category name=\"org.apache.qpid.server.queue.AMQQueueMBean\">\n+        <priority value=\"info\"/>\n+        <appender-ref ref=\"AlertFile\"/>\n+    </category>\n+\n+\n+    <!-- Provide warnings to standard output -->\n+    <!--category name=\"org.apache.qpid\">\n+        <priority value=\"warn\"/>\n+        <appender-ref ref=\"STDOUT\"/>\n+    </category-->\n+\n+\n+    <!-- Additional level settings for debugging -->\n+    <!-- Each class in the Broker is a category that can have its logging level adjusted. -->\n+    <!-- This will provide more details if available about that classes processing. -->\n+    <!--category name=\"org.apache.qpid.server.txn\">\n+        <priority value=\"debug\"/>\n+    </category>-->\n+\n+    <!--<category name=\"org.apache.qpid.server.store\">\n+        <priority value=\"debug\"/>\n+    </category-->\n+\n+    <!-- Log all info events to file -->\n+    <root>\n+        <priority value=\"info\"/>\n+        <appender-ref ref=\"STDOUT\"/>\n+        <appender-ref ref=\"FileAppender\"/>\n+    </root>\n+\n+</log4j:configuration>",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/etc/debug.log4j.xml",
                "sha": "e8fd7e119d2dd029c26a40269076681c1a0f6d8b",
                "status": "added"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/etc/log4j.xml",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/etc/log4j.xml?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 7,
                "filename": "qpid/java/broker/etc/log4j.xml",
                "patch": "@@ -44,7 +44,7 @@\n         <param name=\"backupFilesToPath\" value=\"${QPID_WORK}/backup/log\"/>\n \n         <layout class=\"org.apache.log4j.PatternLayout\">\n-            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>            \n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n         </layout>\n     </appender>\n \n@@ -57,33 +57,55 @@\n         </layout>\n     </appender>\n \n+    <appender name=\"AlertFile\" class=\"org.apache.log4j.FileAppender\">\n+        <param name=\"File\" value=\"${QPID_WORK}/log/alert.log\"/>\n+        <param name=\"Append\" value=\"false\"/>\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n     <appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\">\n \n         <layout class=\"org.apache.log4j.PatternLayout\">\n             <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n         </layout>\n     </appender>\n \n-     <category name=\"Qpid.Broker\">\n+    <category name=\"Qpid.Broker\">\n+        <priority value=\"debug\"/>\n+        <appender-ref ref=\"AlertFile\"/>\n+    </category>\n+\n+    <category name=\"org.apache.qpid.server.queue.AMQQueueMBean\">\n         <priority value=\"info\"/>\n+        <appender-ref ref=\"AlertFile\"/>\n+    </category>\n+\n+    <!-- Provide warnings to standard output -->\n+    <category name=\"org.apache.qpid\">\n+        <priority value=\"warn\"/>\n+        <appender-ref ref=\"STDOUT\"/>\n     </category>\n \n-    <!--<category name=\"org.apache.qpid.server.store\">\n-        <priority value=\"debug\"/>\n-    </category-->\n \n-    <!--category name=\"org.apache.qpid.server.queue\">\n+    <!-- Examples of additional logging settings -->\n+    <!-- Used to generate extra debug. See debug.log4j.xml -->\n+    \n+    <!--<category name=\"org.apache.qpid.server.store\">\n         <priority value=\"debug\"/>\n     </category-->\n \n     <!--category name=\"org.apache.qpid.server.txn\">\n         <priority value=\"debug\"/>\n     </category>-->\n \n+    <!-- Log all info events to file -->\n     <root>\n         <priority value=\"info\"/>\n-        <appender-ref ref=\"STDOUT\"/>\n         <appender-ref ref=\"FileAppender\"/>\n         <!--appender-ref ref=\"ArchivingFileAppender\"/-->\n     </root>\n+\n </log4j:configuration>",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/etc/log4j.xml",
                "sha": "2060246b7ffde5fe7a1bc5636f19b92e9e822732",
                "status": "modified"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/etc/messagestoretool-log4j.xml",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/etc/messagestoretool-log4j.xml?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 0,
                "filename": "qpid/java/broker/etc/messagestoretool-log4j.xml",
                "patch": "@@ -0,0 +1,53 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n+\n+    <appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\">\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <category name=\"org.apache.qpid.tools\">\n+        <priority value=\"info\"/>\n+    </category>\n+\n+    <category name=\"org.apache.qpid\">\n+        <priority value=\"info\"/>\n+    </category>\n+\n+    <category name=\"org.apache.qpid.server.security\">\n+        <priority value=\"info\"/>\n+    </category>\n+\n+    <category name=\"org.apache.qpid.server.management\">\n+        <priority value=\"error\"/>\n+    </category>\n+\n+\n+    <root>\n+        <priority value=\"info\"/>\n+        <appender-ref ref=\"STDOUT\"/>\n+    </root>\n+</log4j:configuration>",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/etc/messagestoretool-log4j.xml",
                "sha": "0313de4f95d7d068062d8361466c2f0233ac5fd5",
                "status": "added"
            },
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/etc/mstool-log4j.xml",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/etc/mstool-log4j.xml?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 0,
                "filename": "qpid/java/broker/etc/mstool-log4j.xml",
                "patch": "@@ -0,0 +1,54 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n+\n+    <appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\">\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <!--param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/-->\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] (%F:%L) - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <category name=\"org.apache.qpid.tools\">\n+        <priority value=\"info\"/>\n+    </category>\n+\n+    <category name=\"org.apache.qpid\">\n+        <priority value=\"error\"/>\n+    </category>\n+\n+    <category name=\"org.apache.qpid.server.security\">\n+        <priority value=\"error\"/>\n+    </category>\n+\n+    <category name=\"org.apache.qpid.server.management\">\n+        <priority value=\"error\"/>\n+    </category>\n+\n+\n+    <root>\n+        <priority value=\"info\"/>\n+        <appender-ref ref=\"STDOUT\"/>\n+    </root>\n+</log4j:configuration>",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/etc/mstool-log4j.xml",
                "sha": "8c46010e2db09bb051ba6870d55ca9f49e5c2be9",
                "status": "added"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/pom.xml",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/pom.xml?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 0,
                "filename": "qpid/java/broker/pom.xml",
                "patch": "@@ -101,6 +101,25 @@\n     <build>\n \n         <plugins>\n+\n+\n+           <!--plugin>\n+                <artifactId>minijar-maven-plugin</artifactId>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <executions>\n+                    <execution>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>minijars</goal>\n+                        </goals>\n+                        <configuration>\n+                            <stripUnusedClasses>true</stripUnusedClasses>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin-->\n+\n+\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/pom.xml",
                "sha": "35c29d504f54f018052f86d7f49c2cc4b95927f4",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/log4j/QpidCompositeRollingAppender.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/log4j/QpidCompositeRollingAppender.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 3,
                "filename": "qpid/java/broker/src/main/java/org/apache/log4j/QpidCompositeRollingAppender.java",
                "patch": "@@ -31,16 +31,13 @@\n import java.util.concurrent.Executor;\n import java.util.concurrent.Executors;\n import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n import java.util.zip.GZIPOutputStream;\n \n import org.apache.log4j.helpers.CountingQuietWriter;\n import org.apache.log4j.helpers.LogLog;\n import org.apache.log4j.helpers.OptionConverter;\n import org.apache.log4j.spi.LoggingEvent;\n \n-import org.apache.qpid.framing.FieldTable;\n-\n /**\n  * <p>CompositeRollingAppender combines RollingFileAppender and DailyRollingFileAppender<br> It can function as either\n  * or do both at the same time (making size based rolling files like RollingFileAppender until a data/time boundary is",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/log4j/QpidCompositeRollingAppender.java",
                "sha": "7e0c4defe13eb1076a3d16f6c14292d3ae9e354a",
                "status": "modified"
            },
            {
                "additions": 188,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/configuration/Configuration.java",
                "changes": 188,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/configuration/Configuration.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/configuration/Configuration.java",
                "patch": "@@ -0,0 +1,188 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ * \n+ */\n+package org.apache.qpid.configuration;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+\n+public class Configuration\n+{\n+    public static final String QPID_HOME = \"QPID_HOME\";\n+\n+    final String QPIDHOME = System.getProperty(QPID_HOME);\n+\n+    private static Logger _devlog = LoggerFactory.getLogger(Configuration.class);\n+\n+    public static final String DEFAULT_LOG_CONFIG_FILENAME = \"log4j.xml\";\n+    public static final String DEFAULT_CONFIG_FILE = \"etc/config.xml\";\n+\n+    protected final Options _options = new Options();\n+    protected CommandLine _commandLine;\n+    protected File _configFile;\n+\n+\n+    public Configuration()\n+    {\n+\n+    }\n+\n+    public void processCommandline(String[] args) throws InitException\n+    {\n+        try\n+        {\n+            _commandLine = new PosixParser().parse(_options, args);\n+        }\n+        catch (ParseException e)\n+        {\n+            throw new InitException(\"Unable to parse commmandline\", e);\n+        }\n+\n+        final File defaultConfigFile = new File(QPIDHOME, DEFAULT_CONFIG_FILE);\n+        setConfig(new File(_commandLine.getOptionValue(\"c\", defaultConfigFile.getPath())));\n+    }\n+\n+    public void setConfig(File file)\n+    {\n+        _configFile = file;\n+    }\n+\n+    /**\n+     * @param option The option to set.\n+     */\n+    public void setOption(Option option)\n+    {\n+        _options.addOption(option);\n+    }\n+\n+    /**\n+     * getOptionValue from the configuration\n+     * @param option variable argument, first string is option to get, second if present is the default value.\n+     * @return the String for the given option or null if not present (if default value not specified)\n+     */\n+    public String getOptionValue(String... option)\n+    {\n+        if (option.length == 1)\n+        {\n+            return _commandLine.getOptionValue(option[0]);\n+        }\n+        else if (option.length == 2)\n+        {\n+            return _commandLine.getOptionValue(option[0], option[1]);\n+        }\n+        return null;\n+    }\n+\n+    public void loadConfig(File file) throws InitException\n+    {\n+        setConfig(file);\n+        loadConfig();\n+    }\n+\n+    private void loadConfig() throws InitException\n+    {\n+        if (!_configFile.exists())\n+        {\n+            String error = \"File \" + _configFile + \" could not be found. Check the file exists and is readable.\";\n+\n+            if (QPIDHOME == null)\n+            {\n+                error = error + \"\\nNote: \" + QPID_HOME + \" is not set.\";\n+            }\n+\n+            throw new InitException(error, null);\n+        }\n+        else\n+        {\n+            _devlog.debug(\"Using configuration file \" + _configFile.getAbsolutePath());\n+        }\n+\n+//        String logConfig = _commandLine.getOptionValue(\"l\");\n+//        String logWatchConfig = _commandLine.getOptionValue(\"w\", \"0\");\n+//        if (logConfig != null)\n+//        {\n+//            File logConfigFile = new File(logConfig);\n+//            configureLogging(logConfigFile, logWatchConfig);\n+//        }\n+//        else\n+//        {\n+//            File configFileDirectory = _configFile.getParentFile();\n+//            File logConfigFile = new File(configFileDirectory, DEFAULT_LOG_CONFIG_FILENAME);\n+//            configureLogging(logConfigFile, logWatchConfig);\n+//        }\n+    }\n+\n+\n+//    private void configureLogging(File logConfigFile, String logWatchConfig)\n+//    {\n+//        int logWatchTime = 0;\n+//        try\n+//        {\n+//            logWatchTime = Integer.parseInt(logWatchConfig);\n+//        }\n+//        catch (NumberFormatException e)\n+//        {\n+//            _devlog.error(\"Log watch configuration value of \" + logWatchConfig + \" is invalid. Must be \"\n+//                          + \"a non-negative integer. Using default of zero (no watching configured\");\n+//        }\n+//\n+//        if (logConfigFile.exists() && logConfigFile.canRead())\n+//        {\n+//            _devlog.info(\"Configuring logger using configuration file \" + logConfigFile.getAbsolutePath());\n+//            if (logWatchTime > 0)\n+//            {\n+//                _devlog.info(\"log file \" + logConfigFile.getAbsolutePath() + \" will be checked for changes every \"\n+//                             + logWatchTime + \" seconds\");\n+//                // log4j expects the watch interval in milliseconds\n+//                DOMConfigurator.configureAndWatch(logConfigFile.getAbsolutePath(), logWatchTime * 1000);\n+//            }\n+//            else\n+//            {\n+//                DOMConfigurator.configure(logConfigFile.getAbsolutePath());\n+//            }\n+//        }\n+//        else\n+//        {\n+//            System.err.println(\"Logging configuration error: unable to read file \" + logConfigFile.getAbsolutePath());\n+//            System.err.println(\"Using basic log4j configuration\");\n+//            BasicConfigurator.configure();\n+//        }\n+//    }\n+\n+    public File getConfigFile()\n+    {\n+        return _configFile;\n+    }\n+\n+\n+    public class InitException extends Exception\n+    {\n+        InitException(String msg, Throwable cause)\n+        {\n+            super(msg, cause);\n+        }\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/configuration/Configuration.java",
                "sha": "40ff590a0a3098dfa007f98cc5269f374b6bd2cf",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "patch": "@@ -582,9 +582,9 @@ public void resend(final boolean requeue) throws AMQException\n         final List<UnacknowledgedMessage> msgToRequeue = new LinkedList<UnacknowledgedMessage>();\n         final List<UnacknowledgedMessage> msgToResend = new LinkedList<UnacknowledgedMessage>();\n \n-        if (_log.isInfoEnabled())\n+        if (_log.isDebugEnabled())\n         {\n-            _log.info(\"unacked map Size:\" + _unacknowledgedMessageMap.size());\n+            _log.debug(\"unacked map Size:\" + _unacknowledgedMessageMap.size());\n         }\n \n         // Process the Unacked-Map.\n@@ -640,15 +640,15 @@ public void visitComplete()\n             });\n \n         // Process Messages to Resend\n-        if (_log.isInfoEnabled())\n+        if (_log.isDebugEnabled())\n         {\n             if (!msgToResend.isEmpty())\n             {\n-                _log.info(\"Preparing (\" + msgToResend.size() + \") message to resend.\");\n+                _log.debug(\"Preparing (\" + msgToResend.size() + \") message to resend.\");\n             }\n             else\n             {\n-                _log.info(\"No message to resend.\");\n+                _log.debug(\"No message to resend.\");\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "sha": "7f14946834ac3147265e87dc65f819ccd7312d37",
                "status": "modified"
            },
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/Main.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/Main.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 2,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/Main.java",
                "patch": "@@ -34,6 +34,7 @@\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n import org.apache.commons.cli.PosixParser;\n+import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.log4j.BasicConfigurator;\n import org.apache.log4j.Logger;\n@@ -48,18 +49,27 @@\n import org.apache.qpid.framing.ProtocolVersion;\n import org.apache.qpid.pool.ReadWriteThreadModel;\n import org.apache.qpid.server.configuration.VirtualHostConfiguration;\n+import org.apache.qpid.server.management.JMXManagedObjectRegistry;\n import org.apache.qpid.server.protocol.AMQPFastProtocolHandler;\n import org.apache.qpid.server.protocol.AMQPProtocolProvider;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.registry.ConfigurationFileApplicationRegistry;\n import org.apache.qpid.server.transport.ConnectorConfiguration;\n import org.apache.qpid.url.URLSyntaxException;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.net.BindException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Collection;\n+import java.util.List;\n+\n /**\n  * Main entry point for AMQPD.\n  *\n  */\n-@SuppressWarnings({ \"AccessStaticViaInstance\" })\n+@SuppressWarnings({\"AccessStaticViaInstance\"})\n public class Main\n {\n     /** Used for debugging. */\n@@ -133,6 +143,12 @@ protected void setOptions(Options options)\n             OptionBuilder.withArgName(\"port\").hasArg()\n                          .withDescription(\"listen on the specified port. Overrides any value in the config file\")\n                          .withLongOpt(\"port\").create(\"p\");\n+        Option mport =\n+                OptionBuilder.withArgName(\"mport\").hasArg()\n+                        .withDescription(\"listen on the specified management port. Overrides any value in the config file\")\n+                        .withLongOpt(\"mport\").create(\"m\");\n+\n+\n         Option bind =\n             OptionBuilder.withArgName(\"bind\").hasArg()\n                          .withDescription(\"bind to the specified address. Overrides any value in the config file\")\n@@ -153,6 +169,7 @@ protected void setOptions(Options options)\n         options.addOption(logconfig);\n         options.addOption(logwatchconfig);\n         options.addOption(port);\n+        options.addOption(mport);\n         options.addOption(bind);\n     }\n \n@@ -203,15 +220,19 @@ else if (commandLine.hasOption(\"v\"))\n             catch (InitException e)\n             {\n                 System.out.println(e.getMessage());\n+                _brokerLogger.error(\"Initialisation Error : \" + e.getMessage());\n+\n             }\n             catch (ConfigurationException e)\n             {\n                 System.out.println(\"Error configuring message broker: \" + e);\n+                _brokerLogger.error(\"Error configuring message broker: \" + e);\n                 e.printStackTrace();\n             }\n             catch (Exception e)\n             {\n                 System.out.println(\"Error intialising message broker: \" + e);\n+                _brokerLogger.error(\"Error intialising message broker: \" + e);\n                 e.printStackTrace();\n             }\n         }\n@@ -260,7 +281,15 @@ protected void startup() throws InitException, ConfigurationException, Exception\n             configureLogging(logConfigFile, logWatchConfig);\n         }\n \n-        ApplicationRegistry.initialise(new ConfigurationFileApplicationRegistry(configFile));\n+        ConfigurationFileApplicationRegistry config = new ConfigurationFileApplicationRegistry(configFile);\n+\n+\n+        updateManagementPort(config.getConfiguration(), commandLine.getOptionValue(\"m\"));\n+\n+\n+\n+        ApplicationRegistry.initialise(config);\n+\n \n         // fixme .. use QpidProperties.getVersionString when we have fixed the classpath issues\n         // that are causing the broker build to pick up the wrong properties file and hence say\n@@ -318,6 +347,29 @@ protected void startup() throws InitException, ConfigurationException, Exception\n         bind(port, connectorConfig);\n     }\n \n+    /**\n+     * Update the configuration data with the management port.\n+     * @param configuration\n+     * @param managementPort The string from the command line\n+     */\n+    private void updateManagementPort(Configuration configuration, String managementPort)\n+    {\n+        if (managementPort != null)\n+        {\n+            int mport;\n+            int defaultMPort = configuration.getInt(JMXManagedObjectRegistry.MANAGEMENT_PORT_CONFIG_PATH);\n+            try\n+            {\n+                mport = Integer.parseInt(managementPort);\n+                configuration.setProperty(JMXManagedObjectRegistry.MANAGEMENT_PORT_CONFIG_PATH, mport);\n+            }\n+            catch (NumberFormatException e)\n+            {\n+                _logger.warn(\"Invalid management port: \" + managementPort + \" will use default:\" + defaultMPort, e);\n+            }\n+        }\n+    }\n+\n     protected void setupVirtualHosts(String configFileParent, String configFilePath)\n         throws ConfigurationException, AMQException, URLSyntaxException\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/Main.java",
                "sha": "dd6546585f3a3e7cb1be5b8b01e59bcab3bd4c64",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "patch": "@@ -38,9 +38,13 @@\n import org.apache.qpid.server.management.ManagedObject;\n import org.apache.qpid.server.management.ManagedObjectRegistry;\n import org.apache.qpid.server.queue.QueueRegistry;\n+import org.apache.qpid.server.queue.AMQQueue;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n \n+import java.util.List;\n+import java.util.Map;\n+\n public abstract class AbstractExchange implements Exchange, Managable\n {\n     private AMQShortString _name;\n@@ -189,6 +193,8 @@ public void close() throws AMQException\n         }\n     }\n \n+    abstract public Map<AMQShortString, List<AMQQueue>> getBindings();\n+\n     public String toString()\n     {\n         return getClass().getName() + \"[\" + getName() +\"]\";",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "sha": "9ebb8933622d6f6b12290efbd707384a85b28762",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DefaultExchangeRegistry.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DefaultExchangeRegistry.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 6,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DefaultExchangeRegistry.java",
                "patch": "@@ -20,18 +20,20 @@\n  */\n package org.apache.qpid.server.exchange;\n \n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-\n import org.apache.log4j.Logger;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.server.protocol.ExchangeInitialiser;\n import org.apache.qpid.server.queue.AMQMessage;\n+import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.messageStore.MessageStore;\n import org.apache.qpid.server.exception.InternalErrorException;\n \n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n public class DefaultExchangeRegistry implements ExchangeRegistry\n {\n     private static final Logger _log = Logger.getLogger(DefaultExchangeRegistry.class);\n@@ -64,7 +66,7 @@ public MessageStore getMessageStore()\n     public void registerExchange(Exchange exchange) throws AMQException\n     {\n         _exchangeMap.put(exchange.getName(), exchange);\n-        if(exchange.isDurable())\n+        if (exchange.isDurable())\n         {\n             try\n             {\n@@ -86,13 +88,18 @@ public Exchange getDefaultExchange()\n         return _defaultExchange;\n     }\n \n+    public Collection<AMQShortString> getExchangeNames()\n+    {\n+        return _exchangeMap.keySet();\n+    }\n+\n     public void unregisterExchange(AMQShortString name, boolean inUse) throws AMQException\n     {\n         // TODO: check inUse argument\n         Exchange e = _exchangeMap.remove(name);\n         if (e != null)\n         {\n-            if(e.isDurable())\n+            if (e.isDurable())\n             {\n                 try\n                 {\n@@ -112,7 +119,7 @@ public void unregisterExchange(AMQShortString name, boolean inUse) throws AMQExc\n \n     public Exchange getExchange(AMQShortString name)\n     {\n-        if((name == null) || name.length() == 0)\n+        if ((name == null) || name.length() == 0)\n         {\n             return getDefaultExchange();\n         }",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DefaultExchangeRegistry.java",
                "sha": "377a73dd31646763ec9a0e33104bd90febf6b38e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 6,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java",
                "patch": "@@ -26,22 +26,16 @@\n \n import javax.management.JMException;\n import javax.management.MBeanException;\n-import javax.management.openmbean.ArrayType;\n import javax.management.openmbean.CompositeData;\n import javax.management.openmbean.CompositeDataSupport;\n-import javax.management.openmbean.CompositeType;\n import javax.management.openmbean.OpenDataException;\n-import javax.management.openmbean.OpenType;\n-import javax.management.openmbean.SimpleType;\n import javax.management.openmbean.TabularData;\n import javax.management.openmbean.TabularDataSupport;\n-import javax.management.openmbean.TabularType;\n \n import org.apache.log4j.Logger;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.exchange.ExchangeDefaults;\n import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.BasicPublishBody;\n import org.apache.qpid.framing.FieldTable;\n import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n import org.apache.qpid.server.management.MBeanConstructor;\n@@ -222,4 +216,9 @@ public boolean hasBindings() throws AMQException\n     {\n         return !_index.getBindingsMap().isEmpty();\n     }\n+\n+    public Map<AMQShortString, List<AMQQueue>> getBindings()\n+    {\n+        return _index.getBindingsMap();\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java",
                "sha": "c24f9a37e155822e41bb3e728cf16945ef38147e",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DestWildExchange.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DestWildExchange.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 12,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DestWildExchange.java",
                "patch": "@@ -21,11 +21,9 @@\n package org.apache.qpid.server.exchange;\n \n import org.apache.log4j.Logger;\n-\n import org.apache.qpid.AMQException;\n import org.apache.qpid.exchange.ExchangeDefaults;\n import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.BasicPublishBody;\n import org.apache.qpid.framing.FieldTable;\n import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n import org.apache.qpid.server.management.MBeanConstructor;\n@@ -35,17 +33,11 @@\n \n import javax.management.JMException;\n import javax.management.MBeanException;\n-import javax.management.openmbean.ArrayType;\n import javax.management.openmbean.CompositeData;\n import javax.management.openmbean.CompositeDataSupport;\n-import javax.management.openmbean.CompositeType;\n import javax.management.openmbean.OpenDataException;\n-import javax.management.openmbean.OpenType;\n-import javax.management.openmbean.SimpleType;\n import javax.management.openmbean.TabularData;\n import javax.management.openmbean.TabularDataSupport;\n-import javax.management.openmbean.TabularType;\n-\n import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.List;\n@@ -59,7 +51,7 @@\n     private static final Logger _logger = Logger.getLogger(DestWildExchange.class);\n \n     private ConcurrentHashMap<AMQShortString, List<AMQQueue>> _routingKey2queues =\n-        new ConcurrentHashMap<AMQShortString, List<AMQQueue>>();\n+            new ConcurrentHashMap<AMQShortString, List<AMQQueue>>();\n     // private ConcurrentHashMap<AMQShortString, AMQQueue> _routingKey2queue = new ConcurrentHashMap<AMQShortString, AMQQueue>();\n     private static final String TOPIC_SEPARATOR = \".\";\n     private static final String AMQP_STAR = \"*\";\n@@ -92,7 +84,7 @@ public TabularData bindings() throws OpenDataException\n                     queueList.add(q.getName().toString());\n                 }\n \n-                Object[] bindingItemValues = { key.toString(), queueList.toArray(new String[0]) };\n+                Object[] bindingItemValues = {key.toString(), queueList.toArray(new String[0])};\n                 CompositeData bindingData = new CompositeDataSupport(_bindingDataType, _bindingItemNames, bindingItemValues);\n                 _bindingList.put(bindingData);\n             }\n@@ -311,6 +303,11 @@ protected ExchangeMBean createMBean() throws AMQException\n         }\n     }\n \n+    public Map<AMQShortString, List<AMQQueue>> getBindings()\n+    {\n+        return _routingKey2queues;\n+    }\n+\n     private List<AMQQueue> getMatchedQueues(AMQShortString routingKey)\n     {\n         List<AMQQueue> list = new LinkedList<AMQQueue>();\n@@ -358,8 +355,8 @@ protected ExchangeMBean createMBean() throws AMQException\n                         if (queueList.size() > (depth + queueskip))\n                         { // a hash and it is the last entry\n                             matching =\n-                                queueList.get(depth + queueskip).equals(AMQP_HASH)\n-                                && (queueList.size() == (depth + queueskip + 1));\n+                                    queueList.get(depth + queueskip).equals(AMQP_HASH)\n+                                    && (queueList.size() == (depth + queueskip + 1));\n                         }\n                     }\n                     else if (routingkeyList.size() > (depth + routingskip))",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DestWildExchange.java",
                "sha": "e1a3a24d3e26b5d41658b6e2916fc6c2b9d1c1cb",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/Exchange.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/Exchange.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 5,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/Exchange.java",
                "patch": "@@ -27,9 +27,13 @@\n import org.apache.qpid.server.queue.AMQQueue;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n \n+import java.util.List;\n+import java.util.Map;\n+\n public interface Exchange\n {\n     AMQShortString getName();\n+\n     AMQShortString getType();\n \n     void initialise(VirtualHost host, AMQShortString name, boolean durable, int ticket, boolean autoDelete) throws AMQException;\n@@ -51,29 +55,43 @@\n \n     void route(AMQMessage message) throws AMQException;\n \n+\n+    /**\n+     * Determines whether a message would be isBound to a particular queue using a specific routing key and arguments\n+     * @param routingKey\n+     * @param arguments\n+     * @param queue\n+     * @return\n+     * @throws AMQException\n+     */\n+    boolean isBound(AMQShortString routingKey, FieldTable arguments, AMQQueue queue);\n+\n     /**\n      * Determines whether a message would be isBound to a particular queue using a specific routing key\n      * @param routingKey\n      * @param queue\n      * @return\n      * @throws AMQException\n      */\n-    boolean isBound(AMQShortString routingKey, AMQQueue queue) throws AMQException;\n+    boolean isBound(AMQShortString routingKey, AMQQueue queue);\n \n     /**\n-     * Determines whether a message is routing to any queue using a specific routing key\n+     * Determines whether a message is routing to any queue using a specific _routing key\n      * @param routingKey\n      * @return\n      * @throws AMQException\n      */\n-    boolean isBound(AMQShortString routingKey) throws AMQException;\n+    boolean isBound(AMQShortString routingKey);\n \n-    boolean isBound(AMQQueue queue) throws AMQException;\n+    boolean isBound(AMQQueue queue);\n \n     /**\n      * Returns true if this exchange has at least one binding associated with it.\n      * @return\n      * @throws AMQException\n      */\n-    boolean hasBindings() throws AMQException;\n+    boolean hasBindings();\n+\n+    Map<AMQShortString, List<AMQQueue>> getBindings();\n+\n }",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/Exchange.java",
                "sha": "37cd85a8f8efe3077f878a44108403475f458088",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/ExchangeRegistry.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/ExchangeRegistry.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/ExchangeRegistry.java",
                "patch": "@@ -23,6 +23,8 @@\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n \n+import java.util.Collection;\n+\n \n public interface ExchangeRegistry extends MessageRouter\n {\n@@ -43,5 +45,7 @@\n \n     Exchange getDefaultExchange();\n \n+    Collection<AMQShortString> getExchangeNames();\n+\n     void initialise() throws AMQException;\n }",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/ExchangeRegistry.java",
                "sha": "fe3b19e74e70f8b918e667fc5b8fa19704a5a12a",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 12,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java",
                "patch": "@@ -21,7 +21,6 @@\n package org.apache.qpid.server.exchange;\r\n \r\n import org.apache.log4j.Logger;\r\n-\r\n import org.apache.qpid.AMQException;\r\n import org.apache.qpid.exchange.ExchangeDefaults;\r\n import org.apache.qpid.framing.AMQShortString;\r\n@@ -34,17 +33,13 @@\n \r\n import javax.management.JMException;\r\n import javax.management.MBeanException;\r\n-import javax.management.openmbean.ArrayType;\r\n import javax.management.openmbean.CompositeData;\r\n import javax.management.openmbean.CompositeDataSupport;\r\n-import javax.management.openmbean.CompositeType;\r\n import javax.management.openmbean.OpenDataException;\r\n-import javax.management.openmbean.OpenType;\r\n-import javax.management.openmbean.SimpleType;\r\n import javax.management.openmbean.TabularData;\r\n import javax.management.openmbean.TabularDataSupport;\r\n-import javax.management.openmbean.TabularType;\r\n-\r\n+import java.util.List;\r\n+import java.util.Map;\r\n import java.util.concurrent.CopyOnWriteArraySet;\r\n \r\n public class FanoutExchange extends AbstractExchange\r\n@@ -79,7 +74,7 @@ public TabularData bindings() throws OpenDataException\n             {\r\n                 String queueName = queue.getName().toString();\r\n \r\n-                Object[] bindingItemValues = { queueName, new String[] { queueName } };\r\n+                Object[] bindingItemValues = {queueName, new String[]{queueName}};\r\n                 CompositeData bindingData = new CompositeDataSupport(_bindingDataType, _bindingItemNames, bindingItemValues);\r\n                 _bindingList.put(bindingData);\r\n             }\r\n@@ -120,6 +115,11 @@ protected ExchangeMBean createMBean() throws AMQException\n         }\r\n     }\r\n \r\n+    public Map<AMQShortString, List<AMQQueue>> getBindings()\r\n+    {\r\n+        return null;\r\n+    }\r\n+\r\n     public AMQShortString getType()\r\n     {\r\n         return ExchangeDefaults.FANOUT_EXCHANGE_CLASS;\r\n@@ -181,24 +181,29 @@ public void route(AMQMessage payload) throws AMQException\n         }\r\n     }\r\n \r\n-    public boolean isBound(AMQShortString routingKey, AMQQueue queue) throws AMQException\r\n+    public boolean isBound(AMQShortString routingKey, FieldTable arguments, AMQQueue queue)\r\n+    {\r\n+        return isBound(routingKey, queue);\r\n+    }\r\n+\r\n+    public boolean isBound(AMQShortString routingKey, AMQQueue queue)\r\n     {\r\n         return _queues.contains(queue);\r\n     }\r\n \r\n-    public boolean isBound(AMQShortString routingKey) throws AMQException\r\n+    public boolean isBound(AMQShortString routingKey)\r\n     {\r\n \r\n         return (_queues != null) && !_queues.isEmpty();\r\n     }\r\n \r\n-    public boolean isBound(AMQQueue queue) throws AMQException\r\n+    public boolean isBound(AMQQueue queue)\r\n     {\r\n \r\n         return _queues.contains(queue);\r\n     }\r\n \r\n-    public boolean hasBindings() throws AMQException\r\n+    public boolean hasBindings()\r\n     {\r\n         return !_queues.isEmpty();\r\n     }\r",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java",
                "sha": "1a705248c19311260bfb50286b9c576c0957c184",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/HeadersExchange.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/HeadersExchange.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 25,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/HeadersExchange.java",
                "patch": "@@ -20,23 +20,6 @@\n  */\n package org.apache.qpid.server.exchange;\n \n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-\n-import javax.management.JMException;\n-import javax.management.openmbean.ArrayType;\n-import javax.management.openmbean.CompositeData;\n-import javax.management.openmbean.CompositeDataSupport;\n-import javax.management.openmbean.CompositeType;\n-import javax.management.openmbean.OpenDataException;\n-import javax.management.openmbean.OpenType;\n-import javax.management.openmbean.SimpleType;\n-import javax.management.openmbean.TabularData;\n-import javax.management.openmbean.TabularDataSupport;\n-import javax.management.openmbean.TabularType;\n-\n import org.apache.log4j.Logger;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.exchange.ExchangeDefaults;\n@@ -50,6 +33,23 @@\n import org.apache.qpid.server.queue.AMQMessage;\n import org.apache.qpid.server.queue.AMQQueue;\n \n+import javax.management.JMException;\n+import javax.management.openmbean.ArrayType;\n+import javax.management.openmbean.CompositeData;\n+import javax.management.openmbean.CompositeDataSupport;\n+import javax.management.openmbean.CompositeType;\n+import javax.management.openmbean.OpenDataException;\n+import javax.management.openmbean.OpenType;\n+import javax.management.openmbean.SimpleType;\n+import javax.management.openmbean.TabularData;\n+import javax.management.openmbean.TabularDataSupport;\n+import javax.management.openmbean.TabularType;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n /**\n  * An exchange that binds queues based on a set of required headers and header values\n  * and routes messages to these queues by matching the headers of the message against\n@@ -91,13 +91,13 @@\n     private final class HeadersExchangeMBean extends ExchangeMBean\n     {\n         @MBeanConstructor(\"Creates an MBean for AMQ Headers exchange\")\n-        public HeadersExchangeMBean()  throws JMException\n+        public HeadersExchangeMBean() throws JMException\n         {\n             super();\n             _exchangeType = \"headers\";\n             init();\n         }\n-        \n+\n         /**\n          * initialises the OpenType objects.\n          */\n@@ -113,7 +113,7 @@ protected void init() throws OpenDataException\n             _bindingDataType = new CompositeType(\"Exchange Binding\", \"Queue name and header bindings\",\n                                                  _bindingItemNames, _bindingItemNames, _bindingItemTypes);\n             _bindinglistDataType = new TabularType(\"Exchange Bindings\", \"List of exchange bindings for \" + getName(),\n-                                                 _bindingDataType, _bindingItemIndexNames);\n+                                                   _bindingDataType, _bindingItemIndexNames);\n         }\n \n         public TabularData bindings() throws OpenDataException\n@@ -169,7 +169,7 @@ public void createNewBinding(String queueName, String binding) throws JMExceptio\n                 throw new JMException(\"Queue \\\"\" + queueName + \"\\\" is not registered with the exchange.\");\n             }\n \n-            String[] bindings  = binding.split(\",\");\n+            String[] bindings = binding.split(\",\");\n             FieldTable bindingMap = new FieldTable();\n             for (int i = 0; i < bindings.length; i++)\n             {\n@@ -241,17 +241,23 @@ public void route(AMQMessage payload) throws AMQException\n         }\n     }\n \n-    public boolean isBound(AMQShortString routingKey, AMQQueue queue) throws AMQException\n+    public boolean isBound(AMQShortString routingKey, FieldTable arguments, AMQQueue queue)\n+    {\n+        //fixme isBound here should take the arguements in to consideration.\n+        return isBound(routingKey, queue);\n+    }\n+\n+    public boolean isBound(AMQShortString routingKey, AMQQueue queue)\n     {\n         return isBound(queue);\n     }\n \n-    public boolean isBound(AMQShortString routingKey) throws AMQException\n+    public boolean isBound(AMQShortString routingKey)\n     {\n         return hasBindings();\n     }\n \n-    public boolean isBound(AMQQueue queue) throws AMQException\n+    public boolean isBound(AMQQueue queue)\n     {\n         for (Registration r : _bindings)\n         {\n@@ -263,7 +269,7 @@ public boolean isBound(AMQQueue queue) throws AMQException\n         return false;\n     }\n \n-    public boolean hasBindings() throws AMQException\n+    public boolean hasBindings()\n     {\n         return !_bindings.isEmpty();\n     }\n@@ -288,6 +294,11 @@ protected ExchangeMBean createMBean() throws AMQException\n         }\n     }\n \n+    public Map<AMQShortString, List<AMQQueue>> getBindings()\n+    {\n+        return null;\n+    }\n+\n     private static class Registration\n     {\n         private final HeadersBinding binding;",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/HeadersExchange.java",
                "sha": "9bb1ee6a62b2c1cc59a9fdb8ca69524d81cb8c2b",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicConsumeMethodHandler.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicConsumeMethodHandler.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 6,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicConsumeMethodHandler.java",
                "patch": "@@ -100,6 +100,12 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<BasicCon\n             }\n             else\n             {\n+\n+                if (body.consumerTag != null)\n+                {\n+                    body.consumerTag = body.consumerTag.intern();\n+                }\n+\n                 try\n                 {\n                     AMQShortString consumerTag = channel.subscribeToQueue(body.consumerTag, queue, session, !body.noAck,\n@@ -138,15 +144,15 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<BasicCon\n                     // If the above doesn't work then perhaps this is wrong too.\n //                    throw body.getConnectionException(AMQConstant.NOT_ALLOWED,\n //                                                      \"Non-unique consumer tag, '\" + body.consumerTag + \"'\");\n-                                        // AMQP version change: Hardwire the version to 0-8 (major=8, minor=0)\n+                    // AMQP version change: Hardwire the version to 0-8 (major=8, minor=0)\n                     // TODO: Connect this to the session version obtained from ProtocolInitiation for this session.\n                     // Be aware of possible changes to parameter order as versions change.\n                     session.writeFrame(ConnectionCloseBody.createAMQFrame(channelId,\n-                        (byte)8, (byte)0,\t// AMQP version (major, minor)\n-                        BasicConsumeBody.getClazz((byte)8, (byte)0),\t// classId\n-                        BasicConsumeBody.getMethod((byte)8, (byte)0),\t// methodId\n-                        AMQConstant.NOT_ALLOWED.getCode(),\t// replyCode\n-                        msg));\t// replyText\n+                                                                          (byte) 8, (byte) 0,    // AMQP version (major, minor)\n+                                                                          BasicConsumeBody.getClazz((byte) 8, (byte) 0),    // classId\n+                                                                          BasicConsumeBody.getMethod((byte) 8, (byte) 0),    // methodId\n+                                                                          AMQConstant.NOT_ALLOWED.getCode(),    // replyCode\n+                                                                          msg));    // replyText\n                 }\n                 catch (ExistingExclusiveSubscriptionException e)\n                 {",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicConsumeMethodHandler.java",
                "sha": "ab4f2c4e64aafe921edbbb475fddb2b4cfdf5ce6",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/qpid/blob/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicPublishMethodHandler.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicPublishMethodHandler.java?ref=4fbd28b6078d6b3fbfe528a99d6e27963c68f99b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicPublishMethodHandler.java",
                "patch": "@@ -67,6 +67,10 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<BasicPub\n             body.exchange = ExchangeDefaults.DEFAULT_EXCHANGE_NAME;\n \n         }\n+        else\n+        {\n+            body.exchange = body.exchange.intern();\n+        }\n         VirtualHost vHost = session.getVirtualHost();\n         Exchange e = vHost.getExchangeRegistry().getExchange(body.exchange);\n         // if the exchange does not exist we raise a channel exception\n@@ -86,10 +90,16 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<BasicPub\n                 throw body.getChannelNotFoundException(evt.getChannelId());\n             }\n \n+            if(body.routingKey != null)\n+            {\n+                body.routingKey = body.routingKey.intern();\n+            }\n+            \n             MessagePublishInfo info = session.getRegistry().getProtocolVersionMethodConverter().convertToInfo(body);\n             channel.setPublishFrame(info, session);\n         }\n     }\n }\n \n \n+",
                "raw_url": "https://github.com/apache/qpid/raw/4fbd28b6078d6b3fbfe528a99d6e27963c68f99b/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicPublishMethodHandler.java",
                "sha": "68d4483df3640c85c6112a423caa5ca25a90e820",
                "status": "modified"
            }
        ],
        "message": "Merged revisions 1-447993,447995-448007,448009-448141,448143-448157,448161-448194,448196-448210,448212-448218,448220-448223,448225-448233,448235,448237-448241,448243-448596,448598-448623,448625-448850,448852-448880,448882-448982,448984-449635,449637-449639,449641-449642,449644-449645,449647-449674,449676-449719,449721-449749,449751-449762,449764-449933,449935-449941,449943-450383,450385,450387-450400,450402-450433,450435-450503,450505-450555,450557-450860,450862-451024,451026-451149,451151-451316,451318-451931,451933-452139,452141-452162,452164-452320,452322,452324-452325,452327-452333,452335-452429,452431-452528,452530-452545,452547-453192,453194-453195,453197-453536,453538,453540-453656,453658-454676,454678-454735,454737,454739-454781,454783-462728,462730-462819,462821-462833,462835-462839,462841-463071,463073-463178,463180-463308,463310-463362,463364-463375,463377-463396,463398-463402,463404-463409,463411-463661,463663-463670,463672-463673,463675-464493,464495-464502,464504-464576,464578-464613,464615-464628,464630,464632-464866,464868-464899,464901-464942,464944-464949,464951-465004,465006-465016,465018-465053,465055-465165,465167-465321,465323-465406,465408-465427,465429-465431,465433-465548,465550-466044,466047-466075,466077,466079-466081,466083-466099,466101-466112,466114-466126,466128-466240,466242-466971,466973-466978,466980-467309,467311-467312,467316-467328,467330-467485,467487-467588,467590-467604,467606-467699,467701-467706,467708-467749,467751-468069,468071-468537,468539-469241,469244-469246,469248-469318,469320-469421,469423,469425-469429,469431-469435,469437-469462,469464-469469,469472-469477,469479-469490,469492-469503,469505-469529,469531-469598,469600-469624,469626-469737,469739-469752,469754-469806,469808-469928,469930-469953,469955-470011,470013-470109,470111-470335,470338-470339,470341-470379,470381,470383-470399,470401-470446,470448-470741,470743-470758,470760-470809,470811-470817,470819-470993,470995-471001,471003-471788,471790-471792,471794-472028,472030-472032,472034-472036,472038,472040,472043,472045-472059,472061,472063,472065-472066,472068,472070-472072,472074-472080,472082,472084-472092,472094-472107,472109-472123,472125-472158,472160-472165,472167-472172,472174-472457,472459-472460,472462-472464,472466-472470,472472-472483,472486-472491,472493-472494,472496-472497,472499,472501-472503,472505-472512,472514-472544,472546-472556,472558-472560,472562-472572,472574-472587,472589-472591,472593-472605,472607,472609-472731,472733-472786,472788-472843,472845-472849,472851-472859,472861-472878,472880-472903,472905,472907-472988,472990-472991,472993-473071,473073-473086,473088-473090,473093,473095-473096,473098-473106,473108-473110,473112-473185,473187-473260,473262,473268-473270,473275-473279,473281,473284-473287,473289-473295,473297-473306,473308-473330,473332-473335,473337,473339-473344,473346-473351,473353-473355,473357-473358,473361-473471,473473-473497,473499-473535,473537-473567,473569-473888,473890-474451,474454-474492,474494-474563,474565-474843,474845-474865,474867-474932,474934-475035,475037-475144,475146-475180,475182-475265,475267-475285,475287,475289-475293,475295-475296,475298-475302,475304-475631,475633-475649,475651-475748,475750-475752,475754-476107,476109-476302,476304-476413,476415-476430,476432-476700,476702-476868,476870-477147,477149-477213,477215-477263,477265-477340,477342-477635,477637-477789,477791-477825,477827-477841,477843,477846-477852,477854,477856,477858-477865,477867-477894,477896-478022,478024-478182,478184-478211,478213-478233,478235-478236,478238-478241,478243-478252,478254-478259,478261-478263,478265,478267-478269,478271-478286,478288-478342,478344-478379,478381-478412,478414-478443,478445-478636,478639-478658,478660-478821,478823-478853,478855-478922,478924-478962,478965-478974,478976-479029,479031-479049,479051-479210,479212-479214,479216-479407,479409-479415,479417-479425,479427-479559,479561-479639,479641-479676,479678-479685,479687-480030,480033-480086,480091-480093,480095-480118,480120-480139,480141,480143-480148,480150-480156,480158-480163,480165-480177,480179-480189,480191-480193,480195-480198,480200-480220,480222-480282,480284-480292,480294-480308,480310-480317,480320-480422,480424,480426-480581,480583-480656,480658-480692,480695-480702,480704,480706-480710,480712-480910,480913-480933,480935-480945,480947-480972,480974-480993,480995-481034,481036-481158,481161-481174,481176-481220,481222-481234,481236-481260,481263-481264,481266-481296,481298-481304,481306-481311,481313-481332,481334,481336-481380,481382-481441,481443-482144,482146-482180,482182-482193,482195-482232,482234-482236,482239,482241-482242,482244-482247,482250-482251,482253,482256-482261,482264-482288,482290-482364,482366,482368,482370-482554,482556,482558-482569,482572-482636,482638,482640-482696,482698-482722,482724-482732,482734-482771,482774-482957,482959-483045,483047-483105,483108,483110-483115,483117,483119-483127,483130-483134,483136-483148,483150-483158,483160-483164,483166-483178,483180-483391,483393-483400,483402-483403,483405-483418,483420-483421,483425-483436,483438-483470,483472-483502,483504-483558,483560-483599,483601-483637,483639-483644,483646-483659,483661-483670,483672-483878,483880-483910,483912-483915,483917-483940,483942,483944-483968,483970-483972,483974-483976,483978,483980-484612,484614-484657,484659-484693,484695-484718,484720-484842,484844-484847,484849-484986,484988-485019,485021-485489,485491-485544,485546-485591,485593,485595-485697,485699-485729,485731-485734,485736-485779,485781-485787,485789-485851,485853,485855-486007,486009,486011-486020,486022-486083,486085-486097,486099-486117,486120-486131,486133-486148,486150-486161,486163-486164,486166-486197,486199-486205,486208-486247,486249-486253,486256-486427,486429-486431,486433-486554,486556-486573,486575-486593,486595,486597-486609,486611-486619,486622,486625,486627-486641,486643-486645,486649-486687,486689-486721,486723-486730,486732-486746,486748-486759,486761,486763-486777,486779-486782,486784-486788,486790,486792,486794-486796,486798-487175,487178,487180-487213,487215,487217-487267,487269-487284,487286-487298,487300-487358,487360-487367,487369-487382,487384-487434,487436-487480,487482-487547,487549-487561,487563-487565,487567-487578,487580-487615,487617-487622,487624,487626,487628,487630-487635,487637-487703,487705-487777,487780-487781,487783-487800,487802-487803,487805-487820,487822-487848,487850-487902,487904-488103,488105-488133,488135-488158,488160-488163,488165-488187,488189-488216,488218-488248,488250-488278,488280,488282-488303,488305-488313,488315-488342,488344-488351,488353-488376,488378-488449,488451-488593,488595,488597-488623,488625-488700,488702-488704,488706-488710,488714,488716-488725,488727-488744,488746-488770,488772-488798,488800,488802-488807,488809,488811-488829,488831-488843,488845-488851,488853-489069,489071-489077,489079-489081,489084-489102,489104-489105,489107-489109,489111-489112,489114-489139,489141-489178,489181-489203,489205-489211,489213,489216-489329,489332-489402,489404-489417,489419-489421,489423-489643,489645-489690,489692-489703,489705-489714,489716-489747,489749-489753,489755-489803,489805-489904,489906-490372,490374-490504,490506-490604,490606-490707,490710-490733,490735-490871,490873-490984,490986-491028,491030,491032-491071,491073-491119,491121-491576,491578-491672,491674-491800,491802-491838,491840-491878,491880-492183,492185-492279,492281-492317,492319-492513,492515-492584,492586-492587,492589-492601,492603-492635,492637-492640,492642-492717,492719-492723,492725-492729,492731-492755,492757-492901,492903-492955,492957-492962,492964-492997,492999-493002,493004-493041,493043-493059,493062-493063,493065-493086,493088-493125,493127-493139,493141-493150,493152-493871,493873-494017,494019-494030,494032-494041,494043-494091,494093-494120,494122-494354,494356-494436,494438-494539,494541-494552,494554-494586,494588-494649,494651,494653-494654,494656-494657,494659-494764,494766-494768,494770-494796,494798-494799,494802,494804-494860,494862-494903,494905-494906,494908-495019,495021-495160,495162-495168,495171-495188,495190-495229,495231-495254,495256-495303,495305-495313,495315-495336,495338-495372,495374-495379,495381-495454,495457-495459,495462-495516,495518-495524,495526-495531,495533-495548,495551-495553,495555,495557-495558,495560,495562-495573,495575-495583,495585-495594,495596-495628,495630-495638,495640-495651,495653-495660,495662-495753,495755-496259,496261-496262,496264-496269,496271-496275,496277-496301,496303-496316,496318-496383,496385-496413,496415-496495,496497-496625,496627-496636,496638-496640,496642-496647,496650-496657,496659-496660,496663-496664,496666-496677,496679-496681,496683-496730,496732-496750,496752,496754-496784,496786-496832,496834-496840,496842-496990,496992-496995,496997-497340,497343-497351,497353-497403,497405-497424,497426-497438,497440-497481,497483-497497,497499-497765,497767-497769,497771-497775,497777-497778,497780,497782-497783,497785,497787-497812,497814-497871,497873-497877,497879-498573,498575-498588,498590,498592,498594-498636,498638-498669,498671-498686,498688-498689,498691-498719,498721-498964,498966-498969,498971-498973,498975-498982,498985-499035,499037-499040,499042,499044-499048,499050-499082,499084-499086,499088-499164,499167-499169,499171-499355,499357-499370,499372-499373,499375-499391,499393,499395-499425,499428,499430-499445,499447-499455,499457-499460,499462-499465,499467,499469-499489,499491-499492,499494-499531,499533-499562,499566-499627,499629-499715,499717-499732,499734-499755,499758-499763,499765-499780,499782-499795,499797-499802,499804-499844,499846,499848-499850,499852-499863,499865-499873,499875-499974,499976-499978,499980-500263,500265-500283,500285-500309,500311-501000,501002,501012-501057,501059-501095,501097-501390,501392-501410,501413-501447,501449-501454,501456,501458-501464,501466-501471,501473-501803,501805-501913,501915-501916,501918-501919,501921-501944,501946-502171,502173-502177,502181,502183-502247,502250-502252,502254-502260,502262-502267,502270,502272,502274-502575,502577-502609,502611-502619,502621-502626,502628-502654,502656-503592,503594-503603,503605-503608,503610-503636,503638-503645,503647-503705,503707-503789,503791-504024,504026-504111,504113-504506,504508-504735,504737-504863,504865-504867,504869-504914,504916-505241,505243-505254,505257-505267,505269-505354,505356-505891,505893-505971,505973-506400,506402-506404,506407-506438,506440-506516,506518-506541,506543-506966,506968-506971,506973-507095,507097-507108,507111-507454,507456,507459-507471,507473-507556,507558,507560-507581,507585-507594,507597,507599-507608,507610-507728,507730-507893,507895-507937,507940-508234,508236-508350,508352-508365,508367-508380,508383,508386-508415,508417-508648,508650-508941,508943-509146,509148-509171,509173-509175,509179-509201,509203-509207,509209-509215,509217-509222,509224-509477,509480-509627,509629-509634,509636-509641,509643-509736,509738-509931,509933-510059,510061-510075,510077-510158,510161-510896,510898-510938,510940-511388,511390-511922,511924-512287,512289-512698,512702-512813,512815-512817,512819-513359,513361-513370,513372-514702,514704-514886,514888-514902,514904-515126,515129-515141,515143-515516,515518-515534,515536-515538,515540-515648,515650-515651,515653-516070,516072-516411,516413-516448,516450,516452-517637,517639-517647,517649-517659,517661-517663,517665-517677,517679-517682,517684-517744,517746-518085,518087-518175,518177-518558,518560-518568,518571-518666,518668,518670-518699,518701-518987,518990-518992,518994-519908,519910-519932,519934-520414,520416-520842,520844-520937,520939-521362,521364-521681,521683-521704,521706-521709,521711-521714,521716-521781,521783-521792,521794-522462,522464-522527,522529-522534,522536-522566,522568-522958,522960,522962-522966,522968-522976,522978-522980,522982-522988,522992-522993,522995-523244,523246-523746,523748-524049,524051-524738,524741-524742,524744-524762,524764,524766,524768-525486,525488-525530,525532,525534,525537-525552,525554-525765,525767-525776,525778-525784,525789-525803,525805-525816,525818-525828,525830-525861,525863-525866,525868-526090,526092-526112,526114-526116,526119-526121,526123-526149,526151-526153,526155-526156,526160-526165,526167-526186,526188-526193,526196-526197,526200-526665,526667-526682,526686-526690,526693,526695-526708,526710-526713,526715-526775,526777-526802,526804-526806,526808-527048,527051-527052,527054-527181,527183-527486,527488-527492,527494-527498,527500-527508,527510-527517,527519-527536,527538-527555,527559-527802,527804-527842,527844-527847,527849-527875,527877-527940,527942-527958,527960-527971,527973-528002,528004,528006-528423,528425-529232,529234-529245,529247-529296,529298-529634,529636-529658,529660-529665,529667-529668,529670-530033,530035-530036,530038-530040,530045-530046,530050-530051,530053-530431,530433-530436,530439-530440,530443,530445-530446,530448,530450-530682,530684,530687-530696,530698-530733,530735-530776,530778-530795,530799,530801-530811,530813-530818,530820-530837,530839-531436,531438-531455,531457,531459-531511,531514,531516,531519-531523,531525,531528-531858,531860-531864,531866-531907,531909-531916,531918-531936,531938-531988,531990-532001,532003-532371,532373-532465,532467-532727,532729-532765,532767-532785,532788-532790,532792-532793,532795-533064,533066-533074,533076,533080-533130,533132-533139,533142-533703,533705-533720,533722-533763,533766-533818,533820-533839,533841-533859,533862-534035,534037-534112,534114-534116,534118-534472,534474-534477,534479-534762,534764-534896,534898-534902,534904-535253,535255-535308,535310-535808,535810-535873,535875-536007,536009-536140,536142-536162,536165-536242,536244-536252,536254-536278,536280-536338,536340-536448,536450-536479,536481-536482,536484-536485,536487-536495,536497,536500-536505,536507-536561,536563-536570,536572,536574-536583,536586-536823,536825-537014,537016-537018,537020-537025,537027-537028,537030-537160,537162-537170,537172-537672,537674-537781,537783-537833,537836-537840,537842-537844,537846-537953,537955-538034,538036-538078,538080-538083,538085-538097,538099-538108,538110-538239,538241-538881,538883-538906,538908-538911,538913-538921,538923-539177,539179-539190,539192-539469,539471-539475,539477-539480,539482-539483,539485-539500,539502-539593,539595-539782,539784-539787,539789-540106,540108-540168,540170-540510,540512-541246,541248-542483,542485-542788,542790-543495,543497-544108,544110-544421,544423-544507,544509-544865,544867-545145,545147-546095,546097-546189,546191-546440,546442-546457,546459-547177,547179-547626,547628-548275,548277-548278,548280-548301,548303-548307,548309-548311,548313-548314,548316,548318,548320-548380,548382-549010,549012-549529,549531-549848,549850-550508,550510-550747,550749-550772,550774-550848,550850-551116,551122-553446,553448-561282 via svnmerge from \nhttps://svn.apache.org/repos/asf/incubator/qpid/branches/M2\n\n........\n  r541920 | tomasr | 2007-05-26 18:35:51 +0100 (Sat, 26 May 2007) | 1 line\n  \n  QPID-136 Initial Prefetch Implementation\n........\n  r549112 | arnaudsimon | 2007-06-20 15:11:03 +0100 (Wed, 20 Jun 2007) | 1 line\n  \n  changed setText to use UTF8 as default encoder \n........\n  r551167 | arnaudsimon | 2007-06-27 15:08:50 +0100 (Wed, 27 Jun 2007) | 1 line\n  \n  added public void declareAndBind(AMQDestination amqd)\n........\n  r551174 | ritchiem | 2007-06-27 15:23:21 +0100 (Wed, 27 Jun 2007) | 3 lines\n  \n  Caused each of these tests to run 10 times to help identify any race conditions that were occuring.\n  \n  Updated the CommitRollbackTest to be more robust in the detection of failure.\n........\n  r551175 | ritchiem | 2007-06-27 15:23:52 +0100 (Wed, 27 Jun 2007) | 1 line\n  \n  Allowed more of the constants to be set via system properties.\n........\n  r551176 | ritchiem | 2007-06-27 15:25:13 +0100 (Wed, 27 Jun 2007) | 1 line\n  \n  renamed the passwd programme qpid-passwd to match the change in bin directory.\n........\n  r552441 | rupertlssmith | 2007-07-02 10:23:54 +0100 (Mon, 02 Jul 2007) | 1 line\n  \n  Added log4j as slfj logger for perftests.\n........\n  r552499 | rupertlssmith | 2007-07-02 15:17:45 +0100 (Mon, 02 Jul 2007) | 1 line\n  \n  Added some documentation.\n........\n  r553172 | rupertlssmith | 2007-07-04 12:11:04 +0100 (Wed, 04 Jul 2007) | 1 line\n  \n  Messages moved by management console now commited on the message store.\n........\n  r553248 | ritchiem | 2007-07-04 17:05:55 +0100 (Wed, 04 Jul 2007) | 6 lines\n  \n  Addition of the MessageStore Tool.\n  Small changes to the Exchanges to allow the extraction of currently listed items.\n  \n  Extracted initial broker configuration mechanism to a reusable class. Have modified broker to use it.\n  \n  Move the Passwd.java to new tools package structure on the broker.\n........\n  r553265 | ritchiem | 2007-07-04 17:42:59 +0100 (Wed, 04 Jul 2007) | 1 line\n  \n  Tidied up some extranious logging.\n........\n  r553432 | rupertlssmith | 2007-07-05 10:28:33 +0100 (Thu, 05 Jul 2007) | 1 line\n  \n  Fixed test state carrying over to mandatory message test from immediate. Also added in-vm clean up to other tests.\n........\n  r553480 | ritchiem | 2007-07-05 13:40:50 +0100 (Thu, 05 Jul 2007) | 2 lines\n  \n  Minor changes and tidy up when running via command line.\n  Added Copy command.\n........\n  r553482 | ritchiem | 2007-07-05 13:44:42 +0100 (Thu, 05 Jul 2007) | 2 lines\n  \n  Forgot to compile before committing. Missed a method change in the Select command.\n........\n  r554964 | rupertlssmith | 2007-07-10 15:40:04 +0100 (Tue, 10 Jul 2007) | 1 line\n  \n  Added message copy method.\n........\n  r555249 | rupertlssmith | 2007-07-11 12:52:39 +0100 (Wed, 11 Jul 2007) | 1 line\n  \n  Update perftests to center better around current performance.\n........\n  r556011 | rupertlssmith | 2007-07-13 15:24:03 +0100 (Fri, 13 Jul 2007) | 1 line\n  \n  Moved test framework into its own package and cleaned it up.\n........\n  r556024 | rupertlssmith | 2007-07-13 16:02:06 +0100 (Fri, 13 Jul 2007) | 1 line\n  \n  Completed javadoc for test framework.\n........\n  r556628 | rgodfrey | 2007-07-16 14:50:57 +0100 (Mon, 16 Jul 2007) | 1 line\n  \n  QPID-537 : Make AMQMessage.incrementReference public\n........\n  r556675 | cctrieloff | 2007-07-16 18:36:21 +0100 (Mon, 16 Jul 2007) | 2 lines\n  \n  added notice entries\n........\n  r556680 | cctrieloff | 2007-07-16 18:56:40 +0100 (Mon, 16 Jul 2007) | 2 lines\n  \n  clean up\n........\n  r556682 | cctrieloff | 2007-07-16 18:58:37 +0100 (Mon, 16 Jul 2007) | 2 lines\n  \n  removed optional cppunit as not in distributed packages\n........\n  r556845 | ritchiem | 2007-07-17 09:26:33 +0100 (Tue, 17 Jul 2007) | 3 lines\n  \n  Additional logging in case of broker failure at startup.\n  \n  Use broker logger at error level as well as System.out\n........\n  r556847 | ritchiem | 2007-07-17 09:35:35 +0100 (Tue, 17 Jul 2007) | 3 lines\n  \n  Update to the MessageStore Tool to provide Move and Purge functionality.\n  \n  Updated to remove the AMQExceptions that will be removed from the Exchange class.\n........\n  r556861 | ritchiem | 2007-07-17 10:26:47 +0100 (Tue, 17 Jul 2007) | 2 lines\n  \n  QPID-538 Check to ensure a duplicate binding is not created.\n........\n  r556868 | ritchiem | 2007-07-17 10:55:56 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  Addition of simple pub/sub examples.\n........\n  r556869 | ritchiem | 2007-07-17 10:56:17 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  QPID-540 Prevent NPE when purging message from the main _message queue in the ConcurrentSelectorDeliveryManager that have been delivered via a Subscribers _messageQueue. Ensuring that any expired messages are still correctly handled. i.e. the Queue size/depth is reduced and the message correctly dequeued from the underlying store.\n........\n  r556871 | ritchiem | 2007-07-17 10:57:35 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  White space & code formatting change\n........\n  r556872 | ritchiem | 2007-07-17 10:58:35 +0100 (Tue, 17 Jul 2007) | 3 lines\n  \n  Added additional information to hard-error logging in exceptionReceived.\n  \n  Fully expanded imports\n........\n  r556888 | ritchiem | 2007-07-17 12:33:08 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  Change to allow the management port to be specified on the command line, via -m or --mport\n........\n  r556890 | ritchiem | 2007-07-17 12:38:10 +0100 (Tue, 17 Jul 2007) | 4 lines\n  \n  QPID-541 A large portion of memory was being wasted in 32k ByteBuffers being held by the AMQShortStrings. \n  \n  Patch submitted by Robert Godfrey to intern() the AMQSSs to reduce memory usage. Current implementation *will* impact performance due to the usage of a static Map for storage. However, a thread local implementation is in the works.\n........\n  r556898 | rgodfrey | 2007-07-17 13:00:57 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  QPID-541 : Change to use threadlocal maps for intern for the common case to avoid excessive synchronization.  In the uncommon case will require more lookup.\n........\n  r556958 | rupertlssmith | 2007-07-17 17:22:16 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  Refactored the distributed test clients and coordinator to support different distribution and sequencing engines.\n........\n  r556967 | rupertlssmith | 2007-07-17 17:40:14 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  Removed unused package.\n........\n  r556968 | rupertlssmith | 2007-07-17 17:42:00 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  Retired old interop tests.\n........\n  r556969 | rupertlssmith | 2007-07-17 17:43:49 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  Properties file not needed any more. Test properties all driven from MessagingTestConfigProperties.\n........\n  r557276 | ritchiem | 2007-07-18 15:36:11 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  Updates to pom files and Licensing/Notice files for M2 release.\n........\n  r557279 | ritchiem | 2007-07-18 15:51:42 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  This is left over from ANT\n........\n  r557281 | ritchiem | 2007-07-18 15:54:06 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  updated comment to refelect property values\n........\n  r557286 | ritchiem | 2007-07-18 16:02:22 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  Set default mvn build to assembly:assembly\n........\n  r557288 | ritchiem | 2007-07-18 16:09:07 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  Ensure the top level release-docs directory is included in the builds\n........\n  r557306 | ritchiem | 2007-07-18 17:01:58 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  Update fix incorrect license headers.\n........\n  r557312 | ritchiem | 2007-07-18 17:07:01 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  added license\n........\n  r557314 | ritchiem | 2007-07-18 17:11:17 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  added license\n........\n  r557452 | aconway | 2007-07-19 03:03:02 +0100 (Thu, 19 Jul 2007) | 14 lines\n  \n  \n  \t* lib/broker/Daemon.cpp, .h\n  \t - Rewrote to remove libdaemon dependency.\n  \t - PID file stored in /var/run if root, /tmp otherwise.\n  \n  \t* src/qpidd.cpp: Use new Daemon.cpp.\n  \t - lock files stored in /var/run (for root) or /tmp.\n  \t - updated to trunk daemon flag behavior.\n  \n  \t* lib/broker/Makefile.am (libqpidbroker_la_LIBADD): \n  \t - Daemon.cpp now needs -lboost_iostreams\n  \t \n  \t* NOTICE, README: Removed mention of libdaemon.\n........\n  r558027 | ritchiem | 2007-07-20 17:08:05 +0100 (Fri, 20 Jul 2007) | 1 line\n  \n  Added a logger but only used to control the toString inclusion of password. If in debug mode it will include password otherwise the password is \"********\".\n........\n  r558072 | astitcher | 2007-07-20 18:49:41 +0100 (Fri, 20 Jul 2007) | 2 lines\n  \n  Fixed the license from the \"old\" apache copyright notice\n........\n  r558083 | aconway | 2007-07-20 19:29:08 +0100 (Fri, 20 Jul 2007) | 2 lines\n  \n  Remove -ldaemon, we no longer require libdaemon.\n........\n  r558099 | aconway | 2007-07-20 20:20:01 +0100 (Fri, 20 Jul 2007) | 2 lines\n  \n  Ignore QPID_ env variables that don't correspond to known options.\n........\n  r558108 | cctrieloff | 2007-07-20 20:55:40 +0100 (Fri, 20 Jul 2007) | 2 lines\n  \n  typo fix\n........\n  r558114 | rajith | 2007-07-20 21:11:03 +0100 (Fri, 20 Jul 2007) | 1 line\n  \n  added release notes\n........\n  r558115 | rajith | 2007-07-20 21:12:20 +0100 (Fri, 20 Jul 2007) | 1 line\n  \n  Checking in the release notes\n........\n  r558116 | aconway | 2007-07-20 21:16:20 +0100 (Fri, 20 Jul 2007) | 3 lines\n  \n  Removed .txt from RELEASE_NOTES\n  Added RELEASE_NOTES to EXTRA_DIST in Makefile.am\n........\n  r558168 | rajith | 2007-07-20 23:03:42 +0100 (Fri, 20 Jul 2007) | 1 line\n  \n  added release notes\n........\n  r558170 | rajith | 2007-07-20 23:04:11 +0100 (Fri, 20 Jul 2007) | 1 line\n  \n  added release notes\n........\n  r558630 | gsim | 2007-07-23 08:21:49 +0100 (Mon, 23 Jul 2007) | 3 lines\n  \n  Revised release notes: removed bug fixed on this branch, removed outstanding feature lists as it is not terribly accurate or helpful.\n........\n  r559419 | rupertlssmith | 2007-07-25 13:17:59 +0100 (Wed, 25 Jul 2007) | 1 line\n  \n  Refactored interop tests into general distributed test framework. Moved framework under systests from integrationtests.\n........\n  r559427 | ritchiem | 2007-07-25 13:40:24 +0100 (Wed, 25 Jul 2007) | 2 lines\n  \n  AMQMessage - added //todo-s and removed unused parameter StoreContext from expired() method call.\n  ConcurrentSelectorDeliveryManager - Update to reflect expired() call change. Created new _reaperContextStore to be used when performing reaper operations such as message dequeue due to expiration. Removed old commented code.\n........\n  r559455 | rupertlssmith | 2007-07-25 14:40:16 +0100 (Wed, 25 Jul 2007) | 1 line\n  \n  Added to comments.\n........\n  r559456 | rupertlssmith | 2007-07-25 14:41:21 +0100 (Wed, 25 Jul 2007) | 1 line\n  \n  Removed redundant method.\n........\n  r559458 | rupertlssmith | 2007-07-25 14:57:21 +0100 (Wed, 25 Jul 2007) | 1 line\n  \n  Refactored packaging of test framework.\n........\n  r559461 | rupertlssmith | 2007-07-25 15:00:16 +0100 (Wed, 25 Jul 2007) | 1 line\n  \n  Removed redundant packages.\n........\n  r559943 | rhs | 2007-07-26 20:15:17 +0100 (Thu, 26 Jul 2007) | 1 line\n  \n  adding missing ack\n........\n  r559944 | rhs | 2007-07-26 20:15:44 +0100 (Thu, 26 Jul 2007) | 1 line\n  \n  removed old script\n........\n  r560198 | ritchiem | 2007-07-27 12:30:34 +0100 (Fri, 27 Jul 2007) | 1 line\n  \n  Added files to ignore list\n........\n  r560225 | ritchiem | 2007-07-27 14:33:50 +0100 (Fri, 27 Jul 2007) | 1 line\n  \n  Converted namespaces from Qpid.* to Apache.Qpid.*\n........\n  r560471 | tomasr | 2007-07-28 03:35:41 +0100 (Sat, 28 Jul 2007) | 1 line\n  \n  Removed using directives causing compilation failure in .NET 1.1\n........\n  r561278 | ritchiem | 2007-07-31 10:07:57 +0100 (Tue, 31 Jul 2007) | 8 lines\n  \n  Changes to POMs.\n  Client pom now builds a single jar with all dependancies included in the single bundle.\n  systests/pom.xml adjusted to include only *Test.class items. This will fix the current Error on OptOutTestCase\n  management/eclipse-plugin/pom.xml - editied to include there required MANIFEST.MF to identify plugin to eclipse\n  distribution/src/main/assembly/management-eclipse-plugin.xml editied to include there required MANIFEST.MF to identify the plugin\n  distribution/pom.xml - white space\n  \n  Also updated log4j.xml default to create an alert.log file from the AMQQueue alerting. Added a debug.log4j.xml that gives example of debugging the broker via log4j.\n........\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/qpid/trunk@561365 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/0413e1028718321ec7f2dffd6bbeeb6646cd2006",
        "patched_files": [
            "SimpleByteBufferTests.java",
            "QpidHeaders.java",
            "ProtocolDecoderOutput.java",
            "IMessageFactory.java",
            "AMQDisconnectedException.java",
            "AMQMessageFactory.java",
            "IProtocolEncoder.java",
            "BlockingQueue.java",
            "App.java",
            "QpidBytesMessageFactory.java",
            "AMQInvalidArgumentException.java",
            "StateWaiter.java",
            "ConsumerProducerQueue.java",
            "AMQConnectionClosedException.java",
            "ContentHeaderBodyFactory.java",
            "CallbackHandlerRegistry.java",
            "ProtocolCodecException.java",
            "Program.java",
            "BlockingMethodFrameListener.java",
            "QpidTextMessageFactory.java",
            "IMessagePublisher.java",
            "IProtocolWriter.java",
            "Makefile.java",
            "FlowControlQueue.java",
            "BasicMessageConsumer.java",
            "csharp.java",
            "IProtocolChannel.java",
            "AMQState.java",
            "DeliveryMode.java",
            "Sasl.java",
            "AMQConnectionException.java",
            "UnexpectedBodyReceivedException.java",
            "Closeable.java",
            "AMQProtocolProvider.java",
            "ContentHeaderPropertiesFactory.java",
            "Configuration.java",
            "IAMQStateListener.java",
            "SimpleProtocolDecoderOutput.java",
            "DigestSaslClientTests.java",
            "ITransport.java",
            "AssemblySettings.java",
            "pom.java",
            "IStateAwareMethodListener.java",
            "MessagePublisherBuilder.java",
            "SimpleByteBuffer.java",
            "SaslTests.java",
            "AMQTypedValue.java",
            "ConnectionTuneParameters.java",
            "SaslClient.java",
            "AMQProtocolListener.java",
            "BlockingSocketTransport.java",
            "ResourceAllocationException.java",
            "IDataBlock.java",
            "ConnectionInfo.java",
            "ConnectionSecureMethodHandler.java",
            "DigestSaslClient.java",
            "SynchronousQueue.java",
            "ConnectionTuneMethodHandler.java",
            "SaslConfigurationSectionHandler.java",
            "SaslProperties.java",
            "SlicedByteBuffer.java",
            "debug.java",
            "LinkedBlockingQueue.java",
            "MessageNotWritableException.java",
            "Connection.java",
            "CallbackHandlerRegistryTests.java",
            "InteropClientTestCase.java",
            "BasicMessageProducer.java",
            "DefaultTimeouts.java",
            "CumulativeProtocolDecoder.java",
            "PlainSaslClientTests.java",
            "ServiceRequestingClient.java",
            "AMQStateManager.java",
            "MessageConsumerBuilder.java",
            "ByteBuffer.java",
            "AMQConstant.java",
            "AMQType.java",
            "ProtocolInitiation.java",
            "AMQException.java",
            "AMQMethodBodyFactory.java",
            "ChannelMessageCreationTests.java",
            "UrlSyntaxException.java",
            "HeartbeatBodyFactory.java",
            "messagestoretool-log4j.java",
            "IMessageEncoderFactory.java",
            "IContentHeaderProperties.java",
            "AMQProtocolSession.java",
            "AcknowledgeMode.java",
            "IConnectionFactory.java",
            "ChannelCloseMethodHandler.java",
            "SimpleProtocolEncoderOutput.java",
            "QpidBytesMessage.java",
            "ISaslClientFactory.java",
            "AMQDataBlockEncoder.java",
            "IllegalStateTransitionException.java",
            "ServiceProvidingClient.java",
            "BrokerInfo.java",
            "AMQAuthenticationException.java",
            "ConnectionCloseOkHandler.java",
            "ByteBufferHexDumper.java",
            "FailoverSupport.java",
            "ISocketConnector.java",
            "IConnectionCloser.java",
            "IStreamFilter.java",
            "ExternalSaslClientTests.java",
            "AMQMessage.java",
            "IProtocolEncoderOutput.java",
            "FailoverHandler.java",
            "DefaultExchangeRegistry.java",
            "SlicedByteBufferTests.java",
            "IProtocolListener.java",
            "MessageDecoderResult.java",
            "IAMQMethodListener.java",
            "AMQMethodBody.java",
            "ConnectionRedirectMethodHandler.java",
            "DestNameExchange.java",
            "AmqBrokerInfo.java",
            "EncodingUtils.java",
            "AMQChannel.java",
            "AMQFrame.java",
            "IMessage.java",
            "SingleProtocolEncoderOutput.java",
            "AnonymousSaslClientTests.java",
            "IBytesMessage.java",
            "mstool-log4j.java",
            "ConnectionCloseMethodHandler.java",
            "AMQNoRouteException.java",
            "AbstractExchange.java",
            "SpecificMethodFrameListener.java",
            "BufferOverflowException.java",
            "PlainSaslClient.java",
            "HeartbeatBody.java",
            "ExchangeClassConstants.java",
            "IChannel.java",
            "IMessageConsumer.java",
            "IAMQCallbackHandler.java",
            "msTool.java",
            "QueueDeleteOkMethodHandler.java",
            "SaslException.java",
            "IFieldTable.java",
            "ChannelLimitReachedException.java",
            "Exchange.java",
            "CramMD5SaslClientTests.java",
            "AMQStateChangedEvent.java",
            "AMQChannelClosedException.java",
            "AMQProtocolHeaderException.java",
            "QpidException.java",
            "ByteChannel.java",
            "QpidTextMessage.java",
            "SslSocketConnector.java",
            "SimpleByteBufferAllocator.java",
            "Qpid.java",
            "AMQFrameDecodingException.java",
            "CompositeAMQDataBlock.java",
            "ProtocolWriter.java",
            "AMQTypeMap.java",
            "ConnectionStartMethodHandler.java",
            "ConnectionOpenOkMethodHandler.java",
            "UnprocessedMessage.java",
            "SslOptions.java",
            "BaseMessagingTestFixture.java",
            "QpidCompositeRollingAppender.java",
            "LinkedHashtable.java",
            "FailoverPolicy.java",
            "ExternalSaslClient.java",
            "BasicDeliverMethodHandler.java",
            "FailoverRoundRobin.java",
            "AbstractQmsMessage.java",
            "IStateListener.java",
            "BufferUnderflowException.java",
            "Main.java",
            "IoHandler.java",
            "IHeaders.java",
            "AMQUndeliveredException.java",
            "QpidConnectionInfo.java",
            "AmqpChannel.java",
            "IMessageDecoder.java",
            "BlockingSocketProcessor.java",
            "TopicPublisher.java",
            "FailoverSingleServer.java",
            "AMQDestination.java",
            "QueuePurgeOkMethodHandler.java",
            "IConnectionListener.java",
            "ProducerMultiConsumer.java",
            "AnonymousSaslClient.java",
            "log4j.java",
            "SocketConnector.java",
            "DestWildExchange.java",
            "TopicListener.java",
            "IProtocolDecoderOutput.java",
            "ContentBody.java",
            "BasicReturnMethodHandler.java",
            "ProtocolEncoderException.java",
            "IConnection.java",
            "FieldTable.java",
            "AuthenticationConfigurationSectionHandler.java",
            "IProtocolDecoder.java",
            "AssemblyInfo.java",
            "BasicConsumeMethodHandler.java",
            "ExchangeNameDefaults.java",
            "ExchangeRegistry.java",
            "BasicContentHeaderProperties.java",
            "ContentBodyFactory.java",
            "SaslConfiguration.java",
            "default.java",
            "ITextMessage.java",
            "ContentHeaderBody.java",
            "DefaultClientFactory.java",
            "IBody.java",
            "ISaslCallbackHandler.java",
            "FailoverMethod.java",
            "FailoverException.java",
            "UsernamePasswordCallbackHandler.java",
            "AMQInvalidRoutingKeyException.java",
            "AmqChannel.java",
            "MessageFactoryRegistry.java",
            "DemuxingProtocolCodecFactory.java",
            "IByteBufferAllocator.java",
            "IEncodableAMQDataBlock.java",
            "RELEASE_NOTES.java",
            "FailoverState.java",
            "ProtocolDecoderException.java",
            "FanoutExchange.java",
            "qpid-passwd.java",
            "Callbacks.java",
            "IBodyFactory.java",
            "qpid-server.java",
            "HeadersExchange.java",
            "DotnetGenerator.java",
            "NOTICE.java",
            "IByteChannel.java",
            "broker-bin.java",
            "README.java",
            "AMQMethodEvent.java",
            "AMQConnection.java",
            "AMQDataBlockDecoder.java",
            "ISaslClient.java",
            "AMQNoConsumersException.java",
            "IMessageEncoder.java",
            "MD5HMAC.java",
            "IProtocolCodecFactory.java",
            "IMessageDecoderFactory.java",
            "MessageFactoryRegistryTests.java",
            "MessageNotReadableException.java",
            "CramMD5SaslClient.java",
            "BasicPublishMethodHandler.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "TestConsumerProducerQueue.java",
            "BrokerDetailsTest.java",
            "TestCase2BasicP2P.java",
            "ChannelQueueTest.java",
            "ConnectionUrlTest.java",
            "TestLinkedHashtable.java",
            "ConnectionTest.java",
            "TestSyncConsumer.java",
            "TestClient.java",
            "SslConnectionTest.java",
            "TestAMQType.java",
            "TestCase3BasicPubSub.java",
            "FailoverTxTest.java",
            "UndeliverableTest.java",
            "TestClientFactory.java",
            "HeadersExchangeTest.java",
            "FailoverTest.java",
            "TestCase1DummyRun.java",
            "TestEncodingUtils.java"
        ]
    },
    "qpid_51166ac": {
        "bug_id": "qpid_51166ac",
        "commit": "https://github.com/apache/qpid/commit/51166ac18a7f450828b0467e72406e575c98c439",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/51166ac18a7f450828b0467e72406e575c98c439/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/management/AMQUserManagementMBean.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/management/AMQUserManagementMBean.java?ref=51166ac18a7f450828b0467e72406e575c98c439",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/management/AMQUserManagementMBean.java",
                "patch": "@@ -441,7 +441,12 @@ private void saveAccessFile()\n     private String getCurrentJMXUser()\n     {\n         AccessControlContext acc = AccessController.getContext();\n+        \n         Subject subject = Subject.getSubject(acc);\n+        if (subject == null)\n+        {\n+            return \"Unknown user, authentication Subject was null\";\n+        }\n \n         // Retrieve JMXPrincipal from Subject\n         Set<JMXPrincipal> principals = subject.getPrincipals(JMXPrincipal.class);",
                "raw_url": "https://github.com/apache/qpid/raw/51166ac18a7f450828b0467e72406e575c98c439/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/management/AMQUserManagementMBean.java",
                "sha": "32ec3a3bbc4288aa03f99b7979017af0d44d9d62",
                "status": "modified"
            },
            {
                "additions": 153,
                "blob_url": "https://github.com/apache/qpid/blob/51166ac18a7f450828b0467e72406e575c98c439/qpid/java/broker/src/test/java/org/apache/qpid/server/security/access/management/AMQUserManagementMBeanTest.java",
                "changes": 153,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/security/access/management/AMQUserManagementMBeanTest.java?ref=51166ac18a7f450828b0467e72406e575c98c439",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/security/access/management/AMQUserManagementMBeanTest.java",
                "patch": "@@ -0,0 +1,153 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.qpid.server.security.access.management;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+\n+import org.apache.qpid.server.security.auth.database.Base64MD5PasswordFilePrincipalDatabase;\n+\n+import junit.framework.TestCase;\n+\n+public class AMQUserManagementMBeanTest extends TestCase {\n+\n+\tprivate Base64MD5PasswordFilePrincipalDatabase _database;\n+\tprivate AMQUserManagementMBean _amqumMBean;\n+\n+\tprivate static final String _QPID_HOME =  System.getProperty(\"QPID_HOME\");\n+\t\n+\tprivate static final String USERNAME = \"testuser\";\n+\tprivate static final String PASSWORD = \"password\";\n+\tprivate static final String JMXRIGHTS = \"admin\";\n+\tprivate static final String TEMP_PASSWORD_FILE_NAME = \"tempPasswordFile.tmp\";\n+\tprivate static final String TEMP_JMXACCESS_FILE_NAME = \"tempJMXAccessFile.tmp\";\n+\n+\t@Override\n+\tprotected void setUp() throws Exception {\n+\n+\t\tassertNotNull(\"QPID_HOME not set\", _QPID_HOME);\n+\n+\t\t_database = new Base64MD5PasswordFilePrincipalDatabase();\n+\t\t_amqumMBean = new AMQUserManagementMBean();\n+\t}\n+\t\n+\t@Override\n+\tprotected void tearDown() throws Exception {\n+\t\t\n+\t\tFile testFile = new File(_QPID_HOME + File.separator + TEMP_JMXACCESS_FILE_NAME + \".tmp\");\n+\t\tif (testFile.exists())\n+\t\t{\n+\t\t\ttestFile.delete();\n+\t\t}\n+\t\t\n+\t\ttestFile = new File(_QPID_HOME + File.separator + TEMP_JMXACCESS_FILE_NAME + \".old\");\n+\t\tif (testFile.exists())\n+\t\t{\n+\t\t\ttestFile.delete();\n+\t\t}\n+\n+\t\ttestFile = new File(_QPID_HOME + File.separator + TEMP_PASSWORD_FILE_NAME + \".tmp\");\n+\t\tif (testFile.exists())\n+\t\t{\n+\t\t\ttestFile.delete();\n+\t\t}\n+\t\t\n+\t\ttestFile = new File(_QPID_HOME + File.separator + TEMP_PASSWORD_FILE_NAME + \".old\");\n+\t\tif (testFile.exists())\n+\t\t{\n+\t\t\ttestFile.delete();\n+\t\t}\n+\t}\n+\n+\tpublic void testDeleteUser() {\n+\t\t\n+\t\tloadTestPasswordFile();\n+\t\tloadTestAccessFile();\n+\t\t\n+\t\tboolean deleted = false;\n+\t\t\n+\t\ttry{\n+\t\t    deleted = _amqumMBean.deleteUser(USERNAME);\n+\t\t}\n+\t\tcatch(Exception e){\n+\t\t\tfail(\"Unable to delete user: \" + e.getMessage());\n+\t\t}\n+\t\t\n+\t\tassertTrue(deleted);\n+\t}\n+\t\n+\t\n+\t\n+\t// ============================ Utility methods =========================\n+\t\n+\tprivate void loadTestPasswordFile()\n+    {\n+\t\ttry{\n+\t\t\tFile tempPasswordFile = new File(_QPID_HOME + File.separator + TEMP_PASSWORD_FILE_NAME);\n+\t\t\tif (tempPasswordFile.exists())\n+\t\t\t{\n+\t\t\t\ttempPasswordFile.delete();\n+\t\t\t}\n+\t\t\ttempPasswordFile.deleteOnExit();\n+\n+\t\t\tBufferedWriter passwordWriter = new BufferedWriter(new FileWriter(tempPasswordFile));\n+\t\t\tpasswordWriter.write(USERNAME + \":\" + PASSWORD);\n+\t\t\tpasswordWriter.newLine();\n+\t\t\tpasswordWriter.flush();\n+\n+\n+\t\t\t_database.setPasswordFile(tempPasswordFile.toString());\n+\t\t\t_amqumMBean.setPrincipalDatabase(_database);\n+\t\t}\n+\t\tcatch (IOException e)\n+\t\t{\n+\t\t\tfail(\"Unable to create test password file: \" + e.getMessage());\n+\t\t}\n+    }\n+\n+\tprivate void loadTestAccessFile()\n+    {\n+\t\ttry{\n+\t\t\tFile tempAccessFile = new File(_QPID_HOME + File.separator + TEMP_JMXACCESS_FILE_NAME);\n+\t\t\tif (tempAccessFile.exists())\n+\t\t\t{\n+\t\t\t\ttempAccessFile.delete();\n+\t\t\t}\n+\t\t\ttempAccessFile.deleteOnExit();\n+\n+\t\t\tBufferedWriter accessWriter = new BufferedWriter(new FileWriter(tempAccessFile));\n+\t\t\taccessWriter.write(USERNAME + \"=\" + JMXRIGHTS);\n+\t\t\taccessWriter.newLine();\n+\t\t\taccessWriter.flush();\n+\n+\n+\t\t\t_amqumMBean.setAccessFile(tempAccessFile.toString());\n+\t\t}\t\n+\t\tcatch (Exception e)\n+\t\t{\n+\t\t\tfail(\"Unable to create test access file: \" + e.getMessage());\n+\t\t}\n+    }\n+\t\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/51166ac18a7f450828b0467e72406e575c98c439/qpid/java/broker/src/test/java/org/apache/qpid/server/security/access/management/AMQUserManagementMBeanTest.java",
                "sha": "ab001d0b9a85f0aba225f8a5087e542c7e196c1b",
                "status": "added"
            }
        ],
        "message": "QPID-1469: Fix NullPointerException, add test for deleteUser which would expose this.\n\nPatch from gemmellr@dcs.gla.ac.uk\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/qpid/trunk@724787 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/5b0299abeef865d74ebf827bedd0a26f4d6d8ab1",
        "patched_files": [
            "AMQUserManagementMBean.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "AMQUserManagementMBeanTest.java"
        ]
    },
    "qpid_52e81e7": {
        "bug_id": "qpid_52e81e7",
        "commit": "https://github.com/apache/qpid/commit/52e81e74a91433167ebc4c6ca22c088d16d9fbbd",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/qpid/blob/52e81e74a91433167ebc4c6ca22c088d16d9fbbd/qpid/java/client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java?ref=52e81e74a91433167ebc4c6ca22c088d16d9fbbd",
                "deletions": 4,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java",
                "patch": "@@ -148,11 +148,15 @@ public void onClosed(ErrorCode errorCode, String reason, Throwable t)\n         {\n             _logger.debug(\"Received a connection close from the broker: Error code : \" + errorCode.getCode());\n         }\n-        JMSException ex = new JMSException(reason,String.valueOf(errorCode.getCode()));\n-        if (t != null)\n+        if (_conn._exceptionListener != null)\n         {\n-            ex.initCause(t);\n+            JMSException ex = new JMSException(reason,String.valueOf(errorCode.getCode()));\n+            if (t != null)\n+            {\n+                ex.initCause(t);\n+            }\n+\n+            _conn._exceptionListener.onException(ex);\n         }\n-        _conn._exceptionListener.onException(ex);\n     }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/52e81e74a91433167ebc4c6ca22c088d16d9fbbd/qpid/java/client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java",
                "sha": "bf1ed494924fc111edc5ef39e8919e939869b77e",
                "status": "modified"
            },
            {
                "additions": 62,
                "blob_url": "https://github.com/apache/qpid/blob/52e81e74a91433167ebc4c6ca22c088d16d9fbbd/qpid/java/client/src/test/java/org/apache/qpid/test/unit/client/connection/ExceptionListenerTest.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/test/java/org/apache/qpid/test/unit/client/connection/ExceptionListenerTest.java?ref=52e81e74a91433167ebc4c6ca22c088d16d9fbbd",
                "deletions": 0,
                "filename": "qpid/java/client/src/test/java/org/apache/qpid/test/unit/client/connection/ExceptionListenerTest.java",
                "patch": "@@ -0,0 +1,62 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.test.unit.client.connection;\n+\n+import org.apache.qpid.testutil.QpidTestCase;\n+\n+import org.apache.qpid.util.concurrent.Condition;\n+\n+import javax.jms.Connection;\n+import javax.jms.ExceptionListener;\n+import javax.jms.JMSException;\n+\n+/**\n+ * ExceptionListenerTest\n+ *\n+ */\n+\n+public class ExceptionListenerTest extends QpidTestCase\n+{\n+\n+    public void testBrokerDeath() throws Exception\n+    {\n+        Connection conn = getConnection(\"guest\", \"guest\");\n+\n+        conn.start();\n+\n+        final Condition fired = new Condition();\n+        conn.setExceptionListener(new ExceptionListener()\n+        {\n+            public void onException(JMSException e)\n+            {\n+                fired.set();\n+            }\n+        });\n+\n+        killBroker();\n+\n+        if (!fired.get(3000))\n+        {\n+            fail(\"exception listener was not fired\");\n+        }\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/52e81e74a91433167ebc4c6ca22c088d16d9fbbd/qpid/java/client/src/test/java/org/apache/qpid/test/unit/client/connection/ExceptionListenerTest.java",
                "sha": "20461415d1c05853c1638a01b64f85263a24cc8a",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/52e81e74a91433167ebc4c6ca22c088d16d9fbbd/qpid/java/client/src/test/java/org/apache/qpid/testutil/QpidTestCase.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/test/java/org/apache/qpid/testutil/QpidTestCase.java?ref=52e81e74a91433167ebc4c6ca22c088d16d9fbbd",
                "deletions": 1,
                "filename": "qpid/java/client/src/test/java/org/apache/qpid/testutil/QpidTestCase.java",
                "patch": "@@ -122,7 +122,7 @@ public void killBroker()\n             _brokerProcess.destroy();\n             _brokerProcess = null;\n         }\n-        else   if ( ! _shel.equals(EXT_BROKER))\n+        else   if ( _shel.equals(BROKER_VM))\n         {\n             TransportConnection.killAllVMBrokers();\n         }",
                "raw_url": "https://github.com/apache/qpid/raw/52e81e74a91433167ebc4c6ca22c088d16d9fbbd/qpid/java/client/src/test/java/org/apache/qpid/testutil/QpidTestCase.java",
                "sha": "0ccb50dda3abfd0279656b7eda1e679ad86f6e81",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/qpid/blob/52e81e74a91433167ebc4c6ca22c088d16d9fbbd/qpid/java/common/src/main/java/org/apache/qpid/util/concurrent/Condition.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/util/concurrent/Condition.java?ref=52e81e74a91433167ebc4c6ca22c088d16d9fbbd",
                "deletions": 0,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/util/concurrent/Condition.java",
                "patch": "@@ -0,0 +1,50 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.util.concurrent;\n+\n+\n+/**\n+ * Condition\n+ *\n+ */\n+\n+public class Condition\n+{\n+\n+    private boolean value = false;\n+\n+    public synchronized void set()\n+    {\n+        value = true;\n+        notifyAll();\n+    }\n+\n+    public synchronized boolean get(long timeout) throws InterruptedException\n+    {\n+        if (!value)\n+        {\n+            wait(timeout);\n+        }\n+\n+        return value;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/52e81e74a91433167ebc4c6ca22c088d16d9fbbd/qpid/java/common/src/main/java/org/apache/qpid/util/concurrent/Condition.java",
                "sha": "bbd1722677491d96478269021afd9cf8244b8a86",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/52e81e74a91433167ebc4c6ca22c088d16d9fbbd/qpid/java/common/src/test/java/org/apache/qpidity/transport/ConnectionTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/test/java/org/apache/qpidity/transport/ConnectionTest.java?ref=52e81e74a91433167ebc4c6ca22c088d16d9fbbd",
                "deletions": 21,
                "filename": "qpid/java/common/src/test/java/org/apache/qpidity/transport/ConnectionTest.java",
                "patch": "@@ -22,6 +22,8 @@\n \n import org.apache.mina.util.AvailablePortFinder;\n \n+import org.apache.qpid.util.concurrent.Condition;\n+\n import org.apache.qpidity.transport.network.mina.MinaHandler;\n import org.apache.qpidity.transport.util.Logger;\n \n@@ -63,27 +65,6 @@ public void closed() {}\n         MinaHandler.accept(\"0.0.0.0\", port, server);\n     }\n \n-    private class Condition\n-    {\n-        private boolean value = false;\n-\n-        public synchronized void set()\n-        {\n-            value = true;\n-            notifyAll();\n-        }\n-\n-        public synchronized boolean get(long timeout) throws InterruptedException\n-        {\n-            if (!value)\n-            {\n-                wait(timeout);\n-            }\n-\n-            return value;\n-        }\n-    }\n-\n     private Connection connect(final Condition closed)\n     {\n         Connection conn = MinaHandler.connect(\"0.0.0.0\", port, new ConnectionDelegate()",
                "raw_url": "https://github.com/apache/qpid/raw/52e81e74a91433167ebc4c6ca22c088d16d9fbbd/qpid/java/common/src/test/java/org/apache/qpidity/transport/ConnectionTest.java",
                "sha": "55d53ebaae07ce2dace8d9e1dda60a5fb88ee7aa",
                "status": "modified"
            }
        ],
        "message": "added test for exception listener; fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/qpid/trunk@619538 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/4bc30db6cb860f83d0ca685c573277c09fd63567",
        "patched_files": [
            "AMQConnectionDelegate_0_10.java",
            "QpidTestCase.java",
            "Connection.java",
            "Condition.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "ExceptionListenerTest.java",
            "ConnectionTest.java"
        ]
    },
    "qpid_5ec191a": {
        "bug_id": "qpid_5ec191a",
        "commit": "https://github.com/apache/qpid/commit/5ec191a43e6fb68d483f866667e86cd6196aea46",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/qpid/blob/5ec191a43e6fb68d483f866667e86cd6196aea46/qpid/java/broker-plugins/jmx/src/main/java/org/apache/qpid/server/jmx/mbeans/ExchangeMBean.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-plugins/jmx/src/main/java/org/apache/qpid/server/jmx/mbeans/ExchangeMBean.java?ref=5ec191a43e6fb68d483f866667e86cd6196aea46",
                "deletions": 27,
                "filename": "qpid/java/broker-plugins/jmx/src/main/java/org/apache/qpid/server/jmx/mbeans/ExchangeMBean.java",
                "patch": "@@ -22,8 +22,6 @@\n package org.apache.qpid.server.jmx.mbeans;\n \n import org.apache.qpid.management.common.mbeans.ManagedExchange;\n-import org.apache.qpid.management.common.mbeans.ManagedQueue;\n-import org.apache.qpid.management.common.mbeans.annotations.MBeanOperationParameter;\n import org.apache.qpid.server.jmx.AMQManagedObject;\n import org.apache.qpid.server.jmx.ManagedObject;\n import org.apache.qpid.server.model.Binding;\n@@ -35,6 +33,7 @@\n import javax.management.JMException;\n import javax.management.MalformedObjectNameException;\n import javax.management.ObjectName;\n+import javax.management.OperationsException;\n import javax.management.openmbean.ArrayType;\n import javax.management.openmbean.CompositeData;\n import javax.management.openmbean.CompositeDataSupport;\n@@ -56,6 +55,9 @@\n public class ExchangeMBean extends AMQManagedObject implements ManagedExchange\n {\n \n+    public static final String FANOUT_EXCHANGE_TYPE = \"fanout\";\n+    public static final String HEADERS_EXCHANGE_TYPE  = \"headers\";\n+\n     private static final String[] TABULAR_UNIQUE_INDEX_ARRAY =\n             TABULAR_UNIQUE_INDEX.toArray(new String[TABULAR_UNIQUE_INDEX.size()]);\n \n@@ -79,7 +81,6 @@\n             HEADERS_COMPOSITE_ITEM_DESC.toArray(new String[HEADERS_COMPOSITE_ITEM_DESC.size()]);\n     private static final  String[] HEADERS_TABULAR_UNIQUE_INDEX_ARRAY =\n             HEADERS_TABULAR_UNIQUE_INDEX.toArray(new String[HEADERS_TABULAR_UNIQUE_INDEX.size()]);\n-    public static final   String   HEADERS_EXCHANGE_TYPE              = \"headers\";\n \n     static\n     {\n@@ -179,7 +180,6 @@ public TabularData bindings() throws IOException, JMException\n         }\n     }\n \n-\n     private TabularData getHeadersBindings(Collection<Binding> bindings) throws OpenDataException\n     {\n         TabularType bindinglistDataType =\n@@ -234,7 +234,7 @@ private TabularData getNonHeadersBindings(Collection<Binding> bindings) throws O\n \n         for (Binding binding : bindings)\n         {\n-            String key = \"fanout\".equals(_exchange.getExchangeType()) ? \"*\" : binding.getName();\n+            String key = FANOUT_EXCHANGE_TYPE.equals(_exchange.getExchangeType()) ? \"*\" : binding.getName();\n             List<String> queueList = bindingMap.get(key);\n             if(queueList == null)\n             {\n@@ -269,7 +269,7 @@ public void createNewBinding(String queueName, String binding) throws JMExceptio\n                 final String[] keyAndValue = bindings[i].split(\"=\");\n                 if (keyAndValue == null || keyAndValue.length == 0 || keyAndValue.length > 2 || keyAndValue[0].length() == 0)\n                 {\n-                    throw new JMException(\"Format for headers binding should be \\\"<attribute1>=<value1>,<attribute2>=<value2>\\\" \");\n+                    throw new JMException(\"Format for headers binding should be \\\"<attribute1>=<value1>,<attribute2>=<value2>\\\"\");\n                 }\n \n                 if(keyAndValue.length == 1)\n@@ -284,40 +284,30 @@ public void createNewBinding(String queueName, String binding) throws JMExceptio\n             }\n         }\n \n-        Queue queue = null;\n-        VirtualHost vhost = _exchange.getParent(VirtualHost.class);\n-        for(Queue aQueue : vhost.getQueues())\n-        {\n-            if(aQueue.getName().equals(queueName))\n-            {\n-                queue = aQueue;\n-                break;\n-            }\n-        }\n+        VirtualHost virtualHost = _exchange.getParent(VirtualHost.class);\n+        Queue queue = MBeanUtils.findQueueFromQueueName(virtualHost, queueName);\n         _exchange.createBinding(binding, queue, arguments, Collections.EMPTY_MAP);\n     }\n \n     public void removeBinding(String queueName, String bindingKey)\n             throws IOException, JMException\n     {\n-        Queue queue = null;\n-        VirtualHost vhost = _exchange.getParent(VirtualHost.class);\n-        for(Queue aQueue : vhost.getQueues())\n-        {\n-            if(aQueue.getName().equals(queueName))\n-            {\n-                queue = aQueue;\n-                break;\n-            }\n-        }\n+        VirtualHost virtualHost = _exchange.getParent(VirtualHost.class);\n+        Queue queue = MBeanUtils.findQueueFromQueueName(virtualHost, queueName);;\n \n+        boolean deleted = false;\n         for(Binding binding : _exchange.getBindings())\n         {\n             if(queue.equals(binding.getParent(Queue.class)) && bindingKey.equals(binding.getName()))\n             {\n                 binding.delete();\n+                deleted = true;\n             }\n         }\n-        \n+\n+        if (!deleted)\n+        {\n+            throw new OperationsException(\"No such binding \\\"\" + bindingKey + \"\\\" on queue \\\"\" + queueName + \"\\\"\");\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/5ec191a43e6fb68d483f866667e86cd6196aea46/qpid/java/broker-plugins/jmx/src/main/java/org/apache/qpid/server/jmx/mbeans/ExchangeMBean.java",
                "sha": "56802d04033a1cfdf53597e9094fe18aec8d2370",
                "status": "modified"
            },
            {
                "additions": 234,
                "blob_url": "https://github.com/apache/qpid/blob/5ec191a43e6fb68d483f866667e86cd6196aea46/qpid/java/broker-plugins/jmx/src/test/java/org/apache/qpid/server/jmx/mbeans/ExchangeMBeanTest.java",
                "changes": 234,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-plugins/jmx/src/test/java/org/apache/qpid/server/jmx/mbeans/ExchangeMBeanTest.java?ref=5ec191a43e6fb68d483f866667e86cd6196aea46",
                "deletions": 0,
                "filename": "qpid/java/broker-plugins/jmx/src/test/java/org/apache/qpid/server/jmx/mbeans/ExchangeMBeanTest.java",
                "patch": "@@ -0,0 +1,234 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.qpid.server.jmx.mbeans;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Matchers.isNull;\n+import static org.mockito.Matchers.argThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.anyMap;\n+\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import javax.management.JMException;\n+import javax.management.ListenerNotFoundException;\n+import javax.management.Notification;\n+import javax.management.NotificationListener;\n+import javax.management.OperationsException;\n+\n+import org.apache.qpid.server.jmx.ManagedObjectRegistry;\n+import org.apache.qpid.server.model.Binding;\n+import org.apache.qpid.server.model.Exchange;\n+import org.apache.qpid.server.model.LifetimePolicy;\n+import org.apache.qpid.server.model.Queue;\n+import org.apache.qpid.server.model.Statistics;\n+import org.apache.qpid.server.model.VirtualHost;\n+import org.apache.qpid.server.queue.NotificationCheck;\n+import org.mockito.ArgumentMatcher;\n+\n+import junit.framework.TestCase;\n+\n+public class ExchangeMBeanTest extends TestCase\n+{\n+    private static final String EXCHANGE_NAME = \"EXCHANGE_NAME\";\n+    private static final String EXCHANGE_TYPE = \"EXCHANGE_TYPE\";\n+    private static final String QUEUE1_NAME = \"QUEUE1_NAME\";\n+    private static final String QUEUE2_NAME = \"QUEUE2_NAME\";\n+    private static final String BINDING1 = \"BINDING1\";\n+    private static final String BINDING2 = \"BINDING2\";\n+\n+    private Exchange _mockExchange;\n+    private VirtualHostMBean _mockVirtualHostMBean;\n+    private ManagedObjectRegistry _mockManagedObjectRegistry;\n+    private ExchangeMBean _exchangeMBean;\n+    private Queue _mockQueue1;\n+    private Queue _mockQueue2;\n+    private Exchange _mockHeadersExchange;\n+\n+    @Override\n+    protected void setUp() throws Exception\n+    {\n+        _mockExchange = mock(Exchange.class);\n+        when(_mockExchange.getName()).thenReturn(EXCHANGE_NAME);\n+        when(_mockExchange.getExchangeType()).thenReturn(EXCHANGE_TYPE);\n+        _mockVirtualHostMBean = mock(VirtualHostMBean.class);\n+\n+        _mockManagedObjectRegistry = mock(ManagedObjectRegistry.class);\n+        when(_mockVirtualHostMBean.getRegistry()).thenReturn(_mockManagedObjectRegistry);\n+\n+        _mockQueue1 = createMockQueue(QUEUE1_NAME);\n+        _mockQueue2 = createMockQueue(QUEUE2_NAME);\n+\n+        VirtualHost mockVirtualHost = mock(VirtualHost.class);\n+        when(mockVirtualHost.getQueues()).thenReturn(Arrays.asList(new Queue[] {_mockQueue1, _mockQueue2}));\n+        when(_mockExchange.getParent(VirtualHost.class)).thenReturn(mockVirtualHost);\n+\n+        _exchangeMBean = new ExchangeMBean(_mockExchange, _mockVirtualHostMBean);\n+\n+        _mockHeadersExchange = mock(Exchange.class);\n+        when(_mockHeadersExchange.getExchangeType()).thenReturn(ExchangeMBean.HEADERS_EXCHANGE_TYPE);\n+        when(_mockHeadersExchange.getParent(VirtualHost.class)).thenReturn(mockVirtualHost);\n+\n+    }\n+\n+    public void testExchangeName()\n+    {\n+        assertEquals(EXCHANGE_NAME, _exchangeMBean.getName());\n+    }\n+\n+    public void testExchangeType()\n+    {\n+        assertEquals(EXCHANGE_TYPE, _exchangeMBean.getExchangeType());\n+    }\n+\n+    public void testNonHeadersExchangeCreateNewBinding() throws Exception\n+    {\n+        _exchangeMBean.createNewBinding(QUEUE1_NAME, BINDING1);\n+        verify(_mockExchange).createBinding(BINDING1, _mockQueue1, Collections.EMPTY_MAP, Collections.EMPTY_MAP);\n+    }\n+\n+    public void testCreateNewBindingWhereQueueIsUnknown() throws Exception\n+    {\n+        try\n+        {\n+            _exchangeMBean.createNewBinding(\"unknown\", BINDING1);\n+        }\n+        catch (OperationsException oe)\n+        {\n+            // PASS\n+            assertEquals(\"No such queue \\\"unknown\\\"\", oe.getMessage());\n+        }\n+        verify(_mockExchange, never()).createBinding(anyString(), any(Queue.class), anyMap(), anyMap());\n+    }\n+\n+    public void testRemoveBinding() throws Exception\n+    {\n+        Binding mockBinding1 = createBindingOnQueue(BINDING1, _mockQueue1);\n+        Binding mockBinding2 = createBindingOnQueue(BINDING2, _mockQueue1);\n+        when(_mockExchange.getBindings()).thenReturn(Arrays.asList(new Binding[] {mockBinding1, mockBinding2}));\n+\n+        _exchangeMBean.removeBinding(QUEUE1_NAME, BINDING1);\n+        verify(mockBinding1).delete();\n+    }\n+\n+    public void testRemoveBindingWhereQueueIsUnknown() throws Exception\n+    {\n+        Binding mockBinding1 = createBindingOnQueue(BINDING1, _mockQueue1);\n+        when(_mockExchange.getBindings()).thenReturn(Arrays.asList(new Binding[] {mockBinding1}));\n+\n+        try\n+        {\n+            _exchangeMBean.removeBinding(\"unknown\", BINDING1);\n+            fail(\"Exception not thrown\");\n+        }\n+        catch (OperationsException oe)\n+        {\n+            // PASS\n+            assertEquals(\"No such queue \\\"unknown\\\"\", oe.getMessage());\n+        }\n+        verify(mockBinding1, never()).delete();\n+    }\n+\n+    public void testRemoveBindingWhereBindingNameIsUnknown() throws Exception\n+    {\n+        Binding mockBinding1 = createBindingOnQueue(BINDING1, _mockQueue1);\n+        when(_mockExchange.getBindings()).thenReturn(Arrays.asList(new Binding[] {mockBinding1}));\n+\n+        try\n+        {\n+            _exchangeMBean.removeBinding(QUEUE1_NAME, \"unknown\");\n+            fail(\"Exception not thrown\");\n+        }\n+        catch (OperationsException oe)\n+        {\n+            // PASS\n+            assertEquals(\"No such binding \\\"unknown\\\" on queue \\\"\" + QUEUE1_NAME + \"\\\"\", oe.getMessage());\n+        }\n+        verify(mockBinding1, never()).delete();\n+    }\n+\n+    public void testHeadersExchangeCreateNewBinding() throws Exception\n+    {\n+        String binding = \"key1=binding1,key2=binding2\";\n+        Map<String, Object> expectedBindingMap = new HashMap<String, Object>()\n+        {{\n+            put(\"key1\", \"binding1\");\n+            put(\"key2\", \"binding2\");\n+        }};\n+        _exchangeMBean = new ExchangeMBean(_mockHeadersExchange, _mockVirtualHostMBean);\n+\n+        _exchangeMBean.createNewBinding(QUEUE1_NAME, binding);\n+        verify(_mockHeadersExchange).createBinding(binding, _mockQueue1, expectedBindingMap, Collections.EMPTY_MAP);\n+    }\n+\n+    public void testHeadersExchangeCreateNewBindingWithFieldWithoutValue() throws Exception\n+    {\n+        String binding = \"key1=binding1,key2=\";\n+        Map<String, Object> expectedBindingMap = new HashMap<String, Object>()\n+        {{\n+            put(\"key1\", \"binding1\");\n+            put(\"key2\", \"\");\n+        }};\n+        _exchangeMBean = new ExchangeMBean(_mockHeadersExchange, _mockVirtualHostMBean);\n+\n+        _exchangeMBean.createNewBinding(QUEUE1_NAME, binding);\n+        verify(_mockHeadersExchange).createBinding(binding, _mockQueue1, expectedBindingMap, Collections.EMPTY_MAP);\n+    }\n+\n+    public void testHeadersExchangeCreateNewBindingMalformed() throws Exception\n+    {\n+        String binding = \"=binding1,=\";\n+       _exchangeMBean = new ExchangeMBean(_mockHeadersExchange, _mockVirtualHostMBean);\n+\n+       try\n+       {\n+           _exchangeMBean.createNewBinding(QUEUE1_NAME, binding);\n+           fail(\"Exception not thrown\");\n+       }\n+       catch (JMException e)\n+       {\n+           assertEquals(\"Format for headers binding should be \\\"<attribute1>=<value1>,<attribute2>=<value2>\\\"\", e.getMessage());\n+       }\n+    }\n+\n+    private Binding createBindingOnQueue(String bindingName, Queue queue)\n+    {\n+        Binding mockBinding = mock(Binding.class);\n+        when(mockBinding.getParent(Queue.class)).thenReturn(queue);\n+        when(mockBinding.getName()).thenReturn(bindingName);\n+        return mockBinding;\n+    }\n+\n+    private Queue createMockQueue(String queueName)\n+    {\n+        Queue mockQueue = mock(Queue.class);\n+        when(mockQueue.getName()).thenReturn(queueName);\n+        return mockQueue;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/5ec191a43e6fb68d483f866667e86cd6196aea46/qpid/java/broker-plugins/jmx/src/test/java/org/apache/qpid/server/jmx/mbeans/ExchangeMBeanTest.java",
                "sha": "e350f80a25386d80048b38e99eeb80fa0942f6ad",
                "status": "added"
            }
        ],
        "message": "QPID-4093: Prevent NullPointerException from ExchangeMBean when target queue does not exist\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@1358216 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/7d49d33cdb51a98cd7621c3350f543ec3e10fc15",
        "patched_files": [
            "ExchangeMBean.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "ExchangeMBeanTest.java"
        ]
    },
    "qpid_67d7f2e": {
        "bug_id": "qpid_67d7f2e",
        "commit": "https://github.com/apache/qpid/commit/67d7f2e7951a804766a878267b37d38d0e83dc4c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/67d7f2e7951a804766a878267b37d38d0e83dc4c/qpid/java/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/external/ExternalSaslServer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/external/ExternalSaslServer.java?ref=67d7f2e7951a804766a878267b37d38d0e83dc4c",
                "deletions": 2,
                "filename": "qpid/java/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/external/ExternalSaslServer.java",
                "patch": "@@ -36,7 +36,7 @@\n \n     private boolean _complete = false;\n     private final Principal _externalPrincipal;\n-    private boolean _useFullDN = false;\n+    private final boolean _useFullDN;\n \n     public ExternalSaslServer(Principal externalPrincipal, boolean useFullDN)\n     {\n@@ -62,7 +62,7 @@ public boolean isComplete()\n \n     public String getAuthorizationID()\n     {\n-        return getAuthenticatedPrincipal().getName();\n+        return getAuthenticatedPrincipal() == null ? null : getAuthenticatedPrincipal().getName();\n     }\n \n     public byte[] unwrap(byte[] incoming, int offset, int len) throws SaslException",
                "raw_url": "https://github.com/apache/qpid/raw/67d7f2e7951a804766a878267b37d38d0e83dc4c/qpid/java/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/external/ExternalSaslServer.java",
                "sha": "5f5ee08c214728fc1c2965c190f7ae15301e462e",
                "status": "modified"
            },
            {
                "additions": 103,
                "blob_url": "https://github.com/apache/qpid/blob/67d7f2e7951a804766a878267b37d38d0e83dc4c/qpid/java/broker-core/src/test/java/org/apache/qpid/server/security/auth/manager/ExternalAuthenticationManagerTest.java",
                "changes": 196,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/test/java/org/apache/qpid/server/security/auth/manager/ExternalAuthenticationManagerTest.java?ref=67d7f2e7951a804766a878267b37d38d0e83dc4c",
                "deletions": 93,
                "filename": "qpid/java/broker-core/src/test/java/org/apache/qpid/server/security/auth/manager/ExternalAuthenticationManagerTest.java",
                "patch": "@@ -43,141 +43,151 @@ public void testCreateSaslServer() throws Exception\n         createSaslServerTestImpl(_manager);\n     }\n \n-    public void testCreateSaslServerUsingFullDN() throws Exception\n+    public void testAuthenticatePrincipalNull_CausesAuthError() throws Exception\n     {\n-        createSaslServerTestImpl(_managerUsingFullDN);\n-    }\n-\n-    public void createSaslServerTestImpl(AuthenticationManager manager) throws Exception\n-    {\n-        SaslServer server = manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n-\n-        assertEquals(\"Sasl Server mechanism name is not as expected\", \"EXTERNAL\", server.getMechanismName());\n-\n-        try\n-        {\n-            server = manager.createSaslServer(\"PLAIN\", \"example.example.com\", null);\n-            fail(\"Expected creating SaslServer with incorrect mechanism to throw an exception\");\n-        }\n-        catch (SaslException e)\n-        {\n-            // pass\n-        }\n-    }\n-\n-    /**\n-     * Test behaviour of the authentication when the useFullDN attribute is set true\n-     * and the username is taken directly as the externally supplied Principal\n-     */\n-    public void testAuthenticateWithFullDN() throws Exception\n-    {\n-        X500Principal principal = new X500Principal(\"CN=person, DC=example, DC=com\");\n-        SaslServer saslServer = _managerUsingFullDN.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n-\n-        AuthenticationResult result = _managerUsingFullDN.authenticate(saslServer, new byte[0]);\n-        assertNotNull(result);\n-        assertEquals(\"Expected authentication to be successful\",\n-                     AuthenticationResult.AuthenticationStatus.SUCCESS,\n-                     result.getStatus());\n-\n-        assertOnlyContainsWrapped(principal, result.getPrincipals());\n-\n-        saslServer = _managerUsingFullDN.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n-        result = _managerUsingFullDN.authenticate(saslServer, new byte[0]);\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n \n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be unsuccessful\",\n-                     AuthenticationResult.AuthenticationStatus.ERROR,\n-                     result.getStatus());\n+                AuthenticationResult.AuthenticationStatus.ERROR,\n+                result.getStatus());\n+        assertNull(saslServer.getAuthorizationID());\n     }\n \n-    /**\n-     * Test behaviour of the authentication when parsing the username from\n-     * the Principals DN as <CN>@<DC1>.<DC2>.<DC3>....<DCN>\n-     */\n-    public void testAuthenticateWithUsernameBasedOnCNAndDC() throws Exception\n+    public void testAuthenticatePrincipalNoCn_CausesAuthError() throws Exception\n     {\n-        X500Principal principal;\n-        SaslServer saslServer;\n-        AuthenticationResult result;\n-        UsernamePrincipal expectedPrincipal;\n-\n-        // DN contains only CN\n-        principal = new X500Principal(\"CN=person\");\n-        expectedPrincipal = new UsernamePrincipal(\"person\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n-\n-        result = _manager.authenticate(saslServer, new byte[0]);\n-        assertNotNull(result);\n-        assertEquals(\"Expected authentication to be successful\",\n-                     AuthenticationResult.AuthenticationStatus.SUCCESS,\n-                     result.getStatus());\n-        assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n-\n-        // Null principal\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n-        result = _manager.authenticate(saslServer, new byte[0]);\n+        X500Principal principal = new X500Principal(\"DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n \n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be unsuccessful\",\n                 AuthenticationResult.AuthenticationStatus.ERROR,\n                 result.getStatus());\n+        assertNull(saslServer.getAuthorizationID());\n+    }\n \n-        // DN doesn't contain CN\n-        principal = new X500Principal(\"DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n-        result = _manager.authenticate(saslServer, new byte[0]);\n+    public void testAuthenticatePrincipalEmptyCn_CausesAuthError() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=, DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n \n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be unsuccessful\",\n                 AuthenticationResult.AuthenticationStatus.ERROR,\n                 result.getStatus());\n+        assertNull(saslServer.getAuthorizationID());\n+    }\n \n-        // DN contains empty CN\n-        principal = new X500Principal(\"CN=, DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n-        result = _manager.authenticate(saslServer, new byte[0]);\n+    public void testAuthenticatePrincipalCnOnly() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person\");\n+        UsernamePrincipal expectedPrincipal = new UsernamePrincipal(\"person\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n \n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n         assertNotNull(result);\n-        assertEquals(\"Expected authentication to be unsuccessful\",\n-                AuthenticationResult.AuthenticationStatus.ERROR,\n-                result.getStatus());\n+        assertEquals(\"Expected authentication to be successful\",\n+                     AuthenticationResult.AuthenticationStatus.SUCCESS,\n+                     result.getStatus());\n+        assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n+        assertEquals(\"person\", saslServer.getAuthorizationID());\n+    }\n \n-        // DN contains CN and DC\n-        principal = new X500Principal(\"CN=person, DC=example, DC=com\");\n-        expectedPrincipal = new UsernamePrincipal(\"person@example.com\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+    public void testAuthenticatePrinicpalCnAndDc() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person, DC=example, DC=com\");\n+        UsernamePrincipal expectedPrincipal = new UsernamePrincipal(\"person@example.com\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n \n-        result = _manager.authenticate(saslServer, new byte[0]);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be successful\",\n                 AuthenticationResult.AuthenticationStatus.SUCCESS,\n                 result.getStatus());\n         assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n+        assertEquals(\"person@example.com\", saslServer.getAuthorizationID());\n+    }\n \n-        // DN contains CN and DC and other components\n-        principal = new X500Principal(\"CN=person, DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n-        expectedPrincipal = new UsernamePrincipal(\"person@example.com\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+    public void testAuthenticatePrinicpalCnDc_OtherComponentsIgnored() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person, DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n+        UsernamePrincipal expectedPrincipal = new UsernamePrincipal(\"person@example.com\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n \n-        result = _manager.authenticate(saslServer, new byte[0]);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be successful\",\n                 AuthenticationResult.AuthenticationStatus.SUCCESS,\n                 result.getStatus());\n         assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n+        assertEquals(\"person@example.com\", saslServer.getAuthorizationID());\n+    }\n \n-        // DN contains CN and DC and other components\n-        principal = new X500Principal(\"CN=person, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n-        expectedPrincipal = new UsernamePrincipal(\"person\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+    public void testAuthenticatePrincipalCn_OtherComponentsIgnored() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n+        UsernamePrincipal expectedPrincipal = new UsernamePrincipal(\"person\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n \n-        result = _manager.authenticate(saslServer, new byte[0]);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be successful\",\n                 AuthenticationResult.AuthenticationStatus.SUCCESS,\n                 result.getStatus());\n         assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n+        assertEquals(\"person\", saslServer.getAuthorizationID());\n+    }\n+\n+    public void testFullDNMode_CreateSaslServer() throws Exception\n+    {\n+        createSaslServerTestImpl(_managerUsingFullDN);\n+    }\n+\n+    public void testFullDNMode_Authenticate() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person, DC=example, DC=com\");\n+        SaslServer saslServer = _managerUsingFullDN.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+\n+        AuthenticationResult result = _managerUsingFullDN.authenticate(saslServer, new byte[0]);\n+        assertNotNull(result);\n+        assertEquals(\"Expected authentication to be successful\",\n+                     AuthenticationResult.AuthenticationStatus.SUCCESS,\n+                     result.getStatus());\n+\n+        assertOnlyContainsWrapped(principal, result.getPrincipals());\n+        assertEquals(\"CN=person,DC=example,DC=com\", saslServer.getAuthorizationID());\n+    }\n+\n+    public void testFullDNMode_AuthenticatePrincipalNull_CausesAuthError() throws Exception\n+    {\n+        SaslServer saslServer = _managerUsingFullDN.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n+        AuthenticationResult result = _managerUsingFullDN.authenticate(saslServer, new byte[0]);\n+\n+        assertNotNull(result);\n+        assertEquals(\"Expected authentication to be unsuccessful\",\n+                     AuthenticationResult.AuthenticationStatus.ERROR,\n+                     result.getStatus());\n+        assertNull(saslServer.getAuthorizationID());\n+    }\n+\n+    private void createSaslServerTestImpl(AuthenticationManager manager) throws Exception\n+    {\n+        SaslServer server = manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n+\n+        assertEquals(\"Sasl Server mechanism name is not as expected\", \"EXTERNAL\", server.getMechanismName());\n+\n+        try\n+        {\n+            server = manager.createSaslServer(\"PLAIN\", \"example.example.com\", null);\n+            fail(\"Expected creating SaslServer with incorrect mechanism to throw an exception\");\n+        }\n+        catch (SaslException e)\n+        {\n+            // pass\n+        }\n     }\n \n }",
                "raw_url": "https://github.com/apache/qpid/raw/67d7f2e7951a804766a878267b37d38d0e83dc4c/qpid/java/broker-core/src/test/java/org/apache/qpid/server/security/auth/manager/ExternalAuthenticationManagerTest.java",
                "sha": "586bff5683c1411d392449b17aae291135f1f0b9",
                "status": "modified"
            }
        ],
        "message": "QPID-5240: Change ExternalSaslServer to avoid NPE possibility.\n\nContract for SaslServer#getAuthorizationID does not disallow the calling of getAuthorizationID following a failed authentication\nso returning null in this case seems reasonable (com.sun.security.sasl.CramMD5Server behaves in this way).\n\nAlso refactored EAMT to have small tightly targetted tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@1536126 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/69a1133cc4c72d8531712c7783e6e11afa88b972",
        "patched_files": [
            "ExternalSaslServer.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "ExternalAuthenticationManagerTest.java"
        ]
    },
    "qpid_7568fef": {
        "bug_id": "qpid_7568fef",
        "commit": "https://github.com/apache/qpid/commit/7568fef734b03114883a9256a927d5f9151da0b1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java?ref=7568fef734b03114883a9256a927d5f9151da0b1",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java",
                "patch": "@@ -71,7 +71,7 @@ public void methodReceived(AMQStateManager stateManager, BasicRejectBody body, i\n         {\n             _logger.warn(\"Dropping reject request as message is null for tag:\" + deliveryTag);\n //            throw evt.getMethod().getChannelException(AMQConstant.NOT_FOUND, \"Delivery Tag(\" + deliveryTag + \")not known\");\n-        }\n+        }                 \n         else\n         {\n             if (message.isQueueDeleted())",
                "raw_url": "https://github.com/apache/qpid/raw/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java",
                "sha": "fcf3fd4337b635b02f8be953421b4460926bde25",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/qpid/blob/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java?ref=7568fef734b03114883a9256a927d5f9151da0b1",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java",
                "patch": "@@ -54,6 +54,13 @@ public void methodReceived(AMQStateManager stateManager, ChannelOpenBody body, i\n         AMQProtocolSession session = stateManager.getProtocolSession();\n         VirtualHost virtualHost = session.getVirtualHost();\n \n+        \n+        // Protect the broker against out of order frame request.\n+        if (virtualHost == null)\n+        {\n+            throw new AMQException(AMQConstant.COMMAND_INVALID, \"Virtualhost has not yet been set. ConnectionOpen has not been called.\", null);\n+        }\n+\n         final AMQChannel channel = new AMQChannel(session,channelId,\n                                                   virtualHost.getMessageStore());\n ",
                "raw_url": "https://github.com/apache/qpid/raw/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java",
                "sha": "99180138884fd5f7ddb497fd51679b57991b9dd3",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/qpid/blob/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/client/src/main/java/org/apache/qpid/client/failover/FailoverHandler.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/failover/FailoverHandler.java?ref=7568fef734b03114883a9256a927d5f9151da0b1",
                "deletions": 0,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/failover/FailoverHandler.java",
                "patch": "@@ -140,6 +140,17 @@ public void run()\n             // a slightly more complex state model therefore I felt it was worthwhile doing this.\n             AMQStateManager existingStateManager = _amqProtocolHandler.getStateManager();\n \n+\n+            // We are failing over so lets ensure any existing ProtocolSessions\n+            // are closed. Closing them will update the stateManager which we\n+            // probably don't want to record the change to the closed state.\n+            // So lets make a new one.\n+            _amqProtocolHandler.setStateManager(new AMQStateManager());\n+\n+            // Close the session, false says don't wait for it to close, just close it.\n+            _amqProtocolHandler.getProtocolSession().closeProtocolSession(false);\n+\n+            // Use a fresh new StateManager for the reconnection attempts\n             _amqProtocolHandler.setStateManager(new AMQStateManager());\n \n ",
                "raw_url": "https://github.com/apache/qpid/raw/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/client/src/main/java/org/apache/qpid/client/failover/FailoverHandler.java",
                "sha": "7fa7004a9e3423eb6eb86210a663a4a638266160",
                "status": "modified"
            },
            {
                "additions": 331,
                "blob_url": "https://github.com/apache/qpid/blob/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/systests/src/main/java/org/apache/qpid/server/failover/MessageDisappearWithIOExceptionTest.java",
                "changes": 331,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/failover/MessageDisappearWithIOExceptionTest.java?ref=7568fef734b03114883a9256a927d5f9151da0b1",
                "deletions": 0,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/failover/MessageDisappearWithIOExceptionTest.java",
                "patch": "@@ -0,0 +1,331 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.failover;\n+\n+import org.apache.mina.common.WriteTimeoutException;\n+import org.apache.qpid.client.AMQConnection;\n+import org.apache.qpid.client.protocol.AMQProtocolSession;\n+import org.apache.qpid.jms.ConnectionListener;\n+import org.apache.qpid.test.utils.QpidTestCase;\n+import org.apache.qpid.test.utils.FailoverBaseCase;\n+import org.apache.qpid.AMQConnectionClosedException;\n+\n+import javax.jms.Destination;\n+import javax.jms.Message;\n+import javax.jms.MessageConsumer;\n+import javax.jms.MessageProducer;\n+import javax.jms.Queue;\n+import javax.jms.Session;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Test case based on user reported error.\n+ *\n+ * Summary:\n+ * A user has reported message loss from their application. On bouncing of\n+ * the broker the 'lost' messages are delivered to the broker.\n+ *\n+ * Note:\n+ * The client was using Spring so that may influence the situation.\n+ *\n+ * Issue:\n+ * The log files show 7 instances of the following which result in 7\n+ * missing messages.\n+ *\n+ * The client log files show:\n+ *\n+ * The broker log file show:\n+ *\n+ *\n+ * 7 missing messages have delivery tags 5-11. Which says that they are\n+ * sequentially the next message from the broker.\n+ *\n+ * The only way for the 'without a handler' log to occur is if the consumer\n+ * has been removed from the look up table of the dispatcher.\n+ * And the only way for the 'null message' log to occur on the broker is is\n+ * if the message does not exist in the unacked-map\n+ *\n+ * The consumer is only removed from the list during session\n+ * closure and failover.\n+ *\n+ * If the session was closed then the broker would requeue the unacked\n+ * messages so the potential exists to have an empty map but the broker\n+ * will not send a message out after the unacked map has been cleared.\n+ *\n+ * When failover occurs the _consumer map is cleared and the consumers are\n+ * resubscribed. This is down without first stopping any existing\n+ * dispatcher so there exists the potential to receive a message after\n+ * the _consumer map has been cleared which is how the 'without a handler'\n+ * log statement occurs.\n+ *\n+ * Scenario:\n+ *\n+ * Looking over logs the sequence that best fits the events is as follows:\n+ * - Something causes Mina to be delayed causing the WriteTimoutException.\n+ * - This exception is recevied by AMQProtocolHandler#exceptionCaught\n+ * - As the WriteTimeoutException is an IOException this will cause\n+ * sessionClosed to be called to start failover.\n+ * + This is potentially the issues here. All IOExceptions are treated\n+ * as connection failure events.\n+ * - Failover Runs\n+ * + Failover assumes that the previous connection has been closed.\n+ * + Failover binds the existing objects (AMQConnection/Session) to the\n+ * new connection objects.\n+ * - Everything is reported as being successfully failed over.\n+ * However, what is neglected is that the original connection has not\n+ * been closed.\n+ * + So what occurs is that the broker sends a message to the consumer on\n+ * the original connection, as it was not notified of the client\n+ * failing over.\n+ * As the client failover reuses the original AMQSession and Dispatcher\n+ * the new messages the broker sends to the old consumer arrives at the\n+ * client and is processed by the same AMQSession and Dispatcher.\n+ * However, as the failover process cleared the _consumer map and\n+ * resubscribe the consumers the Dispatcher does not recognise the\n+ * delivery tag and so logs the 'without a handler' message.\n+ * - The Dispatcher then attempts to reject the message, however,\n+ * + The AMQSession/Dispatcher pair have been swapped to using a new Mina\n+ * ProtocolSession as part of the failover process so the reject is\n+ * sent down the second connection. The broker receives the Reject\n+ * request but as the Message was sent on a different connection the\n+ * unacknowledgemap is empty and a 'message is null' log message\n+ * produced.\n+ *\n+ * Test Strategy:\n+ *\n+ * It should be easy to demonstrate if we can send an IOException to\n+ * AMQProtocolHandler#exceptionCaught and then try sending a message.\n+ *\n+ * The current unknowns here are the type of consumers that are in use.\n+ * If it was an exclusive queue(Durable Subscription) then why did the\n+ * resubscribe not fail.\n+ *\n+ * If it was not exclusive then why did the messages not round robin?\n+ */\n+public class MessageDisappearWithIOExceptionTest extends FailoverBaseCase implements ConnectionListener\n+{\n+    private CountDownLatch _failoverOccured = new CountDownLatch(1);\n+    AMQConnection _connection;\n+    Session _session;\n+    Queue _queue;\n+    MessageConsumer _consumer;\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+        stopBroker(getFailingPort());\n+\n+    }\n+\n+    /**\n+     * Test Summary:\n+     *\n+     * Create a queue consumer and send 10 messages to the broker.\n+     *\n+     * Consume the first message.\n+     * This will pull the rest into the prefetch\n+     *\n+     * Send an IOException to the MinaProtocolHandler.\n+     *\n+     * This will force failover to occur.\n+     *\n+     * 9 messages would normally be expected but it is expected that none will\n+     * arrive. As they are still in the prefetch of the first session.\n+     *\n+     * To free the messages we need to close all connections.\n+     * - Simply doing connection.close() and retesting will not be enough as\n+     * the original connection's IO layer will still exist and is nolonger\n+     * connected to the connection object as a result of failover.\n+     *\n+     * - Test will need to retain a reference to the original connection IO so\n+     * that it can be closed releasing the messages to validate that the\n+     * messages have indeed been 'lost' on that sesssion.\n+     */\n+    public void test() throws Exception\n+    {\n+        initialiseConnection();\n+\n+        // Create Producer\n+        // Send 10 messages\n+        List<Message> messages = sendNumberedBytesMessage(_session, _queue, 10);\n+\n+        // Consume first messasge\n+        Message received = _consumer.receive(2000);\n+\n+        // Verify received messages\n+        assertNotNull(\"First message not received.\", received);\n+        assertEquals(\"Incorrect message Received\",\n+                     messages.remove(0).getIntProperty(\"count\"),\n+                     received.getIntProperty(\"count\"));\n+\n+        // Allow ack to be sent to broker, by performing a synchronous command\n+        // along the session.\n+//        _session.createConsumer(_session.createTemporaryQueue()).close();\n+\n+        //Retain IO Layer\n+        AMQProtocolSession protocolSession = _connection.getProtocolHandler().getProtocolSession();\n+\n+        // Send IO Exception - causing failover\n+        _connection.getProtocolHandler().\n+                exceptionCaught(_connection.getProtocolHandler().getProtocolSession().getIoSession(),\n+                                new WriteTimeoutException(\"WriteTimeoutException to cause failover.\"));\n+\n+        // Verify Failover occured through ConnectionListener\n+        assertTrue(\"Failover did not occur\",\n+                   _failoverOccured.await(4000, TimeUnit.MILLISECONDS));\n+\n+        //Verify new protocolSession is not the same as the original\n+        assertNotSame(\"Protocol Session has not changed\",\n+                      protocolSession,\n+                      _connection.getProtocolHandler().getProtocolSession());\n+\n+        /***********************************/\n+        // This verifies that the bug has been resolved\n+\n+        // Attempt to consume again. Expect 9 messages\n+        for (int count = 1; count < 10; count++)\n+        {\n+            received = _consumer.receive(2000);\n+            assertNotNull(\"Expected message not received:\" + count, received);\n+            assertEquals(messages.remove(0).getIntProperty(\"count\"),\n+                         received.getIntProperty(\"count\"));\n+        }\n+\n+        //Verify there are no more messages\n+        received = _consumer.receive(1000);\n+        assertNull(\"Message receieved when there should be none:\" + received,\n+                   received);\n+\n+//        /***********************************/\n+//        // This verifies that the bug exists\n+//\n+//        // Attempt to consume remaining 9 messages.. Expecting NONE.\n+//        // receiving just one message should fail so no need to fail 9 times\n+//        received = _consumer.receive(1000);\n+//        assertNull(\"Message receieved when it should be null:\" + received, received);\n+//\n+////        //Close the Connection which you would assume would free the messages\n+////        _connection.close();\n+////\n+////        // Reconnect\n+////        initialiseConnection();\n+////\n+////        // We should still be unable to receive messages\n+////        received = _consumer.receive(1000);\n+////        assertNull(\"Message receieved when it should be null:\" + received, received);\n+////\n+////        _connection.close();\n+//\n+//        // Close original IO layer. Expecting messages to be released\n+//        protocolSession.closeProtocolSession();\n+//\n+//        // Reconnect and all should be good.\n+////        initialiseConnection();\n+//\n+//        // Attempt to consume again. Expect 9 messages\n+//        for (int count = 1; count < 10; count++)\n+//        {\n+//            received = _consumer.receive(2000);\n+//            assertNotNull(\"Expected message not received:\" + count, received);\n+//            assertEquals(messages.remove(0).getIntProperty(\"count\"),\n+//                         received.getIntProperty(\"count\"));\n+//        }\n+//\n+//        //Verify there are no more messages\n+//        received = _consumer.receive(1000);\n+//        assertNull(\"Message receieved when there should be none:\" + received,\n+//                   received);\n+    }\n+\n+    private void initialiseConnection()\n+            throws Exception\n+    {\n+        //Create Connection\n+        _connection = (AMQConnection) getConnection();\n+        _connection.setConnectionListener(this);\n+\n+        _session = _connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\n+        _queue = _session.createQueue(getName());\n+\n+        // Create Consumer\n+        _consumer = _session.createConsumer(_queue);\n+\n+        //Start connection\n+        _connection.start();\n+    }\n+\n+    /** QpidTestCase back port to this release */\n+\n+    // modified from QTC as sendMessage is not testable.\n+    //  - should be renamed sendBlankBytesMessage\n+    //  - should be renamed sendNumberedBytesMessage\n+    public List<Message> sendNumberedBytesMessage(Session session, Destination destination,\n+                                                  int count) throws Exception\n+    {\n+        List<Message> messages = new ArrayList<Message>(count);\n+\n+        MessageProducer producer = session.createProducer(destination);\n+\n+        for (int i = 0; i < count; i++)\n+        {\n+            Message next = session.createMessage();\n+\n+            next.setIntProperty(\"count\", count);\n+\n+            producer.send(next);\n+\n+            messages.add(next);\n+        }\n+\n+        producer.close();\n+        return messages;\n+    }\n+\n+    public void bytesSent(long count)\n+    {\n+        //To change body of implemented methods use File | Settings | File Templates.\n+    }\n+\n+    public void bytesReceived(long count)\n+    {\n+    }\n+\n+    public boolean preFailover(boolean redirect)\n+    {\n+        //Allow failover to occur\n+        return true;\n+    }\n+\n+    public boolean preResubscribe()\n+    {\n+        //Allow failover to occur\n+        return true;\n+    }\n+\n+    public void failoverComplete()\n+    {\n+        _failoverOccured.countDown();\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/systests/src/main/java/org/apache/qpid/server/failover/MessageDisappearWithIOExceptionTest.java",
                "sha": "8d707c4c79f5474390f8c2c210642cd435212ebb",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/systests/src/main/java/org/apache/qpid/test/unit/ack/AcknowledgeAfterFailoverTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/test/unit/ack/AcknowledgeAfterFailoverTest.java?ref=7568fef734b03114883a9256a927d5f9151da0b1",
                "deletions": 1,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/test/unit/ack/AcknowledgeAfterFailoverTest.java",
                "patch": "@@ -61,7 +61,7 @@ public void setUp() throws Exception\n      * @param transacted create a transacted session for this test\n      * @param mode if not transacted what ack mode to use for this test\n      * @throws Exception if a problem occured during test setup.\n-     */\n+     */                                                                                                               \n     @Override\n     protected void init(boolean transacted, int mode) throws Exception\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/systests/src/main/java/org/apache/qpid/test/unit/ack/AcknowledgeAfterFailoverTest.java",
                "sha": "eb36522facc932454e106afb4ce5a818fa4cec8e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/systests/src/main/java/org/apache/qpid/test/utils/FailoverBaseCase.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/test/utils/FailoverBaseCase.java?ref=7568fef734b03114883a9256a927d5f9151da0b1",
                "deletions": 2,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/test/utils/FailoverBaseCase.java",
                "patch": "@@ -55,7 +55,7 @@ protected void setUp() throws java.lang.Exception\n         super.setUp();\n         // Set QPID_WORK to $QPID_WORK/<getFailingPort()>\n         // or /tmp/<getFailingPort()> if QPID_WORK not set.\n-        setSystemProperty(\"QPID_WORK\", System.getProperty(\"QPID_WORK\", System.getProperty(\"java.io.tmpdir\")) + \"/\" + getFailingPort());\n+        setSystemProperty(\"QPID_WORK\", System.getProperty(\"QPID_WORK\") + \"/\" + getFailingPort());\n         startBroker(getFailingPort());\n     }\n \n@@ -95,7 +95,7 @@ public void tearDown() throws Exception\n             // Ensure we shutdown any secondary brokers, even if we are unable\n             // to cleanly tearDown the QTC.\n             stopBroker(getFailingPort());\n-            FileUtils.deleteDirectory(System.getProperty(\"QPID_WORK\", System.getProperty(\"java.io.tmpdir\")) + \"/\" + getFailingPort());\n+            FileUtils.deleteDirectory(System.getProperty(\"QPID_WORK\") + \"/\" + getFailingPort());\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/systests/src/main/java/org/apache/qpid/test/utils/FailoverBaseCase.java",
                "sha": "0426c4f45f75dc313d220102a1c02f0e220a9019",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/test-profiles/Excludes",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/test-profiles/Excludes?ref=7568fef734b03114883a9256a927d5f9151da0b1",
                "deletions": 0,
                "filename": "qpid/java/test-profiles/Excludes",
                "patch": "@@ -30,3 +30,7 @@ org.apache.qpid.test.unit.ack.AcknowledgeAfterFailoverTest#testClientAck\n // QPID-143 : Failover can occur between receive and ack but we don't stop the ack.\n org.apache.qpid.test.unit.ack.AcknowledgeAfterFailoverOnMessageTest#testAutoAck\n org.apache.qpid.test.unit.ack.AcknowledgeAfterFailoverOnMessageTest#testDupsOk\n+\n+\n+//temp do not commit\n+org.apache.qpid.server.failover.MessageDisappearWithIOExceptionTest#*",
                "raw_url": "https://github.com/apache/qpid/raw/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/test-profiles/Excludes",
                "sha": "863f56ae921330ce3fc238baf5a344559f2910d0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/test-profiles/test-provider.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/test-profiles/test-provider.properties?ref=7568fef734b03114883a9256a927d5f9151da0b1",
                "deletions": 1,
                "filename": "qpid/java/test-profiles/test-provider.properties",
                "patch": "@@ -34,7 +34,7 @@ connectionfactory.default.vm = amqp://username:password@clientid/test?brokerlist\n \n connectionfactory.failover = amqp://username:password@clientid/test?brokerlist='tcp://localhost:${test.port.alt};tcp://localhost:${test.port}'&sync_ack='true'&sync_publish='all'&failover='roundrobin?cyclecount='20''\n connectionfactory.failover.ssl = amqp://username:password@clientid/test?brokerlist='tcp://localhost:${test.port.alt.ssl}?ssl='true';tcp://localhost:${test.port.ssl}?ssl='true''&sync_ack='true'&sync_publish='all'&failover='roundrobin?cyclecount='20''\n-connectionfactory.failover.vm = amqp://username:password@clientid/test?brokerlist='vm://:2;vm://:1'\n+connectionfactory.failover.vm = amqp://username:password@clientid/test?brokerlist='vm://:2;vm://:1'&failover='roundrobin?cyclecount='20''\n \n connectionfactory.connection1 = amqp://username:password@clientid/test?brokerlist='tcp://localhost:${test.port}'\n connectionfactory.connection2 = amqp://username:password@clientid/test?brokerlist='tcp://localhost:${test.port.alt}'",
                "raw_url": "https://github.com/apache/qpid/raw/7568fef734b03114883a9256a927d5f9151da0b1/qpid/java/test-profiles/test-provider.properties",
                "sha": "8cea012c1d7288adc96b0032af2fa1b58d764770",
                "status": "modified"
            }
        ],
        "message": "QPID-1950 : Problem is that the thrown exception whilst an IOException does not signify that the socket has closed. So the broker had two open connections to send messages on. Change was to ensure that the previous Socket/IOSession has been closed before failover starts. Also added protected to ChannelOpenHandler to guard against out of order frames causing a NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@823087 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/b4a8deeb520451eb429fe5360752a9918c49ff1a",
        "patched_files": [
            "FailoverHandler.java",
            "BasicRejectMethodHandler.java",
            "Excludes.java",
            "FailoverBaseCase.java",
            "ChannelOpenHandler.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "AcknowledgeAfterFailoverTest.java",
            "MessageDisappearWithIOExceptionTest.java",
            "test-provider.java"
        ]
    },
    "qpid_8b9d54d": {
        "bug_id": "qpid_8b9d54d",
        "commit": "https://github.com/apache/qpid/commit/8b9d54dcb70bb397dae8742cf1a005945102dede",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java?ref=8b9d54dcb70bb397dae8742cf1a005945102dede",
                "deletions": 13,
                "filename": "qpid/java/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java",
                "patch": "@@ -82,7 +82,7 @@\n     private BrokerOptions _brokerOptions;\n \n     private Timer _reportingTimer;\n-    private StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n+    private final StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n \n     @ManagedAttributeField\n     private String _defaultVirtualHost;\n@@ -119,7 +119,10 @@ public BrokerAdapter(Map<String, Object> attributes,\n             authManager.addUser(BrokerOptions.MANAGEMENT_MODE_USER_NAME, _brokerOptions.getManagementModePassword());\n             _managementModeAuthenticationProvider = authManager;\n         }\n-        initialiseStatistics();\n+        _messagesDelivered = new StatisticsCounter(\"messages-delivered\");\n+        _dataDelivered = new StatisticsCounter(\"bytes-delivered\");\n+        _messagesReceived = new StatisticsCounter(\"messages-received\");\n+        _dataReceived = new StatisticsCounter(\"bytes-received\");\n     }\n \n     public void onValidate()\n@@ -243,9 +246,6 @@ private void activate()\n             addVirtualHostNode(virtualHostNode);\n         }\n \n-\n-        initialiseStatistics();\n-\n         initialiseStatisticsReporting();\n        // changeChildState(State.ACTIVE, false);\n         if (isManagementMode())\n@@ -995,14 +995,6 @@ public void resetStatistics()\n         }\n     }\n \n-    public void initialiseStatistics()\n-    {\n-        _messagesDelivered = new StatisticsCounter(\"messages-delivered\");\n-        _dataDelivered = new StatisticsCounter(\"bytes-delivered\");\n-        _messagesReceived = new StatisticsCounter(\"messages-received\");\n-        _dataReceived = new StatisticsCounter(\"bytes-received\");\n-    }\n-\n     private class StatisticsReportingTask extends TimerTask\n     {\n         private final int DELIVERED = 0;",
                "raw_url": "https://github.com/apache/qpid/raw/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java",
                "sha": "e6d7f44e0c81046c4a143ed095a222aa846ad430",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/qpid/blob/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-core/src/main/java/org/apache/qpid/server/stats/StatisticsGatherer.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/main/java/org/apache/qpid/server/stats/StatisticsGatherer.java?ref=8b9d54dcb70bb397dae8742cf1a005945102dede",
                "deletions": 11,
                "filename": "qpid/java/broker-core/src/main/java/org/apache/qpid/server/stats/StatisticsGatherer.java",
                "patch": "@@ -35,17 +35,6 @@\n  */\n public interface StatisticsGatherer\n {\n-    /**\n-     * Initialise the statistics gathering for this object.\n-     * \n-     * This method is responsible for creating any {@link StatisticsCounter}\n-     * objects and for determining whether statistics generation should be\n-     * enabled, by checking broker and system configuration.\n-     * \n-     * @see StatisticsCounter#DISABLE_STATISTICS\n-     */\n-    void initialiseStatistics();\n-    \n     /**\n      * This method is responsible for registering the receipt of a message\n      * with the counters, and also for passing this notification to any parent",
                "raw_url": "https://github.com/apache/qpid/raw/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-core/src/main/java/org/apache/qpid/server/stats/StatisticsGatherer.java",
                "sha": "25f5f4e73f319ce3437206f30765f1711cb2b00b",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java?ref=8b9d54dcb70bb397dae8742cf1a005945102dede",
                "deletions": 11,
                "filename": "qpid/java/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "patch": "@@ -110,7 +110,7 @@\n \n     private volatile VirtualHostState _state = VirtualHostState.INITIALISING;\n \n-    private StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n+    private final StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n \n     private final Map<String, LinkRegistry> _linkRegistry = new HashMap<String, LinkRegistry>();\n     private boolean _blocked;\n@@ -173,6 +173,10 @@ public AbstractVirtualHost(final Map<String, Object> attributes, VirtualHostNode\n \n         _defaultDestination = new DefaultDestination(this);\n \n+        _messagesDelivered = new StatisticsCounter(\"messages-delivered-\" + getName());\n+        _dataDelivered = new StatisticsCounter(\"bytes-delivered-\" + getName());\n+        _messagesReceived = new StatisticsCounter(\"messages-received-\" + getName());\n+        _dataReceived = new StatisticsCounter(\"bytes-received-\" + getName());\n     }\n \n     public void onValidate()\n@@ -245,8 +249,6 @@ protected void onOpen()\n \n         registerSystemNodes();\n \n-        initialiseStatistics();\n-\n         Subject.doAs(SecurityManager.getSubjectWithAddedSystemRights(), new PrivilegedAction<Object>()\n         {\n             @Override\n@@ -790,14 +792,6 @@ public void resetStatistics()\n         }\n     }\n \n-    public void initialiseStatistics()\n-    {\n-        _messagesDelivered = new StatisticsCounter(\"messages-delivered-\" + getName());\n-        _dataDelivered = new StatisticsCounter(\"bytes-delivered-\" + getName());\n-        _messagesReceived = new StatisticsCounter(\"messages-received-\" + getName());\n-        _dataReceived = new StatisticsCounter(\"bytes-received-\" + getName());\n-    }\n-\n     public synchronized LinkRegistry getLinkRegistry(String remoteContainerId)\n     {\n         LinkRegistry linkRegistry = _linkRegistry.get(remoteContainerId);",
                "raw_url": "https://github.com/apache/qpid/raw/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "sha": "cd3d7c889c9d7a349435569ca7df5e77d42ef1d0",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/qpid/blob/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-core/src/test/java/org/apache/qpid/server/consumer/MockConsumer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/test/java/org/apache/qpid/server/consumer/MockConsumer.java?ref=8b9d54dcb70bb397dae8742cf1a005945102dede",
                "deletions": 4,
                "filename": "qpid/java/broker-core/src/test/java/org/apache/qpid/server/consumer/MockConsumer.java",
                "patch": "@@ -414,10 +414,6 @@ public int compareTo(final Object o)\n \n     private static class MockConnectionModel implements AMQConnectionModel\n     {\n-        @Override\n-        public void initialiseStatistics()\n-        {\n-        }\n \n         @Override\n         public void registerMessageReceived(long messageSize, long timestamp)",
                "raw_url": "https://github.com/apache/qpid/raw/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-core/src/test/java/org/apache/qpid/server/consumer/MockConsumer.java",
                "sha": "722535669b52ba0b8146e0852d0205e5fd87ac39",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/qpid/blob/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-core/src/test/java/org/apache/qpid/server/virtualhost/MockVirtualHost.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/test/java/org/apache/qpid/server/virtualhost/MockVirtualHost.java?ref=8b9d54dcb70bb397dae8742cf1a005945102dede",
                "deletions": 5,
                "filename": "qpid/java/broker-core/src/test/java/org/apache/qpid/server/virtualhost/MockVirtualHost.java",
                "patch": "@@ -569,11 +569,6 @@ public StatisticsCounter getMessageReceiptStatistics()\n         return null;\n     }\n \n-    public void initialiseStatistics()\n-    {\n-\n-    }\n-\n     public void registerMessageDelivered(long messageSize)\n     {\n ",
                "raw_url": "https://github.com/apache/qpid/raw/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-core/src/test/java/org/apache/qpid/server/virtualhost/MockVirtualHost.java",
                "sha": "cec34bd890e642898926efa5e0b77ecca439f61e",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java?ref=8b9d54dcb70bb397dae8742cf1a005945102dede",
                "deletions": 11,
                "filename": "qpid/java/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java",
                "patch": "@@ -71,7 +71,7 @@\n \n     private final Subject _authorizedSubject = new Subject();\n     private Principal _authorizedPrincipal = null;\n-    private StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n+    private final StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n     private final long _connectionId;\n     private final Object _reference = new Object();\n     private VirtualHostImpl _virtualHost;\n@@ -93,6 +93,11 @@ public ServerConnection(final long connectionId, Broker broker)\n         _connectionId = connectionId;\n         _authorizedSubject.getPrincipals().add(new ConnectionPrincipal(this));\n         _broker = broker;\n+\n+        _messagesDelivered = new StatisticsCounter(\"messages-delivered-\" + getConnectionId());\n+        _dataDelivered = new StatisticsCounter(\"data-delivered-\" + getConnectionId());\n+        _messagesReceived = new StatisticsCounter(\"messages-received-\" + getConnectionId());\n+        _dataReceived = new StatisticsCounter(\"data-received-\" + getConnectionId());\n     }\n \n     public Object getReference()\n@@ -175,8 +180,6 @@ public VirtualHostImpl getVirtualHost()\n     public void setVirtualHost(VirtualHostImpl virtualHost)\n     {\n         _virtualHost = virtualHost;\n-\n-        initialiseStatistics();\n     }\n \n     @Override\n@@ -455,14 +458,6 @@ public void resetStatistics()\n         _dataReceived.reset();\n     }\n \n-    public void initialiseStatistics()\n-    {\n-        _messagesDelivered = new StatisticsCounter(\"messages-delivered-\" + getConnectionId());\n-        _dataDelivered = new StatisticsCounter(\"data-delivered-\" + getConnectionId());\n-        _messagesReceived = new StatisticsCounter(\"messages-received-\" + getConnectionId());\n-        _dataReceived = new StatisticsCounter(\"data-received-\" + getConnectionId());\n-    }\n-\n     /**\n      * @return authorizedSubject\n      */",
                "raw_url": "https://github.com/apache/qpid/raw/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java",
                "sha": "ede51ef21342eb06c50fd83011fbbe9aee790f89",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java?ref=8b9d54dcb70bb397dae8742cf1a005945102dede",
                "deletions": 11,
                "filename": "qpid/java/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java",
                "patch": "@@ -154,7 +154,7 @@\n     private long _maxFrameSize;\n     private final AtomicBoolean _closing = new AtomicBoolean(false);\n \n-    private StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n+    private final StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n \n     private NetworkConnection _network;\n     private Sender<ByteBuffer> _sender;\n@@ -201,12 +201,14 @@ public Void run()\n \n                 _closeWhenNoRoute = _broker.getConnection_closeWhenNoRoute();\n \n-                initialiseStatistics();\n-\n                 return null;\n             }\n         });\n \n+        _messagesDelivered = new StatisticsCounter(\"messages-delivered-\" + getSessionID());\n+        _dataDelivered = new StatisticsCounter(\"data-delivered-\" + getSessionID());\n+        _messagesReceived = new StatisticsCounter(\"messages-received-\" + getSessionID());\n+        _dataReceived = new StatisticsCounter(\"data-received-\" + getSessionID());\n     }\n \n     private <T> T runAsSubject(PrivilegedAction<T> action)\n@@ -1500,14 +1502,6 @@ public void resetStatistics()\n         _dataReceived.reset();\n     }\n \n-    public void initialiseStatistics()\n-    {\n-        _messagesDelivered = new StatisticsCounter(\"messages-delivered-\" + getSessionID());\n-        _dataDelivered = new StatisticsCounter(\"data-delivered-\" + getSessionID());\n-        _messagesReceived = new StatisticsCounter(\"messages-received-\" + getSessionID());\n-        _dataReceived = new StatisticsCounter(\"data-received-\" + getSessionID());\n-    }\n-\n     public boolean isSessionNameUnique(byte[] name)\n     {\n         // 0-8/0-9/0-9-1 sessions don't have names",
                "raw_url": "https://github.com/apache/qpid/raw/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java",
                "sha": "b28e9bc23c2f073e25b2af984799c052dcafed15",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Connection_1_0.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Connection_1_0.java?ref=8b9d54dcb70bb397dae8742cf1a005945102dede",
                "deletions": 14,
                "filename": "qpid/java/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Connection_1_0.java",
                "patch": "@@ -76,10 +76,7 @@\n     private final CopyOnWriteArrayList<SessionModelListener> _sessionListeners =\n             new CopyOnWriteArrayList<SessionModelListener>();\n \n-    private StatisticsCounter _messageDeliveryStatistics = new StatisticsCounter();\n-    private StatisticsCounter _messageReceiptStatistics = new StatisticsCounter();\n-    private StatisticsCounter _dataDeliveryStatistics = new StatisticsCounter();\n-    private StatisticsCounter _dataReceiptStatistics = new StatisticsCounter();\n+    private final StatisticsCounter _messageDeliveryStatistics, _messageReceiptStatistics, _dataDeliveryStatistics, _dataReceiptStatistics;\n \n     private final LogSubject _logSubject = new LogSubject()\n     {\n@@ -118,7 +115,10 @@ public Connection_1_0(Broker broker,\n         _connectionId = connectionId;\n         _subject.getPrincipals().add(new ConnectionPrincipal(this));\n         _subjectCreator = subjectCreator;\n-\n+        _messageDeliveryStatistics = new StatisticsCounter(\"messages-delivered-\" + getConnectionId());\n+        _dataDeliveryStatistics = new StatisticsCounter(\"data-delivered-\" + getConnectionId());\n+        _messageReceiptStatistics = new StatisticsCounter(\"messages-received-\" + getConnectionId());\n+        _dataReceiptStatistics = new StatisticsCounter(\"data-received-\" + getConnectionId());\n     }\n \n     public Object getReference()\n@@ -367,15 +367,6 @@ public boolean isStopped()\n         return _stopped;\n     }\n \n-    @Override\n-    public void initialiseStatistics()\n-    {\n-        _messageDeliveryStatistics = new StatisticsCounter(\"messages-delivered-\" + getConnectionId());\n-        _dataDeliveryStatistics = new StatisticsCounter(\"data-delivered-\" + getConnectionId());\n-        _messageReceiptStatistics = new StatisticsCounter(\"messages-received-\" + getConnectionId());\n-        _dataReceiptStatistics = new StatisticsCounter(\"data-received-\" + getConnectionId());\n-    }\n-\n     @Override\n     public void registerMessageReceived(long messageSize, long timestamp)\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Connection_1_0.java",
                "sha": "6d780461f46af4698816f3074a9da8af529de45e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/systests/src/main/java/org/apache/qpid/client/ssl/SSLTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/client/ssl/SSLTest.java?ref=8b9d54dcb70bb397dae8742cf1a005945102dede",
                "deletions": 0,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/client/ssl/SSLTest.java",
                "patch": "@@ -43,9 +43,13 @@\n import org.apache.qpid.server.model.Transport;\n import org.apache.qpid.test.utils.QpidBrokerTestCase;\n import org.apache.qpid.test.utils.TestBrokerConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class SSLTest extends QpidBrokerTestCase\n {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SSLTest.class);\n+\n     private static final String CERT_ALIAS_APP1 = \"app1\";\n     private static final String CERT_ALIAS_APP2 = \"app2\";\n \n@@ -209,6 +213,7 @@ public void testVerifyHostNameWithIncorrectHostname() throws Exception\n \n     private void verifyExceptionCausesContains(Exception e, String expectedString)\n     {\n+        LOGGER.debug(\"verifying that the following exception contains \" + expectedString, e);\n         ByteArrayOutputStream bout = new ByteArrayOutputStream();\n         e.printStackTrace(new PrintStream(bout));\n         String strace = bout.toString();",
                "raw_url": "https://github.com/apache/qpid/raw/8b9d54dcb70bb397dae8742cf1a005945102dede/qpid/java/systests/src/main/java/org/apache/qpid/client/ssl/SSLTest.java",
                "sha": "8225fce3a33787b2c3454f7aced0c0385505f7b0",
                "status": "modified"
            }
        ],
        "message": "QPID-5766: Intitialisation of StatisticsCounter objects can lead to NPE.\n\nPatch Supplied by Andrew MacBean <andymacbean@gmail.com>.\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@1595155 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/4770c709c9a1a28ac2d623a7a476af15f31ecc78",
        "patched_files": [
            "ServerConnection.java",
            "StatisticsGatherer.java",
            "MockVirtualHost.java",
            "Connection_1_0.java",
            "BrokerAdapter.java",
            "AbstractVirtualHost.java",
            "MockConsumer.java",
            "AMQProtocolEngine.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "SSLTest.java"
        ]
    },
    "qpid_9a9f99f": {
        "bug_id": "qpid_9a9f99f",
        "commit": "https://github.com/apache/qpid/commit/9a9f99f966b27f1d8b4b2276a4f5908d37070654",
        "file": [
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/qpid/blob/9a9f99f966b27f1d8b4b2276a4f5908d37070654/qpid/java/common/src/test/java/org/apache/qpid/pool/PoolingFilterTest.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/test/java/org/apache/qpid/pool/PoolingFilterTest.java?ref=9a9f99f966b27f1d8b4b2276a4f5908d37070654",
                "deletions": 1,
                "filename": "qpid/java/common/src/test/java/org/apache/qpid/pool/PoolingFilterTest.java",
                "patch": "@@ -23,6 +23,9 @@\n import junit.framework.TestCase;\n import junit.framework.Assert;\n import org.apache.qpid.session.TestSession;\n+import org.apache.mina.common.IoFilter;\n+import org.apache.mina.common.IoSession;\n+import org.apache.mina.common.IdleStatus;\n \n import java.util.concurrent.RejectedExecutionException;\n \n@@ -43,7 +46,7 @@ public void setUp()\n \n     public void testRejectedExecution() throws Exception\n     {\n-        _pool.filterWrite(null, new TestSession(), null);\n+        _pool.filterWrite(new NoOpFilter(), new TestSession(), new IoFilter.WriteRequest(\"Message\"));\n \n         //Shutdown the pool\n         _executorService.getPool().shutdownNow();\n@@ -58,4 +61,44 @@ public void testRejectedExecution() throws Exception\n             Assert.fail(\"RejectedExecutionException should not occur after pool has shutdown:\" + rje);\n         }\n     }\n+\n+    private static class NoOpFilter implements IoFilter.NextFilter\n+    {\n+\n+        public void sessionOpened(IoSession session)\n+        {\n+        }\n+\n+        public void sessionClosed(IoSession session)\n+        {\n+        }\n+\n+        public void sessionIdle(IoSession session, IdleStatus status)\n+        {\n+        }\n+\n+        public void exceptionCaught(IoSession session, Throwable cause)\n+        {\n+        }\n+\n+        public void messageReceived(IoSession session, Object message)\n+        {\n+        }\n+\n+        public void messageSent(IoSession session, Object message)\n+        {\n+        }\n+\n+        public void filterWrite(IoSession session, IoFilter.WriteRequest writeRequest)\n+        {\n+        }\n+\n+        public void filterClose(IoSession session)\n+        {\n+        }\n+\n+        public void sessionCreated(IoSession session)\n+        {\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/9a9f99f966b27f1d8b4b2276a4f5908d37070654/qpid/java/common/src/test/java/org/apache/qpid/pool/PoolingFilterTest.java",
                "sha": "972a9352577c728581d4d35add4fa9e458688157",
                "status": "modified"
            }
        ],
        "message": "QPID-172\nThe PoolingFilterTest.java would throw an ugly NullPointerException. This was due to there being no next filter. So Created a NoOpFilter that prevents this. \n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/qpid/trunk@486610 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/242818f1f3d8daf18bd504f69d45f8b560ab7497",
        "patched_files": [],
        "repo": "qpid",
        "unit_tests": [
            "PoolingFilterTest.java"
        ]
    },
    "qpid_a74ffb4": {
        "bug_id": "qpid_a74ffb4",
        "commit": "https://github.com/apache/qpid/commit/a74ffb4bd042bfb8edefb3e539b92dcd0589a2e0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/a74ffb4bd042bfb8edefb3e539b92dcd0589a2e0/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java?ref=a74ffb4bd042bfb8edefb3e539b92dcd0589a2e0",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java",
                "patch": "@@ -44,7 +44,7 @@\n  */\n public abstract class ApplicationRegistry implements IApplicationRegistry\n {\n-    private static final Logger _logger = Logger.getLogger(ApplicationRegistry.class);\n+    protected static final Logger _logger = Logger.getLogger(ApplicationRegistry.class);\n \n     private static Map<Integer, IApplicationRegistry> _instanceMap = new HashMap<Integer, IApplicationRegistry>();\n ",
                "raw_url": "https://github.com/apache/qpid/raw/a74ffb4bd042bfb8edefb3e539b92dcd0589a2e0/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java",
                "sha": "a355edee9a31d7155fe2f1f4c88b140e555ac8e7",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/a74ffb4bd042bfb8edefb3e539b92dcd0589a2e0/qpid/java/broker/src/main/java/org/apache/qpid/server/util/NullApplicationRegistry.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/util/NullApplicationRegistry.java?ref=a74ffb4bd042bfb8edefb3e539b92dcd0589a2e0",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/util/NullApplicationRegistry.java",
                "patch": "@@ -49,6 +49,8 @@ public NullApplicationRegistry()\n \n     public void initialise() throws Exception\n     {\n+        _logger.info(\"Initialising NullApplicationRegistry\");\n+        \n         _configuration.addProperty(\"store.class\", \"org.apache.qpid.server.store.MemoryMessageStore\");\n \n         Properties users = new Properties();",
                "raw_url": "https://github.com/apache/qpid/raw/a74ffb4bd042bfb8edefb3e539b92dcd0589a2e0/qpid/java/broker/src/main/java/org/apache/qpid/server/util/NullApplicationRegistry.java",
                "sha": "ee5f9d5e8808f8484e6d318da35cc066087a79eb",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/a74ffb4bd042bfb8edefb3e539b92dcd0589a2e0/qpid/java/systests/src/main/java/org/apache/qpid/server/util/TestApplicationRegistry.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/util/TestApplicationRegistry.java?ref=a74ffb4bd042bfb8edefb3e539b92dcd0589a2e0",
                "deletions": 0,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/util/TestApplicationRegistry.java",
                "patch": "@@ -63,6 +63,8 @@ public TestApplicationRegistry()\n \n     public void initialise() throws Exception\n     {\n+        _logger.info(\"Initialising TestApplicationRegistry\");\n+\n         Properties users = new Properties();\n \n         users.put(\"guest\", \"guest\");",
                "raw_url": "https://github.com/apache/qpid/raw/a74ffb4bd042bfb8edefb3e539b92dcd0589a2e0/qpid/java/systests/src/main/java/org/apache/qpid/server/util/TestApplicationRegistry.java",
                "sha": "6864b0a80d7f884465c60fd62203539e53f2ba70",
                "status": "modified"
            }
        ],
        "message": "QPID-1181 : Added additional logging to help diagnose a NullPointerException\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/qpid/trunk@677263 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/c33a0a69945a04a3cdcc430c2415a8d4dde1fdf0",
        "patched_files": [
            "NullApplicationRegistry.java",
            "ApplicationRegistry.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "TestApplicationRegistry.java"
        ]
    },
    "qpid_b8ea27b": {
        "bug_id": "qpid_b8ea27b",
        "commit": "https://github.com/apache/qpid/commit/b8ea27b54e0dc0e5ebf8d7a17e6cc68e5307a422",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/b8ea27b54e0dc0e5ebf8d7a17e6cc68e5307a422/qpid/java/common/src/main/java/org/apache/qpid/transport/ServerDelegate.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/transport/ServerDelegate.java?ref=b8ea27b54e0dc0e5ebf8d7a17e6cc68e5307a422",
                "deletions": 2,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/transport/ServerDelegate.java",
                "patch": "@@ -71,7 +71,8 @@ public void connectionStartOk(Connection conn, ConnectionStartOk ok)\n \n         if (mechanism == null || mechanism.length() == 0)\n         {\n-            tuneAuthorizedConnection(conn);\n+            conn.connectionClose(ConnectionCloseCode.CONNECTION_FORCED,\n+                    \"No Sasl mechanism was specified\");\n             return;\n         }\n \n@@ -82,7 +83,7 @@ public void connectionStartOk(Connection conn, ConnectionStartOk ok)\n             if (ss == null)\n             {\n                 conn.connectionClose(ConnectionCloseCode.CONNECTION_FORCED,\n-                     \"null SASL mechanism: \" + mechanism);\n+                     \"No SaslServer could be created for mechanism: \" + mechanism);\n                 return;\n             }\n             conn.setSaslServer(ss);",
                "raw_url": "https://github.com/apache/qpid/raw/b8ea27b54e0dc0e5ebf8d7a17e6cc68e5307a422/qpid/java/common/src/main/java/org/apache/qpid/transport/ServerDelegate.java",
                "sha": "1e0d5b9698f3576a8aba05184e1b21edabfadbf5",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/qpid/blob/b8ea27b54e0dc0e5ebf8d7a17e6cc68e5307a422/qpid/java/common/src/test/java/org/apache/qpid/transport/ConnectionTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/test/java/org/apache/qpid/transport/ConnectionTest.java?ref=b8ea27b54e0dc0e5ebf8d7a17e6cc68e5307a422",
                "deletions": 0,
                "filename": "qpid/java/common/src/test/java/org/apache/qpid/transport/ConnectionTest.java",
                "patch": "@@ -155,6 +155,7 @@ private Connection connect(final CountDownLatch closed)\n     {\n         final Connection conn = new Connection();\n         conn.setConnectionDelegate(new ClientDelegate(new ConnectionSettings()));\n+\n         conn.addConnectionListener(new ConnectionListener()\n         {\n             public void opened(Connection conn) {}\n@@ -225,6 +226,12 @@ public Session getSession(Connection conn, SessionAttach atc)\n                 ssn.setSessionListener(ConnectionTest.this);\n                 return ssn;\n             }\n+\n+            @Override\n+            public void connectionStartOk(Connection conn, ConnectionStartOk ok)\n+            {\n+                tuneAuthorizedConnection(conn);\n+            }\n         };\n \n         try",
                "raw_url": "https://github.com/apache/qpid/raw/b8ea27b54e0dc0e5ebf8d7a17e6cc68e5307a422/qpid/java/common/src/test/java/org/apache/qpid/transport/ConnectionTest.java",
                "sha": "12bbd20228bc01e962e82e78e4687c62fbea5fb5",
                "status": "modified"
            }
        ],
        "message": "QPID-4419: ensure the broker kills the 0-10 connection immediately for explicit reason that no sasl mech was chosen, instead of sending an incorrect ConnectionTune and then killing the connection as side effect of a subsequent NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@1405489 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/c510180f3e38542f0795f52513b930d155c78987",
        "patched_files": [
            "Connection.java",
            "ServerDelegate.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "ConnectionTest.java"
        ]
    },
    "qpid_ba01534": {
        "bug_id": "qpid_ba01534",
        "commit": "https://github.com/apache/qpid/commit/ba01534206bc194dab376f25fcc3fa3687d0dc2c",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/configuration/ServerConfiguration.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/configuration/ServerConfiguration.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/configuration/ServerConfiguration.java",
                "patch": "@@ -94,6 +94,7 @@\n         envVarMap.put(\"QPID_SOCKETWRITEBUFFER\", \"connector.socketWriteBuffer\");\n         envVarMap.put(\"QPID_TCPNODELAY\", \"connector.tcpNoDelay\");\n         envVarMap.put(\"QPID_ENABLEPOOLEDALLOCATOR\", \"advanced.enablePooledAllocator\");\n+        envVarMap.put(\"QPID_STATUS-UPDATES\", \"status-updates\");\n     }\n     \n     public ServerConfiguration(File configurationURL) throws ConfigurationException\n@@ -186,7 +187,12 @@ private final static Configuration parseConfig(File file) throws ConfigurationEx\n         }\n         return conf;\n     }\n-    \n+\n+    public boolean getStatusEnabled()\n+    {\n+        return getConfig().getBoolean(\"status-updates\", true);\n+    }\n+\n     // Our configuration class needs to make the interpolate method\n     // public so it can be called below from the config method.\n     private static class MyConfiguration extends CompositeConfiguration\n@@ -541,4 +547,13 @@ public long getHousekeepingCheckPeriod()\n                    getConfig().getLong(\"housekeeping.expiredMessageCheckPeriod\", \n                            DEFAULT_HOUSEKEEPING_PERIOD));\n     }\n+\n+    public boolean getStatusUpdates()\n+    {\n+        // Retrieve the setting from configuration but default to on.\n+        String value = getConfig().getString(\"status-updates\", \"on\");\n+\n+        return value.equalsIgnoreCase(\"on\");\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/configuration/ServerConfiguration.java",
                "sha": "fc16b75e1a413fb97204074259c4fc4e56787735",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 2,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java",
                "patch": "@@ -54,8 +54,11 @@ public void methodReceived(AMQStateManager stateManager, ChannelOpenBody body, i\n         AMQProtocolSession session = stateManager.getProtocolSession();\n         VirtualHost virtualHost = session.getVirtualHost();\n \n-        final AMQChannel channel = new AMQChannel(session,channelId, virtualHost.getMessageStore()\n-        );\n+        final AMQChannel channel = new AMQChannel(session,channelId,\n+                                                  virtualHost.getMessageStore());\n+\n+        \n+\n         session.addChannel(channel);\n \n         ChannelOpenOkBody response;",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java",
                "sha": "5d7adc63719332eb39c9927ad0fa34ebbe822541",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/BrokerMessages.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/BrokerMessages.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/BrokerMessages.java",
                "patch": "@@ -0,0 +1,34 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+public class BrokerMessages\n+{\n+\n+    public static LogMessage BRK_1001(String version, String build)\n+    {\n+        return new LogMessage()\n+        {\n+            \n+        };\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/BrokerMessages.java",
                "sha": "e9cc7449cd120db31208fd59fc4bfba1903d3b33",
                "status": "added"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/LogActor.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/LogActor.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/LogActor.java",
                "patch": "@@ -0,0 +1,43 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ *\n+ */\n+package org.apache.qpid.server.logging;\n+\n+/**\n+ * LogActor the entity that is stored as in a ThreadLocal and used to perform logging.\n+ *\n+ * The actor is responsible for formatting its display name for the log entry.\n+ *\n+ * The actor performs the requested logging.\n+ */\n+public interface LogActor\n+{\n+    /**\n+     * Logs the specified LogMessage about the LogSubject\n+     *\n+     * Currently logging has a global setting however this will later be revised and\n+     * as such the LogActor will need to take into consideration any new configuration\n+     * as a means of enabling the logging of LogActors and LogSubjects.\n+     *\n+     * @param subject The subject that is being logged\n+     * @param message The message to log\n+     */\n+    public void message(LogSubject subject, LogMessage message);\n+} \n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/LogActor.java",
                "sha": "203a5d160d2b869677615e361a760127f93226e0",
                "status": "added"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/LogMessage.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/LogMessage.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/LogMessage.java",
                "patch": "@@ -0,0 +1,26 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+public interface LogMessage\n+{\n+       \n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/LogMessage.java",
                "sha": "5c112ff100a0e7db3165d17d379f8f029c1cebd3",
                "status": "added"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/LogSubject.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/LogSubject.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/LogSubject.java",
                "patch": "@@ -0,0 +1,37 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+/**\n+ * Each LogSubject that wishes to be logged will implement this to provide their\n+ * own display representation.\n+ *\n+ * The display representation is retrieved through the toString() method.\n+ */\n+public interface LogSubject \n+{\n+    /**\n+     * Logs the message as provided by String.valueOf(message).\n+     *\n+     * @returns String the display representation of this LogSubject\n+     */\n+    public String toString();\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/LogSubject.java",
                "sha": "e53ef364bfda644d8cb57eda56bace5b444fa925",
                "status": "added"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/RawMessageLogger.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/RawMessageLogger.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/RawMessageLogger.java",
                "patch": "@@ -0,0 +1,44 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+/**\n+ * A RawMessage Logger takes the given String and any Throwable and writes the\n+ * data to its resource.\n+ */\n+public interface RawMessageLogger\n+{\n+\n+    /**\n+     * Log the given message.\n+     *\n+     * @param message   String to log.\n+     */\n+    public void rawMessage(String message);\n+\n+    /**\n+     * Log the message and formatted stack trace for any Throwable.\n+     *\n+     * @param message   String to log.\n+     * @param throwable Throwable for which to provide stack trace.\n+     */\n+    public void rawMessage(String message, Throwable throwable);\n+} \n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/RawMessageLogger.java",
                "sha": "7d515f3263abaae04f54ae2c74a74b45fcc683e2",
                "status": "added"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/RootMessageLogger.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/RootMessageLogger.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/RootMessageLogger.java",
                "patch": "@@ -0,0 +1,56 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+/**\n+ * The RootMessageLogger is used by the LogActors to query if\n+ * logging is enabled for the requested message and to provide the actual\n+ * message that should be logged.\n+ */\n+public interface RootMessageLogger\n+{\n+    /**\n+     * Determine if the LogSubject and the LogActor should be\n+     * generating log messages.\n+     *\n+     * @param subject The subject of this log request\n+     * @param actor   The actor requesting the logging\n+     * @return boolean true if the message should be logged.\n+     */\n+    boolean isMessageEnabled(LogActor actor, LogSubject subject);\n+\n+\n+    /**\n+     * Log the raw message to the configured logger.\n+     *\n+     * @param message   The message to log\n+     */\n+    public void rawMessage(String message);\n+\n+    /**\n+     * Log the raw message to the configured logger.\n+     * Along with a formated stack trace from the Throwable.\n+     *\n+     * @param message   The message to log\n+     * @param throwable Optional Throwable that should provide stact trace\n+     */\n+    void rawMessage(String message, Throwable throwable);\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/RootMessageLogger.java",
                "sha": "cd7992faa70183b6f9d4eda0d96edb9f2547d5e2",
                "status": "added"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/RootMessageLoggerImpl.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/RootMessageLoggerImpl.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/RootMessageLoggerImpl.java",
                "patch": "@@ -0,0 +1,52 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+import org.apache.qpid.server.configuration.ServerConfiguration;\n+\n+public class RootMessageLoggerImpl implements RootMessageLogger\n+{\n+    private boolean _enabled;\n+\n+    RawMessageLogger _rawLogger;\n+    private static final String MESSAGE = \"MESSAGE \";\n+\n+    public RootMessageLoggerImpl(ServerConfiguration configuration, RawMessageLogger rawLogger)\n+    {\n+        _enabled = configuration.getStatusUpdates();\n+        _rawLogger = rawLogger;\n+    }\n+\n+    public boolean isMessageEnabled(LogActor actor, LogSubject subject)\n+    {\n+        return _enabled;\n+    }\n+\n+    public void rawMessage(String message)\n+    {\n+        _rawLogger.rawMessage(MESSAGE + message);\n+    }\n+\n+    public void rawMessage(String message, Throwable throwable)\n+    {\n+        _rawLogger.rawMessage(MESSAGE + message, throwable);\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/RootMessageLoggerImpl.java",
                "sha": "9270c316b6935007f6d393deb0f159bdf851e392",
                "status": "added"
            },
            {
                "additions": 79,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPChannelActor.java",
                "changes": 79,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPChannelActor.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPChannelActor.java",
                "patch": "@@ -0,0 +1,79 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+import org.apache.qpid.server.logging.subjects.ChannelLogSubject;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+import java.text.MessageFormat;\n+\n+/**\n+ * An AMQPChannelActor represtents a connection through the AMQP port with an\n+ * associated Channel.\n+ *\n+ * <p/>\n+ * This is responsible for correctly formatting the LogActor String in the log\n+ * <p/>\n+ * [con:1(user@127.0.0.1/)/ch:1]\n+ * <p/>\n+ * To do this it requires access to the IO Layers as well as a Channel\n+ */\n+public class AMQPChannelActor extends AbstractActor\n+{\n+\n+    /**\n+     * Create a new ChannelActor\n+     *\n+     * @param channel    The Channel for this LogActor\n+     * @param rootLogger The root Logger that this LogActor should use\n+     */\n+    public AMQPChannelActor(AMQChannel channel, RootMessageLogger rootLogger)\n+    {\n+        super(rootLogger);\n+\n+        AMQProtocolSession session = channel.getProtocolSession();\n+\n+        /**\n+         * LOG FORMAT used by the AMQPConnectorActor follows\n+         * ChannelLogSubject.CHANNEL_FORMAT :\n+         * con:{0}({1}@{2}/{3})/ch:{4}\n+         *\n+         * Uses a MessageFormat call to insert the requried values according to\n+         * these indicies:\n+         *\n+         * 0 - Connection ID\n+         * 1 - User ID\n+         * 2 - IP\n+         * 3 - Virtualhost\n+         */\n+        _logString = \"[\" + MessageFormat.format(ChannelLogSubject.CHANNEL_FORMAT,\n+                                               session.getSessionID(),\n+                                               session.getAuthorizedID().getName(),\n+                                               session.getRemoteAddress(),\n+                                               session.getVirtualHost().getName(),\n+                                               channel.getChannelId())\n+                    + \"] \";\n+    }\n+}\n+",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPChannelActor.java",
                "sha": "3170040a77735de63953029a3a6b5107cefb318a",
                "status": "added"
            },
            {
                "additions": 115,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPConnectionActor.java",
                "changes": 115,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPConnectionActor.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPConnectionActor.java",
                "patch": "@@ -0,0 +1,115 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+import org.apache.qpid.server.logging.subjects.ConnectionLogSubject;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+\n+import java.text.MessageFormat;\n+\n+/**\n+ * An AMQPConnectionActor represtents a connectionthrough the AMQP port.\n+ * <p/>\n+ * This is responsible for correctly formatting the LogActor String in the log\n+ * <p/>\n+ * [ con:1(user@127.0.0.1/) ]\n+ * <p/>\n+ * To do this it requires access to the IO Layers.\n+ */\n+public class AMQPConnectionActor extends AbstractActor\n+{\n+    /**\n+     * 0 - Connection ID\n+     * 1 - Remote Address\n+     */\n+    public static String SOCKET_FORMAT = \"con:{0}({1})\";\n+\n+    /**\n+     * LOG FORMAT for the ConnectionLogSubject,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Connection ID\n+     * 1 - User ID\n+     * 2 - IP\n+     */\n+    public static final String USER_FORMAT = \"con:{0}({1}@{2})\";\n+\n+    public AMQPConnectionActor(AMQProtocolSession session, RootMessageLogger rootLogger)\n+    {\n+        super(rootLogger);\n+\n+        _logString = \"[\" + MessageFormat.format(SOCKET_FORMAT,\n+                                                session.getSessionID(),\n+                                                session.getRemoteAddress())\n+\n+                     + \"] \";\n+    }\n+\n+    /**\n+     * Call when the connection has been authorized so that the logString\n+     * can be updated with the new user identity.\n+     *\n+     * @param session the authorized session\n+     */\n+    public void connectionAuthorized(AMQProtocolSession session)\n+    {\n+        _logString = \"[\" + MessageFormat.format(USER_FORMAT,\n+                                                session.getSessionID(),\n+                                                session.getAuthorizedID().getName(),\n+                                                session.getRemoteAddress())\n+                     + \"] \";\n+\n+    }\n+\n+    /**\n+     * Called once the user has been authenticated and they are now selecting\n+     * the virtual host they wish to use.\n+     *\n+     * @param session the session that now has a virtualhost associated with it.\n+     */\n+    public void virtualHostSelected(AMQProtocolSession session)\n+    {\n+\n+        /**\n+         * LOG FORMAT used by the AMQPConnectorActor follows\n+         * ConnectionLogSubject.CONNECTION_FORMAT :\n+         * con:{0}({1}@{2}/{3})\n+         *\n+         * Uses a MessageFormat call to insert the requried values according to\n+         * these indicies:\n+         *\n+         * 0 - Connection ID\n+         * 1 - User ID\n+         * 2 - IP\n+         * 3 - Virtualhost\n+         */\n+        _logString = \"[\" + MessageFormat.format(ConnectionLogSubject.CONNECTION_FORMAT,\n+                                                session.getSessionID(),\n+                                                session.getAuthorizedID().getName(),\n+                                                session.getRemoteAddress(),\n+                                                session.getVirtualHost().getName())\n+                     + \"] \";\n+\n+    }\n+}\n+",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPConnectionActor.java",
                "sha": "432b1d820306de05e120e6d8ed60052286d9aad5",
                "status": "added"
            },
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/AbstractActor.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/AbstractActor.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/AbstractActor.java",
                "patch": "@@ -0,0 +1,45 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import org.apache.qpid.server.logging.LogActor;\n+import org.apache.qpid.server.logging.LogMessage;\n+import org.apache.qpid.server.logging.LogSubject;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+\n+public abstract class AbstractActor implements LogActor\n+{\n+    protected String _logString;\n+    protected RootMessageLogger _rootLogger;\n+\n+    public AbstractActor(RootMessageLogger rootLogger)\n+    {\n+        _rootLogger = rootLogger;\n+    }\n+\n+    public void message(LogSubject subject, LogMessage message)\n+    {\n+        if (_rootLogger.isMessageEnabled(this, subject))\n+        {\n+            _rootLogger.rawMessage(_logString + String.valueOf(subject) + message);\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/AbstractActor.java",
                "sha": "95f2dc9ff6d4a92394d35d445cb7186e7de060cc",
                "status": "added"
            },
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/CurrentActor.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/CurrentActor.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/CurrentActor.java",
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import org.apache.qpid.server.logging.LogActor;\n+\n+import java.util.LinkedList;\n+import java.util.Deque;\n+\n+public class CurrentActor\n+{\n+    private static final ThreadLocal<Deque<LogActor>> _currentActor = new ThreadLocal<Deque<LogActor>>()\n+    {\n+        protected Deque<LogActor> initialValue()\n+        {\n+            return new LinkedList<LogActor>();\n+        }\n+    };\n+\n+    public static void set(LogActor actor)\n+    {\n+        Deque<LogActor> stack = _currentActor.get();\n+        stack.addFirst(actor);\n+    }\n+\n+    public static void remove()\n+    {\n+        Deque<LogActor> stack = _currentActor.get();\n+        stack.remove();\n+    }\n+\n+    public static LogActor get()\n+    {\n+        return _currentActor.get().peek();\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/CurrentActor.java",
                "sha": "221e57eebb99392a6ede38c022083f0afbb6bbbc",
                "status": "added"
            },
            {
                "additions": 57,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/ManagementActor.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/ManagementActor.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/ManagementActor.java",
                "patch": "@@ -0,0 +1,57 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+\n+import java.text.MessageFormat;\n+import java.security.Principal;\n+\n+public class ManagementActor extends AbstractActor\n+{\n+\n+    /**\n+     * LOG FORMAT for the ManagementActor,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Connection ID\n+     * 1 - User ID\n+     * 2 - IP\n+     */\n+    public static final String MANAGEMENT_FORMAT = \"mng:{0}({1}@{2})\";\n+\n+    /**\n+     * //todo Correct interface to provide connection details\n+     * @param user\n+     * @param rootLogger The RootLogger to use for this Actor\n+     */\n+    public ManagementActor(Principal user, RootMessageLogger rootLogger)\n+    {\n+        super(rootLogger);\n+\n+        _logString = \"[\"+ MessageFormat.format(MANAGEMENT_FORMAT,\n+                                          \"<MNG:ConnectionID>\",\n+                                          user.getName(),\n+                                          \"<MNG:RemoteAddress>\")\n+                     + \"] \";\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/actors/ManagementActor.java",
                "sha": "58d55a13bb64020ca5997fb1c69922a315020b61",
                "status": "added"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLogger.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLogger.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLogger.java",
                "patch": "@@ -0,0 +1,55 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging.rawloggers;\n+\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.apache.qpid.server.logging.RawMessageLogger;\n+\n+public class Log4jMessageLogger implements RawMessageLogger\n+{\n+    public static final String DEFAULT_LEVEL = \"INFO\";\n+    public static final String DEFAULT_LOGGER = \"qpid.message\";\n+    private Level _level;\n+    private Logger _rawMessageLogger;\n+\n+    public Log4jMessageLogger()\n+    {\n+        this(DEFAULT_LEVEL, DEFAULT_LOGGER);\n+    }\n+\n+    public Log4jMessageLogger(String level, String logger)\n+    {\n+        _level = Level.toLevel(level);\n+\n+        _rawMessageLogger = Logger.getLogger(logger);\n+    }\n+\n+    public void rawMessage(String message)\n+    {\n+        rawMessage(message, null);\n+    }\n+\n+    public void rawMessage(String message, Throwable throwable)\n+    {\n+        _rawMessageLogger.log(_level, message, throwable);\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLogger.java",
                "sha": "377415562676ebdcecfc47a9e4e12493285eeecf",
                "status": "added"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/AbstractLogSubject.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/AbstractLogSubject.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/AbstractLogSubject.java",
                "patch": "@@ -0,0 +1,64 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.logging.LogSubject;\n+\n+import java.text.MessageFormat;\n+\n+/**\n+ * The LogSubjects all have a similar requriement to format their output and\n+ * provide the String value.\n+ *\n+ * This Abstract LogSubject provides this basic functionality, allowing the\n+ * actual LogSubjects to provide their formating and data.\n+ */\n+public abstract class AbstractLogSubject implements LogSubject\n+{\n+    /**\n+     * The logString that will be returned via toString\n+     */\n+    protected String logString;\n+\n+    /**\n+     * Set the toString logging of this LogSubject. Based on a format provided\n+     * by format and the var args.\n+     * @param format The Message to format\n+     * @param args The values to put in to the message.\n+     */\n+    protected void setLogStringWithFormat(String format, Object... args)\n+    {\n+        logString = \"[\" + MessageFormat.format(format, args) + \"] \";\n+    }\n+\n+    /**\n+     * ToString is how the Logging infrastructure will get the text for this\n+     * LogSubject\n+     *\n+     * @return String representing this LogSubject\n+     */\n+    @Override\n+    public String toString()\n+    {\n+        return logString;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/AbstractLogSubject.java",
                "sha": "4fb5bdcc934ecaf48906bcc9bfcf0ae338e49870",
                "status": "added"
            },
            {
                "additions": 62,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/BindingLogSubject.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/BindingLogSubject.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/BindingLogSubject.java",
                "patch": "@@ -0,0 +1,62 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.server.exchange.Exchange;\n+import org.apache.qpid.server.queue.AMQQueue;\n+\n+public class BindingLogSubject extends AbstractLogSubject\n+{\n+\n+    /**\n+     * LOG FORMAT for the ChannelLogSubject,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Virtualhost Name\n+     * 1 - Exchange Type\n+     * 2 - Exchange Name\n+     * 3 - Queue Name\n+     * 4 - Binding RoutingKey\n+     */\n+    protected static String BINDING_FORMAT = \"vh(/{0})/ex({1}/{2})/qu({3})/rk({4})\";\n+\n+    /**\n+     * Create a BindingLogSubject that Logs in the following format.\n+     *\n+     * [ vh(/)/ex(amq.direct)/qu(testQueue)/bd(testQueue) ]\n+     *\n+     * @param routingKey\n+     * @param exchange\n+     * @param queue\n+     */\n+    public BindingLogSubject(AMQShortString routingKey, Exchange exchange,\n+                             AMQQueue queue)\n+    {\n+        setLogStringWithFormat(BINDING_FORMAT, queue.getVirtualHost().getName(),\n+                               exchange.getType(),\n+                               exchange.getName(),\n+                               queue.getName(),\n+                               routingKey);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/BindingLogSubject.java",
                "sha": "fd171fea5a6817a6d3f32889165a056329c4eb42",
                "status": "added"
            },
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/ChannelLogSubject.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/ChannelLogSubject.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/ChannelLogSubject.java",
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+\n+public class ChannelLogSubject extends AbstractLogSubject\n+{\n+    /**\n+     * LOG FORMAT for the ChannelLogSubject,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Connection ID\n+     * 1 - User ID\n+     * 2 - IP\n+     * 3 - Virtualhost\n+     * 4 - Channel ID\n+     */\n+    public static String CHANNEL_FORMAT = ConnectionLogSubject.CONNECTION_FORMAT\n+                                             + \"/ch:{4}\";\n+\n+    public ChannelLogSubject(AMQChannel channel)\n+    {\n+        AMQProtocolSession session = channel.getProtocolSession();\n+\n+        // Provide the value for the 4th replacement.\n+        setLogStringWithFormat(CHANNEL_FORMAT,\n+              session.getSessionID(),\n+              session.getAuthorizedID().getName(),\n+              session.getRemoteAddress(),\n+              session.getVirtualHost().getName(),\n+              channel.getChannelId());\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/ChannelLogSubject.java",
                "sha": "1b22de6d015ff24a39263b8363832e896abbfaee",
                "status": "added"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubject.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubject.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubject.java",
                "patch": "@@ -0,0 +1,48 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+\n+/** The Connection LogSubject */\n+public class ConnectionLogSubject extends AbstractLogSubject\n+{\n+\n+    /**\n+     * LOG FORMAT for the ConnectionLogSubject,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Connection ID\n+     * 1 - User ID\n+     * 2 - IP\n+     * 3 - Virtualhost\n+     */\n+    public static final String CONNECTION_FORMAT = \"con:{0}({1}@{2}/{3})\";\n+\n+    public ConnectionLogSubject(AMQProtocolSession session)\n+    {\n+        setLogStringWithFormat(CONNECTION_FORMAT, session.getSessionID(),\n+               session.getAuthorizedID().getName(),\n+               session.getRemoteAddress(),\n+               session.getVirtualHost().getName());\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubject.java",
                "sha": "e07dbcda2366ffec0de48d98d5d0a72103127d9c",
                "status": "added"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubject.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubject.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubject.java",
                "patch": "@@ -0,0 +1,46 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.exchange.Exchange;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+public class ExchangeLogSubject extends AbstractLogSubject\n+{\n+\n+    /**\n+     * LOG FORMAT for the ExchangeLogSubject,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Virtualhost Name\n+     * 1 - Exchange Type\n+     * 2 - Exchange Name\n+     */\n+    protected static String BINDING_FORMAT = \"vh(/{0})/ex({1}/{2})\";\n+\n+    /** Create an ExchangeLogSubject that Logs in the following format. */\n+    public ExchangeLogSubject(Exchange exchange, VirtualHost vhost)\n+    {\n+        setLogStringWithFormat(BINDING_FORMAT, vhost.getName(),\n+                               exchange.getType(), exchange.getName());\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubject.java",
                "sha": "21e5f5e4ce9884fb2156741994db28275ed1ed95",
                "status": "added"
            },
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/QueueLogSubject.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/QueueLogSubject.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/QueueLogSubject.java",
                "patch": "@@ -0,0 +1,45 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.queue.AMQQueue;\n+\n+public class QueueLogSubject extends AbstractLogSubject\n+{\n+\n+    /**\n+     * LOG FORMAT for the ExchangeLogSubject,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Virtualhost name\n+     * 1 - queue name\n+     */\n+    protected static String BINDING_FORMAT = \"vh(/{0})/qu({1})\";\n+\n+    /** Create an QueueLogSubject that Logs in the following format. */\n+    public QueueLogSubject(AMQQueue queue)\n+    {\n+        setLogStringWithFormat(BINDING_FORMAT,\n+                               queue.getVirtualHost().getName(),\n+                               queue.getName());\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/QueueLogSubject.java",
                "sha": "89f31ef477abb98df0eb11c51c0a7fd22f2adbc6",
                "status": "added"
            },
            {
                "additions": 49,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubject.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubject.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubject.java",
                "patch": "@@ -0,0 +1,49 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.subscription.Subscription;\n+\n+public class SubscriptionLogSubject extends AbstractLogSubject\n+{\n+\n+    /**\n+     * LOG FORMAT for the SubscriptionLogSubject,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Subscription ID\n+     * 1 - queue name\n+     */\n+    protected static String BINDING_FORMAT = \"sub:{0}(qu({1}))\";\n+\n+    /**\n+     * Create an QueueLogSubject that Logs in the following format.\n+     *\n+     * @param subscription\n+     */\n+    public SubscriptionLogSubject(Subscription subscription)\n+    {\n+\n+        setLogStringWithFormat(BINDING_FORMAT, subscription.getSubscriptionID(),\n+                               subscription.getQueue().getName());\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubject.java",
                "sha": "b68ef2e9a905f0f953f23766eb0b1fe56650784a",
                "status": "added"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 6,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java",
                "patch": "@@ -21,26 +21,39 @@\n package org.apache.qpid.server.protocol;\n \n import org.apache.log4j.Logger;\n-\n+import org.apache.mina.common.CloseFuture;\n import org.apache.mina.common.IdleStatus;\n import org.apache.mina.common.IoServiceConfig;\n import org.apache.mina.common.IoSession;\n-import org.apache.mina.common.CloseFuture;\n import org.apache.mina.transport.vmpipe.VmPipeAddress;\n-\n import org.apache.qpid.AMQChannelException;\n import org.apache.qpid.AMQConnectionException;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.codec.AMQCodecFactory;\n import org.apache.qpid.codec.AMQDecoder;\n import org.apache.qpid.common.ClientProperties;\n-import org.apache.qpid.framing.*;\n+import org.apache.qpid.framing.AMQBody;\n+import org.apache.qpid.framing.AMQDataBlock;\n+import org.apache.qpid.framing.AMQFrame;\n+import org.apache.qpid.framing.AMQMethodBody;\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.framing.ChannelCloseOkBody;\n+import org.apache.qpid.framing.ContentBody;\n+import org.apache.qpid.framing.ContentHeaderBody;\n+import org.apache.qpid.framing.FieldTable;\n+import org.apache.qpid.framing.HeartbeatBody;\n+import org.apache.qpid.framing.MethodDispatcher;\n+import org.apache.qpid.framing.MethodRegistry;\n+import org.apache.qpid.framing.ProtocolInitiation;\n+import org.apache.qpid.framing.ProtocolVersion;\n import org.apache.qpid.pool.ReadWriteThreadModel;\n import org.apache.qpid.protocol.AMQConstant;\n import org.apache.qpid.protocol.AMQMethodEvent;\n import org.apache.qpid.protocol.AMQMethodListener;\n import org.apache.qpid.server.AMQChannel;\n import org.apache.qpid.server.handler.ServerMethodDispatcherImpl;\n+import org.apache.qpid.server.logging.actors.AMQPConnectionActor;\n+import org.apache.qpid.server.logging.actors.CurrentActor;\n import org.apache.qpid.server.management.Managable;\n import org.apache.qpid.server.management.ManagedObject;\n import org.apache.qpid.server.output.ProtocolOutputConverter;\n@@ -54,7 +67,6 @@\n \n import javax.management.JMException;\n import javax.security.sasl.SaslServer;\n-\n import java.net.InetSocketAddress;\n import java.net.SocketAddress;\n import java.security.Principal;\n@@ -64,13 +76,16 @@\n import java.util.Map;\n import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.atomic.AtomicLong;\n \n public class AMQMinaProtocolSession implements AMQProtocolSession, Managable\n {\n     private static final Logger _logger = Logger.getLogger(AMQProtocolSession.class);\n \n     private static final String CLIENT_PROPERTIES_INSTANCE = ClientProperties.instance.toString();\n \n+    private static final AtomicLong idGenerator = new AtomicLong(0);\n+\n     // to save boxing the channelId and looking up in a map... cache in an array the low numbered\n     // channels.  This value must be of the form 2^x - 1.\n     private static final int CHANNEL_CACHE_SIZE = 0xff;\n@@ -120,6 +135,11 @@\n     private static final long LAST_WRITE_FUTURE_JOIN_TIMEOUT = 60000L;\n     private org.apache.mina.common.WriteFuture _lastWriteFuture;\n \n+    // Create a simple ID that increments for ever new Session\n+    private final long _sessionID = idGenerator.getAndIncrement();\n+\n+    private AMQPConnectionActor _actor;\n+\n     public ManagedObject getManagedObject()\n     {\n         return _managedObject;\n@@ -134,6 +154,8 @@ public AMQMinaProtocolSession(IoSession session, VirtualHostRegistry virtualHost\n \n         _codecFactory = codecFactory;\n \n+        _actor = new AMQPConnectionActor(this, virtualHostRegistry.getApplicationRegistry().getRootMessageLogger());\n+\n         try\n         {\n             IoServiceConfig config = session.getServiceConfig();\n@@ -158,6 +180,7 @@ public AMQMinaProtocolSession(IoSession session, VirtualHostRegistry virtualHost\n \n         _codecFactory = codecFactory;\n \n+        _actor = new AMQPConnectionActor(this, virtualHostRegistry.getApplicationRegistry().getRootMessageLogger());\n     }\n \n     private AMQProtocolSessionMBean createMBean() throws AMQException\n@@ -183,6 +206,11 @@ public static AMQProtocolSession getAMQProtocolSession(IoSession minaProtocolSes\n         return (AMQProtocolSession) minaProtocolSession.getAttachment();\n     }\n \n+    public long getSessionID()\n+    {\n+        return _sessionID;\n+    }\n+\n     public void dataBlockReceived(AMQDataBlock message) throws Exception\n     {\n         _lastReceived = message;\n@@ -235,6 +263,7 @@ private void frameReceived(AMQFrame frame) throws AMQException\n             }\n         }\n \n+        CurrentActor.set(_actor);\n         try\n         {\n             body.handle(channelId, this);\n@@ -244,7 +273,10 @@ private void frameReceived(AMQFrame frame) throws AMQException\n             closeChannel(channelId);\n             throw e;\n         }\n-\n+        finally\n+        {\n+            CurrentActor.remove();\n+        }\n     }\n \n     private void protocolInitiationReceived(ProtocolInitiation pi)\n@@ -796,6 +828,8 @@ public void setVirtualHost(VirtualHost virtualHost) throws AMQException\n     {\n         _virtualHost = virtualHost;\n \n+        _actor.virtualHostSelected(this);\n+\n         _virtualHost.getConnectionRegistry().registerConnection(this);\n \n         _managedObject = createMBean();\n@@ -820,13 +854,21 @@ public ProtocolOutputConverter getProtocolOutputConverter()\n     public void setAuthorizedID(Principal authorizedID)\n     {\n         _authorizedID = authorizedID;\n+\n+        // Let the actor know that this connection is now Authorized\n+        _actor.connectionAuthorized(this);\n     }\n \n     public Principal getAuthorizedID()\n     {\n         return _authorizedID;\n     }\n \n+    public SocketAddress getRemoteAddress()\n+    {\n+        return _minaProtocolSession.getRemoteAddress();\n+    }\n+\n     public MethodRegistry getMethodRegistry()\n     {\n         return MethodRegistry.getMethodRegistry(getProtocolVersion());",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java",
                "sha": "e46a52f3bfc910d21327fd42c98071106bbb9686",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java",
                "patch": "@@ -36,6 +36,7 @@\n \n public interface AMQProtocolSession extends AMQVersionAwareProtocolSession\n {\n+    long getSessionID();\n \n     public static final class ProtocolSessionIdentifier\n     {\n@@ -198,6 +199,8 @@ public Object getSessionInstance()\n     /** @return a Principal that was used to authorized this session */\n     Principal getAuthorizedID();\n \n+    public java.net.SocketAddress getRemoteAddress();\n+\n     public MethodRegistry getMethodRegistry();\n \n     public MethodDispatcher getMethodDispatcher();",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java",
                "sha": "f721730d9c71080a26d028029e2d444660e1b9fd",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java",
                "patch": "@@ -202,13 +202,23 @@ public VirtualHost getVirtualHost()\n \n     public void bind(Exchange exchange, AMQShortString routingKey, FieldTable arguments) throws AMQException\n     {\n+\n         exchange.registerQueue(routingKey, this, arguments);\n         if (isDurable() && exchange.isDurable())\n         {\n             _virtualHost.getMessageStore().bindQueue(exchange, routingKey, this, arguments);\n         }\n \n         _bindings.addBinding(routingKey, arguments, exchange);\n+//        ExchangeBinding binding = new ExchangeBinding(routingKey, exchange, arguments);\n+\n+        //fixme MR logging in progress\n+//        _bindings.addBinding(binding);\n+//\n+//        if (_logger.isMessageEnabled(binding))\n+//        {\n+//            _logger.message(binding, \"QM-1001 : Created Binding\");\n+//        }\n     }\n \n     public void unBind(Exchange exchange, AMQShortString routingKey, FieldTable arguments) throws AMQException",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java",
                "sha": "8c6650830792b0069d2bdac15bf81164208f72cb",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.qpid.server.security.auth.manager.AuthenticationManager;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.virtualhost.VirtualHostRegistry;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n \n /**\n  * An abstract application registry that provides access to configuration information and handles the\n@@ -70,6 +71,8 @@\n \n     protected PluginManager _pluginManager;\n \n+    protected RootMessageLogger _rootMessageLogger;\n+\n     static\n     {\n         Runtime.getRuntime().addShutdownHook(new Thread(new ShutdownService()));\n@@ -287,4 +290,9 @@ public PluginManager getPluginManager()\n         return _pluginManager;\n     }\n \n+    public RootMessageLogger getRootMessageLogger()\n+    {\n+        return _rootMessageLogger;\n+    }\n+    \n }",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java",
                "sha": "b58b849133b1d5bd31c5041ec53d83d2019a2fb6",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java",
                "patch": "@@ -33,6 +33,8 @@\n import org.apache.qpid.server.security.auth.manager.PrincipalDatabaseAuthenticationManager;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.virtualhost.VirtualHostRegistry;\n+import org.apache.qpid.server.logging.RootMessageLoggerImpl;\n+import org.apache.qpid.server.logging.rawloggers.Log4jMessageLogger;\n \n public class ConfigurationFileApplicationRegistry extends ApplicationRegistry\n {\n@@ -44,9 +46,12 @@ public ConfigurationFileApplicationRegistry(File configurationURL) throws Config\n \n     public void initialise() throws Exception\n     {\n+        _rootMessageLogger = new RootMessageLoggerImpl(_configuration, \n+                                                       new Log4jMessageLogger());\n+\n         initialiseManagedObjectRegistry();\n \n-        _virtualHostRegistry = new VirtualHostRegistry();\n+        _virtualHostRegistry = new VirtualHostRegistry(this);\n \n         _pluginManager = new PluginManager(_configuration.getPluginDirectory());\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java",
                "sha": "31a85b878aea9040a8567cfc7ef7a14bd416e98b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/IApplicationRegistry.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/IApplicationRegistry.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/registry/IApplicationRegistry.java",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.qpid.server.security.access.ACLManager;\n import org.apache.qpid.server.security.access.ACLPlugin;\n import org.apache.qpid.server.virtualhost.VirtualHostRegistry;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n import org.apache.mina.common.IoAcceptor;\n \n public interface IApplicationRegistry\n@@ -69,6 +70,8 @@\n \n     PluginManager getPluginManager();\n \n+    RootMessageLogger getRootMessageLogger();\n+\n     /**\n      * Register any acceptors for this registry\n      * @param bindAddress The address that the acceptor has been bound with",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/IApplicationRegistry.java",
                "sha": "7d17639f2231784f2362644db5dae3e350ed7eb6",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java",
                "patch": "@@ -52,6 +52,8 @@\n \n     AMQShortString getConsumerTag();\n \n+    long getSubscriptionID();\n+\n     boolean isSuspended();\n \n     boolean hasInterest(QueueEntry msg);",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java",
                "sha": "19eabce9ff66601c16cb0fe3adb00150ff7acfc0",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java",
                "patch": "@@ -22,6 +22,7 @@\n \n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n+import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReentrantLock;\n \n@@ -66,6 +67,11 @@ public void stateChange(Subscription sub, State oldState, State newState)\n     private QueueEntry.SubscriptionAcquiredState _owningState = new QueueEntry.SubscriptionAcquiredState(this);\n     private final Lock _stateChangeLock;\n \n+    private static final AtomicLong idGenerator = new AtomicLong(0);\n+    // Create a simple ID that increments for ever new Subscription\n+    private final long _subscriptionID = idGenerator.getAndIncrement();\n+\n+\n     static final class BrowserSubscription extends SubscriptionImpl\n     {\n         public BrowserSubscription(AMQChannel channel, AMQProtocolSession protocolSession,\n@@ -526,6 +532,11 @@ public AMQShortString getConsumerTag()\n         return _consumerTag;\n     }\n \n+    public long getSubscriptionID()\n+    {\n+        return _subscriptionID;\n+    }\n+\n     public AMQProtocolSession getProtocolSession()\n     {\n         return _channel.getProtocolSession();",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java",
                "sha": "51da884d1eefb157680417f7543d61e2cee869d2",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/util/NullApplicationRegistry.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/util/NullApplicationRegistry.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 10,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/util/NullApplicationRegistry.java",
                "patch": "@@ -20,17 +20,12 @@\n  */\n package org.apache.qpid.server.util;\n \n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.Properties;\n-\n-import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.commons.configuration.MapConfiguration;\n import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.qpid.server.configuration.ServerConfiguration;\n import org.apache.qpid.server.configuration.VirtualHostConfiguration;\n+import org.apache.qpid.server.logging.RootMessageLoggerImpl;\n+import org.apache.qpid.server.logging.rawloggers.Log4jMessageLogger;\n import org.apache.qpid.server.management.NoopManagedObjectRegistry;\n import org.apache.qpid.server.plugins.PluginManager;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n@@ -41,6 +36,10 @@\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.virtualhost.VirtualHostRegistry;\n \n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Properties;\n+\n public class NullApplicationRegistry extends ApplicationRegistry\n {\n     public NullApplicationRegistry() throws ConfigurationException\n@@ -51,9 +50,11 @@ public NullApplicationRegistry() throws ConfigurationException\n     public void initialise() throws Exception\n     {\n         _logger.info(\"Initialising NullApplicationRegistry\");\n-        \n+\n+        _rootMessageLogger = new RootMessageLoggerImpl(_configuration, new Log4jMessageLogger());\n+\n         _configuration.setHousekeepingExpiredMessageCheckPeriod(200);\n-        \n+\n         Properties users = new Properties();\n \n         users.put(\"guest\", \"guest\");\n@@ -65,7 +66,7 @@ public void initialise() throws Exception\n         _authenticationManager = new PrincipalDatabaseAuthenticationManager(null, null);\n \n         _managedObjectRegistry = new NoopManagedObjectRegistry();\n-        _virtualHostRegistry = new VirtualHostRegistry();\n+        _virtualHostRegistry = new VirtualHostRegistry(this);\n         PropertiesConfiguration vhostProps = new PropertiesConfiguration();\n         VirtualHostConfiguration hostConfig = new VirtualHostConfiguration(\"test\", vhostProps);\n         VirtualHost dummyHost = new VirtualHost(hostConfig);",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/util/NullApplicationRegistry.java",
                "sha": "9ef1e029d3b49c30be041a378f092b788e275982",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostRegistry.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostRegistry.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostRegistry.java",
                "patch": "@@ -20,6 +20,9 @@\n  */\r\n package org.apache.qpid.server.virtualhost;\r\n \r\n+import org.apache.qpid.server.registry.ApplicationRegistry;\r\n+import org.apache.qpid.server.registry.ConfigurationFileApplicationRegistry;\r\n+\r\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n import java.util.Map;\r\n@@ -32,6 +35,12 @@\n \r\n \r\n     private String _defaultVirtualHostName;\r\n+    private ApplicationRegistry _applicationRegistry;\r\n+\r\n+    public VirtualHostRegistry(ApplicationRegistry applicationRegistry)\r\n+    {\r\n+        _applicationRegistry = applicationRegistry;\r\n+    }\r\n \r\n     public synchronized void registerVirtualHost(VirtualHost host) throws Exception\r\n     {\r\n@@ -67,4 +76,9 @@ public void setDefaultVirtualHostName(String defaultVirtualHostName)\n     {\r\n         return new ArrayList<VirtualHost>(_registry.values());\r\n     }\r\n+\r\n+    public ApplicationRegistry getApplicationRegistry()\r\n+    {\r\n+        return _applicationRegistry;\r\n+    }\r\n }\r",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostRegistry.java",
                "sha": "5543adbeb5de414229507e5e10ebb1140692d226",
                "status": "modified"
            },
            {
                "additions": 86,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/RootMessageLoggerImplTest.java",
                "changes": 86,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/RootMessageLoggerImplTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/RootMessageLoggerImplTest.java",
                "patch": "@@ -0,0 +1,86 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.qpid.server.configuration.ServerConfiguration;\n+import org.apache.qpid.server.logging.rawloggers.UnitTestMessageLogger;\n+\n+import java.util.List;\n+\n+public class RootMessageLoggerImplTest extends TestCase\n+{\n+\n+    RootMessageLogger _rootLogger;\n+    UnitTestMessageLogger _rawLogger;\n+\n+    public void setUp() throws ConfigurationException\n+    {\n+        Configuration config = new PropertiesConfiguration();\n+        ServerConfiguration serverConfig = new ServerConfiguration(config);\n+\n+        _rawLogger = new UnitTestMessageLogger();\n+\n+        _rootLogger = new RootMessageLoggerImpl(serverConfig, _rawLogger);\n+    }\n+\n+    public void tearDown()\n+    {\n+        _rawLogger.clearLogMessages();\n+    }\n+\n+    public void testLog()\n+    {\n+        String message = \"test logging\";\n+\n+        _rootLogger.rawMessage(message);\n+\n+        List<Object> logs = _rawLogger.getLogMessages();\n+\n+        assertEquals(\"Message log size not as expected.\", 1, logs.size());\n+\n+        assertTrue(logs.get(0).toString().contains(message));\n+    }\n+\n+    public void testLogWithThrowable()\n+    {\n+        String message = \"test logging\";\n+        Exception exception = new Exception(\"Test\");\n+\n+        _rootLogger.rawMessage(message, exception);\n+\n+        List<Object> logs = _rawLogger.getLogMessages();\n+\n+        assertEquals(\"Message log size not as expected.\", 2, logs.size());\n+\n+        String loggedMessage = (String) logs.get(0);\n+        assertTrue(\"Message not found in log:\" + loggedMessage,\n+                   loggedMessage.contains(message));\n+\n+        Exception fromLog = (Exception) logs.get(1);\n+        assertEquals(exception.getMessage(), fromLog.getMessage());\n+    }\n+\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/RootMessageLoggerImplTest.java",
                "sha": "012a59068786403ff5dbffa22410dac46739fb39",
                "status": "added"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/StatusUpdateConfigurationTest.java",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/StatusUpdateConfigurationTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/StatusUpdateConfigurationTest.java",
                "patch": "@@ -0,0 +1,73 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+import junit.framework.TestCase;\n+import org.apache.qpid.server.configuration.ServerConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Set of test to validate the effects of the changes made to the\n+ * ServerConfiguration to enable the enabling/disabling of status update\n+ * messages.\n+ *\n+ * The default is to on.\n+ */\n+public class StatusUpdateConfigurationTest extends TestCase\n+{\n+\n+    /**\n+     * Validate that with no configuration the status updates will default to\n+     * enabled.\n+     * @throws org.apache.commons.configuration.ConfigurationException\n+     * - if there was a problem in creating the configuratino\n+     */\n+    public void testEnabled() throws ConfigurationException\n+    {\n+\n+        ServerConfiguration serverConfig = new ServerConfiguration(\n+                new PropertiesConfiguration());\n+\n+        assertTrue(\"Status Updates not enabled as expected.\",\n+                   serverConfig.getStatusUpdates());\n+    }\n+\n+\n+    /**\n+     * Validate that through the config it is possible to disable status updates\n+     * @throws org.apache.commons.configuration.ConfigurationException\n+     * - if there was a problem in creating the configuratino\n+     */\n+    public void testUpdateControls() throws ConfigurationException\n+    {\n+\n+        Configuration config = new PropertiesConfiguration();\n+        ServerConfiguration serverConfig = new ServerConfiguration(config);\n+\n+        config.setProperty(\"status-updates\", \"off\");\n+\n+\n+        assertFalse(\"Status Updates should not be enabled.\",\n+                   serverConfig.getStatusUpdates());\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/StatusUpdateConfigurationTest.java",
                "sha": "9a3c18bf9999d97043c448dbd649c2145deede71",
                "status": "added"
            },
            {
                "additions": 206,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPChannelActorTest.java",
                "changes": 206,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPChannelActorTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPChannelActorTest.java",
                "patch": "@@ -0,0 +1,206 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.configuration.ServerConfiguration;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.queue.MockProtocolSession;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.store.MemoryMessageStore;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+import org.apache.qpid.server.logging.actors.AMQPConnectionActor;\n+import org.apache.qpid.server.logging.rawloggers.UnitTestMessageLogger;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+import org.apache.qpid.server.logging.RootMessageLoggerImpl;\n+import org.apache.qpid.server.logging.LogSubject;\n+import org.apache.qpid.server.logging.LogMessage;\n+import org.apache.qpid.server.logging.LogActor;\n+import org.apache.qpid.server.AMQChannel;\n+\n+import java.util.List;\n+\n+/**\n+ * Test : AMQPConnectionActorTest\n+ * Validate the AMQPConnectionActor class.\n+ *\n+ * The test creates a new AMQPActor and then logs a message using it.\n+ *\n+ * The test then verifies that the logged message was the only one created and\n+ * that the message contains the required message.\n+ */\n+public class AMQPChannelActorTest extends TestCase\n+{\n+\n+    LogActor _amqpActor;\n+    UnitTestMessageLogger _rawLogger;\n+\n+    public void setUp() throws ConfigurationException, AMQException\n+    {\n+        Configuration config = new PropertiesConfiguration();\n+        ServerConfiguration serverConfig = new ServerConfiguration(config);\n+\n+        _rawLogger = new UnitTestMessageLogger();\n+        RootMessageLogger rootLogger =\n+                new RootMessageLoggerImpl(serverConfig, _rawLogger);\n+\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        AMQProtocolSession session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+\n+\n+        AMQChannel channel = new AMQChannel(session, 1, session.getVirtualHost().getMessageStore());\n+\n+        _amqpActor = new AMQPChannelActor(channel, rootLogger);\n+\n+    }\n+\n+    public void tearDown()\n+    {\n+        _rawLogger.clearLogMessages();\n+    }\n+\n+    /**\n+     * Test that when logging on behalf of the channel\n+     * The test sends a message then verifies that it entered the logs.\n+     *\n+     * The log message should be fully repalaced (no '{n}' values) and should\n+     * contain the channel id ('/ch:1') identification.\n+     */\n+    public void testChannel()\n+    {\n+        final String message = \"test logging\";\n+\n+        _amqpActor.message(new LogSubject()\n+        {\n+            public String toString()\n+            {\n+                return \"[AMQPActorTest]\";\n+            }\n+\n+        }, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return message;\n+            }\n+        });\n+\n+        List<Object> logs = _rawLogger.getLogMessages();\n+\n+        assertEquals(\"Message log size not as expected.\", 1, logs.size());\n+\n+        // Verify that the logged message is present in the output\n+        assertTrue(\"Message was not found in log message:\" + logs.get(0),\n+                   logs.get(0).toString().contains(message));\n+\n+        // Verify that the message has the correct type\n+        assertTrue(\"Message contains the [con: prefix\",\n+                   logs.get(0).toString().contains(\"[con:\"));\n+        \n+\n+        // Verify that all the values were presented to the MessageFormatter\n+        // so we will not end up with '{n}' entries in the log.\n+        assertFalse(\"Verify that the string does not contain any '{'.\" + logs.get(0),\n+                    logs.get(0).toString().contains(\"{\"));\n+\n+        // Verify that the logged message contains the 'ch:1' marker\n+        assertTrue(\"Message was not logged as part of channel 1\" + logs.get(0),\n+                   logs.get(0).toString().contains(\"/ch:1\"));\n+\n+    }\n+\n+    public void testChannelLoggingOff() throws ConfigurationException, AMQException\n+    {\n+        Configuration config = new PropertiesConfiguration();\n+        config.addProperty(\"status-updates\", \"OFF\");\n+\n+        ServerConfiguration serverConfig = new ServerConfiguration(config);\n+\n+        _rawLogger = new UnitTestMessageLogger();\n+        RootMessageLogger rootLogger =\n+                new RootMessageLoggerImpl(serverConfig, _rawLogger);\n+\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        AMQProtocolSession session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+\n+\n+        AMQChannel channel = new AMQChannel(session, 1, session.getVirtualHost().getMessageStore());\n+\n+        _amqpActor = new AMQPChannelActor(channel, rootLogger);\n+\n+        final String message = \"test logging\";\n+\n+        _amqpActor.message(new LogSubject()\n+        {\n+            public String toString()\n+            {\n+                return \"[AMQPActorTest]\";\n+            }\n+\n+        }, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return message;\n+            }\n+        });\n+\n+        List<Object> logs = _rawLogger.getLogMessages();\n+\n+        assertEquals(\"Message log size not as expected.\", 0, logs.size());\n+\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPChannelActorTest.java",
                "sha": "298e3bc22cb3e8a1844dc2b8f49c777e4179c653",
                "status": "added"
            },
            {
                "additions": 202,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPConnectionActorTest.java",
                "changes": 202,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPConnectionActorTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPConnectionActorTest.java",
                "patch": "@@ -0,0 +1,202 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.configuration.ServerConfiguration;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.queue.MockProtocolSession;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.store.MemoryMessageStore;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+import org.apache.qpid.server.logging.actors.AMQPConnectionActor;\n+import org.apache.qpid.server.logging.rawloggers.UnitTestMessageLogger;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+import org.apache.qpid.server.logging.RootMessageLoggerImpl;\n+import org.apache.qpid.server.logging.LogSubject;\n+import org.apache.qpid.server.logging.LogMessage;\n+import org.apache.qpid.server.logging.LogActor;\n+\n+import java.util.List;\n+\n+/**\n+ * Test : AMQPConnectionActorTest\n+ * Validate the AMQPConnectionActor class.\n+ *\n+ * The test creates a new AMQPActor and then logs a message using it.\n+ *\n+ * The test then verifies that the logged message was the only one created and\n+ * that the message contains the required message.\n+ */\n+public class AMQPConnectionActorTest extends TestCase\n+{\n+\n+    LogActor _amqpActor;\n+    UnitTestMessageLogger _rawLogger;\n+\n+    public void setUp() throws ConfigurationException\n+    {\n+        Configuration config = new PropertiesConfiguration();\n+        ServerConfiguration serverConfig = new ServerConfiguration(config);\n+\n+        _rawLogger = new UnitTestMessageLogger();\n+        RootMessageLogger rootLogger =\n+                new RootMessageLoggerImpl(serverConfig, _rawLogger);\n+\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        AMQProtocolSession session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+\n+        _amqpActor = new AMQPConnectionActor(session, rootLogger);\n+    }\n+\n+    public void tearDown()\n+    {\n+        _rawLogger.clearLogMessages();\n+    }\n+\n+    /**\n+     * Test the AMQPActor logging as a Connection level.\n+     *\n+     * The test sends a message then verifies that it entered the logs.\n+     *\n+     * The log message should be fully repalaced (no '{n}' values) and should\n+     * not contain any channel identification.\n+     *\n+     */\n+    public void testConnection()\n+    {\n+        final String message = \"test logging\";\n+\n+        _amqpActor.message(new LogSubject()\n+        {\n+            public String toString()\n+            {\n+                return \"[AMQPActorTest]\";\n+            }\n+\n+        }, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return message;\n+            }\n+        });\n+\n+        List<Object> logs = _rawLogger.getLogMessages();\n+\n+        assertEquals(\"Message log size not as expected.\", 1, logs.size());\n+\n+        // Verify that the logged message is present in the output\n+        assertTrue(\"Message was not found in log message\",\n+                   logs.get(0).toString().contains(message));\n+\n+        // Verify that the message has the correct type\n+        assertTrue(\"Message contains the [con: prefix\",\n+                   logs.get(0).toString().contains(\"[con:\"));        \n+\n+        // Verify that all the values were presented to the MessageFormatter\n+        // so we will not end up with '{n}' entries in the log.\n+        assertFalse(\"Verify that the string does not contain any '{'.\",\n+                    logs.get(0).toString().contains(\"{\"));\n+\n+        // Verify that the logged message does not contains the 'ch:' marker\n+        assertFalse(\"Message was logged with a channel identifier.\" + logs.get(0),\n+                   logs.get(0).toString().contains(\"/ch:\"));\n+    }\n+\n+\n+\n+    public void testConnectionLoggingOff() throws ConfigurationException, AMQException\n+    {\n+        Configuration config = new PropertiesConfiguration();\n+        config.addProperty(\"status-updates\", \"OFF\");\n+\n+        ServerConfiguration serverConfig = new ServerConfiguration(config);\n+\n+        _rawLogger = new UnitTestMessageLogger();\n+        RootMessageLogger rootLogger =\n+                new RootMessageLoggerImpl(serverConfig, _rawLogger);\n+\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        AMQProtocolSession session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+\n+\n+        _amqpActor = new AMQPConnectionActor(session, rootLogger);\n+\n+        final String message = \"test logging\";\n+\n+        _amqpActor.message(new LogSubject()\n+        {\n+            public String toString()\n+            {\n+                return \"[AMQPActorTest]\";\n+            }\n+\n+        }, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return message;\n+            }\n+        });\n+\n+        List<Object> logs = _rawLogger.getLogMessages();\n+\n+        assertEquals(\"Message log size not as expected.\", 0, logs.size());\n+\n+    }\n+\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPConnectionActorTest.java",
                "sha": "c220865864453979ed5a0a4427fc7b277881e17f",
                "status": "added"
            },
            {
                "additions": 262,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/CurrentActorTest.java",
                "changes": 262,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/CurrentActorTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/CurrentActorTest.java",
                "patch": "@@ -0,0 +1,262 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import junit.framework.TestCase;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.logging.LogMessage;\n+import org.apache.qpid.server.logging.LogSubject;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.queue.MockProtocolSession;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.store.MemoryMessageStore;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+/**\n+ * Test : CurrentActorTest\n+ * Summary:\n+ * Validate ThreadLocal operation.\n+ *\n+ * Test creates THREADS number of threads which all then execute the same test\n+ * together ( as close as looping Thread.start() will allow).\n+ *\n+ * Test:\n+ * Test sets the CurrentActor then proceeds to retrieve the value and use it.\n+ *\n+ * The test also validates that it is the same LogActor that this thread set.\n+ *\n+ * Finally the LogActor is removed and tested to make sure that it was\n+ * successfully removed.\n+ *\n+ * By having a higher number of threads than would normally be used in the\n+ * Poolling filter we aim to catch the race condition where a ThreadLocal remove\n+ * is called before one or more threads call get(). This way we can ensure that\n+ * the remove does not affect more than the Thread it was called in.\n+ */\n+public class CurrentActorTest extends TestCase\n+{\n+    //Set this to be a reasonably large number\n+    int THREADS = 10;\n+\n+    // Record any exceptions that are thrown by the threads\n+    final Exception[] _errors = new Exception[THREADS];\n+\n+    // Create a single session for this test.\n+    AMQProtocolSession session;\n+\n+    public void setUp()\n+    {\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+    }\n+\n+    public void testFIFO() throws AMQException\n+    {\n+        // Create a new actor using retrieving the rootMessageLogger from\n+        // the default ApplicationRegistry.\n+        //fixme reminder that we need a better approach for broker testing.\n+        AMQPConnectionActor connectionActor = new AMQPConnectionActor(session,\n+                                                                      ApplicationRegistry.getInstance().\n+                                                                              getRootMessageLogger());\n+\n+        CurrentActor.set(connectionActor);\n+\n+        //Use the Actor to send a simple message\n+        CurrentActor.get().message(new LogSubject()\n+        {\n+            public String toString()\n+            {\n+                return \"[CurrentActorTest] \";\n+            }\n+\n+        }, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return \"Connection Log Msg\";\n+            }\n+        });\n+\n+        // Verify it was the same actor as we set earlier\n+        assertEquals(\"Retrieved actor is not as expected \",\n+                     connectionActor, CurrentActor.get());\n+\n+        /**\n+         * Set the actor to nwo be the Channel actor so testing the ability\n+         * to push the actor on to the stack\n+         */\n+\n+        AMQChannel channel = new AMQChannel(session, 1, session.getVirtualHost().getMessageStore());\n+\n+        AMQPChannelActor channelActor = new AMQPChannelActor(channel,\n+                                                             ApplicationRegistry.getInstance().\n+                                                                     getRootMessageLogger());\n+\n+        CurrentActor.set(channelActor);\n+\n+        //Use the Actor to send a simple message\n+        CurrentActor.get().message(new LogSubject()\n+        {\n+            public String toString()\n+            {\n+                return \"[CurrentActorTest] \";\n+            }\n+\n+        }, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return \"Channel Log Msg\";\n+            }\n+        });\n+\n+        // Verify it was the same actor as we set earlier\n+        assertEquals(\"Retrieved actor is not as expected \",\n+                     channelActor, CurrentActor.get());\n+\n+        // Remove the ChannelActor from the stack\n+        CurrentActor.remove();\n+\n+        // Verify we now have the same connection actor as we set earlier\n+        assertEquals(\"Retrieved actor is not as expected \",\n+                     connectionActor, CurrentActor.get());\n+\n+        // Verify that removing the last actor returns us to a null value.\n+        CurrentActor.remove();\n+\n+        assertNull(\"CurrentActor should be null\", CurrentActor.get());\n+\n+    }\n+\n+    public void testThreadLocal()\n+    {\n+\n+        // Setup the threads\n+        Thread[] threads = new Thread[THREADS];\n+        for (int count = 0; count < THREADS; count++)\n+        {\n+            Runnable test = new Test(count);\n+            threads[count] = new Thread(test);\n+        }\n+\n+        //Run the threads\n+        for (int count = 0; count < THREADS; count++)\n+        {\n+            threads[count].start();\n+        }\n+\n+        // Wait for them to finish\n+        for (int count = 0; count < THREADS; count++)\n+        {\n+            try\n+            {\n+                threads[count].join();\n+            }\n+            catch (InterruptedException e)\n+            {\n+                //if we are interrupted then we will exit shortly.\n+            }\n+        }\n+\n+        // Verify that none of the tests threw an exception\n+        for (int count = 0; count < THREADS; count++)\n+        {\n+            if (_errors[count] != null)\n+            {\n+                _errors[count].printStackTrace();\n+                fail(\"Error occured in thread:\" + count);\n+            }\n+        }\n+    }\n+\n+    public class Test implements Runnable\n+    {\n+        int count;\n+\n+        Test(int count)\n+        {\n+            this.count = count;\n+        }\n+\n+        public void run()\n+        {\n+\n+            // Create a new actor using retrieving the rootMessageLogger from\n+            // the default ApplicationRegistry.\n+            //fixme reminder that we need a better approach for broker testing.\n+            AMQPConnectionActor actor = new AMQPConnectionActor(session,\n+                                                                ApplicationRegistry.getInstance().\n+                                                                        getRootMessageLogger());\n+\n+            CurrentActor.set(actor);\n+\n+            try\n+            {\n+                //Use the Actor to send a simple message\n+                CurrentActor.get().message(new LogSubject()\n+                {\n+                    public String toString()\n+                    {\n+                        return \"[CurrentActorTest] \";\n+                    }\n+\n+                }, new LogMessage()\n+                {\n+                    public String toString()\n+                    {\n+                        return \"Running Thread:\" + count;\n+                    }\n+                });\n+\n+                // Verify it was the same actor as we set earlier\n+                assertEquals(\"Retrieved actor is not as expected \",\n+                             actor, CurrentActor.get());\n+\n+                // Verify that removing the actor works for this thread\n+                CurrentActor.remove();\n+\n+                assertNull(\"CurrentActor should be null\", CurrentActor.get());\n+            }\n+            catch (Exception e)\n+            {\n+                _errors[count] = e;\n+            }\n+\n+        }\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/CurrentActorTest.java",
                "sha": "c1cc3253a8a0d6ec77e45053f5ee42276e609dee",
                "status": "added"
            },
            {
                "additions": 125,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/ManagementActorTest.java",
                "changes": 125,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/ManagementActorTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/ManagementActorTest.java",
                "patch": "@@ -0,0 +1,125 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.qpid.server.configuration.ServerConfiguration;\n+import org.apache.qpid.server.logging.LogActor;\n+import org.apache.qpid.server.logging.LogMessage;\n+import org.apache.qpid.server.logging.LogSubject;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+import org.apache.qpid.server.logging.RootMessageLoggerImpl;\n+import org.apache.qpid.server.logging.rawloggers.UnitTestMessageLogger;\n+\n+import java.security.Principal;\n+import java.util.List;\n+\n+/**\n+ * Test : AMQPConnectionActorTest\n+ * Validate the AMQPConnectionActor class.\n+ *\n+ * The test creates a new AMQPActor and then logs a message using it.\n+ *\n+ * The test then verifies that the logged message was the only one created and\n+ * that the message contains the required message.\n+ */\n+public class ManagementActorTest extends TestCase\n+{\n+\n+    LogActor _amqpActor;\n+    UnitTestMessageLogger _rawLogger;\n+\n+    public void setUp() throws ConfigurationException\n+    {\n+        Configuration config = new PropertiesConfiguration();\n+        ServerConfiguration serverConfig = new ServerConfiguration(config);\n+\n+        _rawLogger = new UnitTestMessageLogger();\n+        RootMessageLogger rootLogger =\n+                new RootMessageLoggerImpl(serverConfig, _rawLogger);\n+\n+        _amqpActor = new ManagementActor(new Principal()\n+        {\n+            public String getName()\n+            {\n+                return \"ManagementActorTest\";\n+            }\n+        }, rootLogger);\n+    }\n+\n+    public void tearDown()\n+    {\n+        _rawLogger.clearLogMessages();\n+    }\n+\n+    /**\n+     * Test the AMQPActor logging as a Connection level.\n+     *\n+     * The test sends a message then verifies that it entered the logs.\n+     *\n+     * The log message should be fully repalaced (no '{n}' values) and should\n+     * not contain any channel identification.\n+     */\n+    public void testConnection()\n+    {\n+        final String message = \"test logging\";\n+\n+        _amqpActor.message(new LogSubject()\n+        {\n+            public String toString()\n+            {\n+                return \"[AMQPActorTest]\";\n+            }\n+\n+        }, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return message;\n+            }\n+        });\n+\n+        List<Object> logs = _rawLogger.getLogMessages();\n+\n+        assertEquals(\"Message log size not as expected.\", 1, logs.size());\n+\n+        // Verify that the logged message is present in the output\n+        assertTrue(\"Message was not found in log message\",\n+                   logs.get(0).toString().contains(message));\n+\n+        // Verify that all the values were presented to the MessageFormatter\n+        // so we will not end up with '{n}' entries in the log.\n+        assertFalse(\"Verify that the string does not contain any '{'.\",\n+                    logs.get(0).toString().contains(\"{\"));\n+\n+        // Verify that the message has the correct type\n+        assertTrue(\"Message contains the [mng: prefix\",\n+                   logs.get(0).toString().contains(\"[mng:\"));\n+\n+        // Verify that the logged message does not contains the 'ch:' marker\n+        assertFalse(\"Message was logged with a channel identifier.\" + logs.get(0),\n+                    logs.get(0).toString().contains(\"/ch:\"));\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/ManagementActorTest.java",
                "sha": "fa0bb6529e992e2ff5567303e87aed99bb7c394f",
                "status": "added"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/TestBlankActor.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/TestBlankActor.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/TestBlankActor.java",
                "patch": "@@ -0,0 +1,33 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+\n+public class TestBlankActor extends AbstractActor\n+{\n+    public TestBlankActor(RootMessageLogger rootLogger)\n+    {\n+        super(rootLogger);\n+        _logString = \"[Blank]\";\n+    }\n+}\n+    \n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/actors/TestBlankActor.java",
                "sha": "ec84d8bc9be3bc8cbff9fcf095c06457ca7914bb",
                "status": "added"
            },
            {
                "additions": 288,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLoggerTest.java",
                "changes": 288,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLoggerTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLoggerTest.java",
                "patch": "@@ -0,0 +1,288 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging.rawloggers;\n+\n+import junit.framework.TestCase;\n+import org.apache.log4j.AppenderSkeleton;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/** Test that the Log4jMessageLogger defaults behave as expected */\n+public class Log4jMessageLoggerTest extends TestCase\n+{\n+    private File _lodgfile;\n+\n+    Level _rootLevel;\n+    Log4jTestAppender _appender;\n+\n+    @Override\n+    public void setUp() throws IOException\n+    {\n+        // Setup a file for logging\n+        _appender = new Log4jTestAppender();\n+\n+        Logger root = Logger.getRootLogger();\n+        root.addAppender(_appender);\n+\n+        _rootLevel = Logger.getRootLogger().getLevel();\n+        if (_rootLevel != Level.INFO)\n+        {\n+            root.setLevel(Level.INFO);\n+            root.warn(\"Root Logger set to:\" + _rootLevel + \" Resetting to INFO for test.\");\n+        }\n+        root.warn(\"Adding Test Appender:\" + _appender);\n+    }\n+\n+    @Override\n+    public void tearDown()\n+    {\n+        Logger root = Logger.getRootLogger();\n+        root.warn(\"Removing Test Appender:\" + _appender);\n+        root.warn(\"Resetting Root Level to : \" + _rootLevel);\n+\n+        Logger.getRootLogger().setLevel(_rootLevel);\n+\n+        Logger.getRootLogger().removeAppender(_appender);\n+\n+        //Call close on our appender. This will clear the log messages\n+        // from Memory\n+        _appender.close();\n+    }\n+\n+    /**\n+     * Verify that the default configuraion of Log4jMessageLogger will\n+     * log a message.\n+     *\n+     * @throws IOException\n+     * @throws InterruptedException\n+     */\n+    public void testDefaultLogsMessage() throws IOException, InterruptedException\n+    {\n+        // Create a logger to test\n+        Log4jMessageLogger logger = new Log4jMessageLogger();\n+\n+        //Create Message for test\n+        String message = \"testDefaults\";\n+\n+        // Log the message\n+        logger.rawMessage(message);\n+\n+        verifyLogPresent(message);\n+    }\n+\n+    /**\n+     * This test checks that if the Root Logger level is set such that the INFO\n+     * messages would not be logged then the  Log4jMessageLogger default of INFO\n+     * will result in logging not being presented.\n+     *\n+     * @throws IOException\n+     * @throws InterruptedException\n+     */\n+    public void testDefaultsLogsAtInfo() throws IOException, InterruptedException\n+    {\n+        // Create a logger to test\n+        Log4jMessageLogger logger = new Log4jMessageLogger();\n+\n+        //Create Message for test\n+        String message = \"testDefaults\";\n+\n+        //Set default logger level to off\n+        Logger.getRootLogger().setLevel(Level.WARN);\n+\n+        // Log the message\n+        logger.rawMessage(message);\n+\n+        verifyNoLog(message);\n+    }\n+\n+    /**\n+     * Test that changing the logger works.\n+     * <p/>\n+     * Test this by setting the default logger level to off which has been\n+     * verified to work by test 'testDefaultsLevelObeyed'\n+     *\n+     * @throws IOException\n+     * @throws InterruptedException\n+     */\n+    public void testDefaultLoggerAdjustment() throws IOException, InterruptedException\n+    {\n+        String loggerName = \"TestLogger\";\n+        // Create a logger to test\n+        Log4jMessageLogger logger = new Log4jMessageLogger(Log4jMessageLogger.DEFAULT_LEVEL, loggerName);\n+\n+        //Create Message for test\n+        String message = \"testDefaults\";\n+\n+        //Disable the default Log4jMessageLogger logger\n+        Level originalLevel = Logger.getLogger(Log4jMessageLogger.DEFAULT_LOGGER).getLevel();\n+        Logger.getLogger(Log4jMessageLogger.DEFAULT_LOGGER).setLevel(Level.OFF);\n+\n+        // Log the message\n+        logger.rawMessage(message);\n+\n+        verifyLogPresent(message);\n+\n+        // Restore the logging level\n+        Logger.getLogger(Log4jMessageLogger.DEFAULT_LOGGER).setLevel(originalLevel);\n+    }\n+\n+    /**\n+     * Test that changing the log level has an effect.\n+     * Set the level to be debug\n+     * but only set the logger to log at INFO\n+     * there should be no data printed\n+     * subsequently changing the root logger to allow DEBUG should\n+     * show the message\n+     *\n+     * @throws IOException\n+     * @throws InterruptedException\n+     */\n+    public void testDefaultsLevelObeyed() throws IOException, InterruptedException\n+    {\n+        // Create a logger to test\n+        Log4jMessageLogger logger = new Log4jMessageLogger(\"DEBUG\", Log4jMessageLogger.DEFAULT_LOGGER);\n+\n+        //Create Message for test\n+        String message = \"testDefaults\";\n+\n+        //Set root logger to INFO only\n+        Logger.getRootLogger().setLevel(Level.INFO);\n+\n+        // Log the message\n+        logger.rawMessage(message);\n+\n+        verifyNoLog(message);\n+\n+        //Set root logger to INFO only\n+        Logger.getRootLogger().setLevel(Level.DEBUG);\n+\n+        // Log the message\n+        logger.rawMessage(message);\n+\n+        verifyLogPresent(message);\n+    }\n+\n+    /**\n+     * Check that the Log Message reached log4j\n+     * @param message the message to search for\n+     */\n+    private void verifyLogPresent(String message)\n+    {\n+        List<String> results = findMessageInLog(message);\n+\n+        //Validate we only got one message\n+        assertEquals(\"The result set was not as expected.\", 1, results.size());\n+\n+        // Validate message\n+        String line = results.get(0);\n+\n+        assertNotNull(\"No Message retrieved from log file\", line);\n+        assertTrue(\"Message not contained in log.:\" + line,\n+                   line.contains(message));\n+    }\n+\n+    /**\n+     * Check that the given Message is not present in the log4j records.\n+     * @param message the message to search for\n+     */\n+    private void verifyNoLog(String message)\n+    {\n+        List<String> results = findMessageInLog(message);\n+\n+        //Validate we only got one message\n+        if (results.size() > 0)\n+        {\n+            System.err.println(\"Unexpected Log messages\");\n+\n+            for (String msg : results)\n+            {\n+                System.err.println(msg);\n+            }\n+        }\n+\n+        assertEquals(\"No messages expected.\", 0, results.size());\n+    }\n+\n+    /**\n+     * Get the appenders list of events and return a list of all the messages\n+     * that contain the given message\n+     *\n+     * @param message the search string\n+     * @return The list of all logged messages that contain the search string.\n+     */\n+    private List<String> findMessageInLog(String message)\n+    {\n+        List<LoggingEvent> log = _appender.getLog();\n+\n+        // Search Results for requested message\n+        List<String> result = new LinkedList<String>();\n+\n+        for (LoggingEvent event : log)\n+        {\n+            if (String.valueOf(event.getMessage()).contains(message))\n+            {\n+                result.add(String.valueOf(event.getMessage()));\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+\n+    /**\n+     * Log4j Appender that simply records all the Logging Events so we can\n+     * verify that the above logging will make it to log4j in a unit test.\n+     */\n+    private class Log4jTestAppender extends AppenderSkeleton\n+    {\n+        List<LoggingEvent> _log = new LinkedList<LoggingEvent>();\n+\n+        protected void append(LoggingEvent loggingEvent)\n+        {\n+            _log.add(loggingEvent);\n+        }\n+\n+        public void close()\n+        {\n+            _log.clear();\n+        }\n+\n+        /**\n+         * @return the list of LoggingEvents that have occured in this Appender\n+         */\n+        public List<LoggingEvent> getLog()\n+        {\n+            return _log;\n+        }\n+\n+        public boolean requiresLayout()\n+        {\n+            return false;\n+        }\n+    }\n+}\n+",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLoggerTest.java",
                "sha": "d7a5aa667b06bf36f224108f8c544c297b26264d",
                "status": "added"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLogger.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLogger.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLogger.java",
                "patch": "@@ -0,0 +1,60 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging.rawloggers;\n+\n+import org.apache.qpid.server.logging.RawMessageLogger;\n+\n+import java.util.List;\n+import java.util.LinkedList;\n+\n+public class UnitTestMessageLogger implements RawMessageLogger\n+{\n+    List<Object> _log;\n+\n+    public UnitTestMessageLogger()\n+    {\n+        _log = new LinkedList<Object>();\n+    }\n+\n+\n+    public void rawMessage(String message)\n+    {\n+        _log.add(message);\n+    }\n+\n+    public void rawMessage(String message, Throwable throwable)\n+    {\n+        _log.add(message);\n+        _log.add(throwable);\n+    }\n+\n+\n+    public List<Object> getLogMessages()\n+    {\n+        return _log;\n+    }\n+\n+    public void clearLogMessages()\n+    {\n+        _log.clear();\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLogger.java",
                "sha": "df50cfb57a5fc0a1f2bc411eaf9f7486941de831",
                "status": "added"
            },
            {
                "additions": 102,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLoggerTest.java",
                "changes": 102,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLoggerTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLoggerTest.java",
                "patch": "@@ -0,0 +1,102 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.rawloggers;\n+\n+import junit.framework.TestCase;\n+\n+import java.util.List;\n+\n+/**\n+ * Test: UnitTestMessageLoggerTest\n+ *\n+ * This test verifies that UnitTestMessageLogger adhears to its interface.\n+ *\n+ * Messages are logged, and Throwables recorded in an array that can be\n+ * retreived and cleared.\n+ *\n+ */\n+public class UnitTestMessageLoggerTest extends TestCase\n+{\n+    private static final String TEST_MESSAGE = \"Test\";\n+    private static final String TEST_THROWABLE = \"Test Throwable\";\n+\n+    public void testRawMessage()\n+    {\n+        UnitTestMessageLogger logger = new UnitTestMessageLogger();\n+\n+        assertEquals(\"Messages logged before test start\", 0,\n+                     logger.getLogMessages().size());\n+\n+        // Log a message\n+        logger.rawMessage(TEST_MESSAGE);\n+\n+        List<Object> messages = logger.getLogMessages();\n+\n+        assertEquals(\"Expected to have 1 messages logged\", 1, messages.size());\n+\n+        assertEquals(\"First message not what was logged\",\n+                     TEST_MESSAGE, messages.get(0));\n+    }\n+\n+    public void testRawMessageWithThrowable()\n+    {\n+        UnitTestMessageLogger logger = new UnitTestMessageLogger();\n+\n+        assertEquals(\"Messages logged before test start\", 0,\n+                     logger.getLogMessages().size());\n+\n+        // Log a message\n+        Throwable throwable = new Throwable(TEST_THROWABLE);\n+\n+        logger.rawMessage(TEST_MESSAGE, throwable);\n+\n+        List<Object> messages = logger.getLogMessages();\n+\n+        assertEquals(\"Expected to have 2 entries\", 2, messages.size());\n+\n+        assertEquals(\"Message text not what was logged\",\n+                     TEST_MESSAGE, messages.get(0));\n+\n+        assertEquals(\"Message throwable not what was logged\",\n+                     TEST_THROWABLE, ((Throwable) messages.get(1)).getMessage());\n+\n+    }\n+\n+    public void testClear()\n+    {\n+        UnitTestMessageLogger logger = new UnitTestMessageLogger();\n+\n+        assertEquals(\"Messages logged before test start\", 0,\n+                     logger.getLogMessages().size());\n+\n+        // Log a message\n+        logger.rawMessage(TEST_MESSAGE);\n+\n+        assertEquals(\"Expected to have 1 messages logged\",\n+                     1, logger.getLogMessages().size());\n+\n+        logger.clearLogMessages();\n+\n+        assertEquals(\"Expected to have no messagse after a clear\",\n+                     0, logger.getLogMessages().size());\n+\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLoggerTest.java",
                "sha": "e10de48432f7d9a47c71cdf9882a47e8d6d508ad",
                "status": "added"
            },
            {
                "additions": 258,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/AbstractTestLogSubject.java",
                "changes": 258,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/AbstractTestLogSubject.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/AbstractTestLogSubject.java",
                "patch": "@@ -0,0 +1,258 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.server.configuration.ServerConfiguration;\n+import org.apache.qpid.server.exchange.Exchange;\n+import org.apache.qpid.server.logging.LogActor;\n+import org.apache.qpid.server.logging.LogMessage;\n+import org.apache.qpid.server.logging.LogSubject;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+import org.apache.qpid.server.logging.RootMessageLoggerImpl;\n+import org.apache.qpid.server.logging.actors.TestBlankActor;\n+import org.apache.qpid.server.logging.rawloggers.UnitTestMessageLogger;\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+import java.util.List;\n+\n+public abstract class AbstractTestLogSubject extends TestCase\n+{\n+    protected Configuration _config = new PropertiesConfiguration();\n+    protected LogSubject _subject = null;\n+\n+    protected List<Object> performLog() throws ConfigurationException\n+    {\n+        if (_subject == null)\n+        {\n+            throw new NullPointerException(\"LogSubject has not been set\");\n+        }\n+\n+        ServerConfiguration serverConfig = new ServerConfiguration(_config);\n+\n+        UnitTestMessageLogger logger = new UnitTestMessageLogger();\n+        RootMessageLogger rootLogger =\n+                new RootMessageLoggerImpl(serverConfig, logger);\n+\n+        LogActor actor_actor = new TestBlankActor(rootLogger);\n+\n+        actor_actor.message(_subject, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return \"<Log Message>\";\n+            }\n+        });\n+\n+        return logger.getLogMessages();\n+    }\n+\n+    /**\n+     * Verify that the connection section has the expected items\n+     *\n+     * @param connectionID - The connection id (int) to check for\n+     * @param user         - the Connected username\n+     * @param ipString     - the ipString/hostname\n+     * @param vhost        - the virtualhost that the user connected to.\n+     * @param message      - the message these values should appear in.\n+     */\n+    protected void verifyConnection(long connectionID, String user, String ipString, String vhost, String message)\n+    {\n+        // This should return us MockProtocolSessionUser@null/test\n+        String connectionSlice = getSlice(\"con:\" + connectionID, message);\n+\n+        assertNotNull(\"Unable to find connection 'con:\" + connectionID + \"'\",\n+                      connectionSlice);\n+\n+        // Exract the userName\n+        String[] userNameParts = connectionSlice.split(\"@\");\n+\n+        assertEquals(\"Unable to split Username from rest of Connection:\"\n+                     + connectionSlice, 2, userNameParts.length);\n+\n+        assertEquals(\"Username not as expected\", userNameParts[0], user);\n+\n+        // Extract IP.\n+        String[] ipParts = userNameParts[1].split(\"/\");\n+\n+        assertEquals(\"Unable to split IP from rest of Connection:\"\n+                     + userNameParts[1], 2, ipParts.length);\n+\n+        assertEquals(\"IP not as expected\", ipParts[0], ipString);\n+\n+        //Finally check vhost\n+        assertEquals(\"Virtualhost name not as expected.\", vhost, ipParts[1]);\n+    }\n+\n+    /**\n+     * Verify that the RoutingKey is present in the provided message.\n+     *\n+     * @param message    The message to check\n+     * @param routingKey The routing key to check against\n+     */\n+    protected void verifyRoutingKey(String message, AMQShortString routingKey)\n+    {\n+        String routingKeySlice = getSlice(\"rk\", message);\n+\n+        assertNotNull(\"Routing Key not found:\" + message, routingKey);\n+\n+        assertEquals(\"Routing key not correct\",\n+                     routingKey.toString(), routingKeySlice);\n+    }\n+\n+    /**\n+     * Verify that the given Queue's name exists in the provided message\n+     *\n+     * @param message The message to check\n+     * @param queue   The queue to check against\n+     */\n+    protected void verifyQueue(String message, AMQQueue queue)\n+    {\n+        String queueSlice = getSlice(\"qu\", message);\n+\n+        assertNotNull(\"Queue not found:\" + message, queueSlice);\n+\n+        assertEquals(\"Queue name not correct\",\n+                     queue.getName().toString(), queueSlice);\n+    }\n+\n+    /**\n+     * Verify that the given exchange (name and type) are present in the\n+     * provided message.\n+     *\n+     * @param message  The message to check\n+     * @param exchange the exchange to check against\n+     */\n+    protected void verifyExchange(String message, Exchange exchange)\n+    {\n+        String exchangeSilce = getSlice(\"ex\", message);\n+\n+        assertNotNull(\"Exchange not found:\" + message, exchangeSilce);\n+\n+        String[] exchangeParts = exchangeSilce.split(\"/\");\n+\n+        assertEquals(\"Exchange should be in two parts ex(type/name)\", 2,\n+                     exchangeParts.length);\n+\n+        assertEquals(\"Exchange type not correct\",\n+                     exchange.getType().toString(), exchangeParts[0]);\n+\n+        assertEquals(\"Exchange name not correct\",\n+                     exchange.getName().toString(), exchangeParts[1]);\n+\n+    }\n+\n+    /**\n+     * Verify that a VirtualHost with the given name appears in the given\n+     * message.\n+     *\n+     * @param message the message to search\n+     * @param vhost   the vhostName to check against\n+     */\n+    protected void verifyVirtualHost(String message, VirtualHost vhost)\n+    {\n+        String vhostSlice = getSlice(\"vh\", message);\n+\n+        assertNotNull(\"Virtualhost not found:\" + message, vhostSlice);\n+\n+        assertEquals(\"Virtualhost not correct\", \"/\" + vhost.getName(), vhostSlice);\n+    }\n+\n+    /**\n+     * Parse the log message and return the slice according to the following:\n+     * Given Example:\n+     * con:1(guest@127.0.0.1/test)/ch:2/ex(amq.direct)/qu(myQueue)/rk(myQueue)\n+     *\n+     * Each item (except channel) is of the format <key>(<values>)\n+     *\n+     * So Given an ID to slice on:\n+     * con:1 - Connection 1\n+     * ex - exchange\n+     * qu - queue\n+     * rk - routing key\n+     *\n+     * @param sliceID the slice to locate\n+     * @param message the message to search in\n+     *\n+     * @return the slice if found otherwise null is returned\n+     */\n+    protected String getSlice(String sliceID, String message)\n+    {\n+        int indexOfSlice = message.indexOf(sliceID + \"(\");\n+\n+        if (indexOfSlice == -1)\n+        {\n+            return null;\n+        }\n+\n+        int endIndex = message.indexOf(')', indexOfSlice);\n+\n+        if (endIndex == -1)\n+        {\n+            return null;\n+        }\n+\n+        return message.substring(indexOfSlice + 1 + sliceID.length(),\n+                                 endIndex);\n+    }\n+\n+    /**\n+     * Test that when Logging occurs a single log statement is provided\n+     *\n+     * @throws ConfigurationException\n+     */\n+    public void testEnabled() throws ConfigurationException\n+    {\n+        List<Object> logs = performLog();\n+\n+        assertEquals(\"Log has to many messagse\", 1, logs.size());\n+\n+        validateLogStatement(String.valueOf(logs.get(0)));\n+    }\n+\n+    /**\n+     * Call to the individiual tests to validate the message is formatted as\n+     * expected\n+     *\n+     * @param message the message whos format needs validation\n+     */\n+    protected abstract void validateLogStatement(String message);\n+\n+    /**\n+     * Ensure that when status-updates are off this does not perform logging\n+     *\n+     * @throws ConfigurationException\n+     */\n+    public void testDisabled() throws ConfigurationException\n+    {\n+        _config.addProperty(\"status-updates\", \"OFF\");\n+\n+        List<Object> logs = performLog();\n+\n+        assertEquals(\"Log has to many messagse\", 0, logs.size());\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/AbstractTestLogSubject.java",
                "sha": "04081db8e3a3731129326465d6da226fd99f7cdc",
                "status": "added"
            },
            {
                "additions": 68,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/BindingLogSubjectTest.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/BindingLogSubjectTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/BindingLogSubjectTest.java",
                "patch": "@@ -0,0 +1,68 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.server.exchange.Exchange;\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.queue.MockAMQQueue;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+public class BindingLogSubjectTest extends AbstractTestLogSubject\n+{\n+\n+    AMQQueue _queue;\n+    AMQShortString _routingKey;\n+    Exchange _exchange;\n+    VirtualHost _testVhost;\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        _testVhost = ApplicationRegistry.getInstance().getVirtualHostRegistry().\n+                getVirtualHost(\"test\");\n+        // Configure items for subjectCreation\n+        _routingKey = new AMQShortString(\"RoutingKey\");\n+        _exchange = _testVhost.getExchangeRegistry().getDefaultExchange();\n+        _queue = new MockAMQQueue(\"BindingLogSubjectTest\");\n+        ((MockAMQQueue) _queue).setVirtualHost(_testVhost);\n+\n+        _subject = new BindingLogSubject(_routingKey, _exchange, _queue);\n+    }\n+\n+    /**\n+     * Validate that the logged Subject  message is as expected:\n+     * MESSAGE [Blank][vh(/test)/ex(direct/<<default>>)/qu(BindingLogSubjectTest)/rk(RoutingKey)] <Log Message>\n+     * @param message the message whos format needs validation\n+     */\n+    @Override\n+    protected void validateLogStatement(String message)\n+    {\n+        verifyVirtualHost(message, _testVhost);\n+        verifyExchange(message, _exchange);\n+        verifyQueue(message, _queue);\n+        verifyRoutingKey(message, _routingKey);\n+    }\n+\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/BindingLogSubjectTest.java",
                "sha": "845d02267f07f49a29cd3c2debe7999173f1aea5",
                "status": "added"
            },
            {
                "additions": 79,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/ChannelLogSubjectTest.java",
                "changes": 79,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/ChannelLogSubjectTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/ChannelLogSubjectTest.java",
                "patch": "@@ -0,0 +1,79 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.queue.MockProtocolSession;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.store.MemoryMessageStore;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+public class ChannelLogSubjectTest extends ConnectionLogSubjectTest\n+{\n+    private final int _channelID = 1;\n+\n+    @Override\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        _session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            _session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+\n+        AMQChannel channel = new AMQChannel(_session, _channelID, _session.getVirtualHost().getMessageStore());\n+\n+        _subject = new ChannelLogSubject(channel);\n+    }\n+\n+    /**\n+     * MESSAGE [Blank][con:0(MockProtocolSessionUser@null/test)/ch:1] <Log Message>\n+     *\n+     * @param message the message whos format needs validation\n+     */\n+    protected void validateLogStatement(String message)\n+    {\n+        // Use the ConnectionLogSubjectTest to vaildate that the connection\n+        // section is ok\n+        super.validateLogStatement(message);\n+\n+        // Finally check that the channel identifier is correctly added\n+        assertTrue(\"Channel 1 identifier not found as part of Subject\",\n+                   message.contains(\")/ch:1]\"));\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/ChannelLogSubjectTest.java",
                "sha": "9d5cb70f4ba82c23cc159e658386cf3c9a349dc8",
                "status": "added"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubjectTest.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubjectTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubjectTest.java",
                "patch": "@@ -0,0 +1,69 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.queue.MockProtocolSession;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.store.MemoryMessageStore;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+public class ConnectionLogSubjectTest extends AbstractTestLogSubject\n+{\n+    AMQProtocolSession _session;\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        _session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            _session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+\n+        _subject = new ConnectionLogSubject(_session);\n+    }\n+\n+    /**\n+     * MESSAGE [Blank][con:0(MockProtocolSessionUser@null/test)] <Log Message>\n+     *\n+     * @param message the message whos format needs validation\n+     */\n+    protected void validateLogStatement(String message)\n+    {\n+        verifyConnection(_session.getSessionID(), \"MockProtocolSessionUser\", \"null\", \"test\", message);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubjectTest.java",
                "sha": "ff2d9b5e11047901e45b1d1a64cccd99ff2c3afb",
                "status": "added"
            },
            {
                "additions": 57,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubjectTest.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubjectTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubjectTest.java",
                "patch": "@@ -0,0 +1,57 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.queue.MockAMQQueue;\n+import org.apache.qpid.server.exchange.Exchange;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.framing.AMQShortString;\n+\n+public class ExchangeLogSubjectTest extends AbstractTestLogSubject\n+{\n+    Exchange _exchange;\n+    VirtualHost _testVhost;\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        _testVhost = ApplicationRegistry.getInstance().getVirtualHostRegistry().\n+                getVirtualHost(\"test\");\n+\n+        _exchange = _testVhost.getExchangeRegistry().getDefaultExchange();\n+        _subject = new ExchangeLogSubject(_exchange,_testVhost);\n+    }\n+\n+    /**\n+     * Validate that the logged Subject  message is as expected:\n+     * MESSAGE [Blank][vh(/test)/ex(direct/<<default>>)] <Log Message>\n+     * @param message the message whos format needs validation\n+     */\n+    @Override\n+    protected void validateLogStatement(String message)\n+    {\n+        verifyVirtualHost(message, _testVhost);\n+        verifyExchange(message, _exchange);\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubjectTest.java",
                "sha": "35df4c5976ddcdc8fc6894677aeb70e574edfc51",
                "status": "added"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/QueueLogSubjectTest.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/QueueLogSubjectTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/QueueLogSubjectTest.java",
                "patch": "@@ -0,0 +1,60 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.queue.MockAMQQueue;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+public class QueueLogSubjectTest extends AbstractTestLogSubject\n+{\n+\n+    AMQQueue _queue;\n+    VirtualHost _testVhost;\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        _testVhost = ApplicationRegistry.getInstance().getVirtualHostRegistry().\n+                getVirtualHost(\"test\");\n+\n+        _queue = new MockAMQQueue(\"QueueLogSubjectTest\");\n+        ((MockAMQQueue) _queue).setVirtualHost(_testVhost);\n+\n+        _subject = new QueueLogSubject(_queue);\n+    }\n+\n+    /**\n+     * Validate that the logged Subject  message is as expected:\n+     * MESSAGE [Blank][vh(/test)/qu(BindingLogSubjectTest)] <Log Message>\n+     *\n+     * @param message the message whos format needs validation\n+     */\n+    @Override\n+    protected void validateLogStatement(String message)\n+    {\n+        System.err.println(message);\n+        verifyVirtualHost(message, _testVhost);\n+        verifyQueue(message, _queue);\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/QueueLogSubjectTest.java",
                "sha": "7ef1f8d90382d6cddcdc874f45070aa92a859655",
                "status": "added"
            },
            {
                "additions": 114,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubjectTest.java",
                "changes": 114,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubjectTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubjectTest.java",
                "patch": "@@ -0,0 +1,114 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.framing.FieldTable;\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.flow.LimitlessCreditManager;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.queue.MockAMQQueue;\n+import org.apache.qpid.server.queue.MockProtocolSession;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.store.MemoryMessageStore;\n+import org.apache.qpid.server.subscription.Subscription;\n+import org.apache.qpid.server.subscription.SubscriptionFactory;\n+import org.apache.qpid.server.subscription.SubscriptionFactoryImpl;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+public class SubscriptionLogSubjectTest extends AbstractTestLogSubject\n+{\n+\n+    AMQQueue _queue;\n+    VirtualHost _testVhost;\n+    private boolean _acks;\n+    private FieldTable _filters;\n+    private boolean _noLocal;\n+    private int _channelID = 1;\n+    Subscription _subscription;\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        _testVhost = ApplicationRegistry.getInstance().getVirtualHostRegistry().\n+                getVirtualHost(\"test\");\n+\n+        _queue = new MockAMQQueue(\"QueueLogSubjectTest\");\n+        ((MockAMQQueue) _queue).setVirtualHost(_testVhost);\n+\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        AMQProtocolSession session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+\n+        AMQChannel channel = new AMQChannel(session, _channelID, session.getVirtualHost().getMessageStore());\n+\n+        session.addChannel(channel);\n+\n+        SubscriptionFactory factory = new SubscriptionFactoryImpl();\n+\n+        _subscription = factory.createSubscription(_channelID, session, new AMQShortString(\"cTag\"),\n+                                                   _acks, _filters, _noLocal,\n+                                                   new LimitlessCreditManager());\n+\n+        _subscription.setQueue(_queue);\n+\n+        _subject = new SubscriptionLogSubject(_subscription);\n+    }\n+\n+    /**\n+     * Validate that the logged Subject  message is as expected:\n+     * MESSAGE [Blank][sub:0(qu(QueueLogSubjectTest))] <Log Message>\n+     *\n+     * @param message the message whos format needs validation\n+     */\n+    @Override\n+    protected void validateLogStatement(String message)\n+    {\n+        String subscriptionSlice = getSlice(\"sub:\"\n+                                            + _subscription.getSubscriptionID(),\n+                                            message);\n+        \n+        assertNotNull(\"Unable to locate subscription 'sub:\" +\n+                      _subscription.getSubscriptionID() + \"'\");\n+\n+        // Adding the ')' is a bit ugly but SubscriptionLogSubject is the only\n+        // Subject that nests () and so the simple parser of checking for the\n+        // next ')' falls down.\n+        verifyQueue(subscriptionSlice+\")\", _queue);\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubjectTest.java",
                "sha": "0b0b0d78d1b69c5a723581d2bd9d1755b6d105d1",
                "status": "added"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBeanTest.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBeanTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 13,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBeanTest.java",
                "patch": "@@ -21,25 +21,22 @@\n package org.apache.qpid.server.protocol;\n \n import junit.framework.TestCase;\n-\n import org.apache.log4j.Logger;\n-\n import org.apache.qpid.AMQException;\n import org.apache.qpid.codec.AMQCodecFactory;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.server.AMQChannel;\n-import org.apache.qpid.server.queue.AMQQueueFactory;\n import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.queue.AMQQueueFactory;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.registry.IApplicationRegistry;\n import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.store.SkeletonMessageStore;\n \n import javax.management.JMException;\n+import java.security.Principal;\n \n-/**\n- * Test class to test MBean operations for AMQMinaProtocolSession.\n- */\n+/** Test class to test MBean operations for AMQMinaProtocolSession. */\n public class AMQProtocolSessionMBeanTest extends TestCase\n {\n     /** Used for debugging. */\n@@ -56,11 +53,11 @@ public void testChannels() throws Exception\n         int channelCount = _mbean.channels().size();\n         assertTrue(channelCount == 1);\n         AMQQueue queue = AMQQueueFactory.createAMQQueueImpl(new AMQShortString(\"testQueue_\" + System.currentTimeMillis()),\n-                                                                   false,\n-                                                                   new AMQShortString(\"test\"),\n-                                                                   true,\n-                                                                   _protocolSession.getVirtualHost(), null);\n-        AMQChannel channel = new AMQChannel(_protocolSession,2, _messageStore);\n+                                                            false,\n+                                                            new AMQShortString(\"test\"),\n+                                                            true,\n+                                                            _protocolSession.getVirtualHost(), null);\n+        AMQChannel channel = new AMQChannel(_protocolSession, 2, _messageStore);\n         channel.setDefaultQueue(queue);\n         _protocolSession.addChannel(channel);\n         channelCount = _mbean.channels().size();\n@@ -114,8 +111,16 @@ protected void setUp() throws Exception\n \n         IApplicationRegistry appRegistry = ApplicationRegistry.getInstance();\n         _protocolSession =\n-            new AMQMinaProtocolSession(new TestIoSession(), appRegistry.getVirtualHostRegistry(), new AMQCodecFactory(true),\n-                null);\n+                new AMQMinaProtocolSession(new TestIoSession(), appRegistry.getVirtualHostRegistry(), new AMQCodecFactory(true),\n+                                           null);\n+        // Need to authenticate session for it to work, (well for logging to work)\n+        _protocolSession.setAuthorizedID(new Principal()\n+        {\n+            public String getName()\n+            {\n+                return \"AMQProtocolSessionMBeanTestUser\";\n+            }\n+        });\n         _protocolSession.setVirtualHost(appRegistry.getVirtualHostRegistry().getVirtualHost(\"test\"));\n         _channel = new AMQChannel(_protocolSession, 1, _messageStore);\n         _protocolSession.addChannel(_channel);",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBeanTest.java",
                "sha": "f09b03ab85cef0e284287a5caa3635ed478ced1d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java",
                "patch": "@@ -34,6 +34,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicInteger;\n+import java.net.SocketAddress;\n \n public class InternalTestProtocolSession extends AMQMinaProtocolSession implements ProtocolOutputConverter\n {",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java",
                "sha": "49c5f8a14b36c7203219d1de729b24b3cab46b50",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/MaxChannelsTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/MaxChannelsTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/MaxChannelsTest.java",
                "patch": "@@ -30,6 +30,8 @@\n import org.apache.qpid.AMQException;\n import org.apache.qpid.protocol.AMQConstant;\n \n+import java.security.Principal;\n+\n /** Test class to test MBean operations for AMQMinaProtocolSession. */\n public class MaxChannelsTest extends TestCase\n {\n@@ -40,6 +42,16 @@ public void testChannels() throws Exception\n     {\n         _session = new AMQMinaProtocolSession(new TestIoSession(), _appRegistry\n \t\t\t\t.getVirtualHostRegistry(), new AMQCodecFactory(true), null);\n+\n+        // Need to authenticate session for it to work, (well for logging to work)\n+        _session.setAuthorizedID(new Principal()\n+        {\n+            public String getName()\n+            {\n+                return \"AMQProtocolSessionMBeanTestUser\";\n+            }\n+        });\n+\n         _session.setVirtualHost(_appRegistry.getVirtualHostRegistry().getVirtualHost(\"test\"));\n \n         // check the channel count is correct",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/protocol/MaxChannelsTest.java",
                "sha": "9597c1319aeb49e0cb8123c527c51483bb6d42ab",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/MockAMQQueue.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/MockAMQQueue.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 1,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/queue/MockAMQQueue.java",
                "patch": "@@ -44,6 +44,7 @@\n {\n     private boolean _deleted = false;\n     private AMQShortString _name;\n+    private VirtualHost _virtualhost;\n \n     public MockAMQQueue(String name)\n     {\n@@ -75,9 +76,14 @@ public AMQShortString getOwner()\n         return null;  //To change body of implemented methods use File | Settings | File Templates.\n     }\n \n+    public void setVirtualHost(VirtualHost virtualhost)\n+    {\n+        _virtualhost = virtualhost;\n+    }\n+\n     public VirtualHost getVirtualHost()\n     {\n-        return null;  //To change body of implemented methods use File | Settings | File Templates.\n+        return _virtualhost;\n     }\n \n     public void bind(Exchange exchange, AMQShortString routingKey, FieldTable arguments) throws AMQException",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/MockAMQQueue.java",
                "sha": "651c1311c840e459452fb44a11940e54e5e54bee",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/MockProtocolSession.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/MockProtocolSession.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 2,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/queue/MockProtocolSession.java",
                "patch": "@@ -34,7 +34,9 @@\n import javax.security.sasl.SaslServer;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n import java.security.Principal;\n+import java.net.SocketAddress;\n \n /**\n  * A protocol session that can be used for testing purposes.\n@@ -45,11 +47,21 @@\n \n     private Map<Integer, AMQChannel> _channelMap = new HashMap<Integer, AMQChannel>();\n \n+    private static final AtomicLong idGenerator = new AtomicLong(0);\n+\n+    private final long _sessionID = idGenerator.getAndIncrement();\n+    private VirtualHost _virtualHost;\n+\n     public MockProtocolSession(MessageStore messageStore)\n     {\n         _messageStore = messageStore;\n     }\n \n+    public long getSessionID()\n+    {\n+        return _sessionID;\n+    }\n+\n     public void dataBlockReceived(AMQDataBlock message) throws Exception\n     {\n     }\n@@ -158,12 +170,12 @@ public Object getClientIdentifier()\n \n     public VirtualHost getVirtualHost()\n     {\n-        return null;  //To change body of implemented methods use File | Settings | File Templates.\n+        return _virtualHost;\n     }\n \n     public void setVirtualHost(VirtualHost virtualHost)\n     {\n-        //To change body of implemented methods use File | Settings | File Templates.\n+        _virtualHost = virtualHost;\n     }\n \n     public void addSessionCloseTask(Task task)\n@@ -187,6 +199,18 @@ public void setAuthorizedID(Principal authorizedID)\n     }\n \n     public Principal getAuthorizedID()\n+    {\n+        return new Principal()\n+        {\n+            public String getName()\n+            {\n+                return \"MockProtocolSessionUser\";\n+            }\n+        };\n+\n+    }\n+\n+    public SocketAddress getRemoteAddress()\n     {\n         return null;  //To change body of implemented methods use File | Settings | File Templates.\n     }",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/MockProtocolSession.java",
                "sha": "b9dcd972b125a60809b7edb1e96bfc7e2bd91fe0",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/security/access/plugins/network/FirewallPluginTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/security/access/plugins/network/FirewallPluginTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 3,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/security/access/plugins/network/FirewallPluginTest.java",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.qpid.server.store.TestableMemoryMessageStore;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.virtualhost.VirtualHostRegistry;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n \n public class FirewallPluginTest extends TestCase\n {\n@@ -89,11 +90,13 @@ public String getHostname()\n     public void setUp() throws Exception\n     {\n         _store = new TestableMemoryMessageStore();\n-        PropertiesConfiguration env = new PropertiesConfiguration();\n-        _virtualHost = new VirtualHost(new VirtualHostConfiguration(\"test\", env));\n         TestIoSession iosession = new TestIoSession();\n         iosession.setAddress(\"127.0.0.1\");\n-        VirtualHostRegistry virtualHostRegistry = null;\n+\n+        // Retreive VirtualHost from the Registry\n+        VirtualHostRegistry virtualHostRegistry = ApplicationRegistry.getInstance().getVirtualHostRegistry();\n+        _virtualHost = virtualHostRegistry.getVirtualHost(\"test\");\n+\n         AMQCodecFactory codecFactory = new AMQCodecFactory(true);\n         _session = new AMQMinaProtocolSession(iosession, virtualHostRegistry, codecFactory);        \n     }",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/security/access/plugins/network/FirewallPluginTest.java",
                "sha": "f56d5623541827f4f6be32f54cfd052cbe96ad73",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 5,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java",
                "patch": "@@ -21,17 +21,18 @@\n *\n */\n \n-import java.util.ArrayList;\n-import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n-\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.server.AMQChannel;\n import org.apache.qpid.server.queue.AMQQueue;\n import org.apache.qpid.server.queue.QueueEntry;\n import org.apache.qpid.server.queue.QueueEntry.SubscriptionAcquiredState;\n \n+import java.util.ArrayList;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n public class MockSubscription implements Subscription\n {\n \n@@ -44,6 +45,10 @@\n     private ArrayList<QueueEntry> messages = new ArrayList<QueueEntry>();\n     private final Lock _stateChangeLock = new ReentrantLock();\n \n+    private static final AtomicLong idGenerator = new AtomicLong(0);\n+    // Create a simple ID that increments for ever new Subscription\n+    private final long _subscriptionID = idGenerator.getAndIncrement();\n+\n     public void close()\n     {\n         _closed = true;\n@@ -66,7 +71,12 @@ public AMQChannel getChannel()\n \n     public AMQShortString getConsumerTag()\n     {\n-        return tag ;\n+        return tag;\n+    }\n+\n+    public long getSubscriptionID()\n+    {\n+        return _subscriptionID;\n     }\n \n     public QueueEntry getLastSeenEntry()",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java",
                "sha": "43152ef780d12f601ec1dc53763e5c0e2353528e",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 18,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java",
                "patch": "@@ -21,30 +21,31 @@\n package org.apache.qpid.server.util;\n \n import junit.framework.TestCase;\n-\n import org.apache.commons.configuration.PropertiesConfiguration;\n-import org.apache.qpid.server.registry.ApplicationRegistry;\n-import org.apache.qpid.server.registry.IApplicationRegistry;\n-import org.apache.qpid.server.queue.AMQQueue;\n-import org.apache.qpid.server.queue.AMQQueueFactory;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.common.AMQPFilterTypes;\n+import org.apache.qpid.exchange.ExchangeDefaults;\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.framing.BasicContentHeaderProperties;\n+import org.apache.qpid.framing.ContentHeaderBody;\n+import org.apache.qpid.framing.FieldTable;\n+import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.ConsumerTagNotUniqueException;\n import org.apache.qpid.server.configuration.ServerConfiguration;\n import org.apache.qpid.server.exchange.Exchange;\n import org.apache.qpid.server.protocol.InternalTestProtocolSession;\n-import org.apache.qpid.server.AMQChannel;\n-import org.apache.qpid.server.ConsumerTagNotUniqueException;\n-import org.apache.qpid.server.virtualhost.VirtualHost;\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.queue.AMQQueueFactory;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.registry.IApplicationRegistry;\n import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.store.StoreContext;\n import org.apache.qpid.server.store.TestableMemoryMessageStore;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.ContentHeaderBody;\n-import org.apache.qpid.framing.BasicContentHeaderProperties;\n-import org.apache.qpid.framing.FieldTable;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n-import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.util.MockChannel;\n-import org.apache.qpid.common.AMQPFilterTypes;\n-import org.apache.qpid.exchange.ExchangeDefaults;\n+\n+import java.security.Principal;\n \n public class InternalBrokerBaseCase extends TestCase\n {\n@@ -64,7 +65,7 @@ public void setUp() throws Exception\n         configuration.setProperty(\"virtualhosts.virtualhost.test.store.class\", TestableMemoryMessageStore.class.getName());\n         _registry = new TestApplicationRegistry(new ServerConfiguration(configuration));\n         ApplicationRegistry.initialise(_registry);\n-        _virtualHost = _registry.getVirtualHostRegistry().getVirtualHost(\"test\");        \n+        _virtualHost = _registry.getVirtualHostRegistry().getVirtualHost(\"test\");\n \n         _messageStore = _virtualHost.getMessageStore();\n \n@@ -80,6 +81,14 @@ public void setUp() throws Exception\n \n         _session = new InternalTestProtocolSession();\n \n+        _session.setAuthorizedID(new Principal()\n+        {\n+            public String getName()\n+            {\n+                return \"InternalBrokerBaseCaseUser\";\n+            }\n+        });\n+\n         _session.setVirtualHost(_virtualHost);\n \n         _channel = new MockChannel(_session, 1, _messageStore);\n@@ -176,7 +185,7 @@ public AMQShortString getRoutingKey()\n \n         for (int count = 0; count < messages; count++)\n         {\n-            channel.setPublishFrame(info,  _virtualHost.getExchangeRegistry().getExchange(info.getExchange()));\n+            channel.setPublishFrame(info, _virtualHost.getExchangeRegistry().getExchange(info.getExchange()));\n \n             //Set the body size\n             ContentHeaderBody _headerBody = new ContentHeaderBody();",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java",
                "sha": "585ed9a538705776ccb3ec00881b91a7b3224dd3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/util/TestApplicationRegistry.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/util/TestApplicationRegistry.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 1,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/util/TestApplicationRegistry.java",
                "patch": "@@ -87,7 +87,7 @@ public void initialise() throws Exception\n \n         _messageStore = new TestableMemoryMessageStore();\n \n-        _virtualHostRegistry = new VirtualHostRegistry();\n+        _virtualHostRegistry = new VirtualHostRegistry(this);\n         \n         PropertiesConfiguration vhostProps = new PropertiesConfiguration();\n         VirtualHostConfiguration hostConfig = new VirtualHostConfiguration(\"test\", vhostProps);",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/broker/src/test/java/org/apache/qpid/server/util/TestApplicationRegistry.java",
                "sha": "84bee7984bf88d61162b3f81aac5e8aef6b54e7a",
                "status": "modified"
            },
            {
                "additions": 111,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/common/src/main/java/org/apache/qpid/util/FileUtils.java",
                "changes": 182,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/util/FileUtils.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 71,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/util/FileUtils.java",
                "patch": "@@ -20,7 +20,18 @@\n  */\n package org.apache.qpid.util;\n \n-import java.io.*;\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.LinkedList;\n+import java.util.List;\n \n /**\n  * FileUtils provides some simple helper methods for working with files. It follows the convention of wrapping all\n@@ -46,7 +57,8 @@ public static String readFileAsString(String filename)\n     {\n         BufferedInputStream is = null;\n \n-        try{\n+        try\n+        {\n             try\n             {\n                 is = new BufferedInputStream(new FileInputStream(filename));\n@@ -57,7 +69,9 @@ public static String readFileAsString(String filename)\n             }\n \n             return readStreamAsString(is);\n-        }finally {\n+        }\n+        finally\n+        {\n             if (is != null)\n             {\n                 try\n@@ -210,68 +224,69 @@ public static void copy(File src, File dst)\n     /*\n      * Deletes a given file\n      */\n-     public static boolean deleteFile(String filePath)\n-     {\n-         return delete(new File(filePath), false);\n-     }\n+    public static boolean deleteFile(String filePath)\n+    {\n+        return delete(new File(filePath), false);\n+    }\n \n     /*\n      * Deletes a given empty directory \n      */\n-     public static boolean deleteDirectory(String directoryPath)\n-     {\n-         File directory = new File(directoryPath);\n-\n-         if (directory.isDirectory())\n-         {\n-           if (directory.listFiles().length == 0)\n-           {\n-               return delete(directory, true);\n-           }\n-         }\n-\n-         return false;\n-     }\n-\n-     /**\n-      * Delete a given file/directory,\n-      * A directory will always require the recursive flag to be set.\n-      * if a directory is specified and recursive set then delete the whole tree\n-      * @param file the File object to start at\n-      * @param recursive boolean to recurse if a directory is specified.\n-      * @return <code>true</code> if and only if the file or directory is\n-      *          successfully deleted; <code>false</code> otherwise\n-      */\n-     public static boolean delete(File file, boolean recursive)\n-     {\n-         boolean success = true;\n-\n-         if (file.isDirectory())\n-         {\n-             if (recursive)\n-             {\n-                 File[] files = file.listFiles();\n-\n-                 // This can occur if the file is deleted outside the JVM\n-                 if (files == null)\n-                 {\n-                     return false;\n-                 }\n-\n-                 for (int i = 0; i < files.length; i++)\n-                 {\n-                     success = delete(files[i], true) && success;\n-                 }\n-\n-                 return success && file.delete();\n-             }\n-\n-             return false;\n-         }\n-\n-         return file.delete();\n-     }\n+    public static boolean deleteDirectory(String directoryPath)\n+    {\n+        File directory = new File(directoryPath);\n \n+        if (directory.isDirectory())\n+        {\n+            if (directory.listFiles().length == 0)\n+            {\n+                return delete(directory, true);\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Delete a given file/directory,\n+     * A directory will always require the recursive flag to be set.\n+     * if a directory is specified and recursive set then delete the whole tree\n+     *\n+     * @param file      the File object to start at\n+     * @param recursive boolean to recurse if a directory is specified.\n+     *\n+     * @return <code>true</code> if and only if the file or directory is\n+     *         successfully deleted; <code>false</code> otherwise\n+     */\n+    public static boolean delete(File file, boolean recursive)\n+    {\n+        boolean success = true;\n+\n+        if (file.isDirectory())\n+        {\n+            if (recursive)\n+            {\n+                File[] files = file.listFiles();\n+\n+                // This can occur if the file is deleted outside the JVM\n+                if (files == null)\n+                {\n+                    return false;\n+                }\n+\n+                for (int i = 0; i < files.length; i++)\n+                {\n+                    success = delete(files[i], true) && success;\n+                }\n+\n+                return success && file.delete();\n+            }\n+\n+            return false;\n+        }\n+\n+        return file.delete();\n+    }\n \n     public static class UnableToCopyException extends Exception\n     {\n@@ -294,7 +309,6 @@ public static void copyRecursive(File source, File dst) throws FileNotFoundExcep\n             throw new IllegalArgumentException(\"Unable to copy '\" + source.toString() + \"' to '\" + dst + \"' a file with same name exists.\");\n         }\n \n-\n         if (source.isFile())\n         {\n             copy(source, dst);\n@@ -303,22 +317,48 @@ public static void copyRecursive(File source, File dst) throws FileNotFoundExcep\n         //else we have a source directory\n         if (!dst.isDirectory() && !dst.mkdir())\n         {\n-             throw new UnableToCopyException(\"Unable to create destination directory\");\n+            throw new UnableToCopyException(\"Unable to create destination directory\");\n         }\n \n-\n         for (File file : source.listFiles())\n         {\n-           if (file.isFile())\n-           {\n-               copy(file, new File(dst.toString() + File.separator + file.getName()));\n-           }\n-           else\n-           {\n-               copyRecursive(file, new File(dst + File.separator + file.getName()));\n-           }\n+            if (file.isFile())\n+            {\n+                copy(file, new File(dst.toString() + File.separator + file.getName()));\n+            }\n+            else\n+            {\n+                copyRecursive(file, new File(dst + File.separator + file.getName()));\n+            }\n         }\n \n+    }\n+\n+    /**\n+     * Checks the specified file for instances of the search string.\n+     *\n+     * @param file the file to search\n+     * @param search the search String\n+     *\n+     * @throws java.io.IOException\n+     * @return the list of matching entries\n+     */\n+    public static List<String> searchFile(File file, String search)\n+            throws IOException\n+    {\n+\n+        List<String> results = new LinkedList<String>();\n+\n+        BufferedReader reader = new BufferedReader(new FileReader(file));\n+        while (reader.ready())\n+        {\n+            String line = reader.readLine();\n+            if (line.contains(search))\n+            {\n+                results.add(line);\n+            }\n+        }\n \n+        return results;\n     }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/common/src/main/java/org/apache/qpid/util/FileUtils.java",
                "sha": "515c8492904a3bee2fc1754af954ba6dd716e527",
                "status": "modified"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/common/src/test/java/org/apache/qpid/util/FileUtilsTest.java",
                "changes": 80,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/test/java/org/apache/qpid/util/FileUtilsTest.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 7,
                "filename": "qpid/java/common/src/test/java/org/apache/qpid/util/FileUtilsTest.java",
                "patch": "@@ -22,11 +22,12 @@\n \n import junit.framework.TestCase;\n \n-import java.io.File;\n-import java.io.IOException;\n import java.io.BufferedWriter;\n-import java.io.FileWriter;\n+import java.io.File;\n import java.io.FileNotFoundException;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.List;\n \n public class FileUtilsTest extends TestCase\n {\n@@ -47,7 +48,7 @@ public void testCopyFile()\n \n         //Create initial file\n         File test = createTestFile(fileName, TEST_DATA);\n-        \n+\n         try\n         {\n             //Check number of files before copy\n@@ -137,7 +138,6 @@ public void testCopyRecursive()\n             testSubDir.deleteOnExit();\n             testDir.deleteOnExit();\n \n-\n             //Perform Copy\n             File copyDir = new File(testDir.toString() + COPY);\n             try\n@@ -282,7 +282,7 @@ public void testDeleteFile()\n \n     public void testDeleteNonExistentFile()\n     {\n-        File test = new File(\"FileUtilsTest-testDelete-\"+System.currentTimeMillis());\n+        File test = new File(\"FileUtilsTest-testDelete-\" + System.currentTimeMillis());\n \n         assertTrue(\"File exists\", !test.exists());\n         assertFalse(\"File is a directory\", test.isDirectory());\n@@ -303,7 +303,6 @@ public void testDeleteNull()\n         }\n     }\n \n-\n     /**\n      * Given two lists of File arrays ensure they are the same length and all entries in Before are in After\n      *\n@@ -543,4 +542,71 @@ private void createSubDir(String path, int directories, int files)\n         }\n     }\n \n+    public static final String SEARCH_STRING = \"testSearch\";\n+\n+    /**\n+     * Test searchFile(File file, String search) will find a match when it\n+     * exists.\n+     *\n+     * @throws java.io.IOException if unable to perform test setup\n+     */\n+    public void testSearchSucceed() throws IOException\n+    {\n+        File _logfile = File.createTempFile(\"FileUtilsTest-testSearchSucceed\", \".out\");\n+\n+        prepareFileForSearchTest(_logfile);\n+\n+        List<String> results = FileUtils.searchFile(_logfile, SEARCH_STRING);\n+\n+        assertNotNull(\"Null result set returned\", results);\n+\n+        assertEquals(\"Results do not contain expected count\", 1, results.size());\n+    }\n+\n+    /**\n+     * Test searchFile(File file, String search) will not find a match when the\n+     * test string does not exist.\n+     *\n+     * @throws java.io.IOException if unable to perform test setup\n+     */\n+    public void testSearchFail() throws IOException\n+    {\n+        File _logfile = File.createTempFile(\"FileUtilsTest-testSearchFail\", \".out\");\n+\n+        prepareFileForSearchTest(_logfile);\n+\n+        List<String> results = FileUtils.searchFile(_logfile, \"Hello\");\n+\n+        assertNotNull(\"Null result set returned\", results);\n+\n+        //Validate we only got one message\n+        if (results.size() > 0)\n+        {\n+            System.err.println(\"Unexpected messages\");\n+\n+            for (String msg : results)\n+            {\n+                System.err.println(msg);\n+            }\n+        }\n+\n+        assertEquals(\"Results contains data when it was not expected\",\n+                     0, results.size());\n+    }\n+\n+    /**\n+     * Write the SEARCH_STRING in to the given file.\n+     *\n+     * @param logfile The file to write the SEARCH_STRING into\n+     *\n+     * @throws IOException if an error occurs\n+     */\n+    private void prepareFileForSearchTest(File logfile) throws IOException\n+    {\n+        BufferedWriter writer = new BufferedWriter(new FileWriter(logfile));\n+        writer.append(SEARCH_STRING);\n+        writer.flush();\n+        writer.close();\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/common/src/test/java/org/apache/qpid/util/FileUtilsTest.java",
                "sha": "7eba5f092ef5628ae531863b1aadc9d04531e672",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java?ref=ba01534206bc194dab376f25fcc3fa3687d0dc2c",
                "deletions": 0,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java",
                "patch": "@@ -141,6 +141,11 @@ public AMQShortString getConsumerTag()\n         return null;  //To change body of implemented methods use File | Settings | File Templates.\n     }\n \n+    public long getSubscriptionID()\n+    {\n+        return 0;  //To change body of implemented methods use File | Settings | File Templates.\n+    }\n+\n     public boolean isActive()\n     {\n         return false;  //To change body of implemented methods use File | Settings | File Templates.",
                "raw_url": "https://github.com/apache/qpid/raw/ba01534206bc194dab376f25fcc3fa3687d0dc2c/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java",
                "sha": "dd01cb2f8e78020e9c87f47f68268b2c1dbcba64",
                "status": "modified"
            }
        ],
        "message": "QPID-1992 : Addition of new Broker Logging Framework\nProvided static CurrentActor for accessing ThreadLocal.\nIncluded Test to validate setting of ThreadLocals.\nAdded Test for AMQPActor\nAdded getRootMessageLogger() to IApplicationRegistry\nAdjusted *ProtocolSessions to start counting at 0.\nAllowed Setting of Vhost on the MockProtocolSession\nCreated a fixed Principle in MockProtocolSession\nChanges to MockProtocolSession, prevent NPEs when the AMQPActor creates its log string.\nConverted CurrentActor to use a Stack allowing a variety of actors to take their turn on a thread.\nImproved package structure\nAdded testing for Actors\n\nMoved FileMonitorTools functionality to FileUtils and provided a Test\nConverted Log4jMessageLoggerTest to a proper UnitTest\nMoved Test cases to test package\nUpdated other broker tests to set the authenticated user before setting the virtualhost,\nWhilst the logging could output null as the username it would be better if the tests correctly set the authorizedID.\n\nUpdate to include tests for disabled logging\n\nFully tested LogSubjects\nUpdated MockAMQQueue to be able to take a Virtualhost as per a normal Queue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@796650 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/33ee5b9247bd4d1e6b7eb88869286ed77c2baf17",
        "patched_files": [
            "Subscription.java",
            "ChannelOpenHandler.java",
            "RootMessageLoggerImpl.java",
            "MockProtocolSession.java",
            "SubscriptionLogSubject.java",
            "SimpleAMQQueue.java",
            "NullApplicationRegistry.java",
            "SubscriptionTestHelper.java",
            "MockSubscription.java",
            "AMQPConnectionActor.java",
            "RootMessageLogger.java",
            "AbstractTestLogSubject.java",
            "ManagementActor.java",
            "AMQProtocolSession.java",
            "BindingLogSubject.java",
            "AMQMinaProtocolSession.java",
            "RawMessageLogger.java",
            "UnitTestMessageLogger.java",
            "LogMessage.java",
            "ServerConfiguration.java",
            "SubscriptionImpl.java",
            "LogActor.java",
            "InternalTestProtocolSession.java",
            "CurrentActor.java",
            "QueueLogSubject.java",
            "VirtualHostRegistry.java",
            "AbstractLogSubject.java",
            "ApplicationRegistry.java",
            "AMQPChannelActor.java",
            "IApplicationRegistry.java",
            "ExchangeLogSubject.java",
            "ConnectionLogSubject.java",
            "ChannelLogSubject.java",
            "InternalBrokerBaseCase.java",
            "LogSubject.java",
            "ConfigurationFileApplicationRegistry.java",
            "BrokerMessages.java",
            "AbstractActor.java",
            "Log4jMessageLogger.java",
            "FileUtils.java",
            "MockAMQQueue.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "CurrentActorTest.java",
            "BindingLogSubjectTest.java",
            "MaxChannelsTest.java",
            "FirewallPluginTest.java",
            "AMQProtocolSessionMBeanTest.java",
            "ExchangeLogSubjectTest.java",
            "FileUtilsTest.java",
            "ManagementActorTest.java",
            "UnitTestMessageLoggerTest.java",
            "ChannelLogSubjectTest.java",
            "QueueLogSubjectTest.java",
            "Log4jMessageLoggerTest.java",
            "TestBlankActor.java",
            "ConnectionLogSubjectTest.java",
            "RootMessageLoggerImplTest.java",
            "AMQPChannelActorTest.java",
            "AMQPConnectionActorTest.java",
            "TestApplicationRegistry.java",
            "StatusUpdateConfigurationTest.java",
            "SubscriptionLogSubjectTest.java"
        ]
    },
    "qpid_c7b9760": {
        "bug_id": "qpid_c7b9760",
        "commit": "https://github.com/apache/qpid/commit/c7b976031d14f1c5d0de40af734b951eda7dfe05",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/c7b976031d14f1c5d0de40af734b951eda7dfe05/qpid/java/broker-core/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java?ref=c7b976031d14f1c5d0de40af734b951eda7dfe05",
                "deletions": 0,
                "filename": "qpid/java/broker-core/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java",
                "patch": "@@ -132,6 +132,7 @@ private AMQQueue mockQueue()\n         AMQQueue queue = mock(AMQQueue.class);\n         when(queue.getVirtualHost()).thenReturn(_virtualHost);\n         when(queue.getCategoryClass()).thenReturn(Queue.class);\n+        when(queue.getModel()).thenReturn(BrokerModel.getInstance());\n         return queue;\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/c7b976031d14f1c5d0de40af734b951eda7dfe05/qpid/java/broker-core/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java",
                "sha": "74ae42b95040d51aad13f39ff278192c40c69432",
                "status": "modified"
            }
        ],
        "message": "QPID-5578 : make mocked queue return the correct model object to prevent NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@1590279 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/a620e33538fc75404dcf3b481280c0e0882a86d9",
        "patched_files": [],
        "repo": "qpid",
        "unit_tests": [
            "FanoutExchangeTest.java"
        ]
    },
    "qpid_d8fd38e": {
        "bug_id": "qpid_d8fd38e",
        "commit": "https://github.com/apache/qpid/commit/d8fd38ea9ef5c5ddd63859eb76a290ffce708b63",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/d8fd38ea9ef5c5ddd63859eb76a290ffce708b63/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java?ref=d8fd38ea9ef5c5ddd63859eb76a290ffce708b63",
                "deletions": 3,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java",
                "patch": "@@ -54,7 +54,6 @@\n \n import javax.management.JMException;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.EnumSet;\n@@ -742,12 +741,12 @@ private void incrementTxnDequeueStats(QueueEntry entry)\n     private void deliverMessage(final Subscription sub, final QueueEntry entry)\n             throws AMQException\n     {\n+        setLastSeenEntry(sub, entry);\n+\n         _deliveredMessages.incrementAndGet();\n         incrementUnackedMsgCount();\n \n         sub.send(entry);\n-\n-        setLastSeenEntry(sub,entry);\n     }\n \n     private boolean subscriptionReadyAndHasInterest(final Subscription sub, final QueueEntry entry) throws AMQException",
                "raw_url": "https://github.com/apache/qpid/raw/d8fd38ea9ef5c5ddd63859eb76a290ffce708b63/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java",
                "sha": "b003152db67f218790964cefbf26f1491497a031",
                "status": "modified"
            },
            {
                "additions": 97,
                "blob_url": "https://github.com/apache/qpid/blob/d8fd38ea9ef5c5ddd63859eb76a290ffce708b63/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/QueueEntryTest.java",
                "changes": 97,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/QueueEntryTest.java?ref=d8fd38ea9ef5c5ddd63859eb76a290ffce708b63",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/queue/QueueEntryTest.java",
                "patch": "@@ -0,0 +1,97 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.queue;\n+\n+import org.apache.qpid.test.utils.QpidTestCase;\n+\n+/**\n+ *\n+ * Tests QueueEntry\n+ *\n+ */\n+public class QueueEntryTest extends QpidTestCase\n+{\n+    private QueueEntryImpl _queueEntry1 = null;\n+    private QueueEntryImpl _queueEntry2 = null;\n+    private QueueEntryImpl _queueEntry3 = null;\n+\n+    @Override\n+    protected void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        int i = 0;\n+\n+        SimpleQueueEntryList queueEntryList = new SimpleQueueEntryList(null);\n+        _queueEntry1 = (QueueEntryImpl) queueEntryList.add(new MockAMQMessage(i++));\n+        _queueEntry2 = (QueueEntryImpl) queueEntryList.add(new MockAMQMessage(i++));\n+        _queueEntry3 = (QueueEntryImpl) queueEntryList.add(new MockAMQMessage(i++));\n+    }\n+\n+    public void testCompareTo()\n+    {\n+        assertTrue(_queueEntry1.compareTo(_queueEntry2) < 0);\n+        assertTrue(_queueEntry2.compareTo(_queueEntry1) > 0);\n+        assertTrue(_queueEntry1.compareTo(_queueEntry1) == 0);\n+    }\n+\n+    /**\n+     * Tests that the getNext() can be used to traverse the list.\n+     */\n+    public void testTraverseWithNoDeletedEntries()\n+    {\n+        QueueEntryImpl current = _queueEntry1;\n+\n+        current = current.getNext();\n+        assertSame(\"Unexpected current entry\",_queueEntry2, current);\n+\n+        current = current.getNext();\n+        assertSame(\"Unexpected current entry\",_queueEntry3, current);\n+\n+        current = current.getNext();\n+        assertNull(current);\n+\n+    }\n+\n+    /**\n+     * Tests that the getNext() can be used to traverse the list but deleted\n+     * entries are skipped and de-linked from the chain of entries.\n+     */\n+    public void testTraverseWithDeletedEntries()\n+    {\n+        // Delete 2nd queue entry\n+        _queueEntry2.delete();\n+        assertTrue(_queueEntry2.isDeleted());\n+\n+\n+        QueueEntryImpl current = _queueEntry1;\n+\n+        current = current.getNext();\n+        assertSame(\"Unexpected current entry\",_queueEntry3, current);\n+\n+        current = current.getNext();\n+        assertNull(current);\n+\n+        // Assert the side effects of getNext()\n+        assertSame(\"Next node of entry 1 should now be entry 3\",\n+                _queueEntry3, _queueEntry1.nextNode());\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/d8fd38ea9ef5c5ddd63859eb76a290ffce708b63/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/QueueEntryTest.java",
                "sha": "b67723dd2559035f22f6eb82411bb97b2145bf7f",
                "status": "added"
            },
            {
                "additions": 261,
                "blob_url": "https://github.com/apache/qpid/blob/d8fd38ea9ef5c5ddd63859eb76a290ffce708b63/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/SimpleAMQQueueTest.java",
                "changes": 264,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/SimpleAMQQueueTest.java?ref=d8fd38ea9ef5c5ddd63859eb76a290ffce708b63",
                "deletions": 3,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/queue/SimpleAMQQueueTest.java",
                "patch": "@@ -1,4 +1,3 @@\n-package org.apache.qpid.server.queue;\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,6 +19,7 @@\n  *\n  */\n \n+package org.apache.qpid.server.queue;\n \n import org.apache.commons.configuration.PropertiesConfiguration;\n \n@@ -36,6 +36,7 @@\n import org.apache.qpid.server.exchange.DirectExchange;\n import org.apache.qpid.server.message.AMQMessage;\n import org.apache.qpid.server.message.MessageMetaData;\n+import org.apache.qpid.server.queue.BaseQueue.PostEnqueueAction;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.store.StoredMessage;\n import org.apache.qpid.server.store.TestableMemoryMessageStore;\n@@ -170,7 +171,7 @@ public void testBinding() throws AMQSecurityException, AMQInternalException\n \n     }\n \n-    public void testSubscription() throws AMQException\n+    public void testRegisterSubscriptionThenEnqueueMessage() throws AMQException\n     {\n         // Check adding a subscription adds it to the queue\n         _queue.registerSubscription(_subscription, false);\n@@ -185,6 +186,7 @@ public void testSubscription() throws AMQException\n         AMQMessage messageA = createMessage(new Long(24));\n         _queue.enqueue(messageA);\n         assertEquals(messageA, _subscription.getQueueContext().getLastSeenEntry().getMessage());\n+        assertNull(((QueueContext)_subscription.getQueueContext())._releasedEntry);\n \n         // Check removing the subscription removes it's information from the queue\n         _queue.unregisterSubscription(_subscription);\n@@ -199,13 +201,269 @@ public void testSubscription() throws AMQException\n \n     }\n \n-    public void testQueueNoSubscriber() throws AMQException, InterruptedException\n+    public void testEnqueueMessageThenRegisterSubscription() throws AMQException, InterruptedException\n     {\n         AMQMessage messageA = createMessage(new Long(24));\n         _queue.enqueue(messageA);\n         _queue.registerSubscription(_subscription, false);\n         Thread.sleep(150);\n         assertEquals(messageA, _subscription.getQueueContext().getLastSeenEntry().getMessage());\n+        assertNull(\"There should be no releasedEntry after an enqueue\", ((QueueContext)_subscription.getQueueContext())._releasedEntry);\n+    }\n+\n+    /**\n+     * Tests enqueuing two messages.\n+     */\n+    public void testEnqueueTwoMessagesThenRegisterSubscription() throws Exception\n+    {\n+        AMQMessage messageA = createMessage(new Long(24));\n+        AMQMessage messageB = createMessage(new Long(25));\n+        _queue.enqueue(messageA);\n+        _queue.enqueue(messageB);\n+        _queue.registerSubscription(_subscription, false);\n+        Thread.sleep(150);\n+        assertEquals(messageB, _subscription.getQueueContext().getLastSeenEntry().getMessage());\n+        assertNull(\"There should be no releasedEntry after enqueues\", ((QueueContext)_subscription.getQueueContext())._releasedEntry);\n+    }\n+\n+    /**\n+     * Tests that a re-queued message is resent to the subscriber.  Verifies also that the\n+     * QueueContext._releasedEntry is reset to null after the entry has been reset.\n+     */\n+    public void testRequeuedMessageIsResentToSubscriber() throws Exception\n+    {\n+        _queue.registerSubscription(_subscription, false);\n+\n+        final ArrayList<QueueEntry> queueEntries = new ArrayList<QueueEntry>();\n+        PostEnqueueAction postEnqueueAction = new PostEnqueueAction()\n+        {\n+            public void onEnqueue(QueueEntry entry)\n+            {\n+                queueEntries.add(entry);\n+            }\n+        };\n+\n+        AMQMessage messageA = createMessage(new Long(24));\n+        AMQMessage messageB = createMessage(new Long(25));\n+        AMQMessage messageC = createMessage(new Long(26));\n+\n+        /* Enqueue three messages */\n+\n+        _queue.enqueue(messageA, postEnqueueAction);\n+        _queue.enqueue(messageB, postEnqueueAction);\n+        _queue.enqueue(messageC, postEnqueueAction);\n+\n+        Thread.sleep(150);  // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription\", 3, _subscription.getMessages().size());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(0).isRedelivered());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(1).isRedelivered());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(2).isRedelivered());\n+\n+        /* Now requeue the first message only */\n+\n+        queueEntries.get(0).release();\n+        _queue.requeue(queueEntries.get(0));\n+\n+        Thread.sleep(150); // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription\", 4, _subscription.getMessages().size());\n+        assertTrue(\"Redelivery flag should now be set\", queueEntries.get(0).isRedelivered());\n+        assertFalse(\"Redelivery flag should remain be unset\", queueEntries.get(1).isRedelivered());\n+        assertFalse(\"Redelivery flag should remain be unset\",queueEntries.get(2).isRedelivered());\n+        assertNull(\"releasedEntry should be cleared after requeue processed\", ((QueueContext)_subscription.getQueueContext())._releasedEntry);\n+    }\n+\n+    /**\n+     * Tests that a re-queued message that becomes expired is not resent to the subscriber.\n+     * This tests ensures that SimpleAMQQueueEntry.getNextAvailableEntry avoids expired entries.\n+     * Verifies also that the QueueContext._releasedEntry is reset to null after the entry has been reset.\n+     */\n+    public void testRequeuedMessageThatBecomesExpiredIsNotRedelivered() throws Exception\n+    {\n+        _queue.registerSubscription(_subscription, false);\n+\n+        final ArrayList<QueueEntry> queueEntries = new ArrayList<QueueEntry>();\n+        PostEnqueueAction postEnqueueAction = new PostEnqueueAction()\n+        {\n+            public void onEnqueue(QueueEntry entry)\n+            {\n+                queueEntries.add(entry);\n+            }\n+        };\n+\n+        /* Enqueue one message with expiration set for a short time in the future */\n+\n+        AMQMessage messageA = createMessage(new Long(24));\n+        int messageExpirationOffset = 200;\n+        messageA.setExpiration(System.currentTimeMillis() + messageExpirationOffset);\n+\n+        _queue.enqueue(messageA, postEnqueueAction);\n+\n+        int subFlushWaitTime = 150;\n+        Thread.sleep(subFlushWaitTime); // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription\", 1, _subscription.getMessages().size());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(0).isRedelivered());\n+\n+        /* Wait a little more to be sure that message will have expired, then requeue it */\n+        Thread.sleep(messageExpirationOffset - subFlushWaitTime + 10);\n+        queueEntries.get(0).release();\n+        _queue.requeue(queueEntries.get(0));\n+\n+        Thread.sleep(subFlushWaitTime); // Work done by SubFlushRunner Thread\n+\n+        assertTrue(\"Expecting the queue entry to be now expired\", queueEntries.get(0).expired());\n+        assertEquals(\"Total number of messages sent should not have changed\", 1, _subscription.getMessages().size());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(0).isRedelivered());\n+        assertNull(\"releasedEntry should be cleared after requeue processed\", ((QueueContext)_subscription.getQueueContext())._releasedEntry);\n+\n+    }\n+\n+    /**\n+     * Tests that if a client requeues messages 'out of order' (the order\n+     * used by QueueEntryImpl.compareTo) that messages are still resent\n+     * successfully.  Specifically this test ensures the {@see SimpleAMQQueue#requeue()}\n+     * can correctly move the _releasedEntry to an earlier position in the QueueEntry list.\n+     */\n+    public void testMessagesRequeuedOutOfComparableOrderAreDelivered() throws Exception\n+    {\n+        _queue.registerSubscription(_subscription, false);\n+\n+        final ArrayList<QueueEntry> queueEntries = new ArrayList<QueueEntry>();\n+        PostEnqueueAction postEnqueueAction = new PostEnqueueAction()\n+        {\n+            public void onEnqueue(QueueEntry entry)\n+            {\n+                queueEntries.add(entry);\n+            }\n+        };\n+\n+        AMQMessage messageA = createMessage(new Long(24));\n+        AMQMessage messageB = createMessage(new Long(25));\n+        AMQMessage messageC = createMessage(new Long(26));\n+\n+        /* Enqueue three messages */\n+\n+        _queue.enqueue(messageA, postEnqueueAction);\n+        _queue.enqueue(messageB, postEnqueueAction);\n+        _queue.enqueue(messageC, postEnqueueAction);\n+\n+        Thread.sleep(150);  // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription\", 3, _subscription.getMessages().size());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(0).isRedelivered());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(1).isRedelivered());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(2).isRedelivered());\n+\n+        /* Now requeue the third and first message only */\n+\n+        queueEntries.get(2).release();\n+        queueEntries.get(0).release();\n+        _queue.requeue(queueEntries.get(2));\n+        _queue.requeue(queueEntries.get(0));\n+\n+        Thread.sleep(150); // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription\", 5, _subscription.getMessages().size());\n+        assertTrue(\"Redelivery flag should now be set\", queueEntries.get(0).isRedelivered());\n+        assertFalse(\"Redelivery flag should remain be unset\", queueEntries.get(1).isRedelivered());\n+        assertTrue(\"Redelivery flag should now be set\",queueEntries.get(2).isRedelivered());\n+        assertNull(\"releasedEntry should be cleared after requeue processed\", ((QueueContext)_subscription.getQueueContext())._releasedEntry);\n+    }\n+\n+\n+    /**\n+     * Tests a requeue for a queue with multiple subscriptions.  Verifies that a\n+     * requeue resends a message to a <i>single</i> subscriber.\n+     */\n+    public void testRequeueForQueueWithMultipleSubscriptions() throws Exception\n+    {\n+        MockSubscription subscription1 = new MockSubscription();\n+        MockSubscription subscription2 = new MockSubscription();\n+\n+        _queue.registerSubscription(subscription1, false);\n+        _queue.registerSubscription(subscription2, false);\n+\n+        final ArrayList<QueueEntry> queueEntries = new ArrayList<QueueEntry>();\n+        PostEnqueueAction postEnqueueAction = new PostEnqueueAction()\n+        {\n+            public void onEnqueue(QueueEntry entry)\n+            {\n+                queueEntries.add(entry);\n+            }\n+        };\n+\n+        AMQMessage messageA = createMessage(new Long(24));\n+        AMQMessage messageB = createMessage(new Long(25));\n+\n+        /* Enqueue two messages */\n+\n+        _queue.enqueue(messageA, postEnqueueAction);\n+        _queue.enqueue(messageB, postEnqueueAction);\n+\n+        Thread.sleep(150);  // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription1 after enqueue\", 1, subscription1.getMessages().size());\n+        assertEquals(\"Unexpected total number of messages sent to subscription2 after enqueue\", 1, subscription2.getMessages().size());\n+\n+        /* Now requeue a message (for any subscription) */\n+\n+        queueEntries.get(0).release();\n+        _queue.requeue((QueueEntryImpl)queueEntries.get(0));\n+\n+        Thread.sleep(150); // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to all subscriptions after requeue\", 3, subscription1.getMessages().size() + subscription2.getMessages().size());\n+        assertNull(\"releasedEntry should be cleared after requeue processed\", ((QueueContext)subscription1.getQueueContext())._releasedEntry);\n+        assertNull(\"releasedEntry should be cleared after requeue processed\", ((QueueContext)subscription2.getQueueContext())._releasedEntry);\n+    }\n+\n+    /**\n+     * Tests a requeue for a queue with multiple subscriptions.  Verifies that a\n+     * subscriber specific requeue resends the message to <i>that</i> subscriber.\n+     */\n+    public void testSubscriptionSpecificRequeueForQueueWithMultipleSubscriptions() throws Exception\n+    {\n+        MockSubscription subscription1 = new MockSubscription();\n+        MockSubscription subscription2 = new MockSubscription();\n+\n+        _queue.registerSubscription(subscription1, false);\n+        _queue.registerSubscription(subscription2, false);\n+\n+        final ArrayList<QueueEntry> queueEntries = new ArrayList<QueueEntry>();\n+        PostEnqueueAction postEnqueueAction = new PostEnqueueAction()\n+        {\n+            public void onEnqueue(QueueEntry entry)\n+            {\n+                queueEntries.add(entry);\n+            }\n+        };\n+\n+        AMQMessage messageA = createMessage(new Long(24));\n+        AMQMessage messageB = createMessage(new Long(25));\n+\n+        /* Enqueue two messages */\n+\n+        _queue.enqueue(messageA, postEnqueueAction);\n+        _queue.enqueue(messageB, postEnqueueAction);\n+\n+        Thread.sleep(150);  // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription1 after enqueue\", 1, subscription1.getMessages().size());\n+        assertEquals(\"Unexpected total number of messages sent to subscription2 after enqueue\", 1, subscription2.getMessages().size());\n+\n+        /* Now requeue a message (for first subscription) */\n+\n+        queueEntries.get(0).release();\n+        _queue.requeue((QueueEntryImpl)queueEntries.get(0), subscription1);\n+\n+        Thread.sleep(150); // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription1 after requeue\", 2, subscription1.getMessages().size());\n+        assertEquals(\"Unexpected total number of messages sent to subscription2 after requeue\", 1, subscription2.getMessages().size());\n+        assertNull(\"releasedEntry should be cleared after requeue processed\", ((QueueContext)subscription1.getQueueContext())._releasedEntry);\n+        assertNull(\"releasedEntry should be cleared after requeue processed\", ((QueueContext)subscription2.getQueueContext())._releasedEntry);\n     }\n \n     public void testExclusiveConsumer() throws AMQException",
                "raw_url": "https://github.com/apache/qpid/raw/d8fd38ea9ef5c5ddd63859eb76a290ffce708b63/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/SimpleAMQQueueTest.java",
                "sha": "67d093d00abaad5cf2b164dd604f323a7e95963d",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/qpid/blob/d8fd38ea9ef5c5ddd63859eb76a290ffce708b63/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/SimpleQueueEntryListTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/SimpleQueueEntryListTest.java?ref=d8fd38ea9ef5c5ddd63859eb76a290ffce708b63",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/queue/SimpleQueueEntryListTest.java",
                "patch": "@@ -51,6 +51,21 @@ protected void tearDown()\n         }\n     }\n     \n+    /**\n+     * Tests the behavior of the next(QueuyEntry) method.\n+     */\n+    public void testNext() throws Exception\n+    {\n+        SimpleQueueEntryList sqel = new SimpleQueueEntryList(null);\n+        int i = 0;\n+\n+        QueueEntry queueEntry1 = sqel.add(new MockAMQMessage(i++));\n+        QueueEntry queueEntry2 = sqel.add(new MockAMQMessage(i++));\n+\n+        assertSame(queueEntry2, sqel.next(queueEntry1));\n+        assertNull(sqel.next(queueEntry2));\n+    }\n+\n     public void testScavenge() throws Exception\n     {\n         SimpleQueueEntryList sqel = new SimpleQueueEntryList(null);",
                "raw_url": "https://github.com/apache/qpid/raw/d8fd38ea9ef5c5ddd63859eb76a290ffce708b63/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/SimpleQueueEntryListTest.java",
                "sha": "320a75045ab8a6675ded92eff4b893633af33664",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/qpid/blob/d8fd38ea9ef5c5ddd63859eb76a290ffce708b63/qpid/java/broker/src/test/java/org/apache/qpid/server/store/TestableMemoryMessageStore.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/store/TestableMemoryMessageStore.java?ref=d8fd38ea9ef5c5ddd63859eb76a290ffce708b63",
                "deletions": 11,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/store/TestableMemoryMessageStore.java",
                "patch": "@@ -20,17 +20,12 @@\n  */\n package org.apache.qpid.server.store;\n \n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n import org.apache.qpid.AMQStoreException;\n import org.apache.qpid.server.queue.AMQQueue;\n-import org.apache.qpid.server.message.MessageMetaData;\n-import org.apache.qpid.framing.abstraction.ContentChunk;\n-\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.nio.ByteBuffer;\n \n /**\n  * Adds some extra methods to the memory message store for testing purposes.\n@@ -52,8 +47,11 @@ public TestableMemoryMessageStore()\n \n     }\n \n-\n-\n+    @Override\n+    public void close() throws Exception\n+    {\n+        // Not required to do anything\n+    }\n \n     @Override\n     public StoredMessage addMessage(StorableMessageMetaData metaData)",
                "raw_url": "https://github.com/apache/qpid/raw/d8fd38ea9ef5c5ddd63859eb76a290ffce708b63/qpid/java/broker/src/test/java/org/apache/qpid/server/store/TestableMemoryMessageStore.java",
                "sha": "3593297a0553ac96fc9def20a2cfc606c89b2910",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/qpid/blob/d8fd38ea9ef5c5ddd63859eb76a290ffce708b63/qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java?ref=d8fd38ea9ef5c5ddd63859eb76a290ffce708b63",
                "deletions": 11,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java",
                "patch": "@@ -21,20 +21,19 @@\n *\n */\n \n+import java.util.ArrayList;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.server.AMQChannel;\n import org.apache.qpid.server.logging.LogActor;\n-import org.apache.qpid.server.filter.FilterManager;\n import org.apache.qpid.server.queue.AMQQueue;\n import org.apache.qpid.server.queue.QueueEntry;\n import org.apache.qpid.server.queue.QueueEntry.SubscriptionAcquiredState;\n \n-import java.util.ArrayList;\n-import java.util.concurrent.atomic.AtomicLong;\n-import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n-\n public class MockSubscription implements Subscription\n {\n \n@@ -137,12 +136,11 @@ public void confirmAutoClose()\n \n     public void set(String key, Object value)\n     {\n-        //To change body of implemented methods use File | Settings | File Templates.\n     }\n \n     public Object get(String key)\n     {\n-        return null;  //To change body of implemented methods use File | Settings | File Templates.\n+        return null;\n     }\n \n     public boolean isAutoClose()\n@@ -194,12 +192,15 @@ public void onDequeue(QueueEntry queueEntry)\n \n     public void restoreCredit(QueueEntry queueEntry)\n     {\n-        //To change body of implemented methods use File | Settings | File Templates.\n     }\n \n-    public void send(QueueEntry msg) throws AMQException\n+    public void send(QueueEntry entry) throws AMQException\n     {\n-        messages.add(msg);\n+        if (messages.contains(entry))\n+        {\n+            entry.setRedelivered();\n+        }\n+        messages.add(entry);\n     }\n \n     public void setQueueContext(AMQQueue.Context queueContext)",
                "raw_url": "https://github.com/apache/qpid/raw/d8fd38ea9ef5c5ddd63859eb76a290ffce708b63/qpid/java/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java",
                "sha": "1ec134e90e485b04ec2a1770528960714b647778",
                "status": "modified"
            }
        ],
        "message": "QPID-2900: Changed SimpleAMQQueue to avoid race condition in the updating atomic QueueContext._releasedEntry. Race was between thread SubFlushRunner (or QueueRunner) executing method SimpleAMQQueue.setLastSeenEntry and the thread executing the MessageRelase command executing method SimpleAMQQueue.updateSubRequeueEntry. Bolstered the unit tests surrounding the area of change to reduce risk of regression. Overrode TestableMemoryMessageStore#close() to avoid a NPE during tearDown silently cluttering some unit test logs (including SimpleAMQQueueTest).\n\nApplied patch from Keith Wall <keith.wall@gmail.com>\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@1068315 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/5045a8bc614c60b8c40d90490a2c0722d2d82ca9",
        "patched_files": [
            "MockSubscription.java",
            "SimpleAMQQueue.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "SimpleQueueEntryListTest.java",
            "SimpleAMQQueueTest.java",
            "QueueEntryTest.java",
            "TestableMemoryMessageStore.java"
        ]
    },
    "qpid_eae2b13": {
        "bug_id": "qpid_eae2b13",
        "commit": "https://github.com/apache/qpid/commit/eae2b134840386ce3654737476142b96a12a404f",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/eae2b134840386ce3654737476142b96a12a404f/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java?ref=eae2b134840386ce3654737476142b96a12a404f",
                "deletions": 2,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java",
                "patch": "@@ -76,7 +76,7 @@ public boolean isBound(AMQShortString routingKey, FieldTable arguments, AMQQueue\n \n     public boolean isBound(AMQShortString routingKey, AMQQueue queue)\n     {\n-        return _queues.containsKey(queue);\n+        return isBound(queue);\n     }\n \n     public boolean isBound(AMQShortString routingKey)\n@@ -87,7 +87,10 @@ public boolean isBound(AMQShortString routingKey)\n \n     public boolean isBound(AMQQueue queue)\n     {\n-\n+        if (queue == null)\n+        {\n+            return false;\n+        }\n         return _queues.containsKey(queue);\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/eae2b134840386ce3654737476142b96a12a404f/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java",
                "sha": "6ad5eb261ea54e47c7a2a9e7cdf2e49760cf112f",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/qpid/blob/eae2b134840386ce3654737476142b96a12a404f/qpid/java/broker/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java?ref=eae2b134840386ce3654737476142b96a12a404f",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java",
                "patch": "@@ -0,0 +1,67 @@\n+package org.apache.qpid.server.exchange;\n+\n+import static org.mockito.Mockito.mock;\n+\n+import java.util.UUID;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.framing.FieldTable;\n+import org.apache.qpid.server.binding.Binding;\n+import org.apache.qpid.server.queue.AMQQueue;\n+\n+public class FanoutExchangeTest extends TestCase\n+{\n+    private FanoutExchange _exchange;\n+\n+    public void setUp()\n+    {\n+        _exchange = new FanoutExchange();\n+    }\n+\n+    public void testIsBoundAMQShortStringFieldTableAMQQueueWhenQueueIsNull()\n+    {\n+        assertFalse(\"calling isBound(AMQShortString,FieldTable,AMQQueue) with null queue should return false\",\n+                _exchange.isBound((AMQShortString) null, (FieldTable) null, (AMQQueue) null));\n+    }\n+\n+    public void testIsBoundAMQShortStringAMQQueueWhenQueueIsNull()\n+    {\n+        assertFalse(\"calling isBound(AMQShortString,AMQQueue) with null queue should return false\",\n+                _exchange.isBound((AMQShortString) null, (AMQQueue) null));\n+    }\n+\n+    public void testIsBoundAMQQueueWhenQueueIsNull()\n+    {\n+        assertFalse(\"calling isBound(AMQQueue) with null queue should return false\", _exchange.isBound((AMQQueue) null));\n+    }\n+\n+    public void testIsBoundAMQShortStringFieldTableAMQQueue()\n+    {\n+        AMQQueue queue = bindQueue();\n+        assertTrue(\"Should return true for a bound queue\",\n+                _exchange.isBound((AMQShortString) null, (FieldTable) null, queue));\n+    }\n+\n+    public void testIsBoundAMQShortStringAMQQueue()\n+    {\n+        AMQQueue queue = bindQueue();\n+        assertTrue(\"Should return true for a bound queue\",\n+                _exchange.isBound((AMQShortString) null, queue));\n+    }\n+\n+    public void testIsBoundAMQQueue()\n+    {\n+        AMQQueue queue = bindQueue();\n+        assertTrue(\"Should return true for a bound queue\",\n+                _exchange.isBound(queue));\n+    }\n+\n+    private AMQQueue bindQueue()\n+    {\n+        AMQQueue queue = mock(AMQQueue.class);\n+        _exchange.addBinding(new Binding(UUID.randomUUID(), \"does not matter\", queue, _exchange, null));\n+        return queue;\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/eae2b134840386ce3654737476142b96a12a404f/qpid/java/broker/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java",
                "sha": "67739373e16e3d8ad28883759804a8dcc9d953d0",
                "status": "added"
            }
        ],
        "message": "QPID-4671: [Java Broker] Fix NPE occuring in FanoutExchange#isBound(... AMQQueue) when queue parameter is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@1462162 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/56bd292e1e13798edef69bc58c6b84bbc38aa888",
        "patched_files": [
            "FanoutExchange.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "FanoutExchangeTest.java"
        ]
    },
    "qpid_ed32be4": {
        "bug_id": "qpid_ed32be4",
        "commit": "https://github.com/apache/qpid/commit/ed32be4a4fb2deba5ce31f604cac67abc7fa1977",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/qpid/blob/ed32be4a4fb2deba5ce31f604cac67abc7fa1977/qpid/java/broker-core/src/main/java/org/apache/qpid/server/exchange/TopicExchange.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/main/java/org/apache/qpid/server/exchange/TopicExchange.java?ref=ed32be4a4fb2deba5ce31f604cac67abc7fa1977",
                "deletions": 4,
                "filename": "qpid/java/broker-core/src/main/java/org/apache/qpid/server/exchange/TopicExchange.java",
                "patch": "@@ -76,8 +76,10 @@ protected synchronized void onBindingUpdated(final BindingImpl binding, final Ma\n         assert queue != null;\n         assert bindingKey != null;\n \n-        _logger.debug(\"Updating binding of queue \" + queue.getName() + \" with routing key \" + bindingKey);\n-\n+        if (_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"Updating binding of queue \" + queue.getName() + \" with routing key \" + bindingKey);\n+        }\n \n         String routingKey = TopicNormalizer.normalize(bindingKey);\n \n@@ -87,6 +89,7 @@ protected synchronized void onBindingUpdated(final BindingImpl binding, final Ma\n             if (_bindings.containsKey(binding))\n             {\n                 Map<String, Object> oldArgs = _bindings.get(binding);\n+                _bindings.put(binding, args);\n                 TopicExchangeResult result = _topicExchangeResults.get(routingKey);\n \n                 if (FilterSupport.argumentsContainFilter(args))\n@@ -136,8 +139,10 @@ protected synchronized void registerQueue(final BindingImpl binding) throws AMQI\n         assert queue != null;\n         assert bindingKey != null;\n \n-        _logger.debug(\"Registering queue \" + queue.getName() + \" with routing key \" + bindingKey);\n-\n+        if (_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"Registering queue \" + queue.getName() + \" with routing key \" + bindingKey);\n+        }\n \n         String routingKey = TopicNormalizer.normalize(bindingKey);\n \n@@ -252,6 +257,12 @@ private synchronized boolean deregisterQueue(final BindingImpl binding)\n         if(_bindings.containsKey(binding))\n         {\n             Map<String,Object> bindingArgs = _bindings.remove(binding);\n+\n+            if (_logger.isDebugEnabled())\n+            {\n+                _logger.debug(\"deregisterQueue \" + bindingArgs);\n+            }\n+\n             String bindingKey = TopicNormalizer.normalize(binding.getBindingKey());\n             TopicExchangeResult result = _topicExchangeResults.get(bindingKey);\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ed32be4a4fb2deba5ce31f604cac67abc7fa1977/qpid/java/broker-core/src/main/java/org/apache/qpid/server/exchange/TopicExchange.java",
                "sha": "3e5d7dedb4c4be78f3c39f7e1057f70487a31b3e",
                "status": "modified"
            },
            {
                "additions": 170,
                "blob_url": "https://github.com/apache/qpid/blob/ed32be4a4fb2deba5ce31f604cac67abc7fa1977/qpid/java/broker-core/src/test/java/org/apache/qpid/server/exchange/TopicExchangeTest.java",
                "changes": 208,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker-core/src/test/java/org/apache/qpid/server/exchange/TopicExchangeTest.java?ref=ed32be4a4fb2deba5ce31f604cac67abc7fa1977",
                "deletions": 38,
                "filename": "qpid/java/broker-core/src/test/java/org/apache/qpid/server/exchange/TopicExchangeTest.java",
                "patch": "@@ -20,9 +20,11 @@\n  */\n package org.apache.qpid.server.exchange;\n \n+import static org.apache.qpid.common.AMQPFilterTypes.*;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -31,6 +33,7 @@\n import org.junit.Assert;\n \n import org.apache.qpid.server.binding.BindingImpl;\n+import org.apache.qpid.server.message.AMQMessageHeader;\n import org.apache.qpid.server.message.InstanceProperties;\n import org.apache.qpid.server.message.MessageReference;\n import org.apache.qpid.server.message.ServerMessage;\n@@ -64,6 +67,7 @@ public void setUp() throws Exception\n         attributes.put(Exchange.DURABLE, false);\n \n         _exchange = new TopicExchange(attributes, _vhost);\n+        _exchange.open();\n     }\n \n     @Override\n@@ -94,7 +98,7 @@ public void tearDown() throws Exception\n     public void testNoRoute() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a*#b\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.*.#.b\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.*.#.b\", queue, _exchange, null);\n \n \n         routeMessage(\"a.b\", 0l);\n@@ -105,7 +109,7 @@ public void testNoRoute() throws Exception\n     public void testDirectMatch() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"ab\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null);\n \n \n         routeMessage(\"a.b\",0l);\n@@ -127,7 +131,7 @@ public void testDirectMatch() throws Exception\n     public void testStarMatch() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a*\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.*\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.*\", queue, _exchange, null);\n \n \n         routeMessage(\"a.b\",0l);\n@@ -158,7 +162,7 @@ public void testStarMatch() throws Exception\n     public void testHashMatch() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a#\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.#\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.#\", queue, _exchange, null);\n \n \n         routeMessage(\"a.b.c\",0l);\n@@ -209,7 +213,7 @@ public void testHashMatch() throws Exception\n     public void testMidHash() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.*.#.b\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.*.#.b\", queue, _exchange, null);\n \n         routeMessage(\"a.c.d.b\",0l);\n \n@@ -234,7 +238,7 @@ public void testMidHash() throws Exception\n     public void testMatchAfterHash() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a#\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.*.#.b.c\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.*.#.b.c\", queue, _exchange, null);\n \n \n         int queueCount = routeMessage(\"a.c.b.b\",0l);\n@@ -272,11 +276,11 @@ public void testMatchAfterHash() throws Exception\n     public void testHashAfterHash() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a#\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(),\n-                                                              \"a.*.#.b.c.#.d\",\n-                                                              queue,\n-                                                              _exchange,\n-                                                              null));\n+        createBinding(UUID.randomUUID(),\n+                      \"a.*.#.b.c.#.d\",\n+                      queue,\n+                      _exchange,\n+                      null);\n \n         int queueCount = routeMessage(\"a.c.b.b.c\",0l);\n         Assert.assertEquals(\"Message should not route to any queues\", 0, queueCount);\n@@ -297,7 +301,7 @@ public void testHashAfterHash() throws Exception\n     public void testHashHash() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a#\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.#.*.#.d\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.#.*.#.d\", queue, _exchange, null);\n \n         int queueCount = routeMessage(\"a.c.b.b.c\",0l);\n         Assert.assertEquals(\"Message should not route to any queues\", 0, queueCount);\n@@ -318,7 +322,7 @@ public void testHashHash() throws Exception\n     public void testSubMatchFails() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.b.c.d\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.b.c.d\", queue, _exchange, null);\n \n         int queueCount = routeMessage(\"a.b.c\",0l);\n         Assert.assertEquals(\"Message should not route to any queues\", 0, queueCount);\n@@ -327,27 +331,10 @@ public void testSubMatchFails() throws Exception\n \n     }\n \n-    private int routeMessage(String routingKey, long messageNumber)\n-    {\n-        ServerMessage message = mock(ServerMessage.class);\n-        when(message.getInitialRoutingAddress()).thenReturn(routingKey);\n-        List<? extends BaseQueue> queues = _exchange.route(message, routingKey, InstanceProperties.EMPTY);\n-        MessageReference ref = mock(MessageReference.class);\n-        when(ref.getMessage()).thenReturn(message);\n-        when(message.newReference()).thenReturn(ref);\n-        when(message.getMessageNumber()).thenReturn(messageNumber);\n-        for(BaseQueue q : queues)\n-        {\n-            q.enqueue(message, null);\n-        }\n-\n-        return queues.size();\n-    }\n-\n     public void testMoreRouting() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null));\n+       createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null);\n \n \n         int queueCount = routeMessage(\"a.b.c\",0l);\n@@ -360,7 +347,7 @@ public void testMoreRouting() throws Exception\n     public void testMoreQueue() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null);\n \n \n         int queueCount = routeMessage(\"a\",0l);\n@@ -370,11 +357,119 @@ public void testMoreQueue() throws Exception\n \n     }\n \n-    private static BindingImpl createBinding(UUID id,\n-                                                final String bindingKey,\n-                                                final AMQQueue queue,\n-                                                final ExchangeImpl exchange,\n-                                                final Map<String, Object> arguments)\n+    public void testRouteWithJMSSelector() throws Exception\n+    {\n+        AMQQueue<?> queue = createQueue(\"queue1\");\n+        final String bindingKey = \"bindingKey\";\n+\n+        Map<String, Object> bindArgs = Collections.<String, Object>singletonMap(JMS_SELECTOR.toString(), \"arg > 5\");\n+        createBinding(UUID.randomUUID(), bindingKey, queue, _exchange, bindArgs);\n+\n+        ServerMessage matchMsg1 = mock(ServerMessage.class);\n+        AMQMessageHeader msgHeader1 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 6));\n+        when(matchMsg1.getMessageHeader()).thenReturn(msgHeader1);\n+        routeMessage(matchMsg1, bindingKey, 1);\n+        Assert.assertEquals(\"First message should be routed to queue\", 1, queue.getQueueDepthMessages());\n+\n+        ServerMessage nonmatchMsg2 = mock(ServerMessage.class);\n+        AMQMessageHeader msgHeader2 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 5));\n+        when(nonmatchMsg2.getMessageHeader()).thenReturn(msgHeader2);\n+        routeMessage(nonmatchMsg2, bindingKey, 2);\n+        Assert.assertEquals(\"Second message should not be routed to queue\", 1, queue.getQueueDepthMessages());\n+\n+        ServerMessage nonmatchMsg3 = mock(ServerMessage.class);\n+        AMQMessageHeader msgHeader3 = createMessageHeader(Collections.<String, Object>emptyMap());\n+        when(nonmatchMsg3.getMessageHeader()).thenReturn(msgHeader3);\n+        routeMessage(nonmatchMsg3, bindingKey, 3);\n+        Assert.assertEquals(\"Third message should not be routed to queue\", 1, queue.getQueueDepthMessages());\n+\n+        ServerMessage matchMsg4 = mock(ServerMessage.class);\n+        AMQMessageHeader msgHeader4 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 7));\n+        when(matchMsg4.getMessageHeader()).thenReturn(msgHeader4);\n+        routeMessage(matchMsg4, bindingKey, 4);\n+        Assert.assertEquals(\"First message should be routed to queue\", 2, queue.getQueueDepthMessages());\n+\n+    }\n+\n+    public void testUpdateBindingReplacingSelector() throws Exception\n+    {\n+        AMQQueue<?> queue = createQueue(\"queue1\");\n+        final String bindingKey = \"a\";\n+\n+        Map<String, Object> originalArgs = Collections.<String, Object>singletonMap(JMS_SELECTOR.toString(), \"arg > 5\");\n+        createBinding(UUID.randomUUID(), bindingKey, queue, _exchange, originalArgs);\n+\n+        AMQMessageHeader mgsHeader1 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 6));\n+        ServerMessage msg1 = mock(ServerMessage.class);\n+        when(msg1.getMessageHeader()).thenReturn(mgsHeader1);\n+\n+        routeMessage(msg1, bindingKey, 1);\n+        Assert.assertEquals(1, queue.getQueueDepthMessages());\n+\n+        // Update the binding\n+        Map<String, Object> newArgs = Collections.<String, Object>singletonMap(JMS_SELECTOR.toString(), \"arg > 6\");\n+        _exchange.replaceBinding(bindingKey, queue, newArgs);\n+\n+        // Message that would have matched the original selector but not the new\n+        AMQMessageHeader mgsHeader2 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 6));\n+        ServerMessage msg2 = mock(ServerMessage.class);\n+        when(msg2.getMessageHeader()).thenReturn(mgsHeader2);\n+\n+        routeMessage(msg2, bindingKey, 2);\n+        Assert.assertEquals(1, queue.getQueueDepthMessages());\n+\n+        // Message that matches only the second\n+        AMQMessageHeader mgsHeader3 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 7));\n+        ServerMessage msg3 = mock(ServerMessage.class);\n+        when(msg3.getMessageHeader()).thenReturn(mgsHeader3);\n+\n+        routeMessage(msg3, bindingKey, 2);\n+        Assert.assertEquals(2, queue.getQueueDepthMessages());\n+\n+    }\n+\n+    // This demonstrates QPID-5785.  Deleting the exchange after this combination of binding\n+    // updates generated a NPE\n+    public void testUpdateBindingAddingSelector() throws Exception\n+    {\n+        AMQQueue<?> queue = createQueue(\"queue1\");\n+        final String bindingKey = \"a\";\n+\n+        BindingImpl binding = createBinding(UUID.randomUUID(), bindingKey, queue, _exchange, null);\n+\n+        ServerMessage msg1 = mock(ServerMessage.class);\n+\n+        routeMessage(msg1, bindingKey, 1);\n+        Assert.assertEquals(1, queue.getQueueDepthMessages());\n+\n+        // Update the binding adding selector\n+        Map<String, Object> newArgs = Collections.<String, Object>singletonMap(JMS_SELECTOR.toString(), \"arg > 6\");\n+        _exchange.replaceBinding(bindingKey, queue, newArgs);\n+\n+        // Message that does not match the new selector\n+        AMQMessageHeader mgsHeader2 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 6));\n+        ServerMessage msg2 = mock(ServerMessage.class);\n+        when(msg2.getMessageHeader()).thenReturn(mgsHeader2);\n+\n+        routeMessage(msg2, bindingKey, 2);\n+        Assert.assertEquals(1, queue.getQueueDepthMessages());\n+\n+        // Message that matches the selector\n+        AMQMessageHeader mgsHeader3 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 7));\n+        ServerMessage msg3 = mock(ServerMessage.class);\n+        when(msg3.getMessageHeader()).thenReturn(mgsHeader3);\n+\n+        routeMessage(msg3, bindingKey, 2);\n+        Assert.assertEquals(2, queue.getQueueDepthMessages());\n+\n+        _exchange.delete();\n+    }\n+\n+    private BindingImpl createBinding(UUID id,\n+                                      String bindingKey,\n+                                      AMQQueue queue,\n+                                      ExchangeImpl exchange,\n+                                      Map<String, Object> arguments)\n     {\n         Map<String, Object> attributes = new HashMap<String, Object>();\n         attributes.put(Binding.NAME, bindingKey);\n@@ -383,10 +478,47 @@ private static BindingImpl createBinding(UUID id,\n             attributes.put(Binding.ARGUMENTS, arguments);\n         }\n         attributes.put(Binding.ID, id);\n-        BindingImpl binding = new BindingImpl(attributes, queue, exchange);\n+\n+        BindingImpl binding = (BindingImpl) _vhost.getObjectFactory().create(Binding.class, attributes, queue, exchange);\n         binding.open();\n         return binding;\n     }\n \n+    private int routeMessage(String routingKey, long messageNumber)\n+    {\n+        ServerMessage message = mock(ServerMessage.class);\n+        return routeMessage(message, routingKey, messageNumber);\n+    }\n+\n+    private int routeMessage(ServerMessage message, String routingKey, long messageNumber)\n+    {\n+        when(message.getInitialRoutingAddress()).thenReturn(routingKey);\n+        List<? extends BaseQueue> queues = _exchange.route(message, routingKey, InstanceProperties.EMPTY);\n+        MessageReference ref = mock(MessageReference.class);\n+        when(ref.getMessage()).thenReturn(message);\n+        when(message.newReference()).thenReturn(ref);\n+        when(message.getMessageNumber()).thenReturn(messageNumber);\n+        for(BaseQueue q : queues)\n+        {\n+            q.enqueue(message, null);\n+        }\n+\n+        return queues.size();\n+    }\n+\n+    private AMQMessageHeader createMessageHeader(Map<String, Object> headers)\n+    {\n+        AMQMessageHeader messageHeader = mock(AMQMessageHeader.class);\n+        for(Map.Entry<String, Object> entry : headers.entrySet())\n+        {\n+            String key = entry.getKey();\n+            Object value = entry.getValue();\n+\n+            when(messageHeader.containsHeader(key)).thenReturn(true);\n+            when(messageHeader.getHeader(key)).thenReturn(value);\n+        }\n+        return messageHeader;\n+    }\n+\n \n }",
                "raw_url": "https://github.com/apache/qpid/raw/ed32be4a4fb2deba5ce31f604cac67abc7fa1977/qpid/java/broker-core/src/test/java/org/apache/qpid/server/exchange/TopicExchangeTest.java",
                "sha": "d7779390b16e051f08f02fb42a8ca3da79df216d",
                "status": "modified"
            }
        ],
        "message": "QPID-5785: [Java Broker] Fix NPE when a topic exchange is closed after a message filter has been added to an existing binding.\n\nThis corrects a regression introduced by QPID-5709 that was causing a NPE to appear in the test log for QueueBindingTest.\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@1603294 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/7826dfbe93e1f1b2e239d8ce8a8d8ba29b044e3f",
        "patched_files": [
            "TopicExchange.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "TopicExchangeTest.java"
        ]
    },
    "qpid_f3fb8a5": {
        "bug_id": "qpid_f3fb8a5",
        "commit": "https://github.com/apache/qpid/commit/f3fb8a56864f89941fb527c8855018ce470143e1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java?ref=f3fb8a56864f89941fb527c8855018ce470143e1",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "patch": "@@ -1108,7 +1108,7 @@ private AMQMessage createAMQMessage(IncomingMessage incomingMessage)\n         AMQMessage message = new AMQMessage(incomingMessage.getStoredMessage());\n \n         message.setExpiration(incomingMessage.getExpiration());\n-        message.setClientIdentifier(_session);\n+        message.setConnectionIdentifier(_session.getReference());\n         return message;\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "sha": "e5e755bd2355797303aa8b3133c2eddf22223e98",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/broker/src/main/java/org/apache/qpid/server/message/AMQMessage.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/message/AMQMessage.java?ref=f3fb8a56864f89941fb527c8855018ce470143e1",
                "deletions": 9,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/message/AMQMessage.java",
                "patch": "@@ -58,7 +58,7 @@\n \n     private final long _size;\n \n-    private Object _sessionIdentifier;\n+    private Object _connectionIdentifier;\n     private static final byte IMMEDIATE_AND_DELIVERED = (byte) (IMMEDIATE | DELIVERED_TO_CONSUMER);\n \n     public AMQMessage(StoredMessage<MessageMetaData> handle)\n@@ -218,19 +218,15 @@ public long getMessageNumber()\n     }\n \n \n-    public Object getPublisherIdentifier()\n+    public Object getConnectionIdentifier()\n     {\n-        //todo store sessionIdentifier/client id with message in store\n-        //Currently the _sessionIdentifier will be null if the message has been\n-        // restored from a message Store\n-\n-        return _sessionIdentifier;\n+        return _connectionIdentifier;\n \n     }\n \n-    public void setClientIdentifier(final Object sessionIdentifier)\n+    public void setConnectionIdentifier(final Object connectionIdentifier)\n     {\n-        _sessionIdentifier = sessionIdentifier;\n+        _connectionIdentifier = connectionIdentifier;\n     }\n \n ",
                "raw_url": "https://github.com/apache/qpid/raw/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/broker/src/main/java/org/apache/qpid/server/message/AMQMessage.java",
                "sha": "6a0e4d216eb6e6d408a0945721393d5bed8e39ed",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/qpid/blob/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolEngine.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolEngine.java?ref=f3fb8a56864f89941fb527c8855018ce470143e1",
                "deletions": 8,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolEngine.java",
                "patch": "@@ -132,7 +132,8 @@\n     private Subject _authorizedSubject;\n     private MethodDispatcher _dispatcher;\n \n-    private final long _sessionID;\n+    private final long _connectionID;\n+    private Object _reference = new Object();\n \n     private AMQPConnectionActor _actor;\n     private LogSubject _logSubject;\n@@ -170,7 +171,7 @@ public AMQProtocolEngine(VirtualHostRegistry virtualHostRegistry, NetworkConnect\n         _codecFactory = new AMQCodecFactory(true, this);\n \n         setNetworkConnection(network);\n-        _sessionID = connectionId;\n+        _connectionID = connectionId;\n \n         _actor = new AMQPConnectionActor(this, virtualHostRegistry.getApplicationRegistry().getRootMessageLogger());\n \n@@ -203,7 +204,7 @@ private AMQProtocolSessionMBean createMBean() throws JMException\n \n     public long getSessionID()\n     {\n-        return _sessionID;\n+        return _connectionID;\n     }\n \n     public LogActor getLogActor()\n@@ -969,11 +970,6 @@ public MethodRegistry getRegistry()\n         return getMethodRegistry();\n     }\n \n-    public Object getClientIdentifier()\n-    {\n-        return _network.getRemoteAddress();\n-    }\n-\n     public VirtualHost getVirtualHost()\n     {\n         return _virtualHost;\n@@ -1464,4 +1460,8 @@ public void deliverToClient(final Subscription sub, final QueueEntry entry, fina\n \n     }\n \n+    public Object getReference()\n+    {\n+        return _reference;\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolEngine.java",
                "sha": "f6980be525aa8767638c8873a191b1d322bc5363",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java?ref=f3fb8a56864f89941fb527c8855018ce470143e1",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java",
                "patch": "@@ -172,7 +172,7 @@\n \n     void setClientProperties(FieldTable clientProperties);\n \n-    Object getClientIdentifier();\n+    Object getReference();\n \n     VirtualHost getVirtualHost();\n ",
                "raw_url": "https://github.com/apache/qpid/raw/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java",
                "sha": "6cd5b21f891051482067c510d1e01405c8d16c17",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java?ref=f3fb8a56864f89941fb527c8855018ce470143e1",
                "deletions": 12,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java",
                "patch": "@@ -475,10 +475,6 @@ public boolean filtersMessages()\n \n     public boolean hasInterest(QueueEntry entry)\n     {\n-\n-\n-\n-\n         //check that the message hasn't been rejected\n         if (entry.isRejectedBy(getSubscriptionID()))\n         {\n@@ -490,22 +486,17 @@ public boolean hasInterest(QueueEntry entry)\n \n         if (_noLocal)\n         {\n-\n             AMQMessage message = (AMQMessage) entry.getMessage();\n \n-            //todo - client id should be recorded so we don't have to handle\n-            // the case where this is null.\n-            final Object publisher = message.getPublisherIdentifier();\n+            final Object publisherReference = message.getConnectionIdentifier();\n \n             // We don't want local messages so check to see if message is one we sent\n-            Object localInstance = getProtocolSession();\n+            Object localReference = getProtocolSession().getReference();\n \n-            if(publisher.equals(localInstance))\n+            if(publisherReference != null && publisherReference.equals(localReference))\n             {\n                 return false;\n             }\n-\n-\n         }\n \n ",
                "raw_url": "https://github.com/apache/qpid/raw/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java",
                "sha": "32baa17fc7b7d27f47737b7566a2d2e32a97b31d",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/qpid/blob/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/systests/src/main/java/org/apache/qpid/server/persistent/NoLocalAfterRecoveryTest.java",
                "changes": 171,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/persistent/NoLocalAfterRecoveryTest.java?ref=f3fb8a56864f89941fb527c8855018ce470143e1",
                "deletions": 141,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/persistent/NoLocalAfterRecoveryTest.java",
                "patch": "@@ -20,14 +20,8 @@\n  */\n package org.apache.qpid.server.persistent;\n \n-import org.apache.commons.configuration.XMLConfiguration;\n-\n-import org.apache.qpid.client.AMQConnection;\n-import org.apache.qpid.jms.BrokerDetails;\n-import org.apache.qpid.jms.ConnectionListener;\n-import org.apache.qpid.jms.ConnectionURL;\n-import org.apache.qpid.server.store.DerbyMessageStore;\n-import org.apache.qpid.test.utils.QpidBrokerTestCase;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import javax.jms.Connection;\n import javax.jms.JMSException;\n@@ -36,60 +30,28 @@\n import javax.jms.Session;\n import javax.jms.Topic;\n import javax.jms.TopicSubscriber;\n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+\n+import org.apache.qpid.test.utils.QpidBrokerTestCase;\n \n /**\n- * QPID-1813 : We do not store the client id with a message so on store restart\n- * that information is lost and we are unable to perform no local checks.\n- *\n- * QPID-1813 highlights the lack of testing here as the broker will NPE as it\n- * assumes that the client id of the publisher will always exist\n+ * Verifies that after recovery, a new Connection with no-local in use is\n+ * able to receive messages sent prior to the broker restart.\n  */\n-public class NoLocalAfterRecoveryTest extends QpidBrokerTestCase implements ConnectionListener\n+public class NoLocalAfterRecoveryTest extends QpidBrokerTestCase\n {\n     protected final String MY_TOPIC_SUBSCRIPTION_NAME = this.getName();\n     protected static final int SEND_COUNT = 10;\n-    private CountDownLatch _failoverComplete = new CountDownLatch(1);\n-\n-    protected ConnectionURL _connectionURL;\n-\n-    @Override\n-    protected void setUp() throws Exception\n-    {\n-\n-        XMLConfiguration configuration = new XMLConfiguration(_configFile);\n-        configuration.setProperty(\"virtualhosts.virtualhost.test.store.class\", \"org.apache.qpid.server.store.DerbyMessageStore\");\n-        configuration.setProperty(\"virtualhosts.virtualhost.test.store.\"+ DerbyMessageStore.ENVIRONMENT_PATH_PROPERTY,\n-                                  System.getProperty(\"QPID_WORK\", System.getProperty(\"java.io.tmpdir\")) + File.separator + \"derbyDB-NoLocalAfterRecoveryTest\");\n-\n-        File tmpFile = File.createTempFile(\"configFile\", \"test\");\n-        tmpFile.deleteOnExit();\n-        configuration.save(tmpFile);\n-\n-        _configFile = tmpFile;\n-        _connectionURL = getConnectionURL();\n-\n-        BrokerDetails details = _connectionURL.getBrokerDetails(0);\n-\n-        // This will attempt to failover for 3 seconds.\n-        // Local testing suggests failover takes 2 seconds\n-        details.setProperty(BrokerDetails.OPTIONS_RETRY, \"10\");\n-        details.setProperty(BrokerDetails.OPTIONS_CONNECT_DELAY, \"500\");\n-\n-        super.setUp();        \n-    }\n \n     public void test() throws Exception\n     {\n+        if(!isBrokerStorePersistent())\n+        {\n+            fail(\"This test requires a broker with a persistent store\");\n+        }\n \n-        Connection connection = getConnection(_connectionURL);\n+        Connection connection = getConnection();\n         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);\n-\n-        Topic topic = (Topic) getInitialContext().lookup(\"topic\");\n+        Topic topic = session.createTopic(MY_TOPIC_SUBSCRIPTION_NAME);\n \n         TopicSubscriber noLocalSubscriber = session.\n                 createDurableSubscriber(topic, MY_TOPIC_SUBSCRIPTION_NAME + \"-NoLocal\",\n@@ -99,88 +61,40 @@ public void test() throws Exception\n                 createDurableSubscriber(topic, MY_TOPIC_SUBSCRIPTION_NAME + \"-Normal\",\n                                         null, false);\n \n-        List<Message> sent = sendMessage(session, topic, SEND_COUNT);\n-\n-        session.commit();\n-\n-        assertEquals(\"Incorrect number of messages sent\",\n-                     SEND_COUNT, sent.size());\n-\n+        sendMessage(session, topic, SEND_COUNT);\n \n         // Check messages can be received as expected.\n         connection.start();\n \n-        assertTrue(\"No Local Subscriber is not a no-local subscriber\",\n-                   noLocalSubscriber.getNoLocal());\n-\n-        assertFalse(\"Normal Subscriber is a no-local subscriber\",\n-                    normalSubscriber.getNoLocal());\n-\n-\n         List<Message> received = receiveMessage(noLocalSubscriber, SEND_COUNT);\n         assertEquals(\"No Local Subscriber Received messages\", 0, received.size());\n \n         received = receiveMessage(normalSubscriber, SEND_COUNT);\n         assertEquals(\"Normal Subscriber Received no messages\",\n                      SEND_COUNT, received.size());\n+        session.commit();\n+        connection.close();\n \n-\n-        ((AMQConnection)connection).setConnectionListener(this);\n-\n+        //We didn't receive the messages on the durable queue for the no-local subscriber\n+        //so they are still on the broker. Restart the broker, prompting their recovery.\n         restartBroker();\n \n+        Connection connection2 = getConnection();\n+        connection2.start();\n \n-        //Await\n-        if (!_failoverComplete.await(4000L, TimeUnit.MILLISECONDS))\n-        {\n-            fail(\"Failover Failed to compelete\");\n-        }\n-\n-        session.rollback();\n-\n-        //Failover will restablish our clients\n-        assertTrue(\"No Local Subscriber is not a no-local subscriber\",\n-                   noLocalSubscriber.getNoLocal());\n-\n-        assertFalse(\"Normal Subscriber is a no-local subscriber\",\n-                    normalSubscriber.getNoLocal());\n+        Session session2 = connection2.createSession(true, Session.SESSION_TRANSACTED);\n+        Topic topic2 = session2.createTopic(MY_TOPIC_SUBSCRIPTION_NAME);\n \n+        TopicSubscriber noLocalSubscriber2 = session2.\n+                createDurableSubscriber(topic2, MY_TOPIC_SUBSCRIPTION_NAME + \"-NoLocal\",\n+                                        null, true);\n \n-        // NOTE : here that the NO-local subscriber actually now gets ALL the\n-        // messages as the connection has failed and they are consuming on a\n-        // different connnection to the one that was published on.\n-        received = receiveMessage(noLocalSubscriber, SEND_COUNT);\n+        // The NO-local subscriber should now get ALL the messages\n+        // as they are being consumed on a different connection to\n+        // the one that they were published on.\n+        received = receiveMessage(noLocalSubscriber2, SEND_COUNT);\n+        session2.commit();\n         assertEquals(\"No Local Subscriber Received messages\", SEND_COUNT, received.size());\n-\n-        received = receiveMessage(normalSubscriber, SEND_COUNT);\n-        assertEquals(\"Normal Subscriber Received no messages\",\n-                     SEND_COUNT, received.size());\n-\n-        //leave the store in a clean state.\n-        session.commit();\n-    }\n-\n-    protected List<Message> assertReceiveMessage(MessageConsumer messageConsumer,\n-                                                 int count) throws JMSException\n-    {\n-\n-        List<Message> receivedMessages = new ArrayList<Message>(count);\n-        for (int i = 0; i < count; i++)\n-        {\n-            Message received = messageConsumer.receive(1000);\n-\n-            if (received != null)\n-            {\n-                receivedMessages.add(received);\n-            }\n-            else\n-            {\n-                fail(\"Only \"\n-                     + receivedMessages.size() + \"/\" + count + \" received.\");\n-            }\n-        }\n-\n-        return receivedMessages;\n     }\n \n     protected List<Message> receiveMessage(MessageConsumer messageConsumer,\n@@ -204,29 +118,4 @@ public void test() throws Exception\n \n         return receivedMessages;\n     }\n-\n-    public void bytesSent(long count)\n-    {\n-\n-    }\n-\n-    public void bytesReceived(long count)\n-    {\n-\n-    }\n-\n-    public boolean preFailover(boolean redirect)\n-    {\n-        return true;\n-    }\n-\n-    public boolean preResubscribe()\n-    {\n-        return true;\n-    }\n-\n-    public void failoverComplete()\n-    {\n-        _failoverComplete.countDown();\n-    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/systests/src/main/java/org/apache/qpid/server/persistent/NoLocalAfterRecoveryTest.java",
                "sha": "2e259191aa23feb000d3bdc5fe828939cae1b5fa",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/qpid/blob/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/test-profiles/JavaExcludes",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/test-profiles/JavaExcludes?ref=f3fb8a56864f89941fb527c8855018ce470143e1",
                "deletions": 3,
                "filename": "qpid/java/test-profiles/JavaExcludes",
                "patch": "@@ -28,9 +28,6 @@ org.apache.qpid.test.client.queue.QueuePolicyTest#testRejectPolicy\n //Moved from JavaStandaloneExcludes when it was removed\n ///////////////////////////////////////////////////////\n \n-//QPID-1818, QPID-1821 : Client code path does not correctly restore a transacted session after failover.\n-org.apache.qpid.server.persistent.NoLocalAfterRecoveryTest#*\n-\n //XA functionality is not fully implemented yet\n org.apache.qpid.jms.xa.XAResourceTest#*\n ",
                "raw_url": "https://github.com/apache/qpid/raw/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/test-profiles/JavaExcludes",
                "sha": "e123d029181a22bdb1d324d815c4c49c0d9cf73d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/test-profiles/JavaTransientExcludes",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/test-profiles/JavaTransientExcludes?ref=f3fb8a56864f89941fb527c8855018ce470143e1",
                "deletions": 0,
                "filename": "qpid/java/test-profiles/JavaTransientExcludes",
                "patch": "@@ -18,6 +18,7 @@\n //\n \n //These tests require a persistent store\n+org.apache.qpid.server.persistent.NoLocalAfterRecoveryTest#*\n org.apache.qpid.server.store.PersistentStoreTest#*\n org.apache.qpid.test.unit.ack.ClientAcknowledgeTest#testClientAckWithLargeFlusherPeriod\n ",
                "raw_url": "https://github.com/apache/qpid/raw/f3fb8a56864f89941fb527c8855018ce470143e1/qpid/java/test-profiles/JavaTransientExcludes",
                "sha": "7cc541c8b928f5790996e86e3e8aa102742fb802",
                "status": "modified"
            }
        ],
        "message": "QPID-3829: use a seperate object for reference checking to stop the AMQMessage holding its underlying 0-8/0-9/0-9-1 connection/io objects in memory after they are closed. Also stops an NPE on the 0-8/0-9/0-9-1 subscriptions when evaluating no-local after store recovery.\n\nEnables NoLocalAfterRecoveryTest again, though updated to make it simpler and more reliable. This test should be removed if changes for QPID-3605 are undertaken.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/trunk@1243379 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/a6cc4cb2fba4dbc260b2a8b58512f7c7a24ba5be",
        "patched_files": [
            "JavaTransientExcludes.java",
            "JavaExcludes.java",
            "AMQChannel.java",
            "AMQProtocolSession.java",
            "AMQMessage.java",
            "AMQProtocolEngine.java",
            "SubscriptionImpl.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "NoLocalAfterRecoveryTest.java"
        ]
    },
    "qpid_ffe5e29": {
        "bug_id": "qpid_ffe5e29",
        "commit": "https://github.com/apache/qpid/commit/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/bin/passwd",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/bin/passwd?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/bin/passwd",
                "patch": "@@ -0,0 +1,21 @@\n+#!/bin/bash\r\n+#\r\n+# Licensed to the Apache Software Foundation (ASF) under one\r\n+# or more contributor license agreements.  See the NOTICE file\r\n+# distributed with this work for additional information\r\n+# regarding copyright ownership.  The ASF licenses this file\r\n+# to you under the Apache License, Version 2.0 (the\r\n+# \"License\"); you may not use this file except in compliance\r\n+# with the License.  You may obtain a copy of the License at\r\n+#\r\n+#   http://www.apache.org/licenses/LICENSE-2.0\r\n+#\r\n+# Unless required by applicable law or agreed to in writing,\r\n+# software distributed under the License is distributed on an\r\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+# KIND, either express or implied.  See the License for the\r\n+# specific language governing permissions and limitations\r\n+# under the License.\r\n+#\r\n+\r\n+. qpid-run org.apache.qpid.server.security.Passwd \"$@\"\r",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/bin/passwd",
                "sha": "c1bb05c082331f6c35b6f85a2519802b9f1956de",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/bin/qpid-server",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/bin/qpid-server?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/bin/qpid-server",
                "patch": "@@ -18,4 +18,13 @@\n # under the License.\n #\n \n+# Set classpath to include Qpid jar with all required jars in manifest\n+QPID_LIBS=$QPID_HOME/lib/qpid-incubating.jar:$QPID_HOME/lib/bdbstore-launch.jar\n+\n+# Set other variables used by the qpid-run script before calling\n+export JAVA=java \\\n+       JAVA_VM=-server \\\n+       JAVA_MEM=-Xmx1024m \\\n+       QPID_CLASSPATH=$QPID_LIBS\n+\n . qpid-run org.apache.qpid.server.Main \"$@\"",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/bin/qpid-server",
                "sha": "a2b416b12ba81a397010a095904d8d3cd4325952",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/bin/qpid.stop",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/bin/qpid.stop?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 20,
                "filename": "qpid/java/broker/bin/qpid.stop",
                "patch": "@@ -5,17 +5,18 @@\n # Script checks for a given pid running PROGRAM and attempts to quit it\n #\n \n-MAX_ATTEMPTS=5\n-SLEEP_DELAY=2\n-PROGRAM=\"org.apache.qpid.server.Main\"\n+MAX_ATTEMPTS=1\n+SLEEP_DELAY=1\n+PROGRAM=\"DQPID\"\n \n \n #\n # Print what is going to be done\n #\n printActions()\n {\n-ps=`ps o command p $1|grep $PROGRAM`\n+#ps=`ps o command p $1|grep $PROGRAM`\n+ps=`ps -o args -p $1|grep $PROGRAM`\n echo \"Attempting to kill: $ps\"\n }\n \n@@ -36,42 +37,40 @@ quit()\n kill $1\n }\n \n+#\n+# Grep the ps log for the PID ($1) to ensure that it has quit\n+#\n+lookup()\n+{\n+result=`ps -o args -p $1 |grep -v grep |grep $PROGRAM |wc -l`\n+}\n \n #\n # Sleep and then check then lookup the PID($1) to ensure it has quit\n #\n check()\n {\n+echo \"Waiting $SLEEP_DELAY second for $1 to exit\"\n sleep $SLEEP_DELAY\n lookup $1\n }\n \n \n-#\n-# Grep the ps log for the PID ($1) to ensure that it has quit\n-#\n-lookup()\n-{\n-result=`ps p $1 |grep -v grep |grep $PROGRAM |wc -l`\n-}\n-\n \n #\n # Verify the PID($1) is available\n #\n verifyPid()\n {\n lookup $1\n-if [[ $result == 1 ]] ; then\t\n+if [[ $[$result] == 1 ]] ; then\n  brokerspid=$1\n else\n  echo \"Unable to locate Qpid Process with PID $1\"\n  exit -1\n fi\n }\n \n-\n-\n #\n # Main Run\n #\n@@ -89,30 +88,29 @@ printActions $brokerspid\n \n # Attempt to quit the process MAX_ATTEMPTS Times\n attempt=0\n-while [[ $result > 0 && $attempt < $MAX_ATTEMPTS ]] ; do\n+while [[ $[$result] > 0 && $[$attempt] < $[$MAX_ATTEMPTS] ]] ; do\n  quit $brokerspid\n  check $brokerspid\n  attempt=$[$attempt + 1]\n done\n \n-\n # Check that it has quit\n-if [[ $results == 0 ]] ; then\n+if [[ $[$result] == 0 ]] ; then\n  echo \"Process quit\"\n  exit 0\n else\n \n  # Now attempt to force quit the process\n  attempt=0\n- while [[ $result > 0 && $attempt < $MAX_ATTEMPTS ]] ; do\n+ while [[ $[$result] > 0 && $[$attempt] < $[$MAX_ATTEMPTS] ]] ; do\n   forceQuit $brokerspid\n   check $brokerspid\n   attempt=$[$attempt + 1]\n  done\n \n \n  # Output final status\n- if [[ $attempt == $MAX_ATTEMPTS ]] ; then\n+ if [[ $[$result] > 0 && $[$attempt] == $[$MAX_ATTEMPTS] ]] ; then\n \techo \"Stopped trying to kill process: $brokerspid\"\n \techo \"Attempted to stop $attempt times\"\n  else",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/bin/qpid.stop",
                "sha": "9193d3c4e17cf58b73cf204dd503c9f44e0f1de4",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/bin/qpid.stopall",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/bin/qpid.stopall?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 8,
                "filename": "qpid/java/broker/bin/qpid.stopall",
                "patch": "@@ -6,17 +6,16 @@\n #  Utilises qpid.stop to perform the actual stopping\n #\n \n-MAX_ATTEMPTS=5\n-SLEEP_DELAY=2\n-PROGRAM=\"org.apache.qpid.server.Main\"\n+PROGRAM=\"DQPID\"\n \n #\n # grep ps for instances of $PROGRAM and collect PIDs\n #\n lookup()\n {\n-pids=`ps o pid,command  |grep -v grep | grep $PROGRAM | cut -d ' ' -f 1`\n-result=`echo -n $pids | wc -l`\n+#pids=`ps o pid,command  | grep $PROGRAM | grep -v grep | cut -d ' ' -f 1`\n+pids=`ps -ef |grep $USER | grep $PROGRAM | grep -v grep | awk '{print $2}'`\n+result=`echo -n $pids | wc -w`\n }\n \n \n@@ -25,7 +24,7 @@ result=`echo -n $pids | wc -l`\n #\n showPids()\n {\n-ps p $pids\n+ps -o user,pid,args -p $pids\n }\n \n \n@@ -35,7 +34,7 @@ ps p $pids\n \n lookup\n \n-if [[ $result == 0 ]] ; then\n+if [[ $[$result] == 0 ]] ; then\n  echo \"No Qpid Brokers found running under user '$USER'\"\n  exit 0\n fi\n@@ -49,7 +48,7 @@ done\n # Check we have quit all\n lookup\n \n-if [[ $result == 0 ]] ; then\n+if [[ $[$result] == 0 ]] ; then\n  echo \"All Qpid brokers successfully quit\"\n else\n  echo \"Some brokers were not quit\"",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/bin/qpid.stopall",
                "sha": "2e762bdd50fce310ba2c813c98badd0012456b39",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/distribution/src/main/assembly/broker-bin.xml",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/distribution/src/main/assembly/broker-bin.xml?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/distribution/src/main/assembly/broker-bin.xml",
                "patch": "@@ -77,6 +77,12 @@\n       <destName>config.xml</destName>\n       <fileMode>420</fileMode>\n     </file>\n+    <file>\n+      <source>../etc/jmxremote.access</source>\n+      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n+      <destName>jmxremote.access</destName>\n+      <fileMode>420</fileMode>\n+    </file>\n     <file>\n       <source>../etc/log4j.xml</source>\n       <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n@@ -107,6 +113,12 @@\n       <destName>qpid-run</destName>\n       <fileMode>473</fileMode>\n     </file>\n+    <file>\n+      <source>../bin/passwd</source>\n+      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n+      <destName>passwd</destName>\n+      <fileMode>473</fileMode>\n+    </file>\n     <file>\n       <source>../bin/qpid-server</source>\n       <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/distribution/src/main/assembly/broker-bin.xml",
                "sha": "4b3263077112b67743a6ee12d039ae14110bff64",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/etc/access",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/etc/access?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/etc/access",
                "patch": "@@ -0,0 +1 @@\n+guest:localhost(rw),test(rw)\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/etc/access",
                "sha": "a781ed8aa999331ab37ff397fa9e81e0a9bcad3f",
                "status": "added"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/etc/config.xml",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/etc/config.xml?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 6,
                "filename": "qpid/java/broker/etc/config.xml",
                "patch": "@@ -41,6 +41,8 @@\n     </connector>\n     <management>\n         <enabled>true</enabled>\n+        <jmxport>8999</jmxport>\n+        <security-enabled>true</security-enabled>\n     </management>\n     <advanced>\n         <filterchain enableExecutorPool=\"true\"/>\n@@ -63,13 +65,14 @@\n                 </attributes>\n             </principal-database>\n \n-            <!--principal-database>\n-                <name>md5passwordfile</name>\n-                <class>org.apache.qpid.server.security.auth.database.MD5PasswordFilePrincipalDatabase</class>\n+            <!-- Example use of Base64 encoded MD5 hashes for authentication via CRAM-MD5-Hashed\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.Base64MD5PasswordFilePrincipalDatabase</class>\n                 <attributes>\n                     <attribute>\n                         <name>passwordFile</name>\n-                        <value>${conf}/md5passwd</value>\n+                        <value>${conf}/qpid.passwd</value>\n                     </attribute>\n                 </attributes>\n             </principal-database-->\n@@ -78,16 +81,21 @@\n         <access>\n             <class>org.apache.qpid.server.security.access.AllowAll</class>\n         </access>\n+        <jmx>\n+            <access>${conf}/jmxremote.access</access>\n+            <principal-database>passwordfile</principal-database>\n+        </jmx>        \n     </security>\n \n     <virtualhosts>\n         <virtualhost>\n             <name>localhost</name>\n             <localhost>\n                 <store>\n-                    <!-- <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>  -->\n+                    <!-- <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>${work}/localhost-store</environment-path> -->\n+\n                     <class>org.apache.qpid.server.store.MemoryMessageStore</class>\n-                    <environment-path>localhost-store</environment-path>\n                 </store>\n \n                 <security>",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/etc/config.xml",
                "sha": "c66c2f632e3046215b1c5eaaf0f92f11571ddf8a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/etc/jmxremote.access",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/etc/jmxremote.access?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/etc/jmxremote.access",
                "patch": "@@ -0,0 +1,3 @@\n+admin=admin\n+guest=readonly\n+user=readwrite",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/etc/jmxremote.access",
                "sha": "d1172fc197ac7862d1350cebe4f795913c818fe8",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/etc/log4j.xml",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/etc/log4j.xml?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 7,
                "filename": "qpid/java/broker/etc/log4j.xml",
                "patch": "@@ -44,20 +44,16 @@\n         <param name=\"backupFilesToPath\" value=\"${QPID_WORK}/backup/log\"/>\n \n         <layout class=\"org.apache.log4j.PatternLayout\">\n-            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n-            <!--param name=\"ConversionPattern\" value=\"%t %-5p %c{2} - %m%n\"/-->\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>            \n         </layout>\n     </appender>\n \n-        <appender name=\"FileAppender\" class=\"org.apache.log4j.FileAppender\">\n-        <param name=\"staticLogFileName\" value=\"false\"/>\n-\n+    <appender name=\"FileAppender\" class=\"org.apache.log4j.FileAppender\">\n         <param name=\"File\" value=\"${QPID_WORK}/log/${logprefix}qpid${logsuffix}.log\"/>\n         <param name=\"Append\" value=\"false\"/>\n \n         <layout class=\"org.apache.log4j.PatternLayout\">\n-            <param name=\"ConversionPattern\" value=\"%t %-5p %c{2} - %m%n\"/>\n-\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n         </layout>\n     </appender>\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/etc/log4j.xml",
                "sha": "b44222760790d2dea50310cd708def22cdd204f1",
                "status": "modified"
            },
            {
                "additions": 132,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/etc/persistent_config.xml",
                "changes": 132,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/etc/persistent_config.xml?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/etc/persistent_config.xml",
                "patch": "@@ -0,0 +1,132 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ - \n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ - \n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+\n+ This is an example config using the BDBMessageStore available from\n+ the Red Hat Messaging project at etp.108.redhat.com and distributed under GPL.\n+ -->\n+        \n+<broker>\n+    <prefix>${QPID_HOME}</prefix>\n+    <work>${QPID_WORK}</work>\n+    <conf>${prefix}/etc</conf>\n+    <connector>\n+        <qpidnio>true</qpidnio>\n+        <transport>nio</transport>\n+        <port>5672</port>\n+        <sslport>8672</sslport>\n+        <socketReceiveBuffer>32768</socketReceiveBuffer>\n+        <socketSendBuffer>32768</socketSendBuffer>\n+    </connector>\n+    <management>\n+        <enabled>true</enabled>\n+        <jmxport>8999</jmxport>\n+    </management>\n+    <advanced>\n+        <filterchain enableExecutorPool=\"true\"/>\n+        <enablePooledAllocator>false</enablePooledAllocator>\n+        <enableDirectBuffers>false</enableDirectBuffers>\n+        <framesize>65535</framesize>\n+        <compressBufferOnQueue>false</compressBufferOnQueue>\n+    </advanced>\n+\n+    <security>\n+        <principal-databases>\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.PlainPasswordVhostFilePrincipalDatabase</class>\n+                <attributes>\n+                    <attribute>\n+                        <name>passwordFile</name>\n+                        <value>${conf}/passwdVhost</value>\n+                    </attribute>\n+                </attributes>\n+            </principal-database>\n+        </principal-databases>\n+\n+        <access>\n+            <class>org.apache.qpid.server.security.access.AllowAll</class>\n+        </access>\n+        <jmx>\n+            <access>${conf}/jmxremote.access</access>\n+            <principal-database>passwordfile</principal-database>\n+        </jmx>\n+    </security>\n+\n+    <virtualhosts>\n+        <virtualhost>\n+            <name>localhost</name>\n+            <localhost>\n+                <store>\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>${work}/bdbstore/localhost-store</environment-path>\n+                </store>\n+\n+                <security>\n+                    <access>\n+                        <class>org.apache.qpid.server.security.access.PrincipalDatabaseAccessManager</class>\n+                        <attributes>\n+                            <attribute>\n+                                <name>principalDatabase</name>\n+                                <value>passwordfile</value>\n+                            </attribute>\n+                            <attribute>\n+                                <name>defaultAccessManager</name>\n+                                <value>DenyAll</value>\n+                            </attribute>\n+                        </attributes>\n+                    </access>\n+                </security>\n+            </localhost>\n+        </virtualhost>\n+\n+        <virtualhost>\n+            <name>development</name>\n+            <development>\n+                <store>\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>${work}/bdbstore/development-store</environment-path>\n+                </store>\n+            </development>\n+        </virtualhost>\n+\n+        <virtualhost>\n+            <name>test</name>\n+            <test>\n+                <store>\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>${work}/bdbstore/test-store</environment-path>\n+                </store>\n+            </test>\n+        </virtualhost>\n+\n+    </virtualhosts>\n+    <heartbeat>\n+        <delay>0</delay>\n+        <timeoutFactor>2.0</timeoutFactor>\n+    </heartbeat>\n+    <queue>\n+        <auto_register>true</auto_register>\n+    </queue>\n+\n+    <virtualhosts>${conf}/virtualhosts.xml</virtualhosts>\n+</broker>\n+\n+",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/etc/persistent_config.xml",
                "sha": "178a73515c6c0d2f51dd3d8c2c19368b3719db2c",
                "status": "added"
            },
            {
                "additions": 128,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/etc/transient_config.xml",
                "changes": 128,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/etc/transient_config.xml?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/etc/transient_config.xml",
                "patch": "@@ -0,0 +1,128 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ - \n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ - \n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+\n+ This is an example config file that uses the MemoryMessageStore.\n+  As a result it is aimed at brokers sending transient messages.\n+\n+ -->\n+<broker>\n+    <prefix>${QPID_HOME}</prefix>\n+    <work>${QPID_WORK}</work>\n+    <conf>${prefix}/etc</conf>\n+    <connector>\n+        <qpidnio>true</qpidnio>\n+        <transport>nio</transport>\n+        <port>5672</port>\n+        <sslport>8672</sslport>\n+        <socketReceiveBuffer>32768</socketReceiveBuffer>\n+        <socketSendBuffer>32768</socketSendBuffer>\n+    </connector>\n+    <management>\n+        <enabled>true</enabled>\n+        <jmxport>8999</jmxport>\n+    </management>\n+    <advanced>\n+        <filterchain enableExecutorPool=\"true\"/>\n+        <enablePooledAllocator>false</enablePooledAllocator>\n+        <enableDirectBuffers>false</enableDirectBuffers>\n+        <framesize>65535</framesize>\n+        <compressBufferOnQueue>false</compressBufferOnQueue>\n+    </advanced>\n+\n+    <security>\n+        <principal-databases>\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.PlainPasswordVhostFilePrincipalDatabase</class>\n+                <attributes>\n+                    <attribute>\n+                        <name>passwordFile</name>\n+                        <value>${conf}/passwdVhost</value>\n+                    </attribute>\n+                </attributes>\n+            </principal-database>\n+        </principal-databases>\n+        <access>\n+            <class>org.apache.qpid.server.security.access.AllowAll</class>\n+        </access>\n+        <jmx>\n+            <access>${conf}/jmxremote.access</access>\n+            <principal-database>passwordfile</principal-database>\n+        </jmx>\n+    </security>\n+\n+    <virtualhosts>\n+        <virtualhost>\n+            <name>localhost</name>\n+            <localhost>\n+                <store>\n+                    <class>org.apache.qpid.server.store.MemoryMessageStore</class>\n+                </store>\n+\n+                <security>\n+                    <access>\n+                        <class>org.apache.qpid.server.security.access.PrincipalDatabaseAccessManager</class>\n+                        <attributes>\n+                            <attribute>\n+                                <name>principalDatabase</name>\n+                                <value>passwordfile</value>\n+                            </attribute>\n+                            <attribute>\n+                                <name>defaultAccessManager</name>\n+                                <value>DenyAll</value>\n+                            </attribute>\n+                        </attributes>\n+                    </access>\n+                </security>\n+            </localhost>\n+        </virtualhost>\n+\n+        <virtualhost>\n+            <name>development</name>\n+            <development>\n+                <store>\n+                    <class>org.apache.qpid.server.store.MemoryMessageStore</class>\n+                </store>\n+            </development>\n+        </virtualhost>\n+\n+        <virtualhost>\n+            <name>test</name>\n+            <test>\n+                <store>\n+                    <class>org.apache.qpid.server.store.MemoryMessageStore</class>\n+                </store>\n+            </test>\n+        </virtualhost>\n+\n+    </virtualhosts>\n+    <heartbeat>\n+        <delay>0</delay>\n+        <timeoutFactor>2.0</timeoutFactor>\n+    </heartbeat>\n+    <queue>\n+        <auto_register>true</auto_register>\n+    </queue>\n+\n+    <virtualhosts>${conf}/virtualhosts.xml</virtualhosts>\n+</broker>\n+\n+",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/etc/transient_config.xml",
                "sha": "164d66cd1b527dda1ef7bbdfe7eff9ed85eb30b1",
                "status": "added"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBean.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBean.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 13,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBean.java",
                "patch": "@@ -1,3 +1,23 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n /*\n  *\n  * Copyright (c) 2006 The Apache Software Foundation\n@@ -22,8 +42,12 @@\n import javax.management.MalformedObjectNameException;\n import javax.management.ObjectName;\n \n+import org.apache.commons.configuration.Configuration;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.server.configuration.Configurator;\n+import org.apache.qpid.server.configuration.VirtualHostConfiguration;\n import org.apache.qpid.server.exchange.Exchange;\n import org.apache.qpid.server.exchange.ExchangeFactory;\n import org.apache.qpid.server.exchange.ExchangeRegistry;\n@@ -36,9 +60,6 @@\n import org.apache.qpid.server.queue.QueueRegistry;\n import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n-import org.apache.qpid.server.configuration.Configurator;\n-import org.apache.qpid.server.configuration.VirtualHostConfiguration;\n-import org.apache.commons.configuration.Configuration;\n \n /**\n  * This MBean implements the broker management interface and exposes the\n@@ -82,8 +103,7 @@ public String getObjectInstanceName()\n      * @param autoDelete\n      * @throws JMException\n      */\n-    public void createNewExchange(String exchangeName, String type, boolean durable, boolean autoDelete)\n-            throws JMException\n+    public void createNewExchange(String exchangeName, String type, boolean durable) throws JMException\n     {\n         try\n         {\n@@ -92,7 +112,8 @@ public void createNewExchange(String exchangeName, String type, boolean durable,\n                 Exchange exchange = _exchangeRegistry.getExchange(new AMQShortString(exchangeName));\n                 if (exchange == null)\n                 {\n-                    exchange = _exchangeFactory.createExchange(new AMQShortString(exchangeName), new AMQShortString(type), durable, autoDelete, 0);\n+                    exchange = _exchangeFactory.createExchange(new AMQShortString(exchangeName), new AMQShortString(type),\n+                                                               durable, false, 0);\n                     _exchangeRegistry.registerExchange(exchange);\n                 }\n                 else\n@@ -140,8 +161,7 @@ public void unregisterExchange(String exchangeName) throws JMException\n      * @param autoDelete\n      * @throws JMException\n      */\n-    public void createNewQueue(String queueName, String owner, boolean durable,boolean autoDelete)\n-            throws JMException\n+    public void createNewQueue(String queueName, String owner, boolean durable) throws JMException\n     {\n         AMQQueue queue = _queueRegistry.getQueue(new AMQShortString(queueName));\n         if (queue != null)\n@@ -156,22 +176,27 @@ public void createNewQueue(String queueName, String owner, boolean durable,boole\n             {\n                 ownerShortString = new AMQShortString(owner);\n             }\n-            queue = new AMQQueue(new AMQShortString(queueName), durable, ownerShortString, autoDelete, getVirtualHost());\n+\n+            queue = new AMQQueue(new AMQShortString(queueName), durable, ownerShortString, false, getVirtualHost());\n             if (queue.isDurable() && !queue.isAutoDelete())\n             {\n                 _messageStore.createQueue(queue);\n             }\n \n-            Configuration virtualHostDefaultQueueConfiguration = VirtualHostConfiguration.getDefaultQueueConfiguration(queue);\n+            Configuration virtualHostDefaultQueueConfiguration =\n+                VirtualHostConfiguration.getDefaultQueueConfiguration(queue);\n             if (virtualHostDefaultQueueConfiguration != null)\n             {\n                 Configurator.configure(queue, virtualHostDefaultQueueConfiguration);\n             }\n+\n             _queueRegistry.registerQueue(queue);\n         }\n         catch (AMQException ex)\n         {\n-            throw new MBeanException(new JMException(ex.getMessage()),\"Error in creating queue \" + queueName);\n+            JMException jme = new JMException(ex.getMessage());\n+            jme.initCause(ex);\n+            throw new MBeanException(jme, \"Error in creating queue \" + queueName);\n         }\n     }\n \n@@ -202,7 +227,9 @@ public void deleteQueue(String queueName) throws JMException\n         }\n         catch (AMQException ex)\n         {\n-            throw new MBeanException(new JMException(ex.getMessage()), \"Error in deleting queue \" + queueName);\n+            JMException jme = new JMException(ex.getMessage());\n+            jme.initCause(ex);\n+            throw new MBeanException(jme, \"Error in deleting queue \" + queueName);\n         }\n     }\n \n@@ -213,7 +240,7 @@ public ManagedObject getParentObject()\n \n     // This will have a single instance for a virtual host, so not having the name property in the ObjectName\n     public ObjectName getObjectName() throws MalformedObjectNameException\n-    {        \n+    {\n         return getObjectNameForSingleInstanceMBean();\n     }\n } // End of MBean class",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBean.java",
                "sha": "d31359b0196f26777ae7fbe02340eefeb4e19277",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 5,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "patch": "@@ -472,7 +472,7 @@ public void requeue() throws AMQException\n             if (unacked.queue != null)\n             {\n                 // Ensure message is released for redelivery\n-                unacked.message.release();\n+                unacked.message.release(unacked.queue);\n \n                 // Mark message redelivered\n                 unacked.message.setRedelivered(true);\n@@ -503,7 +503,10 @@ public void requeue(long deliveryTag) throws AMQException\n         {\n \n             // Ensure message is released for redelivery\n-            unacked.message.release();\n+            if (unacked.queue != null)\n+            {\n+                unacked.message.release(unacked.queue);\n+            }\n \n             // Mark message redelivered\n             unacked.message.setRedelivered(true);\n@@ -672,14 +675,14 @@ public void visitComplete()\n //            else\n //            {\n             //release to allow it to be delivered\n-            msg.release();\n+            msg.release(message.queue);\n \n             // Without any details from the client about what has been processed we have to mark\n             // all messages in the unacked map as redelivered.\n             msg.setRedelivered(true);\n \n \n-            Subscription sub = msg.getDeliveredSubscription();\n+            Subscription sub = msg.getDeliveredSubscription(message.queue);\n \n             if (sub != null)\n             {\n@@ -753,7 +756,7 @@ public void visitComplete()\n         // Process Messages to Requeue at the front of the queue\n         for (UnacknowledgedMessage message : msgToRequeue)\n         {\n-            message.message.release();\n+            message.message.release(message.queue);\n             message.message.setRedelivered(true);\n \n             deliveryContext.deliver(message.message, message.queue, true);",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/AMQChannel.java",
                "sha": "2e1653e69dd7131363883227d105115f086fd030",
                "status": "modified"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/Main.java",
                "changes": 91,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/Main.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 36,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/Main.java",
                "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -36,14 +36,17 @@\n import org.apache.commons.cli.ParseException;\n import org.apache.commons.cli.PosixParser;\n import org.apache.commons.configuration.ConfigurationException;\n+\n import org.apache.log4j.BasicConfigurator;\n import org.apache.log4j.Logger;\n import org.apache.log4j.xml.DOMConfigurator;\n+\n import org.apache.mina.common.ByteBuffer;\n import org.apache.mina.common.IoAcceptor;\n import org.apache.mina.common.SimpleByteBufferAllocator;\n import org.apache.mina.transport.socket.nio.SocketAcceptorConfig;\n import org.apache.mina.transport.socket.nio.SocketSessionConfig;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.ProtocolVersion;\n import org.apache.qpid.pool.ReadWriteThreadModel;\n@@ -59,7 +62,7 @@\n  * Main entry point for AMQPD.\n  *\n  */\n-@SuppressWarnings({\"AccessStaticViaInstance\"})\n+@SuppressWarnings({ \"AccessStaticViaInstance\" })\n public class Main\n {\n     private static final Logger _logger = Logger.getLogger(Main.class);\n@@ -74,9 +77,9 @@\n \n     protected static class InitException extends Exception\n     {\n-        InitException(String msg)\n+        InitException(String msg, Throwable cause)\n         {\n-            super(msg);\n+            super(msg, cause);\n         }\n     }\n \n@@ -97,13 +100,15 @@ protected boolean parseCommandline(String[] args)\n         try\n         {\n             commandLine = new PosixParser().parse(options, args);\n+\n             return true;\n         }\n         catch (ParseException e)\n         {\n             System.err.println(\"Error: \" + e.getMessage());\n             HelpFormatter formatter = new HelpFormatter();\n             formatter.printHelp(\"Qpid\", options, true);\n+\n             return false;\n         }\n     }\n@@ -112,17 +117,26 @@ protected void setOptions(Options options)\n     {\n         Option help = new Option(\"h\", \"help\", false, \"print this message\");\n         Option version = new Option(\"v\", \"version\", false, \"print the version information and exit\");\n-        Option configFile = OptionBuilder.withArgName(\"file\").hasArg().withDescription(\"use given configuration file\").\n-                withLongOpt(\"config\").create(\"c\");\n-        Option port = OptionBuilder.withArgName(\"port\").hasArg().withDescription(\"listen on the specified port. Overrides any value in the config file\").\n-                withLongOpt(\"port\").create(\"p\");\n-        Option bind = OptionBuilder.withArgName(\"bind\").hasArg().withDescription(\"bind to the specified address. Overrides any value in the config file\").\n-                withLongOpt(\"bind\").create(\"b\");\n-        Option logconfig = OptionBuilder.withArgName(\"logconfig\").hasArg().withDescription(\"use the specified log4j xml configuration file. By \" +\n-                \"default looks for a file named \" + DEFAULT_LOG_CONFIG_FILENAME + \" in the same directory as the configuration file\").\n-                withLongOpt(\"logconfig\").create(\"l\");\n-        Option logwatchconfig = OptionBuilder.withArgName(\"logwatch\").hasArg().withDescription(\"monitor the log file configuration file for changes. Units are seconds. \" +\n-                \"Zero means do not check for changes.\").withLongOpt(\"logwatch\").create(\"w\");\n+        Option configFile =\n+            OptionBuilder.withArgName(\"file\").hasArg().withDescription(\"use given configuration file\").withLongOpt(\"config\")\n+                         .create(\"c\");\n+        Option port =\n+            OptionBuilder.withArgName(\"port\").hasArg()\n+                         .withDescription(\"listen on the specified port. Overrides any value in the config file\")\n+                         .withLongOpt(\"port\").create(\"p\");\n+        Option bind =\n+            OptionBuilder.withArgName(\"bind\").hasArg()\n+                         .withDescription(\"bind to the specified address. Overrides any value in the config file\")\n+                         .withLongOpt(\"bind\").create(\"b\");\n+        Option logconfig =\n+            OptionBuilder.withArgName(\"logconfig\").hasArg()\n+                         .withDescription(\"use the specified log4j xml configuration file. By \"\n+                + \"default looks for a file named \" + DEFAULT_LOG_CONFIG_FILENAME\n+                + \" in the same directory as the configuration file\").withLongOpt(\"logconfig\").create(\"l\");\n+        Option logwatchconfig =\n+            OptionBuilder.withArgName(\"logwatch\").hasArg()\n+                         .withDescription(\"monitor the log file configuration file for changes. Units are seconds. \"\n+                + \"Zero means do not check for changes.\").withLongOpt(\"logwatch\").create(\"w\");\n \n         options.addOption(help);\n         options.addOption(version);\n@@ -150,17 +164,19 @@ else if (commandLine.hasOption(\"v\"))\n             boolean first = true;\n             for (ProtocolVersion pv : ProtocolVersion.getSupportedProtocolVersions())\n             {\n-                if(first)\n+                if (first)\n                 {\n                     first = false;\n                 }\n                 else\n                 {\n                     protocol.append(\", \");\n                 }\n+\n                 protocol.append(pv.getMajorVersion()).append('-').append(pv.getMinorVersion());\n \n             }\n+\n             System.out.println(ver + \" (\" + protocol + \")\");\n         }\n         else\n@@ -186,7 +202,6 @@ else if (commandLine.hasOption(\"v\"))\n         }\n     }\n \n-\n     protected void startup() throws InitException, ConfigurationException, Exception\n     {\n         final String QpidHome = System.getProperty(\"QPID_HOME\");\n@@ -201,7 +216,7 @@ protected void startup() throws InitException, ConfigurationException, Exception\n                 error = error + \"\\nNote: Qpid_HOME is not set.\";\n             }\n \n-            throw new InitException(error);\n+            throw new InitException(error, null);\n         }\n         else\n         {\n@@ -226,8 +241,8 @@ protected void startup() throws InitException, ConfigurationException, Exception\n \n         _logger.info(\"Starting Qpid.AMQP broker\");\n \n-        ConnectorConfiguration connectorConfig = ApplicationRegistry.getInstance().\n-                getConfiguredObject(ConnectorConfiguration.class);\n+        ConnectorConfiguration connectorConfig =\n+            ApplicationRegistry.getInstance().getConfiguredObject(ConnectorConfiguration.class);\n \n         ByteBuffer.setUseDirectBuffers(connectorConfig.enableDirectBuffers);\n \n@@ -249,7 +264,7 @@ protected void startup() throws InitException, ConfigurationException, Exception\n             }\n             catch (NumberFormatException e)\n             {\n-                throw new InitException(\"Invalid port: \" + portStr);\n+                throw new InitException(\"Invalid port: \" + portStr, e);\n             }\n         }\n \n@@ -264,19 +279,21 @@ protected void startup() throws InitException, ConfigurationException, Exception\n                 int totalVHosts = ((Collection) virtualHosts).size();\n                 for (int vhost = 0; vhost < totalVHosts; vhost++)\n                 {\n-                    setupVirtualHosts(configFile.getParent() , (String)((List)virtualHosts).get(vhost));\n+                    setupVirtualHosts(configFile.getParent(), (String) ((List) virtualHosts).get(vhost));\n                 }\n             }\n             else\n             {\n-               setupVirtualHosts(configFile.getParent() , (String)virtualHosts);\n+                setupVirtualHosts(configFile.getParent(), (String) virtualHosts);\n             }\n         }\n+\n         bind(port, connectorConfig);\n \n     }\n \n-    protected void setupVirtualHosts(String configFileParent, String configFilePath) throws ConfigurationException, AMQException, URLSyntaxException\n+    protected void setupVirtualHosts(String configFileParent, String configFilePath)\n+        throws ConfigurationException, AMQException, URLSyntaxException\n     {\n         String configVar = \"${conf}\";\n \n@@ -285,7 +302,7 @@ protected void setupVirtualHosts(String configFileParent, String configFilePath)\n             configFilePath = configFileParent + configFilePath.substring(configVar.length());\n         }\n \n-        if (configFilePath.indexOf(\".xml\") != -1 )\n+        if (configFilePath.indexOf(\".xml\") != -1)\n         {\n             VirtualHostConfiguration vHostConfig = new VirtualHostConfiguration(configFilePath);\n             vHostConfig.performBindings();\n@@ -298,11 +315,12 @@ protected void setupVirtualHosts(String configFileParent, String configFilePath)\n \n             String[] fileNames = virtualHostDir.list();\n \n-            for (int each=0; each < fileNames.length; each++)\n+            for (int each = 0; each < fileNames.length; each++)\n             {\n                 if (fileNames[each].endsWith(\".xml\"))\n                 {\n-                    VirtualHostConfiguration vHostConfig = new VirtualHostConfiguration(configFilePath+\"/\"+fileNames[each]);\n+                    VirtualHostConfiguration vHostConfig =\n+                        new VirtualHostConfiguration(configFilePath + \"/\" + fileNames[each]);\n                     vHostConfig.performBindings();\n                 }\n             }\n@@ -319,7 +337,7 @@ protected void bind(int port, ConnectorConfiguration connectorConfig)\n \n         try\n         {\n-            //IoAcceptor acceptor = new SocketAcceptor(connectorConfig.processors);\n+            // IoAcceptor acceptor = new SocketAcceptor(connectorConfig.processors);\n             IoAcceptor acceptor = connectorConfig.createAcceptor();\n             SocketAcceptorConfig sconfig = (SocketAcceptorConfig) acceptor.getDefaultConfig();\n             SocketSessionConfig sc = (SocketSessionConfig) sconfig.getSessionConfig();\n@@ -334,7 +352,7 @@ protected void bind(int port, ConnectorConfiguration connectorConfig)\n             {\n                 sconfig.setThreadModel(ReadWriteThreadModel.getInstance());\n             }\n-            \n+\n             if (!connectorConfig.enableSSL || !connectorConfig.sslOnly)\n             {\n                 AMQPFastProtocolHandler handler = new AMQPProtocolProvider().getHandler();\n@@ -347,6 +365,7 @@ protected void bind(int port, ConnectorConfiguration connectorConfig)\n                 {\n                     bindAddress = new InetSocketAddress(InetAddress.getByAddress(parseIP(bindAddr)), port);\n                 }\n+\n                 acceptor.bind(bindAddress, handler, sconfig);\n                 _logger.info(\"Qpid.AMQP listening on non-SSL address \" + bindAddress);\n             }\n@@ -356,8 +375,7 @@ protected void bind(int port, ConnectorConfiguration connectorConfig)\n                 AMQPFastProtocolHandler handler = new AMQPProtocolProvider().getHandler();\n                 try\n                 {\n-                    acceptor.bind(new InetSocketAddress(connectorConfig.sslPort),\n-                                  handler, sconfig);\n+                    acceptor.bind(new InetSocketAddress(connectorConfig.sslPort), handler, sconfig);\n                     _logger.info(\"Qpid.AMQP listening on SSL port \" + connectorConfig.sslPort);\n                 }\n                 catch (IOException e)\n@@ -415,16 +433,17 @@ private void configureLogging(File logConfigFile, String logWatchConfig)\n         }\n         catch (NumberFormatException e)\n         {\n-            System.err.println(\"Log watch configuration value of \" + logWatchConfig + \" is invalid. Must be \" +\n-                    \"a non-negative integer. Using default of zero (no watching configured\");\n+            System.err.println(\"Log watch configuration value of \" + logWatchConfig + \" is invalid. Must be \"\n+                + \"a non-negative integer. Using default of zero (no watching configured\");\n         }\n+\n         if (logConfigFile.exists() && logConfigFile.canRead())\n         {\n             System.out.println(\"Configuring logger using configuration file \" + logConfigFile.getAbsolutePath());\n             if (logWatchTime > 0)\n             {\n-                System.out.println(\"log file \" + logConfigFile.getAbsolutePath() + \" will be checked for changes every \" +\n-                        logWatchTime + \" seconds\");\n+                System.out.println(\"log file \" + logConfigFile.getAbsolutePath() + \" will be checked for changes every \"\n+                    + logWatchTime + \" seconds\");\n                 // log4j expects the watch interval in milliseconds\n                 DOMConfigurator.configureAndWatch(logConfigFile.getAbsolutePath(), logWatchTime * 1000);\n             }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/Main.java",
                "sha": "146d0566cef083ef72ea955221325ecb764b31de",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java",
                "patch": "@@ -196,6 +196,7 @@ public void route(AMQMessage payload) throws AMQException\n             }\n             else\n             {\n+                _logger.error(\"MESSAGE LOSS: Message should be sent on a Dead Letter Queue\");                \n                 _logger.warn(msg);\n             }\n         }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java",
                "sha": "de3905268e16e4b9a6b16ead3cae70c13659fa84",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java",
                "patch": "@@ -98,7 +98,7 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<BasicRej\n             // If we haven't requested message to be resent to this consumer then reject it from ever getting it.\n //            if (!evt.getMethod().resend)\n             {\n-                message.message.reject(message.message.getDeliveredSubscription());\n+                message.message.reject(message.message.getDeliveredSubscription(message.queue));\n             }\n \n             if (evt.getMethod().requeue)",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java",
                "sha": "9052b2e81f276eaf09d4b766e827e9f9ea69c690",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ConnectionOpenMethodHandler.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ConnectionOpenMethodHandler.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 6,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ConnectionOpenMethodHandler.java",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.qpid.server.state.StateAwareMethodListener;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.security.access.AccessResult;\n+import org.apache.qpid.server.security.access.AccessRights;\n import org.apache.log4j.Logger;\n \n public class ConnectionOpenMethodHandler implements StateAwareMethodListener<ConnectionOpenBody>\n@@ -75,23 +76,26 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<Connecti\n \n         if (virtualHost == null)\n         {\n-            throw body.getConnectionException(AMQConstant.NOT_FOUND, \"Unknown virtual host: \" + virtualHostName);\n+            throw body.getConnectionException(AMQConstant.NOT_FOUND, \"Unknown virtual host: '\" + virtualHostName + \"'\");\n         }\n         else\n         {\n             session.setVirtualHost(virtualHost);\n \n-            AccessResult result = virtualHost.getAccessManager().isAuthorized(virtualHost, session.getAuthorizedID());\n+            AccessResult result = virtualHost.getAccessManager().isAuthorized(virtualHost, session.getAuthorizedID(), AccessRights.Rights.ANY);\n \n             switch (result.getStatus())\n             {\n                 default:\n                 case REFUSED:\n-                    throw body.getConnectionException(AMQConstant.ACCESS_REFUSED,\n-                                                      \"Access denied to vHost '\" + virtualHostName + \"' by \"\n-                                                      + result.getAuthorizer());\n+                    String error = \"Any access denied to vHost '\" + virtualHostName + \"' by \"\n+                                   + result.getAuthorizer();\n+                    \n+                    _logger.warn(error);\n+\n+                    throw body.getConnectionException(AMQConstant.ACCESS_REFUSED, error);\n                 case GRANTED:\n-                    _logger.info(\"Granted access to vHost '\" + virtualHostName + \"' for \" + session.getAuthorizedID()\n+                    _logger.info(\"Granted any access to vHost '\" + virtualHostName + \"' for \" + session.getAuthorizedID()\n                                  + \" by '\" + result.getAuthorizer() + \"'\");\n             }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ConnectionOpenMethodHandler.java",
                "sha": "30a40c5a75d998a1ab8f387c6517a01296418182",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ConnectionSecureOkMethodHandler.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ConnectionSecureOkMethodHandler.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ConnectionSecureOkMethodHandler.java",
                "patch": "@@ -37,6 +37,7 @@\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.security.auth.manager.AuthenticationManager;\n import org.apache.qpid.server.security.auth.AuthenticationResult;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n import org.apache.qpid.server.state.AMQState;\n import org.apache.qpid.server.state.AMQStateManager;\n import org.apache.qpid.server.state.StateAwareMethodListener;\n@@ -106,7 +107,7 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<Connecti\n                     ConnectionStartOkMethodHandler.getConfiguredFrameSize(),\t// frameMax\n                     HeartbeatConfig.getInstance().getDelay());\t// heartbeat\n                 session.writeFrame(tune);\n-                session.setAuthorizedID(ss.getAuthorizationID());                \n+                session.setAuthorizedID(new UsernamePrincipal(ss.getAuthorizationID()));                \n                 disposeSaslServer(session);\n                 break;\n             case CONTINUE:",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ConnectionSecureOkMethodHandler.java",
                "sha": "fef00942a010026b1cfdd3eef88ccf1172170fb0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ConnectionStartOkMethodHandler.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ConnectionStartOkMethodHandler.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ConnectionStartOkMethodHandler.java",
                "patch": "@@ -37,6 +37,7 @@\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.security.auth.manager.AuthenticationManager;\n import org.apache.qpid.server.security.auth.AuthenticationResult;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n import org.apache.qpid.server.state.AMQState;\n import org.apache.qpid.server.state.AMQStateManager;\n import org.apache.qpid.server.state.StateAwareMethodListener;\n@@ -95,7 +96,7 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<Connecti\n                     throw new AMQException(\"Authentication failed\");\n                 case SUCCESS:\n                     _logger.info(\"Connected as: \" + ss.getAuthorizationID());\n-                    session.setAuthorizedID(ss.getAuthorizationID());\n+                    session.setAuthorizedID(new UsernamePrincipal(ss.getAuthorizationID()));                \n \n                     stateManager.changeState(AMQState.CONNECTION_NOT_TUNED);\n                     // AMQP version change: Hardwire the version to 0-8 (major=8, minor=0)",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ConnectionStartOkMethodHandler.java",
                "sha": "47341434974580a4b697cd33f1e0f5b3c0ff479d",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/QueueDeclareHandler.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/QueueDeclareHandler.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 27,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/handler/QueueDeclareHandler.java",
                "patch": "@@ -64,7 +64,6 @@ public static QueueDeclareHandler getInstance()\n     private final AtomicInteger _counter = new AtomicInteger();\n \n \n-\n     protected QueueDeclareHandler()\n     {\n         Configurator.configure(this);\n@@ -92,12 +91,12 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<QueueDec\n         synchronized (queueRegistry)\n         {\n \n-            if (((queue = queueRegistry.getQueue(body.queue)) == null) )\n+            if (((queue = queueRegistry.getQueue(body.queue)) == null))\n             {\n-                if(body.passive)\n+                if (body.passive)\n                 {\n-                    String msg = \"Queue: \" + body.queue + \" not found.\";\n-                    throw body.getChannelException(AMQConstant.NOT_FOUND,msg );\n+                    String msg = \"Queue: \" + body.queue + \" not found on VirtualHost(\" + virtualHost + \").\";\n+                    throw body.getChannelException(AMQConstant.NOT_FOUND, msg);\n                 }\n                 else\n                 {\n@@ -112,13 +111,16 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<QueueDec\n                         Exchange defaultExchange = exchangeRegistry.getDefaultExchange();\n \n                         queue.bind(body.queue, null, defaultExchange);\n-                        _log.info(\"Queue \" + body.queue + \" bound to default exchange\");\n+                        _log.info(\"Queue \" + body.queue + \" bound to default exchange(\" + defaultExchange.getName() + \")\");\n                     }\n                 }\n             }\n-            else if(queue.getOwner() != null && !session.getContextKey().equals(queue.getOwner()))\n+            else if (queue.getOwner() != null && !session.getContextKey().equals(queue.getOwner()))\n             {\n-                throw body.getChannelException(AMQConstant.ALREADY_EXISTS, \"Cannot declare queue, as exclusive queue with same name declared on another connection\");        \n+                throw body.getChannelException(AMQConstant.ALREADY_EXISTS, \"Cannot declare queue('\" + body.queue + \"'),\"\n+                                                                           + \" as exclusive queue with same name \"\n+                                                                           + \"declared on another client ID('\"\n+                                                                           + queue.getOwner() + \"')\");\n             }\n \n             AMQChannel channel = session.getChannel(evt.getChannelId());\n@@ -138,10 +140,10 @@ else if(queue.getOwner() != null && !session.getContextKey().equals(queue.getOwn\n             // TODO: Connect this to the session version obtained from ProtocolInitiation for this session.\n             // Be aware of possible changes to parameter order as versions change.\n             AMQFrame response = QueueDeclareOkBody.createAMQFrame(evt.getChannelId(),\n-                (byte)8, (byte)0,\t// AMQP version (major, minor)\n-                queue.getConsumerCount(), // consumerCount\n-                queue.getMessageCount(), // messageCount\n-                body.queue); // queue\n+                                                                  (byte) 8, (byte) 0,    // AMQP version (major, minor)\n+                                                                  queue.getConsumerCount(), // consumerCount\n+                                                                  queue.getMessageCount(), // messageCount\n+                                                                  body.queue); // queue\n             _log.info(\"Queue \" + body.queue + \" declared successfully\");\n             session.writeFrame(response);\n         }\n@@ -162,24 +164,22 @@ protected AMQQueue createQueue(QueueDeclareBody body, VirtualHost virtualHost, f\n     {\n         final QueueRegistry registry = virtualHost.getQueueRegistry();\n         AMQShortString owner = body.exclusive ? session.getContextKey() : null;\n-        final AMQQueue queue =  new AMQQueue(body.queue, body.durable, owner, body.autoDelete, virtualHost);\n+        final AMQQueue queue = new AMQQueue(body.queue, body.durable, owner, body.autoDelete, virtualHost);\n         final AMQShortString queueName = queue.getName();\n \n-        if(body.exclusive && !body.durable)\n+        if (body.exclusive && !body.durable)\n         {\n             final AMQProtocolSession.Task deleteQueueTask =\n-                new AMQProtocolSession.Task()\n-                {\n-\n-                    public void doTask(AMQProtocolSession session) throws AMQException\n+                    new AMQProtocolSession.Task()\n                     {\n-                        if(registry.getQueue(queueName) == queue)\n+                        public void doTask(AMQProtocolSession session) throws AMQException\n                         {\n-                            queue.delete();\n+                            if (registry.getQueue(queueName) == queue)\n+                            {\n+                                queue.delete();\n+                            }\n                         }\n-\n-                    }\n-                };\n+                    };\n \n             session.addSessionCloseTask(deleteQueueTask);\n \n@@ -190,16 +190,14 @@ public void doTask(AMQQueue queue)\n                     session.removeSessionCloseTask(deleteQueueTask);\n                 }\n             });\n-\n-\n-        }\n+        }// if exclusive and not durable\n \n         Configuration virtualHostDefaultQueueConfiguration = VirtualHostConfiguration.getDefaultQueueConfiguration(queue);\n         if (virtualHostDefaultQueueConfiguration != null)\n         {\n             Configurator.configure(queue, virtualHostDefaultQueueConfiguration);\n         }\n-        \n+\n         return queue;\n     }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/handler/QueueDeclareHandler.java",
                "sha": "2e697d4564b7087fd22ddc5d8a13f8f12e3b1315",
                "status": "modified"
            },
            {
                "additions": 252,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/management/JMXManagedObjectRegistry.java",
                "changes": 258,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/management/JMXManagedObjectRegistry.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 6,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/management/JMXManagedObjectRegistry.java",
                "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -20,34 +20,280 @@\n  */\n package org.apache.qpid.server.management;\n \n+import java.io.IOException;\n import java.lang.management.ManagementFactory;\n+import java.rmi.RemoteException;\n+import java.rmi.registry.LocateRegistry;\n+import java.rmi.registry.Registry;\n+import java.rmi.server.UnicastRemoteObject;\n+import java.util.HashMap;\n+import java.util.Map;\n \n import javax.management.JMException;\n import javax.management.MBeanServer;\n+import javax.management.MBeanServerFactory;\n+import javax.management.remote.JMXConnectorServer;\n+import javax.management.remote.JMXConnectorServerFactory;\n+import javax.management.remote.JMXServiceURL;\n+import javax.management.remote.MBeanServerForwarder;\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.NameCallback;\n+import javax.security.auth.callback.PasswordCallback;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+import javax.security.auth.login.AccountNotFoundException;\n+import javax.security.sasl.AuthorizeCallback;\n \n import org.apache.log4j.Logger;\n \n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.registry.IApplicationRegistry;\n+import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n+import org.apache.qpid.server.security.auth.database.Base64MD5PasswordFilePrincipalDatabase;\n+import org.apache.qpid.server.security.auth.database.PlainPasswordFilePrincipalDatabase;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n+import org.apache.qpid.server.security.auth.sasl.crammd5.CRAMMD5HashedInitialiser;\n+\n+/**\n+ * This class starts up an MBeanserver. If out of the box agent is being used then there are no security features\n+ * implemented. To use the security features like user authentication, turn off the jmx options in the \"QPID_OPTS\" env\n+ * variable and use JMXMP connector server. If JMXMP connector is not available, then the standard JMXConnector will be\n+ * used, which again doesn't have user authentication.\n+ */\n public class JMXManagedObjectRegistry implements ManagedObjectRegistry\n {\n     private static final Logger _log = Logger.getLogger(JMXManagedObjectRegistry.class);\n \n     private final MBeanServer _mbeanServer;\n+    private Registry _rmiRegistry;\n+    private JMXServiceURL _jmxURL;\n \n-    public JMXManagedObjectRegistry()\n+    public JMXManagedObjectRegistry() throws AMQException\n     {\n         _log.info(\"Initialising managed object registry using platform MBean server\");\n-        // we use the platform MBean server currently but this must be changed or at least be configuurable\n-        _mbeanServer = ManagementFactory.getPlatformMBeanServer();\n+        IApplicationRegistry appRegistry = ApplicationRegistry.getInstance();\n+\n+        // Retrieve the config parameters\n+        boolean platformServer = appRegistry.getConfiguration().getBoolean(\"management.platform-mbeanserver\", true);\n+\n+        _mbeanServer =\n+                platformServer ? ManagementFactory.getPlatformMBeanServer()\n+                : MBeanServerFactory.createMBeanServer(ManagedObject.DOMAIN);\n+    }\n+\n+\n+    public void start()\n+    {\n+        // Check if the \"QPID_OPTS\" is set to use Out of the Box JMXAgent\n+        if (areOutOfTheBoxJMXOptionsSet())\n+        {\n+            _log.info(\"JMX: Using the out of the box JMX Agent\");\n+            return;\n+        }\n+\n+        IApplicationRegistry appRegistry = ApplicationRegistry.getInstance();\n+\n+        boolean security = appRegistry.getConfiguration().getBoolean(\"management.security-enabled\", true);\n+        int port = appRegistry.getConfiguration().getInt(\"management.jmxport\", 8999);\n+\n+        try\n+        {\n+            if (security)\n+            {\n+                // For SASL using JMXMP\n+                _jmxURL = new JMXServiceURL(\"jmxmp\", null, port);\n+\n+                Map env = new HashMap();\n+                Map<String, PrincipalDatabase> map = appRegistry.getDatabaseManager().getDatabases();\n+                PrincipalDatabase db = null;\n+                \n+                for (Map.Entry<String, PrincipalDatabase> entry : map.entrySet())\n+                {\n+                    if (entry.getValue() instanceof Base64MD5PasswordFilePrincipalDatabase)\n+                    {\n+                        db = entry.getValue();\n+                        break;\n+                    }\n+                    else if (entry.getValue() instanceof PlainPasswordFilePrincipalDatabase)\n+                    {\n+                        db = entry.getValue();\n+                    }\n+                }\n+\n+                if (db instanceof Base64MD5PasswordFilePrincipalDatabase)\n+                {\n+                    env.put(\"jmx.remote.profiles\", \"SASL/CRAM-MD5\");\n+                    CRAMMD5HashedInitialiser initialiser = new CRAMMD5HashedInitialiser();\n+                    initialiser.initialise(db);\n+                    env.put(\"jmx.remote.sasl.callback.handler\", initialiser.getCallbackHandler());\n+                }\n+                else if (db instanceof PlainPasswordFilePrincipalDatabase)\n+                {\n+                    env.put(\"jmx.remote.profiles\", \"SASL/PLAIN\");\n+                    env.put(\"jmx.remote.sasl.callback.handler\", new UserCallbackHandler(db));\n+                }\n+\n+                // Enable the SSL security and server authentication\n+                /*\n+                SslRMIClientSocketFactory csf = new SslRMIClientSocketFactory();\n+                SslRMIServerSocketFactory ssf = new SslRMIServerSocketFactory();\n+                env.put(RMIConnectorServer.RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE, csf);\n+                env.put(RMIConnectorServer.RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE, ssf);\n+                 */\n+\n+                try\n+                {\n+                    JMXConnectorServer cs = JMXConnectorServerFactory.newJMXConnectorServer(_jmxURL, env, _mbeanServer);\n+                    MBeanServerForwarder mbsf = MBeanInvocationHandlerImpl.newProxyInstance();\n+                    cs.setMBeanServerForwarder(mbsf);\n+                    cs.start();\n+                    _log.info(\"JMX: Starting JMXConnector server with SASL\");\n+                }\n+                catch (java.net.MalformedURLException urlException)\n+                {\n+                    // When JMXMPConnector is not available\n+                    // java.net.MalformedURLException: Unsupported protocol: jmxmp\n+                    _log.info(\"JMX: Starting JMXConnector server\");\n+                    startJMXConnectorServer(port);\n+                }\n+            }\n+            else\n+            {\n+                startJMXConnectorServer(port);\n+            }\n+        }\n+        catch (Exception ex)\n+        {\n+            _log.error(\"Error in initialising Managed Object Registry.\" + ex.getMessage());\n+            ex.printStackTrace();\n+        }\n+    }\n+\n+    /**\n+     * Starts up an RMIRegistry at configured port and attaches a JMXConnectorServer to it.\n+     *\n+     * @param port\n+     *\n+     * @throws IOException\n+     */\n+    private void startJMXConnectorServer(int port) throws IOException\n+    {\n+        startRMIRegistry(port);\n+        _jmxURL = new JMXServiceURL(\"service:jmx:rmi:///jndi/rmi://localhost:\" + port + \"/jmxrmi\");\n+        JMXConnectorServer cs = JMXConnectorServerFactory.newJMXConnectorServer(_jmxURL, null, _mbeanServer);\n+        cs.start();\n     }\n \n     public void registerObject(ManagedObject managedObject) throws JMException\n     {\n-         _mbeanServer.registerMBean(managedObject, managedObject.getObjectName());\n+        _mbeanServer.registerMBean(managedObject, managedObject.getObjectName());\n     }\n \n     public void unregisterObject(ManagedObject managedObject) throws JMException\n     {\n         _mbeanServer.unregisterMBean(managedObject.getObjectName());\n     }\n \n+    /**\n+     * Checks is the \"QPID_OPTS\" env variable is set to use the out of the box JMXAgent.\n+     *\n+     * @return\n+     */\n+    private boolean areOutOfTheBoxJMXOptionsSet()\n+    {\n+        if (System.getProperty(\"com.sun.management.jmxremote\") != null)\n+        {\n+            return true;\n+        }\n+\n+        if (System.getProperty(\"com.sun.management.jmxremote.port\") != null)\n+        {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Starts the rmi registry at given port\n+     *\n+     * @param port\n+     *\n+     * @throws RemoteException\n+     */\n+    private void startRMIRegistry(int port) throws RemoteException\n+    {\n+        System.setProperty(\"java.rmi.server.randomIDs\", \"true\");\n+        _rmiRegistry = LocateRegistry.createRegistry(port);\n+    }\n+\n+    // stops the RMIRegistry, if it was running and bound to a port\n+    public void close() throws RemoteException\n+    {\n+        if (_rmiRegistry != null)\n+        {\n+            // Stopping the RMI registry\n+            UnicastRemoteObject.unexportObject(_rmiRegistry, true);\n+        }\n+    }\n+\n+    /** This class is used for SASL enabled JMXConnector for performing user authentication. */\n+    private class UserCallbackHandler implements CallbackHandler\n+    {\n+        private final PrincipalDatabase _principalDatabase;\n+\n+        protected UserCallbackHandler(PrincipalDatabase database)\n+        {\n+            _principalDatabase = database;\n+        }\n+\n+        public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException\n+        {\n+            // Retrieve callbacks\n+            NameCallback ncb = null;\n+            PasswordCallback pcb = null;\n+            for (int i = 0; i < callbacks.length; i++)\n+            {\n+                if (callbacks[i] instanceof NameCallback)\n+                {\n+                    ncb = (NameCallback) callbacks[i];\n+                }\n+                else if (callbacks[i] instanceof PasswordCallback)\n+                {\n+                    pcb = (PasswordCallback) callbacks[i];\n+                }\n+                else if (callbacks[i] instanceof AuthorizeCallback)\n+                {\n+                    ((AuthorizeCallback) callbacks[i]).setAuthorized(true);\n+                }\n+                else\n+                {\n+                    throw new UnsupportedCallbackException(callbacks[i]);\n+                }\n+            }\n+\n+            boolean authorized = false;\n+            // Process retrieval of password; can get password if username is available in NameCallback\n+            if ((ncb != null) && (pcb != null))\n+            {\n+                String username = ncb.getDefaultName();\n+                try\n+                {\n+                    authorized = _principalDatabase.verifyPassword(username, new String(pcb.getPassword()));\n+                }\n+                catch (AccountNotFoundException e)\n+                {\n+                    IOException ioe = new IOException(\"User not authorized.  \" + e);\n+                    ioe.initCause(e);\n+                    throw ioe;\n+                }\n+            }\n+\n+            if (!authorized)\n+            {\n+                throw new IOException(\"User not authorized.\");\n+            }\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/management/JMXManagedObjectRegistry.java",
                "sha": "38c9e4950a042b527eb13c84da56d32a62449f99",
                "status": "modified"
            },
            {
                "additions": 217,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/management/MBeanInvocationHandlerImpl.java",
                "changes": 217,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/management/MBeanInvocationHandlerImpl.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/management/MBeanInvocationHandlerImpl.java",
                "patch": "@@ -0,0 +1,217 @@\n+/*\n+ *\n+ * Copyright (c) 2006 The Apache Software Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.qpid.server.management;\n+\n+import org.apache.qpid.AMQException;\n+import org.apache.log4j.Logger;\n+\n+import javax.management.remote.MBeanServerForwarder;\n+import javax.management.remote.JMXPrincipal;\n+import javax.management.MBeanServer;\n+import javax.management.ObjectName;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanOperationInfo;\n+import javax.management.JMException;\n+import javax.security.auth.Subject;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Proxy;\n+import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.security.Principal;\n+import java.security.AccessControlContext;\n+import java.util.Set;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.FileInputStream;\n+\n+/**\n+ * This class can be used by the JMXConnectorServer as an InvocationHandler for the mbean operations. This implements\n+ * the logic for allowing the users to invoke MBean operations and implements the restrictions for readOnly, readWrite\n+ * and admin users.\n+ */\n+public class MBeanInvocationHandlerImpl implements InvocationHandler\n+{\n+    private static final Logger _logger = Logger.getLogger(MBeanInvocationHandlerImpl.class);\n+\n+    public final static String ADMIN = \"admin\";\n+    public final static String READWRITE = \"readwrite\";\n+    public final static String READONLY = \"readonly\";\n+    private final static String DELEGATE = \"JMImplementation:type=MBeanServerDelegate\";\n+    private MBeanServer mbs;\n+    private static Properties _userRoles = new Properties();\n+\n+    public static MBeanServerForwarder newProxyInstance()\n+    {\n+        final InvocationHandler handler = new MBeanInvocationHandlerImpl();\n+        final Class[] interfaces = new Class[]{MBeanServerForwarder.class};\n+\n+        Object proxy = Proxy.newProxyInstance(MBeanServerForwarder.class.getClassLoader(), interfaces, handler);\n+        return MBeanServerForwarder.class.cast(proxy);\n+    }\n+\n+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable\n+    {\n+        final String methodName = method.getName();\n+\n+        if (methodName.equals(\"getMBeanServer\"))\n+        {\n+            return mbs;\n+        }\n+\n+        if (methodName.equals(\"setMBeanServer\"))\n+        {\n+            if (args[0] == null)\n+            {\n+                throw new IllegalArgumentException(\"Null MBeanServer\");\n+            }\n+            if (mbs != null)\n+            {\n+                throw new IllegalArgumentException(\"MBeanServer object already initialized\");\n+            }\n+            mbs = (MBeanServer) args[0];\n+            return null;\n+        }\n+\n+        // Retrieve Subject from current AccessControlContext\n+        AccessControlContext acc = AccessController.getContext();\n+        Subject subject = Subject.getSubject(acc);\n+\n+        // Allow operations performed locally on behalf of the connector server itself\n+        if (subject == null)\n+        {\n+            return method.invoke(mbs, args);\n+        }\n+\n+        if (args == null || DELEGATE.equals(args[0]))\n+        {\n+            return method.invoke(mbs, args);\n+        }\n+\n+        // Restrict access to \"createMBean\" and \"unregisterMBean\" to any user\n+        if (methodName.equals(\"createMBean\") || methodName.equals(\"unregisterMBean\"))\n+        {\n+            throw new SecurityException(\"Access denied\");\n+        }\n+\n+        // Retrieve JMXPrincipal from Subject\n+        Set<JMXPrincipal> principals = subject.getPrincipals(JMXPrincipal.class);\n+        if (principals == null || principals.isEmpty())\n+        {\n+            throw new SecurityException(\"Access denied\");\n+        }\n+\n+        Principal principal = principals.iterator().next();\n+        String identity = principal.getName();\n+\n+        // Following users can perform any operation other than \"createMBean\" and \"unregisterMBean\"\n+        if (isAdmin(identity) || isAllowedToModify(identity))\n+        {\n+            return method.invoke(mbs, args);\n+        }\n+\n+        // These users can only call \"getAttribute\" on the MBeanServerDelegate MBean\n+        // Here we can add other fine grained permissions like specific method for a particular mbean\n+        if (isReadOnlyUser(identity) && isReadOnlyMethod(method, args))\n+        {\n+            return method.invoke(mbs, args);\n+        }\n+\n+        throw new SecurityException(\"Access denied\");\n+    }\n+\n+    // Initialises the user roles\n+    public static void setAccessRights(Properties accessRights)\n+    {\n+        _userRoles = accessRights;\n+    }\n+\n+    private boolean isAdmin(String userName)\n+    {\n+        if (ADMIN.equals(_userRoles.getProperty(userName)))\n+        {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private boolean isAllowedToModify(String userName)\n+    {\n+        if (READWRITE.equals(_userRoles.getProperty(userName)))\n+        {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private boolean isReadOnlyUser(String userName)\n+    {\n+        if (READONLY.equals(_userRoles.getProperty(userName)))\n+        {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private boolean isReadOnlyMethod(Method method, Object[] args)\n+    {\n+        String methodName = method.getName();\n+        if (methodName.equals(\"queryMBeans\") ||\n+            methodName.equals(\"getDefaultDomain\") ||\n+            methodName.equals(\"getMBeanInfo\") ||\n+            methodName.equals(\"getAttribute\") ||\n+            methodName.equals(\"getAttributes\"))\n+        {\n+            return true;\n+        }\n+\n+        if (args[0] instanceof ObjectName)\n+        {\n+            String mbeanMethod = (args.length > 1) ? (String) args[1] : null;\n+            if (mbeanMethod == null)\n+            {\n+                return false;\n+            }\n+\n+            try\n+            {\n+                MBeanInfo mbeanInfo = mbs.getMBeanInfo((ObjectName) args[0]);\n+                if (mbeanInfo != null)\n+                {\n+                    MBeanOperationInfo[] opInfos = mbeanInfo.getOperations();\n+                    for (MBeanOperationInfo opInfo : opInfos)\n+                    {\n+                        if (opInfo.getName().equals(mbeanMethod) && (opInfo.getImpact() == MBeanOperationInfo.INFO))\n+                        {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+            catch (JMException ex)\n+            {\n+                ex.printStackTrace();\n+            }\n+        }\n+\n+        return false;\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/management/MBeanInvocationHandlerImpl.java",
                "sha": "a79d993afcde64371762b69502e3d6a9e25e73f6",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/management/ManagedBroker.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/management/ManagedBroker.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 4,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/management/ManagedBroker.java",
                "patch": "@@ -52,8 +52,7 @@\n     @MBeanOperation(name=\"createNewExchange\", description=\"Creates a new Exchange\", impact= MBeanOperationInfo.ACTION)\n     void createNewExchange(@MBeanOperationParameter(name=\"name\", description=\"Name of the new exchange\")String name,\n                            @MBeanOperationParameter(name=\"ExchangeType\", description=\"Type of the exchange\")String type,\n-                           @MBeanOperationParameter(name=\"durable\", description=\"true if the Exchang should be durable\")boolean durable,\n-                           @MBeanOperationParameter(name=\"passive\", description=\"true of the Exchange should be passive\")boolean passive)\n+                           @MBeanOperationParameter(name=\"durable\", description=\"true if the Exchang should be durable\")boolean durable)\n         throws IOException, JMException;\n \n     /**\n@@ -81,8 +80,7 @@ void unregisterExchange(@MBeanOperationParameter(name= ManagedExchange.TYPE, des\n     @MBeanOperation(name=\"createNewQueue\", description=\"Create a new Queue on the Broker server\", impact= MBeanOperationInfo.ACTION)\n     void createNewQueue(@MBeanOperationParameter(name=\"queue name\", description=\"Name of the new queue\")String queueName,\n                         @MBeanOperationParameter(name=\"owner\", description=\"Owner name\")String owner,\n-                        @MBeanOperationParameter(name=\"durable\", description=\"true if the queue should be durable\")boolean durable,\n-                        @MBeanOperationParameter(name=\"autoDelete\", description=\"true if the queue should be auto delete\") boolean autoDelete)\n+                        @MBeanOperationParameter(name=\"durable\", description=\"true if the queue should be durable\")boolean durable)\n         throws IOException, JMException;\n \n     /**",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/management/ManagedBroker.java",
                "sha": "45e2e91ed70028efaabcbd05bf5254334b106148",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/management/ManagedObjectRegistry.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/management/ManagedObjectRegistry.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/management/ManagedObjectRegistry.java",
                "patch": "@@ -21,6 +21,7 @@\n package org.apache.qpid.server.management;\n \n import javax.management.JMException;\n+import java.rmi.RemoteException;\n \n /**\n  * Handles the registration (and unregistration and so on) of managed objects.\n@@ -36,7 +37,11 @@\n  */\n public interface ManagedObjectRegistry\n {\n+    void start();\n+\n     void registerObject(ManagedObject managedObject) throws JMException;\n \n     void unregisterObject(ManagedObject managedObject) throws JMException;\n+\n+    void close() throws RemoteException;\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/management/ManagedObjectRegistry.java",
                "sha": "5f9bc9ddad728696c2fb980e912a01dc6530164a",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/management/NoopManagedObjectRegistry.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/management/NoopManagedObjectRegistry.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/management/NoopManagedObjectRegistry.java",
                "patch": "@@ -24,6 +24,8 @@\n \n import org.apache.log4j.Logger;\n \n+import java.rmi.RemoteException;\n+\n /**\n  * This managed object registry does not actually register MBeans. This can be used in tests when management is\n  * not required or when management has been disabled.\n@@ -38,11 +40,21 @@ public NoopManagedObjectRegistry()\n         _log.info(\"Management is disabled\");\n     }\n \n+    public void start()\n+    {\n+        //no-op\n+    }\n+\n     public void registerObject(ManagedObject managedObject) throws JMException\n     {\n     }\n \n     public void unregisterObject(ManagedObject managedObject) throws JMException\n     {\n     }\n+\n+    public void close() throws RemoteException\n+    {\n+        \n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/management/NoopManagedObjectRegistry.java",
                "sha": "b4fbed6948ed906957f4a0430b7ca2b0dc90986b",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 3,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java",
                "patch": "@@ -28,6 +28,7 @@\n import java.util.Map;\n import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.CopyOnWriteArraySet;\n+import java.security.Principal;\n \n import javax.management.JMException;\n import javax.security.sasl.SaslServer;\n@@ -108,7 +109,7 @@\n     private VersionSpecificRegistry _registry = MainRegistry.getVersionSpecificRegistry(_protocolVersion);\n     private List<Integer> _closingChannelsList = new ArrayList<Integer>();\n     private ProtocolOutputConverter _protocolOutputConverter;\n-    private String _authorizedID;\n+    private Principal _authorizedID;\n \n \n     public ManagedObject getManagedObject()\n@@ -745,12 +746,12 @@ public ProtocolOutputConverter getProtocolOutputConverter()\n         return _protocolOutputConverter;\n     }\n \n-    public void setAuthorizedID(String authorizedID)\n+    public void setAuthorizedID(Principal authorizedID)\n     {\n         _authorizedID = authorizedID;\n     }\n \n-    public String getAuthorizedID()\n+    public Principal getAuthorizedID()\n     {\n         return _authorizedID;\n     }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java",
                "sha": "2e62c2f1e4ef712207644411ee766d84febf1e46",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 3,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java",
                "patch": "@@ -31,6 +31,8 @@\n import org.apache.qpid.server.output.ProtocolOutputConverter;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n \n+import java.security.Principal;\n+\n \n public interface AMQProtocolSession extends AMQVersionAwareProtocolSession\n {\n@@ -165,9 +167,9 @@\n \n     public ProtocolOutputConverter getProtocolOutputConverter();\n \n-    void setAuthorizedID(String authorizedID);\n+    void setAuthorizedID(Principal authorizedID);\n \n-    /** @return a username string that was used to authorized this session */    \n-    String getAuthorizedID();\n+    /** @return a Principal that was used to authorized this session */\n+    Principal getAuthorizedID();\n \n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java",
                "sha": "390117acf665bd44be41381398d8188f7ad5464f",
                "status": "modified"
            },
            {
                "additions": 62,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBean.java",
                "changes": 96,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBean.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 34,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBean.java",
                "patch": "@@ -1,3 +1,23 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n /*\n  *\n  * Copyright (c) 2006 The Apache Software Foundation\n@@ -17,14 +37,15 @@\n  */\n package org.apache.qpid.server.protocol;\n \n+import java.security.Principal;\n import java.util.Date;\n import java.util.List;\n \n import javax.management.JMException;\n import javax.management.MBeanException;\n import javax.management.MBeanNotificationInfo;\n-import javax.management.Notification;\n import javax.management.NotCompliantMBeanException;\n+import javax.management.Notification;\n import javax.management.monitor.MonitorNotification;\n import javax.management.openmbean.CompositeData;\n import javax.management.openmbean.CompositeDataSupport;\n@@ -56,38 +77,39 @@\n {\n     private AMQMinaProtocolSession _session = null;\n     private String _name = null;\n-    \n-    //openmbean data types for representing the channel attributes\n-    private final static String[] _channelAtttibuteNames = {\"Channel Id\", \"Transactional\", \"Default Queue\", \"Unacknowledged Message Count\"};\n-    private final static String[] _indexNames = {_channelAtttibuteNames[0]};\n-    private final static OpenType[] _channelAttributeTypes = {SimpleType.INTEGER, SimpleType.BOOLEAN, SimpleType.STRING, SimpleType.INTEGER};\n-    private static CompositeType _channelType = null;      // represents the data type for channel data\n-    private static TabularType _channelsType = null;       // Data type for list of channels type\n+\n+    // openmbean data types for representing the channel attributes\n+    private static final String[] _channelAtttibuteNames =\n+        { \"Channel Id\", \"Transactional\", \"Default Queue\", \"Unacknowledged Message Count\" };\n+    private static final String[] _indexNames = { _channelAtttibuteNames[0] };\n+    private static final OpenType[] _channelAttributeTypes =\n+        { SimpleType.INTEGER, SimpleType.BOOLEAN, SimpleType.STRING, SimpleType.INTEGER };\n+    private static CompositeType _channelType = null; // represents the data type for channel data\n+    private static TabularType _channelsType = null; // Data type for list of channels type\n     private static final AMQShortString BROKER_MANAGEMENT_CONSOLE_HAS_CLOSED_THE_CONNECTION =\n-            new AMQShortString(\"Broker Management Console has closed the connection.\");\n+        new AMQShortString(\"Broker Management Console has closed the connection.\");\n \n     @MBeanConstructor(\"Creates an MBean exposing an AMQ Broker Connection\")\n     public AMQProtocolSessionMBean(AMQMinaProtocolSession session) throws NotCompliantMBeanException, OpenDataException\n     {\n         super(ManagedConnection.class, ManagedConnection.TYPE);\n         _session = session;\n         String remote = getRemoteAddress();\n-        remote = \"anonymous\".equals(remote) ? remote + hashCode() : remote;\n+        remote = \"anonymous\".equals(remote) ? (remote + hashCode()) : remote;\n         _name = jmxEncode(new StringBuffer(remote), 0).toString();\n         init();\n     }\n \n-\n     static\n     {\n         try\n         {\n             init();\n         }\n-        catch(JMException ex)\n+        catch (JMException ex)\n         {\n-            // It should never occur\n-            System.out.println(ex.getMessage());\n+            // This is not expected to ever occur.\n+            throw new RuntimeException(\"Got JMException in static initializer.\", ex);\n         }\n     }\n \n@@ -96,26 +118,27 @@ public AMQProtocolSessionMBean(AMQMinaProtocolSession session) throws NotComplia\n      */\n     private static void init() throws OpenDataException\n     {\n-        _channelType = new CompositeType(\"Channel\", \"Channel Details\", _channelAtttibuteNames,\n-                                         _channelAtttibuteNames, _channelAttributeTypes);\n+        _channelType =\n+            new CompositeType(\"Channel\", \"Channel Details\", _channelAtttibuteNames, _channelAtttibuteNames,\n+                _channelAttributeTypes);\n         _channelsType = new TabularType(\"Channels\", \"Channels\", _channelType, _indexNames);\n     }\n \n     public String getClientId()\n     {\n-        return _session.getContextKey() == null ? null : _session.getContextKey().toString();\n+        return (_session.getContextKey() == null) ? null : _session.getContextKey().toString();\n     }\n \n     public String getAuthorizedId()\n     {\n-        return _session.getAuthorizedID();\n+        return (_session.getAuthorizedID() != null ) ? _session.getAuthorizedID().getName() : null;\n     }\n \n     public String getVersion()\n     {\n-        return _session.getClientVersion() == null ? null : _session.getClientVersion().toString();\n+        return (_session.getClientVersion() == null) ? null : _session.getClientVersion().toString();\n     }\n-    \n+\n     public Date getLastIoTime()\n     {\n         return new Date(_session.getIOSession().getLastIoTime());\n@@ -171,6 +194,7 @@ public void commitTransactions(int channelId) throws JMException\n             {\n                 throw new JMException(\"The channel (channel Id = \" + channelId + \") does not exist\");\n             }\n+\n             _session.commitTransactions(channel);\n         }\n         catch (AMQException ex)\n@@ -194,6 +218,7 @@ public void rollbackTransactions(int channelId) throws JMException\n             {\n                 throw new JMException(\"The channel (channel Id = \" + channelId + \") does not exist\");\n             }\n+\n             _session.rollbackTransactions(channel);\n         }\n         catch (AMQException ex)\n@@ -215,9 +240,12 @@ public TabularData channels() throws OpenDataException\n \n         for (AMQChannel channel : list)\n         {\n-            Object[] itemValues = {channel.getChannelId(), channel.isTransactional(),\n+            Object[] itemValues =\n+                {\n+                    channel.getChannelId(), channel.isTransactional(),\n                     (channel.getDefaultQueue() != null) ? channel.getDefaultQueue().getName().asString() : null,\n-                    channel.getUnacknowledgedMessageMap().size()};\n+                    channel.getUnacknowledgedMessageMap().size()\n+                };\n \n             CompositeData channelData = new CompositeDataSupport(_channelType, _channelAtttibuteNames, itemValues);\n             channelsList.put(channelData);\n@@ -232,17 +260,16 @@ public TabularData channels() throws OpenDataException\n      * @throws JMException\n      */\n     public void closeConnection() throws JMException\n-    {        \n+    {\n         // AMQP version change: Hardwire the version to 0-8 (major=8, minor=0)\n         // TODO: Connect this to the session version obtained from ProtocolInitiation for this session.\n         // Be aware of possible changes to parameter order as versions change.\n-        final AMQFrame response = ConnectionCloseBody.createAMQFrame(0,\n-            _session.getProtocolMajorVersion(),\n-            _session.getProtocolMinorVersion(),\t// AMQP version (major, minor)\n-            0,\t// classId\n-            0,\t// methodId\n-        \tAMQConstant.REPLY_SUCCESS.getCode(),\t// replyCode\n-            BROKER_MANAGEMENT_CONSOLE_HAS_CLOSED_THE_CONNECTION    // replyText\n+        final AMQFrame response =\n+            ConnectionCloseBody.createAMQFrame(0, _session.getProtocolMajorVersion(), _session.getProtocolMinorVersion(), // AMQP version (major, minor)\n+                0, // classId\n+                0, // methodId\n+                AMQConstant.REPLY_SUCCESS.getCode(), // replyCode\n+                BROKER_MANAGEMENT_CONSOLE_HAS_CLOSED_THE_CONNECTION // replyText\n             );\n         _session.writeFrame(response);\n \n@@ -259,18 +286,19 @@ public void closeConnection() throws JMException\n     @Override\n     public MBeanNotificationInfo[] getNotificationInfo()\n     {\n-        String[] notificationTypes = new String[]{MonitorNotification.THRESHOLD_VALUE_EXCEEDED};\n+        String[] notificationTypes = new String[] { MonitorNotification.THRESHOLD_VALUE_EXCEEDED };\n         String name = MonitorNotification.class.getName();\n         String description = \"Channel count has reached threshold value\";\n         MBeanNotificationInfo info1 = new MBeanNotificationInfo(notificationTypes, name, description);\n \n-        return new MBeanNotificationInfo[]{info1};\n+        return new MBeanNotificationInfo[] { info1 };\n     }\n \n     public void notifyClients(String notificationMsg)\n     {\n-        Notification n = new Notification(MonitorNotification.THRESHOLD_VALUE_EXCEEDED, this,\n-                ++_notificationSequenceNumber, System.currentTimeMillis(), notificationMsg);\n+        Notification n =\n+            new Notification(MonitorNotification.THRESHOLD_VALUE_EXCEEDED, this, ++_notificationSequenceNumber,\n+                System.currentTimeMillis(), notificationMsg);\n         _broadcaster.sendNotification(n);\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBean.java",
                "sha": "66f928a70e275ccebb58259112acd2e1309faa3c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/ManagedConnection.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/ManagedConnection.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 3,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/ManagedConnection.java",
                "patch": "@@ -23,6 +23,7 @@\n \n import java.io.IOException;\n import java.util.Date;\n+import java.security.Principal;\n \n import javax.management.JMException;\n import javax.management.MBeanOperationInfo;\n@@ -67,16 +68,17 @@\n     /**\n      * Tells the total number of bytes written till now.\n      * @return number of bytes written.\n-     */\n+     *\n     @MBeanAttribute(name=\"WrittenBytes\", description=\"The total number of bytes written till now\")\n     Long getWrittenBytes();\n-\n+    */\n     /**\n      * Tells the total number of bytes read till now.\n      * @return number of bytes read.\n-     */\n+     *\n     @MBeanAttribute(name=\"ReadBytes\", description=\"The total number of bytes read till now\")\n     Long getReadBytes();\n+    */\n \n     /**\n      * Threshold high value for no of channels.  This is useful in setting notifications or",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/protocol/ManagedConnection.java",
                "sha": "e6e713ac6d9d9a8e345c8b53d155bfb3526ca1d6",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 13,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.qpid.framing.AMQDataBlock;\n import org.apache.qpid.framing.AMQFrame;\n import org.apache.qpid.framing.ContentHeaderBody;\n+import org.apache.qpid.framing.FieldTable;\n import org.apache.qpid.framing.abstraction.ContentChunk;\n import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n import org.apache.qpid.framing.abstraction.ProtocolVersionMethodConverter;\n@@ -42,6 +43,8 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n \n@@ -78,19 +81,20 @@\n     private boolean _immediate;\n \n     private AtomicBoolean _taken = new AtomicBoolean(false);\n-\n     private TransientMessageData _transientMessageData = new TransientMessageData();\n \n     private Subscription _takenBySubcription;\n-\n     private Set<Subscription> _rejectedBy = null;\n+    private Map<AMQQueue, AtomicBoolean> _takenMap = new HashMap<AMQQueue, AtomicBoolean>();\n+    private Map<AMQQueue, Subscription> _takenBySubcriptionMap = new HashMap<AMQQueue, Subscription>();\n \n-    public boolean isTaken()\n+    public boolean isTaken(AMQQueue queue)\n     {\n         return _taken.get();\n     }\n \n     private final int hashcode = System.identityHashCode(this);\n+\n     public String debugIdentity()\n     {\n         return \"(HC:\" + hashcode + \" ID:\" + _messageId + \" Ref:\" + _referenceCount.get() + \")\";\n@@ -203,9 +207,10 @@ public AMQMessage(Long messageId, MessagePublishInfo info,\n         _transientMessageData.setMessagePublishInfo(info);\n \n         _taken = new AtomicBoolean(false);\n+\n         if (_log.isDebugEnabled())\n         {\n-            _log.debug(\"Message(\" + System.identityHashCode(this) + \") created (\" + debugIdentity()+\")\");\n+            _log.debug(\"Message(\" + System.identityHashCode(this) + \") created (\" + debugIdentity() + \")\");\n         }\n     }\n \n@@ -318,8 +323,10 @@ public void routingComplete(MessageStore store, StoreContext storeContext, Messa\n \n         // enqueuing the messages ensure that if required the destinations are recorded to a\n         // persistent store\n+\n         for (AMQQueue q : _transientMessageData.getDestinationQueues())\n         {\n+            _takenMap.put(q, new AtomicBoolean(false));\n             _messageHandle.enqueue(storeContext, _messageId, q);\n         }\n \n@@ -356,12 +363,13 @@ public long getMessageId()\n     }\n \n     /**\n-     * Creates a long-lived reference to this message, and increments the count of such references, as an atomic operation.\n+     * Creates a long-lived reference to this message, and increments the count of such references, as an atomic\n+     * operation.\n      */\n     public AMQMessage takeReference()\n     {\n         _referenceCount.incrementAndGet();\n-\treturn this;\n+        return this;\n     }\n \n     /** Threadsafe. Increment the reference count on the message. */\n@@ -378,9 +386,10 @@ protected void incrementReference()\n      * Threadsafe. This will decrement the reference count and when it reaches zero will remove the message from the\n      * message store.\n      *\n+     * @param storeContext\n+     *\n      * @throws MessageCleanupException when an attempt was made to remove the message from the message store and that\n      *                                 failed\n-     * @param storeContext\n      */\n     public void decrementReference(StoreContext storeContext) throws MessageCleanupException\n     {\n@@ -451,7 +460,7 @@ public boolean getDeliveredToConsumer()\n     }\n \n \n-    public boolean taken(Subscription sub)\n+    public boolean taken(AMQQueue queue, Subscription sub)\n     {\n         if (_taken.getAndSet(true))\n         {\n@@ -464,7 +473,7 @@ public boolean taken(Subscription sub)\n         }\n     }\n \n-    public void release()\n+    public void release(AMQQueue queue)\n     {\n         if (_log.isTraceEnabled())\n         {\n@@ -600,7 +609,7 @@ private void deliver(StoreContext storeContext) throws AMQException\n             for (AMQQueue q : destinationQueues)\n             {\n                 //Increment the references to this message for each queue delivery.\n-                incrementReference();                \n+                incrementReference();\n                 //normal deliver so add this message at the end.\n                 _txnContext.deliver(this, q, false);\n             }\n@@ -824,11 +833,14 @@ public void clearTransientMessageData()\n \n     public String toString()\n     {\n-        return \"Message[\" + debugIdentity() + \"]: \" + _messageId + \"; ref count: \" + _referenceCount + \"; taken: \" +\n-               _taken + \" by:\" + _takenBySubcription;\n+        return \"Message[\" + debugIdentity() + \"]: \" + _messageId + \"; ref count: \" + _referenceCount + \"; taken : \" +\n+               _taken + \" by :\" + _takenBySubcription;\n+\n+//        return \"Message[\" + debugIdentity() + \"]: \" + _messageId + \"; ref count: \" + _referenceCount + \"; taken for queues: \" +\n+//               _takenMap.toString() + \" by Subs:\" + _takenBySubcriptionMap.toString();\n     }\n \n-    public Subscription getDeliveredSubscription()\n+    public Subscription getDeliveredSubscription(AMQQueue queue)\n     {\n         return _takenBySubcription;\n     }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java",
                "sha": "b2046efee3414ac85cbc353576805d7983ce3968",
                "status": "modified"
            },
            {
                "additions": 84,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQQueueMBean.java",
                "changes": 136,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQQueueMBean.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 52,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQQueueMBean.java",
                "patch": "@@ -1,3 +1,23 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n /*\n  *\n  * Copyright (c) 2006 The Apache Software Foundation\n@@ -17,11 +37,11 @@\n  */\n package org.apache.qpid.server.queue;\n \n+import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Date;\n-import java.text.SimpleDateFormat;\n \n import javax.management.JMException;\n import javax.management.MBeanException;\n@@ -41,12 +61,14 @@\n import javax.management.openmbean.TabularType;\n \n import org.apache.log4j.Logger;\n+\n import org.apache.mina.common.ByteBuffer;\n+\n import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.CommonContentHeaderProperties;\n-import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n+import org.apache.qpid.framing.CommonContentHeaderProperties;\n+import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.abstraction.ContentChunk;\n import org.apache.qpid.server.management.AMQManagedObject;\n import org.apache.qpid.server.management.MBeanConstructor;\n@@ -73,15 +95,15 @@\n     private AMQQueue _queue = null;\n     private String _queueName = null;\n     // OpenMBean data types for viewMessages method\n-    private final static String[] _msgAttributeNames = {\"AMQ MessageId\", \"Header\", \"Size(bytes)\", \"Redelivered\"};\n-    private static String[] _msgAttributeIndex = {_msgAttributeNames[0]};\n+    private static final String[] _msgAttributeNames = { \"AMQ MessageId\", \"Header\", \"Size(bytes)\", \"Redelivered\" };\n+    private static String[] _msgAttributeIndex = { _msgAttributeNames[0] };\n     private static OpenType[] _msgAttributeTypes = new OpenType[4]; // AMQ message attribute types.\n-    private static CompositeType _messageDataType = null;           // Composite type for representing AMQ Message data.\n-    private static TabularType _messagelistDataType = null;         // Datatype for representing AMQ messages list.\n+    private static CompositeType _messageDataType = null; // Composite type for representing AMQ Message data.\n+    private static TabularType _messagelistDataType = null; // Datatype for representing AMQ messages list.\n \n     // OpenMBean data types for viewMessageContent method\n     private static CompositeType _msgContentType = null;\n-    private final static String[] _msgContentAttributes = {\"AMQ MessageId\", \"MimeType\", \"Encoding\", \"Content\"};\n+    private static final String[] _msgContentAttributes = { \"AMQ MessageId\", \"MimeType\", \"Encoding\", \"Content\" };\n     private static OpenType[] _msgContentAttributeTypes = new OpenType[4];\n \n     private final long[] _lastNotificationTimes = new long[NotificationCheck.values().length];\n@@ -95,7 +117,6 @@ public AMQQueueMBean(AMQQueue queue) throws JMException\n         _queueName = jmxEncode(new StringBuffer(queue.getName()), 0).toString();\n     }\n \n-\n     public ManagedObject getParentObject()\n     {\n         return _queue.getVirtualHost().getManagedObject();\n@@ -107,10 +128,10 @@ public ManagedObject getParentObject()\n         {\n             init();\n         }\n-        catch(JMException ex)\n+        catch (JMException ex)\n         {\n-            // It should never occur\n-            System.out.println(ex.getMessage());\n+            // This is not expected to ever occur.\n+            throw new RuntimeException(\"Got JMException in static initializer.\", ex);\n         }\n     }\n \n@@ -119,19 +140,21 @@ public ManagedObject getParentObject()\n      */\n     private static void init() throws OpenDataException\n     {\n-        _msgContentAttributeTypes[0] = SimpleType.LONG;                    // For message id\n-        _msgContentAttributeTypes[1] = SimpleType.STRING;                  // For MimeType\n-        _msgContentAttributeTypes[2] = SimpleType.STRING;                  // For Encoding\n-        _msgContentAttributeTypes[3] = new ArrayType(1, SimpleType.BYTE);  // For message content\n-        _msgContentType = new CompositeType(\"Message Content\", \"AMQ Message Content\", _msgContentAttributes,\n-                _msgContentAttributes, _msgContentAttributeTypes);\n-\n-        _msgAttributeTypes[0] = SimpleType.LONG;                      // For message id\n-        _msgAttributeTypes[1] = new ArrayType(1, SimpleType.STRING);  // For header attributes\n-        _msgAttributeTypes[2] = SimpleType.LONG;                      // For size\n-        _msgAttributeTypes[3] = SimpleType.BOOLEAN;                   // For redelivered\n-\n-        _messageDataType = new CompositeType(\"Message\", \"AMQ Message\", _msgAttributeNames, _msgAttributeNames, _msgAttributeTypes);\n+        _msgContentAttributeTypes[0] = SimpleType.LONG; // For message id\n+        _msgContentAttributeTypes[1] = SimpleType.STRING; // For MimeType\n+        _msgContentAttributeTypes[2] = SimpleType.STRING; // For Encoding\n+        _msgContentAttributeTypes[3] = new ArrayType(1, SimpleType.BYTE); // For message content\n+        _msgContentType =\n+            new CompositeType(\"Message Content\", \"AMQ Message Content\", _msgContentAttributes, _msgContentAttributes,\n+                _msgContentAttributeTypes);\n+\n+        _msgAttributeTypes[0] = SimpleType.LONG; // For message id\n+        _msgAttributeTypes[1] = new ArrayType(1, SimpleType.STRING); // For header attributes\n+        _msgAttributeTypes[2] = SimpleType.LONG; // For size\n+        _msgAttributeTypes[3] = SimpleType.BOOLEAN; // For redelivered\n+\n+        _messageDataType =\n+            new CompositeType(\"Message\", \"AMQ Message\", _msgAttributeNames, _msgAttributeNames, _msgAttributeTypes);\n         _messagelistDataType = new TabularType(\"Messages\", \"List of messages\", _messageDataType, _msgAttributeIndex);\n     }\n \n@@ -213,7 +236,8 @@ public void setMaximumMessageCount(Long value)\n     public Long getMaximumQueueDepth()\n     {\n         long queueDepthInBytes = _queue.getMaximumQueueDepth();\n-        return queueDepthInBytes >> 10 ;\n+\n+        return queueDepthInBytes >> 10;\n     }\n \n     public void setMaximumQueueDepth(Long value)\n@@ -227,7 +251,8 @@ public void setMaximumQueueDepth(Long value)\n     public Long getQueueDepth() throws JMException\n     {\n         long queueBytesSize = _queue.getQueueDepth();\n-        return queueBytesSize >> 10 ;\n+\n+        return queueBytesSize >> 10;\n     }\n \n     /**\n@@ -237,13 +262,13 @@ public void checkForNotification(AMQMessage msg) throws AMQException, JMExceptio\n     {\n \n         final long currentTime = System.currentTimeMillis();\n-        final long thresholdTime =  currentTime - _queue.getMinimumAlertRepeatGap();\n+        final long thresholdTime = currentTime - _queue.getMinimumAlertRepeatGap();\n \n-        for(NotificationCheck check : NotificationCheck.values())\n+        for (NotificationCheck check : NotificationCheck.values())\n         {\n-            if(check.isMessageSpecific() || _lastNotificationTimes[check.ordinal()]<thresholdTime)\n+            if (check.isMessageSpecific() || (_lastNotificationTimes[check.ordinal()] < thresholdTime))\n             {\n-                if(check.notifyIfNecessary(msg, _queue, this))\n+                if (check.notifyIfNecessary(msg, _queue, this))\n                 {\n                     _lastNotificationTimes[check.ordinal()] = currentTime;\n                 }\n@@ -260,9 +285,10 @@ public void notifyClients(NotificationCheck notification, AMQQueue queue, String\n         // important : add log to the log file - monitoring tools may be looking for this\n         _logger.info(notification.name() + \" On Queue \" + queue.getName() + \" - \" + notificationMsg);\n         notificationMsg = notification.name() + \" \" + notificationMsg;\n-        \n-        _lastNotification = new Notification(MonitorNotification.THRESHOLD_VALUE_EXCEEDED, this,\n-                ++_notificationSequenceNumber, System.currentTimeMillis(), notificationMsg);\n+\n+        _lastNotification =\n+            new Notification(MonitorNotification.THRESHOLD_VALUE_EXCEEDED, this, ++_notificationSequenceNumber,\n+                System.currentTimeMillis(), notificationMsg);\n \n         _broadcaster.sendNotification(_lastNotification);\n     }\n@@ -334,20 +360,25 @@ public CompositeData viewMessageContent(long msgId) throws JMException\n         try\n         {\n             // Create header attributes list\n-            CommonContentHeaderProperties headerProperties = (CommonContentHeaderProperties) msg.getContentHeaderBody().properties;\n+            CommonContentHeaderProperties headerProperties =\n+                (CommonContentHeaderProperties) msg.getContentHeaderBody().properties;\n             String mimeType = null, encoding = null;\n             if (headerProperties != null)\n             {\n                 AMQShortString mimeTypeShortSting = headerProperties.getContentType();\n-                mimeType = mimeTypeShortSting == null ? null : mimeTypeShortSting.toString();\n-                encoding = headerProperties.getEncoding() == null ? \"\" : headerProperties.getEncoding().toString();\n+                mimeType = (mimeTypeShortSting == null) ? null : mimeTypeShortSting.toString();\n+                encoding = (headerProperties.getEncoding() == null) ? \"\" : headerProperties.getEncoding().toString();\n             }\n-            Object[] itemValues = {msgId, mimeType, encoding, msgContent.toArray(new Byte[0])};\n+\n+            Object[] itemValues = { msgId, mimeType, encoding, msgContent.toArray(new Byte[0]) };\n+\n             return new CompositeDataSupport(_msgContentType, _msgContentAttributes, itemValues);\n         }\n         catch (AMQException e)\n         {\n-            throw new JMException(\"Error creating header attributes list: \" + e);\n+            JMException jme = new JMException(\"Error creating header attributes list: \" + e);\n+            jme.initCause(e);\n+            throw jme;\n         }\n     }\n \n@@ -358,8 +389,8 @@ public TabularData viewMessages(int beginIndex, int endIndex) throws JMException\n     {\n         if ((beginIndex > endIndex) || (beginIndex < 1))\n         {\n-            throw new OperationsException(\"From Index = \" + beginIndex + \", To Index = \" + endIndex +\n-                                          \"\\n\\\"From Index\\\" should be greater than 0 and less than \\\"To Index\\\"\");\n+            throw new OperationsException(\"From Index = \" + beginIndex + \", To Index = \" + endIndex\n+                + \"\\n\\\"From Index\\\" should be greater than 0 and less than \\\"To Index\\\"\");\n         }\n \n         List<AMQMessage> list = _queue.getMessagesOnTheQueue();\n@@ -368,20 +399,22 @@ public TabularData viewMessages(int beginIndex, int endIndex) throws JMException\n         try\n         {\n             // Create the tabular list of message header contents\n-            for (int i = beginIndex; i <= endIndex && i <= list.size(); i++)\n+            for (int i = beginIndex; (i <= endIndex) && (i <= list.size()); i++)\n             {\n                 AMQMessage msg = list.get(i - 1);\n                 ContentHeaderBody headerBody = msg.getContentHeaderBody();\n                 // Create header attributes list\n                 String[] headerAttributes = getMessageHeaderProperties(headerBody);\n-                Object[] itemValues = {msg.getMessageId(), headerAttributes, headerBody.bodySize, msg.isRedelivered()};\n+                Object[] itemValues = { msg.getMessageId(), headerAttributes, headerBody.bodySize, msg.isRedelivered() };\n                 CompositeData messageData = new CompositeDataSupport(_messageDataType, _msgAttributeNames, itemValues);\n                 _messageList.put(messageData);\n             }\n         }\n         catch (AMQException e)\n         {\n-            throw new JMException(\"Error creating message contents: \" + e);\n+            JMException jme = new JMException(\"Error creating message contents: \" + e);\n+            jme.initCause(e);\n+            throw jme;\n         }\n \n         return _messageList;\n@@ -400,11 +433,11 @@ public TabularData viewMessages(int beginIndex, int endIndex) throws JMException\n         list.add(\"JMSCorrelationID = \" + headerProperties.getCorrelationIdAsString());\n \n         int delMode = headerProperties.getDeliveryMode();\n-        list.add(\"JMSDeliveryMode = \" + (delMode == 1 ? \"Persistent\" : \"Non_Persistent\"));\n+        list.add(\"JMSDeliveryMode = \" + ((delMode == 1) ? \"Persistent\" : \"Non_Persistent\"));\n \n         list.add(\"JMSPriority = \" + headerProperties.getPriority());\n         list.add(\"JMSType = \" + headerProperties.getType());\n-        \n+\n         long longDate = headerProperties.getExpiration();\n         String strDate = (longDate != 0) ? _dateFormat.format(new Date(longDate)) : null;\n         list.add(\"JMSExpiration = \" + strDate);\n@@ -425,27 +458,26 @@ public TabularData viewMessages(int beginIndex, int endIndex) throws JMException\n      */\n     public void moveMessages(long fromMessageId, long toMessageId, String toQueueName) throws JMException\n     {\n-        if (fromMessageId > toMessageId || (fromMessageId < 1))\n+        if ((fromMessageId > toMessageId) || (fromMessageId < 1))\n         {\n-            throw new OperationsException(\"\\\"From MessageId\\\" should be greater then 0 and less then \\\"To MessageId\\\"\");            \n+            throw new OperationsException(\"\\\"From MessageId\\\" should be greater then 0 and less then \\\"To MessageId\\\"\");\n         }\n \n         _queue.moveMessagesToAnotherQueue(fromMessageId, toMessageId, toQueueName, _storeContext);\n     }\n \n-\n     /**\n      * returns Notifications sent by this MBean.\n      */\n     @Override\n     public MBeanNotificationInfo[] getNotificationInfo()\n     {\n-        String[] notificationTypes = new String[]{MonitorNotification.THRESHOLD_VALUE_EXCEEDED};\n+        String[] notificationTypes = new String[] { MonitorNotification.THRESHOLD_VALUE_EXCEEDED };\n         String name = MonitorNotification.class.getName();\n         String description = \"Either Message count or Queue depth or Message size has reached threshold high value\";\n         MBeanNotificationInfo info1 = new MBeanNotificationInfo(notificationTypes, name, description);\n \n-        return new MBeanNotificationInfo[]{info1};\n+        return new MBeanNotificationInfo[] { info1 };\n     }\n \n } // End of AMQQueueMBean class",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/AMQQueueMBean.java",
                "sha": "bbaa7379f6585cd932d5f933d5ebffd5a6e07d66",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 13,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java",
                "patch": "@@ -210,6 +210,7 @@ public void subscriberHasPendingResend(boolean hasContent, Subscription subscrip\n \n     /**\n      * Returns all the messages in the Queue\n+     *\n      * @return List of messages\n      */\n     public List<AMQMessage> getMessages()\n@@ -222,14 +223,16 @@ public void subscriberHasPendingResend(boolean hasContent, Subscription subscrip\n             list.add(message);\n         }\n         _lock.unlock();\n-        \n+\n         return list;\n     }\n \n     /**\n      * Returns messages within the range of given messageIds\n+     *\n      * @param fromMessageId\n      * @param toMessageId\n+     *\n      * @return\n      */\n     public List<AMQMessage> getMessages(long fromMessageId, long toMessageId)\n@@ -242,7 +245,7 @@ public void subscriberHasPendingResend(boolean hasContent, Subscription subscrip\n         long maxMessageCount = toMessageId - fromMessageId + 1;\n \n         _lock.lock();\n-        \n+\n         List<AMQMessage> foundMessagesList = new ArrayList<AMQMessage>();\n \n         for (AMQMessage message : _messages)\n@@ -399,7 +402,7 @@ public void removeMovedMessages(List<AMQMessage> messageList)\n     public void removeAMessageFromTop(StoreContext storeContext) throws AMQException\n     {\n         _lock.lock();\n-        \n+\n         AMQMessage message = _messages.poll();\n         if (message != null)\n         {\n@@ -432,9 +435,7 @@ public long clearAllMessages(StoreContext storeContext) throws AMQException\n         return count;\n     }\n \n-    /**\n-        This can only be used to clear the _messages queue. Any subscriber resend queue will not be purged. \n-     */\n+    /** This can only be used to clear the _messages queue. Any subscriber resend queue will not be purged. */\n     private AMQMessage getNextMessage() throws AMQException\n     {\n         return getNextMessage(_messages, null);\n@@ -444,8 +445,12 @@ private AMQMessage getNextMessage(Queue<AMQMessage> messages, Subscription sub)\n     {\n         AMQMessage message = messages.peek();\n \n-        //while (we have a message) && (The subscriber is not a browser or we are clearing) && (Check message is taken.)\n-        while (message != null && (sub != null && !sub.isBrowser() || sub == null) && message.taken(sub))\n+        //while (we have a message) && ((The subscriber is not a browser or message is taken ) or we are clearing) && (Check message is taken.)\n+        while (message != null\n+               && (\n+                ((sub != null && !sub.isBrowser()) || message.isTaken(_queue))\n+                || sub == null)\n+               && message.taken(_queue, sub))\n         {\n             //remove the already taken message\n             AMQMessage removed = messages.poll();\n@@ -506,7 +511,7 @@ public void sendNextMessage(Subscription sub, AMQQueue queue)//Queue<AMQMessage>\n                 }\n                 if (_log.isDebugEnabled())\n                 {\n-                    _log.debug(debugIdentity() + \"Async Delivery Message \" + message.getMessageId() + \"(\" + System.identityHashCode(message) +\n+                    _log.debug(debugIdentity() + \"Async Delivery Message :\" + message + \"(\" + System.identityHashCode(message) +\n                                \") by :\" + System.identityHashCode(this) +\n                                \") to :\" + System.identityHashCode(sub));\n                 }\n@@ -526,7 +531,7 @@ public void sendNextMessage(Subscription sub, AMQQueue queue)//Queue<AMQMessage>\n \n             if (_log.isDebugEnabled())\n             {\n-                _log.debug(debugIdentity() + \"Async Delivered Message r:\" + removed.debugIdentity() + \"d:\" + message.debugIdentity() +\n+                _log.debug(debugIdentity() + \"Async Delivered Message r:\" + removed.debugIdentity() + \"d:\" + message +\n                            \") by :\" + System.identityHashCode(this) +\n                            \") to :\" + System.identityHashCode(sub));\n             }\n@@ -562,7 +567,7 @@ else if (messageQueue == sub.getPreDeliveryQueue() && !sub.isBrowser())\n         }\n         catch (AMQException e)\n         {\n-            message.release();\n+            message.release(_queue);\n             _log.error(debugIdentity() + \"Unable to deliver message as dequeue failed: \" + e, e);\n         }\n     }\n@@ -723,7 +728,7 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg, b\n                             _log.trace(debugIdentity() + \"Delivering Message:\" + msg.debugIdentity() + \" to(\" +\n                                        System.identityHashCode(s) + \") :\" + s);\n                         }\n-                        msg.taken(s);\n+                        msg.taken(_queue, s);\n                         //Deliver the message\n                         s.send(msg, _queue);\n                     }\n@@ -737,7 +742,7 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg, b\n                     }\n                 }\n \n-                if (!msg.isTaken())\n+                if (!msg.isTaken(_queue))\n                 {\n                     if (_log.isInfoEnabled())\n                     {",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java",
                "sha": "979f692361d6c05c9a0817292871ea84926c655e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java",
                "patch": "@@ -558,7 +558,7 @@ private void requeue()\n                     _logger.trace(\"Removed for resending:\" + resent.debugIdentity());\n                 }\n \n-                resent.release();\n+                resent.release(_queue);\n                 _queue.subscriberHasPendingResend(false, this, resent);\n \n                 try",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java",
                "sha": "e3944954f3e7a1190033ac85a87d752e183bac1f",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 2,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java",
                "patch": "@@ -153,7 +153,7 @@ public static IApplicationRegistry getInstance(int instanceID)\n             {\n                 _logger.error(\"Error configuring application: \" + e, e);\n                 //throw new AMQBrokerCreationException(instanceID, \"Unable to create Application Registry instance \" + instanceID);\n-                throw new RuntimeException(\"Unable to create Application Registry\");\n+                throw new RuntimeException(\"Unable to create Application Registry\", e);\n             }\n         }\n         else\n@@ -168,6 +168,12 @@ public void close() throws Exception\n         {\n             virtualHost.close();\n         }\n+\n+        // close the rmi registry(if any) started for management\n+        if (getInstance().getManagedObjectRegistry() != null)\n+        {\n+            getInstance().getManagedObjectRegistry().close();\n+        }\n     }\n \n     public Configuration getConfiguration()\n@@ -187,7 +193,7 @@ public Configuration getConfiguration()\n             catch (Exception e)\n             {\n                 _logger.error(\"Unable to instantiate configuration class \" + instanceType + \" - ensure it has a public default constructor\");\n-                throw new IllegalArgumentException(\"Unable to instantiate configuration class \" + instanceType + \" - ensure it has a public default constructor\");\n+                throw new IllegalArgumentException(\"Unable to instantiate configuration class \" + instanceType + \" - ensure it has a public default constructor\", e);\n             }\n             Configurator.configure(instance);\n             _configuredObjects.put(instanceType, instance);",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java",
                "sha": "89f0b7b39da16d00d4c99e3b3f13e5da5b0e0887",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java",
                "patch": "@@ -42,6 +42,7 @@\n import org.apache.qpid.server.security.access.AccessManagerImpl;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.virtualhost.VirtualHostRegistry;\n+import org.apache.qpid.AMQException;\n \n public class ConfigurationFileApplicationRegistry extends ApplicationRegistry\n {\n@@ -103,6 +104,7 @@ protected String interpolate(String o)\n     public void initialise() throws Exception\n     {\n         initialiseManagedObjectRegistry();\n+\n         _virtualHostRegistry = new VirtualHostRegistry();\n \n         _accessManager = new AccessManagerImpl(\"default\", _configuration);\n@@ -111,7 +113,12 @@ public void initialise() throws Exception\n \n         _authenticationManager = new PrincipalDatabaseAuthenticationManager(null, null);\n \n+        _databaseManager.initialiseManagement(_configuration);\n+\n+        _managedObjectRegistry.start();\n+\n         initialiseVirtualHosts();\n+\n     }\n \n     private void initialiseVirtualHosts() throws Exception\n@@ -123,7 +130,7 @@ private void initialiseVirtualHosts() throws Exception\n         }\n     }\n \n-    private void initialiseManagedObjectRegistry()\n+    private void initialiseManagedObjectRegistry() throws AMQException\n     {\n         ManagementConfiguration config = getConfiguredObject(ManagementConfiguration.class);\n         if (config.enabled)",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java",
                "sha": "1cca259a8d65f8cd8d16578c6cba82724feb22ad",
                "status": "modified"
            },
            {
                "additions": 81,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/Passwd.java",
                "changes": 81,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/Passwd.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/Passwd.java",
                "patch": "@@ -0,0 +1,81 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.security;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.DigestException;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+\n+public class Passwd\n+{\n+    public static void main(String args[]) throws NoSuchAlgorithmException, DigestException, IOException\n+    {\n+        if (args.length != 2)\n+        {\n+            System.out.println(\"Passwd <username> <password>\");\n+            System.exit(0);\n+        }\n+\n+        byte[] data = args[1].getBytes(\"utf-8\");\n+\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+\n+        for (byte b : data)\n+        {\n+            md.update(b);\n+        }\n+\n+        byte[] digest = md.digest();\n+\n+        Base64 b64 = new Base64();\n+\n+        byte[] encoded = b64.encode(digest);\n+\n+        output(args[0], encoded);\n+    }\n+\n+    private static void output(String user, byte[] encoded) throws IOException\n+    {\n+\n+//        File passwdFile = new File(\"qpid.passwd\");\n+\n+        PrintStream ps = new PrintStream(System.out);\n+\n+        user += \":\";\n+        ps.write(user.getBytes(\"utf-8\"));\n+\n+        for (byte b : encoded)\n+        {\n+            ps.write(b);\n+        }\n+\n+        ps.println();\n+\n+        ps.flush();\n+        ps.close();\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/Passwd.java",
                "sha": "f9e093dba7c1be0bd2691da0c951f5d78ebd0746",
                "status": "added"
            },
            {
                "additions": 457,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AMQUserManagementMBean.java",
                "changes": 457,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AMQUserManagementMBean.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AMQUserManagementMBean.java",
                "patch": "@@ -0,0 +1,457 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.security.access;\n+\n+import org.apache.qpid.server.management.MBeanDescription;\n+import org.apache.qpid.server.management.AMQManagedObject;\n+import org.apache.qpid.server.management.MBeanOperationParameter;\n+import org.apache.qpid.server.management.MBeanOperation;\n+import org.apache.qpid.server.management.MBeanInvocationHandlerImpl;\n+import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n+import org.apache.log4j.Logger;\n+import org.apache.commons.configuration.ConfigurationException;\n+\n+import javax.management.JMException;\n+import javax.management.openmbean.TabularData;\n+import javax.management.openmbean.TabularDataSupport;\n+import javax.management.openmbean.TabularType;\n+import javax.management.openmbean.SimpleType;\n+import javax.management.openmbean.CompositeType;\n+import javax.management.openmbean.OpenType;\n+import javax.management.openmbean.OpenDataException;\n+import javax.management.openmbean.CompositeData;\n+import javax.management.openmbean.CompositeDataSupport;\n+import javax.security.auth.login.AccountNotFoundException;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.FileOutputStream;\n+import java.util.Properties;\n+import java.util.List;\n+import java.util.Enumeration;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.security.Principal;\n+\n+/** MBean class for AMQUserManagementMBean. It implements all the management features exposed for managing users. */\n+@MBeanDescription(\"User Management Interface\")\n+public class AMQUserManagementMBean extends AMQManagedObject implements UserManagement\n+{\n+\n+    private static final Logger _logger = Logger.getLogger(AMQUserManagementMBean.class);\n+\n+    private PrincipalDatabase _principalDatabase;\n+    private String _accessFileName;\n+    private Properties _accessRights;\n+    //    private File _accessFile;\n+    private ReentrantLock _accessRightsUpdate = new ReentrantLock();\n+\n+    // Setup for the TabularType\n+    static TabularType _userlistDataType; // Datatype for representing User Lists\n+\n+    static CompositeType _userDataType; // Composite type for representing User\n+    static String[] _userItemNames = {\"Username\", \"Read\", \"Write\", \"Admin\"};\n+\n+    static\n+    {\n+        String[] userItemDesc = {\"Broker Login username\", \"Management Console Read Permission\",\n+                                 \"Management Console Write Permission\", \"Management Console Admin Permission\"};\n+\n+        OpenType[] userItemTypes = new OpenType[4]; // User item types.\n+        userItemTypes[0] = SimpleType.STRING;  // For Username\n+        userItemTypes[1] = SimpleType.BOOLEAN; // For Rights - Read\n+        userItemTypes[2] = SimpleType.BOOLEAN; // For Rights - Write\n+        userItemTypes[3] = SimpleType.BOOLEAN; // For Rights - Admin\n+        String[] userDataIndex = {_userItemNames[0]};\n+\n+        try\n+        {\n+            _userDataType =\n+                    new CompositeType(\"User\", \"User Data\", _userItemNames, userItemDesc, userItemTypes);\n+\n+            _userlistDataType = new TabularType(\"Users\", \"List of users\", _userDataType, userDataIndex);\n+        }\n+        catch (OpenDataException e)\n+        {\n+            _logger.error(\"Tabular data setup for viewing users incorrect.\");\n+            _userlistDataType = null;\n+        }\n+    }\n+\n+\n+    public AMQUserManagementMBean() throws JMException\n+    {\n+        super(UserManagement.class, UserManagement.TYPE);\n+    }\n+\n+    public String getObjectInstanceName()\n+    {\n+        return UserManagement.TYPE;\n+    }\n+\n+    public boolean setPassword(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username,\n+                               @MBeanOperationParameter(name = \"password\", description = \"Password\")String password)\n+    {\n+        try\n+        {\n+            //delegate password changes to the Principal Database\n+            return _principalDatabase.updatePassword(new UsernamePrincipal(username), password);\n+        }\n+        catch (AccountNotFoundException e)\n+        {\n+            _logger.warn(\"Attempt to set password of non-existant user'\" + username + \"'\");\n+            return false;\n+        }\n+    }\n+\n+    public boolean setRights(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username,\n+                             @MBeanOperationParameter(name = \"read\", description = \"Administration read\")boolean read,\n+                             @MBeanOperationParameter(name = \"write\", description = \"Administration write\")boolean write,\n+                             @MBeanOperationParameter(name = \"admin\", description = \"Administration rights\")boolean admin)\n+    {\n+\n+        if (_accessRights.get(username) == null)\n+        {\n+            // If the user doesn't exist in the user rights file check that they at least have an account.\n+            if (_principalDatabase.getUser(username) == null)\n+            {\n+                return false;\n+            }\n+        }\n+\n+        try\n+        {\n+\n+            _accessRightsUpdate.lock();\n+\n+            // Update the access rights\n+            if (admin)\n+            {\n+                _accessRights.put(username, MBeanInvocationHandlerImpl.ADMIN);\n+            }\n+            else\n+            {\n+                if (read | write)\n+                {\n+                    if (read)\n+                    {\n+                        _accessRights.put(username, MBeanInvocationHandlerImpl.READONLY);\n+                    }\n+                    if (write)\n+                    {\n+                        _accessRights.put(username, MBeanInvocationHandlerImpl.READWRITE);\n+                    }\n+                }\n+                else\n+                {\n+                    _accessRights.remove(username);\n+                }\n+            }\n+\n+            saveAccessFile();\n+        }\n+        finally\n+        {\n+            if (_accessRightsUpdate.isHeldByCurrentThread())\n+            {\n+                _accessRightsUpdate.unlock();\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    public boolean createUser(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username,\n+                              @MBeanOperationParameter(name = \"password\", description = \"Password\")String password,\n+                              @MBeanOperationParameter(name = \"read\", description = \"Administration read\")boolean read,\n+                              @MBeanOperationParameter(name = \"write\", description = \"Administration write\")boolean write,\n+                              @MBeanOperationParameter(name = \"admin\", description = \"Administration rights\")boolean admin)\n+    {\n+        if (_principalDatabase.createPrincipal(new UsernamePrincipal(username), password))\n+        {\n+            _accessRights.put(username, \"\");\n+\n+            return setRights(username, read, write, admin);\n+        }\n+\n+        return false;\n+    }\n+\n+    public boolean deleteUser(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username)\n+    {\n+\n+        try\n+        {\n+            if (_principalDatabase.deletePrincipal(new UsernamePrincipal(username)))\n+            {\n+                try\n+                {\n+                    _accessRightsUpdate.lock();\n+\n+                    _accessRights.remove(username);\n+                    saveAccessFile();\n+                }\n+                finally\n+                {\n+                    if (_accessRightsUpdate.isHeldByCurrentThread())\n+                    {\n+                        _accessRightsUpdate.unlock();\n+                    }\n+                }\n+                return true;\n+            }\n+        }\n+        catch (AccountNotFoundException e)\n+        {\n+            _logger.warn(\"Attempt to delete user (\" + username + \") that doesn't exist\");\n+        }\n+\n+        return false;\n+    }\n+\n+    public boolean reloadData()\n+    {\n+        try\n+        {\n+            try\n+            {\n+                loadAccessFile();\n+            }\n+            catch (ConfigurationException e)\n+            {\n+                _logger.info(\"Reload failed due to:\" + e);\n+                return false;\n+            }\n+\n+            // Reload successful\n+            return true;\n+        }\n+        catch (IOException e)\n+        {\n+            _logger.info(\"Reload failed due to:\" + e);\n+            // Reload unsuccessful\n+            return false;\n+        }\n+    }\n+\n+\n+    @MBeanOperation(name = \"viewUsers\", description = \"All users with access rights to the system.\")\n+    public TabularData viewUsers()\n+    {\n+        // Table of users\n+        // Username(string), Access rights Read,Write,Admin(bool,bool,bool)\n+\n+        reloadData();\n+        \n+        if (_userlistDataType == null)\n+        {\n+            _logger.warn(\"TabluarData not setup correctly\");\n+            return null;\n+        }\n+\n+        List<Principal> users = _principalDatabase.getUsers();\n+\n+        TabularDataSupport userList = new TabularDataSupport(_userlistDataType);\n+\n+        try\n+        {\n+            // Create the tabular list of message header contents\n+            for (Principal user : users)\n+            {\n+                // Create header attributes list\n+\n+                String rights = (String) _accessRights.get(user.getName());\n+\n+                Boolean read = false;\n+                Boolean write = false;\n+                Boolean admin = false;\n+\n+                if (rights != null)\n+                {\n+                    read = rights.equals(MBeanInvocationHandlerImpl.READONLY)\n+                           || rights.equals(MBeanInvocationHandlerImpl.READWRITE);\n+                    write = rights.equals(MBeanInvocationHandlerImpl.READWRITE);\n+                    admin = rights.equals(MBeanInvocationHandlerImpl.ADMIN);\n+                }\n+\n+                Object[] itemData = {user.getName(), read, write, admin};\n+                CompositeData messageData = new CompositeDataSupport(_userDataType, _userItemNames, itemData);\n+                userList.put(messageData);\n+            }\n+        }\n+        catch (OpenDataException e)\n+        {\n+            _logger.warn(\"Unable to create user list due to :\" + e);\n+            return null;\n+        }\n+\n+        return userList;\n+    }\n+\n+    /*** Broker Methods **/\n+\n+    /**\n+     * setPrincipalDatabase\n+     *\n+     * @param database set The Database to use for user lookup\n+     */\n+    public void setPrincipalDatabase(PrincipalDatabase database)\n+    {\n+        _principalDatabase = database;\n+    }\n+\n+    /**\n+     * setAccessFile\n+     *\n+     * @param accessFile the file to use for updating.\n+     *\n+     * @throws java.io.IOException If the file cannot be accessed\n+     * @throws org.apache.commons.configuration.ConfigurationException\n+     *                             if checks on the file fail.\n+     */\n+    public void setAccessFile(String accessFile) throws IOException, ConfigurationException\n+    {\n+        _accessFileName = accessFile;\n+\n+        if (_accessFileName != null)\n+        {\n+            loadAccessFile();\n+        }\n+        else\n+        {\n+            _logger.warn(\"Access rights file specified is null. Access rights not changed.\");\n+        }\n+    }\n+\n+    private void loadAccessFile() throws IOException, ConfigurationException\n+    {\n+        try\n+        {\n+            _accessRightsUpdate.lock();\n+\n+            Properties accessRights = new Properties();\n+\n+            File accessFile = new File(_accessFileName);\n+\n+            if (!accessFile.exists())\n+            {\n+                throw new ConfigurationException(\"'\" + _accessFileName + \"' does not exist\");\n+            }\n+\n+            if (!accessFile.canRead())\n+            {\n+                throw new ConfigurationException(\"Cannot read '\" + _accessFileName + \"'.\");\n+            }\n+\n+            if (!accessFile.canWrite())\n+            {\n+                _logger.warn(\"Unable to write to access file '\" + _accessFileName + \"' changes will not be preserved.\");\n+            }\n+\n+            accessRights.load(new FileInputStream(accessFile));\n+            checkAccessRights(accessRights);\n+            setAccessRights(accessRights);\n+        }\n+        finally\n+        {\n+            if (_accessRightsUpdate.isHeldByCurrentThread())\n+            {\n+                _accessRightsUpdate.unlock();\n+            }\n+        }\n+    }\n+\n+    private void checkAccessRights(Properties accessRights)\n+    {\n+        Enumeration values = accessRights.propertyNames();\n+\n+        while (values.hasMoreElements())\n+        {\n+            String user = (String) values.nextElement();\n+\n+            if (_principalDatabase.getUser(user) == null)\n+            {\n+                _logger.warn(\"Access rights contains user '\" + user + \"' but there is no authentication data for that user\");\n+            }\n+        }\n+    }\n+\n+    private void saveAccessFile()\n+    {\n+        try\n+        {\n+            _accessRightsUpdate.lock();\n+            try\n+            {\n+                // remove old temporary file\n+                File tmp = new File(_accessFileName + \".tmp\");\n+                if (tmp.exists())\n+                {\n+                    tmp.delete();\n+                }\n+\n+                //remove old backup\n+                File old = new File(_accessFileName + \".old\");\n+                if (old.exists())\n+                {\n+                    old.delete();\n+                }\n+\n+                // Rename current file\n+                File rights = new File(_accessFileName);\n+                rights.renameTo(old);\n+\n+                FileOutputStream output = new FileOutputStream(tmp);\n+                _accessRights.store(output, \"\");\n+                output.close();\n+\n+                // Rename new file to main file\n+                tmp.renameTo(rights);\n+\n+                // delete tmp\n+                tmp.delete();\n+            }\n+            catch (IOException e)\n+            {\n+                _logger.warn(\"Problem occured saving '\" + _accessFileName + \"' changes may not be preserved. :\" + e);\n+            }\n+        }\n+        finally\n+        {\n+            if (_accessRightsUpdate.isHeldByCurrentThread())\n+            {\n+                _accessRightsUpdate.unlock();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * user=read user=write user=readwrite user=admin\n+     *\n+     * @param accessRights The properties list of access rights to process\n+     */\n+    private void setAccessRights(Properties accessRights)\n+    {\n+        _logger.debug(\"Setting Access Rights:\" + accessRights);\n+        _accessRights = accessRights;\n+        MBeanInvocationHandlerImpl.setAccessRights(_accessRights);\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AMQUserManagementMBean.java",
                "sha": "a43474559d858b537aef55809e574abe138854f3",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AccessManager.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AccessManager.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AccessManager.java",
                "patch": "@@ -20,8 +20,13 @@\n  */\n package org.apache.qpid.server.security.access;\n \n+import java.security.Principal;\n+\n public interface AccessManager\n {\n+    AccessResult isAuthorized(Accessable accessObject, Principal username, AccessRights.Rights rights);\n+\n+    @Deprecated\n     AccessResult isAuthorized(Accessable accessObject, String username);\n \n     String getName();",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AccessManager.java",
                "sha": "d70a6dc8f4a6655de4ec55f03a100a646bb7e086",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AccessManagerImpl.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AccessManagerImpl.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 7,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AccessManagerImpl.java",
                "patch": "@@ -23,13 +23,13 @@\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n import org.apache.qpid.configuration.PropertyUtils;\n-import org.apache.qpid.configuration.PropertyException;\n import org.apache.log4j.Logger;\n \n import java.util.List;\n import java.lang.reflect.Method;\n-import java.lang.reflect.InvocationTargetException;\n+import java.security.Principal;\n \n public class AccessManagerImpl implements AccessManager\n {\n@@ -39,8 +39,13 @@\n \n     public AccessManagerImpl(String name, Configuration hostConfig) throws ConfigurationException\n     {\n-        String accessClass = hostConfig.getString(\"security.access.class\");\n+        if (hostConfig == null)\n+        {\n+            _logger.warn(\"No Configuration specified. Using default access controls for VirtualHost:'\" + name + \"'\");\n+            return;\n+        }\n \n+        String accessClass = hostConfig.getString(\"security.access.class\");\n         if (accessClass == null)\n         {\n             _logger.warn(\"No access control specified. Using default access controls for VirtualHost:'\" + name + \"'\");\n@@ -111,21 +116,35 @@ private void initialiseAccessControl(AccessManager accessManager, Configuration\n             }\n             catch (Exception e)\n             {\n-                throw new ConfigurationException(e.getCause());\n+                ConfigurationException ce = new ConfigurationException(e.getMessage(), e.getCause());\n+                ce.initCause(e);\n+                throw ce;\n             }\n         }\n     }\n \n-\n     public AccessResult isAuthorized(Accessable accessObject, String username)\n+    {\n+        return isAuthorized(accessObject, new UsernamePrincipal(username), AccessRights.Rights.READ);\n+    }\n+\n+    public AccessResult isAuthorized(Accessable accessObject, Principal user, AccessRights.Rights rights)\n     {\n         if (_accessManager == null)\n         {\n-            return ApplicationRegistry.getInstance().getAccessManager().isAuthorized(accessObject, username);\n+            if (ApplicationRegistry.getInstance().getAccessManager() == this)\n+            {\n+                _logger.warn(\"No Default access manager specified DENYING ALL ACCESS\");\n+                return new AccessResult(this, AccessResult.AccessStatus.REFUSED);\n+            }\n+            else\n+            {\n+                return ApplicationRegistry.getInstance().getAccessManager().isAuthorized(accessObject, user, rights);\n+            }\n         }\n         else\n         {\n-            return _accessManager.isAuthorized(accessObject, username);\n+            return _accessManager.isAuthorized(accessObject, user, rights);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AccessManagerImpl.java",
                "sha": "35d036d20f8dfc4113cd4e580424c9a1cedab05a",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AccessRights.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AccessRights.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AccessRights.java",
                "patch": "@@ -0,0 +1,63 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.security.access;\n+\n+public class AccessRights\n+{\n+    public enum Rights\n+    {\n+        ANY,\n+        READ,\n+        WRITE,\n+        READWRITE\n+    }\n+\n+    Rights _right;\n+\n+    public AccessRights(Rights right)\n+    {\n+        _right = right;\n+    }\n+\n+    public boolean allows(Rights rights)\n+    {\n+        switch (_right)\n+        {\n+            case ANY:\n+                return (rights.equals(Rights.WRITE)\n+                        || rights.equals(Rights.READ)\n+                        || rights.equals(Rights.READWRITE)\n+                        || rights.equals(Rights.ANY));\n+            case READ:\n+                return rights.equals(Rights.READ) || rights.equals(Rights.ANY);\n+            case WRITE:\n+                return rights.equals(Rights.WRITE) || rights.equals(Rights.ANY);\n+            case READWRITE:\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+    public Rights getRights()\n+    {\n+        return _right;\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AccessRights.java",
                "sha": "1b79a5a0e0780ee3828e4da538901967da03619f",
                "status": "added"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AllowAll.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AllowAll.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AllowAll.java",
                "patch": "@@ -20,9 +20,16 @@\n  */\n package org.apache.qpid.server.security.access;\n \n+import java.security.Principal;\n+\n public class AllowAll implements AccessManager\n {\n \n+    public AccessResult isAuthorized(Accessable accessObject, Principal username, AccessRights.Rights rights)\n+    {\n+        return new AccessResult(this, AccessResult.AccessStatus.GRANTED);\n+    }\n+\n     public AccessResult isAuthorized(Accessable accessObject, String username)\n     {\n         return new AccessResult(this, AccessResult.AccessStatus.GRANTED);",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/AllowAll.java",
                "sha": "1ddca3a64ec9a5bbd9a1c846aeb00f250ee68f26",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/DenyAll.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/DenyAll.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/DenyAll.java",
                "patch": "@@ -20,8 +20,15 @@\n  */\n package org.apache.qpid.server.security.access;\n \n+import java.security.Principal;\n+\n public class DenyAll implements AccessManager\n {\n+    public AccessResult isAuthorized(Accessable accessObject, Principal username, AccessRights.Rights rights)\n+    {\n+        return new AccessResult(this, AccessResult.AccessStatus.REFUSED);\n+    }\n+\n     public AccessResult isAuthorized(Accessable accessObject, String username)\n     {\n         return new AccessResult(this, AccessResult.AccessStatus.REFUSED);",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/DenyAll.java",
                "sha": "bf40eeba4e066ebdceb55aaf1f3931fbd91aee1d",
                "status": "modified"
            },
            {
                "additions": 183,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/FileAccessManager.java",
                "changes": 183,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/FileAccessManager.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/FileAccessManager.java",
                "patch": "@@ -0,0 +1,183 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ *\n+ */\n+package org.apache.qpid.server.security.access;\n+\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.FileNotFoundException;\n+import java.io.File;\n+import java.util.regex.Pattern;\n+import java.security.Principal;\n+\n+/**\n+ * Represents a user database where the account information is stored in a simple flat file.\n+ *\n+ * The file is expected to be in the form: username:password username1:password1 ... usernamen:passwordn\n+ *\n+ * where a carriage return separates each username/password pair. Passwords are assumed to be in plain text.\n+ */\n+public class FileAccessManager implements AccessManager\n+{\n+    private static final Logger _logger = Logger.getLogger(FileAccessManager.class);\n+\n+    protected File _accessFile;\n+\n+    protected Pattern _regexp = Pattern.compile(\":\");\n+\n+    private static final short USER_INDEX = 0;\n+    private static final short VIRTUALHOST_INDEX = 1;\n+\n+    public void setAccessFile(String accessFile) throws FileNotFoundException\n+    {\n+        File f = new File(accessFile);\n+        _logger.info(\"FileAccessManager using file \" + f.getAbsolutePath());\n+        _accessFile = f;\n+        if (!f.exists())\n+        {\n+            throw new FileNotFoundException(\"Cannot find access file \" + f);\n+        }\n+        if (!f.canRead())\n+        {\n+            throw new FileNotFoundException(\"Cannot read access file \" + f +\n+                                            \". Check permissions.\");\n+        }\n+    }\n+\n+    /**\n+     * Looks up the virtual hosts for a specified user in the access file.\n+     *\n+     * @param user The user to lookup\n+     *\n+     * @return a list of virtualhosts\n+     */\n+    private VirtualHostAccess[] lookupVirtualHost(String user)\n+    {\n+        String[] results = lookup(user, VIRTUALHOST_INDEX);\n+        VirtualHostAccess vhosts[] = new VirtualHostAccess[results.length];\n+\n+        for (int index = 0; index < results.length; index++)\n+        {\n+            vhosts[index] = new VirtualHostAccess(results[index]);\n+        }\n+\n+        return vhosts;\n+    }\n+\n+\n+    private String[] lookup(String user, int index)\n+    {\n+        try\n+        {\n+            BufferedReader reader = null;\n+            try\n+            {\n+                reader = new BufferedReader(new FileReader(_accessFile));\n+                String line;\n+\n+                while ((line = reader.readLine()) != null)\n+                {\n+                    String[] result = _regexp.split(line);\n+                    if (result == null || result.length < (index + 1))\n+                    {\n+                        continue;\n+                    }\n+\n+                    if (user.equals(result[USER_INDEX]))\n+                    {\n+                        return result[index].split(\",\");\n+                    }\n+                }\n+                return null;\n+            }\n+            finally\n+            {\n+                if (reader != null)\n+                {\n+                    reader.close();\n+                }\n+            }\n+        }\n+        catch (IOException ioe)\n+        {\n+            //ignore\n+        }\n+        return null;\n+    }\n+\n+    public AccessResult isAuthorized(Accessable accessObject, String username)\n+    {\n+        return isAuthorized(accessObject, new UsernamePrincipal(username), AccessRights.Rights.READ);\n+    }\n+\n+    public AccessResult isAuthorized(Accessable accessObject, Principal user, AccessRights.Rights rights)\n+    {\n+        if (accessObject instanceof VirtualHost)\n+        {\n+            VirtualHostAccess[] hosts = lookupVirtualHost(user.getName());\n+\n+            if (hosts != null)\n+            {\n+                for (VirtualHostAccess host : hosts)\n+                {\n+                    if (accessObject.getAccessableName().equals(host.getVirtualHost()))\n+                    {\n+                        if (host.getAccessRights().allows(rights))\n+                        {\n+                            return new AccessResult(this, AccessResult.AccessStatus.GRANTED);\n+                        }\n+                        else\n+                        {\n+                            return new AccessResult(this, AccessResult.AccessStatus.REFUSED);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+//        else if (accessObject instanceof AMQQueue)\n+//        {\n+//            String[] queues = lookupQueue(username, ((AMQQueue) accessObject).getVirtualHost());\n+//\n+//            if (queues != null)\n+//            {\n+//                for (String queue : queues)\n+//                {\n+//                    if (accessObject.getAccessableName().equals(queue))\n+//                    {\n+//                        return new AccessResult(this, AccessResult.AccessStatus.GRANTED);\n+//                    }\n+//                }\n+//            }\n+//        }\n+\n+        return new AccessResult(this, AccessResult.AccessStatus.REFUSED);\n+    }\n+\n+    public String getName()\n+    {\n+        return \"FileAccessManager\";\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/FileAccessManager.java",
                "sha": "291bc714edd4bc17918bf496765342b7ff7060e7",
                "status": "added"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/PrincipalDatabaseAccessManager.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/PrincipalDatabaseAccessManager.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 2,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/PrincipalDatabaseAccessManager.java",
                "patch": "@@ -22,8 +22,11 @@\n \n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n import org.apache.log4j.Logger;\n \n+import java.security.Principal;\n+\n public class PrincipalDatabaseAccessManager implements AccessManager\n {\n     private static final Logger _logger = Logger.getLogger(PrincipalDatabaseAccessManager.class);\n@@ -58,15 +61,21 @@ public void setPrincipalDatabase(String database)\n         }\n     }\n \n+\n     public AccessResult isAuthorized(Accessable accessObject, String username)\n+    {\n+        return isAuthorized(accessObject, new UsernamePrincipal(username), AccessRights.Rights.READ);\n+    }\n+\n+    public AccessResult isAuthorized(Accessable accessObject, Principal username, AccessRights.Rights rights)\n     {\n         AccessResult result;\n \n         if (_database == null)\n         {\n             if (_default != null)\n             {\n-                result = _default.isAuthorized(accessObject, username);\n+                result = _default.isAuthorized(accessObject, username, rights);\n             }\n             else\n             {\n@@ -75,7 +84,15 @@ public AccessResult isAuthorized(Accessable accessObject, String username)\n         }\n         else\n         {\n-            result = ((AccessManager) _database).isAuthorized(accessObject, username);\n+            if (!(_database instanceof AccessManager))\n+            {\n+                _logger.warn(\"Specified PrincipalDatabase is not an AccessManager so using default AccessManager\");\n+                result = _default.isAuthorized(accessObject, username, rights);\n+            }\n+            else\n+            {\n+                result = ((AccessManager) _database).isAuthorized(accessObject, username, rights);\n+            }\n         }\n \n         result.addAuthorizer(this);",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/PrincipalDatabaseAccessManager.java",
                "sha": "6ccadb2e7d0ba2b2c884f47d6d5b203bc3b84a45",
                "status": "modified"
            },
            {
                "additions": 111,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/UserManagement.java",
                "changes": 111,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/UserManagement.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/UserManagement.java",
                "patch": "@@ -0,0 +1,111 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.security.access;\n+\n+import org.apache.qpid.server.management.MBeanOperation;\n+import org.apache.qpid.server.management.MBeanOperationParameter;\n+import org.apache.qpid.server.management.MBeanAttribute;\n+import org.apache.qpid.AMQException;\n+\n+import javax.management.openmbean.TabularData;\n+import javax.management.openmbean.CompositeData;\n+import javax.management.JMException;\n+import java.io.IOException;\n+\n+public interface UserManagement\n+{\n+    String TYPE = \"UserManagement\";\n+\n+    //********** Operations *****************//\n+    /**\n+     * set password for user\n+     *\n+     * @param username The username to create\n+     * @param password The password for the user\n+     *\n+     * @return The result of the operation\n+     */\n+    @MBeanOperation(name = \"setPassword\", description = \"Set password for user.\")              \n+    boolean setPassword(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username,\n+                        @MBeanOperationParameter(name = \"password\", description = \"Password\")String password);\n+\n+    /**\n+     * set rights for users with given details\n+     *\n+     * @param username The username to create\n+     * @param read     The set of permission to give the new user\n+     * @param write    The set of permission to give the new user\n+     * @param admin    The set of permission to give the new user\n+     *\n+     * @return The result of the operation\n+     */\n+    @MBeanOperation(name = \"setRights\", description = \"Set access rights for user.\")\n+    boolean setRights(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username,\n+                      @MBeanOperationParameter(name = \"read\", description = \"Administration read\")boolean read,\n+                      @MBeanOperationParameter(name = \"write\", description = \"Administration write\")boolean write,\n+                      @MBeanOperationParameter(name = \"admin\", description = \"Administration rights\")boolean admin);\n+\n+    /**\n+     * Create users with given details\n+     *\n+     * @param username The username to create\n+     * @param password The password for the user\n+     * @param read     The set of permission to give the new user\n+     * @param write    The set of permission to give the new user\n+     * @param admin    The set of permission to give the new user\n+     *\n+     * @return The result of the operation\n+     */\n+    @MBeanOperation(name = \"createUser\", description = \"Create new user from system.\")\n+    boolean createUser(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username,\n+                       @MBeanOperationParameter(name = \"password\", description = \"Password\")String password,\n+                       @MBeanOperationParameter(name = \"read\", description = \"Administration read\")boolean read,\n+                       @MBeanOperationParameter(name = \"write\", description = \"Administration write\")boolean write,\n+                       @MBeanOperationParameter(name = \"admin\", description = \"Administration rights\")boolean admin);\n+\n+    /**\n+     * View users returns all the users that are currently available to the system.\n+     *\n+     * @param username The user to delete\n+     *\n+     * @return The result of the operation\n+     */\n+    @MBeanOperation(name = \"deleteUser\", description = \"Delete user from system.\")\n+    boolean deleteUser(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username);\n+\n+\n+    /**\n+     * Reload the date from disk\n+     *\n+     * @return The result of the operation\n+     */\n+//    @MBeanOperation(name = \"reloadData\", description = \"Reload the authentication file from disk.\")\n+//    boolean reloadData();\n+\n+    /**\n+     * View users returns all the users that are currently available to the system.\n+     *\n+     * @return a table of users data (Username, read, write, admin)\n+     */\n+    @MBeanOperation(name = \"viewUsers\", description = \"All users with access rights to the system.\")\n+    TabularData viewUsers();\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/UserManagement.java",
                "sha": "6381213398cddbd3e99fbdfb0ec534b88a427eca",
                "status": "added"
            },
            {
                "additions": 68,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/VirtualHostAccess.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/VirtualHostAccess.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/VirtualHostAccess.java",
                "patch": "@@ -0,0 +1,68 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.security.access;\n+\n+public class VirtualHostAccess\n+{\n+    private String _vhost;\n+    private AccessRights _rights;\n+\n+    public VirtualHostAccess(String vhostaccess)\n+    {\n+        //format <vhost>(<rights>)\n+        int hostend = vhostaccess.indexOf('(');\n+\n+        if (hostend == -1)\n+        {\n+            throw new IllegalArgumentException(\"VirtualHostAccess format string contains no access _rights\");\n+        }\n+\n+        _vhost = vhostaccess.substring(0, hostend);\n+\n+        String rights = vhostaccess.substring(hostend);\n+\n+        if (rights.indexOf('r') != -1)\n+        {\n+            if (rights.indexOf('w') != -1)\n+            {\n+                _rights = new AccessRights(AccessRights.Rights.READWRITE);\n+            }\n+            else\n+            {\n+                _rights = new AccessRights(AccessRights.Rights.READ);\n+            }\n+        }\n+        else if (rights.indexOf('w') != -1)\n+        {\n+            _rights = new AccessRights(AccessRights.Rights.WRITE);\n+        }\n+    }\n+\n+    public AccessRights getAccessRights()\n+    {\n+        return _rights;\n+    }\n+\n+    public String getVirtualHost()\n+    {\n+        return _vhost;\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/access/VirtualHostAccess.java",
                "sha": "13151a66b8fefbcd7a0d5a737a5d99e3e54125f2",
                "status": "added"
            },
            {
                "additions": 626,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java",
                "changes": 626,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java",
                "patch": "@@ -0,0 +1,626 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.security.auth.database;\n+\n+import org.apache.log4j.Logger;\n+import org.apache.qpid.server.security.auth.sasl.AuthenticationProviderInitialiser;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n+import org.apache.qpid.server.security.auth.sasl.crammd5.CRAMMD5HashedInitialiser;\n+import org.apache.qpid.server.security.access.AMQUserManagementMBean;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.EncoderException;\n+\n+import javax.security.auth.callback.PasswordCallback;\n+import javax.security.auth.login.AccountNotFoundException;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.UnsupportedEncodingException;\n+import java.io.PrintStream;\n+import java.util.regex.Pattern;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.LinkedList;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.security.Principal;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.MessageDigest;\n+\n+/**\n+ * Represents a user database where the account information is stored in a simple flat file.\n+ *\n+ * The file is expected to be in the form: username:password username1:password1 ... usernamen:passwordn\n+ *\n+ * where a carriage return separates each username/password pair. Passwords are assumed to be in plain text.\n+ */\n+public class Base64MD5PasswordFilePrincipalDatabase implements PrincipalDatabase\n+{\n+    private static final Logger _logger = Logger.getLogger(Base64MD5PasswordFilePrincipalDatabase.class);\n+\n+    private File _passwordFile;\n+\n+    private Pattern _regexp = Pattern.compile(\":\");\n+\n+    private Map<String, AuthenticationProviderInitialiser> _saslServers;\n+\n+    AMQUserManagementMBean _mbean;\n+    private static final String DEFAULT_ENCODING = \"utf-8\";\n+    private Map<String, User> _users = new HashMap<String, User>();\n+    private ReentrantLock _userUpdate = new ReentrantLock();\n+\n+    public Base64MD5PasswordFilePrincipalDatabase()\n+    {\n+        _saslServers = new HashMap<String, AuthenticationProviderInitialiser>();\n+\n+        /**\n+         *  Create Authenticators for MD5 Password file.\n+         */\n+\n+        // Accept Plain incomming and hash it for comparison to the file.\n+        CRAMMD5HashedInitialiser cram = new CRAMMD5HashedInitialiser();\n+        cram.initialise(this);\n+        _saslServers.put(cram.getMechanismName(), cram);\n+\n+        //fixme The PDs should setup a PD Mangement MBean\n+//        try\n+//        {\n+//            _mbean = new AMQUserManagementMBean();\n+//            _mbean.setPrincipalDatabase(this);\n+//        }\n+//        catch (JMException e)\n+//        {\n+//            _logger.warn(\"User management disabled as unable to create MBean:\" + e);\n+//        }\n+    }\n+\n+    public void setPasswordFile(String passwordFile) throws IOException\n+    {\n+        File f = new File(passwordFile);\n+        _logger.info(\"PasswordFilePrincipalDatabase using file \" + f.getAbsolutePath());\n+        _passwordFile = f;\n+        if (!f.exists())\n+        {\n+            throw new FileNotFoundException(\"Cannot find password file \" + f);\n+        }\n+        if (!f.canRead())\n+        {\n+            throw new FileNotFoundException(\"Cannot read password file \" + f +\n+                                            \". Check permissions.\");\n+        }\n+\n+        loadPasswordFile();\n+    }\n+\n+    /**\n+     * SASL Callback Mechanism - sets the Password in the PasswordCallback based on the value in the PasswordFile\n+     *\n+     * @param principal The Principal to set the password for\n+     * @param callback  The PasswordCallback to call setPassword on\n+     *\n+     * @throws AccountNotFoundException If the Principal cannont be found in this Database\n+     */\n+    public void setPassword(Principal principal, PasswordCallback callback) throws AccountNotFoundException\n+    {\n+        if (_passwordFile == null)\n+        {\n+            throw new AccountNotFoundException(\"Unable to locate principal since no password file was specified during initialisation\");\n+        }\n+        if (principal == null)\n+        {\n+            throw new IllegalArgumentException(\"principal must not be null\");\n+        }\n+\n+        char[] pwd = lookupPassword(principal.getName());\n+\n+        if (pwd != null)\n+        {\n+            callback.setPassword(pwd);\n+        }\n+        else\n+        {\n+            throw new AccountNotFoundException(\"No account found for principal \" + principal);\n+        }\n+    }\n+\n+    /**\n+     * Used to verify that the presented Password is correct. Currently only used by Management Console\n+     *\n+     * @param principal The principal to authenticate\n+     * @param password  The password to check\n+     *\n+     * @return true if password is correct\n+     *\n+     * @throws AccountNotFoundException if the principal cannot be found\n+     */\n+    public boolean verifyPassword(String principal, String password) throws AccountNotFoundException\n+    {\n+        try\n+        {\n+            char[] pwd = lookupPassword(principal);\n+            byte[] passwordBytes = password.getBytes(DEFAULT_ENCODING);\n+\n+            int index = 0;\n+            boolean verified = true;\n+\n+            while (verified & index < passwordBytes.length)\n+            {\n+                verified = (pwd[index] == (char) passwordBytes[index]);\n+                index++;\n+            }\n+            return verified;\n+        }\n+        catch (UnsupportedEncodingException e)\n+        {\n+            return false;\n+        }\n+    }\n+\n+    public boolean updatePassword(Principal principal, String password) throws AccountNotFoundException\n+    {\n+        User user = _users.get(principal.getName());\n+\n+        if (user == null)\n+        {\n+            throw new AccountNotFoundException(principal.getName());\n+        }\n+\n+        try\n+        {\n+\n+            char[] passwd = convertPassword(password);\n+\n+            try\n+            {\n+                _userUpdate.lock();\n+                user.setPassword(passwd);\n+\n+                try\n+                {\n+                    savePasswordFile();\n+                }\n+                catch (IOException e)\n+                {\n+                    _logger.error(\"Unable to save password file, password change for user'\"\n+                                  + principal + \"' will revert at restart\");\n+                    return false;\n+                }\n+                return true;\n+            }\n+            finally\n+            {\n+                if (_userUpdate.isHeldByCurrentThread())\n+                {\n+                    _userUpdate.unlock();\n+                }\n+            }\n+        }\n+        catch (UnsupportedEncodingException e)\n+        {\n+            return false;\n+        }\n+    }\n+\n+    private char[] convertPassword(String password) throws UnsupportedEncodingException\n+    {\n+        byte[] passwdBytes = password.getBytes(DEFAULT_ENCODING);\n+\n+        char[] passwd = new char[passwdBytes.length];\n+\n+        int index = 0;\n+\n+        for (byte b : passwdBytes)\n+        {\n+            passwd[index++] = (char) b;\n+        }\n+\n+        return passwd;\n+    }\n+\n+    public boolean createPrincipal(Principal principal, String password)\n+    {\n+        if (_users.get(principal.getName()) != null)\n+        {\n+            return false;\n+        }\n+\n+        User user;\n+        try\n+        {\n+            user = new User(principal.getName(), convertPassword(password));\n+        }\n+        catch (UnsupportedEncodingException e)\n+        {\n+            _logger.warn(\"Unable to encode password:\" + e);\n+            return false;\n+        }\n+\n+        try\n+        {\n+            _userUpdate.lock();\n+            _users.put(user.getName(), user);\n+\n+            try\n+            {\n+                savePasswordFile();\n+                return true;\n+            }\n+            catch (IOException e)\n+            {\n+                return false;\n+            }\n+\n+        }\n+        finally\n+        {\n+            if (_userUpdate.isHeldByCurrentThread())\n+            {\n+                _userUpdate.unlock();\n+            }\n+        }\n+    }\n+\n+    public boolean deletePrincipal(Principal principal) throws AccountNotFoundException\n+    {\n+        User user = _users.get(principal.getName());\n+\n+        if (user == null)\n+        {\n+            throw new AccountNotFoundException(principal.getName());\n+        }\n+\n+        try\n+        {\n+            _userUpdate.lock();\n+            user.delete();\n+\n+            try\n+            {\n+                savePasswordFile();\n+            }\n+            catch (IOException e)\n+            {\n+                _logger.warn(\"Unable to remove user '\" + user.getName() + \"' from password file.\");\n+                return false;\n+            }\n+\n+            _users.remove(user.getName());\n+        }\n+        finally\n+        {\n+            if (_userUpdate.isHeldByCurrentThread())\n+            {\n+                _userUpdate.unlock();\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+\n+    public Map<String, AuthenticationProviderInitialiser> getMechanisms()\n+    {\n+        return _saslServers;\n+    }\n+\n+    public List<Principal> getUsers()\n+    {\n+        return new LinkedList<Principal>(_users.values());\n+    }\n+\n+    public Principal getUser(String username)\n+    {\n+        if (_users.containsKey(username))\n+        {\n+            return new UsernamePrincipal(username);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Looks up the password for a specified user in the password file. Note this code is <b>not</b> secure since it\n+     * creates strings of passwords. It should be modified to create only char arrays which get nulled out.\n+     *\n+     * @param name The principal name to lookup\n+     *\n+     * @return a char[] for use in SASL.\n+     */\n+    private char[] lookupPassword(String name)\n+    {\n+        User user = _users.get(name);\n+        if (user == null)\n+        {\n+            return null;\n+        }\n+        else\n+        {\n+            return user.getPassword();\n+        }\n+    }\n+\n+\n+    private void loadPasswordFile() throws IOException\n+    {\n+        try\n+        {\n+            _userUpdate.lock();\n+            _users.clear();\n+\n+            BufferedReader reader = null;\n+            try\n+            {\n+                reader = new BufferedReader(new FileReader(_passwordFile));\n+                String line;\n+\n+                while ((line = reader.readLine()) != null)\n+                {\n+                    String[] result = _regexp.split(line);\n+                    if (result == null || result.length < 2 || result[0].startsWith(\"#\"))\n+                    {\n+                        continue;\n+                    }\n+\n+                    User user = new User(result);\n+                    _logger.info(\"Created user:\" + user);\n+                    _users.put(user.getName(), user);\n+                }\n+            }\n+            finally\n+            {\n+                if (reader != null)\n+                {\n+                    reader.close();\n+                }\n+            }\n+        }\n+        finally\n+        {\n+            if (_userUpdate.isHeldByCurrentThread())\n+            {\n+                _userUpdate.unlock();\n+            }\n+        }\n+    }\n+\n+    private void savePasswordFile() throws IOException\n+    {\n+        try\n+        {\n+            _userUpdate.lock();\n+\n+            BufferedReader reader = null;\n+            PrintStream writer = null;\n+            File tmp = new File(_passwordFile.getAbsolutePath() + \".tmp\");\n+            if (tmp.exists())\n+            {\n+                tmp.delete();\n+            }\n+            try\n+            {\n+                writer = new PrintStream(tmp);\n+                reader = new BufferedReader(new FileReader(_passwordFile));\n+                String line;\n+\n+                while ((line = reader.readLine()) != null)\n+                {\n+                    String[] result = _regexp.split(line);\n+                    if (result == null || result.length < 2 || result[0].startsWith(\"#\"))\n+                    {\n+                        writer.write(line.getBytes(DEFAULT_ENCODING));\n+                        continue;\n+                    }\n+\n+                    User user = _users.get(result[0]);\n+\n+                    if (user == null)\n+                    {\n+                        writer.write(line.getBytes(DEFAULT_ENCODING));\n+                        writer.println();\n+                    }\n+                    else if (!user.isDeleted())\n+                    {\n+                        if (!user.isModified())\n+                        {\n+                            writer.write(line.getBytes(DEFAULT_ENCODING));\n+                            writer.println();\n+                        }\n+                        else\n+                        {\n+                            try\n+                            {\n+                                byte[] encodedPassword = user.getEncodePassword();\n+\n+                                writer.write((user.getName() + \":\").getBytes(DEFAULT_ENCODING));\n+                                writer.write(encodedPassword);\n+                                writer.println();\n+\n+                                user.saved();\n+                            }\n+                            catch (Exception e)\n+                            {\n+                                _logger.warn(\"Unable to encode new password reverting to old password.\");\n+                                writer.write(line.getBytes(DEFAULT_ENCODING));\n+                                writer.println();\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                for (User user : _users.values())\n+                {\n+                    if (user.isModified())\n+                    {\n+                        byte[] encodedPassword;\n+                        try\n+                        {\n+                            encodedPassword = user.getEncodePassword();\n+                            writer.write((user.getName() + \":\").getBytes(DEFAULT_ENCODING));\n+                            writer.write(encodedPassword);\n+                            writer.println();\n+                            user.saved();\n+                        }\n+                        catch (Exception e)\n+                        {\n+                            _logger.warn(\"Unable to get Encoded password for user'\" + user.getName() + \"' password not saved\");\n+                        }\n+                    }\n+                }\n+            }\n+            finally\n+            {\n+                if (reader != null)\n+                {\n+                    reader.close();\n+                }\n+\n+                if (writer != null)\n+                {\n+                    writer.close();\n+                }\n+\n+                // Swap temp file to main password file.\n+                File old = new File(_passwordFile.getAbsoluteFile() + \".old\");\n+                if (old.exists())\n+                {\n+                    old.delete();\n+                }\n+                _passwordFile.renameTo(old);\n+                tmp.renameTo(_passwordFile);\n+                tmp.delete();\n+            }\n+        }\n+        finally\n+        {\n+            if (_userUpdate.isHeldByCurrentThread())\n+            {\n+                _userUpdate.unlock();\n+            }\n+        }\n+    }\n+\n+    private class User implements Principal\n+    {\n+        String _name;\n+        char[] _password;\n+        byte[] _encodedPassword = null;\n+        private boolean _modified = false;\n+        private boolean _deleted = false;\n+\n+        User(String[] data) throws UnsupportedEncodingException\n+        {\n+            if (data.length != 2)\n+            {\n+                throw new IllegalArgumentException(\"User Data should be lenght 2, username, password\");\n+            }\n+\n+            _name = data[0];\n+\n+            byte[] encoded_password = data[1].getBytes(DEFAULT_ENCODING);\n+\n+            Base64 b64 = new Base64();\n+            byte[] decoded = b64.decode(encoded_password);\n+\n+            _encodedPassword = encoded_password;\n+\n+            _password = new char[decoded.length];\n+\n+            int index = 0;\n+            for (byte c : decoded)\n+            {\n+                _password[index++] = (char) c;\n+            }\n+        }\n+\n+        public User(String name, char[] password)\n+        {\n+            _name = name;\n+            setPassword(password);\n+        }\n+\n+        public String getName()\n+        {\n+            return _name;\n+        }\n+\n+        public String toString()\n+        {\n+            if (_logger.isDebugEnabled())\n+            {\n+                return getName() + ((_encodedPassword == null) ? \"\" : \":\" + new String(_encodedPassword));\n+            }\n+            else\n+            {\n+                return _name;\n+            }\n+        }\n+\n+        char[] getPassword()\n+        {\n+            return _password;\n+        }\n+\n+        void setPassword(char[] password)\n+        {\n+            _password = password;\n+            _modified = true;\n+            _encodedPassword = null;\n+        }\n+\n+\n+        byte[] getEncodePassword() throws EncoderException, UnsupportedEncodingException, NoSuchAlgorithmException\n+        {\n+            if (_encodedPassword == null)\n+            {\n+                encodePassword();\n+            }\n+            return _encodedPassword;\n+        }\n+\n+        private void encodePassword() throws EncoderException, UnsupportedEncodingException, NoSuchAlgorithmException\n+        {\n+            Base64 b64 = new Base64();\n+            _encodedPassword = b64.encode(new String(_password).getBytes(DEFAULT_ENCODING));\n+        }\n+\n+        public boolean isModified()\n+        {\n+            return _modified;\n+        }\n+\n+        public boolean isDeleted()\n+        {\n+            return _deleted;\n+        }\n+\n+        public void delete()\n+        {\n+            _deleted = true;\n+        }\n+\n+        public void saved()\n+        {\n+            _modified = false;\n+        }\n+\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java",
                "sha": "956db64d90fdc61309219e77270427f933d8d439",
                "status": "added"
            },
            {
                "additions": 116,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/ConfigurationFilePrincipalDatabaseManager.java",
                "changes": 144,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/ConfigurationFilePrincipalDatabaseManager.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 28,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/ConfigurationFilePrincipalDatabaseManager.java",
                "patch": "@@ -1,38 +1,46 @@\n /*\n- *  Licensed to the Apache Software Foundation (ASF) under one\n- *  or more contributor license agreements.  See the NOTICE file\n- *  distributed with this work for additional information\n- *  regarding copyright ownership.  The ASF licenses this file\n- *  to you under the Apache License, Version 2.0 (the\n- *  \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *  Unless required by applicable law or agreed to in writing,\n- *  software distributed under the License is distributed on an\n- *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- *  KIND, either express or implied.  See the License for the\n- *  specific language governing permissions and limitations\n- *  under the License.\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.server.security.auth.database;\n \n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.ConfigurationException;\n+\n+import org.apache.log4j.Logger;\n+\n+import org.apache.qpid.configuration.PropertyUtils;\n+import org.apache.qpid.configuration.PropertyException;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n-import org.apache.qpid.server.security.auth.database.PrincipalDatabaseManager;\n import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n-import org.apache.qpid.configuration.PropertyUtils;\n-import org.apache.log4j.Logger;\n+import org.apache.qpid.server.security.auth.database.PrincipalDatabaseManager;\n+import org.apache.qpid.server.security.access.AMQUserManagementMBean;\n+import org.apache.qpid.AMQException;\n \n-import java.util.Map;\n-import java.util.List;\n-import java.util.HashMap;\n-import java.lang.reflect.Method;\n-import java.io.FileNotFoundException;\n+import javax.management.JMException;\n \n public class ConfigurationFilePrincipalDatabaseManager implements PrincipalDatabaseManager\n {\n@@ -80,18 +88,21 @@ public ConfigurationFilePrincipalDatabaseManager() throws Exception\n             initialisePrincipalDatabase((PrincipalDatabase) o, config, i);\n \n             String name = databaseNames.get(i);\n-            if (name == null || name.length() == 0)\n+            if ((name == null) || (name.length() == 0))\n             {\n                 throw new Exception(\"Principal database names must have length greater than or equal to one character\");\n             }\n+\n             PrincipalDatabase pd = databases.get(name);\n             if (pd != null)\n             {\n                 throw new Exception(\"Duplicate principal database name not provided\");\n             }\n+\n             _logger.info(\"Initialised principal database '\" + name + \"' successfully\");\n             databases.put(name, (PrincipalDatabase) o);\n         }\n+\n         return databases;\n     }\n \n@@ -104,14 +115,16 @@ private void initialisePrincipalDatabase(PrincipalDatabase principalDatabase, Co\n         for (int i = 0; i < argumentNames.size(); i++)\n         {\n             String argName = argumentNames.get(i);\n-            if (argName == null || argName.length() == 0)\n+            if ((argName == null) || (argName.length() == 0))\n             {\n                 throw new ConfigurationException(\"Argument names must have length >= 1 character\");\n             }\n+\n             if (Character.isLowerCase(argName.charAt(0)))\n             {\n                 argName = Character.toUpperCase(argName.charAt(0)) + argName.substring(1);\n             }\n+\n             String methodName = \"set\" + argName;\n             Method method = null;\n             try\n@@ -125,9 +138,10 @@ private void initialisePrincipalDatabase(PrincipalDatabase principalDatabase, Co\n \n             if (method == null)\n             {\n-                throw new ConfigurationException(\"No method \" + methodName + \" found in class \" + principalDatabase.getClass() +\n-                                                 \" hence unable to configure principal database. The method must be public and \" +\n-                                                 \"have a single String argument with a void return type\");\n+                throw new ConfigurationException(\"No method \" + methodName + \" found in class \"\n+                                                 + principalDatabase.getClass()\n+                                                 + \" hence unable to configure principal database. The method must be public and \"\n+                                                 + \"have a single String argument with a void return type\");\n             }\n \n             try\n@@ -136,7 +150,14 @@ private void initialisePrincipalDatabase(PrincipalDatabase principalDatabase, Co\n             }\n             catch (Exception ite)\n             {\n-                throw new ConfigurationException(ite.getCause());\n+                if (ite instanceof ConfigurationException)\n+                {\n+                    throw(ConfigurationException) ite;\n+                }\n+                else\n+                {\n+                    throw new ConfigurationException(ite.getMessage(), ite);\n+                }\n             }\n         }\n     }\n@@ -145,4 +166,71 @@ private void initialisePrincipalDatabase(PrincipalDatabase principalDatabase, Co\n     {\n         return _databases;\n     }\n+\n+    public void initialiseManagement(Configuration config) throws ConfigurationException\n+    {\n+        try\n+        {\n+            AMQUserManagementMBean _mbean = new AMQUserManagementMBean();\n+\n+            String baseSecurity = \"security.jmx\";\n+            List<String> principalDBs = config.getList(baseSecurity + \".principal-database\");\n+\n+            if (principalDBs.size() == 0)\n+            {\n+                throw new ConfigurationException(\"No principal-database specified for jmx security(\" + baseSecurity + \".principal-database)\");\n+            }\n+\n+            String databaseName = principalDBs.get(0);\n+\n+            PrincipalDatabase database = getDatabases().get(databaseName);\n+\n+            if (database == null)\n+            {\n+                throw new ConfigurationException(\"Principal-database '\" + databaseName + \"' not found\");\n+            }\n+\n+            _mbean.setPrincipalDatabase(database);\n+\n+            List<String> jmxaccesslist = config.getList(baseSecurity + \".access\");\n+\n+            if (jmxaccesslist.size() == 0)\n+            {\n+                throw new ConfigurationException(\"No access control files specified for jmx security(\" + baseSecurity + \".access)\");\n+            }\n+\n+            String jmxaccesssFile = null;\n+            \n+            try\n+            {\n+                jmxaccesssFile = PropertyUtils.replaceProperties(jmxaccesslist.get(0));\n+            }\n+            catch (PropertyException e)\n+            {\n+                throw new ConfigurationException(\"Unable to parse access control filename '\" + jmxaccesssFile + \"'\");\n+            }\n+\n+            try\n+            {\n+                _mbean.setAccessFile(jmxaccesssFile);\n+            }\n+            catch (IOException e)\n+            {\n+                _logger.warn(\"Unable to load access file:\" + jmxaccesssFile);\n+            }\n+\n+            try\n+            {\n+                _mbean.register();\n+            }\n+            catch (AMQException e)\n+            {\n+                _logger.warn(\"Unable to register user management MBean\");\n+            }\n+        }\n+        catch (JMException e)\n+        {\n+            _logger.warn(\"User management disabled as unable to create MBean:\" + e);\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/ConfigurationFilePrincipalDatabaseManager.java",
                "sha": "2d3f5e5131a36327e1561529e6f4fdbdcb6a6742",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/qpid/blob/c40abb2580b2da657249b74a202d75eaee3362e2/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/MD5PasswordFilePrincipalDatabase.java",
                "changes": 160,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/MD5PasswordFilePrincipalDatabase.java?ref=c40abb2580b2da657249b74a202d75eaee3362e2",
                "deletions": 160,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/MD5PasswordFilePrincipalDatabase.java",
                "patch": "@@ -1,160 +0,0 @@\n-/*\n- *  Licensed to the Apache Software Foundation (ASF) under one\n- *  or more contributor license agreements.  See the NOTICE file\n- *  distributed with this work for additional information\n- *  regarding copyright ownership.  The ASF licenses this file\n- *  to you under the Apache License, Version 2.0 (the\n- *  \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing,\n- *  software distributed under the License is distributed on an\n- *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- *  KIND, either express or implied.  See the License for the\n- *  specific language governing permissions and limitations\n- *  under the License.    \n- *\n- * \n- */\n-package org.apache.qpid.server.security.auth.database;\n-\n-import org.apache.log4j.Logger;\n-import org.apache.qpid.server.security.auth.sasl.AuthenticationProviderInitialiser;\n-import org.apache.qpid.server.security.auth.sasl.crammd5.CRAMMD5Initialiser;\n-import org.apache.qpid.server.security.auth.sasl.plain.PlainInitialiser;\n-\n-import javax.security.auth.callback.PasswordCallback;\n-import javax.security.auth.login.AccountNotFoundException;\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.io.BufferedReader;\n-import java.io.FileReader;\n-import java.util.regex.Pattern;\n-import java.util.Map;\n-import java.util.HashMap;\n-import java.security.Principal;\n-\n-/**\n- * Represents a user database where the account information is stored in a simple flat file.\n- *\n- * The file is expected to be in the form: username:password username1:password1 ... usernamen:passwordn\n- *\n- * where a carriage return separates each username/password pair. Passwords are assumed to be in plain text.\n- */\n-public class MD5PasswordFilePrincipalDatabase implements PrincipalDatabase\n-{\n-    private static final Logger _logger = Logger.getLogger(MD5PasswordFilePrincipalDatabase.class);\n-\n-    private File _passwordFile;\n-\n-    private Pattern _regexp = Pattern.compile(\":\");\n-\n-    private Map<String, AuthenticationProviderInitialiser> _saslServers;\n-\n-    public MD5PasswordFilePrincipalDatabase()\n-    {\n-        _saslServers = new HashMap<String, AuthenticationProviderInitialiser>();\n-\n-        /**\n-         *  Create Authenticators for MD5 Password file.\n-         */\n-\n-        //  Accept MD5 incomming and use plain comparison with the file\n-        PlainInitialiser cram = new PlainInitialiser();\n-        cram.initialise(this);\n-        // Accept Plain incomming and hash it for comparison to the file.\n-        CRAMMD5Initialiser plain = new CRAMMD5Initialiser();\n-        plain.initialise(this,CRAMMD5Initialiser.HashDirection.INCOMMING);        \n-\n-        _saslServers.put(plain.getMechanismName(), cram);\n-        _saslServers.put(cram.getMechanismName(), plain);\n-    }\n-\n-    public void setPasswordFile(String passwordFile) throws FileNotFoundException\n-    {\n-        File f = new File(passwordFile);\n-        _logger.info(\"PasswordFilePrincipalDatabase using file \" + f.getAbsolutePath());\n-        _passwordFile = f;\n-        if (!f.exists())\n-        {\n-            throw new FileNotFoundException(\"Cannot find password file \" + f);\n-        }\n-        if (!f.canRead())\n-        {\n-            throw new FileNotFoundException(\"Cannot read password file \" + f +\n-                                            \". Check permissions.\");\n-        }\n-    }\n-\n-    public void setPassword(Principal principal, PasswordCallback callback) throws IOException,\n-                                                                                   AccountNotFoundException\n-    {\n-        if (_passwordFile == null)\n-        {\n-            throw new AccountNotFoundException(\"Unable to locate principal since no password file was specified during initialisation\");\n-        }\n-        if (principal == null)\n-        {\n-            throw new IllegalArgumentException(\"principal must not be null\");\n-        }\n-        char[] pwd = lookupPassword(principal.getName());\n-        if (pwd != null)\n-        {\n-            callback.setPassword(pwd);\n-        }\n-        else\n-        {\n-            throw new AccountNotFoundException(\"No account found for principal \" + principal);\n-        }\n-    }\n-\n-    public Map<String, AuthenticationProviderInitialiser> getMechanisms()\n-    {\n-        return _saslServers;\n-    }\n-\n-    /**\n-     * Looks up the password for a specified user in the password file. Note this code is <b>not</b> secure since it\n-     * creates strings of passwords. It should be modified to create only char arrays which get nulled out.\n-     *\n-     * @param name\n-     *\n-     * @return\n-     *\n-     * @throws java.io.IOException\n-     */\n-    private char[] lookupPassword(String name) throws IOException\n-    {\n-        BufferedReader reader = null;\n-        try\n-        {\n-            reader = new BufferedReader(new FileReader(_passwordFile));\n-            String line;\n-\n-            while ((line = reader.readLine()) != null)\n-            {\n-                String[] result = _regexp.split(line);\n-                if (result == null || result.length < 2)\n-                {\n-                    continue;\n-                }\n-\n-                if (name.equals(result[0]))\n-                {\n-                    return result[1].toCharArray();\n-                }\n-            }\n-            return null;\n-        }\n-        finally\n-        {\n-            if (reader != null)\n-            {\n-                reader.close();\n-            }\n-        }\n-    }\n-}",
                "raw_url": "https://github.com/apache/qpid/raw/c40abb2580b2da657249b74a202d75eaee3362e2/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/MD5PasswordFilePrincipalDatabase.java",
                "sha": "c24a5f21e94f708e72f267ac5314555d802ccae9",
                "status": "removed"
            },
            {
                "additions": 88,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java",
                "changes": 92,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 4,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java",
                "patch": "@@ -21,8 +21,8 @@\n package org.apache.qpid.server.security.auth.database;\n \n import org.apache.log4j.Logger;\n-import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n import org.apache.qpid.server.security.auth.sasl.AuthenticationProviderInitialiser;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n import org.apache.qpid.server.security.auth.sasl.amqplain.AmqPlainInitialiser;\n import org.apache.qpid.server.security.auth.sasl.crammd5.CRAMMD5Initialiser;\n import org.apache.qpid.server.security.auth.sasl.plain.PlainInitialiser;\n@@ -34,9 +34,11 @@\n import java.io.IOException;\n import java.io.BufferedReader;\n import java.io.FileReader;\n+import java.io.UnsupportedEncodingException;\n import java.util.regex.Pattern;\n import java.util.Map;\n import java.util.HashMap;\n+import java.util.List;\n import java.security.Principal;\n \n /**\n@@ -119,21 +121,103 @@ public void setPassword(Principal principal, PasswordCallback callback) throws I\n         }\n     }\n \n+    public boolean verifyPassword(String principal, String password) throws AccountNotFoundException\n+    {\n+        try\n+        {\n+            char[] pwd = lookupPassword(principal);\n+\n+            return compareCharArray(pwd, convertPassword(password));\n+        }\n+        catch (IOException e)\n+        {\n+            return false;\n+        }\n+    }\n+\n+    private char[] convertPassword(String password) throws UnsupportedEncodingException\n+    {\n+        byte[] passwdBytes = password.getBytes(\"utf-8\");\n+\n+        char[] passwd = new char[passwdBytes.length];\n+\n+        int index = 0;\n+\n+        for (byte b : passwdBytes)\n+        {\n+            passwd[index++] = (char) b;\n+        }\n+\n+        return passwd;\n+    }\n+\n+    public boolean updatePassword(Principal principal, String password) throws AccountNotFoundException\n+    {\n+        return false; // updates denied\n+    }\n+\n+    public boolean createPrincipal(Principal principal, String password)\n+    {\n+        return false; // updates denied\n+    }\n+\n+    public boolean deletePrincipal(Principal principal) throws AccountNotFoundException\n+    {\n+        return false; // updates denied\n+    }\n+\n     public Map<String, AuthenticationProviderInitialiser> getMechanisms()\n     {\n         return _saslServers;\n     }\n \n+    public List<Principal> getUsers()\n+    {\n+        return null; //todo\n+    }\n+\n+    public Principal getUser(String username)\n+    {\n+        try\n+        {\n+            if (lookupPassword(username) != null)\n+            {\n+                return new UsernamePrincipal(username);\n+            }\n+        }\n+        catch (IOException e)\n+        {\n+            //fall through to null return\n+        }\n+        return null;\n+    }\n+\n+    private boolean compareCharArray(char[] a, char[] b)\n+    {\n+        boolean equal = false;\n+        if (a.length == b.length)\n+        {\n+            equal = true;\n+            int index = 0;\n+            while (equal && index < a.length)\n+            {\n+                equal = a[index] == b[index];\n+                index++;\n+            }\n+        }\n+        return equal;\n+    }\n+\n \n     /**\n      * Looks up the password for a specified user in the password file. Note this code is <b>not</b> secure since it\n      * creates strings of passwords. It should be modified to create only char arrays which get nulled out.\n      *\n-     * @param name\n+     * @param name the name of the principal to lookup\n      *\n-     * @return\n+     * @return char[] of the password\n      *\n-     * @throws java.io.IOException\n+     * @throws java.io.IOException whilst accessing the file\n      */\n     private char[] lookupPassword(String name) throws IOException\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java",
                "sha": "3f6794aaaf9ebf246557095b3fa9353dd2d33450",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordVhostFilePrincipalDatabase.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordVhostFilePrincipalDatabase.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 12,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordVhostFilePrincipalDatabase.java",
                "patch": "@@ -20,26 +20,17 @@\n  */\n package org.apache.qpid.server.security.auth.database;\n \n-import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n-import org.apache.qpid.server.security.auth.sasl.AuthenticationProviderInitialiser;\n-import org.apache.qpid.server.security.auth.sasl.crammd5.CRAMMD5Initialiser;\n-import org.apache.qpid.server.security.auth.sasl.plain.PlainInitialiser;\n import org.apache.qpid.server.security.access.AccessManager;\n import org.apache.qpid.server.security.access.AccessResult;\n import org.apache.qpid.server.security.access.Accessable;\n+import org.apache.qpid.server.security.access.AccessRights;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.log4j.Logger;\n \n-import javax.security.auth.callback.PasswordCallback;\n-import javax.security.auth.login.AccountNotFoundException;\n-import java.io.File;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.BufferedReader;\n import java.io.FileReader;\n-import java.util.regex.Pattern;\n-import java.util.Map;\n-import java.util.HashMap;\n import java.security.Principal;\n \n /**\n@@ -103,9 +94,15 @@\n \n     public AccessResult isAuthorized(Accessable accessObject, String username)\n     {\n+        return isAuthorized(accessObject, new UsernamePrincipal(username), AccessRights.Rights.READ);\n+    }\n+\n+    public AccessResult isAuthorized(Accessable accessObject, Principal user, AccessRights.Rights rights)\n+    {\n+\n         if (accessObject instanceof VirtualHost)\n         {\n-            String[] hosts = lookupVirtualHost(username);\n+            String[] hosts = lookupVirtualHost(user.getName());\n \n             if (hosts != null)\n             {\n@@ -126,4 +123,5 @@ public String getName()\n     {\n         return \"PlainPasswordVhostFile\";\n     }\n+\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordVhostFilePrincipalDatabase.java",
                "sha": "598f8f8b4c37c37fff08b1b31649859c28c7f310",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabase.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabase.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabase.java",
                "patch": "@@ -23,8 +23,10 @@\n import org.apache.qpid.server.security.auth.sasl.AuthenticationProviderInitialiser;\n \n import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n import java.security.Principal;\n import java.util.Map;\n+import java.util.List;\n \n import javax.security.auth.callback.PasswordCallback;\n import javax.security.auth.login.AccountNotFoundException;\n@@ -46,5 +48,53 @@\n     void setPassword(Principal principal, PasswordCallback callback)\n             throws IOException, AccountNotFoundException;\n \n+     /**\n+     * Used to verify that the presented Password is correct. Currently only used by Management Console\n+     * @param principal The principal to authenticate\n+     * @param password The password to check\n+     * @return true if password is correct\n+     * @throws AccountNotFoundException if the principal cannot be found\n+     */\n+    boolean verifyPassword(String principal, String password)\n+            throws AccountNotFoundException;\n+\n+    /**\n+     * Update(Change) the password for the given principal\n+     * @param principal Who's password is to be changed\n+     * @param password The new password to use\n+     * @return True if change was successful\n+     * @throws AccountNotFoundException If the given principal doesn't exist in the Database\n+     */\n+    boolean updatePassword(Principal principal, String password)\n+            throws AccountNotFoundException;\n+\n+    /**\n+     * Create a new principal in the database\n+     * @param principal The principal to create\n+     * @param password The password to set for the principal\n+     * @return True on a successful creation\n+     */\n+    boolean createPrincipal(Principal principal, String password);\n+\n+    /**\n+     * Delete a principal\n+     * @param principal The principal to delete\n+     * @return True on a successful creation\n+     * @throws AccountNotFoundException If the given principal doesn't exist in the Database\n+     */\n+    boolean deletePrincipal(Principal principal)\n+            throws AccountNotFoundException;\n+\n+    /**\n+     * Get the principal from the database with the given username\n+     * @param username of the principal to lookup\n+     * @return The Principal object for the given username or null if not found.\n+     */\n+    Principal getUser(String username);\n+\n+\n     public Map<String, AuthenticationProviderInitialiser> getMechanisms();\n+\n+\n+    List<Principal> getUsers();\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabase.java",
                "sha": "8073fcc3c6045a17024d6855f0c8e3d804f65e62",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabaseManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabaseManager.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabaseManager.java",
                "patch": "@@ -21,10 +21,14 @@\n package org.apache.qpid.server.security.auth.database;\n \n import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n \n import java.util.Map;\n \n public interface PrincipalDatabaseManager\n {\n     public Map<String, PrincipalDatabase> getDatabases();\n+\n+    public void initialiseManagement(Configuration config) throws ConfigurationException;\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabaseManager.java",
                "sha": "2c553ae76ac507dfbd2ef3e83d753c4b5bc2bf57",
                "status": "modified"
            },
            {
                "additions": 82,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java",
                "changes": 82,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java",
                "patch": "@@ -21,6 +21,7 @@\n package org.apache.qpid.server.security.auth.database;\n \n import org.apache.qpid.server.security.auth.sasl.AuthenticationProviderInitialiser;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n import org.apache.qpid.server.security.auth.sasl.crammd5.CRAMMD5Initialiser;\n import org.apache.qpid.server.security.auth.sasl.plain.PlainInitialiser;\n \n@@ -29,8 +30,10 @@\n import java.util.Properties;\n import java.util.Map;\n import java.util.HashMap;\n+import java.util.List;\n import java.security.Principal;\n import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n \n public class PropertiesPrincipalDatabase implements PrincipalDatabase\n {\n@@ -76,8 +79,87 @@ public void setPassword(Principal principal, PasswordCallback callback) throws I\n         }\n     }\n \n+    public boolean verifyPassword(String principal, String password) throws AccountNotFoundException\n+    {\n+        char[] pwd = _users.getProperty(principal).toCharArray();\n+\n+        try\n+        {\n+            return compareCharArray(pwd, convertPassword(password));\n+        }\n+        catch (UnsupportedEncodingException e)\n+        {\n+            return false;\n+        }\n+    }\n+\n+    public boolean updatePassword(Principal principal, String password) throws AccountNotFoundException\n+    {\n+        return false; // updates denied\n+    }\n+\n+    public boolean createPrincipal(Principal principal, String password)\n+    {\n+        return false; // updates denied\n+    }\n+\n+    public boolean deletePrincipal(Principal principal) throws AccountNotFoundException\n+    {\n+        return false; // updates denied\n+    }\n+\n+    private boolean compareCharArray(char[] a, char[] b)\n+    {\n+        boolean equal = false;\n+        if (a.length == b.length)\n+        {\n+            equal = true;\n+            int index = 0;\n+            while (equal && index < a.length)\n+            {\n+                equal = a[index] == b[index];\n+                index++;\n+            }\n+        }\n+        return equal;\n+    }\n+\n+    private char[] convertPassword(String password) throws UnsupportedEncodingException\n+    {\n+        byte[] passwdBytes = password.getBytes(\"utf-8\");\n+\n+        char[] passwd = new char[passwdBytes.length];\n+\n+        int index = 0;\n+\n+        for (byte b : passwdBytes)\n+        {\n+            passwd[index++] = (char) b;\n+        }\n+\n+        return passwd;\n+    }\n+\n+\n     public Map<String, AuthenticationProviderInitialiser> getMechanisms()\n     {\n         return _saslServers;\n     }\n+\n+    public List<Principal> getUsers()\n+    {\n+        return null; //todo\n+    }\n+\n+    public Principal getUser(String username)\n+    {\n+        if (_users.getProperty(username) != null)\n+        {\n+            return new UsernamePrincipal(username);\n+        }\n+        else\n+        {\n+            return null;\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java",
                "sha": "b1ac0e1f00dc18a22e8231c39866dca40f943af0",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabaseManager.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabaseManager.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabaseManager.java",
                "patch": "@@ -20,6 +20,8 @@\n  */\n package org.apache.qpid.server.security.auth.database;\n \n+import org.apache.commons.configuration.Configuration;\n+\n import java.util.Map;\n import java.util.Properties;\n import java.util.HashMap;\n@@ -38,4 +40,9 @@ public PropertiesPrincipalDatabaseManager(String name, Properties users)\n     {\n         return _databases;\n     }\n+\n+    public void initialiseManagement(Configuration config)\n+    {\n+        //todo\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabaseManager.java",
                "sha": "6b86a46bd274a75964c142d227662fc493619d50",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 8,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java",
                "patch": "@@ -71,7 +71,7 @@ public PrincipalDatabaseAuthenticationManager(String name, Configuration hostCon\n         Map<String, Class<? extends SaslServerFactory>> providerMap = new TreeMap<String, Class<? extends SaslServerFactory>>();\n \n \n-        if (name == null)\n+        if (name == null || hostConfig == null)\n         {\n             initialiseAuthenticationMechanisms(providerMap, ApplicationRegistry.getInstance().getDatabaseManager().getDatabases());\n         }\n@@ -108,11 +108,15 @@ public PrincipalDatabaseAuthenticationManager(String name, Configuration hostCon\n \n         if (providerMap.size() > 0)\n         {\n-            Security.addProvider(new JCAProvider(providerMap));\n+            // Ensure we are used before the defaults\n+            if (Security.insertProviderAt(new JCAProvider(providerMap), 1) == -1)\n+            {\n+                _logger.warn(\"Unable to set order of providers.\");\n+            }\n         }\n         else\n         {\n-            _logger.warn(\"No SASL providers availble.\");\n+            _logger.warn(\"No additional SASL providers registered.\");\n         }\n \n     }\n@@ -148,21 +152,20 @@ private void initialiseAuthenticationMechanisms(Map<String, Class<? extends Sasl\n     {\n         if (database == null || database.getMechanisms().size() == 0)\n         {\n-            _logger.warn(\"\");\n+            _logger.warn(\"No Database or no mechanisms to initialise authentication\");\n             return;\n         }\n \n-        for (AuthenticationProviderInitialiser mechanism : database.getMechanisms().values())\n+        for (Map.Entry<String, AuthenticationProviderInitialiser> mechanism : database.getMechanisms().entrySet())\n         {\n-            initialiseAuthenticationMechanism(mechanism, providerMap);\n+            initialiseAuthenticationMechanism(mechanism.getKey(), mechanism.getValue(), providerMap);\n         }\n     }\n \n-    private void initialiseAuthenticationMechanism(AuthenticationProviderInitialiser initialiser,\n+    private void initialiseAuthenticationMechanism(String mechanism, AuthenticationProviderInitialiser initialiser,\n                                                    Map<String, Class<? extends SaslServerFactory>> providerMap)\n             throws Exception\n     {\n-        String mechanism = initialiser.getMechanismName();\n         if (_mechanisms == null)\n         {\n             _mechanisms = mechanism;",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java",
                "sha": "ce5e0cd7487d1325c137ed265963343d8e232bc6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/JCAProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/JCAProvider.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/JCAProvider.java",
                "patch": "@@ -33,7 +33,7 @@ public JCAProvider(Map<String, Class<? extends SaslServerFactory>> providerMap)\n         super(\"AMQSASLProvider\", 1.0, \"A JCA provider that registers all \" +\n               \"AMQ SASL providers that want to be registered\");\n         register(providerMap);\n-        Security.addProvider(this);\n+        //Security.addProvider(this);\n     }\n \n     private void register(Map<String, Class<? extends SaslServerFactory>> providerMap)",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/JCAProvider.java",
                "sha": "fd4ad86055592e98f9627a674b4160b36cc25f69",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePasswordInitialiser.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePasswordInitialiser.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 5,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePasswordInitialiser.java",
                "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -33,14 +33,16 @@\n import javax.security.sasl.AuthorizeCallback;\n \n import org.apache.commons.configuration.Configuration;\n+\n import org.apache.log4j.Logger;\n+\n import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n import org.apache.qpid.server.security.auth.sasl.AuthenticationProviderInitialiser;\n import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n \n public abstract class UsernamePasswordInitialiser implements AuthenticationProviderInitialiser\n {\n-    protected static final Logger _logger = Logger.getLogger(UsernamePasswordInitialiser.class);    \n+    protected static final Logger _logger = Logger.getLogger(UsernamePasswordInitialiser.class);\n \n     private ServerCallbackHandler _callbackHandler;\n \n@@ -72,7 +74,9 @@ else if (callback instanceof PasswordCallback)\n                     {\n                         // very annoyingly the callback handler does not throw anything more appropriate than\n                         // IOException\n-                        throw new IOException(\"Error looking up user \" + e);\n+                        IOException ioe = new IOException(\"Error looking up user \" + e);\n+                        ioe.initCause(e);\n+                        throw ioe;\n                     }\n                 }\n                 else if (callback instanceof AuthorizeCallback)\n@@ -88,7 +92,7 @@ else if (callback instanceof AuthorizeCallback)\n     }\n \n     public void initialise(String baseConfigPath, Configuration configuration,\n-                           Map<String, PrincipalDatabase> principalDatabases) throws Exception\n+        Map<String, PrincipalDatabase> principalDatabases) throws Exception\n     {\n         String principalDatabaseName = configuration.getString(baseConfigPath + \".principal-database\");\n         PrincipalDatabase db = principalDatabases.get(principalDatabaseName);\n@@ -102,6 +106,7 @@ public void initialise(PrincipalDatabase db)\n         {\n             throw new NullPointerException(\"Cannot initialise with a null Principal database.\");\n         }\n+\n         _callbackHandler = new ServerCallbackHandler(db);\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePasswordInitialiser.java",
                "sha": "dd0bd096c37c7e64ff08d9e7c263a3fe8c93c8ac",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePrincipal.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePrincipal.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 4,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePrincipal.java",
                "patch": "@@ -22,10 +22,7 @@\n \n import java.security.Principal;\n \n-/**\n- * A principal that is just a wrapper for a simple username.\n- *\n- */\n+/** A principal that is just a wrapper for a simple username. */\n public class UsernamePrincipal implements Principal\n {\n     private String _name;\n@@ -39,4 +36,9 @@ public String getName()\n     {\n         return _name;\n     }\n+\n+    public String toString()\n+    {\n+        return _name;\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePrincipal.java",
                "sha": "d7c83836909b83eae27da55661f65f1dc18d9f9d",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedInitialiser.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedInitialiser.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedInitialiser.java",
                "patch": "@@ -0,0 +1,50 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.security.auth.sasl.crammd5;\n+\n+import org.apache.qpid.server.security.auth.sasl.UsernamePasswordInitialiser;\n+import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n+\n+import javax.security.sasl.SaslServerFactory;\n+import java.util.Map;\n+\n+public class CRAMMD5HashedInitialiser extends UsernamePasswordInitialiser\n+{\n+    public String getMechanismName()\n+    {\n+        return CRAMMD5HashedSaslServer.MECHANISM;\n+    }\n+\n+    public Class<? extends SaslServerFactory> getServerFactoryClassForJCARegistration()\n+    {\n+        return CRAMMD5HashedServerFactory.class;\n+    }\n+\n+    public void initialise(PrincipalDatabase passwordFile)\n+    {\n+        super.initialise(passwordFile);\n+    }\n+\n+    public Map<String, ?> getProperties()\n+    {\n+        return null;\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedInitialiser.java",
                "sha": "97f9a4e91a1a1baec523fa0816e2f93a13895359",
                "status": "added"
            },
            {
                "additions": 105,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedSaslServer.java",
                "changes": 105,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedSaslServer.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedSaslServer.java",
                "patch": "@@ -0,0 +1,105 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.security.auth.sasl.crammd5;\n+\n+import javax.security.sasl.SaslServer;\n+import javax.security.sasl.SaslException;\n+import javax.security.sasl.Sasl;\n+import javax.security.sasl.SaslServerFactory;\n+import javax.security.auth.callback.CallbackHandler;\n+import java.util.Enumeration;\n+import java.util.Map;\n+\n+public class CRAMMD5HashedSaslServer implements SaslServer\n+{\n+    public static final String MECHANISM = \"CRAM-MD5-HASHED\";\n+\n+    private SaslServer _realServer;\n+\n+    public CRAMMD5HashedSaslServer(String mechanism, String protocol, String serverName, Map<String, ?> props,\n+                                   CallbackHandler cbh) throws SaslException\n+    {\n+        Enumeration factories = Sasl.getSaslServerFactories();\n+\n+        while (factories.hasMoreElements())\n+        {\n+            SaslServerFactory factory = (SaslServerFactory) factories.nextElement();\n+\n+            if (factory instanceof CRAMMD5HashedServerFactory)\n+            {\n+                continue;\n+            }\n+            \n+            String[] mechs = factory.getMechanismNames(props);\n+\n+            for (String mech : mechs)\n+            {\n+                if (mech.equals(\"CRAM-MD5\"))\n+                {\n+                    _realServer = factory.createSaslServer(\"CRAM-MD5\", protocol, serverName, props, cbh);\n+                    return;\n+                }\n+            }\n+        }\n+\n+        throw new RuntimeException(\"No default SaslServer found for mechanism:\" + \"CRAM-MD5\");\n+    }\n+\n+    public String getMechanismName()\n+    {\n+        return MECHANISM;\n+    }\n+\n+    public byte[] evaluateResponse(byte[] response) throws SaslException\n+    {\n+        return _realServer.evaluateResponse(response);\n+    }\n+\n+    public boolean isComplete()\n+    {\n+        return _realServer.isComplete();\n+    }\n+\n+    public String getAuthorizationID()\n+    {\n+        return _realServer.getAuthorizationID();\n+    }\n+\n+    public byte[] unwrap(byte[] incoming, int offset, int len) throws SaslException\n+    {\n+        return _realServer.unwrap(incoming, offset, len);\n+    }\n+\n+    public byte[] wrap(byte[] outgoing, int offset, int len) throws SaslException\n+    {\n+        return _realServer.wrap(outgoing, offset, len);\n+    }\n+\n+    public Object getNegotiatedProperty(String propName)\n+    {\n+        return _realServer.getNegotiatedProperty(propName);\n+    }\n+\n+    public void dispose() throws SaslException\n+    {\n+        _realServer.dispose();\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedSaslServer.java",
                "sha": "f6cab084ea25411cc3ad362e56e8447391a6f235",
                "status": "added"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedServerFactory.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedServerFactory.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedServerFactory.java",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.security.auth.sasl.crammd5;\n+\n+import java.util.Map;\n+\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.sasl.Sasl;\n+import javax.security.sasl.SaslException;\n+import javax.security.sasl.SaslServer;\n+import javax.security.sasl.SaslServerFactory;\n+\n+public class CRAMMD5HashedServerFactory implements SaslServerFactory\n+{\n+    public SaslServer createSaslServer(String mechanism, String protocol, String serverName, Map<String, ?> props,\n+                                       CallbackHandler cbh) throws SaslException\n+    {\n+        if (mechanism.equals(CRAMMD5HashedSaslServer.MECHANISM))\n+        {\n+            return new CRAMMD5HashedSaslServer(mechanism, protocol, serverName, props, cbh);\n+        }\n+        else\n+        {\n+            return null;\n+        }\n+    }\n+\n+    public String[] getMechanismNames(Map props)\n+    {\n+        if (props != null)\n+        {\n+            if (props.containsKey(Sasl.POLICY_NOPLAINTEXT) ||\n+                props.containsKey(Sasl.POLICY_NODICTIONARY) ||\n+                props.containsKey(Sasl.POLICY_NOACTIVE))\n+            {\n+                // returned array must be non null according to interface documentation\n+                return new String[0];\n+            }\n+        }\n+\n+        return new String[]{CRAMMD5HashedSaslServer.MECHANISM};\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedServerFactory.java",
                "sha": "5298b5cc6384124b54ba9fda1c96af5c8ffd8e3c",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainSaslServerFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainSaslServerFactory.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainSaslServerFactory.java",
                "patch": "@@ -29,7 +29,7 @@\n import javax.security.sasl.SaslServerFactory;\n \n public class PlainSaslServerFactory implements SaslServerFactory\n-{    \n+{\n     public SaslServer createSaslServer(String mechanism, String protocol, String serverName, Map props,\n                                        CallbackHandler cbh) throws SaslException\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainSaslServerFactory.java",
                "sha": "f0dd9eeb6dcd27f03099924372b4c7f036f99bd7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/CleanupMessageOperation.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/CleanupMessageOperation.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 12,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/txn/CleanupMessageOperation.java",
                "patch": "@@ -56,18 +56,7 @@ public void undoPrepare()\n \n     public void commit(StoreContext context)\n     {\n-        //The routers reference can now be released.  This is done\n-        //here to ensure that it happens after the queues that\n-        //enqueue it have incremented their counts (which as a\n-        //memory only operation is done in the commit phase).\n-        try\n-        {\n-            _msg.decrementReference(context);\n-        }\n-        catch (AMQException e)\n-        {\n-            _log.error(\"On commiting transaction, failed to cleanup unused message: \" + e, e);\n-        }\n+\n         try\n         {\n             _msg.checkDeliveredToConsumer();",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/CleanupMessageOperation.java",
                "sha": "609a85c22fadedebb79352b506209c118c245025",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java",
                "patch": "@@ -89,6 +89,12 @@ public StoreContext getStoreContext()\n     public void rollback() throws AMQException\n     {\n         _txnBuffer.rollback(_storeContext);\n+        // Hack to deal with uncommitted non-transactional writes\n+        if(_messageStore.inTran(_storeContext))\n+        {\n+            _messageStore.abortTran(_storeContext);\n+            _inTran = false;\n+        }\n         _postCommitDeliveryList.clear();\n     }\n \n@@ -103,6 +109,7 @@ public void deliver(AMQMessage message, AMQQueue queue, boolean deliverFirst) th\n //        message.incrementReference();\n         _postCommitDeliveryList.add(new DeliveryDetails(message, queue, deliverFirst));\n         _messageDelivered = true;\n+        _txnBuffer.enlist(new CleanupMessageOperation(message, _returnMessages));\n         /*_txnBuffer.enlist(new DeliverMessageOperation(message, queue));\n         if (_log.isDebugEnabled())\n         {\n@@ -111,7 +118,7 @@ public void deliver(AMQMessage message, AMQQueue queue, boolean deliverFirst) th\n         }\n         message.incrementReference();\n         _messageDelivered = true;\n-        _txnBuffer.enlist(new CleanupMessageOperation(message, _returnMessages));\n+\n         */\n     }\n \n@@ -195,6 +202,7 @@ public void commit() throws AMQException\n         {\n             _txnBuffer.enlist(new StoreMessageOperation(_messageStore));\n         }\n+        //fixme fail commit here ... QPID-440\n         try\n         {\n             _txnBuffer.commit(_storeContext);",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java",
                "sha": "6d776eec0f404e0aa71aeb84fc1a6de1d02b3f1f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/TxnBuffer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/TxnBuffer.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/txn/TxnBuffer.java",
                "patch": "@@ -41,7 +41,7 @@ public void commit(StoreContext context) throws AMQException\n     {\n         if (_log.isDebugEnabled())\n         {\n-            _log.debug(\"Committing \" + _ops.size() + \" ops to commit.:\" + _ops.toArray());\n+            _log.debug(\"Committing \" + _ops.size() + \" ops to commit.:\" + _ops);\n         }\n \n         if (prepare(context))",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/txn/TxnBuffer.java",
                "sha": "405c2335524354118049f6caa3b3902a9c3cd705",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHost.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHost.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHost.java",
                "patch": "@@ -181,7 +181,7 @@ private void initialiseMessageStore(Configuration config) throws Exception\n         catch (Exception e)\r\n         {\r\n             _logger.error(\"Unable to instantiate configuration class \" + instanceType + \" - ensure it has a public default constructor\");\r\n-            throw new IllegalArgumentException(\"Unable to instantiate configuration class \" + instanceType + \" - ensure it has a public default constructor\");\r\n+            throw new IllegalArgumentException(\"Unable to instantiate configuration class \" + instanceType + \" - ensure it has a public default constructor\", e);\r\n         }\r\n         Configurator.configure(instance);\r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHost.java",
                "sha": "b5c59dbbb7592f91ee6159d6297919d7170706f4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/AMQQueueAlertTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/AMQQueueAlertTest.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/broker/src/test/java/org/apache/qpid/server/queue/AMQQueueAlertTest.java",
                "patch": "@@ -106,6 +106,8 @@ public void testMessageSizeAlert() throws Exception\n     /**\n      * Tests if Queue Depth alert is thrown when queue depth reaches the threshold value\n      *\n+     * Based on FT402 subbmitted by client\n+     *\n      * @throws Exception\n      */\n     public void testQueueDepthAlertNoSubscriber() throws Exception",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/broker/src/test/java/org/apache/qpid/server/queue/AMQQueueAlertTest.java",
                "sha": "0c1da5c278f766189cab5d893b3ba12f76749363",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageDispatcher.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageDispatcher.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 29,
                "filename": "qpid/java/client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageDispatcher.java",
                "patch": "@@ -1,38 +1,41 @@\n /*\n+ *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n  * regarding copyright ownership.  The ASF licenses this file\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n  * under the License.\n+ *\n  */\n package org.apache.qpid.example.publisher;\n \n-import org.apache.log4j.Logger;\n-\n import java.io.File;\n \n+import javax.jms.JMSException;\n+\n+import org.apache.log4j.Logger;\n+\n import org.apache.qpid.example.shared.FileUtils;\n import org.apache.qpid.example.shared.Statics;\n \n-import javax.jms.JMSException;\n-\n /**\n  * Class that sends message files to the Publisher to distribute\n  * using files as input\n  * Must set properties for host in properties file or uses in vm broker\n  */\n-public class FileMessageDispatcher {\n+public class FileMessageDispatcher\n+{\n \n     protected static final Logger _logger = Logger.getLogger(FileMessageDispatcher.class);\n \n@@ -48,30 +51,30 @@\n     public static void main(String[] args)\n     {\n \n-        //Check command line args ok - must provide a path or file for us to dispatch\n+        // Check command line args ok - must provide a path or file for us to dispatch\n         if (args.length == 0)\n         {\n-            System.err.println(\"Usage: FileMessageDispatcher <filesToDispatch>\" + \"\");\n+            System.out.println(\"Usage: FileMessageDispatcher <filesToDispatch>\" + \"\");\n         }\n         else\n         {\n             try\n             {\n-                //publish message(s) from file(s) to configured queue\n+                // publish message(s) from file(s) to configured queue\n                 publish(args[0]);\n \n-                //Move payload file(s) to archive location as no error\n+                // Move payload file(s) to archive location as no error\n                 FileUtils.moveFileToNewDir(args[0], System.getProperties().getProperty(Statics.ARCHIVE_PATH));\n             }\n-            catch(Exception e)\n+            catch (Exception e)\n             {\n-                //log error and exit\n+                // log error and exit\n                 _logger.error(\"Error trying to dispatch message: \" + e);\n                 System.exit(1);\n             }\n             finally\n             {\n-                //clean up before exiting\n+                // clean up before exiting\n                 if (getPublisher() != null)\n                 {\n                     getPublisher().cleanup();\n@@ -98,33 +101,33 @@ public static void publish(String path) throws JMSException, MessageFactoryExcep\n         File tempFile = new File(path);\n         if (tempFile.isDirectory())\n         {\n-            //while more files in dir publish them\n+            // while more files in dir publish them\n             File[] files = tempFile.listFiles();\n \n-            if (files == null || files.length == 0)\n+            if ((files == null) || (files.length == 0))\n             {\n                 _logger.info(\"FileMessageDispatcher - No files to publish in input directory: \" + tempFile);\n             }\n             else\n             {\n                 for (File file : files)\n                 {\n-                    //Create message factory passing in payload path\n+                    // Create message factory passing in payload path\n                     FileMessageFactory factory = new FileMessageFactory(getPublisher().getSession(), file.toString());\n \n-                    //Send the message generated from the payload using the _publisher\n+                    // Send the message generated from the payload using the _publisher\n                     getPublisher().sendMessage(factory.createEventMessage());\n \n                 }\n             }\n         }\n         else\n         {\n-            //handle a single file\n-            //Create message factory passing in payload path\n-            FileMessageFactory factory = new FileMessageFactory(getPublisher().getSession(),tempFile.toString());\n+            // handle a single file\n+            // Create message factory passing in payload path\n+            FileMessageFactory factory = new FileMessageFactory(getPublisher().getSession(), tempFile.toString());\n \n-            //Send the message generated from the payload using the _publisher\n+            // Send the message generated from the payload using the _publisher\n             getPublisher().sendMessage(factory.createEventMessage());\n         }\n     }\n@@ -145,15 +148,15 @@ public static void cleanup()\n      */\n     private static Publisher getPublisher()\n     {\n-       if (_publisher != null)\n-       {\n-           return _publisher;\n-       }\n+        if (_publisher != null)\n+        {\n+            return _publisher;\n+        }\n \n-       //Create a _publisher\n-       _publisher = new Publisher();\n+        // Create a _publisher\n+        _publisher = new Publisher();\n \n-       return _publisher;\n+        return _publisher;\n     }\n \n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageDispatcher.java",
                "sha": "6a7626c51dacd08955f5d693e00fa1828744193d",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageFactory.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageFactory.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageFactory.java",
                "patch": "@@ -47,7 +47,9 @@ public FileMessageFactory(Session session, String filename) throws MessageFactor\n         }\n         catch (IOException e)\n         {\n-            throw new MessageFactoryException(e.toString());\n+            MessageFactoryException mfe = new MessageFactoryException(e.toString());\n+            mfe.initCause(e);\n+            throw mfe;\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageFactory.java",
                "sha": "f3b21e3c645a23f63ee35a8a6400f8414bc0e62e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/example/src/main/java/org/apache/qpid/example/shared/InitialContextHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/example/src/main/java/org/apache/qpid/example/shared/InitialContextHelper.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 2,
                "filename": "qpid/java/client/example/src/main/java/org/apache/qpid/example/shared/InitialContextHelper.java",
                "patch": "@@ -59,11 +59,11 @@ public InitialContextHelper(String propertiesName) throws ContextException\n         }\n         catch (IOException e)\n         {\n-            throw new ContextException(e.toString());\n+            throw new ContextException(e.toString(), e);\n         }\n         catch (NamingException n)\n         {\n-            throw new ContextException(n.toString());\n+            throw new ContextException(n.toString(), n);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/example/src/main/java/org/apache/qpid/example/shared/InitialContextHelper.java",
                "sha": "98a2c0d49781d9503b66ed6aa28365f62b72ecd4",
                "status": "modified"
            },
            {
                "additions": 180,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/AMQConnection.java",
                "changes": 355,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/AMQConnection.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 175,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/AMQConnection.java",
                "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -20,6 +20,29 @@\n  */\n package org.apache.qpid.client;\n \n+import java.io.IOException;\n+import java.net.ConnectException;\n+import java.nio.channels.UnresolvedAddressException;\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.jms.*;\n+import javax.jms.IllegalStateException;\n+import javax.naming.NamingException;\n+import javax.naming.Reference;\n+import javax.naming.Referenceable;\n+import javax.naming.StringRefAddr;\n+\n+import org.apache.log4j.Logger;\n+\n import org.apache.qpid.AMQConnectionFailureException;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.AMQUndeliveredException;\n@@ -44,28 +67,6 @@\n import org.apache.qpid.jms.FailoverPolicy;\n import org.apache.qpid.url.URLSyntaxException;\n \n-import org.apache.log4j.Logger;\n-\n-import javax.jms.*;\n-import javax.jms.IllegalStateException;\n-import javax.naming.NamingException;\n-import javax.naming.Reference;\n-import javax.naming.Referenceable;\n-import javax.naming.StringRefAddr;\n-import java.io.IOException;\n-import java.net.ConnectException;\n-import java.nio.channels.UnresolvedAddressException;\n-import java.text.MessageFormat;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.LinkedHashMap;\n-import java.util.LinkedList;\n-import java.util.Map;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.TimeUnit;\n-\n public class AMQConnection extends Closeable implements Connection, QueueConnection, TopicConnection, Referenceable\n {\n     private static final Logger _logger = Logger.getLogger(AMQConnection.class);\n@@ -95,7 +96,7 @@\n     private AMQProtocolHandler _protocolHandler;\n \n     /** Maps from session id (Integer) to AMQSession instance */\n-    private final Map _sessions = new LinkedHashMap(); //fixme this is map is replicated in amqprotocolsession as _channelId2SessionMap    \n+    private final Map _sessions = new LinkedHashMap(); // fixme this is map is replicated in amqprotocolsession as _channelId2SessionMap\n \n     private String _clientName;\n \n@@ -125,15 +126,14 @@\n \n     /*\n      * _Connected should be refactored with a suitable wait object.\n-    */\n+     */\n     private boolean _connected;\n \n     /*\n      * The last error code that occured on the connection. Used to return the correct exception to the client\n-    */\n+     */\n     private AMQException _lastAMQException = null;\n \n-\n     /*\n      * The connection meta data\n      */\n@@ -149,6 +149,7 @@\n \n     /** Thread Pool for executing connection level processes. Such as returning bounced messages. */\n     private final ExecutorService _taskPool = Executors.newCachedThreadPool();\n+    private static final long DEFAULT_TIMEOUT = 1000 * 30;\n \n     /**\n      * @param broker      brokerdetails\n@@ -160,13 +161,13 @@\n      * @throws AMQException\n      * @throws URLSyntaxException\n      */\n-    public AMQConnection(String broker, String username, String password,\n-                         String clientName, String virtualHost) throws AMQException, URLSyntaxException\n+    public AMQConnection(String broker, String username, String password, String clientName, String virtualHost)\n+        throws AMQException, URLSyntaxException\n     {\n-        this(new AMQConnectionURL(ConnectionURL.AMQ_PROTOCOL + \"://\" +\n-                                  username + \":\" + password + \"@\" +\n-                                  (clientName == null ? \"\" : clientName) + \"/\" +\n-                                  virtualHost + \"?brokerlist='\" + AMQBrokerDetails.checkTransport(broker) + \"'\"), null);\n+        this(new AMQConnectionURL(\n+                ConnectionURL.AMQ_PROTOCOL + \"://\" + username + \":\" + password + \"@\"\n+                + ((clientName == null) ? \"\" : clientName) + \"/\" + virtualHost + \"?brokerlist='\"\n+                + AMQBrokerDetails.checkTransport(broker) + \"'\"), null);\n     }\n \n     /**\n@@ -179,44 +180,38 @@ public AMQConnection(String broker, String username, String password,\n      * @throws AMQException\n      * @throws URLSyntaxException\n      */\n-    public AMQConnection(String broker, String username, String password,\n-                         String clientName, String virtualHost, SSLConfiguration sslConfig) throws AMQException, URLSyntaxException\n+    public AMQConnection(String broker, String username, String password, String clientName, String virtualHost,\n+        SSLConfiguration sslConfig) throws AMQException, URLSyntaxException\n     {\n-        this(new AMQConnectionURL(ConnectionURL.AMQ_PROTOCOL + \"://\" +\n-                                  username + \":\" + password + \"@\" +\n-                                  (clientName == null ? \"\" : clientName) + \"/\" +\n-                                  virtualHost + \"?brokerlist='\" + AMQBrokerDetails.checkTransport(broker) + \"'\"), sslConfig);\n+        this(new AMQConnectionURL(\n+                ConnectionURL.AMQ_PROTOCOL + \"://\" + username + \":\" + password + \"@\"\n+                + ((clientName == null) ? \"\" : clientName) + \"/\" + virtualHost + \"?brokerlist='\"\n+                + AMQBrokerDetails.checkTransport(broker) + \"'\"), sslConfig);\n     }\n \n-\n-    public AMQConnection(String host, int port, String username, String password,\n-                         String clientName, String virtualHost) throws AMQException, URLSyntaxException\n+    public AMQConnection(String host, int port, String username, String password, String clientName, String virtualHost)\n+        throws AMQException, URLSyntaxException\n     {\n         this(host, port, false, username, password, clientName, virtualHost, null);\n     }\n \n-    public AMQConnection(String host, int port, String username, String password,\n-                         String clientName, String virtualHost, SSLConfiguration sslConfig) throws AMQException, URLSyntaxException\n+    public AMQConnection(String host, int port, String username, String password, String clientName, String virtualHost,\n+        SSLConfiguration sslConfig) throws AMQException, URLSyntaxException\n     {\n         this(host, port, false, username, password, clientName, virtualHost, sslConfig);\n     }\n \n-\n-    public AMQConnection(String host, int port, boolean useSSL, String username, String password,\n-                         String clientName, String virtualHost, SSLConfiguration sslConfig) throws AMQException, URLSyntaxException\n+    public AMQConnection(String host, int port, boolean useSSL, String username, String password, String clientName,\n+        String virtualHost, SSLConfiguration sslConfig) throws AMQException, URLSyntaxException\n     {\n-        this(new AMQConnectionURL(useSSL ?\n-                                  ConnectionURL.AMQ_PROTOCOL + \"://\" +\n-                                  username + \":\" + password + \"@\" +\n-                                  (clientName == null ? \"\" : clientName) +\n-                                  virtualHost + \"?brokerlist='tcp://\" + host + \":\" + port + \"'\"\n-                                  + \",\" + ConnectionURL.OPTIONS_SSL + \"='true'\" :\n-                                                                                ConnectionURL.AMQ_PROTOCOL + \"://\" +\n-                                                                                username + \":\" + password + \"@\" +\n-                                                                                (clientName == null ? \"\" : clientName) +\n-                                                                                virtualHost + \"?brokerlist='tcp://\" + host + \":\" + port + \"'\"\n-                                                                                + \",\" + ConnectionURL.OPTIONS_SSL + \"='false'\"\n-        ), sslConfig);\n+        this(new AMQConnectionURL(\n+                useSSL\n+                ? (ConnectionURL.AMQ_PROTOCOL + \"://\" + username + \":\" + password + \"@\"\n+                    + ((clientName == null) ? \"\" : clientName) + virtualHost + \"?brokerlist='tcp://\" + host + \":\" + port\n+                    + \"'\" + \",\" + ConnectionURL.OPTIONS_SSL + \"='true'\")\n+                : (ConnectionURL.AMQ_PROTOCOL + \"://\" + username + \":\" + password + \"@\"\n+                    + ((clientName == null) ? \"\" : clientName) + virtualHost + \"?brokerlist='tcp://\" + host + \":\" + port\n+                    + \"'\" + \",\" + ConnectionURL.OPTIONS_SSL + \"='false'\")), sslConfig);\n     }\n \n     public AMQConnection(String connection) throws AMQException, URLSyntaxException\n@@ -229,13 +224,13 @@ public AMQConnection(String connection, SSLConfiguration sslConfig) throws AMQEx\n         this(new AMQConnectionURL(connection), sslConfig);\n     }\n \n-\n     public AMQConnection(ConnectionURL connectionURL, SSLConfiguration sslConfig) throws AMQException\n     {\n         if (_logger.isInfoEnabled())\n         {\n             _logger.info(\"Connection:\" + connectionURL);\n         }\n+\n         _sslConfiguration = sslConfig;\n         if (connectionURL == null)\n         {\n@@ -249,7 +244,6 @@ public AMQConnection(ConnectionURL connectionURL, SSLConfiguration sslConfig) th\n         _password = connectionURL.getPassword();\n         setVirtualHost(connectionURL.getVirtualHost());\n \n-\n         if (connectionURL.getDefaultQueueExchangeName() != null)\n         {\n             _defaultQueueExchangeName = connectionURL.getDefaultQueueExchangeName();\n@@ -270,15 +264,13 @@ public AMQConnection(ConnectionURL connectionURL, SSLConfiguration sslConfig) th\n             _temporaryTopicExchangeName = connectionURL.getTemporaryTopicExchangeName();\n         }\n \n-\n         _failoverPolicy = new FailoverPolicy(connectionURL);\n \n         _protocolHandler = new AMQProtocolHandler(this);\n \n         // We are not currently connected\n         _connected = false;\n \n-\n         Exception lastException = new Exception();\n         lastException.initCause(new ConnectException());\n \n@@ -296,7 +288,8 @@ public AMQConnection(ConnectionURL connectionURL, SSLConfiguration sslConfig) th\n \n                 if (_logger.isInfoEnabled())\n                 {\n-                    _logger.info(\"Unable to connect to broker at \" + _failoverPolicy.getCurrentBrokerDetails(), e.getCause());\n+                    _logger.info(\"Unable to connect to broker at \" + _failoverPolicy.getCurrentBrokerDetails(),\n+                        e.getCause());\n                 }\n             }\n         }\n@@ -322,7 +315,7 @@ public AMQConnection(ConnectionURL connectionURL, SSLConfiguration sslConfig) th\n                 }\n             }\n \n-            if (message == null || message.equals(\"\"))\n+            if ((message == null) || message.equals(\"\"))\n             {\n                 message = \"Unable to Connect\";\n             }\n@@ -335,11 +328,13 @@ public AMQConnection(ConnectionURL connectionURL, SSLConfiguration sslConfig) th\n                 {\n                     e = new AMQUnresolvedAddressException(message, _failoverPolicy.getCurrentBrokerDetails().toString());\n                 }\n+\n                 e.initCause(lastException);\n             }\n \n             throw e;\n         }\n+\n         _connectionMetaData = new QpidConnectionMetaData(this);\n     }\n \n@@ -369,6 +364,7 @@ private void setVirtualHost(String virtualHost)\n         {\n             virtualHost = virtualHost.substring(1);\n         }\n+\n         _virtualHost = virtualHost;\n     }\n \n@@ -382,7 +378,7 @@ private void makeBrokerConnection(BrokerDetails brokerDetail) throws IOException\n             _protocolHandler.attainState(AMQState.CONNECTION_OPEN);\n             _failoverPolicy.attainedConnection();\n \n-            //Again this should be changed to a suitable notify\n+            // Again this should be changed to a suitable notify\n             _connected = true;\n         }\n         catch (AMQException e)\n@@ -401,6 +397,7 @@ public boolean attemptReconnection(String host, int port)\n         try\n         {\n             makeBrokerConnection(bd);\n+\n             return true;\n         }\n         catch (Exception e)\n@@ -409,8 +406,10 @@ public boolean attemptReconnection(String host, int port)\n             {\n                 _logger.info(\"Unable to connect to broker at \" + bd);\n             }\n+\n             attemptReconnection();\n         }\n+\n         return false;\n     }\n \n@@ -421,6 +420,7 @@ public boolean attemptReconnection()\n             try\n             {\n                 makeBrokerConnection(_failoverPolicy.getNextBrokerDetails());\n+\n                 return true;\n             }\n             catch (Exception e)\n@@ -436,13 +436,14 @@ public boolean attemptReconnection()\n                 {\n                     if (_logger.isInfoEnabled())\n                     {\n-                        _logger.info(e.getMessage() + \":Unable to connect to broker at \" + _failoverPolicy.getCurrentBrokerDetails());\n+                        _logger.info(e.getMessage() + \":Unable to connect to broker at \"\n+                            + _failoverPolicy.getCurrentBrokerDetails());\n                     }\n                 }\n             }\n         }\n \n-        //connection unsuccessful\n+        // connection unsuccessful\n         return false;\n     }\n \n@@ -474,14 +475,14 @@ public boolean failoverAllowed()\n         return createSession(transacted, acknowledgeMode, AMQSession.DEFAULT_PREFETCH_HIGH_MARK);\n     }\n \n-    public org.apache.qpid.jms.Session createSession(final boolean transacted, final int acknowledgeMode,\n-                                                     final int prefetch) throws JMSException\n+    public org.apache.qpid.jms.Session createSession(final boolean transacted, final int acknowledgeMode, final int prefetch)\n+        throws JMSException\n     {\n         return createSession(transacted, acknowledgeMode, prefetch, prefetch);\n     }\n \n     public org.apache.qpid.jms.Session createSession(final boolean transacted, final int acknowledgeMode,\n-                                                     final int prefetchHigh, final int prefetchLow) throws JMSException\n+        final int prefetchHigh, final int prefetchLow) throws JMSException\n     {\n         checkNotClosed();\n         if (channelLimitReached())\n@@ -491,85 +492,81 @@ public boolean failoverAllowed()\n         else\n         {\n             return (org.apache.qpid.jms.Session) new FailoverSupport()\n-            {\n-                public Object operation() throws JMSException\n-                {\n-                    int channelId = _idFactory.incrementAndGet();\n-\n-                    if (_logger.isDebugEnabled())\n-                    {\n-                        _logger.debug(\"Write channel open frame for channel id \" + channelId);\n-                    }\n-\n-                    // We must create the session and register it before actually sending the frame to the server to\n-                    // open it, so that there is no window where we could receive data on the channel and not be set\n-                    // up to handle it appropriately.\n-                    AMQSession session = new AMQSession(AMQConnection.this, channelId, transacted, acknowledgeMode,\n-                                                        prefetchHigh, prefetchLow);\n-                    _protocolHandler.addSessionByChannel(channelId, session);\n-                    registerSession(channelId, session);\n-\n-                    boolean success = false;\n-                    try\n-                    {\n-                        createChannelOverWire(channelId, prefetchHigh, prefetchLow, transacted);\n-                        success = true;\n-                    }\n-                    catch (AMQException e)\n-                    {\n-                        JMSException jmse = new JMSException(\"Error creating session: \" + e);\n-                        jmse.setLinkedException(e);\n-                        throw jmse;\n-                    }\n-                    finally\n-                    {\n-                        if (!success)\n-                        {\n-                            _protocolHandler.removeSessionByChannel(channelId);\n-                            deregisterSession(channelId);\n-                        }\n-                    }\n-\n-                    if (_started)\n                     {\n-                        try\n-                        {\n-                            session.start();\n-                        }\n-                        catch (AMQException e)\n+                        public Object operation() throws JMSException\n                         {\n-                            throw new JMSAMQException(e);\n+                            int channelId = _idFactory.incrementAndGet();\n+\n+                            if (_logger.isDebugEnabled())\n+                            {\n+                                _logger.debug(\"Write channel open frame for channel id \" + channelId);\n+                            }\n+\n+                            // We must create the session and register it before actually sending the frame to the server to\n+                            // open it, so that there is no window where we could receive data on the channel and not be set\n+                            // up to handle it appropriately.\n+                            AMQSession session =\n+                                new AMQSession(AMQConnection.this, channelId, transacted, acknowledgeMode, prefetchHigh,\n+                                    prefetchLow);\n+                            _protocolHandler.addSessionByChannel(channelId, session);\n+                            registerSession(channelId, session);\n+\n+                            boolean success = false;\n+                            try\n+                            {\n+                                createChannelOverWire(channelId, prefetchHigh, prefetchLow, transacted);\n+                                success = true;\n+                            }\n+                            catch (AMQException e)\n+                            {\n+                                JMSException jmse = new JMSException(\"Error creating session: \" + e);\n+                                jmse.setLinkedException(e);\n+                                throw jmse;\n+                            }\n+                            finally\n+                            {\n+                                if (!success)\n+                                {\n+                                    _protocolHandler.removeSessionByChannel(channelId);\n+                                    deregisterSession(channelId);\n+                                }\n+                            }\n+\n+                            if (_started)\n+                            {\n+                                try\n+                                {\n+                                    session.start();\n+                                }\n+                                catch (AMQException e)\n+                                {\n+                                    throw new JMSAMQException(e);\n+                                }\n+                            }\n+\n+                            return session;\n                         }\n-                    }\n-                    return session;\n-                }\n-            }.execute(this);\n+                    }.execute(this);\n         }\n     }\n \n     private void createChannelOverWire(int channelId, int prefetchHigh, int prefetchLow, boolean transacted)\n-            throws AMQException\n+        throws AMQException\n     {\n \n         // TODO: Be aware of possible changes to parameter order as versions change.\n \n-        _protocolHandler.syncWrite(\n-                ChannelOpenBody.createAMQFrame(channelId,\n-                                               _protocolHandler.getProtocolMajorVersion(),\n-                                               _protocolHandler.getProtocolMinorVersion(),\n-                                               null),    // outOfBand\n-                                                         ChannelOpenOkBody.class);\n-\n-        //todo send low water mark when protocol allows.\n-        //todo Be aware of possible changes to parameter order as versions change.\n-        _protocolHandler.syncWrite(\n-                BasicQosBody.createAMQFrame(channelId,\n-                                            _protocolHandler.getProtocolMajorVersion(),\n-                                            _protocolHandler.getProtocolMinorVersion(),\n-                                            false,    // global\n-                                            prefetchHigh,    // prefetchCount\n-                                            0),    // prefetchSize\n-                                                   BasicQosOkBody.class);\n+        _protocolHandler.syncWrite(ChannelOpenBody.createAMQFrame(channelId, _protocolHandler.getProtocolMajorVersion(),\n+                _protocolHandler.getProtocolMinorVersion(), null), // outOfBand\n+            ChannelOpenOkBody.class);\n+\n+        // todo send low water mark when protocol allows.\n+        // todo Be aware of possible changes to parameter order as versions change.\n+        _protocolHandler.syncWrite(BasicQosBody.createAMQFrame(channelId, _protocolHandler.getProtocolMajorVersion(),\n+                _protocolHandler.getProtocolMinorVersion(), false, // global\n+                prefetchHigh, // prefetchCount\n+                0), // prefetchSize\n+            BasicQosOkBody.class);\n \n         if (transacted)\n         {\n@@ -579,10 +576,8 @@ private void createChannelOverWire(int channelId, int prefetchHigh, int prefetch\n             }\n \n             // TODO: Be aware of possible changes to parameter order as versions change.\n-            _protocolHandler.syncWrite(TxSelectBody.createAMQFrame(channelId,\n-                                                                   _protocolHandler.getProtocolMajorVersion(),\n-                                                                   _protocolHandler.getProtocolMinorVersion()),\n-                                       TxSelectOkBody.class);\n+            _protocolHandler.syncWrite(TxSelectBody.createAMQFrame(channelId, _protocolHandler.getProtocolMajorVersion(),\n+                    _protocolHandler.getProtocolMinorVersion()), TxSelectOkBody.class);\n         }\n     }\n \n@@ -596,11 +591,10 @@ private void reopenChannel(int channelId, int prefetchHigh, int prefetchLow, boo\n         {\n             _protocolHandler.removeSessionByChannel(channelId);\n             deregisterSession(channelId);\n-            throw new AMQException(\"Error reopening channel \" + channelId + \" after failover: \" + e);\n+            throw new AMQException(\"Error reopening channel \" + channelId + \" after failover: \" + e, e);\n         }\n     }\n \n-\n     public void setFailoverPolicy(FailoverPolicy policy)\n     {\n         _failoverPolicy = policy;\n@@ -645,12 +639,13 @@ public TopicSession createTopicSession(boolean transacted, int acknowledgeMode)\n \n     private boolean channelLimitReached()\n     {\n-        return _maximumChannelCount != 0 && _sessions.size() == _maximumChannelCount;\n+        return (_maximumChannelCount != 0) && (_sessions.size() == _maximumChannelCount);\n     }\n \n     public String getClientID() throws JMSException\n     {\n         checkNotClosed();\n+\n         return _clientName;\n     }\n \n@@ -666,13 +661,15 @@ public void setClientID(String clientID) throws JMSException\n     public ConnectionMetaData getMetaData() throws JMSException\n     {\n         checkNotClosed();\n+\n         return _connectionMetaData;\n \n     }\n \n     public ExceptionListener getExceptionListener() throws JMSException\n     {\n         checkNotClosed();\n+\n         return _exceptionListener;\n     }\n \n@@ -706,6 +703,7 @@ public void start() throws JMSException\n                     throw new JMSAMQException(e);\n                 }\n             }\n+\n             _started = true;\n         }\n     }\n@@ -726,13 +724,14 @@ public void stop() throws JMSException\n                     throw new JMSAMQException(e);\n                 }\n             }\n+\n             _started = false;\n         }\n     }\n \n     public void close() throws JMSException\n     {\n-        close(-1);\n+        close(DEFAULT_TIMEOUT);\n     }\n \n     public void close(long timeout) throws JMSException\n@@ -752,7 +751,7 @@ public void close(long timeout) throws JMSException\n                     {\n                         try\n                         {\n-                            //adjust timeout\n+                            // adjust timeout\n                             long taskPoolTimeout = adjustTimeout(timeout, startCloseTime);\n \n                             _taskPool.awaitTermination(taskPoolTimeout, TimeUnit.MILLISECONDS);\n@@ -763,15 +762,17 @@ public void close(long timeout) throws JMSException\n                         }\n                     }\n \n-                    //adjust timeout\n+                    // adjust timeout\n                     timeout = adjustTimeout(timeout, startCloseTime);\n \n                     _protocolHandler.closeConnection(timeout);\n \n                 }\n                 catch (AMQException e)\n                 {\n-                    throw new JMSException(\"Error closing connection: \" + e);\n+                    JMSException jmse = new JMSException(\"Error closing connection: \" + e);\n+                    jmse.setLinkedException(e);\n+                    throw jmse;\n                 }\n             }\n         }\n@@ -785,6 +786,7 @@ private long adjustTimeout(long timeout, long startTime)\n         {\n             timeout = 0;\n         }\n+\n         return timeout;\n     }\n \n@@ -803,6 +805,7 @@ private void markAllSessionsClosed()\n \n             session.markClosed();\n         }\n+\n         _sessions.clear();\n     }\n \n@@ -842,6 +845,7 @@ private void closeAllSessions(Throwable cause, long timeout, long starttime) thr\n                 }\n             }\n         }\n+\n         _sessions.clear();\n         if (sessionException != null)\n         {\n@@ -850,42 +854,42 @@ private void closeAllSessions(Throwable cause, long timeout, long starttime) thr\n     }\n \n     public ConnectionConsumer createConnectionConsumer(Destination destination, String messageSelector,\n-                                                       ServerSessionPool sessionPool,\n-                                                       int maxMessages) throws JMSException\n+        ServerSessionPool sessionPool, int maxMessages) throws JMSException\n     {\n         checkNotClosed();\n+\n         return null;\n     }\n \n-    public ConnectionConsumer createConnectionConsumer(Queue queue, String messageSelector,\n-                                                       ServerSessionPool sessionPool,\n-                                                       int maxMessages) throws JMSException\n+    public ConnectionConsumer createConnectionConsumer(Queue queue, String messageSelector, ServerSessionPool sessionPool,\n+        int maxMessages) throws JMSException\n     {\n         checkNotClosed();\n+\n         return null;\n     }\n \n-    public ConnectionConsumer createConnectionConsumer(Topic topic, String messageSelector,\n-                                                       ServerSessionPool sessionPool,\n-                                                       int maxMessages) throws JMSException\n+    public ConnectionConsumer createConnectionConsumer(Topic topic, String messageSelector, ServerSessionPool sessionPool,\n+        int maxMessages) throws JMSException\n     {\n         checkNotClosed();\n+\n         return null;\n     }\n \n-    public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String subscriptionName,\n-                                                              String messageSelector, ServerSessionPool sessionPool,\n-                                                              int maxMessages)\n-            throws JMSException\n+    public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String subscriptionName, String messageSelector,\n+        ServerSessionPool sessionPool, int maxMessages) throws JMSException\n     {\n         // TODO Auto-generated method stub\n         checkNotClosed();\n+\n         return null;\n     }\n \n     public long getMaximumChannelCount() throws JMSException\n     {\n         checkNotClosed();\n+\n         return _maximumChannelCount;\n     }\n \n@@ -974,6 +978,7 @@ public boolean firePreFailover(boolean redirect)\n         {\n             proceed = _connectionListener.preFailover(redirect);\n         }\n+\n         return proceed;\n     }\n \n@@ -994,6 +999,7 @@ public boolean firePreResubscribe() throws JMSException\n             {\n                 markAllSessionsClosed();\n             }\n+\n             return resubscribe;\n         }\n         else\n@@ -1057,12 +1063,15 @@ public void exceptionReceived(Throwable cause)\n         {\n             if (cause instanceof AMQException)\n             {\n-                je = new JMSException(Integer.toString(((AMQException) cause).getErrorCode().getCode()), \"Exception thrown against \" + toString() + \": \" + cause);\n+                je =\n+                    new JMSException(Integer.toString(((AMQException) cause).getErrorCode().getCode()),\n+                        \"Exception thrown against \" + toString() + \": \" + cause);\n             }\n             else\n             {\n                 je = new JMSException(\"Exception thrown against \" + toString() + \": \" + cause);\n             }\n+\n             if (cause instanceof Exception)\n             {\n                 je.setLinkedException((Exception) cause);\n@@ -1090,6 +1099,7 @@ public void exceptionReceived(Throwable cause)\n                 {\n                     _logger.info(\"Closing AMQConnection due to :\" + cause.getMessage());\n                 }\n+\n                 _closed.set(true);\n                 closeAllSessions(cause, -1, -1); // FIXME: when doing this end up with RejectedExecutionException from executor.\n             }\n@@ -1145,9 +1155,11 @@ public String toString()\n             buf.append(\"Host: \").append(String.valueOf(bd.getHost()));\n             buf.append(\"\\nPort: \").append(String.valueOf(bd.getPort()));\n         }\n+\n         buf.append(\"\\nVirtual Host: \").append(String.valueOf(_virtualHost));\n         buf.append(\"\\nClient ID: \").append(String.valueOf(_clientName));\n-        buf.append(\"\\nActive session count: \").append(_sessions == null ? 0 : _sessions.size());\n+        buf.append(\"\\nActive session count: \").append((_sessions == null) ? 0 : _sessions.size());\n+\n         return buf.toString();\n     }\n \n@@ -1158,11 +1170,8 @@ public String toURL()\n \n     public Reference getReference() throws NamingException\n     {\n-        return new Reference(\n-                AMQConnection.class.getName(),\n-                new StringRefAddr(AMQConnection.class.getName(), toURL()),\n-                AMQConnectionFactory.class.getName(),\n-                null);          // factory location\n+        return new Reference(AMQConnection.class.getName(), new StringRefAddr(AMQConnection.class.getName(), toURL()),\n+                AMQConnectionFactory.class.getName(), null); // factory location\n     }\n \n     public SSLConfiguration getSSLConfiguration()\n@@ -1175,19 +1184,16 @@ public AMQShortString getDefaultTopicExchangeName()\n         return _defaultTopicExchangeName;\n     }\n \n-\n     public void setDefaultTopicExchangeName(AMQShortString defaultTopicExchangeName)\n     {\n         _defaultTopicExchangeName = defaultTopicExchangeName;\n     }\n \n-\n     public AMQShortString getDefaultQueueExchangeName()\n     {\n         return _defaultQueueExchangeName;\n     }\n \n-\n     public void setDefaultQueueExchangeName(AMQShortString defaultQueueExchangeName)\n     {\n         _defaultQueueExchangeName = defaultQueueExchangeName;\n@@ -1200,10 +1206,9 @@ public AMQShortString getTemporaryTopicExchangeName()\n \n     public AMQShortString getTemporaryQueueExchangeName()\n     {\n-        return _temporaryQueueExchangeName;  //To change body of created methods use File | Settings | File Templates.\n+        return _temporaryQueueExchangeName; // To change body of created methods use File | Settings | File Templates.\n     }\n \n-\n     public void setTemporaryTopicExchangeName(AMQShortString temporaryTopicExchangeName)\n     {\n         _temporaryTopicExchangeName = temporaryTopicExchangeName;",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/AMQConnection.java",
                "sha": "0e3d99eeba177607d84375ce56d89135916e8836",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/AMQConnectionURL.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/AMQConnectionURL.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 36,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/AMQConnectionURL.java",
                "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -20,19 +20,19 @@\n  */\n package org.apache.qpid.client;\n \n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.jms.BrokerDetails;\n-import org.apache.qpid.jms.ConnectionURL;\n-import org.apache.qpid.url.URLHelper;\n-import org.apache.qpid.url.URLSyntaxException;\n-\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.StringTokenizer;\n \n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.jms.BrokerDetails;\n+import org.apache.qpid.jms.ConnectionURL;\n+import org.apache.qpid.url.URLHelper;\n+import org.apache.qpid.url.URLSyntaxException;\n+\n public class AMQConnectionURL implements ConnectionURL\n {\n     private String _url;\n@@ -49,7 +49,6 @@\n     private AMQShortString _temporaryTopicExchangeName;\n     private AMQShortString _temporaryQueueExchangeName;\n \n-\n     public AMQConnectionURL(String fullURL) throws URLSyntaxException\n     {\n         _url = fullURL;\n@@ -58,18 +57,18 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n         _failoverOptions = new HashMap<String, String>();\n \n         // Connection URL format\n-        //amqp://[user:pass@][clientid]/virtualhost?brokerlist='tcp://host:port?option=\\'value\\',option=\\'value\\';vm://:3/virtualpath?option=\\'value\\'',failover='method?option=\\'value\\',option='value''\"\n+        // amqp://[user:pass@][clientid]/virtualhost?brokerlist='tcp://host:port?option=\\'value\\',option=\\'value\\';vm://:3/virtualpath?option=\\'value\\'',failover='method?option=\\'value\\',option='value''\"\n         // Options are of course optional except for requiring a single broker in the broker list.\n         try\n         {\n             URI connection = new URI(fullURL);\n \n-            if (connection.getScheme() == null || !(connection.getScheme().equalsIgnoreCase(AMQ_PROTOCOL)))\n+            if ((connection.getScheme() == null) || !(connection.getScheme().equalsIgnoreCase(AMQ_PROTOCOL)))\n             {\n                 throw new URISyntaxException(fullURL, \"Not an AMQP URL\");\n             }\n \n-            if (connection.getHost() == null || connection.getHost().equals(\"\"))\n+            if ((connection.getHost() == null) || connection.getHost().equals(\"\"))\n             {\n                 String uid = AMQConnectionFactory.getUniqueClientID();\n                 if (uid == null)\n@@ -91,7 +90,7 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n \n             if (userInfo == null)\n             {\n-                //Fix for Java 1.5 which doesn't parse UserInfo for non http URIs\n+                // Fix for Java 1.5 which doesn't parse UserInfo for non http URIs\n                 userInfo = connection.getAuthority();\n \n                 if (userInfo != null)\n@@ -112,16 +111,16 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n \n             if (userInfo == null)\n             {\n-                throw URLHelper.parseError(AMQ_PROTOCOL.length() + 3,\n-                                           \"User information not found on url\", fullURL);\n+                throw URLHelper.parseError(AMQ_PROTOCOL.length() + 3, \"User information not found on url\", fullURL);\n             }\n             else\n             {\n                 parseUserInfo(userInfo);\n             }\n+\n             String virtualHost = connection.getPath();\n \n-            if (virtualHost != null && (!virtualHost.equals(\"\")))\n+            if ((virtualHost != null) && (!virtualHost.equals(\"\")))\n             {\n                 setVirtualHost(virtualHost);\n             }\n@@ -130,7 +129,7 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n                 int authLength = connection.getAuthority().length();\n                 int start = AMQ_PROTOCOL.length() + 3;\n                 int testIndex = start + authLength;\n-                if (testIndex < fullURL.length() && fullURL.charAt(testIndex) == '?')\n+                if ((testIndex < fullURL.length()) && (fullURL.charAt(testIndex) == '?'))\n                 {\n                     throw URLHelper.parseError(start, testIndex - start, \"Virtual host found\", fullURL);\n                 }\n@@ -141,14 +140,9 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n \n             }\n \n-\n             URLHelper.parseOptions(_options, connection.getQuery());\n \n             processOptions();\n-\n-            //Fragment is #string (not used)\n-            //System.out.println(connection.getFragment());\n-\n         }\n         catch (URISyntaxException uris)\n         {\n@@ -165,11 +159,10 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n             }\n             else\n             {\n-                if (slash != 0 && fullURL.charAt(slash - 1) == ':')\n+                if ((slash != 0) && (fullURL.charAt(slash - 1) == ':'))\n                 {\n                     throw URLHelper.parseError(slash - 2, fullURL.indexOf('?') - slash + 2,\n-                                               \"Virtual host looks like a windows path, forward slash not allowed in URL\",\n-                                               fullURL);\n+                        \"Virtual host looks like a windows path, forward slash not allowed in URL\", fullURL);\n                 }\n                 else\n                 {\n@@ -182,14 +175,14 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n \n     private void parseUserInfo(String userinfo) throws URLSyntaxException\n     {\n-        //user info = user:pass\n+        // user info = user:pass\n \n         int colonIndex = userinfo.indexOf(':');\n \n         if (colonIndex == -1)\n         {\n             throw URLHelper.parseError(AMQ_PROTOCOL.length() + 3, userinfo.length(),\n-                                       \"Null password in user information not allowed.\", _url);\n+                \"Null password in user information not allowed.\", _url);\n         }\n         else\n         {\n@@ -205,7 +198,7 @@ private void processOptions() throws URLSyntaxException\n         {\n             String brokerlist = _options.get(OPTIONS_BROKERLIST);\n \n-            //brokerlist tcp://host:port?option='value',option='value';vm://:3/virtualpath?option='value'\n+            // brokerlist tcp://host:port?option='value',option='value';vm://:3/virtualpath?option='value'\n             StringTokenizer st = new StringTokenizer(brokerlist, \"\" + URLHelper.BROKER_SEPARATOR);\n \n             while (st.hasMoreTokens())\n@@ -244,19 +237,16 @@ private void processOptions() throws URLSyntaxException\n             _defaultTopicExchangeName = new AMQShortString(_options.get(OPTIONS_DEFAULT_TOPIC_EXCHANGE));\n         }\n \n-\n         if (_options.containsKey(OPTIONS_DEFAULT_QUEUE_EXCHANGE))\n         {\n             _defaultQueueExchangeName = new AMQShortString(_options.get(OPTIONS_DEFAULT_QUEUE_EXCHANGE));\n         }\n \n-\n         if (_options.containsKey(OPTIONS_TEMPORARY_QUEUE_EXCHANGE))\n         {\n             _temporaryQueueExchangeName = new AMQShortString(_options.get(OPTIONS_TEMPORARY_QUEUE_EXCHANGE));\n         }\n \n-\n         if (_options.containsKey(OPTIONS_TEMPORARY_TOPIC_EXCHANGE))\n         {\n             _temporaryTopicExchangeName = new AMQShortString(_options.get(OPTIONS_TEMPORARY_TOPIC_EXCHANGE));\n@@ -439,18 +429,16 @@ private String optionsToString()\n         return sb.toString();\n     }\n \n-\n     public static void main(String[] args) throws URLSyntaxException\n     {\n-\n-        String url2 = \"amqp://ritchiem:bob@temp?brokerlist='tcp://localhost:5672;jcp://fancyserver:3000/',failover='roundrobin'\";\n-        //\"amqp://user:pass@clientid/virtualhost?brokerlist='tcp://host:1?option1=\\'value\\',option2=\\'value\\';vm://:3?option1=\\'value\\'',failover='method?option1=\\'value\\',option2='value''\";\n+        String url2 =\n+            \"amqp://ritchiem:bob@temp?brokerlist='tcp://localhost:5672;jcp://fancyserver:3000/',failover='roundrobin'\";\n+        // \"amqp://user:pass@clientid/virtualhost?brokerlist='tcp://host:1?option1=\\'value\\',option2=\\'value\\';vm://:3?option1=\\'value\\'',failover='method?option1=\\'value\\',option2='value''\";\n \n         ConnectionURL connectionurl2 = new AMQConnectionURL(url2);\n \n         System.out.println(url2);\n         System.out.println(connectionurl2);\n \n     }\n-\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/AMQConnectionURL.java",
                "sha": "b3fbd1f5106146b4a481ef9106450ebcab8d4192",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/AMQDestination.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/AMQDestination.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 17,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/AMQDestination.java",
                "patch": "@@ -53,6 +53,8 @@\n     private String _url;\n     private AMQShortString _urlAsShortString;\n \n+    private boolean _validated;\n+\n     private byte[] _byteEncoding;\n     private static final int IS_DURABLE_MASK = 0x1;\n     private static final int IS_EXCLUSIVE_MASK = 0x2;\n@@ -198,12 +200,16 @@ public String toString()\n     {\n         return toURL();\n \n-        /*\n-        return \"Destination: \" + _destinationName + \", \" +\n-               \"Queue Name: \" + _queueName + \", Exchange: \" + _exchangeName +\n-               \", Exchange class: \" + _exchangeClass + \", Exclusive: \" + _isExclusive +\n-               \", AutoDelete: \" + _isAutoDelete + \", Routing  Key: \" + getRoutingKey();\n-         */\n+    }\n+\n+    public boolean isValidated()\n+    {\n+        return _validated;\n+    }\n+\n+    public void setValidated(boolean validated)\n+    {\n+        _validated = validated;\n     }\n \n     public String toURL()\n@@ -348,15 +354,7 @@ public boolean equals(Object o)\n         {\n             return false;\n         }\n-  /*      if (_isExclusive != that._isExclusive)\n-        {\n-            return false;\n-        }\n-        if (_isAutoDelete != that._isAutoDelete)\n-        {\n-            return false;\n-        }\n-        */\n+\n         return true;\n     }\n \n@@ -370,8 +368,7 @@ public int hashCode()\n         {\n             result = 29 * result + _queueName.hashCode();\n         }\n-//        result = result * (_isExclusive ? 13 : 7);\n-//        result = result * (_isAutoDelete ? 13 : 7);\n+\n         return result;\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/AMQDestination.java",
                "sha": "585991d905bf59a1a6757c967f1bb6a624369a7d",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/AMQSession.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/AMQSession.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 15,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/AMQSession.java",
                "patch": "@@ -202,6 +202,7 @@\n     /** Responsible for decoding a message fragment and passing it to the appropriate message consumer. */\n \n     private static final Logger _dispatcherLogger = Logger.getLogger(Dispatcher.class);\n+    private AtomicBoolean _firstDispatcher = new AtomicBoolean(true);\n \n     private class Dispatcher extends Thread\n     {\n@@ -327,8 +328,11 @@ private void dispatchMessage(UnprocessedMessage message)\n                                                    \") is closed rejecting(requeue)...\");\n                         }\n                     }\n-\n-                    rejectMessage(message, true);\n+                    // Don't reject if we're already closing\n+                    if (!_closed.get())\n+                    {\n+                        rejectMessage(message, true);\n+                    }\n                 }\n                 else\n                 {\n@@ -995,42 +999,42 @@ public void run()\n         throw new java.lang.UnsupportedOperationException();\n     }\n \n-    public MessageProducer createProducer(Destination destination, boolean mandatory,\n-                                          boolean immediate, boolean waitUntilSent)\n+    public BasicMessageProducer createProducer(Destination destination, boolean mandatory,\n+                                               boolean immediate, boolean waitUntilSent)\n             throws JMSException\n     {\n         return createProducerImpl(destination, mandatory, immediate, waitUntilSent);\n     }\n \n-    public MessageProducer createProducer(Destination destination, boolean mandatory, boolean immediate)\n+    public BasicMessageProducer createProducer(Destination destination, boolean mandatory, boolean immediate)\n             throws JMSException\n     {\n         return createProducerImpl(destination, mandatory, immediate);\n     }\n \n-    public MessageProducer createProducer(Destination destination, boolean immediate)\n+    public BasicMessageProducer createProducer(Destination destination, boolean immediate)\n             throws JMSException\n     {\n         return createProducerImpl(destination, DEFAULT_MANDATORY, immediate);\n     }\n \n-    public MessageProducer createProducer(Destination destination) throws JMSException\n+    public BasicMessageProducer createProducer(Destination destination) throws JMSException\n     {\n         return createProducerImpl(destination, DEFAULT_MANDATORY, DEFAULT_IMMEDIATE);\n     }\n \n-    private org.apache.qpid.jms.MessageProducer createProducerImpl(Destination destination, boolean mandatory,\n-                                                                   boolean immediate)\n+    private BasicMessageProducer createProducerImpl(Destination destination, boolean mandatory,\n+                                                    boolean immediate)\n             throws JMSException\n     {\n         return createProducerImpl(destination, mandatory, immediate, false);\n     }\n \n-    private org.apache.qpid.jms.MessageProducer createProducerImpl(final Destination destination, final boolean mandatory,\n-                                                                   final boolean immediate, final boolean waitUntilSent)\n+    private BasicMessageProducer createProducerImpl(final Destination destination, final boolean mandatory,\n+                                                    final boolean immediate, final boolean waitUntilSent)\n             throws JMSException\n     {\n-        return (org.apache.qpid.jms.MessageProducer) new FailoverSupport()\n+        return (BasicMessageProducer) new FailoverSupport()\n         {\n             public Object operation() throws JMSException\n             {\n@@ -1248,8 +1252,10 @@ public Object operation() throws JMSException\n                 {\n                     JMSException ex = new JMSException(\"Error registering consumer: \" + e);\n \n-                    //todo remove\n-                    e.printStackTrace();\n+                    if (_logger.isDebugEnabled())\n+                    {\n+                        e.printStackTrace();\n+                    }\n                     ex.setLinkedException(e);\n                     throw ex;\n                 }\n@@ -1926,6 +1932,24 @@ void setHasMessageListeners()\n \n     synchronized void startDistpatcherIfNecessary()\n     {\n+        if (Boolean.parseBoolean(System.getProperties().getProperty(\"REGISTER_CONSUMERS_FLOWED\", \"false\")))\n+        {\n+//            if (!connectionStopped)\n+            {\n+                if (isSuspended() && _firstDispatcher.getAndSet(false))\n+                {\n+                    try\n+                    {\n+                        suspendChannel(false);\n+                    }\n+                    catch (AMQException e)\n+                    {\n+                        _logger.info(\"Suspending channel threw an exception:\" + e);\n+                    }\n+                }\n+            }\n+        }\n+\n         startDistpatcherIfNecessary(false);\n     }\n \n@@ -1974,6 +1998,27 @@ void registerConsumer(BasicMessageConsumer consumer, boolean nowait) throws AMQE\n \n         bindQueue(amqd, queueName, protocolHandler, consumer.getRawSelectorFieldTable());\n \n+        // The dispatcher will be null if we have just created this session\n+        // so suspend the channel before we register our consumer so that we don't\n+        // start prefetching until a receive/mListener is set.\n+        if (Boolean.parseBoolean(System.getProperties().getProperty(\"REGISTER_CONSUMERS_FLOWED\", \"false\")))\n+        {\n+            if (_dispatcher == null)\n+            {\n+                if (!isSuspended())\n+                {\n+                    try\n+                    {\n+                        suspendChannel(true);\n+                    }\n+                    catch (AMQException e)\n+                    {\n+                        _logger.info(\"Suspending channel threw an exception:\" + e);\n+                    }\n+                }\n+            }\n+        }\n+\n         try\n         {\n             consumeFromQueue(consumer, queueName, protocolHandler, nowait, consumer.getMessageSelector());\n@@ -2089,7 +2134,7 @@ public void confirmConsumerCancelled(AMQShortString consumerTag)\n         // Remove the consumer from the map\n         BasicMessageConsumer consumer = (BasicMessageConsumer) _consumers.get(consumerTag);\n         if (consumer != null)\n-        {            \n+        {\n //            fixme this isn't right.. needs to check if _queue contains data for this consumer\n             if (consumer.isAutoClose())// && _queue.isEmpty())\n             {",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/AMQSession.java",
                "sha": "8bb5b622f7c74855d47308a6e52ebe315a462429",
                "status": "modified"
            },
            {
                "additions": 95,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java",
                "changes": 164,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 69,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java",
                "patch": "@@ -20,9 +20,9 @@\n  */\n package org.apache.qpid.client;\n \n+import java.util.Arrays;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Arrays;\n import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.TimeUnit;\n@@ -34,6 +34,7 @@\n import javax.jms.MessageListener;\n \n import org.apache.log4j.Logger;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.client.message.AbstractJMSMessage;\n import org.apache.qpid.client.message.MessageFactoryRegistry;\n@@ -138,10 +139,10 @@\n     private boolean _noConsume;\n     private List<StackTraceElement> _closedStack = null;\n \n-    protected BasicMessageConsumer(int channelId, AMQConnection connection, AMQDestination destination, String messageSelector,\n-                                   boolean noLocal, MessageFactoryRegistry messageFactory, AMQSession session,\n-                                   AMQProtocolHandler protocolHandler, FieldTable rawSelectorFieldTable,\n-                                   int prefetchHigh, int prefetchLow, boolean exclusive, int acknowledgeMode, boolean noConsume, boolean autoClose)\n+    protected BasicMessageConsumer(int channelId, AMQConnection connection, AMQDestination destination,\n+                                   String messageSelector, boolean noLocal, MessageFactoryRegistry messageFactory, AMQSession session,\n+                                   AMQProtocolHandler protocolHandler, FieldTable rawSelectorFieldTable, int prefetchHigh, int prefetchLow,\n+                                   boolean exclusive, int acknowledgeMode, boolean noConsume, boolean autoClose)\n     {\n         _channelId = channelId;\n         _connection = connection;\n@@ -160,7 +161,7 @@ protected BasicMessageConsumer(int channelId, AMQConnection connection, AMQDesti\n         _autoClose = autoClose;\n         _noConsume = noConsume;\n \n-        //Force queue browsers not to use acknowledge modes.\n+        // Force queue browsers not to use acknowledge modes.\n         if (_noConsume)\n         {\n             _acknowledgeMode = Session.NO_ACKNOWLEDGE;\n@@ -175,12 +176,14 @@ public AMQDestination getDestination()\n     public String getMessageSelector() throws JMSException\n     {\n         checkPreConditions();\n+\n         return _messageSelector;\n     }\n \n     public MessageListener getMessageListener() throws JMSException\n     {\n         checkPreConditions();\n+\n         return _messageListener.get();\n     }\n \n@@ -198,14 +201,14 @@ public void setMessageListener(final MessageListener messageListener) throws JMS\n     {\n         checkPreConditions();\n \n-        //if the current listener is non-null and the session is not stopped, then\n-        //it is an error to call this method.\n+        // if the current listener is non-null and the session is not stopped, then\n+        // it is an error to call this method.\n \n-        //i.e. it is only valid to call this method if\n+        // i.e. it is only valid to call this method if\n         //\n-        //    (a) the connection is stopped, in which case the dispatcher is not running\n-        //    OR\n-        //    (b) the listener is null AND we are not receiving synchronously at present\n+        // (a) the connection is stopped, in which case the dispatcher is not running\n+        // OR\n+        // (b) the listener is null AND we are not receiving synchronously at present\n         //\n \n         if (!_session.getAMQConnection().started())\n@@ -215,7 +218,8 @@ public void setMessageListener(final MessageListener messageListener) throws JMS\n \n             if (_logger.isDebugEnabled())\n             {\n-                _logger.debug(\"Session stopped : Message listener(\" + messageListener + \") set for destination \" + _destination);\n+                _logger.debug(\"Session stopped : Message listener(\" + messageListener + \") set for destination \"\n+                              + _destination);\n             }\n         }\n         else\n@@ -224,6 +228,7 @@ public void setMessageListener(final MessageListener messageListener) throws JMS\n             {\n                 throw new javax.jms.IllegalStateException(\"Another thread is already receiving synchronously.\");\n             }\n+\n             if (!_messageListener.compareAndSet(null, messageListener))\n             {\n                 throw new javax.jms.IllegalStateException(\"Attempt to alter listener while session is started.\");\n@@ -233,7 +238,7 @@ public void setMessageListener(final MessageListener messageListener) throws JMS\n \n             if (messageListener != null)\n             {\n-                //handle case where connection has already been started, and the dispatcher has alreaded started\n+                // handle case where connection has already been started, and the dispatcher has alreaded started\n                 // putting values on the _synchronousQueue\n \n                 synchronized (_session)\n@@ -263,10 +268,12 @@ private void acquireReceiving() throws JMSException\n         {\n             throw new javax.jms.IllegalStateException(\"Another thread is already receiving.\");\n         }\n+\n         if (isMessageListenerSet())\n         {\n             throw new javax.jms.IllegalStateException(\"A listener has already been set.\");\n         }\n+\n         _receivingThread = Thread.currentThread();\n     }\n \n@@ -331,6 +338,7 @@ public Message receive(long l) throws JMSException\n             {\n                 return null;\n             }\n+\n             Object o = null;\n             if (l > 0)\n             {\n@@ -340,6 +348,7 @@ public Message receive(long l) throws JMSException\n             {\n                 o = _synchronousQueue.take();\n             }\n+\n             final AbstractJMSMessage m = returnMessageOrThrow(o);\n             if (m != null)\n             {\n@@ -352,6 +361,7 @@ public Message receive(long l) throws JMSException\n         catch (InterruptedException e)\n         {\n             _logger.warn(\"Interrupted: \" + e);\n+\n             return null;\n         }\n         finally\n@@ -365,6 +375,7 @@ private boolean closeOnAutoClose() throws JMSException\n         if (isAutoClose() && _closeWhenNoMessages && _synchronousQueue.isEmpty())\n         {\n             close(false);\n+\n             return true;\n         }\n         else\n@@ -387,6 +398,7 @@ public Message receiveNoWait() throws JMSException\n             {\n                 return null;\n             }\n+\n             Object o = _synchronousQueue.poll();\n             final AbstractJMSMessage m = returnMessageOrThrow(o);\n             if (m != null)\n@@ -414,8 +426,7 @@ public Message receiveNoWait() throws JMSException\n      * @throws JMSException if the argument is a throwable. If it is a JMSException it is rethrown as is, but if not a\n      *                      JMSException is created with the linked exception set appropriately\n      */\n-    private AbstractJMSMessage returnMessageOrThrow(Object o)\n-            throws JMSException\n+    private AbstractJMSMessage returnMessageOrThrow(Object o) throws JMSException\n     {\n         // errors are passed via the queue too since there is no way of interrupting the poll() via the API.\n         if (o instanceof Throwable)\n@@ -425,6 +436,7 @@ private AbstractJMSMessage returnMessageOrThrow(Object o)\n             {\n                 e.setLinkedException((Exception) o);\n             }\n+\n             throw e;\n         }\n         else\n@@ -433,15 +445,14 @@ private AbstractJMSMessage returnMessageOrThrow(Object o)\n         }\n     }\n \n-\n     public void close() throws JMSException\n     {\n         close(true);\n     }\n \n     public void close(boolean sendClose) throws JMSException\n     {\n-        //synchronized (_closed)\n+        // synchronized (_closed)\n \n         if (_logger.isInfoEnabled())\n         {\n@@ -456,22 +467,23 @@ public void close(boolean sendClose) throws JMSException\n                 {\n                     if (_closedStack != null)\n                     {\n-                        _logger.trace(_consumerTag + \" close():\" + Arrays.asList(Thread.currentThread().getStackTrace()).subList(3, 6));\n+                        _logger.trace(_consumerTag + \" close():\"\n+                                      + Arrays.asList(Thread.currentThread().getStackTrace()).subList(3, 6));\n                         _logger.trace(_consumerTag + \" previously:\" + _closedStack.toString());\n                     }\n                     else\n                     {\n                         _closedStack = Arrays.asList(Thread.currentThread().getStackTrace()).subList(3, 6);\n                     }\n                 }\n+\n                 if (sendClose)\n                 {\n                     // TODO: Be aware of possible changes to parameter order as versions change.\n-                    final AMQFrame cancelFrame = BasicCancelBody.createAMQFrame(_channelId,\n-                                                                                _protocolHandler.getProtocolMajorVersion(),\n-                                                                                _protocolHandler.getProtocolMinorVersion(),\n-                                                                                _consumerTag,    // consumerTag\n-                                                                                false);    // nowait\n+                    final AMQFrame cancelFrame =\n+                            BasicCancelBody.createAMQFrame(_channelId, _protocolHandler.getProtocolMajorVersion(),\n+                                                           _protocolHandler.getProtocolMinorVersion(), _consumerTag, // consumerTag\n+                                                           false); // nowait\n \n                     try\n                     {\n@@ -485,25 +497,28 @@ public void close(boolean sendClose) throws JMSException\n                     }\n                     catch (AMQException e)\n                     {\n-                        _logger.error(\"Error closing consumer: \" + e, e);\n-                        throw new JMSException(\"Error closing consumer: \" + e);\n+                        // _logger.error(\"Error closing consumer: \" + e, e);            \n+                        JMSException jmse = new JMSException(\"Error closing consumer: \" + e);\n+                        jmse.setLinkedException(e);\n+                        throw jmse;\n                     }\n                 }\n                 else\n                 {\n-//                    //fixme this probably is not right\n-//                    if (!isNoConsume())\n-                    {   //done in BasicCancelOK Handler but not sending one so just deregister.\n+                    // //fixme this probably is not right\n+                    // if (!isNoConsume())\n+                    { // done in BasicCancelOK Handler but not sending one so just deregister.\n                         deregisterConsumer();\n                     }\n                 }\n \n-                if (_messageListener != null && _receiving.get())\n+                if ((_messageListener != null) && _receiving.get())\n                 {\n                     if (_logger.isInfoEnabled())\n                     {\n                         _logger.info(\"Interrupting thread: \" + _receivingThread);\n                     }\n+\n                     _receivingThread.interrupt();\n                 }\n             }\n@@ -516,15 +531,16 @@ public void close(boolean sendClose) throws JMSException\n      */\n     void markClosed()\n     {\n-//        synchronized (_closed)\n+        // synchronized (_closed)\n         {\n             _closed.set(true);\n \n             if (_logger.isTraceEnabled())\n             {\n                 if (_closedStack != null)\n                 {\n-                    _logger.trace(_consumerTag + \" markClosed():\" + Arrays.asList(Thread.currentThread().getStackTrace()).subList(3, 8));\n+                    _logger.trace(_consumerTag + \" markClosed():\"\n+                                  + Arrays.asList(Thread.currentThread().getStackTrace()).subList(3, 8));\n                     _logger.trace(_consumerTag + \" previously:\" + _closedStack.toString());\n                 }\n                 else\n@@ -533,6 +549,7 @@ void markClosed()\n                 }\n             }\n         }\n+\n         deregisterConsumer();\n     }\n \n@@ -551,22 +568,22 @@ void notifyMessage(UnprocessedMessage messageFrame, int channelId)\n         {\n             _logger.debug(\"notifyMessage called with message number \" + messageFrame.getDeliverBody().deliveryTag);\n         }\n+\n         try\n         {\n-            AbstractJMSMessage jmsMessage = _messageFactory.createMessage(messageFrame.getDeliverBody().deliveryTag,\n-                                                                          messageFrame.getDeliverBody().redelivered,\n-                                                                          messageFrame.getDeliverBody().exchange,\n-                                                                          messageFrame.getDeliverBody().routingKey,\n-                                                                          messageFrame.getContentHeader(),\n-                                                                          messageFrame.getBodies());\n+            AbstractJMSMessage jmsMessage =\n+                    _messageFactory.createMessage(messageFrame.getDeliverBody().deliveryTag,\n+                                                  messageFrame.getDeliverBody().redelivered, messageFrame.getDeliverBody().exchange,\n+                                                  messageFrame.getDeliverBody().routingKey, messageFrame.getContentHeader(), messageFrame.getBodies());\n \n             if (debug)\n             {\n                 _logger.debug(\"Message is of type: \" + jmsMessage.getClass().getName());\n             }\n-//            synchronized (_closed)\n+            // synchronized (_closed)\n+\n             {\n-//                if (!_closed.get())\n+                // if (!_closed.get())\n                 {\n \n                     jmsMessage.setConsumer(this);\n@@ -575,12 +592,12 @@ void notifyMessage(UnprocessedMessage messageFrame, int channelId)\n \n                     notifyMessage(jmsMessage, channelId);\n                 }\n-//                else\n-//                {\n-//                    _logger.error(\"MESSAGE REJECTING!\");\n-//                    _session.rejectMessage(jmsMessage, true);\n-//                    //_logger.error(\"MESSAGE JUST DROPPED!\");\n-//                }\n+                // else\n+                // {\n+                // _logger.error(\"MESSAGE REJECTING!\");\n+                // _session.rejectMessage(jmsMessage, true);\n+                // //_logger.error(\"MESSAGE JUST DROPPED!\");\n+                // }\n             }\n         }\n         catch (Exception e)\n@@ -606,11 +623,11 @@ public void notifyMessage(AbstractJMSMessage jmsMessage, int channelId)\n         {\n             if (isMessageListenerSet())\n             {\n-                //we do not need a lock around the test above, and the dispatch below as it is invalid\n-                //for an application to alter an installed listener while the session is started\n-//                synchronized (_closed)\n+                // we do not need a lock around the test above, and the dispatch below as it is invalid\n+                // for an application to alter an installed listener while the session is started\n+                // synchronized (_closed)\n                 {\n-//                    if (!_closed.get())\n+                    // if (!_closed.get())\n                     {\n \n                         preApplicationProcessing(jmsMessage);\n@@ -641,9 +658,11 @@ private void preDeliver(AbstractJMSMessage msg)\n     {\n         switch (_acknowledgeMode)\n         {\n+\n             case Session.PRE_ACKNOWLEDGE:\n                 _session.acknowledgeMessage(msg.getDeliveryTag(), false);\n                 break;\n+\n             case Session.CLIENT_ACKNOWLEDGE:\n                 // we set the session so that when the user calls acknowledge() it can call the method on session\n                 // to send out the appropriate frame\n@@ -657,17 +676,21 @@ private void postDeliver(AbstractJMSMessage msg) throws JMSException\n         msg.setJMSDestination(_destination);\n         switch (_acknowledgeMode)\n         {\n+\n             case Session.CLIENT_ACKNOWLEDGE:\n                 if (isNoConsume())\n                 {\n                     _session.acknowledgeMessage(msg.getDeliveryTag(), false);\n                 }\n+\n                 break;\n+\n             case Session.DUPS_OK_ACKNOWLEDGE:\n                 if (++_outstanding >= _prefetchHigh)\n                 {\n                     _dups_ok_acknowledge_send = true;\n                 }\n+\n                 if (_outstanding <= _prefetchLow)\n                 {\n                     _dups_ok_acknowledge_send = false;\n@@ -680,14 +703,18 @@ private void postDeliver(AbstractJMSMessage msg) throws JMSException\n                         _session.acknowledgeMessage(msg.getDeliveryTag(), true);\n                     }\n                 }\n+\n                 break;\n+\n             case Session.AUTO_ACKNOWLEDGE:\n                 // we do not auto ack a message if the application code called recover()\n                 if (!_session.isInRecovery())\n                 {\n                     _session.acknowledgeMessage(msg.getDeliveryTag(), false);\n                 }\n+\n                 break;\n+\n             case Session.SESSION_TRANSACTED:\n                 if (isNoConsume())\n                 {\n@@ -697,6 +724,7 @@ private void postDeliver(AbstractJMSMessage msg) throws JMSException\n                 {\n                     _receivedDeliveryTags.add(msg.getDeliveryTag());\n                 }\n+\n                 break;\n         }\n     }\n@@ -721,14 +749,15 @@ void acknowledgeLastDelivered()\n \n     void notifyError(Throwable cause)\n     {\n-//        synchronized (_closed)\n+        // synchronized (_closed)\n         {\n             _closed.set(true);\n             if (_logger.isTraceEnabled())\n             {\n                 if (_closedStack != null)\n                 {\n-                    _logger.trace(_consumerTag + \" notifyError():\" + Arrays.asList(Thread.currentThread().getStackTrace()).subList(3, 8));\n+                    _logger.trace(_consumerTag + \" notifyError():\"\n+                                  + Arrays.asList(Thread.currentThread().getStackTrace()).subList(3, 8));\n                     _logger.trace(_consumerTag + \" previously\" + _closedStack.toString());\n                 }\n                 else\n@@ -737,7 +766,7 @@ void notifyError(Throwable cause)\n                 }\n             }\n         }\n-        //QPID-293 can \"request redelivery of this error through dispatcher\"\n+        // QPID-293 can \"request redelivery of this error through dispatcher\"\n \n         // we have no way of propagating the exception to a message listener - a JMS limitation - so we\n         // deal with the case where we have a synchronous receive() waiting for a message to arrive\n@@ -749,10 +778,10 @@ void notifyError(Throwable cause)\n                 _logger.debug(\"Passed exception to synchronous queue for propagation to receive()\");\n             }\n         }\n+\n         deregisterConsumer();\n     }\n \n-\n     /**\n      * Perform cleanup to deregister this consumer. This occurs when closing the consumer in both the clean case and in\n      * the case of an error occurring.\n@@ -782,7 +811,7 @@ private void checkPreConditions() throws JMSException\n \n         this.checkNotClosed();\n \n-        if (_session == null || _session.isClosed())\n+        if ((_session == null) || _session.isClosed())\n         {\n             throw new javax.jms.IllegalStateException(\"Invalid Session\");\n         }\n@@ -817,7 +846,6 @@ public boolean isAutoClose()\n         return _autoClose;\n     }\n \n-\n     public boolean isNoConsume()\n     {\n         return _noConsume;\n@@ -827,10 +855,7 @@ public void closeWhenNoMessages(boolean b)\n     {\n         _closeWhenNoMessages = b;\n \n-        if (_closeWhenNoMessages\n-            && _synchronousQueue.isEmpty()\n-            && _receiving.get()\n-            && _messageListener != null)\n+        if (_closeWhenNoMessages && _synchronousQueue.isEmpty() && _receiving.get() && (_messageListener != null))\n         {\n             _receivingThread.interrupt();\n         }\n@@ -846,13 +871,13 @@ public void rollback()\n             _logger.debug(\"Rejecting received messages in _receivedDTs (RQ)\");\n         }\n \n-        //rollback received but not committed messages\n+        // rollback received but not committed messages\n         while (!_receivedDeliveryTags.isEmpty())\n         {\n             if (_logger.isDebugEnabled())\n             {\n-                _logger.debug(\"Rejecting the messages(\" + _receivedDeliveryTags.size() + \") in _receivedDTs (RQ)\" +\n-                              \"for consumer with tag:\" + _consumerTag);\n+                _logger.debug(\"Rejecting the messages(\" + _receivedDeliveryTags.size() + \") in _receivedDTs (RQ)\"\n+                              + \"for consumer with tag:\" + _consumerTag);\n             }\n \n             Long tag = _receivedDeliveryTags.poll();\n@@ -876,14 +901,15 @@ public void rollback()\n             }\n         }\n \n-        //rollback pending messages\n+        // rollback pending messages\n         if (_synchronousQueue.size() > 0)\n         {\n             if (_logger.isDebugEnabled())\n             {\n-                _logger.debug(\"Rejecting the messages(\" + _synchronousQueue.size() + \") in _syncQueue (PRQ)\" +\n-                              \"for consumer with tag:\" + _consumerTag);\n+                _logger.debug(\"Rejecting the messages(\" + _synchronousQueue.size() + \") in _syncQueue (PRQ)\"\n+                              + \"for consumer with tag:\" + _consumerTag);\n             }\n+\n             Iterator iterator = _synchronousQueue.iterator();\n \n             while (iterator.hasNext())\n@@ -898,13 +924,14 @@ public void rollback()\n                     {\n                         _logger.trace(\"Rejected message:\" + ((AbstractJMSMessage) o).getDeliveryTag());\n                     }\n+\n                     iterator.remove();\n \n                 }\n                 else\n                 {\n-                    _logger.error(\"Queue contained a :\" + o.getClass() +\n-                                  \" unable to reject as it is not an AbstractJMSMessage. Will be cleared\");\n+                    _logger.error(\"Queue contained a :\" + o.getClass()\n+                                  + \" unable to reject as it is not an AbstractJMSMessage. Will be cleared\");\n                     iterator.remove();\n                 }\n             }\n@@ -919,7 +946,6 @@ public void rollback()\n         }\n     }\n \n-\n     public String debugIdentity()\n     {\n         return String.valueOf(_consumerTag);",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java",
                "sha": "1c3cdbcb657aa71dcbdc75d900aae01af0678b17",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/BasicMessageProducer.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/BasicMessageProducer.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 3,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/BasicMessageProducer.java",
                "patch": "@@ -21,6 +21,7 @@\n package org.apache.qpid.client;\n \n import java.io.UnsupportedEncodingException;\n+import java.util.UUID;\n \n import javax.jms.BytesMessage;\n import javax.jms.DeliveryMode;\n@@ -118,6 +119,9 @@\n     private final boolean _mandatory;\n \n     private final boolean _waitUntilSent;\n+    \n+    private boolean _disableMessageId;\n+        \n     private static final ContentBody[] NO_CONTENT_BODIES = new ContentBody[0];\n \n     protected BasicMessageProducer(AMQConnection connection, AMQDestination destination, boolean transacted, int channelId,\n@@ -172,15 +176,14 @@ public void setDisableMessageID(boolean b) throws JMSException\n     {\n         checkPreConditions();\n         checkNotClosed();\n-        // IGNORED\n+        _disableMessageId = b;\n     }\n \n     public boolean getDisableMessageID() throws JMSException\n     {\n         checkNotClosed();\n \n-        // Always false for AMQP\n-        return false;\n+        return _disableMessageId;\n     }\n \n     public void setDisableMessageTimestamp(boolean b) throws JMSException\n@@ -450,6 +453,18 @@ protected void sendImpl(AMQDestination destination, Message origMessage, int del\n         origMessage.setJMSDestination(destination);\n \n         AbstractJMSMessage message = convertToNativeMessage(origMessage);\n+        \n+        if(_disableMessageId)\n+        {\n+        \tmessage.setJMSMessageID(null);\n+        }\n+        else\n+        {\n+        \tif (message.getJMSMessageID() == null)\n+        \t{\n+        \t\tmessage.setJMSMessageID(UUID.randomUUID().toString());\n+        \t}\n+        }\n \n         int type;\n         if (destination instanceof Topic)\n@@ -667,4 +682,9 @@ public AMQSession getSession()\n     {\n         return _session;\n     }\n+\n+    public boolean isBound(AMQDestination destination) throws JMSException\n+    {\n+        return _session.isQueueBound(destination.getExchangeName(),null,destination.getRoutingKey());\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/BasicMessageProducer.java",
                "sha": "bd7cc945821fe523cd27e2d129a6b8d43576baa5",
                "status": "modified"
            },
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/JMSAMQException.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/JMSAMQException.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/JMSAMQException.java",
                "patch": "@@ -1,3 +1,23 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n /*\n  *\n  * Copyright (c) 2006 The Apache Software Foundation\n@@ -22,10 +42,35 @@\n import org.apache.qpid.AMQException;\n \n /**\n+ * JMSException does not accept wrapped exceptions in its constructor. Presumably this is because it is a relatively old\n+ * Java exception class, before this was added as a default to Throwable. This exception class accepts wrapped exceptions\n+ * as well as error messages, through its constructor, but is a JMSException.\n+ *\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\n+ * <tr><th> Responsibilities <th> Collaborations\n+ * <tr><td> Accept wrapped exceptions as a JMSException.\n+ * </table>\n+ *\n  * @author Apache Software Foundation\n  */\n public class JMSAMQException extends JMSException\n {\n+    /**\n+     * Creates a JMSException, wrapping another exception class.\n+     *\n+     * @param message The error message.\n+     * @param cause   The underlying exception that caused this one. May be null if none is to be set.\n+     */\n+    public JMSAMQException(String message, Exception cause)\n+    {\n+        super(message);\n+\n+        if (cause != null)\n+        {\n+            setLinkedException(cause);\n+        }\n+    }\n+\n     public JMSAMQException(AMQException s)\n     {\n         super(s.getMessage(), String.valueOf(s.getErrorCode()));",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/JMSAMQException.java",
                "sha": "d1237cff493cf35ce6cfd4a15572f552b1ba71bf",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/QueueSenderAdapter.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/QueueSenderAdapter.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 5,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/QueueSenderAdapter.java",
                "patch": "@@ -7,14 +7,15 @@\n import javax.jms.MessageProducer;\n import javax.jms.Queue;\n import javax.jms.QueueSender;\n+import javax.jms.InvalidDestinationException;\n \n public class QueueSenderAdapter implements QueueSender {\n \n-\tprivate MessageProducer _delegate;\n+\tprivate BasicMessageProducer _delegate;\n \tprivate Queue _queue;\n \tprivate boolean closed = false;\n \t\n-\tpublic QueueSenderAdapter(MessageProducer msgProducer, Queue queue){\n+\tpublic QueueSenderAdapter(BasicMessageProducer msgProducer, Queue queue){\n \t\t_delegate = msgProducer;\n \t\t_queue = queue;\n \t}\n@@ -122,12 +123,13 @@ public void setTimeToLive(long timeToLive) throws JMSException {\n \t\t_delegate.setTimeToLive(timeToLive);\n \t}\n \n-    private void checkPreConditions() throws IllegalStateException, IllegalStateException\n+    private void checkPreConditions() throws JMSException\n     {\n         checkPreConditions(_queue);\n     }\n \n-    private void checkPreConditions(Queue queue) throws IllegalStateException, IllegalStateException {\n+    private void checkPreConditions(Queue queue) throws JMSException\n+    {\n \t\tif (closed){\n \t\t\tthrow new javax.jms.IllegalStateException(\"Publisher is closed\");\n \t\t}\n@@ -137,5 +139,28 @@ private void checkPreConditions(Queue queue) throws IllegalStateException, Illeg\n \t\tif(session == null || session.isClosed()){\n \t\t\tthrow new javax.jms.IllegalStateException(\"Invalid Session\");\n \t\t}\n-\t}\n+\n+        if(!(queue instanceof AMQDestination))\n+        {\n+            throw new InvalidDestinationException(\"Queue: \" + queue + \" is not a valid Qpid queue\");\n+        }\n+        AMQDestination destination = (AMQDestination) queue;\n+        if(!destination.isValidated() && checkQueueBeforePublish())\n+        {\n+\n+            if (_delegate.isBound(destination))\n+            {\n+                destination.setValidated(true);\n+            }\n+            else\n+            {\n+                throw new InvalidDestinationException(\"Queue: \" + queue + \" is not a valid destination (no bindings on server\");\n+            }\n+        }\n+    }\n+\n+    private boolean checkQueueBeforePublish()\n+    {\n+        return \"true\".equalsIgnoreCase(System.getProperty(\"org.apache.qpid.client.verifyQueueBindingBeforePublish\", \"true\"));\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/QueueSenderAdapter.java",
                "sha": "e0c4b613336ad9cdcede75c6834d00d3ae8c5753",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/TopicPublisherAdapter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/TopicPublisherAdapter.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/TopicPublisherAdapter.java",
                "patch": "@@ -175,5 +175,10 @@ private void checkTopic(Destination topic) throws InvalidDestinationException\n         {\n             throw new InvalidDestinationException(\"Destination \" + topic + \" is not a topic\");\n         }\n+        if(!(topic instanceof AMQDestination))\n+        {\n+            throw new InvalidDestinationException(\"Destination \" + topic + \" is not a Qpid topic\");\n+        }\n+\n     }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/TopicPublisherAdapter.java",
                "sha": "02a408465b9f3bdc2630080e61c12910d89981c3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/handler/ChannelCloseMethodHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/handler/ChannelCloseMethodHandler.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/handler/ChannelCloseMethodHandler.java",
                "patch": "@@ -94,6 +94,8 @@ else if (errorCode == AMQConstant.INVALID_ROUTING_KEY)\n             }\n \n         }\n+        //fixme why is this only done when the close is expected...\n+        // should the above forced closes not also cause a close?\n         protocolSession.channelClosed(evt.getChannelId(), errorCode, String.valueOf(reason));\n     }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/handler/ChannelCloseMethodHandler.java",
                "sha": "f62baf2c3a296437a8a8e76d64e6bacb807759d4",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/message/AbstractBytesMessage.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/message/AbstractBytesMessage.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 2,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/message/AbstractBytesMessage.java",
                "patch": "@@ -27,6 +27,7 @@\n import javax.jms.MessageEOFException;\n \n import org.apache.mina.common.ByteBuffer;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n@@ -72,7 +73,7 @@ protected void allocateInitialBuffer()\n     }\n \n     AbstractBytesMessage(long messageNbr, ContentHeaderBody contentHeader, AMQShortString exchange,\n-                         AMQShortString routingKey, ByteBuffer data) throws AMQException\n+        AMQShortString routingKey, ByteBuffer data) throws AMQException\n     {\n         // TODO: this casting is ugly. Need to review whole ContentHeaderBody idea\n         super(messageNbr, (BasicContentHeaderProperties) contentHeader.properties, exchange, routingKey, data);\n@@ -93,7 +94,9 @@ public String toBodyString() throws JMSException\n         }\n         catch (IOException e)\n         {\n-            throw new JMSException(e.toString());\n+            JMSException jmse = new JMSException(e.toString());\n+            jmse.setLinkedException(e);\n+            throw jmse;\n         }\n     }\n \n@@ -112,19 +115,22 @@ private String getText() throws IOException\n         {\n             return null;\n         }\n+\n         int pos = _data.position();\n         _data.rewind();\n         // one byte left is for the end of frame marker\n         if (_data.remaining() == 0)\n         {\n             // this is really redundant since pos must be zero\n             _data.position(pos);\n+\n             return null;\n         }\n         else\n         {\n             String data = _data.getString(Charset.forName(\"UTF8\").newDecoder());\n             _data.position(pos);\n+\n             return data;\n         }\n     }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/message/AbstractBytesMessage.java",
                "sha": "af254fbbaf6a17d3f0b934cf3b4a8b5addfe3695",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 8,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.Collections;\n import java.util.Enumeration;\n import java.util.Map;\n+import java.util.UUID;\n \n import javax.jms.Destination;\n import javax.jms.JMSException;\n@@ -32,12 +33,7 @@\n import org.apache.commons.collections.map.ReferenceMap;\n import org.apache.mina.common.ByteBuffer;\n import org.apache.qpid.AMQException;\n-import org.apache.qpid.client.AMQDestination;\n-import org.apache.qpid.client.AMQQueue;\n-import org.apache.qpid.client.AMQTopic;\n-import org.apache.qpid.client.AMQUndefinedDestination;\n-import org.apache.qpid.client.BasicMessageConsumer;\n-import org.apache.qpid.client.CustomJMSXProperty;\n+import org.apache.qpid.client.*;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n import org.apache.qpid.framing.FieldTable;\n@@ -123,7 +119,7 @@ public String getJMSMessageID() throws JMSException\n     {\n         if (getContentHeaderProperties().getMessageIdAsString() == null)\n         {\n-            getContentHeaderProperties().setMessageId(\"ID:\" + _deliveryTag);\n+            getContentHeaderProperties().setMessageId(\"ID:\" + UUID.randomUUID());\n         }\n \n         return getContentHeaderProperties().getMessageIdAsString();\n@@ -183,7 +179,7 @@ public Destination getJMSReplyTo() throws JMSException\n                 }\n                 catch (URLSyntaxException e)\n                 {\n-                    throw new JMSException(\"Illegal value in JMS_ReplyTo property: \" + replyToEncoding);\n+                    throw new JMSAMQException(\"Illegal value in JMS_ReplyTo property: \" + replyToEncoding, e);\n                 }\n \n                 _destinationCache.put(replyToEncoding, dest);",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java",
                "sha": "f87b4027f6ccdbb25d8d7ac5215576950a9bb925",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/message/JMSHeaderAdapter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/message/JMSHeaderAdapter.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/message/JMSHeaderAdapter.java",
                "patch": "@@ -384,7 +384,9 @@ public void setObject(String string, Object object) throws JMSException\n         }\r\n         catch (AMQPInvalidClassException aice)\r\n         {\r\n-            throw new MessageFormatException(\"Only primatives are allowed object is:\" + object.getClass());\r\n+            MessageFormatException mfe = new MessageFormatException(\"Only primatives are allowed object is:\" + object.getClass());\r\n+            mfe.setLinkedException(aice);\r\n+            throw mfe;\r\n         }\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/message/JMSHeaderAdapter.java",
                "sha": "348a0bd152142850f4a35c8e681a2b10470f3495",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/message/JMSObjectMessage.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/message/JMSObjectMessage.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 10,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/message/JMSObjectMessage.java",
                "patch": "@@ -33,6 +33,7 @@\n import javax.jms.ObjectMessage;\n \n import org.apache.mina.common.ByteBuffer;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n@@ -61,14 +62,15 @@ private JMSObjectMessage(ByteBuffer data)\n             _data = ByteBuffer.allocate(DEFAULT_BUFFER_SIZE);\n             _data.setAutoExpand(true);\n         }\n+\n         getContentHeaderProperties().setContentType(MIME_TYPE_SHORT_STRING);\n     }\n \n     /**\n      * Creates read only message for delivery to consumers\n      */\n-    JMSObjectMessage(long messageNbr, ContentHeaderBody contentHeader, AMQShortString exchange,\n-                     AMQShortString routingKey, ByteBuffer data) throws AMQException\n+    JMSObjectMessage(long messageNbr, ContentHeaderBody contentHeader, AMQShortString exchange, AMQShortString routingKey,\n+        ByteBuffer data) throws AMQException\n     {\n         super(messageNbr, (BasicContentHeaderProperties) contentHeader.properties, exchange, routingKey, data);\n     }\n@@ -79,6 +81,7 @@ public void clearBodyImpl() throws JMSException\n         {\n             _data.release();\n         }\n+\n         _data = null;\n \n     }\n@@ -116,11 +119,13 @@ public void setObject(Serializable serializable) throws JMSException\n         }\n         catch (IOException e)\n         {\n-            throw new MessageFormatException(\"Message not serializable: \" + e);\n+            MessageFormatException mfe = new MessageFormatException(\"Message not serializable: \" + e);\n+            mfe.setLinkedException(e);\n+            throw mfe;\n         }\n \n     }\n-  \n+\n     public Serializable getObject() throws JMSException\n     {\n         ObjectInputStream in = null;\n@@ -133,17 +138,20 @@ public Serializable getObject() throws JMSException\n         {\n             _data.rewind();\n             in = new ObjectInputStream(_data.asInputStream());\n+\n             return (Serializable) in.readObject();\n         }\n         catch (IOException e)\n         {\n-            e.printStackTrace();\n-            throw new MessageFormatException(\"Could not deserialize message: \" + e);\n+            MessageFormatException mfe = new MessageFormatException(\"Could not deserialize message: \" + e);\n+            mfe.setLinkedException(e);\n+            throw mfe;\n         }\n         catch (ClassNotFoundException e)\n         {\n-            e.printStackTrace();\n-            throw new MessageFormatException(\"Could not deserialize message: \" + e);\n+            MessageFormatException mfe = new MessageFormatException(\"Could not deserialize message: \" + e);\n+            mfe.setLinkedException(e);\n+            throw mfe;\n         }\n         finally\n         {\n@@ -162,8 +170,7 @@ private static void close(InputStream in)\n             }\n         }\n         catch (IOException ignore)\n-        {\n-        }\n+        { }\n     }\n \n     private static String toString(ByteBuffer data)\n@@ -172,6 +179,7 @@ private static String toString(ByteBuffer data)\n         {\n             return null;\n         }\n+\n         int pos = data.position();\n         try\n         {",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/message/JMSObjectMessage.java",
                "sha": "caf8741280e0b676f41163c3f57bf63fe9c80f33",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 5,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java",
                "patch": "@@ -34,6 +34,7 @@\n import org.apache.qpid.AMQDisconnectedException;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.AMQTimeoutException;\n+import org.apache.qpid.AMQChannelClosedException;\n import org.apache.qpid.client.AMQConnection;\n import org.apache.qpid.client.AMQSession;\n import org.apache.qpid.client.SSLConfiguration;\n@@ -248,6 +249,12 @@ public void exceptionCaught(IoSession session, Throwable cause) throws Exception\n \n                 sessionClosed(session);\n             }\n+\n+            //FIXME Need to correctly handle other exceptions. Things like ...\n+//            if (cause instanceof AMQChannelClosedException)\n+            // which will cause the JMSSession to end due to a channel close and so that Session needs\n+            // to be removed from the map so we can correctly still call close without an exception when trying to close\n+            // the server closed session.  See also CloseChannelMethodHandler as the sessionClose is never called on exception\n         }\n         // we reach this point if failover was attempted and failed therefore we need to let the calling app\n         // know since we cannot recover the situation\n@@ -510,11 +517,6 @@ public void closeSession(AMQSession session) throws AMQException\n         _protocolSession.closeSession(session);\n     }\n \n-    public void closeConnection() throws AMQException\n-    {\n-        closeConnection(-1);\n-    }\n-\n     public void closeConnection(long timeout) throws AMQException\n     {\n         getStateManager().changeState(AMQState.CONNECTION_CLOSING);",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java",
                "sha": "5bc1555df79955cc1fccc092211c1a9afdf5304c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/security/CallbackHandlerRegistry.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/security/CallbackHandlerRegistry.properties?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/security/CallbackHandlerRegistry.properties",
                "patch": "@@ -16,5 +16,6 @@\n # specific language governing permissions and limitations\n # under the License.\n #\n+CallbackHandler.CRAM-MD5-HASHED=org.apache.qpid.client.security.UsernameHashedPasswordCallbackHandler\n CallbackHandler.CRAM-MD5=org.apache.qpid.client.security.UsernamePasswordCallbackHandler\n CallbackHandler.PLAIN=org.apache.qpid.client.security.UsernamePasswordCallbackHandler",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/security/CallbackHandlerRegistry.properties",
                "sha": "89ee8337f827e3079f910454ba74dc28f1734593",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 21,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.java",
                "patch": "@@ -20,10 +20,6 @@\n  */\n package org.apache.qpid.client.security;\n \n-import java.io.BufferedInputStream;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.security.Security;\n@@ -34,6 +30,7 @@\n \n import javax.security.sasl.SaslClientFactory;\n \n+\n import org.apache.log4j.Logger;\n \n import org.apache.qpid.util.FileUtils;\n@@ -50,14 +47,11 @@\n  * mechanism=fully.qualified.class.name\n  * </pre>\n  *\n- * <p/>Where mechanism is an IANA-registered mechanism name and the fully qualified class name refers to a\n- * class that implements javax.security.sasl.SaslClientFactory and provides the specified mechanism.\n+ * <p/>Where mechanism is an IANA-registered mechanism name and the fully qualified class name refers to a class that\n+ * implements javax.security.sasl.SaslClientFactory and provides the specified mechanism.\n  *\n- * <p><table id=\"crc\"><caption>CRC Card</caption>\n- * <tr><th> Responsibilities <th> Collaborations\n- * <tr><td> Parse SASL mechanism properties.\n- * <tr><td> Create and register security provider for SASL mechanisms.\n- * </table>\n+ * <p><table id=\"crc\"><caption>CRC Card</caption> <tr><th> Responsibilities <th> Collaborations <tr><td> Parse SASL\n+ * mechanism properties. <tr><td> Create and register security provider for SASL mechanisms. </table>\n  */\n public class DynamicSaslRegistrar\n {\n@@ -69,19 +63,16 @@\n     /** The default name of the SASL properties file resource. */\n     public static final String DEFAULT_RESOURCE_NAME = \"org/apache/qpid/client/security/DynamicSaslRegistrar.properties\";\n \n-    /**\n-     * Reads the properties file, and creates a dynamic security provider to register the SASL implementations\n-     * with.\n-     */\n+    /** Reads the properties file, and creates a dynamic security provider to register the SASL implementations with. */\n     public static void registerSaslProviders()\n     {\n         _logger.debug(\"public static void registerSaslProviders(): called\");\n \n         // Open the SASL properties file, using the default name is one is not specified.\n         String filename = System.getProperty(FILE_PROPERTY);\n         InputStream is =\n-            FileUtils.openFileOrDefaultResource(filename, DEFAULT_RESOURCE_NAME,\n-                                                DynamicSaslRegistrar.class.getClassLoader());\n+                FileUtils.openFileOrDefaultResource(filename, DEFAULT_RESOURCE_NAME,\n+                                                    DynamicSaslRegistrar.class.getClassLoader());\n \n         try\n         {\n@@ -94,7 +85,7 @@ public static void registerSaslProviders()\n \n             if (factories.size() > 0)\n             {\n-                Security.addProvider(new JCAProvider(factories));\n+                Security.insertProviderAt(new JCAProvider(factories), 0);\n                 _logger.debug(\"Dynamic SASL provider added as a security provider\");\n             }\n         }\n@@ -170,15 +161,15 @@ public static void registerSaslProviders()\n      * @return A map from SASL mechanism names to implementing client factory classes.\n      *\n      * @todo Why tree map here? Do really want mechanisms in alphabetical order? Seems more likely that the declared\n-     *       order of the mechanisms is intended to be preserved, so that they are registered in the declared order\n-     *       of preference. Consider LinkedHashMap instead.\n+     * order of the mechanisms is intended to be preserved, so that they are registered in the declared order of\n+     * preference. Consider LinkedHashMap instead.\n      */\n     private static Map<String, Class<? extends SaslClientFactory>> parseProperties(Properties props)\n     {\n         Enumeration e = props.propertyNames();\n \n         TreeMap<String, Class<? extends SaslClientFactory>> factoriesToRegister =\n-            new TreeMap<String, Class<? extends SaslClientFactory>>();\n+                new TreeMap<String, Class<? extends SaslClientFactory>>();\n \n         while (e.hasMoreElements())\n         {",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.java",
                "sha": "04db8044de999ff18a0390bb8fb0dbbb23c317e3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.properties?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.properties",
                "patch": "@@ -17,3 +17,4 @@\n # under the License.\n #\n AMQPLAIN=org.apache.qpid.client.security.amqplain.AmqPlainSaslClientFactory\n+CRAM-MD5-HASHED=org.apache.qpid.client.security.crammd5hashed.CRAMMD5HashedSaslClientFactory",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.properties",
                "sha": "1bff43142b56b6448685c52d0b220972c12faff5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/security/JCAProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/security/JCAProvider.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/security/JCAProvider.java",
                "patch": "@@ -52,7 +52,7 @@ public JCAProvider(Map<String, Class<? extends SaslClientFactory>> providerMap)\n         super(\"AMQSASLProvider\", 1.0, \"A JCA provider that registers all \"\n               + \"AMQ SASL providers that want to be registered\");\n         register(providerMap);\n-        Security.addProvider(this);\n+//        Security.addProvider(this);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/security/JCAProvider.java",
                "sha": "5bf120454eed8c04ca46f0a63425efced688d4ac",
                "status": "modified"
            },
            {
                "additions": 104,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/security/UsernameHashedPasswordCallbackHandler.java",
                "changes": 104,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/security/UsernameHashedPasswordCallbackHandler.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/security/UsernameHashedPasswordCallbackHandler.java",
                "patch": "@@ -0,0 +1,104 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.client.security;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.NameCallback;\n+import javax.security.auth.callback.PasswordCallback;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+import javax.security.sasl.RealmCallback;\n+\n+import com.sun.crypto.provider.HmacMD5;\n+\n+import org.apache.log4j.Logger;\n+\n+import org.apache.qpid.client.protocol.AMQProtocolSession;\n+\n+public class UsernameHashedPasswordCallbackHandler implements AMQCallbackHandler\n+{\n+    private static final Logger _logger = Logger.getLogger(UsernameHashedPasswordCallbackHandler.class);\n+\n+    private AMQProtocolSession _protocolSession;\n+\n+    public void initialise(AMQProtocolSession protocolSession)\n+    {\n+        _protocolSession = protocolSession;\n+    }\n+\n+    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException\n+    {\n+        for (int i = 0; i < callbacks.length; i++)\n+        {\n+            Callback cb = callbacks[i];\n+            if (cb instanceof NameCallback)\n+            {\n+                ((NameCallback) cb).setName(_protocolSession.getUsername());\n+            }\n+            else if (cb instanceof PasswordCallback)\n+            {\n+                try\n+                {\n+                    ((PasswordCallback) cb).setPassword(getHash(_protocolSession.getPassword()));\n+                }\n+                catch (NoSuchAlgorithmException e)\n+                {\n+                    UnsupportedCallbackException uce = new UnsupportedCallbackException(cb);\n+                    uce.initCause(e);\n+                    throw uce;\n+                }\n+            }\n+            else\n+            {\n+                throw new UnsupportedCallbackException(cb);\n+            }\n+        }\n+    }\n+\n+    private char[] getHash(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException\n+    {\n+\n+        byte[] data = text.getBytes(\"utf-8\");\n+\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+\n+        for (byte b : data)\n+        {\n+            md.update(b);\n+        }\n+\n+        byte[] digest = md.digest();\n+\n+        char[] hash = new char[digest.length ];\n+\n+        int index = 0;\n+        for (byte b : digest)\n+        {            \n+            hash[index++] = (char) b;\n+        }\n+\n+        return hash;\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/security/UsernameHashedPasswordCallbackHandler.java",
                "sha": "46323e8c09541e9450b601e5b733eb97ae9b3c3b",
                "status": "added"
            },
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/security/crammd5hashed/CRAMMD5HashedSaslClientFactory.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/security/crammd5hashed/CRAMMD5HashedSaslClientFactory.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/security/crammd5hashed/CRAMMD5HashedSaslClientFactory.java",
                "patch": "@@ -0,0 +1,72 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.client.security.crammd5hashed;\n+\n+import org.apache.qpid.client.security.amqplain.AmqPlainSaslClient;\n+\n+import javax.security.sasl.SaslClientFactory;\n+import javax.security.sasl.SaslClient;\n+import javax.security.sasl.SaslException;\n+import javax.security.sasl.Sasl;\n+import javax.security.auth.callback.CallbackHandler;\n+import java.util.Map;\n+import java.security.Security;\n+\n+public class CRAMMD5HashedSaslClientFactory implements SaslClientFactory\n+{\n+    /** The name of this mechanism */\n+    public static final String MECHANISM = \"CRAM-MD5-HASHED\";\n+\n+\n+    public SaslClient createSaslClient(String[] mechanisms, String authorizationId, String protocol, String serverName, Map<String, ?> props, CallbackHandler cbh) throws SaslException\n+    {\n+        for (int i = 0; i < mechanisms.length; i++)\n+        {\n+            if (mechanisms[i].equals(MECHANISM))\n+            {\n+                if (cbh == null)\n+                {\n+                    throw new SaslException(\"CallbackHandler must not be null\");\n+                }\n+\n+                String[] mechs = {\"CRAM-MD5\"};\n+                return Sasl.createSaslClient(mechs, authorizationId, protocol, serverName, props, cbh);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public String[] getMechanismNames(Map props)\n+    {\n+        if (props != null)\n+        {\n+            if (props.containsKey(Sasl.POLICY_NOPLAINTEXT) ||\n+                props.containsKey(Sasl.POLICY_NODICTIONARY) ||\n+                props.containsKey(Sasl.POLICY_NOACTIVE))\n+            {\n+                // returned array must be non null according to interface documentation\n+                return new String[0];\n+            }\n+        }\n+\n+        return new String[]{MECHANISM};\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/security/crammd5hashed/CRAMMD5HashedSaslClientFactory.java",
                "sha": "22bb1ac1565fd0fb1d0594a22b4e01ae42cfa854",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/transport/AMQNoTransportForProtocolException.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/transport/AMQNoTransportForProtocolException.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 3,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/transport/AMQNoTransportForProtocolException.java",
                "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -33,7 +33,7 @@ public AMQNoTransportForProtocolException(BrokerDetails details)\n \n     public AMQNoTransportForProtocolException(BrokerDetails details, String message)\n     {\n-        super(message);\n+        super(null, message, null);\n \n         _details = details;\n     }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/transport/AMQNoTransportForProtocolException.java",
                "sha": "1ec3adc2eb4125987a437cdcaa3687e2e425afe2",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/transport/AMQTransportConnectionException.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/transport/AMQTransportConnectionException.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 5,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/transport/AMQTransportConnectionException.java",
                "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -21,12 +21,12 @@\n package org.apache.qpid.client.transport;\n \n import org.apache.qpid.AMQException;\n+import org.apache.qpid.protocol.AMQConstant;\n \n public class AMQTransportConnectionException extends AMQException\n {\n-    public AMQTransportConnectionException(String message)\n+    public AMQTransportConnectionException(AMQConstant errorCode, String message, Throwable cause)\n     {\n-        super(message);\n-\n+        super(errorCode, message, cause);\n     }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/transport/AMQTransportConnectionException.java",
                "sha": "fec7ff693cc6a0049613026b8371e615d204e687",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/transport/TransportConnection.java",
                "changes": 95,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/transport/TransportConnection.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 45,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/transport/TransportConnection.java",
                "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -26,12 +26,14 @@\n import java.util.Map;\n \n import org.apache.log4j.Logger;\n+\n import org.apache.mina.common.IoConnector;\n import org.apache.mina.common.IoHandlerAdapter;\n import org.apache.mina.common.IoServiceConfig;\n import org.apache.mina.transport.socket.nio.SocketConnector;\n import org.apache.mina.transport.vmpipe.VmPipeAcceptor;\n import org.apache.mina.transport.vmpipe.VmPipeAddress;\n+\n import org.apache.qpid.client.AMQBrokerDetails;\n import org.apache.qpid.client.vmbroker.AMQVMBrokerCreationException;\n import org.apache.qpid.jms.BrokerDetails;\n@@ -64,13 +66,11 @@ public static ITransportConnection getInstance(BrokerDetails details) throws AMQ\n         int transport = getTransport(details.getTransport());\n \n         if (transport == -1)\n-\n         {\n             throw new AMQNoTransportForProtocolException(details);\n         }\n \n         if (transport == _currentInstance)\n-\n         {\n             if (transport == VM)\n             {\n@@ -88,40 +88,42 @@ public static ITransportConnection getInstance(BrokerDetails details) throws AMQ\n         _currentInstance = transport;\n \n         switch (transport)\n-\n         {\n-            case TCP:\n-                _instance = new SocketTransportConnection(new SocketTransportConnection.SocketConnectorFactory()\n-                {\n-                    public IoConnector newSocketConnector()\n+\n+        case TCP:\n+            _instance = new SocketTransportConnection(new SocketTransportConnection.SocketConnectorFactory()\n                     {\n-                        SocketConnector result;\n-                        //FIXME - this needs to be sorted to use the new Mina MultiThread SA.\n-                        if (Boolean.getBoolean(\"qpidnio\"))\n+                        public IoConnector newSocketConnector()\n                         {\n-                            _logger.fatal(\"Using Qpid NIO - sysproperty 'qpidnio' is set.\");\n-//                            result = new org.apache.qpid.nio.SocketConnector(); // non-blocking connector\n+                            SocketConnector result;\n+                            // FIXME - this needs to be sorted to use the new Mina MultiThread SA.\n+                            if (Boolean.getBoolean(\"qpidnio\"))\n+                            {\n+                                _logger.fatal(\"Using Qpid NIO - sysproperty 'qpidnio' is set.\");\n+                                // result = new org.apache.qpid.nio.SocketConnector(); // non-blocking connector\n+                            }\n+                            // else\n+\n+                            {\n+                                _logger.info(\"Using Mina NIO\");\n+                                result = new SocketConnector(); // non-blocking connector\n+                            }\n+\n+                            // Don't have the connector's worker thread wait around for other connections (we only use\n+                            // one SocketConnector per connection at the moment anyway). This allows short-running\n+                            // clients (like unit tests) to complete quickly.\n+                            result.setWorkerTimeout(0);\n+\n+                            return result;\n                         }\n-//                        else\n-                        {\n-                            _logger.info(\"Using Mina NIO\");\n-                            result = new SocketConnector(); // non-blocking connector\n-                        }\n-\n-                        // Don't have the connector's worker thread wait around for other connections (we only use\n-                        // one SocketConnector per connection at the moment anyway). This allows short-running\n-                        // clients (like unit tests) to complete quickly.\n-                        result.setWorkerTimeout(0);\n+                    });\n+            break;\n \n-                        return result;\n-                    }\n-                });\n-                break;\n-            case VM:\n-            {\n-                _instance = getVMTransport(details, Boolean.getBoolean(\"amqj.AutoCreateVMBroker\"));\n-                break;\n-            }\n+        case VM:\n+        {\n+            _instance = getVMTransport(details, Boolean.getBoolean(\"amqj.AutoCreateVMBroker\"));\n+            break;\n+        }\n         }\n \n         return _instance;\n@@ -142,7 +144,8 @@ private static int getTransport(String transport)\n         return -1;\n     }\n \n-    private static ITransportConnection getVMTransport(BrokerDetails details, boolean AutoCreate) throws AMQVMBrokerCreationException\n+    private static ITransportConnection getVMTransport(BrokerDetails details, boolean AutoCreate)\n+        throws AMQVMBrokerCreationException\n     {\n         int port = details.getPort();\n \n@@ -154,14 +157,14 @@ private static ITransportConnection getVMTransport(BrokerDetails details, boolea\n             }\n             else\n             {\n-                throw new AMQVMBrokerCreationException(port, \"VM Broker on port \" + port + \" does not exist. Auto create disabled.\");\n+                throw new AMQVMBrokerCreationException(null, port, \"VM Broker on port \" + port\n+                    + \" does not exist. Auto create disabled.\", null);\n             }\n         }\n \n         return new VmPipeTransportConnection(port);\n     }\n \n-\n     public static void createVMBroker(int port) throws AMQVMBrokerCreationException\n     {\n         if (_acceptor == null)\n@@ -192,7 +195,7 @@ public static void createVMBroker(int port) throws AMQVMBrokerCreationException\n             {\n                 _logger.error(e);\n \n-                //Try and unbind provider\n+                // Try and unbind provider\n                 try\n                 {\n                     VmPipeAddress pipe = new VmPipeAddress(port);\n@@ -203,7 +206,7 @@ public static void createVMBroker(int port) throws AMQVMBrokerCreationException\n                     }\n                     catch (Exception ignore)\n                     {\n-                        //ignore\n+                        // ignore\n                     }\n \n                     if (provider == null)\n@@ -227,7 +230,7 @@ public static void createVMBroker(int port) throws AMQVMBrokerCreationException\n                         because = e.getCause().toString();\n                     }\n \n-                    throw new AMQVMBrokerCreationException(port, because + \" Stopped binding of InVM Qpid.AMQP\");\n+                    throw new AMQVMBrokerCreationException(null, port, because + \" Stopped binding of InVM Qpid.AMQP\", e);\n                 }\n             }\n         }\n@@ -246,14 +249,14 @@ private static IoHandlerAdapter createBrokerInstance(int port) throws AMQVMBroke\n         // can't use introspection to get Provider as it is a server class.\n         // need to go straight to IoHandlerAdapter but that requries the queues and exchange from the ApplicationRegistry which we can't access.\n \n-        //get right constructor and pass in instancec ID - \"port\"\n+        // get right constructor and pass in instancec ID - \"port\"\n         IoHandlerAdapter provider;\n         try\n         {\n-            Class[] cnstr = {Integer.class};\n-            Object[] params = {port};\n+            Class[] cnstr = { Integer.class };\n+            Object[] params = { port };\n             provider = (IoHandlerAdapter) Class.forName(protocolProviderClass).getConstructor(cnstr).newInstance(params);\n-            //Give the broker a second to create\n+            // Give the broker a second to create\n             _logger.info(\"Created VMBroker Instance:\" + port);\n         }\n         catch (Exception e)\n@@ -270,8 +273,10 @@ private static IoHandlerAdapter createBrokerInstance(int port) throws AMQVMBroke\n                 because = e.getCause().toString();\n             }\n \n-\n-            throw new AMQVMBrokerCreationException(port, because + \" Stopped InVM Qpid.AMQP creation\");\n+            AMQVMBrokerCreationException amqbce =\n+                new AMQVMBrokerCreationException(null, port, because + \" Stopped InVM Qpid.AMQP creation\", null);\n+            amqbce.initCause(e);\n+            throw amqbce;\n         }\n \n         return provider;",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/transport/TransportConnection.java",
                "sha": "0bc83e9804fcd57625c47cbd9108ff7a2baec5e4",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/vmbroker/AMQVMBrokerCreationException.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/client/vmbroker/AMQVMBrokerCreationException.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 5,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/client/vmbroker/AMQVMBrokerCreationException.java",
                "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -21,19 +21,25 @@\n package org.apache.qpid.client.vmbroker;\n \n import org.apache.qpid.client.transport.AMQTransportConnectionException;\n+import org.apache.qpid.protocol.AMQConstant;\n \n public class AMQVMBrokerCreationException extends AMQTransportConnectionException\n {\n     private int _port;\n \n+    /**\n+     * @param port\n+     *\n+     * @deprecated\n+     */\n     public AMQVMBrokerCreationException(int port)\n     {\n-        this(port, \"Unable to create vm broker\");\n+        this(null, port, \"Unable to create vm broker\", null);\n     }\n \n-    public AMQVMBrokerCreationException(int port, String message)\n+    public AMQVMBrokerCreationException(AMQConstant errorCode, int port, String message, Throwable cause)\n     {\n-        super(message);\n+        super(errorCode, message, cause);\n         _port = port;\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/client/vmbroker/AMQVMBrokerCreationException.java",
                "sha": "4b2982fe9c85f6fbd3c6470ec81dab4b747f04a6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/jms/FailoverPolicy.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/main/java/org/apache/qpid/jms/FailoverPolicy.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/client/src/main/java/org/apache/qpid/jms/FailoverPolicy.java",
                "patch": "@@ -101,7 +101,7 @@ public FailoverPolicy(ConnectionURL connectionDetails)\n                     }\n                     catch (Exception cnfe)\n                     {\n-                        throw new IllegalArgumentException(\"Unknown failover method:\" + failoverMethod);\n+                        throw new IllegalArgumentException(\"Unknown failover method:\" + failoverMethod, cnfe);\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/main/java/org/apache/qpid/jms/FailoverPolicy.java",
                "sha": "6ad3fb4baed62c4aa0ad02780ac2151ae5145165",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/client/MessageListenerMultiConsumerTest.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/test/java/org/apache/qpid/client/MessageListenerMultiConsumerTest.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 19,
                "filename": "qpid/java/client/src/test/java/org/apache/qpid/client/MessageListenerMultiConsumerTest.java",
                "patch": "@@ -65,6 +65,7 @@\n \n     private final CountDownLatch _allMessagesSent = new CountDownLatch(2); //all messages Sent Lock\n \n+\n     protected void setUp() throws Exception\n     {\n         super.setUp();\n@@ -122,30 +123,39 @@ protected void tearDown() throws Exception\n         TransportConnection.killAllVMBrokers();\n     }\n \n+//    public void testRecieveC1thenC2() throws Exception\n+//    {\n+//\n+//        for (int msg = 0; msg < MSG_COUNT / 2; msg++)\n+//        {\n+//\n+//            assertTrue(_consumer1.receive() != null);\n+//        }\n+//\n+//        for (int msg = 0; msg < MSG_COUNT / 2; msg++)\n+//        {\n+//            assertTrue(_consumer2.receive() != null);\n+//        }\n+//    }\n \n-    public void testRecieveC1thenC2() throws Exception\n+    public void testRecieveInterleaved() throws Exception\n     {\n-\n-        for (int msg = 0; msg < MSG_COUNT / 2; msg++)\n+        int msg = 0;\n+        int MAX_LOOPS = MSG_COUNT * 2;\n+        for (int loops = 0; msg < MSG_COUNT || loops < MAX_LOOPS; loops++)\n         {\n \n-            assertTrue(_consumer1.receive() != null);\n-        }\n-\n-        for (int msg = 0; msg < MSG_COUNT / 2; msg++)\n-        {\n-            assertTrue(_consumer2.receive() != null);\n+            if (_consumer1.receive(100) != null)\n+            {\n+                msg++;\n+            }\n+            if (_consumer2.receive(100) != null)\n+            {\n+                msg++;\n+            }\n         }\n-    }\n-\n-    public void testRecieveInterleaved() throws Exception\n-    {\n \n-        for (int msg = 0; msg < MSG_COUNT / 2; msg++)\n-        {\n-            assertTrue(_consumer1.receive() != null);\n-            assertTrue(_consumer2.receive() != null);\n-        }\n+        assertEquals(\"Not all messages received.\", MSG_COUNT, msg);\n     }\n \n \n@@ -161,7 +171,7 @@ public void onMessage(Message message)\n \n                 if (receivedCount1 == MSG_COUNT / 2)\n                 {\n-                    _allMessagesSent.countDown();                    \n+                    _allMessagesSent.countDown();\n                 }\n \n             }\n@@ -196,6 +206,18 @@ public void onMessage(Message message)\n         assertEquals(MSG_COUNT, receivedCount1 + receivedCount2);\n     }\n \n+    public void testRecieveC2Only_OnlyRunWith_REGISTER_CONSUMERS_FLOWED() throws Exception\n+    {\n+        if (Boolean.parseBoolean(System.getProperties().getProperty(\"REGISTER_CONSUMERS_FLOWED\", \"false\")))\n+        {\n+            for (int msg = 0; msg < MSG_COUNT; msg++)\n+            {\n+                assertTrue(MSG_COUNT + \" msg should be received. Only received:\" + msg,\n+                           _consumer2.receive(1000) != null);\n+            }\n+        }\n+    }\n+\n \n     public static junit.framework.Test suite()\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/client/MessageListenerMultiConsumerTest.java",
                "sha": "794fd5c8c1ce331468178e66186a06675c59448e",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/client/MessageListenerTest.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/test/java/org/apache/qpid/client/MessageListenerTest.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/client/src/test/java/org/apache/qpid/client/MessageListenerTest.java",
                "patch": "@@ -144,6 +144,36 @@ public void testAsynchronousRecieve() throws Exception\n \n     }\n \n+    public void testRecieveTheUseMessageListener() throws Exception\n+     {\n+\n+         _logger.error(\"Test disabled as initial receive is not called first\");\n+         // Perform initial receive to start connection\n+//         assertTrue(_consumer.receive(2000) != null);\n+//         receivedCount++;\n+\n+         // Sleep to ensure remaining 4 msgs end up on _synchronousQueue\n+//         Thread.sleep(1000);\n+\n+         // Set the message listener and wait for the messages to come in.\n+         _consumer.setMessageListener(this);\n+\n+         _logger.info(\"Waiting 3 seconds for messages\");\n+\n+         try\n+         {\n+             _awaitMessages.await(3000, TimeUnit.MILLISECONDS);\n+         }\n+         catch (InterruptedException e)\n+         {\n+             //do nothing\n+         }\n+         //Should have recieved all async messages\n+         assertEquals(MSG_COUNT, receivedCount);\n+\n+     }\n+    \n+\n     public void onMessage(Message message)\n     {\n         _logger.info(\"Received Message(\" + receivedCount + \"):\" + message);",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/client/MessageListenerTest.java",
                "sha": "7b5957ac8cad9272f6dc8f3e0d1befb01b3405be",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/client/ResetMessageListenerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/test/java/org/apache/qpid/client/ResetMessageListenerTest.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/client/src/test/java/org/apache/qpid/client/ResetMessageListenerTest.java",
                "patch": "@@ -83,7 +83,7 @@ protected void setUp() throws Exception\n         Hashtable<String, String> env = new Hashtable<String, String>();\n \n         env.put(\"connectionfactory.connection\", \"amqp://guest:guest@MLT_ID/test?brokerlist='vm://:1'\");\n-        env.put(\"queue.queue\", \"direct://amq.direct//MessageListenerTest\");\n+        env.put(\"queue.queue\", \"direct://amq.direct//ResetMessageListenerTest\");\n \n         _context = factory.getInitialContext(env);\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/client/ResetMessageListenerTest.java",
                "sha": "42594fff8ee8dfcf0a6d8c2f239dca7205fb470b",
                "status": "modified"
            },
            {
                "additions": 109,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/test/unit/basic/InvalidDestinationTest.java",
                "changes": 109,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/test/java/org/apache/qpid/test/unit/basic/InvalidDestinationTest.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/client/src/test/java/org/apache/qpid/test/unit/basic/InvalidDestinationTest.java",
                "patch": "@@ -0,0 +1,109 @@\n+package org.apache.qpid.test.unit.basic;\r\n+\r\n+import org.apache.qpid.client.AMQConnection;\r\n+import org.apache.qpid.client.AMQDestination;\r\n+import org.apache.qpid.client.AMQSession;\r\n+import org.apache.qpid.client.AMQQueue;\r\n+import org.apache.qpid.client.vmbroker.AMQVMBrokerCreationException;\r\n+import org.apache.qpid.client.transport.TransportConnection;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+import javax.jms.MessageConsumer;\r\n+import javax.jms.Session;\r\n+import javax.jms.QueueSession;\r\n+import javax.jms.Queue;\r\n+import javax.jms.QueueSender;\r\n+import javax.jms.TextMessage;\r\n+import javax.jms.InvalidDestinationException;\r\n+\r\n+public class InvalidDestinationTest extends TestCase\r\n+{\r\n+    private AMQConnection _connection;\r\n+    private AMQDestination _destination;\r\n+    private AMQSession _session;\r\n+    private MessageConsumer _consumer;\r\n+\r\n+    private static final String VM_BROKER = \"vm://:1\";\r\n+\r\n+\r\n+    protected void setUp() throws Exception\r\n+    {\r\n+        super.setUp();\r\n+        createVMBroker();\r\n+        _connection = new AMQConnection(VM_BROKER, \"guest\", \"guest\", \"ReceiveTestClient\", \"test\");\r\n+    }\r\n+\r\n+    public void createVMBroker()\r\n+    {\r\n+        try\r\n+        {\r\n+            TransportConnection.createVMBroker(1);\r\n+        }\r\n+        catch (AMQVMBrokerCreationException e)\r\n+        {\r\n+            fail(\"Unable to create broker: \" + e);\r\n+        }\r\n+    }\r\n+\r\n+    protected void tearDown() throws Exception\r\n+    {\r\n+        _connection.close();\r\n+        TransportConnection.killVMBroker(1);\r\n+        super.tearDown();\r\n+    }\r\n+\r\n+\r\n+\r\n+    public void testInvalidDestination() throws Exception\r\n+    {\r\n+        Queue invalidDestination = new AMQQueue(\"amq.direct\",\"unknownQ\");\r\n+        AMQQueue validDestination = new AMQQueue(\"amq.direct\",\"knownQ\");\r\n+        QueueSession queueSession = _connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\r\n+\r\n+        // This is the only easy way to create and bind a queue from the API :-(\r\n+        MessageConsumer consumer = queueSession.createConsumer(validDestination);\r\n+\r\n+        QueueSender sender = queueSession.createSender(invalidDestination);\r\n+        TextMessage msg = queueSession.createTextMessage(\"Hello\");\r\n+        try\r\n+        {\r\n+            sender.send(msg);\r\n+            fail(\"Expected InvalidDestinationException\");\r\n+        }\r\n+        catch (InvalidDestinationException ex)\r\n+        {\r\n+            // pass\r\n+        }\r\n+        sender.close();\r\n+\r\n+        sender = queueSession.createSender(null);\r\n+        invalidDestination = new AMQQueue(\"amq.direct\",\"unknownQ\");\r\n+\r\n+        try\r\n+        {\r\n+            sender.send(invalidDestination,msg);\r\n+            fail(\"Expected InvalidDestinationException\");\r\n+        }\r\n+        catch (InvalidDestinationException ex)\r\n+        {\r\n+            // pass\r\n+        }\r\n+        sender.send(validDestination,msg);\r\n+        sender.close();\r\n+        validDestination = new AMQQueue(\"amq.direct\",\"knownQ\");\r\n+        sender = queueSession.createSender(validDestination);\r\n+        sender.send(msg);\r\n+\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+\r\n+    public static junit.framework.Test suite()\r\n+    {\r\n+\r\n+        return new junit.framework.TestSuite(InvalidDestinationTest.class);\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/test/unit/basic/InvalidDestinationTest.java",
                "sha": "1b5da2631d1467307ea7c02f21097a248435ff43",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/test/unit/close/MessageRequeueTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/test/java/org/apache/qpid/test/unit/close/MessageRequeueTest.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 10,
                "filename": "qpid/java/client/src/test/java/org/apache/qpid/test/unit/close/MessageRequeueTest.java",
                "patch": "@@ -330,7 +330,7 @@ public Integer getId()\n     public void testRequeue() throws JMSException, AMQException, URLSyntaxException\n     {\n         int run = 0;\n-        while (run < 10)\n+//        while (run < 10)\n         {\n             run++;\n \n@@ -350,17 +350,10 @@ public void testRequeue() throws JMSException, AMQException, URLSyntaxException\n             _logger.debug(\"Create Consumer\");\n             MessageConsumer consumer = session.createConsumer(q);\n \n-            try\n-            {\n-                Thread.sleep(2000);\n-            }\n-            catch (InterruptedException e)\n-            {\n-                //\n-            }\n+            conn.start();\n \n             _logger.debug(\"Receiving msg\");\n-            Message msg = consumer.receive(1000);\n+            Message msg = consumer.receive(2000);\n \n             assertNotNull(\"Message should not be null\", msg);\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/test/unit/close/MessageRequeueTest.java",
                "sha": "62234ad21f51eb6de02bb2908a7b04412a3dc3cd",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/test/unit/topic/DurableSubscriptionTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/test/java/org/apache/qpid/test/unit/topic/DurableSubscriptionTest.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 7,
                "filename": "qpid/java/client/src/test/java/org/apache/qpid/test/unit/topic/DurableSubscriptionTest.java",
                "patch": "@@ -100,7 +100,9 @@ public void testDurability() throws AMQException, JMSException, URLSyntaxExcepti\n         AMQTopic topic = new AMQTopic(con,\"MyTopic\");\n         Session session1 = con.createSession(false, AMQSession.NO_ACKNOWLEDGE);\n         MessageConsumer consumer1 = session1.createConsumer(topic);\n-        MessageProducer producer = session1.createProducer(topic);\n+\n+        Session sessionProd = con.createSession(false, AMQSession.NO_ACKNOWLEDGE);\n+        MessageProducer producer = sessionProd.createProducer(topic);\n \n         Session session2 = con.createSession(false, AMQSession.NO_ACKNOWLEDGE);\n         TopicSubscriber consumer2 = session2.createDurableSubscriber(topic, \"MySubscription\");\n@@ -112,12 +114,12 @@ public void testDurability() throws AMQException, JMSException, URLSyntaxExcepti\n         Message msg;\n         msg = consumer1.receive();\n         assertEquals(\"A\", ((TextMessage) msg).getText());\n-        msg = consumer1.receive(1000);\n+        msg = consumer1.receive(100);\n         assertEquals(null, msg);\n \n         msg = consumer2.receive();\n         assertEquals(\"A\", ((TextMessage) msg).getText());\n-        msg = consumer2.receive(1000);\n+        msg = consumer2.receive(100);\n         assertEquals(null, msg);\n \n         consumer2.close();\n@@ -127,14 +129,14 @@ public void testDurability() throws AMQException, JMSException, URLSyntaxExcepti\n \n         producer.send(session1.createTextMessage(\"B\"));\n \n-        msg = consumer1.receive();\n+        msg = consumer1.receive(100);\n         assertEquals(\"B\", ((TextMessage) msg).getText());\n-        msg = consumer1.receive(1000);\n+        msg = consumer1.receive(100);\n         assertEquals(null, msg);\n \n-        msg = consumer3.receive();\n+        msg = consumer3.receive(100);\n         assertEquals(\"B\", ((TextMessage) msg).getText());\n-        msg = consumer3.receive(1000);\n+        msg = consumer3.receive(100);\n         assertEquals(null, msg);\n \n         con.close();",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/test/unit/topic/DurableSubscriptionTest.java",
                "sha": "190b3861f02a528e5cc6acb26af08ae4bbb2ef4a",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java",
                "changes": 76,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 13,
                "filename": "qpid/java/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java",
                "patch": "@@ -53,12 +53,15 @@\n     Queue _jmsQueue;\n \n     private static final Logger _logger = Logger.getLogger(CommitRollbackTest.class);\n+    private static final String BROKER = \"vm://:1\";\n \n     protected void setUp() throws Exception\n     {\n         super.setUp();\n-        TransportConnection.createVMBroker(1);\n-\n+        if (BROKER.startsWith(\"vm\"))\n+        {\n+            TransportConnection.createVMBroker(1);\n+        }\n         testMethod++;\n         queue += testMethod;\n \n@@ -68,7 +71,7 @@ protected void setUp() throws Exception\n \n     private void newConnection() throws AMQException, URLSyntaxException, JMSException\n     {\n-        conn = new AMQConnection(\"amqp://guest:guest@client/test?brokerlist='vm://:1'\");\n+        conn = new AMQConnection(\"amqp://guest:guest@client/test?brokerlist='\" + BROKER + \"'\");\n \n         _session = conn.createSession(true, Session.CLIENT_ACKNOWLEDGE);\n \n@@ -87,7 +90,10 @@ protected void tearDown() throws Exception\n         super.tearDown();\n \n         conn.close();\n-        TransportConnection.killVMBroker(1);\n+        if (BROKER.startsWith(\"vm\"))\n+        {\n+            TransportConnection.killVMBroker(1);\n+        }\n     }\n \n     /**\n@@ -261,7 +267,7 @@ public void testGetThenRollback() throws Exception\n         assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n \n         _logger.info(\"sending test message\");\n-        String MESSAGE_TEXT = \"testGetThenDisconnect\";\n+        String MESSAGE_TEXT = \"testGetThenRollback\";\n         _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n \n         _pubSession.commit();\n@@ -394,16 +400,60 @@ public void testSend2ThenCloseAfter1andTryAgain() throws Exception\n         _logger.info(\"receiving result\");\n         result = _consumer.receive(1000);\n         assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n-        assertEquals(\"1\", ((TextMessage) result).getText());\n-        assertTrue(\"Messasge is not marked as redelivered\" + result, result.getJMSRedelivered());\n-\n-        result = _consumer.receive(1000);\n-        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n-        assertEquals(\"2\", ((TextMessage) result).getText());\n-        assertTrue(\"Messasge is not marked as redelivered\" + result, result.getJMSRedelivered());\n-\n+        if (result.getJMSRedelivered())\n+        {\n+            assertEquals(\"1\", ((TextMessage) result).getText());\n+\n+            result = _consumer.receive(1000);\n+            assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+            assertEquals(\"2\", ((TextMessage) result).getText());\n+            assertTrue(\"Messasge is not marked as redelivered\" + result, result.getJMSRedelivered());\n+        }\n+        else\n+        {\n+            assertEquals(\"2\", ((TextMessage) result).getText());\n+            assertTrue(\"Messasge is marked as redelivered\" + result, !result.getJMSRedelivered());\n+\n+            result = _consumer.receive(1000);\n+            assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+            assertEquals(\"1\", ((TextMessage) result).getText());\n+            assertTrue(\"Messasge is not marked as redelivered\" + result, result.getJMSRedelivered());\n+\n+        }\n         result = _consumer.receive(1000);\n         assertNull(\"test message should be null:\" + result, result);\n+\n+    }\n+\n+\n+    public void testPutThenRollbackThenGet() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testPutThenRollbackThenGet\";\n+\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+        _pubSession.commit();\n+\n+        assertNotNull(_consumer.receive(100));\n+\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _logger.info(\"rolling back\");\n+        _pubSession.rollback();\n+\n+        _logger.info(\"receiving result\");\n+        Message result = _consumer.receive(1000);\n+        assertNull(\"test message was put and rolled back, but is still present\", result);\n+\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _pubSession.commit();\n+\n+        assertNotNull(_consumer.receive(100));\n+\n     }\n \n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java",
                "sha": "685fe20048fe2c0799445d13d0a44fa29c5acefe",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/testutil/Config.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/test/java/org/apache/qpid/testutil/Config.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/client/src/test/java/org/apache/qpid/testutil/Config.java",
                "patch": "@@ -172,7 +172,7 @@ else if(\"-port\".equalsIgnoreCase(key))\n             }\n             catch(NumberFormatException e)\n             {\n-                throw new RuntimeException(\"Bad port number: \" + value);\n+                throw new RuntimeException(\"Bad port number: \" + value, e);\n             }\n         }\n         else if(\"-name\".equalsIgnoreCase(key))",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/testutil/Config.java",
                "sha": "b777cf93b6776aafa42e2c9a79d005ed49d2c105",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/testutil/QpidClientConnection.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/client/src/test/java/org/apache/qpid/testutil/QpidClientConnection.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/client/src/test/java/org/apache/qpid/testutil/QpidClientConnection.java",
                "patch": "@@ -3,6 +3,7 @@\n import org.apache.qpid.client.AMQConnectionFactory;\n import org.apache.qpid.client.AMQConnectionURL;\n import org.apache.qpid.client.AMQConnection;\n+import org.apache.qpid.client.JMSAMQException;\n import org.apache.qpid.url.URLSyntaxException;\n import org.apache.log4j.Logger;\n \n@@ -70,7 +71,7 @@ public void connect() throws JMSException\n             }\n             catch (URLSyntaxException e)\n             {\n-                throw new JMSException(\"URL syntax error in [\" + brokerUrl + \"]: \" + e.getMessage());\n+                throw new JMSAMQException(\"URL syntax error in [\" + brokerUrl + \"]: \" + e.getMessage(), e);\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/client/src/test/java/org/apache/qpid/testutil/QpidClientConnection.java",
                "sha": "195ed79dab5dd0f36fb3dacfc2c20b2186352521",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/bin/qpid-run",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/bin/qpid-run?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 6,
                "filename": "qpid/java/common/bin/qpid-run",
                "patch": "@@ -106,15 +106,20 @@ usage() {\n export EXTERNAL_CLASSPATH=$CLASSPATH\n unset CLASSPATH\n \n-conf=$QPID_HOME/etc/$program.conf\n-if [ ! -e $conf ]; then\n-  conf=$QPID_HOME/etc/$(basename ${sourced}).conf\n+#Use QPID_CLASSPATH if set\n+if [ -n \"$QPID_CLASSPATH\" ]; then\n+    export CLASSPATH=$QPID_CLASSPATH\n+    echo \"Using QPID_CLASSPATH\" $QPID_CLASSPATH\n+else\n+    echo \"Warning: Qpid classpath not set. CLASSPATH must include qpid jars.\"\n fi\n \n-if [ -r $conf ]; then\n-  . $conf\n+#Use QPID_JAVA_MEM if set\n+if [ -n \"$QPID_JAVA_MEM\" ]; then\n+    export JAVA_MEM=$QPID_JAVA_MEM\n+    echo \"Using QPID_JAVA_MEM setting\" $QPID_JAVA_MEM\n else\n-  die \"unable to source $conf\"\n+    echo \"Info: QPID_JAVA_MEM not set. Defaulting to JAVA_MEM\" $JAVA_MEM\n fi\n \n declare -a RUN_ARGS JAVA_ARGS",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/bin/qpid-run",
                "sha": "fe8fd0e9cc864bd36627e28f086f9dd177fb2f7b",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/AMQException.java",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/AMQException.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 8,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/AMQException.java",
                "patch": "@@ -23,37 +23,74 @@\n import org.apache.log4j.Logger;\n import org.apache.qpid.protocol.AMQConstant;\n \n-/** Generic AMQ exception. */\n+/**\n+ * AMQException forms the root exception of all exceptions relating to the AMQ protocol. It provides space to associate\n+ * an AMQ error code with the exception, which is a numberic value, with a meaning defined by the protocol.\n+ *\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\n+ * <tr><th> Responsibilities <th> Collaborations\n+ * <tr><td> Represents an exception condition associated with an AMQ protocol error code.\n+ * </table>\n+ *\n+ * @todo This exception class is also used as a generic exception throughout Qpid code. This usage may not be strictly\n+ *       correct if this is to signify a protocol exception. Should review.\n+ */\n public class AMQException extends Exception\n {\n+    /** Holds the AMQ error code constant associated with this exception. */\n     private AMQConstant _errorCode;\n \n+    /**\n+     * Creates an exception with an optional error code, optional message and optional underlying cause.\n+     *\n+     * @param errorCode The error code. May be null if not to be set.\n+     * @param msg       The exception message. May be null if not to be set.\n+     * @param t         The underlying cause of the exception. May be null if not to be set.\n+     */\n+    public AMQException(AMQConstant errorCode, String msg, Throwable t)\n+    {\n+        super(((msg == null) ? \"\" : msg) + ((errorCode == null) ? \"\" : (\" [error code \" + errorCode + \"]\")), t);\n+        _errorCode = errorCode;\n+    }\n+\n+    /**\n+     * @param message\n+     *\n+     * @deprecated Use {@link #AMQException(org.apache.qpid.protocol.AMQConstant, String, Throwable)} instead.\n+     */\n     public AMQException(String message)\n     {\n         super(message);\n         //fixme This method needs removed and all AMQExceptions need a valid error code\n         _errorCode = AMQConstant.getConstant(-1);\n     }\n \n+    /**\n+     * @param msg\n+     * @param t\n+     *\n+     * @deprecated Use {@link #AMQException(org.apache.qpid.protocol.AMQConstant, String, Throwable)} instead.\n+     */\n     public AMQException(String msg, Throwable t)\n     {\n         super(msg, t);\n         //fixme This method needs removed and all AMQExceptions need a valid error code\n         _errorCode = AMQConstant.getConstant(-1);\n     }\n \n-    public AMQException(AMQConstant errorCode, String msg, Throwable t)\n-    {\n-        super(msg + \" [error code \" + errorCode + ']', t);\n-        _errorCode = errorCode;\n-    }\n-\n+    /**\n+     * @param errorCode\n+     * @param msg\n+     *\n+     * @deprecated Use {@link #AMQException(org.apache.qpid.protocol.AMQConstant, String, Throwable)} instead.\n+     */\n     public AMQException(AMQConstant errorCode, String msg)\n     {\n         super(msg + \" [error code \" + errorCode + ']');\n         _errorCode = errorCode;\n     }\n \n+    /*\n     public AMQException(Logger logger, String msg, Throwable t)\n     {\n         this(msg, t);\n@@ -71,10 +108,15 @@ public AMQException(Logger logger, AMQConstant errorCode, String msg)\n         this(errorCode, msg);\n         logger.error(getMessage(), this);\n     }\n+    */\n \n+    /**\n+     * Gets the AMQ protocol exception code associated with this exception.\n+     *\n+     * @return The AMQ protocol exception code associated with this exception.\n+     */\n     public AMQConstant getErrorCode()\n     {\n         return _errorCode;\n     }\n-\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/AMQException.java",
                "sha": "3e93243a1dae2b3fa2d8923ba8cacfe38987ea7b",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/configuration/PropertyException.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/configuration/PropertyException.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 4,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/configuration/PropertyException.java",
                "patch": "@@ -1,3 +1,4 @@\n+/* Copyright Rupert Smith, 2005 to 2006, all rights reserved. */\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -7,9 +8,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -21,6 +22,7 @@\n package org.apache.qpid.configuration;\n \n import org.apache.log4j.Logger;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.protocol.AMQConstant;\n \n@@ -49,7 +51,7 @@ public PropertyException(AMQConstant errorCode, String msg)\n         super(errorCode, msg);\n     }\n \n-    public PropertyException(Logger logger, String msg, Throwable t)\n+    /*public PropertyException(Logger logger, String msg, Throwable t)\n     {\n         super(logger, msg, t);\n     }\n@@ -62,5 +64,5 @@ public PropertyException(Logger logger, String msg)\n     public PropertyException(Logger logger, AMQConstant errorCode, String msg)\n     {\n         super(logger, errorCode, msg);\n-    }\n+    }*/\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/configuration/PropertyException.java",
                "sha": "7c85a08e110a746060e4ca8695657f25f7a56aa9",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/framing/AMQDataBlockDecoder.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/framing/AMQDataBlockDecoder.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 4,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/framing/AMQDataBlockDecoder.java",
                "patch": "@@ -94,7 +94,7 @@ protected Object createAndPopulateFrame(IoSession session, ByteBuffer in)\n \n         if(bodyFactory == null)\n         {\n-            throw new AMQFrameDecodingException(\"Unsupported frame type: \" + type);\n+            throw new AMQFrameDecodingException(null, \"Unsupported frame type: \" + type, null);\n         }\n \n         final int channel = in.getUnsignedShort();\n@@ -103,8 +103,8 @@ protected Object createAndPopulateFrame(IoSession session, ByteBuffer in)\n         // bodySize can be zero\n         if (channel < 0 || bodySize < 0)\n         {\n-            throw new AMQFrameDecodingException(\"Undecodable frame: type = \" + type + \" channel = \" + channel +\n-                                                \" bodySize = \" + bodySize);\n+            throw new AMQFrameDecodingException(null, \"Undecodable frame: type = \" + type + \" channel = \" + channel +\n+                                                \" bodySize = \" + bodySize, null);\n         }\n \n         AMQFrame frame = new AMQFrame(in, channel, bodySize, bodyFactory);\n@@ -113,7 +113,7 @@ protected Object createAndPopulateFrame(IoSession session, ByteBuffer in)\n         byte marker = in.get();\n         if ((marker & 0xFF) != 0xCE)\n         {\n-            throw new AMQFrameDecodingException(\"End of frame marker not found. Read \" + marker + \" length=\" + bodySize + \" type=\" + type);\n+            throw new AMQFrameDecodingException(null, \"End of frame marker not found. Read \" + marker + \" length=\" + bodySize + \" type=\" + type, null);\n         }\n         return frame;\n     }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/framing/AMQDataBlockDecoder.java",
                "sha": "9f36448986033971aead9ad8acfb0373f5088e39",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/framing/AMQFrameDecodingException.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/framing/AMQFrameDecodingException.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 9,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/framing/AMQFrameDecodingException.java",
                "patch": "@@ -1,3 +1,4 @@\n+/* Copyright Rupert Smith, 2005 to 2006, all rights reserved. */\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -7,9 +8,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -21,28 +22,29 @@\n package org.apache.qpid.framing;\n \n import org.apache.log4j.Logger;\n+\n import org.apache.qpid.AMQException;\n+import org.apache.qpid.protocol.AMQConstant;\n \n public class AMQFrameDecodingException extends AMQException\n {\n-    public AMQFrameDecodingException(String message)\n+    /*public AMQFrameDecodingException(String message)\n     {\n         super(message);\n-    }\n+    }*/\n \n-    public AMQFrameDecodingException(String message, Throwable t)\n+    public AMQFrameDecodingException(AMQConstant errorCode, String message, Throwable t)\n     {\n-        super(message, t);\n+        super(errorCode, message, t);\n     }\n \n-    public AMQFrameDecodingException(Logger log, String message)\n+    /*public AMQFrameDecodingException(Logger log, String message)\n     {\n         super(log, message);\n     }\n \n     public AMQFrameDecodingException(Logger log, String message, Throwable t)\n     {\n         super(log, message, t);\n-    }\n-\n+    }*/\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/framing/AMQFrameDecodingException.java",
                "sha": "c462dec2a3978890772844d6ca6409087b78ee08",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/framing/AMQShortString.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/framing/AMQShortString.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/framing/AMQShortString.java",
                "patch": "@@ -9,7 +9,7 @@\n  * and thus can be held more effectively in a byte buffer.\r\n  *\r\n  */\r\n-public final class AMQShortString implements CharSequence\r\n+public final class AMQShortString implements CharSequence, Comparable<AMQShortString>\r\n {\r\n     private static final Logger _logger = Logger.getLogger(AMQShortString.class);\r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/framing/AMQShortString.java",
                "sha": "f2492585bcaf5838c1de5ea953690ea09b6e9afe",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/framing/BasicContentHeaderProperties.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/framing/BasicContentHeaderProperties.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 2,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/framing/BasicContentHeaderProperties.java",
                "patch": "@@ -341,7 +341,7 @@ private void decode(ByteBuffer buffer)\n         }\n         catch (AMQFrameDecodingException e)\n         {\n-            throw new RuntimeException(\"Error in content header data: \" + e);\n+            throw new RuntimeException(\"Error in content header data: \" + e, e);\n         }\n \n         final int endPos = buffer.position();\n@@ -381,7 +381,7 @@ private void decodeUpToHeaders()\n         }\n         catch (AMQFrameDecodingException e)\n         {\n-            throw new RuntimeException(\"Error in content header data: \" + e);\n+            throw new RuntimeException(\"Error in content header data: \" + e, e);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/framing/BasicContentHeaderProperties.java",
                "sha": "008afb490e561d556c108b1bc112ead39454f87d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/framing/ContentHeaderPropertiesFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/framing/ContentHeaderPropertiesFactory.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/framing/ContentHeaderPropertiesFactory.java",
                "patch": "@@ -49,7 +49,7 @@ public ContentHeaderProperties createContentHeaderProperties(int classId, int pr\n         }\n         else\n         {\n-        \tthrow new AMQFrameDecodingException(\"Unsupport content header class id: \" + classId);\n+        \tthrow new AMQFrameDecodingException(null, \"Unsupport content header class id: \" + classId, null);\n         }\n         properties.populatePropertiesFromBuffer(buffer, propertyFlags, size);\n         return properties;",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/framing/ContentHeaderPropertiesFactory.java",
                "sha": "712eb437dbf6797f6abff59a3046e9de7d53e49a",
                "status": "modified"
            },
            {
                "additions": 102,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/framing/EncodingUtils.java",
                "changes": 261,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/framing/EncodingUtils.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 159,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/framing/EncodingUtils.java",
                "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -23,6 +23,7 @@\n import java.nio.charset.Charset;\n \n import org.apache.log4j.Logger;\n+\n import org.apache.mina.common.ByteBuffer;\n \n public class EncodingUtils\n@@ -49,96 +50,95 @@ public static int encodedShortStringLength(String s)\n         }\n     }\n \n-\n     public static int encodedShortStringLength(short s)\n     {\n-        if( s == 0 )\n+        if (s == 0)\n         {\n             return 1 + 1;\n         }\n \n         int len = 0;\n-        if(s < 0)\n+        if (s < 0)\n         {\n-            len=1;\n+            len = 1;\n             // sloppy - doesn't work of Integer.MIN_VALUE\n-            s=(short)-s;\n+            s = (short) -s;\n         }\n \n-        if(s>9999)\n+        if (s > 9999)\n         {\n-            return 1+5;\n+            return 1 + 5;\n         }\n-        else if(s>999)\n+        else if (s > 999)\n         {\n-            return 1+4;\n+            return 1 + 4;\n         }\n-        else if(s>99)\n+        else if (s > 99)\n         {\n-            return 1+3;\n+            return 1 + 3;\n         }\n-        else if(s>9)\n+        else if (s > 9)\n         {\n-            return 1+2;\n+            return 1 + 2;\n         }\n         else\n         {\n-            return 1+1;\n+            return 1 + 1;\n         }\n \n     }\n \n-\n     public static int encodedShortStringLength(int i)\n     {\n-        if( i == 0 )\n+        if (i == 0)\n         {\n             return 1 + 1;\n         }\n \n         int len = 0;\n-        if(i < 0)\n+        if (i < 0)\n         {\n-            len=1;\n+            len = 1;\n             // sloppy - doesn't work of Integer.MIN_VALUE\n-            i=-i;\n+            i = -i;\n         }\n \n         // range is now 1 - 2147483647\n-        if(i < Short.MAX_VALUE)\n+        if (i < Short.MAX_VALUE)\n         {\n-            return len + encodedShortStringLength((short)i);\n+            return len + encodedShortStringLength((short) i);\n         }\n         else if (i > 999999)\n         {\n-            return len + 6 + encodedShortStringLength((short)(i/1000000));\n+            return len + 6 + encodedShortStringLength((short) (i / 1000000));\n         }\n         else // if (i > 99999)\n         {\n-            return len + 5 + encodedShortStringLength((short)(i/100000));\n+            return len + 5 + encodedShortStringLength((short) (i / 100000));\n         }\n \n     }\n \n     public static int encodedShortStringLength(long l)\n     {\n-        if(l == 0)\n+        if (l == 0)\n         {\n             return 1 + 1;\n         }\n \n         int len = 0;\n-        if(l < 0)\n+        if (l < 0)\n         {\n-            len=1;\n+            len = 1;\n             // sloppy - doesn't work of Long.MIN_VALUE\n-            l=-l;\n+            l = -l;\n         }\n-        if(l < Integer.MAX_VALUE)\n+\n+        if (l < Integer.MAX_VALUE)\n         {\n             return len + encodedShortStringLength((int) l);\n         }\n-        else if(l > 9999999999L)\n+        else if (l > 9999999999L)\n         {\n             return len + 10 + encodedShortStringLength((int) (l / 10000000000L));\n         }\n@@ -149,7 +149,6 @@ else if(l > 9999999999L)\n \n     }\n \n-\n     public static int encodedShortStringLength(AMQShortString s)\n     {\n         if (s == null)\n@@ -162,7 +161,6 @@ public static int encodedShortStringLength(AMQShortString s)\n         }\n     }\n \n-\n     public static int encodedLongStringLength(String s)\n     {\n         if (s == null)\n@@ -219,7 +217,6 @@ public static int encodedContentLength(Content table)\n         return 0;\n     }\n \n- \n     public static void writeShortStringBytes(ByteBuffer buffer, String s)\n     {\n         if (s != null)\n@@ -230,6 +227,7 @@ public static void writeShortStringBytes(ByteBuffer buffer, String s)\n             {\n                 encodedString[i] = (byte) cha[i];\n             }\n+\n             writeBytes(buffer, encodedString);\n         }\n         else\n@@ -239,7 +237,6 @@ public static void writeShortStringBytes(ByteBuffer buffer, String s)\n         }\n     }\n \n-\n     public static void writeShortStringBytes(ByteBuffer buffer, AMQShortString s)\n     {\n         if (s != null)\n@@ -256,7 +253,7 @@ public static void writeShortStringBytes(ByteBuffer buffer, AMQShortString s)\n \n     public static void writeLongStringBytes(ByteBuffer buffer, String s)\n     {\n-        assert s == null || s.length() <= 0xFFFE;\n+        assert (s == null) || (s.length() <= 0xFFFE);\n         if (s != null)\n         {\n             int len = s.length();\n@@ -267,6 +264,7 @@ public static void writeLongStringBytes(ByteBuffer buffer, String s)\n             {\n                 encodedString[i] = (byte) cha[i];\n             }\n+\n             buffer.put(encodedString);\n         }\n         else\n@@ -277,7 +275,7 @@ public static void writeLongStringBytes(ByteBuffer buffer, String s)\n \n     public static void writeLongStringBytes(ByteBuffer buffer, char[] s)\n     {\n-        assert s == null || s.length <= 0xFFFE;\n+        assert (s == null) || (s.length <= 0xFFFE);\n         if (s != null)\n         {\n             int len = s.length;\n@@ -287,6 +285,7 @@ public static void writeLongStringBytes(ByteBuffer buffer, char[] s)\n             {\n                 encodedString[i] = (byte) s[i];\n             }\n+\n             buffer.put(encodedString);\n         }\n         else\n@@ -297,7 +296,7 @@ public static void writeLongStringBytes(ByteBuffer buffer, char[] s)\n \n     public static void writeLongStringBytes(ByteBuffer buffer, byte[] bytes)\n     {\n-        assert bytes == null || bytes.length <= 0xFFFE;\n+        assert (bytes == null) || (bytes.length <= 0xFFFE);\n         if (bytes != null)\n         {\n             writeUnsignedInteger(buffer, bytes.length);\n@@ -330,7 +329,6 @@ public static void writeUnsignedShort(ByteBuffer buffer, int s)\n         }\n     }\n \n-\n     public static int unsignedIntegerLength()\n     {\n         return 4;\n@@ -356,7 +354,6 @@ public static void writeUnsignedInteger(ByteBuffer buffer, long l)\n         }\n     }\n \n-\n     public static void writeFieldTableBytes(ByteBuffer buffer, FieldTable table)\n     {\n         if (table != null)\n@@ -400,10 +397,9 @@ public static void writeBooleans(ByteBuffer buffer, boolean value0, boolean valu\n \n         if (value1)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 1));\n+            packedValue = (byte) (packedValue | (byte) (1 << 1));\n         }\n \n-\n         buffer.put(packedValue);\n     }\n \n@@ -413,213 +409,181 @@ public static void writeBooleans(ByteBuffer buffer, boolean value0, boolean valu\n \n         if (value1)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 1));\n+            packedValue = (byte) (packedValue | (byte) (1 << 1));\n         }\n \n         if (value2)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 2));\n+            packedValue = (byte) (packedValue | (byte) (1 << 2));\n         }\n \n-\n         buffer.put(packedValue);\n     }\n \n-\n-\n-    public static void writeBooleans(ByteBuffer buffer,\n-                                     boolean value0,\n-                                     boolean value1,\n-                                     boolean value2,\n-                                     boolean value3)\n+    public static void writeBooleans(ByteBuffer buffer, boolean value0, boolean value1, boolean value2, boolean value3)\n     {\n         byte packedValue = value0 ? (byte) 1 : (byte) 0;\n \n         if (value1)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 1));\n+            packedValue = (byte) (packedValue | (byte) (1 << 1));\n         }\n \n         if (value2)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 2));\n+            packedValue = (byte) (packedValue | (byte) (1 << 2));\n         }\n \n         if (value3)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 3));\n+            packedValue = (byte) (packedValue | (byte) (1 << 3));\n         }\n \n         buffer.put(packedValue);\n     }\n \n-    public static void writeBooleans(ByteBuffer buffer,\n-                                     boolean value0,\n-                                     boolean value1,\n-                                     boolean value2,\n-                                     boolean value3,\n-                                     boolean value4)\n+    public static void writeBooleans(ByteBuffer buffer, boolean value0, boolean value1, boolean value2, boolean value3,\n+        boolean value4)\n     {\n         byte packedValue = value0 ? (byte) 1 : (byte) 0;\n \n         if (value1)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 1));\n+            packedValue = (byte) (packedValue | (byte) (1 << 1));\n         }\n \n         if (value2)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 2));\n+            packedValue = (byte) (packedValue | (byte) (1 << 2));\n         }\n \n         if (value3)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 3));\n+            packedValue = (byte) (packedValue | (byte) (1 << 3));\n         }\n \n         if (value4)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 4));\n+            packedValue = (byte) (packedValue | (byte) (1 << 4));\n         }\n \n         buffer.put(packedValue);\n     }\n \n-    public static void writeBooleans(ByteBuffer buffer,\n-                                     boolean value0,\n-                                     boolean value1,\n-                                     boolean value2,\n-                                     boolean value3,\n-                                     boolean value4,\n-                                     boolean value5)\n+    public static void writeBooleans(ByteBuffer buffer, boolean value0, boolean value1, boolean value2, boolean value3,\n+        boolean value4, boolean value5)\n     {\n         byte packedValue = value0 ? (byte) 1 : (byte) 0;\n \n         if (value1)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 1));\n+            packedValue = (byte) (packedValue | (byte) (1 << 1));\n         }\n \n         if (value2)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 2));\n+            packedValue = (byte) (packedValue | (byte) (1 << 2));\n         }\n \n         if (value3)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 3));\n+            packedValue = (byte) (packedValue | (byte) (1 << 3));\n         }\n \n         if (value4)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 4));\n+            packedValue = (byte) (packedValue | (byte) (1 << 4));\n         }\n \n         if (value5)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 5));\n+            packedValue = (byte) (packedValue | (byte) (1 << 5));\n         }\n \n         buffer.put(packedValue);\n     }\n \n-    public static void writeBooleans(ByteBuffer buffer,\n-                                     boolean value0,\n-                                     boolean value1,\n-                                     boolean value2,\n-                                     boolean value3,\n-                                     boolean value4,\n-                                     boolean value5,\n-                                     boolean value6)\n+    public static void writeBooleans(ByteBuffer buffer, boolean value0, boolean value1, boolean value2, boolean value3,\n+        boolean value4, boolean value5, boolean value6)\n     {\n         byte packedValue = value0 ? (byte) 1 : (byte) 0;\n \n         if (value1)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 1));\n+            packedValue = (byte) (packedValue | (byte) (1 << 1));\n         }\n \n         if (value2)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 2));\n+            packedValue = (byte) (packedValue | (byte) (1 << 2));\n         }\n \n         if (value3)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 3));\n+            packedValue = (byte) (packedValue | (byte) (1 << 3));\n         }\n \n         if (value4)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 4));\n+            packedValue = (byte) (packedValue | (byte) (1 << 4));\n         }\n \n         if (value5)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 5));\n+            packedValue = (byte) (packedValue | (byte) (1 << 5));\n         }\n \n         if (value6)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 6));\n+            packedValue = (byte) (packedValue | (byte) (1 << 6));\n         }\n \n         buffer.put(packedValue);\n     }\n \n-    public static void writeBooleans(ByteBuffer buffer,\n-                                     boolean value0,\n-                                     boolean value1,\n-                                     boolean value2,\n-                                     boolean value3,\n-                                     boolean value4,\n-                                     boolean value5,\n-                                     boolean value6,\n-                                     boolean value7)\n+    public static void writeBooleans(ByteBuffer buffer, boolean value0, boolean value1, boolean value2, boolean value3,\n+        boolean value4, boolean value5, boolean value6, boolean value7)\n     {\n         byte packedValue = value0 ? (byte) 1 : (byte) 0;\n \n         if (value1)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 1));\n+            packedValue = (byte) (packedValue | (byte) (1 << 1));\n         }\n \n         if (value2)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 2));\n+            packedValue = (byte) (packedValue | (byte) (1 << 2));\n         }\n \n         if (value3)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 3));\n+            packedValue = (byte) (packedValue | (byte) (1 << 3));\n         }\n \n         if (value4)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 4));\n+            packedValue = (byte) (packedValue | (byte) (1 << 4));\n         }\n \n         if (value5)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 5));\n+            packedValue = (byte) (packedValue | (byte) (1 << 5));\n         }\n \n         if (value6)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 6));\n+            packedValue = (byte) (packedValue | (byte) (1 << 6));\n         }\n \n         if (value7)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 7));\n+            packedValue = (byte) (packedValue | (byte) (1 << 7));\n         }\n \n         buffer.put(packedValue);\n     }\n \n-\n-\n-\n     /**\n      * This is used for writing longstrs.\n      *\n@@ -647,26 +611,27 @@ public static void writeTimestamp(ByteBuffer buffer, long timestamp)\n     public static boolean[] readBooleans(ByteBuffer buffer)\n     {\n         final byte packedValue = buffer.get();\n-        if(packedValue == 0)\n+        if (packedValue == 0)\n         {\n             return ALL_FALSE_ARRAY;\n         }\n+\n         final boolean[] result = new boolean[8];\n \n         result[0] = ((packedValue & 1) != 0);\n         result[1] = ((packedValue & (1 << 1)) != 0);\n         result[2] = ((packedValue & (1 << 2)) != 0);\n         result[3] = ((packedValue & (1 << 3)) != 0);\n-        if((packedValue & 0xF0) == 0)\n+        if ((packedValue & 0xF0) == 0)\n         {\n             result[0] = ((packedValue & 1) != 0);\n         }\n+\n         result[4] = ((packedValue & (1 << 4)) != 0);\n         result[5] = ((packedValue & (1 << 5)) != 0);\n         result[6] = ((packedValue & (1 << 6)) != 0);\n         result[7] = ((packedValue & (1 << 7)) != 0);\n \n-\n         return result;\n     }\n \n@@ -742,6 +707,7 @@ public static String readLongString(ByteBuffer buffer)\n             {\n                 stringChars[i] = (char) stringBytes[i];\n             }\n+\n             return new String(stringChars);\n         }\n     }\n@@ -757,22 +723,22 @@ public static String readLongString(ByteBuffer buffer)\n         {\n             byte[] result = new byte[(int) length];\n             buffer.get(result);\n+\n             return result;\n         }\n     }\n \n     public static long readTimestamp(ByteBuffer buffer)\n     {\n         // Discard msb from AMQ timestamp\n-        //buffer.getUnsignedInt();\n+        // buffer.getUnsignedInt();\n         return buffer.getLong();\n     }\n \n-\n     static byte[] hexToByteArray(String id)\n     {\n         // Should check param for null, long enough for this check, upper-case and trailing char\n-        String s = (id.charAt(1) == 'x') ? id.substring(2) : id;    // strip 0x\n+        String s = (id.charAt(1) == 'x') ? id.substring(2) : id; // strip 0x\n \n         int len = s.length();\n         int byte_len = len / 2;\n@@ -786,7 +752,7 @@ public static long readTimestamp(ByteBuffer buffer)\n             byte b1 = Byte.parseByte(s.substring(ch, ch + 1), 16);\n             byte b2 = Byte.parseByte(s.substring(ch + 1, ch + 2), 16);\n \n-            b[i] = (byte) (b1 * 16 + b2);\n+            b[i] = (byte) ((b1 * 16) + b2);\n         }\n \n         return (b);\n@@ -795,7 +761,7 @@ public static long readTimestamp(ByteBuffer buffer)\n     public static char[] convertToHexCharArray(byte[] from)\n     {\n         int length = from.length;\n-        char[] result_buff = new char[length * 2 + 2];\n+        char[] result_buff = new char[(length * 2) + 2];\n \n         result_buff[0] = '0';\n         result_buff[1] = 'x';\n@@ -831,7 +797,7 @@ public static String convertToHexString(ByteBuffer bb)\n         byte[] from = new byte[size];\n \n         // Is this not the same.\n-        //bb.get(from, 0, length);\n+        // bb.get(from, 0, length);\n         for (int i = 0; i < size; i++)\n         {\n             from[i] = bb.get(i);\n@@ -840,9 +806,9 @@ public static String convertToHexString(ByteBuffer bb)\n         return (new String(convertToHexCharArray(from)));\n     }\n \n-    private static char hex_chars[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n+    private static char[] hex_chars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n \n-    //**** new methods\n+    // **** new methods\n \n     // AMQP_BOOLEAN_PROPERTY_PREFIX\n \n@@ -854,6 +820,7 @@ public static void writeBoolean(ByteBuffer buffer, Boolean aBoolean)\n     public static boolean readBoolean(ByteBuffer buffer)\n     {\n         byte packedValue = buffer.get();\n+\n         return (packedValue == 1);\n     }\n \n@@ -878,7 +845,6 @@ public static int encodedByteLength()\n         return 1;\n     }\n \n-\n     // AMQP_SHORT_PROPERTY_PREFIX\n     public static void writeShort(ByteBuffer buffer, Short aShort)\n     {\n@@ -943,7 +909,6 @@ public static int encodedFloatLength()\n         return 4;\n     }\n \n-\n     // Double_PROPERTY_PREFIX\n     public static void writeDouble(ByteBuffer buffer, Double aDouble)\n     {\n@@ -960,7 +925,6 @@ public static int encodedDoubleLength()\n         return 8;\n     }\n \n-\n     public static byte[] readBytes(ByteBuffer buffer)\n     {\n         short length = buffer.getUnsigned();\n@@ -981,7 +945,7 @@ public static void writeBytes(ByteBuffer buffer, byte[] data)\n     {\n         if (data != null)\n         {\n-            // TODO: check length fits in an unsigned byte            \n+            // TODO: check length fits in an unsigned byte\n             writeUnsignedByte(buffer, (short) data.length);\n             buffer.put(data);\n         }\n@@ -992,39 +956,37 @@ public static void writeBytes(ByteBuffer buffer, byte[] data)\n         }\n     }\n \n-    //CHAR_PROPERTY\n+    // CHAR_PROPERTY\n     public static int encodedCharLength()\n     {\n         return encodedByteLength();\n     }\n \n     public static char readChar(ByteBuffer buffer)\n     {\n-        //This is valid as we know that the Character is ASCII 0..127\n+        // This is valid as we know that the Character is ASCII 0..127\n         return (char) buffer.get();\n     }\n \n     public static void writeChar(ByteBuffer buffer, char character)\n     {\n-        //This is valid as we know that the Character is ASCII 0..127\n+        // This is valid as we know that the Character is ASCII 0..127\n         writeByte(buffer, (byte) character);\n     }\n \n-\n-\n-\n     public static long readLongAsShortString(ByteBuffer buffer)\n     {\n         short length = buffer.getUnsigned();\n         short pos = 0;\n-        if(length == 0)\n+        if (length == 0)\n         {\n             return 0L;\n         }\n+\n         byte digit = buffer.get();\n         boolean isNegative;\n         long result = 0;\n-        if(digit == (byte)'-')\n+        if (digit == (byte) '-')\n         {\n             isNegative = true;\n             pos++;\n@@ -1034,15 +996,16 @@ public static long readLongAsShortString(ByteBuffer buffer)\n         {\n             isNegative = false;\n         }\n-        result = digit - (byte)'0';\n+\n+        result = digit - (byte) '0';\n         pos++;\n \n-        while(pos < length)\n+        while (pos < length)\n         {\n             pos++;\n             digit = buffer.get();\n             result = (result << 3) + (result << 1);\n-            result += digit - (byte)'0';\n+            result += digit - (byte) '0';\n         }\n \n         return result;\n@@ -1051,33 +1014,13 @@ public static long readLongAsShortString(ByteBuffer buffer)\n     public static long readUnsignedInteger(ByteBuffer buffer)\n     {\n         long l = 0xFF & buffer.get();\n-        l <<=8;\n+        l <<= 8;\n         l = l | (0xFF & buffer.get());\n-        l <<=8;\n+        l <<= 8;\n         l = l | (0xFF & buffer.get());\n-        l <<=8;\n+        l <<= 8;\n         l = l | (0xFF & buffer.get());\n \n         return l;\n     }\n-\n-\n-    public static void main(String[] args)\n-    {\n-        ByteBuffer buf = ByteBuffer.allocate(8);\n-        buf.setAutoExpand(true);\n-\n-        long l = (long) Integer.MAX_VALUE;\n-        l += 1024L;\n-\n-        writeUnsignedInteger(buf, l);\n-\n-        buf.flip();\n-\n-        long l2 = readUnsignedInteger(buf);\n-\n-        System.out.println(\"before: \" + l);\n-        System.out.println(\"after:  \" + l2);\n-    }\n-\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/framing/EncodingUtils.java",
                "sha": "f0cdda487c13adcac55d599b66bca76ee8d3481b",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/framing/VersionSpecificRegistry.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/framing/VersionSpecificRegistry.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 14,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/framing/VersionSpecificRegistry.java",
                "patch": "@@ -148,34 +148,30 @@ public AMQMethodBody get(short classID, short methodID, ByteBuffer in, long size\n         }\r\n         catch(NullPointerException e)\r\n         {\r\n-            throw new AMQFrameDecodingException(_log,\r\n-                \"Class \" + classID + \" unknown in AMQP version \" + _protocolMajorVersion + \"-\" + _protocolMinorVersion\r\n-                 + \" (while trying to decode class \" + classID + \" method \" + methodID + \".\");\r\n+            throw new AMQFrameDecodingException(null, \"Class \" + classID + \" unknown in AMQP version \" + _protocolMajorVersion\r\n+                + \"-\" + _protocolMinorVersion + \" (while trying to decode class \" + classID + \" method \" + methodID + \".\", e);\r\n         }\r\n         catch(IndexOutOfBoundsException e)\r\n         {\r\n             if(classID >= _registry.length)\r\n             {\r\n-                throw new AMQFrameDecodingException(_log,\r\n-                    \"Class \" + classID + \" unknown in AMQP version \" + _protocolMajorVersion + \"-\" + _protocolMinorVersion\r\n-                     + \" (while trying to decode class \" + classID + \" method \" + methodID + \".\");\r\n-\r\n+                throw new AMQFrameDecodingException(null, \"Class \" + classID + \" unknown in AMQP version \" + _protocolMajorVersion\r\n+                    + \"-\" + _protocolMinorVersion + \" (while trying to decode class \" + classID + \" method \" + methodID\r\n+                    + \".\", e);\r\n             }\r\n             else\r\n             {\r\n-                throw new AMQFrameDecodingException(_log,\r\n-                    \"Method \" + methodID + \" unknown in AMQP version \" + _protocolMajorVersion + \"-\" + _protocolMinorVersion\r\n-                     + \" (while trying to decode class \" + classID + \" method \" + methodID + \".\");\r\n-\r\n+                throw new AMQFrameDecodingException(null, \"Method \" + methodID + \" unknown in AMQP version \"\r\n+                    + _protocolMajorVersion + \"-\" + _protocolMinorVersion + \" (while trying to decode class \" + classID\r\n+                    + \" method \" + methodID + \".\", e);\r\n             }\r\n         }\r\n \r\n \r\n         if (bodyFactory == null)\r\n         {\r\n-            throw new AMQFrameDecodingException(_log,\r\n-                \"Method \" + methodID + \" unknown in AMQP version \" + _protocolMajorVersion + \"-\" + _protocolMinorVersion\r\n-                 + \" (while trying to decode class \" + classID + \" method \" + methodID + \".\");\r\n+            throw new AMQFrameDecodingException(null, \"Method \" + methodID + \" unknown in AMQP version \" + _protocolMajorVersion\r\n+                + \"-\" + _protocolMinorVersion + \" (while trying to decode class \" + classID + \" method \" + methodID + \".\", null);\r\n         }\r\n \r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/framing/VersionSpecificRegistry.java",
                "sha": "faa7cc1e82223754d01e59a286f0ce14d4c607c0",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/pool/Event.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/pool/Event.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/pool/Event.java",
                "patch": "@@ -85,4 +85,27 @@ public void process(IoSession session)\n     }\n \n \n+\n+    public static final class CloseEvent extends Event\n+    {\n+        private final IoFilter.NextFilter _nextFilter;\n+\n+        public CloseEvent(final IoFilter.NextFilter nextFilter)\n+        {\n+            super();\n+            _nextFilter = nextFilter;\n+        }\n+\n+\n+        public void process(IoSession session)\n+        {\n+            _nextFilter.sessionClosed(session);\n+        }\n+\n+        public IoFilter.NextFilter getNextFilter()\n+        {\n+            return _nextFilter;\n+        }\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/pool/Event.java",
                "sha": "7300ec8c3f2a9a882f1fce0dbd6edf494cca7284",
                "status": "modified"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/pool/PoolingFilter.java",
                "changes": 107,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/pool/PoolingFilter.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 56,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/pool/PoolingFilter.java",
                "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -24,10 +24,13 @@\n import java.util.concurrent.ConcurrentMap;\n \n import org.apache.log4j.Logger;\n+\n import org.apache.mina.common.IdleStatus;\n import org.apache.mina.common.IoFilterAdapter;\n import org.apache.mina.common.IoSession;\n \n+import org.apache.qpid.pool.Event.CloseEvent;\n+\n public class PoolingFilter extends IoFilterAdapter implements Job.JobCompletionHandler\n {\n     private static final Logger _logger = Logger.getLogger(PoolingFilter.class);\n@@ -47,12 +50,12 @@ public PoolingFilter(ReferenceCountingExecutorService refCountingPool, String na\n     void fireAsynchEvent(IoSession session, Event event)\n     {\n         Job job = getJobForSession(session);\n- //       job.acquire(); //prevents this job being removed from _jobs\n+        // job.acquire(); //prevents this job being removed from _jobs\n         job.add(event);\n \n-        //Additional checks on pool to check that it hasn't shutdown.\n+        // Additional checks on pool to check that it hasn't shutdown.\n         // The alternative is to catch the RejectedExecutionException that will result from executing on a shutdown pool\n-        if (job.activate() && _poolReference.getPool() != null && !_poolReference.getPool().isShutdown())\n+        if (job.activate() && (_poolReference.getPool() != null) && !_poolReference.getPool().isShutdown())\n         {\n             _poolReference.getPool().execute(job);\n         }\n@@ -68,16 +71,6 @@ public void createNewJobForSession(IoSession session)\n     private Job getJobForSession(IoSession session)\n     {\n         return (Job) session.getAttribute(_name);\n-\n-/*        if(job == null)\n-        {\n-            System.err.println(\"Error in \" + _name);\n-            Thread.dumpStack();\n-        }\n-\n-\n-        job = _jobs.get(session);\n-        return job == null ? createJobForSession(session) : job;*/\n     }\n \n     private Job createJobForSession(IoSession session)\n@@ -87,35 +80,36 @@ private Job createJobForSession(IoSession session)\n \n     private Job addJobForSession(IoSession session, Job job)\n     {\n-        //atomic so ensures all threads agree on the same job\n+        // atomic so ensures all threads agree on the same job\n         Job existing = _jobs.putIfAbsent(session, job);\n-        return existing == null ? job : existing;\n+\n+        return (existing == null) ? job : existing;\n     }\n \n-    //Job.JobCompletionHandler\n+    // Job.JobCompletionHandler\n     public void completed(IoSession session, Job job)\n     {\n-//        if (job.isComplete())\n-//        {\n-//            job.release();\n-//            if (!job.isReferenced())\n-//            {\n-//                _jobs.remove(session);\n-//            }\n-//        }\n-//        else\n-        if(!job.isComplete())\n+        // if (job.isComplete())\n+        // {\n+        // job.release();\n+        // if (!job.isReferenced())\n+        // {\n+        // _jobs.remove(session);\n+        // }\n+        // }\n+        // else\n+        if (!job.isComplete())\n         {\n             // ritchiem : 2006-12-13 Do we need to perform the additional checks here?\n-            //                       Can the pool be shutdown at this point?\n-            if (job.activate() && _poolReference.getPool() != null && !_poolReference.getPool().isShutdown())\n+            // Can the pool be shutdown at this point?\n+            if (job.activate() && (_poolReference.getPool() != null) && !_poolReference.getPool().isShutdown())\n             {\n                 _poolReference.getPool().execute(job);\n             }\n         }\n     }\n \n-    //IoFilter methods that are processed by threads on the pool\n+    // IoFilter methods that are processed by threads on the pool\n \n     public void sessionOpened(final NextFilter nextFilter, final IoSession session) throws Exception\n     {\n@@ -127,37 +121,33 @@ public void sessionClosed(final NextFilter nextFilter, final IoSession session)\n         nextFilter.sessionClosed(session);\n     }\n \n-    public void sessionIdle(final NextFilter nextFilter, final IoSession session,\n-                            final IdleStatus status) throws Exception\n+    public void sessionIdle(final NextFilter nextFilter, final IoSession session, final IdleStatus status) throws Exception\n     {\n         nextFilter.sessionIdle(session, status);\n     }\n \n-    public void exceptionCaught(final NextFilter nextFilter, final IoSession session,\n-                                final Throwable cause) throws Exception\n+    public void exceptionCaught(final NextFilter nextFilter, final IoSession session, final Throwable cause) throws Exception\n     {\n-            nextFilter.exceptionCaught(session,cause);\n+        nextFilter.exceptionCaught(session, cause);\n     }\n \n-    public void messageReceived(final NextFilter nextFilter, final IoSession session,\n-                                final Object message) throws Exception\n+    public void messageReceived(final NextFilter nextFilter, final IoSession session, final Object message) throws Exception\n     {\n-        nextFilter.messageReceived(session,message);\n+        nextFilter.messageReceived(session, message);\n     }\n \n-    public void messageSent(final NextFilter nextFilter, final IoSession session,\n-                            final Object message) throws Exception\n+    public void messageSent(final NextFilter nextFilter, final IoSession session, final Object message) throws Exception\n     {\n         nextFilter.messageSent(session, message);\n     }\n \n-    public void filterWrite(final NextFilter nextFilter, final IoSession session,\n-                            final WriteRequest writeRequest) throws Exception\n+    public void filterWrite(final NextFilter nextFilter, final IoSession session, final WriteRequest writeRequest)\n+        throws Exception\n     {\n         nextFilter.filterWrite(session, writeRequest);\n     }\n \n-    //IoFilter methods that are processed on current thread (NOT on pooled thread)\n+    // IoFilter methods that are processed on current thread (NOT on pooled thread)\n \n     public void filterClose(NextFilter nextFilter, IoSession session) throws Exception\n     {\n@@ -199,13 +189,17 @@ public AsynchReadPoolingFilter(ReferenceCountingExecutorService refCountingPool,\n             super(refCountingPool, name);\n         }\n \n-        public void messageReceived(final NextFilter nextFilter, final IoSession session,\n-                                final Object message) throws Exception\n+        public void messageReceived(final NextFilter nextFilter, final IoSession session, final Object message)\n+            throws Exception\n         {\n \n             fireAsynchEvent(session, new Event.ReceivedEvent(nextFilter, message));\n         }\n \n+        public void sessionClosed(final NextFilter nextFilter, final IoSession session) throws Exception\n+        {\n+            fireAsynchEvent(session, new CloseEvent(nextFilter));\n+        }\n \n     }\n \n@@ -217,26 +211,27 @@ public AsynchWritePoolingFilter(ReferenceCountingExecutorService refCountingPool\n             super(refCountingPool, name);\n         }\n \n-\n-        public void filterWrite(final NextFilter nextFilter, final IoSession session,\n-                                final WriteRequest writeRequest) throws Exception\n+        public void filterWrite(final NextFilter nextFilter, final IoSession session, final WriteRequest writeRequest)\n+            throws Exception\n         {\n             fireAsynchEvent(session, new Event.WriteEvent(nextFilter, writeRequest));\n         }\n \n+        public void sessionClosed(final NextFilter nextFilter, final IoSession session) throws Exception\n+        {\n+            fireAsynchEvent(session, new CloseEvent(nextFilter));\n+        }\n+\n     }\n \n-    public static PoolingFilter createAynschReadPoolingFilter(ReferenceCountingExecutorService refCountingPool,String name)\n+    public static PoolingFilter createAynschReadPoolingFilter(ReferenceCountingExecutorService refCountingPool, String name)\n     {\n-        return new AsynchReadPoolingFilter(refCountingPool,name);\n+        return new AsynchReadPoolingFilter(refCountingPool, name);\n     }\n \n-\n-    public static PoolingFilter createAynschWritePoolingFilter(ReferenceCountingExecutorService refCountingPool,String name)\n+    public static PoolingFilter createAynschWritePoolingFilter(ReferenceCountingExecutorService refCountingPool, String name)\n     {\n-        return new AsynchWritePoolingFilter(refCountingPool,name);\n+        return new AsynchWritePoolingFilter(refCountingPool, name);\n     }\n \n }\n-\n-",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/pool/PoolingFilter.java",
                "sha": "c9c96925cb4d47d58b385eacab17753cf41e03d5",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/url/AMQBindingURL.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/url/AMQBindingURL.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 33,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/url/AMQBindingURL.java",
                "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -24,9 +24,10 @@\n import java.net.URISyntaxException;\n import java.util.HashMap;\n \n+import org.apache.log4j.Logger;\n+\n import org.apache.qpid.exchange.ExchangeDefaults;\n import org.apache.qpid.framing.AMQShortString;\n-import org.apache.log4j.Logger;\n \n public class AMQBindingURL implements BindingURL\n {\n@@ -39,10 +40,9 @@\n     AMQShortString _queueName;\n     private HashMap<String, String> _options;\n \n-\n     public AMQBindingURL(String url) throws URLSyntaxException\n     {\n-        //format:\n+        // format:\n         // <exch_class>://<exch_name>/[<destination>]/[<queue>]?<option>='<value>'[,<option>='<value>']*\n         _logger.debug(\"Parsing URL: \" + url);\n         _url = url;\n@@ -61,10 +61,10 @@ private void parseBindingURL() throws URLSyntaxException\n \n             if (exchangeClass == null)\n             {\n-                _url = ExchangeDefaults.DIRECT_EXCHANGE_CLASS + \"://\" +\n-                        \"\" + \"//\" + _url;\n-                //URLHelper.parseError(-1, \"Exchange Class not specified.\", _url);\n+                _url = ExchangeDefaults.DIRECT_EXCHANGE_CLASS + \"://\" + \"\" + \"//\" + _url;\n+                // URLHelper.parseError(-1, \"Exchange Class not specified.\", _url);\n                 parseBindingURL();\n+\n                 return;\n             }\n             else\n@@ -76,7 +76,7 @@ private void parseBindingURL() throws URLSyntaxException\n \n             if (exchangeName == null)\n             {\n-                if(getExchangeClass().equals(ExchangeDefaults.DIRECT_EXCHANGE_CLASS))\n+                if (getExchangeClass().equals(ExchangeDefaults.DIRECT_EXCHANGE_CLASS))\n                 {\n                     setExchangeName(\"\");\n                 }\n@@ -92,19 +92,18 @@ private void parseBindingURL() throws URLSyntaxException\n \n             String queueName;\n \n-            if (connection.getPath() == null ||\n-                    connection.getPath().equals(\"\"))\n+            if ((connection.getPath() == null) || connection.getPath().equals(\"\"))\n             {\n                 throw URLHelper.parseError(_url.indexOf(_exchangeName.toString()) + _exchangeName.length(),\n-                        \"Destination or Queue requried\", _url);\n+                    \"Destination or Queue requried\", _url);\n             }\n             else\n             {\n                 int slash = connection.getPath().indexOf(\"/\", 1);\n                 if (slash == -1)\n                 {\n                     throw URLHelper.parseError(_url.indexOf(_exchangeName.toString()) + _exchangeName.length(),\n-                            \"Destination requried\", _url);\n+                        \"Destination requried\", _url);\n                 }\n                 else\n                 {\n@@ -127,9 +126,8 @@ private void parseBindingURL() throws URLSyntaxException\n \n             setQueueName(queueName);\n \n-            //Fragment is #string (not used)\n-            //System.out.println(connection.getFragment());\n-            _logger.debug(\"URL Parsed: \" + this);            \n+            // Fragment is #string (not used)\n+            _logger.debug(\"URL Parsed: \" + this);\n \n         }\n         catch (URISyntaxException uris)\n@@ -162,7 +160,7 @@ private void setExchangeName(String exchangeName)\n \n     private void processOptions()\n     {\n-        //this is where we would parse any options that needed more than just storage.\n+        // this is where we would parse any options that needed more than just storage.\n     }\n \n     public String getURL()\n@@ -219,11 +217,13 @@ public void setQueueName(AMQShortString name) throws URLSyntaxException\n             {\n                 if (containsOption(BindingURL.OPTION_CLIENTID) && containsOption(BindingURL.OPTION_SUBSCRIPTION))\n                 {\n-                    _queueName = new AMQShortString(getOption(BindingURL.OPTION_CLIENTID + \":\" + BindingURL.OPTION_SUBSCRIPTION));\n+                    _queueName =\n+                        new AMQShortString(getOption(BindingURL.OPTION_CLIENTID + \":\" + BindingURL.OPTION_SUBSCRIPTION));\n                 }\n                 else\n                 {\n-                    throw URLHelper.parseError(-1, \"Durable subscription must have values for \" + BindingURL.OPTION_CLIENTID + \" and \" + BindingURL.OPTION_SUBSCRIPTION + \".\", _url);\n+                    throw URLHelper.parseError(-1, \"Durable subscription must have values for \" + BindingURL.OPTION_CLIENTID\n+                        + \" and \" + BindingURL.OPTION_SUBSCRIPTION + \".\", _url);\n \n                 }\n             }\n@@ -237,7 +237,6 @@ public void setQueueName(AMQShortString name) throws URLSyntaxException\n             _queueName = name;\n         }\n \n-\n     }\n \n     public String getOption(String key)\n@@ -275,7 +274,6 @@ public void setRoutingKey(AMQShortString key)\n         setOption(OPTION_ROUTING_KEY, key.toString());\n     }\n \n-\n     public String toString()\n     {\n         StringBuffer sb = new StringBuffer();\n@@ -289,18 +287,7 @@ public String toString()\n         sb.append(_queueName);\n \n         sb.append(URLHelper.printOptions(_options));\n-        return sb.toString();\n-    }\n-\n-    public static void main(String args[]) throws URLSyntaxException\n-    {\n-        String url = \"exchangeClass://exchangeName/Destination/Queue?option='value',option2='value2'\";\n-\n-        AMQBindingURL dest = new AMQBindingURL(url);\n-\n-        System.out.println(url);\n-        System.out.println(dest);\n \n+        return sb.toString();\n     }\n-\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/url/AMQBindingURL.java",
                "sha": "353c0d39c230e736f035859ce9c438674b10327e",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/url/URLHelper.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/common/src/main/java/org/apache/qpid/url/URLHelper.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 24,
                "filename": "qpid/java/common/src/main/java/org/apache/qpid/url/URLHelper.java",
                "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -30,10 +30,10 @@\n \n     public static void parseOptions(HashMap<String, String> optionMap, String options) throws URLSyntaxException\n     {\n-        //options looks like this\n-        //brokerlist='tcp://host:port?option='value',option='value';vm://:3/virtualpath?option='value'',failover='method?option='value',option='value''\n+        // options looks like this\n+        // brokerlist='tcp://host:port?option='value',option='value';vm://:3/virtualpath?option='value'',failover='method?option='value',option='value''\n \n-        if (options == null || options.indexOf('=') == -1)\n+        if ((options == null) || (options.indexOf('=') == -1))\n         {\n             return;\n         }\n@@ -49,8 +49,8 @@ public static void parseOptions(HashMap<String, String> optionMap, String option\n         // to store index of final \"'\"\n         int valueIndex = optionIndex;\n \n-        //Walk remainder of url.\n-        while (nestedQuotes > 0 || valueIndex < length)\n+        // Walk remainder of url.\n+        while ((nestedQuotes > 0) || (valueIndex < length))\n         {\n             valueIndex++;\n \n@@ -61,27 +61,24 @@ public static void parseOptions(HashMap<String, String> optionMap, String option\n \n             if (options.charAt(valueIndex) == '\\'')\n             {\n-                if (valueIndex + 1 < options.length())\n+                if ((valueIndex + 1) < options.length())\n                 {\n-                    if (options.charAt(valueIndex + 1) == DEFAULT_OPTION_SEPERATOR ||\n-                            options.charAt(valueIndex + 1) == ALTERNATIVE_OPTION_SEPARATOR ||\n-                            options.charAt(valueIndex + 1) == BROKER_SEPARATOR ||\n-                            options.charAt(valueIndex + 1) == '\\'')\n+                    if ((options.charAt(valueIndex + 1) == DEFAULT_OPTION_SEPERATOR)\n+                            || (options.charAt(valueIndex + 1) == ALTERNATIVE_OPTION_SEPARATOR)\n+                            || (options.charAt(valueIndex + 1) == BROKER_SEPARATOR)\n+                            || (options.charAt(valueIndex + 1) == '\\''))\n                     {\n                         nestedQuotes--;\n-//                        System.out.println(\n-//                                options + \"\\n\" + \"-\" + nestedQuotes + \":\" + getPositionString(valueIndex - 2, 1));\n+\n                         if (nestedQuotes == 0)\n                         {\n-                            //We've found the value of an option\n+                            // We've found the value of an option\n                             break;\n                         }\n                     }\n                     else\n                     {\n                         nestedQuotes++;\n-//                        System.out.println(\n-//                                options + \"\\n\" + \"+\" + nestedQuotes + \":\" + getPositionString(valueIndex - 2, 1));\n                     }\n                 }\n                 else\n@@ -98,11 +95,11 @@ public static void parseOptions(HashMap<String, String> optionMap, String option\n             }\n         }\n \n-        if (nestedQuotes != 0 || valueIndex < (optionIndex + 2))\n+        if ((nestedQuotes != 0) || (valueIndex < (optionIndex + 2)))\n         {\n             int sepIndex = 0;\n \n-            //Try and identify illegal separator character\n+            // Try and identify illegal separator character\n             if (nestedQuotes > 1)\n             {\n                 for (int i = 0; i < nestedQuotes; i++)\n@@ -112,14 +109,14 @@ public static void parseOptions(HashMap<String, String> optionMap, String option\n                 }\n             }\n \n-            if (sepIndex >= options.length() || sepIndex == 0)\n+            if ((sepIndex >= options.length()) || (sepIndex == 0))\n             {\n                 throw parseError(valueIndex, \"Unterminated option\", options);\n             }\n             else\n             {\n-                throw parseError(sepIndex, \"Unterminated option. Possible illegal option separator:'\" +\n-                        options.charAt(sepIndex) + \"'\", options);\n+                throw parseError(sepIndex, \"Unterminated option. Possible illegal option separator:'\"\n+                    + options.charAt(sepIndex) + \"'\", options);\n             }\n         }\n \n@@ -130,12 +127,11 @@ public static void parseOptions(HashMap<String, String> optionMap, String option\n \n         if (valueIndex < (options.length() - 1))\n         {\n-            //Recurse to get remaining options\n+            // Recurse to get remaining options\n             parseOptions(optionMap, options.substring(valueIndex + 2));\n         }\n     }\n \n-\n     public static URLSyntaxException parseError(int index, String error, String url)\n     {\n         return parseError(index, 1, error, url);",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/common/src/main/java/org/apache/qpid/url/URLHelper.java",
                "sha": "c08b443acf543fde7aee771697b723bc22b7d83e",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/distribution/src/main/assembly/bin.xml",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/distribution/src/main/assembly/bin.xml?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/distribution/src/main/assembly/bin.xml",
                "patch": "@@ -82,6 +82,24 @@\n       <destName>config.xml</destName>\n       <fileMode>420</fileMode>\n     </file>\n+    <file>\n+      <source>../broker/etc/jmxremote.access</source>\n+      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n+      <destName>jmxremote.access</destName>\n+      <fileMode>420</fileMode>\n+    </file>\n+    <file>\n+      <source>../broker/etc/transient_config.xml</source>\n+      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n+      <destName>transient_config.xml</destName>\n+      <fileMode>420</fileMode>\n+    </file>\n+    <file>\n+      <source>../broker/etc/persistent_config.xml</source>\n+      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n+      <destName>persistent_config.xml</destName>\n+      <fileMode>420</fileMode>\n+    </file>\n     <file>\n       <source>../broker/etc/log4j.xml</source>\n       <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n@@ -112,6 +130,18 @@\n       <destName>virtualhosts.xml</destName>\n       <fileMode>420</fileMode>\n     </file>\n+    <file>\n+      <source>../broker/bin/qpid.stop</source>\n+      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n+      <destName>qpid.stop</destName>\n+      <fileMode>493</fileMode>\n+    </file>\n+    <file>\n+      <source>../broker/bin/qpid.stopall</source>\n+      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n+      <destName>qpid.stopall</destName>\n+      <fileMode>493</fileMode>\n+    </file>\n     <file>\n       <source>../common/bin/qpid-run</source>\n       <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/distribution/src/main/assembly/bin.xml",
                "sha": "ef85137f90aca8352a9f649c37d2d235b306ad66",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/distribution/src/main/assembly/management-eclipse-plugin.xml",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/distribution/src/main/assembly/management-eclipse-plugin.xml?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/distribution/src/main/assembly/management-eclipse-plugin.xml",
                "patch": "@@ -88,6 +88,13 @@\n       </includes>\n       <fileMode>777</fileMode>\n     </fileSet>\n+    <fileSet>\n+      <directory>../management/eclipse-plugin/src/main/resources/sasl</directory>\n+      <outputDirectory>qpidmc/eclipse/plugins/jmxremote.optional_1.0.1/META-INF</outputDirectory>\n+      <includes>\n+        <include>MANIFEST.MF</include>\n+      </includes>\n+    </fileSet>\n   </fileSets>\n \n   <dependencySets>",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/distribution/src/main/assembly/management-eclipse-plugin.xml",
                "sha": "98534d43d0ec079d7b0aa6f5f925425164aa42b0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/META-INF/MANIFEST.MF",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/META-INF/MANIFEST.MF?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/management/eclipse-plugin/META-INF/MANIFEST.MF",
                "patch": "@@ -7,6 +7,7 @@ Bundle-Activator: org.apache.qpid.management.ui.Activator\n Bundle-Localization: plugin\n Require-Bundle: org.eclipse.ui,\n  org.eclipse.core.runtime,\n- org.eclipse.ui.forms\n+ org.eclipse.ui.forms,\n+ jmxremote.optional\n Eclipse-LazyStart: true\n Bundle-Vendor: Apache Software Foundation",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/META-INF/MANIFEST.MF",
                "sha": "a92f37588600dda5f5a9dd9236a6abe0ccd13d5a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/bin/qpidmc.bat",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/bin/qpidmc.bat?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/management/eclipse-plugin/bin/qpidmc.bat",
                "patch": "@@ -52,4 +52,4 @@ goto exit\n rem Slurp the command line arguments. This loop allows for an unlimited number\r\n rem of agruments (up to the command line limit, anyway).\r\n \r\n-\"%JAVA_HOME%\\bin\\java\" -Xms40m -Xmx256m -Declipse.consoleLog=true  -jar %QPIDMC_HOME%\\eclipse\\startup.jar org.eclipse.core.launcher.Main -launcher %QPIDMC_HOME%\\eclipse\\eclipse -name \"Qpid Management Console\" -showsplash 600 -configuration \"file:%QPIDMC_HOME%\\configuration\" -os win32 -ws win32 -arch x86\r\n+\"%JAVA_HOME%\\bin\\java\" -Xms40m -Xmx256m -Declipse.consoleLog=false -Dsecurity=PLAIN -jar %QPIDMC_HOME%\\eclipse\\startup.jar org.eclipse.core.launcher.Main -launcher %QPIDMC_HOME%\\eclipse\\eclipse -name \"Qpid Management Console\" -showsplash 600 -configuration \"file:%QPIDMC_HOME%\\configuration\" -os win32 -ws win32 -arch x86\r",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/bin/qpidmc.bat",
                "sha": "e444bc58118ed0efe6dc4fbef5d22aa02bae79c6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/bin/qpidmc.sh",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/bin/qpidmc.sh?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/management/eclipse-plugin/bin/qpidmc.sh",
                "patch": "@@ -61,4 +61,4 @@ elif [ $os = \"Linux\" ]; then\n     os=\"linux\"\n fi\n \n-\"$JAVA_HOME/bin/java\" -Xms40m -Xmx256m -Declipse.consoleLog=false -jar $QPIDMC_HOME/eclipse/startup.jar org.eclipse.core.launcher.Main -launcher $QPIDMC_HOME/eclipse/eclipse -name \"Qpid Management Console\" -showsplash 600 -configuration \"file:$QPIDMC_HOME/configuration\" -os $os -ws $ws -arch $arch\n+\"$JAVA_HOME/bin/java\" -Xms40m -Xmx256m -Declipse.consoleLog=false -Dsecurity=PLAIN -jar $QPIDMC_HOME/eclipse/startup.jar org.eclipse.core.launcher.Main -launcher $QPIDMC_HOME/eclipse/eclipse -name \"Qpid Management Console\" -showsplash 600 -configuration \"file:$QPIDMC_HOME/configuration\" -os $os -ws $ws -arch $arch",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/bin/qpidmc.sh",
                "sha": "aae61b14c70de9d963ab4809212cf36537d6effc",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationRegistry.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationRegistry.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationRegistry.java",
                "patch": "@@ -41,7 +41,9 @@\n {\n     private static ImageRegistry imageRegistry = new ImageRegistry();\n     private static FontRegistry fontRegistry = new FontRegistry();\n-\n+    public static final boolean debug = Boolean.getBoolean(\"debug\");\n+    public static final String securityMechanism = System.getProperty(\"security\", null);    \n+    \n     static\n     {\n         imageRegistry.put(Constants.CONSOLE_IMAGE, \n@@ -130,4 +132,9 @@ public static void serverConnectionClosed(ManagedServer server)\n         _closedServerList.clear();\n         return list;\n     }\n+    \n+    public static String getSecurityMechanism()\n+    {\n+        return securityMechanism;\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationRegistry.java",
                "sha": "714f84ea494b66bdbb0f5f22278d159567298915",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationWorkbenchWindowAdvisor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationWorkbenchWindowAdvisor.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationWorkbenchWindowAdvisor.java",
                "patch": "@@ -49,7 +49,7 @@ public void preWindowOpen()\n         IWorkbenchWindowConfigurer configurer = getWindowConfigurer();\n         int x = Display.getDefault().getBounds().width;\n         int y = Display.getDefault().getBounds().height;\n-        configurer.setInitialSize(new Point(4*x/5, 3*y/4));\n+        configurer.setInitialSize(new Point(9*x/10, 8*y/10));\n         configurer.setShowCoolBar(true);\n         configurer.setShowStatusLine(false);\n         ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationWorkbenchWindowAdvisor.java",
                "sha": "e3aedef28e4f8c2119d40adfca352dc43ad39e6c",
                "status": "modified"
            },
            {
                "additions": 105,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Constants.java",
                "changes": 197,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Constants.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 92,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Constants.java",
                "patch": "@@ -1,3 +1,4 @@\n+/* Copyright Rupert Smith, 2005 to 2006, all rights reserved. */\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -7,9 +8,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -29,98 +30,110 @@\n  */\n public class Constants\n {\n-    public final static String APPLICATION_NAME = \"Qpid Management Console\";\n-    \n-    public final static String ACTION_REMOVE_MBEANNODE = \"Remove from list\";\n-    public final static String VALUE = \"value\";\n-    public final static String TYPE  = \"type\";\n-    public final static String NODE_TYPE_SERVER    = \"server\";\n-    public final static String NODE_TYPE_DOMAIN    = \"domain\";\n-    public final static String NODE_TYPE_MBEANTYPE = \"mbeantype\";\n+    public static final String APPLICATION_NAME = \"Qpid Management Console\";\n+\n+    public static final String ACTION_REMOVE_MBEANNODE = \"Remove from list\";\n+    public static final String VALUE = \"value\";\n+    public static final String TYPE = \"type\";\n+    public static final String NODE_TYPE_SERVER = \"server\";\n+    public static final String NODE_TYPE_DOMAIN = \"domain\";\n+    public static final String NODE_TYPE_MBEANTYPE = \"mbeantype\";\n     // currently used only for virtual host instances, but will work as general also\n-    public final static String NODE_TYPE_TYPEINSTANCE = \"mbeantype_instance\";\n-    public final static String MBEAN      = \"mbean\";\n-    public final static String ATTRIBUTE = \"Attribute\";\n-    public final static String ATTRIBUTES = \"Attributes\";\n-    public final static String NOTIFICATION = \"Notifications\";\n-    public final static String RESULT = \"Result\";\n-    public final static String VIRTUAL_HOST = \"VirtualHost\";\n-    public final static String DEFAULT_VH = \"Default\";\n-    public final static String DEFAULT_USERNAME = \"guest\";\n-    public final static String DEFAULT_PASSWORD = \"guest\";\n-    \n-    public final static String USERNAME = \"Username\";\n-    public final static String PASSWORD = \"Password\";\n-    \n+    public static final String NODE_TYPE_TYPEINSTANCE = \"mbeantype_instance\";\n+    public static final String MBEAN = \"mbean\";\n+    public static final String ATTRIBUTE = \"Attribute\";\n+    public static final String ATTRIBUTES = \"Attributes\";\n+    public static final String NOTIFICATIONS = \"Notifications\";\n+    public static final String RESULT = \"Result\";\n+    public static final String VIRTUAL_HOST = \"VirtualHost\";\n+    public static final String DEFAULT_VH = \"Default\";\n+    public static final String DEFAULT_USERNAME = \"guest\";\n+    public static final String DEFAULT_PASSWORD = \"guest\";\n+\n+    public static final String USERNAME = \"Username\";\n+    public static final String PASSWORD = \"Password\";\n+\n     // Attributes and operations are used to customize the GUI for Qpid. If these are changes in the\n     // Qpid server, then these should be updated accordingly\n-    public final static String ATTRIBUTE_QUEUE_OWNER = \"owner\";\n-    public final static String ATTRIBUTE_QUEUE_DEPTH = \"QueueDepth\";\n-    public final static String ATTRIBUTE_QUEUE_CONSUMERCOUNT = \"ActiveConsumerCount\";    \n-    public final static String OPERATION_CREATE_QUEUE = \"createNewQueue\";\n-    public final static String OPERATION_CREATE_BINDING = \"createNewBinding\";\n-    public final static String OPERATION_MOVE_MESSAGES = \"moveMessages\";\n-    \n-    public final static String ALL = \"All\";\n-    \n-    public final static String NAVIGATION_ROOT = \"Qpid Connections\";\n-    public final static String DESCRIPTION = \" Description\";\n-    \n-    public final static String QUEUE  = \"Queue\";\n-    public final static String CONNECTION =\"Connection\";\n-    public final static String EXCHANGE = \"Exchange\";\n-    public final static String EXCHANGE_TYPE = \"ExchangeType\";\n-    public final static String[] EXCHANGE_TYPE_VALUES = {\"direct\", \"topic\", \"headers\"};\n-    public final static String[] BOOLEAN_TYPE_VALUES = {\"false\", \"true\"};\n-    public final static String[] ATTRIBUTE_TABLE_TITLES = {\"Attribute Name\", \"Value\"};  \n-    public static final String[] CONNECTION_PROTOCOLS ={\"RMI\"};\n+    public static final String ATTRIBUTE_QUEUE_OWNER = \"owner\";\n+    public static final String ATTRIBUTE_QUEUE_DEPTH = \"QueueDepth\";\n+    public static final String ATTRIBUTE_QUEUE_CONSUMERCOUNT = \"ActiveConsumerCount\";\n+    public static final String OPERATION_CREATE_QUEUE = \"createNewQueue\";\n+    public static final String OPERATION_CREATE_BINDING = \"createNewBinding\";\n+    public static final String OPERATION_MOVE_MESSAGES = \"moveMessages\";\n+\n+    public static final String OPERATION_CREATEUSER = \"createUser\";\n+    public static final String OPERATION_VIEWUSERS = \"viewUsers\";\n+    public static final String OPERATION_PARAM_USERNAME = \"username\";\n+\n+    public static final String OPERATION_SUCCESSFUL = \"Operation successful\";\n+    public static final String OPERATION_UNSUCCESSFUL = \"Operation unsuccessful\";\n+\n+    public static final String ALL = \"All\";\n+\n+    public static final String NAVIGATION_ROOT = \"Qpid Connections\";\n+    public static final String DESCRIPTION = \" Description\";\n+\n+    public static final String ADMIN_MBEAN_TYPE = \"UserManagement\";\n+    public static final String QUEUE = \"Queue\";\n+    public static final String CONNECTION = \"Connection\";\n+    public static final String EXCHANGE = \"Exchange\";\n+    public static final String EXCHANGE_TYPE = \"ExchangeType\";\n+    public static final String[] EXCHANGE_TYPE_VALUES = { \"direct\", \"fanout\", \"headers\", \"topic\" };\n+    public static final String[] BOOLEAN_TYPE_VALUES = { \"false\", \"true\" };\n+    public static final String[] ATTRIBUTE_TABLE_TITLES = { \"Attribute Name\", \"Value\" };\n+    public static final String[] CONNECTION_PROTOCOLS = { \"RMI\" };\n     public static final String DEFAULT_PROTOCOL = CONNECTION_PROTOCOLS[0];\n-    \n-    public final static String ACTION_ADDSERVER = \"New Connection\";\n-    public final static String ACTION_RECONNECT = \"Reconnect\";\n-    public final static String ACTION_LOGIN = \"Login\";\n-    \n-    public final static String QUEUE_SORT_BY_NAME = \"Queue Name\";\n-    public final static String QUEUE_SORT_BY_DEPTH = \"Queue Depth\";\n-    public final static String QUEUE_SORT_BY_CONSUMERCOUNT = \"Consumer Count\";\n-    public final static String QUEUE_SHOW_TEMP_QUEUES= \"show temporary queues\";\n-    \n-    public final static String SUBSCRIBE_BUTTON   = \"Subscribe\";\n-    public final static String UNSUBSCRIBE_BUTTON = \"Unsubscribe\";\n-    \n-    public final static String CONSOLE_IMAGE = \"ConsoelImage\";\n-    public final static String CLOSED_FOLDER_IMAGE = \"ClosedFolderImage\";\n-    public final static String OPEN_FOLDER_IMAGE = \"OpenFolderImage\";\n-    public final static String MBEAN_IMAGE = \"MBeanImage\";\n-    public final static String NOTIFICATION_IMAGE = \"NotificationImage\";\n-    \n-    public final static String FONT_BUTTON = \"ButtonFont\";\n-    public final static String FONT_BOLD = \"BoldFont\";\n-    public final static String FONT_ITALIC = \"ItalicFont\";\n-    public final static String FONT_TABLE_CELL = \"TableCellFont\";\n-    public final static String FONT_NORMAL = \"Normal\";\n-    \n-    public final static String BUTTON_DETAILS = \"Details\";\n-    public final static String BUTTON_EDIT_ATTRIBUTE = \"Edit Attribute\";\n-    public final static String BUTTON_REFRESH = \"Refresh\";\n-    public final static String BUTTON_GRAPH = \"Graph\";\n-    public final static int TIMER_INTERVAL = 5000;\n-    public final static String BUTTON_EXECUTE = \"Execute\";\n-    public final static String BUTTON_CLEAR = \"Clear\";\n-    public final static String BUTTON_CONNECT = \"Connect\";\n-    public final static String BUTTON_CANCEL = \"Cancel\";\n-    public final static String BUTTON_UPDATE = \"Update\";\n-    \n-    \n-    public final static int OPERATION_IMPACT_INFO    = 0;\n-    public final static int OPERATION_IMPACT_ACTION  = 1;\n-    public final static int OPERATION_IMPACT_ACTIONINFO  = 2;\n-    public final static int OPERATION_IMPACT_UNKNOWN = 3;\n-    \n-    public final static String ERROR_SERVER_CONNECTION = \"Server could not be connected\";\n-    public final static String INFO_PROTOCOL = \"Please select the protocol\";\n-    public final static String INFO_HOST_ADDRESS = \"Please enter the host address\";\n-    public final static String INFO_HOST_PORT = \"Please enter the port number\";\n-    public final static String INFO_USERNAME = \"Please enter the \" + USERNAME;\n-    public final static String INFO_PASSWORD = \"Please enter the \" + PASSWORD;\n+\n+    public static final String ACTION_ADDSERVER = \"New Connection\";\n+    public static final String ACTION_RECONNECT = \"Reconnect\";\n+    public static final String ACTION_LOGIN = \"Login\";\n+\n+    public static final String QUEUE_SORT_BY_NAME = \"Queue Name\";\n+    public static final String QUEUE_SORT_BY_DEPTH = \"Queue Depth\";\n+    public static final String QUEUE_SORT_BY_CONSUMERCOUNT = \"Consumer Count\";\n+    public static final String QUEUE_SHOW_TEMP_QUEUES = \"show temporary queues\";\n+\n+    public static final String SUBSCRIBE_BUTTON = \"Subscribe\";\n+    public static final String UNSUBSCRIBE_BUTTON = \"Unsubscribe\";\n+\n+    public static final String CONSOLE_IMAGE = \"ConsoelImage\";\n+    public static final String CLOSED_FOLDER_IMAGE = \"ClosedFolderImage\";\n+    public static final String OPEN_FOLDER_IMAGE = \"OpenFolderImage\";\n+    public static final String MBEAN_IMAGE = \"MBeanImage\";\n+    public static final String NOTIFICATION_IMAGE = \"NotificationImage\";\n+\n+    public static final String FONT_BUTTON = \"ButtonFont\";\n+    public static final String FONT_BOLD = \"BoldFont\";\n+    public static final String FONT_ITALIC = \"ItalicFont\";\n+    public static final String FONT_TABLE_CELL = \"TableCellFont\";\n+    public static final String FONT_NORMAL = \"Normal\";\n+\n+    public static final String BUTTON_DETAILS = \"Details\";\n+    public static final String BUTTON_EDIT_ATTRIBUTE = \"Edit Attribute\";\n+    public static final String BUTTON_REFRESH = \"Refresh\";\n+    public static final String BUTTON_GRAPH = \"Graph\";\n+    public static final int TIMER_INTERVAL = 5000;\n+    public static final String BUTTON_EXECUTE = \"Execute\";\n+    public static final String BUTTON_CLEAR = \"Clear\";\n+    public static final String BUTTON_CONNECT = \"Connect\";\n+    public static final String BUTTON_CANCEL = \"Cancel\";\n+    public static final String BUTTON_UPDATE = \"Update\";\n+\n+    public static final int OPERATION_IMPACT_INFO = 0;\n+    public static final int OPERATION_IMPACT_ACTION = 1;\n+    public static final int OPERATION_IMPACT_ACTIONINFO = 2;\n+    public static final int OPERATION_IMPACT_UNKNOWN = 3;\n+\n+    public static final String ERROR_SERVER_CONNECTION = \"Server could not be connected\";\n+    public static final String INFO_PROTOCOL = \"Please select the protocol\";\n+    public static final String INFO_HOST_ADDRESS = \"Please enter the host address\";\n+    public static final String INFO_HOST_PORT = \"Please enter the port number\";\n+    public static final String INFO_USERNAME = \"Please enter the \" + USERNAME;\n+    public static final String INFO_PASSWORD = \"Please enter the \" + PASSWORD;\n+\n+    public static final String MECH_CRAMMD5 = \"CRAM-MD5\";\n+    public static final String MECH_PLAIN = \"PLAIN\";\n+    public static final String SASL_CRAMMD5 = \"SASL/CRAM-MD5\";\n+    public static final String SASL_PLAIN = \"SASL/PLAIN\";\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Constants.java",
                "sha": "da70dc736c880c1e09816580f33dd23052c73817",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ManagedBean.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ManagedBean.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 5,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ManagedBean.java",
                "patch": "@@ -20,6 +20,7 @@\n  */\n package org.apache.qpid.management.ui;\n \n+import static org.apache.qpid.management.ui.Constants.*;\n import java.util.HashMap;\n \n /**\n@@ -50,7 +51,7 @@ public void setProperties(HashMap properties)\n         this._properties = properties;\n         setName(getProperty(\"name\"));\n         setType(getProperty(\"type\"));\n-        _virtualHostName = getProperty(Constants.VIRTUAL_HOST);\n+        _virtualHostName = getProperty(VIRTUAL_HOST);\n     }\n     public String getDomain()\n     {\n@@ -89,7 +90,7 @@ public void setUniqueName(String uniqueName)\n     public String getVirtualHostName()\n     {\n         // To make it work with the broker with no virtual host implementation\n-        return _virtualHostName == null ? Constants.DEFAULT_VH : _virtualHostName;\n+        return _virtualHostName == null ? DEFAULT_VH : _virtualHostName;\n     }\n     \n     /**\n@@ -106,21 +107,26 @@ public String getInstanceName()\n     \n     public boolean isQueue()\n     {\n-        return _type.endsWith(Constants.QUEUE);\n+        return _type.endsWith(QUEUE);\n     }\n     \n     public boolean isConnection()\n     {\n-        return _type.endsWith(Constants.CONNECTION);\n+        return _type.endsWith(CONNECTION);\n     }\n     \n     public boolean isExchange()\n     {\n-        return _type.endsWith(Constants.EXCHANGE);\n+        return _type.endsWith(EXCHANGE);\n     }\n     \n     public boolean isTempQueue()\n     {\n         return (isQueue() && getName().startsWith(\"tmp_\"));\n     }\n+    \n+    public boolean isAdmin()\n+    {\n+        return _type.endsWith(ADMIN_MBEAN_TYPE);\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ManagedBean.java",
                "sha": "31825e925df455a6243d165cb3952f7d4553fb33",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Perspective.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Perspective.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 2,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Perspective.java",
                "patch": "@@ -37,8 +37,8 @@ public void createInitialLayout(IPageLayout layout)\n \t\tlayout.setEditorAreaVisible(false);\n         \n \t\t// standalone view meaning it can't be docked or stacked with other views, and it doesn't have a title bar.        \n-\t\tlayout.addStandaloneView(NavigationView.ID, true, IPageLayout.LEFT, 0.25f, editorArea);\n-        layout.addStandaloneView(MBeanView.ID, true, IPageLayout.RIGHT, 0.75f, editorArea);\n+\t\tlayout.addStandaloneView(NavigationView.ID, true, IPageLayout.LEFT, 0.30f, editorArea);\n+        layout.addStandaloneView(MBeanView.ID, true, IPageLayout.RIGHT, 0.70f, editorArea);\n \t\t\n \t\tlayout.getViewLayout(NavigationView.ID).setCloseable(false);\n         layout.getViewLayout(MBeanView.ID).setCloseable(false);       ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Perspective.java",
                "sha": "f93200cadfd8ff5c99463702a332d98864363d1d",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ServerRegistry.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ServerRegistry.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ServerRegistry.java",
                "patch": "@@ -128,6 +128,10 @@ public void addVirtualHost(String name)\n         return _virtualHosts;\n     }\n     \n+    public abstract void setUserList(List<String> list);\n+    \n+    public abstract List<String> getUsernames();\n+    \n     public abstract void addManagedObject(ManagedBean key);\n     \n     public abstract List<ManagedBean> getMBeans();\n@@ -154,7 +158,7 @@ public void addVirtualHost(String name)\n     \n     public abstract boolean hasSubscribedForNotifications(ManagedBean mbean, String name, String type);\n     \n-    public abstract void clearNotifications(ManagedBean mbean);\n+    public abstract void clearNotifications(ManagedBean mbean, List<NotificationObject> list);\n     \n     public ClientListener getNotificationListener()\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ServerRegistry.java",
                "sha": "313e143df5b04aa0686d96750717f26878c462c4",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/AddServer.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/AddServer.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 10,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/AddServer.java",
                "patch": "@@ -194,9 +194,6 @@ private void createAddServerPopup()\n             }\n         }\n         \n-        //If you create it, you dispose it.\n-        shell.dispose();\n-        \n         // enable the main shell\n         _window.getShell().setEnabled(true);\n         _window.getShell().open();\n@@ -263,15 +260,15 @@ private void createWidgets(final Shell shell)\n         user.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, false, false));\n         \n         final Text textUser = new Text(composite, SWT.BORDER);\n-        textUser.setText(DEFAULT_USERNAME);\n+        textUser.setText(\"\");\n         textUser.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n         \n         Label password = new Label(composite, SWT.NONE);\n         password.setText(PASSWORD);\n         password.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, false, false));\n         \n         final Text textPwd = new Text(composite, SWT.BORDER | SWT.SINGLE | SWT.PASSWORD);\n-        textPwd.setText(DEFAULT_PASSWORD);\n+        textPwd.setText(\"\");\n         //textPwd.setEchoChar('*');\n         textPwd.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n         \n@@ -327,11 +324,7 @@ public void widgetSelected(SelectionEvent event)\n                 \n                 _domain = comboDomain.getText();\n                 _addServer = true;\n-\n-                if (!connectButton.getShell().isDisposed())\n-                {\n-                    connectButton.getShell().dispose();\n-                }                                      \n+                shell.dispose();                                     \n             }\n         });\n         ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/AddServer.java",
                "sha": "0e12c59de4abbc3f25e56a2154593e05db5cd2da",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/ReconnectServer.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/ReconnectServer.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 10,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/ReconnectServer.java",
                "patch": "@@ -168,9 +168,6 @@ private void createLoginPopup()\n             }\n         }\n         \n-        //If you create it, you dispose it.\n-        shell.dispose();\n-        \n         // enable the main shell\n         _window.getShell().setEnabled(true);\n         _window.getShell().open();\n@@ -194,7 +191,7 @@ private void createWidgets(final Shell shell)\n         user.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, false, false));\n         \n         final Text textUser = new Text(composite, SWT.BORDER);\n-        textUser.setText(DEFAULT_USERNAME);\n+        textUser.setText(\"\");\n         textUser.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n         // Put cursor on this field\n         textUser.setFocus();\n@@ -204,7 +201,7 @@ private void createWidgets(final Shell shell)\n         password.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, false, false));\n         \n         final Text textPwd = new Text(composite, SWT.BORDER | SWT.SINGLE | SWT.PASSWORD);\n-        textPwd.setText(DEFAULT_PASSWORD);\n+        textPwd.setText(\"\");\n         textPwd.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n         \n         Composite buttonsComposite  = new Composite(composite, SWT.NONE);\n@@ -240,11 +237,7 @@ public void widgetSelected(SelectionEvent event)\n                 }\n                 \n                 _connect = true;\n-\n-                if (!connectButton.getShell().isDisposed())\n-                {\n-                    connectButton.getShell().dispose();\n-                }\n+                shell.dispose();\n             }\n         });\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/ReconnectServer.java",
                "sha": "9aa265ab3c4b85c7bc655c9e0679dee3dbaa1cd6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/ClientListener.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/ClientListener.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 4,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/ClientListener.java",
                "patch": "@@ -45,10 +45,7 @@ public void handleNotification(Notification notification, Object handback)\n     {\n         ObjectName objName = null;\n         String     type = notification.getType();\n-        if (MBeanUtility.isDebug())\n-        {\n-            System.out.println(type + \":\" + objName);\n-        }\n+        MBeanUtility.printOutput(type + \":\" + objName);\n         \n         if (MBeanServerNotification.REGISTRATION_NOTIFICATION.equals(type))\n         {",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/ClientListener.java",
                "sha": "2be0ddbebfaf2a436ac1db2e1a193e210a1a583c",
                "status": "modified"
            },
            {
                "additions": 153,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/JMXServerRegistry.java",
                "changes": 170,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/JMXServerRegistry.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 17,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/JMXServerRegistry.java",
                "patch": "@@ -20,6 +20,10 @@\n  */\n package org.apache.qpid.management.ui.jmx;\n \n+import static org.apache.qpid.management.ui.Constants.*;\n+\n+import java.lang.reflect.Constructor;\n+import java.security.Security;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.HashMap;\n@@ -35,15 +39,20 @@\n import javax.management.remote.JMXConnector;\n import javax.management.remote.JMXConnectorFactory;\n import javax.management.remote.JMXServiceURL;\n+import javax.security.sasl.SaslClientFactory;\n \n-import org.apache.qpid.management.ui.Constants;\n+import org.apache.qpid.management.ui.ApplicationRegistry;\n import org.apache.qpid.management.ui.ManagedBean;\n import org.apache.qpid.management.ui.ManagedServer;\n import org.apache.qpid.management.ui.ServerRegistry;\n import org.apache.qpid.management.ui.model.ManagedAttributeModel;\n import org.apache.qpid.management.ui.model.NotificationInfoModel;\n import org.apache.qpid.management.ui.model.NotificationObject;\n import org.apache.qpid.management.ui.model.OperationDataModel;\n+import org.apache.qpid.management.ui.sasl.JCAProvider;\n+import org.apache.qpid.management.ui.sasl.SaslProvider;\n+import org.apache.qpid.management.ui.sasl.UserPasswordCallbackHandler;\n+import org.apache.qpid.management.ui.sasl.UsernameHashedPasswordCallbackHandler;\n \n \n public class JMXServerRegistry extends ServerRegistry\n@@ -52,11 +61,12 @@\n     private JMXConnector _jmxc = null;\n     private MBeanServerConnection _mbsc = null;\n     \n+    private List<String> _usersList;\n     // When an mbean gets removed from mbean server, then the notification listener\n     // will add that mbean in this list.\n     private List<ManagedBean> _mbeansToBeRemoved = new ArrayList<ManagedBean>();\n     \n-    // Map containing all managed beans and ampped with unique mbean name\n+    // Map containing all managed beans and mapped with unique mbean name\n     private HashMap<String, ManagedBean>   _mbeansMap    = new HashMap<String, ManagedBean>();\n     // Map containing MBeanInfo for all mbeans and mapped with unique mbean name \n     private HashMap<String, MBeanInfo>     _mbeanInfoMap = new HashMap<String, MBeanInfo>();\n@@ -83,11 +93,69 @@ public JMXServerRegistry(ManagedServer server) throws Exception\n     {\n         super(server);\n         JMXServiceURL jmxUrl = new JMXServiceURL(server.getUrl());\n-        Map<String, Object> env = new HashMap<String, Object>();\n-        String[] creds = {server.getUser(), server.getPassword()};\n-        env.put(JMXConnector.CREDENTIALS, creds);\n-\n-        _jmxc = JMXConnectorFactory.connect(jmxUrl, env);\n+        Map<String, Object> env = null;\n+        String securityMechanism = ApplicationRegistry.getSecurityMechanism();\n+       \n+        if (securityMechanism != null)\n+        {                                \n+            try\n+            {\n+                // Check if the JMXMP connector is available\n+                Class klass = Class.forName(\"javax.management.remote.jmxmp.JMXMPConnector\");\n+                \n+                jmxUrl = new JMXServiceURL(\"jmxmp\", server.getHost(), server.getPort());\n+                env = new HashMap<String, Object>();\n+                \n+                if (MECH_CRAMMD5.equals(securityMechanism))\n+                {\n+                    // For SASL/CRAM-MD5\n+                    Map<String, Class<? extends SaslClientFactory>> map = new HashMap<String, Class<? extends SaslClientFactory>>();\n+                    Class<?> clazz = Class.forName(\"org.apache.qpid.management.ui.sasl.CRAMMD5HashedSaslClientFactory\");\n+                    map.put(\"CRAM-MD5-HASHED\", (Class<? extends SaslClientFactory>) clazz);\n+                    \n+                    Security.addProvider(new JCAProvider(map));\n+                    env.put(\"jmx.remote.profiles\", SASL_CRAMMD5); \n+                    env.put(\"jmx.remote.sasl.callback.handler\",\n+                            new UsernameHashedPasswordCallbackHandler(server.getUser(), server.getPassword()));\n+                }\n+                else if (MECH_PLAIN.equals(securityMechanism))\n+                {\n+                    // For SASL/PLAIN\n+                    Security.addProvider(new SaslProvider());\n+                    env.put(\"jmx.remote.profiles\", SASL_PLAIN);\n+                    env.put(\"jmx.remote.sasl.callback.handler\",\n+                            new UserPasswordCallbackHandler(server.getUser(), server.getPassword())); \n+                }\n+                else\n+                {\n+                    MBeanUtility.printOutput(\"Security mechanism \" + securityMechanism + \" is not supported.\");\n+                }\n+                \n+                // Now create the instance of JMXMPConnector                                               \n+                Class[] paramTypes = {JMXServiceURL.class, Map.class};                           \n+                Constructor cons = klass.getConstructor(paramTypes);\n+                \n+                Object[] args = {jmxUrl, env};           \n+                Object theObject = cons.newInstance(args);\n+                \n+                _jmxc = (JMXConnector)theObject;\n+                _jmxc.connect();\n+                MBeanUtility.printOutput(\"Starting JMXConnector with SASL. Server=\" + server.getName());\n+            }\n+            catch (Exception ex)\n+            {\n+                // When JMXMPConnector is not available\n+                MBeanUtility.printOutput(\"Starting JMXConnector. Server=\" + server.getName());                \n+                jmxUrl = new JMXServiceURL(server.getUrl());\n+                _jmxc = JMXConnectorFactory.connect(jmxUrl, null);\n+            }\n+        }\n+        else\n+        {\n+            jmxUrl = new JMXServiceURL(server.getUrl());\n+            _jmxc = JMXConnectorFactory.connect(jmxUrl, null);\n+        }\n+        \n         _mbsc = _jmxc.getMBeanServerConnection();\n         \n         _clientListener = new ClientListener(server);\n@@ -155,10 +223,7 @@ else if (mbean.isConnection())\n \n     public void removeManagedObject(ManagedBean mbean)\n     {\n-        if (MBeanUtility.isDebug())\n-        {\n-            System.out.println(\"Removing MBean:\" + mbean.getUniqueName());\n-        }\n+        MBeanUtility.printOutput(\"Removing MBean:\" + mbean.getUniqueName());\n         \n         if (mbean.isQueue())\n         {\n@@ -218,17 +283,78 @@ public void addNotification(ObjectName objName, Notification notification)\n         list.add(obj);\n     }\n     \n+    /**\n+     * Returns all the notification objects for a given mbean. If mbean is null, it returns\n+     * notification objects for all the mbeans.\n+     */\n     public List<NotificationObject> getNotifications(ManagedBean mbean)\n     {\n-        return _notificationsMap.get(mbean.getUniqueName());\n+        if (mbean == null)\n+        {\n+            List<NotificationObject> totalList = new ArrayList<NotificationObject>();\n+            for (List<NotificationObject> list : _notificationsMap.values())\n+            {\n+                totalList.addAll(list);\n+            }\n+            return totalList;\n+        }\n+        else\n+        {\n+            return _notificationsMap.get(mbean.getUniqueName());\n+        }\n     }\n     \n-    public void clearNotifications(ManagedBean mbean)\n+    public void clearNotifications(ManagedBean mbean, List<NotificationObject> list)\n     {\n-        if (_notificationsMap.containsKey(mbean.getUniqueName()))\n-            _notificationsMap.get(mbean.getUniqueName()).clear();\n+        if (mbean == null)\n+        {\n+            if (list == null || list.isEmpty())\n+            {\n+                // All notifications of all mbeans to be cleared\n+                _notificationsMap.clear();\n+            }\n+            else\n+            {\n+                // Clear the selected notifications\n+                for (NotificationObject obj : list)\n+                {\n+                    mbean = _mbeansMap.get(obj.getSource().toString());\n+                    List<NotificationObject> nList = _notificationsMap.get(mbean.getUniqueName());\n+                    if (nList != null && !nList.isEmpty())\n+                    {\n+                        nList.remove(obj);\n+                    }\n+                }\n+            }\n+        }\n+        else \n+        {\n+            if (list == null || list.isEmpty())\n+            {\n+                // All notifications of this mbean to be cleared\n+                List<NotificationObject> nList = _notificationsMap.get(mbean.getUniqueName());\n+                if (nList != null && !nList.isEmpty())\n+                {\n+                    nList.clear();\n+                }\n+            }\n+            else\n+            {\n+                // Clear the selected notifications\n+                for (NotificationObject obj : list)\n+                {\n+                    List<NotificationObject> nList = _notificationsMap.get(mbean.getUniqueName());\n+                    if (nList != null && !nList.isEmpty())\n+                    {\n+                        nList.remove(obj);\n+                    }\n+                }\n+            }\n+        }\n     }\n     \n+    \n+    \n     /**\n      * Adds notification name and type to the map. The map contains all the notification names,\n      * subscribed for an mbean.\n@@ -254,7 +380,7 @@ public void addNotificationListener(ManagedBean mbean, String name, String type)\n             map.put(name, list);\n         }\n         // Now add the notification type to the list\n-        if (Constants.ALL.equals(type))\n+        if (ALL.equals(type))\n         {\n             List<NotificationInfoModel> infoList = _notificationInfoMap.get(mbean.getUniqueName());\n             for (NotificationInfoModel model : infoList)\n@@ -313,7 +439,7 @@ public void removeNotificationListener(ManagedBean mbean, String name, String ty\n             HashMap<String, List<String>> map = _subscribedNotificationMap.get(mbean.getUniqueName());\n             if (map.containsKey(name))\n             {\n-                if (Constants.ALL.equals(type))\n+                if (ALL.equals(type))\n                 {\n                     map.remove(name);\n                 }\n@@ -441,6 +567,16 @@ public OperationDataModel getOperationModel(ManagedBean mbean)\n         }\n         return connections;\n     }\n+    \n+    public void setUserList(List<String> list)\n+    {\n+        _usersList = list;\n+    }\n+    \n+    public List<String> getUsernames()\n+    {\n+        return _usersList;\n+    }\n \n     public ClientNotificationListener getNotificationListener()\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/JMXServerRegistry.java",
                "sha": "816c479cf9997cc6b4225174d2b4d807188a977b",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/MBeanUtility.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/MBeanUtility.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 20,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/MBeanUtility.java",
                "patch": "@@ -60,13 +60,6 @@\n  */\n public class MBeanUtility\n {\n-    private static boolean _debug;\n-    static\n-    {\n-        String debug = System.getProperty(\"debug\");\n-        _debug = \"true\".equalsIgnoreCase(debug) ? true : false;\n-    }\n-    \n     public static final BigInteger MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);\n     public static final BigInteger MAX_INT = BigInteger.valueOf(Integer.MAX_VALUE);\n     /**\n@@ -149,27 +142,27 @@ public static void handleException(Exception ex)\n      * @param mbean managed bean\n      * @param ex   Exception\n      */\n-    public static void handleException(ManagedBean mbean, Exception ex)\n+    public static void handleException(ManagedBean mbean, Throwable ex)\n     {\n         if (mbean == null)\n         {\n             ViewUtility.popupErrorMessage(\"Error\", \"Managed Object is null \\n\" + ex.toString());\n-            ex.printStackTrace();\n+            printStackTrace(ex);\n         }\n         else if (ex instanceof IOException)\n         {\n             ViewUtility.popupErrorMessage(mbean.getInstanceName(), \"IO Error occured \\n\" + ex.toString());\n-            ex.printStackTrace();\n+            printStackTrace(ex);\n         }\n         else if (ex instanceof ReflectionException)\n         {\n             ViewUtility.popupErrorMessage(mbean.getInstanceName(), \"Server has thrown error \\n\" + ex.toString());\n-            ex.printStackTrace();\n+            printStackTrace(ex);\n         }\n         else if (ex instanceof InstanceNotFoundException)\n         {\n             ViewUtility.popupErrorMessage(mbean.getInstanceName(), \"Managed Object Not Found \\n\" + ex.toString());\n-            ex.printStackTrace();\n+            printStackTrace(ex);\n         }\n         else if (ex instanceof MBeanException)\n         {\n@@ -188,8 +181,20 @@ else if (ex instanceof ManagementConsoleException)\n         }\n         else \n         {\n-            ViewUtility.popupErrorMessage(mbean.getInstanceName(), ex.getMessage());\n-            ex.printStackTrace();\n+            if (ex.getCause() != null)\n+            {\n+                handleException(mbean, ex.getCause());\n+            }\n+            else\n+            {\n+                String msg = ex.getMessage();\n+                if (msg == null)\n+                {\n+                    msg = ex.toString();\n+                }\n+                ViewUtility.popupErrorMessage(mbean.getInstanceName(), msg);\n+                printStackTrace(ex);\n+            }\n         }\n         \n     }\n@@ -449,12 +454,19 @@ public static OperationDataModel getOperations(ManagedBean mbean)\n         return Arrays.asList(domains);\n     }\n     \n-    /**\n-     * return true if System property is set to true -Ddebug=true\n-     * @return\n-     */\n-    public static boolean isDebug()\n+    public static void printOutput(String statement)\n     {\n-        return _debug;\n+        if (ApplicationRegistry.debug)\n+        {\n+            System.out.println(statement);\n+        }\n+    }\n+    \n+    private static void printStackTrace(Throwable ex)\n+    {\n+        if (ApplicationRegistry.debug)\n+        {\n+            ex.printStackTrace();\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/MBeanUtility.java",
                "sha": "41db11c10e5efb9a4046d73f63797266fdd2d82e",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/NotificationObject.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/NotificationObject.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/NotificationObject.java",
                "patch": "@@ -24,10 +24,12 @@\n import java.util.Date;\n import java.util.TimeZone;\n \n+import javax.management.ObjectName;\n+\n public class NotificationObject\n {\n \n-    private long     _sequenceNo;\n+    private long    _sequenceNo;\n     private Date    _timeStamp;\n     private String  _message;\n     private Object  _source;       \n@@ -52,6 +54,17 @@ public void setSource(Object _source)\n     {\n         this._source = _source;\n     }\n+    \n+    public String getSourceName()\n+    {\n+        if (_source instanceof ObjectName)\n+        {\n+            return ((ObjectName)_source).getKeyProperty(\"name\");\n+        }\n+        \n+        return null;\n+    }\n+    \n     public String getMessage()\n     {\n         return _message;",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/NotificationObject.java",
                "sha": "926e5f0a24c91f733bff575ff77284b6ac9d88b5",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/OperationData.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/OperationData.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/OperationData.java",
                "patch": "@@ -80,5 +80,13 @@ public void setReturnType(String returnType)\n         this._returnType = returnType;\n     }\n     \n+    public boolean isReturnTypeBoolean()\n+    {\n+        return (_returnType.equals(\"boolean\") || _returnType.equals(\"java.lang.Boolean\"));\n+    }\n     \n+    public boolean isReturnTypeVoid()\n+    {\n+        return (_returnType.equals(\"void\") || _returnType.equals(\"java.lang.Void\"));\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/OperationData.java",
                "sha": "2b83645942ea7a53bc1ea6a2c2af6a930df406de",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/CRAMMD5HashedSaslClientFactory.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/CRAMMD5HashedSaslClientFactory.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/CRAMMD5HashedSaslClientFactory.java",
                "patch": "@@ -0,0 +1,60 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.sasl;\n+\n+import java.util.Map;\n+\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.sasl.Sasl;\n+import javax.security.sasl.SaslClient;\n+import javax.security.sasl.SaslClientFactory;\n+import javax.security.sasl.SaslException;\n+\n+public class CRAMMD5HashedSaslClientFactory implements SaslClientFactory\n+{\n+    /** The name of this mechanism */\n+    public static final String MECHANISM = \"CRAM-MD5-HASHED\";\n+\n+    public SaslClient createSaslClient(String[] mechanisms, String authorizationId, String protocol,\n+                                       String serverName, Map<String, ?> props, CallbackHandler cbh)\n+    throws SaslException\n+    {\n+        for (int i = 0; i < mechanisms.length; i++)\n+        {\n+            if (mechanisms[i].equals(MECHANISM))\n+            {\n+                if (cbh == null)\n+                {\n+                    throw new SaslException(\"CallbackHandler must not be null\");\n+                }\n+\n+                String[] mechs = {\"CRAM-MD5\"};\n+                return Sasl.createSaslClient(mechs, authorizationId, protocol, serverName, props, cbh);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public String[] getMechanismNames(Map props)\n+    { \n+        return new String[]{MECHANISM};\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/CRAMMD5HashedSaslClientFactory.java",
                "sha": "32a0c123441a21b72cebf24494eabb231e20dd82",
                "status": "added"
            },
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/ClientSaslFactory.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/ClientSaslFactory.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/ClientSaslFactory.java",
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.sasl;\n+\n+import java.util.Map;\n+\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.sasl.SaslClient;\n+import javax.security.sasl.SaslClientFactory;\n+import javax.security.sasl.SaslException;\n+\n+public class ClientSaslFactory implements SaslClientFactory\n+{\n+    public SaslClient createSaslClient(String[] mechs, String authorizationId, String protocol,\n+                                       String serverName, Map props, CallbackHandler cbh)\n+    throws SaslException \n+    {\n+        for (int i = 0; i < mechs.length; i++)\n+        {\n+            if (mechs[i].equals(\"PLAIN\"))\n+            {\n+                return new PlainSaslClient(authorizationId, cbh);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Simple-minded implementation that ignores props\n+     */\n+    public String[] getMechanismNames(Map props)\n+    {\n+        return new String[]{\"PLAIN\"};\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/ClientSaslFactory.java",
                "sha": "ce9a273eaae3052bc5d7ab57c85c200265684631",
                "status": "added"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/JCAProvider.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/JCAProvider.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/JCAProvider.java",
                "patch": "@@ -0,0 +1,56 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.sasl;\n+\n+import java.security.Provider;\n+import java.util.Map;\n+\n+import javax.security.sasl.SaslClientFactory;\n+\n+public class JCAProvider extends Provider\n+{\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * Creates the security provider with a map from SASL mechanisms to implementing factories.\n+     *\n+     * @param providerMap The map from SASL mechanims to implementing factory classes.\n+     */\n+    public JCAProvider(Map<String, Class<? extends SaslClientFactory>> providerMap)\n+    {\n+        super(\"AMQSASLProvider\", 1.0, \"A JCA provider that registers all \"\n+              + \"AMQ SASL providers that want to be registered\");\n+        register(providerMap);\n+    }\n+\n+    /**\n+     * Registers client factory classes for a map of mechanism names to client factory classes.\n+     *\n+     * @param providerMap The map from SASL mechanims to implementing factory classes.\n+     */\n+    private void register(Map<String, Class<? extends SaslClientFactory>> providerMap)\n+    {\n+        for (Map.Entry<String, Class<? extends SaslClientFactory>> me : providerMap.entrySet())\n+        {\n+            put(\"SaslClientFactory.\" + me.getKey(), me.getValue().getName());\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/JCAProvider.java",
                "sha": "d8189f3ac36efa2b9d2bd1bd67d2c67f6c5306c1",
                "status": "added"
            },
            {
                "additions": 203,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/PlainSaslClient.java",
                "changes": 203,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/PlainSaslClient.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/PlainSaslClient.java",
                "patch": "@@ -0,0 +1,203 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.sasl;\n+\n+import java.io.*;\n+import javax.security.auth.callback.*;\n+import javax.security.sasl.*;\n+\n+public class PlainSaslClient implements SaslClient\n+{\n+\n+    private boolean completed;\n+    private CallbackHandler cbh;\n+    private String authorizationID;\n+    private String authenticationID;\n+    private byte password[];\n+    private static byte SEPARATOR = 0;\n+    \n+    public PlainSaslClient(String authorizationID, CallbackHandler cbh) throws SaslException\n+    {\n+        completed = false;\n+        this.cbh = cbh;\n+        Object[] userInfo = getUserInfo();\n+        this.authorizationID = authorizationID;\n+        this.authenticationID = (String) userInfo[0];\n+        this.password = (byte[]) userInfo[1];\n+        if (authenticationID == null || password == null)\n+        {\n+            throw new SaslException(\"PLAIN: authenticationID and password must be specified\");\n+        }\n+    }\n+\n+    public byte[] evaluateChallenge(byte[] challenge) throws SaslException\n+    {\n+        if (completed)\n+        {\n+            throw new IllegalStateException(\"PLAIN: authentication already \" +\n+            \"completed\");\n+        }\n+        completed = true;\n+        try \n+        {\n+            byte authzid[] =\n+                authorizationID == null ? null : authorizationID.getBytes(\"UTF8\");\n+            byte authnid[] = authenticationID.getBytes(\"UTF8\");\n+            byte response[] =\n+                new byte[\n+                         password.length +\n+                         authnid.length +\n+                         2 + // SEPARATOR\n+                         (authzid != null ? authzid.length : 0)\n+                         ];\n+            int size = 0;\n+            if (authzid != null) {\n+                System.arraycopy(authzid, 0, response, 0, authzid.length);\n+                size = authzid.length;\n+            }\n+            response[size++] = SEPARATOR;\n+            System.arraycopy(authnid, 0, response, size, authnid.length);\n+            size += authnid.length;\n+            response[size++] = SEPARATOR;\n+            System.arraycopy(password, 0, response, size, password.length);\n+            clearPassword();\n+            return response;\n+        } catch (UnsupportedEncodingException e) {\n+            throw new SaslException(\"PLAIN: Cannot get UTF-8 encoding of ids\",\n+                    e);\n+        }\n+    }\n+\n+    public String getMechanismName()\n+    {\n+        return \"PLAIN\";\n+    }\n+\n+    public boolean hasInitialResponse()\n+    {\n+        return true;\n+    }\n+\n+    public boolean isComplete()\n+    {\n+        return completed;\n+    }\n+\n+    public byte[] unwrap(byte[] incoming, int offset, int len) throws SaslException\n+    {\n+        if (completed) {\n+            throw new IllegalStateException(\"PLAIN: this mechanism supports \" +\n+            \"neither integrity nor privacy\");\n+        } else {\n+            throw new IllegalStateException(\"PLAIN: authentication not \" +\n+            \"completed\");\n+        }\n+    }\n+\n+    public byte[] wrap(byte[] outgoing, int offset, int len) throws SaslException\n+    {\n+        if (completed)\n+        {\n+            throw new IllegalStateException(\"PLAIN: this mechanism supports \" +\n+            \"neither integrity nor privacy\");\n+        }\n+        else\n+        {\n+            throw new IllegalStateException(\"PLAIN: authentication not \" +\n+            \"completed\");\n+        }\n+    }\n+\n+    public Object getNegotiatedProperty(String propName)\n+    {\n+        if (completed)\n+        {\n+            if (propName.equals(Sasl.QOP))\n+            {\n+                return \"auth\";\n+            }\n+            else\n+            {\n+                return null;\n+            }\n+        }\n+        else \n+        {\n+            throw new IllegalStateException(\"PLAIN: authentication not \" +\n+            \"completed\");\n+        }\n+    }\n+\n+    private void clearPassword()\n+    {\n+        if (password != null)\n+        {\n+            for (int i = 0 ; i < password.length ; i++)\n+            {\n+                password[i] = 0;\n+            }\n+            password = null;\n+        }\n+    }\n+\n+    public void dispose() throws SaslException\n+    {\n+        clearPassword();\n+    }\n+\n+    protected void finalize()\n+    {\n+        clearPassword();\n+    }\n+\n+    private Object[] getUserInfo() throws SaslException\n+    {\n+        try\n+        {\n+            final String userPrompt = \"PLAIN authentication id: \";\n+            final String pwPrompt = \"PLAIN password: \";\n+            NameCallback nameCb = new NameCallback(userPrompt);\n+            PasswordCallback passwordCb = new PasswordCallback(pwPrompt, false);\n+            cbh.handle(new Callback[] { nameCb, passwordCb });\n+            String userid = nameCb.getName();\n+            char pwchars[] = passwordCb.getPassword();\n+            byte pwbytes[];\n+            if (pwchars != null)\n+            {\n+                pwbytes = (new String(pwchars)).getBytes(\"UTF8\");\n+                passwordCb.clearPassword();\n+            }\n+            else \n+            {\n+                pwbytes = null;\n+            }\n+            return (new Object[] { userid, pwbytes });\n+        } \n+        catch (IOException e)\n+        {\n+            throw new SaslException(\"Cannot get password\", e);\n+        } \n+        catch (UnsupportedCallbackException e)\n+        {\n+            throw new SaslException(\"Cannot get userid/password\", e);\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/PlainSaslClient.java",
                "sha": "22190f29eb328ec04ccaf505bd3de4ef97d0b177",
                "status": "added"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/SaslProvider.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/SaslProvider.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/SaslProvider.java",
                "patch": "@@ -0,0 +1,35 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.sasl;\n+\n+import java.security.Provider;\n+\n+public class SaslProvider extends Provider\n+{\n+    private static final long serialVersionUID = -6978096016899676466L;\n+\n+    public SaslProvider()\n+    {\n+        super(\"SaslClientFactory\", 1.0, \"SASL PLAIN CLIENT MECHANISM\");\n+        put(\"SaslClientFactory.PLAIN\", \"ClientSaslFactory\");\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/SaslProvider.java",
                "sha": "2917de87401abd7c0e10af9784fe41ab24b67f6c",
                "status": "added"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UserPasswordCallbackHandler.java",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UserPasswordCallbackHandler.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UserPasswordCallbackHandler.java",
                "patch": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.sasl;\n+\n+import java.io.*;\n+import javax.security.auth.callback.*;\n+\n+public class UserPasswordCallbackHandler implements CallbackHandler\n+{\n+    private String user;\n+    private char[] pwchars;\n+    \n+    public UserPasswordCallbackHandler(String user, String password)\n+    {\n+        this.user = user;\n+        this.pwchars = password.toCharArray();\n+    }\n+\n+    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException\n+    {\n+        for (int i = 0; i < callbacks.length; i++)\n+        {\n+            if (callbacks[i] instanceof NameCallback)\n+            {\n+                NameCallback ncb = (NameCallback) callbacks[i];\n+                ncb.setName(user);\n+            } \n+            else if (callbacks[i] instanceof PasswordCallback)\n+            {\n+                PasswordCallback pcb = (PasswordCallback) callbacks[i];\n+                pcb.setPassword(pwchars);\n+            } \n+            else\n+            {\n+                throw new UnsupportedCallbackException(callbacks[i]);\n+            }\n+        }\n+    }\n+\n+    private void clearPassword()\n+    {\n+        if (pwchars != null) \n+        {\n+            for (int i = 0 ; i < pwchars.length ; i++)\n+            {\n+                pwchars[i] = 0;\n+            }\n+            pwchars = null;\n+        }\n+    }\n+\n+    protected void finalize()\n+    {\n+        clearPassword();\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UserPasswordCallbackHandler.java",
                "sha": "1602229c85af0d59256af8f95b6837a49739312d",
                "status": "added"
            },
            {
                "additions": 82,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UsernameHashedPasswordCallbackHandler.java",
                "changes": 82,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UsernameHashedPasswordCallbackHandler.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UsernameHashedPasswordCallbackHandler.java",
                "patch": "@@ -0,0 +1,82 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.sasl;\n+\n+import java.io.IOException;\n+\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.NameCallback;\n+import javax.security.auth.callback.PasswordCallback;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+\n+import org.apache.qpid.management.ui.views.ViewUtility;\n+\n+public class UsernameHashedPasswordCallbackHandler implements CallbackHandler\n+{\n+    private String user;\n+    private char[] pwchars;\n+    \n+    public UsernameHashedPasswordCallbackHandler(String user, String password) throws Exception\n+    {\n+        this.user = user;\n+        this.pwchars = ViewUtility.getHash(password);\n+    }\n+\n+    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException\n+    {\n+        for (int i = 0; i < callbacks.length; i++)\n+        {\n+            if (callbacks[i] instanceof NameCallback)\n+            {\n+                NameCallback ncb = (NameCallback) callbacks[i];\n+                ncb.setName(user);\n+            } \n+            else if (callbacks[i] instanceof PasswordCallback)\n+            {\n+                PasswordCallback pcb = (PasswordCallback) callbacks[i];\n+                pcb.setPassword(pwchars);\n+            } \n+            else\n+            {\n+                throw new UnsupportedCallbackException(callbacks[i]);\n+            }\n+        }\n+    }\n+\n+    \n+    private void clearPassword()\n+    {\n+        if (pwchars != null) \n+        {\n+            for (int i = 0 ; i < pwchars.length ; i++)\n+            {\n+                pwchars[i] = 0;\n+            }\n+            pwchars = null;\n+        }\n+    }\n+\n+    protected void finalize()\n+    {\n+        clearPassword();\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UsernameHashedPasswordCallbackHandler.java",
                "sha": "f4e3d2661e153ba92a1813ca749ac76006ef6b09",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/AttributesTabControl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/AttributesTabControl.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/AttributesTabControl.java",
                "patch": "@@ -596,7 +596,7 @@ public void widgetSelected(SelectionEvent event)\n     }    \n \n     // Refresh from the server registry\n-    private void refresh()\n+    public void refresh()\n     {\n         JMXServerRegistry serverRegistry = (JMXServerRegistry)ApplicationRegistry.getServerRegistry(_mbean);\n         ManagedAttributeModel attributesList = serverRegistry.getAttributeModel(_mbean);",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/AttributesTabControl.java",
                "sha": "a7e8bbfc4c62afdb027622eb322b5b92e37fd33c",
                "status": "modified"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java",
                "changes": 98,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 25,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java",
                "patch": "@@ -62,6 +62,7 @@\n     \n     private FormToolkit  _toolkit = null;\n     private Form _form = null;\n+    private String _formText = APPLICATION_NAME;\n     private static ManagedServer _server = null;\n     private TreeObject _selectedNode = null;\n     private ManagedBean _mbean = null;\n@@ -73,6 +74,8 @@\n \n     // TabFolder to list all the mbeans for a given mbeantype(eg Connection, Queue, Exchange)\n     private TabFolder typeTabFolder = null;\n+    \n+    private TabFolder notificationTabFolder = null;\n     /*\n      * Listener for the selection events in the navigation view\n      */ \n@@ -91,16 +94,41 @@ public void selectionChanged(IWorkbenchPart part, ISelection sel)\n             // an mbeantype. For mbeantype selection(eg Connection, Queue, Exchange) _mbean will remain null.\n             _mbean = null;\n             setInvisible();\n-            _form.setText(APPLICATION_NAME);\n             \n-            // If a selected node(mbean) gets unregistered from mbena server, mbenaview should should \n+            // If a selected node(mbean) gets unregistered from mbean server, mbeanview should \n             // make the tabfolber for that mbean invisible\n             if (_selectedNode == null)            \n                 return;\n             \n             setServer();\n             refreshMBeanView();\n+            setFormTitle();            \n+        }\n+    }\n+    \n+    private void setFormTitle()\n+    {\n+        if (_mbean != null)\n+        {\n+            _formText = _mbean.getType();\n+            if ((_mbean.getVirtualHostName() != null) && (!DEFAULT_VH.equals(_mbean.getVirtualHostName())) )\n+            {\n+                _formText = _formText.replaceFirst(VIRTUAL_HOST, _mbean.getVirtualHostName());\n+                if (_mbean.getName() != null && _mbean.getName().length() != 0)\n+                {\n+                    _formText = _formText + \": \" + _mbean.getName();\n+                }\n+            }\n+        }\n+        else if ((_selectedNode.getVirtualHost() != null) && (!DEFAULT_VH.equals(_selectedNode.getVirtualHost())))\n+        {\n+            _formText = _selectedNode.getVirtualHost();\n         }\n+        else\n+        {\n+            _formText = APPLICATION_NAME;\n+        }\n+        _form.setText(_formText);\n     }\n     \n     public void refreshMBeanView()\n@@ -121,10 +149,16 @@ else if (NODE_TYPE_MBEANTYPE.equals(_selectedNode.getType()))\n             {\n                 refreshTypeTabFolder(_selectedNode.getName());\n             } \n-            else\n+            else if (NOTIFICATIONS.equals(_selectedNode.getType()))\n+            {\n+                refreshNotificationPage();\n+            }\n+            else if (MBEAN.equals(_selectedNode.getType()))\n             {\n+                _mbean = (ManagedBean)_selectedNode.getManagedObject(); \n                 showSelectedMBean();\n             }\n+            \n             _form.layout(true);\n             _form.getBody().layout(true, true);\n         }\n@@ -174,20 +208,7 @@ public static String getVirtualHost()\n     }\n     \n     private void showSelectedMBean() throws Exception\n-    {     \n-        if (NOTIFICATION.equals(_selectedNode.getType()))\n-        {\n-            _mbean = (ManagedBean)_selectedNode.getParent().getManagedObject();                \n-        }\n-        else if (MBEAN.equals(_selectedNode.getType()))\n-        {\n-            _mbean = (ManagedBean)_selectedNode.getManagedObject();                \n-        }\n-        else\n-        {\n-            return;\n-        }\n-        \n+    {           \n         try\n         {                \n             MBeanUtility.getMBeanInfo(_mbean);     \n@@ -213,14 +234,8 @@ else if (MBEAN.equals(_selectedNode.getType()))\n             tabFolder = createMBeanTabFolder();\n         }\n         \n-        String text = _mbean.getType();\n-        if (_mbean.getName() != null && _mbean.getName().length() != 0)\n-        {\n-            text = text + \": \" + _mbean.getName();\n-        }\n-        _form.setText(text);\n         int tabIndex = 0;\n-        if (NOTIFICATION.equals(_selectedNode.getType()))\n+        if (NOTIFICATIONS.equals(_selectedNode.getType()))\n         {\n             tabIndex = tabFolder.getItemCount() -1;\n         }\n@@ -247,6 +262,8 @@ public void createPartControl(Composite parent)\n         // Add mbeantype TabFolder. This will list all the mbeans under a mbeantype (eg Queue, Exchange).\n         // Using this list mbeans will be added in the navigation view\n         createMBeanTypeTabFolder();\n+        \n+        createNotificationsTabFolder();\n     }\n     \n     private TabFolder createMBeanTabFolder()\n@@ -345,7 +362,7 @@ private void createNotificationsTab(TabFolder tabFolder)\n         NotificationsTabControl controller = new NotificationsTabControl(tabFolder);\n         \n         TabItem tab = new TabItem(tabFolder, SWT.NONE);\n-        tab.setText(NOTIFICATION);\n+        tab.setText(NOTIFICATIONS);\n         tab.setData(CONTROLLER, controller);\n         tab.setControl(controller.getControl());\n     }\n@@ -432,6 +449,32 @@ public void handleEvent(Event evt)\n         });\n     }\n     \n+    private void createNotificationsTabFolder()\n+    {\n+        notificationTabFolder = new TabFolder(_form.getBody(), SWT.NONE);\n+        FormData layoutData = new FormData();\n+        layoutData.left = new FormAttachment(0);\n+        layoutData.top = new FormAttachment(0);\n+        layoutData.right = new FormAttachment(100);\n+        layoutData.bottom = new FormAttachment(100);\n+        notificationTabFolder.setLayoutData(layoutData);\n+        notificationTabFolder.setVisible(false);\n+        \n+        VHNotificationsTabControl controller = new VHNotificationsTabControl(notificationTabFolder);       \n+        TabItem tab = new TabItem(notificationTabFolder, SWT.NONE);\n+        tab.setText(NOTIFICATIONS);\n+        tab.setData(CONTROLLER, controller);\n+        tab.setControl(controller.getControl());\n+    }\n+    \n+    private void refreshNotificationPage()\n+    {        \n+        TabItem tab = notificationTabFolder.getItem(0);\n+        VHNotificationsTabControl controller = (VHNotificationsTabControl)tab.getData(CONTROLLER);\n+        controller.refresh();\n+        notificationTabFolder.setVisible(true);\n+    }\n+    \n     /**\n      * Refreshes the Selected mbeantype tab. The control lists all the available mbeans\n      * for an mbeantype(eg Queue, Exchange etc)\n@@ -492,6 +535,11 @@ private void setInvisible()\n         {\n             typeTabFolder.setVisible(false);\n         }\n+        \n+        if (notificationTabFolder != null)\n+        {\n+            notificationTabFolder.setVisible(false);\n+        }\n     }\n     \n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java",
                "sha": "344c3c4e7f256156e191df90da9f145294528543",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 8,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java",
                "patch": "@@ -244,7 +244,8 @@ public void addNewServer(String transportProtocol, String host, int port, String\n             List<TreeObject> list = _serversRootNode.getChildren();\n             for (TreeObject node : list)\n             {\n-                if (url.equals(node.getUrl()))\n+                ManagedServer nodeServer = (ManagedServer)node.getManagedObject();\n+                if (url.equals(nodeServer.getUrl()))\n                 {\n                     // Server is already in the list of added servers, so now connect it.\n                     // Set the server node as selected and then connect it.\n@@ -266,7 +267,6 @@ public void addNewServer(String transportProtocol, String host, int port, String\n \n         // Server connection is successful. Now add the server in the tree\n         TreeObject serverNode = new TreeObject(serverAddress, NODE_TYPE_SERVER);\n-        serverNode.setUrl(url);\n         serverNode.setManagedObject(managedServer);\n         _serversRootNode.addChild(serverNode);\n \n@@ -504,6 +504,11 @@ private void addDefaultNodes(TreeObject parent)\n         typeChild = new TreeObject(QUEUE, NODE_TYPE_MBEANTYPE);\n         typeChild.setParent(parent);\n         typeChild.setVirtualHost(parent.getVirtualHost());\n+        \n+        // Add common notification node for virtual host\n+        TreeObject notificationNode = new TreeObject(NOTIFICATIONS, NOTIFICATIONS);\n+        notificationNode.setParent(parent);\n+        notificationNode.setVirtualHost(parent.getVirtualHost());\n     }\n \n     /**\n@@ -585,7 +590,10 @@ private void addManagedBean(TreeObject domain, ManagedBean mbean) // throws Exce\n \n                 // create a node for \"type\"\n                 typeNode = createTypeNode(parentNode, type);\n-                typeNode.setVirtualHost(mbean.getVirtualHostName());\n+                if (!type.equals(VIRTUAL_HOST))\n+                {\n+                    typeNode.setVirtualHost(mbean.getVirtualHostName());\n+                }\n             }\n \n             // now type node create becomes the parent node for next node in hierarchy\n@@ -641,8 +649,8 @@ private void addManagedBean(TreeObject domain, ManagedBean mbean) // throws Exce\n \n         // Add notification node\n         // TODO: show this only if the mbean sends any notification\n-        TreeObject notificationNode = new TreeObject(NOTIFICATION, NOTIFICATION);\n-        notificationNode.setParent(mbeanNode);\n+        //TreeObject notificationNode = new TreeObject(NOTIFICATION, NOTIFICATION);\n+        //notificationNode.setParent(mbeanNode);\n     }\n \n     private TreeObject createTypeNode(TreeObject parent, String name)\n@@ -1044,7 +1052,7 @@ public void dispose()\n         public Image getImage(Object element)\n         {\n             TreeObject node = (TreeObject) element;\n-            if (node.getType().equals(NOTIFICATION))\n+            if (node.getType().equals(NOTIFICATIONS))\n             {\n                 return ApplicationRegistry.getImage(NOTIFICATION_IMAGE);\n             }\n@@ -1107,8 +1115,11 @@ public int category(Object element)\n             {\n                 return 1;\n             }\n-\n-            return 2;\n+            if (node.getType().equals(NOTIFICATIONS))\n+            {\n+                return 2;\n+            }\n+            return 3;\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java",
                "sha": "68f95e01f01dd5dfc80dc9b10910aedca60b9e4e",
                "status": "modified"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NotificationsTabControl.java",
                "changes": 410,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NotificationsTabControl.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 357,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NotificationsTabControl.java",
                "patch": "@@ -20,29 +20,28 @@\n  */\n package org.apache.qpid.management.ui.views;\n \n-import java.util.ArrayList;\n+import static org.apache.qpid.management.ui.Constants.BUTTON_CLEAR;\n+import static org.apache.qpid.management.ui.Constants.BUTTON_REFRESH;\n+import static org.apache.qpid.management.ui.Constants.DESCRIPTION;\n+import static org.apache.qpid.management.ui.Constants.FONT_BOLD;\n+import static org.apache.qpid.management.ui.Constants.FONT_BUTTON;\n+import static org.apache.qpid.management.ui.Constants.FONT_ITALIC;\n+import static org.apache.qpid.management.ui.Constants.SUBSCRIBE_BUTTON;\n+import static org.apache.qpid.management.ui.Constants.UNSUBSCRIBE_BUTTON;\n+\n import java.util.List;\n \n-import static org.apache.qpid.management.ui.Constants.*;\n import org.apache.qpid.management.ui.ApplicationRegistry;\n import org.apache.qpid.management.ui.ManagedBean;\n import org.apache.qpid.management.ui.ServerRegistry;\n import org.apache.qpid.management.ui.jmx.MBeanUtility;\n import org.apache.qpid.management.ui.model.NotificationInfoModel;\n import org.apache.qpid.management.ui.model.NotificationObject;\n-import org.eclipse.jface.viewers.DoubleClickEvent;\n-import org.eclipse.jface.viewers.IDoubleClickListener;\n-import org.eclipse.jface.viewers.ILabelProviderListener;\n-import org.eclipse.jface.viewers.IStructuredContentProvider;\n-import org.eclipse.jface.viewers.ITableLabelProvider;\n-import org.eclipse.jface.viewers.StructuredSelection;\n-import org.eclipse.jface.viewers.TableViewer;\n-import org.eclipse.jface.viewers.Viewer;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n import org.eclipse.swt.SWT;\n import org.eclipse.swt.events.SelectionAdapter;\n import org.eclipse.swt.events.SelectionEvent;\n import org.eclipse.swt.events.SelectionListener;\n-import org.eclipse.swt.graphics.Image;\n import org.eclipse.swt.layout.FormAttachment;\n import org.eclipse.swt.layout.FormData;\n import org.eclipse.swt.layout.FormLayout;\n@@ -52,85 +51,41 @@\n import org.eclipse.swt.widgets.Combo;\n import org.eclipse.swt.widgets.Composite;\n import org.eclipse.swt.widgets.Control;\n-import org.eclipse.swt.widgets.Display;\n import org.eclipse.swt.widgets.Label;\n-import org.eclipse.swt.widgets.Shell;\n import org.eclipse.swt.widgets.TabFolder;\n-import org.eclipse.swt.widgets.Table;\n-import org.eclipse.swt.widgets.TableColumn;\n-import org.eclipse.swt.widgets.Text;\n-import org.eclipse.ui.forms.widgets.Form;\n-import org.eclipse.ui.forms.widgets.FormToolkit;\n \n /**\n  * Creates control composite for Notifications tab\n  * @author Bhupendra Bhardwaj\n  */\n-public class NotificationsTabControl extends TabControl\n-{\n-    private FormToolkit  _toolkit;\n-    private Form _form;\n-    private Table table = null;\n-    private TableViewer _tableViewer  = null;\n-    \n-    private IStructuredContentProvider contentProvider = new ContentProviderImpl();\n-    private SelectionListener selectionListener = new SelectionListenerImpl();\n-    private SelectionListener comboListener = new ComboSelectionListener();\n-    \n-    private Thread worker = null;\n-    \n-    private List<NotificationObject> _notifications = null;\n-    private static final String COLUMN_SEQ  = \"Sequence No\";\n-    private static final String COLUMN_TIME = \"TimeStamp\";\n-    private static final String COLUMN_TYPE  = \"Type\";\n-    private static final String COLUMN_MSG  = \"Notification Message\";\n-    private static final String[] _tableTitles = new String [] {\n-            COLUMN_SEQ,\n-            COLUMN_TIME,\n-            COLUMN_TYPE,\n-            COLUMN_MSG\n-         };\n+public class NotificationsTabControl extends VHNotificationsTabControl\n+{    \n+    private static final String SELECT_NOTIFICATIONNAME = \"Select Notification\";\n+    private static final String SELECT_NOTIFICATIONTYPE = \"Select Type\";\n+    private SelectionListener selectionListener;\n+    private SelectionListener comboListener;    \n     \n     private Combo notificationNameCombo = null;\n     private Combo typesCombo = null;\n     private Label descriptionLabel = null;\n     private Button _subscribeButton   = null;\n     private Button _unsubscribeButton = null;\n-    private Button _clearButton       = null;\n-    private Button _refreshButton       = null;\n-    \n     \n     public NotificationsTabControl(TabFolder tabFolder)\n     {\n         super(tabFolder);\n-        _toolkit = new FormToolkit(_tabFolder.getDisplay());\n-        _form = _toolkit.createForm(_tabFolder);\n-        GridLayout gridLayout = new GridLayout();      \n-        gridLayout.marginWidth = 0;\n-        gridLayout.marginHeight = 0;       \n-        _form.getBody().setLayout(gridLayout);\n-        \n-        createWidgets();\n-        worker = new Thread(new Worker()); \n-        worker.start();\n     }\n     \n-    private void createWidgets()\n+    protected void createWidgets()\n     {       \n+        selectionListener = new SelectionListenerImpl();\n+        comboListener = new ComboSelectionListener();\n         createNotificationInfoComposite();\n         //addFilterComposite();\n         addButtons();  \n         createTableViewer();\n     }\n     \n-    /**\n-     * @see TabControl#getControl()\n-     */\n-    public Control getControl()\n-    {\n-        return _form;\n-    }\n-    \n     /**\n      * Creates composite and populates for displaying Notification Information (name, type, description)\n      * and creates buttons for subscribing or unsubscribing for notifications\n@@ -205,7 +160,7 @@ private void createNotificationInfoComposite()\n     /**\n      * Creates clear buttin and refresh button\n      */\n-    private void addButtons()\n+    protected void addButtons()\n     {    \n         Composite composite = _toolkit.createComposite(_form.getBody(), SWT.NONE);\n         composite.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n@@ -224,8 +179,9 @@ public void widgetSelected(SelectionEvent e)\n                     if (_mbean == null)\n                         return;\n                     \n+                    IStructuredSelection ss = (IStructuredSelection)_tableViewer.getSelection();\n                     ServerRegistry serverRegistry = ApplicationRegistry.getServerRegistry(_mbean);\n-                    serverRegistry.clearNotifications(_mbean);\n+                    serverRegistry.clearNotifications(_mbean, ss.toList());\n                     refresh();\n                 }\n             });\n@@ -247,155 +203,13 @@ public void widgetSelected(SelectionEvent e)\n                 }\n             });\n     }\n-    \n-    /**\n-     * Creates table to display notifications\n-     */\n-    private void createTable()\n-    {\n-        table = _toolkit.createTable(_form.getBody(),  SWT.FULL_SELECTION);\n-        table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n-        \n-        TableColumn column = new TableColumn(table, SWT.NONE);\n-        column.setText(_tableTitles[0]);\n-        column.pack();        //column.setWidth(200);\n-\n-        column = new TableColumn(table, SWT.NONE);\n-        column.setText(_tableTitles[1]);\n-        column.setWidth(150);\n-        \n-        column = new TableColumn(table, SWT.NONE);\n-        column.setText(_tableTitles[2]);\n-        column.setWidth(100);\n-        \n-        column = new TableColumn(table, SWT.NONE);\n-        column.setText(_tableTitles[3]);\n-        column.setWidth(500);\n-        \n-        table.setHeaderVisible(true);\n-        table.setLinesVisible(true);\n-    }\n-    \n-    /**\n-     * Creates JFace viewer for the notifications table\n-     */\n-    protected void createTableViewer()\n-    {\n-        createTable();\n-        _tableViewer = new TableViewer(table);\n-        //_tableViewer.getControl().setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n-        _tableViewer.setUseHashlookup(true);\n-        _tableViewer.setContentProvider(contentProvider);\n-        _tableViewer.setLabelProvider(new LabelProviderImpl());\n-        _tableViewer.setColumnProperties(_tableTitles);\n-        /*\n-        CellEditor[] cellEditors = new CellEditor[_tableTitles.length];\n-        TextCellEditor textEditor = new TextCellEditor(table);\n-        cellEditors[0] = textEditor;\n-        textEditor = new TextCellEditor(table);\n-        cellEditors[1] = textEditor;\n-        textEditor = new TextCellEditor(table);\n-        cellEditors[2] = textEditor;\n-        textEditor = new TextCellEditor(table);\n-        cellEditors[3] = textEditor;\n-        \n-        // Assign the cell editors to the viewer \n-        _tableViewer.setCellEditors(cellEditors);\n-        _tableViewer.setCellModifier(new TableCellModifier());\n-        */\n-        \n-        addTableListeners();\n-        \n-        //_tableViewer.addSelectionChangedListener(new );\n-        \n-        //_notificationDetails = new Composite(_tabControl, SWT.BORDER);\n-        //_notificationDetails.setLayoutData(new GridData(GridData.FILL_BOTH));\n-        \n-        //_tabControl.layout();\n-        //viewerComposite.layout();\n-    }\n-    \n-    /**\n-     * Adds listeners to the viewer for displaying notification details \n-     */\n-    private void addTableListeners()\n-    {\n-        _tableViewer.addDoubleClickListener(new IDoubleClickListener()\n-            {\n-                Display display = null;\n-                Shell   shell = null;\n-                public void doubleClick(DoubleClickEvent event)\n-                {\n-                    display = Display.getCurrent();\n-                    shell = new Shell(display, SWT.BORDER | SWT.CLOSE | SWT.MIN |\n-                            SWT.MAX | SWT.RESIZE);\n-                    shell.setText(\"Notification\");\n-\n-                    int x = display.getBounds().width;\n-                    int y = display.getBounds().height;\n-                    shell.setBounds(x/4, y/4, x/2, y/3);\n-                    StructuredSelection selection = (StructuredSelection)event.getSelection();\n-                    createPopupContents((NotificationObject)selection.getFirstElement());\n-                    shell.open();\n-                    while (!shell.isDisposed()) {\n-                        if (!display.readAndDispatch()) {\n-                            display.sleep();\n-                        }\n-                    }\n-                    \n-                    //If you create it, you dispose it.\n-                    shell.dispose();\n-                }\n-\n-                private void createPopupContents(NotificationObject obj)\n-                {                    \n-                    shell.setLayout(new GridLayout());\n-                    \n-                    Composite parent = new Composite(shell, SWT.NONE);\n-                    parent.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n-                    GridLayout layout = new GridLayout(4, true);\n-                    parent.setLayout(layout);\n-\n-                    Label key = new Label(parent, SWT.TRAIL);               \n-                    key.setText(COLUMN_SEQ);\n-                    GridData layoutData = new GridData(SWT.TRAIL, SWT.TOP, false, false,1,1);\n-                    key.setLayoutData(layoutData);\n-                    Text  value = new Text(parent, SWT.BEGINNING | SWT.BORDER |SWT.READ_ONLY);\n-                    value.setText(\"\"+obj.getSequenceNo());\n-                    value.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,3,1));\n-\n-                    // Time row\n-                    key = new Label(parent, SWT.TRAIL);\n-                    key.setText(COLUMN_TIME);\n-                    key.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, true, false,1,1));\n-                    value = new Text(parent, SWT.BEGINNING | SWT.BORDER | SWT.READ_ONLY);\n-                    value.setText(\"\"+obj.getTimeStamp());\n-                    value.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,3,1));\n-\n-                    key = new Label(parent, SWT.TRAIL);\n-                    key.setText(COLUMN_TYPE);\n-                    key.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, true, false,1,1));\n-                    value = new Text(parent, SWT.BEGINNING | SWT.BORDER | SWT.READ_ONLY);\n-                    value.setText(\"\"+obj.getType());\n-                    value.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,3,1));\n-\n-                    key = new Label(parent, SWT.TRAIL);\n-                    key.setText(COLUMN_MSG);\n-                    key.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, true, false,1,1));\n-                    value = new Text(parent, SWT.MULTI | SWT.WRAP| SWT.BORDER | SWT.V_SCROLL | SWT.READ_ONLY);\n-                    value.setText(\"\"+obj.getMessage());\n-                    GridData gridData = new GridData(SWT.FILL, SWT.FILL, true, true, 3, 1);\n-                    gridData.heightHint = 100;\n-                    value.setLayoutData(gridData);\n-                }\n-            });\n-    }\n-    \n+  \n     @Override\n     public void refresh(ManagedBean mbean)\n     {\n         _mbean = mbean;\n         _notifications = null;\n+        _table.deselectAll();\n         _tableViewer.getTable().clearAll();\n         \n         if (_mbean == null)\n@@ -431,9 +245,10 @@ public void refresh(ManagedBean mbean)\n         _form.getBody().layout(true, true);\n     }\n     \n-    private void refresh()\n+    public void refresh()\n     {\n         _notifications = null;\n+        _table.deselectAll();\n         _tableViewer.getTable().clearAll();\n     }\n     \n@@ -444,7 +259,11 @@ private void populateNotificationInfo()\n     {\n         notificationNameCombo.removeAll();\n         NotificationInfoModel[] items = MBeanUtility.getNotificationInfo(_mbean);\n-        notificationNameCombo.add(\"Select Notification\");\n+        if (items.length > 1)\n+        {\n+            notificationNameCombo.add(SELECT_NOTIFICATIONNAME);\n+        }\n+        \n         for (int i = 0; i < items.length; i++)\n         {\n             notificationNameCombo.add(items[i].getName());\n@@ -457,6 +276,7 @@ private void populateNotificationInfo()\n         typesCombo.select(0);\n         typesCombo.setEnabled(false);\n         \n+        populateNotificationType(notificationNameCombo.getItem(0));\n         checkForEnablingButtons();\n     }\n     \n@@ -466,7 +286,8 @@ private void populateNotificationInfo()\n     private void checkForEnablingButtons()\n     {\n         int nameIndex = notificationNameCombo.getSelectionIndex();\n-        if (nameIndex == 0)\n+        int itemCount = notificationNameCombo.getItems().length;\n+        if ((itemCount > 1) && (nameIndex == 0))\n         {\n             _subscribeButton.setEnabled(false);\n             _unsubscribeButton.setEnabled(false);\n@@ -475,7 +296,8 @@ private void checkForEnablingButtons()\n         }\n         \n         int typeIndex = typesCombo.getSelectionIndex();\n-        if (typeIndex == 0)\n+        itemCount = typesCombo.getItems().length;\n+        if ((itemCount > 1) && (typeIndex == 0))\n         {\n             _subscribeButton.setEnabled(false);\n             _unsubscribeButton.setEnabled(false);\n@@ -560,164 +382,38 @@ public void widgetSelected(SelectionEvent e)\n             Combo combo = (Combo)e.getSource();\n             if (combo == notificationNameCombo)\n             {\n-                if (combo.getSelectionIndex() == 0)\n-                {\n-                    descriptionLabel.setText(\"\");\n-                    typesCombo.select(0);\n-                    typesCombo.setEnabled(false);\n-                    return;\n-                }\n-                String index = combo.getItem(combo.getSelectionIndex());                \n-                NotificationInfoModel data = (NotificationInfoModel)combo.getData(index);\n-                descriptionLabel.setText(data.getDescription());\n-                typesCombo.removeAll();       \n-                typesCombo.setItems(data.getTypes());\n-                typesCombo.add(\"Select Type\", 0);\n-                typesCombo.select(0);\n-                typesCombo.setEnabled(true);\n+                String selectedItem = combo.getItem(combo.getSelectionIndex());                \n+                populateNotificationType(selectedItem);\n             }\n             checkForEnablingButtons();\n         }\n     }\n     \n-    /**\n-     * Content provider class for the table viewer\n-     */\n-    private class ContentProviderImpl implements IStructuredContentProvider, INotificationViewer\n+    private void populateNotificationType(String notificationName)\n     {\n-        public void inputChanged(Viewer v, Object oldInput, Object newInput)\n+        NotificationInfoModel data = (NotificationInfoModel)notificationNameCombo.getData(notificationName);\n+        if (data == null)\n         {\n-            \n-        }\n-        public void dispose()\n-        {\n-            \n-        }\n-        public Object[] getElements(Object parent) \n-        {\n-            return _notifications.toArray(new NotificationObject[0]);\n-        }\n-        public void addNotification(NotificationObject notification)\n-        {\n-            _tableViewer.add(notification);\n-        }\n-        \n-        public void addNotification(List<NotificationObject> notificationList)\n-        {\n-            _tableViewer.add(notificationList.toArray(new NotificationObject[0]));\n-        }\n-    }\n-    \n-    /**\n-     * Label provider for the table viewer\n-     */\n-    private class LabelProviderImpl implements ITableLabelProvider\n-    {\n-        List<ILabelProviderListener> listeners = new ArrayList<ILabelProviderListener>();       \n-        public void addListener(ILabelProviderListener listener)\n-        {\n-            listeners.add(listener);\n-        }\n-        \n-        public void dispose(){\n-            \n-        }\n-        \n-        public Image getColumnImage(Object element, int columnIndex)\n-        {\n-            return null;\n-        }\n-        \n-        public String getColumnText(Object element, int columnIndex)\n-        {\n-            String result = null;\n-            NotificationObject t = (NotificationObject)element;\n-            switch(columnIndex)\n-            {\n-            case 0 : \n-                result = String.valueOf(t.getSequenceNo());\n-                break;\n-            case 1 :\n-                result = String.valueOf(t.getTimeStamp());\n-                break;\n-            case 2 : \n-                result = t.getType();\n-                break;\n-            case 3 : \n-                result = t.getMessage();\n-                break;\n-            default : \n-                result = \"\";\n-            }\n-            \n-            return result;\n-        }\n-        \n-        public boolean isLabelProperty(Object element, String property)\n-        {\n-            return false;\n-        }\n-        \n-        public void removeListener(ILabelProviderListener listener)\n-        {\n-            listeners.remove(listener);\n-        }\n-    } // end of LabelProviderImpl\n-    \n-    private boolean workerRunning = false;\n-    private void setWorkerRunning(boolean running)\n-    {\n-        workerRunning = running;\n-    }\n-    \n-    /**\n-     * Worker class which keeps looking if there are new notifications coming from server for the selected mbean\n-     */\n-    private class Worker implements Runnable\n-    {\n-        public void run()\n-        {\n-            Display display = _tabFolder.getDisplay();\n-            while(true)\n-            {\n-                if (!workerRunning || _mbean == null || display == null)\n-                {\n-                    sleep();\n-                    continue;\n-                }\n-                \n-                display.syncExec(new Runnable()\n-                {\n-                    public void run()\n-                    {\n-                        setWorkerRunning(_form.isVisible());\n-                        if (!workerRunning) return;\n-                        \n-                        updateTableViewer();\n-                    }\n-                });     \n-            \n-                sleep();\n-            }\n+            descriptionLabel.setText(\"\");\n+            typesCombo.select(0);\n+            typesCombo.setEnabled(false);\n+            return;\n         }\n-        \n-        private void sleep()\n+        descriptionLabel.setText(data.getDescription());\n+        typesCombo.removeAll();       \n+        typesCombo.setItems(data.getTypes());\n+        if (typesCombo.getItemCount() > 1)\n         {\n-            try\n-            {\n-                Thread.sleep(2000);\n-            }\n-            catch(Exception ex)\n-            {\n-\n-            }  \n+            typesCombo.add(SELECT_NOTIFICATIONTYPE, 0);\n         }\n+        typesCombo.select(0);\n+        typesCombo.setEnabled(true);\n     }\n     \n     /**\n      * Updates the table with new notifications received from mbean server for the selected mbean\n      */\n-    private void updateTableViewer()\n+    protected void updateTableViewer()\n     {\n         ServerRegistry serverRegistry = ApplicationRegistry.getServerRegistry(_mbean);        \n         List<NotificationObject> newList = serverRegistry.getNotifications(_mbean);",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NotificationsTabControl.java",
                "sha": "6894080859fcfc99e14d5cdd7214c5716d430a95",
                "status": "modified"
            },
            {
                "additions": 79,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/OperationTabControl.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/OperationTabControl.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 5,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/OperationTabControl.java",
                "patch": "@@ -20,10 +20,16 @@\n  */\n package org.apache.qpid.management.ui.views;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map.Entry;\n \n+import javax.management.openmbean.CompositeData;\n+import javax.management.openmbean.TabularDataSupport;\n+\n import static org.apache.qpid.management.ui.Constants.*;\n import org.apache.qpid.management.ui.ApplicationRegistry;\n import org.apache.qpid.management.ui.ManagedBean;\n@@ -76,7 +82,7 @@\n     private SelectionListener operationExecutionListener = new OperationExecutionListener(); \n     private SelectionListener refreshListener = new RefreshListener(); \n     private SelectionListener parameterSelectionListener = new ParameterSelectionListener();\n-    private SelectionListener bolleanSelectionListener = new BooleanSelectionListener();\n+    private SelectionListener booleanSelectionListener = new BooleanSelectionListener();\n     private VerifyListener    verifyListener = new VerifyListenerImpl();\n     private KeyListener       keyListener = new KeyListenerImpl();\n     private KeyListener       headerBindingListener = new HeaderBindingKeyListener();\n@@ -249,6 +255,8 @@ private void createParameterWidgets()\n             formData.top = new FormAttachment(0, parameterPositionOffset);\n             formData.left = new FormAttachment(label, 5);\n             formData.right = new FormAttachment(valueWidth);\n+            // this will contain the list of items, if the list is to be made available to choose from\n+            // e.g. the list of exchanges\n             String[] items = null;\n             if (param.getName().equals(QUEUE))\n             {\n@@ -269,6 +277,15 @@ else if (param.getName().equals(EXCHANGE_TYPE))\n             {\n                 items = EXCHANGE_TYPE_VALUES;\n             }\n+            else if (_mbean.isAdmin() && param.getName().equals(OPERATION_PARAM_USERNAME)\n+                                      && !_opData.getName().equals(OPERATION_CREATEUSER))\n+            {\n+                List<String> list = ApplicationRegistry.getServerRegistry(_mbean).getUsernames();\n+                if (list != null && !list.isEmpty())\n+                {\n+                    items = list.toArray(new String[0]);\n+                }\n+            }\n             \n             if (items != null)\n             {\n@@ -295,12 +312,17 @@ else if (param.isBoolean())\n                 Button booleanButton = _toolkit.createButton(_paramsComposite, \"\", SWT.CHECK);\n                 booleanButton.setLayoutData(formData);\n                 booleanButton.setData(param);\n-                booleanButton.addSelectionListener(bolleanSelectionListener);\n+                booleanButton.addSelectionListener(booleanSelectionListener);\n                 valueInCombo = true;                \n             }\n             else\n             {\n-                Text text = _toolkit.createText(_paramsComposite, \"\", SWT.NONE);\n+                int style = SWT.NONE;\n+                if (PASSWORD.equalsIgnoreCase(param.getName()))\n+                {\n+                    style = SWT.PASSWORD;\n+                }\n+                Text text = _toolkit.createText(_paramsComposite, \"\", style);\n                 formData = new FormData();\n                 formData.top = new FormAttachment(0, parameterPositionOffset);\n                 formData.left = new FormAttachment(label, 5);\n@@ -530,6 +552,8 @@ private void clearParameterValues(Composite control)\n                 ((org.eclipse.swt.widgets.List)controls[i]).deselectAll();\n             else if (controls[i] instanceof Text)\n                 ((Text)controls[i]).setText(\"\");\n+            else if (controls[i] instanceof Button)\n+                ((Button)controls[i]).setSelection(false);\n             else if (controls[i] instanceof Composite)\n                 clearParameterValues((Composite)controls[i]);\n         }\n@@ -557,6 +581,21 @@ public void widgetSelected(SelectionEvent e)\n                         }\n                         // End of custom code\n                         \n+                        \n+                        // customized for passwords\n+                        if (PASSWORD.equalsIgnoreCase(param.getName()))\n+                        {\n+                            try\n+                            {\n+                                param.setValueFromString(ViewUtility.getHashedString(param.getValue()));\n+                            }\n+                            catch (Exception ex)\n+                            {\n+                                MBeanUtility.handleException(_mbean, ex);\n+                                return;\n+                            }\n+                        }\n+                        // end of customization\n                         ViewUtility.popupInfoMessage(_form.getText(),\n                                 \"Please select the \" + ViewUtility.getDisplayText(param.getName()));\n                         \n@@ -609,16 +648,33 @@ private void executeAndShowResults()\n             return;\n         }\n         \n+        // Custom code for Admin mbean operation\n+        /* These custome codes here are to make the GUI look more user friendly. \n+         * Here we are adding the users to a list, which will be used to list username to be selected on\n+         * pages like \"delete user\", \"set password\" instead of typing the username\n+        */\n+        if (_mbean.isAdmin() && _opData.getName().equals(OPERATION_VIEWUSERS))\n+        {\n+            ApplicationRegistry.getServerRegistry(_mbean).setUserList(extractUserList(result));\n+        }\n+        // end of custom code\n+        \n         // Some mbeans have only \"type\" and no \"name\".\n         String title = _mbean.getType();\n         if (_mbean.getName() != null && _mbean.getName().length() != 0)\n         {\n             title = _mbean.getName();\n         }\n         \n-        if (_opData.getReturnType().equals(\"void\") || _opData.getReturnType().equals(\"java.lang.Void\"))\n+        if (_opData.isReturnTypeVoid())\n+        {\n+            ViewUtility.popupInfoMessage(title, OPERATION_SUCCESSFUL);\n+        }\n+        else if (_opData.isReturnTypeBoolean())\n         {\n-            ViewUtility.popupInfoMessage(title, \"Operation successful\");\n+            boolean success = Boolean.parseBoolean(result.toString());\n+            String message = success ? OPERATION_SUCCESSFUL : OPERATION_UNSUCCESSFUL;\n+            ViewUtility.popupInfoMessage(title, message);\n         }\n         else if (_opData.getParameters() != null && !_opData.getParameters().isEmpty())\n         {\n@@ -634,6 +690,24 @@ else if (_opData.getParameters() != null && !_opData.getParameters().isEmpty())\n \n     }\n     \n+    private List<String> extractUserList(Object result)\n+    {\n+        if (!(result instanceof TabularDataSupport))\n+        {\n+            return null;\n+        }\n+        \n+        TabularDataSupport tabularData = (TabularDataSupport)result;\n+        Collection<CompositeData> records = tabularData.values();\n+        List<String> list = new ArrayList<String>();\n+        for (CompositeData data : records)\n+        {\n+            list.add(data.get(USERNAME).toString());\n+        }\n+        Collections.sort(list);\n+        return list;\n+    }\n+    \n     /**\n      * Listener class for the operation parameters widget\n      */",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/OperationTabControl.java",
                "sha": "2ac037e4f0d7530297bf6a3723b2573941c033d5",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TabControl.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TabControl.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TabControl.java",
                "patch": "@@ -69,7 +69,18 @@ public Control getControl()\n         return null;\n     }\n     \n-    public abstract void refresh(ManagedBean mbean);\n+    public void refresh(ManagedBean mbean)\n+    {\n+        if (mbean == null)\n+        {\n+            refresh();\n+        }\n+    }\n+    \n+    public void refresh()\n+    {\n+        \n+    }\n     \n     public void refresh(ManagedBean mbean, OperationData opData)\n     {",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TabControl.java",
                "sha": "c13c92066c5b7e92d249827e052616381a95fbc8",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TreeObject.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TreeObject.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 12,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TreeObject.java",
                "patch": "@@ -31,7 +31,6 @@\n {\n     private String _name;\n     private String _type;\n-    private String _url;\n     private String _virtualHost;\n     private TreeObject _parent;\n     private List<TreeObject> _children = new ArrayList<TreeObject>();\n@@ -88,16 +87,6 @@ public String getType()\n     {\n         return _type;\n     }\n-\n-    public String getUrl()\n-    {\n-        return _url;\n-    }\n-\n-    public void setUrl(String url)\n-    {\n-        this._url = url;\n-    }\n     \n     public String getVirtualHost()\n     {\n@@ -131,7 +120,6 @@ public void setParent(TreeObject parent)\n         \n         if (parent != null)\n         {\n-            this._url = parent.getUrl();\n             parent.addChild(this);\n         }\n     }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TreeObject.java",
                "sha": "9545ed9876bfcf5092de6502377ab9362d8a3c2b",
                "status": "modified"
            },
            {
                "additions": 462,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/VHNotificationsTabControl.java",
                "changes": 462,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/VHNotificationsTabControl.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/VHNotificationsTabControl.java",
                "patch": "@@ -0,0 +1,462 @@\n+package org.apache.qpid.management.ui.views;\n+\n+import static org.apache.qpid.management.ui.Constants.BUTTON_CLEAR;\n+import static org.apache.qpid.management.ui.Constants.BUTTON_REFRESH;\n+import static org.apache.qpid.management.ui.Constants.CONSOLE_IMAGE;\n+import static org.apache.qpid.management.ui.Constants.FONT_BUTTON;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.qpid.management.ui.ApplicationRegistry;\n+import org.apache.qpid.management.ui.ServerRegistry;\n+import org.apache.qpid.management.ui.model.NotificationObject;\n+import org.eclipse.jface.viewers.DoubleClickEvent;\n+import org.eclipse.jface.viewers.IDoubleClickListener;\n+import org.eclipse.jface.viewers.ILabelProviderListener;\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.jface.viewers.IStructuredContentProvider;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n+import org.eclipse.jface.viewers.ITableLabelProvider;\n+import org.eclipse.jface.viewers.StructuredSelection;\n+import org.eclipse.jface.viewers.TableViewer;\n+import org.eclipse.jface.viewers.Viewer;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Display;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swt.widgets.Shell;\n+import org.eclipse.swt.widgets.TabFolder;\n+import org.eclipse.swt.widgets.Table;\n+import org.eclipse.swt.widgets.TableColumn;\n+import org.eclipse.swt.widgets.Text;\n+import org.eclipse.ui.forms.widgets.Form;\n+import org.eclipse.ui.forms.widgets.FormToolkit;\n+\n+public class VHNotificationsTabControl extends TabControl\n+{\n+    protected FormToolkit  _toolkit;\n+    protected Form _form;\n+    protected Table _table = null;\n+    protected TableViewer _tableViewer  = null;\n+     \n+    protected Thread worker = null;\n+    \n+    protected List<NotificationObject> _notifications = null;\n+    \n+    private static final String COLUMN_OBJ = \"Object Name\";\n+    private static final String COLUMN_SEQ  = \"Sequence No\";\n+    private static final String COLUMN_TIME = \"TimeStamp\";\n+    private static final String COLUMN_TYPE  = \"Type\";\n+    private static final String COLUMN_MSG  = \"Notification Message\";\n+    protected static final String[] _tableTitles = new String [] {\n+            COLUMN_OBJ,\n+            COLUMN_SEQ,\n+            COLUMN_TIME,\n+            COLUMN_TYPE,\n+            COLUMN_MSG\n+         };\n+    \n+    protected Button _clearButton       = null;\n+    protected Button _refreshButton       = null;\n+    \n+    public VHNotificationsTabControl(TabFolder tabFolder)\n+    {\n+        super(tabFolder);\n+        _toolkit = new FormToolkit(_tabFolder.getDisplay());\n+        _form = _toolkit.createForm(_tabFolder);\n+        GridLayout gridLayout = new GridLayout();      \n+        gridLayout.marginWidth = 0;\n+        gridLayout.marginHeight = 0;       \n+        _form.getBody().setLayout(gridLayout);\n+        \n+        worker = new Thread(new Worker()); \n+        worker.start();\n+    }\n+    \n+    protected void createWidgets()\n+    {       \n+        addButtons();  \n+        createTableViewer();\n+    }\n+    \n+    /**\n+     * @see TabControl#getControl()\n+     */\n+    public Control getControl()\n+    {\n+        if (_table == null)\n+        {\n+            createWidgets();\n+        }\n+        return _form;\n+    }\n+\n+    /**\n+     * Creates clear buttin and refresh button\n+     */\n+    protected void addButtons()\n+    {    \n+        Composite composite = _toolkit.createComposite(_form.getBody(), SWT.NONE);\n+        composite.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+        composite.setLayout(new GridLayout(2, true));\n+        \n+        // Add Clear Button\n+        _clearButton = _toolkit.createButton(composite, BUTTON_CLEAR, SWT.PUSH | SWT.CENTER);\n+        _clearButton.setFont(ApplicationRegistry.getFont(FONT_BUTTON));\n+        GridData gridData = new GridData(SWT.LEAD, SWT.TOP, true, false);\n+        gridData.widthHint = 80;\n+        _clearButton.setLayoutData(gridData);\n+        _clearButton.addSelectionListener(new SelectionAdapter()\n+            {\n+                public void widgetSelected(SelectionEvent e)\n+                {  \n+                    //TODO : Get selected rows and clear those\n+                    IStructuredSelection ss = (IStructuredSelection)_tableViewer.getSelection();\n+                    ServerRegistry serverRegistry = ApplicationRegistry.getServerRegistry(MBeanView.getServer());\n+                    serverRegistry.clearNotifications(null, ss.toList());\n+                    refresh();\n+                }\n+            });\n+        \n+        // Add Refresh Button\n+        _refreshButton = _toolkit.createButton(composite, BUTTON_REFRESH, SWT.PUSH | SWT.CENTER);\n+        _refreshButton.setFont(ApplicationRegistry.getFont(FONT_BUTTON));\n+        gridData = new GridData(SWT.TRAIL, SWT.TOP, true, false);\n+        gridData.widthHint = 80;\n+        _refreshButton.setLayoutData(gridData);\n+        _refreshButton.addSelectionListener(new SelectionAdapter()\n+            {\n+                public void widgetSelected(SelectionEvent e)\n+                { \n+                    refresh();\n+                }\n+            });\n+    }\n+    \n+    /**\n+     * Creates table to display notifications\n+     */\n+    private void createTable()\n+    {\n+        _table = _toolkit.createTable(_form.getBody(), SWT.MULTI | SWT.FULL_SELECTION);\n+        _table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+        \n+        TableColumn column = new TableColumn(_table, SWT.NONE);\n+        column.setText(_tableTitles[0]);\n+        column.setWidth(100);\n+        \n+        column = new TableColumn(_table, SWT.NONE);\n+        column.setText(_tableTitles[1]);\n+        column.setWidth(100); \n+\n+        column = new TableColumn(_table, SWT.NONE);\n+        column.setText(_tableTitles[2]);\n+        column.setWidth(130);\n+        \n+        column = new TableColumn(_table, SWT.NONE);\n+        column.setText(_tableTitles[3]);\n+        column.setWidth(100);\n+        \n+        column = new TableColumn(_table, SWT.NONE);\n+        column.setText(_tableTitles[4]);\n+        column.setWidth(500);\n+        \n+        _table.setHeaderVisible(true);\n+        _table.setLinesVisible(true);\n+    }\n+    \n+    /**\n+     * Creates JFace viewer for the notifications table\n+     */\n+    protected void createTableViewer()\n+    {\n+        createTable();\n+        _tableViewer = new TableViewer(_table);\n+        //_tableViewer.getControl().setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+        _tableViewer.setUseHashlookup(true);\n+        _tableViewer.setContentProvider(new ContentProviderImpl());\n+        _tableViewer.setLabelProvider(new LabelProviderImpl());\n+        _tableViewer.setColumnProperties(_tableTitles);\n+        /*\n+        CellEditor[] cellEditors = new CellEditor[_tableTitles.length];\n+        TextCellEditor textEditor = new TextCellEditor(table);\n+        cellEditors[0] = textEditor;\n+        textEditor = new TextCellEditor(table);\n+        cellEditors[1] = textEditor;\n+        textEditor = new TextCellEditor(table);\n+        cellEditors[2] = textEditor;\n+        textEditor = new TextCellEditor(table);\n+        cellEditors[3] = textEditor;\n+        \n+        // Assign the cell editors to the viewer \n+        _tableViewer.setCellEditors(cellEditors);\n+        _tableViewer.setCellModifier(new TableCellModifier());\n+        */\n+        \n+        addTableListeners();\n+        \n+        //_tableViewer.addSelectionChangedListener(new );\n+        \n+        //_notificationDetails = new Composite(_tabControl, SWT.BORDER);\n+        //_notificationDetails.setLayoutData(new GridData(GridData.FILL_BOTH));\n+        \n+        //_tabControl.layout();\n+        //viewerComposite.layout();\n+    }\n+    \n+    /**\n+     * Adds listeners to the viewer for displaying notification details \n+     */\n+    protected void addTableListeners()\n+    {\n+        _tableViewer.addDoubleClickListener(new IDoubleClickListener()\n+            {\n+                Display display = null;\n+                Shell   shell = null;\n+                public void doubleClick(DoubleClickEvent event)\n+                {\n+                    display = Display.getCurrent();\n+                    shell = new Shell(display, SWT.BORDER | SWT.CLOSE | SWT.MIN | SWT.MAX | SWT.RESIZE);\n+                    shell.setText(\"Notification\");\n+                    shell.setImage(ApplicationRegistry.getImage(CONSOLE_IMAGE));\n+\n+                    int x = display.getBounds().width;\n+                    int y = display.getBounds().height;\n+                    shell.setBounds(x/4, y/4, x/2, y/3);\n+                    StructuredSelection selection = (StructuredSelection)event.getSelection();\n+                    createPopupContents((NotificationObject)selection.getFirstElement());\n+                    shell.open();\n+                    while (!shell.isDisposed()) {\n+                        if (!display.readAndDispatch()) {\n+                            display.sleep();\n+                        }\n+                    }\n+                    \n+                    //If you create it, you dispose it.\n+                    shell.dispose();\n+                }\n+\n+                private void createPopupContents(NotificationObject obj)\n+                {                    \n+                    shell.setLayout(new GridLayout());\n+                    \n+                    Composite parent = _toolkit.createComposite(shell, SWT.NONE);\n+                    parent.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+                    GridLayout layout = new GridLayout(4, true);\n+                    parent.setLayout(layout);\n+                    \n+                    // Object name record\n+                    Label key = _toolkit.createLabel(parent, COLUMN_OBJ, SWT.TRAIL); \n+                    GridData layoutData = new GridData(SWT.TRAIL, SWT.TOP, false, false,1,1);\n+                    key.setLayoutData(layoutData);\n+                    Text  value = _toolkit.createText(parent, obj.getSourceName(), SWT.BEGINNING | SWT.BORDER |SWT.READ_ONLY);\n+                    value.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,3,1));\n+\n+                    // Sequence no record\n+                    key = _toolkit.createLabel(parent, COLUMN_SEQ, SWT.TRAIL);             \n+                    layoutData = new GridData(SWT.TRAIL, SWT.TOP, false, false,1,1);\n+                    key.setLayoutData(layoutData);\n+                    value = _toolkit.createText(parent, \"\"+obj.getSequenceNo(), SWT.BEGINNING | SWT.BORDER |SWT.READ_ONLY);\n+                    value.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,3,1));\n+\n+                    // Time row\n+                    key = _toolkit.createLabel(parent, COLUMN_TIME, SWT.TRAIL);\n+                    key.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, true, false,1,1));\n+                    value = _toolkit.createText(parent, obj.getTimeStamp(), SWT.BEGINNING | SWT.BORDER | SWT.READ_ONLY);\n+                    value.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,3,1));\n+\n+                    key = _toolkit.createLabel(parent, COLUMN_TYPE, SWT.TRAIL);\n+                    key.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, true, false,1,1));\n+                    value = _toolkit.createText(parent, obj.getType(), SWT.BEGINNING | SWT.BORDER | SWT.READ_ONLY);\n+                    value.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,3,1));\n+\n+                    key = _toolkit.createLabel(parent, COLUMN_MSG, SWT.TRAIL);\n+                    key.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, true, false,1,1));\n+                    value = _toolkit.createText(parent, obj.getMessage(), SWT.MULTI | SWT.WRAP| SWT.BORDER | SWT.V_SCROLL | SWT.READ_ONLY);\n+                    GridData gridData = new GridData(SWT.FILL, SWT.FILL, true, true, 3, 1);\n+                    gridData.heightHint = 100;\n+                    value.setLayoutData(gridData);\n+                }\n+            });\n+    }\n+    \n+    public void refresh()\n+    {        \n+        _notifications = null;\n+        _table.deselectAll();\n+        _tableViewer.getTable().clearAll();  \n+        \n+        Control[] children = _form.getBody().getChildren();        \n+        for (int i = 0; i < children.length; i++)\n+        {\n+            children[i].setVisible(true);\n+        }\n+             \n+        workerRunning = true;\n+        _form.layout(true);   \n+        _form.getBody().layout(true, true);\n+    }\n+    \n+    /**\n+     * Content provider class for the table viewer\n+     */\n+    protected class ContentProviderImpl implements IStructuredContentProvider, INotificationViewer\n+    {\n+        public void inputChanged(Viewer v, Object oldInput, Object newInput)\n+        {\n+            \n+        }\n+        public void dispose()\n+        {\n+            \n+        }\n+        public Object[] getElements(Object parent) \n+        {\n+            return _notifications.toArray(new NotificationObject[0]);\n+        }\n+        public void addNotification(NotificationObject notification)\n+        {\n+            _tableViewer.add(notification);\n+        }\n+        \n+        public void addNotification(List<NotificationObject> notificationList)\n+        {\n+            _tableViewer.add(notificationList.toArray(new NotificationObject[0]));\n+        }\n+    }\n+    \n+    /**\n+     * Label provider for the table viewer\n+     */\n+    protected class LabelProviderImpl implements ITableLabelProvider\n+    {\n+        List<ILabelProviderListener> listeners = new ArrayList<ILabelProviderListener>();       \n+        public void addListener(ILabelProviderListener listener)\n+        {\n+            listeners.add(listener);\n+        }\n+        \n+        public void dispose(){\n+            \n+        }\n+        \n+        public Image getColumnImage(Object element, int columnIndex)\n+        {\n+            return null;\n+        }\n+        \n+        public String getColumnText(Object element, int columnIndex)\n+        {\n+            String result = null;\n+            NotificationObject t = (NotificationObject)element;\n+            switch(columnIndex)\n+            {\n+            case 0 : \n+                result = t.getSourceName();\n+                break;\n+            case 1 : \n+                result = String.valueOf(t.getSequenceNo());\n+                break;\n+            case 2 :\n+                result = String.valueOf(t.getTimeStamp());\n+                break;\n+            case 3 : \n+                result = t.getType();\n+                break;\n+            case 4 : \n+                result = t.getMessage();\n+                break;\n+            default : \n+                result = \"\";\n+            }\n+            \n+            return result;\n+        }\n+        \n+        public boolean isLabelProperty(Object element, String property)\n+        {\n+            return false;\n+        }\n+        \n+        public void removeListener(ILabelProviderListener listener)\n+        {\n+            listeners.remove(listener);\n+        }\n+    } // end of LabelProviderImpl\n+    \n+    protected boolean workerRunning = false;\n+    protected void setWorkerRunning(boolean running)\n+    {\n+        workerRunning = running;\n+    }\n+    \n+    /**\n+     * Worker class which keeps looking if there are new notifications coming from server for the selected mbean\n+     */\n+    private class Worker implements Runnable\n+    {\n+        public void run()\n+        {\n+            Display display = _tabFolder.getDisplay();\n+            while(true)\n+            {\n+                if (!workerRunning || display == null)\n+                {\n+                    sleep();\n+                    continue;\n+                }\n+                \n+                display.syncExec(new Runnable()\n+                {\n+                    public void run()\n+                    {\n+                        if (_form == null || _form.isDisposed())\n+                            return;\n+                        setWorkerRunning(_form.isVisible());\n+                        if (!workerRunning) return;\n+                        \n+                        updateTableViewer();\n+                    }\n+                });     \n+            \n+                sleep();\n+            }\n+        }\n+        \n+        private void sleep()\n+        {\n+            try\n+            {\n+                Thread.sleep(2000);\n+            }\n+            catch(Exception ex)\n+            {\n+\n+            }  \n+        }\n+    }\n+    \n+    /**\n+     * Updates the table with new notifications received from mbean server for all mbeans\n+     */\n+    protected void updateTableViewer()\n+    {\n+        ServerRegistry serverRegistry = ApplicationRegistry.getServerRegistry(MBeanView.getServer());        \n+        List<NotificationObject> newList = serverRegistry.getNotifications(null);\n+        if (newList == null)\n+            return;\n+        \n+        _notifications = newList;\n+        _tableViewer.setInput(_notifications);\n+        _tableViewer.refresh();\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/VHNotificationsTabControl.java",
                "sha": "258f5ce02a4c2d2cac6959c5ed2664c37e1ea656",
                "status": "added"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/ViewUtility.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/ViewUtility.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/ViewUtility.java",
                "patch": "@@ -20,8 +20,13 @@\n  */\n package org.apache.qpid.management.ui.views;\n \n+import java.io.UnsupportedEncodingException;\n import java.nio.charset.Charset;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -70,6 +75,8 @@\n     public static final String PREV  = \"Previous\";\n     public static final String INDEX = \"Index\";\n     \n+    private static final Comparator tabularDataComparator = new TabularDataComparator();\n+    \n     private static List<String> SUPPORTED_ARRAY_DATATYPES = new ArrayList<String>();\n     static\n     {\n@@ -121,6 +128,9 @@ private static void createTabularDataHolder(FormToolkit toolkit, Composite paren\n             text.setLayoutData(layoutData);\n             return;\n         }  \n+        \n+        Collections.sort(list, tabularDataComparator);\n+     \n         // Attach the tabular record to be retrieved and shown later when record is traversed\n         // using first/next/previous/last buttons\n         composite.setData(list);\n@@ -549,4 +559,63 @@ public static void disposeChildren(Composite parent)\n             oldControls[i].dispose();\n         }\n     }\n+    \n+    public static String getHashedString(Object text) throws NoSuchAlgorithmException, UnsupportedEncodingException\n+    {\n+        char[] chars = getHash((String)text);\n+        return new String(chars);\n+    }\n+    \n+    public static char[] getHash(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException\n+    {\n+        byte[] data = text.getBytes(\"utf-8\");\n+\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+\n+        for (byte b : data)\n+        {\n+            md.update(b);\n+        }\n+\n+        byte[] digest = md.digest();\n+\n+        char[] hash = new char[digest.length ];\n+\n+        int index = 0;\n+        for (byte b : digest)\n+        {            \n+            hash[index++] = (char) b;\n+        }\n+\n+        return hash;\n+    }\n+    \n+    private static class TabularDataComparator implements java.util.Comparator<Map.Entry>\n+    {\n+        public int compare(Map.Entry data1, Map.Entry data2)\n+        {\n+            if (data1.getKey() instanceof List)\n+            {\n+                Object obj1 = ((List)data1.getKey()).get(0);                \n+                Object obj2 = ((List)data2.getKey()).get(0);\n+                String str1 = obj1.toString();\n+                String str2 = obj2.toString();\n+                if (obj1 instanceof String)\n+                {\n+                    return str1.compareTo(str2);\n+                }\n+                \n+                try\n+                {\n+                    return Long.valueOf(str1).compareTo(Long.valueOf(str2));\n+                }\n+                catch (Exception ex)\n+                {\n+                    return -1;\n+                }\n+            }\n+           \n+            return -1;\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/ViewUtility.java",
                "sha": "9b5cddd342aef72e918054870727b7cf13ad54d5",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/resources/sasl/MANIFEST.MF",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/resources/sasl/MANIFEST.MF?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/management/eclipse-plugin/src/main/resources/sasl/MANIFEST.MF",
                "patch": "@@ -0,0 +1,19 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: Jmxmp Plug-in\n+Bundle-SymbolicName: jmxremote.optional\n+Bundle-Version: 1.0.1\n+Bundle-ClassPath: .\n+Bundle-Vendor:\n+Bundle-Localization: plugin\n+Export-Package: com.sun.jmx.remote.generic,\n+ com.sun.jmx.remote.opt.internal,\n+ com.sun.jmx.remote.opt.security,\n+ com.sun.jmx.remote.opt.util,\n+ com.sun.jmx.remote.profile.sasl,\n+ com.sun.jmx.remote.profile.tls,\n+ com.sun.jmx.remote.protocol.jmxmp,\n+ com.sun.jmx.remote.socket,\n+ javax.management.remote.generic,\n+ javax.management.remote.jmxmp,\n+ javax.management.remote.message",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/resources/sasl/MANIFEST.MF",
                "sha": "7a9e5caaaf9aee2d78f94fb33c8a6f93a614b781",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/resources/win32/configuration/config.ini",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/management/eclipse-plugin/src/main/resources/win32/configuration/config.ini?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/management/eclipse-plugin/src/main/resources/win32/configuration/config.ini",
                "patch": "@@ -22,5 +22,5 @@\n osgi.splashPath=platform:/base/plugins/org.apache.qpid.management.ui\r\n eclipse.product=org.apache.qpid.management.ui.product\r\n eclipse.application=org.apache.qpid.management.ui.application\r\n-osgi.bundles=org.eclipse.equinox.common@2:start,org.eclipse.core.runtime@start,com.ibm.icu,org.apache.qpid.management.ui,org.eclipse.core.commands,org.eclipse.core.contenttype,org.eclipse.core.expressions,org.eclipse.core.jobs,org.eclipse.core.runtime.compatibility.auth,org.eclipse.core.runtime.compatibility.registry,org.eclipse.equinox.preferences,org.eclipse.equinox.registry,org.eclipse.help,org.eclipse.jface,org.eclipse.swt,org.eclipse.swt.win32.win32.x86,org.eclipse.ui,org.eclipse.ui.forms,org.eclipse.ui.workbench\r\n+osgi.bundles=org.eclipse.equinox.common@2:start,org.eclipse.core.runtime@start,com.ibm.icu,org.apache.qpid.management.ui,org.eclipse.core.commands,org.eclipse.core.contenttype,org.eclipse.core.expressions,org.eclipse.core.jobs,org.eclipse.core.runtime.compatibility.auth,org.eclipse.core.runtime.compatibility.registry,org.eclipse.equinox.preferences,org.eclipse.equinox.registry,org.eclipse.help,org.eclipse.jface,org.eclipse.swt,org.eclipse.swt.win32.win32.x86,org.eclipse.ui,org.eclipse.ui.forms,jmxremote.optional,org.eclipse.ui.workbench\r\n osgi.bundles.defaultStartLevel=4\r",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/management/eclipse-plugin/src/main/resources/win32/configuration/config.ini",
                "sha": "1762840aff33d244fcc46582c22cb046141fe219",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/BDB-Qpid-4.sh",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/BDB-Qpid-4.sh?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/BDB-Qpid-4.sh",
                "patch": "@@ -0,0 +1,28 @@\n+#!/bin/bash\n+\n+if [ -z QPID_HOME ] ; then\n+\n+echo \"QPID_HOME must be set\"\n+exit 0\n+fi\n+\n+configs=`pwd`\n+\n+pushd $QPID_HOME/bin/\n+\n+echo \"Starting qpid server - device config\"\n+./qpid-server -c $configs/bdb-qpid-4/device.xml\n+\n+echo \"Starting qpid server - filepath  config\"\n+./qpid-server -c $configs/bdb-qpid-4/filepath.xml\n+\n+echo \"Starting qpid server - none existent path config\"\n+./qpid-server -c $configs/bdb-qpid-4/noneexistantpath.xml\n+\n+echo \"Starting qpid server - no permission config\"\n+./qpid-server -c $configs/bdb-qpid-4/nopermission.xml\n+\n+echo \"Starting qpid server - Star in path config\"\n+./qpid-server -c $configs/bdb-qpid-4/starpath.xml\n+\n+popd",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/BDB-Qpid-4.sh",
                "sha": "f54c0576401466d496df66d574d176731468023a",
                "status": "added"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/BDB-Qpid.sh",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/BDB-Qpid.sh?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/BDB-Qpid.sh",
                "patch": "@@ -0,0 +1,12 @@\n+#!/bin/bash\n+\n+# Parse arguements taking all - prefixed args as JAVA_OPTS\n+for arg in \"$@\"; do\n+    if [[ $arg == -java:* ]]; then\n+        JAVA_OPTS=\"${JAVA_OPTS}-`echo $arg|cut -d ':' -f 2`  \"\n+    else\n+        ARGS=\"${ARGS}$arg \"\n+    fi\n+done\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx256m -Dbadger.level=warn -Damqj.test.logging.level=warn -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar org.apache.qpid.ping.PingDurableClient -o $QPID_WORK/results ${ARGS} ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/BDB-Qpid.sh",
                "sha": "8ff233dc6d6856481bdb79fe1333a3ee5044fa82",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/CTQ-Qpid-1.sh",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/CTQ-Qpid-1.sh?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/CTQ-Qpid-1.sh",
                "patch": "@@ -0,0 +1 @@\n+./PQ-Qpid-1.sh $@ & ./PQ-Qpid-1-P.sh $@",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/CTQ-Qpid-1.sh",
                "sha": "518b06aac496d017de87c1ac7ae54df362fe2c93",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/CTQ-Qpid-2.sh",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/CTQ-Qpid-2.sh?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/CTQ-Qpid-2.sh",
                "patch": "@@ -0,0 +1 @@\n+./PQ-Qpid-2.sh $@ & ./PQ-Qpid-2-P.sh $@",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/CTQ-Qpid-2.sh",
                "sha": "bbe5d75cd30b3958662c8cdbf17a5d3231c2d70a",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/CTQ-Qpid-3.sh",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/CTQ-Qpid-3.sh?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/CTQ-Qpid-3.sh",
                "patch": "@@ -0,0 +1 @@\n+./PQ-Qpid-3.sh $@ & ./PQ-Qpid-3-P.sh $@",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/CTQ-Qpid-3.sh",
                "sha": "7e9430c8a394a14b07a4e88241f014f160591e2b",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/CTQ-Qpid-4.sh",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/CTQ-Qpid-4.sh?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/CTQ-Qpid-4.sh",
                "patch": "@@ -0,0 +1 @@\n+./PQ-Qpid-4.sh $@ & ./PQ-Qpid-4-P.sh $@",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/CTQ-Qpid-4.sh",
                "sha": "720ca35fe10a3a3705e597d67a47e5c4d32d6d07",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/CTQ-Qpid-5.sh",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/CTQ-Qpid-5.sh?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/CTQ-Qpid-5.sh",
                "patch": "@@ -0,0 +1 @@\n+./PQ-Qpid-5.sh $@ & ./PQ-Qpid-5-P.sh $@",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/CTQ-Qpid-5.sh",
                "sha": "fe19f6a513affe9f7b26d5fefc671245fa15ee2a",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/CTQ-Qpid-6.sh",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/CTQ-Qpid-6.sh?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/CTQ-Qpid-6.sh",
                "patch": "@@ -0,0 +1 @@\n+./PQ-Qpid-6.sh $@ & ./PQ-Qpid-6-P.sh $@",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/CTQ-Qpid-6.sh",
                "sha": "09df5ce25a5f5c27d5d54eb7aceed2f0bc13c181",
                "status": "added"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/PT-Qpid-13.sh",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/PT-Qpid-13.sh?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/PT-Qpid-13.sh",
                "patch": "@@ -0,0 +1,24 @@\n+#!/bin/bash\n+\n+# Parse arguements taking all - prefixed args as JAVA_OPTS\n+for arg in \"$@\"; do\n+    if [[ $arg == -java:* ]]; then\n+        JAVA_OPTS=\"${JAVA_OPTS}-`echo $arg|cut -d ':' -f 2`  \"\n+    else\n+        ARGS=\"${ARGS}$arg \"\n+    fi\n+done\n+\n+echo \"Starting 6 parallel tests\"\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-13.1 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=newd1 uniqueDests=true batchSize=250 transacted=true commitBatchSize=50 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-13.2 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=newd2 uniqueDests=true batchSize=250 transacted=true commitBatchSize=50 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-13.3 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=newd3 uniqueDests=true batchSize=250 transacted=true commitBatchSize=50 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-13.4 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinatioNname=newd4 uniqueDests=true batchSize=250 transacted=true commitBatchSize=50 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-13.5 -s [250] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=newd5 uniqueDests=true batchSize=250 transacted=true commitBatchSize=50 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-13.6 -s [250] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=newd6 uniqueDests=true batchSize=250 transacted=true commitBatchSize=50 -o $QPID_WORK/results ${ARGS}\n+",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/PT-Qpid-13.sh",
                "sha": "630aa22ca35cebf37287d531fc7071893c413701",
                "status": "added"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/PT-Qpid-14.sh",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/PT-Qpid-14.sh?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/PT-Qpid-14.sh",
                "patch": "@@ -0,0 +1,23 @@\n+#!/bin/bash\n+\n+# Parse arguements taking all - prefixed args as JAVA_OPTS\n+for arg in \"$@\"; do\n+    if [[ $arg == -java:* ]]; then\n+        JAVA_OPTS=\"${JAVA_OPTS}-`echo $arg|cut -d ':' -f 2`  \"\n+    else\n+        ARGS=\"${ARGS}$arg \"\n+    fi\n+done\n+echo \"Starting 6 parallel tests\"\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-14 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=ping1 batchSize=250 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-14 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=ping2 batchSize=250 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-14 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=ping3 batchSize=250 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-14 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256destinationname=ping4  batchSize=250 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-14 -s [250] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=ping5 batchSize=250 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-14 -s [250] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=ping6 batchSize=250 -o $QPID_WORK/results ${ARGS}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/PT-Qpid-14.sh",
                "sha": "7499eedda46a65e380490e2250f1752a736829a9",
                "status": "added"
            },
            {
                "additions": 98,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/bdb-qpid-4/device.xml",
                "changes": 98,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/bdb-qpid-4/device.xml?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/bdb-qpid-4/device.xml",
                "patch": "@@ -0,0 +1,98 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ - \n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ - \n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<broker>\n+    <prefix>${QPID_HOME}</prefix>\n+    <work>${QPID_WORK}</work>\n+    <conf>${prefix}/etc</conf>\n+    <userhome>$HOME</userhome>\n+    <connector>\n+        <!-- Uncomment out this block and edit the keystorePath and keystorePassword\n+             to enable SSL support\n+        <ssl>\n+            <enabled>true</enabled>\n+            <sslOnly>true</sslOnly>\n+            <keystorePath>/path/to/keystore.ks</keystorePath>\n+            <keystorePassword>keystorepass</keystorePassword>\n+        </ssl>-->\n+        <qpidnio>true</qpidnio>\n+        <transport>nio</transport>\n+        <port>5672</port>\n+        <sslport>8672</sslport>\n+        <socketReceiveBuffer>32768</socketReceiveBuffer>\n+        <socketSendBuffer>32768</socketSendBuffer>\n+    </connector>\n+    <management>\n+        <enabled>true</enabled>\n+    </management>\n+    <advanced>\n+        <filterchain enableExecutorPool=\"true\"/>\n+        <enablePooledAllocator>false</enablePooledAllocator>\n+        <enableDirectBuffers>false</enableDirectBuffers>\n+        <framesize>65535</framesize>\n+        <compressBufferOnQueue>false</compressBufferOnQueue>\n+    </advanced>\n+\n+    <security>\n+        <principal-databases>\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.PlainPasswordVhostFilePrincipalDatabase</class>\n+                <attributes>\n+                    <attribute>\n+                        <name>passwordFile</name>\n+                        <value>${conf}/passwdVhost</value>\n+                    </attribute>\n+                </attributes>\n+            </principal-database>\n+        </principal-databases>\n+\n+        <access>\n+            <class>org.apache.qpid.server.security.access.AllowAll</class>\n+        </access>\n+    </security>\n+\n+    <virtualhosts>\n+\t    <virtualhost>\n+            <name>device</name>\n+            <device>\n+                <store>\n+                    <!-- /dev/null give it a device -->\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>/dev/null</environment-path>\n+                </store>\n+            </device>\n+        </virtualhost>\n+\n+    \n+    </virtualhosts>\n+    <heartbeat>\n+        <delay>0</delay>\n+        <timeoutFactor>2.0</timeoutFactor>\n+    </heartbeat>\n+    <queue>\n+        <auto_register>true</auto_register>\n+    </queue>\n+\n+    <virtualhosts>${conf}/virtualhosts.xml</virtualhosts>\n+</broker>\n+\n+",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/bdb-qpid-4/device.xml",
                "sha": "a052f8516747677fc3c1d1b172c42fb07a5013bc",
                "status": "added"
            },
            {
                "additions": 97,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/bdb-qpid-4/filepath.xml",
                "changes": 97,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/bdb-qpid-4/filepath.xml?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/bdb-qpid-4/filepath.xml",
                "patch": "@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ - \n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ - \n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<broker>\n+    <prefix>${QPID_HOME}</prefix>\n+    <work>${QPID_WORK}</work>\n+    <conf>${prefix}/etc</conf>\n+    <userhome>$HOME</userhome>\n+    <connector>\n+        <!-- Uncomment out this block and edit the keystorePath and keystorePassword\n+             to enable SSL support\n+        <ssl>\n+            <enabled>true</enabled>\n+            <sslOnly>true</sslOnly>\n+            <keystorePath>/path/to/keystore.ks</keystorePath>\n+            <keystorePassword>keystorepass</keystorePassword>\n+        </ssl>-->\n+        <qpidnio>true</qpidnio>\n+        <transport>nio</transport>\n+        <port>5672</port>\n+        <sslport>8672</sslport>\n+        <socketReceiveBuffer>32768</socketReceiveBuffer>\n+        <socketSendBuffer>32768</socketSendBuffer>\n+    </connector>\n+    <management>\n+        <enabled>true</enabled>\n+    </management>\n+    <advanced>\n+        <filterchain enableExecutorPool=\"true\"/>\n+        <enablePooledAllocator>false</enablePooledAllocator>\n+        <enableDirectBuffers>false</enableDirectBuffers>\n+        <framesize>65535</framesize>\n+        <compressBufferOnQueue>false</compressBufferOnQueue>\n+    </advanced>\n+\n+    <security>\n+        <principal-databases>\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.PlainPasswordVhostFilePrincipalDatabase</class>\n+                <attributes>\n+                    <attribute>\n+                        <name>passwordFile</name>\n+                        <value>${conf}/passwdVhost</value>\n+                    </attribute>\n+                </attributes>\n+            </principal-database>\n+        </principal-databases>\n+\n+        <access>\n+            <class>org.apache.qpid.server.security.access.AllowAll</class>\n+        </access>\n+    </security>\n+\n+    <virtualhosts>\n+\t\t<virtualhost>\n+            <name>pathToAFile</name>\n+            <pathToAFile>\n+                <store>\n+                    <!-- ${conf}/config.xml give the path to a file -->\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>${conf}/config.xml</environment-path>\n+                </store>\n+            </pathToAFile>\n+        </virtualhost>     \n+\n+    </virtualhosts>\n+    <heartbeat>\n+        <delay>0</delay>\n+        <timeoutFactor>2.0</timeoutFactor>\n+    </heartbeat>\n+    <queue>\n+        <auto_register>true</auto_register>\n+    </queue>\n+\n+    <virtualhosts>${conf}/virtualhosts.xml</virtualhosts>\n+</broker>\n+\n+",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/bdb-qpid-4/filepath.xml",
                "sha": "ebce10cb95428b5aa77cddeaa5306a08cd233dc3",
                "status": "added"
            },
            {
                "additions": 97,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/bdb-qpid-4/noneexistantpath.xml",
                "changes": 97,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/bdb-qpid-4/noneexistantpath.xml?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/bdb-qpid-4/noneexistantpath.xml",
                "patch": "@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ - \n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ - \n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<broker>\n+    <prefix>${QPID_HOME}</prefix>\n+    <work>${QPID_WORK}</work>\n+    <conf>${prefix}/etc</conf>\n+    <userhome>$HOME</userhome>\n+    <connector>\n+        <!-- Uncomment out this block and edit the keystorePath and keystorePassword\n+             to enable SSL support\n+        <ssl>\n+            <enabled>true</enabled>\n+            <sslOnly>true</sslOnly>\n+            <keystorePath>/path/to/keystore.ks</keystorePath>\n+            <keystorePassword>keystorepass</keystorePassword>\n+        </ssl>-->\n+        <qpidnio>true</qpidnio>\n+        <transport>nio</transport>\n+        <port>5672</port>\n+        <sslport>8672</sslport>\n+        <socketReceiveBuffer>32768</socketReceiveBuffer>\n+        <socketSendBuffer>32768</socketSendBuffer>\n+    </connector>\n+    <management>\n+        <enabled>true</enabled>\n+    </management>\n+    <advanced>\n+        <filterchain enableExecutorPool=\"true\"/>\n+        <enablePooledAllocator>false</enablePooledAllocator>\n+        <enableDirectBuffers>false</enableDirectBuffers>\n+        <framesize>65535</framesize>\n+        <compressBufferOnQueue>false</compressBufferOnQueue>\n+    </advanced>\n+\n+    <security>\n+        <principal-databases>\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.PlainPasswordVhostFilePrincipalDatabase</class>\n+                <attributes>\n+                    <attribute>\n+                        <name>passwordFile</name>\n+                        <value>${conf}/passwdVhost</value>\n+                    </attribute>\n+                </attributes>\n+            </principal-database>\n+        </principal-databases>\n+\n+        <access>\n+            <class>org.apache.qpid.server.security.access.AllowAll</class>\n+        </access>\n+    </security>\n+\n+    <virtualhosts>\n+        <virtualhost>\n+            <name>nonExistentPath</name>\n+            <nonExistentPath>\n+                <store>\n+                    <!-- Path to a location that doesn't exist -->\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>${work}/bdb-qpid-5/1/localhost-store</environment-path>\n+                </store>\n+            </nonExistentPath>\n+        </virtualhost>\n+\n+    </virtualhosts>\n+    <heartbeat>\n+        <delay>0</delay>\n+        <timeoutFactor>2.0</timeoutFactor>\n+    </heartbeat>\n+    <queue>\n+        <auto_register>true</auto_register>\n+    </queue>\n+\n+    <virtualhosts>${conf}/virtualhosts.xml</virtualhosts>\n+</broker>\n+\n+",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/bdb-qpid-4/noneexistantpath.xml",
                "sha": "c20beb1c92095eaa9dd2cdd2b96b8872f22c6ac4",
                "status": "added"
            },
            {
                "additions": 98,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/bdb-qpid-4/nopermission.xml",
                "changes": 98,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/bdb-qpid-4/nopermission.xml?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/bdb-qpid-4/nopermission.xml",
                "patch": "@@ -0,0 +1,98 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ - \n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ - \n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<broker>\n+    <prefix>${QPID_HOME}</prefix>\n+    <work>${QPID_WORK}</work>\n+    <conf>${prefix}/etc</conf>\n+    <userhome>$HOME</userhome>\n+    <connector>\n+        <!-- Uncomment out this block and edit the keystorePath and keystorePassword\n+             to enable SSL support\n+        <ssl>\n+            <enabled>true</enabled>\n+            <sslOnly>true</sslOnly>\n+            <keystorePath>/path/to/keystore.ks</keystorePath>\n+            <keystorePassword>keystorepass</keystorePassword>\n+        </ssl>-->\n+        <qpidnio>true</qpidnio>\n+        <transport>nio</transport>\n+        <port>5672</port>\n+        <sslport>8672</sslport>\n+        <socketReceiveBuffer>32768</socketReceiveBuffer>\n+        <socketSendBuffer>32768</socketSendBuffer>\n+    </connector>\n+    <management>\n+        <enabled>true</enabled>\n+    </management>\n+    <advanced>\n+        <filterchain enableExecutorPool=\"true\"/>\n+        <enablePooledAllocator>false</enablePooledAllocator>\n+        <enableDirectBuffers>false</enableDirectBuffers>\n+        <framesize>65535</framesize>\n+        <compressBufferOnQueue>false</compressBufferOnQueue>\n+    </advanced>\n+\n+    <security>\n+        <principal-databases>\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.PlainPasswordVhostFilePrincipalDatabase</class>\n+                <attributes>\n+                    <attribute>\n+                        <name>passwordFile</name>\n+                        <value>${conf}/passwdVhost</value>\n+                    </attribute>\n+                </attributes>\n+            </principal-database>\n+        </principal-databases>\n+\n+        <access>\n+            <class>org.apache.qpid.server.security.access.AllowAll</class>\n+        </access>\n+    </security>\n+\n+    <virtualhosts>\n+\t       <virtualhost>\n+            <name>noPermissions</name>\n+            <noPermissions>\n+                <store>\n+                    <!-- /etc/bdb-qpid-5 give it somewhere it doesn't have permission -->\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>/etc/bdb-qpid-5/</environment-path>\n+                </store>\n+            </noPermissions>\n+        </virtualhost>\n+\n+    \n+    </virtualhosts>\n+    <heartbeat>\n+        <delay>0</delay>\n+        <timeoutFactor>2.0</timeoutFactor>\n+    </heartbeat>\n+    <queue>\n+        <auto_register>true</auto_register>\n+    </queue>\n+\n+    <virtualhosts>${conf}/virtualhosts.xml</virtualhosts>\n+</broker>\n+\n+",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/bdb-qpid-4/nopermission.xml",
                "sha": "958a19cda2ef20cd769a35b39bd3be3802e02f9d",
                "status": "added"
            },
            {
                "additions": 98,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/bdb-qpid-4/starpath.xml",
                "changes": 98,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/etc/scripts/bdb-qpid-4/starpath.xml?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/etc/scripts/bdb-qpid-4/starpath.xml",
                "patch": "@@ -0,0 +1,98 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ - \n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ - \n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<broker>\n+    <prefix>${QPID_HOME}</prefix>\n+    <work>${QPID_WORK}</work>\n+    <conf>${prefix}/etc</conf>\n+    <userhome>$HOME</userhome>\n+    <connector>\n+        <!-- Uncomment out this block and edit the keystorePath and keystorePassword\n+             to enable SSL support\n+        <ssl>\n+            <enabled>true</enabled>\n+            <sslOnly>true</sslOnly>\n+            <keystorePath>/path/to/keystore.ks</keystorePath>\n+            <keystorePassword>keystorepass</keystorePassword>\n+        </ssl>-->\n+        <qpidnio>true</qpidnio>\n+        <transport>nio</transport>\n+        <port>5672</port>\n+        <sslport>8672</sslport>\n+        <socketReceiveBuffer>32768</socketReceiveBuffer>\n+        <socketSendBuffer>32768</socketSendBuffer>\n+    </connector>\n+    <management>\n+        <enabled>true</enabled>\n+    </management>\n+    <advanced>\n+        <filterchain enableExecutorPool=\"true\"/>\n+        <enablePooledAllocator>false</enablePooledAllocator>\n+        <enableDirectBuffers>false</enableDirectBuffers>\n+        <framesize>65535</framesize>\n+        <compressBufferOnQueue>false</compressBufferOnQueue>\n+    </advanced>\n+\n+    <security>\n+        <principal-databases>\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.PlainPasswordVhostFilePrincipalDatabase</class>\n+                <attributes>\n+                    <attribute>\n+                        <name>passwordFile</name>\n+                        <value>${conf}/passwdVhost</value>\n+                    </attribute>\n+                </attributes>\n+            </principal-database>\n+        </principal-databases>\n+\n+        <access>\n+            <class>org.apache.qpid.server.security.access.AllowAll</class>\n+        </access>\n+    </security>\n+\n+    <virtualhosts>\n+\n+        <virtualhost>\n+            <name>pathWithStar</name>\n+            <pathWithStar>\n+                <store>\n+                    <!-- ${work}/bdbd-qpid-5/2/* have a * in path-->\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>${work}/bdb-qpid-5/2/*-store</environment-path>\n+                </store>\n+            </pathWithStar>\n+        </virtualhost>     \n+\n+    </virtualhosts>\n+    <heartbeat>\n+        <delay>0</delay>\n+        <timeoutFactor>2.0</timeoutFactor>\n+    </heartbeat>\n+    <queue>\n+        <auto_register>true</auto_register>\n+    </queue>\n+\n+    <virtualhosts>${conf}/virtualhosts.xml</virtualhosts>\n+</broker>\n+\n+",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/etc/scripts/bdb-qpid-4/starpath.xml",
                "sha": "c795ec5202ce6581b3e40e2c61407f9dd0eeaad7",
                "status": "added"
            },
            {
                "additions": 281,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/pom.xml",
                "changes": 294,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/pom.xml?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 13,
                "filename": "qpid/java/perftests/pom.xml",
                "patch": "@@ -39,6 +39,18 @@\n         <log4j.perftests>perftests.log4j</log4j.perftests>\n     </properties>\n \n+    <!-- Temporary local maven repo, whilst JUnit Toolkit is still reaching stable version to add to central maven repository. -->\n+    <repositories>\n+        <repository>\n+            <id>junit-toolkit.snapshots</id>\n+            <name>JUnit Toolkit SNAPSHOT Repository</name>\n+            <url>http://junit-toolkit.svn.sourceforge.net/svnroot/junit-toolkit/snapshots/</url>\n+            <snapshots>\n+                <enabled>true</enabled>\n+            </snapshots>\n+        </repository>\n+    </repositories>\n+\n     <!-- Temporary local maven repo, whilst JUnit Toolkit is still reaching stable version to add to central maven repository. -->\n     <pluginRepositories>\n         <pluginRepository>\n@@ -86,18 +98,6 @@\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-surefire-plugin</artifactId>\n             </plugin>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-jar-plugin</artifactId>\n-                <executions>\n-                    <execution>\n-                        <phase>package</phase>\n-                        <goals>\n-                            <goal>test-jar</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-            </plugin>\n \n             <!-- The JUnit Toolkit maven2 plugin is in the process of being added to the maven repository.\n                  \n@@ -130,8 +130,15 @@\n                 <configuration>\n                     <scriptOutDirectory>target</scriptOutDirectory>\n                     <testJar>${project.build.finalName}-all-test-deps.jar</testJar>\n-\n                     <systemproperties>\n+                        <property>\n+                            <name>-Xms</name>\n+                            <value>256m</value>\n+                        </property>\n+                        <property>\n+                            <name>-Xmx</name>\n+                            <value>3072m</value>\n+                        </property>\n                         <property>\n                             <name>log4j.configuration</name>\n                             <value>${log4j.perftests}</value>\n@@ -185,6 +192,267 @@\n                         <Ping-Failover-After-Commit>\n                             -n Ping-Failover-After-Commit -s [100] -o . -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=10 failAfterCommit=true\n                         </Ping-Failover-After-Commit>\n+                        \n+                        <!-- P2P Volume Tests. -->\n+                        <VT-Qpid-1>-n VT-Qpid-1 -d1H -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true  messageSize=256 transacted=true -o $QPID_WORK/results</VT-Qpid-1>\n+                        <VT-Qpid-2>-n VT-Qpid-2 -d1H -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true commitBatchSize=100 messageSize=256 -o $QPID_WORK/results</VT-Qpid-2>\n+                        <!-- Setting sample to 3,000,000 will result in a log entry every 10 minutes so should have 144 data points for the run. -->\n+                        <VT-Qpid-3>-n VT-Qpid-3 -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true rate=10000 messageSize=256 transacted=true -o $QPID_WORK/results commitBatchSize=100 batchSize=10000</VT-Qpid-3>\n+                        <VT-Qpid-4>-n VT-Qpid-4 -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true rate=10000 messageSize=256 -o $QPID_WORK/results batchSize=10000</VT-Qpid-4>\n+                        <VT-Qpid-5>-n VT-Qpid-5 -s[1000] -c[1,32],samples=32 -d2M transacted=true commitBatchSize=100 persistent=false rate=1000 messageSize=256</VT-Qpid-5>\n+                        <VT-Qpid-6>-n VT-Qpid-6 -s[100] -c[1,32],samples=32 -d2M transacted=true commitBatchSize=100 persistent=true rate=100 messageSize=256</VT-Qpid-6>\n+\n+                        <!-- P2P Scalability Tests. -->\n+                        <!-- 250,000 Total, 1P-1T-1C -->\n+                        <PT-Qpid-1>-n PT-Qpid-1 -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 -o $QPID_WORK/results commitBatchSize=100 transacted=true</PT-Qpid-1>\n+                        <PT-Qpid-2>-n PT-Qpid-2 -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 -o $QPID_WORK/results</PT-Qpid-2>\n+\n+                        <!-- 25000 Msgs * 10 Brokers = 250,000 Total, 10P-1Q-10C -->\n+                        <PT-Qpid-3>-n PT-Qpid-3 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 -o $QPID_WORK/results commitBatchSize=100 transacted=true</PT-Qpid-3>\n+                        <PT-Qpid-4>-n PT-Qpid-4 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 -o $QPID_WORK/results</PT-Qpid-4>\n+\n+                        <!-- 25000 Msgs * 10 Brokers = 250,000 Tota,l 10P-10T-10C 10*(1P-1Q-1C) -->\n+                        <PT-Qpid-5>-n PT-Qpid-5 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 -o $QPID_WORK/results transacted=true commitBatchSize=100</PT-Qpid-5>\n+                        <PT-Qpid-6>-n PT-Qpid-6 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 -o $QPID_WORK/results</PT-Qpid-6>\n+\n+                        <!-- 2500 Msgs * 10 Brokers * 10 Topics/Clients = 250,000 Total, 10P-100T-10C 10*(1P-10T-1C) -->\n+                        <PT-Qpid-7>-n PT-Qpid-7 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true destinationsCount=10 transacted=true commitBatchSize=100 messageSize=256 -o $QPID_WORK/results</PT-Qpid-7>\n+                        <PT-Qpid-8>-n PT-Qpid-8 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true destinationsCount=10 messageSize=256 -o $QPID_WORK/results</PT-Qpid-8>\n+\n+                        <!-- 2500 Msgs * 100 Brokers = 250,000 Total, 100P-100T-100C 100*(1P-1T-1C) -->\n+                        <PT-Qpid-9>-n PT-Qpid-9 -d 10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results</PT-Qpid-9>\n+                        <PT-Qpid-10>-n PT-Qpid-10 -d 10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 batchSize=250 -o $QPID_WORK/results</PT-Qpid-10>\n+\n+                        <!-- 250 Msgs * 100 Brokers * 10 Clients = 250,000 Total, 100P-1000T-100C 100*(1P-10T-1C)  -->\n+                        <PT-Qpid-11>-n PT-Qpid-11 -d 10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationsCount=10 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PT-Qpid-11>\n+                        <PT-Qpid-12>-n PT-Qpid-12 -d 10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationsCount=10 -o $QPID_WORK/results</PT-Qpid-12>\n+\n+                        <!-- 250 Msgs * 1000 Brokers = 250,000 Total, 1000P-1000T-1000C 1000*(1P-1T-1C) -->\n+                        <!-- PT-Qpid-13>-n PT-Qpid-13 -s [100] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 batchSize=100 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PT-Qpid-13 -->\n+                        <!-- PT-Qpid-14>-n PT-Qpid-14 -s [100] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 batchSize=100 -o $QPID_WORK/results</PT-Qpid-14 -->\n+\n+                        <!-- P2P Volume Tests. -->\n+                        <VQ-Qpid-1>-n VQ-Qpid-1 -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results</VQ-Qpid-1>\n+                        <VQ-Qpid-2>-n VQ-Qpid-2 -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 commitBatchSize=100 -o $QPID_WORK/results</VQ-Qpid-2>\n+                        <!-- Setting sample to 3,000,000 will result in a log entry every 10 minutes so should have 144 data points for the run. -->\n+                        <VQ-Qpid-3>-n VQ-Qpid-3 -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf rate=10000 messageSize=256 commitBatchSize=100 transacted=true batchSize=100000 -o $QPID_WORK/results</VQ-Qpid-3>\n+                        <VQ-Qpid-4>-n VQ-Qpid-4 -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf rate=10000 messageSize=256 batchSize=100000 -o $QPID_WORK/results</VQ-Qpid-4>\n+\n+                        <!-- P2P Scalability Tests. -->\n+                        <!-- 15,000 Total, 1P-1Q-1C -->\n+                        <PQ-Qpid-1>-n PQ-Qpid-1 -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf transacted=true commitBatchSize=100 messageSize=256 -o $QPID_WORK/results</PQ-Qpid-1>\n+                        <PQ-Qpid-2>-n PQ-Qpid-2 -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 -o $QPID_WORK/results</PQ-Qpid-2>\n+\n+                        <!-- 1500 Messages * 10 Brokers = 15,000 Total, 10P-1Q-10C -->\n+                        <PQ-Qpid-3>-n PQ-Qpid-3 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256  destinationName=ping transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-3>\n+                        <PQ-Qpid-4>-n PQ-Qpid-4 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256  destinationName=ping -o $QPID_WORK/results</PQ-Qpid-4>\n+\n+                        <!-- 1500 Messages * 10 Brokers = 15,000 Total, 10P-10Q-10C 10*(1P-1Q-1C) -->\n+                        <PQ-Qpid-5>-n PQ-Qpid-5 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-5>\n+                        <PQ-Qpid-6>-n PQ-Qpid-6 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 -o $QPID_WORK/results</PQ-Qpid-6>\n+\n+                        <!-- 1500 Messages * 10 Brokers = 15,000 Total, 10P-100Q-10C 10*(1P-10Q-1C) -->\n+                        <PQ-Qpid-7>-n PQ-Qpid-7 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 commitBatchSize=100 destinationsCount=10 transacted=true -o $QPID_WORK/results</PQ-Qpid-7>\n+                        <PQ-Qpid-8>-n PQ-Qpid-8 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256  destinationsCount=10 -o $QPID_WORK/results</PQ-Qpid-8>\n+\n+                        <!-- 150 Messages * 100 Brokers = 15,000 Total, 100P-100Q-100C 100*(1P-1Q-1C) -->\n+                        <PQ-Qpid-9>-n PQ-Qpid-9 -d 20M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-9>\n+                        <PQ-Qpid-10>-n PQ-Qpid-10 -d 10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 -o $QPID_WORK/results</PQ-Qpid-10>\n+\n+\n+                        <!-- 150 Messages * 100 Brokers = 15,000 Total, 100P-1000Q-100C 100*(1P-10Q-1C) -->\n+                        <PQ-Qpid-11>-n PQ-Qpid-11 -d 10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 destinationsCount=10 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-11>\n+                        <PQ-Qpid-12>-n PQ-Qpid-12 -d 10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 destinationsCount=10 -o $QPID_WORK/results</PQ-Qpid-12>\n+\n+                        <!-- 15 Messages * 1000 Brokers = 15,000 Total, 1000P-1000Q-1000C 1000*(1P-1Q-1C) -->\n+                        <!--PQ-Qpid-13>-n PQ-Qpid-13 -d 10M -s [1000] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-13>\n+                            <PQ-Qpid-14>-n PQ-Qpid-14 -d 10M -s [1000] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 batchSize=15  -o $QPID_WORK/results</PQ-Qpid-14-->\n+\n+                        <!-- Increasing Message Payload Tests. -->\n+                        <!-- Topic Testing -->\n+                        <LT-Qpid-1-512b>-n LT-Qpid-1-512b -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=512 transacted=true commitBatchSize=100 -o $QPID_WORK/results</LT-Qpid-1-512b>\n+                        <LT-Qpid-2-512b>-n LT-Qpid-2-512b -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=512 -o $QPID_WORK/results</LT-Qpid-2-512b>\n+\n+                        <LT-Qpid-1-1K>-n LT-Qpid-1-1K -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true commitBatchSize=100 transacted=true messageSize=1024 -o $QPID_WORK/results</LT-Qpid-1-1K>\n+                        <LT-Qpid-2-1K>-n LT-Qpid-2-1K -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=1024 -o $QPID_WORK/results</LT-Qpid-2-1K>\n+\n+                        <LT-Qpid-1-5K>-n LT-Qpid-1-5K -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true commitBatchSize=100 messageSize=5120 transacted=true -o $QPID_WORK/results</LT-Qpid-1-5K>\n+                        <LT-Qpid-2-5K>-n LT-Qpid-2-5K -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true  messageSize=5120 -o $QPID_WORK/results</LT-Qpid-2-5K>\n+\n+                        <LT-Qpid-1-10K>-n LT-Qpid-1-10K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true commitBatchSize=100 messageSize=10240 transacted=true -o $QPID_WORK/results</LT-Qpid-1-10K>\n+                        <LT-Qpid-2-10K>-n LT-Qpid-2-10K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=10240 -o $QPID_WORK/results</LT-Qpid-2-10K>\n+\n+                        <LT-Qpid-1-50K>-n LT-Qpid-1-50K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true commitBatchSize=100 messageSize=51200 transacted=true -o $QPID_WORK/results</LT-Qpid-1-50K>\n+                        <LT-Qpid-2-50K>-n LT-Qpid-2-50K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=51200 -o $QPID_WORK/results</LT-Qpid-2-50K>\n+\n+                        <LT-Qpid-1-100K>-n LT-Qpid-1-100K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true commitBatchSize=100 messageSize=102400 transacted=true -o $QPID_WORK/results</LT-Qpid-1-100K>\n+                        <LT-Qpid-2-100K>-n LT-Qpid-2-100K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=102400 -o $QPID_WORK/results</LT-Qpid-2-100K>\n+                        \n+                        <LT-Qpid-1-1M>-n LT-Qpid-1-1M -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true commitBatchSize=100 messageSize=1048576 transacted=true -o $QPID_WORK/results</LT-Qpid-1-1M>\n+                        <LT-Qpid-2-1M>-n LT-Qpid-2-1M -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=1048476 -o $QPID_WORK/results</LT-Qpid-2-1M>\n+\n+                        <!-- Queue Testing -->\n+                        <LT-Qpid-3-512b>-n LT-Qpid-3-512b -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=100 messageSize=512 transacted=true -o $QPID_WORK/results</LT-Qpid-3-512b>\n+                        <LT-Qpid-4-512b>-n LT-Qpid-4-512b -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=512 -o $QPID_WORK/results</LT-Qpid-4-512b>\n+\n+                        <LT-Qpid-3-1K>-n LT-Qpid-3-1K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=100 messageSize=1024 transacted=true -o $QPID_WORK/results</LT-Qpid-3-1K>\n+                        <LT-Qpid-4-1K>-n LT-Qpid-4-1K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPer messageSize=1024 -o $QPID_WORK/results</LT-Qpid-4-1K>\n+\n+                        <LT-Qpid-3-5K>-n LT-Qpid-3-5K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=100 messageSize=5120 transacted=true -o $QPID_WORK/results</LT-Qpid-3-5K>\n+                        <LT-Qpid-4-5K>-n LT-Qpid-4-5K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=5120 -o $QPID_WORK/results</LT-Qpid-4-5K>\n+\n+                        <LT-Qpid-3-10K>-n LT-Qpid-3-10K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=100 messageSize=10240 transacted=true -o $QPID_WORK/results</LT-Qpid-3-10K>\n+                        <LT-Qpid-4-10K>-n LT-Qpid-4-10K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=10240 -o $QPID_WORK/results</LT-Qpid-4-10K>\n+\n+                        <LT-Qpid-3-50K>-n LT-Qpid-3-50K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=100 messageSize=51200 transacted=true -o $QPID_WORK/results</LT-Qpid-3-50K>\n+                        <LT-Qpid-4-50K>-n LT-Qpid-4-50K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=51200 -o $QPID_WORK/results</LT-Qpid-4-50K>\n+                        \n+                        <LT-Qpid-3-100K>-n LT-Qpid-3-100K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=100 messageSize=102400 transacted=true -o $QPID_WORK/results</LT-Qpid-3-100K>\n+                        <LT-Qpid-4-100K>-n LT-Qpid-4-100K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=102400 -o $QPID_WORK/results</LT-Qpid-4-100K>\n+\n+                        <LT-Qpid-3-1M>-n LT-Qpid-3-1M -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=100 messageSize=1048576 transacted=true -o $QPID_WORK/results</LT-Qpid-3-1M>\n+                        <LT-Qpid-4-1M>-n LT-Qpid-4-1M -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=1048576  -o $QPID_WORK/results</LT-Qpid-4-1M>\n+\n+                        <!-- Failover Tests. -->\n+                        <!-- Transactional -->\n+                        <FT-Qpid-1>-n FT-Qpid-1 -s [250000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 batchSize=10000 transacted=true broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" FailBeforeSend=true -o $QPID_WORK/results</FT-Qpid-1>\n+                        <FT-Qpid-2>-n FT-Qpid-2 -s [250000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 batchSize=10000 transacted=true broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" failAfterSend=true -o $QPID_WORK/results</FT-Qpid-2>\n+                        <FT-Qpid-3>-n FT-Qpid-3 -s [250000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 batchSize=10000 transacted=true broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" failAfterCommit=true -o $QPID_WORK/results</FT-Qpid-3>\n+\n+                        <!-- Non Transactional -->\n+                        <FT-Qpid-4>-n FT-Qpid-4 -s [250000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 batchSize=10000 broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" transacted=false failBeforeSend=true -o $QPID_WORK/results</FT-Qpid-4>\n+                        <FT-Qpid-5>-n FT-Qpid-5 -s [250000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 batchSize=10000 broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" transacted=false failAfterSend=true -o $QPID_WORK/results</FT-Qpid-5>\n+\n+\n+                        <!-- Persistent Tests -->\n+\n+                        <!-- P2P Volume Tests. -->\n+                        <VT-Qpid-1-P>-n VT-Qpid-1 -d1H -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results</VT-Qpid-1-P>\n+                        <VT-Qpid-2-P>-n VT-Qpid-2 -d1H -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 -o $QPID_WORK/results</VT-Qpid-2-P>\n+                        <!-- Setting sample to 3,000,000 will result in a log entry every 10 minutes so should have 144 data points for the run. -->\n+                        <VT-Qpid-3-P>-n VT-Qpid-3 -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true rate=1000  messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results batchSize=10000</VT-Qpid-3-P>\n+                        <VT-Qpid-4-P>-n VT-Qpid-4 -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true rate=1000  messageSize=256 -o $QPID_WORK/results batchSize=10000</VT-Qpid-4-P>\n+\n+                        <!-- P2P Scalability Tests. -->\n+                        <!-- 25,000 Total, 1P-1T-1C -->\n+                        <PT-Qpid-1-P>-n PT-Qpid-1-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true  messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results</PT-Qpid-1-P>\n+                        <PT-Qpid-2-P>-n PT-Qpid-2-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 -o $QPID_WORK/results</PT-Qpid-2-P>\n+\n+                        <!-- 2500 Msgs * 10 Brokers = 25,000 Total, 10P-1Q-10C -->\n+                        <PT-Qpid-3-P>-n PT-Qpid-3-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results</PT-Qpid-3-P>\n+                        <PT-Qpid-4-P>-n PT-Qpid-4-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256  -o $QPID_WORK/results</PT-Qpid-4-P>\n+\n+                        <!-- 2500 Msgs * 10 Brokers = 25,000 Tota,l 10P-10T-10C 10*(1P-1Q-1C) -->\n+                        <PT-Qpid-5-P>-n PT-Qpid-5-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true transacted=true messageSize=256 commitBatchSize=100 -o $QPID_WORK/results</PT-Qpid-5-P>\n+                        <PT-Qpid-6-P>-n PT-Qpid-6-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 -o $QPID_WORK/results</PT-Qpid-6-P>\n+\n+                        <!-- 250 Msgs * 10 Brokers * 10 Topics/Clients = 250,000 Total, 10P-100T-10C 10*(1P-10T-1C) -->\n+                        <PT-Qpid-7-P>-n PT-Qpid-7-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true destinationsCount=10 transacted=true messageSize=256 commitBatchSize=100 -o $QPID_WORK/results</PT-Qpid-7-P>\n+                        <PT-Qpid-8-P>-n PT-Qpid-8-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true destinationsCount=10 messageSize=256 -o $QPID_WORK/results</PT-Qpid-8-P>\n+\n+                        <!-- 250 Msgs * 100 Brokers = 25,000 Total, 100P-100T-100C 100*(1P-1T-1C) -->\n+                        <PT-Qpid-9-P>-n PT-Qpid-9-P -d10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results</PT-Qpid-9-P>\n+                        <PT-Qpid-10-P>-n PT-Qpid-10-P -d10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 batchSize=250 -o $QPID_WORK/results</PT-Qpid-10-P>\n+\n+                        <!-- 25 Msgs * 100 Brokers * 10 Clients = 250,000 Total, 100P-1000T-100C 100*(1P-10T-1C)  -->\n+                        <PT-Qpid-11-P>-n PT-Qpid-11-P -d10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 destinationsCount=10 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PT-Qpid-11-P>\n+                        <PT-Qpid-12-P>-n PT-Qpid-12-P -d10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 destinationsCount=10 -o $QPID_WORK/results</PT-Qpid-12-P>\n+\n+                        <!-- 25 Msgs * 1000 Brokers = 25,000 Total, 1000P-1000T-1000C 1000*(1P-1T-1C) -->\n+                        <!--PT-Qpid-13-P>-n PT-Qpid-13-P -d10M -s [1000] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PT-Qpid-13-P-->\n+                        <!--PT-Qpid-14-P>-n PT-Qpid-14-P -d10M -s [1000] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 -o $QPID_WORK/results</PT-Qpid-14-P-->\n+\n+                        <!-- P2P Volume Tests. -->\n+                        <VQ-Qpid-1-P>-n VQ-Qpid-1-P -d1H -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results</VQ-Qpid-1-P>\n+                        <VQ-Qpid-2-P>-n VQ-Qpid-2-P -d1H -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 -o $QPID_WORK/results</VQ-Qpid-2-P>\n+                        <!-- Setting sample to 3,000,000 will result in a log entry every 10 minutes so should have 144 data points for the run. -->\n+                        <VQ-Qpid-3-P>-n VQ-Qpid-3-P -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true rate=10000 messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results batchSize=100000</VQ-Qpid-3-P>\n+                        <VQ-Qpid-4-P>-n VQ-Qpid-4-P -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true rate=10000 messageSize=256 -o $QPID_WORK/results batchSize=100000</VQ-Qpid-4-P>\n+\n+                        <!-- P2P Scalability Tests. -->\n+                        <!-- 1500 Total, 1P-1Q-1C -->\n+                        <PQ-Qpid-1-P>-n PQ-Qpid-1-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true transacted=true commitBatchSize=100 messageSize=256 -o $QPID_WORK/results</PQ-Qpid-1-P>\n+                        <PQ-Qpid-2-P>-n PQ-Qpid-2-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 -o $QPID_WORK/results</PQ-Qpid-2-P>\n+\n+                        <!-- 150 Messages * 10 Brokers = 15,000 Total, 10P-1Q-10C -->\n+                        <PQ-Qpid-3-P>-n PQ-Qpid-3-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 destinationName=ping transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-3-P>\n+                        <PQ-Qpid-4-P>-n PQ-Qpid-4-P -d10M -s [100] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 destinationName=ping -o $QPID_WORK/results</PQ-Qpid-4-P>\n+\n+                        <!-- 150 Messages * 10 Brokers = 15,000 Total, 10P-10Q-10C 10*(1P-1Q-1C) -->\n+                        <PQ-Qpid-5-P>-n PQ-Qpid-5-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-5-P>\n+                        <PQ-Qpid-6-P>-n PQ-Qpid-6-P -d10M -s [100] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 -o $QPID_WORK/results</PQ-Qpid-6-P>\n+\n+                        <!-- 150 Messages * 10 Brokers = 15,000 Total, 10P-100Q-10C 10*(1P-10Q-1C) -->\n+                        <PQ-Qpid-7-P>-n PQ-Qpid-7-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 batchSize=100 destinationsCount=10 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-7-P>\n+                        <PQ-Qpid-8-P>-n PQ-Qpid-8-P -d10M -s [100] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 destinationsCount=10 -o $QPID_WORK/results rate=200</PQ-Qpid-8-P>\n+\n+                        <!-- 15 Messages * 100 Brokers = 15,000 Total, 100P-100Q-100C 100*(1P-1Q-1C) -->\n+                        <PQ-Qpid-9-P>-n PQ-Qpid-9-P -d10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 batchSize=50 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-9-P>\n+                        <PQ-Qpid-10-P>-n PQ-Qpid-10-P -d10M -s [100] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 -o $QPID_WORK/results</PQ-Qpid-10-P>\n+\n+                        <!-- 15 Messages * 100 Brokers = 15,000 Total, 100P-1000Q-100C 100*(1P-10Q-1C) -->\n+                        <PQ-Qpid-11-P>-n PQ-Qpid-11-P -d10M -s [100] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 destinationsCount=10 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-11-P>\n+                        <PQ-Qpid-12-P>-n PQ-Qpid-12-P -d10M -s [100] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 destinationsCount=10 -o $QPID_WORK/results</PQ-Qpid-12-P>\n+\n+                        <!-- 2 Messages * 1000 Brokers = 2,000 Total, 1000P-1000Q-1000C 1000*(1P-1Q-1C) -->\n+                        <!--PQ-Qpid-13-P>-n PQ-Qpid-13-P -d10M -s [1000] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-13-P>\n+                            <PQ-Qpid-14-P>-n PQ-Qpid-14-P -d10M -s [1000] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 -o $QPID_WORK/results</PQ-Qpid-14-P-->\n+\n+                        <!-- Increasing Message Payload Tests. -->\n+                        <!-- Topic Testing -->\n+                        <LT-Qpid-1-512b-P>-n LT-Qpid-1-512b-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=512 transacted=true commitBatchSize=100 -o $QPID_WORK/results</LT-Qpid-1-512b-P>\n+                        <LT-Qpid-2-512b-P>-n LT-Qpid-2-512b-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=512 -o $QPID_WORK/results</LT-Qpid-2-512b-P>\n+\n+                        <LT-Qpid-1-1K-P>-n LT-Qpid-1-1K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true commitBatchSize=100 transacted=true messageSize=1024 -o $QPID_WORK/results</LT-Qpid-1-1K-P>\n+                        <LT-Qpid-2-1K-P>-n LT-Qpid-2-1K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=1024 -o $QPID_WORK/results</LT-Qpid-2-1K-P>\n+\n+                        <LT-Qpid-1-5K-P>-n LT-Qpid-1-5K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=5120 transacted=true -o $QPID_WORK/results</LT-Qpid-1-5K-P>\n+                        <LT-Qpid-2-5K-P>-n LT-Qpid-2-5K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=5120 -o $QPID_WORK/results</LT-Qpid-2-5K-P>\n+\n+                        <LT-Qpid-1-10K-P>-n LT-Qpid-1-10K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true commitBatchSize=100 messageSize=10240 transacted=true -o $QPID_WORK/results</LT-Qpid-1-10K-P>\n+                        <LT-Qpid-2-10K-P>-n LT-Qpid-2-10K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=10240  -o $QPID_WORK/results</LT-Qpid-2-10K-P>\n+\n+                        <LT-Qpid-1-50K-P>-n LT-Qpid-1-50K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=51200 commitBatchSize=100 transacted=true -o $QPID_WORK/results</LT-Qpid-1-50K-P>\n+                        <LT-Qpid-2-50K-P>-n LT-Qpid-2-50K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=51200 -o $QPID_WORK/results</LT-Qpid-2-50K-P>\n+\n+                        <LT-Qpid-1-100K-P>-n LT-Qpid-1-100K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true commitBatchSize=100 messageSize=102400 transacted=true -o $QPID_WORK/results</LT-Qpid-1-100K-P>\n+                        <LT-Qpid-2-100K-P>-n LT-Qpid-2-100K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=102400 -o $QPID_WORK/results</LT-Qpid-2-100K-P>\n+                        \n+                        <LT-Qpid-1-1M-P>-n LT-Qpid-1-1M-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true commitBatchSize=100 messageSize=1048576 transacted=true -o $QPID_WORK/results</LT-Qpid-1-1M-P>\n+                        <LT-Qpid-2-1M-P>-n LT-Qpid-2-1M-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=1048476 -o $QPID_WORK/results</LT-Qpid-2-1M-P>\n+\n+                        <!-- Queue Testing -->\n+                        <LT-Qpid-3-512b-P>-n LT-Qpid-3-512b-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true commitBatchSize=100 messageSize=512 transacted=true -o $QPID_WORK/results</LT-Qpid-3-512b-P>\n+                        <LT-Qpid-4-512b-P>-n LT-Qpid-4-512b-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=512 -o $QPID_WORK/results</LT-Qpid-4-512b-P>\n+\n+                        <LT-Qpid-3-1K-P>-n LT-Qpid-3-1K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true commitBatchSize=100 transacted=true messageSize=1024 -o $QPID_WORK/results</LT-Qpid-3-1K-P>\n+                        <LT-Qpid-4-1K-P>-n LT-Qpid-4-1K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=1024 -o $QPID_WORK/results</LT-Qpid-4-1K-P>\n+\n+                        <LT-Qpid-3-5K-P>-n LT-Qpid-3-5K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true commitBatchSize=100 messageSize=5120 transacted=true -o $QPID_WORK/results</LT-Qpid-3-5K-P>\n+                        <LT-Qpid-4-5K-P>-n LT-Qpid-4-5K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=5120 -o $QPID_WORK/results</LT-Qpid-4-5K-P>\n+\n+                        <LT-Qpid-3-10K-P>-n LT-Qpid-3-10K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true commitBatchSize=100 messageSize=10240 transacted=true -o $QPID_WORK/results</LT-Qpid-3-10K-P>\n+                        <LT-Qpid-4-10K-P>-n LT-Qpid-4-10K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=10240 -o $QPID_WORK/results</LT-Qpid-4-10K-P>\n+\n+                        <LT-Qpid-3-50K-P>-n LT-Qpid-3-50K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true commitBatchSize=100 messageSize=51200 transacted=true -o $QPID_WORK/results</LT-Qpid-3-50K-P>\n+                        <LT-Qpid-4-50K-P>-n LT-Qpid-4-50K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=51200 -o $QPID_WORK/results</LT-Qpid-4-50K-P>\n+                        \n+                        <LT-Qpid-3-100K-P>-n LT-Qpid-3-100K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true commitBatchSize=100 messageSize=102400 transacted=true -o $QPID_WORK/results</LT-Qpid-3-100K-P>\n+                        <LT-Qpid-4-100K-P>-n LT-Qpid-4-100K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=102400 -o $QPID_WORK/results</LT-Qpid-4-100K-P>\n+\n+                        <LT-Qpid-3-1M-P>-n LT-Qpid-3-1M-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true commitBatchSize=100 messageSize=1048576 transacted=true -o $QPID_WORK/results</LT-Qpid-3-1M-P>\n+                        <LT-Qpid-4-1M-P>-n LT-Qpid-4-1M-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=1048576 -o $QPID_WORK/results</LT-Qpid-4-1M-P>\n+\n+                        <!-- Failover Tests. -->\n+                        <!-- Transactional -->\n+                        <FT-Qpid-1-P>-n FT-Qpid-1-P -s [25000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 batchSize=10000 transacted=true broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" failBeforeSend=true -o $QPID_WORK/results</FT-Qpid-1-P>\n+                        <FT-Qpid-2-P>-n FT-Qpid-2-P -s [25000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 batchSize=10000 transacted=true broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" failAfterSend=true -o $QPID_WORK/results</FT-Qpid-2-P>\n+                        <FT-Qpid-3-P>-n FT-Qpid-3-P -s [25000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 batchSize=10000 transacted=true broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" failAfterCommit=true -o $QPID_WORK/results</FT-Qpid-3-P>\n+\n+                        <!-- Non Transactional -->\n+                        <FT-Qpid-4-P>-n FT-Qpid-4-P -s [250] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" transacted=false failBeforeSend=true -o $QPID_WORK/results</FT-Qpid-4-P>\n+                        <FT-Qpid-5-P>-n FT-Qpid-5-P -s [250] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" transacted=false failAfterSend=true -o $QPID_WORK/results</FT-Qpid-5-P>\n+\n \n                     </commands>\n                 </configuration>",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/pom.xml",
                "sha": "63edac1801d971a7afb6d4949ee5e512827268f8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/main/java/org/apache/qpid/client/message/TestMessageFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/src/main/java/org/apache/qpid/client/message/TestMessageFactory.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/perftests/src/main/java/org/apache/qpid/client/message/TestMessageFactory.java",
                "patch": "@@ -103,7 +103,7 @@ public static String createMessagePayload(int size)\n     {\n         StringBuffer buf = new StringBuffer(size);\n         int count = 0;\n-        while (count < size)\n+        while (count <= (size - MESSAGE_DATA_BYTES.length()))\n         {\n             buf.append(MESSAGE_DATA_BYTES);\n             count += MESSAGE_DATA_BYTES.length();",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/main/java/org/apache/qpid/client/message/TestMessageFactory.java",
                "sha": "eeb4021f3482336ec474988e5c234cd878eb1645",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/main/java/org/apache/qpid/config/AbstractConfig.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/src/main/java/org/apache/qpid/config/AbstractConfig.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 2,
                "filename": "qpid/java/perftests/src/main/java/org/apache/qpid/config/AbstractConfig.java",
                "patch": "@@ -49,7 +49,7 @@ protected int parseInt(String msg, String i)\n         }\n         catch(NumberFormatException e)\n         {\n-            throw new RuntimeException(msg + \": \" + i);\n+            throw new RuntimeException(msg + \": \" + i, e);\n         }\n     }\n \n@@ -61,7 +61,7 @@ protected long parseLong(String msg, String i)\n         }\n         catch(NumberFormatException e)\n         {\n-            throw new RuntimeException(msg + \": \" + i);\n+            throw new RuntimeException(msg + \": \" + i, e);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/main/java/org/apache/qpid/config/AbstractConfig.java",
                "sha": "14db74438f17d229d3e70ab21486ee1482ba78e8",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/main/java/org/apache/qpid/config/JBossConnectionFactoryInitialiser.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/src/main/java/org/apache/qpid/config/JBossConnectionFactoryInitialiser.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 2,
                "filename": "qpid/java/perftests/src/main/java/org/apache/qpid/config/JBossConnectionFactoryInitialiser.java",
                "patch": "@@ -22,6 +22,7 @@\n \n import org.apache.qpid.config.ConnectionFactoryInitialiser;\n import org.apache.qpid.config.ConnectorConfig;\n+import org.apache.qpid.client.JMSAMQException;\n \n import javax.jms.ConnectionFactory;\n import javax.jms.JMSException;\n@@ -63,11 +64,11 @@ public ConnectionFactory getFactory(ConnectorConfig config) throws JMSException\n         }\n         catch (NamingException e)\n         {\n-            throw new JMSException(\"Unable to lookup object: \" + e);\n+            throw new JMSAMQException(\"Unable to lookup object: \" + e, e);\n         }\n         catch (Exception e)\n         {\n-            throw new JMSException(\"Error creating topic: \" + e);\n+            throw new JMSAMQException(\"Error creating topic: \" + e, e);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/main/java/org/apache/qpid/config/JBossConnectionFactoryInitialiser.java",
                "sha": "a0248a8f795b4b50466c05d44709f396501aaa67",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/main/java/org/apache/qpid/ping/PingDurableClient.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/src/main/java/org/apache/qpid/ping/PingDurableClient.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 2,
                "filename": "qpid/java/perftests/src/main/java/org/apache/qpid/ping/PingDurableClient.java",
                "patch": "@@ -1,3 +1,4 @@\n+/* Copyright Rupert Smith, 2005 to 2006, all rights reserved. */\r\n /*\r\n  *\r\n  * Licensed to the Apache Software Foundation (ASF) under one\r\n@@ -178,6 +179,7 @@ public static void main(String[] args)\n \r\n             // Run the test procedure.\r\n             int sent = pingProducer.send();\r\n+            pingProducer.closeConnection();\r\n             pingProducer.waitForUser(\"Press return to begin receiving the pings.\");\r\n             pingProducer.receive(sent);\r\n \r\n@@ -302,17 +304,25 @@ else if (!_publish)\n         System.out.println(\"Messages sent: \" + messagesSent + \", Messages Committed = \" + messagesCommitted\r\n             + \", Messages not Committed = \" + messagesNotCommitted);\r\n \r\n+\r\n+\r\n+        return messagesSent;\r\n+    }\r\n+\r\n+    protected void closeConnection()\r\n+    {\r\n         // Clean up the connection.\r\n         try\r\n         {\r\n             close();\r\n         }\r\n         catch (JMSException e)\r\n         {\r\n+            log.debug(\"There was an error whilst closing the connection: \" + e, e);\r\n+            System.out.println(\"There was an error whilst closing the connection.\");\r\n+\r\n             // Ignore as did best could manage to clean up.\r\n         }\r\n-\r\n-        return messagesSent;\r\n     }\r\n \r\n     protected void receive(int messagesSent) throws Exception\r\n@@ -354,6 +364,32 @@ else if (messagesReceived >= messagesSent)\n             }\r\n         }\r\n \r\n+        // Ensure messages received are committed.\r\n+        if (_transacted)\r\n+        {\r\n+            try\r\n+            {\r\n+                _consumerSession.commit();\r\n+                System.out.println(\"Committed for all messages received.\");\r\n+            }\r\n+            catch (JMSException e)\r\n+            {\r\n+                log.debug(\"Error during commit: \" + e, e);\r\n+                System.out.println(\"Error during commit.\");\r\n+                try\r\n+                {\r\n+                    _consumerSession.rollback();\r\n+                    System.out.println(\"Rolled back on all messages received.\");\r\n+                }\r\n+                catch (JMSException e2)\r\n+                {\r\n+                    log.debug(\"Error during rollback: \" + e, e);\r\n+                    System.out.println(\"Error on roll back of all messages received.\");\r\n+                }\r\n+\r\n+            }\r\n+        }\r\n+\r\n         log.debug(\"messagesReceived = \" + messagesReceived);\r\n \r\n         System.out.println(\"Messages received: \" + messagesReceived);\r",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/main/java/org/apache/qpid/ping/PingDurableClient.java",
                "sha": "0e832ef1000441fb025517b9dfdc8d7c8aceb64e",
                "status": "modified"
            },
            {
                "additions": 57,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/main/java/org/apache/qpid/ping/PingSendOnlyClient.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/src/main/java/org/apache/qpid/ping/PingSendOnlyClient.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/perftests/src/main/java/org/apache/qpid/ping/PingSendOnlyClient.java",
                "patch": "@@ -0,0 +1,57 @@\n+/* Copyright Rupert Smith, 2005 to 2006, all rights reserved. */\r\n+package org.apache.qpid.ping;\r\n+\r\n+import java.util.Properties;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+\r\n+import org.apache.qpid.util.CommandLineParser;\r\n+\r\n+/**\r\n+ * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * </table>\r\n+ */\r\n+public class PingSendOnlyClient extends PingDurableClient\r\n+{\r\n+    private static final Logger log = Logger.getLogger(PingSendOnlyClient.class);\r\n+\r\n+    public PingSendOnlyClient(Properties overrides) throws Exception\r\n+    {\r\n+        super(overrides);\r\n+    }\r\n+\r\n+    /**\r\n+     * Starts the ping/wait/receive process.\r\n+     *\r\n+     * @param args The command line arguments.\r\n+     */\r\n+    public static void main(String[] args)\r\n+    {\r\n+        try\r\n+        {\r\n+            // Create a ping producer overriding its defaults with all options passed on the command line.\r\n+            Properties options = CommandLineParser.processCommandLine(args, new CommandLineParser(new String[][] {}));\r\n+            PingDurableClient pingProducer = new PingSendOnlyClient(options);\r\n+\r\n+            // Create a shutdown hook to terminate the ping-pong producer.\r\n+            Runtime.getRuntime().addShutdownHook(pingProducer.getShutdownHook());\r\n+\r\n+            // Ensure that the ping pong producer is registered to listen for exceptions on the connection too.\r\n+            // pingProducer.getConnection().setExceptionListener(pingProducer);\r\n+\r\n+            // Run the test procedure.\r\n+            int sent = pingProducer.send();\r\n+            pingProducer.waitForUser(\"Press return to close connection and quit.\");\r\n+            pingProducer.closeConnection();\r\n+\r\n+            System.exit(0);\r\n+        }\r\n+        catch (Exception e)\r\n+        {\r\n+            System.err.println(e.getMessage());\r\n+            log.error(\"Top level handler caught execption.\", e);\r\n+            System.exit(1);\r\n+        }\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/main/java/org/apache/qpid/ping/PingSendOnlyClient.java",
                "sha": "7cf5e4516f8a52e2cbdd52ba1ce1b5193d37e6ee",
                "status": "added"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/main/java/org/apache/qpid/requestreply/PingPongProducer.java",
                "changes": 59,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/src/main/java/org/apache/qpid/requestreply/PingPongProducer.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 27,
                "filename": "qpid/java/perftests/src/main/java/org/apache/qpid/requestreply/PingPongProducer.java",
                "patch": "@@ -116,7 +116,7 @@\n  *       by the PPP that it is atteched to.\r\n  *\r\n  * @todo Use read/write lock in the onmessage, not for reading writing but to make use of a shared and exlcusive lock pair.\r\n- *       Obtian read lock on all messages, before decrementing the message count. At the end of the on message method add a\r\n+ *       Obtain read lock on all messages, before decrementing the message count. At the end of the on message method add a\r\n  *       block that obtains the write lock for the very last message, releases any waiting producer. Means that the last\r\n  *       message waits until all other messages have been handled before releasing producers but allows messages to be\r\n  *       processed concurrently, unlike the current synchronized block.\r\n@@ -725,13 +725,17 @@ public void createReplyConsumers(Collection<Destination> destinations, String se\n         log.debug(\"public void createReplyConsumers(Collection<Destination> destinations = \" + destinations\r\n             + \", String selector = \" + selector + \"): called\");\r\n \r\n+        log.debug(\"Creating \" + destinations.size() + \" reply consumers.\");\r\n+\r\n         for (Destination destination : destinations)\r\n         {\r\n             // Create a consumer for the destination and set this pinger to listen to its messages.\r\n             _consumer =\r\n                 _consumerSession.createConsumer(destination, PREFETCH_DEFAULT, NO_LOCAL_DEFAULT, EXCLUSIVE_DEFAULT,\r\n                     selector);\r\n             _consumer.setMessageListener(this);\r\n+\r\n+            log.debug(\"Set this to listen to replies sent to destination: \" + destination);\r\n         }\r\n     }\r\n \r\n@@ -743,13 +747,13 @@ public void createReplyConsumers(Collection<Destination> destinations, String se\n      */\r\n     public void onMessage(Message message)\r\n     {\r\n-        log.debug(\"public void onMessage(Message message): called\");\r\n+        // log.debug(\"public void onMessage(Message message): called\");\r\n \r\n         try\r\n         {\r\n             // Extract the messages correlation id.\r\n             String correlationID = message.getJMSCorrelationID();\r\n-            log.debug(\"correlationID = \" + correlationID);\r\n+            // log.debug(\"correlationID = \" + correlationID);\r\n \r\n             // Countdown on the traffic light if there is one for the matching correlation id.\r\n             PerCorrelationId perCorrelationId = perCorrelationIds.get(correlationID);\r\n@@ -761,7 +765,7 @@ public void onMessage(Message message)\n                 // Restart the timeout timer on every message.\r\n                 perCorrelationId.timeOutStart = System.nanoTime();\r\n \r\n-                log.debug(\"Reply was expected, decrementing the latch for the id, \" + correlationID);\r\n+                // log.debug(\"Reply was expected, decrementing the latch for the id, \" + correlationID);\r\n \r\n                 // Decrement the countdown latch. Before this point, it is possible that two threads might enter this\r\n                 // method simultanesouly with the same correlation id. Decrementing the latch in a synchronized block\r\n@@ -776,8 +780,8 @@ public void onMessage(Message message)\n                     trueCount = trafficLight.getCount();\r\n                     remainingCount = trueCount - 1;\r\n \r\n-                    log.debug(\"remainingCount = \" + remainingCount);\r\n-                    log.debug(\"trueCount = \" + trueCount);\r\n+                    // log.debug(\"remainingCount = \" + remainingCount);\r\n+                    // log.debug(\"trueCount = \" + trueCount);\r\n \r\n                     // Commit on transaction batch size boundaries. At this point in time the waiting producer remains\r\n                     // blocked, even on the last message.\r\n@@ -806,23 +810,23 @@ public void onMessage(Message message)\n             }\r\n \r\n             // Print out ping times for every message in verbose mode only.\r\n-            if (_verbose)\r\n+            /*if (_verbose)\r\n             {\r\n                 Long timestamp = message.getLongProperty(MESSAGE_TIMESTAMP_PROPNAME);\r\n \r\n                 if (timestamp != null)\r\n                 {\r\n                     long diff = System.nanoTime() - timestamp;\r\n-                    log.trace(\"Time for round trip (nanos): \" + diff);\r\n+                    //log.trace(\"Time for round trip (nanos): \" + diff);\r\n                 }\r\n-            }\r\n+            }*/\r\n         }\r\n         catch (JMSException e)\r\n         {\r\n             log.warn(\"There was a JMSException: \" + e.getMessage(), e);\r\n         }\r\n \r\n-        log.debug(\"public void onMessage(Message message): ending\");\r\n+        // log.debug(\"public void onMessage(Message message): ending\");\r\n     }\r\n \r\n     /**\r\n@@ -955,16 +959,16 @@ public void pingNoWaitForReply(Message message, int numPings, String messageCorr\n             committed = false;\r\n \r\n             // Re-timestamp the message.\r\n-            message.setLongProperty(MESSAGE_TIMESTAMP_PROPNAME, System.nanoTime());\r\n+            // message.setLongProperty(MESSAGE_TIMESTAMP_PROPNAME, System.nanoTime());\r\n \r\n             // Send the message, passing in the message count.\r\n             committed = sendMessage(i, message);\r\n \r\n             // Spew out per message timings on every message sonly in verbose mode.\r\n-            if (_verbose)\r\n+            /*if (_verbose)\r\n             {\r\n                 log.info(timestampFormatter.format(new Date()) + \": Pinged at with correlation id, \" + messageCorrelationId);\r\n-            }\r\n+            }*/\r\n         }\r\n \r\n         // Call commit if the send loop finished before reaching a batch size boundary so there may still be uncommitted messages.\r\n@@ -1003,7 +1007,7 @@ protected boolean sendMessage(int i, Message message) throws JMSException\n                 _failBeforeSend = false;\r\n             }\r\n \r\n-            log.trace(\"Failing Before Send\");\r\n+            // log.trace(\"Failing Before Send\");\r\n             waitForUser(KILL_BROKER_PROMPT);\r\n         }\r\n \r\n@@ -1176,6 +1180,7 @@ public void close() throws JMSException\n             if (_connection != null)\r\n             {\r\n                 _connection.close();\r\n+                log.debug(\"Close connection.\");\r\n             }\r\n         }\r\n         finally\r\n@@ -1213,20 +1218,20 @@ public void close() throws JMSException\n      */\r\n     protected boolean commitTx(Session session) throws JMSException\r\n     {\r\n-        log.debug(\"protected void commitTx(Session session): called\");\r\n+        // log.debug(\"protected void commitTx(Session session): called\");\r\n \r\n         boolean committed = false;\r\n \r\n-        log.trace(\"Batch time reached\");\r\n+        // log.trace(\"Batch time reached\");\r\n         if (_failAfterSend)\r\n         {\r\n-            log.trace(\"Batch size reached\");\r\n+            // log.trace(\"Batch size reached\");\r\n             if (_failOnce)\r\n             {\r\n                 _failAfterSend = false;\r\n             }\r\n \r\n-            log.trace(\"Failing After Send\");\r\n+            // log.trace(\"Failing After Send\");\r\n             waitForUser(KILL_BROKER_PROMPT);\r\n         }\r\n \r\n@@ -1241,14 +1246,14 @@ protected boolean commitTx(Session session) throws JMSException\n                         _failBeforeCommit = false;\r\n                     }\r\n \r\n-                    log.trace(\"Failing Before Commit\");\r\n+                    // log.trace(\"Failing Before Commit\");\r\n                     waitForUser(KILL_BROKER_PROMPT);\r\n                 }\r\n \r\n-                long l = System.nanoTime();\r\n+                // long l = System.nanoTime();\r\n                 session.commit();\r\n                 committed = true;\r\n-                log.debug(\"Time taken to commit :\" + ((System.nanoTime() - l) / 1000000f) + \" ms\");\r\n+                // log.debug(\"Time taken to commit :\" + ((System.nanoTime() - l) / 1000000f) + \" ms\");\r\n \r\n                 if (_failAfterCommit)\r\n                 {\r\n@@ -1257,15 +1262,15 @@ protected boolean commitTx(Session session) throws JMSException\n                         _failAfterCommit = false;\r\n                     }\r\n \r\n-                    log.trace(\"Failing After Commit\");\r\n+                    // log.trace(\"Failing After Commit\");\r\n                     waitForUser(KILL_BROKER_PROMPT);\r\n                 }\r\n \r\n-                log.trace(\"Session Commited.\");\r\n+                // log.trace(\"Session Commited.\");\r\n             }\r\n             catch (JMSException e)\r\n             {\r\n-                log.trace(\"JMSException on commit:\" + e.getMessage(), e);\r\n+                log.debug(\"JMSException on commit:\" + e.getMessage(), e);\r\n \r\n                 // Warn that the bounce back client is not available.\r\n                 if (e.getLinkedException() instanceof AMQNoConsumersException)\r\n@@ -1276,11 +1281,11 @@ protected boolean commitTx(Session session) throws JMSException\n                 try\r\n                 {\r\n                     session.rollback();\r\n-                    log.trace(\"Message rolled back.\");\r\n+                    log.debug(\"Message rolled back.\");\r\n                 }\r\n                 catch (JMSException jmse)\r\n                 {\r\n-                    log.trace(\"JMSE on rollback:\" + jmse.getMessage(), jmse);\r\n+                    log.debug(\"JMSE on rollback:\" + jmse.getMessage(), jmse);\r\n \r\n                     // Both commit and rollback failed. Throw the rollback exception.\r\n                     throw jmse;\r\n@@ -1296,7 +1301,7 @@ protected boolean commitTx(Session session) throws JMSException\n      *\r\n      * @param prompt The prompt to display on the console.\r\n      */\r\n-    protected void waitForUser(String prompt)\r\n+    public void waitForUser(String prompt)\r\n     {\r\n         System.out.println(prompt);\r\n \r",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/main/java/org/apache/qpid/requestreply/PingPongProducer.java",
                "sha": "ecaf27167fd7feb5c9f0a0d3861b30be1b775eb2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/main/java/org/apache/qpid/topic/Config.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/src/main/java/org/apache/qpid/topic/Config.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 1,
                "filename": "qpid/java/perftests/src/main/java/org/apache/qpid/topic/Config.java",
                "patch": "@@ -221,7 +221,7 @@ else if(\"-port\".equalsIgnoreCase(key))\n             }\n             catch(NumberFormatException e)\n             {\n-                throw new RuntimeException(\"Bad port number: \" + value);\n+                throw new RuntimeException(\"Bad port number: \" + value, e);\n             }\n         }\n         else if(\"-payload\".equalsIgnoreCase(key))",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/main/java/org/apache/qpid/topic/Config.java",
                "sha": "d5c097939979762c4faabc05122e0fe31796ab27",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/test/java/org/apache/qpid/ping/PingAsyncTestPerf.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/perftests/src/test/java/org/apache/qpid/ping/PingAsyncTestPerf.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 5,
                "filename": "qpid/java/perftests/src/test/java/org/apache/qpid/ping/PingAsyncTestPerf.java",
                "patch": "@@ -133,12 +133,13 @@ public TimingController getTimingController()\n      */\n     public void testAsyncPingOk(int numPings) throws Exception\n     {\n-        _logger.debug(\"public void testAsyncPingOk(int numPings): called\");\n+        // _logger.debug(\"public void testAsyncPingOk(int numPings): called\");\n \n         // Ensure that at least one ping was requeusted.\n         if (numPings == 0)\n         {\n             _logger.error(\"Number of pings requested was zero.\");\n+            fail(\"Number of pings requested was zero.\");\n         }\n \n         // Get the per thread test setup to run the test through.\n@@ -147,8 +148,8 @@ public void testAsyncPingOk(int numPings) throws Exception\n \n         // Advance the correlation id of messages to send, to make it unique for this run.\n         perThreadSetup._correlationId = Long.toString(corellationIdGenerator.incrementAndGet());\n-        String messageCorrelationId = perThreadSetup._correlationId;\n-        _logger.debug(\"messageCorrelationId = \" + messageCorrelationId);\n+        // String messageCorrelationId = perThreadSetup._correlationId;\n+        // _logger.debug(\"messageCorrelationId = \" + messageCorrelationId);\n \n         // Initialize the count and timing controller for the new correlation id.\n         PerCorrelationId perCorrelationId = new PerCorrelationId();\n@@ -246,9 +247,9 @@ public void onMessage(Message message, int remainingCount) throws JMSException\n                 // Extract the correlation id from the message.\n                 String correlationId = message.getJMSCorrelationID();\n \n-                _logger.debug(\"public void onMessage(Message message, int remainingCount = \" + remainingCount\n+                /*_logger.debug(\"public void onMessage(Message message, int remainingCount = \" + remainingCount\n                     + \"): called on batch boundary for message id: \" + correlationId + \" with thread id: \"\n-                    + Thread.currentThread().getId());\n+                    + Thread.currentThread().getId());*/\n \n                 // Get the details for the correlation id and check that they are not null. They can become null\n                 // if a test times out.",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/perftests/src/test/java/org/apache/qpid/ping/PingAsyncTestPerf.java",
                "sha": "6c7f22c19a95c495c393b9a317c887a2b9506835",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/systests/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBeanTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBeanTest.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 4,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBeanTest.java",
                "patch": "@@ -44,9 +44,9 @@ public void testExchangeOperations() throws Exception\n         VirtualHost vHost = ApplicationRegistry.getInstance().getVirtualHostRegistry().getVirtualHost(\"test\");\n \n         ManagedBroker mbean = new AMQBrokerManagerMBean((VirtualHost.VirtualHostMBean)vHost.getManagedObject());\n-        mbean.createNewExchange(exchange1,\"direct\",false, false);\n-        mbean.createNewExchange(exchange2,\"topic\",false, false);\n-        mbean.createNewExchange(exchange3,\"headers\",false, false);\n+        mbean.createNewExchange(exchange1,\"direct\",false);\n+        mbean.createNewExchange(exchange2,\"topic\",false);\n+        mbean.createNewExchange(exchange3,\"headers\",false);\n \n         assertTrue(_exchangeRegistry.getExchange(new AMQShortString(exchange1)) != null);\n         assertTrue(_exchangeRegistry.getExchange(new AMQShortString(exchange2)) != null);\n@@ -70,7 +70,7 @@ public void testQueueOperations() throws Exception\n \n         assertTrue(_queueRegistry.getQueue(new AMQShortString(queueName)) == null);\n                 \n-        mbean.createNewQueue(queueName, \"test\", false, true);\n+        mbean.createNewQueue(queueName, \"test\", false);\n         assertTrue(_queueRegistry.getQueue(new AMQShortString(queueName)) != null);\n \n         mbean.deleteQueue(queueName);",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/systests/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBeanTest.java",
                "sha": "20de0d5df0b8322ae61dc4a89dafe8a9ccbfb1d1",
                "status": "modified"
            },
            {
                "additions": 208,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/systests/src/main/java/org/apache/qpid/server/failure/HeapExhaustion.java",
                "changes": 208,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/failure/HeapExhaustion.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/failure/HeapExhaustion.java",
                "patch": "@@ -0,0 +1,208 @@\n+package org.apache.qpid.server.failure;\n+\n+import junit.framework.TestCase;\n+import org.apache.qpid.testutil.QpidClientConnection;\n+import org.apache.qpid.client.failover.FailoverException;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.protocol.AMQConstant;\n+import org.apache.log4j.Logger;\n+\n+import javax.jms.JMSException;\n+import java.io.IOException;\n+\n+\n+/** Test Case provided by client Non-functional Test NF101: heap exhaustion behaviour */\n+public class HeapExhaustion extends TestCase\n+{\n+    private static final Logger _logger = Logger.getLogger(HeapExhaustion.class);\n+\n+    protected QpidClientConnection conn;\n+    protected final String BROKER = \"localhost\";\n+    protected final String vhost = \"/test\";\n+    protected final String queue = \"direct://amq.direct//queue\";\n+\n+    protected String hundredK;\n+    protected String megabyte;\n+\n+    protected String generatePayloadOfSize(Integer numBytes)\n+    {\n+        return new String(new byte[numBytes]);\n+    }\n+\n+    protected void setUp() throws Exception\n+    {\n+        conn = new QpidClientConnection(BROKER);\n+        conn.setVirtualHost(vhost);\n+\n+        conn.connect();\n+        // clear queue\n+        _logger.debug(\"setup: clearing test queue\");\n+        conn.consume(queue, 2000);\n+\n+        hundredK = generatePayloadOfSize(1024 * 100);\n+        megabyte = generatePayloadOfSize(1024 * 1024);\n+    }\n+\n+    protected void tearDown() throws Exception\n+    {\n+        conn.disconnect();\n+    }\n+\n+\n+    /**\n+     * PUT at maximum rate (although we commit after each PUT) until failure\n+     *\n+     * @throws Exception on error\n+     */\n+    public void testUntilFailure() throws Exception\n+    {\n+        int copies = 0;\n+        int total = 0;\n+        String payload = hundredK;\n+        int size = payload.getBytes().length;\n+        while (true)\n+        {\n+            conn.put(queue, payload, 1);\n+            copies++;\n+            total += size;\n+            _logger.info(\"put copy \" + copies + \" OK for total bytes: \" + total);\n+        }\n+    }\n+\n+    /**\n+     * PUT at lower rate (5 per second) until failure\n+     *\n+     * @throws Exception on error\n+     */\n+    public void testUntilFailureWithDelays() throws Exception\n+    {\n+        int copies = 0;\n+        int total = 0;\n+        String payload = hundredK;\n+        int size = payload.getBytes().length;\n+        while (true)\n+        {\n+            conn.put(queue, payload, 1);\n+            copies++;\n+            total += size;\n+            _logger.debug(\"put copy \" + copies + \" OK for total bytes: \" + total);\n+            Thread.sleep(200);\n+        }\n+    }\n+\n+    public static void noDelay()\n+    {\n+        HeapExhaustion he = new HeapExhaustion();\n+\n+        try\n+        {\n+            he.setUp();\n+        }\n+        catch (Exception e)\n+        {\n+            _logger.info(\"Unable to connect\");\n+            System.exit(0);\n+        }\n+\n+        try\n+        {\n+            _logger.info(\"Running testUntilFailure\");\n+            try\n+            {\n+                he.testUntilFailure();\n+            }\n+            catch (FailoverException fe)\n+            {\n+                _logger.error(\"Caught failover:\" + fe);\n+            }\n+            _logger.info(\"Finishing Connection \");\n+\n+            try\n+            {\n+                he.tearDown();\n+            }\n+            catch (JMSException jmse)\n+            {\n+                if (((AMQException) jmse.getLinkedException()).getErrorCode() == AMQConstant.REQUEST_TIMEOUT)\n+                {\n+                    _logger.info(\"Successful test of testUntilFailure\");\n+                }\n+                else\n+                {\n+                    _logger.error(\"Test Failed due to:\" + jmse);\n+                }\n+            }\n+        }\n+        catch (Exception e)\n+        {\n+            _logger.error(\"Test Failed due to:\" + e);\n+        }\n+    }\n+\n+    public static void withDelay()\n+    {\n+        HeapExhaustion he = new HeapExhaustion();\n+\n+        try\n+        {\n+            he.setUp();\n+        }\n+        catch (Exception e)\n+        {\n+            _logger.info(\"Unable to connect\");\n+            System.exit(0);\n+        }\n+\n+        try\n+        {\n+            _logger.info(\"Running testUntilFailure\");\n+            try\n+            {\n+                he.testUntilFailureWithDelays();\n+            }\n+            catch (FailoverException fe)\n+            {\n+                _logger.error(\"Caught failover:\" + fe);\n+            }\n+            _logger.info(\"Finishing Connection \");\n+\n+            try\n+            {\n+                he.tearDown();\n+            }\n+            catch (JMSException jmse)\n+            {\n+                if (((AMQException) jmse.getLinkedException()).getErrorCode() == AMQConstant.REQUEST_TIMEOUT)\n+                {\n+                    _logger.info(\"Successful test of testUntilFailure\");\n+                }\n+                else\n+                {\n+                    _logger.error(\"Test Failed due to:\" + jmse);\n+                }\n+            }\n+        }\n+        catch (Exception e)\n+        {\n+            _logger.error(\"Test Failed due to:\" + e);\n+        }\n+    }\n+\n+    public static void main(String args[])\n+    {\n+        noDelay();\n+\n+\n+        try\n+        {\n+            System.out.println(\"Restart failed broker now to retest broker with delays in send.\");\n+            System.in.read();\n+        }\n+        catch (IOException e)\n+        {\n+            _logger.info(\"Continuing\");\n+        }\n+\n+        withDelay();\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/systests/src/main/java/org/apache/qpid/server/failure/HeapExhaustion.java",
                "sha": "52eb5414ff899e0a1344e8fb24332a9d8c62096e",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/MockProtocolSession.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/MockProtocolSession.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 2,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/queue/MockProtocolSession.java",
                "patch": "@@ -35,6 +35,7 @@\n import javax.security.sasl.SaslServer;\n import java.util.HashMap;\n import java.util.Map;\n+import java.security.Principal;\n \n /**\n  * A protocol session that can be used for testing purposes.\n@@ -177,12 +178,12 @@ public ProtocolOutputConverter getProtocolOutputConverter()\n         return ProtocolOutputConverterRegistry.getConverter(this);\n     }\n \n-    public void setAuthorizedID(String authorizedID)\n+    public void setAuthorizedID(Principal authorizedID)\n     {\n         //To change body of implemented methods use File | Settings | File Templates.\n     }\n \n-    public String getAuthorizedID()\n+    public Principal getAuthorizedID()\n     {\n         return null;  //To change body of implemented methods use File | Settings | File Templates.\n     }",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/MockProtocolSession.java",
                "sha": "0ad6502755eea0c54ba3b0302243e463da3813d6",
                "status": "modified"
            },
            {
                "additions": 276,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/PersistentTest.java",
                "changes": 276,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/PersistentTest.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/server/queue/PersistentTest.java",
                "patch": "@@ -0,0 +1,276 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.queue;\n+\n+import org.apache.qpid.client.AMQConnection;\n+import org.apache.qpid.client.AMQSession;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.AMQChannelClosedException;\n+import org.apache.qpid.AMQConnectionClosedException;\n+import org.apache.qpid.util.CommandLineParser;\n+import org.apache.qpid.url.URLSyntaxException;\n+import org.apache.log4j.Logger;\n+\n+import javax.jms.Session;\n+import javax.jms.JMSException;\n+import javax.jms.Queue;\n+import javax.jms.MessageProducer;\n+import javax.jms.TextMessage;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+public class PersistentTest\n+{\n+    private static final Logger _logger = Logger.getLogger(PersistentTest.class);\n+\n+\n+    private static final String QUEUE = \"direct://amq.direct//PersistentTest-Queue2?durable='true',exclusive='true'\";\n+\n+    protected AMQConnection _connection;\n+\n+    protected Session _session;\n+\n+    protected Queue _queue;\n+    private Properties properties;\n+\n+    private String _brokerDetails;\n+    private String _username;\n+    private String _password;\n+    private String _virtualpath;\n+\n+    public PersistentTest(Properties overrides)\n+    {\n+        properties = new Properties(defaults);\n+        properties.putAll(overrides);\n+\n+        _brokerDetails = properties.getProperty(BROKER_PROPNAME);\n+        _username = properties.getProperty(USERNAME_PROPNAME);\n+        _password = properties.getProperty(PASSWORD_PROPNAME);\n+        _virtualpath = properties.getProperty(VIRTUAL_HOST_PROPNAME);\n+\n+        createConnection();\n+    }\n+\n+    protected void createConnection()\n+    {\n+        try\n+        {\n+            _connection = new AMQConnection(_brokerDetails, _username, _password, \"PersistentTest\", _virtualpath);\n+\n+            _session = _connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\n+            _connection.start();\n+        }\n+        catch (Exception e)\n+        {\n+            _logger.error(\"Unable to create test class due to:\" + e.getMessage(), e);\n+            System.exit(0);\n+        }\n+    }\n+\n+    public void test() throws AMQException, URLSyntaxException\n+    {\n+\n+        //Create the Durable Queue\n+        try\n+        {\n+            _session.createConsumer(_session.createQueue(QUEUE)).close();\n+        }\n+        catch (JMSException e)\n+        {\n+            _logger.error(\"Unable to create Queue due to:\" + e.getMessage(), e);\n+            System.exit(0);\n+        }\n+\n+        try\n+        {\n+            if (testQueue())\n+            {\n+                // close connection\n+                _connection.close();\n+                // wait\n+                System.out.println(\"Restart Broker Now\");\n+                try\n+                {\n+                    System.in.read();\n+                }\n+                catch (IOException e)\n+                {\n+                    //\n+                }\n+                finally\n+                {\n+                    System.out.println(\"Continuing....\");\n+                }\n+\n+                //Test queue is still there.\n+                AMQConnection connection = new AMQConnection(_brokerDetails, _username, _password, \"DifferentClientID\", _virtualpath);\n+\n+                AMQSession session = (AMQSession) connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\n+                try\n+                {\n+                    session.createConsumer(session.createQueue(QUEUE));\n+                    _logger.error(\"Create consumer succeeded.\" +\n+                                  \" This shouldn't be allowed as this means the queue didn't exist when it should\");\n+\n+                    connection.close();\n+\n+                    exit();\n+                }\n+                catch (JMSException e)\n+                {\n+                    try\n+                    {\n+                        connection.close();\n+                    }\n+                    catch (JMSException cce)\n+                    {\n+                        if (cce.getLinkedException() instanceof AMQConnectionClosedException)\n+                        {\n+                            _logger.error(\"Channel Close Bug still present QPID-432, should see an 'Error closing session'\");\n+                        }\n+                        else\n+                        {\n+                            exit(cce);\n+                        }\n+                    }\n+\n+                    if (e.getLinkedException() instanceof AMQChannelClosedException)\n+                    {\n+                        _logger.info(\"AMQChannelClosedException received as expected\");\n+                    }\n+                    else\n+                    {\n+                        exit(e);\n+                    }\n+                }\n+            }\n+        }\n+        catch (JMSException e)\n+        {\n+            _logger.error(\"Unable to test Queue due to:\" + e.getMessage(), e);\n+            System.exit(0);\n+        }\n+    }\n+\n+    private void exit(JMSException e)\n+    {\n+        _logger.error(\"JMSException received:\" + e.getMessage());\n+        e.printStackTrace();\n+        exit();\n+    }\n+\n+    private void exit()\n+    {\n+        try\n+        {\n+            _connection.close();\n+        }\n+        catch (JMSException e)\n+        {\n+            //\n+        }\n+        System.exit(0);\n+    }\n+\n+    private boolean testQueue() throws JMSException\n+    {\n+        String TEST_TEXT = \"init\";\n+\n+        //Create a new session to send producer\n+        Session session = _connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\n+        Queue q = session.createQueue(QUEUE);\n+        MessageProducer producer = session.createProducer(q);\n+\n+        producer.send(session.createTextMessage(TEST_TEXT));\n+\n+        //create a new consumer on the original session\n+        TextMessage m = (TextMessage) _session.createConsumer(q).receive();\n+\n+\n+        if ((m != null) && m.getText().equals(TEST_TEXT))\n+        {\n+            return true;\n+        }\n+        else\n+        {\n+            _logger.error(\"Incorrect values returned from Queue Test:\" + m);\n+            System.exit(0);\n+            return false;\n+        }\n+    }\n+\n+    /** Holds the name of the property to get the test broker url from. */\n+    public static final String BROKER_PROPNAME = \"broker\";\n+\n+    /** Holds the default broker url for the test. */\n+    public static final String BROKER_DEFAULT = \"tcp://localhost:5672\";\n+\n+    /** Holds the name of the property to get the test broker virtual path. */\n+    public static final String VIRTUAL_HOST_PROPNAME = \"virtualHost\";\n+\n+    /** Holds the default virtual path for the test. */\n+    public static final String VIRTUAL_HOST_DEFAULT = \"\";\n+\n+    /** Holds the name of the property to get the broker access username from. */\n+    public static final String USERNAME_PROPNAME = \"username\";\n+\n+    /** Holds the default broker log on username. */\n+    public static final String USERNAME_DEFAULT = \"guest\";\n+\n+    /** Holds the name of the property to get the broker access password from. */\n+    public static final String PASSWORD_PROPNAME = \"password\";\n+\n+    /** Holds the default broker log on password. */\n+    public static final String PASSWORD_DEFAULT = \"guest\";\n+\n+    /** Holds the default configuration properties. */\n+    public static Properties defaults = new Properties();\n+\n+    static\n+    {\n+        defaults.setProperty(BROKER_PROPNAME, BROKER_DEFAULT);\n+        defaults.setProperty(USERNAME_PROPNAME, USERNAME_DEFAULT);\n+        defaults.setProperty(PASSWORD_PROPNAME, PASSWORD_DEFAULT);\n+        defaults.setProperty(VIRTUAL_HOST_PROPNAME, VIRTUAL_HOST_DEFAULT);\n+    }\n+\n+    public static void main(String[] args)\n+    {\n+        PersistentTest test;\n+\n+        Properties options = CommandLineParser.processCommandLine(args, new CommandLineParser(new String[][]{}));\n+\n+\n+        test = new PersistentTest(options);\n+        try\n+        {\n+            test.test();\n+            System.out.println(\"Test was successfull.\");\n+        }\n+        catch (Exception e)\n+        {\n+            _logger.error(\"Unable to test due to:\" + e.getMessage(), e);\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/PersistentTest.java",
                "sha": "4ad10b68ff8ade455a4faa99a26e1b451f7ffa7f",
                "status": "added"
            },
            {
                "additions": 268,
                "blob_url": "https://github.com/apache/qpid/blob/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/systests/src/main/java/org/apache/qpid/testutil/QpidClientConnection.java",
                "changes": 268,
                "contents_url": "https://api.github.com/repos/apache/qpid/contents/qpid/java/systests/src/main/java/org/apache/qpid/testutil/QpidClientConnection.java?ref=ffe5e29f94b376c6f5900b2f9577c8bbaef7407b",
                "deletions": 0,
                "filename": "qpid/java/systests/src/main/java/org/apache/qpid/testutil/QpidClientConnection.java",
                "patch": "@@ -0,0 +1,268 @@\n+package org.apache.qpid.testutil;\n+\n+import org.apache.qpid.client.AMQConnectionFactory;\n+import org.apache.qpid.client.AMQConnectionURL;\n+import org.apache.qpid.client.AMQConnection;\n+import org.apache.qpid.client.JMSAMQException;\n+import org.apache.qpid.url.URLSyntaxException;\n+import org.apache.log4j.Logger;\n+\n+import javax.jms.ExceptionListener;\n+import javax.jms.Session;\n+import javax.jms.Connection;\n+import javax.jms.JMSException;\n+import javax.jms.Queue;\n+import javax.jms.MessageProducer;\n+import javax.jms.Message;\n+import javax.jms.MessageConsumer;\n+import javax.jms.TextMessage;\n+\n+public class QpidClientConnection implements ExceptionListener\n+{\n+\n+    private static final Logger _logger = Logger.getLogger(QpidClientConnection.class);\n+\n+    private boolean transacted = true;\n+    private int ackMode = Session.CLIENT_ACKNOWLEDGE;\n+    private Connection connection;\n+\n+    private String virtualHost;\n+    private String brokerlist;\n+    private int prefetch;\n+    protected Session session;\n+    protected boolean connected;\n+\n+    public QpidClientConnection(String broker)\n+    {\n+        super();\n+        setVirtualHost(\"/test\");\n+        setBrokerList(broker);\n+        setPrefetch(5000);\n+    }\n+\n+\n+    public void connect() throws JMSException\n+    {\n+        if (!connected)\n+        {\n+            /*\n+            * amqp://[user:pass@][clientid]/virtualhost?\n+            * brokerlist='[transport://]host[:port][?option='value'[&option='value']];'\n+            * [&failover='method[?option='value'[&option='value']]']\n+            * [&option='value']\"\n+            */\n+            String brokerUrl = \"amqp://guest:guest@\" + virtualHost + \"?brokerlist='\" + brokerlist + \"'\";\n+            try\n+            {\n+                AMQConnectionFactory factory = new AMQConnectionFactory(new AMQConnectionURL(brokerUrl));\n+                _logger.info(\"connecting to Qpid :\" + brokerUrl);\n+                connection = factory.createConnection();\n+\n+                // register exception listener\n+                connection.setExceptionListener(this);\n+\n+                session = ((AMQConnection) connection).createSession(transacted, ackMode, prefetch);\n+\n+\n+                _logger.info(\"starting connection\");\n+                connection.start();\n+\n+                connected = true;\n+            }\n+            catch (URLSyntaxException e)\n+            {\n+                throw new JMSAMQException(\"URL syntax error in [\" + brokerUrl + \"]: \" + e.getMessage(), e);\n+            }\n+        }\n+    }\n+\n+    public void disconnect() throws JMSException\n+    {\n+        if (connected)\n+        {\n+            session.commit();\n+            session.close();\n+            connection.close();\n+            connected = false;\n+            _logger.info(\"disconnected\");\n+        }\n+    }\n+\n+    public void disconnectWithoutCommit() throws JMSException\n+    {\n+        if (connected)\n+        {\n+            session.close();\n+            connection.close();\n+            connected = false;\n+            _logger.info(\"disconnected without commit\");\n+        }\n+    }\n+\n+    public String getBrokerList()\n+    {\n+        return brokerlist;\n+    }\n+\n+    public void setBrokerList(String brokerlist)\n+    {\n+        this.brokerlist = brokerlist;\n+    }\n+\n+    public String getVirtualHost()\n+    {\n+        return virtualHost;\n+    }\n+\n+    public void setVirtualHost(String virtualHost)\n+    {\n+        this.virtualHost = virtualHost;\n+    }\n+\n+    public void setPrefetch(int prefetch)\n+    {\n+        this.prefetch = prefetch;\n+    }\n+\n+\n+    /** override as necessary */\n+    public void onException(JMSException exception)\n+    {\n+        _logger.info(\"ExceptionListener event: error \" + exception.getErrorCode() + \", message: \" + exception.getMessage());\n+    }\n+\n+    public boolean isConnected()\n+    {\n+        return connected;\n+    }\n+\n+    public Session getSession()\n+    {\n+        return session;\n+    }\n+\n+    /**\n+     * Put a String as a text messages, repeat n times. A null payload will result in a null message.\n+     *\n+     * @param queueName The queue name to put to\n+     * @param payload   the content of the payload\n+     * @param copies    the number of messages to put\n+     *\n+     * @throws javax.jms.JMSException any exception that occurs\n+     */\n+    public void put(String queueName, String payload, int copies) throws JMSException\n+    {\n+        if (!connected)\n+        {\n+            connect();\n+        }\n+\n+        _logger.info(\"putting to queue \" + queueName);\n+        Queue queue = session.createQueue(queueName);\n+\n+        final MessageProducer sender = session.createProducer(queue);\n+\n+        for (int i = 0; i < copies; i++)\n+        {\n+            Message m = session.createTextMessage(payload + i);\n+            m.setIntProperty(\"index\", i + 1);\n+            sender.send(m);\n+        }\n+\n+        session.commit();\n+        sender.close();\n+        _logger.info(\"put \" + copies + \" copies\");\n+    }\n+\n+    /**\n+     * GET the top message on a queue. Consumes the message. Accepts timeout value.\n+     *\n+     * @param queueName   The quename to get from\n+     * @param readTimeout The timeout to use\n+     *\n+     * @return the content of the text message if any\n+     *\n+     * @throws javax.jms.JMSException any exception that occured\n+     */\n+    public Message getNextMessage(String queueName, long readTimeout) throws JMSException\n+    {\n+        if (!connected)\n+        {\n+            connect();\n+        }\n+\n+        Queue queue = session.createQueue(queueName);\n+\n+        final MessageConsumer consumer = session.createConsumer(queue);\n+\n+        Message message = consumer.receive(readTimeout);\n+        session.commit();\n+        consumer.close();\n+\n+        Message result;\n+\n+        // all messages we consume should be TextMessages\n+        if (message instanceof TextMessage)\n+        {\n+            result = ((TextMessage) message);\n+        }\n+        else if (null == message)\n+        {\n+            result = null;\n+        }\n+        else\n+        {\n+            _logger.info(\"warning: received non-text message\");\n+            result = message;\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * GET the top message on a queue. Consumes the message.\n+     *\n+     * @param queueName The Queuename to get from\n+     *\n+     * @return The string content of the text message, if any received\n+     *\n+     * @throws javax.jms.JMSException any exception that occurs\n+     */\n+    public Message getNextMessage(String queueName) throws JMSException\n+    {\n+        return getNextMessage(queueName, 0);\n+    }\n+\n+    /**\n+     * Completely clears a queue. For readTimeout behaviour see Javadocs for javax.jms.MessageConsumer.\n+     *\n+     * @param queueName   The Queue name to consume from\n+     * @param readTimeout The timeout for each consume\n+     *\n+     * @throws javax.jms.JMSException Any exception that occurs during the consume\n+     * @throws InterruptedException   If the consume thread was interrupted during a consume.\n+     */\n+    public void consume(String queueName, int readTimeout) throws JMSException, InterruptedException\n+    {\n+        if (!connected)\n+        {\n+            connect();\n+        }\n+\n+        _logger.info(\"consuming queue \" + queueName);\n+        Queue queue = session.createQueue(queueName);\n+\n+        final MessageConsumer consumer = session.createConsumer(queue);\n+        int messagesReceived = 0;\n+\n+        _logger.info(\"consuming...\");\n+        while ((consumer.receive(readTimeout)) != null)\n+        {\n+            messagesReceived++;\n+        }\n+\n+        session.commit();\n+        consumer.close();\n+        _logger.info(\"consumed: \" + messagesReceived);\n+    }\n+}",
                "raw_url": "https://github.com/apache/qpid/raw/ffe5e29f94b376c6f5900b2f9577c8bbaef7407b/qpid/java/systests/src/main/java/org/apache/qpid/testutil/QpidClientConnection.java",
                "sha": "80773c102d7b6b9ab359c2184c52e4601ccf5958",
                "status": "added"
            }
        ],
        "message": "Merged revisions 1-447993,447995-448007,448009-448141,448143-448157,448161-448194,448196-448210,448212-448218,448220-448223,448225-448233,448235,448237-448241,448243-448596,448598-448623,448625-448850,448852-448880,448882-448982,448984-449635,449637-449639,449641-449642,449644-449645,449647-449674,449676-449719,449721-449749,449751-449762,449764-449933,449935-449941,449943-450383,450385,450387-450400,450402-450433,450435-450503,450505-450555,450557-450860,450862-451024,451026-451149,451151-451316,451318-451931,451933-452139,452141-452162,452164-452320,452322,452324-452325,452327-452333,452335-452429,452431-452528,452530-452545,452547-453192,453194-453195,453197-453536,453538,453540-453656,453658-454676,454678-454735,454737,454739-454781,454783-462728,462730-462819,462821-462833,462835-462839,462841-463071,463073-463178,463180-463308,463310-463362,463364-463375,463377-463396,463398-463402,463404-463409,463411-463661,463663-463670,463672-463673,463675-464493,464495-464502,464504-464576,464578-464613,464615-464628,464630,464632-464866,464868-464899,464901-464942,464944-464949,464951-465004,465006-465016,465018-465053,465055-465165,465167-465321,465323-465406,465408-465427,465429-465431,465433-465548,465550-466044,466047-466075,466077,466079-466081,466083-466099,466101-466112,466114-466126,466128-466240,466242-466971,466973-466978,466980-467309,467311-467312,467316-467328,467330-467485,467487-467588,467590-467604,467606-467699,467701-467706,467708-467749,467751-468069,468071-468537,468539-469241,469244-469246,469248-469318,469320-469421,469423,469425-469429,469431-469435,469437-469462,469464-469469,469472-469477,469479-469490,469492-469503,469505-469529,469531-469598,469600-469624,469626-469737,469739-469752,469754-469806,469808-469928,469930-469953,469955-470011,470013-470109,470111-470335,470338-470339,470341-470379,470381,470383-470399,470401-470446,470448-470741,470743-470758,470760-470809,470811-470817,470819-470993,470995-471001,471003-471788,471790-471792,471794-472028,472030-472032,472034-472036,472038,472040,472043,472045-472059,472061,472063,472065-472066,472068,472070-472072,472074-472080,472082,472084-472092,472094-472107,472109-472123,472125-472158,472160-472165,472167-472172,472174-472457,472459-472460,472462-472464,472466-472470,472472-472483,472486-472491,472493-472494,472496-472497,472499,472501-472503,472505-472512,472514-472544,472546-472556,472558-472560,472562-472572,472574-472587,472589-472591,472593-472605,472607,472609-472731,472733-472786,472788-472843,472845-472849,472851-472859,472861-472878,472880-472903,472905,472907-472988,472990-472991,472993-473071,473073-473086,473088-473090,473093,473095-473096,473098-473106,473108-473110,473112-473185,473187-473260,473262,473268-473270,473275-473279,473281,473284-473287,473289-473295,473297-473306,473308-473330,473332-473335,473337,473339-473344,473346-473351,473353-473355,473357-473358,473361-473471,473473-473497,473499-473535,473537-473567,473569-473888,473890-474451,474454-474492,474494-474563,474565-474843,474845-474865,474867-474932,474934-475035,475037-475144,475146-475180,475182-475265,475267-475285,475287,475289-475293,475295-475296,475298-475302,475304-475631,475633-475649,475651-475748,475750-475752,475754-476107,476109-476302,476304-476413,476415-476430,476432-476700,476702-476868,476870-477147,477149-477213,477215-477263,477265-477340,477342-477635,477637-477789,477791-477825,477827-477841,477843,477846-477852,477854,477856,477858-477865,477867-477894,477896-478022,478024-478182,478184-478211,478213-478233,478235-478236,478238-478241,478243-478252,478254-478259,478261-478263,478265,478267-478269,478271-478286,478288-478342,478344-478379,478381-478412,478414-478443,478445-478636,478639-478658,478660-478821,478823-478853,478855-478922,478924-478962,478965-478974,478976-479029,479031-479049,479051-479210,479212-479214,479216-479407,479409-479415,479417-479425,479427-479559,479561-479639,479641-479676,479678-479685,479687-480030,480033-480086,480091-480093,480095-480118,480120-480139,480141,480143-480148,480150-480156,480158-480163,480165-480177,480179-480189,480191-480193,480195-480198,480200-480220,480222-480282,480284-480292,480294-480308,480310-480317,480320-480422,480424,480426-480581,480583-480656,480658-480692,480695-480702,480704,480706-480710,480712-480910,480913-480933,480935-480945,480947-480972,480974-480993,480995-481034,481036-481158,481161-481174,481176-481220,481222-481234,481236-481260,481263-481264,481266-481296,481298-481304,481306-481311,481313-481332,481334,481336-481380,481382-481441,481443-482144,482146-482180,482182-482193,482195-482232,482234-482236,482239,482241-482242,482244-482247,482250-482251,482253,482256-482261,482264-482288,482290-482364,482366,482368,482370-482554,482556,482558-482569,482572-482636,482638,482640-482696,482698-482722,482724-482732,482734-482771,482774-482957,482959-483045,483047-483105,483108,483110-483115,483117,483119-483127,483130-483134,483136-483148,483150-483158,483160-483164,483166-483178,483180-483391,483393-483400,483402-483403,483405-483418,483420-483421,483425-483436,483438-483470,483472-483502,483504-483558,483560-483599,483601-483637,483639-483644,483646-483659,483661-483670,483672-483878,483880-483910,483912-483915,483917-483940,483942,483944-483968,483970-483972,483974-483976,483978,483980-484612,484614-484657,484659-484693,484695-484718,484720-484842,484844-484847,484849-484986,484988-485019,485021-485489,485491-485544,485546-485591,485593,485595-485697,485699-485729,485731-485734,485736-485779,485781-485787,485789-485851,485853,485855-486007,486009,486011-486020,486022-486083,486085-486097,486099-486117,486120-486131,486133-486148,486150-486161,486163-486164,486166-486197,486199-486205,486208-486247,486249-486253,486256-486427,486429-486431,486433-486554,486556-486573,486575-486593,486595,486597-486609,486611-486619,486622,486625,486627-486641,486643-486645,486649-486687,486689-486721,486723-486730,486732-486746,486748-486759,486761,486763-486777,486779-486782,486784-486788,486790,486792,486794-486796,486798-487175,487178,487180-487213,487215,487217-487267,487269-487284,487286-487298,487300-487358,487360-487367,487369-487382,487384-487434,487436-487480,487482-487547,487549-487561,487563-487565,487567-487578,487580-487615,487617-487622,487624,487626,487628,487630-487635,487637-487703,487705-487777,487780-487781,487783-487800,487802-487803,487805-487820,487822-487848,487850-487902,487904-488103,488105-488133,488135-488158,488160-488163,488165-488187,488189-488216,488218-488248,488250-488278,488280,488282-488303,488305-488313,488315-488342,488344-488351,488353-488376,488378-488449,488451-488593,488595,488597-488623,488625-488700,488702-488704,488706-488710,488714,488716-488725,488727-488744,488746-488770,488772-488798,488800,488802-488807,488809,488811-488829,488831-488843,488845-488851,488853-489069,489071-489077,489079-489081,489084-489102,489104-489105,489107-489109,489111-489112,489114-489139,489141-489178,489181-489203,489205-489211,489213,489216-489329,489332-489402,489404-489417,489419-489421,489423-489643,489645-489690,489692-489703,489705-489714,489716-489747,489749-489753,489755-489803,489805-489904,489906-490372,490374-490504,490506-490604,490606-490707,490710-490733,490735-490871,490873-490984,490986-491028,491030,491032-491071,491073-491119,491121-491576,491578-491672,491674-491800,491802-491838,491840-491878,491880-492183,492185-492279,492281-492317,492319-492513,492515-492584,492586-492587,492589-492601,492603-492635,492637-492640,492642-492717,492719-492723,492725-492729,492731-492755,492757-492901,492903-492955,492957-492962,492964-492997,492999-493002,493004-493041,493043-493059,493062-493063,493065-493086,493088-493125,493127-493139,493141-493150,493152-493871,493873-494017,494019-494030,494032-494041,494043-494091,494093-494120,494122-494354,494356-494436,494438-494539,494541-494552,494554-494586,494588-494649,494651,494653-494654,494656-494657,494659-494764,494766-494768,494770-494796,494798-494799,494802,494804-494860,494862-494903,494905-494906,494908-495019,495021-495160,495162-495168,495171-495188,495190-495229,495231-495254,495256-495303,495305-495313,495315-495336,495338-495372,495374-495379,495381-495454,495457-495459,495462-495516,495518-495524,495526-495531,495533-495548,495551-495553,495555,495557-495558,495560,495562-495573,495575-495583,495585-495594,495596-495628,495630-495638,495640-495651,495653-495660,495662-495753,495755-496259,496261-496262,496264-496269,496271-496275,496277-496301,496303-496316,496318-496383,496385-496413,496415-496495,496497-496625,496627-496636,496638-496640,496642-496647,496650-496657,496659-496660,496663-496664,496666-496677,496679-496681,496683-496730,496732-496750,496752,496754-496784,496786-496832,496834-496840,496842-496990,496992-496995,496997-497340,497343-497351,497353-497403,497405-497424,497426-497438,497440-497481,497483-497497,497499-497765,497767-497769,497771-497775,497777-497778,497780,497782-497783,497785,497787-497812,497814-497871,497873-497877,497879-498573,498575-498588,498590,498592,498594-498636,498638-498669,498671-498686,498688-498689,498691-498719,498721-498964,498966-498969,498971-498973,498975-498982,498985-499035,499037-499040,499042,499044-499048,499050-499082,499084-499086,499088-499164,499167-499169,499171-499355,499357-499370,499372-499373,499375-499391,499393,499395-499425,499428,499430-499445,499447-499455,499457-499460,499462-499465,499467,499469-499489,499491-499492,499494-499531,499533-499562,499566-499627,499629-499715,499717-499732,499734-499755,499758-499763,499765-499780,499782-499795,499797-499802,499804-499844,499846,499848-499850,499852-499863,499865-499873,499875-499974,499976-499978,499980-500263,500265-500283,500285-500309,500311-501000,501002,501012-501057,501059-501095,501097-501390,501392-501410,501413-501447,501449-501454,501456,501458-501464,501466-501471,501473-501803,501805-501913,501915-501916,501918-501919,501921-501944,501946-502171,502173-502177,502181,502183-502247,502250-502252,502254-502260,502262-502267,502270,502272,502274-502575,502577-502609,502611-502619,502621-502626,502628-502654,502656-503592,503594-503603,503605-503608,503610-503636,503638-503645,503647-503705,503707-503789,503791-504024,504026-504111,504113-504506,504508-504735,504737-504863,504865-504867,504869-504914,504916-505241,505243-505254,505257-505267,505269-505354,505356-505891,505893-505971,505973-506400,506402-506404,506407-506438,506440-506516,506518-506541,506543-506966,506968-506971,506973-507095,507097-507108,507111-507454,507456,507459-507471,507473-507556,507558,507560-507581,507585-507594,507597,507599-507608,507610-507728,507730-507893,507895-507937,507940-508234,508236-508350,508352-508365,508367-508380,508383,508386-508415,508417-508648,508650-508941,508943-509146,509148-509171,509173-509175,509179-509201,509203-509207,509209-509215,509217-509222,509224-509477,509480-509627,509629-509634,509636-509641,509643-509736,509738-509931,509933-510059,510061-510075,510077-510158,510161-510896,510898-510938,510940-511388,511390-511922,511924-512287,512289-512698,512702-512813,512815-512817,512819-513359,513361-513370,513372-514702,514704-514886,514888-514902,514904-515126,515129-515141,515143-515516,515518-515534,515536-515538,515540-515648,515650-515651,515653-516070,516072-516411,516413-516448,516450,516452-517637,517639-517647,517649-517659,517661-517663,517665-517677,517679-517682,517684-517744,517746-518085,518087-518175,518177-518558,518560-518568,518571-518666,518668,518670-518699,518701-518987,518990-518992,518994-519908,519910-519932,519934-520414,520416-520842,520844-520937,520939-521362,521364-521792,521794-522462,522464-522527,522529-522534,522536-522566,522568-522993,522995-523244,523246-525530,525532,525534,525537-526149,526151-526682,526686-526713,526715-530399 via svnmerge from \nhttps://svn.apache.org/repos/asf/incubator/qpid/branches/M2\n\n........\n  r521682 | bhupendrab | 2007-03-23 11:50:55 +0000 (Fri, 23 Mar 2007) | 2 lines\n  \n  QPID-418 (merged from trunk)\n  svn merge -r521336:521345 https://svn.apache.org/repos/asf/incubator/qpid/trunk/qpid/java .\n........\n  r521705 | rgreig | 2007-03-23 12:44:14 +0000 (Fri, 23 Mar 2007) | 1 line\n  \n  Updates to performance tests.\n........\n  r521710 | ritchiem | 2007-03-23 12:59:18 +0000 (Fri, 23 Mar 2007) | 2 lines\n  \n  QPID-419 Access Control QPID-423 Authentication per virtualhost\n  Improved error handling when hostconfig is not specifed. Was NPE-ing\n........\n  r521715 | ritchiem | 2007-03-23 13:10:33 +0000 (Fri, 23 Mar 2007) | 2 lines\n  \n  QPID-423 Authentication per virtualhost\n  Improved error handling when hostconfig is not specifed. Was NPE-ing\n........\n  r521782 | bhupendrab | 2007-03-23 16:02:51 +0000 (Fri, 23 Mar 2007) | 1 line\n  \n  QPID-420 (merged from trunk)  And r518998:518999 and r520846:520850\n........\n  r522959 | ritchiem | 2007-03-27 16:39:51 +0100 (Tue, 27 Mar 2007) | 2 lines\n  \n  Updated assembly/bin.xml to include transient_config.xml persistent_config.xml \n........\n  r522961 | ritchiem | 2007-03-27 16:42:40 +0100 (Tue, 27 Mar 2007) | 1 line\n  \n  forgot to rename files after they had been copied\n........\n  r522967 | ritchiem | 2007-03-27 16:56:03 +0100 (Tue, 27 Mar 2007) | 1 line\n  \n  correctly renamed transient and persistent config files\n........\n  r522977 | ritchiem | 2007-03-27 17:06:15 +0100 (Tue, 27 Mar 2007) | 1 line\n  \n  updated config files\n........\n  r522981 | ritchiem | 2007-03-27 17:10:45 +0100 (Tue, 27 Mar 2007) | 1 line\n  \n  Added echo of progress and reduced timeout\n........\n  r522989 | ritchiem | 2007-03-27 17:33:04 +0100 (Tue, 27 Mar 2007) | 1 line\n  \n  fixed error where script wouldn't pickup running pids\n........\n  r522990 | ritchiem | 2007-03-27 17:36:34 +0100 (Tue, 27 Mar 2007) | 1 line\n  \n  Added additional logging and comments\n........\n  r522991 | ritchiem | 2007-03-27 17:37:17 +0100 (Tue, 27 Mar 2007) | 1 line\n  \n  Added additional  comments\n........\n  r523747 | rajith | 2007-03-29 16:32:56 +0100 (Thu, 29 Mar 2007) | 1 line\n  \n  Fix for setting the message id\n........\n  r524050 | rgreig | 2007-03-30 12:51:09 +0100 (Fri, 30 Mar 2007) | 1 line\n  \n  Removed excess logging to optimize performance.\n........\n  r524739 | ritchiem | 2007-04-02 08:29:06 +0100 (Mon, 02 Apr 2007) | 1 line\n  \n  Added BDB Test scripts and updated pom to contain same tests as were used in perftesting\n........\n  r524740 | ritchiem | 2007-04-02 08:47:29 +0100 (Mon, 02 Apr 2007) | 1 line\n  \n  Fixed error with passwordfile parameter\n........\n  r524743 | ritchiem | 2007-04-02 09:07:55 +0100 (Mon, 02 Apr 2007) | 1 line\n  \n  Added CTQ tests\n........\n  r524763 | ritchiem | 2007-04-02 11:50:06 +0100 (Mon, 02 Apr 2007) | 1 line\n  \n  Added verify password method to PrincipalDatabase\n........\n  r524765 | ritchiem | 2007-04-02 11:55:12 +0100 (Mon, 02 Apr 2007) | 1 line\n  \n  Moved broker details to a separate variable.\n........\n  r524767 | ritchiem | 2007-04-02 12:17:54 +0100 (Mon, 02 Apr 2007) | 1 line\n  \n  ignored idea files\n........\n  r525487 | ritchiem | 2007-04-04 11:42:59 +0100 (Wed, 04 Apr 2007) | 3 lines\n  \n  Added default timeout to AMQConnection.close();\n........\n  r525553 | ritchiem | 2007-04-04 17:34:35 +0100 (Wed, 04 Apr 2007) | 1 line\n  \n  Updated case of properties\n........\n  r525766 | ritchiem | 2007-04-05 09:51:55 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  QPID-308 Added test case to demonstrate heap exhaustion of broker. Can't be run InVM as it kills the broker.\n........\n  r525777 | ritchiem | 2007-04-05 10:29:22 +0100 (Thu, 05 Apr 2007) | 20 lines\n  \n  QPID-414 : Addition of CRAM-MD5-HASHED authentication. Same as CRAM-MD5 but the client uses the hash of the password rather than the original password. This allows the broker to store the hash not the original password.\n  \n  Added initial tool for generation passwords.\n  \n  Broker:\n  Renamed MD5PasswordFilePrincipalDatabase.java to Base64MD5PasswordFilePrincipalDatabase.java as that more accurately represents the file contents. \n  PlainPasswordVhostFilePrincipalDatabase.java - import tidy up\n  PrincipalDatabaseAuthenticationManager.java - Changed to add our SASL providers at the start of the SASL list.\n  CRAMMD5Hashed* - New SASL mechanism that delegates to CRAM-MD5 but understands that the password to use is the hash of the users password.\n  JCAProvider - Removed the addProvider() line as this is done after the construction in PrincipalDatabaseAuthenticationManager.\n  PlainSaslServerFactory - White Space\n  Passwd.java - New util stub for managing passwords ala htpasswd.\n  \n  Client\n  Added CRAM-MD5-HASHED to CallbackHandlerRegistry \n  Added ClientFactory for CRAMMD5Hashed that returns the first CRAM-MD5 SaslClient.\n  DynamicSaslRegistrar.java - Tidied imports added new JCAProviders at the start of the Sasl lists.\n  DynamicSaslRegistrar.properties - Added CRAM-MD5-HASHED handler.\n  JCAProvider.java - as with broker stopped JCAProvider.java adding itself as the DynamicSaslRegistrar.java does this on the client.\n  UsernameHashedPasswordCallbackHandler.java - New callback handler that is used by CRAM-MD5-HASHED. It hashes the client's password and uses that in the CRAM-MD5 algorithm.\n........\n  r525785 | ritchiem | 2007-04-05 10:48:43 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  Old ant folder\n........\n  r525786 | ritchiem | 2007-04-05 10:57:33 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  QPID-440 - added comments in the code relating to this bug.\n........\n  r525787 | ritchiem | 2007-04-05 10:58:20 +0100 (Thu, 05 Apr 2007) | 2 lines\n  \n  QPID-308 removed closeConnection() that calls close(-1) and may result in a client hang. better to call closeConnection(long timeout) so forced this my removing closeConnection();\n........\n  r525788 | ritchiem | 2007-04-05 11:00:56 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  QPID-414 update to config.xml to give usage example.\n........\n  r525804 | ritchiem | 2007-04-05 13:19:31 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  QPID-308 Updated HeapExhaustion to be able to be run from command line\n........\n  r525817 | ritchiem | 2007-04-05 14:14:50 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  Update to qpid stop scripts to properly check for existing broker instances and promptly stop them.\n........\n  r525829 | ritchiem | 2007-04-05 14:50:56 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  Updated scripts to work correctly under solaris and bash 2.0\n........\n  r525862 | rgodfrey | 2007-04-05 17:37:40 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  QPID-443 : Fix to transactionality of message publishing\n........\n  r525867 | ritchiem | 2007-04-05 17:47:59 +0100 (Thu, 05 Apr 2007) | 2 lines\n  \n  QPID-416 Provided simple update to Access Control via FileAccessManager to allow access rights for a virtualhost to be stored in a separate file.\n  Updated PrincipalDatabaseAccessManager to use the default AccessManager if the specified PrincipalDatabase is not an AccessManager.\n........\n  r526091 | ritchiem | 2007-04-06 09:21:01 +0100 (Fri, 06 Apr 2007) | 5 lines\n  \n  QPID-416 Update to Access control to allow simply read/write permissions per Virtual host.\n  access - updated file to have examples of access control.\n  AccessManager - Deprecated old isAuthorised method\n  Implemented new isAuthorized method on all AccessManagers\n........\n  r526113 | ritchiem | 2007-04-06 11:28:43 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  Updated case of properties to be true cammelCase and updated tests to run for a duration of 10 minutes rather than set message count. To provide better results for graphing.\n........\n  r526117 | ritchiem | 2007-04-06 11:42:11 +0100 (Fri, 06 Apr 2007) | 9 lines\n  \n  QPID-416 Update to Access control to allow simply read/write permissions per Virtual host.\n  access - updated file to have examples of access control.\n  Changed AMQProtocolSession to record an authorized Principal not just a String.\n   - Required \n  Added AccessRights files needed for VirtualHostAccess control.\n  \n  Updated ConnectionOpenMethodHandler to allow Principals with any access to connect not just read.\n  \n  UsernamePrincipal - Added a toString\n........\n  r526118 | rgodfrey | 2007-04-06 11:55:17 +0100 (Fri, 06 Apr 2007) | 1 line\n........\n  r526122 | ritchiem | 2007-04-06 12:26:06 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  removed pauses between batches\n........\n  r526154 | rgodfrey | 2007-04-06 14:24:46 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  QPID-443 : Fix to transactionality of message publishing\n........\n  r526157 | bhupendrab | 2007-04-06 14:32:56 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  QPID-444   : Enabling the Qpid to use SASL. jmxmp can be plugged into for SASL. Can be configured to use security. \n........\n  r526158 | ritchiem | 2007-04-06 14:34:52 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  Duplicate of BDB-Qpid.sh\n........\n  r526159 | bhupendrab | 2007-04-06 14:37:47 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  QPID-444  : adding jmxport, which is used when out of the box JMXAgent is not used\n........\n  r526166 | ritchiem | 2007-04-06 14:51:41 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  QPID-414 - Initial script to run the passwd gen. \n........\n  r526187 | bhupendrab | 2007-04-06 15:53:36 +0100 (Fri, 06 Apr 2007) | 2 lines\n  \n  QPID-444   : Enabling the SASL support. jmxmp can be plugged into for SASL.\n........\n  r526194 | rgreig | 2007-04-06 16:21:19 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  Added some ramping up performance tests.\n........\n  r526195 | marnie | 2007-04-06 16:21:33 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  QPID-381 Amended session constructor to be non-transactional and use client ack mode.\n........\n  r526198 | rgreig | 2007-04-06 16:26:02 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  Fixed message sizes.\n........\n  r526199 | rgreig | 2007-04-06 16:29:06 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  Fixed commit batch size.\n........\n  r526666 | ritchiem | 2007-04-09 08:47:14 +0100 (Mon, 09 Apr 2007) | 1 line\n  \n  Updated so the FileAppender includes time stamps by default.. ConversionPattern made the same as STDOUT and RollingFileAppender\n........\n  r526691 | ritchiem | 2007-04-09 10:39:47 +0100 (Mon, 09 Apr 2007) | 1 line\n  \n  Added $@ to allow pass through of command line args to each sub process\n........\n  r526692 | bhupendrab | 2007-04-09 10:45:06 +0100 (Mon, 09 Apr 2007) | 4 lines\n  \n  QPID-444   : added log statements and some config parameters.\n  Removed the autoDelete parameter from createNewQueue method used from Management Console.\n........\n  r526694 | bhupendrab | 2007-04-09 10:51:46 +0100 (Mon, 09 Apr 2007) | 1 line\n........\n  r526709 | bhupendrab | 2007-04-09 12:02:08 +0100 (Mon, 09 Apr 2007) | 2 lines\n  \n  QPID-444  : updated the management console dependency configuration for sasl support\n........\n  r526776 | rgreig | 2007-04-09 16:26:04 +0100 (Mon, 09 Apr 2007) | 1 line\n  \n  Stopped throwing away exception causes.\n........\n  r526803 | rgreig | 2007-04-09 17:09:24 +0100 (Mon, 09 Apr 2007) | 1 line\n  \n  Got rid of some uses of System.out instead of log4j logging.\n........\n  r526807 | rgreig | 2007-04-09 17:12:49 +0100 (Mon, 09 Apr 2007) | 1 line\n  \n  Got rid of some uses of System.out instead of log4j logging.\n........\n  r527049 | ritchiem | 2007-04-10 08:58:26 +0100 (Tue, 10 Apr 2007) | 1 line\n  \n  Moved bdb tests to bdbstore package\n........\n  r527050 | ritchiem | 2007-04-10 09:00:42 +0100 (Tue, 10 Apr 2007) | 1 line\n  \n  QueueDeclareHandler.java - Added more detail to error messages. Such as returning the queue name that was attempted to be declared but failed.\n........\n  r527053 | ritchiem | 2007-04-10 09:03:15 +0100 (Tue, 10 Apr 2007) | 1 line\n  \n  Added a test to check that Persistent Queues do actually persist.\n........\n  r527182 | ritchiem | 2007-04-10 17:29:47 +0100 (Tue, 10 Apr 2007) | 1 line\n  \n  QPID-446 Initial MBean framework.\n........\n  r527487 | ritchiem | 2007-04-11 14:31:18 +0100 (Wed, 11 Apr 2007) | 5 lines\n  \n  QPID-446  AMQUserManagementMBean Initial implementation of user management in authentication file.\n  UserManagement - Added annotations for MBeanOperations\n  PrincipalDatabase - Added new methods to update,create,delete Principal.\n   - Implemented method on all PrincipalDatabase implementations, most return false to say not complete except \n  Base64MD5PasswordFilePrincipalDatabase - which now stores in memory the password file and flushes any changes to disk.\n........\n  r527493 | ritchiem | 2007-04-11 14:50:40 +0100 (Wed, 11 Apr 2007) | 1 line\n  \n  QPID-446  Missed the commit of JMXManagedObjectRegistry change on verifyPassword char[] to String\n........\n  r527499 | bhupendrab | 2007-04-11 15:16:02 +0100 (Wed, 11 Apr 2007) | 1 line\n  \n  QPID-444  : added CRAM-MD5-HASHED mechanism for sasl\n........\n  r527509 | bhupendrab | 2007-04-11 15:47:22 +0100 (Wed, 11 Apr 2007) | 1 line\n........\n  r527518 | ritchiem | 2007-04-11 16:21:37 +0100 (Wed, 11 Apr 2007) | 14 lines\n  \n  QPID-446 \n  JMXManagedObjectRegistry - Split instantiation from starting up. To all the setting of the Access file when loaded later in the startup sequence.\n  ManagedObjectRegistry - Added Start method\n  MBeanInvocationHandlerImpl - Updated to allow the setting of the access properties object from the AMQUserManagementMBean\n  NoopManagedObjectRegistry - implemented no-op start\n  ConfigurationFileApplicationRegistry - Adjusted to split creation of ManagedObjectRegistry from starting server to allow the setting of access rights.\n  AMQUserManagementMBean - Implemented reading of access rights file.\n  Base64MD5PasswordFilePrincipalDatabase - added comment for future Management.\n  PrincipalDatabaseManager - added initialiseManagement method\n  ConfigurationFilePrincipalDatabaseManager - implemented general Management initialisation.\n  PropertiesPrincipalDatabaseManager - no-op implementation\n........\n  r527537 | ritchiem | 2007-04-11 16:47:30 +0100 (Wed, 11 Apr 2007) | 2 lines\n  \n  QPID-446 Update to contain jmx config settings.\n........\n  r527556 | bhupendrab | 2007-04-11 17:07:58 +0100 (Wed, 11 Apr 2007) | 1 line\n  \n  synchronized with hash mechanism used in Broker\n........\n  r527557 | ritchiem | 2007-04-11 17:08:54 +0100 (Wed, 11 Apr 2007) | 1 line\n  \n  Fixed Bug in convertPassword where data wasn't correctly updated PropertiesPrincipalDatabase, \n........\n  r527558 | ritchiem | 2007-04-11 17:09:54 +0100 (Wed, 11 Apr 2007) | 1 line\n  \n  QpiQPID-446 Update to ensure qpid.password file is correctly written in savePasswordFile\n........\n  r527803 | ritchiem | 2007-04-12 08:16:54 +0100 (Thu, 12 Apr 2007) | 5 lines\n  \n  QPID-446 Update to write accessRights file and correctly write Base64 MD5 Hashed password to password file.\n  MBeanInvocationHandlerImpl - made statics ADMIN,READONLY,READWRITE public so they can be used in writing the access file.\n  AMQUserManagementMBean - Update to write the access File.\n  PrincipalDatabase - create getUser(username) to retrieve a Principal from the database this is then implemented in all PDs. Used to check for existence of a user.\n........\n  r527843 | ritchiem | 2007-04-12 09:52:19 +0100 (Thu, 12 Apr 2007) | 10 lines\n  \n  QPID-446 Update to send userList to JMX Management console.\n  Currently niave implementation just sending ALL users in one go. If a LDAPPrincipalDatabase was created this could be quite a lot of data a) to send but b) to create in broker Heap.\n  PrincipalDatabase - javadoc'd and getUsers method, \n   -changed verifyPassword method to take String for username rather than Principal only the Managment Console uses this method and it the MC should be changed to use the Broker SASL modules directly rather than having very similar ones of its own.\n   - Removed AccountNotFound exception from createPrincipal as it made no sence\n  No-op implementation in PlainPasswordFilePrincipalDatabase and PropertiesPrincipalDatabase\n  Base64MD5PasswordFilePrincipalDatabase changed local User class to implement Principal so current Map can be returned via getUsers\n   - Added locking to ensure integrity of files in the face of multiple edits.\n........\n  r527848 | ritchiem | 2007-04-12 10:11:19 +0100 (Thu, 12 Apr 2007) | 1 line\n  \n  QPID-446 Removed hashing of presented password in Base64MD5PasswordFilePrincipalDatabase. \n........\n  r527876 | rgodfrey | 2007-04-12 11:31:51 +0100 (Thu, 12 Apr 2007) | 3 lines\n  \n  QPID-451 Throw InvalidDestinationException on attempt to publish to a Queue which does not exist\n  Changed QueueSenderAdapter to check if the routing key is bound to a queue on the given exchange.\n  The checking can be turned off by setting the system property org.apache.qpid.client.verifyQueueBindingBeforePublish to anything but true\n........\n  r527941 | bhupendrab | 2007-04-12 14:49:10 +0100 (Thu, 12 Apr 2007) | 1 line\n  \n  not needed for management console\n........\n  r527959 | bhupendrab | 2007-04-12 15:40:36 +0100 (Thu, 12 Apr 2007) | 1 line\n  \n  refining the mbean operations\n........\n  r527972 | ritchiem | 2007-04-12 16:11:16 +0100 (Thu, 12 Apr 2007) | 3 lines\n  \n  QPID-446\n  Updated sample configs to contain jmx security options.\n........\n  r528003 | marnie | 2007-04-12 17:15:48 +0100 (Thu, 12 Apr 2007) | 1 line\n  \n  QPID-352 Changes\n........\n  r528005 | marnie | 2007-04-12 17:16:34 +0100 (Thu, 12 Apr 2007) | 1 line\n  \n  QPID-352 Changes\n........\n  r528424 | rgreig | 2007-04-13 11:17:12 +0100 (Fri, 13 Apr 2007) | 1 line\n  \n  Created new ping client that sends messages only. Usefull for examaning known queue states in mgmnt console.\n........\n  r529233 | bhupendrab | 2007-04-16 14:25:58 +0100 (Mon, 16 Apr 2007) | 1 line\n  \n  added parameter for SASL\n........\n  r529246 | bhupendrab | 2007-04-16 14:48:31 +0100 (Mon, 16 Apr 2007) | 1 line\n  \n  removed default username as guest. Added hashing for new user password field. \n........\n  r529297 | rgodfrey | 2007-04-16 16:53:45 +0100 (Mon, 16 Apr 2007) | 1 line\n  \n  QPID-453 : AMQShortString should implement Comparable\n........\n  r529635 | bhupendrab | 2007-04-17 16:07:06 +0100 (Tue, 17 Apr 2007) | 1 line\n  \n  QPID-422 : Combined all user configured notifications on one view.\n........\n  r529659 | ritchiem | 2007-04-17 17:08:00 +0100 (Tue, 17 Apr 2007) | 7 lines\n  \n  QPID-454 Message 'taken' notion is per message. But should be per message per queue\n  AMQChannel - pass queue in on all take/release/getSubscriptionDelievered calls\n  BasicRejectMethodHandler - pass queue in on getSubscriptionDelievered calls\n  AMQMessage - Changes to require AMQQueue on all take/release/getSubscriptionDelievered calls\n  ConcurrentSelectorDeliveryManager - pass queue in on take/release/getSubscriptionDelievered calls\n  SubscriptionImpl - - pass queue in on release calls\n........\n  r529666 | ritchiem | 2007-04-17 17:19:59 +0100 (Tue, 17 Apr 2007) | 11 lines\n  \n  QPID-455 Prefetched messages can cause problems with client tools.\n  AMQSession - suspend channel at startup until start() and recieve/setMessageListener are called.\n  BasicMessageConsumer - mainly style sheet changes\n  MessageListenerMultiConsumerTest - removed one test case as we cannot ensure round-robin effect at start up .. added test case for only c2 consuming when c1 does nothing.\n  MessageListenerTest - added new test that can demonstrate a further bug of message 'loss' when a receive is called only once before a message listener is set. Prefetched message end up on _SynchronousQueue regression of QPID-293 as of r501004.\n  MessageRequeueTest - Was missing a conn.start()\n  DurableSubscriptionTest - Removed blocking receives() so we don't block on failure\n  CommitRollbackTest - Text message was wrong on testGetThenDisconnect tests so adjusted\n........\n  r529669 | bhupendrab | 2007-04-17 17:43:53 +0100 (Tue, 17 Apr 2007) | 1 line\n  \n  QPID-417\n........\n  r530034 | bhupendrab | 2007-04-18 15:32:02 +0100 (Wed, 18 Apr 2007) | 2 lines\n  \n  AMQUserManagementMBean.java - calling relaod within viewUsers method.\n  Creating user list on management console instead of typing the user name.\n........\n  r530037 | ritchiem | 2007-04-18 15:37:30 +0100 (Wed, 18 Apr 2007) | 1 line\n  \n  QPID-454 Message 'taken' notion is per message. REVERTED as it just wasn't right.. needs to be refactored.\n........\n  r530041 | ritchiem | 2007-04-18 15:40:47 +0100 (Wed, 18 Apr 2007) | 1 line\n  \n  QPID-457 Fixed rollback inTran problem with test case\n........\n  r530042 | ritchiem | 2007-04-18 15:42:16 +0100 (Wed, 18 Apr 2007) | 1 line\n  \n  QPID-457 Fixed rollback inTran problem with test case Missed the actual file fix.\n........\n  r530043 | ritchiem | 2007-04-18 15:46:36 +0100 (Wed, 18 Apr 2007) | 1 line\n  \n  QPID-458 Fix to make the CSDM check if a message is taken when deliverying to browser. Removing the message from the queue and continuing if that is the caee.\n........\n  r530044 | ritchiem | 2007-04-18 15:54:36 +0100 (Wed, 18 Apr 2007) | 1 line\n  \n  Removed e.printstacktrace that sneaked in with the other code style changes.\n........\n  r530047 | ritchiem | 2007-04-18 16:09:28 +0100 (Wed, 18 Apr 2007) | 1 line\n  \n  Fix for intermittent CRT expected <1> but was <2> errors\n........\n  r530048 | ritchiem | 2007-04-18 16:10:24 +0100 (Wed, 18 Apr 2007) | 3 lines\n  \n  ResetMessageListenerTest was using the wrong queue for running tests. This was causing problems during testing.\n  \n  Changed queue to use ResetMessageListenerTest queue\n........\n  r530049 | ritchiem | 2007-04-18 16:11:22 +0100 (Wed, 18 Apr 2007) | 2 lines\n  \n  QPID-455 Prefetched messages can cause problems with client tools.\n  Removed the changes as this was causing problems. Guarded with a check for now but solution is till not correct.\n........\n  r530052 | ritchiem | 2007-04-18 16:12:45 +0100 (Wed, 18 Apr 2007) | 1 line\n  \n  QPID-455 - Guarded test with a check until a full solution is found\n........\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/qpid/trunk@530474 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/qpid/commit/c40abb2580b2da657249b74a202d75eaee3362e2",
        "patched_files": [
            "MockProtocolSession.java",
            "AMQBindingURL.java",
            "AccessRights.java",
            "Config.java",
            "PlainSaslServerFactory.java",
            "ReconnectServer.java",
            "CallbackHandlerRegistry.java",
            "CTQ-Qpid-4.java",
            "ConnectionOpenMethodHandler.java",
            "QueueSenderAdapter.java",
            "BasicMessageConsumer.java",
            "TopicPublisherAdapter.java",
            "CTQ-Qpid-2.java",
            "starpath.java",
            "MBeanView.java",
            "AMQBrokerManagerMBean.java",
            "SaslProvider.java",
            "AMQProtocolHandler.java",
            "config.java",
            "MANIFEST.java",
            "PlainPasswordVhostFilePrincipalDatabase.java",
            "MD5PasswordFilePrincipalDatabase.java",
            "ContentHeaderPropertiesFactory.java",
            "PoolingFilter.java",
            "CTQ-Qpid-5.java",
            "pom.java",
            "ServerRegistry.java",
            "ConfigurationFilePrincipalDatabaseManager.java",
            "UserPasswordCallbackHandler.java",
            "AMQVMBrokerCreationException.java",
            "UsernamePasswordInitialiser.java",
            "ConnectionStartOkMethodHandler.java",
            "ClientSaslFactory.java",
            "access.java",
            "QueueDeclareHandler.java",
            "BasicMessageProducer.java",
            "management-eclipse-plugin.java",
            "AMQNoTransportForProtocolException.java",
            "PropertiesPrincipalDatabase.java",
            "AMQQueueMBean.java",
            "AMQException.java",
            "NotificationsTabControl.java",
            "JCAProvider.java",
            "JMXServerRegistry.java",
            "NotificationObject.java",
            "QpidClientConnection.java",
            "CRAMMD5HashedSaslServer.java",
            "PrincipalDatabase.java",
            "JMXManagedObjectRegistry.java",
            "AMQProtocolSession.java",
            "Passwd.java",
            "InitialContextHelper.java",
            "ChannelCloseMethodHandler.java",
            "Base64MD5PasswordFilePrincipalDatabase.java",
            "AMQUserManagementMBean.java",
            "persistent_config.java",
            "qpid.java",
            "ManagedConnection.java",
            "SubscriptionImpl.java",
            "ClientListener.java",
            "AbstractJMSMessage.java",
            "FileMessageFactory.java",
            "AMQMessage.java",
            "PropertiesPrincipalDatabaseManager.java",
            "FileMessageDispatcher.java",
            "DestNameExchange.java",
            "ManagedBean.java",
            "bin.java",
            "PingSendOnlyClient.java",
            "AMQChannel.java",
            "EncodingUtils.java",
            "JMSObjectMessage.java",
            "TabControl.java",
            "AttributesTabControl.java",
            "PT-Qpid-14.java",
            "NavigationView.java",
            "AMQTransportConnectionException.java",
            "AccessManager.java",
            "Event.java",
            "PlainSaslClient.java",
            "CRAMMD5HashedSaslClientFactory.java",
            "JMSAMQException.java",
            "AccessManagerImpl.java",
            "TreeObject.java",
            "AMQShortString.java",
            "BDB-Qpid-4.java",
            "VersionSpecificRegistry.java",
            "PlainPasswordFilePrincipalDatabase.java",
            "Perspective.java",
            "CTQ-Qpid-3.java",
            "PropertyException.java",
            "UsernamePrincipal.java",
            "URLHelper.java",
            "AbstractBytesMessage.java",
            "AMQMinaProtocolSession.java",
            "AMQFrameDecodingException.java",
            "CRAMMD5HashedServerFactory.java",
            "ManagedBroker.java",
            "AMQProtocolSessionMBean.java",
            "OperationTabControl.java",
            "CleanupMessageOperation.java",
            "transient_config.java",
            "CTQ-Qpid-6.java",
            "JMSHeaderAdapter.java",
            "FailoverPolicy.java",
            "qpidmc.java",
            "passwd.java",
            "AbstractConfig.java",
            "PingAsyncTestPerf.java",
            "nopermission.java",
            "Main.java",
            "AddServer.java",
            "qpid-run.java",
            "UserManagement.java",
            "VHNotificationsTabControl.java",
            "JBossConnectionFactoryInitialiser.java",
            "BasicRejectMethodHandler.java",
            "AMQConnectionURL.java",
            "AMQDestination.java",
            "TxnBuffer.java",
            "DynamicSaslRegistrar.java",
            "ConnectionSecureOkMethodHandler.java",
            "log4j.java",
            "MBeanUtility.java",
            "DenyAll.java",
            "jmxremote.java",
            "BasicContentHeaderProperties.java",
            "PrincipalDatabaseAuthenticationManager.java",
            "noneexistantpath.java",
            "AMQSession.java",
            "FileAccessManager.java",
            "PrincipalDatabaseManager.java",
            "NoopManagedObjectRegistry.java",
            "TransportConnection.java",
            "ManagedObjectRegistry.java",
            "HeapExhaustion.java",
            "filepath.java",
            "PingDurableClient.java",
            "CRAMMD5HashedInitialiser.java",
            "LocalTransactionalContext.java",
            "VirtualHostAccess.java",
            "device.java",
            "ApplicationWorkbenchWindowAdvisor.java",
            "ConcurrentSelectorDeliveryManager.java",
            "AllowAll.java",
            "OperationData.java",
            "BDB-Qpid.java",
            "PT-Qpid-13.java",
            "ApplicationRegistry.java",
            "CTQ-Qpid-1.java",
            "UsernameHashedPasswordCallbackHandler.java",
            "ViewUtility.java",
            "qpid-server.java",
            "broker-bin.java",
            "ConfigurationFileApplicationRegistry.java",
            "AMQDataBlockDecoder.java",
            "AMQConnection.java",
            "MBeanInvocationHandlerImpl.java",
            "PingPongProducer.java",
            "Constants.java",
            "VirtualHost.java",
            "PrincipalDatabaseAccessManager.java"
        ],
        "repo": "qpid",
        "unit_tests": [
            "CommitRollbackTest.java",
            "ResetMessageListenerTest.java",
            "MessageListenerMultiConsumerTest.java",
            "InvalidDestinationTest.java",
            "MessageListenerTest.java",
            "PersistentTest.java",
            "AMQBrokerManagerMBeanTest.java",
            "MessageRequeueTest.java",
            "TestMessageFactory.java",
            "AMQQueueAlertTest.java",
            "DurableSubscriptionTest.java"
        ]
    }
}