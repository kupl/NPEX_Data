[
    {
        "commit": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/7114133f465b608337550aa64a189cf15aa8967f",
        "file": [
            {
                "patch": "@@ -293,13 +293,19 @@ private ScriptEngineManager getInternalScriptEngineManager() {\n \n     private void registerAssociations(ScriptEngineFactory factory) {\n         for (String extension : factory.getExtensions()) {\n-            internalManager.registerEngineExtension(extension, factory);\n+            if (extension != null && !extension.isEmpty()) {\n+                internalManager.registerEngineExtension(extension, factory);\n+            }\n         }\n         for (String mimeType : factory.getMimeTypes()) {\n-            internalManager.registerEngineMimeType(mimeType, factory);\n+            if (mimeType != null && !mimeType.isEmpty()) {\n+                internalManager.registerEngineMimeType(mimeType, factory);\n+            }\n         }\n         for (String name : factory.getNames()) {\n-            internalManager.registerEngineName(name, factory);\n+            if (name != null && !name.isEmpty()) {\n+                internalManager.registerEngineName(name, factory);\n+            }\n         }\n     }\n ",
                "additions": 9,
                "raw_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/raw/7114133f465b608337550aa64a189cf15aa8967f/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "status": "modified",
                "changes": 12,
                "deletions": 3,
                "sha": "b5f800ab007d6b1e5deb620c8890229022880798",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/blob/7114133f465b608337550aa64a189cf15aa8967f/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "filename": "src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-scripting-core/contents/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java?ref=7114133f465b608337550aa64a189cf15aa8967f"
            },
            {
                "patch": "@@ -72,15 +72,20 @@ public void setUp() {\n \n     @Test\n     public void testPlatformScriptEngines() {\n+        int jvmProvidedScriptEngineFactoryCount = jvmProvidedScriptEngineFactoryCount();\n         ScriptEngineManager scriptEngineManager = context.getService(ScriptEngineManager.class);\n         assertNotNull(\"Expected a ScriptEngineManager would be already registered.\", scriptEngineManager);\n-        assertEquals(\"The ScriptEngineManager should have had 1 ScriptEngineFactory registered.\", 1, scriptEngineManager\n-                .getEngineFactories().size());\n+        {\n+            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount;\n+            assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactory registered.\", expectedScriptEngineFactories, scriptEngineManager\n+                    .getEngineFactories().size());\n+        }\n     }\n \n     @Test\n     public void testOSGiRegisteredFactoriesDifferentServiceRanking() throws Exception {\n-        int expectedEvents = 3;\n+        int jvmProvidedScriptEngineFactoryCount = jvmProvidedScriptEngineFactoryCount();\n+        int expectedEvents = jvmProvidedScriptEngineFactoryCount + 1;\n         CountDownLatch latch = new CountDownLatch(expectedEvents);\n         TestEventHandler eventHandler = new TestEventHandler\n                 (latch, \"org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager/UPDATED\");\n@@ -108,18 +113,24 @@ public void testOSGiRegisteredFactoriesDifferentServiceRanking() throws Exceptio\n         ScriptEngineManager scriptEngineManager = context.getService(ScriptEngineManager.class);\n         assertNotNull(\"Expected a ScriptEngineManager would be already registered.\", scriptEngineManager);\n         List<ScriptEngineFactory> factories = scriptEngineManager.getEngineFactories();\n-        assertEquals(\"The ScriptEngineManager should have had 3 ScriptEngineFactories registered.\", 3, factories.size());\n-        assertEquals(f1.getEngineName(), factories.get(2).getEngineName());\n-        assertEquals(f2.getEngineName(), factories.get(1).getEngineName());\n+        {\n+            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount + 2;\n+            assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactories registered.\", expectedScriptEngineFactories, factories.size());\n+        }\n+        assertEquals(f1.getEngineName(), factories.get(jvmProvidedScriptEngineFactoryCount + 1).getEngineName());\n+        assertEquals(f2.getEngineName(), factories.get(jvmProvidedScriptEngineFactoryCount).getEngineName());\n \n         SlingScriptEngineManager slingScriptEngineManager = context.getService(SlingScriptEngineManager.class);\n         assertEquals(2, slingScriptEngineManager.getProperties(f1).get(Constants.SERVICE_RANKING));\n \n         f1SR.unregister();\n \n         factories = scriptEngineManager.getEngineFactories();\n-        assertEquals(\"The ScriptEngineManager should have had 2 ScriptEngineFactories registered.\", 2, factories.size());\n-        assertEquals(f2.getEngineName(), factories.get(1).getEngineName());\n+        {\n+            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount + 1;\n+            assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactories registered.\", expectedScriptEngineFactories, factories.size());\n+        }\n+        assertEquals(f2.getEngineName(), factories.get(jvmProvidedScriptEngineFactoryCount).getEngineName());\n \n         assertEquals(f2, scriptEngineManager.getEngineByName(\"f2\").getFactory());\n         assertEquals(f2, scriptEngineManager.getEngineByExtension(\"f2\").getFactory());\n@@ -138,6 +149,7 @@ public void testOSGiRegisteredFactoriesDifferentServiceRanking() throws Exceptio\n \n     @Test\n     public void testBundledScriptEngineFactory() throws Exception {\n+        int jvmProvidedScriptEngineFactoryCount = jvmProvidedScriptEngineFactoryCount();\n         final URL url = createFactoryFile().toURI().toURL();\n         Bundle bundle = mock(Bundle.class);\n         BundleWiring wiring = mock(BundleWiring.class);\n@@ -166,14 +178,20 @@ public void testBundledScriptEngineFactory() throws Exception {\n         assertNotNull(\"Expected that the SlingScriptEngineManager would already be registered.\", slingScriptEngineManager);\n         slingScriptEngineManager.bundleChanged(bundleEvent);\n         List<ScriptEngineFactory> factories = slingScriptEngineManager.getEngineFactories();\n-        assertEquals(\"Expected 2 ScriptEngineFactories.\", 2, factories.size());\n-        assertEquals(\"Dummy Scripting Engine\", factories.get(1).getEngineName());\n+        {\n+            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount + 1;\n+            assertEquals(\"Expected \" + expectedScriptEngineFactories + \" ScriptEngineFactories.\", expectedScriptEngineFactories, factories.size());\n+        }\n+        assertEquals(\"Dummy Scripting Engine\", factories.get(jvmProvidedScriptEngineFactoryCount).getEngineName());\n \n         bundleEvent = new BundleEvent(BundleEvent.STOPPED, bundle);\n         slingScriptEngineManager.bundleChanged(bundleEvent);\n         factories = slingScriptEngineManager.getEngineFactories();\n-        assertEquals(\"Expected 1 ScriptEngineFactory.\", 1, factories.size());\n-        assertEquals(\"Oracle Nashorn\", factories.get(0).getEngineName());\n+        {\n+            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount;\n+            assertEquals(\"Expected \" + expectedScriptEngineFactories + \" ScriptEngineFactory.\", expectedScriptEngineFactories, factories.size());\n+        }\n+        //assertEquals(\"Oracle Nashorn\", factories.get(0).getEngineName());\n         assertNull(\"Did not expect references to the already unregistered DummyScriptEngineFactory\", slingScriptEngineManager\n                 .getEngineByExtension(\"dummy\"));\n         assertNull(\"Did not expect references to the already unregistered DummyScriptEngineFactory\",\n@@ -182,6 +200,17 @@ public void testBundledScriptEngineFactory() throws Exception {\n                 slingScriptEngineManager.getEngineByName(\"Dummy\"));\n     }\n \n+    private int jvmProvidedScriptEngineFactoryCount() {\n+        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        try {\n+            Thread.currentThread().setContextClassLoader(null);\n+            return new ScriptEngineManager(ClassLoader.getSystemClassLoader()).getEngineFactories().size();\n+        }\n+        finally {\n+            Thread.currentThread().setContextClassLoader(loader);\n+        }\n+    }\n+\n     private ScriptEngineFactory mockScriptEngineFactory(String engineName, String engineVersion, List<String> extensions, String\n             languageName, String languageVersion, List<String> mimeTypes) {\n         ScriptEngineFactory factory = mock(ScriptEngineFactory.class);",
                "additions": 41,
                "raw_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/raw/7114133f465b608337550aa64a189cf15aa8967f/src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java",
                "status": "modified",
                "changes": 53,
                "deletions": 12,
                "sha": "e737ede420c72fd052fdc0b6f26986094ec744c8",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/blob/7114133f465b608337550aa64a189cf15aa8967f/src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java",
                "filename": "src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java",
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-scripting-core/contents/src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java?ref=7114133f465b608337550aa64a189cf15aa8967f"
            }
        ],
        "bug_id": "sling-org-apache-sling-scripting-core_1",
        "parent": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/8e32b80a6dcfa0ea32da7e7f9c40f9018033940f",
        "message": "SLING-8425 - NPE in SlingScriptEngineManager when Sling is run on GraalVM\n\n* fix NPE on GraalVM",
        "repo": "sling-org-apache-sling-scripting-core"
    },
    {
        "commit": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/1b5b0f13ac8190bb02be6c3bc6018e696e20b355",
        "file": [
            {
                "patch": "@@ -296,21 +296,21 @@ private void registerAssociations(ScriptEngineFactory factory) {\n             if (extension != null && !extension.isEmpty()) {\n                 internalManager.registerEngineExtension(extension, factory);\n             } else {\n-                LOG.warn(\"Could not register an empty or null extension for script engine factory {}\", factory.getEngineName());\n+                LOG.warn(\"Could not register an empty or null extension for script engine factory {}.\", factory.getEngineName());\n             }\n         }\n         for (String mimeType : factory.getMimeTypes()) {\n             if (mimeType != null && !mimeType.isEmpty()) {\n                 internalManager.registerEngineMimeType(mimeType, factory);\n             } else {\n-                LOG.warn(\"Could not register an empty or null mime type for script engine factory {}\", factory.getEngineName());\n+                LOG.warn(\"Could not register an empty or null mime type for script engine factory {}.\", factory.getEngineName());\n             }\n         }\n         for (String name : factory.getNames()) {\n             if (name != null && !name.isEmpty()) {\n                 internalManager.registerEngineName(name, factory);\n             } else {\n-                LOG.warn(\"Could not register an empty or null engine name for script engine factory {}\", factory.getEngineName());\n+                LOG.warn(\"Could not register an empty or null engine name for script engine factory {}.\", factory.getEngineName());\n             }\n         }\n     }",
                "additions": 3,
                "raw_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/raw/1b5b0f13ac8190bb02be6c3bc6018e696e20b355/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "14cb13a78d869b58d492c66053b8fead1e72f250",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/blob/1b5b0f13ac8190bb02be6c3bc6018e696e20b355/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "filename": "src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-scripting-core/contents/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java?ref=1b5b0f13ac8190bb02be6c3bc6018e696e20b355"
            },
            {
                "patch": "@@ -40,8 +40,6 @@\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n-import org.mockito.invocation.InvocationOnMock;\n-import org.mockito.stubbing.Answer;\n import org.osgi.framework.Bundle;\n import org.osgi.framework.BundleEvent;\n import org.osgi.framework.Constants;\n@@ -75,17 +73,15 @@ public void testPlatformScriptEngines() {\n         int jvmProvidedScriptEngineFactoryCount = jvmProvidedScriptEngineFactoryCount();\n         ScriptEngineManager scriptEngineManager = context.getService(ScriptEngineManager.class);\n         assertNotNull(\"Expected a ScriptEngineManager would be already registered.\", scriptEngineManager);\n-        {\n-            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount;\n-            assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactory registered.\", expectedScriptEngineFactories, scriptEngineManager\n-                    .getEngineFactories().size());\n-        }\n+        assertEquals(\"The ScriptEngineManager should have had \" + jvmProvidedScriptEngineFactoryCount + \" ScriptEngineFactory registered.\", jvmProvidedScriptEngineFactoryCount, scriptEngineManager.getEngineFactories().size());\n     }\n \n     @Test\n     public void testOSGiRegisteredFactoriesDifferentServiceRanking() throws Exception {\n+        int numberOfOSGiRegisteredFactories = 2;\n         int jvmProvidedScriptEngineFactoryCount = jvmProvidedScriptEngineFactoryCount();\n-        int expectedEvents = jvmProvidedScriptEngineFactoryCount + 1;\n+        // we register 2 factories, then unregister 1 of them\n+        int expectedEvents = 3;\n         CountDownLatch latch = new CountDownLatch(expectedEvents);\n         TestEventHandler eventHandler = new TestEventHandler\n                 (latch, \"org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager/UPDATED\");\n@@ -113,24 +109,20 @@ public void testOSGiRegisteredFactoriesDifferentServiceRanking() throws Exceptio\n         ScriptEngineManager scriptEngineManager = context.getService(ScriptEngineManager.class);\n         assertNotNull(\"Expected a ScriptEngineManager would be already registered.\", scriptEngineManager);\n         List<ScriptEngineFactory> factories = scriptEngineManager.getEngineFactories();\n-        {\n-            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount + 2;\n-            assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactories registered.\", expectedScriptEngineFactories, factories.size());\n-        }\n-        assertEquals(f1.getEngineName(), factories.get(jvmProvidedScriptEngineFactoryCount + 1).getEngineName());\n-        assertEquals(f2.getEngineName(), factories.get(jvmProvidedScriptEngineFactoryCount).getEngineName());\n+        int expectedScriptEngineFactories = numberOfOSGiRegisteredFactories + jvmProvidedScriptEngineFactoryCount;\n+        assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactories registered.\", expectedScriptEngineFactories, factories.size());\n+        assertEquals(f1.getEngineName(), factories.get(expectedScriptEngineFactories - 1).getEngineName());\n+        assertEquals(f2.getEngineName(), factories.get(expectedScriptEngineFactories - 2).getEngineName());\n \n         SlingScriptEngineManager slingScriptEngineManager = context.getService(SlingScriptEngineManager.class);\n         assertEquals(2, slingScriptEngineManager.getProperties(f1).get(Constants.SERVICE_RANKING));\n \n         f1SR.unregister();\n+        expectedScriptEngineFactories--;\n \n         factories = scriptEngineManager.getEngineFactories();\n-        {\n-            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount + 1;\n-            assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactories registered.\", expectedScriptEngineFactories, factories.size());\n-        }\n-        assertEquals(f2.getEngineName(), factories.get(jvmProvidedScriptEngineFactoryCount).getEngineName());\n+        assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactories registered.\", expectedScriptEngineFactories, factories.size());\n+        assertEquals(f2.getEngineName(), factories.get(expectedScriptEngineFactories - 1).getEngineName());\n \n         assertEquals(f2, scriptEngineManager.getEngineByName(\"f2\").getFactory());\n         assertEquals(f2, scriptEngineManager.getEngineByExtension(\"f2\").getFactory());\n@@ -178,20 +170,16 @@ public void testBundledScriptEngineFactory() throws Exception {\n         assertNotNull(\"Expected that the SlingScriptEngineManager would already be registered.\", slingScriptEngineManager);\n         slingScriptEngineManager.bundleChanged(bundleEvent);\n         List<ScriptEngineFactory> factories = slingScriptEngineManager.getEngineFactories();\n-        {\n-            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount + 1;\n-            assertEquals(\"Expected \" + expectedScriptEngineFactories + \" ScriptEngineFactories.\", expectedScriptEngineFactories, factories.size());\n-        }\n-        assertEquals(\"Dummy Scripting Engine\", factories.get(jvmProvidedScriptEngineFactoryCount).getEngineName());\n+        int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount + 1;\n+        assertEquals(\"Expected \" + expectedScriptEngineFactories + \" ScriptEngineFactories.\", expectedScriptEngineFactories, factories.size());\n+        assertEquals(\"Dummy Scripting Engine\", factories.get(expectedScriptEngineFactories - 1).getEngineName());\n \n         bundleEvent = new BundleEvent(BundleEvent.STOPPED, bundle);\n         slingScriptEngineManager.bundleChanged(bundleEvent);\n+        expectedScriptEngineFactories--;\n+\n         factories = slingScriptEngineManager.getEngineFactories();\n-        {\n-            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount;\n-            assertEquals(\"Expected \" + expectedScriptEngineFactories + \" ScriptEngineFactory.\", expectedScriptEngineFactories, factories.size());\n-        }\n-        //assertEquals(\"Oracle Nashorn\", factories.get(0).getEngineName());\n+        assertEquals(\"Expected \" + expectedScriptEngineFactories + \" ScriptEngineFactory.\", expectedScriptEngineFactories, factories.size());\n         assertNull(\"Did not expect references to the already unregistered DummyScriptEngineFactory\", slingScriptEngineManager\n                 .getEngineByExtension(\"dummy\"));\n         assertNull(\"Did not expect references to the already unregistered DummyScriptEngineFactory\",\n@@ -230,16 +218,9 @@ private ScriptEngineFactory mockScriptEngineFactory(String engineName, String en\n     private File createFactoryFile() throws IOException {\n         File tempFile = File.createTempFile(\"scriptEngine\", \"tmp\");\n         tempFile.deleteOnExit();\n-\n-        FileOutputStream fos = null;\n-        try {\n-            fos = new FileOutputStream(tempFile);\n+        try (FileOutputStream fos = new FileOutputStream(tempFile)) {\n             fos.write(\"#I'm a test-comment\\n\".getBytes());\n             fos.write(SCRIPT_ENGINE_FACTORY.getName().getBytes());\n-        } finally {\n-            if (fos != null) {\n-                fos.close();\n-            }\n         }\n         return tempFile;\n     }\n@@ -251,7 +232,7 @@ private File createFactoryFile() throws IOException {\n         CountDownLatch latch;\n         int processedEvents = 0;\n \n-        public TestEventHandler(CountDownLatch latch, String topic) {\n+        TestEventHandler(CountDownLatch latch, String topic) {\n             this.topic = topic;\n             this.latch = latch;\n         }",
                "additions": 19,
                "raw_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/raw/1b5b0f13ac8190bb02be6c3bc6018e696e20b355/src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java",
                "status": "modified",
                "changes": 57,
                "deletions": 38,
                "sha": "4f28324e7382f9c8ae428ea95fde6a686ee5ac59",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/blob/1b5b0f13ac8190bb02be6c3bc6018e696e20b355/src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java",
                "filename": "src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java",
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-scripting-core/contents/src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java?ref=1b5b0f13ac8190bb02be6c3bc6018e696e20b355"
            }
        ],
        "bug_id": "sling-org-apache-sling-scripting-core_2",
        "parent": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/11d59c1d8dba37fc4090057ca96b11f0853374a7",
        "message": "SLING-8425 - NPE in SlingScriptEngineManager when Sling is run on GraalVM\n\n* corrected SlingScriptEngineManagerTest.testOSGiRegisteredFactoriesDifferentServiceRanking",
        "repo": "sling-org-apache-sling-scripting-core"
    },
    {
        "commit": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/11d59c1d8dba37fc4090057ca96b11f0853374a7",
        "file": [
            {
                "patch": "@@ -295,16 +295,22 @@ private void registerAssociations(ScriptEngineFactory factory) {\n         for (String extension : factory.getExtensions()) {\n             if (extension != null && !extension.isEmpty()) {\n                 internalManager.registerEngineExtension(extension, factory);\n+            } else {\n+                LOG.warn(\"Could not register an empty or null extension for script engine factory {}\", factory.getEngineName());\n             }\n         }\n         for (String mimeType : factory.getMimeTypes()) {\n             if (mimeType != null && !mimeType.isEmpty()) {\n                 internalManager.registerEngineMimeType(mimeType, factory);\n+            } else {\n+                LOG.warn(\"Could not register an empty or null mime type for script engine factory {}\", factory.getEngineName());\n             }\n         }\n         for (String name : factory.getNames()) {\n             if (name != null && !name.isEmpty()) {\n                 internalManager.registerEngineName(name, factory);\n+            } else {\n+                LOG.warn(\"Could not register an empty or null engine name for script engine factory {}\", factory.getEngineName());\n             }\n         }\n     }",
                "additions": 6,
                "raw_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/raw/11d59c1d8dba37fc4090057ca96b11f0853374a7/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "status": "modified",
                "changes": 6,
                "deletions": 0,
                "sha": "fe7b425351a91c3f928ea46fa49fca0af194c746",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/blob/11d59c1d8dba37fc4090057ca96b11f0853374a7/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "filename": "src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-scripting-core/contents/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java?ref=11d59c1d8dba37fc4090057ca96b11f0853374a7"
            }
        ],
        "bug_id": "sling-org-apache-sling-scripting-core_3",
        "parent": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/7114133f465b608337550aa64a189cf15aa8967f",
        "message": "SLING-8425 - NPE in SlingScriptEngineManager when Sling is run on GraalVM\n\n* add else case/logging to the script engine registration loops",
        "repo": "sling-org-apache-sling-scripting-core"
    },
    {
        "commit": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/30e8f68fa0535d0446d244c3948773af3766baf5",
        "file": [
            {
                "patch": "@@ -248,7 +248,9 @@ private void configureCache() {\n                 resourceChangeListener = null;\n             }\n             internalMap.clear();\n-            extensions.addAll(Arrays.asList(additionalExtensions));\n+            if (additionalExtensions != null) {\n+                extensions.addAll(Arrays.asList(additionalExtensions));\n+            }\n             if (!extensions.isEmpty()) {\n                 Set<String> globPatterns = new HashSet<>(extensions.size());\n                 for (String extension : extensions) {",
                "additions": 3,
                "raw_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/raw/30e8f68fa0535d0446d244c3948773af3766baf5/src/main/java/org/apache/sling/scripting/core/impl/ScriptCacheImpl.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "091edad6c772a25640cac8248ff1973ee7cdb4cc",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/blob/30e8f68fa0535d0446d244c3948773af3766baf5/src/main/java/org/apache/sling/scripting/core/impl/ScriptCacheImpl.java",
                "filename": "src/main/java/org/apache/sling/scripting/core/impl/ScriptCacheImpl.java",
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-scripting-core/contents/src/main/java/org/apache/sling/scripting/core/impl/ScriptCacheImpl.java?ref=30e8f68fa0535d0446d244c3948773af3766baf5"
            }
        ],
        "bug_id": "sling-org-apache-sling-scripting-core_4",
        "parent": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/1bd9e9811757c2639c12a6ce52572dd2ffd38bd7",
        "message": "SLING-7301 NPE in ScriptCacheImpl when no configuration is present\n\nadd null-check for additionalExtensions",
        "repo": "sling-org-apache-sling-scripting-core"
    },
    {
        "commit": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/ce44fbf2153ff3902ba6a6894a0cbca7e3bb3f1a",
        "file": [
            {
                "patch": "@@ -19,9 +19,9 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import javax.script.Bindings;\n import javax.script.ScriptEngine;\n@@ -172,8 +172,8 @@ public String getExtension(String mimeType) {\n     protected void activate(ComponentContext context) {\n         this.bundleContext = context.getBundleContext();\n \n-        this.genericBindingsValuesProviders = new HashMap<Object, BindingsValuesProvider>();\n-        this.langBindingsValuesProviders = new HashMap<String, Map<Object, BindingsValuesProvider>>();\n+        this.genericBindingsValuesProviders = new ConcurrentHashMap<Object, BindingsValuesProvider>();\n+        this.langBindingsValuesProviders = new ConcurrentHashMap<String, Map<Object, BindingsValuesProvider>>();\n \n         ServiceTrackerCustomizer customizer = new BindingsValuesProviderCustomizer();\n \n@@ -208,10 +208,10 @@ protected void deactivate(ComponentContext context) {\n     }\n \n     private Collection<BindingsValuesProvider> getBindingsValuesProviders(ScriptEngineFactory scriptEngineFactory) {\n-        List<BindingsValuesProvider> results = new ArrayList<BindingsValuesProvider>();\n+        final List<BindingsValuesProvider> results = new ArrayList<BindingsValuesProvider>();\n         results.addAll(genericBindingsValuesProviders.values());\n-        for (String name : scriptEngineFactory.getNames()) {\n-            Map<Object, BindingsValuesProvider> langProviders = langBindingsValuesProviders.get(name);\n+        for (final String name : scriptEngineFactory.getNames()) {\n+            final Map<Object, BindingsValuesProvider> langProviders = langBindingsValuesProviders.get(name);\n             if (langProviders != null) {\n                 results.addAll(langProviders.values());\n             }\n@@ -222,33 +222,35 @@ protected void deactivate(ComponentContext context) {\n     private class BindingsValuesProviderCustomizer implements ServiceTrackerCustomizer {\n \n         @SuppressWarnings(\"unchecked\")\n-        public Object addingService(ServiceReference ref) {\n-            String engineName = (String) ref.getProperty(ScriptEngine.NAME);\n-            Object serviceId = ref.getProperty(Constants.SERVICE_ID);\n+        public Object addingService(final ServiceReference ref) {\n+            final String engineName = (String) ref.getProperty(ScriptEngine.NAME);\n+            final Object serviceId = ref.getProperty(Constants.SERVICE_ID);\n             Object service = bundleContext.getService(ref);\n-            if (service instanceof Map) {\n-                service = new MapWrappingBindingsValuesProvider((Map<String, Object>) service);\n-            }\n-            if (engineName == null || ANY_ENGINE.contains(engineName.toUpperCase())) {\n-                genericBindingsValuesProviders.put(serviceId, (BindingsValuesProvider) service);\n-            } else {\n-                Map<Object, BindingsValuesProvider> langProviders = langBindingsValuesProviders.get(engineName);\n-                if (langProviders == null) {\n-                    langProviders = new HashMap<Object, BindingsValuesProvider>();\n-                    langBindingsValuesProviders.put(engineName, langProviders);\n+            if ( service != null ) {\n+                if (service instanceof Map) {\n+                    service = new MapWrappingBindingsValuesProvider((Map<String, Object>) service);\n                 }\n+                if (engineName == null || ANY_ENGINE.contains(engineName.toUpperCase())) {\n+                    genericBindingsValuesProviders.put(serviceId, (BindingsValuesProvider) service);\n+                } else {\n+                    Map<Object, BindingsValuesProvider> langProviders = langBindingsValuesProviders.get(engineName);\n+                    if (langProviders == null) {\n+                        langProviders = new ConcurrentHashMap<Object, BindingsValuesProvider>();\n+                        langBindingsValuesProviders.put(engineName, langProviders);\n+                    }\n \n-                langProviders.put(serviceId, (BindingsValuesProvider) service);\n+                    langProviders.put(serviceId, (BindingsValuesProvider) service);\n+                }\n             }\n             return service;\n         }\n \n-        public void modifiedService(ServiceReference ref, Object service) {\n+        public void modifiedService(final ServiceReference ref, final Object service) {\n             removedService(ref, service);\n             addingService(ref);\n         }\n \n-        public void removedService(ServiceReference ref, Object service) {\n+        public void removedService(final ServiceReference ref, final Object service) {\n             Object serviceId = ref.getProperty(Constants.SERVICE_ID);\n             if (genericBindingsValuesProviders.remove(serviceId) == null) {\n                 for (Map<Object, BindingsValuesProvider> coll : langBindingsValuesProviders.values()) {",
                "additions": 24,
                "raw_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/raw/ce44fbf2153ff3902ba6a6894a0cbca7e3bb3f1a/src/main/java/org/apache/sling/scripting/core/impl/SlingScriptAdapterFactory.java",
                "status": "modified",
                "changes": 46,
                "deletions": 22,
                "sha": "aa3773824a0652d7e4207ccf58ed5fbeeb9e25a6",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/blob/ce44fbf2153ff3902ba6a6894a0cbca7e3bb3f1a/src/main/java/org/apache/sling/scripting/core/impl/SlingScriptAdapterFactory.java",
                "filename": "src/main/java/org/apache/sling/scripting/core/impl/SlingScriptAdapterFactory.java",
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-scripting-core/contents/src/main/java/org/apache/sling/scripting/core/impl/SlingScriptAdapterFactory.java?ref=ce44fbf2153ff3902ba6a6894a0cbca7e3bb3f1a"
            }
        ],
        "bug_id": "sling-org-apache-sling-scripting-core_5",
        "parent": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/f6574bfdbf5b12b9eb177739adce13618739e217",
        "message": "SLING-2172 : NPE in DefaultSlingScript#verifySlingBindings\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1155333 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "sling-org-apache-sling-scripting-core"
    },
    {
        "commit": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/c19376d0850fc6371dfdbd2a0b8daf1313b69ce6",
        "file": [
            {
                "patch": "@@ -134,6 +134,9 @@\n \n     // ---------- SlingScript interface ----------------------------------------\n \n+    /**\n+     * @see org.apache.sling.api.scripting.SlingScript#getScriptResource()\n+     */\n     public Resource getScriptResource() {\n         final ResourceResolver resolver = requestResourceResolver.get();\n         if ( resolver == null ) {\n@@ -202,8 +205,10 @@ public void setAttribute(String name, Object value, int scope) {\n             ctx.setWriter((Writer) bindings.get(OUT));\n             ctx.setErrorWriter(new LogWriter((Logger) bindings.get(LOG)));\n \n-            // set the current resource resolver\n-            requestResourceResolver.set(props.getRequest().getResourceResolver());\n+            // set the current resource resolver if a request is available from the bindings\n+            if ( props.getRequest() != null ) {\n+                requestResourceResolver.set(props.getRequest().getResourceResolver());\n+            }\n \n             // set the script resource resolver as an attribute\n             ctx.setAttribute(SlingScriptConstants.ATTR_SCRIPT_RESOURCE_RESOLVER,\n@@ -451,9 +456,9 @@ public boolean ready() throws IOException {\n         };\n     }\n \n-    private Bindings verifySlingBindings(SlingBindings slingBindings) throws IOException {\n+    private Bindings verifySlingBindings(final SlingBindings slingBindings) throws IOException {\n \n-    \tBindings bindings = new SimpleBindings();\n+    \tfinal Bindings bindings = new SimpleBindings();\n \n         final SlingHttpServletRequest request = slingBindings.getRequest();\n \n@@ -473,9 +478,7 @@ private Bindings verifySlingBindings(SlingBindings slingBindings) throws IOExcep\n         bindings.put(SLING, sling);\n \n         if (request != null) {\n-            //throw fail(REQUEST, \"Missing or wrong type\");\n-\n-        \tSlingHttpServletResponse response = slingBindings.getResponse();\n+        \tfinal SlingHttpServletResponse response = slingBindings.getResponse();\n             if (response == null) {\n                 throw fail(RESPONSE, \"Missing or wrong type\");\n             }",
                "additions": 10,
                "raw_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/raw/c19376d0850fc6371dfdbd2a0b8daf1313b69ce6/src/main/java/org/apache/sling/scripting/core/impl/DefaultSlingScript.java",
                "status": "modified",
                "changes": 17,
                "deletions": 7,
                "sha": "e93dfc6acde6bbe1c95a14ac80bb25d8c06442ee",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/blob/c19376d0850fc6371dfdbd2a0b8daf1313b69ce6/src/main/java/org/apache/sling/scripting/core/impl/DefaultSlingScript.java",
                "filename": "src/main/java/org/apache/sling/scripting/core/impl/DefaultSlingScript.java",
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-scripting-core/contents/src/main/java/org/apache/sling/scripting/core/impl/DefaultSlingScript.java?ref=c19376d0850fc6371dfdbd2a0b8daf1313b69ce6"
            }
        ],
        "bug_id": "sling-org-apache-sling-scripting-core_6",
        "parent": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/0440fac82a30f828c4e05581fc1989835d58221d",
        "message": "SLING-1422 : NPE when a script is called without a request binding\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@918350 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "sling-org-apache-sling-scripting-core"
    }
]